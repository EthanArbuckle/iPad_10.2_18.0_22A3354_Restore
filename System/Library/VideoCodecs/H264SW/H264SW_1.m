uint64_t sub_2160A3034(uint64_t result, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  __int16 *v12;
  char v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  _BOOL4 v17;
  int v18;
  int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  __int16 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  char v215;
  int v216;
  unsigned __int16 *v217;
  int v218;
  __int16 *v219;
  int v220;
  unsigned int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  unsigned int v530;
  _WORD *v531;
  __int16 *v532;
  unsigned int v533;
  uint64_t v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;

  v3 = 0;
  v4 = *(_QWORD *)(result + 40);
  v5 = *(unsigned __int8 *)(v4 + 52);
  v6 = *(_BYTE *)(v4 + 55);
  v7 = *(_QWORD *)(result + 56);
  v8 = *(unsigned __int8 *)(result + 1422192);
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  v9 = v6;
  a2[16] = 0u;
  a2[17] = 0u;
  v10 = v6 / 6u;
  v11 = v6 % 6u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  v217 = (unsigned __int16 *)((char *)&unk_2160F34F0 + 128 * v11);
  a2[10] = 0u;
  a2[11] = 0u;
  v12 = (__int16 *)(a3 + (v11 << 7));
  v13 = 6 - v10;
  a2[8] = 0u;
  a2[9] = 0u;
  v14 = 1 << (5 - v10);
  a2[6] = 0u;
  a2[7] = 0u;
  v15 = (unsigned __int16)(v10 - 6);
  v16 = v9 >= 0x24;
  v17 = v9 < 0x24;
  if (v16)
    v14 = 0;
  a2[4] = 0uLL;
  a2[5] = 0uLL;
  if (v16)
    v13 = 0;
  if (!v16)
    v15 = 0;
  v220 = v8;
  if (v8)
    v18 = v17;
  else
    v18 = 1;
  v218 = v18;
  a2[2] = 0uLL;
  a2[3] = 0uLL;
  *a2 = 0uLL;
  a2[1] = 0uLL;
  if (v8)
    v19 = v14;
  else
    v19 = 0;
  v216 = v19;
  if (v8)
    v20 = v13;
  else
    v20 = 0;
  v215 = v20;
  if (v8)
    v21 = v15;
  else
    v21 = 0;
  v222 = v21;
  if (v8)
    v22 = v10;
  else
    v22 = v10 - 2;
  v23 = (__int16 *)(v7 + 80);
  v219 = v12;
  do
  {
    if ((v5 & 1) != 0)
    {
      v533 = v5;
      v24 = *(v23 - 24);
      v25 = *(v23 - 21);
      v531 = (_WORD *)a2 + *(__int16 *)((char *)&word_2160F34E0 + v3);
      v578 = *(v23 - 16);
      v582 = *(v23 - 9);
      v441 = v23[6];
      v479 = v23[14];
      v545 = v23[28];
      v26 = *(v23 - 23);
      v27 = *(v23 - 20);
      v28 = *(v23 - 10);
      v401 = *(v23 - 3);
      v408 = *(v23 - 2);
      v494 = v23[13];
      v520 = v23[21];
      v562 = v23[29];
      v29 = *(v23 - 22);
      v30 = *(v23 - 17);
      v31 = *(v23 - 8);
      v389 = *(v23 - 1);
      v415 = v23[5];
      v420 = v23[7];
      v446 = v23[15];
      v525 = v23[22];
      v566 = v23[34];
      v32 = *(v23 - 19);
      v33 = *(v23 - 15);
      v34 = *(v23 - 4);
      v395 = v23[4];
      v424 = v23[12];
      v456 = v23[20];
      v505 = v23[27];
      v550 = v23[35];
      v35 = *(v23 - 18);
      v36 = *(v23 - 11);
      v37 = *v23;
      v433 = v23[8];
      v461 = v23[16];
      v484 = v23[23];
      v510 = v23[30];
      v554 = v23[36];
      v38 = *(v23 - 14);
      v39 = v23[1];
      v437 = v23[9];
      v467 = v23[17];
      v489 = v23[24];
      v515 = v23[31];
      v558 = v23[37];
      v40 = *(v23 - 13);
      v41 = *(v23 - 6);
      v42 = v23[2];
      v451 = v23[10];
      v474 = v23[18];
      v499 = v23[25];
      v535 = v23[32];
      v570 = v23[38];
      v43 = *(v23 - 12);
      v44 = *(v23 - 5);
      v45 = v23[3];
      v429 = v23[19];
      v470 = v23[26];
      v540 = v23[33];
      v46 = v222;
      if (!v220)
        v46 = v22;
      v532 = v23;
      v574 = v23[39];
      v534 = v3;
      v530 = v46;
      if (v220)
      {
        v47 = v23[11];
        v48 = *(v23 - 7);
        v49 = v582;
        if (v218)
        {
          v380 = v216 + v219[2] * v29;
          v363 = v216 + v219[7] * v43;
          v347 = v216 + v219[10] * v30;
          v334 = v216 + v219[12] * v36;
          v295 = v216 + v219[19] * v34;
          v285 = v216 + v219[21] * v39;
          v291 = v216 + v219[20] * v37;
          v279 = v216 + v219[22] * v42;
          v583 = v216 + v219[25] * v401;
          v50 = v216 + v219[27] * v395;
          v396 = v216 + v219[28] * v433;
          v402 = v216 + v219[26] * v389;
          v263 = v216 + v219[30] * v451;
          v269 = v216 + v219[29] * v437;
          v258 = v216 + v219[31] * v47;
          v51 = v216 + v219[32] * v408;
          v409 = v216 + v219[36] * v461;
          v249 = v216 + v219[40] * v441;
          v253 = v216 + v219[39] * v429;
          v245 = v216 + v219[41] * v494;
          v234 = v216 + v219[43] * v456;
          v238 = v216 + v219[42] * v446;
          v227 = v216 + v219[46] * v499;
          v231 = v216 + v219[45] * v489;
          v223 = v216 + v219[47] * v470;
          v52 = v216 + v219[48] * v479;
          v53 = v216 + v219[49] * v520;
          v54 = v216 + v219[50] * v525;
          v55 = v216 + v219[51] * v505;
          v56 = v216 + v219[53] * v515;
          v57 = v216 + v219[54] * v535;
          v58 = v216 + v219[55] * v540;
          v59 = v216 + v219[56] * v545;
          v546 = (*v219 * v24 + v216) >> v215;
          v541 = (v216 + v219[1] * v26) >> v215;
          v536 = v380 >> v215;
          v516 = (v216 + v219[3] * v32) >> v215;
          v500 = (v216 + v219[4] * v35) >> v215;
          v60 = (v216 + v219[5] * v38) >> v215;
          v490 = (v216 + v219[6] * v40) >> v215;
          v471 = v363 >> v215;
          v385 = (v216 + v219[8] * v25) >> v215;
          v390 = (v216 + v219[9] * v27) >> v215;
          v307 = v347 >> v215;
          v311 = (v216 + v219[11] * v33) >> v215;
          v314 = v334 >> v215;
          v303 = (v216 + v219[13] * v48) >> v215;
          v322 = (v216 + v219[14] * v41) >> v215;
          v318 = (v216 + v219[15] * v44) >> v215;
          v462 = (v216 + v219[16] * v578) >> v215;
          v457 = (v216 + v219[17] * v28) >> v215;
          v452 = (v216 + v219[18] * v31) >> v215;
          v447 = v295 >> v215;
          v442 = v291 >> v215;
          v438 = v285 >> v215;
          v434 = v279 >> v215;
          v430 = (v216 + v219[23] * v45) >> v215;
          v242 = (v216 + v219[24] * v49) >> v215;
          v61 = v583 >> v215;
          v275 = v402 >> v215;
          v280 = v50 >> v215;
          v286 = v396 >> v215;
          v300 = v263 >> v215;
          v292 = v269 >> v215;
          v296 = v258 >> v215;
          v526 = v51 >> v215;
          v521 = (v216 + v219[33] * v415) >> v215;
          v506 = (v216 + v219[34] * v420) >> v215;
          v495 = (v216 + v219[35] * v424) >> v215;
          v62 = v409 >> v215;
          v480 = (v216 + v219[37] * v467) >> v215;
          v475 = (v216 + v219[38] * v474) >> v215;
          v425 = v253 >> v215;
          v63 = v249 >> v215;
          v246 = v245 >> v215;
          v64 = v238 >> v215;
          v65 = v234 >> v215;
          v270 = (v216 + v219[44] * v484) >> v215;
          v264 = v231 >> v215;
          v259 = v227 >> v215;
          v375 = v52 >> v215;
          v369 = v53 >> v215;
          v364 = v54 >> v215;
          v358 = v55 >> v215;
          v348 = (v216 + v219[52] * v510) >> v215;
          v341 = v56 >> v215;
          v250 = v57 >> v215;
          v254 = v58 >> v215;
          v66 = v59 >> v215;
          v67 = (v216 + v219[57] * v562) >> v215;
          v68 = (v216 + v219[58] * v566) >> v215;
          v69 = (v216 + v219[59] * v550) >> v215;
          v70 = (v216 + v219[60] * v554) >> v215;
          v71 = (v216 + v219[61] * v558) >> v215;
          v72 = (v216 + v219[62] * v570) >> v215;
          v73 = (v216 + v219[63] * v574) >> v215;
          v74 = v223 >> v215;
        }
        else
        {
          v85 = v219[2] * v29;
          v370 = v219[7] * v43;
          v353 = v219[10] * v30;
          v342 = v219[12] * v36;
          v335 = v219[14] * v41;
          v297 = v219[19] * v34;
          v287 = v219[21] * v39;
          v281 = v219[22] * v42;
          v584 = v219[25] * v401;
          v86 = v219[27] * v395;
          v397 = v219[28] * v433;
          v403 = v219[26] * v389;
          v266 = v219[30] * v451;
          v272 = v219[29] * v437;
          v261 = v219[31] * v47;
          v87 = v219[32] * v408;
          v88 = v219[36] * v461;
          v410 = v219[39] * v429;
          v252 = v219[41] * v494;
          v256 = v219[40] * v441;
          v236 = v219[43] * v456;
          v240 = v219[42] * v446;
          v229 = v219[46] * v499;
          v233 = v219[45] * v489;
          v225 = v219[47] * v470;
          v89 = *v219 * v24;
          v90 = v219[48] * v479;
          v91 = v219[49] * v520;
          v92 = v219[50] * v525;
          v93 = v219[51] * v505;
          v94 = v219[53] * v515;
          v95 = v219[54] * v535;
          v96 = v219[55] * v540;
          v97 = v219[56] * v545;
          v546 = v89 << v222;
          v541 = (v219[1] * v26) << v222;
          v536 = v85 << v222;
          v516 = (v219[3] * v32) << v222;
          v500 = (v219[4] * v35) << v222;
          v60 = (v219[5] * v38) << v222;
          v490 = (v219[6] * v40) << v222;
          v471 = v370 << v222;
          v385 = (v219[8] * v25) << v222;
          v390 = (v219[9] * v27) << v222;
          v307 = v353 << v222;
          v311 = (v219[11] * v33) << v222;
          v303 = (v219[13] * v48) << v222;
          v322 = v335 << v222;
          v314 = v342 << v222;
          v318 = (v219[15] * v44) << v222;
          v462 = (v219[16] * v578) << v222;
          v452 = (v219[18] * v31) << v222;
          v457 = (v219[17] * v28) << v222;
          v442 = (v219[20] * v37) << v222;
          v447 = v297 << v222;
          v434 = v281 << v222;
          v438 = v287 << v222;
          v430 = (v219[23] * v45) << v222;
          v242 = (v219[24] * v49) << v222;
          v61 = v584 << v222;
          v275 = v403 << v222;
          v280 = v86 << v222;
          v286 = v397 << v222;
          v292 = v272 << v222;
          v296 = v261 << v222;
          v300 = v266 << v222;
          v526 = v87 << v222;
          v521 = (v219[33] * v415) << v222;
          v506 = (v219[34] * v420) << v222;
          v495 = (v219[35] * v424) << v222;
          v480 = (v219[37] * v467) << v222;
          v475 = (v219[38] * v474) << v222;
          v425 = v410 << v222;
          v62 = v88 << v222;
          v63 = v256 << v222;
          v246 = v252 << v222;
          v64 = v240 << v222;
          v65 = v236 << v222;
          v264 = v233 << v222;
          v270 = (v219[44] * v484) << v222;
          v259 = v229 << v222;
          v74 = v225 << v222;
          v369 = v91 << v222;
          v375 = v90 << v222;
          v358 = v93 << v222;
          v364 = v92 << v222;
          v341 = v94 << v222;
          v348 = (v219[52] * v510) << v222;
          v250 = v95 << v222;
          v254 = v96 << v222;
          v66 = v97 << v222;
          v67 = (v219[57] * v562) << v222;
          v68 = (v219[58] * v566) << v222;
          v69 = (v219[59] * v550) << v222;
          v70 = (v219[60] * v554) << v222;
          v71 = (v219[61] * v558) << v222;
          v72 = (v219[62] * v570) << v222;
          v73 = (v219[63] * v574) << v222;
        }
      }
      else
      {
        v271 = v217[28] * (unsigned __int16)v433;
        v276 = v217[26] * (unsigned __int16)v389;
        v260 = v217[30] * (unsigned __int16)v451;
        v265 = v217[29] * (unsigned __int16)v437;
        v251 = v217[39] * (unsigned __int16)v429;
        v255 = v217[36] * (unsigned __int16)v461;
        v247 = v217[40] * (unsigned __int16)v441;
        v235 = v217[42] * (unsigned __int16)v446;
        v239 = v217[41] * (unsigned __int16)v494;
        v228 = v217[45] * (unsigned __int16)v489;
        v232 = v217[43] * (unsigned __int16)v456;
        v224 = v217[46] * (unsigned __int16)v499;
        v75 = v217[47] * (unsigned __int16)v470;
        v76 = v217[48] * (unsigned __int16)v479;
        v77 = v217[49] * (unsigned __int16)v520;
        v78 = v217[50] * (unsigned __int16)v525;
        v79 = v217[51] * (unsigned __int16)v505;
        v80 = v217[53] * (unsigned __int16)v515;
        v81 = v217[54] * (unsigned __int16)v535;
        v82 = v217[55] * (unsigned __int16)v540;
        v83 = v217[56] * (unsigned __int16)v545;
        v546 = (*v217 * (unsigned __int16)*(v23 - 24)) << v22;
        v541 = (v217[1] * (unsigned __int16)*(v23 - 23)) << v22;
        v536 = (v217[2] * (unsigned __int16)*(v23 - 22)) << v22;
        v516 = (v217[3] * (unsigned __int16)*(v23 - 19)) << v22;
        v500 = (v217[4] * (unsigned __int16)*(v23 - 18)) << v22;
        v60 = (v217[5] * (unsigned __int16)*(v23 - 14)) << v22;
        v490 = (v217[6] * (unsigned __int16)*(v23 - 13)) << v22;
        v471 = (v217[7] * (unsigned __int16)*(v23 - 12)) << v22;
        v385 = (v217[8] * (unsigned __int16)*(v23 - 21)) << v22;
        v390 = (v217[9] * (unsigned __int16)*(v23 - 20)) << v22;
        v307 = (v217[10] * (unsigned __int16)*(v23 - 17)) << v22;
        v311 = (v217[11] * (unsigned __int16)*(v23 - 15)) << v22;
        v314 = (v217[12] * (unsigned __int16)*(v23 - 11)) << v22;
        v303 = (v217[13] * (unsigned __int16)*(v23 - 7)) << v22;
        v322 = (v217[14] * (unsigned __int16)*(v23 - 6)) << v22;
        v318 = (v217[15] * (unsigned __int16)*(v23 - 5)) << v22;
        v462 = (v217[16] * (unsigned __int16)v578) << v22;
        v457 = (v217[17] * (unsigned __int16)*(v23 - 10)) << v22;
        v452 = (v217[18] * (unsigned __int16)*(v23 - 8)) << v22;
        v447 = (v217[19] * (unsigned __int16)*(v23 - 4)) << v22;
        v442 = (v217[20] * (unsigned __int16)*v23) << v22;
        v438 = (v217[21] * (unsigned __int16)v23[1]) << v22;
        v434 = (v217[22] * (unsigned __int16)v23[2]) << v22;
        v430 = (v217[23] * (unsigned __int16)v23[3]) << v22;
        v242 = (v217[24] * (unsigned __int16)v582) << v22;
        v275 = v276 << v22;
        v280 = (v217[27] * (unsigned __int16)v395) << v22;
        v286 = v271 << v22;
        v300 = v260 << v22;
        v292 = v265 << v22;
        v296 = (v217[31] * (unsigned __int16)v23[11]) << v22;
        v526 = (v217[32] * (unsigned __int16)v408) << v22;
        v521 = (v217[33] * (unsigned __int16)v415) << v22;
        v506 = (v217[34] * (unsigned __int16)v420) << v22;
        v495 = (v217[35] * (unsigned __int16)v424) << v22;
        v84 = v255 << v22;
        v480 = (v217[37] * (unsigned __int16)v467) << v22;
        v475 = (v217[38] * (unsigned __int16)v474) << v22;
        v425 = v251 << v22;
        v63 = v247 << v22;
        v246 = v239 << v22;
        v65 = v232 << v22;
        v264 = v228 << v22;
        v270 = (v217[44] * (unsigned __int16)v484) << v22;
        v74 = v75 << v22;
        v375 = v76 << v22;
        v364 = v78 << v22;
        v369 = v77 << v22;
        v358 = v79 << v22;
        v341 = v80 << v22;
        v348 = (v217[52] * (unsigned __int16)v510) << v22;
        v250 = v81 << v22;
        v254 = v82 << v22;
        v259 = v224 << v22;
        v66 = v83 << v22;
        v67 = (v217[57] * (unsigned __int16)v562) << v22;
        v68 = (v217[58] * (unsigned __int16)v566) << v22;
        v69 = (v217[59] * (unsigned __int16)v550) << v22;
        v70 = (v217[60] * (unsigned __int16)v554) << v22;
        v71 = (v217[61] * (unsigned __int16)v558) << v22;
        v72 = (v217[62] * (unsigned __int16)v570) << v22;
        v64 = v235 << v22;
        v73 = (v217[63] * (unsigned __int16)v574) << v22;
        v62 = v84;
        v61 = (v217[25] * (unsigned __int16)v401) << v22;
      }
      v585 = v63 - v242 - (v66 + ((__int16)v66 >> 1));
      v579 = v246 - v61 - (v67 + ((__int16)v67 >> 1));
      v575 = v64 - v275 - (v68 + ((__int16)v68 >> 1));
      v571 = v65 - v280 - (v69 + ((__int16)v69 >> 1));
      v567 = v270 - v286 - (v70 + ((__int16)v70 >> 1));
      v563 = v264 - v292 - (v71 + ((__int16)v71 >> 1));
      v559 = v259 - v300 - (v72 + ((__int16)v72 >> 1));
      v555 = v74 - v296 - (v73 + ((__int16)v73 >> 1));
      v551 = v546 + v526;
      v511 = v546 - v526;
      v547 = v541 + v521;
      v527 = v541 - v521;
      v542 = v536 + v506;
      v522 = v536 - v506;
      v537 = v516 + v495;
      v517 = v516 - v495;
      v507 = v500 + v62;
      v485 = v500 - v62;
      v416 = v246 + v67 + ((__int16)v246 >> 1);
      v501 = v60 + v480;
      v481 = v60 - v480;
      v496 = v490 + v475;
      v476 = v490 - v475;
      v491 = v471 + v425;
      v472 = v471 - v425;
      v404 = v67 - (v61 + ((__int16)v61 >> 1));
      v411 = v68 - (v275 + ((__int16)v275 >> 1));
      v98 = v64;
      v99 = v64 + v68 + ((__int16)v64 >> 1);
      v100 = v69 - (v280 + ((__int16)v280 >> 1));
      v101 = v65 + v69 + ((__int16)v65 >> 1);
      v381 = v70 - (v286 + ((__int16)v286 >> 1));
      v102 = v270 + v70 + ((__int16)v270 >> 1);
      v354 = v71 - (v292 + ((__int16)v292 >> 1));
      v336 = v264 + v71 + ((__int16)v264 >> 1);
      v103 = v72 - (v300 + ((__int16)v300 >> 1));
      v326 = v259 + v72 + ((__int16)v259 >> 1);
      v104 = v74 + v73 + ((__int16)v74 >> 1);
      v426 = ((__int16)v462 >> 1) - v375;
      v463 = v462 + ((__int16)v375 >> 1);
      v376 = ((__int16)v457 >> 1) - v369;
      v105 = v457 + ((__int16)v369 >> 1);
      v371 = ((__int16)v452 >> 1) - v364;
      v453 = v452 + ((__int16)v364 >> 1);
      v458 = v105;
      v365 = ((__int16)v447 >> 1) - v358;
      v106 = v447 + ((__int16)v358 >> 1);
      v359 = ((__int16)v442 >> 1) - v348;
      v443 = v442 + ((__int16)v348 >> 1);
      v349 = ((__int16)v438 >> 1) - v341;
      v439 = v438 + ((__int16)v341 >> 1);
      v343 = ((__int16)v434 >> 1) - v250;
      v107 = ((__int16)v430 >> 1) - v254;
      v431 = v430 + ((__int16)v254 >> 1);
      v435 = v434 + ((__int16)v250 >> 1);
      v108 = v280 + v65 + v311;
      v109 = v296 + v74 + v318;
      v110 = v66 - (v242 + ((__int16)v242 >> 1)) + v385;
      v111 = v63 + v66 + ((__int16)v63 >> 1) - v385;
      v112 = v404 + v390;
      v113 = v416 - v390;
      v386 = v242 + v63 + v385 + ((__int16)v385 >> 1);
      v391 = v61 + v246 + v390 + ((__int16)v390 >> 1);
      v114 = v411 + v307;
      v115 = v99 - v307;
      v116 = v275 + v98 + v307 + ((__int16)v307 >> 1);
      v117 = v100 + v311;
      v118 = v101 - v311;
      v119 = v381 + v314;
      v120 = v102 - v314;
      v398 = v108 + ((__int16)v311 >> 1);
      v405 = v286 + v270 + v314 + ((__int16)v314 >> 1);
      v121 = v354 + v303;
      v122 = v336 - v303;
      v123 = v103 + v322;
      v124 = v326 - v322;
      v412 = v292 + v264 + v303 + ((__int16)v303 >> 1);
      v417 = v300 + v259 + v322 + ((__int16)v322 >> 1);
      v125 = v73 - (v296 + ((__int16)v296 >> 1)) + v318;
      v126 = v104 - v318;
      v421 = v109 + ((__int16)v318 >> 1);
      v468 = v511 + v426;
      v382 = v511 - v426;
      v427 = v527 + v376;
      v377 = v527 - v376;
      v528 = v522 + v371;
      v372 = v522 - v371;
      v523 = v517 + v365;
      v366 = v517 - v365;
      v518 = v485 + v359;
      v355 = v485 - v359;
      v486 = v481 + v349;
      v350 = v481 - v349;
      v482 = v476 + v343;
      v337 = v476 - v343;
      v477 = v472 + v107;
      v473 = v472 - v107;
      v360 = v110 + ((__int16)v111 >> 2);
      v323 = ((__int16)v110 >> 2) - v111;
      v344 = v112 + ((__int16)v113 >> 2);
      v319 = ((__int16)v112 >> 2) - v113;
      v312 = ((__int16)v114 >> 2) - v115;
      v315 = v114 + ((__int16)v115 >> 2);
      v308 = ((__int16)v117 >> 2) - v118;
      v327 = v119 + ((__int16)v120 >> 2);
      v330 = v117 + ((__int16)v118 >> 2);
      v304 = ((__int16)v119 >> 2) - v120;
      v127 = v121 + ((__int16)v122 >> 2);
      v301 = ((__int16)v121 >> 2) - v122;
      v128 = v123 + ((__int16)v124 >> 2);
      v298 = ((__int16)v123 >> 2) - v124;
      v129 = v125 + ((__int16)v126 >> 2);
      v267 = ((__int16)v125 >> 2) - v126;
      v288 = v551 + v463;
      v130 = v551 - v463;
      v464 = v547 + v458;
      v131 = v547 - v458;
      v459 = v542 + v453;
      v132 = v542 - v453;
      v454 = v537 + v106;
      v282 = v507 + v443;
      v133 = v507 - v443;
      v241 = v501 + v439;
      v134 = v501 - v439;
      v237 = v496 + v435;
      v135 = v496 - v435;
      v136 = v585 + ((__int16)v386 >> 2);
      v137 = v386 - ((__int16)v585 >> 2);
      v138 = v579 + ((__int16)v391 >> 2);
      v139 = v391 - ((__int16)v579 >> 2);
      v140 = v575 + ((__int16)v116 >> 2);
      v141 = v116 - ((__int16)v575 >> 2);
      v142 = v571 + ((__int16)v398 >> 2);
      v143 = v398 - ((__int16)v571 >> 2);
      v144 = v567 + ((__int16)v405 >> 2);
      v145 = v405 - ((__int16)v567 >> 2);
      v146 = v563 + ((__int16)v412 >> 2);
      v147 = v412 - ((__int16)v563 >> 2);
      v148 = v559 + ((__int16)v417 >> 2);
      v149 = v417 - ((__int16)v559 >> 2);
      v150 = v555 + ((__int16)v421 >> 2);
      v151 = v421 - ((__int16)v555 >> 2);
      v512 = v130 + v136;
      v508 = v130 - v136;
      v568 = v131 + v138;
      v586 = v131 - v138;
      v418 = v132 + v140;
      v422 = v132 - v140;
      v552 = v537 - v106 + v142;
      v548 = v537 - v106 - v142;
      v497 = v133 + v144;
      v502 = v133 - v144;
      v277 = v134 + v146;
      v556 = v134 - v146;
      v406 = v135 + v148;
      v413 = v135 - v148;
      v543 = v491 - v431 + v150;
      v243 = v491 - v431 - v150;
      v444 = v382 + v360;
      v448 = v382 - v360;
      v564 = v377 + v344;
      v580 = v377 - v344;
      v345 = v372 + v315;
      v361 = v372 - v315;
      v152 = v366 + v330;
      v230 = v366 - v330;
      v273 = v350 + v127;
      v257 = v350 - v127;
      v331 = v337 + v128;
      v351 = v337 - v128;
      v153 = v473 + v129;
      v538 = v473 - v129;
      v154 = v468 + v323;
      v155 = v468 - v323;
      v560 = v427 + v319;
      v576 = v427 - v319;
      v316 = v528 + v312;
      v338 = v528 - v312;
      v156 = v523 + v308;
      v226 = v523 - v308;
      v157 = v518 + v304;
      v158 = v518 - v304;
      v293 = v486 + v301;
      v262 = v486 - v301;
      v309 = v482 + v298;
      v324 = v482 - v298;
      v159 = v477 + v267;
      v160 = v477 - v267;
      v161 = v288 + v137;
      v162 = v288 - v137;
      v163 = v464 + v139;
      v572 = v464 - v139;
      v302 = v459 + v141;
      v320 = v459 - v141;
      v164 = v454 + v143;
      v165 = v454 - v143;
      v166 = v282 + v145;
      v167 = v282 - v145;
      v283 = v241 - v147;
      v289 = v241 + v147;
      v168 = v491 + v431 + v151;
      v169 = v491 + v431 - v151;
      v465 = v289 - v164 - (v168 + ((__int16)v168 >> 1));
      v460 = v293 - v156 - (v477 + v267 + ((v477 + v267) << 16 >> 17));
      v492 = v273 - v152 - (v153 + ((__int16)v153 >> 1));
      v487 = v277 - v552 - (v543 + ((__int16)v543 >> 1));
      v483 = v556 - v548 - (v243 + ((__int16)v243 >> 1));
      v478 = v257 - v230 - (v538 + ((__int16)v538 >> 1));
      v469 = v283 - v165 - (v169 + ((__int16)v169 >> 1));
      v455 = v161 + v166;
      v305 = v161 - v166;
      v529 = v154 + v157;
      v399 = v154 - v157;
      v524 = v444 + v355 + v327;
      v392 = v444 - (v355 + v327);
      v519 = v512 + v497;
      v387 = v512 - v497;
      v513 = v508 + v502;
      v383 = v508 - v502;
      v509 = v448 + v355 - v327;
      v378 = v448 - (v355 - v327);
      v503 = v155 + v158;
      v373 = v155 - v158;
      v498 = v162 + v167;
      v367 = v162 - v167;
      v268 = v164;
      v328 = v168 + v163 - (v164 + ((__int16)v164 >> 1));
      v248 = v152;
      v356 = v159 + v560 - (v156 + ((__int16)v156 >> 1));
      v449 = v153 + v564 - (v152 + ((__int16)v152 >> 1));
      v445 = v543 + v568 - (v552 + ((__int16)v552 >> 1));
      v440 = v243 + v586 - (v548 + ((__int16)v548 >> 1));
      v436 = v538 + v580 - (v230 + ((__int16)v230 >> 1));
      v432 = v160 + v576 - (v226 + ((__int16)v226 >> 1));
      v170 = v165;
      v428 = v169 + v572 - (v165 + ((__int16)v165 >> 1));
      v171 = v277 + v543 + ((__int16)v277 >> 1);
      v172 = v556 + v243 + ((__int16)v556 >> 1);
      v173 = v257 + v538 + ((__int16)v257 >> 1);
      v174 = v283 + v169 + ((__int16)v283 >> 1);
      v244 = ((__int16)v302 >> 1) - (v237 + v149);
      v544 = v302 + ((__int16)(v237 + v149) >> 1);
      v539 = v316 + ((__int16)v309 >> 1);
      v175 = ((__int16)v345 >> 1) - v331;
      v346 = v345 + ((__int16)v331 >> 1);
      v176 = ((__int16)v418 >> 1) - v406;
      v419 = v418 + ((__int16)v406 >> 1);
      v177 = ((__int16)v422 >> 1) - v413;
      v423 = v422 + ((__int16)v413 >> 1);
      v178 = ((__int16)v361 >> 1) - v351;
      v414 = v361 + ((__int16)v351 >> 1);
      v179 = ((__int16)v338 >> 1) - v324;
      v407 = v338 + ((__int16)v324 >> 1);
      v180 = ((__int16)v320 >> 1) - (v237 - v149);
      v362 = v320 + ((__int16)(v237 - v149) >> 1);
      v181 = v289 + v168 + ((__int16)v289 >> 1) - v163;
      v182 = v268 + v289 + v163 + ((__int16)v163 >> 1);
      v183 = v293 + v159 + ((__int16)v293 >> 1) - v560;
      v184 = v156 + v293 + v560 + ((__int16)v560 >> 1);
      v185 = v273 + v153 + ((__int16)v273 >> 1) - v564;
      v186 = v248 + v273 + v564 + ((__int16)v564 >> 1);
      v339 = v171 - v568;
      v187 = v552 + v277 + v568 + ((__int16)v568 >> 1);
      v332 = v172 - v586;
      v188 = v548 + v556 + v586 + ((__int16)v586 >> 1);
      v189 = v173 - v580;
      v190 = v230 + v257 + v580 + ((__int16)v580 >> 1);
      v191 = v262 + v160 + ((__int16)v262 >> 1) - v576;
      v192 = v226 + v262 + v576 + ((__int16)v576 >> 1);
      v193 = v174 - v572;
      v194 = v170 + v283 + v572 + ((__int16)v572 >> 1);
      v587 = v305 + v244;
      v561 = v305 - v244;
      v195 = ((__int16)v316 >> 1) - v309;
      v581 = v399 + v195;
      v557 = v399 - v195;
      v577 = v392 + v175;
      v553 = v392 - v175;
      v573 = v387 + v176;
      v549 = v387 - v176;
      v569 = v383 + v177;
      v352 = v383 - v177;
      v565 = v378 + v178;
      v379 = v378 - v178;
      v388 = v373 + v179;
      v374 = v373 - v179;
      v384 = v367 + v180;
      v368 = v367 - v180;
      v400 = v328 + ((__int16)v181 >> 2);
      v329 = ((__int16)v328 >> 2) - v181;
      v393 = v356 + ((__int16)v183 >> 2);
      v357 = ((__int16)v356 >> 2) - v183;
      v294 = v465 + ((__int16)v182 >> 2);
      v196 = v182 - ((__int16)v465 >> 2);
      v466 = v460 + ((__int16)v184 >> 2);
      v321 = v184 - ((__int16)v460 >> 2);
      v325 = v196;
      v278 = v492 + ((__int16)v186 >> 2);
      v197 = v186 - ((__int16)v492 >> 2);
      v493 = v487 + ((__int16)v187 >> 2);
      v313 = v187 - ((__int16)v487 >> 2);
      v317 = v197;
      v198 = v483 + ((__int16)v188 >> 2);
      v199 = v478 + ((__int16)v190 >> 2);
      v306 = v190 - ((__int16)v478 >> 2);
      v310 = v188 - ((__int16)v483 >> 2);
      v200 = v262 - v226 - (v160 + ((__int16)v160 >> 1));
      v201 = v200 + ((__int16)v192 >> 2);
      v202 = v192 - ((__int16)v200 >> 2);
      v203 = v469 + ((__int16)v194 >> 2);
      v299 = v194 - ((__int16)v469 >> 2);
      v204 = v449 + ((__int16)v185 >> 2);
      v290 = ((__int16)v449 >> 2) - v185;
      v205 = v445 + ((__int16)v339 >> 2);
      v284 = ((__int16)v445 >> 2) - v339;
      v206 = v440 + ((__int16)v332 >> 2);
      v333 = ((__int16)v440 >> 2) - v332;
      v207 = v436 + ((__int16)v189 >> 2);
      v274 = ((__int16)v436 >> 2) - v189;
      v208 = v432 + ((__int16)v191 >> 2);
      v340 = ((__int16)v432 >> 2) - v191;
      v209 = v428 + ((__int16)v193 >> 2);
      v210 = ((__int16)v428 >> 2) - v193;
      v211 = v513 + v423;
      v212 = v513 - v423;
      v213 = v503 + v407;
      v450 = v201 + v503 - v407;
      v488 = v503 - v407 - v201;
      v214 = v393 + v557;
      v504 = v557 - v393;
      v394 = v205 + v549;
      v514 = v549 - v205;
      result = (v306 + v509 + v414);
      *v531 = (((v325 + v455 + v544) << 16) + 0x200000) >> 22;
      v531[1] = (((v321 + v529 + v539) << 16) + 0x200000) >> 22;
      v531[2] = (((v317 + v524 + v346) << 16) + 0x200000) >> 22;
      v531[3] = (((v313 + v519 + v419) << 16) + 0x200000) >> 22;
      v531[4] = (((v310 + v211) << 16) + 0x200000) >> 22;
      v531[5] = (((_DWORD)result << 16) + 0x200000) >> 22;
      v531[6] = (((v202 + v213) << 16) + 0x200000) >> 22;
      v531[7] = (((v299 + v498 + v362) << 16) + 0x200000) >> 22;
      v531[16] = (((v329 + v587) << 16) + 0x200000) >> 22;
      v531[17] = (((v357 + v581) << 16) + 0x200000) >> 22;
      v531[18] = (((v290 + v577) << 16) + 0x200000) >> 22;
      v531[19] = (((v284 + v573) << 16) + 0x200000) >> 22;
      v531[20] = (((v333 + v569) << 16) + 0x200000) >> 22;
      v531[21] = (((v274 + v565) << 16) + 0x200000) >> 22;
      v531[22] = (((v340 + v388) << 16) + 0x200000) >> 22;
      v531[23] = (((v210 + v384) << 16) + 0x200000) >> 22;
      v531[32] = (((v400 + v561) << 16) + 0x200000) >> 22;
      v531[33] = ((v214 << 16) + 0x200000) >> 22;
      v531[34] = (((v204 + v553) << 16) + 0x200000) >> 22;
      v531[35] = ((v394 << 16) + 0x200000) >> 22;
      v531[36] = (((v206 + v352) << 16) + 0x200000) >> 22;
      v531[37] = (((v207 + v379) << 16) + 0x200000) >> 22;
      v531[38] = (((v208 + v374) << 16) + 0x200000) >> 22;
      v531[39] = (((v209 + v368) << 16) + 0x200000) >> 22;
      v531[48] = (((v294 + v455 - v544) << 16) + 0x200000) >> 22;
      v531[49] = (((v466 + v529 - v539) << 16) + 0x200000) >> 22;
      v531[50] = (((v278 + v524 - v346) << 16) + 0x200000) >> 22;
      v531[51] = (((v493 + v519 - v419) << 16) + 0x200000) >> 22;
      v531[52] = (((v198 + v212) << 16) + 0x200000) >> 22;
      v531[53] = (((v199 + v509 - v414) << 16) + 0x200000) >> 22;
      v531[54] = ((v450 << 16) + 0x200000) >> 22;
      v531[55] = (((v203 + v498 - v362) << 16) + 0x200000) >> 22;
      v531[64] = (((v455 - v544 - v294) << 16) + 0x200000) >> 22;
      v531[65] = (((v529 - v539 - v466) << 16) + 0x200000) >> 22;
      v531[66] = (((v524 - v346 - v278) << 16) + 0x200000) >> 22;
      v531[67] = (((v519 - v419 - v493) << 16) + 0x200000) >> 22;
      v531[68] = (((v212 - v198) << 16) + 0x200000) >> 22;
      v531[69] = (((v509 - v414 - v199) << 16) + 0x200000) >> 22;
      v531[70] = ((v488 << 16) + 0x200000) >> 22;
      v531[71] = (((v498 - v362 - v203) << 16) + 0x200000) >> 22;
      v531[80] = (((v561 - v400) << 16) + 0x200000) >> 22;
      v531[81] = ((v504 << 16) + 0x200000) >> 22;
      v531[82] = (((v553 - v204) << 16) + 0x200000) >> 22;
      v531[83] = ((v514 << 16) + 0x200000) >> 22;
      v531[84] = (((v352 - v206) << 16) + 0x200000) >> 22;
      v531[85] = (((v379 - v207) << 16) + 0x200000) >> 22;
      v531[86] = (((v374 - v208) << 16) + 0x200000) >> 22;
      v531[87] = (((v368 - v209) << 16) + 0x200000) >> 22;
      v531[96] = (((v587 - v329) << 16) + 0x200000) >> 22;
      v531[97] = (((v581 - v357) << 16) + 0x200000) >> 22;
      v531[98] = (((v577 - v290) << 16) + 0x200000) >> 22;
      v531[99] = (((v573 - v284) << 16) + 0x200000) >> 22;
      v531[100] = (((v569 - v333) << 16) + 0x200000) >> 22;
      v531[101] = (((v565 - v274) << 16) + 0x200000) >> 22;
      v531[102] = (((v388 - v340) << 16) + 0x200000) >> 22;
      v531[103] = (((v384 - v210) << 16) + 0x200000) >> 22;
      v531[112] = (((v455 + v544 - v325) << 16) + 0x200000) >> 22;
      v531[113] = (((v529 + v539 - v321) << 16) + 0x200000) >> 22;
      v531[114] = (((v524 + v346 - v317) << 16) + 0x200000) >> 22;
      v531[115] = (((v519 + v419 - v313) << 16) + 0x200000) >> 22;
      v531[116] = (((v211 - v310) << 16) + 0x200000) >> 22;
      v531[117] = (((v509 + v414 - v306) << 16) + 0x200000) >> 22;
      v531[118] = (((v213 - v202) << 16) + 0x200000) >> 22;
      v531[119] = (((v498 + v362 - v299) << 16) + 0x200000) >> 22;
      v22 = v530;
      v3 = v534;
      v5 = v533;
      v23 = v532;
    }
    v5 >>= 1;
    v3 += 2;
    v23 += 64;
  }
  while (v3 != 8);
  return result;
}

uint64_t sub_2160A5C40(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int8x16_t *v7;
  int v8;
  unsigned int v9;
  int16x8_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int32x4_t v16;
  uint16x8_t v17;
  int32x4_t v18;
  int8x16_t *v19;
  int16x8_t v20;
  int16x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int64x2_t v41;
  int16x8_t *v42;
  int64x2_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int64x2_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  _BYTE v67[16];
  uint64_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;

  v2 = 0;
  v68 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 40);
  v4 = *(unsigned __int8 *)(v3 + 52);
  v5 = *(unsigned __int8 *)(v3 + 55);
  do
  {
    v6 = v4 & 1;
    v4 >>= 1;
    *(_DWORD *)&v67[v2] = -v6;
    v2 += 4;
  }
  while (v2 != 16);
  v7 = *(int8x16_t **)(result + 56);
  v8 = *(unsigned __int8 *)(result + 1422192);
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  v9 = (171 * v5) >> 10;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v10 = *(int16x8_t *)&asc_2160F3480[16 * (((_BYTE)v5 - 6 * (_BYTE)v9) & 0x1F)];
  if (v8)
  {
    if (v5 < 0x18)
    {
      v14 = 0;
      v13 = v9 - 4;
      v11 = 1;
      v12 = 1 << (3 - v9);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = v9 - 4;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v10 = (int16x8_t)vshlq_u16((uint16x8_t)v10, (uint16x8_t)vdupq_n_s16(v9));
    v11 = 1;
  }
  v15 = 0;
  v16 = (int32x4_t)v12;
  v17 = (uint16x8_t)vdupq_n_s16(v14);
  v18 = vdupq_n_s32(v13);
  v19 = v7 + 3;
  v20.i64[0] = -1;
  v20.i64[1] = -1;
  v21.i64[0] = 0x5000500050005;
  v21.i64[1] = 0x5000500050005;
  do
  {
    if (*(_WORD *)&v67[v15 * 2])
    {
      v22 = v19[-1];
      v23 = v19[1];
      v24 = v19[2];
      v71.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v22, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
      v71.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*v19, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
      v25 = (int16x8_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_2160F2D30);
      v71.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v22, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
      v71.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*v19, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
      v26 = (int16x8_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_2160F2D70);
      v69.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v23, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
      v69.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v24, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
      v27 = (int16x8_t)vqtbl2q_s8(v69, (int8x16_t)xmmword_2160F2D30);
      v28 = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v23, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
      v71.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v24, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
      v29 = (int16x8_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_2160F2D70);
      if (v8)
      {
        if ((v11 & 1) != 0)
        {
          v16 = (int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_2160EE800);
          v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v25, v10));
          v31 = vmulq_s16(v25, v10);
          v32 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v31, v30), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v31, v30), v16), v18));
          v33 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v26, v10));
          v34 = vmulq_s16(v26, v10);
          v35 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v34, v33), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v34, v33), v16), v18));
          v36 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v27, v10));
          v37 = vmulq_s16(v27, v10);
          v38 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v37, v36), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v37, v36), v16), v18));
          v39 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v29, v10));
          v40 = vmulq_s16(v29, v10);
          v41 = (int64x2_t)vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v40, v39), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v40, v39), v16), v18));
        }
        else
        {
          v32 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v25, v10), v17);
          v35 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v26, v10), v17);
          v38 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v27, v10), v17);
          v41 = (int64x2_t)vshlq_u16((uint16x8_t)vmulq_s16(v29, v10), v17);
        }
      }
      else
      {
        v32 = vmulq_s16(v25, v10);
        v35 = vmulq_s16(v26, v10);
        v38 = vmulq_s16(v27, v10);
        v41 = (int64x2_t)vmulq_s16(v29, v10);
      }
      v42 = (int16x8_t *)((char *)a2 + 2 * word_2160F3470[v15]);
      v43 = (int64x2_t)vaddq_s16(v38, (int16x8_t)xmmword_2160F2D90);
      v44 = vaddq_s16(v32, (int16x8_t)xmmword_2160F2D90);
      v45 = (int16x8_t)vzip2q_s64((int64x2_t)v44, v43);
      v46 = (int16x8_t)vzip2q_s64((int64x2_t)v35, v41);
      v44.i64[1] = v43.i64[0];
      v35.i64[1] = v41.i64[0];
      v47 = vaddq_s16(v44, v35);
      v48 = vsubq_s16(v44, v35);
      v49 = vsubq_s16(vshlq_s16(v45, v20), v46);
      v50 = vaddq_s16(vshlq_s16(v46, v20), v45);
      v51 = vaddq_s16(v47, v50);
      v52 = vaddq_s16(v48, v49);
      v53 = vsubq_s16(v48, v49);
      v54 = vsubq_s16(v47, v50);
      v55 = vzip1q_s16(v51, v53);
      v56 = vzip2q_s16(v51, v53);
      v57 = vzip1q_s16(v52, v54);
      v58 = vzip2q_s16(v52, v54);
      v70.val[1] = (int8x16_t)vdupq_lane_s64(v56.i64[0], 0);
      v70.val[0] = (int8x16_t)vdupq_lane_s64(v58.i64[0], 0);
      v59 = vzip1q_s16(v55, v57);
      v70.val[0] = vqtbl2q_s8(v70, (int8x16_t)xmmword_2160F2C40);
      v70.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v59, (int64x2_t)v70.val[0]);
      v72.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v55, 1);
      v72.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1);
      v60 = (int16x8_t)vqtbl2q_s8(v72, (int8x16_t)xmmword_2160F1950);
      v61 = (int64x2_t)vzip2q_s16(v56, v58);
      v62 = (int16x8_t)vzip2q_s64((int64x2_t)v60, v61);
      v59.i64[1] = v70.val[0].i64[0];
      v60.i64[1] = v61.i64[0];
      v63 = vaddq_s16(v59, v60);
      v64 = vsubq_s16(v59, v60);
      v70.val[0] = (int8x16_t)vshlq_s16(v62, v20);
      v65 = vsubq_s16(vshlq_s16((int16x8_t)v70.val[1], v20), v62);
      v66 = vaddq_s16((int16x8_t)v70.val[0], (int16x8_t)v70.val[1]);
      *v42 = vshlq_s16(vaddq_s16(v63, v66), v21);
      v42[2] = vshlq_s16(vaddq_s16(v64, v65), v21);
      v42[4] = vshlq_s16(vsubq_s16(v64, v65), v21);
      v42[6] = vshlq_s16(vsubq_s16(v63, v66), v21);
    }
    ++v15;
    v19 += 4;
  }
  while (v15 != 8);
  return result;
}

int8x16_t *sub_2160A60C4(int8x16_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  _OWORD *v7;
  int v8;
  unsigned int v9;
  int16x8_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int32x4_t v16;
  uint16x8_t v17;
  int32x4_t v18;
  int8x16_t *v19;
  int16x8_t v20;
  int16x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int64x2_t v41;
  int16x8_t *v42;
  int64x2_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int64x2_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  _BYTE v67[16];
  uint64_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;

  v3 = 0;
  v68 = *MEMORY[0x24BDAC8D0];
  v4 = result[51].u8[0];
  v5 = result[51].u8[2];
  do
  {
    v6 = v4 & 1;
    v4 >>= 1;
    *(_DWORD *)&v67[v3] = -v6;
    v3 += 4;
  }
  while (v3 != 16);
  *(_OWORD *)(a3 + 112) = 0u;
  v7 = (_OWORD *)(a3 + 112);
  v8 = *((unsigned __int8 *)v7 - 100);
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[14] = 0u;
  v7[15] = 0u;
  v7[16] = 0u;
  v7[17] = 0u;
  v7[18] = 0u;
  v7[19] = 0u;
  v7[20] = 0u;
  v7[21] = 0u;
  v7[22] = 0u;
  v7[23] = 0u;
  v7[24] = 0u;
  v7[25] = 0u;
  v7[26] = 0u;
  v7[27] = 0u;
  v7[28] = 0u;
  v9 = (171 * v5) >> 10;
  v7[29] = 0u;
  v7[30] = 0u;
  v7[31] = 0u;
  v10 = *(int16x8_t *)&asc_2160F3480[16 * (((_BYTE)v5 - 6 * (_BYTE)v9) & 0x1F)];
  if (v8)
  {
    if (v5 < 0x18)
    {
      v14 = 0;
      v13 = v9 - 4;
      v11 = 1;
      v12 = 1 << (3 - v9);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = v9 - 4;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v10 = (int16x8_t)vshlq_u16((uint16x8_t)v10, (uint16x8_t)vdupq_n_s16(v9));
    v11 = 1;
  }
  v15 = 0;
  v16 = (int32x4_t)v12;
  v17 = (uint16x8_t)vdupq_n_s16(v14);
  v18 = vdupq_n_s32(v13);
  v19 = result + 3;
  v20.i64[0] = -1;
  v20.i64[1] = -1;
  v21.i64[0] = 0x5000500050005;
  v21.i64[1] = 0x5000500050005;
  do
  {
    if (*(_WORD *)&v67[v15 * 2])
    {
      v22 = v19[-1];
      v23 = v19[1];
      v24 = v19[2];
      v71.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v22, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
      v71.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*v19, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
      v25 = (int16x8_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_2160F2D30);
      v71.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v22, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
      v71.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*v19, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
      v26 = (int16x8_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_2160F2D70);
      v69.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v23, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
      v69.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v24, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
      v27 = (int16x8_t)vqtbl2q_s8(v69, (int8x16_t)xmmword_2160F2D30);
      v28 = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v23, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
      v71.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v24, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
      v29 = (int16x8_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_2160F2D70);
      if (v8)
      {
        if ((v11 & 1) != 0)
        {
          v16 = (int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_2160EE800);
          v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v25, v10));
          v31 = vmulq_s16(v25, v10);
          v32 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v31, v30), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v31, v30), v16), v18));
          v33 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v26, v10));
          v34 = vmulq_s16(v26, v10);
          v35 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v34, v33), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v34, v33), v16), v18));
          v36 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v27, v10));
          v37 = vmulq_s16(v27, v10);
          v38 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v37, v36), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v37, v36), v16), v18));
          v39 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v29, v10));
          v40 = vmulq_s16(v29, v10);
          v41 = (int64x2_t)vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v40, v39), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v40, v39), v16), v18));
        }
        else
        {
          v32 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v25, v10), v17);
          v35 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v26, v10), v17);
          v38 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v27, v10), v17);
          v41 = (int64x2_t)vshlq_u16((uint16x8_t)vmulq_s16(v29, v10), v17);
        }
      }
      else
      {
        v32 = vmulq_s16(v25, v10);
        v35 = vmulq_s16(v26, v10);
        v38 = vmulq_s16(v27, v10);
        v41 = (int64x2_t)vmulq_s16(v29, v10);
      }
      v42 = (int16x8_t *)((char *)v7 + 2 * word_2160F3470[v15]);
      v43 = (int64x2_t)vaddq_s16(v38, (int16x8_t)xmmword_2160F2D90);
      v44 = vaddq_s16(v32, (int16x8_t)xmmword_2160F2D90);
      v45 = (int16x8_t)vzip2q_s64((int64x2_t)v44, v43);
      v46 = (int16x8_t)vzip2q_s64((int64x2_t)v35, v41);
      v44.i64[1] = v43.i64[0];
      v35.i64[1] = v41.i64[0];
      v47 = vaddq_s16(v44, v35);
      v48 = vsubq_s16(v44, v35);
      v49 = vsubq_s16(vshlq_s16(v45, v20), v46);
      v50 = vaddq_s16(vshlq_s16(v46, v20), v45);
      v51 = vaddq_s16(v47, v50);
      v52 = vaddq_s16(v48, v49);
      v53 = vsubq_s16(v48, v49);
      v54 = vsubq_s16(v47, v50);
      v55 = vzip1q_s16(v51, v53);
      v56 = vzip2q_s16(v51, v53);
      v57 = vzip1q_s16(v52, v54);
      v58 = vzip2q_s16(v52, v54);
      v70.val[1] = (int8x16_t)vdupq_lane_s64(v56.i64[0], 0);
      v70.val[0] = (int8x16_t)vdupq_lane_s64(v58.i64[0], 0);
      v59 = vzip1q_s16(v55, v57);
      v70.val[0] = vqtbl2q_s8(v70, (int8x16_t)xmmword_2160F2C40);
      v70.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v59, (int64x2_t)v70.val[0]);
      v72.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v55, 1);
      v72.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v57, 1);
      v60 = (int16x8_t)vqtbl2q_s8(v72, (int8x16_t)xmmword_2160F1950);
      v61 = (int64x2_t)vzip2q_s16(v56, v58);
      v62 = (int16x8_t)vzip2q_s64((int64x2_t)v60, v61);
      v59.i64[1] = v70.val[0].i64[0];
      v60.i64[1] = v61.i64[0];
      v63 = vaddq_s16(v59, v60);
      v64 = vsubq_s16(v59, v60);
      v70.val[0] = (int8x16_t)vshlq_s16(v62, v20);
      v65 = vsubq_s16(vshlq_s16((int16x8_t)v70.val[1], v20), v62);
      v66 = vaddq_s16((int16x8_t)v70.val[0], (int16x8_t)v70.val[1]);
      *v42 = vshlq_s16(vaddq_s16(v63, v66), v21);
      v42[2] = vshlq_s16(vaddq_s16(v64, v65), v21);
      v42[4] = vshlq_s16(vsubq_s16(v64, v65), v21);
      v42[6] = vshlq_s16(vsubq_s16(v63, v66), v21);
    }
    ++v15;
    v19 += 4;
  }
  while (v15 != 8);
  return result;
}

int16x8_t *sub_2160A653C(int16x8_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  _OWORD *v7;
  int v8;
  unsigned int v9;
  int16x8_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int32x4_t v16;
  uint16x8_t v17;
  int32x4_t v18;
  int16x8_t *v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int64x2_t v38;
  int16x8_t *v39;
  int64x2_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int64x2_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  _BYTE v64[16];
  uint64_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;

  v3 = 0;
  v65 = *MEMORY[0x24BDAC8D0];
  v4 = result[51].u8[0];
  v5 = result[51].u8[2];
  do
  {
    v6 = v4 & 1;
    v4 >>= 1;
    *(_DWORD *)&v64[v3] = -v6;
    v3 += 4;
  }
  while (v3 != 16);
  *(_OWORD *)(a3 + 112) = 0u;
  v7 = (_OWORD *)(a3 + 112);
  v8 = *((unsigned __int8 *)v7 - 100);
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[14] = 0u;
  v7[15] = 0u;
  v7[16] = 0u;
  v7[17] = 0u;
  v7[18] = 0u;
  v7[19] = 0u;
  v7[20] = 0u;
  v7[21] = 0u;
  v7[22] = 0u;
  v7[23] = 0u;
  v7[24] = 0u;
  v7[25] = 0u;
  v7[26] = 0u;
  v7[27] = 0u;
  v7[28] = 0u;
  v9 = (171 * v5) >> 10;
  v7[29] = 0u;
  v7[30] = 0u;
  v7[31] = 0u;
  v10 = *(int16x8_t *)&asc_2160F3480[16 * (((_BYTE)v5 - 6 * (_BYTE)v9) & 0x1F)];
  if (v8)
  {
    if (v5 < 0x18)
    {
      v14 = 0;
      v13 = v9 - 4;
      v11 = 1;
      v12 = 1 << (3 - v9);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = v9 - 4;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v10 = (int16x8_t)vshlq_u16((uint16x8_t)v10, (uint16x8_t)vdupq_n_s16(v9));
    v11 = 1;
  }
  v15 = 0;
  v16 = (int32x4_t)v12;
  v17 = (uint16x8_t)vdupq_n_s16(v14);
  v18 = vdupq_n_s32(v13);
  v19 = result + 5;
  v20.i64[0] = 0xFFFF00000000;
  v20.i64[1] = 0xFFFF00000000;
  v21.i64[0] = -1;
  v21.i64[1] = -1;
  v22.i64[0] = 0x5000500050005;
  v22.i64[1] = 0x5000500050005;
  do
  {
    if (*(_WORD *)&v64[v15 * 2])
    {
      v23 = v19[-2];
      v24 = *v19;
      v25 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8((int8x16_t)v19[-3], v20), 0xCuLL), vandq_s8((int8x16_t)v19[-3], (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8((int8x16_t)v19[-3], (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
      v26 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8((int8x16_t)v19[-1], v20), 0xCuLL), vandq_s8((int8x16_t)v19[-1], (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8((int8x16_t)v19[-1], (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
      if (v8)
      {
        if ((v11 & 1) != 0)
        {
          v16 = (int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_2160EE800);
          v27 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v25, v10));
          v28 = vmulq_s16(v25, v10);
          v29 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v28, v27), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v28, v27), v16), v18));
          v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v23, v10));
          v31 = vmulq_s16(v23, v10);
          v32 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v31, v30), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v31, v30), v16), v18));
          v33 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v26, v10));
          v34 = vmulq_s16(v26, v10);
          v35 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v34, v33), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v34, v33), v16), v18));
          v36 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v24, v10));
          v37 = vmulq_s16(v24, v10);
          v38 = (int64x2_t)vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v37, v36), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v37, v36), v16), v18));
        }
        else
        {
          v29 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v25, v10), v17);
          v32 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v23, v10), v17);
          v35 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v26, v10), v17);
          v38 = (int64x2_t)vshlq_u16((uint16x8_t)vmulq_s16(v24, v10), v17);
        }
      }
      else
      {
        v29 = vmulq_s16(v25, v10);
        v32 = vmulq_s16(v23, v10);
        v35 = vmulq_s16(v26, v10);
        v38 = (int64x2_t)vmulq_s16(v24, v10);
      }
      v39 = (int16x8_t *)((char *)v7 + 2 * word_2160F3470[v15]);
      v40 = (int64x2_t)vaddq_s16(v35, (int16x8_t)xmmword_2160F2D90);
      v41 = vaddq_s16(v29, (int16x8_t)xmmword_2160F2D90);
      v42 = (int16x8_t)vzip2q_s64((int64x2_t)v41, v40);
      v43 = (int16x8_t)vzip2q_s64((int64x2_t)v32, v38);
      v41.i64[1] = v40.i64[0];
      v32.i64[1] = v38.i64[0];
      v44 = vaddq_s16(v41, v32);
      v45 = vsubq_s16(v41, v32);
      v46 = vsubq_s16(vshlq_s16(v42, v21), v43);
      v47 = vaddq_s16(vshlq_s16(v43, v21), v42);
      v48 = vaddq_s16(v44, v47);
      v49 = vaddq_s16(v45, v46);
      v50 = vsubq_s16(v45, v46);
      v51 = vsubq_s16(v44, v47);
      v52 = vzip1q_s16(v48, v50);
      v53 = vzip2q_s16(v48, v50);
      v54 = vzip1q_s16(v49, v51);
      v55 = vzip2q_s16(v49, v51);
      v66.val[1] = (int8x16_t)vdupq_lane_s64(v53.i64[0], 0);
      v66.val[0] = (int8x16_t)vdupq_lane_s64(v55.i64[0], 0);
      v56 = vzip1q_s16(v52, v54);
      v66.val[0] = vqtbl2q_s8(v66, (int8x16_t)xmmword_2160F2C40);
      v66.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v56, (int64x2_t)v66.val[0]);
      v67.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v52, 1);
      v67.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v54, 1);
      v57 = (int16x8_t)vqtbl2q_s8(v67, (int8x16_t)xmmword_2160F1950);
      v58 = (int64x2_t)vzip2q_s16(v53, v55);
      v59 = (int16x8_t)vzip2q_s64((int64x2_t)v57, v58);
      v56.i64[1] = v66.val[0].i64[0];
      v57.i64[1] = v58.i64[0];
      v60 = vaddq_s16(v56, v57);
      v61 = vsubq_s16(v56, v57);
      v66.val[0] = (int8x16_t)vshlq_s16(v59, v21);
      v62 = vsubq_s16(vshlq_s16((int16x8_t)v66.val[1], v21), v59);
      v63 = vaddq_s16((int16x8_t)v66.val[0], (int16x8_t)v66.val[1]);
      *v39 = vshlq_s16(vaddq_s16(v60, v63), v22);
      v39[2] = vshlq_s16(vaddq_s16(v61, v62), v22);
      v39[4] = vshlq_s16(vsubq_s16(v61, v62), v22);
      v39[6] = vshlq_s16(vsubq_s16(v60, v63), v22);
    }
    ++v15;
    v19 += 4;
  }
  while (v15 != 8);
  return result;
}

_WORD *sub_2160A6904(_WORD *result, double a2, double a3, int8x16_t a4, double a5, double a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  int8x16_t v13;
  _OWORD *v14;
  __int32 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint64_t v20;
  int8x16_t v21;
  int16x8_t v22;
  unsigned int v23;
  int v24;
  unsigned __int32 v25;
  _BOOL4 v26;
  int8x16_t v27;
  int32x4_t v28;
  uint16x8_t v29;
  int32x4_t v30;
  __int16 *v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t *v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;

  a4.i32[0] = 0;
  v10 = 0;
  v11 = *((unsigned __int8 *)result + 816);
  v12 = *((_BYTE *)result + 818);
  v13 = 0uLL;
  *(_OWORD *)(a9 + 112) = 0u;
  v14 = (_OWORD *)(a9 + 112);
  v15 = *((unsigned __int8 *)v14 - 100);
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  v14[18] = 0u;
  v14[19] = 0u;
  v14[20] = 0u;
  v14[21] = 0u;
  v14[22] = 0u;
  v14[23] = 0u;
  v14[24] = 0u;
  v14[25] = 0u;
  v14[26] = 0u;
  v16 = v12;
  v17 = v12 / 6u;
  v18 = v12 % 6u;
  v19 = (uint16x8_t *)((char *)&unk_2160F34F0 + 128 * v18);
  v20 = a10 + (v18 << 7);
  v21 = (int8x16_t)xmmword_2160EE7C0;
  v22 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)xmmword_2160F2D90, (int8x16_t)xmmword_2160EE800), (int8x16_t)xmmword_2160EE7D0), (int8x16_t)xmmword_2160EE7C0);
  v14[27] = 0u;
  v14[28] = 0u;
  v23 = v17 - 6;
  v24 = 1 << (5 - v17);
  v14[29] = 0u;
  v14[30] = 0u;
  v25 = (unsigned __int16)(v17 - 6);
  if (v16 < 0x24)
    v25 = 0;
  v14[31] = 0uLL;
  if (v16 >= 0x24)
  {
    v23 = 0;
    v24 = 0;
  }
  v26 = v16 < 0x24;
  if (!v15)
  {
    v26 = 1;
    v25 = 0;
    v23 = 0;
    v24 = 0;
    v17 -= 2;
  }
  v21.i32[0] = v15;
  v27 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v21, a4), 0);
  v21.i32[0] = v17;
  a7.i32[0] = v25;
  v13.i32[0] = v24;
  v28 = (int32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_2160EE800);
  v29 = (uint16x8_t)vdupq_lane_s16((int16x4_t)*(_OWORD *)&vbslq_s8(v27, v21, a7), 0);
  v30 = vdupq_n_s32(v23);
  v31 = result + 40;
  v32.i64[0] = -1;
  v32.i64[1] = -1;
  v33.i64[0] = 0x1000100010001;
  v33.i64[1] = 0x1000100010001;
  v34.i64[0] = 0x5000500050005;
  v34.i64[1] = 0x5000500050005;
  do
  {
    if ((v11 & 1) == 0)
      goto LABEL_16;
    v35.i16[0] = *(v31 - 24);
    v35.i16[1] = *(v31 - 22);
    v35.i16[2] = *(v31 - 21);
    v35.i16[3] = *(v31 - 15);
    v36.i16[0] = *(v31 - 23);
    v36.i16[1] = *(v31 - 20);
    v36.i16[2] = *(v31 - 16);
    v36.i16[3] = *(v31 - 13);
    v37.i16[0] = *(v31 - 19);
    v37.i16[1] = *(v31 - 17);
    v37.i16[2] = *(v31 - 12);
    v37.i16[3] = *(v31 - 6);
    v38.i16[0] = *(v31 - 18);
    v38.i16[1] = *(v31 - 11);
    v38.i16[2] = *(v31 - 7);
    v38.i16[3] = *v31;
    v39.i16[0] = *(v31 - 10);
    v39.i16[1] = *(v31 - 8);
    v39.i16[2] = v31[1];
    v39.i16[3] = v31[7];
    v40.i16[0] = *(v31 - 9);
    v40.i16[1] = v31[2];
    v40.i16[2] = v31[6];
    v40.i16[3] = v31[16];
    v41.i16[0] = v31[3];
    v41.i16[1] = v31[5];
    v41.i16[2] = v31[17];
    v41.i16[3] = v31[20];
    result = v31 + 29;
    v42.i16[0] = v31[4];
    v42.i16[1] = v31[18];
    v42.i16[2] = v31[19];
    v42.i16[3] = v31[29];
    *(int16x4_t *)v43.i8 = v35;
    v43.i16[4] = *(v31 - 14);
    *(int16x4_t *)v44.i8 = v36;
    v44.i16[4] = *(v31 - 5);
    *(int16x4_t *)v45.i8 = v37;
    v45.i16[4] = *(v31 - 1);
    *(int16x4_t *)v46.i8 = v38;
    v46.i16[4] = v31[8];
    *(int16x4_t *)v47.i8 = v39;
    v47.i16[4] = v31[15];
    *(int16x4_t *)v48.i8 = v40;
    v48.i16[4] = v31[21];
    *(int16x4_t *)v49.i8 = v41;
    v49.i16[4] = v31[28];
    *(int16x4_t *)v50.i8 = v42;
    v50.i16[4] = v31[30];
    v43.i16[5] = *(v31 - 4);
    v44.i16[5] = *(v31 - 2);
    v45.i16[5] = v31[9];
    v46.i16[5] = v31[14];
    v47.i16[5] = v31[22];
    v48.i16[5] = v31[27];
    v49.i16[5] = v31[31];
    v50.i16[5] = v31[36];
    v43.i16[6] = *(v31 - 3);
    v44.i16[6] = v31[10];
    v45.i16[6] = v31[13];
    v46.i16[6] = v31[23];
    v47.i16[6] = v31[26];
    v48.i16[6] = v31[32];
    v49.i16[6] = v31[35];
    v50.i16[6] = v31[37];
    v43.i16[7] = v31[11];
    v44.i16[7] = v31[12];
    v45.i16[7] = v31[24];
    v46.i16[7] = v31[25];
    v47.i16[7] = v31[33];
    v48.i16[7] = v31[34];
    v49.i16[7] = v31[38];
    v50.i16[7] = v31[39];
    if (!v15)
    {
      v54 = vmulq_s16((int16x8_t)vshlq_u16(*v19, v29), v43);
      v59 = vmulq_s16((int16x8_t)vshlq_u16(v19[1], v29), v44);
      v62 = vmulq_s16((int16x8_t)vshlq_u16(v19[2], v29), v45);
      v67 = vmulq_s16((int16x8_t)vshlq_u16(v19[3], v29), v46);
      v70 = vmulq_s16((int16x8_t)vshlq_u16(v19[4], v29), v47);
      v75 = vmulq_s16((int16x8_t)vshlq_u16(v19[5], v29), v48);
      v78 = vmulq_s16((int16x8_t)vshlq_u16(v19[6], v29), v49);
      v83 = (int16x8_t)vshlq_u16(v19[7], v29);
LABEL_14:
      v82 = vmulq_s16(v83, v50);
      goto LABEL_15;
    }
    v51 = *(int16x8_t *)v20;
    if (!v26)
    {
      v54 = vmulq_s16((int16x8_t)vshlq_u16((uint16x8_t)v51, v29), v43);
      v59 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 16), v29), v44);
      v62 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 32), v29), v45);
      v67 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 48), v29), v46);
      v70 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 64), v29), v47);
      v75 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 80), v29), v48);
      v78 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 96), v29), v49);
      v83 = (int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 112), v29);
      goto LABEL_14;
    }
    v52 = vuzp2q_s16((int16x8_t)vmull_s16(v35, *(int16x4_t *)v51.i8), (int16x8_t)vmull_high_s16(v43, v51));
    v53 = vmulq_s16(v51, v43);
    v54 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v53, v52), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v53, v52), v28), v30));
    v55 = *(int16x8_t *)(v20 + 16);
    v56 = *(int16x8_t *)(v20 + 32);
    v57 = vuzp2q_s16((int16x8_t)vmull_s16(v36, *(int16x4_t *)v55.i8), (int16x8_t)vmull_high_s16(v44, v55));
    v58 = vmulq_s16(v55, v44);
    v59 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v58, v57), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v58, v57), v28), v30));
    v60 = vuzp2q_s16((int16x8_t)vmull_s16(v37, *(int16x4_t *)v56.i8), (int16x8_t)vmull_high_s16(v45, v56));
    v61 = vmulq_s16(v56, v45);
    v62 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v61, v60), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v61, v60), v28), v30));
    v63 = *(int16x8_t *)(v20 + 48);
    v64 = *(int16x8_t *)(v20 + 64);
    v65 = vuzp2q_s16((int16x8_t)vmull_s16(v38, *(int16x4_t *)v63.i8), (int16x8_t)vmull_high_s16(v46, v63));
    v66 = vmulq_s16(v63, v46);
    v67 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v66, v65), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v66, v65), v28), v30));
    v68 = vuzp2q_s16((int16x8_t)vmull_s16(v39, *(int16x4_t *)v64.i8), (int16x8_t)vmull_high_s16(v47, v64));
    v69 = vmulq_s16(v64, v47);
    v70 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v69, v68), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v69, v68), v28), v30));
    v71 = *(int16x8_t *)(v20 + 80);
    v72 = *(int16x8_t *)(v20 + 96);
    v73 = vuzp2q_s16((int16x8_t)vmull_s16(v40, *(int16x4_t *)v71.i8), (int16x8_t)vmull_high_s16(v48, v71));
    v74 = vmulq_s16(v71, v48);
    v75 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v74, v73), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v74, v73), v28), v30));
    v76 = vuzp2q_s16((int16x8_t)vmull_s16(v41, *(int16x4_t *)v72.i8), (int16x8_t)vmull_high_s16(v49, v72));
    v77 = vmulq_s16(v72, v49);
    v78 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v77, v76), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v77, v76), v28), v30));
    v79 = *(int16x8_t *)(v20 + 112);
    v80 = vuzp2q_s16((int16x8_t)vmull_s16(v42, *(int16x4_t *)v79.i8), (int16x8_t)vmull_high_s16(v50, v79));
    v81 = vmulq_s16(v79, v50);
    v82 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v81, v80), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v81, v80), v28), v30));
LABEL_15:
    v84 = vaddq_s16(v70, v54);
    v85 = (int16x8_t *)((char *)v14 + 2 * word_2160F34E0[v10]);
    v86 = vsubq_s16(v75, vaddq_s16(vaddq_s16(v67, v82), vshlq_s16(v82, v32)));
    v87 = vsubq_s16(v54, v70);
    v88 = vsubq_s16(vaddq_s16(v59, v82), vaddq_s16(v67, vshlq_s16(v67, v32)));
    v89 = vsubq_s16(vshlq_s16(v62, v32), v78);
    v90 = vaddq_s16(vaddq_s16(vsubq_s16(v75, v59), v82), vshlq_s16(v75, v32));
    v91 = vaddq_s16(vshlq_s16(v78, v32), v62);
    v92 = vaddq_s16(vaddq_s16(v67, vaddq_s16(v59, v75)), vshlq_s16(v59, v32));
    v93 = vaddq_s16(v91, v84);
    v94 = vaddq_s16(vshlq_s16(v92, v33), v86);
    v95 = vaddq_s16(v89, v87);
    v96 = vaddq_s16(vshlq_s16(v90, v33), v88);
    v97 = vsubq_s16(v87, v89);
    v98 = vsubq_s16(vshlq_s16(v88, v33), v90);
    v99 = vsubq_s16(v84, v91);
    v100 = vsubq_s16(v92, vshlq_s16(v86, v33));
    v101 = vaddq_s16(v100, v93);
    v102 = vaddq_s16(v98, v95);
    v103 = vaddq_s16(v96, v97);
    v104 = vaddq_s16(v94, v99);
    v105 = vsubq_s16(v99, v94);
    v106 = vsubq_s16(v97, v96);
    v107 = vsubq_s16(v95, v98);
    v108 = vsubq_s16(v93, v100);
    v109 = (int32x4_t)vzip1q_s16(v101, v102);
    v110 = (int32x4_t)vzip2q_s16(v101, v102);
    v111 = (int32x4_t)vzip1q_s16(v103, v104);
    v112 = (int32x4_t)vzip2q_s16(v103, v104);
    v113 = (int32x4_t)vzip1q_s16(v105, v106);
    v114 = (int32x4_t)vzip2q_s16(v105, v106);
    v115 = (int32x4_t)vzip1q_s16(v107, v108);
    v116 = (int32x4_t)vzip2q_s16(v107, v108);
    v117 = (int64x2_t)vzip1q_s32(v109, v111);
    v118 = (int64x2_t)vzip2q_s32(v109, v111);
    v119 = (int64x2_t)vzip1q_s32(v113, v115);
    v120 = (int64x2_t)vzip2q_s32(v113, v115);
    v121 = (int64x2_t)vzip1q_s32(v110, v112);
    v122 = (int64x2_t)vzip2q_s32(v110, v112);
    v123 = (int64x2_t)vzip1q_s32(v114, v116);
    v124 = (int64x2_t)vzip2q_s32(v114, v116);
    v125 = (int16x8_t)vzip1q_s64(v117, v119);
    v126 = (int16x8_t)vzip2q_s64(v117, v119);
    v127 = (int16x8_t)vzip1q_s64(v118, v120);
    v128 = (int16x8_t)vzip2q_s64(v118, v120);
    v129 = (int16x8_t)vzip1q_s64(v121, v123);
    v130 = (int16x8_t)vzip2q_s64(v121, v123);
    v131 = (int16x8_t)vzip1q_s64(v122, v124);
    v132 = (int16x8_t)vzip2q_s64(v122, v124);
    v133 = vaddq_s16(v125, v129);
    v134 = vsubq_s16(v130, vaddq_s16(vshlq_s16(v132, v32), vaddq_s16(v132, v128)));
    v135 = vsubq_s16(v125, v129);
    v136 = vsubq_s16(vaddq_s16(v132, v126), vaddq_s16(vshlq_s16(v128, v32), v128));
    v137 = vsubq_s16(vshlq_s16(v127, v32), v131);
    v138 = vaddq_s16(vsubq_s16(vshlq_s16(v130, v32), v126), vaddq_s16(v132, v130));
    v139 = vaddq_s16(vshlq_s16(v131, v32), v127);
    v140 = vaddq_s16(vaddq_s16(vshlq_s16(v126, v32), vaddq_s16(v130, v128)), v126);
    v141 = vaddq_s16(v134, vshlq_s16(v140, v33));
    v142 = vaddq_s16(v136, vshlq_s16(v138, v33));
    v143 = vsubq_s16(v135, v137);
    v144 = vsubq_s16(vshlq_s16(v136, v33), v138);
    v145 = vsubq_s16(v133, v139);
    v146 = vsubq_s16(v140, vshlq_s16(v134, v33));
    v147 = vaddq_s16(vaddq_s16(v133, v22), v139);
    v148 = vaddq_s16(vaddq_s16(v135, v22), v137);
    v149 = vaddq_s16(v143, v22);
    v150 = vaddq_s16(v145, v22);
    *v85 = vshlq_s16(vaddq_s16(v147, v146), v34);
    v85[2] = vshlq_s16(vaddq_s16(v148, v144), v34);
    v85[4] = vshlq_s16(vaddq_s16(v149, v142), v34);
    v85[6] = vshlq_s16(vaddq_s16(v150, v141), v34);
    v85[8] = vshlq_s16(vsubq_s16(v150, v141), v34);
    v85[10] = vshlq_s16(vsubq_s16(v149, v142), v34);
    v85[12] = vshlq_s16(vsubq_s16(v148, v144), v34);
    v85[14] = vshlq_s16(vsubq_s16(v147, v146), v34);
LABEL_16:
    v11 >>= 1;
    ++v10;
    v31 += 64;
  }
  while (v10 != 4);
  return result;
}

uint64_t sub_2160A70F8(uint64_t result, double a2, int8x16_t a3, double a4, double a5, double a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int16x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 v16;
  int8x16_t v17;
  _OWORD *v18;
  __int32 v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint16x8_t *v23;
  uint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  unsigned int v27;
  int v28;
  unsigned __int32 v29;
  _BOOL4 v30;
  int8x16_t v31;
  uint16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  __int16 *v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  uint16x8_t v86;
  int16x8_t v87;
  int16x8_t *v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;

  a3.i32[0] = 0;
  v14 = 0;
  v15 = *(unsigned __int8 *)(result + 816);
  v16 = *(_BYTE *)(result + 818);
  v17 = 0uLL;
  *(_OWORD *)(a9 + 112) = 0u;
  v18 = (_OWORD *)(a9 + 112);
  v19 = *((unsigned __int8 *)v18 - 100);
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[16] = 0u;
  v18[17] = 0u;
  v18[18] = 0u;
  v18[19] = 0u;
  v18[20] = 0u;
  v18[21] = 0u;
  v18[22] = 0u;
  v18[23] = 0u;
  v18[24] = 0u;
  v18[25] = 0u;
  v18[26] = 0u;
  v20 = v16;
  v21 = v16 / 6u;
  v22 = v16 % 6u;
  v23 = (uint16x8_t *)((char *)&unk_2160F34F0 + 128 * v22);
  v24 = a10 + (v22 << 7);
  v25 = (int8x16_t)xmmword_2160EE7C0;
  v26 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)xmmword_2160F2D90, (int8x16_t)xmmword_2160EE800), (int8x16_t)xmmword_2160EE7D0), (int8x16_t)xmmword_2160EE7C0);
  v27 = v21 - 6;
  v28 = 1 << (5 - v21);
  v18[27] = 0u;
  v18[28] = 0u;
  v29 = (unsigned __int16)(v21 - 6);
  if (v20 < 0x24)
    v29 = 0;
  v18[29] = 0uLL;
  v18[30] = 0uLL;
  if (v20 >= 0x24)
  {
    v27 = 0;
    v28 = 0;
  }
  v30 = v20 < 0x24;
  if (!v19)
    v30 = 1;
  v18[31] = 0uLL;
  if (!v19)
  {
    v29 = 0;
    v27 = 0;
    v28 = 0;
    v21 -= 2;
  }
  v25.i32[0] = v19;
  v31 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v25, a3), 0);
  v25.i32[0] = v21;
  a7.i32[0] = v29;
  v17.i32[0] = v28;
  v32 = (uint16x8_t)vdupq_lane_s16((int16x4_t)*(_OWORD *)&vbslq_s8(v31, v25, a7), 0);
  v33 = vdupq_n_s32(v27);
  v34 = (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_2160EE800);
  v35 = word_2160F34E0;
  v36.i64[0] = -1;
  v36.i64[1] = -1;
  v37.i64[0] = 0x1000100010001;
  v37.i64[1] = 0x1000100010001;
  v38.i64[0] = 0x5000500050005;
  v38.i64[1] = 0x5000500050005;
  do
  {
    if ((v15 & 1) == 0)
      goto LABEL_18;
    v40.i16[0] = *(_WORD *)(result + v14 + 38);
    v13.i16[0] = *(_WORD *)(result + v14 + 136);
    v13.i16[2] = *(_WORD *)(result + v14 + 138);
    v39.i32[0] = *(_DWORD *)(result + v14 + 32);
    v39.i16[2] = *(_WORD *)(result + v14 + 36);
    v39.i16[3] = *(_WORD *)(result + v14 + 42);
    v40.i16[1] = *(_WORD *)(result + v14 + 40);
    v40.i16[2] = *(_WORD *)(result + v14 + 46);
    v40.i16[3] = *(_WORD *)(result + v14 + 50);
    v10.i16[0] = *(_WORD *)(result + v14 + 148);
    v10.i16[2] = *(_WORD *)(result + v14 + 150);
    *(int16x4_t *)v41.i8 = v39;
    v41.i16[4] = *(_WORD *)(result + v14 + 44);
    *(int16x4_t *)v42.i8 = v40;
    v42.i16[4] = *(_WORD *)(result + v14 + 58);
    v41.i16[5] = *(_WORD *)(result + v14 + 52);
    v42.i16[5] = *(_WORD *)(result + v14 + 66);
    v11.i32[0] = *(unsigned __int16 *)(result + v14 + 54);
    v11.i16[2] = *(_WORD *)(result + v14 + 56);
    v41.i32[3] = vmovn_s32((int32x4_t)v11).u32[0];
    v12.i32[0] = *(unsigned __int16 *)(result + v14 + 68);
    v12.i16[2] = *(_WORD *)(result + v14 + 70);
    v42.i32[3] = vmovn_s32((int32x4_t)v12).u32[0];
    v43.i16[0] = *(_WORD *)(result + v14 + 48);
    v43.i16[1] = *(_WORD *)(result + v14 + 60);
    v43.i16[2] = *(_WORD *)(result + v14 + 64);
    v43.i16[3] = *(_WORD *)(result + v14 + 72);
    v43.i64[1] = *(_QWORD *)(result + v14 + 80);
    v44.i16[0] = *(_WORD *)(result + v14 + 62);
    v44.i16[1] = *(_WORD *)(result + v14 + 74);
    v44.i16[2] = *(_WORD *)(result + v14 + 78);
    v44.i16[3] = *(_WORD *)(result + v14 + 88);
    v44.i64[1] = *(_QWORD *)(result + v14 + 96);
    v45.i16[0] = *(_WORD *)(result + v14 + 76);
    v45.i16[1] = *(_WORD *)(result + v14 + 90);
    v45.i16[2] = *(_WORD *)(result + v14 + 94);
    v45.i16[3] = *(_WORD *)(result + v14 + 104);
    v45.i64[1] = *(_QWORD *)(result + v14 + 112);
    v46.i16[0] = *(_WORD *)(result + v14 + 92);
    v46.i16[1] = *(_WORD *)(result + v14 + 106);
    v46.i16[2] = *(_WORD *)(result + v14 + 110);
    v46.i16[3] = *(_WORD *)(result + v14 + 120);
    v46.i64[1] = *(_QWORD *)(result + v14 + 126);
    v47.i16[0] = *(_WORD *)(result + v14 + 108);
    v47.i16[1] = *(_WORD *)(result + v14 + 122);
    v47.i16[2] = *(_WORD *)(result + v14 + 124);
    v47.i16[3] = *(_WORD *)(result + v14 + 134);
    v47.i64[1] = *(_QWORD *)(result + v14 + 140);
    v10 = vuzp1_s16(*(int16x4_t *)v13.i8, v10);
    *(int16x4_t *)v48.i8 = v10;
    v48.i64[1] = *(_QWORD *)(result + v14 + 152);
    if (!v19)
    {
      v57 = vmulq_s16((int16x8_t)vshlq_u16(*v23, v32), v41);
      v62 = vmulq_s16((int16x8_t)vshlq_u16(v23[1], v32), v42);
      v65 = vmulq_s16((int16x8_t)vshlq_u16(v23[2], v32), v43);
      v70 = vmulq_s16((int16x8_t)vshlq_u16(v23[3], v32), v44);
      v73 = vmulq_s16((int16x8_t)vshlq_u16(v23[4], v32), v45);
      v78 = vmulq_s16((int16x8_t)vshlq_u16(v23[5], v32), v46);
      v86 = v23[7];
      v81 = vmulq_s16((int16x8_t)vshlq_u16(v23[6], v32), v47);
LABEL_16:
      v85 = vmulq_s16((int16x8_t)vshlq_u16(v86, v32), v48);
      goto LABEL_17;
    }
    v49 = *(int16x8_t *)v24;
    if (!v30)
    {
      v57 = vmulq_s16((int16x8_t)vshlq_u16((uint16x8_t)v49, v32), v41);
      v62 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 16), v32), v42);
      v65 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 32), v32), v43);
      v70 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 48), v32), v44);
      v73 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 64), v32), v45);
      v78 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 80), v32), v46);
      v81 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 96), v32), v47);
      v86 = *(uint16x8_t *)(v24 + 112);
      goto LABEL_16;
    }
    v50.i16[1] = *(_WORD *)(result + v14 + 60);
    v50.i16[2] = *(_WORD *)(result + v14 + 64);
    v50.i16[3] = *(_WORD *)(result + v14 + 72);
    v51.i16[1] = *(_WORD *)(result + v14 + 74);
    v51.i16[2] = *(_WORD *)(result + v14 + 78);
    v51.i16[3] = *(_WORD *)(result + v14 + 88);
    v52.i16[1] = *(_WORD *)(result + v14 + 90);
    v52.i16[2] = *(_WORD *)(result + v14 + 94);
    v52.i16[3] = *(_WORD *)(result + v14 + 104);
    v53.i16[1] = *(_WORD *)(result + v14 + 106);
    v53.i16[2] = *(_WORD *)(result + v14 + 110);
    v53.i16[3] = *(_WORD *)(result + v14 + 120);
    v54.i16[1] = *(_WORD *)(result + v14 + 122);
    v54.i16[2] = *(_WORD *)(result + v14 + 124);
    v54.i16[3] = *(_WORD *)(result + v14 + 134);
    v55 = vuzp2q_s16((int16x8_t)vmull_s16(v39, *(int16x4_t *)v49.i8), (int16x8_t)vmull_high_s16(v41, v49));
    v56 = vmulq_s16(v49, v41);
    v57 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v56, v55), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v56, v55), v34), v33));
    v58 = *(int16x8_t *)(v24 + 16);
    v59 = *(int16x8_t *)(v24 + 32);
    v60 = vuzp2q_s16((int16x8_t)vmull_s16(v40, *(int16x4_t *)v58.i8), (int16x8_t)vmull_high_s16(v42, v58));
    v61 = vmulq_s16(v58, v42);
    v62 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v61, v60), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v61, v60), v34), v33));
    v50.i16[0] = *(_WORD *)(result + v14 + 48);
    v63 = vuzp2q_s16((int16x8_t)vmull_s16(v50, *(int16x4_t *)v59.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(result + v14 + 80), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL)));
    v64 = vmulq_s16(v59, v43);
    v65 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v64, v63), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v64, v63), v34), v33));
    v66 = *(int16x8_t *)(v24 + 48);
    v67 = *(int16x8_t *)(v24 + 64);
    v51.i16[0] = *(_WORD *)(result + v14 + 62);
    v68 = vuzp2q_s16((int16x8_t)vmull_s16(v51, *(int16x4_t *)v66.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(result + v14 + 96), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL)));
    v69 = vmulq_s16(v66, v44);
    v70 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v69, v68), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v69, v68), v34), v33));
    v52.i16[0] = *(_WORD *)(result + v14 + 76);
    v71 = vuzp2q_s16((int16x8_t)vmull_s16(v52, *(int16x4_t *)v67.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(result + v14 + 112), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL)));
    v72 = vmulq_s16(v67, v45);
    v73 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v72, v71), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v72, v71), v34), v33));
    v74 = *(int16x8_t *)(v24 + 80);
    v75 = *(int16x8_t *)(v24 + 96);
    v53.i16[0] = *(_WORD *)(result + v14 + 92);
    v76 = vuzp2q_s16((int16x8_t)vmull_s16(v53, *(int16x4_t *)v74.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(result + v14 + 126), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL)));
    v77 = vmulq_s16(v74, v46);
    v78 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v77, v76), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v77, v76), v34), v33));
    v54.i16[0] = *(_WORD *)(result + v14 + 108);
    v79 = vuzp2q_s16((int16x8_t)vmull_s16(v54, *(int16x4_t *)v75.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(result + v14 + 140), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)));
    v80 = vmulq_s16(v75, v47);
    v81 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v80, v79), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v80, v79), v34), v33));
    v82 = *(int16x8_t *)(v24 + 112);
    v83 = vuzp2q_s16((int16x8_t)vmull_s16(v10, *(int16x4_t *)v82.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(result + v14 + 152), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL)));
    v84 = vmulq_s16(v82, v48);
    v85 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v84, v83), v34), v33)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v84, v83), v34), v33));
LABEL_17:
    v87 = vaddq_s16(v73, v57);
    v88 = (int16x8_t *)((char *)v18 + 2 * *v35);
    v89 = vsubq_s16(v78, vaddq_s16(v70, vaddq_s16(v85, vshlq_s16(v85, v36))));
    v90 = vsubq_s16(v57, v73);
    v91 = vsubq_s16(vaddq_s16(v62, v85), vaddq_s16(v70, vshlq_s16(v70, v36)));
    v92 = vsubq_s16(vshlq_s16(v65, v36), v81);
    v93 = vaddq_s16(vsubq_s16(v78, v62), vaddq_s16(v85, vshlq_s16(v78, v36)));
    v94 = vaddq_s16(vshlq_s16(v81, v36), v65);
    v95 = vaddq_s16(vaddq_s16(v70, vaddq_s16(v62, v78)), vshlq_s16(v62, v36));
    v96 = vaddq_s16(v94, v87);
    v97 = vaddq_s16(vshlq_s16(v95, v37), v89);
    v98 = vaddq_s16(v92, v90);
    v99 = vaddq_s16(vshlq_s16(v93, v37), v91);
    v100 = vsubq_s16(v90, v92);
    v101 = vsubq_s16(vshlq_s16(v91, v37), v93);
    v102 = vsubq_s16(v87, v94);
    v103 = vsubq_s16(v95, vshlq_s16(v89, v37));
    v104 = vaddq_s16(v103, v96);
    v105 = vaddq_s16(v101, v98);
    v106 = vaddq_s16(v99, v100);
    v107 = vaddq_s16(v97, v102);
    v108 = vsubq_s16(v102, v97);
    v109 = vsubq_s16(v100, v99);
    v110 = vsubq_s16(v98, v101);
    v111 = vsubq_s16(v96, v103);
    v112 = (int32x4_t)vzip1q_s16(v104, v105);
    v113 = (int32x4_t)vzip2q_s16(v104, v105);
    v114 = (int32x4_t)vzip1q_s16(v106, v107);
    v115 = (int32x4_t)vzip2q_s16(v106, v107);
    v116 = (int32x4_t)vzip1q_s16(v108, v109);
    v117 = (int32x4_t)vzip2q_s16(v108, v109);
    v118 = (int32x4_t)vzip1q_s16(v110, v111);
    v119 = (int32x4_t)vzip2q_s16(v110, v111);
    v120 = (int64x2_t)vzip1q_s32(v112, v114);
    v121 = (int64x2_t)vzip2q_s32(v112, v114);
    v122 = (int64x2_t)vzip1q_s32(v116, v118);
    v123 = (int64x2_t)vzip2q_s32(v116, v118);
    v124 = (int64x2_t)vzip1q_s32(v113, v115);
    v125 = (int64x2_t)vzip2q_s32(v113, v115);
    v126 = (int64x2_t)vzip1q_s32(v117, v119);
    v127 = (int64x2_t)vzip2q_s32(v117, v119);
    v128 = (int16x8_t)vzip1q_s64(v120, v122);
    v129 = (int16x8_t)vzip2q_s64(v120, v122);
    v130 = (int16x8_t)vzip1q_s64(v121, v123);
    v131 = (int16x8_t)vzip2q_s64(v121, v123);
    v132 = (int16x8_t)vzip1q_s64(v124, v126);
    v133 = (int16x8_t)vzip2q_s64(v124, v126);
    v134 = (int16x8_t)vzip1q_s64(v125, v127);
    v135 = (int16x8_t)vzip2q_s64(v125, v127);
    v136 = vaddq_s16(v128, v132);
    v137 = vsubq_s16(v133, vaddq_s16(vshlq_s16(v135, v36), vaddq_s16(v135, v131)));
    v138 = vsubq_s16(v128, v132);
    v139 = vsubq_s16(vaddq_s16(v135, v129), vaddq_s16(vshlq_s16(v131, v36), v131));
    v140 = vsubq_s16(vshlq_s16(v130, v36), v134);
    v141 = vaddq_s16(vsubq_s16(vshlq_s16(v133, v36), v129), vaddq_s16(v135, v133));
    v142 = vaddq_s16(vshlq_s16(v134, v36), v130);
    v143 = vaddq_s16(vaddq_s16(vshlq_s16(v129, v36), vaddq_s16(v133, v131)), v129);
    v144 = vaddq_s16(v137, vshlq_s16(v143, v37));
    v145 = vaddq_s16(v139, vshlq_s16(v141, v37));
    v146 = vsubq_s16(v138, v140);
    v147 = vsubq_s16(vshlq_s16(v139, v37), v141);
    v148 = vsubq_s16(v136, v142);
    v149 = vsubq_s16(v143, vshlq_s16(v137, v37));
    v12 = vaddq_s16(vaddq_s16(v136, v26), v142);
    v11 = vaddq_s16(vaddq_s16(v138, v26), v140);
    v150 = vaddq_s16(v146, v26);
    v151 = vaddq_s16(v148, v26);
    *v88 = vshlq_s16(vaddq_s16(v12, v149), v38);
    v13 = vshlq_s16(vaddq_s16(v11, v147), v38);
    v88[2] = v13;
    v88[4] = vshlq_s16(vaddq_s16(v150, v145), v38);
    v88[6] = vshlq_s16(vaddq_s16(v151, v144), v38);
    v88[8] = vshlq_s16(vsubq_s16(v151, v144), v38);
    v88[10] = vshlq_s16(vsubq_s16(v150, v145), v38);
    v88[12] = vshlq_s16(vsubq_s16(v11, v147), v38);
    v88[14] = vshlq_s16(vsubq_s16(v12, v149), v38);
LABEL_18:
    v15 >>= 1;
    ++v35;
    v14 += 128;
  }
  while (v14 != 512);
  return result;
}

int8x16_t *sub_2160A78E8(int8x16_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  int16x8_t v8;
  int16x8_t v9;
  unsigned int v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  uint64_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  uint64_t v79;
  uint16x8_t v80;
  int8x16_t *v81;
  int32x4_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t *v85;
  int16x8_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int64x2_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int32x4_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int64x2_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int64x2_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  uint64_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int8x16_t v140;
  int32x4_t *v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int v145;
  uint64_t v146;
  int8x16x2_t v147;
  int8x16x2_t v148;
  int8x16x2_t v149;
  int8x16x2_t v150;
  int8x16x2_t v151;

  v146 = *MEMORY[0x24BDAC8D0];
  v4 = (result[51].u8[2] / 6u) & 0x1F;
  v5 = result[51].i8[2] % 6u;
  v6 = result[51].u8[0];
  v145 = v6;
  v144 = vdupq_n_s32(16843009 * v6);
  v7 = *(unsigned __int8 *)(a3 + 12);
  if (*(_BYTE *)(a3 + 12))
  {
    v8 = *(int16x8_t *)&asc_2160F3480[16 * v5];
    v9 = *(int16x8_t *)(a4 + 16 * v5);
    v10 = v4 - 4;
    if (v4 <= 3)
    {
      v18 = 0;
      v17 = 0;
      v12 = 1 << (3 - v4);
    }
    else
    {
      if (v4 >= 6)
      {
        v11 = 0;
        LOWORD(v12) = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = (unsigned __int16)(v4 - 6);
        v17 = 1;
        goto LABEL_9;
      }
      LOWORD(v12) = 0;
      v17 = 1;
      v18 = v4 - 4;
      v10 = 0;
    }
    v16 = 0;
    v15 = 6 - v4;
    v11 = 1;
    v14 = 1 << (5 - v4);
    v13 = v10;
    v10 = v18;
  }
  else
  {
    v17 = 0;
    LOWORD(v12) = 0;
    v13 = 0;
    v10 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v9 = (int16x8_t)vshlq_u16(*(uint16x8_t *)&asc_2160F3480[16 * v5], (uint16x8_t)vdupq_n_s16(v4));
    v11 = 1;
    v8 = v9;
  }
LABEL_9:
  v19 = (int16x8_t)vqtbl1q_s8((int8x16_t)vzip1q_s16(v9, v9), (int8x16_t)xmmword_2160EE800);
  v20 = result[1];
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22.i64[0] = 0xFFFFLL;
  v22.i64[1] = 0xFFFFLL;
  v23 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vorrq_s8(vorrq_s8(vandq_s8(v20, (int8x16_t)xmmword_2160F2C90), vandq_s8(*result, (int8x16_t)xmmword_2160F2C70)), vextq_s8((int8x16_t)0, vandq_s8(v20, v21), 0xEuLL)), (int8x16_t)xmmword_2160F2CA0), (int8x16_t)xmmword_2160F1920);
  v24 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vorrq_s8(vorrq_s8(vandq_s8(v20, (int8x16_t)xmmword_2160F2C80), vandq_s8(*result, (int8x16_t)xmmword_2160F2C90)), vextq_s8(vandq_s8(*result, v22), (int8x16_t)0, 2uLL)), (int8x16_t)xmmword_2160F1930), (int8x16_t)xmmword_2160F2CB0);
  if (*(_BYTE *)(a3 + 12))
  {
    if ((v11 & 1) == 0)
    {
      v32 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v19.i8), (int16x8_t)vmull_high_s16(v23, v19));
      v33 = vmulq_s16(v23, v19);
      v34 = (uint32x4_t)vzip2q_s16(v33, v32);
      v35 = (uint32x4_t)vdupq_n_s32(v16);
      v36 = (uint32x4_t)vzip1q_s16(v33, v32);
      v28 = (int32x4_t)vshlq_u32(v34, v35);
      v29 = (int32x4_t)vshlq_u32(v36, v35);
      v37 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v19.i8), (int16x8_t)vmull_high_s16(v24, v19));
      v38 = vmulq_s16(v24, v19);
      v39 = (uint32x4_t)vzip2q_s16(v38, v37);
      v25 = (int32x4_t)vzip1q_s16(v38, v37);
      v40 = (int32x4_t)vshlq_u32(v39, v35);
      v41 = (int32x4_t)vshlq_u32((uint32x4_t)v25, v35);
      v25.i32[0] = 0;
      goto LABEL_18;
    }
    v25.i32[0] = v15;
    v26 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v19.i8), (int16x8_t)vmull_high_s16(v23, v19));
    v27 = vmulq_s16(v23, v19);
    v28 = (int32x4_t)vzip2q_s16(v27, v26);
    v29 = vaddq_s32((int32x4_t)v14, (int32x4_t)vzip1q_s16(v27, v26));
    v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v19.i8), (int16x8_t)vmull_high_s16(v24, v19));
    v31 = vmulq_s16(v24, v19);
  }
  else
  {
    if ((v19.i8[0] & 3) != 0)
    {
      v25 = (int32x4_t)xmmword_2160F2CC0;
    }
    else
    {
      v25.i64[0] = 0x1000100010001;
      v25.i64[1] = 0x1000100010001;
      v19 = (int16x8_t)vshlq_u16((uint16x8_t)v19, (uint16x8_t)v25);
      v25.i8[0] = 0;
      v25.i16[1] = 0;
      v25.i32[1] = 0;
      v25.i64[1] = 0;
    }
    v42 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v19.i8), (int16x8_t)vmull_high_s16(v23, v19));
    v43 = vmulq_s16(v19, v23);
    v28 = (int32x4_t)vzip2q_s16(v43, v42);
    v29 = vaddq_s32(v25, (int32x4_t)vzip1q_s16(v43, v42));
    v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v19.i8), (int16x8_t)vmull_high_s16(v24, v19));
    v31 = vmulq_s16(v19, v24);
  }
  v40 = (int32x4_t)vzip2q_s16(v31, v30);
  v41 = (int32x4_t)vzip1q_s16(v31, v30);
LABEL_18:
  v44 = a3 + 112;
  v45 = vaddq_s32(v29, v41);
  v46 = vaddq_s32(v28, v40);
  v47 = vsubq_s32(v29, v41);
  v48 = vsubq_s32(v28, v40);
  v49 = vaddq_s32(v45, v46);
  v50 = vsubq_s32(v45, v46);
  v51 = vsubq_s32(v47, v48);
  v52 = vaddq_s32(v47, v48);
  v53 = vzip1q_s32(v49, v51);
  v54 = vzip2q_s32(v49, v51);
  v55 = vzip1q_s32(v50, v52);
  v56 = vzip2q_s32(v50, v52);
  v57 = vzip1q_s32(v53, v55);
  v58 = vzip2q_s32(v53, v55);
  v59 = vzip1q_s32(v54, v56);
  v60 = vzip2q_s32(v54, v56);
  v61 = vaddq_s32(v57, v58);
  v62 = vsubq_s32(v57, v58);
  v63 = vaddq_s32(v59, v60);
  v64 = vsubq_s32(v59, v60);
  v65 = vaddq_s32(v61, v63);
  v66 = vsubq_s32(v61, v63);
  v67 = vsubq_s32(v62, v64);
  v68 = vaddq_s32(v62, v64);
  v69 = vdupq_n_s32(-v25.i32[0]);
  v70 = vshlq_s32(v65, v69);
  v71 = vshlq_s32(v66, v69);
  v72 = vshlq_s32(v67, v69);
  v73 = vshlq_s32(v68, v69);
  *(int16x4_t *)v69.i8 = vqmovn_s32(v70);
  *(int16x4_t *)v70.i8 = vqmovn_s32(v71);
  *(int16x4_t *)v71.i8 = vqmovn_s32(v72);
  *(int16x4_t *)v73.i8 = vqmovn_s32(v73);
  v74 = (int16x8_t)vzip1q_s32(v69, v70);
  v75 = (int16x8_t)vzip1q_s32(v71, v73);
  v76 = (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_2160F2CD0, (int8x16_t)xmmword_2160EE800);
  v77 = vqaddq_s16(v74, v76);
  v78 = vqaddq_s16(v75, v76);
  if (v6)
  {
    v79 = 0;
    v80 = (uint16x8_t)vdupq_n_s16(v10);
    v81 = result + 3;
    v82 = vdupq_n_s32(v13);
    v83.i64[0] = 0x5000500050005;
    v83.i64[1] = 0x5000500050005;
    result = (int8x16_t *)&unk_2160F2000;
    v84.i64[0] = -1;
    v84.i64[1] = -1;
    do
    {
      v85 = (int16x8_t *)(v44 + (unsigned __int16)word_2160F3450[v79]);
      if (v144.i16[v79])
      {
        v86 = (int16x8_t)vandq_s8((int8x16_t)v77, (int8x16_t)xmmword_2160F2DA0);
        v87 = v81[-1];
        v88 = v81[1];
        v89 = v81[2];
        v151.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v87, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
        v151.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*v81, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
        v90 = (int16x8_t)vqtbl2q_s8(v151, (int8x16_t)xmmword_2160F2D30);
        v147.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v87, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
        v147.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*v81, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
        v91 = (int16x8_t)vqtbl2q_s8(v147, (int8x16_t)xmmword_2160F2D70);
        v149.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v88, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
        v149.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v89, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
        v92 = (int16x8_t)vqtbl2q_s8(v149, (int8x16_t)xmmword_2160F2D30);
        v149.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v88, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
        v149.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v89, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
        v93 = (int16x8_t)vqtbl2q_s8(v149, (int8x16_t)xmmword_2160F2D70);
        if (v7)
        {
          if (v17)
          {
            v94 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v90, v8), v80);
            v95 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v91, v8), v80);
            v96 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v92, v8), v80);
            v97 = (int64x2_t)vshlq_u16((uint16x8_t)vmulq_s16(v93, v8), v80);
          }
          else
          {
            v103 = (int32x4_t)vqtbl1q_s8((int8x16_t)(__int16)v12, (int8x16_t)xmmword_2160EE800);
            v104 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v8.i8), (int16x8_t)vmull_high_s16(v90, v8));
            v105 = vmulq_s16(v90, v8);
            v94 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v105, v104), v103), v82)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v105, v104), v103), v82));
            v106 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v8.i8), (int16x8_t)vmull_high_s16(v91, v8));
            v107 = vmulq_s16(v91, v8);
            v95 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v107, v106), v103), v82)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v107, v106), v103), v82));
            v108 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v8.i8), (int16x8_t)vmull_high_s16(v92, v8));
            v109 = vmulq_s16(v92, v8);
            v96 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v109, v108), v103), v82)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v109, v108), v103), v82));
            v110 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v8.i8), (int16x8_t)vmull_high_s16(v93, v8));
            v111 = vmulq_s16(v93, v8);
            v97 = (int64x2_t)vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v111, v110), v103), v82)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v111, v110), v103), v82));
          }
          v101 = (int64x2_t)vaddq_s16(v94, v86);
          v102 = (int64x2_t)vaddq_s16(v96, v86);
        }
        else
        {
          v101 = (int64x2_t)vmlaq_s16(v86, v90, v8);
          v95 = vmulq_s16(v91, v8);
          v102 = (int64x2_t)vmlaq_s16(v86, v92, v8);
          v97 = (int64x2_t)vmulq_s16(v93, v8);
        }
        v112 = v101;
        v112.i16[0] = v77.i16[0];
        v113 = (int16x8_t)vzip2q_s64(v101, v102);
        v102.i16[0] = vqtbl1q_s8((int8x16_t)vzip1q_s16(v77, v77), (int8x16_t)xmmword_2160F18A0).u16[0];
        v114 = (int16x8_t)vzip1q_s64(v112, v102);
        v115 = (int16x8_t)vzip2q_s64((int64x2_t)v95, v97);
        v95.i64[1] = v97.i64[0];
        v116 = vaddq_s16(v114, v95);
        v117 = vsubq_s16(v114, v95);
        v118 = vshlq_s16(v115, v84);
        v119 = vsubq_s16(vshlq_s16(v113, v84), v115);
        v120 = vaddq_s16(v118, v113);
        v121 = vaddq_s16(v116, v120);
        v122 = vaddq_s16(v117, v119);
        v123 = vsubq_s16(v117, v119);
        v124 = vsubq_s16(v116, v120);
        v125 = vzip1q_s16(v121, v123);
        v126 = vzip2q_s16(v121, v123);
        v127 = vzip1q_s16(v122, v124);
        v128 = vzip2q_s16(v122, v124);
        v148.val[1] = (int8x16_t)vdupq_lane_s64(v126.i64[0], 0);
        v148.val[0] = (int8x16_t)vdupq_lane_s64(v128.i64[0], 0);
        v129 = vzip1q_s16(v125, v127);
        v148.val[0] = vqtbl2q_s8(v148, (int8x16_t)xmmword_2160F2C40);
        v148.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v129, (int64x2_t)v148.val[0]);
        v150.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v125, 1);
        v150.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v127, 1);
        v130 = (int16x8_t)vqtbl2q_s8(v150, (int8x16_t)xmmword_2160F1950);
        v131 = (int64x2_t)vzip2q_s16(v126, v128);
        v132 = (int16x8_t)vzip2q_s64((int64x2_t)v130, v131);
        v129.i64[1] = v148.val[0].i64[0];
        v130.i64[1] = v131.i64[0];
        v133 = vaddq_s16(v129, v130);
        v134 = vsubq_s16(v129, v130);
        v148.val[0] = (int8x16_t)vshlq_s16(v132, v84);
        v135 = vsubq_s16(vshlq_s16((int16x8_t)v148.val[1], v84), v132);
        v136 = vaddq_s16((int16x8_t)v148.val[0], (int16x8_t)v148.val[1]);
        *v85 = vshlq_s16(vaddq_s16(v133, v136), v83);
        v85[2] = vshlq_s16(vaddq_s16(v134, v135), v83);
        v100 = vshlq_s16(vsubq_s16(v133, v136), v83);
        v85[4] = vshlq_s16(vsubq_s16(v134, v135), v83);
      }
      else
      {
        v98 = vshlq_s16(v77, v83);
        v99 = (int32x4_t)vzip1q_s16(v98, v98);
        v100 = (int16x8_t)vzip1q_s32(v99, v99);
        *v85 = v100;
        v85[2] = v100;
        v85[4] = v100;
      }
      v85[6] = v100;
      ++v79;
      v77 = (int16x8_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 4uLL);
      v78 = (int16x8_t)vqtbl1q_s8((int8x16_t)v78, (int8x16_t)xmmword_2160F2D80);
      v81 += 4;
    }
    while (v79 != 8);
  }
  else
  {
    v137 = 0;
    v138.i64[0] = 0x5000500050005;
    v138.i64[1] = 0x5000500050005;
    v139 = vshlq_s16(v77, v138);
    v140 = (int8x16_t)vshlq_s16(v78, v138);
    do
    {
      v141 = (int32x4_t *)(v44 + (unsigned __int16)word_2160F3450[v137]);
      v142 = (int32x4_t)vzip1q_s16(v139, v139);
      v143 = vzip1q_s32(v142, v142);
      *v141 = v143;
      v141[2] = v143;
      v141[4] = v143;
      v141[6] = v143;
      v139 = (int16x8_t)vextq_s8((int8x16_t)v139, v140, 4uLL);
      v140 = vqtbl1q_s8(v140, (int8x16_t)xmmword_2160F2D80);
      ++v137;
    }
    while (v137 != 8);
  }
  return result;
}

int16x8_t sub_2160A808C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  int16x8_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  int v16;
  int v17;
  uint64_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int16x8_t result;
  uint64_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int32x4_t *v33;
  int32x4_t v34;
  int32x4_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int v40;
  int16x8_t v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = (*(unsigned __int8 *)(a1 + 818) / 6u) & 0x1F;
  v6 = *(_BYTE *)(a1 + 818) % 6u;
  v7 = *(unsigned __int8 *)(a1 + 816);
  v40 = v7;
  v39 = vdupq_n_s32(16843009 * v7);
  v8 = *(unsigned __int8 *)(a3 + 12);
  if (*(_BYTE *)(a3 + 12))
  {
    v36 = *(int16x8_t *)&asc_2160F3480[16 * v6];
    v9 = *(int16x8_t *)(a4 + 16 * v6);
    if (v5 <= 3)
    {
      v10 = 0;
      v17 = 0;
      v12 = 4 - v5;
      v11 = 1 << (3 - v5);
    }
    else
    {
      v10 = v5 - 4;
      if (v5 >= 6)
      {
        LOWORD(v11) = 0;
        v12 = 0;
        LOWORD(v13) = 0;
        v14 = 0;
        v15 = v5 - 6;
        v16 = 1;
        v17 = 1;
        goto LABEL_9;
      }
      v12 = 0;
      LOWORD(v11) = 0;
      v17 = 1;
    }
    v16 = 0;
    v15 = 0;
    v14 = 6 - v5;
    v13 = 1 << (5 - v5);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    LOWORD(v11) = 0;
    v12 = 0;
    v10 = 0;
    LOWORD(v13) = 0;
    v14 = 0;
    v15 = 0;
    v9 = (int16x8_t)vshlq_u16(*(uint16x8_t *)&asc_2160F3480[16 * v6], (uint16x8_t)vdupq_n_s16(v5));
    v36 = v9;
  }
LABEL_9:
  v18 = a3 + 112;
  sub_2160AAE5C(a1, (float *)v41[0].i32, v16, v8, v15, v14, v13, (uint16x8_t)vqtbl1q_s8((int8x16_t)vzip1q_s16(v9, v9), (int8x16_t)xmmword_2160EE800));
  v19 = (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_2160F2CD0, (int8x16_t)xmmword_2160EE800);
  v20 = vqaddq_s16(v41[0], v19);
  v21 = vqaddq_s16(v41[1], v19);
  if (v7)
  {
    v22 = 0;
    v23 = a1 + 32;
    do
    {
      v24 = v18 + (unsigned __int16)word_2160F3450[v22];
      if (v39.i16[v22])
      {
        v37 = v20;
        v38 = v21;
        sub_2160AB02C(v23, v23 + 32, (int16x8_t *)v24, v17, v10, v12, (__int16)v11, v8, (int16x8_t)v20.u16[0], (__n128)vqtbl1q_s8((int8x16_t)vzip1q_s16(v20, v20), (int8x16_t)xmmword_2160F18A0), v36);
        v20 = v37;
        v21 = v38;
      }
      else
      {
        v25.i64[0] = 0x5000500050005;
        v25.i64[1] = 0x5000500050005;
        v26 = vshlq_s16(v20, v25);
        v27 = (int32x4_t)vzip1q_s16(v26, v26);
        v28 = vzip1q_s32(v27, v27);
        *(int32x4_t *)v24 = v28;
        *(int32x4_t *)(v24 + 32) = v28;
        *(int32x4_t *)(v24 + 64) = v28;
        *(int32x4_t *)(v24 + 96) = v28;
      }
      ++v22;
      v20 = (int16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 4uLL);
      result = (int16x8_t)xmmword_2160F2D80;
      v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)v21, (int8x16_t)xmmword_2160F2D80);
      v23 += 64;
    }
    while (v22 != 8);
  }
  else
  {
    v30 = 0;
    v31.i64[0] = 0x5000500050005;
    v31.i64[1] = 0x5000500050005;
    result = vshlq_s16(v20, v31);
    v32 = (int8x16_t)vshlq_s16(v21, v31);
    do
    {
      v33 = (int32x4_t *)(v18 + (unsigned __int16)word_2160F3450[v30]);
      v34 = (int32x4_t)vzip1q_s16(result, result);
      v35 = vzip1q_s32(v34, v34);
      *v33 = v35;
      v33[2] = v35;
      v33[4] = v35;
      v33[6] = v35;
      result = (int16x8_t)vextq_s8((int8x16_t)result, v32, 4uLL);
      v32 = vqtbl1q_s8(v32, (int8x16_t)xmmword_2160F2D80);
      ++v30;
    }
    while (v30 != 8);
  }
  return result;
}

uint64_t sub_2160A8384(int16x8_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = sub_2160DD91C(a1[51].u8[2], *(char *)(a3 + 13));
  v6 = sub_2160DD91C(a1[51].u8[2], *(char *)(a3 + 14));
  v9 = a1[51].u8[1];
  sub_2160A8428(a1 + 50, (uint64_t)a1[34].i64, (uint64_t)a1[42].i64, (uint64_t)v8, &v7, &v6, (_OWORD *)(a3 + 624), *(unsigned __int8 *)(a3 + 12));
  return 0;
}

int16x8_t *sub_2160A8428(int16x8_t *result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6, _OWORD *a7, int a8)
{
  int v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint64_t v29;
  int16x8_t v30;
  int8x16_t v31;
  int8x16_t *v32;
  int8x16_t v33;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  char *v37;
  int16x8_t v38;
  int16x8_t v39;
  uint32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  unsigned int v65;
  int16x8_t *v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int8x16x2_t v89;

  v8 = *(_DWORD *)(a4 + 16);
  if (v8)
  {
    v9 = (int16x8_t)vshlq_u16(*(uint16x8_t *)&asc_2160F3480[((unint64_t)*a5 >> 1) & 0x70], (uint16x8_t)vdupq_n_s16(*a5 & 0x1F));
    v10 = (int16x8_t)vshlq_u16(*(uint16x8_t *)&asc_2160F3480[((unint64_t)*a6 >> 1) & 0x70], (uint16x8_t)vdupq_n_s16(*a6 & 0x1F));
    v11 = vzip2q_s16((int16x8_t)vdupq_lane_s64(result->i64[0], 0), *result);
    v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)vzip1q_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v9, (int8x16_t)xmmword_2160EE7D0), (int16x8_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_2160EE7D0)), (int8x16_t)xmmword_2160EE800);
    v13 = vmulq_s16(v11, v12);
    if (a8)
    {
      v14 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v12.i8), (int16x8_t)vmull_high_s16(v11, v12));
      v15 = (int32x4_t)vzip1q_s16(v13, v14);
      v16 = (int32x4_t)vzip2q_s16(v13, v14);
      v17 = (int64x2_t)vaddq_s32(v15, v16);
      v18 = (int64x2_t)vsubq_s32(v15, v16);
      v15.i64[0] = v17.i64[0];
      v15.i64[1] = v18.i64[0];
      v19 = (int32x4_t)vzip2q_s64(v17, v18);
      v20 = vaddq_s32(v15, v19);
      v21 = (int64x2_t)vsubq_s32(v15, v19);
      v15.i64[0] = v20.i64[0];
      v15.i64[1] = v21.i64[0];
      v22 = (int32x4_t)vzip2q_s64((int64x2_t)v20, v21);
      v20.i64[0] = 0x400000004;
      v20.i64[1] = 0x400000004;
      v23 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(v15, v20)), vshlq_s32(v22, v20));
    }
    else
    {
      v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_2160F18B0);
      v25 = (int16x8_t)vzip1q_s32((int32x4_t)vqaddq_s16(v13, v24), (int32x4_t)vqsubq_s16(v13, v24));
      v26 = (int16x8_t)vqtbl1q_s8((int8x16_t)v25, (int8x16_t)xmmword_2160F18B0);
      v27 = (int16x8_t)vzip1q_s32((int32x4_t)vqaddq_s16(v25, v26), (int32x4_t)vqsubq_s16(v25, v26));
      v25.i64[0] = -1;
      v25.i64[1] = -1;
      v23 = vshlq_s16(v27, v25);
    }
    v28 = vqaddq_s16(v23, (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_2160F2CD0, (int8x16_t)xmmword_2160EE800));
    if ((v8 & 2) != 0)
    {
      v34 = 0;
      v35 = vzip1q_s16(v9, v10);
      v36 = vzip2q_s16(v9, v10);
      v37 = &byte_2160F3460;
      v38.i64[0] = -1;
      v38.i64[1] = -1;
      v39.i64[0] = 0x5000500050005;
      v39.i64[1] = 0x5000500050005;
      v40.i64[0] = 0x300000003;
      v40.i64[1] = 0x300000003;
      do
      {
        v41 = *(int8x16_t *)(a2 + v34);
        v42 = *(int8x16_t *)(a2 + v34 + 16);
        v43 = *(int8x16_t *)(a3 + v34);
        v44 = *(int8x16_t *)(a3 + v34 + 16);
        v89.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v41, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
        v89.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v42, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
        v45 = (int16x8_t)vqtbl2q_s8(v89, (int8x16_t)xmmword_2160F2D30);
        v89.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v41, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
        v89.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v42, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
        v46 = (int16x8_t)vqtbl2q_s8(v89, (int8x16_t)xmmword_2160F2D70);
        v89.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v43, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
        v89.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v44, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
        v89.val[0] = vqtbl2q_s8(v89, (int8x16_t)xmmword_2160F2D30);
        v89.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v43, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
        v47 = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v44, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
        v89.val[1] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v89 + 16), (int8x16_t)xmmword_2160F2D70);
        v48 = vzip1q_s16(v45, (int16x8_t)v89.val[0]);
        v49 = vzip2q_s16(v45, (int16x8_t)v89.val[0]);
        v50 = vzip1q_s16(v46, (int16x8_t)v89.val[1]);
        v51 = vzip2q_s16(v46, (int16x8_t)v89.val[1]);
        if (a8)
        {
          v52 = (int32x4_t)vqtbl1q_s8((int8x16_t)xmmword_2160F18E0, (int8x16_t)xmmword_2160EE800);
          v53 = vmulq_s16(v48, v35);
          v54 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v35.i8), (int16x8_t)vmull_high_s16(v48, v35));
          v55 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v53, v54), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v53, v54), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
          v56 = vmulq_s16(v49, v36);
          v57 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v36.i8), (int16x8_t)vmull_high_s16(v49, v36));
          v58 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v56, v57), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v56, v57), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
          v59 = vmulq_s16(v50, v35);
          v60 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v35.i8), (int16x8_t)vmull_high_s16(v50, v35));
          v61 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v59, v60), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v59, v60), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
          v62 = vmulq_s16(v51, v36);
          v63 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v36.i8), (int16x8_t)vmull_high_s16(v51, v36));
          v64 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v62, v63), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v62, v63), v52), v40), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
        }
        else
        {
          v55 = vmulq_s16(v48, v35);
          v58 = vmulq_s16(v49, v36);
          v61 = vmulq_s16(v50, v35);
          v64 = vmulq_s16(v51, v36);
        }
        v65 = *v37++;
        v66 = (int16x8_t *)((char *)a7 + v65);
        v55.i32[0] = v28.i32[0];
        v67 = vaddq_s16(v55, v61);
        v68 = vsubq_s16(v55, v61);
        v69 = vshlq_s16(v64, v38);
        v70 = vsubq_s16(vshlq_s16(v58, v38), v64);
        v71 = vaddq_s16(v69, v58);
        v72 = (int32x4_t)vaddq_s16(v67, v71);
        v73 = (int32x4_t)vaddq_s16(v68, v70);
        v74 = (int32x4_t)vsubq_s16(v68, v70);
        v75 = (int32x4_t)vsubq_s16(v67, v71);
        v76 = vzip1q_s32(v72, v74);
        v77 = vzip2q_s32(v72, v74);
        v78 = vzip1q_s32(v73, v75);
        v79 = vzip2q_s32(v73, v75);
        v80 = (int16x8_t)vzip1q_s32(v76, v78);
        v81 = (int16x8_t)vzip2q_s32(v76, v78);
        v82 = (int16x8_t)vzip1q_s32(v77, v79);
        v83 = (int16x8_t)vzip2q_s32(v77, v79);
        v84 = vaddq_s16(v80, v82);
        v85 = vsubq_s16(v80, v82);
        v86 = vshlq_s16(v83, v38);
        v87 = vsubq_s16(vshlq_s16(v81, v38), v83);
        v88 = vaddq_s16(v86, v81);
        *v66 = vshlq_s16(vaddq_s16(v84, v88), v39);
        v66[2] = vshlq_s16(vaddq_s16(v85, v87), v39);
        v66[4] = vshlq_s16(vsubq_s16(v85, v87), v39);
        v66[6] = vshlq_s16(vsubq_s16(v84, v88), v39);
        v28 = (int16x8_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_2160F2D80);
        v34 += 32;
      }
      while (v34 != 128);
    }
    else
    {
      v29 = 0;
      v30.i64[0] = 0x5000500050005;
      v30.i64[1] = 0x5000500050005;
      v31 = (int8x16_t)vshlq_s16(v28, v30);
      do
      {
        v32 = (int8x16_t *)((char *)a7 + *((unsigned __int8 *)&word_2160F3450[8] + v29));
        v33 = vqtbl1q_s8(v31, (int8x16_t)xmmword_2160EE800);
        *v32 = v33;
        v32[2] = v33;
        v32[4] = v33;
        v32[6] = v33;
        v31 = vqtbl1q_s8(v31, (int8x16_t)xmmword_2160F2D80);
        ++v29;
      }
      while (v29 != 4);
    }
  }
  else
  {
    a7[14] = 0u;
    a7[15] = 0u;
    a7[12] = 0u;
    a7[13] = 0u;
    a7[10] = 0u;
    a7[11] = 0u;
    a7[8] = 0u;
    a7[9] = 0u;
    a7[6] = 0u;
    a7[7] = 0u;
    a7[4] = 0u;
    a7[5] = 0u;
    a7[2] = 0u;
    a7[3] = 0u;
    *a7 = 0u;
    a7[1] = 0u;
  }
  return result;
}

uint64_t sub_2160A88F8(int16x8_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = sub_2160DD91C(a1[51].u8[2], *(char *)(a3 + 13));
  v6 = sub_2160DD91C(a1[51].u8[2], *(char *)(a3 + 14));
  v9 = a1[51].u8[1];
  sub_2160A899C(a1 + 50, (uint64_t)a1[34].i64, (uint64_t)a1[42].i64, (uint64_t)v8, &v7, &v6, (_OWORD *)(a3 + 624), *(unsigned __int8 *)(a3 + 12));
  return 0;
}

int16x8_t *sub_2160A899C(int16x8_t *result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6, _OWORD *a7, int a8)
{
  int v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint64_t v29;
  int16x8_t v30;
  int8x16_t v31;
  int8x16_t *v32;
  int8x16_t v33;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  char *v37;
  int8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  uint32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  unsigned int v63;
  int16x8_t *v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;

  v8 = *(_DWORD *)(a4 + 16);
  if (v8)
  {
    v9 = (int16x8_t)vshlq_u16(*(uint16x8_t *)&asc_2160F3480[((unint64_t)*a5 >> 1) & 0x70], (uint16x8_t)vdupq_n_s16(*a5 & 0x1F));
    v10 = (int16x8_t)vshlq_u16(*(uint16x8_t *)&asc_2160F3480[((unint64_t)*a6 >> 1) & 0x70], (uint16x8_t)vdupq_n_s16(*a6 & 0x1F));
    v11 = vzip2q_s16((int16x8_t)vdupq_lane_s64(result->i64[0], 0), *result);
    v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)vzip1q_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v9, (int8x16_t)xmmword_2160EE7D0), (int16x8_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_2160EE7D0)), (int8x16_t)xmmword_2160EE800);
    v13 = vmulq_s16(v11, v12);
    if (a8)
    {
      v14 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v12.i8), (int16x8_t)vmull_high_s16(v11, v12));
      v15 = (int32x4_t)vzip1q_s16(v13, v14);
      v16 = (int32x4_t)vzip2q_s16(v13, v14);
      v17 = (int64x2_t)vaddq_s32(v15, v16);
      v18 = (int64x2_t)vsubq_s32(v15, v16);
      v15.i64[0] = v17.i64[0];
      v15.i64[1] = v18.i64[0];
      v19 = (int32x4_t)vzip2q_s64(v17, v18);
      v20 = vaddq_s32(v15, v19);
      v21 = (int64x2_t)vsubq_s32(v15, v19);
      v15.i64[0] = v20.i64[0];
      v15.i64[1] = v21.i64[0];
      v22 = (int32x4_t)vzip2q_s64((int64x2_t)v20, v21);
      v20.i64[0] = 0x400000004;
      v20.i64[1] = 0x400000004;
      v23 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(v15, v20)), vshlq_s32(v22, v20));
    }
    else
    {
      v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_2160F18B0);
      v25 = (int16x8_t)vzip1q_s32((int32x4_t)vqaddq_s16(v13, v24), (int32x4_t)vqsubq_s16(v13, v24));
      v26 = (int16x8_t)vqtbl1q_s8((int8x16_t)v25, (int8x16_t)xmmword_2160F18B0);
      v27 = (int16x8_t)vzip1q_s32((int32x4_t)vqaddq_s16(v25, v26), (int32x4_t)vqsubq_s16(v25, v26));
      v25.i64[0] = -1;
      v25.i64[1] = -1;
      v23 = vshlq_s16(v27, v25);
    }
    v28 = vqaddq_s16(v23, (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_2160F2CD0, (int8x16_t)xmmword_2160EE800));
    if ((v8 & 2) != 0)
    {
      v34 = 0;
      v35 = vzip1q_s16(v9, v10);
      v36 = vzip2q_s16(v9, v10);
      v37 = &byte_2160F3460;
      v38.i64[0] = 0xFFFF00000000;
      v38.i64[1] = 0xFFFF00000000;
      v39.i64[0] = -1;
      v39.i64[1] = -1;
      v40.i64[0] = 0x5000500050005;
      v40.i64[1] = 0x5000500050005;
      v41.i64[0] = 0x300000003;
      v41.i64[1] = 0x300000003;
      do
      {
        v42 = *(int16x8_t *)(a2 + v34 + 16);
        v43 = *(int16x8_t *)(a3 + v34 + 16);
        v44 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8(*(int8x16_t *)(a2 + v34), v38), 0xCuLL), vandq_s8(*(int8x16_t *)(a2 + v34), (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8(*(int8x16_t *)(a2 + v34), (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
        v45 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8(*(int8x16_t *)(a3 + v34), v38), 0xCuLL), vandq_s8(*(int8x16_t *)(a3 + v34), (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8(*(int8x16_t *)(a3 + v34), (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
        v46 = vzip1q_s16(v44, v45);
        v47 = vzip2q_s16(v44, v45);
        v48 = vzip1q_s16(v42, v43);
        v49 = vzip2q_s16(v42, v43);
        if (a8)
        {
          v50 = (int32x4_t)vqtbl1q_s8((int8x16_t)xmmword_2160F18E0, (int8x16_t)xmmword_2160EE800);
          v51 = vmulq_s16(v46, v35);
          v52 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v35.i8), (int16x8_t)vmull_high_s16(v46, v35));
          v53 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v51, v52), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v51, v52), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
          v54 = vmulq_s16(v47, v36);
          v55 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v36.i8), (int16x8_t)vmull_high_s16(v47, v36));
          v56 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v54, v55), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v54, v55), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
          v57 = vmulq_s16(v48, v35);
          v58 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v35.i8), (int16x8_t)vmull_high_s16(v48, v35));
          v59 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v57, v58), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v57, v58), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
          v60 = vmulq_s16(v49, v36);
          v61 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v36.i8), (int16x8_t)vmull_high_s16(v49, v36));
          v62 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip1q_s16(v60, v61), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850), (int64x2_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)vzip2q_s16(v60, v61), v50), v41), (int8x16_t)xmmword_2160F2DB0), (int8x16_t)xmmword_2160F2DC0), (int8x16_t)xmmword_2160EE850));
        }
        else
        {
          v53 = vmulq_s16(v46, v35);
          v56 = vmulq_s16(v47, v36);
          v59 = vmulq_s16(v48, v35);
          v62 = vmulq_s16(v49, v36);
        }
        v63 = *v37++;
        v64 = (int16x8_t *)((char *)a7 + v63);
        v53.i32[0] = v28.i32[0];
        v65 = vaddq_s16(v53, v59);
        v66 = vsubq_s16(v53, v59);
        v67 = vshlq_s16(v62, v39);
        v68 = vsubq_s16(vshlq_s16(v56, v39), v62);
        v69 = vaddq_s16(v67, v56);
        v70 = (int32x4_t)vaddq_s16(v65, v69);
        v71 = (int32x4_t)vaddq_s16(v66, v68);
        v72 = (int32x4_t)vsubq_s16(v66, v68);
        v73 = (int32x4_t)vsubq_s16(v65, v69);
        v74 = vzip1q_s32(v70, v72);
        v75 = vzip2q_s32(v70, v72);
        v76 = vzip1q_s32(v71, v73);
        v77 = vzip2q_s32(v71, v73);
        v78 = (int16x8_t)vzip1q_s32(v74, v76);
        v79 = (int16x8_t)vzip2q_s32(v74, v76);
        v80 = (int16x8_t)vzip1q_s32(v75, v77);
        v81 = (int16x8_t)vzip2q_s32(v75, v77);
        v82 = vaddq_s16(v78, v80);
        v83 = vsubq_s16(v78, v80);
        v84 = vshlq_s16(v81, v39);
        v85 = vsubq_s16(vshlq_s16(v79, v39), v81);
        v86 = vaddq_s16(v84, v79);
        *v64 = vshlq_s16(vaddq_s16(v82, v86), v40);
        v64[2] = vshlq_s16(vaddq_s16(v83, v85), v40);
        v64[4] = vshlq_s16(vsubq_s16(v83, v85), v40);
        v64[6] = vshlq_s16(vsubq_s16(v82, v86), v40);
        v28 = (int16x8_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_2160F2D80);
        v34 += 32;
      }
      while (v34 != 128);
    }
    else
    {
      v29 = 0;
      v30.i64[0] = 0x5000500050005;
      v30.i64[1] = 0x5000500050005;
      v31 = (int8x16_t)vshlq_s16(v28, v30);
      do
      {
        v32 = (int8x16_t *)((char *)a7 + *((unsigned __int8 *)&word_2160F3450[8] + v29));
        v33 = vqtbl1q_s8(v31, (int8x16_t)xmmword_2160EE800);
        *v32 = v33;
        v32[2] = v33;
        v32[4] = v33;
        v32[6] = v33;
        v31 = vqtbl1q_s8(v31, (int8x16_t)xmmword_2160F2D80);
        ++v29;
      }
      while (v29 != 4);
    }
  }
  else
  {
    a7[14] = 0u;
    a7[15] = 0u;
    a7[12] = 0u;
    a7[13] = 0u;
    a7[10] = 0u;
    a7[11] = 0u;
    a7[8] = 0u;
    a7[9] = 0u;
    a7[6] = 0u;
    a7[7] = 0u;
    a7[4] = 0u;
    a7[5] = 0u;
    a7[2] = 0u;
    a7[3] = 0u;
    *a7 = 0u;
    a7[1] = 0u;
  }
  return result;
}

uint64_t sub_2160A8DBC(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int16x8_t *v7;
  int v8;
  unsigned int v9;
  int16x8_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int32x4_t v16;
  uint16x8_t v17;
  int32x4_t v18;
  int16x8_t *v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int64x2_t v38;
  int16x8_t *v39;
  int64x2_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int64x2_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  _BYTE v64[16];
  uint64_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;

  v2 = 0;
  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 40);
  v4 = *(unsigned __int8 *)(v3 + 52);
  v5 = *(unsigned __int8 *)(v3 + 55);
  do
  {
    v6 = v4 & 1;
    v4 >>= 1;
    *(_DWORD *)&v64[v2] = -v6;
    v2 += 4;
  }
  while (v2 != 16);
  v7 = *(int16x8_t **)(result + 56);
  v8 = *(unsigned __int8 *)(result + 1422192);
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  v9 = (171 * v5) >> 10;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v10 = *(int16x8_t *)&asc_2160F3480[16 * (((_BYTE)v5 - 6 * (_BYTE)v9) & 0x1F)];
  if (v8)
  {
    if (v5 < 0x18)
    {
      v14 = 0;
      v13 = v9 - 4;
      v11 = 1;
      v12 = 1 << (3 - v9);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = v9 - 4;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v10 = (int16x8_t)vshlq_u16((uint16x8_t)v10, (uint16x8_t)vdupq_n_s16(v9));
    v11 = 1;
  }
  v15 = 0;
  v16 = (int32x4_t)v12;
  v17 = (uint16x8_t)vdupq_n_s16(v14);
  v18 = vdupq_n_s32(v13);
  v19 = v7 + 5;
  v20.i64[0] = 0xFFFF00000000;
  v20.i64[1] = 0xFFFF00000000;
  v21.i64[0] = -1;
  v21.i64[1] = -1;
  v22.i64[0] = 0x5000500050005;
  v22.i64[1] = 0x5000500050005;
  do
  {
    if (*(_WORD *)&v64[v15 * 2])
    {
      v23 = v19[-2];
      v24 = *v19;
      v25 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8((int8x16_t)v19[-3], v20), 0xCuLL), vandq_s8((int8x16_t)v19[-3], (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8((int8x16_t)v19[-3], (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
      v26 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8((int8x16_t)v19[-1], v20), 0xCuLL), vandq_s8((int8x16_t)v19[-1], (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8((int8x16_t)v19[-1], (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
      if (v8)
      {
        if ((v11 & 1) != 0)
        {
          v16 = (int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_2160EE800);
          v27 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v25, v10));
          v28 = vmulq_s16(v25, v10);
          v29 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v28, v27), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v28, v27), v16), v18));
          v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v23, v10));
          v31 = vmulq_s16(v23, v10);
          v32 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v31, v30), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v31, v30), v16), v18));
          v33 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v26, v10));
          v34 = vmulq_s16(v26, v10);
          v35 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v34, v33), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v34, v33), v16), v18));
          v36 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v24, v10));
          v37 = vmulq_s16(v24, v10);
          v38 = (int64x2_t)vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v37, v36), v16), v18)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v37, v36), v16), v18));
        }
        else
        {
          v29 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v25, v10), v17);
          v32 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v23, v10), v17);
          v35 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v26, v10), v17);
          v38 = (int64x2_t)vshlq_u16((uint16x8_t)vmulq_s16(v24, v10), v17);
        }
      }
      else
      {
        v29 = vmulq_s16(v25, v10);
        v32 = vmulq_s16(v23, v10);
        v35 = vmulq_s16(v26, v10);
        v38 = (int64x2_t)vmulq_s16(v24, v10);
      }
      v39 = (int16x8_t *)((char *)a2 + 2 * word_2160F3470[v15]);
      v40 = (int64x2_t)vaddq_s16(v35, (int16x8_t)xmmword_2160F2D90);
      v41 = vaddq_s16(v29, (int16x8_t)xmmword_2160F2D90);
      v42 = (int16x8_t)vzip2q_s64((int64x2_t)v41, v40);
      v43 = (int16x8_t)vzip2q_s64((int64x2_t)v32, v38);
      v41.i64[1] = v40.i64[0];
      v32.i64[1] = v38.i64[0];
      v44 = vaddq_s16(v41, v32);
      v45 = vsubq_s16(v41, v32);
      v46 = vsubq_s16(vshlq_s16(v42, v21), v43);
      v47 = vaddq_s16(vshlq_s16(v43, v21), v42);
      v48 = vaddq_s16(v44, v47);
      v49 = vaddq_s16(v45, v46);
      v50 = vsubq_s16(v45, v46);
      v51 = vsubq_s16(v44, v47);
      v52 = vzip1q_s16(v48, v50);
      v53 = vzip2q_s16(v48, v50);
      v54 = vzip1q_s16(v49, v51);
      v55 = vzip2q_s16(v49, v51);
      v66.val[1] = (int8x16_t)vdupq_lane_s64(v53.i64[0], 0);
      v66.val[0] = (int8x16_t)vdupq_lane_s64(v55.i64[0], 0);
      v56 = vzip1q_s16(v52, v54);
      v66.val[0] = vqtbl2q_s8(v66, (int8x16_t)xmmword_2160F2C40);
      v66.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v56, (int64x2_t)v66.val[0]);
      v67.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v52, 1);
      v67.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v54, 1);
      v57 = (int16x8_t)vqtbl2q_s8(v67, (int8x16_t)xmmword_2160F1950);
      v58 = (int64x2_t)vzip2q_s16(v53, v55);
      v59 = (int16x8_t)vzip2q_s64((int64x2_t)v57, v58);
      v56.i64[1] = v66.val[0].i64[0];
      v57.i64[1] = v58.i64[0];
      v60 = vaddq_s16(v56, v57);
      v61 = vsubq_s16(v56, v57);
      v66.val[0] = (int8x16_t)vshlq_s16(v59, v21);
      v62 = vsubq_s16(vshlq_s16((int16x8_t)v66.val[1], v21), v59);
      v63 = vaddq_s16((int16x8_t)v66.val[0], (int16x8_t)v66.val[1]);
      *v39 = vshlq_s16(vaddq_s16(v60, v63), v22);
      v39[2] = vshlq_s16(vaddq_s16(v61, v62), v22);
      v39[4] = vshlq_s16(vsubq_s16(v61, v62), v22);
      v39[6] = vshlq_s16(vsubq_s16(v60, v63), v22);
    }
    ++v15;
    v19 += 4;
  }
  while (v15 != 8);
  return result;
}

unint64_t sub_2160A9190(unint64_t result, _OWORD *a2, uint64_t a3, double a4, int8x16_t a5, double a6, double a7, double a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  __int32 v13;
  uint64_t v14;
  int8x16_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint64_t v20;
  int8x16_t v21;
  int16x8_t v22;
  unsigned int v23;
  unsigned __int32 v24;
  int v25;
  int8x16_t v26;
  int16x4_t v27;
  int32x4_t v28;
  uint16x8_t v29;
  int32x4_t v30;
  __int16 *v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t *v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;

  a5.i32[0] = 0;
  v9 = 0;
  v10 = *(_QWORD *)(result + 40);
  v11 = *(unsigned __int8 *)(v10 + 52);
  v12 = *(_BYTE *)(v10 + 55);
  v13 = *(unsigned __int8 *)(result + 1422192);
  v14 = *(_QWORD *)(result + 56);
  v15.i32[1] = 0;
  v15.i64[1] = 0;
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v16 = v12;
  v17 = v12 / 6u;
  v18 = v12 % 6u;
  v19 = (uint16x8_t *)((char *)&unk_2160F34F0 + 128 * v18);
  v20 = a3 + (v18 << 7);
  v21 = (int8x16_t)xmmword_2160EE7C0;
  v22 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)xmmword_2160F2D90, (int8x16_t)xmmword_2160EE800), (int8x16_t)xmmword_2160EE7D0), (int8x16_t)xmmword_2160EE7C0);
  v23 = v17 - 6;
  LODWORD(result) = 1 << (5 - v17);
  v24 = (unsigned __int16)(v17 - 6);
  if (v16 >= 0x24)
    v23 = 0;
  else
    v24 = 0;
  if (v16 < 0x24)
  {
    v25 = 1;
  }
  else
  {
    LODWORD(result) = 0;
    v25 = 0;
  }
  if (v13)
  {
    result = result;
  }
  else
  {
    v25 = 1;
    v24 = 0;
    v23 = 0;
    result = 0;
  }
  if (!v13)
    v17 -= 2;
  v21.i32[0] = v13;
  v26 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v21, a5), 0);
  v21.i32[0] = v17;
  a9.i32[0] = v24;
  v15.i32[0] = result;
  v27 = (int16x4_t)vbslq_s8(v26, v21, a9).u64[0];
  v28 = (int32x4_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_2160EE800);
  v29 = (uint16x8_t)vdupq_lane_s16(v27, 0);
  v30 = vdupq_n_s32(v23);
  v31 = (__int16 *)(v14 + 80);
  v32.i64[0] = -1;
  v32.i64[1] = -1;
  v33.i64[0] = 0x1000100010001;
  v33.i64[1] = 0x1000100010001;
  v34.i64[0] = 0x5000500050005;
  v34.i64[1] = 0x5000500050005;
  do
  {
    if ((v11 & 1) == 0)
      goto LABEL_21;
    v35.i16[0] = *(v31 - 24);
    v35.i16[1] = *(v31 - 22);
    v35.i16[2] = *(v31 - 21);
    v35.i16[3] = *(v31 - 15);
    v36.i16[0] = *(v31 - 23);
    v36.i16[1] = *(v31 - 20);
    v36.i16[2] = *(v31 - 16);
    v36.i16[3] = *(v31 - 13);
    v37.i16[0] = *(v31 - 19);
    v37.i16[1] = *(v31 - 17);
    v37.i16[2] = *(v31 - 12);
    v37.i16[3] = *(v31 - 6);
    v38.i16[0] = *(v31 - 18);
    v38.i16[1] = *(v31 - 11);
    v38.i16[2] = *(v31 - 7);
    v38.i16[3] = *v31;
    v39.i16[0] = *(v31 - 10);
    v39.i16[1] = *(v31 - 8);
    v39.i16[2] = v31[1];
    v39.i16[3] = v31[7];
    v40.i16[0] = *(v31 - 9);
    v40.i16[1] = v31[2];
    v40.i16[2] = v31[6];
    v40.i16[3] = v31[16];
    v41.i16[0] = v31[3];
    v41.i16[1] = v31[5];
    v41.i16[2] = v31[17];
    v41.i16[3] = v31[20];
    result = (unint64_t)(v31 + 29);
    v42.i16[0] = v31[4];
    v42.i16[1] = v31[18];
    v42.i16[2] = v31[19];
    v42.i16[3] = v31[29];
    *(int16x4_t *)v43.i8 = v35;
    v43.i16[4] = *(v31 - 14);
    *(int16x4_t *)v44.i8 = v36;
    v44.i16[4] = *(v31 - 5);
    *(int16x4_t *)v45.i8 = v37;
    v45.i16[4] = *(v31 - 1);
    *(int16x4_t *)v46.i8 = v38;
    v46.i16[4] = v31[8];
    *(int16x4_t *)v47.i8 = v39;
    v47.i16[4] = v31[15];
    *(int16x4_t *)v48.i8 = v40;
    v48.i16[4] = v31[21];
    *(int16x4_t *)v49.i8 = v41;
    v49.i16[4] = v31[28];
    *(int16x4_t *)v50.i8 = v42;
    v50.i16[4] = v31[30];
    v43.i16[5] = *(v31 - 4);
    v44.i16[5] = *(v31 - 2);
    v45.i16[5] = v31[9];
    v46.i16[5] = v31[14];
    v47.i16[5] = v31[22];
    v48.i16[5] = v31[27];
    v49.i16[5] = v31[31];
    v50.i16[5] = v31[36];
    v43.i16[6] = *(v31 - 3);
    v44.i16[6] = v31[10];
    v45.i16[6] = v31[13];
    v46.i16[6] = v31[23];
    v47.i16[6] = v31[26];
    v48.i16[6] = v31[32];
    v49.i16[6] = v31[35];
    v50.i16[6] = v31[37];
    v43.i16[7] = v31[11];
    v44.i16[7] = v31[12];
    v45.i16[7] = v31[24];
    v46.i16[7] = v31[25];
    v47.i16[7] = v31[33];
    v48.i16[7] = v31[34];
    v49.i16[7] = v31[38];
    v50.i16[7] = v31[39];
    if (!v13)
    {
      v54 = vmulq_s16((int16x8_t)vshlq_u16(*v19, v29), v43);
      v59 = vmulq_s16((int16x8_t)vshlq_u16(v19[1], v29), v44);
      v62 = vmulq_s16((int16x8_t)vshlq_u16(v19[2], v29), v45);
      v67 = vmulq_s16((int16x8_t)vshlq_u16(v19[3], v29), v46);
      v70 = vmulq_s16((int16x8_t)vshlq_u16(v19[4], v29), v47);
      v75 = vmulq_s16((int16x8_t)vshlq_u16(v19[5], v29), v48);
      v78 = vmulq_s16((int16x8_t)vshlq_u16(v19[6], v29), v49);
      v83 = (int16x8_t)vshlq_u16(v19[7], v29);
LABEL_19:
      v82 = vmulq_s16(v83, v50);
      goto LABEL_20;
    }
    v51 = *(int16x8_t *)v20;
    if (!v25)
    {
      v54 = vmulq_s16((int16x8_t)vshlq_u16((uint16x8_t)v51, v29), v43);
      v59 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 16), v29), v44);
      v62 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 32), v29), v45);
      v67 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 48), v29), v46);
      v70 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 64), v29), v47);
      v75 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 80), v29), v48);
      v78 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 96), v29), v49);
      v83 = (int16x8_t)vshlq_u16(*(uint16x8_t *)(v20 + 112), v29);
      goto LABEL_19;
    }
    v52 = vuzp2q_s16((int16x8_t)vmull_s16(v35, *(int16x4_t *)v51.i8), (int16x8_t)vmull_high_s16(v43, v51));
    v53 = vmulq_s16(v51, v43);
    v54 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v53, v52), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v53, v52), v28), v30));
    v55 = *(int16x8_t *)(v20 + 16);
    v56 = *(int16x8_t *)(v20 + 32);
    v57 = vuzp2q_s16((int16x8_t)vmull_s16(v36, *(int16x4_t *)v55.i8), (int16x8_t)vmull_high_s16(v44, v55));
    v58 = vmulq_s16(v55, v44);
    v59 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v58, v57), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v58, v57), v28), v30));
    v60 = vuzp2q_s16((int16x8_t)vmull_s16(v37, *(int16x4_t *)v56.i8), (int16x8_t)vmull_high_s16(v45, v56));
    v61 = vmulq_s16(v56, v45);
    v62 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v61, v60), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v61, v60), v28), v30));
    v63 = *(int16x8_t *)(v20 + 48);
    v64 = *(int16x8_t *)(v20 + 64);
    v65 = vuzp2q_s16((int16x8_t)vmull_s16(v38, *(int16x4_t *)v63.i8), (int16x8_t)vmull_high_s16(v46, v63));
    v66 = vmulq_s16(v63, v46);
    v67 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v66, v65), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v66, v65), v28), v30));
    v68 = vuzp2q_s16((int16x8_t)vmull_s16(v39, *(int16x4_t *)v64.i8), (int16x8_t)vmull_high_s16(v47, v64));
    v69 = vmulq_s16(v64, v47);
    v70 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v69, v68), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v69, v68), v28), v30));
    v71 = *(int16x8_t *)(v20 + 80);
    v72 = *(int16x8_t *)(v20 + 96);
    v73 = vuzp2q_s16((int16x8_t)vmull_s16(v40, *(int16x4_t *)v71.i8), (int16x8_t)vmull_high_s16(v48, v71));
    v74 = vmulq_s16(v71, v48);
    v75 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v74, v73), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v74, v73), v28), v30));
    v76 = vuzp2q_s16((int16x8_t)vmull_s16(v41, *(int16x4_t *)v72.i8), (int16x8_t)vmull_high_s16(v49, v72));
    v77 = vmulq_s16(v72, v49);
    v78 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v77, v76), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v77, v76), v28), v30));
    v79 = *(int16x8_t *)(v20 + 112);
    v80 = vuzp2q_s16((int16x8_t)vmull_s16(v42, *(int16x4_t *)v79.i8), (int16x8_t)vmull_high_s16(v50, v79));
    v81 = vmulq_s16(v79, v50);
    v82 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v81, v80), v28), v30)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v81, v80), v28), v30));
LABEL_20:
    v84 = vaddq_s16(v70, v54);
    v85 = (int16x8_t *)((char *)a2 + 2 * word_2160F34E0[v9]);
    v86 = vsubq_s16(v75, vaddq_s16(vaddq_s16(v67, v82), vshlq_s16(v82, v32)));
    v87 = vsubq_s16(v54, v70);
    v88 = vsubq_s16(vaddq_s16(v59, v82), vaddq_s16(v67, vshlq_s16(v67, v32)));
    v89 = vsubq_s16(vshlq_s16(v62, v32), v78);
    v90 = vaddq_s16(vaddq_s16(vsubq_s16(v75, v59), v82), vshlq_s16(v75, v32));
    v91 = vaddq_s16(vshlq_s16(v78, v32), v62);
    v92 = vaddq_s16(vaddq_s16(v67, vaddq_s16(v59, v75)), vshlq_s16(v59, v32));
    v93 = vaddq_s16(v91, v84);
    v94 = vaddq_s16(vshlq_s16(v92, v33), v86);
    v95 = vaddq_s16(v89, v87);
    v96 = vaddq_s16(vshlq_s16(v90, v33), v88);
    v97 = vsubq_s16(v87, v89);
    v98 = vsubq_s16(vshlq_s16(v88, v33), v90);
    v99 = vsubq_s16(v84, v91);
    v100 = vsubq_s16(v92, vshlq_s16(v86, v33));
    v101 = vaddq_s16(v100, v93);
    v102 = vaddq_s16(v98, v95);
    v103 = vaddq_s16(v96, v97);
    v104 = vaddq_s16(v94, v99);
    v105 = vsubq_s16(v99, v94);
    v106 = vsubq_s16(v97, v96);
    v107 = vsubq_s16(v95, v98);
    v108 = vsubq_s16(v93, v100);
    v109 = (int32x4_t)vzip1q_s16(v101, v102);
    v110 = (int32x4_t)vzip2q_s16(v101, v102);
    v111 = (int32x4_t)vzip1q_s16(v103, v104);
    v112 = (int32x4_t)vzip2q_s16(v103, v104);
    v113 = (int32x4_t)vzip1q_s16(v105, v106);
    v114 = (int32x4_t)vzip2q_s16(v105, v106);
    v115 = (int32x4_t)vzip1q_s16(v107, v108);
    v116 = (int32x4_t)vzip2q_s16(v107, v108);
    v117 = (int64x2_t)vzip1q_s32(v109, v111);
    v118 = (int64x2_t)vzip2q_s32(v109, v111);
    v119 = (int64x2_t)vzip1q_s32(v113, v115);
    v120 = (int64x2_t)vzip2q_s32(v113, v115);
    v121 = (int64x2_t)vzip1q_s32(v110, v112);
    v122 = (int64x2_t)vzip2q_s32(v110, v112);
    v123 = (int64x2_t)vzip1q_s32(v114, v116);
    v124 = (int64x2_t)vzip2q_s32(v114, v116);
    v125 = (int16x8_t)vzip1q_s64(v117, v119);
    v126 = (int16x8_t)vzip2q_s64(v117, v119);
    v127 = (int16x8_t)vzip1q_s64(v118, v120);
    v128 = (int16x8_t)vzip2q_s64(v118, v120);
    v129 = (int16x8_t)vzip1q_s64(v121, v123);
    v130 = (int16x8_t)vzip2q_s64(v121, v123);
    v131 = (int16x8_t)vzip1q_s64(v122, v124);
    v132 = (int16x8_t)vzip2q_s64(v122, v124);
    v133 = vaddq_s16(v125, v129);
    v134 = vsubq_s16(v130, vaddq_s16(vshlq_s16(v132, v32), vaddq_s16(v132, v128)));
    v135 = vsubq_s16(v125, v129);
    v136 = vsubq_s16(vaddq_s16(v132, v126), vaddq_s16(vshlq_s16(v128, v32), v128));
    v137 = vsubq_s16(vshlq_s16(v127, v32), v131);
    v138 = vaddq_s16(vsubq_s16(vshlq_s16(v130, v32), v126), vaddq_s16(v132, v130));
    v139 = vaddq_s16(vshlq_s16(v131, v32), v127);
    v140 = vaddq_s16(vaddq_s16(vshlq_s16(v126, v32), vaddq_s16(v130, v128)), v126);
    v141 = vaddq_s16(v134, vshlq_s16(v140, v33));
    v142 = vaddq_s16(v136, vshlq_s16(v138, v33));
    v143 = vsubq_s16(v135, v137);
    v144 = vsubq_s16(vshlq_s16(v136, v33), v138);
    v145 = vsubq_s16(v133, v139);
    v146 = vsubq_s16(v140, vshlq_s16(v134, v33));
    v147 = vaddq_s16(vaddq_s16(v133, v22), v139);
    v148 = vaddq_s16(vaddq_s16(v135, v22), v137);
    v149 = vaddq_s16(v143, v22);
    v150 = vaddq_s16(v145, v22);
    *v85 = vshlq_s16(vaddq_s16(v147, v146), v34);
    v85[2] = vshlq_s16(vaddq_s16(v148, v144), v34);
    v85[4] = vshlq_s16(vaddq_s16(v149, v142), v34);
    v85[6] = vshlq_s16(vaddq_s16(v150, v141), v34);
    v85[8] = vshlq_s16(vsubq_s16(v150, v141), v34);
    v85[10] = vshlq_s16(vsubq_s16(v149, v142), v34);
    v85[12] = vshlq_s16(vsubq_s16(v148, v144), v34);
    v85[14] = vshlq_s16(vsubq_s16(v147, v146), v34);
LABEL_21:
    v11 >>= 1;
    ++v9;
    v31 += 64;
  }
  while (v9 != 4);
  return result;
}

uint64_t sub_2160A9990(uint64_t result, _OWORD *a2, uint64_t a3, double a4, int8x16_t a5, double a6, double a7, double a8, int8x16_t a9)
{
  int16x4_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int32 v18;
  int8x16_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint16x8_t *v23;
  uint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  unsigned int v27;
  unsigned __int32 v28;
  int v29;
  int8x16_t v30;
  uint16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  __int16 *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  uint16x8_t v85;
  int16x8_t v86;
  int16x8_t *v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;

  a5.i32[0] = 0;
  v13 = 0;
  v14 = *(_QWORD *)(result + 40);
  v15 = *(unsigned __int8 *)(v14 + 52);
  v16 = *(_BYTE *)(v14 + 55);
  v17 = *(_QWORD *)(result + 56);
  v18 = *(unsigned __int8 *)(result + 1422192);
  v19.i32[1] = 0;
  v19.i64[1] = 0;
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v20 = v16;
  v21 = v16 / 6u;
  v22 = v16 % 6u;
  v23 = (uint16x8_t *)((char *)&unk_2160F34F0 + 128 * v22);
  v24 = a3 + (v22 << 7);
  v25 = (int8x16_t)xmmword_2160EE7C0;
  v26 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)xmmword_2160F2D90, (int8x16_t)xmmword_2160EE800), (int8x16_t)xmmword_2160EE7D0), (int8x16_t)xmmword_2160EE7C0);
  v27 = v21 - 6;
  LODWORD(result) = 1 << (5 - v21);
  v28 = (unsigned __int16)(v21 - 6);
  if (v20 >= 0x24)
    v27 = 0;
  else
    v28 = 0;
  if (v20 < 0x24)
  {
    v29 = 1;
  }
  else
  {
    LODWORD(result) = 0;
    v29 = 0;
  }
  if (v18)
  {
    result = result;
  }
  else
  {
    v29 = 1;
    v28 = 0;
    v27 = 0;
    result = 0;
  }
  if (!v18)
    v21 -= 2;
  v25.i32[0] = v18;
  v30 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v25, a5), 0);
  v25.i32[0] = v21;
  a9.i32[0] = v28;
  v19.i32[0] = result;
  v31 = (uint16x8_t)vdupq_lane_s16((int16x4_t)*(_OWORD *)&vbslq_s8(v30, v25, a9), 0);
  v32 = vdupq_n_s32(v27);
  v33 = (int32x4_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_2160EE800);
  v34 = word_2160F34E0;
  v35.i64[0] = -1;
  v35.i64[1] = -1;
  v36.i64[0] = 0x1000100010001;
  v36.i64[1] = 0x1000100010001;
  v37.i64[0] = 0x5000500050005;
  v37.i64[1] = 0x5000500050005;
  do
  {
    if ((v15 & 1) == 0)
      goto LABEL_21;
    v39.i16[0] = *(_WORD *)(v17 + v13 + 38);
    result = *(unsigned __int16 *)(v17 + v13 + 90);
    v12.i16[0] = *(_WORD *)(v17 + v13 + 136);
    v12.i16[2] = *(_WORD *)(v17 + v13 + 138);
    v38.i32[0] = *(_DWORD *)(v17 + v13 + 32);
    v38.i16[2] = *(_WORD *)(v17 + v13 + 36);
    v38.i16[3] = *(_WORD *)(v17 + v13 + 42);
    v39.i16[1] = *(_WORD *)(v17 + v13 + 40);
    v39.i16[2] = *(_WORD *)(v17 + v13 + 46);
    v39.i16[3] = *(_WORD *)(v17 + v13 + 50);
    v9.i16[0] = *(_WORD *)(v17 + v13 + 148);
    v9.i16[2] = *(_WORD *)(v17 + v13 + 150);
    *(int16x4_t *)v40.i8 = v38;
    v40.i16[4] = *(_WORD *)(v17 + v13 + 44);
    *(int16x4_t *)v41.i8 = v39;
    v41.i16[4] = *(_WORD *)(v17 + v13 + 58);
    v40.i16[5] = *(_WORD *)(v17 + v13 + 52);
    v41.i16[5] = *(_WORD *)(v17 + v13 + 66);
    v10.i32[0] = *(unsigned __int16 *)(v17 + v13 + 54);
    v10.i16[2] = *(_WORD *)(v17 + v13 + 56);
    v40.i32[3] = vmovn_s32((int32x4_t)v10).u32[0];
    v11.i32[0] = *(unsigned __int16 *)(v17 + v13 + 68);
    v11.i16[2] = *(_WORD *)(v17 + v13 + 70);
    v41.i32[3] = vmovn_s32((int32x4_t)v11).u32[0];
    v42.i16[0] = *(_WORD *)(v17 + v13 + 48);
    v42.i16[1] = *(_WORD *)(v17 + v13 + 60);
    v42.i16[2] = *(_WORD *)(v17 + v13 + 64);
    v42.i16[3] = *(_WORD *)(v17 + v13 + 72);
    v42.i64[1] = *(_QWORD *)(v17 + v13 + 80);
    v43.i16[0] = *(_WORD *)(v17 + v13 + 62);
    v43.i16[1] = *(_WORD *)(v17 + v13 + 74);
    v43.i16[2] = *(_WORD *)(v17 + v13 + 78);
    v43.i16[3] = *(_WORD *)(v17 + v13 + 88);
    v43.i64[1] = *(_QWORD *)(v17 + v13 + 96);
    v44.i16[0] = *(_WORD *)(v17 + v13 + 76);
    v44.i16[1] = *(_WORD *)(v17 + v13 + 90);
    v44.i16[2] = *(_WORD *)(v17 + v13 + 94);
    v44.i16[3] = *(_WORD *)(v17 + v13 + 104);
    v44.i64[1] = *(_QWORD *)(v17 + v13 + 112);
    v45.i16[0] = *(_WORD *)(v17 + v13 + 92);
    v45.i16[1] = *(_WORD *)(v17 + v13 + 106);
    v45.i16[2] = *(_WORD *)(v17 + v13 + 110);
    v45.i16[3] = *(_WORD *)(v17 + v13 + 120);
    v45.i64[1] = *(_QWORD *)(v17 + v13 + 126);
    v46.i16[0] = *(_WORD *)(v17 + v13 + 108);
    v46.i16[1] = *(_WORD *)(v17 + v13 + 122);
    v46.i16[2] = *(_WORD *)(v17 + v13 + 124);
    v46.i16[3] = *(_WORD *)(v17 + v13 + 134);
    v46.i64[1] = *(_QWORD *)(v17 + v13 + 140);
    v9 = vuzp1_s16(*(int16x4_t *)v12.i8, v9);
    *(int16x4_t *)v47.i8 = v9;
    v47.i64[1] = *(_QWORD *)(v17 + v13 + 152);
    if (!v18)
    {
      v56 = vmulq_s16((int16x8_t)vshlq_u16(*v23, v31), v40);
      v61 = vmulq_s16((int16x8_t)vshlq_u16(v23[1], v31), v41);
      v64 = vmulq_s16((int16x8_t)vshlq_u16(v23[2], v31), v42);
      v69 = vmulq_s16((int16x8_t)vshlq_u16(v23[3], v31), v43);
      v72 = vmulq_s16((int16x8_t)vshlq_u16(v23[4], v31), v44);
      v77 = vmulq_s16((int16x8_t)vshlq_u16(v23[5], v31), v45);
      v85 = v23[7];
      v80 = vmulq_s16((int16x8_t)vshlq_u16(v23[6], v31), v46);
LABEL_19:
      v84 = vmulq_s16((int16x8_t)vshlq_u16(v85, v31), v47);
      goto LABEL_20;
    }
    v48 = *(int16x8_t *)v24;
    if (!v29)
    {
      v56 = vmulq_s16((int16x8_t)vshlq_u16((uint16x8_t)v48, v31), v40);
      v61 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 16), v31), v41);
      v64 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 32), v31), v42);
      v69 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 48), v31), v43);
      v72 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 64), v31), v44);
      v77 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 80), v31), v45);
      v80 = vmulq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v24 + 96), v31), v46);
      v85 = *(uint16x8_t *)(v24 + 112);
      goto LABEL_19;
    }
    v49.i16[1] = *(_WORD *)(v17 + v13 + 60);
    v49.i16[2] = *(_WORD *)(v17 + v13 + 64);
    v49.i16[3] = *(_WORD *)(v17 + v13 + 72);
    v50.i16[1] = *(_WORD *)(v17 + v13 + 74);
    v50.i16[2] = *(_WORD *)(v17 + v13 + 78);
    v50.i16[3] = *(_WORD *)(v17 + v13 + 88);
    v51.i16[1] = *(_WORD *)(v17 + v13 + 90);
    v51.i16[2] = *(_WORD *)(v17 + v13 + 94);
    v51.i16[3] = *(_WORD *)(v17 + v13 + 104);
    v52.i16[1] = *(_WORD *)(v17 + v13 + 106);
    v52.i16[2] = *(_WORD *)(v17 + v13 + 110);
    v52.i16[3] = *(_WORD *)(v17 + v13 + 120);
    v53.i16[1] = *(_WORD *)(v17 + v13 + 122);
    v53.i16[2] = *(_WORD *)(v17 + v13 + 124);
    v53.i16[3] = *(_WORD *)(v17 + v13 + 134);
    v54 = vuzp2q_s16((int16x8_t)vmull_s16(v38, *(int16x4_t *)v48.i8), (int16x8_t)vmull_high_s16(v40, v48));
    v55 = vmulq_s16(v48, v40);
    v56 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v55, v54), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v55, v54), v33), v32));
    v57 = *(int16x8_t *)(v24 + 16);
    v58 = *(int16x8_t *)(v24 + 32);
    v59 = vuzp2q_s16((int16x8_t)vmull_s16(v39, *(int16x4_t *)v57.i8), (int16x8_t)vmull_high_s16(v41, v57));
    v60 = vmulq_s16(v57, v41);
    v61 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v60, v59), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v60, v59), v33), v32));
    v49.i16[0] = *(_WORD *)(v17 + v13 + 48);
    v62 = vuzp2q_s16((int16x8_t)vmull_s16(v49, *(int16x4_t *)v58.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(v17 + v13 + 80), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)));
    v63 = vmulq_s16(v58, v42);
    v64 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v63, v62), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v63, v62), v33), v32));
    v65 = *(int16x8_t *)(v24 + 48);
    v66 = *(int16x8_t *)(v24 + 64);
    v50.i16[0] = *(_WORD *)(v17 + v13 + 62);
    v67 = vuzp2q_s16((int16x8_t)vmull_s16(v50, *(int16x4_t *)v65.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(v17 + v13 + 96), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)));
    v68 = vmulq_s16(v65, v43);
    v69 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v68, v67), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v68, v67), v33), v32));
    v51.i16[0] = *(_WORD *)(v17 + v13 + 76);
    v70 = vuzp2q_s16((int16x8_t)vmull_s16(v51, *(int16x4_t *)v66.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(v17 + v13 + 112), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL)));
    v71 = vmulq_s16(v66, v44);
    v72 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v71, v70), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v71, v70), v33), v32));
    v73 = *(int16x8_t *)(v24 + 80);
    v74 = *(int16x8_t *)(v24 + 96);
    v52.i16[0] = *(_WORD *)(v17 + v13 + 92);
    v75 = vuzp2q_s16((int16x8_t)vmull_s16(v52, *(int16x4_t *)v73.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(v17 + v13 + 126), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)));
    v76 = vmulq_s16(v73, v45);
    v77 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v76, v75), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v76, v75), v33), v32));
    v53.i16[0] = *(_WORD *)(v17 + v13 + 108);
    v78 = vuzp2q_s16((int16x8_t)vmull_s16(v53, *(int16x4_t *)v74.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(v17 + v13 + 140), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL)));
    v79 = vmulq_s16(v74, v46);
    v80 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v79, v78), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v79, v78), v33), v32));
    v81 = *(int16x8_t *)(v24 + 112);
    v82 = vuzp2q_s16((int16x8_t)vmull_s16(v9, *(int16x4_t *)v81.i8), (int16x8_t)vmull_s16(*(int16x4_t *)(v17 + v13 + 152), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL)));
    v83 = vmulq_s16(v81, v47);
    v84 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v83, v82), v33), v32)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v83, v82), v33), v32));
LABEL_20:
    v86 = vaddq_s16(v72, v56);
    v87 = (int16x8_t *)((char *)a2 + 2 * *v34);
    v88 = vsubq_s16(v77, vaddq_s16(v69, vaddq_s16(v84, vshlq_s16(v84, v35))));
    v89 = vsubq_s16(v56, v72);
    v90 = vsubq_s16(vaddq_s16(v61, v84), vaddq_s16(v69, vshlq_s16(v69, v35)));
    v91 = vsubq_s16(vshlq_s16(v64, v35), v80);
    v92 = vaddq_s16(vsubq_s16(v77, v61), vaddq_s16(v84, vshlq_s16(v77, v35)));
    v93 = vaddq_s16(vshlq_s16(v80, v35), v64);
    v94 = vaddq_s16(vaddq_s16(v69, vaddq_s16(v61, v77)), vshlq_s16(v61, v35));
    v95 = vaddq_s16(v93, v86);
    v96 = vaddq_s16(vshlq_s16(v94, v36), v88);
    v97 = vaddq_s16(v91, v89);
    v98 = vaddq_s16(vshlq_s16(v92, v36), v90);
    v99 = vsubq_s16(v89, v91);
    v100 = vsubq_s16(vshlq_s16(v90, v36), v92);
    v101 = vsubq_s16(v86, v93);
    v102 = vsubq_s16(v94, vshlq_s16(v88, v36));
    v103 = vaddq_s16(v102, v95);
    v104 = vaddq_s16(v100, v97);
    v105 = vaddq_s16(v98, v99);
    v106 = vaddq_s16(v96, v101);
    v107 = vsubq_s16(v101, v96);
    v108 = vsubq_s16(v99, v98);
    v109 = vsubq_s16(v97, v100);
    v110 = vsubq_s16(v95, v102);
    v111 = (int32x4_t)vzip1q_s16(v103, v104);
    v112 = (int32x4_t)vzip2q_s16(v103, v104);
    v113 = (int32x4_t)vzip1q_s16(v105, v106);
    v114 = (int32x4_t)vzip2q_s16(v105, v106);
    v115 = (int32x4_t)vzip1q_s16(v107, v108);
    v116 = (int32x4_t)vzip2q_s16(v107, v108);
    v117 = (int32x4_t)vzip1q_s16(v109, v110);
    v118 = (int32x4_t)vzip2q_s16(v109, v110);
    v119 = (int64x2_t)vzip1q_s32(v111, v113);
    v120 = (int64x2_t)vzip2q_s32(v111, v113);
    v121 = (int64x2_t)vzip1q_s32(v115, v117);
    v122 = (int64x2_t)vzip2q_s32(v115, v117);
    v123 = (int64x2_t)vzip1q_s32(v112, v114);
    v124 = (int64x2_t)vzip2q_s32(v112, v114);
    v125 = (int64x2_t)vzip1q_s32(v116, v118);
    v126 = (int64x2_t)vzip2q_s32(v116, v118);
    v127 = (int16x8_t)vzip1q_s64(v119, v121);
    v128 = (int16x8_t)vzip2q_s64(v119, v121);
    v129 = (int16x8_t)vzip1q_s64(v120, v122);
    v130 = (int16x8_t)vzip2q_s64(v120, v122);
    v131 = (int16x8_t)vzip1q_s64(v123, v125);
    v132 = (int16x8_t)vzip2q_s64(v123, v125);
    v133 = (int16x8_t)vzip1q_s64(v124, v126);
    v134 = (int16x8_t)vzip2q_s64(v124, v126);
    v135 = vaddq_s16(v127, v131);
    v136 = vsubq_s16(v132, vaddq_s16(vshlq_s16(v134, v35), vaddq_s16(v134, v130)));
    v137 = vsubq_s16(v127, v131);
    v138 = vsubq_s16(vaddq_s16(v134, v128), vaddq_s16(vshlq_s16(v130, v35), v130));
    v139 = vsubq_s16(vshlq_s16(v129, v35), v133);
    v140 = vaddq_s16(vsubq_s16(vshlq_s16(v132, v35), v128), vaddq_s16(v134, v132));
    v141 = vaddq_s16(vshlq_s16(v133, v35), v129);
    v142 = vaddq_s16(vaddq_s16(vshlq_s16(v128, v35), vaddq_s16(v132, v130)), v128);
    v143 = vaddq_s16(v136, vshlq_s16(v142, v36));
    v144 = vaddq_s16(v138, vshlq_s16(v140, v36));
    v145 = vsubq_s16(v137, v139);
    v146 = vsubq_s16(vshlq_s16(v138, v36), v140);
    v147 = vsubq_s16(v135, v141);
    v148 = vsubq_s16(v142, vshlq_s16(v136, v36));
    v11 = vaddq_s16(vaddq_s16(v135, v26), v141);
    v10 = vaddq_s16(vaddq_s16(v137, v26), v139);
    v149 = vaddq_s16(v145, v26);
    v150 = vaddq_s16(v147, v26);
    *v87 = vshlq_s16(vaddq_s16(v11, v148), v37);
    v12 = vshlq_s16(vaddq_s16(v10, v146), v37);
    v87[2] = v12;
    v87[4] = vshlq_s16(vaddq_s16(v149, v144), v37);
    v87[6] = vshlq_s16(vaddq_s16(v150, v143), v37);
    v87[8] = vshlq_s16(vsubq_s16(v150, v143), v37);
    v87[10] = vshlq_s16(vsubq_s16(v149, v144), v37);
    v87[12] = vshlq_s16(vsubq_s16(v10, v146), v37);
    v87[14] = vshlq_s16(vsubq_s16(v11, v148), v37);
LABEL_21:
    v15 >>= 1;
    ++v34;
    v13 += 128;
  }
  while (v13 != 512);
  return result;
}

uint64_t sub_2160AA18C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;
  char v7;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 40);
  v7 = sub_2160DD91C(*(unsigned __int8 *)(v4 + 55), *(char *)(v4 + 56));
  v6 = sub_2160DD91C(*(unsigned __int8 *)(v4 + 55), *(char *)(*(_QWORD *)(a1 + 40) + 57));
  v9 = *(unsigned __int8 *)(v4 + 53);
  sub_2160A8428((int16x8_t *)(*(_QWORD *)(a1 + 56) + 800), *(_QWORD *)(a1 + 56) + 544, *(_QWORD *)(a1 + 56) + 672, (uint64_t)v8, &v7, &v6, a2, *(unsigned __int8 *)(a1 + 1422192));
  return 0;
}

uint64_t sub_2160AA24C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;
  char v7;
  _BYTE v8[16];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 40);
  v7 = sub_2160DD91C(*(unsigned __int8 *)(v4 + 55), *(char *)(v4 + 56));
  v6 = sub_2160DD91C(*(unsigned __int8 *)(v4 + 55), *(char *)(*(_QWORD *)(a1 + 40) + 57));
  v9 = *(unsigned __int8 *)(v4 + 53);
  sub_2160A899C((int16x8_t *)(*(_QWORD *)(a1 + 56) + 800), *(_QWORD *)(a1 + 56) + 544, *(_QWORD *)(a1 + 56) + 672, (uint64_t)v8, &v7, &v6, a2, *(unsigned __int8 *)(a1 + 1422192));
  return 0;
}

int16x8_t *sub_2160AA30C(int16x8_t *result, unsigned __int8 a2, uint64_t a3, uint64_t a4, _DWORD *a5, int16x8_t *a6)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int32x4_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  int16x8_t *v14;
  int16x8_t *v15;
  uint64_t v16;
  int16x8_t *v17;
  int16x8_t *v18;
  int16x8_t *v19;
  int16x8_t v20;
  unint64_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int32x4_t v55;
  uint32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t *v59;
  int16x8_t *v60;
  uint64_t v61;
  int16x8_t *v62;
  int16x8_t *v63;
  int16x8_t *v64;
  int16x8_t v65;
  unint64_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x4_t v91;
  int16x8_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  unsigned __int16 v97;
  int8x16_t v98;
  int8x16_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  _WORD v114[60];
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0x1F;
  v7 = v6 + 15;
  v8 = 1431655766 * (1 << ((a2 & 0x1F) + 15));
  v9 = 2 * (HIDWORD(v8) + (v8 >> 63));
  v10 = a2 >> 5;
  *a5 = 0;
  if (v6 < 6)
  {
    v55 = vdupq_n_s32(v9);
    v56 = (uint32x4_t)vdupq_n_s32(~v7);
    v57 = vdupq_n_s32(0x20u >> v6);
    v58 = vdupq_n_s32((a2 & 0x1Fu) - 6);
    v59 = result + 1;
    v60 = a6 + 1;
    v61 = (v10 << 7) | 0x10;
    v62 = (int16x8_t *)((char *)&unk_2160F2DD0 + v61);
    v63 = (int16x8_t *)((char *)&unk_2160F30D0 + v61);
    v64 = (int16x8_t *)v114;
    v65.i64[0] = 0xE000E000E000ELL;
    v65.i64[1] = 0xE000E000E000ELL;
    v66 = -16;
    do
    {
      v67 = v59[-1];
      v68 = v62[-1];
      v69 = vshlq_s16(v67, v65);
      v70 = vshlq_s16(*v59, v65);
      v71 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)v69, (int8x16_t)v67), v69);
      v72 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)v70, *(int8x16_t *)v59), v70);
      v73 = vmulq_s16(v71, v68);
      v74 = (int16x8_t)vmull_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v68.i8);
      v75 = (int16x8_t)vmull_high_s16(v71, v68);
      v76 = vmulq_s16(v72, *v62);
      v77 = vuzp2q_s16(v74, v75);
      v78 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v62->i8), (int16x8_t)vmull_high_s16(v72, *v62));
      v79 = (int32x4_t)vzip1q_s16(v76, v78);
      v80 = (int32x4_t)vzip2q_s16(v76, v78);
      v81 = (uint32x4_t)vaddq_s32(v55, (int32x4_t)vzip1q_s16(v73, v77));
      v82 = (int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(v55, (int32x4_t)vzip2q_s16(v73, v77)), v56);
      v83 = (int32x4_t)vzip1q_s16(v69, v69);
      v84 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshlq_u32(v81, v56), (int8x16_t)v83), v83);
      v85 = (int32x4_t)vzip2q_s16(v69, v69);
      v86 = (int32x4_t)vzip1q_s16(v70, v70);
      v87 = vsubq_s32((int32x4_t)veorq_s8(v82, (int8x16_t)v85), v85);
      v88 = (int32x4_t)vzip2q_s16(v70, v70);
      v89 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(v55, v80), v56), (int8x16_t)v88), v88);
      *(int16x4_t *)v84.i8 = vqmovn_s32(v84);
      v90 = vqmovn_high_s32(*(int16x4_t *)v84.i8, v87);
      v91 = vqmovn_s32(vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(v55, v79), v56), (int8x16_t)v86), v86));
      v92 = vqmovn_high_s32(v91, v89);
      v93 = vandq_s8((int8x16_t)vceqzq_s16(v90), (int8x16_t)xmmword_2160F2980);
      v94 = vpaddq_s8(v93, v93);
      v95 = vpaddq_s8(v94, v94);
      v96 = vandq_s8((int8x16_t)vceqzq_s16(v92), (int8x16_t)xmmword_2160F2980);
      v97 = vpaddq_s8(v95, v95).u16[0];
      v98 = vpaddq_s8(v96, v96);
      v99 = vpaddq_s8(v98, v98);
      *a5 |= ~(vpaddq_s8(v99, v99).u16[0] | (v97 << 16));
      v100 = v63[-1];
      v101 = (int16x8_t)vmull_s16(vqmovn_s32(v87), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL));
      v102 = *v63;
      v63 += 2;
      v103 = (int16x8_t)vmull_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v100.i8);
      v104 = vmulq_s16(v100, v90);
      v105 = vuzp2q_s16(v103, v101);
      v106 = vmulq_s16(v102, v92);
      v107 = vuzp2q_s16((int16x8_t)vmull_s16(v91, *(int16x4_t *)v102.i8), (int16x8_t)vmull_s16(vqmovn_s32(v89), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL)));
      v60[-1] = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(vshlq_n_s32((int32x4_t)vzip1q_s16(v104, v105), 4uLL), v57), v58)), vshlq_s32(vaddq_s32(vshlq_n_s32((int32x4_t)vzip2q_s16(v104, v105), 4uLL), v57), v58));
      *v60 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(vshlq_n_s32((int32x4_t)vzip1q_s16(v106, v107), 4uLL), v57), v58)), vshlq_s32(vaddq_s32(vshlq_n_s32((int32x4_t)vzip2q_s16(v106, v107), 4uLL), v57), v58));
      v66 += 16;
      v59 += 2;
      v60 += 2;
      v64[-1] = v90;
      *v64 = v92;
      v62 += 2;
      v64 += 2;
    }
    while (v66 < 0x30);
  }
  else
  {
    v11 = vdupq_n_s32(v9);
    v12 = (uint32x4_t)vdupq_n_s32(~v7);
    v13 = (uint32x4_t)vdupq_n_s32(v6 - 2);
    v14 = result + 1;
    v15 = a6 + 1;
    v16 = (v10 << 7) | 0x10;
    v17 = (int16x8_t *)((char *)&unk_2160F2DD0 + v16);
    v18 = (int16x8_t *)((char *)&unk_2160F30D0 + v16);
    v19 = (int16x8_t *)v114;
    v20.i64[0] = 0xE000E000E000ELL;
    v20.i64[1] = 0xE000E000E000ELL;
    v21 = -16;
    do
    {
      v22 = v14[-1];
      v23 = v17[-1];
      v24 = vshlq_s16(v22, v20);
      v25 = vshlq_s16(*v14, v20);
      v26 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)v24, (int8x16_t)v22), v24);
      v27 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)v25, *(int8x16_t *)v14), v25);
      v28 = vmulq_s16(v26, v23);
      v29 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v23.i8), (int16x8_t)vmull_high_s16(v26, v23));
      v30 = (int32x4_t)vzip1q_s16(v28, v29);
      v31 = vmulq_s16(v27, *v17);
      v32 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v17->i8), (int16x8_t)vmull_high_s16(v27, *v17));
      v33 = (int32x4_t)vzip1q_s16(v31, v32);
      v34 = (int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(v11, (int32x4_t)vzip2q_s16(v28, v29)), v12);
      v35 = (int32x4_t)vzip1q_s16(v24, v24);
      v36 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(v11, v30), v12), (int8x16_t)v35), v35);
      v37 = (int32x4_t)vzip2q_s16(v24, v24);
      v38 = (int32x4_t)vzip1q_s16(v25, v25);
      v39 = vsubq_s32((int32x4_t)veorq_s8(v34, (int8x16_t)v37), v37);
      v40 = (int32x4_t)vzip2q_s16(v25, v25);
      v41 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(v11, (int32x4_t)vzip2q_s16(v31, v32)), v12), (int8x16_t)v40), v40);
      *(int16x4_t *)v36.i8 = vqmovn_s32(v36);
      v42 = vqmovn_high_s32(*(int16x4_t *)v36.i8, v39);
      *(int16x4_t *)v33.i8 = vqmovn_s32(vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(v11, v33), v12), (int8x16_t)v38), v38));
      v43 = vqmovn_high_s32(*(int16x4_t *)v33.i8, v41);
      v44 = vandq_s8((int8x16_t)vceqzq_s16(v42), (int8x16_t)xmmword_2160F2980);
      v45 = vpaddq_s8(v44, v44);
      v46 = vpaddq_s8(v45, v45);
      v47 = vandq_s8((int8x16_t)vceqzq_s16(v43), (int8x16_t)xmmword_2160F2980);
      v48 = vpaddq_s8(v47, v47);
      v49 = vpaddq_s8(v48, v48);
      *a5 |= ~(vpaddq_s8(v49, v49).u16[0] | (vpaddq_s8(v46, v46).u16[0] << 16));
      v50 = v18[-1];
      v51 = vmulq_s16(v50, v42);
      v52 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v50.i8), (int16x8_t)vmull_s16(vqmovn_s32(v39), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL)));
      v53 = vmulq_s16(*v18, v43);
      v54 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v18->i8), (int16x8_t)vmull_s16(vqmovn_s32(v41), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v18, *(int8x16_t *)v18, 8uLL)));
      v15[-1] = vqmovn_high_s32(vqmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)vzip1q_s16(v51, v52), v13)), (int32x4_t)vshlq_u32((uint32x4_t)vzip2q_s16(v51, v52), v13));
      *v15 = vqmovn_high_s32(vqmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)vzip1q_s16(v53, v54), v13)), (int32x4_t)vshlq_u32((uint32x4_t)vzip2q_s16(v53, v54), v13));
      v21 += 16;
      v14 += 2;
      v15 += 2;
      v19[-1] = v42;
      *v19 = v43;
      v17 += 2;
      v18 += 2;
      v19 += 2;
    }
    while (v21 < 0x30);
  }
  v108 = v111;
  *(_DWORD *)a4 = v110;
  *(_DWORD *)(a4 + 10) = v108;
  v109 = v113;
  *(_DWORD *)(a4 + 28) = v112;
  *(_DWORD *)(a4 + 54) = v109;
  *(_WORD *)(a4 + 4) = v114[0];
  *(_WORD *)(a4 + 8) = v114[1];
  *(_WORD *)(a4 + 14) = v114[2];
  *(_WORD *)(a4 + 26) = v114[3];
  *(_WORD *)(a4 + 32) = v114[4];
  *(_WORD *)(a4 + 52) = v114[5];
  *(_WORD *)(a4 + 58) = v114[6];
  *(_WORD *)(a4 + 84) = v114[7];
  *(_WORD *)(a4 + 6) = v114[8];
  *(_WORD *)(a4 + 16) = v114[9];
  *(_WORD *)(a4 + 24) = v114[10];
  *(_WORD *)(a4 + 34) = v114[11];
  *(_WORD *)(a4 + 50) = v114[12];
  *(_WORD *)(a4 + 60) = v114[13];
  *(_WORD *)(a4 + 82) = v114[14];
  *(_WORD *)(a4 + 86) = v114[15];
  *(_WORD *)(a4 + 18) = v114[16];
  *(_WORD *)(a4 + 22) = v114[17];
  *(_WORD *)(a4 + 36) = v114[18];
  *(_WORD *)(a4 + 48) = v114[19];
  *(_WORD *)(a4 + 62) = v114[20];
  *(_WORD *)(a4 + 80) = v114[21];
  *(_WORD *)(a4 + 88) = v114[22];
  *(_WORD *)(a4 + 106) = v114[23];
  *(_WORD *)(a4 + 20) = v114[24];
  *(_WORD *)(a4 + 38) = v114[25];
  *(_WORD *)(a4 + 46) = v114[26];
  *(_WORD *)(a4 + 64) = v114[27];
  *(_WORD *)(a4 + 78) = v114[28];
  *(_WORD *)(a4 + 90) = v114[29];
  *(_WORD *)(a4 + 104) = v114[30];
  *(_WORD *)(a4 + 108) = v114[31];
  *(_WORD *)(a4 + 40) = v114[32];
  *(_WORD *)(a4 + 44) = v114[33];
  *(_WORD *)(a4 + 66) = v114[34];
  *(_WORD *)(a4 + 76) = v114[35];
  *(_WORD *)(a4 + 92) = v114[36];
  *(_WORD *)(a4 + 102) = v114[37];
  *(_WORD *)(a4 + 110) = v114[38];
  *(_WORD *)(a4 + 120) = v114[39];
  *(_WORD *)(a4 + 42) = v114[40];
  *(_WORD *)(a4 + 68) = v114[41];
  *(_WORD *)(a4 + 74) = v114[42];
  *(_WORD *)(a4 + 94) = v114[43];
  *(_WORD *)(a4 + 100) = v114[44];
  *(_WORD *)(a4 + 112) = v114[45];
  *(_WORD *)(a4 + 118) = v114[46];
  *(_WORD *)(a4 + 122) = v114[47];
  *(_WORD *)(a4 + 70) = v114[48];
  *(_WORD *)(a4 + 72) = v114[49];
  *(_WORD *)(a4 + 96) = v114[50];
  *(_WORD *)(a4 + 98) = v114[51];
  *(_WORD *)(a4 + 114) = v114[52];
  *(_WORD *)(a4 + 116) = v114[53];
  *(_WORD *)(a4 + 124) = v114[54];
  *(_WORD *)(a4 + 126) = v114[55];
  return result;
}

int16x8_t sub_2160AA940(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int32x4_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t result;

  v2 = a1[1];
  v3 = (int32x4_t)vzip1q_s16(*a1, v2);
  v4 = (int32x4_t)vzip2q_s16(*a1, v2);
  v5 = a1[2];
  v6 = a1[3];
  v7 = (int32x4_t)vzip1q_s16(v5, v6);
  v8 = a1[4];
  v9 = a1[5];
  v10 = (int32x4_t)vzip2q_s16(v5, v6);
  v11 = (int32x4_t)vzip1q_s16(v8, v9);
  v12 = (int32x4_t)vzip2q_s16(v8, v9);
  v13 = a1[6];
  v14 = a1[7];
  v15 = (int32x4_t)vzip1q_s16(v13, v14);
  v16 = (int32x4_t)vzip2q_s16(v13, v14);
  v17 = (int64x2_t)vzip1q_s32(v3, v7);
  v18 = (int64x2_t)vzip2q_s32(v3, v7);
  v19 = (int64x2_t)vzip1q_s32(v4, v10);
  v20 = (int64x2_t)vzip2q_s32(v4, v10);
  v21 = (int64x2_t)vzip1q_s32(v11, v15);
  v22 = (int64x2_t)vzip2q_s32(v11, v15);
  v23 = (int64x2_t)vzip1q_s32(v12, v16);
  v24 = (int64x2_t)vzip2q_s32(v12, v16);
  v25 = (int16x8_t)vzip1q_s64(v17, v21);
  v26 = (int16x8_t)vzip2q_s64(v17, v21);
  v27 = (int16x8_t)vzip1q_s64(v19, v23);
  v28 = (int16x8_t)vzip2q_s64(v19, v23);
  v29 = (int16x8_t)vzip1q_s64(v18, v22);
  v30 = (int16x8_t)vzip2q_s64(v18, v22);
  v31 = (int16x8_t)vzip1q_s64(v20, v24);
  v32 = vaddq_s16((int16x8_t)vzip2q_s64(v20, v24), v25);
  v33 = vsubq_s16(vaddq_s16(v25, v25), v32);
  v34 = vaddq_s16(v31, v26);
  v35 = vsubq_s16(vaddq_s16(v26, v26), v34);
  v36 = vaddq_s16(v28, v29);
  v37 = vsubq_s16(vaddq_s16(v29, v29), v36);
  v38 = vaddq_s16(v27, v30);
  v39 = vsubq_s16(vaddq_s16(v30, v30), v38);
  v40 = vaddq_s16(v38, v32);
  v41 = vsubq_s16(vaddq_s16(v32, v32), v40);
  v42 = vaddq_s16(v36, v34);
  v43 = vsubq_s16(vaddq_s16(v34, v34), v42);
  v32.i64[0] = -1;
  v32.i64[1] = -1;
  v44 = vaddq_s16(vaddq_s16(vaddq_s16(v33, v35), vshlq_s16(v33, v32)), v37);
  v45 = vsubq_s16(vaddq_s16(vaddq_s16(v39, v35), vshlq_s16(v39, v32)), v37);
  v46 = vaddq_s16(v39, v33);
  v47 = vsubq_s16(vaddq_s16(v33, v33), vaddq_s16(vaddq_s16(v37, vshlq_s16(v37, v32)), v46));
  v48 = vsubq_s16(v46, vaddq_s16(v35, vshlq_s16(v35, v32)));
  v49 = vaddq_s16(v42, v40);
  v50 = vsubq_s16(vaddq_s16(v40, v40), v49);
  v35.i64[0] = 0x1000100010001;
  v35.i64[1] = 0x1000100010001;
  v51 = vaddq_s16(v44, vshlq_s16(v45, v35));
  v52 = vsubq_s16(vshlq_s16(v44, v35), v45);
  v53 = vaddq_s16(v41, vshlq_s16(v43, v32));
  v54 = vsubq_s16(vshlq_s16(v41, v32), v43);
  v55 = vaddq_s16(v47, vshlq_s16(v48, v35));
  v56 = vsubq_s16(v48, vshlq_s16(v47, v35));
  v57 = (int32x4_t)vzip1q_s16(v49, v51);
  v58 = (int32x4_t)vzip2q_s16(v49, v51);
  v59 = (int32x4_t)vzip1q_s16(v53, v55);
  v60 = (int32x4_t)vzip2q_s16(v53, v55);
  v61 = (int32x4_t)vzip1q_s16(v50, v56);
  v62 = (int32x4_t)vzip2q_s16(v50, v56);
  v63 = (int32x4_t)vzip1q_s16(v54, v52);
  v64 = (int32x4_t)vzip2q_s16(v54, v52);
  v65 = (int64x2_t)vzip1q_s32(v57, v59);
  v66 = (int64x2_t)vzip2q_s32(v57, v59);
  v67 = (int64x2_t)vzip1q_s32(v58, v60);
  v68 = (int64x2_t)vzip2q_s32(v58, v60);
  v69 = (int64x2_t)vzip1q_s32(v61, v63);
  v70 = (int64x2_t)vzip2q_s32(v61, v63);
  v71 = (int64x2_t)vzip1q_s32(v62, v64);
  v72 = (int64x2_t)vzip2q_s32(v62, v64);
  v73 = (int16x8_t)vzip1q_s64(v65, v69);
  v74 = (int16x8_t)vzip2q_s64(v65, v69);
  v75 = (int16x8_t)vzip1q_s64(v67, v71);
  v76 = (int16x8_t)vzip2q_s64(v67, v71);
  v77 = (int16x8_t)vzip1q_s64(v66, v70);
  v78 = (int16x8_t)vzip2q_s64(v66, v70);
  v79 = (int16x8_t)vzip1q_s64(v68, v72);
  v80 = vaddq_s16((int16x8_t)vzip2q_s64(v68, v72), v73);
  v81 = vsubq_s16(vaddq_s16(v73, v73), v80);
  v82 = vaddq_s16(v79, v74);
  v83 = vsubq_s16(vaddq_s16(v74, v74), v82);
  v84 = vaddq_s16(v76, v77);
  v85 = vsubq_s16(vaddq_s16(v77, v77), v84);
  v86 = vaddq_s16(v75, v78);
  v87 = vsubq_s16(vaddq_s16(v78, v78), v86);
  v88 = vaddq_s16(v86, v80);
  v89 = vsubq_s16(vaddq_s16(v80, v80), v88);
  v90 = vaddq_s16(v84, v82);
  v91 = vsubq_s16(vaddq_s16(v82, v82), v90);
  v92 = vaddq_s16(vaddq_s16(vaddq_s16(v81, v83), vshlq_s16(v81, v32)), v85);
  v93 = vsubq_s16(vaddq_s16(vaddq_s16(v87, v83), vshlq_s16(v87, v32)), v85);
  v94 = vaddq_s16(v87, v81);
  v95 = vsubq_s16(vaddq_s16(v81, v81), vaddq_s16(vaddq_s16(v85, vshlq_s16(v85, v32)), v94));
  v96 = vsubq_s16(v94, vaddq_s16(v83, vshlq_s16(v83, v32)));
  v97 = vaddq_s16(v90, v88);
  *a2 = v97;
  a2[1] = vaddq_s16(v92, vshlq_s16(v93, v35));
  a2[2] = vaddq_s16(v89, vshlq_s16(v91, v32));
  a2[3] = vaddq_s16(v95, vshlq_s16(v96, v35));
  a2[4] = vsubq_s16(vaddq_s16(v88, v88), v97);
  a2[5] = vsubq_s16(v96, vshlq_s16(v95, v35));
  result = vsubq_s16(vshlq_s16(v89, v32), v91);
  a2[6] = result;
  a2[7] = vsubq_s16(vshlq_s16(v92, v35), v93);
  return result;
}

int16x8_t sub_2160AABBC(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int16x8_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t result;

  v2 = a1[1];
  v3 = (int32x4_t)vzip1q_s16(*a1, v2);
  v4 = (int32x4_t)vzip2q_s16(*a1, v2);
  v5 = a1[2];
  v6 = a1[3];
  v7 = (int32x4_t)vzip1q_s16(v5, v6);
  v8 = (int32x4_t)vzip2q_s16(v5, v6);
  v9 = a1[4];
  v10 = a1[5];
  v11 = (int32x4_t)vzip1q_s16(v9, v10);
  v12 = (int32x4_t)vzip2q_s16(v9, v10);
  v13 = a1[6];
  v14 = a1[7];
  v15 = (int32x4_t)vzip1q_s16(v13, v14);
  v16 = (int32x4_t)vzip2q_s16(v13, v14);
  v17 = (int64x2_t)vzip1q_s32(v3, v7);
  v18 = (int64x2_t)vzip2q_s32(v3, v7);
  v19 = (int64x2_t)vzip1q_s32(v4, v8);
  v20 = (int16x8_t)vzip2q_s32(v4, v8);
  v21 = (int64x2_t)vzip1q_s32(v11, v15);
  v22 = (int64x2_t)vzip2q_s32(v11, v15);
  v23 = (int64x2_t)vzip1q_s32(v12, v16);
  v24 = (int64x2_t)vzip2q_s32(v12, v16);
  v25 = (int16x8_t)vzip1q_s64(v17, v21);
  v26 = (int16x8_t)vzip2q_s64(v17, v21);
  v27 = (int16x8_t)vzip1q_s64(v19, v23);
  v28 = (int16x8_t)vzip2q_s64(v19, v23);
  v29 = (int16x8_t)vzip1q_s64(v18, v22);
  v30 = (int16x8_t)vzip2q_s64(v18, v22);
  v31 = (int16x8_t)vzip1q_s64((int64x2_t)v20, v24);
  v32 = (int16x8_t)vzip2q_s64((int64x2_t)v20, v24);
  v33 = vaddq_s16(v27, v25);
  v34 = vsubq_s16(vaddq_s16(v25, v25), v33);
  v20.i64[0] = -1;
  v20.i64[1] = -1;
  v35 = vsubq_s16(vshlq_s16(v29, v20), v31);
  v36 = vaddq_s16(vshlq_s16(v31, v20), v29);
  v37 = vaddq_s16(vaddq_s16(vshlq_s16(v26, v20), vaddq_s16(v26, v30)), v28);
  v38 = vsubq_s16(vaddq_s16(vshlq_s16(v28, v20), vaddq_s16(v28, v32)), v26);
  v39 = vsubq_s16(vaddq_s16(v32, v26), vaddq_s16(vshlq_s16(v30, v20), v30));
  v40 = vsubq_s16(v28, vaddq_s16(vaddq_s16(v30, v32), vshlq_s16(v32, v20)));
  v41 = vaddq_s16(v36, v33);
  v42 = vsubq_s16(vaddq_s16(v33, v33), v41);
  v43 = vaddq_s16(v34, v35);
  v44 = vsubq_s16(vaddq_s16(v34, v34), v43);
  v26.i64[0] = 0x1000100010001;
  v26.i64[1] = 0x1000100010001;
  v45 = vaddq_s16(v40, vshlq_s16(v37, v26));
  v46 = vaddq_s16(vsubq_s16(v37, vshlq_s16(v40, v26)), v41);
  v47 = vsubq_s16(vaddq_s16(v41, v41), v46);
  v48 = vaddq_s16(vsubq_s16(vshlq_s16(v39, v26), v38), v43);
  v49 = vsubq_s16(vaddq_s16(v43, v43), v48);
  v50 = vaddq_s16(vaddq_s16(vshlq_s16(v38, v26), v39), v44);
  v51 = vsubq_s16(vaddq_s16(v44, v44), v50);
  v52 = vaddq_s16(v45, v42);
  v53 = vsubq_s16(vaddq_s16(v42, v42), v52);
  v54 = (int32x4_t)vzip1q_s16(v46, v48);
  v55 = (int32x4_t)vzip2q_s16(v46, v48);
  v56 = (int32x4_t)vzip1q_s16(v50, v52);
  v57 = (int32x4_t)vzip2q_s16(v50, v52);
  v58 = (int32x4_t)vzip1q_s16(v53, v51);
  v59 = (int32x4_t)vzip2q_s16(v53, v51);
  v60 = (int32x4_t)vzip1q_s16(v49, v47);
  v61 = (int32x4_t)vzip2q_s16(v49, v47);
  v62 = (int64x2_t)vzip1q_s32(v54, v56);
  v63 = (int64x2_t)vzip2q_s32(v54, v56);
  v64 = (int64x2_t)vzip1q_s32(v55, v57);
  v65 = (int64x2_t)vzip2q_s32(v55, v57);
  v66 = (int64x2_t)vzip1q_s32(v58, v60);
  v67 = (int64x2_t)vzip2q_s32(v58, v60);
  v68 = (int64x2_t)vzip1q_s32(v59, v61);
  v69 = (int16x8_t)vzip2q_s32(v59, v61);
  v70 = (int16x8_t)vzip1q_s64(v62, v66);
  v71 = (int16x8_t)vzip2q_s64(v62, v66);
  v72 = (int16x8_t)vzip1q_s64(v64, v68);
  v73 = (int16x8_t)vzip2q_s64(v64, v68);
  v74 = (int16x8_t)vzip1q_s64(v63, v67);
  v75 = (int16x8_t)vzip2q_s64(v63, v67);
  v76 = (int16x8_t)vzip1q_s64(v65, (int64x2_t)v69);
  v77 = (int16x8_t)vzip2q_s64(v65, (int64x2_t)v69);
  v69.i64[0] = 0x20002000200020;
  v69.i64[1] = 0x20002000200020;
  v78 = vaddq_s16(v70, v69);
  v79 = vaddq_s16(v78, v72);
  v80 = vsubq_s16(vaddq_s16(v78, v78), v79);
  v81 = vsubq_s16(vshlq_s16(v74, v20), v76);
  v82 = vaddq_s16(vshlq_s16(v76, v20), v74);
  v83 = vaddq_s16(vaddq_s16(vshlq_s16(v71, v20), vaddq_s16(v71, v75)), v73);
  v84 = vsubq_s16(vaddq_s16(vshlq_s16(v73, v20), vaddq_s16(v73, v77)), v71);
  v85 = vsubq_s16(vaddq_s16(v77, v71), vaddq_s16(vshlq_s16(v75, v20), v75));
  v86 = vsubq_s16(v73, vaddq_s16(vshlq_s16(v77, v20), vaddq_s16(v77, v75)));
  v87 = vaddq_s16(v82, v79);
  v88 = vsubq_s16(vaddq_s16(v79, v79), v87);
  v89 = vaddq_s16(v80, v81);
  v90 = vsubq_s16(vaddq_s16(v80, v80), v89);
  v91 = vaddq_s16(v86, vshlq_s16(v83, v26));
  v92 = vaddq_s16(v85, vshlq_s16(v84, v26));
  v93 = vaddq_s16(vsubq_s16(v83, vshlq_s16(v86, v26)), v87);
  v94 = vsubq_s16(vaddq_s16(v87, v87), v93);
  v95 = vaddq_s16(vsubq_s16(vshlq_s16(v85, v26), v84), v89);
  v96 = vaddq_s16(v92, v90);
  v97 = vaddq_s16(v91, v88);
  v92.i64[0] = 0x5000500050005;
  v92.i64[1] = 0x5000500050005;
  *a2 = vshlq_s16(v93, v92);
  a2[1] = vshlq_s16(v95, v92);
  a2[2] = vshlq_s16(v96, v92);
  a2[3] = vshlq_s16(v97, v92);
  a2[4] = vshlq_s16(vsubq_s16(vaddq_s16(v88, v88), v97), v92);
  a2[5] = vshlq_s16(vsubq_s16(vaddq_s16(v90, v90), v96), v92);
  result = vshlq_s16(vsubq_s16(vaddq_s16(v89, v89), v95), v92);
  a2[6] = result;
  a2[7] = vshlq_s16(v94, v92);
  return result;
}

int32x4_t sub_2160AAE5C(uint64_t a1, float *a2, int a3, int a4, unsigned __int16 a5, unsigned __int16 a6, unsigned __int16 a7, uint16x8_t a8)
{
  int64x2_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint32x4_t v15;
  uint32x4_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x2x2_t v54;
  int32x4_t v55;
  int32x4_t result;
  float *v57;

  v8 = *(int64x2_t *)(a1 + 16);
  v9.i64[0] = 0xFFFF00000000;
  v9.i64[1] = 0xFFFF00000000;
  v10 = (int64x2_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8(*(int8x16_t *)a1, v9), 0xCuLL), vandq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
  v11 = (int16x8_t)vzip1q_s64(v10, v8);
  v12 = (int16x8_t)vzip2q_s64(v10, v8);
  if (!a4)
  {
    if ((a8.i8[0] & 3) != 0)
    {
      v25 = (int32x4_t)xmmword_2160F2CC0;
    }
    else
    {
      v25.i64[0] = 0x1000100010001;
      v25.i64[1] = 0x1000100010001;
      a8 = vshlq_u16(a8, (uint16x8_t)v25);
      v25.i8[0] = 0;
      v25.i16[1] = 0;
      v25.i32[1] = 0;
      v25.i64[1] = 0;
    }
    v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)a8.i8), (int16x8_t)vmull_high_s16(v11, (int16x8_t)a8));
    v31 = vmulq_s16((int16x8_t)a8, v11);
    v18 = (int32x4_t)vzip2q_s16(v31, v30);
    v19 = vaddq_s32(v25, (int32x4_t)vzip1q_s16(v31, v30));
    v28 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)a8.i8), (int16x8_t)vmull_high_s16(v12, (int16x8_t)a8));
    v29 = vmulq_s16((int16x8_t)a8, v12);
    goto LABEL_9;
  }
  if (!a3)
  {
    v25.i32[0] = a6;
    v26 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)a8.i8), (int16x8_t)vmull_high_s16(v11, (int16x8_t)a8));
    v27 = vmulq_s16(v11, (int16x8_t)a8);
    v18 = (int32x4_t)vzip2q_s16(v27, v26);
    v19 = vaddq_s32((int32x4_t)a7, (int32x4_t)vzip1q_s16(v27, v26));
    v28 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)a8.i8), (int16x8_t)vmull_high_s16(v12, (int16x8_t)a8));
    v29 = vmulq_s16(v12, (int16x8_t)a8);
LABEL_9:
    v23 = (int32x4_t)vzip2q_s16(v29, v28);
    v24 = (int32x4_t)vzip1q_s16(v29, v28);
    goto LABEL_10;
  }
  v13 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)a8.i8), (int16x8_t)vmull_high_s16(v11, (int16x8_t)a8));
  v14 = vmulq_s16(v11, (int16x8_t)a8);
  v15 = (uint32x4_t)vzip2q_s16(v14, v13);
  v16 = (uint32x4_t)vdupq_n_s32(a5);
  v17 = (uint32x4_t)vzip1q_s16(v14, v13);
  v18 = (int32x4_t)vshlq_u32(v15, v16);
  v19 = (int32x4_t)vshlq_u32(v17, v16);
  v20 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)a8.i8), (int16x8_t)vmull_high_s16(v12, (int16x8_t)a8));
  v21 = vmulq_s16(v12, (int16x8_t)a8);
  v22 = (uint32x4_t)vzip2q_s16(v21, v20);
  v25 = (int32x4_t)vzip1q_s16(v21, v20);
  v23 = (int32x4_t)vshlq_u32(v22, v16);
  v24 = (int32x4_t)vshlq_u32((uint32x4_t)v25, v16);
  v25.i32[0] = 0;
LABEL_10:
  v32 = vaddq_s32(v19, v24);
  v33 = vaddq_s32(v18, v23);
  v34 = vsubq_s32(v19, v24);
  v35 = vsubq_s32(v18, v23);
  v36 = vaddq_s32(v32, v33);
  v37 = vsubq_s32(v32, v33);
  v38 = vsubq_s32(v34, v35);
  v39 = vaddq_s32(v34, v35);
  v40 = vzip1q_s32(v36, v38);
  v41 = vzip2q_s32(v36, v38);
  v42 = vzip1q_s32(v37, v39);
  v43 = vzip2q_s32(v37, v39);
  v44 = vzip1q_s32(v40, v42);
  v45 = vzip2q_s32(v40, v42);
  v46 = vzip1q_s32(v41, v43);
  v47 = vzip2q_s32(v41, v43);
  v48 = vaddq_s32(v44, v45);
  v49 = vsubq_s32(v44, v45);
  v50 = vaddq_s32(v46, v47);
  v51 = vsubq_s32(v46, v47);
  v52 = vaddq_s32(v48, v50);
  v53 = vdupq_n_s32(-v25.i32[0]);
  v54 = (float32x2x2_t)vshlq_s32(vsubq_s32(v48, v50), v53);
  v55 = vshlq_s32(vsubq_s32(v49, v51), v53);
  result = vshlq_s32(vaddq_s32(v49, v51), v53);
  *(int16x4_t *)v53.i8 = vqmovn_s32(vshlq_s32(v52, v53));
  *(int16x4_t *)v49.i8 = vqmovn_s32((int32x4_t)v54);
  v54.val[0] = (float32x2_t)vqmovn_s32(v55);
  *(int16x4_t *)v55.i8 = vqmovn_s32(result);
  vst2_f32(a2, *(float32x2x2_t *)((char *)&v49 - 8));
  v57 = a2 + 4;
  vst2_f32(v57, v54);
  return result;
}

int16x8_t sub_2160AB02C(uint64_t a1, uint64_t a2, int16x8_t *a3, int a4, unsigned int a5, int a6, unsigned int a7, int a8, int16x8_t a9, __n128 a10, int16x8_t a11)
{
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int32x4_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int64x2_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int64x2_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t result;
  int8x16x2_t v66;
  int8x16x2_t v67;

  v11 = *(int16x8_t *)(a1 + 16);
  v12 = *(int16x8_t *)(a2 + 16);
  v13.i64[0] = 0xFFFF00000000;
  v13.i64[1] = 0xFFFF00000000;
  v14 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8(*(int8x16_t *)a1, v13), 0xCuLL), vandq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
  v15 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8(*(int8x16_t *)a2, v13), 0xCuLL), vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
  if (a8)
  {
    if (a4)
    {
      v16 = (uint16x8_t)vdupq_n_s16(a5);
      v17 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v14, a11), v16);
      v18 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v11, a11), v16);
      v19 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v15, a11), v16);
      v20 = (int64x2_t)vshlq_u16((uint16x8_t)vmulq_s16(v12, a11), v16);
    }
    else
    {
      v23 = (int32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_2160EE800);
      v24 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)a11.i8), (int16x8_t)vmull_high_s16(v14, a11));
      v25 = vmulq_s16(v14, a11);
      v26 = (int32x4_t)vzip2q_s16(v25, v24);
      v27 = (int32x4_t)vzip1q_s16(v25, v24);
      v28 = vaddq_s32(v26, v23);
      v29 = vdupq_n_s32(-a6);
      v17 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(v27, v23), v29)), vshlq_s32(v28, v29));
      v30 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)a11.i8), (int16x8_t)vmull_high_s16(v11, a11));
      v31 = vmulq_s16(v11, a11);
      v18 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v31, v30), v23), v29)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v31, v30), v23), v29));
      v32 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)a11.i8), (int16x8_t)vmull_high_s16(v15, a11));
      v33 = vmulq_s16(v15, a11);
      v19 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v33, v32), v23), v29)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v33, v32), v23), v29));
      v34 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)a11.i8), (int16x8_t)vmull_high_s16(v12, a11));
      v35 = vmulq_s16(v12, a11);
      v20 = (int64x2_t)vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v35, v34), v23), v29)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v35, v34), v23), v29));
    }
    v21 = (int64x2_t)vaddq_s16(v17, a9);
    v22 = (int64x2_t)vaddq_s16(v19, a9);
  }
  else
  {
    v21 = (int64x2_t)vmlaq_s16(a9, v14, a11);
    v18 = vmulq_s16(v11, a11);
    v22 = (int64x2_t)vmlaq_s16(a9, v15, a11);
    v20 = (int64x2_t)vmulq_s16(v12, a11);
  }
  v36 = v21;
  v36.i16[0] = a9.i16[0];
  v37 = (int16x8_t)vzip2q_s64(v21, v22);
  v22.i16[0] = a10.n128_u16[0];
  v38 = (int16x8_t)vzip1q_s64(v36, v22);
  v39 = (int16x8_t)vzip2q_s64((int64x2_t)v18, v20);
  v18.i64[1] = v20.i64[0];
  v40 = vaddq_s16(v38, v18);
  v41.i64[0] = -1;
  v41.i64[1] = -1;
  v42 = vsubq_s16(v38, v18);
  v43 = vshlq_s16(v39, v41);
  v44 = vsubq_s16(vshlq_s16(v37, v41), v39);
  v45 = vaddq_s16(v43, v37);
  v46 = vaddq_s16(v40, v45);
  v47 = vaddq_s16(v42, v44);
  v48 = vsubq_s16(v42, v44);
  v49 = vsubq_s16(v40, v45);
  v50 = vzip1q_s16(v46, v48);
  v51 = vzip2q_s16(v46, v48);
  v52 = vzip1q_s16(v47, v49);
  v53 = vzip2q_s16(v47, v49);
  v66.val[1] = (int8x16_t)vdupq_lane_s64(v51.i64[0], 0);
  v66.val[0] = (int8x16_t)vdupq_lane_s64(v53.i64[0], 0);
  v54 = vzip1q_s16(v50, v52);
  v66.val[0] = vqtbl2q_s8(v66, (int8x16_t)xmmword_2160F2C40);
  v66.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v54, (int64x2_t)v66.val[0]);
  v67.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v50, 1);
  v67.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v52, 1);
  v55 = (int16x8_t)vqtbl2q_s8(v67, (int8x16_t)xmmword_2160F1950);
  v56 = (int64x2_t)vzip2q_s16(v51, v53);
  v57 = (int16x8_t)vzip2q_s64((int64x2_t)v55, v56);
  v54.i64[1] = v66.val[0].i64[0];
  v55.i64[1] = v56.i64[0];
  v58 = vaddq_s16(v54, v55);
  v59 = vsubq_s16(v54, v55);
  v60 = vshlq_s16(v57, v41);
  v61 = vsubq_s16(vshlq_s16((int16x8_t)v66.val[1], v41), v57);
  v62 = vaddq_s16(v60, (int16x8_t)v66.val[1]);
  v63 = vaddq_s16(v59, v61);
  v64 = vsubq_s16(v59, v61);
  v59.i64[0] = 0x5000500050005;
  v59.i64[1] = 0x5000500050005;
  *a3 = vshlq_s16(vaddq_s16(v58, v62), v59);
  a3[2] = vshlq_s16(v63, v59);
  result = vshlq_s16(vsubq_s16(v58, v62), v59);
  a3[4] = vshlq_s16(v64, v59);
  a3[6] = result;
  return result;
}

int16x8_t sub_2160AB29C(int8x16_t *a1, int8x16_t *a2, int16x8_t *a3, int a4, unsigned int a5, unsigned __int16 a6, unsigned __int16 a7, int16x8_t a8, int16x8_t a9)
{
  int8x16_t v9;
  int8x16_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int64x2_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int64x2_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int64x2_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t result;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;

  v9 = a1[1];
  v10 = a2[1];
  v67.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*a1, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
  v67.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
  v11 = (int16x8_t)vqtbl2q_s8(v67, (int8x16_t)xmmword_2160F2D30);
  v68.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*a1, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
  v68.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
  v12 = (int16x8_t)vqtbl2q_s8(v68, (int8x16_t)xmmword_2160F2D70);
  v66.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*a2, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
  v66.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
  v13 = (int16x8_t)vqtbl2q_s8(v66, (int8x16_t)xmmword_2160F2D30);
  v66.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(*a2, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
  v66.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
  v14 = (int16x8_t)vqtbl2q_s8(v66, (int8x16_t)xmmword_2160F2D70);
  if (a4)
  {
    v15 = (uint16x8_t)vdupq_n_s16(a5);
    v16 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v11, a9), v15);
    v17 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v12, a9), v15);
    v18 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16(v13, a9), v15);
    v19 = (int64x2_t)vshlq_u16((uint16x8_t)vmulq_s16(v14, a9), v15);
  }
  else
  {
    v20 = (int32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_2160EE800);
    v21 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)a9.i8), (int16x8_t)vmull_high_s16(v11, a9));
    v22 = vmulq_s16(v11, a9);
    v23 = (int32x4_t)vzip2q_s16(v22, v21);
    v24 = (int32x4_t)vzip1q_s16(v22, v21);
    v25 = vaddq_s32(v23, v20);
    v26 = vdupq_n_s32(-a6);
    v16 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(v24, v20), v26)), vshlq_s32(v25, v26));
    v27 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)a9.i8), (int16x8_t)vmull_high_s16(v12, a9));
    v28 = vmulq_s16(v12, a9);
    v17 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v28, v27), v20), v26)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v28, v27), v20), v26));
    v29 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)a9.i8), (int16x8_t)vmull_high_s16(v13, a9));
    v30 = vmulq_s16(v13, a9);
    v18 = vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v30, v29), v20), v26)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v30, v29), v20), v26));
    v31 = vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)a9.i8), (int16x8_t)vmull_high_s16(v14, a9));
    v32 = vmulq_s16(v14, a9);
    v19 = (int64x2_t)vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32((int32x4_t)vzip1q_s16(v32, v31), v20), v26)), vshlq_s32(vaddq_s32((int32x4_t)vzip2q_s16(v32, v31), v20), v26));
  }
  v33 = vaddq_s16(v16, a8);
  v34 = (int64x2_t)vaddq_s16(v18, a8);
  v35 = (int16x8_t)vzip2q_s64((int64x2_t)v33, v34);
  v36 = (int16x8_t)vzip2q_s64((int64x2_t)v17, v19);
  v33.i64[1] = v34.i64[0];
  v17.i64[1] = v19.i64[0];
  v37 = vaddq_s16(v33, v17);
  v38.i64[0] = -1;
  v38.i64[1] = -1;
  v39 = vsubq_s16(v33, v17);
  v40 = vshlq_s16(v36, v38);
  v41 = vsubq_s16(vshlq_s16(v35, v38), v36);
  v42 = vaddq_s16(v40, v35);
  v43 = vaddq_s16(v37, v42);
  v44 = vaddq_s16(v39, v41);
  v45 = vsubq_s16(v39, v41);
  v46 = vsubq_s16(v37, v42);
  v47 = vzip1q_s16(v43, v45);
  v48 = vzip2q_s16(v43, v45);
  v49 = vzip1q_s16(v44, v46);
  v50 = vzip2q_s16(v44, v46);
  v64.val[1] = (int8x16_t)vdupq_lane_s64(v48.i64[0], 0);
  v64.val[0] = (int8x16_t)vdupq_lane_s64(v50.i64[0], 0);
  v51 = vzip1q_s16(v47, v49);
  v64.val[0] = vqtbl2q_s8(v64, (int8x16_t)xmmword_2160F2C40);
  v64.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v51, (int64x2_t)v64.val[0]);
  v65.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v47, 1);
  v65.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v49, 1);
  v52 = (int16x8_t)vqtbl2q_s8(v65, (int8x16_t)xmmword_2160F1950);
  v53 = (int64x2_t)vzip2q_s16(v48, v50);
  v54 = (int16x8_t)vzip2q_s64((int64x2_t)v52, v53);
  v51.i64[1] = v64.val[0].i64[0];
  v52.i64[1] = v53.i64[0];
  v55 = vaddq_s16(v51, v52);
  v56 = vshlq_s16((int16x8_t)v64.val[1], v38);
  v57 = vsubq_s16(v51, v52);
  v58 = vshlq_s16(v54, v38);
  v59 = vsubq_s16(v56, v54);
  v60 = vaddq_s16(v58, (int16x8_t)v64.val[1]);
  v61 = vaddq_s16(v55, v60);
  v62 = vsubq_s16(v55, v60);
  v60.i64[0] = 0x5000500050005;
  v60.i64[1] = 0x5000500050005;
  *a3 = vshlq_s16(v61, v60);
  a3[2] = vshlq_s16(vaddq_s16(v57, v59), v60);
  result = vshlq_s16(v62, v60);
  a3[4] = vshlq_s16(vsubq_s16(v57, v59), v60);
  a3[6] = result;
  return result;
}

int16x8_t sub_2160AB578(_OWORD *a1, _OWORD *a2, int16x8_t *a3, int a4, int16x8_t a5, int16x8_t a6)
{
  int16x8_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int64x2_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int64x2_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t result;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  v7 = *(int8x16_t *)a1;
  v6 = *((int16x8_t *)a1 + 1);
  v9 = *(int8x16_t *)a2;
  v8 = *((int16x8_t *)a2 + 1);
  if (a4)
  {
    v10.i64[0] = 0xFFFF00000000;
    v10.i64[1] = 0xFFFF00000000;
    v11 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8(v7, v10), 0xCuLL), vandq_s8(v7, (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8(v7, (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
    v12 = (int16x8_t)vorrq_s8(vorrq_s8(vextq_s8((int8x16_t)0, vandq_s8(v9, v10), 0xCuLL), vandq_s8(v9, (int8x16_t)xmmword_2160F2C50)), vextq_s8(vandq_s8(v9, (int8x16_t)xmmword_2160F2C60), (int8x16_t)0, 2uLL));
  }
  else
  {
    v49.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v7, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
    v49.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)v6, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
    v11 = (int16x8_t)vqtbl2q_s8(v49, (int8x16_t)xmmword_2160F2D30);
    v50.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v7, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
    v50.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)v6, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
    v6 = (int16x8_t)vqtbl2q_s8(v50, (int8x16_t)xmmword_2160F2D70);
    v46.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_2160F2CE0), (int8x16_t)xmmword_2160F2CF0), (int8x16_t)xmmword_2160F2D00);
    v46.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_2160F2D10), (int8x16_t)xmmword_2160F2D20), (int8x16_t)xmmword_2160F19A0);
    v12 = (int16x8_t)vqtbl2q_s8(v46, (int8x16_t)xmmword_2160F2D30);
    v47.val[0] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_2160F2D40), (int8x16_t)xmmword_2160F2D50), (int8x16_t)xmmword_2160EE7C0);
    v47.val[1] = vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_2160F2D60), (int8x16_t)xmmword_2160F1820), (int8x16_t)xmmword_2160F1990);
    v8 = (int16x8_t)vqtbl2q_s8(v47, (int8x16_t)xmmword_2160F2D70);
  }
  v13 = vmlaq_s16(a5, v11, a6);
  v14 = vmulq_s16(v6, a6);
  v15 = (int64x2_t)vmlaq_s16(a5, v12, a6);
  v16 = vmulq_s16(v8, a6);
  v17 = (int16x8_t)vzip2q_s64((int64x2_t)v13, v15);
  v18 = (int16x8_t)vzip2q_s64((int64x2_t)v14, (int64x2_t)v16);
  v13.i64[1] = v15.i64[0];
  v14.i64[1] = v16.i64[0];
  v19 = vaddq_s16(v13, v14);
  v16.i64[0] = -1;
  v16.i64[1] = -1;
  v20 = vsubq_s16(v13, v14);
  v21 = vshlq_s16(v18, v16);
  v22 = vsubq_s16(vshlq_s16(v17, v16), v18);
  v23 = vaddq_s16(v21, v17);
  v24 = vaddq_s16(v19, v23);
  v25 = vaddq_s16(v20, v22);
  v26 = vsubq_s16(v20, v22);
  v27 = vsubq_s16(v19, v23);
  v28 = vzip1q_s16(v24, v26);
  v29 = vzip2q_s16(v24, v26);
  v30 = vzip1q_s16(v25, v27);
  v31 = vzip2q_s16(v25, v27);
  v45.val[1] = (int8x16_t)vdupq_lane_s64(v29.i64[0], 0);
  v45.val[0] = (int8x16_t)vdupq_lane_s64(v31.i64[0], 0);
  v32 = vzip1q_s16(v28, v30);
  v45.val[0] = vqtbl2q_s8(v45, (int8x16_t)xmmword_2160F2C40);
  v45.val[1] = (int8x16_t)vzip2q_s64((int64x2_t)v32, (int64x2_t)v45.val[0]);
  v48.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v28, 1);
  v48.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v30, 1);
  v33 = (int16x8_t)vqtbl2q_s8(v48, (int8x16_t)xmmword_2160F1950);
  v34 = (int64x2_t)vzip2q_s16(v29, v31);
  v35 = (int16x8_t)vzip2q_s64((int64x2_t)v33, v34);
  v32.i64[1] = v45.val[0].i64[0];
  v33.i64[1] = v34.i64[0];
  v36 = vaddq_s16(v32, v33);
  v37 = vshlq_s16((int16x8_t)v45.val[1], v16);
  v38 = vsubq_s16(v32, v33);
  v39 = vshlq_s16(v35, v16);
  v40 = vsubq_s16(v37, v35);
  v41 = vaddq_s16(v39, (int16x8_t)v45.val[1]);
  v42 = vaddq_s16(v36, v41);
  v43 = vsubq_s16(v36, v41);
  v41.i64[0] = 0x5000500050005;
  v41.i64[1] = 0x5000500050005;
  *a3 = vshlq_s16(v42, v41);
  a3[2] = vshlq_s16(vaddq_s16(v38, v40), v41);
  result = vshlq_s16(v43, v41);
  a3[4] = vshlq_s16(vsubq_s16(v38, v40), v41);
  a3[6] = result;
  return result;
}

uint64_t sub_2160AB7A8(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, _WORD *a7, int a8, int a9, char a10, char a11, char a12, unsigned __int16 a13, int a14)
{
  int v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  __int16 v31;
  int v32;
  int v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  __int16 v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int16 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  __int16 v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  __int16 v97;
  int v98;
  int v99;
  __int16 v100;
  int v101;
  int v102;
  int v103;
  int v104;
  __int16 v105;
  int v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  __int16 v124;
  int v125;
  int v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  __int16 v137;
  __int16 v138;
  __int16 v139;
  int v140;
  int v141;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  __int16 v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  __int16 v157;
  __int16 v158;
  __int16 v159;
  int v160;
  __int16 v161;
  __int16 v162;
  int v163;
  int v164;
  int v165;
  __int16 v166;
  __int16 v167;
  __int16 v168;
  __int16 v169;
  int v170;
  __int16 v171;
  __int16 v172;
  __int16 v173;
  __int16 v174;
  __int16 v175;
  __int16 v176;
  __int16 v177;
  __int16 v178;
  __int16 v179;
  int v180;
  __int16 v181;
  uint64_t result;
  int v183;
  int v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  __int16 v196;
  int v197;
  int v198;
  int v199;
  __int16 v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  __int16 v210;
  int v211;
  __int16 v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  __int16 v218;
  int v219;
  int v220;
  __int16 v221;
  int v222;
  int v223;
  int v224;
  __int16 v225;
  int v226;
  int v227;
  int v228;
  __int16 v229;
  int v230;
  __int16 v231;
  int v232;
  int v233;
  __int16 v234;
  int v235;
  int v236;
  __int16 v237;
  int v238;
  int v239;
  __int16 v240;
  int v241;
  int v242;
  int v243;
  int v244;
  __int16 v245;
  int v246;
  int v247;
  __int16 v248;
  int v249;
  int v250;
  __int16 v251;
  int v252;
  int v253;
  __int16 v254;
  int v255;
  int v256;
  __int16 v257;
  __int16 v258;
  int v259;
  __int16 v260;
  __int16 v261;
  __int16 v262;
  __int16 v263;
  __int16 v264;
  int v265;
  __int16 v266;
  __int16 v267;
  int v268;
  int v269;
  __int16 v270;
  __int16 v271;
  int v272;
  int v273;
  __int16 v274;
  int v275;
  int v276;
  __int16 v277;
  __int16 v278;
  int v279;
  int v280;
  int v281;
  __int16 v282;
  int v283;
  __int16 v284;
  int v285;
  int v286;
  __int16 v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  __int16 v293;
  __int16 v294;
  int v295;
  __int16 v296;
  int v297;
  int v298;
  __int16 v299;
  __int16 v300;
  __int16 v301;

  v14 = (unsigned __int16)a2[13];
  if (a8)
    v15 = (unsigned __int16)a2[14];
  else
    v15 = (unsigned __int16)a2[13];
  if (!a8)
    v14 = (unsigned __int16)a2[12];
  v249 = v14;
  if (a8)
    v16 = (unsigned __int16)a2[12];
  else
    v16 = (unsigned __int16)a2[6];
  v238 = v16;
  if (a8)
    v17 = a2[11];
  else
    v17 = a2[14];
  v229 = v17;
  if (a8)
    v18 = a2[10];
  else
    v18 = a2[11];
  v221 = v18;
  if (a8)
    v19 = a2[7];
  else
    v19 = a2[10];
  v255 = v15;
  v258 = v19;
  if (a8)
    v20 = (unsigned __int16)a2[9];
  else
    v20 = (unsigned __int16)a2[7];
  if (a8)
    v21 = (unsigned __int16)a2[6];
  else
    v21 = (unsigned __int16)a2[8];
  v252 = v21;
  if (a8)
    v22 = a2[8];
  else
    v22 = a2[5];
  v223 = v20;
  v225 = v22;
  if (a8)
    v23 = (unsigned __int16)a2[5];
  else
    v23 = (unsigned __int16)a2[4];
  if (a8)
    v24 = a2[4];
  else
    v24 = a2[9];
  if (a8)
    v25 = (unsigned __int16)a2[2];
  else
    v25 = (unsigned __int16)a2[1];
  v227 = v25;
  if (a8)
    v26 = (unsigned __int16)a2[1];
  else
    v26 = (unsigned __int16)a2[2];
  v209 = v26;
  if (a8)
    v27 = (unsigned __int16)a1[14];
  else
    v27 = (unsigned __int16)a1[13];
  v241 = v23;
  v243 = v27;
  if (a8)
    v28 = (unsigned __int16)a1[13];
  else
    v28 = (unsigned __int16)a1[12];
  if (a8)
    v29 = (unsigned __int16)a1[12];
  else
    v29 = (unsigned __int16)a1[6];
  v215 = v29;
  v218 = v24;
  if (a8)
    v30 = a1[11];
  else
    v30 = a1[14];
  v212 = v30;
  if (a8)
    v31 = a1[10];
  else
    v31 = a1[11];
  if (a8)
    v32 = (unsigned __int16)a1[7];
  else
    v32 = (unsigned __int16)a1[10];
  v246 = v32;
  if (a8)
    v33 = (unsigned __int16)a1[9];
  else
    v33 = (unsigned __int16)a1[7];
  if (a8)
    v34 = (unsigned __int16)a1[6];
  else
    v34 = (unsigned __int16)a1[8];
  v232 = v28;
  v235 = v34;
  if (a8)
    v35 = a1[8];
  else
    v35 = a1[5];
  if (a8)
    v36 = (unsigned __int16)a1[5];
  else
    v36 = (unsigned __int16)a1[4];
  if (a8)
    v37 = a1[4];
  else
    v37 = a1[9];
  if (a8)
    v38 = (unsigned __int16)a1[2];
  else
    v38 = (unsigned __int16)a1[1];
  if (a8)
    v39 = (unsigned __int16)a1[1];
  else
    v39 = (unsigned __int16)a1[2];
  v40 = *a3;
  v41 = (unsigned __int16)a3[1];
  v42 = a3[2];
  v43 = a3[3];
  v283 = (unsigned __int16)a3[4];
  v285 = (unsigned __int16)a3[5];
  v44 = (unsigned __int16)a3[6];
  v45 = (unsigned __int16)a3[7];
  v261 = *a4;
  v271 = a4[3];
  v275 = (unsigned __int16)a4[4];
  v277 = v43;
  v46 = (unsigned __int16)a4[6];
  v47 = a4[7];
  v286 = *a5;
  v288 = a5[1];
  v290 = a5[2];
  v292 = a5[3];
  v295 = (unsigned __int16)a4[1];
  v265 = a5[4];
  v267 = a4[2];
  v269 = a5[5];
  v273 = a5[6];
  v279 = a5[7];
  v281 = (unsigned __int16)a4[5];
  v48 = *a6;
  v49 = a6[1];
  v50 = a6[2];
  v51 = a6[3];
  v52 = a6[4];
  v53 = a6[5];
  v54 = a6[6];
  v55 = a6[7];
  v56 = *a1;
  v57 = a1[3];
  v58 = a1[15];
  v59 = *a2;
  v60 = a2[3];
  v61 = a2[15];
  v300 = v47;
  v298 = v46;
  v263 = v40;
  if (a14)
  {
    v183 = v49;
    v184 = v55;
    v185 = v60;
    v186 = v33;
    v187 = v50;
    v188 = v31;
    v189 = v41;
    v194 = v51;
    v196 = v37;
    v198 = v52;
    v200 = v38;
    v202 = v53;
    v204 = v54;
    v190 = v42;
    v191 = v44;
    v192 = v45;
    v62 = v56 * v48;
    v63 = v35;
    if (a9)
    {
      v64 = v62;
      v65 = v229 * v51;
      v66 = (__int16)v238 * v52;
      v67 = (__int16)v232 * v202;
      v68 = (__int16)v241 * v202;
      v69 = (__int16)v249 * v202;
      v70 = (__int16)v243 * v204;
      v71 = (__int16)v252 * v204;
      v72 = (__int16)v255 * v204;
      v73 = v258 * v184;
      v74 = v64 << a10;
      v259 = ((__int16)v39 * v49) << a10;
      v256 = (v57 * v50) << a10;
      v230 = (v200 * v52) << a10;
      v250 = ((__int16)v235 * v204) << a10;
      v236 = ((__int16)v246 * v184) << a10;
      v239 = ((__int16)v36 * v202) << a10;
      v201 = (v63 * v48) << a10;
      v203 = ((__int16)v33 * v49) << a10;
      v205 = (v37 * v194) << a10;
      v206 = (v188 * v50) << a10;
      v247 = (v212 * v194) << a10;
      v207 = ((__int16)v215 * v52) << a10;
      v75 = v67 << a10;
      v253 = (v58 * v184) << a10;
      v76 = (v59 * v48) << a10;
      v233 = ((__int16)v209 * v49) << a10;
      v197 = (v218 * v194) << a10;
      v199 = (v185 * v50) << a10;
      v228 = ((__int16)v227 * v52) << a10;
      v242 = v68 << a10;
      v244 = v70 << a10;
      v77 = v71 << a10;
      v54 = v73 << a10;
      v224 = ((__int16)v223 * v49) << a10;
      v226 = (v225 * v48) << a10;
      v219 = v65 << a10;
      v222 = (v221 * v50) << a10;
      v216 = v66 << a10;
      v78 = v69 << a10;
      v79 = v72 << a10;
      v80 = (v61 * v184) << a10;
    }
    else
    {
      v111 = v225 * v48;
      v112 = (__int16)v235 * v204 + a13;
      v113 = v35 * v48 + a13;
      v114 = v212 * v51 + a13;
      v115 = (__int16)v215 * v198 + a13;
      v116 = (__int16)v243 * v204 + a13;
      v117 = v59 * v48 + a13;
      v118 = (__int16)v209 * v49 + a13;
      v119 = v218 * v194 + a13;
      v120 = (__int16)v227 * v198 + a13;
      v121 = (__int16)v252 * v204 + a13;
      v122 = v258 * v55 + a13;
      v123 = v111 + a13;
      v220 = v229 * v194 + a13;
      v217 = (__int16)v238 * v198 + a13;
      v214 = (__int16)v249 * v53 + a13;
      v211 = (__int16)v255 * v204 + a13;
      v74 = (v62 + a13) >> a12;
      v259 = ((__int16)v39 * v183 + a13) >> a12;
      v256 = (v57 * v187 + a13) >> a12;
      v205 = (v196 * v194 + a13) >> a12;
      v230 = (v200 * v198 + a13) >> a12;
      v239 = ((__int16)v36 * v53 + a13) >> a12;
      v250 = v112 >> a12;
      v236 = ((__int16)v246 * v55 + a13) >> a12;
      v201 = v113 >> a12;
      v203 = (v186 * v183 + a13) >> a12;
      v206 = (v31 * v187 + a13) >> a12;
      v207 = v115 >> a12;
      v75 = ((__int16)v232 * v53 + a13) >> a12;
      v244 = v116 >> a12;
      v247 = v114 >> a12;
      v253 = (v58 * v55 + a13) >> a12;
      v76 = v117 >> a12;
      v233 = v118 >> a12;
      v197 = v119 >> a12;
      v199 = (v185 * v187 + a13) >> a12;
      v228 = v120 >> a12;
      v242 = ((__int16)v241 * v53 + a13) >> a12;
      v77 = v121 >> a12;
      v54 = v122 >> a12;
      v224 = ((__int16)v223 * v183 + a13) >> a12;
      v226 = v123 >> a12;
      v219 = v220 >> a12;
      v222 = (v221 * v187 + a13) >> a12;
      v216 = v217 >> a12;
      v78 = v214 >> a12;
      v79 = v211 >> a12;
      v80 = (v61 * v55 + a13) >> a12;
    }
    v208 = v78;
    v210 = v80;
    v213 = v79;
    v110 = v40;
    v109 = v265;
    v97 = v40 + v74;
    v195 = v40 + v76;
    v44 = v191;
    v45 = v192;
    v91 = v283;
    v92 = v285;
    v102 = v279;
    v101 = v281;
    v103 = v275;
    v89 = v277;
    v105 = v271;
    v104 = v273;
    v107 = v189;
    v86 = v190;
    v108 = v267;
    v106 = v269;
    v94 = v259;
    v100 = v261;
    v99 = v253;
    v87 = v256;
    v90 = v247;
    v98 = v236;
    v96 = v239;
    v85 = v233;
  }
  else
  {
    v193 = v40 + v56 * v48;
    LOWORD(v201) = v35 * v48;
    v195 = v40 + v59 * v48;
    v81 = v225 * v48;
    v82 = v41;
    v83 = v41 + v39 * v49;
    v84 = v33 * v49;
    v85 = v41 + v209 * v49;
    v224 = v223 * v49;
    LOWORD(v226) = v81;
    v86 = v42;
    v87 = v42 + v57 * v50;
    LOWORD(v206) = v31 * v50;
    v88 = v42 + v60 * v50;
    v89 = v277;
    v203 = v84;
    LOWORD(v205) = v277 + v37 * v51;
    v90 = v212 * v51;
    LOWORD(v197) = v277 + v218 * v51;
    LOWORD(v199) = v88;
    LOWORD(v219) = v229 * v51;
    LOWORD(v222) = v221 * v50;
    v91 = v283;
    v92 = v285;
    v93 = v283 + v38 * v52;
    v94 = v83;
    v95 = v215 * v52;
    v228 = v283 + v227 * v52;
    v230 = v93;
    v216 = v238 * v52;
    v96 = v285 + v36 * v53;
    v75 = v232 * v53;
    v207 = v95;
    v208 = v249 * v53;
    v250 = v44 + v235 * v54;
    v242 = v285 + v241 * v53;
    v244 = v243 * v54;
    v97 = v193;
    v77 = v44 + v252 * v54;
    v213 = v255 * v54;
    v98 = v45 + v246 * v55;
    v99 = v58 * v55;
    v100 = v261;
    LOWORD(v54) = v45 + v258 * v55;
    v210 = v61 * v55;
    v102 = v279;
    v101 = v281;
    v104 = v273;
    v103 = v275;
    v106 = v269;
    v105 = v271;
    v107 = v82;
    v109 = v265;
    v108 = v267;
    v110 = v263;
  }
  if (v286)
    v97 = v110;
  v124 = v195;
  if (v286)
    v124 = v100;
  v287 = v124;
  if (v288)
    v125 = v107;
  else
    v125 = v94;
  v126 = v295;
  if (!v288)
    v126 = v85;
  v289 = v126;
  if (!v290)
    v86 = v87;
  v127 = v199;
  if (v290)
    v127 = v108;
  v296 = v127;
  if (v292)
    v128 = v89;
  else
    v128 = v205;
  v129 = v197;
  if (v292)
    v129 = v105;
  v293 = v129;
  if (v109)
    v130 = v91;
  else
    v130 = v230;
  if (v109)
    v131 = v103;
  else
    v131 = v228;
  if (v106)
    v132 = v92;
  else
    v132 = v96;
  if (v106)
    v133 = v101;
  else
    v133 = v242;
  if (v104)
    v134 = v44;
  else
    v134 = v250;
  if (v104)
    v135 = v298;
  else
    v135 = v77;
  if (v102)
    v136 = v45;
  else
    v136 = v98;
  if (v102)
    v137 = v300;
  else
    v137 = v54;
  v231 = v135;
  v138 = v97 + v201;
  v139 = v97 - v201;
  v140 = v125 + v203;
  v141 = v125 - v203;
  v142 = v86 + v206;
  v143 = v86 - v206;
  v144 = v128 + v90;
  v145 = v128 - v90;
  v146 = v130 + ((__int16)v207 >> 1);
  v147 = ((__int16)v130 >> 1) - v207;
  v148 = v132 + ((__int16)v75 >> 1);
  v149 = ((__int16)v132 >> 1) - v75;
  v150 = v134 + ((__int16)v244 >> 1);
  v151 = ((__int16)v134 >> 1) - v244;
  v152 = v136 + ((__int16)v99 >> 1);
  v153 = ((__int16)v136 >> 1) - v99;
  v248 = v139 - v147;
  v264 = v141 + v149;
  v257 = v139 + v147;
  v260 = v141 - v149;
  v301 = v144 + v152;
  v291 = v140 + v148 + ((__int16)(v144 + v152) >> 1);
  v284 = v138 + v146;
  v282 = v142 + v150;
  v299 = v138 + v146 + v142 + v150;
  *a7 = (__int16)(v299 + v291) >> 6;
  v262 = v145 + v153;
  v245 = v143 + v151;
  v274 = v139 + v147 + v143 + v151;
  v276 = v141 + v149 + ((__int16)(v145 + v153) >> 1);
  a7[1] = (__int16)(v274 + v276) >> 6;
  v251 = v143 - v151;
  v254 = v145 - v153;
  v270 = v139 - v147 + v143 - v151;
  v272 = v141 - v149 + ((__int16)(v145 - v153) >> 1);
  a7[2] = (__int16)(v270 + v272) >> 6;
  v234 = v142 - v150;
  v237 = v138 - v146;
  v240 = v144 - v152;
  v266 = v138 - v146 + v142 - v150;
  v268 = v140 - v148 + ((__int16)(v144 - v152) >> 1);
  a7[3] = (__int16)(v266 + v268) >> 6;
  v154 = v131 + ((__int16)v216 >> 1);
  v155 = v133 + ((__int16)v208 >> 1);
  v156 = v135 + ((__int16)v213 >> 1);
  v157 = v137 + (v210 >> 1);
  v158 = v293 + v219;
  v159 = v293 + v219 + v157;
  v160 = v289 + v224 + v155;
  LOWORD(v146) = v296 + v222;
  v161 = v287 + v226 + v154;
  v162 = v296 + v222 + v156;
  v278 = v161 + v162;
  v280 = v160 + (v159 >> 1);
  a7[4] = (__int16)(v161 + v162 + v280) >> 6;
  LOWORD(v147) = v296 - v222;
  LOWORD(v153) = v293 - v219;
  v163 = ((__int16)v131 >> 1) - v216;
  v164 = ((__int16)v133 >> 1) - v208;
  v165 = (v231 >> 1) - v213;
  v166 = (v137 >> 1) - v210;
  v167 = v153 + v166;
  v168 = v289 - v224 + v164;
  LOWORD(v151) = v296 - v222 + v165;
  v294 = v287 - v226 + v163 + v151;
  v297 = v289 - v224 + v164 + ((__int16)(v153 + v166) >> 1);
  a7[5] = (__int16)(v294 + v297) >> 6;
  v169 = v287 - v226 - v163;
  v170 = v289 - v224 - v164;
  LOWORD(v165) = v147 - v165;
  v171 = v153 - v166;
  v172 = v289 + v224 - v155;
  v173 = v158 - v157;
  v174 = v161 - v162;
  LOWORD(v163) = v287 - v226 + v163 - v151;
  LOWORD(v164) = v169 + v165;
  v175 = v169 - v165;
  LOWORD(v151) = v287 + v226 - v154 - (v146 - v156);
  LOWORD(v147) = ((__int16)(v140 + v148) >> 1) - v301;
  v176 = (v264 >> 1) - v262;
  LOWORD(v153) = (v260 >> 1) - v254;
  v177 = ((__int16)(v140 - v148) >> 1) - v240;
  v178 = ((__int16)v160 >> 1) - v159;
  v179 = (v168 >> 1) - v167;
  v180 = v170 + (v171 >> 1);
  v181 = ((__int16)v170 >> 1) - v171;
  LOWORD(v149) = (v172 >> 1) - v173;
  a7[6] = (__int16)(v164 + v180) >> 6;
  a7[7] = (__int16)(v287 + v226 - v154 + v146 - v156 + v172 + (v173 >> 1)) >> 6;
  a7[16] = (__int16)(v284 - v282 + v147) >> 6;
  a7[17] = (__int16)(v257 - v245 + v176) >> 6;
  a7[18] = (__int16)(v248 - v251 + v153) >> 6;
  a7[19] = (__int16)(v237 - v234 + v177) >> 6;
  a7[20] = (__int16)(v174 + v178) >> 6;
  a7[21] = (__int16)(v163 + v179) >> 6;
  a7[22] = (__int16)(v175 + v181) >> 6;
  result = (__int16)(v248 - v251 - v153) >> 6;
  a7[23] = (__int16)(v151 + v149) >> 6;
  a7[32] = (__int16)(v284 - v282 - v147) >> 6;
  a7[33] = (__int16)(v257 - v245 - v176) >> 6;
  a7[34] = result;
  a7[35] = (__int16)(v237 - v234 - v177) >> 6;
  a7[36] = (__int16)(v174 - v178) >> 6;
  a7[37] = (__int16)(v163 - v179) >> 6;
  a7[38] = (__int16)(v175 - v181) >> 6;
  a7[39] = (__int16)(v151 - v149) >> 6;
  a7[48] = (__int16)(v299 - v291) >> 6;
  a7[49] = (__int16)(v274 - v276) >> 6;
  a7[50] = (__int16)(v270 - v272) >> 6;
  a7[51] = (__int16)(v266 - v268) >> 6;
  a7[52] = (__int16)(v278 - v280) >> 6;
  a7[53] = (__int16)(v294 - v297) >> 6;
  a7[54] = (__int16)(v164 - v180) >> 6;
  a7[55] = (__int16)(v287 + v226 - v154 + v146 - v156 - (v172 + (v173 >> 1))) >> 6;
  return result;
}

uint64_t sub_2160AC684(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int i;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char v10;
  int v11;

  if (a2 < 0x10)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    goto LABEL_32;
  }
  v4 = 0;
  LODWORD(v3) = 0;
  v2 = 0;
  for (i = 16; i <= a2; i += 16)
  {
    v6 = *(int8x16_t *)(a1 + v4);
    v7 = vandq_s8(vceqzq_s8(v6), (int8x16_t)xmmword_2160F2980);
    v8 = vpaddq_s8(v7, v7);
    v9 = vpaddq_s8(v8, v8);
    if (!vpaddq_s8(v9, v9).u16[0])
    {
      *(int8x16_t *)(a1 + v3) = v6;
      v3 = (v3 + 16);
      goto LABEL_20;
    }
    if (v6.i8[0])
    {
      v10 = *(_OWORD *)(a1 + v4);
      do
      {
        *(_BYTE *)(a1 + v3) = v10;
        ++v4;
        LODWORD(v3) = v3 + 1;
        v10 = *(_BYTE *)(a1 + v4);
      }
      while (v10);
    }
    *(_BYTE *)(a1 + v3) = 0;
    v3 = (v3 + 1);
    i = v4 + 1;
    v2 = 1;
    if (v4 + 1 < a2)
    {
      while (1)
      {
        v11 = v3;
        if (v2 == 2)
        {
          if (*(_BYTE *)(a1 + i) == 3)
          {
            if (++i >= a2)
            {
              v2 = 2;
              break;
            }
            v2 = 0;
          }
          else
          {
            v2 = 2;
          }
        }
        *(_BYTE *)(a1 + v3) = *(_BYTE *)(a1 + i);
        if (*(unsigned __int8 *)(a1 + i++))
        {
          v2 = 0;
LABEL_19:
          v3 = (v11 + 1);
          break;
        }
        ++v2;
        v3 = (v3 + 1);
        if (i >= a2)
          goto LABEL_19;
      }
    }
LABEL_20:
    v4 = i;
  }
LABEL_32:
  while (v4 < a2)
  {
    if (v2 == 2)
    {
      if (*(_BYTE *)(a1 + v4) == 3)
      {
        if (++v4 >= a2)
          break;
        v2 = 0;
      }
      else
      {
        v2 = 2;
      }
    }
    *(_BYTE *)(a1 + v3) = *(_BYTE *)(a1 + v4);
    if (*(_BYTE *)(a1 + v4))
      v2 = 0;
    else
      ++v2;
    v3 = (v3 + 1);
    ++v4;
  }
  if (v3 < a2)
    bzero((void *)(a1 + v3), ~(_DWORD)v3 + a2);
  return v3;
}

uint64_t sub_2160AC81C(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  unsigned __int8 *v5;

  v3 = 4294958327;
  if (a1 && a3)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 16) = a1;
    *(_DWORD *)(a3 + 32) = bswap32(*a1);
    *(_BYTE *)(a3 + 36) = 0;
    v4 = (char *)a1 + a2;
    *(_QWORD *)(a3 + 24) = v4;
    *(_DWORD *)(a3 + 8) = a2;
    *(_DWORD *)(a3 + 12) = a2;
    if (!*(v4 - 1))
    {
      v5 = (unsigned __int8 *)a1 + a2 - 2;
      while (a2)
      {
        *(_DWORD *)(a3 + 12) = --a2;
        if (*v5--)
          goto LABEL_7;
      }
      return 4294958327;
    }
LABEL_7:
    if (!a2)
      return 4294958327;
    return 0;
  }
  return v3;
}

BOOL sub_2160AC88C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v4;
  int v5;
  int v6;
  BOOL v7;

  v1 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 12) - 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < v1)
    return 1;
  if (v2 != v1)
    return 0;
  v4 = *(_BYTE *)(a1 + 36);
  v5 = *(_DWORD *)(a1 + 32) >> (v4 + 24);
  v6 = 1 << (7 - v4);
  if (v5)
    v7 = v5 == v6;
  else
    v7 = 1;
  return !v7;
}

uint64_t sub_2160AC8EC(unsigned int *a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned __int8 *i;
  uint64_t result;

  v3 = *a1;
  *a3 = 0;
  if ((int)v3 < 1)
    return 4294958327;
  for (i = (unsigned __int8 *)a1 + 27; *i != a2; i += 1880)
  {
    if (!--v3)
      return 4294958327;
  }
  result = 0;
  *a3 = i - 15;
  return result;
}

uint64_t sub_2160AC930(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 4);
  if ((int)v3 < 1)
    return 4294958327;
  v4 = (_DWORD *)(a1 + 60176);
  do
  {
    if (*v4 == a2)
    {
      result = 0;
      *a3 = v4;
      return result;
    }
    v4 += 84;
    --v3;
  }
  while (v3);
  if (*a3)
    return 0;
  else
    return 4294958327;
}

uint64_t sub_2160AC984(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;

  if (!a2)
    return 4294958327;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    v5 = a2 + 216;
    v6 = *(unsigned int *)(a2 + 12);
    v7 = (uint64_t *)(a2 + 216);
    do
    {
      v8 = *v7;
      if (!*v7)
        return 4294958327;
      if (a1 || *(_BYTE *)(v8 + 1377) && !*(_BYTE *)(v8 + 1372))
      {
        v9 = *(void **)(v8 + 7264);
        if (v9)
        {
          j__free(v9);
          *(_QWORD *)(v8 + 7264) = 0;
        }
        *(_BYTE *)(v8 + 2) = 0;
        *v7 = 0;
      }
      ++v7;
      --v6;
    }
    while (v6);
    v11 = 0;
    v12 = (_QWORD *)(a2 + 216);
    do
    {
      if (*v12)
        *(_QWORD *)(v5 + 8 * v11++) = *v12;
      ++v12;
      --v3;
    }
    while (v3);
  }
  else
  {
    v11 = 0;
  }
  result = 0;
  *(_DWORD *)(a2 + 12) = v11;
  return result;
}

uint64_t sub_2160ACA60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t result;

  if (!a1)
    return 4294958327;
  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v3 = a1 + 216;
    v4 = *(unsigned int *)(a1 + 12);
    v5 = (uint64_t *)(a1 + 216);
    do
    {
      v6 = *v5;
      if (!*v5)
        return 4294958327;
      if (!*(_BYTE *)(v6 + 1372))
      {
        v7 = *(void **)(v6 + 7264);
        if (v7)
        {
          j__free(v7);
          *(_QWORD *)(v6 + 7264) = 0;
        }
        *(_BYTE *)(v6 + 2) = 0;
        *v5 = 0;
      }
      ++v5;
      --v4;
    }
    while (v4);
    v8 = 0;
    v9 = (_QWORD *)(a1 + 216);
    do
    {
      if (*v9)
        *(_QWORD *)(v3 + 8 * v8++) = *v9;
      ++v9;
      --v2;
    }
    while (v2);
  }
  else
  {
    v8 = 0;
  }
  result = 0;
  *(_DWORD *)(a1 + 12) = v8;
  return result;
}

uint64_t sub_2160ACB1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  unint64_t v7;

  v2 = 0;
  v3 = a1 + 232;
  do
  {
    v4 = a1 + 760 * v2;
    v6 = *(_DWORD *)(v4 + 28);
    v5 = (unsigned int *)(v4 + 28);
    if (v6 && v5 - 3 != *(unsigned int **)(a1 + 22816))
    {
      v7 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(v3 + 8 * v7++) + 1372) = 0;
      while (v7 < *v5);
      sub_2160AC984(0, (uint64_t)(v5 - 3));
    }
    ++v2;
    v3 += 760;
  }
  while (v2 != 30);
  return 0;
}

uint64_t sub_2160ACBA0(int a1, uint64_t a2, int a3, int a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a3 & 0xFFFFFFFD;
  v8 = *(_QWORD *)(a2 + 22816);
  if ((a3 & 0xFFFFFFFD) != 1)
  {
    if (!a1 && v8)
      return 0;
    goto LABEL_8;
  }
  if (!v8)
  {
    v10 = a2 + 16;
    goto LABEL_17;
  }
  result = 0;
  if (a1 && !a4)
  {
LABEL_8:
    v10 = a2 + 16;
    if (v8)
      v11 = v8 == a2 + 22056;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = a2 + 776;
      v13 = 29;
      while (v12 - 760 != v8)
      {
        v12 += 760;
        if (!--v13)
        {
          *(_QWORD *)(a2 + 22816) = 0;
          return 4294958327;
        }
      }
LABEL_18:
      *(_QWORD *)(a2 + 22816) = v12;
      v14 = *(_QWORD *)(a2 + 22824);
      if (v12 == v14)
      {
        v14 = sub_2160ACCB4(v10, v12, v12);
        *(_QWORD *)(a2 + 22824) = v14;
        if (!a4)
          goto LABEL_25;
      }
      else if (!a4)
      {
        goto LABEL_25;
      }
      if (v7 == 1)
      {
        if (!v14)
        {
LABEL_26:
          result = 0;
          *(_QWORD *)(a2 + 22824) = *(_QWORD *)(a2 + 22816);
          return result;
        }
        return 0;
      }
LABEL_25:
      *(_DWORD *)(v12 + 208) = 0;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0xFFFFFFFFLL;
      if (!*(_QWORD *)(a2 + 22824))
        goto LABEL_26;
      return 0;
    }
LABEL_17:
    v12 = v10;
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_2160ACCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = 0;
  v4 = a2;
  while (1)
  {
    v5 = a1;
    if (v4)
    {
      v5 = a1;
      if (v4 != a1 + 22040)
      {
        v6 = 29;
        v7 = a1;
        while (v7 != v4)
        {
          v7 += 760;
          if (!--v6)
            goto LABEL_15;
        }
        v5 = v7 + 760;
      }
    }
    if (v5)
      break;
LABEL_15:
    v4 = 0;
LABEL_16:
    if (v4 != a2 && v4 != a3 && ++v3 != 30)
      continue;
    return v4;
  }
  v8 = *(unsigned int *)(v5 + 12);
  if (!(_DWORD)v8)
  {
LABEL_14:
    v4 = v5;
    goto LABEL_16;
  }
  v9 = 0;
  v10 = 8 * v8;
  while (*(_BYTE *)(*(_QWORD *)(v5 + v9 + 216) + 1377))
  {
    v9 += 8;
    if (v10 == v9)
      goto LABEL_14;
  }
  return v5;
}

uint64_t sub_2160ACD64(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t i;
  uint64_t v22;
  int v23;
  int v24;
  int v25;

  v3 = a1 + 5039776;
  v4 = a1 + 5016976;
  v5 = *(_QWORD *)(a1 + 5039776);
  v6 = sub_2160ACCB4(a1 + 5016976, v5, v5);
  if (!*(_DWORD *)(v3 + 2032))
    return 4294954945;
  v7 = v6;
  if (!v6)
    return 4294954944;
  if (!v5)
    return 4294954943;
  while (1)
  {
    if (v7 == v5)
    {
      v20 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v20)
      {
        for (i = 0; i < v20; ++i)
        {
          v22 = *(_QWORD *)(v5 + 216 + 8 * i);
          v23 = *(_DWORD *)(v22 + 1264);
          v24 = a2 - v23;
          v15 = __OFSUB__(v23, a2);
          v25 = v23 - a2;
          if ((v25 < 0) ^ v15 | (v25 == 0))
            v25 = v24;
          if (v25 >= 41)
          {
            *(_BYTE *)(v22 + 1377) = 1;
            v20 = *(unsigned int *)(v5 + 12);
          }
        }
      }
      return 0;
    }
    if (!*(_DWORD *)(v7 + 12))
      goto LABEL_18;
    v8 = 0;
    v9 = v7 + 216;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v9 + 8 * v8++) + 1372) = 0;
      v10 = *(unsigned int *)(v7 + 12);
    }
    while (v8 < v10);
    if (!*(_DWORD *)(v7 + 12))
      goto LABEL_18;
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v9 + 8 * v11);
      v13 = *(_DWORD *)(v12 + 1264);
      v14 = a2 - v13;
      v15 = __OFSUB__(v13, a2);
      v16 = v13 - a2;
      if ((v16 < 0) ^ v15 | (v16 == 0))
        v16 = v14;
      if (v16 >= 41)
      {
        *(_BYTE *)(v12 + 1377) = 1;
        v10 = *(unsigned int *)(v7 + 12);
      }
      ++v11;
    }
    while (v11 < v10);
    if (v10 == 1)
      v17 = 1;
    else
LABEL_18:
      v17 = 0;
    sub_2160AC984(v17, v7);
    v18 = sub_2160ACCB4(v4, v7, v5);
    if (!v18)
      return 4294954942;
    v7 = v18;
    if (v18 == v5)
      return 0;
  }
}

uint64_t sub_2160ACEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v9;

  v1 = *(_QWORD *)(a1 + 5039784);
  v2 = *(unsigned int *)(v1 + 12);
  if ((int)v2 < 1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0x7FFFFFFF;
  v6 = -1;
  while (1)
  {
    v7 = *(_QWORD *)(v1 + 8 * v3 + 216);
    if (!v7)
      break;
    if (!*(_BYTE *)(v7 + 1377) && !*(_BYTE *)(v7 + 36) && (!*(_BYTE *)(v7 + 1362) || *(_BYTE *)(v7 + 34)))
    {
      if (*(_DWORD *)(v7 + 1280) < v5)
      {
        v5 = *(_DWORD *)(v7 + 1280);
        v6 = v3;
      }
      if (*(_BYTE *)(v7 + 4) && *(_BYTE *)(v7 + 1376))
        ++v4;
    }
    if (v2 == ++v3)
    {
      if (v1 != *(_QWORD *)(a1 + 5039776) && v4 != 0)
        return 9999999;
      break;
    }
  }
  if (v6 == -1)
    return 0;
  v9 = v2 - v6;
  if ((int)v9 >= (int)v4)
    return v4;
  else
    return v9;
}

uint64_t sub_2160ACF9C(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = -2147483647;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if ((*(_BYTE *)(v6 + 1376) || *(_BYTE *)(v6 + 1380)) && *(_BYTE *)(v6 + 1372) && !*(_BYTE *)(v6 + 34))
    {
      v7 = *(_DWORD *)(v6 + 1280);
      if (v7 < a1 && v7 > v4)
      {
        v4 = v7;
        v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v5);
}

uint64_t sub_2160AD020(int8x16_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int8x16_t *a9, int a10)
{
  uint64_t *v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int32x2_t *v35;
  int32x2_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int32x2_t *v44;
  __int32 v45;
  __int32 v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int32x2_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  int v81;
  __int8 *v82;
  int v83;
  uint64_t v84;
  __int8 *v85;
  uint64_t v86;
  int32x2_t *v87;
  __int8 *v88;
  uint64_t i;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  _BOOL4 v96;
  int v97;
  int v98;
  int v99;

  v14 = (uint64_t *)a9;
  v15 = *(unsigned int *)(a4 + 12);
  if (a9)
    v16 = a9;
  else
    v16 = a1;
  v17 = a4 + 216;
  bzero(v16, 0x220uLL);
  if (a2 != 6 && a2 != 1)
  {
    if (*(_BYTE *)(a3 + 1362))
    {
      switch(a2)
      {
        case 0:
        case 5:
          goto LABEL_15;
        case 2:
        case 7:
          goto LABEL_13;
        default:
          goto LABEL_14;
      }
    }
    switch(a2)
    {
      case 0:
      case 5:
        break;
      case 2:
      case 7:
        if (*(_BYTE *)(a3 + 1371))
          goto LABEL_14;
        break;
      default:
        goto LABEL_14;
    }
    v93 = a8;
    v47 = a7;
    v20 = 0;
    if ((int)v15 >= 1)
    {
      v48 = 0;
      v49 = *(_DWORD *)(a3 + 1292);
      do
      {
        if (a10 == 1)
        {
          v50 = 0;
          v51 = -2147483647;
          v52 = -1;
          do
          {
            v53 = *(_QWORD *)(v17 + 8 * v50);
            if (!v53)
              break;
            if ((*(_BYTE *)(v53 + 1380) || *(_BYTE *)(v53 + 1376))
              && !*(_BYTE *)(v53 + 34)
              && *(_BYTE *)(v53 + 1372)
              && !*(_BYTE *)(v53 + 1364)
              && *(_DWORD *)(v53 + 1292) < v49
              && *(_DWORD *)(v53 + 1292) > v51)
            {
              v51 = *(_DWORD *)(v53 + 1292);
              v52 = v50;
            }
            ++v50;
          }
          while (v15 != v50);
        }
        else
        {
          v54 = 0;
          v51 = -2147483647;
          v52 = -1;
          do
          {
            v55 = *(_QWORD *)(v17 + 8 * v54);
            if (!v55)
              break;
            if (*(_BYTE *)(v55 + 1376))
            {
              if (!*(_BYTE *)(v55 + 34))
              {
                if (*(_BYTE *)(v55 + 1372))
                {
                  if (!*(_BYTE *)(v55 + 1364))
                  {
                    v56 = *(_DWORD *)(v55 + 1292);
                    if (v56 < v49 && v56 > v51)
                    {
                      v51 = v56;
                      v52 = v54;
                    }
                  }
                }
              }
            }
            ++v54;
          }
          while (v15 != v54);
        }
        v49 = v51;
        if (v52 == -1)
          break;
        v57 = *(int32x2_t **)(v17 + 8 * v52);
        if (!v57)
          break;
        if (!v57[4].i8[1] || *(_QWORD *)&v57[169])
        {
          if (sub_2160ADA70(v57))
            return 4294958327;
          if (v20 <= 33)
            v16->i64[v20++] = (uint64_t)v57;
        }
        ++v48;
      }
      while (v48 != (_DWORD)v15);
    }
    v58 = -1000;
    a7 = v47;
    a8 = v93;
    while (1)
    {
      v59 = sub_2160ADD20(v58, v15, v17);
      if (!v59)
        break;
      v60 = v59;
      v58 = *(_DWORD *)(v59 + 1300);
      if ((!*(_BYTE *)(v60 + 33) || *(_QWORD *)(v60 + 1352)) && v20 <= 33)
      {
        v16->i64[v20] = v60;
        *(_BYTE *)(v60 + 1362) = 0;
        *(_BYTE *)(v60 + 32) = 0;
        ++v20;
      }
    }
    v16[51].i32[0] = v20;
    v16[51].i32[2] = v20;
    v16[51].i32[1] = 0;
    v16[51].i32[3] = 0;
    goto LABEL_202;
  }
  if (!*(_BYTE *)(a3 + 1362))
  {
    v92 = a8;
    v90 = a7;
    if ((int)v15 < 1)
    {
      v80 = 0;
    }
    else
    {
      v29 = 0;
      v30 = a3;
      v31 = 0;
      v32 = 0;
      v33 = *(_DWORD *)(v30 + 1280);
      v34 = v33;
      do
      {
        v35 = (int32x2_t *)sub_2160ACF9C(v33, v15, v17);
        if (v35)
        {
          v36 = v35;
          if (!v35[170].i8[4])
          {
            if (v35[4].i8[1] && !*(_QWORD *)&v35[169])
            {
              v33 = v35[160].i32[0];
            }
            else
            {
              if (v31 <= 33)
              {
                v16->i64[v31] = (uint64_t)v35;
                if (v33 >= v35[160].i32[0])
                  v33 = v35[160].i32[0];
                ++v31;
              }
              if (sub_2160ADA70(v35))
                return 4294958327;
              if (v33 >= v36[160].i32[0])
                v33 = v36[160].i32[0];
            }
          }
        }
        v37 = 0;
        v38 = 0x7FFFFFFF;
        v39 = -1;
        do
        {
          v40 = *(_QWORD *)(v17 + 8 * v37);
          if (!v40)
            goto LABEL_59;
          if (*(_BYTE *)(v40 + 1376) || *(_BYTE *)(v40 + 1380))
          {
            if (*(_BYTE *)(v40 + 1372))
            {
              v41 = *(_DWORD *)(v40 + 1280);
              if (v41 > v34 && !*(_BYTE *)(v40 + 34) && (v39 == -1 || v41 < v38))
              {
                v38 = v41;
                v39 = v37;
              }
            }
          }
          ++v37;
        }
        while (v15 != v37);
        if (v39 != -1)
        {
LABEL_59:
          v44 = *(int32x2_t **)(v17 + 8 * v39);
          if (v44 && !v44[170].i8[4])
          {
            if (v44[4].i8[1] && !*(_QWORD *)&v44[169])
            {
              v34 = v44[160].i32[0];
            }
            else
            {
              if (v29 <= 33)
              {
                v16[17].i64[v29] = (uint64_t)v44;
                if (v34 <= v44[160].i32[0])
                  v34 = v44[160].i32[0];
                ++v29;
              }
              if (sub_2160ADA70(v44))
                return 4294958327;
              v45 = v44[160].i32[1];
              v46 = v44[161].i32[0];
              if (v45 <= v46)
              {
                if (v34 <= v46)
                  v34 = v44[161].i32[0];
              }
              else if (v34 <= v45)
              {
                v34 = v44[160].i32[1];
              }
            }
          }
        }
        ++v32;
      }
      while (v32 != (_DWORD)v15);
      v80 = v31;
      if (v29 >= 1)
      {
        v81 = 0;
        v80 = v31;
        do
        {
          if (v80 <= 33)
          {
            v82 = &v16->i8[8 * v81++];
            v16->i64[v80++] = *((_QWORD *)v82 + 34);
          }
        }
        while (v81 < v29);
      }
      if (v31 >= 1)
      {
        v83 = 0;
        do
        {
          if (v29 <= 33)
          {
            v84 = v16->i64[v83++];
            v85 = &v16->i8[8 * v29++];
            *((_QWORD *)v85 + 34) = v84;
          }
        }
        while (v83 < v31);
      }
      if (v29 != v80)
        return 4294958327;
    }
    v86 = sub_2160ADD20(-1000, v15, v17);
    if (!v86)
    {
      v20 = v80;
LABEL_195:
      if (v20 >= 2)
      {
        for (i = 0; i != v20; ++i)
        {
          if (v16->i64[i] != v16[17].i64[i])
            goto LABEL_200;
        }
        v16[17] = vextq_s8(*v16, *v16, 8uLL);
      }
LABEL_200:
      v16[51].i32[0] = v20;
      v16[51].i32[2] = v20;
      v16[51].i32[1] = v80;
      v16[51].i32[3] = v80;
      a7 = v90;
LABEL_201:
      a8 = v92;
      goto LABEL_202;
    }
    v87 = (int32x2_t *)v86;
    v20 = v80;
    while (1)
    {
      if (!v87[4].i8[1] || *(_QWORD *)&v87[169])
      {
        if (v20 <= 33)
          v16->i64[v20++] = (uint64_t)v87;
        if (v80 <= 33)
        {
          v88 = &v16->i8[8 * v80++];
          *((_QWORD *)v88 + 34) = v87;
        }
        if (sub_2160ADA70(v87))
          return 4294958327;
      }
      v87 = (int32x2_t *)sub_2160ADD20(v87[162].i32[1], v15, v17);
      if (!v87)
        goto LABEL_195;
    }
  }
  if (((1 << a2) & 0x21) != 0)
  {
LABEL_15:
    v92 = a8;
    v19 = a7;
    v20 = 0;
    v99 = *(_DWORD *)(a3 + 1292);
    v98 = v99 + 1;
    v21 = *(unsigned __int8 *)(a3 + 37);
    v22 = *(_BYTE *)(a3 + 37) == 0;
    v23 = 1;
    v24 = 1;
    while (1)
    {
      if (v24)
      {
        v25 = sub_2160AE218(v21, &v99, v15, v17);
        v26 = v25;
        if (v25 && v20 <= 33)
        {
          v16->i64[v20] = v25;
          v16[34].i32[v20] = v21;
          sub_2160ADECC(v25);
          ++v20;
        }
        if (v23)
        {
LABEL_21:
          v27 = sub_2160AE218(v22, &v98, v15, v17);
          v28 = v27;
          if (v27 && v20 <= 33)
          {
            v16->i64[v20] = v27;
            v16[34].i32[v20] = v22;
            sub_2160ADECC(v27);
            ++v20;
          }
          goto LABEL_26;
        }
      }
      else
      {
        v26 = 0;
        if (v23)
          goto LABEL_21;
      }
      v28 = 0;
LABEL_26:
      v24 = v26 != 0;
      v23 = v28 != 0;
      if (!(v26 | v28))
      {
        v16[51].i32[0] = v20;
        v16[51].i32[2] = v20;
        v16[51].i32[1] = 0;
        v16[51].i32[3] = 0;
        a7 = v19;
        v14 = (uint64_t *)a9;
        goto LABEL_201;
      }
    }
  }
  if (((1 << a2) & 0x42) == 0)
  {
    if (((1 << a2) & 0x84) == 0)
      goto LABEL_14;
LABEL_13:
    if (*(_BYTE *)(a3 + 1371))
    {
LABEL_14:
      result = 0;
      v16[51] = 0u;
      goto LABEL_205;
    }
    goto LABEL_15;
  }
  v91 = a7;
  v94 = a8;
  v61 = 0;
  v62 = 0;
  v20 = 0;
  v97 = *(unsigned __int8 *)(a3 + 37);
  v96 = v97 == 0;
  v99 = *(_DWORD *)(a3 + 1280);
  v98 = v99 + 1;
  v63 = a3;
  v64 = a3;
  do
  {
    if (v62)
    {
      if (!v64)
      {
        v65 = 0;
        goto LABEL_129;
      }
      goto LABEL_125;
    }
    v66 = sub_2160ADD9C(v97, &v99, v15, v17, a3);
    if (!v66)
    {
      v99 = *(_DWORD *)(a3 + 1280);
      v62 = 1;
LABEL_125:
      v64 = sub_2160ADE34(v97, &v99, v15, v17);
      goto LABEL_126;
    }
    v64 = v66;
    v62 = 0;
LABEL_126:
    v65 = v64 != 0;
    if (v64 && v20 <= 33)
    {
      v16->i64[v20] = v64;
      v16[34].i32[v20] = v97;
      sub_2160ADECC(v64);
      ++v20;
      v65 = 1;
    }
LABEL_129:
    if (v61)
    {
      if (!v63)
      {
        v67 = 0;
        continue;
      }
      goto LABEL_135;
    }
    v68 = sub_2160ADD9C(v96, &v98, v15, v17, a3);
    if (!v68)
    {
      v98 = *(_DWORD *)(a3 + 1280);
      v61 = 1;
LABEL_135:
      v63 = sub_2160ADE34(v96, &v98, v15, v17);
      goto LABEL_136;
    }
    v63 = v68;
    v61 = 0;
LABEL_136:
    v67 = v63 != 0;
    if (v63 && v20 <= 33)
    {
      v16->i64[v20] = v63;
      v16[34].i32[v20] = v96;
      sub_2160ADECC(v63);
      ++v20;
      v67 = 1;
    }
  }
  while (v65 || v67);
  v69 = a3;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v98 = *(_DWORD *)(v69 + 1280);
  v99 = v98;
  v73 = v69;
  v95 = v69;
  do
  {
    if (v71)
    {
      if (!v69)
      {
        v74 = 0;
        goto LABEL_151;
      }
      goto LABEL_147;
    }
    v75 = sub_2160ADE34(v97, &v99, v15, v17);
    if (!v75)
    {
      v99 = *(_DWORD *)(v95 + 1280);
      v71 = 1;
LABEL_147:
      v69 = sub_2160ADD9C(v97, &v99, v15, v17, v95);
      goto LABEL_148;
    }
    v69 = v75;
    v71 = 0;
LABEL_148:
    v74 = v69 != 0;
    if (v69 && v72 <= 33)
    {
      v16[17].i64[v72] = v69;
      v16[42].i32[v72 + 2] = v97;
      sub_2160ADECC(v69);
      ++v72;
      v74 = 1;
    }
LABEL_151:
    if (v70)
    {
      if (!v73)
      {
        v76 = 0;
        continue;
      }
      goto LABEL_157;
    }
    v77 = sub_2160ADE34(v96, &v98, v15, v17);
    if (!v77)
    {
      v98 = *(_DWORD *)(v95 + 1280) + 1;
      v70 = 1;
LABEL_157:
      v73 = sub_2160ADD9C(v96, &v98, v15, v17, v95);
      goto LABEL_158;
    }
    v73 = v77;
    v70 = 0;
LABEL_158:
    v76 = v73 != 0;
    if (v73 && v72 <= 33)
    {
      v16[17].i64[v72] = v73;
      v16[42].i32[v72 + 2] = v96;
      sub_2160ADECC(v73);
      ++v72;
      v76 = 1;
    }
  }
  while (v74 || v76);
  v14 = (uint64_t *)a9;
  if (v20 >= 2)
  {
    v78 = 0;
    v79 = (uint64_t *)v16;
    while (*v79 == v79[34] && v16[34].i32[v78] == v16[42].i32[v78 + 2])
    {
      ++v79;
      if (v20 == ++v78)
      {
        v16[17] = vextq_s8(*v16, *v16, 8uLL);
        v16[42].i32[3] = v16[34].i32[0];
        v16[42].i32[2] = v16[34].i32[1];
        break;
      }
    }
  }
  v16[51].i32[0] = v20;
  v16[51].i32[2] = v20;
  v16[51].i32[1] = v72;
  v16[51].i32[3] = v72;
  a7 = v91;
  a8 = v94;
LABEL_202:
  result = 0;
  if (v14 && v20 >= 1)
    result = sub_2160AE2B0(v14);
LABEL_205:
  if (a7 >= 1 && v16[51].i32[2] >= a7)
    v16[51].i32[2] = a7;
  if (a8 >= 1 && v16[51].i32[3] >= a8)
    v16[51].i32[3] = a8;
  return result;
}

uint64_t sub_2160ADA70(int32x2_t *a1)
{
  uint64_t v2;
  __int32 v3;
  unsigned int v4;
  int32x2_t v5;
  int32x2_t v6;
  __int32 v7;
  __int32 v8;
  uint64_t result;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  __int32 v14;
  int v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  if (!a1[170].i8[2])
    return 0;
  a1[4].i8[0] = 0;
  v2 = (uint64_t)&a1[4];
  *(_BYTE *)(v2 + 1330) = 0;
  *(_BYTE *)(v2 + 5) = 0;
  v3 = *(_DWORD *)(v2 + 104);
  if (*(_BYTE *)(v2 + 1))
  {
    v3 *= 2;
    v4 = 2 * a1[17].i32[1];
    v5 = vadd_s32(a1[19], a1[19]);
  }
  else
  {
    v4 = a1[17].u32[1];
    v5 = a1[19];
  }
  a1[16].i32[0] = v3;
  a1[16].i32[1] = v4;
  a1[18] = v5;
  v6 = a1[169];
  if (!*(_QWORD *)&v6)
    return 4294958327;
  if (a1[4].i8[6])
  {
    v7 = *(_DWORD *)(*(_QWORD *)&v6 + 1284);
    a1[160].i32[1] = v7;
    v8 = a1[161].i32[0];
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)&v6 + 1288);
    a1[161].i32[0] = v8;
    v7 = a1[160].i32[1];
  }
  if (v8 < v7)
    v7 = v8;
  a1[160].i32[0] = v7;
  a1[75] = vadd_s32(vdup_n_s32(v4), (int32x2_t)0xFFFFFFFF00000002);
  v10 = a1[52];
  if (v10)
  {
    *(_DWORD *)(*(_QWORD *)&v10 + 72) = 1;
    *(_QWORD *)(*(_QWORD *)&v10 + 64) = 0x100000001;
    *(_OWORD *)(*(_QWORD *)&v10 + 128) = xmmword_2160EF0C0;
  }
  v11 = a1[53];
  if (v11)
  {
    *(_DWORD *)(*(_QWORD *)&v11 + 72) = 1;
    *(_QWORD *)(*(_QWORD *)&v11 + 64) = 0x100000001;
    *(_OWORD *)(*(_QWORD *)&v11 + 128) = xmmword_2160EF0C0;
  }
  v12 = a1[54];
  if (v12)
  {
    *(_DWORD *)(*(_QWORD *)&v12 + 72) = 1;
    *(_QWORD *)(*(_QWORD *)&v12 + 64) = 0x100000001;
    *(_OWORD *)(*(_QWORD *)&v12 + 128) = xmmword_2160EF0C0;
  }
  sub_215FE4E70(v2, a1[23].i32[0]);
  if (a1->i8[3])
    return 0;
  result = 0;
  v13 = a1[21].i32[0];
  if ((_DWORD)v13)
  {
    v14 = a1[23].i32[0];
    if (v14)
    {
      v15 = 0;
      v17 = a1[8];
      v16 = a1[9];
      v18 = a1[22].i32[1];
      v19 = a1[16].i32[1];
      v20 = a1[18].i32[1];
      v21 = a1[20].i32[1];
      v22 = *(_QWORD *)&v17 - 32;
      v23 = 2 * v13;
      v24 = v21 + 48;
      do
      {
        if ((int)v21 >= -63)
        {
          v25 = 0;
          do
          {
            v26 = *(_OWORD *)(v22 + v25);
            *(_OWORD *)(v22 - v13 + v25) = v26;
            *(_OWORD *)(v22 - 2 * v13 + v25) = v26;
            v27 = v25 < v24;
            v25 += 16;
          }
          while (v27);
        }
        v22 -= 2 * v13;
        ++v15;
      }
      while (v15 != 10);
      v28 = 0;
      v29 = (v19 - 1) * v13;
      v30 = *(_QWORD *)&v17 + v29 - 32;
      v31 = v13 + *(_QWORD *)&v17 + v29 - 32;
      v32 = v29 + v23 + *(_QWORD *)&v17 - 32;
      do
      {
        if ((int)v21 >= -63)
        {
          v33 = 0;
          do
          {
            v34 = *(_OWORD *)(v30 + v33);
            *(_OWORD *)(v31 + v33) = v34;
            *(_OWORD *)(v32 + v33) = v34;
            v27 = v33 < v24;
            v33 += 16;
          }
          while (v27);
        }
        v30 += v23;
        ++v28;
        v31 += v23;
        v32 += v23;
      }
      while (v28 != 10);
      v35 = 0;
      v36 = *(_QWORD *)&v16 - 16;
      v37 = v18 + 16;
      do
      {
        if ((int)v18 >= -31)
        {
          v38 = 0;
          do
          {
            *(_OWORD *)(v36 - v14 + v38) = *(_OWORD *)(v36 + v38);
            v27 = v38 < v37;
            v38 += 16;
          }
          while (v27);
        }
        v36 -= v14;
        ++v35;
      }
      while (v35 != 8);
      v39 = 0;
      v40 = *(_QWORD *)&v16 + (v20 - 1) * v14 - 16;
      do
      {
        if ((int)v18 >= -31)
        {
          v41 = 0;
          do
          {
            *(_OWORD *)(v40 + v14 + v41) = *(_OWORD *)(v40 + v41);
            v27 = v41 < v37;
            v41 += 16;
          }
          while (v27);
        }
        v40 += v14;
        ++v39;
      }
      while (v39 != 8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_2160ADD20(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = -1;
  v5 = 0x7FFFFFFF;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 1376) && *(_BYTE *)(v6 + 1372) && *(_BYTE *)(v6 + 1364))
    {
      v7 = *(_DWORD *)(v6 + 1300);
      if (v7 > a1 && v7 < v5)
      {
        v4 = v3;
        v5 = v7;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v4 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v4);
}

uint64_t sub_2160ADD9C(int a1, int *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;

  if (a3 < 1)
    goto LABEL_16;
  v5 = 0;
  v6 = -2147483647;
  v7 = -1;
  do
  {
    v8 = *(_QWORD *)(a4 + 8 * v5);
    if (!v8)
      break;
    if (v8 != a5 && *(_BYTE *)(v8 + 1372))
    {
      if (*(_BYTE *)(v8 + 1364))
        v9 = 0;
      else
        v9 = *(unsigned __int8 *)(v8 + 37) == a1;
      if (v9)
      {
        v10 = *(_DWORD *)(v8 + 1280);
        if (v10 < *a2 && v10 > v6)
        {
          v6 = v10;
          v7 = v5;
        }
      }
    }
    ++v5;
  }
  while (a3 != v5);
  if (v7 == -1)
  {
LABEL_16:
    result = 0;
    *a2 = -2147483647;
  }
  else
  {
    *a2 = v6;
    return *(_QWORD *)(a4 + 8 * v7);
  }
  return result;
}

uint64_t sub_2160ADE34(int a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t result;

  if (a3 < 1)
    goto LABEL_16;
  v4 = 0;
  v5 = 0x7FFFFFFF;
  v6 = -1;
  do
  {
    v7 = *(_QWORD *)(a4 + 8 * v4);
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 1376) && *(_BYTE *)(v7 + 1372))
    {
      if (*(_BYTE *)(v7 + 1364))
        v8 = 0;
      else
        v8 = *(unsigned __int8 *)(v7 + 37) == a1;
      if (v8)
      {
        v9 = *(_DWORD *)(v7 + 1280);
        if (v9 > *a2 && v9 < v5)
        {
          v5 = v9;
          v6 = v4;
        }
      }
    }
    ++v4;
  }
  while (a3 != v4);
  if (v6 == -1)
  {
LABEL_16:
    result = 0;
    *a2 = 0x7FFFFFFF;
  }
  else
  {
    *a2 = v5;
    return *(_QWORD *)(a4 + 8 * v6);
  }
  return result;
}

uint64_t sub_2160ADECC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (*(_BYTE *)(result + 1362))
    return result;
  v1 = result;
  *(_BYTE *)(result + 32) = 1;
  v2 = result + 32;
  *(_BYTE *)(v2 + 1330) = 1;
  v3 = *(_DWORD *)(v2 + 104);
  if (!*(_BYTE *)(v2 + 1))
  {
    v4 = *(_DWORD *)(v1 + 140) >> 1;
    *(_DWORD *)(v1 + 128) = v3 >> 1;
    *(_DWORD *)(v1 + 132) = v4;
    *(uint32x2_t *)(v1 + 144) = vshr_n_u32(*(uint32x2_t *)(v1 + 152), 1uLL);
    if (*(_BYTE *)(v1 + 38))
      goto LABEL_6;
LABEL_8:
    v5 = (_DWORD *)(v1 + 1284);
    goto LABEL_9;
  }
  v4 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v1 + 128) = v3;
  *(_DWORD *)(v1 + 132) = v4;
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 152);
  if (!*(_BYTE *)(v1 + 38))
  {
    *(_DWORD *)(v1 + 1288) = 0x7FFFFFFF;
    goto LABEL_8;
  }
  *(_DWORD *)(v1 + 1284) = 0x7FFFFFFF;
LABEL_6:
  v5 = (_DWORD *)(v1 + 1288);
LABEL_9:
  *(_DWORD *)(v1 + 1280) = *v5;
  *(int32x2_t *)(v1 + 600) = vadd_s32(vdup_n_s32(v4), (int32x2_t)0xFFFFFFFF00000002);
  v6 = *(_QWORD *)(v1 + 416);
  if (v6)
  {
    *(_DWORD *)(v6 + 72) = 1;
    *(_QWORD *)(v6 + 64) = 0x100000001;
    *(_OWORD *)(v6 + 128) = xmmword_2160EF0C0;
  }
  v7 = *(_QWORD *)(v1 + 424);
  if (v7)
  {
    *(_DWORD *)(v7 + 72) = 1;
    *(_QWORD *)(v7 + 64) = 0x100000001;
    *(_OWORD *)(v7 + 128) = xmmword_2160EF0C0;
  }
  v8 = *(_QWORD *)(v1 + 432);
  if (v8)
  {
    *(_DWORD *)(v8 + 72) = 1;
    *(_QWORD *)(v8 + 64) = 0x100000001;
    *(_OWORD *)(v8 + 128) = xmmword_2160EF0C0;
  }
  result = sub_215FE4E70(v2, *(_DWORD *)(v1 + 184));
  if (!*(_BYTE *)(v1 + 3))
  {
    v9 = *(int *)(v1 + 168);
    if ((_DWORD)v9)
    {
      v10 = *(_DWORD *)(v1 + 184);
      if (v10)
      {
        v11 = 0;
        v13 = *(_QWORD *)(v1 + 64);
        v12 = *(_QWORD *)(v1 + 72);
        v14 = *(int *)(v1 + 180);
        v15 = 2 * *(_DWORD *)(v1 + 132);
        v16 = 2 * *(_DWORD *)(v1 + 148);
        v17 = 2 * v9;
        v18 = *(int *)(v1 + 164);
        v19 = v13 - 32;
        v20 = v18 + 48;
        v21 = v13 - 2 * v9;
        v22 = v13 + v9;
        v23 = v13 - v9;
        do
        {
          if ((int)v18 >= -63)
          {
            v24 = -16;
            do
            {
              *(_OWORD *)(v21 + v24 - 16) = *(_OWORD *)(v19 + v24 + 16);
              *(_OWORD *)(v23 + v24 - 16) = *(_OWORD *)(v22 + v24 - 16);
              v24 += 16;
            }
            while (v24 < v20);
          }
          v19 -= 2 * v9;
          ++v11;
          v21 -= 2 * v9;
          v22 -= 2 * v9;
          v23 -= 2 * v9;
        }
        while (v11 != 20);
        v25 = 0;
        v26 = (v15 - 2) * v9;
        result = v13 + v26 - 32;
        v27 = v9 + v26;
        v28 = 3 * v9 + v26;
        v29 = v17 + v26 + v13 - 32;
        v30 = v27 + v13 - 32;
        v31 = v28 + v13 - 32;
        do
        {
          if ((int)v18 >= -63)
          {
            v32 = -16;
            do
            {
              *(_OWORD *)(v29 + v32 + 16) = *(_OWORD *)(result + v32 + 16);
              *(_OWORD *)(v31 + v32 + 16) = *(_OWORD *)(v30 + v32 + 16);
              v32 += 16;
            }
            while (v32 < v20);
          }
          result += v17;
          ++v25;
          v29 += v17;
          v30 += v17;
          v31 += v17;
        }
        while (v25 != 20);
        v33 = 0;
        v34 = v12 - 16;
        v35 = 2 * v10;
        v36 = v14 + 16;
        do
        {
          if ((int)v14 >= -31)
          {
            v37 = 0;
            result = v34 - 2 * v10;
            do
            {
              *(_OWORD *)(result + v37) = *(_OWORD *)(v34 + v37);
              *(_OWORD *)(v34 - v10 + v37) = *(_OWORD *)(v34 + v10 + v37);
              v38 = v37 < v36;
              v37 += 16;
            }
            while (v38);
          }
          v34 -= 2 * v10;
          ++v33;
        }
        while (v33 != 8);
        v39 = 0;
        v40 = (v16 - 2) * v10;
        v41 = v12 + v40 - 16;
        v42 = v10 + (uint64_t)v40;
        v43 = 3 * v10 + v40;
        v44 = v35 + v40 + v12 - 16;
        v45 = v42 + v12 - 16;
        v46 = v43 + v12 - 16;
        do
        {
          if ((int)v14 >= -31)
          {
            v47 = -16;
            do
            {
              *(_OWORD *)(v44 + v47 + 16) = *(_OWORD *)(v41 + v47 + 16);
              *(_OWORD *)(v46 + v47 + 16) = *(_OWORD *)(v45 + v47 + 16);
              v47 += 16;
            }
            while (v47 < v36);
          }
          v41 += v35;
          ++v39;
          v44 += v35;
          v45 += v35;
          v46 += v35;
        }
        while (v39 != 8);
      }
    }
  }
  return result;
}

uint64_t sub_2160AE218(int a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t result;

  if (a3 < 1)
    goto LABEL_16;
  v4 = 0;
  v5 = -2147483647;
  v6 = -1;
  do
  {
    v7 = *(_QWORD *)(a4 + 8 * v4);
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 1376) && *(_BYTE *)(v7 + 1372))
    {
      if (*(_BYTE *)(v7 + 1364))
        v8 = 0;
      else
        v8 = *(unsigned __int8 *)(v7 + 37) == a1;
      if (v8)
      {
        v9 = *(_DWORD *)(v7 + 1292);
        if (v9 < *a2 && v9 > v5)
        {
          v5 = v9;
          v6 = v4;
        }
      }
    }
    ++v4;
  }
  while (a3 != v4);
  if (v6 == -1)
  {
LABEL_16:
    result = 0;
    *a2 = -2147483647;
  }
  else
  {
    *a2 = v5;
    return *(_QWORD *)(a4 + 8 * v6);
  }
  return result;
}

uint64_t sub_2160AE2B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  if (!*a1)
    return 4294958327;
  v2 = *((int *)a1 + 204);
  if ((int)v2 <= 33)
  {
    do
      a1[v2++] = v1;
    while ((_DWORD)v2 != 34);
  }
  v3 = *((int *)a1 + 205);
  if ((int)v3 <= 33)
  {
    do
      a1[v3++ + 34] = v1;
    while ((_DWORD)v3 != 34);
  }
  return 0;
}

uint64_t sub_2160AE304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 22816);
  v5 = *(_DWORD *)(v4 + 12);
  if (v5 >= 0x44)
  {
    sub_2160ACA60(v4);
    v4 = *(_QWORD *)(a2 + 22816);
    v5 = *(_DWORD *)(v4 + 12);
    if (v5 > 0x43)
      return 4294958327;
  }
  v6 = 0;
  *(_BYTE *)(a1 + 2) = 1;
  *(_QWORD *)(v4 + 8 * v5 + 216) = a1;
  ++*(_DWORD *)(*(_QWORD *)(a2 + 22816) + 12);
  return v6;
}

uint64_t sub_2160AE378(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 12);
  if ((int)v3 < 1)
    return (v2 >> 31) & 0xFFFFDCF7;
  v4 = 0;
  v5 = 0;
  v6 = (uint64_t *)(a2 + 216);
  v7 = -1;
  v8 = 0x7FFFFFFF;
  do
  {
    v9 = v6[v4];
    if (*(_BYTE *)(v9 + 1372) && *(_BYTE *)(v9 + 1376) && (!*(_BYTE *)(v9 + 34) || !*(_QWORD *)(v9 + 1352)))
    {
      if (*(_DWORD *)(v9 + 1292) < v8 && !*(_BYTE *)(v9 + 1364))
      {
        v7 = v4;
        v8 = *(_DWORD *)(v9 + 1292);
      }
      ++v5;
    }
    ++v4;
  }
  while (v3 != v4);
  if (v5 <= v2)
    return 0;
  if (v7 < 0)
    return 4294958327;
  do
  {
    v10 = *v6;
    if (*(_DWORD *)(*v6 + 1292) == v8)
    {
      if (*(_BYTE *)(v10 + 1376))
      {
        *(_BYTE *)(v10 + 1372) = 0;
        v11 = *(_BYTE **)(v10 + 1352);
        if (v11)
        {
          if (v11[36])
          {
            v11[1372] = 0;
            v11[1377] = 1;
            *(_QWORD *)(v10 + 1352) = 0;
          }
        }
      }
    }
    ++v6;
    --v3;
  }
  while (v3);
  if (v5 - 1 == v2)
    return 0;
  else
    return 4294958327;
}

uint64_t sub_2160AE470(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 22824);
  if (v2 == *(_QWORD *)(a1 + 22816))
  {
LABEL_20:
    result = sub_2160AE378(a1, *(_QWORD *)(a1 + 22816));
    if (!(_DWORD)result)
      return sub_2160AC984(0, *(_QWORD *)(a1 + 22816));
    return result;
  }
  if (v2 && (v3 = *(unsigned int *)(v2 + 12), (_DWORD)v3))
  {
    v4 = v2 + 216;
    while (1)
    {
      v5 = *(_BYTE *)(*(_QWORD *)v4 + 1377) != 0;
      if (!*(_BYTE *)(*(_QWORD *)v4 + 1377))
        break;
      v4 += 8;
      if (!--v3)
        goto LABEL_9;
    }
    v6 = 0;
  }
  else
  {
    v5 = 1;
LABEL_9:
    v6 = 1;
  }
  result = sub_2160AC984(v6, v2);
  if (!(_DWORD)result)
  {
    if (v5)
    {
      v8 = a1 + 16;
      v9 = *(_QWORD *)(a1 + 22824);
      if (v9 && v9 != a1 + 22056)
      {
        v8 = a1 + 776;
        v10 = 29;
        while (v8 - 760 != v9)
        {
          v8 += 760;
          if (!--v10)
          {
            *(_QWORD *)(a1 + 22824) = 0;
            return 4294958327;
          }
        }
      }
      *(_QWORD *)(a1 + 22824) = v8;
    }
    goto LABEL_20;
  }
  return result;
}

void sub_2160AE558(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = 0;
  v2 = (_DWORD *)(a1 + 228);
  do
  {
    *(v2 - 1) = 0;
    *v2 = v1;
    *(_QWORD *)(v2 - 51) = 0;
    *(_QWORD *)(v2 - 53) = 0;
    *(v2 - 49) = 0;
    *(_QWORD *)(v2 - 45) = 0;
    ++v1;
    *(_QWORD *)(v2 - 47) = 0;
    *(_QWORD *)(v2 - 43) = 0xFFFFFFFFLL;
    v2 += 190;
  }
  while (v1 != 30);
  *(_QWORD *)(a1 + 23656) = 0;
  *(_QWORD *)(a1 + 23680) = 0;
  *(_DWORD *)(a1 + 23700) = 0;
  *(_OWORD *)(a1 + 22816) = 0u;
  bzero((void *)(a1 + 22840), 0x220uLL);
}

uint64_t sub_2160AE5BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v8 = 0;
  v56 = *(_QWORD *)(a4 + 22816);
  if (*(_BYTE *)(a5 + 1362))
    v9 = (2 * a2) | 1;
  else
    v9 = a2;
  while (2)
  {
    result = *(unsigned int *)(a1 + 4 * v8);
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        v11 = *(_QWORD *)(a4 + 22816);
        if (*(_DWORD *)(v11 + 12))
        {
          v12 = 0;
          v13 = v9 + ~*(_DWORD *)(a1 + 4 * v8 + 32);
          v14 = v11 + 216;
          do
          {
            v15 = *(_QWORD *)(v14 + 8 * v12);
            if (*(_BYTE *)(v15 + 1376) && !*(_BYTE *)(v15 + 1364) && *(_BYTE *)(v15 + 1372))
            {
              if (*(_BYTE *)(a5 + 1362))
                v16 = (*(unsigned __int8 *)(v15 + 37) == *(unsigned __int8 *)(a5 + 37)) | (2 * *(_DWORD *)(v15 + 1292));
              else
                v16 = *(_DWORD *)(v15 + 1292);
              if (v16 == v13)
              {
                *(_BYTE *)(v15 + 1372) = 0;
                v17 = *(_BYTE **)(*(_QWORD *)(v14 + 8 * v12) + 1352);
                if (v17)
                {
                  if (v17[36])
                  {
                    v17[1372] = 0;
                    v17[1377] = 1;
                    *(_QWORD *)(*(_QWORD *)(v14 + 8 * v12) + 1352) = 0;
                  }
                }
              }
            }
            ++v12;
          }
          while (v12 < *(unsigned int *)(v11 + 12));
        }
        goto LABEL_83;
      case 2:
        sub_2160AEA84(a4, *(_DWORD *)(a1 + 4 * v8 + 64));
        goto LABEL_83;
      case 3:
        v18 = a1 + 4 * v8;
        v19 = *(_DWORD *)(v18 + 32);
        v20 = *(_DWORD *)(v18 + 96);
        sub_2160AEA84(a4, v20);
        v21 = *(_QWORD *)(a4 + 22816);
        v22 = *(unsigned int *)(v21 + 12);
        if (!(_DWORD)v22)
          goto LABEL_83;
        v23 = (uint64_t *)(v21 + 216);
        while (1)
        {
          v24 = *v23;
          if (*(_BYTE *)(*v23 + 1376) && !*(_BYTE *)(v24 + 1364) && *(_BYTE *)(v24 + 1372))
          {
            v25 = *(_BYTE *)(a5 + 1362)
                ? (*(unsigned __int8 *)(v24 + 37) == *(unsigned __int8 *)(a5 + 37)) | (2 * *(_DWORD *)(v24 + 1292))
                : *(_DWORD *)(v24 + 1292);
            if (v25 == v9 + ~v19)
              break;
          }
          ++v23;
          if (!--v22)
            goto LABEL_83;
        }
        *(_BYTE *)(v24 + 1364) = 1;
        *(_DWORD *)(*v23 + 1300) = v20;
        v55 = *(_QWORD *)(*v23 + 1352);
        if (v55 && *(_BYTE *)(v55 + 36))
        {
          *(_BYTE *)(v55 + 1364) = 1;
          *(_DWORD *)(v55 + 1300) = v20;
        }
        goto LABEL_83;
      case 4:
        v26 = *(_QWORD *)(a4 + 22816);
        *(_DWORD *)(v26 + 40) = *(_DWORD *)(a1 + 4 * v8 + 128) - 1;
        if (*(_DWORD *)(v26 + 12))
        {
          v27 = 0;
          v28 = v26 + 216;
          do
          {
            v29 = *(_QWORD *)(v28 + 8 * v27);
            if (*(_BYTE *)(v29 + 1376))
            {
              if (*(_BYTE *)(v29 + 1364))
              {
                if (*(_DWORD *)(v29 + 1300) > *(_DWORD *)(v26 + 40))
                {
                  *(_BYTE *)(v29 + 1372) = 0;
                  *(_BYTE *)(*(_QWORD *)(v28 + 8 * v27) + 1364) = 0;
                  *(_DWORD *)(*(_QWORD *)(v28 + 8 * v27) + 1300) = -1;
                  v30 = *(_QWORD *)(*(_QWORD *)(v28 + 8 * v27) + 1352);
                  if (v30)
                  {
                    if (*(_BYTE *)(v30 + 36))
                    {
                      *(_BYTE *)(v30 + 1372) = 0;
                      *(_BYTE *)(v30 + 1377) = 1;
                      *(_BYTE *)(v30 + 1364) = 0;
                      *(_DWORD *)(v30 + 1300) = -1;
                      *(_QWORD *)(*(_QWORD *)(v28 + 8 * v27) + 1352) = 0;
                    }
                  }
                }
              }
            }
            ++v27;
          }
          while (v27 < *(unsigned int *)(v26 + 12));
        }
        goto LABEL_83;
      case 5:
        *(_DWORD *)(v56 + 208) = 1;
        v31 = *(_QWORD *)(a4 + 22816);
        v32 = *(unsigned int *)(v31 + 12);
        if ((_DWORD)v32)
        {
          v33 = 0;
          v34 = v31 + 216;
          do
          {
            v35 = *(_BYTE **)(v34 + 8 * v33);
            if (v35[1376] && !v35[1364])
            {
              v35[1372] = 0;
              v32 = *(unsigned int *)(v31 + 12);
            }
            ++v33;
          }
          while (v33 < v32);
          if (v32)
          {
            v36 = 0;
            do
            {
              v37 = *(_BYTE **)(v34 + 8 * v36);
              if (v37[1376])
              {
                if (v37[1364])
                {
                  v37[1372] = 0;
                  *(_BYTE *)(*(_QWORD *)(v34 + 8 * v36) + 1364) = 0;
                  *(_DWORD *)(*(_QWORD *)(v34 + 8 * v36) + 1300) = -1;
                  v38 = *(_QWORD *)(*(_QWORD *)(v34 + 8 * v36) + 1352);
                  if (v38)
                  {
                    if (*(_BYTE *)(v38 + 36))
                    {
                      *(_BYTE *)(v38 + 1372) = 0;
                      *(_BYTE *)(v38 + 1377) = 1;
                      *(_BYTE *)(v38 + 1364) = 0;
                      *(_DWORD *)(v38 + 1300) = -1;
                      *(_QWORD *)(*(_QWORD *)(v34 + 8 * v36) + 1352) = 0;
                    }
                  }
                }
              }
              ++v36;
            }
            while (v36 < *(unsigned int *)(v31 + 12));
          }
        }
        v39 = *(_QWORD *)(a4 + 22816);
        v40 = *(_DWORD *)(v39 + 12);
        if (v40)
        {
          v41 = v39 + 216;
          v42 = (uint64_t *)(v39 + 216);
          v43 = *(unsigned int *)(v39 + 12);
          do
          {
            v44 = *v42;
            if (!*(_BYTE *)(*v42 + 1376))
              goto LABEL_60;
            ++v42;
            --v43;
          }
          while (v43);
          v44 = 0;
LABEL_60:
          v45 = 0;
          while (1)
          {
            if (*(_BYTE *)(*(_QWORD *)(v41 + 8 * v45) + 1376))
            {
              if (v40)
                goto LABEL_65;
            }
            else
            {
              *(_QWORD *)(v41 + 8 * v45) = 0;
              if (v40)
              {
LABEL_65:
                v46 = v40;
                v47 = (_QWORD *)(v39 + 216);
                v40 = 0;
                do
                {
                  if (*v47)
                    *(_QWORD *)(v41 + 8 * v40++) = *v47;
                  ++v47;
                  --v46;
                }
                while (v46);
              }
            }
            *(_DWORD *)(v39 + 12) = v40;
            if (++v45 >= (unint64_t)v40)
              goto LABEL_77;
          }
        }
        v44 = 0;
LABEL_77:
        if (!sub_2160ACBA0(1, a4, 0, 0))
        {
          v53 = *(_QWORD *)(a4 + 22816);
          v54 = *(unsigned int *)(v53 + 12);
          if (v54 <= 0x43)
          {
            *(_BYTE *)(v44 + 2) = 1;
            *(_QWORD *)(v53 + 8 * v54 + 216) = v44;
            ++*(_DWORD *)(*(_QWORD *)(a4 + 22816) + 12);
            *(_QWORD *)(v44 + 1292) = 0;
            *(_DWORD *)(v44 + 1280) = 0;
            *(_DWORD *)(v53 + 16) = 0;
          }
        }
        goto LABEL_83;
      case 6:
        v48 = *(_DWORD *)(a1 + 4 * v8 + 96);
        v49 = *(_QWORD *)(a4 + 22816);
        sub_2160AEA84(a4, v48);
        v50 = *(unsigned int *)(v49 + 12);
        if (!(_DWORD)v50)
          goto LABEL_83;
        v51 = (uint64_t *)(v49 + 216);
        while (1)
        {
          v52 = *v51;
          if (!*(_BYTE *)(*v51 + 1376))
            break;
          ++v51;
          if (!--v50)
            goto LABEL_83;
        }
        if (*(_BYTE *)(v52 + 1372))
        {
          *(_BYTE *)(v52 + 1364) = 1;
          *(_DWORD *)(*v51 + 1300) = v48;
          if (*(_DWORD *)(v49 + 40) < v48)
            *(_DWORD *)(v49 + 40) = v48;
LABEL_83:
          if (++v8 == 8)
            return 0;
          continue;
        }
        return 4294958327;
      default:
        return 4294958327;
    }
  }
}

uint64_t sub_2160AEA84(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 22816);
  if (*(_DWORD *)(v2 + 12))
  {
    v3 = 0;
    v4 = v2 + 216;
    do
    {
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (*(_BYTE *)(v5 + 1376))
      {
        if (*(_BYTE *)(v5 + 1364))
        {
          if (*(_DWORD *)(v5 + 1300) == a2)
          {
            *(_BYTE *)(v5 + 1372) = 0;
            *(_BYTE *)(*(_QWORD *)(v4 + 8 * v3) + 1364) = 0;
            *(_DWORD *)(*(_QWORD *)(v4 + 8 * v3) + 1300) = -1;
            v6 = *(_QWORD *)(*(_QWORD *)(v4 + 8 * v3) + 1352);
            if (v6)
            {
              if (*(_BYTE *)(v6 + 36))
              {
                *(_BYTE *)(v6 + 1372) = 0;
                *(_BYTE *)(v6 + 1377) = 1;
                *(_BYTE *)(v6 + 1364) = 0;
                *(_DWORD *)(v6 + 1300) = -1;
                *(_QWORD *)(*(_QWORD *)(v4 + 8 * v3) + 1352) = 0;
              }
            }
          }
        }
      }
      ++v3;
    }
    while (v3 < *(unsigned int *)(v2 + 12));
  }
  return result;
}

uint64_t sub_2160AEB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  char *v22;
  int32x4_t *v23;
  int32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  __int8 v29;
  uint64_t v30;
  int v31;
  signed int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v37;
  int v38;
  unsigned int v39;
  unsigned int v40;

  if (*(_DWORD *)(a1 + 8) == 5)
    goto LABEL_19;
  v8 = (_DWORD *)(a4 + 23696);
  v9 = *(_DWORD **)(a4 + 22816);
  v10 = *(_DWORD *)(a1 + 28);
  if (*(_BYTE *)(a2 + 1324))
  {
    if (!*(_DWORD *)(a4 + 23704))
    {
      if (!*(_BYTE *)(a1 + 32))
      {
        v13 = v9[4];
        v15 = v13 + 1;
        v14 = *v8;
        goto LABEL_18;
      }
      if (*(_BYTE *)(a1 + 32) != 1)
      {
        v38 = *(_DWORD *)(a1 + 28);
        v13 = v9[4];
        v14 = *v8;
        goto LABEL_24;
      }
      v13 = v9[4];
      v14 = *v8;
      if (v10 != (*v8 & v13))
      {
        v15 = v13 + 1;
LABEL_18:
        if (v10 == (v15 & v14))
          goto LABEL_19;
        v38 = *(_DWORD *)(a1 + 28);
LABEL_24:
        v22 = (char *)sub_2160CB5E8(0xAC0uLL);
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v22 + 4) = 1;
          v40 = (v13 + 1) & v14;
          if (v40 == v38)
            goto LABEL_20;
          v23 = 0;
          v37 = v8;
LABEL_27:
          v39 = 0;
          v20[7] = v40;
          v24 = v23;
          while (1)
          {
            v25 = v9[3];
            v26 = sub_2160CDBC0(a3, 1);
            if (!v26)
              break;
            v23 = (int32x4_t *)v26;
            bzero(*(void **)(v26 + 40), *(unsigned int *)(v26 + 56));
            if (v40 < v9[4] && (int)v25 >= 1)
            {
              v27 = *(_DWORD *)(a2 + 1868);
              v28 = v9 + 54;
              while (*(_QWORD *)v28)
              {
                *(_DWORD *)(*(_QWORD *)v28 + 1292) = *(_DWORD *)(*(_QWORD *)v28 + 1296) - v27;
                v28 += 2;
                if (!--v25)
                  goto LABEL_34;
              }
              break;
            }
LABEL_34:
            v23[80].i32[3] = v40;
            v23[81].i32[0] = v40;
            v23[85].i8[12] = 1;
            v23[86].i16[0] = 257;
            v23[85].i8[4] = 0;
            v23[2].i8[5] = v39;
            v29 = *(_BYTE *)(a1 + 32);
            v23[2].i8[0] = v29;
            v23[85].i8[2] = v29;
            v23[2].i8[1] = *(_BYTE *)(a1 + 32);
            v23[2].i8[2] = v39;
            v23[86].i8[3] = 1;
            v23->i32[3] = 0x7FFFFFFF;
            if (v39)
            {
              v24[84].i64[1] = (uint64_t)v23;
              v23[84].i64[1] = (uint64_t)v24;
            }
            if (*(_BYTE *)(a2 + 276))
            {
              v30 = sub_2160AEEE8(a2, (uint64_t)v20, v9);
              if ((_DWORD)v30)
                goto LABEL_54;
            }
            v23[80].i32[0] = 1000000;
            v31 = 32 - 16 * *(unsigned __int8 *)(a2 + 1336);
            v32 = (v31 + v31 * *(_DWORD *)(a2 + 1332)) >> (*(_BYTE *)(a1 + 32) != 0);
            v23[8] = vdupq_n_s32(v32);
            v23[9] = vdupq_n_s32(v32 >> 1);
            v23[37].i32[2] = v32 | 2;
            v23[37].i32[3] = v32 - 1;
            if (a5 != 2)
            {
              v33 = v23[26].i64[0];
              if (v33)
              {
                *(_DWORD *)(v33 + 72) = 1;
                *(_QWORD *)(v33 + 64) = 0x100000001;
                *(_OWORD *)(v33 + 128) = xmmword_2160EF0C0;
              }
              v34 = v23[26].i64[1];
              if (v34)
              {
                *(_DWORD *)(v34 + 72) = 1;
                *(_QWORD *)(v34 + 64) = 0x100000001;
                *(_OWORD *)(v34 + 128) = xmmword_2160EF0C0;
              }
              v35 = v23[27].i64[0];
              if (v35)
              {
                *(_DWORD *)(v35 + 72) = 1;
                *(_QWORD *)(v35 + 64) = 0x100000001;
                *(_OWORD *)(v35 + 128) = xmmword_2160EF0C0;
              }
              sub_215FE4E70((uint64_t)v23[2].i64, v23[11].i32[2]);
            }
            v30 = sub_2160AE470(a4);
            if ((_DWORD)v30)
              goto LABEL_54;
            if (sub_2160AE304((uint64_t)v23, a4))
              break;
            v9[4] = v40;
            v30 = sub_2160AE470(a4);
            if ((_DWORD)v30)
            {
LABEL_54:
              v19 = v30;
              goto LABEL_21;
            }
            v24 = v23;
            if (v39++ >= *(unsigned __int8 *)(a1 + 32))
            {
              v40 = *v37 & (v40 + 1);
              if (v40 != v38)
                goto LABEL_27;
              goto LABEL_20;
            }
          }
        }
        v19 = 4294958327;
        goto LABEL_21;
      }
    }
LABEL_19:
    v20 = 0;
LABEL_20:
    v19 = 0;
    goto LABEL_21;
  }
  v16 = *(_DWORD *)(a1 + 20);
  if (v16 != 7 && v16 != 2)
    goto LABEL_19;
  if (!*(_DWORD *)(a1 + 4))
    goto LABEL_19;
  v18 = v9[4];
  if (v10 == v18 || v10 == (*v8 & (v18 + 1)))
    goto LABEL_19;
  v9[1] = 0;
  v9[2] = 0;
  v19 = sub_2160AEEE8(a2, a1, v9);
  v20 = 0;
  v8[2] = 1;
  v8[3] = **(_DWORD **)(a4 + 22816);
LABEL_21:
  j__free(v20);
  return v19;
}

uint64_t sub_2160AEEE8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v48;

  v3 = *(unsigned __int8 *)(a1 + 276);
  if (v3 == 2)
  {
    v12 = *(unsigned __int8 *)(a2 + 33);
    v13 = *(_DWORD *)(a2 + 28);
    if (*(_DWORD *)(a2 + 8) == 5)
    {
      v14 = 0;
      if (v13)
      {
        v12 = 4294966630;
        v15 = 0;
        goto LABEL_68;
      }
      v15 = 0;
    }
    else
    {
      v27 = *(_DWORD *)(a1 + 1868);
      if (v13 >= a3[9])
        v27 = 0;
      v15 = v27 + a3[8];
    }
    v14 = (__PAIR64__(2 * (v15 + v13), *(_DWORD *)(a2 + 4)) - 1) >> 32;
    if (*(_BYTE *)(a2 + 32))
    {
      if (!*(_BYTE *)(a2 + 33))
      {
        a3[7] = v14;
        do
        {
LABEL_68:
          result = v12;
          *a3 = v14;
          v12 = 4294958327;
        }
        while (*(_DWORD *)(a2 + 8) == 5 && v14 != 0);
        goto LABEL_82;
      }
      v12 = 0;
    }
    else
    {
      v12 = 0;
      a3[7] = v14;
    }
    a3[6] = v14;
    goto LABEL_68;
  }
  if (v3 == 1)
  {
    v16 = *(_DWORD *)(a1 + 288);
    v17 = *(unsigned int *)(a1 + 296);
    v18 = *(_DWORD *)(a1 + 292);
    v13 = *(_DWORD *)(a2 + 28);
    v19 = *(_DWORD *)(a2 + 48);
    v20 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(a2 + 8) == 5)
    {
      v21 = 0;
      if (v13)
      {
        result = 4294958327;
        v15 = 0;
LABEL_81:
        *a3 = v21;
LABEL_82:
        if (a3[52])
        {
          v15 = 0;
          v13 = 0;
        }
        a3[8] = v15;
        a3[9] = v13;
        goto LABEL_85;
      }
      v15 = 0;
    }
    else
    {
      v28 = *(_DWORD *)(a1 + 1868);
      if (v13 >= a3[9])
        v28 = 0;
      v15 = v28 + a3[8];
    }
    v29 = (int *)(a1 + 300);
    v30 = v15 + v13;
    if (!(_DWORD)v17)
      v30 = 0;
    if (v20)
      v31 = 1;
    else
      v31 = v30 <= 0;
    v32 = !v31;
    v33 = v30 - v32;
    if ((int)v17 < 1)
    {
      v34 = 0;
      if (v33)
        goto LABEL_53;
    }
    else
    {
      v34 = 0;
      v35 = v29;
      v36 = v17;
      do
      {
        v37 = *v35++;
        v34 += v37;
        --v36;
      }
      while (v36);
      if (v33)
      {
LABEL_53:
        v38 = v33 - 1;
        v39 = v38 / (int)v17;
        v40 = v38 % (int)v17;
        v41 = v39 * v34;
        if ((v40 & 0x80000000) == 0)
        {
          v42 = (v40 + 1);
          do
          {
            v43 = *v29++;
            v41 += v43;
            --v42;
          }
          while (v42);
        }
        goto LABEL_59;
      }
    }
    v41 = 0;
LABEL_59:
    if (v20)
      v16 = 0;
    v44 = v41 + v16;
    if (*(_BYTE *)(a2 + 32))
    {
      if (*(_BYTE *)(a2 + 33))
      {
        v21 = v19 + v18 + v44;
        a3[6] = v21;
      }
      else
      {
        v21 = v44 + v19;
        a3[7] = v44 + v19;
      }
    }
    else
    {
      v45 = v44 + v19;
      v46 = *(_DWORD *)(a2 + 52) + v18 + v45;
      a3[6] = v46;
      a3[7] = v45;
      if (v45 >= v46)
        v21 = v46;
      else
        v21 = v45;
    }
    if (v21)
      v48 = *(_DWORD *)(a2 + 8) == 5;
    else
      v48 = 0;
    if (v48)
      result = 4294958327;
    else
      result = 0;
    goto LABEL_81;
  }
  if (*(_BYTE *)(a1 + 276))
    return 4294958327;
  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a2 + 44);
  v6 = *(unsigned __int8 *)(a2 + 32);
  v7 = *(unsigned __int8 *)(a2 + 33);
  if (*(_DWORD *)(a2 + 8) == 5)
  {
    if (!*(_DWORD *)(a2 + 28))
    {
      result = 0;
      a3[6] = v5;
      goto LABEL_85;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    result = 4294958327;
  }
  else
  {
    v22 = *(_DWORD *)(a1 + 1872);
    v24 = a3[1];
    v23 = a3[2];
    if (v4 < v24 && (v22 >= 0 ? (v25 = *(_DWORD *)(a1 + 1872)) : (v25 = v22 + 1), v24 - v4 >= v25 >> 1))
    {
      v9 = v23 + v22;
    }
    else
    {
      if (v22 >= 0)
        v26 = *(_DWORD *)(a1 + 1872);
      else
        v26 = v22 + 1;
      if (v4 - v24 <= v26 >> 1)
        v22 = 0;
      v9 = v23 - v22;
      if (v4 <= v24)
        v9 = a3[2];
    }
    v10 = v9 + v4;
    result = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      if (*(_BYTE *)(a2 + 33))
        a3[6] = v10;
      else
        a3[7] = v10;
      v8 = v9 + v4;
    }
    else
    {
      v8 = v10 + v5;
      a3[6] = v8;
      a3[7] = v10;
      if (v10 < v8)
        v8 = v9 + v4;
    }
  }
  *a3 = v8;
  if (*(_DWORD *)(a2 + 4))
  {
    if (a3[52])
    {
      if (v6)
      {
        a3[2] = 0;
        if (v7)
        {
          a3[1] = 0;
          goto LABEL_85;
        }
      }
      else
      {
        a3[2] = 0;
      }
      a3[1] = v10;
    }
    else
    {
      a3[1] = v4;
      a3[2] = v9;
    }
  }
LABEL_85:
  a3[52] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a2 + 33))
      a3[7] = 0x7FFFFFFF;
    else
      a3[6] = 0x7FFFFFFF;
  }
  return result;
}

uint64_t sub_2160AF218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, int a7, int a8, int a9, int a10)
{
  _DWORD *v12;
  int v13;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _BOOL4 v36;
  int *v37;
  BOOL v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int *v43;
  uint64_t v44;
  BOOL v45;
  _BOOL4 v46;
  char v47;
  int v48;
  int v49;
  unsigned __int8 v50;
  int32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  int v64;
  int v66;
  int v67;
  int v68;
  __int32 v69;
  __int32 v70;
  int v71;
  uint64_t *v72;

  v12 = (_DWORD *)(a4 + 22836);
  v13 = *(_DWORD *)(a2 + 8);
  if (!*(_DWORD *)(a4 + 22836))
  {
    v22 = 0;
LABEL_12:
    v23 = 0;
    goto LABEL_25;
  }
  v70 = *(unsigned __int8 *)(a2 + 32);
  v71 = *(_DWORD *)(a2 + 4);
  v69 = *(unsigned __int8 *)(a2 + 33);
  *v12 = 0;
  sub_2160EC880(*(pthread_mutex_t **)a4);
  if (v13 == 5)
  {
    *(_QWORD *)(a4 + 23704) = 0;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a1 + 1320);
    v12[215] = *(_DWORD *)(a1 + 1868) - 1;
    if (!a7)
    {
      v19 = *(unsigned int *)(a3 + 48);
      if ((_DWORD)v19)
      {
        for (i = 0; i < v19; ++i)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * i);
          if (v21)
          {
            *(_BYTE *)(v21 + 1372) = 0;
            v19 = *(unsigned int *)(a3 + 48);
          }
          else
          {
            ++*(_DWORD *)(a3 + 56);
          }
        }
      }
    }
  }
  else if (!*(_QWORD *)(a4 + 22816))
  {
    *(_QWORD *)(a4 + 23704) = 0x8000000100000001;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a1 + 1320);
    v12[215] = *(_DWORD *)(a1 + 1868) - 1;
    v34 = *(_DWORD *)(a2 + 20);
    if (v34 != 7 && v34 != 2)
    {
      v22 = 0;
      v23 = 4294958327;
      goto LABEL_25;
    }
  }
  v72 = a5;
  if (!*(_QWORD *)(a4 + 22816))
  {
    *(int32x2_t *)(a4 + 23712) = vdup_n_s32(0x80000001);
    v12[221] = -2147483647;
    *(_OWORD *)(a4 + 23728) = 0u;
  }
  v24 = a7 & 0xFFFFFFFD;
  if ((a7 & 0xFFFFFFFD) == 1)
    v25 = a7;
  else
    v25 = 0;
  if (v24 == 1)
    v26 = a8;
  else
    v26 = 0;
  v27 = sub_2160ACBA0(v13 == 5, a4, v25, v26);
  if ((_DWORD)v27)
  {
    v23 = v27;
    v22 = 0;
LABEL_24:
    a5 = v72;
    goto LABEL_25;
  }
  sub_2160ACB1C(a4);
  if ((a6 & 0xFFFFFFFD) == 5)
  {
    v29 = *(_QWORD *)(a4 + 22816);
    if (*(_DWORD *)(v29 + 12))
    {
      v30 = *(_DWORD *)(a2 + 20);
      if (v30 == 7 || v30 == 2)
      {
        v31 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(v29 + 216 + 8 * v31++) + 1372) = 0;
        while (v31 < *(unsigned int *)(v29 + 12));
        sub_2160AC984(1, *(_QWORD *)(a4 + 22816));
        v12[218] = -2147483647;
      }
    }
  }
  v68 = a6;
  sub_2160AEB14(a2, a1, a3, a4, a6);
  v32 = sub_2160CDBC0(a3, 1);
  v22 = v32;
  if (!v32)
  {
LABEL_70:
    v23 = 4294958327;
    goto LABEL_24;
  }
  v33 = sub_2160AE304(v32, a4);
  if ((_DWORD)v33)
  {
    v23 = v33;
    goto LABEL_24;
  }
  v35 = a10;
  v36 = (a7 & 0xFD) != 1;
  v37 = *(int **)(a4 + 22816);
  if (a8 && v24 == 1)
  {
    v38 = 0;
    v39 = v71;
  }
  else
  {
    v37[11] = *(unsigned __int8 *)(a2 + 2544);
    if (*(_BYTE *)(a2 + 2544))
    {
      v55 = *(_OWORD *)(a2 + 2564);
      *((_OWORD *)v37 + 3) = *(_OWORD *)(a2 + 2548);
      *((_OWORD *)v37 + 4) = v55;
      v56 = *(_OWORD *)(a2 + 2580);
      v57 = *(_OWORD *)(a2 + 2596);
      v58 = *(_OWORD *)(a2 + 2628);
      *((_OWORD *)v37 + 7) = *(_OWORD *)(a2 + 2612);
      *((_OWORD *)v37 + 8) = v58;
      *((_OWORD *)v37 + 5) = v56;
      *((_OWORD *)v37 + 6) = v57;
      v59 = *(_OWORD *)(a2 + 2644);
      v60 = *(_OWORD *)(a2 + 2660);
      v61 = *(_OWORD *)(a2 + 2692);
      *((_OWORD *)v37 + 11) = *(_OWORD *)(a2 + 2676);
      *((_OWORD *)v37 + 12) = v61;
      *((_OWORD *)v37 + 9) = v59;
      *((_OWORD *)v37 + 10) = v60;
    }
    v62 = sub_2160AEEE8(a1, a2, v37);
    v23 = v62;
    v63 = v12[218];
    if (v63 == -2147483647)
    {
      v38 = 0;
      v12[218] = *v37;
      v36 = v24 != 1;
    }
    else
    {
      v36 = v24 != 1;
      if (v12[217] && *v37 < v63)
      {
        v64 = *(_DWORD *)(a2 + 20);
        v38 = v64 != 2 && v64 != 7;
      }
      else
      {
        v38 = 0;
      }
    }
    if ((_DWORD)v62)
      goto LABEL_24;
    if (v13 == 5)
    {
      *(int32x2_t *)(a4 + 23712) = vdup_n_s32(0x80000001);
      v39 = v71;
      v35 = a10;
    }
    else
    {
      v39 = v71;
      v35 = a10;
      if (a10 && (a10 & 1) == 0)
      {
        v66 = *v37;
        v67 = v12[219];
        if (*v37 <= v67)
        {
          v12[220] = v66;
          v12[226] = a10;
        }
        else
        {
          v12[220] = v67;
          v12[219] = v66;
          v12[226] = v12[225];
          v12[225] = a10;
        }
      }
    }
  }
  v40 = *(_DWORD *)(a2 + 28);
  v41 = v37[3];
  if (v40 < v37[4] && v41 >= 1)
  {
    v42 = *(_DWORD *)(a1 + 1868);
    v43 = v37 + 54;
    v44 = v37[3];
    while (*(_QWORD *)v43)
    {
      *(_DWORD *)(*(_QWORD *)v43 + 1292) = *(_DWORD *)(*(_QWORD *)v43 + 1296) - v42;
      v43 += 2;
      if (!--v44)
      {
        v40 = *(_DWORD *)(a2 + 28);
        goto LABEL_48;
      }
    }
    goto LABEL_70;
  }
LABEL_48:
  v45 = v39 > 0 && v24 == 1;
  v46 = v39 > 0 && v36;
  if (a8)
    v45 = 0;
  if (v45 || v46)
  {
    v37[4] = v40;
    v12[216] = *(_DWORD *)(a2 + 28);
    v40 = *(_DWORD *)(a2 + 28);
  }
  v47 = *(_BYTE *)(a2 + 2709);
  v48 = *(_DWORD *)(a2 + 2712);
  v49 = *(_DWORD *)(a2 + 20);
  v50 = *(_BYTE *)(a2 + 60);
  v51 = *(int32x2_t *)(v37 + 6);
  *(_DWORD *)(v22 + 1280) = *v37;
  *(int32x2_t *)(v22 + 1284) = vrev64_s32(v51);
  *(_BYTE *)(v22 + 1364) = v47;
  *(_DWORD *)(v22 + 1300) = v48;
  *(_BYTE *)(v22 + 1372) = v39 > 0;
  *(_BYTE *)(v22 + 1371) = v13 == 5;
  *(_BYTE *)(v22 + 1379) = v38;
  *(_WORD *)(v22 + 1376) = 0;
  *(_BYTE *)(v22 + 1369) = v49;
  *(_DWORD *)(v22 + 1292) = v40;
  *(_DWORD *)(v22 + 1296) = v40;
  *(_WORD *)(v22 + 1366) = v50;
  *(_QWORD *)(v22 + 1352) = 0;
  *(_DWORD *)(v22 + 1264) = v35;
  if (v24 == 1)
    *(_BYTE *)(v22 + 1361) = a8;
  a5 = v72;
  if (a9)
    *(_BYTE *)(v22 + 4) = 0;
  sub_2160AF794((int32x4_t *)v22, v70, v69, a1, a2, v41, (int32x4_t **)v37 + 27, a3, a4, v68);
  if (*(_DWORD *)(a2 + 8) == 5)
    goto LABEL_12;
  sub_2160AFBD8(v22, *(_QWORD *)(a4 + 22816));
  if (a3)
    sub_2160AFC68(a3, v35);
  v23 = sub_2160AD020((int8x16_t *)(a4 + 22840), *(_DWORD *)(a2 + 20), v22, *(_QWORD *)(a4 + 22816), v52, v53, 0, 0, 0, 0);
  if (!(_DWORD)v23)
  {
    v54 = *(_DWORD *)(a2 + 20);
    if (v54 != 2 && v54 != 7)
      v23 = sub_2160AFD2C(a1, a2, v22, a3, a4, v68);
  }
LABEL_25:
  *a5 = v22;
  sub_2160EC88C(*(pthread_mutex_t **)a4);
  return v23;
}

uint64_t sub_2160AF794(int32x4_t *a1, __int32 a2, __int32 a3, uint64_t a4, uint64_t a5, int a6, int32x4_t **a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v17;
  int32x4_t *v18;
  int v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  uint64_t v25;
  int32x4_t *v26;
  uint64_t v27;
  uint64_t result;
  __int32 v29;
  int v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  __int32 v40;
  int v41;
  char v42;
  int v43;
  __int8 v44;
  int v45;
  int v46;
  unsigned __int8 v47;
  __int32 v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD v55[3];
  __int32 v56;
  __int32 v57;
  __int32 v58;
  __int32 v59;

  v17 = *(_QWORD *)(a9 + 22816);
  a1[2].i8[0] = a2;
  v18 = a1 + 2;
  v18[83].i8[2] = a2;
  v18[77].i32[1] = v18[79].i32[0] + 1000 * a2 + 1000;
  v18->i8[1] = a2;
  v18->i8[4] = 0;
  v18->i8[5] = a3;
  v18->i8[6] = a3;
  v18[-2].i32[3] = -1;
  v19 = 32 - 16 * *(unsigned __int8 *)(a4 + 1336);
  v20 = (v19 + v19 * *(_DWORD *)(a4 + 1332)) >> (a2 != 0);
  v18[6] = vdupq_n_s32(v20);
  v18[7] = vdupq_n_s32(v20 >> 1);
  v18[35].i32[2] = v20 | 2;
  v18[35].i32[3] = v20 - 1;
  if (a10 != 2)
  {
    v21 = a1[26].i64[0];
    if (v21)
    {
      *(_DWORD *)(v21 + 72) = 1;
      *(_QWORD *)(v21 + 64) = 0x100000001;
      *(_OWORD *)(v21 + 128) = xmmword_2160EF0C0;
    }
    v22 = a1[26].i64[1];
    if (v22)
    {
      *(_DWORD *)(v22 + 72) = 1;
      *(_QWORD *)(v22 + 64) = 0x100000001;
      *(_OWORD *)(v22 + 128) = xmmword_2160EF0C0;
    }
    v23 = a1[27].i64[0];
    if (v23)
    {
      *(_DWORD *)(v23 + 72) = 1;
      *(_QWORD *)(v23 + 64) = 0x100000001;
      *(_OWORD *)(v23 + 128) = xmmword_2160EF0C0;
    }
    sub_215FE4E70((uint64_t)v18, a1[11].i32[2]);
  }
  a1[2].i8[2] = 0;
  if (a2)
  {
    a1[2].i8[5] = a3;
    a1[2].i8[6] = a3;
    a1[84].i64[1] = 0;
    if (a6 < 1)
      goto LABEL_25;
    v24 = 0;
    v25 = a6;
    do
    {
      v26 = *a7;
      if (*a7
        && v26[85].i8[2]
        && !v26[84].i64[1]
        && v26[81].i32[0] == a1[81].i32[0]
        && v26[85].u8[12] == a1[85].u8[12]
        && v26 != a1
        && v26[2].u8[5] != a1[2].u8[5])
      {
        v26[84].i64[1] = (uint64_t)a1;
        a1[84].i64[1] = (uint64_t)v26;
        v24 = v26;
      }
      ++a7;
      --v25;
    }
    while (v25);
    if (!v24)
      goto LABEL_25;
    a1[2].i8[2] = 1;
    v27 = (uint64_t)a1;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a4 + 1336) && a1[85].i8[12])
  {
    *(__int16 *)((char *)&a1[2].i16[2] + 1) = 0;
    result = sub_2160CDBC0(a8, 1);
    if (!result)
      return result;
    v27 = result;
    if (*(_BYTE *)(result + 1363) != 1)
      return result;
    result = sub_2160AE304(result, a9);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(v27 + 32) = 1;
    *(_BYTE *)(v27 + 1362) = 1;
    *(_BYTE *)(v27 + 36) = 1;
    *(_WORD *)(v27 + 33) = 257;
    *(_WORD *)(v27 + 37) = 257;
    *(_DWORD *)(v27 + 1268) = a1[81].i32[0] + 5000;
    v41 = *(_DWORD *)(v17 + 24);
    v42 = *(_BYTE *)(a5 + 2709);
    v43 = *(_DWORD *)(a5 + 2712);
    v44 = a1[85].i8[12];
    v45 = *(_DWORD *)(a5 + 20);
    v46 = *(_DWORD *)(a5 + 28);
    v47 = *(_BYTE *)(a5 + 60);
    v48 = a1[79].i32[0];
    *(_DWORD *)(v27 + 1280) = v41;
    *(_DWORD *)(v27 + 1284) = 0x7FFFFFFF;
    *(_DWORD *)(v27 + 1288) = v41;
    *(_BYTE *)(v27 + 1364) = v42;
    *(_DWORD *)(v27 + 1300) = v43;
    *(_BYTE *)(v27 + 1372) = v44;
    *(_BYTE *)(v27 + 1371) = 0;
    *(_BYTE *)(v27 + 1379) = 0;
    *(_WORD *)(v27 + 1376) = 0;
    *(_BYTE *)(v27 + 1369) = v45;
    *(_DWORD *)(v27 + 1292) = v46;
    *(_DWORD *)(v27 + 1296) = v46;
    *(_WORD *)(v27 + 1366) = v47;
    *(_QWORD *)(v27 + 1352) = 0;
    *(_DWORD *)(v27 + 1264) = v48;
    *(_BYTE *)(v27 + 4) = 0;
    v49 = 32 - 16 * *(unsigned __int8 *)(a4 + 1336);
    v50 = v49 + v49 * *(_DWORD *)(a4 + 1332);
    *(int32x4_t *)(v27 + 128) = vdupq_n_s32(v50 >> 1);
    *(int32x4_t *)(v27 + 144) = vdupq_n_s32(v50 >> 2);
    *(_DWORD *)(v27 + 600) = (v50 >> 1) | 2;
    *(_DWORD *)(v27 + 604) = (v50 >> 1) - 1;
    if (a10 != 2)
    {
      v51 = *(_QWORD *)(v27 + 416);
      if (v51)
      {
        *(_DWORD *)(v51 + 72) = 1;
        *(_QWORD *)(v51 + 64) = 0x100000001;
        *(_OWORD *)(v51 + 128) = xmmword_2160EF0C0;
      }
      v52 = *(_QWORD *)(v27 + 424);
      if (v52)
      {
        *(_DWORD *)(v52 + 72) = 1;
        *(_QWORD *)(v52 + 64) = 0x100000001;
        *(_OWORD *)(v52 + 128) = xmmword_2160EF0C0;
      }
      v53 = *(_QWORD *)(v27 + 432);
      if (v53)
      {
        *(_DWORD *)(v53 + 72) = 1;
        *(_QWORD *)(v53 + 64) = 0x100000001;
        *(_OWORD *)(v53 + 128) = xmmword_2160EF0C0;
      }
      sub_215FE4E70(v27 + 32, *(_DWORD *)(v27 + 184));
    }
    *(_QWORD *)(v27 + 1352) = a1;
    a1[84].i64[1] = v27;
    v24 = a1;
LABEL_23:
    *(_QWORD *)(v27 + 64) = v24[4].i64[0];
    *(_QWORD *)(v27 + 72) = v24[4].i64[1];
  }
LABEL_25:
  result = sub_2160BE5BC(a4, (uint64_t)v55, 1);
  if (!(_DWORD)result)
  {
    a1[20].i32[2] = v59;
    v29 = v55[0];
    v30 = v55[1];
    v31 = v55[2];
    v32 = v56;
    v33 = v57;
    v34 = v58;
    a1[15].i32[0] = v56;
    a1[15].i32[1] = v33;
    a1[15].i32[2] = v34;
    a1[13].i32[2] = v29;
    a1[13].i32[3] = v32 - v31;
    v35 = v34 - v33;
    if (v34 >= v33)
      v36 = v34 - v33;
    else
      v36 = v35 + 1;
    v37 = v36 >> 1;
    if (v30 >= 0)
      v38 = v30;
    else
      v38 = v30 + 1;
    if (a2)
      v35 = v37;
    a1[14].i32[2] = v35;
    a1[14].i32[3] = v31;
    v39 = v38 >> 1;
    if (!a2)
      v39 = v30;
    a1[14].i32[0] = v30;
    a1[14].i32[1] = v39;
    a1[13].i32[0] = 2 * v29;
    a1[16].i32[0] = a2;
    a1[16].i32[1] = a3;
    v40 = a1[2].u8[2];
    a1[16].i32[2] = v40;
    a1[16].i32[3] = v40;
    a1[18].i32[3] = 99999;
    a1[20].i8[4] = *(_BYTE *)(a4 + 16) == 0;
  }
  return result;
}

uint64_t sub_2160AFBD8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  if (*(_BYTE *)(result + 1372))
  {
    v2 = *(unsigned int *)(a2 + 12);
    if (!*(_BYTE *)(result + 1361) && (int)v2 >= 1)
    {
      v4 = *(unsigned __int8 *)(result + 37);
      v5 = *(_DWORD *)(result + 1292);
      v6 = (uint64_t *)(a2 + 216);
      do
      {
        v7 = *v6;
        if (!*v6)
          break;
        if (v7 != result && *(_BYTE *)(v7 + 1372))
        {
          if (!*(_BYTE *)(v7 + 1376))
            *(_BYTE *)(v7 + 1376) = 1;
          if (!*(_BYTE *)(v7 + 1364)
            && (*(unsigned __int8 *)(v7 + 37) == v4 || *(_BYTE *)(v7 + 1362) == 0)
            && *(_DWORD *)(v7 + 1292) >= v5)
          {
            *(_BYTE *)(v7 + 1372) = 0;
            *(_BYTE *)(v7 + 1377) = 1;
            *(_BYTE *)(v7 + 2) = 0;
          }
        }
        ++v6;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t sub_2160AFC68(uint64_t a1, int a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v11;

  v2 = *(unsigned int *)(a1 + 48);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 48);
  do
  {
    if (*(_QWORD *)v4 && *(_BYTE *)(*(_QWORD *)v4 + 1372))
      ++v3;
    v4 += 8;
    --v5;
  }
  while (v5);
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);
    if (!v7)
      break;
    v8 = *(_DWORD *)(v7 + 1264);
    v9 = a2 - v8;
    if (v8 > a2)
      v9 = v8 - a2;
    if (v9 >= 41 && v8 && *(_BYTE *)(v7 + 1364) == 0)
    {
      if (*(_BYTE *)(v7 + 1372))
        v11 = v3 < 4;
      else
        v11 = 0;
      if (!v11)
      {
        v3 -= *(unsigned __int8 *)(v7 + 1372) != 0;
        *(_BYTE *)(v7 + 1377) = 1;
        *(_BYTE *)(v7 + 1372) = 0;
        *(_WORD *)(v7 + 1) = 0;
        v2 = *(unsigned int *)(a1 + 48);
      }
    }
    if (++v6 >= v2)
      return 0;
  }
  ++*(_DWORD *)(a1 + 56);
  return 4294958327;
}

uint64_t sub_2160AFD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int8x16_t *v6;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (int8x16_t *)(a5 + 22840);
  if (*(_DWORD *)(a5 + 23656))
    return sub_2160AE2B0(v6->i64);
  v14 = *(_QWORD *)(a5 + 22816);
  v15 = sub_2160CDBC0(a4, 1);
  if (!v15)
    return 4294967188;
  v16 = v15;
  *(_DWORD *)(v15 + 1264) = -1;
  result = sub_2160AE304(v15, a5);
  if ((_DWORD)result)
    return result;
  v17 = *(_BYTE *)(a2 + 60);
  v18 = *(_DWORD *)(a3 + 1264);
  v19 = v18 != 0;
  v20 = v18 - 1;
  if (v20 == 0 || !v19)
    v20 = 1;
  *(_BYTE *)(v16 + 1364) = 0;
  *(_WORD *)(v16 + 1371) = 256;
  *(_BYTE *)(v16 + 1379) = 0;
  *(_WORD *)(v16 + 1376) = 257;
  *(_BYTE *)(v16 + 1369) = 2;
  *(_QWORD *)(v16 + 1288) = 0;
  *(_QWORD *)(v16 + 1280) = 0;
  *(_QWORD *)(v16 + 1296) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v16 + 1366) = v17;
  *(_BYTE *)(v16 + 1367) = 0;
  *(_QWORD *)(v16 + 1352) = 0;
  *(_DWORD *)(v16 + 1264) = v20;
  *(_BYTE *)(v16 + 4) = 1;
  if (*(_DWORD *)(a4 + 48) - 256 > -2)
    return 4294967188;
  sub_2160AF794((int32x4_t *)v16, 0, 0, a1, a2, *(_DWORD *)(v14 + 12), 0, a4, a5, a6);
  sub_215FDA4B8(v16 + 32);
  result = sub_2160AD020(v6, *(_DWORD *)(a2 + 20), a3, *(_QWORD *)(a5 + 22816), v21, v22, 0, 0, 0, 0);
  if (!(_DWORD)result)
  {
    if (v6[51].i32[0] >= 1)
      return sub_2160AE2B0(v6->i64);
    return 4294958327;
  }
  return result;
}

uint64_t sub_2160AFEC8(int a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  i = *(_QWORD *)(a2 + 22824);
  v6 = *(_QWORD *)(a2 + 22816);
  if (i)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    result = 0;
    v10 = a2 + 16;
    v11 = a2 + 22056;
    v12 = a2 + 776;
    while (1)
    {
      v13 = i;
      v14 = *(unsigned int *)(i + 12);
      v15 = (uint64_t *)(v13 + 216);
      if ((a3 & 0xFFFFFFFD) == 1)
      {
        if ((int)v14 < 1)
          goto LABEL_30;
        v16 = 0;
        do
        {
          v17 = *v15;
          if (!*v15)
            break;
          if (*(_DWORD *)(v17 + 1264) == a1
            && (!*(_BYTE *)(v17 + 1362) || !*(_BYTE *)(v17 + 37))
            && *(unsigned __int8 *)(v17 + 1361) == a4)
          {
            v16 = *v15;
          }
          ++v15;
          --v14;
        }
        while (v14);
      }
      else
      {
        if ((int)v14 < 1)
          goto LABEL_30;
        v16 = 0;
        do
        {
          v18 = *v15;
          if (!*v15)
            break;
          if (*(_DWORD *)(v18 + 1264) == a1 && (!*(_BYTE *)(v18 + 1362) || *(unsigned __int8 *)(v18 + 37) == a5))
            v16 = *v15;
          ++v15;
          --v14;
        }
        while (v14);
      }
      if (v16)
      {
        if (*(_BYTE *)(v16 + 4))
          v19 = v16;
        else
          v19 = 0;
        goto LABEL_31;
      }
LABEL_30:
      v19 = 0;
LABEL_31:
      if (v19)
        result = v19;
      if (v13 == v6)
        return result;
      i = v10;
      if (v13 != v11)
      {
        v20 = 29;
        for (i = v12; i - 760 != v13; i += 760)
        {
          if (!--v20)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_2160AFFFC(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v20;
  uint64_t v21;
  __int8 *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int8x16_t *v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  if (*(_DWORD *)(a1 + 8) == 5)
  {
    if (a3)
    {
      result = 0;
      a3->i64[0] = 0;
      a3[17].i64[0] = 0;
      a3[51].i64[0] = 0;
      a3[52].i64[0] = 0;
      a3[51].i64[1] = 0;
      return result;
    }
    return 4294958327;
  }
  result = sub_2160AD020((int8x16_t *)(a2 + 22840), *(_DWORD *)(a1 + 20), a4, *(_QWORD *)(a2 + 22816), a5, a6, 0, 0, a3, 0);
  if ((_DWORD)result)
    return result;
  v11 = *(_DWORD *)(a1 + 20);
  if (a3)
  {
    if (v11 <= 8 && ((1 << v11) & 0x16B) != 0)
    {
      v13 = *(_DWORD *)(a1 + 64) + 1;
      if (v13 <= 34)
      {
        v14 = a3[51].u32[2];
        v15 = (v14 - 1);
        if ((int)v14 >= 1)
        {
          if (a3->i64[v15])
          {
            if (a3[51].i32[0] <= 33 && (int)v14 < v13)
            {
              v16 = 0;
              do
              {
                a3->i64[v14 + v16++] = a3->i64[v15];
                v17 = a3[51].i32[0];
                a3[51].i32[0] = v17 + 1;
              }
              while (v17 <= 32 && v16 + v14 < v13);
              LODWORD(v14) = v14 + v16;
            }
            a3[51].i32[2] = v14;
            v11 = *(_DWORD *)(a1 + 20);
          }
        }
      }
    }
    if (v11 == 6 || v11 == 1)
    {
      v20 = *(_DWORD *)(a1 + 68) + 1;
      v21 = a3[51].u32[3];
      if (v20 <= 34 && (int)v21 >= 1)
      {
        v23 = &a3->i8[8 * (v21 - 1)];
        if (*((_QWORD *)v23 + 34))
        {
          if (a3[51].i32[1] <= 33 && (int)v21 < v20)
          {
            v24 = 0;
            v25 = (uint64_t *)(v23 + 272);
            do
            {
              a3[17].i64[v21 + v24++] = *v25;
              v26 = a3[51].i32[1];
              a3[51].i32[1] = v26 + 1;
            }
            while (v26 <= 32 && v24 + v21 < v20);
            LODWORD(v21) = v21 + v24;
          }
          a3[51].i32[3] = v21;
          v11 = *(_DWORD *)(a1 + 20);
        }
      }
    }
  }
  v28 = v11 == 6 || v11 == 1;
  if (v28 && a3[51].i32[0] != a3[51].i32[1])
    return 4294958327;
  v29 = (_DWORD *)(a2 + 23696);
  if (*(_BYTE *)(a1 + 72) && a3[51].i32[0])
  {
    v30 = *(_DWORD *)(a1 + 64);
    if (*(_BYTE *)(a1 + 32))
      v31 = 32;
    else
      v31 = 16;
    if (v30 >= v31)
      return 4294958327;
    result = sub_2160B03EC(a3->i64, a1, *v29 + 1, a3[51].i32, v30, (int *)(a1 + 76), a1 + 340, a1 + 604);
    if ((_DWORD)result)
      return result;
    v32 = *(unsigned int *)(a1 + 64);
    if (!a3->i64[v32])
      return 4294958327;
    a3[51].i32[0] = v32 + 1;
    a3[51].i32[2] = *(_DWORD *)(a1 + 64) + 1;
  }
  if (*(_BYTE *)(a1 + 73) && a3[51].i32[1])
  {
    result = sub_2160B03EC(a3[17].i64, a1, *v29 + 1, &a3[51].i32[1], *(_DWORD *)(a1 + 68), (int *)(a1 + 208), a1 + 472, a1 + 736);
    if ((_DWORD)result)
      return result;
    v33 = *(unsigned int *)(a1 + 68);
    if (!a3[17].i64[v33])
      return 4294958327;
    a3[51].i32[1] = v33 + 1;
    a3[51].i32[3] = *(_DWORD *)(a1 + 68) + 1;
  }
  v34 = a3[17].i64[0];
  if (v34)
  {
    if (!*(_BYTE *)(a4 + 1362) && *(_BYTE *)(v34 + 33))
    {
      v41 = *(_QWORD *)(v34 + 1352);
      if (!v41)
        return 4294958327;
      v42 = 1288;
      if (*(_BYTE *)(v34 + 38))
        v43 = 1288;
      else
        v43 = 1284;
      v44 = *(_DWORD *)(v34 + v43);
      if (!*(_BYTE *)(v41 + 38))
        v42 = 1284;
      v45 = *(_DWORD *)(v41 + v42);
      v46 = *(_DWORD *)(a4 + 1280);
      v47 = v44 - v46;
      if (v47 < 0)
        v47 = -v47;
      v48 = v45 - v46;
      if (v48 < 0)
        v48 = -v48;
      if (v48 == v47 && *(_BYTE *)(v41 + 38) != 0 || v48 < v47)
        v34 = *(_QWORD *)(v34 + 1352);
    }
    if (*(_BYTE *)(v34 + 36))
    {
      v34 = *(_QWORD *)(v34 + 1352);
      if (!v34)
        return 4294958327;
    }
  }
  a3[52].i64[0] = v34;
  v35 = a3[51].u32[0];
  if ((int)v35 >= 1)
  {
    v36 = (uint64_t *)a3;
    while (*v36)
    {
      ++v36;
      if (!--v35)
        goto LABEL_69;
    }
    return 4294958327;
  }
LABEL_69:
  v37 = a3[51].u32[1];
  if ((int)v37 >= 1)
  {
    v38 = a3 + 17;
    while (v38->i64[0])
    {
      v38 = (int8x16_t *)((char *)v38 + 8);
      if (!--v37)
        goto LABEL_73;
    }
    return 4294958327;
  }
LABEL_73:
  v39 = *(_DWORD *)(a1 + 20);
  if (v39 > 8 || ((1 << v39) & 0x16B) == 0)
    return 0;
  if (a3[51].i32[2] < *(_DWORD *)(a1 + 64) + 1)
    return 4294958327;
  if (v39 != 6 && v39 != 1)
    return 0;
  if (a3[51].i32[3] >= *(_DWORD *)(a1 + 68) + 1)
    return 0;
  else
    return 4294958327;
}

uint64_t sub_2160B03EC(uint64_t *a1, uint64_t a2, int a3, int *a4, int a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;

  if (*(_BYTE *)(a2 + 32))
  {
    a3 *= 2;
    v8 = (2 * *(_DWORD *)(a2 + 28)) | 1;
  }
  else
  {
    v8 = *(_DWORD *)(a2 + 28);
  }
  v9 = *a6;
  if (*a6 == 3)
  {
    v10 = *a4;
LABEL_6:
    result = 0;
    if (v10 > a5 + 1)
      *a4 = a5 + 1;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = v8;
    while (v9 <= 3)
    {
      if (v9 <= 1)
      {
        v15 = *(_DWORD *)(a7 + 4 * v12);
        v16 = v14 + v15 + 1;
        if (v16 >= a3)
          v17 = a3;
        else
          v17 = 0;
        v18 = v16 - v17;
        v14 += (a3 & ((v14 + ~v15) >> 31)) + ~v15;
        if (v9)
          v14 = v18;
        if (v14 <= v8)
          v19 = 0;
        else
          v19 = a3;
        v20 = v14 - v19;
        v21 = *a4;
        v22 = *(unsigned __int8 *)(a2 + 33);
        if (*a4 < 1)
        {
          v23 = 0;
          goto LABEL_58;
        }
        v23 = 0;
        v24 = 0x7FFFFFFF;
        v25 = a1;
        v26 = *a4;
        v27 = 0x7FFFFFFF;
        while (1)
        {
          v28 = *v25;
          if (*v25)
          {
            if (v27 == 0x7FFFFFFF)
              v27 = *(unsigned __int8 *)(v28 + 1362);
            if (*(_BYTE *)(v28 + 1362))
              v29 = (*(unsigned __int8 *)(v28 + 37) == v22) | (2 * *(_DWORD *)(v28 + 1292));
            else
              v29 = *(_DWORD *)(v28 + 1292);
            if (*(_BYTE *)(v28 + 1364))
              v30 = 0;
            else
              v30 = v29 == v20;
            if (v30)
            {
              v23 = *v25;
LABEL_58:
              v40 = v21;
              if (v13 < v21)
              {
                v41 = *(unsigned __int8 *)(a2 + 32);
                do
                {
                  a1[v40] = a1[v40 - 1];
                  --v40;
                }
                while (v40 > v13);
                v42 = v13 + 1;
                a1[v13] = v23;
                v43 = v21 - v13;
                v44 = &a1[v42];
                v10 = v42;
                do
                {
                  v45 = *v44;
                  if (*v44)
                  {
                    if (v41)
                      v46 = (*(unsigned __int8 *)(v45 + 37) == v22) | (2 * *(_DWORD *)(v45 + 1292));
                    else
                      v46 = *(_DWORD *)(v45 + 1292);
                    if (v46 != v20)
                      a1[v10++] = v45;
                  }
                  ++v44;
                  --v43;
                }
                while (v43);
                v13 = v42;
                goto LABEL_71;
              }
LABEL_70:
              v10 = v13 + 1;
              a1[v13++] = v23;
              goto LABEL_71;
            }
            if (v24 == 0x7FFFFFFF)
            {
              v24 = v29;
              v23 = *v25;
            }
            if (v27 && *(unsigned __int8 *)(v23 + 37) != v22 && *(unsigned __int8 *)(v28 + 37) == v22)
            {
              v24 = v29;
              v23 = *v25;
            }
          }
          ++v25;
          if (!--v26)
            goto LABEL_58;
        }
      }
      v31 = *(_DWORD *)(a8 + 4 * v12);
      v32 = *a4;
      if (*a4 < 1)
      {
LABEL_46:
        v23 = 0;
      }
      else
      {
        v33 = a1;
        v34 = *a4;
        while (1)
        {
          v23 = *v33;
          if (*v33)
          {
            if (*(_BYTE *)(v23 + 1376) && *(_BYTE *)(v23 + 1364) && *(_DWORD *)(v23 + 1300) == v31)
              break;
          }
          ++v33;
          if (!--v34)
            goto LABEL_46;
        }
      }
      v35 = v32;
      if (v13 >= v32)
        goto LABEL_70;
      do
      {
        a1[v35] = a1[v35 - 1];
        --v35;
      }
      while (v35 > v13);
      v36 = v13 + 1;
      a1[v13] = v23;
      v37 = v32 - v13;
      v38 = &a1[v36];
      v10 = v36;
      do
      {
        v39 = *v38;
        if (!*(_BYTE *)(*v38 + 1376) || !*(_BYTE *)(v39 + 1364) || *(_DWORD *)(v39 + 1300) != v31)
          a1[v10++] = v39;
        ++v38;
        --v37;
      }
      while (v37);
      v13 = v36;
LABEL_71:
      *a4 = v10;
      if (v12 <= 0x30)
      {
        v9 = a6[++v12];
        if (v9 != 3)
          continue;
      }
      goto LABEL_6;
    }
    return 4294958327;
  }
  return result;
}

uint64_t sub_2160B06F0(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  sub_2160EC880(*(pthread_mutex_t **)a1);
  v12 = *(_QWORD *)(a1 + 22824);
  if (!v12)
    goto LABEL_19;
  if (v12 != *(_QWORD *)(a1 + 22816))
  {
    v13 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 8 * v13;
      while (*(_BYTE *)(*(_QWORD *)(v12 + v14 + 216) + 1377))
      {
        v14 += 8;
        if (v15 == v14)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      if (sub_2160AC984(1, v12))
        goto LABEL_19;
      v12 = a1 + 16;
      v16 = *(_QWORD *)(a1 + 22824);
      if (v16 && v16 != a1 + 22056)
      {
        v12 = a1 + 776;
        v17 = 29;
        while (v12 - 760 != v16)
        {
          v12 += 760;
          if (!--v17)
          {
            v18 = 0;
            *(_QWORD *)(a1 + 22824) = 0;
            goto LABEL_20;
          }
        }
      }
      *(_QWORD *)(a1 + 22824) = v12;
    }
  }
  if (!a3)
  {
    v23 = v12;
    if ((a4 & 0xFFFFFFFD) == 1)
    {
      v24 = a4;
      v25 = a5;
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v26 = (uint64_t)sub_2160B0890(v23, v24, v25);
    goto LABEL_27;
  }
  if (a3 != 1)
  {
LABEL_19:
    v18 = 0;
    goto LABEL_20;
  }
  if ((a4 & 0xFFFFFFFD) == 1)
  {
    v19 = a4;
    v20 = a5;
    v21 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = a6;
  }
  v26 = sub_2160AFEC8(a2, a1, v19, v20, v21);
LABEL_27:
  v18 = v26;
  if (v26)
  {
    if (*(_BYTE *)(v26 + 1379))
    {
      *(_WORD *)(v26 + 1376) = 257;
      *(_BYTE *)(v26 + 4) = 1;
      if (*(_BYTE *)(v26 + 1362))
      {
        v27 = *(_QWORD *)(v26 + 1352);
        if (v27)
        {
          *(_WORD *)(v27 + 1376) = 257;
          *(_BYTE *)(v27 + 4) = 1;
        }
      }
    }
  }
LABEL_20:
  sub_2160EC88C(*(pthread_mutex_t **)a1);
  return v18;
}

_BYTE *sub_2160B0890(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  _BYTE *result;

  v3 = *(unsigned int *)(a1 + 12);
  if ((int)v3 < 1)
    return 0;
  v4 = 0;
  v5 = a1 + 216;
  v6 = 0x7FFFFFFF;
  v7 = -1;
  do
  {
    v8 = *(_QWORD *)(v5 + 8 * v4);
    if (!v8)
      return *(_BYTE **)(v5 + 8 * v7);
    if (!*(_BYTE *)(v8 + 1377) && !*(_BYTE *)(v8 + 36))
    {
      v9 = *(_DWORD *)(v8 + 1280);
      if (v9 < v6)
      {
        v6 = v9;
        v7 = v4;
      }
    }
    ++v4;
  }
  while (v3 != v4);
  if (v7 == -1)
    return 0;
  result = *(_BYTE **)(v5 + 8 * v7);
  if (!result[4] || !result[1376] || (a2 & 0xFFFFFFFD) == 1 && result[1361] != a3)
    return 0;
  return result;
}

uint64_t sub_2160B0924(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = sub_2160EC80C();
  *(_QWORD *)a2 = v4;
  if (!v4)
    return 4294967188;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 1320);
  *(_DWORD *)(a2 + 23696) = *(_DWORD *)(a1 + 1868) - 1;
  sub_2160AE558(a2);
  return 0;
}

uint64_t sub_2160B097C(pthread_mutex_t **a1)
{
  if (a1)
  {
    sub_2160EC854(*a1);
    *a1 = 0;
  }
  return 0;
}

uint64_t sub_2160B09AC(uint64_t result, __int16 a2, __int16 a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t i;
  _BYTE *v46;
  int v47;
  char v48;
  char v49;
  BOOL v50;
  uint64_t j;
  uint64_t v52;
  int v53;
  char v54;
  char v55;
  BOOL v56;
  uint64_t k;
  uint64_t v58;
  int v59;
  char v60;
  char v61;
  BOOL v62;
  uint64_t m;
  uint64_t v64;
  int v65;
  char v66;
  char v67;
  BOOL v68;
  uint64_t n;
  uint64_t v70;
  int v71;
  char v72;
  char v73;
  BOOL v74;
  uint64_t ii;
  _BYTE *v76;
  int v77;
  char v78;
  char v79;
  BOOL v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  char v85;
  char v86;
  BOOL v87;
  uint64_t v88;
  int16x8_t v89;
  const char *v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  uint16x8_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  char *v99;
  _BYTE *v100;
  int v101;
  char v102;
  char v103;
  BOOL v104;
  uint64_t jj;
  _BYTE *v106;
  int v107;
  char v108;
  char v109;
  BOOL v110;
  uint64_t kk;
  uint64_t v112;
  int v113;
  char v114;
  char v115;
  BOOL v116;
  uint64_t mm;
  uint64_t v118;
  int v119;
  char v120;
  char v121;
  BOOL v122;
  uint64_t nn;
  _BYTE *v124;
  int v125;
  char v126;
  BOOL v127;
  uint64_t v128;
  char *v129;
  _BYTE *v130;
  int v131;
  char v132;
  char v133;
  BOOL v134;
  int8x16x2_t v135;

  v4 = 0;
  word_254E169ED = 17664;
  dword_254E169E9 = 922815232;
  unk_254E169EF = xmmword_2160ED110;
  unk_254E169FF = 0x7FE272EB7FE55FEELL;
  unk_254E16A07 = xmmword_2160F3820;
  unk_254E16A17 = unk_2160F3830;
  unk_254E16A27 = 0x7DEA4CF952FB38FCLL;
  unk_254E16A6F = xmmword_2160F3888;
  unk_254E16A7F = unk_2160F3898;
  unk_254E16A8F = xmmword_2160F38A8;
  unk_254E16A2F = xmmword_2160F3848;
  unk_254E16A3F = unk_2160F3858;
  unk_254E16A4F = xmmword_2160F3868;
  unk_254E16A5F = unk_2160F3878;
  xmmword_254E16AF9 = unk_2160F3912;
  unk_254E16B09 = xmmword_2160F3922;
  unk_254E16B13 = *(__int128 *)((char *)&xmmword_2160F3922 + 10);
  xmmword_254E16A99 = *(__int128 *)((char *)&xmmword_2160F38A8 + 10);
  unk_254E16AA9 = xmmword_2160F38C2;
  xmmword_254E16AB9 = unk_2160F38D2;
  unk_254E16AC9 = xmmword_2160F38E2;
  word_254E16B83 = 25074;
  xmmword_254E16B23 = xmmword_2160F393C;
  unk_254E16B33 = unk_2160F394C;
  xmmword_254E16B63 = xmmword_2160F397C;
  unk_254E16B73 = unk_2160F398C;
  xmmword_254E16B43 = xmmword_2160F395C;
  unk_254E16B53 = unk_2160F396C;
  xmmword_254E16BA7 = xmmword_2160F39BE;
  unk_254E16BB7 = unk_2160F39CE;
  xmmword_254E16B87 = xmmword_2160F399E;
  unk_254E16B97 = unk_2160F39AE;
  unk_254E16BF1 = *(__int128 *)((char *)&xmmword_2160F39FE + 10);
  xmmword_254E16BD7 = unk_2160F39EE;
  unk_254E16BE7 = xmmword_2160F39FE;
  xmmword_254E16BC7 = xmmword_2160F39DE;
  xmmword_254E16C21 = xmmword_2160F3A38;
  unk_254E16C31 = unk_2160F3A48;
  xmmword_254E16C01 = xmmword_2160F3A18;
  unk_254E16C11 = unk_2160F3A28;
  unk_254E16C6B = *(__int128 *)((char *)&xmmword_2160F3A78 + 10);
  xmmword_254E16C51 = unk_2160F3A68;
  unk_254E16C61 = xmmword_2160F3A78;
  xmmword_254E16C41 = xmmword_2160F3A58;
  v5 = &dword_254E16C7B;
  xmmword_254E16AD9 = unk_2160F38F2;
  unk_254E16AE9 = xmmword_2160F3902;
  do
  {
    *v5 = *(_DWORD *)((char *)&unk_2160F3A92 + v4);
    *((_WORD *)v5 + 2) = *(_WORD *)((char *)&unk_2160F3A92 + v4 + 4);
    v4 += 8;
    v5 = (int *)((char *)v5 + 658);
  }
  while (v4 != 24);
  v6 = 0;
  v7 = &qword_254E16C81;
  do
  {
    *v7 = qword_2160F3AAA[v6];
    v6 += 3;
    v7 = (uint64_t *)((char *)v7 + 658);
  }
  while (v6 != 9);
  v8 = &qword_254E16C89;
  v9 = 1u;
  do
  {
    *v8 = qword_2160F3AAA[v9];
    v9 += 3;
    v8 = (uint64_t *)((char *)v8 + 658);
  }
  while (v9 != 10);
  v10 = &qword_254E16C91;
  v11 = 2u;
  do
  {
    *v10 = qword_2160F3AAA[v11];
    v11 += 3;
    v10 = (uint64_t *)((char *)v10 + 658);
  }
  while (v11 != 11);
  v12 = 0;
  v13 = &xmmword_254E16C99;
  do
  {
    v14 = *(_OWORD *)((char *)&unk_2160F3AF2 + v12 + 16);
    *v13 = *(_OWORD *)((char *)&unk_2160F3AF2 + v12);
    v13[1] = v14;
    *((_QWORD *)v13 + 4) = *(_QWORD *)((char *)&unk_2160F3AF2 + v12 + 32);
    v12 += 40;
    v13 = (__int128 *)((char *)v13 + 658);
  }
  while (v12 != 120);
  v15 = 0;
  v16 = &xmmword_254E16CC1;
  do
  {
    v17 = *(_OWORD *)((char *)&unk_2160F3B6A + v15 + 80);
    v16[4] = *(_OWORD *)((char *)&unk_2160F3B6A + v15 + 64);
    v16[5] = v17;
    v16[6] = *(_OWORD *)((char *)&unk_2160F3B6A + v15 + 96);
    *(__int128 *)((char *)v16 + 106) = *(_OWORD *)((char *)&unk_2160F3B6A + v15 + 106);
    v18 = *(_OWORD *)((char *)&unk_2160F3B6A + v15 + 16);
    *v16 = *(_OWORD *)((char *)&unk_2160F3B6A + v15);
    v16[1] = v18;
    v19 = *(_OWORD *)((char *)&unk_2160F3B6A + v15 + 32);
    v20 = *(_OWORD *)((char *)&unk_2160F3B6A + v15 + 48);
    v15 += 122;
    v16[2] = v19;
    v16[3] = v20;
    v16 = (__int128 *)((char *)v16 + 658);
  }
  while (v15 != 366);
  v21 = 0;
  v22 = &xmmword_254E16D3B;
  do
  {
    v23 = *(_OWORD *)((char *)&unk_2160F3CD8 + v21 + 80);
    v22[4] = *(_OWORD *)((char *)&unk_2160F3CD8 + v21 + 64);
    v22[5] = v23;
    v22[6] = *(_OWORD *)((char *)&unk_2160F3CD8 + v21 + 96);
    *(__int128 *)((char *)v22 + 106) = *(_OWORD *)((char *)&unk_2160F3CD8 + v21 + 106);
    v24 = *(_OWORD *)((char *)&unk_2160F3CD8 + v21 + 16);
    *v22 = *(_OWORD *)((char *)&unk_2160F3CD8 + v21);
    v22[1] = v24;
    v25 = *(_OWORD *)((char *)&unk_2160F3CD8 + v21 + 32);
    v26 = *(_OWORD *)((char *)&unk_2160F3CD8 + v21 + 48);
    v21 += 122;
    v22[2] = v25;
    v22[3] = v26;
    v22 = (__int128 *)((char *)v22 + 658);
  }
  while (v21 != 366);
  v27 = 0;
  v28 = &xmmword_254E16DB5;
  do
  {
    v29 = *(_OWORD *)((char *)&unk_2160F3E46 + v27 + 80);
    v28[4] = *(_OWORD *)((char *)&unk_2160F3E46 + v27 + 64);
    v28[5] = v29;
    *((_WORD *)v28 + 48) = *(_WORD *)((char *)&unk_2160F3E46 + v27 + 96);
    v30 = *(_OWORD *)((char *)&unk_2160F3E46 + v27 + 16);
    *v28 = *(_OWORD *)((char *)&unk_2160F3E46 + v27);
    v28[1] = v30;
    v32 = *(_OWORD *)((char *)&unk_2160F3E46 + v27 + 32);
    v31 = *(_OWORD *)((char *)&unk_2160F3E46 + v27 + 48);
    v27 += 98;
    v28[2] = v32;
    v28[3] = v31;
    v28 = (__int128 *)((char *)v28 + 658);
  }
  while (v27 != 294);
  v33 = 0;
  v34 = &xmmword_254E16E19;
  do
  {
    v35 = *(_OWORD *)((char *)&unk_2160F3F6C + v33 + 80);
    v34[4] = *(_OWORD *)((char *)&unk_2160F3F6C + v33 + 64);
    v34[5] = v35;
    v34[6] = *(_OWORD *)((char *)&unk_2160F3F6C + v33 + 96);
    *(__int128 *)((char *)v34 + 106) = *(_OWORD *)((char *)&unk_2160F3F6C + v33 + 106);
    v36 = *(_OWORD *)((char *)&unk_2160F3F6C + v33 + 16);
    *v34 = *(_OWORD *)((char *)&unk_2160F3F6C + v33);
    v34[1] = v36;
    v37 = *(_OWORD *)((char *)&unk_2160F3F6C + v33 + 32);
    v38 = *(_OWORD *)((char *)&unk_2160F3F6C + v33 + 48);
    v33 += 122;
    v34[2] = v37;
    v34[3] = v38;
    v34 = (__int128 *)((char *)v34 + 658);
  }
  while (v33 != 366);
  v39 = 0;
  v40 = &xmmword_254E16E93;
  do
  {
    v41 = *(_OWORD *)((char *)&unk_2160F40DA + v39 + 80);
    v40[4] = *(_OWORD *)((char *)&unk_2160F40DA + v39 + 64);
    v40[5] = v41;
    v40[6] = *(_OWORD *)((char *)&unk_2160F40DA + v39 + 96);
    *(__int128 *)((char *)v40 + 106) = *(_OWORD *)((char *)&unk_2160F40DA + v39 + 106);
    v42 = *(_OWORD *)((char *)&unk_2160F40DA + v39 + 16);
    *v40 = *(_OWORD *)((char *)&unk_2160F40DA + v39);
    v40[1] = v42;
    v43 = *(_OWORD *)((char *)&unk_2160F40DA + v39 + 32);
    v44 = *(_OWORD *)((char *)&unk_2160F40DA + v39 + 48);
    v39 += 122;
    v40[2] = v43;
    v40[3] = v44;
    v40 = (__int128 *)((char *)v40 + 658);
  }
  while (v39 != 366);
  if ((_DWORD)result)
  {
    for (i = 0; i != 22; i += 2)
    {
      v46 = (_BYTE *)(a4 + i);
      v47 = (__int16)(byte_2160F4248[i + 1] + (unsigned __int16)((a3 * byte_2160F4248[i]) >> 4));
      if (v47 <= 1)
        v47 = 1;
      if (v47 >= 0x7E)
        v47 = 126;
      v48 = 63 - v47;
      v49 = v47 - 64;
      v50 = v47 > 0x3F;
      if (v50)
        v48 = v49;
      *v46 = v48;
      v46[1] = v50;
    }
    for (j = 0; j != 20; j += 2)
    {
      v52 = a4 + j;
      v53 = (__int16)(byte_2160F425E[j + 1] + (unsigned __int16)((a3 * byte_2160F425E[j]) >> 4));
      if (v53 <= 1)
        v53 = 1;
      if (v53 >= 0x7E)
        v53 = 126;
      v54 = 63 - v53;
      v55 = v53 - 64;
      v56 = v53 > 0x3F;
      if (v56)
        v54 = v55;
      *(_BYTE *)(v52 + 120) = v54;
      *(_BYTE *)(v52 + 121) = v56;
    }
    for (k = 0; k != 658; k += 2)
    {
      v58 = a4 + k;
      v59 = (__int16)(*((char *)&dword_254E169E9 + k + 1)
                    + (unsigned __int16)((a3 * *((char *)&dword_254E169E9 + k)) >> 4));
      if (v59 <= 1)
        v59 = 1;
      if (v59 >= 0x7E)
        v59 = 126;
      v60 = 63 - v59;
      v61 = v59 - 64;
      v62 = v59 > 0x3F;
      if (v62)
        v60 = v61;
      *(_BYTE *)(v58 + 140) = v60;
      *(_BYTE *)(v58 + 141) = v62;
    }
    for (m = 0; m != 6; m += 2)
    {
      v64 = a4 + m;
      v65 = (__int16)(byte_2160F4272[m + 1] + (unsigned __int16)((a3 * byte_2160F4272[m]) >> 4));
      if (v65 <= 1)
        v65 = 1;
      if (v65 >= 0x7E)
        v65 = 126;
      v66 = 63 - v65;
      v67 = v65 - 64;
      v68 = v65 > 0x3F;
      if (v68)
        v66 = v67;
      *(_BYTE *)(v64 + 798) = v66;
      *(_BYTE *)(v64 + 799) = v68;
    }
    for (n = 0; n != 116; n += 2)
    {
      v70 = a4 + n;
      v71 = (__int16)(byte_2160F4278[n + 1] + (unsigned __int16)((a3 * byte_2160F4278[n]) >> 4));
      if (v71 <= 1)
        v71 = 1;
      if (v71 >= 0x7E)
        v71 = 126;
      v72 = 63 - v71;
      v73 = v71 - 64;
      v74 = v71 > 0x3F;
      if (v74)
        v72 = v73;
      *(_BYTE *)(v70 + 804) = v72;
      *(_BYTE *)(v70 + 805) = v74;
    }
  }
  else
  {
    for (ii = 0; ii != 22; ii += 2)
    {
      v76 = (_BYTE *)(a4 + ii);
      v77 = (__int16)(byte_2160F4248[ii + 1] + (unsigned __int16)((a3 * byte_2160F4248[ii]) >> 4));
      if (v77 <= 1)
        v77 = 1;
      if (v77 >= 0x7E)
        v77 = 126;
      v78 = 63 - v77;
      v79 = v77 - 64;
      v80 = v77 > 0x3F;
      if (v80)
        v78 = v79;
      *v76 = v78;
      v76[1] = v80;
    }
    v81 = 0;
    v82 = a2;
    do
    {
      v83 = a4 + v81;
      v84 = (__int16)(byte_2160F42EC[26 * a2 + 1 + v81]
                    + (unsigned __int16)((a3 * byte_2160F42EC[26 * a2 + v81]) >> 4));
      if (v84 <= 1)
        v84 = 1;
      if (v84 >= 0x7E)
        v84 = 126;
      v85 = 63 - v84;
      v86 = v84 - 64;
      v87 = v84 > 0x3F;
      if (v87)
        v85 = v86;
      *(_BYTE *)(v83 + 22) = v85;
      *(_BYTE *)(v83 + 23) = v87;
      v81 += 2;
    }
    while (v81 != 26);
    v88 = 0;
    v89 = vdupq_n_s16(a3);
    v90 = (char *)&unk_2160F433A + 32 * a2;
    v135 = vld2q_s8(v90);
    v91 = vmovl_s8(*(int8x8_t *)v135.val[0].i8);
    v92 = vmovl_high_s8(v135.val[0]);
    v93 = vmull_high_s16(v89, v92);
    v94 = vmull_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v92.i8);
    v135.val[0].i64[0] = 0x1000100010001;
    v135.val[0].i64[1] = 0x1000100010001;
    v95 = (uint16x8_t)vmaxq_s16(vaddw_s8(vshrn_high_n_s32(vshrn_n_s32(vmull_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v91.i8), 4uLL), vmull_high_s16(v89, v91), 4uLL), *(int8x8_t *)v135.val[1].i8), (int16x8_t)v135.val[0]);
    v135.val[0] = (int8x16_t)vmaxq_s16(vaddw_high_s8(vshrn_high_n_s32(vshrn_n_s32(v94, 4uLL), v93, 4uLL), v135.val[1]), (int16x8_t)v135.val[0]);
    v135.val[1].i64[0] = 0x7E007E007E007ELL;
    v135.val[1].i64[1] = 0x7E007E007E007ELL;
    v135.val[0] = (int8x16_t)vminq_u16((uint16x8_t)v135.val[0], (uint16x8_t)v135.val[1]);
    v96 = (int8x16_t)vminq_u16(v95, (uint16x8_t)v135.val[1]);
    v135.val[1].i64[0] = 0x3F003F003F003FLL;
    v135.val[1].i64[1] = 0x3F003F003F003FLL;
    v97 = vuzp1q_s8(v96, v135.val[0]);
    v94.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
    v94.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
    v93.i64[0] = 0xC0C0C0C0C0C0C0C0;
    v93.i64[1] = 0xC0C0C0C0C0C0C0C0;
    v98 = vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)v96, (uint16x8_t)v135.val[1]), (int8x16_t)vcgtq_u16((uint16x8_t)v135.val[0], (uint16x8_t)v135.val[1]));
    v135.val[0] = vbslq_s8(v98, vaddq_s8(v97, (int8x16_t)v93), vsubq_s8((int8x16_t)v94, v97));
    v97.i64[0] = 0x101010101010101;
    v97.i64[1] = 0x101010101010101;
    v135.val[1] = vandq_s8(v98, v97);
    v99 = (char *)(a4 + 48);
    vst2q_s8(v99, v135);
    do
    {
      v100 = (_BYTE *)(a4 + 80 + v88);
      v101 = (__int16)(byte_2160F439A[28 * v82 + 1 + v88]
                     + (unsigned __int16)((a3 * byte_2160F439A[28 * v82 + v88]) >> 4));
      if (v101 <= 1)
        v101 = 1;
      if (v101 >= 0x7E)
        v101 = 126;
      v102 = 63 - v101;
      v103 = v101 - 64;
      v104 = v101 > 0x3F;
      if (v104)
        v102 = v103;
      *v100 = v102;
      v100[1] = v104;
      v88 += 2;
    }
    while (v88 != 28);
    for (jj = 0; jj != 12; jj += 2)
    {
      v106 = (_BYTE *)(a4 + 108 + jj);
      v107 = (__int16)(byte_2160F43EE[12 * v82 + 1 + jj]
                     + (unsigned __int16)((a3 * byte_2160F43EE[12 * v82 + jj]) >> 4));
      if (v107 <= 1)
        v107 = 1;
      if (v107 >= 0x7E)
        v107 = 126;
      v108 = 63 - v107;
      v109 = v107 - 64;
      v110 = v107 > 0x3F;
      if (v110)
        v108 = v109;
      *v106 = v108;
      v106[1] = v110;
    }
    for (kk = 0; kk != 20; kk += 2)
    {
      v112 = a4 + kk;
      v113 = (__int16)(byte_2160F425E[kk + 1] + (unsigned __int16)((a3 * byte_2160F425E[kk]) >> 4));
      if (v113 <= 1)
        v113 = 1;
      if (v113 >= 0x7E)
        v113 = 126;
      v114 = 63 - v113;
      v115 = v113 - 64;
      v116 = v113 > 0x3F;
      if (v116)
        v114 = v115;
      *(_BYTE *)(v112 + 120) = v114;
      *(_BYTE *)(v112 + 121) = v116;
    }
    for (mm = 0; mm != 658; mm += 2)
    {
      v118 = a4 + mm;
      v119 = (__int16)(*((char *)&dword_254E16C7B + 658 * v82 + mm + 1)
                     + (unsigned __int16)((a3 * *((char *)&dword_254E16C7B + 658 * v82 + mm)) >> 4));
      if (v119 <= 1)
        v119 = 1;
      if (v119 >= 0x7E)
        v119 = 126;
      v120 = 63 - v119;
      v121 = v119 - 64;
      v122 = v119 > 0x3F;
      if (v122)
        v120 = v121;
      *(_BYTE *)(v118 + 140) = v120;
      *(_BYTE *)(v118 + 141) = v122;
    }
    for (nn = 0; nn != 6; nn += 2)
    {
      v124 = (_BYTE *)(a4 + 798 + nn);
      v125 = (__int16)(byte_2160F4412[6 * v82 + 1 + nn]
                     + (unsigned __int16)((a3 * byte_2160F4412[6 * v82 + nn]) >> 4));
      if (v125 <= 1)
        v125 = 1;
      if (v125 >= 0x7E)
        v125 = 126;
      v126 = 63 - v125;
      result = (v125 - 64);
      v127 = v125 > 0x3F;
      if (v127)
        v126 = result;
      *v124 = v126;
      v124[1] = v127;
    }
    v128 = 0;
    v129 = (char *)&unk_2160F4424 + 116 * v82 + 1;
    do
    {
      v130 = (_BYTE *)(a4 + 804 + v128);
      v131 = (__int16)(v129[v128] + (unsigned __int16)((a3 * v129[v128 - 1]) >> 4));
      if (v131 <= 1)
        v131 = 1;
      if (v131 >= 0x7E)
        v131 = 126;
      v132 = 63 - v131;
      v133 = v131 - 64;
      v134 = v131 > 0x3F;
      if (v134)
        v132 = v133;
      *v130 = v132;
      v130[1] = v134;
      v128 += 2;
    }
    while (v128 != 116);
  }
  return result;
}

uint64_t sub_2160B13A8(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unint64_t v3;
  unsigned int v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)(result + 8) = a2;
  v2 = *(unsigned int **)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 36))
    v2 = (unsigned int *)((char *)v2 + 1);
  if ((unint64_t)v2 > v3)
    v2 = *(unsigned int **)(a2 + 24);
  v4 = bswap32(*v2);
  v6 = *(unsigned int *)((char *)v2 + 1);
  v5 = (char *)v2 + 1;
  v7 = bswap32(v6);
  if ((unint64_t)v5 > v3)
    v5 = *(char **)(a2 + 24);
  *(_DWORD *)result = 510;
  *(_DWORD *)(result + 4) = v4 >> 23;
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(*(_QWORD *)(result + 8) + 32) = 2 * v7;
  *(_BYTE *)(*(_QWORD *)(result + 8) + 36) = 1;
  return result;
}

uint64_t sub_2160B1408(uint64_t a1, int a2, __int16 a3, __int16 a4)
{
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;

  v5 = a2 == 4 || a2 == 9;
  if (a2 == 7)
    v5 = 1;
  v6 = a2 - 2;
  v7 = a2 == 2 || v5;
  if (((0xA5u >> v6) & 1) != 0)
    v8 = 0;
  else
    v8 = a3;
  if (v6 >= 8)
    v9 = a3;
  else
    v9 = v8;
  return sub_2160B09AC(v7, v9, a4, a1 + 16);
}

uint64_t sub_2160B1454(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v2 = a2[1];
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *a2;
  v5 = byte_2160F4580[4 * v4 + (*(_DWORD *)a1 >> 6)];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int **)(v6 + 16);
  v8 = *(unsigned int **)(v6 + 24);
  v9 = *(_DWORD *)(v6 + 32);
  v10 = *(unsigned __int8 *)(v6 + 36);
  v11 = *(_DWORD *)a1 - v5;
  if (v3 >= v11)
  {
    v12 = v2 == 0;
    if (!*a2)
      a2[1] = v2 ^ 1;
    *a2 = word_2160F4700[v4];
    v3 -= v11;
    v11 = v5;
  }
  else
  {
    v12 = a2[1];
    *a2 = word_2160F4680[v4];
    if (v11 > 0xFF)
      goto LABEL_10;
  }
  do
  {
    v13 = v11;
    v11 *= 2;
    v14 = (v10 + 1);
    v10 = ((_BYTE)v10 + 1) & 7;
    v7 = (unsigned int *)((char *)v7 + (v14 >> 3));
    v3 = __PAIR64__(v3, v9) >> 31;
    v9 = bswap32(*v7) << (v14 & 7);
    if (v7 > v8)
      v7 = v8;
  }
  while (v13 < 0x80);
LABEL_10:
  *(_DWORD *)a1 = v11;
  *(_DWORD *)(a1 + 4) = v3;
  *(_QWORD *)(v6 + 16) = v7;
  *(_DWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 36) = v10;
  return v12;
}

BOOL sub_2160B1528(int *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  _BOOL8 v9;
  char v10;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(unsigned __int8 *)(v1 + 36) + 1;
  v4 = (unsigned int *)(*(_QWORD *)(v1 + 16) + (v3 >> 3));
  v5 = *a1;
  HIDWORD(v7) = a1[1];
  LODWORD(v7) = *(_DWORD *)(v1 + 32);
  v6 = v7 >> 31;
  v8 = bswap32(*v4);
  if ((unint64_t)v4 <= v2)
    v2 = *(_QWORD *)(v1 + 16) + (v3 >> 3);
  v9 = v6 >= v5;
  if (v6 < v5)
    v5 = 0;
  v10 = v3 & 7;
  a1[1] = v6 - v5;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 32) = v8 << v10;
  *(_BYTE *)(v1 + 36) = v10;
  return v9;
}

uint64_t sub_2160B1588(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)(a1 + 4);
  v2 = *(_DWORD *)a1 - 2;
  if (v1 >= v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int **)(v3 + 16);
  v5 = *(_DWORD *)(v3 + 32);
  v6 = *(unsigned __int8 *)(v3 + 36);
  if (v2 <= 0xFF)
  {
    do
    {
      v7 = v2;
      v2 *= 2;
      v8 = (v6 + 1);
      v6 = ((_BYTE)v6 + 1) & 7;
      v4 = (unsigned int *)((char *)v4 + (v8 >> 3));
      v1 = __PAIR64__(v1, v5) >> 31;
      v5 = bswap32(*v4) << (v8 & 7);
      if ((unint64_t)v4 > *(_QWORD *)(v3 + 24))
        v4 = *(unsigned int **)(v3 + 24);
    }
    while (v7 < 0x80);
  }
  v9 = 0;
  *(_DWORD *)a1 = v2;
  *(_DWORD *)(a1 + 4) = v1;
  *(_QWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 32) = v5;
  *(_BYTE *)(v3 + 36) = v6;
  return v9;
}

uint64_t sub_2160B160C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v7;
  int v8;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if (!a5)
    goto LABEL_14;
  v5 = *(_QWORD *)(a5 + 128);
  if (!v5 || (*(_BYTE *)(a5 + 185) & 1) == 0)
    goto LABEL_14;
  v7 = *(unsigned __int8 *)(a5 + 31);
  v8 = *(unsigned __int8 *)(v5 + 144);
  if (v7 == 2 && v8 == 0)
  {
    if (a1 >= 8)
      a3 = *(_QWORD *)(a5 + 168) + 80;
    v11 = (char *)&unk_254E10D78;
  }
  else
  {
    if (v7 != 1 || v8 != 1)
    {
LABEL_14:
      v11 = byte_254E10D40;
      goto LABEL_15;
    }
    if ((*(_BYTE *)(a5 + 16) & 1) != 0)
      v11 = (char *)&unk_254E10DD8;
    else
      v11 = (char *)&unk_254E10DA8;
  }
LABEL_15:
  v12 = &v11[a1];
  v13 = *v12;
  v14 = v12[16];
  v15 = a2;
  if ((v13 & 1) != 0 || (v15 = a3) != 0)
  {
    v16 = *(unsigned __int8 *)(v15 + ((v13 >> 1) & 0xF));
    LODWORD(v15) = 1;
    if ((v14 & 1) != 0)
    {
LABEL_21:
      v18 = *(unsigned __int8 *)(a2 + ((v14 >> 1) & 0xF));
      v17 = 1;
      return byte_2160F4780[(unint64_t)((v17 & v15) + v16 + v18) >> (v17 & v15)];
    }
  }
  else
  {
    v16 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_21;
  }
  a2 = a4;
  if (a4)
    goto LABEL_21;
  v17 = 0;
  v18 = 0;
  return byte_2160F4780[(unint64_t)((v17 & v15) + v16 + v18) >> (v17 & v15)];
}

uint64_t sub_2160B1700(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  int v16;

  if (!a6)
    goto LABEL_7;
  v6 = *(_QWORD *)(a6 + 128);
  if (!v6 || (*(_BYTE *)(a6 + 185) & 1) == 0)
    goto LABEL_7;
  v15 = *(unsigned __int8 *)(a6 + 31);
  v16 = *(unsigned __int8 *)(v6 + 144);
  if (v15 == 2 && v16 == 0)
  {
    if (a1 > 1)
      a3 = a5;
    v8 = (unsigned __int8 *)&unk_254E10E08;
  }
  else
  {
    if (v15 != 1 || v16 != 1)
    {
LABEL_7:
      v8 = (unsigned __int8 *)&unk_254E10D70;
      goto LABEL_8;
    }
    if ((*(_BYTE *)(a6 + 16) & 1) != 0)
      v8 = (unsigned __int8 *)&unk_254E10E18;
    else
      v8 = (unsigned __int8 *)&unk_254E10E10;
  }
LABEL_8:
  v9 = a2;
  if ((a1 & 1) != 0 || (v9 = a3) != 0)
  {
    v10 = *(unsigned __int8 *)(v9 + v8[a1]);
    LODWORD(v9) = 1;
  }
  else
  {
    v10 = 0;
  }
  v11 = v8[a1 + 4];
  if ((a1 & 0xFFFFFFFE) == 2 || (a2 = a4) != 0)
  {
    v12 = *(unsigned __int8 *)(a2 + v11);
    v13 = 1;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  return byte_2160F4780[(unint64_t)((v13 & v9) + v10 + v12) >> (v13 & v9)];
}

void sub_2160B17F0(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_DWORD *sub_2160B1800(_DWORD *result, _DWORD *a2)
{
  uint64_t i;
  int v3;
  uint64_t j;

  for (i = 11; i != 15; ++i)
    result[i] += a2[i];
  do
  {
    result[i] += a2[i];
    ++i;
  }
  while (i != 18);
  v3 = result[2];
  result[1] += a2[1];
  result[2] = v3 + a2[2];
  for (j = 3; j != 8; ++j)
    result[j] += a2[j];
  do
  {
    result[j] += a2[j];
    ++j;
  }
  while (j != 11);
  *result += *a2;
  return result;
}

uint64_t sub_2160B18A8(uint64_t a1, unsigned int a2)
{
  int32x2_t v2;
  unint64_t v3;
  int v4;
  int32x2_t v6;

  if (a2 <= 9 && ((1 << a2) & 0x294) != 0)
  {
    v2 = vmla_s32((int32x2_t)vaddvq_s32(vmlaq_s32((int32x4_t)vaddvq_s32(vmulq_s32(*(int32x4_t *)(a1 + 44), (int32x4_t)xmmword_2160F47C0)), *(int32x4_t *)(a1 + 16), vdupq_n_s32(0x20Bu))), *(int32x2_t *)(a1 + 36), (int32x2_t)0x14D00000032);
    v3 = (unint64_t)vpadd_s32(v2, v2);
    v4 = v3;
    LODWORD(v3) = *(_DWORD *)a1;
    return v4 + ((double)v3 * 7.30000019 + 0.5);
  }
  else
  {
    v6 = vmla_s32((int32x2_t)vaddvq_s32(vmlaq_s32((int32x4_t)vaddvq_s32(vmulq_s32(*(int32x4_t *)(a1 + 44), (int32x4_t)xmmword_2160F47D0)), *(int32x4_t *)(a1 + 16), vdupq_n_s32(0x1F4u))), *(int32x2_t *)(a1 + 36), (int32x2_t)0x15E000000C8);
    return 9 * *(_DWORD *)a1 + vpadd_s32(v6, v6).u32[0];
  }
}

int *sub_2160B1998(int *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t j;
  int v6;
  uint64_t k;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  char v12;
  char v13;
  int v14;
  int v15;

  v2 = 0;
  v3 = 12;
  do
  {
    for (i = 0; i != 4; ++i)
      result[v3 + i] += a2[v3 + i];
    ++v2;
    v3 += 4;
  }
  while (v2 != 4);
  for (j = 28; j != 32; ++j)
    result[j] += a2[j];
  v6 = result[3];
  result[2] += a2[2];
  result[3] = v6 + a2[3];
  for (k = 4; k != 9; ++k)
    result[k] += a2[k];
  do
  {
    result[k] += a2[k];
    ++k;
  }
  while (k != 12);
  v8 = 0;
  v9 = *result;
  result[1] += a2[1];
  v10 = result + 33;
  *result = v9 + *a2;
  v11 = result + 34;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = *((__int16 *)a2 + v8 + 66);
    if (*((__int16 *)v10 + v8) > v14)
      *((_WORD *)v10 + v8) = v14;
    v15 = *((__int16 *)a2 + v8 + 68);
    if (*((__int16 *)v11 + v8) < v15)
      *((_WORD *)v11 + v8) = v15;
    v12 = 0;
    v8 = 1;
  }
  while ((v13 & 1) != 0);
  result[32] += a2[32];
  return result;
}

uint64_t sub_2160B1AD0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int32x2_t v4;

  v1 = 0;
  v2 = 0;
  do
  {
    v3 = vaddvq_s32(vmlaq_s32((int32x4_t)v2, (int32x4_t)xmmword_2160F4838[v1], *(int32x4_t *)(a1 + 48 + v1 * 16)));
    v2 = v3;
    ++v1;
  }
  while (v1 != 4);
  v4 = vmla_s32((int32x2_t)vaddvq_s32(vmlaq_s32((int32x4_t)vaddvq_s32(vmlaq_s32((int32x4_t)v3, *(int32x4_t *)(a1 + 112), (int32x4_t)xmmword_2160F47E0)), *(int32x4_t *)(a1 + 20), vdupq_n_s32(0x2BCu))), *(int32x2_t *)(a1 + 40), (int32x2_t)0x15E000000C8);
  return vpadd_s32(v4, v4).u32[0] + 10 * *(_DWORD *)(a1 + 4);
}

double sub_2160B1B74(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)&result = 0x800080007FFF7FFFLL;
  *(_QWORD *)(a1 + 220) = 0x800080007FFF7FFFLL;
  return result;
}

uint64_t sub_2160B1BA8(_DWORD *a1, uint64_t a2, int a3)
{
  unsigned __int8 *v5;
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;

  v5 = *(unsigned __int8 **)(a2 + 40);
  if (v5[1] > 1u)
  {
    result = sub_2160B1ED8(a2, (uint64_t)(a1 + 34), (uint64_t)(a1 + 50), a1 + 54, (uint64_t)(a1 + 55), (uint64_t)(a1 + 56));
    v8 = a1 + 24;
    ++a1[22];
    v9 = a1 + 25;
    v10 = a1 + 26;
    v11 = a1 + 31;
    v7 = a1 + 23;
  }
  else
  {
    result = (uint64_t)sub_2160B1CFC(a1, a2);
    v7 = a1 + 4;
    v8 = a1 + 5;
    v9 = a1 + 6;
    v10 = a1 + 7;
    v11 = a1 + 12;
  }
  *v7 += a3;
  if ((v5[1] & 0xFE) == 4)
  {
    ++*v10;
LABEL_11:
    ++*v11;
    goto LABEL_12;
  }
  if (v5[52])
  {
    ++*v8;
    v10 += vaddvq_s32((int32x4_t)(*(_OWORD *)&vshlq_u32((uint32x4_t)vdupq_n_s32(v5[52]), (uint32x4_t)xmmword_2160F47F0) & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)));
  }
  ++*v10;
  if (!v5[53])
    goto LABEL_11;
  ++*v9;
  v12 = v5[53];
  if (v12 <= 2)
  {
    v11 += v12;
    goto LABEL_11;
  }
LABEL_12:
  *a1 += 256;
  a1[3] += v5[55];
  return result;
}

_DWORD *sub_2160B1CFC(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;

  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(unsigned __int8 *)(v2 + 1);
  v4 = *(unsigned __int8 *)(v2 + 2);
  if (v3 | v4)
  {
    v10 = &result[algn_2160F76E6[v4]];
    ++v10[15];
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 176) + 32;
    do
    {
      v7 = *(unsigned __int8 *)(v6 + v5);
      if (v7 <= 8)
      {
        v8 = 1 << v7;
        if ((v8 & 0x1E0) != 0)
        {
          v9 = result + 21;
        }
        else if ((v8 & 0x1C) != 0)
        {
          v9 = result + 20;
        }
        else
        {
          v9 = result + 19;
        }
        ++*v9;
      }
      ++v5;
    }
    while (v5 != 16);
  }
  return result;
}

int *sub_2160B1D90(_DWORD *a1, _DWORD *a2)
{
  int v4;
  int v5;

  v4 = a1[1];
  *a1 += *a2;
  a1[1] = v4 + a2[1];
  v5 = a1[3];
  a1[2] += a2[2];
  a1[3] = v5 + a2[3];
  sub_2160B1800(a1 + 4, a2 + 4);
  return sub_2160B1998(a1 + 22, a2 + 22);
}

uint64_t sub_2160B1DFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_2160B1E04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) += a2;
  return result;
}

unint64_t sub_2160B1E14(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = sub_2160B18A8(a1 + 16, a2);
  v5 = sub_2160B1AD0(a1 + 88) + (unint64_t)v4;
  if (a2 <= 9 && ((1 << a2) & 0x294) != 0)
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 4);
    v7 = (unint64_t)((double)(v5 << 23) + (double)v6 * 61236840.0);
  }
  else
  {
    v7 = 8808038 * (v5 + (10 * *(_DWORD *)(a1 + 4)));
  }
  return (v7 / 0x64 + 0x400000) >> 23;
}

uint64_t sub_2160B1ED8(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  int v52;
  uint64_t v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  int v61;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(unsigned __int8 *)(v6 + 272);
  if (v7 <= 4)
  {
    v8 = *(_QWORD *)(result + 40);
    v9 = *(unsigned __int8 *)(v8 + 1);
    v10 = v9 == 5 || v9 == 3;
    if (v10)
    {
      if (*(_BYTE *)v6)
        v11 = (unsigned __int8 *)&unk_2160F77AA;
      else
        v11 = (unsigned __int8 *)&unk_2160F7793;
    }
    else
    {
      v11 = (unsigned __int8 *)&unk_2160F778E;
    }
    v12 = a2 + 16 * v11[*(unsigned __int8 *)(v8 + 2)];
    if (v9 != 4)
      a3 = v12;
    if (*(_BYTE *)(v6 + 272))
    {
      v14 = 0;
      v15 = 0;
      v16 = *(_QWORD *)(*(_QWORD *)(result + 176) + 112);
      result = 2;
      do
      {
        v17 = *(unsigned __int8 *)(v6 + 16 + 16 * v14 + 15);
        v18 = *(unsigned __int16 *)(v6 + 26);
        if (v18 >= 0x103)
          v18 = 259;
        v19 = word_254E10E30[40 * v18 + 24 + v14];
        v20 = v19 * (v19 >> 8);
        v21 = v16 + 16 * v14;
        if (v17 == 6)
        {
          v22 = 0;
          v23 = *(_WORD *)(v21 + 2);
          v24 = *(_BYTE *)v21 & 3;
          v25 = v23 & 3;
          if (v25 == 2 || v24 == 2)
            v27 = 3;
          else
            v27 = 2;
          v10 = v24 == 0;
          v28 = v25 | v24;
          if (v10 || v25 == 0)
            v30 = 1;
          else
            v30 = v27;
          if (v28)
            v31 = v30;
          else
            v31 = 0;
          ++*(_DWORD *)(a3 + 4 * v31);
          if ((unsigned __int16)(v23 - 112) >= 0xFF24u)
            v32 = 0;
          else
            v32 = v20;
          v33 = v32 + v15;
          v34 = *(_WORD *)(v21 + 6);
          v35 = *(_BYTE *)(v21 + 4) & 3;
          v36 = v34 & 3;
          if (v36 == 2 || v35 == 2)
            v38 = 3;
          else
            v38 = 2;
          v10 = v36 == 0;
          v39 = v36 | v35;
          if (v10)
            v38 = 1;
          if ((*(_BYTE *)(v21 + 4) & 3) != 0)
            v40 = v38;
          else
            v40 = 1;
          if (!v39)
            v40 = 0;
          ++*(_DWORD *)(a3 + 4 * v40);
          if ((unsigned __int16)(v34 - 112) >= 0xFF24u)
            v20 = 0;
          v41 = 1;
          do
          {
            v42 = 0;
            v43 = v41;
            v44 = 1;
            v45 = v21 + 4 * v22;
            do
            {
              v46 = v44;
              v47 = *(__int16 *)(v45 + 2 * v42);
              if (*(__int16 *)(a5 + 2 * v42) > v47)
              {
                *(_WORD *)(a5 + 2 * v42) = v47;
                LOWORD(v47) = *(_WORD *)(v45 + 2 * v42);
              }
              if (*(__int16 *)(a6 + 2 * v42) < (__int16)v47)
                *(_WORD *)(a6 + 2 * v42) = v47;
              v44 = 0;
              v42 = 1;
            }
            while ((v46 & 1) != 0);
            v41 = 0;
            v22 = 1;
          }
          while ((v43 & 1) != 0);
          v15 = v33 + v20;
        }
        else
        {
          v48 = 0;
          v49 = v21 + 4 * (v17 - 4);
          v50 = *(_WORD *)(v49 + 2);
          v51 = *(_BYTE *)v49 & 3;
          v52 = v50 & 3;
          if (v52 == 2 || v51 == 2)
            v54 = 3;
          else
            v54 = 2;
          v10 = v51 == 0;
          v55 = v52 | v51;
          if (v10 || v52 == 0)
            v57 = 1;
          else
            v57 = v54;
          if (v55)
            v58 = v57;
          else
            v58 = 0;
          ++*(_DWORD *)(a3 + 4 * v58);
          if ((unsigned __int16)(v50 - 112) >= 0xFF24u)
            v20 = 0;
          v59 = 1;
          do
          {
            v60 = v59;
            v61 = *(__int16 *)(v49 + 2 * v48);
            if (*(__int16 *)(a5 + 2 * v48) > v61)
            {
              *(_WORD *)(a5 + 2 * v48) = v61;
              LOWORD(v61) = *(_WORD *)(v49 + 2 * v48);
            }
            if (*(__int16 *)(a6 + 2 * v48) < (__int16)v61)
              *(_WORD *)(a6 + 2 * v48) = v61;
            v59 = 0;
            v48 = 1;
          }
          while ((v60 & 1) != 0);
          v15 += v20;
        }
        ++v14;
      }
      while (v14 != v7);
    }
    else
    {
      v15 = 0;
    }
    *a4 += v15;
  }
  return result;
}

void sub_2160B217C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)a1 = xmmword_2160F4800;
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    j__free(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
}

void sub_2160B21FC(_DWORD *a1, int a2)
{
  sub_2160B217C((uint64_t)a1);
  *a1 = a2;
}

uint64_t sub_2160B2224(int *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  int v7;
  int v8;
  uint64_t result;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;

  v7 = a1[4];
  *((_BYTE *)a1 + 109) = 0;
  v8 = *a1;
  if (*a1 <= 1)
    return a1[5];
  if (*((_BYTE *)a1 + 36) && *((_QWORD *)a1 + 5) > (unint64_t)a5)
  {
    while (1)
    {
      v15 = a1[12];
      if (v15 >= a5)
        break;
      v16 = (unsigned int *)(*((_QWORD *)a1 + 7) + 16 * v15);
      sub_2160B2224(a1, *v16, v16[1], *((unsigned __int8 *)v16 + 12));
    }
    if (v15 > a5)
      return a1[5];
    v8 = *a1;
  }
  v17 = a1[3];
  v18 = v8 - 1;
  if (v17 < v18)
  {
    if (!a1[28])
    {
      result = v7 + 2 * a3 - (a1[2] + a2);
      if (!a6)
        return result;
      goto LABEL_20;
    }
    if (!v17)
    {
      result = a3 + v18 * (a3 >> 1) - (a1[2] + a2);
      if (!a6)
        return result;
      goto LABEL_20;
    }
  }
  v19 = v7 + a3 - (a1[2] + a2);
  v20 = a1[5];
  if (v19 >= v20)
    result = v20;
  else
    result = v19;
  if (!a6)
    return result;
LABEL_20:
  if (a4 <= 9 && ((1 << a4) & 0x294) != 0)
    a1[8] = v17;
  if (v17 >= v18)
    goto LABEL_29;
  if (a1[28])
  {
    if (!v17)
    {
      a1[5] = v18 * a3;
      v21 = a1 + 7;
LABEL_28:
      *v21 = a2;
    }
  }
  else
  {
    v21 = a1 + 7;
    v22 = a1[7];
    a1[5] += a3;
    if (!v22)
      goto LABEL_28;
  }
LABEL_29:
  if (a1[29])
  {
    if (!*((_BYTE *)a1 + 136))
    {
      v23 = a1[5];
      if ((int)result >= v23)
      {
        a1[30] = a5;
        a1[32] = a5;
        a1[33] = v23;
      }
      else if ((int)result < a1[33])
      {
        a1[32] = a5;
        a1[33] = result;
      }
    }
    if (a1[13] - 1 == a5 && (int)result < (int)(v18 * (a3 >> 1)))
      *((_WORD *)a1 + 54) = 257;
  }
  a1[3] = v17 + 1;
  a1[4] = result;
  a1[7] = (a2 - a1[7] + 32 * a1[7]) >> 5;
  if ((int)result < -a1[1])
    *((_WORD *)a1 + 54) = 257;
  if (*((_BYTE *)a1 + 36))
  {
    if (a1[13] == a5)
      a1[13] = a5 + 1;
    if (a1[12] == a5 && *((_QWORD *)a1 + 5) > (unint64_t)a5)
    {
      *(_DWORD *)(*((_QWORD *)a1 + 7) + 16 * a5) = a2;
      *(_DWORD *)(*((_QWORD *)a1 + 7) + 16 * a1[12] + 8) = a1[4];
      *(_BYTE *)(*((_QWORD *)a1 + 7) + 16 * a1[12] + 12) = a4;
      *(_DWORD *)(*((_QWORD *)a1 + 7) + 16 * a1[12]++ + 4) = a3;
    }
  }
  return result;
}

uint64_t sub_2160B24BC(int *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  return sub_2160B2224(a1, a2, a3, a4, a5, 1);
}

uint64_t sub_2160B24C4(uint64_t result)
{
  *(_WORD *)result = 0;
  *(_DWORD *)(result + 4) = -1;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = 1065353216;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 28) = 1065353216;
  return result;
}

uint64_t sub_2160B24EC(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 5041656) + 112);
}

uint64_t sub_2160B2500(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 5041656) + 120);
}

uint64_t sub_2160B2514(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 5041656) + 136);
}

uint64_t sub_2160B2528(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 5041656) + 144);
}

uint64_t sub_2160B253C(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  size_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  size_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  size_t v125;
  char *v126;
  char *v127;
  size_t v128;
  int v129;
  int v130;
  int v131;
  const void *v132;
  void *v133;
  const void *v134;
  void *v135;
  char *v136;
  unsigned int v137;
  char *__dst;
  char *__src;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;

  v4 = *a4;
  v5 = a4[1];
  if (v4 == 32 || v5 == 32)
  {
    if (v5 == 32 && v4 == 32)
      return 4294958327;
    if (*(_BYTE *)(a1 + 29))
      return 4294958327;
    v34 = a2[1];
    v35 = a3[1];
    if (v34 > v35)
      return 4294958327;
    v36 = (_DWORD)v5 == 32 ? a4 : a4 + 1;
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * ((_DWORD)v5 != 32) + 224) + 8 * *v36);
    v38 = *(_QWORD *)(a1 + 216);
    if (!v37 || v38 == 0)
      return 4294958327;
    if (*(_DWORD *)(v37 + 132) != *(_DWORD *)(v38 + 132))
      return 4294958327;
    if (*(_DWORD *)(v37 + 148) != *(_DWORD *)(v38 + 148))
      return 4294958327;
    v40 = (char *)*(unsigned int *)(v37 + 168);
    if ((_DWORD)v40 != *(_DWORD *)(v38 + 168))
      return 4294958327;
    v41 = *(unsigned int *)(v37 + 184);
    if ((_DWORD)v41 != *(_DWORD *)(v38 + 184))
      return 4294958327;
    v42 = *a2;
    v43 = 16 * *a2;
    v44 = 16 * v34 * v40;
    v45 = (char *)(*(_QWORD *)(v37 + 64) + v43 + v44);
    v46 = (char *)(*(_QWORD *)(v38 + 64) + v43 + v44);
    __dst = &v40[(_QWORD)v46];
    v47 = *a3;
    v48 = &v40[(_QWORD)v45];
    v49 = (2 * (_DWORD)v40);
    v141 = &v46[v49];
    v140 = &v45[v49];
    v50 = (3 * (_DWORD)v40);
    v145 = &v46[v50];
    v144 = &v45[v50];
    v51 = (4 * (_DWORD)v40);
    v147 = &v46[v51];
    v146 = &v45[v51];
    v52 = (5 * (_DWORD)v40);
    v151 = &v46[v52];
    v150 = &v45[v52];
    v53 = (6 * (_DWORD)v40);
    v153 = &v46[v53];
    v152 = &v45[v53];
    v54 = (8 * (_DWORD)v40);
    v55 = (7 * (_DWORD)v40);
    v157 = &v46[v55];
    v156 = &v45[v55];
    v160 = &v46[v54];
    v56 = (11 * (_DWORD)v40);
    v57 = (13 * (_DWORD)v40);
    v58 = (14 * (_DWORD)v40);
    v59 = (15 * (_DWORD)v40);
    __src = &v45[v54];
    v60 = (9 * (_DWORD)v40);
    v142 = &v46[v60];
    v143 = &v45[v60];
    v61 = (10 * (_DWORD)v40);
    v148 = &v46[v61];
    v149 = &v45[v61];
    v154 = &v46[v56];
    v155 = &v45[v56];
    v62 = (12 * (_DWORD)v40);
    v158 = &v46[v62];
    v162 = &v45[v62];
    v164 = &v46[v57];
    v166 = &v45[v57];
    v168 = &v46[v58];
    v170 = &v45[v58];
    v186 = &v46[v59];
    v63 = &v45[v59];
    if (v34 == v35)
    {
      v64 = 16 * (v47 - v42) + 16;
      memcpy(v46, v45, v64);
      memcpy(__dst, v48, v64);
      memcpy(v141, v140, v64);
      memcpy(v145, v144, v64);
      memcpy(v147, v146, v64);
      memcpy(v151, v150, v64);
      memcpy(v153, v152, v64);
      memcpy(v157, v156, v64);
      memcpy(v160, __src, v64);
      memcpy(v142, v143, v64);
      memcpy(v148, v149, v64);
      memcpy(v154, v155, v64);
      memcpy(v158, v162, v64);
      memcpy(v164, v166, v64);
      memcpy(v168, v170, v64);
      memcpy(v186, v63, v64);
      v65 = (char *)(*(_QWORD *)(v37 + 72) + v43 + *(_DWORD *)(v37 + 184) * 8 * v34);
      v66 = (char *)(*(_QWORD *)(v38 + 72) + v43 + *(_DWORD *)(v38 + 184) * 8 * v34);
      memcpy(v66, v65, v64);
      memcpy(&v66[v41], &v65[v41], v64);
      memcpy(&v66[(2 * v41)], &v65[(2 * v41)], v64);
      memcpy(&v66[(3 * v41)], &v65[(3 * v41)], v64);
      memcpy(&v66[(4 * v41)], &v65[(4 * v41)], v64);
      memcpy(&v66[(5 * v41)], &v65[(5 * v41)], v64);
      memcpy(&v66[(6 * v41)], &v65[(6 * v41)], v64);
      v67 = (7 * v41);
      v68 = &v66[v67];
      v69 = &v65[v67];
      v70 = v64;
    }
    else
    {
      v172 = (9 * (_DWORD)v40);
      v173 = (10 * (_DWORD)v40);
      v137 = v47;
      v174 = (12 * (_DWORD)v40);
      v175 = (2 * (_DWORD)v40);
      v176 = (3 * (_DWORD)v40);
      v177 = (4 * (_DWORD)v40);
      v178 = (5 * (_DWORD)v40);
      v179 = (6 * (_DWORD)v40);
      v180 = (7 * (_DWORD)v40);
      v181 = (11 * (_DWORD)v40);
      v182 = (8 * (_DWORD)v40);
      v183 = (13 * (_DWORD)v40);
      v184 = (14 * (_DWORD)v40);
      v185 = (15 * (_DWORD)v40);
      v115 = (*(_DWORD *)(v37 + 164) - v43);
      memcpy(v46, v45, v115);
      memcpy(__dst, v48, v115);
      memcpy(v141, v140, v115);
      memcpy(v145, v144, v115);
      memcpy(v147, v146, v115);
      memcpy(v151, v150, v115);
      memcpy(v153, v152, v115);
      memcpy(v157, v156, v115);
      memcpy(v160, __src, v115);
      memcpy(v142, v143, v115);
      memcpy(v148, v149, v115);
      memcpy(v154, v155, v115);
      memcpy(v158, v162, v115);
      memcpy(v164, v166, v115);
      memcpy(v168, v170, v115);
      memcpy(v186, v63, v115);
      v116 = (char *)(*(_QWORD *)(v37 + 72) + v43 + *(_DWORD *)(v37 + 184) * 8 * v34);
      v117 = (char *)(*(_QWORD *)(v38 + 72) + v43 + *(_DWORD *)(v38 + 184) * 8 * v34);
      memcpy(v117, v116, v115);
      memcpy(&v117[v41], &v116[v41], v115);
      v171 = (2 * v41);
      memcpy(&v117[v171], &v116[v171], v115);
      v169 = (3 * v41);
      memcpy(&v117[v169], &v116[v169], v115);
      v167 = (4 * v41);
      memcpy(&v117[v167], &v116[v167], v115);
      v165 = (5 * v41);
      memcpy(&v117[v165], &v116[v165], v115);
      v163 = (6 * v41);
      memcpy(&v117[v163], &v116[v163], v115);
      v118 = (7 * v41);
      v119 = &v117[v118];
      v120 = v118;
      memcpy(v119, &v116[v118], v115);
      v121 = v35 - (v34 + 1);
      if (v35 != v34 + 1)
      {
        v128 = *(unsigned int *)(v37 + 164);
        if ((_DWORD)v128 != *(_DWORD *)(v37 + 180))
          return 4294958327;
        v159 = (char *)v41;
        v161 = v40;
        v129 = v121 <= 1 ? 1 : v35 - (v34 + 1);
        v130 = 16 * v34 + 16;
        v131 = 8 * v34 + 8;
        v187 = v120;
        do
        {
          v132 = (const void *)(*(_QWORD *)(v37 + 64) + (*(_DWORD *)(v37 + 168) * v130));
          v133 = (void *)(*(_QWORD *)(v38 + 64) + (*(_DWORD *)(v38 + 168) * v130));
          memcpy(v133, v132, v128);
          memcpy(&v161[(_QWORD)v133], &v161[(_QWORD)v132], v128);
          memcpy((char *)v133 + v175, (char *)v132 + v175, v128);
          memcpy((char *)v133 + v176, (char *)v132 + v176, v128);
          memcpy((char *)v133 + v177, (char *)v132 + v177, v128);
          memcpy((char *)v133 + v178, (char *)v132 + v178, v128);
          memcpy((char *)v133 + v179, (char *)v132 + v179, v128);
          memcpy((char *)v133 + v180, (char *)v132 + v180, v128);
          memcpy((char *)v133 + v182, (char *)v132 + v182, v128);
          memcpy((char *)v133 + v172, (char *)v132 + v172, v128);
          memcpy((char *)v133 + v173, (char *)v132 + v173, v128);
          memcpy((char *)v133 + v181, (char *)v132 + v181, v128);
          memcpy((char *)v133 + v174, (char *)v132 + v174, v128);
          memcpy((char *)v133 + v183, (char *)v132 + v183, v128);
          memcpy((char *)v133 + v184, (char *)v132 + v184, v128);
          memcpy((char *)v133 + v185, (char *)v132 + v185, v128);
          v134 = (const void *)(*(_QWORD *)(v37 + 72) + (*(_DWORD *)(v37 + 184) * v131));
          v135 = (void *)(*(_QWORD *)(v38 + 72) + (*(_DWORD *)(v38 + 184) * v131));
          memcpy(v135, v134, v128);
          memcpy(&v159[(_QWORD)v135], &v159[(_QWORD)v134], v128);
          memcpy((char *)v135 + v171, (char *)v134 + v171, v128);
          memcpy((char *)v135 + v169, (char *)v134 + v169, v128);
          memcpy((char *)v135 + v167, (char *)v134 + v167, v128);
          memcpy((char *)v135 + v165, (char *)v134 + v165, v128);
          memcpy((char *)v135 + v163, (char *)v134 + v163, v128);
          v136 = (char *)v134 + v187;
          v120 = v187;
          memcpy((char *)v135 + v187, v136, v128);
          v130 += 16;
          v131 += 8;
          --v121;
          --v129;
        }
        while (v129);
        v41 = (unint64_t)v159;
        v40 = v161;
        if (v121)
          return 4294958327;
      }
      v122 = v120;
      v123 = (char *)(*(_QWORD *)(v37 + 64) + *(_DWORD *)(v37 + 168) * 16 * v35);
      v124 = (char *)(*(_QWORD *)(v38 + 64) + *(_DWORD *)(v38 + 168) * 16 * v35);
      v125 = 16 * v137 + 16;
      memcpy(v124, v123, v125);
      memcpy(&v40[(_QWORD)v124], &v40[(_QWORD)v123], v125);
      memcpy(&v124[v175], &v123[v175], v125);
      memcpy(&v124[v176], &v123[v176], v125);
      memcpy(&v124[v177], &v123[v177], v125);
      memcpy(&v124[v178], &v123[v178], v125);
      memcpy(&v124[v179], &v123[v179], v125);
      memcpy(&v124[v180], &v123[v180], v125);
      memcpy(&v124[v182], &v123[v182], v125);
      memcpy(&v124[v172], &v123[v172], v125);
      memcpy(&v124[v173], &v123[v173], v125);
      memcpy(&v124[v181], &v123[v181], v125);
      memcpy(&v124[v174], &v123[v174], v125);
      memcpy(&v124[v183], &v123[v183], v125);
      memcpy(&v124[v184], &v123[v184], v125);
      memcpy(&v124[v185], &v123[v185], v125);
      v126 = (char *)(*(_QWORD *)(v37 + 72) + *(_DWORD *)(v37 + 184) * 8 * v35);
      v127 = (char *)(*(_QWORD *)(v38 + 72) + *(_DWORD *)(v38 + 184) * 8 * v35);
      memcpy(v127, v126, v125);
      memcpy(&v127[v41], &v126[v41], v125);
      memcpy(&v127[v171], &v126[v171], v125);
      memcpy(&v127[v169], &v126[v169], v125);
      memcpy(&v127[v167], &v126[v167], v125);
      memcpy(&v127[v165], &v126[v165], v125);
      memcpy(&v127[v163], &v126[v163], v125);
      v68 = &v127[v122];
      v69 = &v126[v122];
      v70 = v125;
    }
    memcpy(v68, v69, v70);
    return 0;
  }
  if (*(_BYTE *)(a1 + 29))
    return 4294958327;
  v7 = a2[1];
  v8 = a3[1];
  if (v7 > v8)
    return 4294958327;
  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v4);
  v11 = *(unsigned int *)(v10 + 168);
  if ((_DWORD)v11 != *(_DWORD *)(v9 + 168))
    return 4294958327;
  v12 = *(unsigned int *)(v10 + 184);
  if ((_DWORD)v12 != *(_DWORD *)(v9 + 184))
    return 4294958327;
  v13 = *a2;
  v14 = *a3;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v5);
  if (v7 == v8)
  {
    v16 = v14 - v13;
    if (v14 >= v13)
    {
      v17 = 0;
      v18 = 16 * v13;
      v19 = v11 * 16 * v7;
      v20 = *(_QWORD *)(v10 + 64) + v18 + v19;
      v21 = *(_QWORD *)(v15 + 64) + v18 + *(_DWORD *)(v15 + 168) * 16 * v7;
      v22 = *(_QWORD *)(v9 + 64) + v18 + v19;
      v23 = 16 * v16 + 16;
      v24 = v23 >> 4;
      if (v23 >> 4 <= 1)
        LODWORD(v24) = 1;
      do
      {
        if ((_DWORD)v23)
        {
          v25 = 0;
          do
          {
            *(uint8x16_t *)(v22 + 16 * v25) = vrhaddq_u8(*(uint8x16_t *)(v20 + 16 * v25), *(uint8x16_t *)(v21 + 16 * v25));
            ++v25;
          }
          while ((_DWORD)v24 != (_DWORD)v25);
        }
        v20 += v11;
        v21 += v11;
        v22 += v11;
        ++v17;
      }
      while (v17 != 16);
      v26 = 0;
      v27 = 8 * v7;
      v28 = *(_QWORD *)(v10 + 72) + v18 + (*(_DWORD *)(v10 + 184) * v27);
      v29 = *(_QWORD *)(v15 + 72) + v18 + (*(_DWORD *)(v15 + 184) * v27);
      v30 = *(_QWORD *)(v9 + 72) + v18 + (*(_DWORD *)(v9 + 184) * v27);
      v31 = v23 >> 4;
      if (v23 >> 4 <= 1)
        LODWORD(v31) = 1;
      do
      {
        if ((_DWORD)v23)
        {
          v32 = 0;
          do
          {
            *(uint8x16_t *)(v30 + 16 * v32) = vrhaddq_u8(*(uint8x16_t *)(v28 + 16 * v32), *(uint8x16_t *)(v29 + 16 * v32));
            ++v32;
          }
          while ((_DWORD)v31 != (_DWORD)v32);
        }
        result = 0;
        v28 += v12;
        v29 += v12;
        v30 += v12;
        ++v26;
      }
      while (v26 != 8);
      return result;
    }
    return 4294958327;
  }
  v71 = 0;
  v72 = 16 * v13;
  v73 = v11 * 16 * v7;
  v74 = *(_QWORD *)(v10 + 64) + v72 + v73;
  v75 = *(_QWORD *)(v15 + 64) + v72 + *(_DWORD *)(v15 + 168) * 16 * v7;
  v76 = *(_QWORD *)(v9 + 64) + v72 + v73;
  v77 = *(_DWORD *)(v10 + 164) - 16 * v13;
  v78 = v77 >> 4;
  if (v77 >> 4 <= 1)
    LODWORD(v78) = 1;
  do
  {
    if (v77 >= 0x10)
    {
      v79 = 0;
      do
      {
        *(uint8x16_t *)(v76 + 16 * v79) = vrhaddq_u8(*(uint8x16_t *)(v74 + 16 * v79), *(uint8x16_t *)(v75 + 16 * v79));
        ++v79;
      }
      while ((_DWORD)v78 != (_DWORD)v79);
    }
    v74 += v11;
    v75 += v11;
    v76 += v11;
    ++v71;
  }
  while (v71 != 16);
  v80 = 0;
  v81 = *(_QWORD *)(v10 + 72) + v72 + *(_DWORD *)(v10 + 184) * 8 * v7;
  v82 = *(_QWORD *)(v15 + 72) + v72 + *(_DWORD *)(v15 + 184) * 8 * v7;
  v83 = *(_QWORD *)(v9 + 72) + v72 + *(_DWORD *)(v9 + 184) * 8 * v7;
  v84 = v77 >> 4;
  if (v77 >> 4 <= 1)
    LODWORD(v84) = 1;
  do
  {
    if (v77 >= 0x10)
    {
      v85 = 0;
      do
      {
        *(uint8x16_t *)(v83 + 16 * v85) = vrhaddq_u8(*(uint8x16_t *)(v81 + 16 * v85), *(uint8x16_t *)(v82 + 16 * v85));
        ++v85;
      }
      while ((_DWORD)v84 != (_DWORD)v85);
    }
    v81 += v12;
    v82 += v12;
    v83 += v12;
    ++v80;
  }
  while (v80 != 8);
  v86 = v7 + 1;
  v87 = v8 - v86;
  if (v8 != v86)
  {
    v102 = *(unsigned int *)(v10 + 164);
    if ((_DWORD)v102 != *(_DWORD *)(v10 + 180))
      return 4294958327;
    v103 = 0;
    if (v87 <= 1)
      v87 = 1;
    v104 = v102 >> 4;
    if (v102 >> 4 <= 1)
      LODWORD(v104) = 1;
    do
    {
      v105 = 0;
      v106 = *(_QWORD *)(v10 + 64) + *(_DWORD *)(v10 + 168) * 16 * v86;
      v107 = *(_QWORD *)(v15 + 64) + *(_DWORD *)(v15 + 168) * 16 * v86;
      v108 = *(_QWORD *)(v9 + 64) + *(_DWORD *)(v9 + 168) * 16 * v86;
      do
      {
        if (v102 >= 0x10)
        {
          v109 = 0;
          do
          {
            *(uint8x16_t *)(v108 + 16 * v109) = vrhaddq_u8(*(uint8x16_t *)(v106 + 16 * v109), *(uint8x16_t *)(v107 + 16 * v109));
            ++v109;
          }
          while ((_DWORD)v104 != (_DWORD)v109);
        }
        v106 += v11;
        v107 += v11;
        v108 += v11;
        ++v105;
      }
      while (v105 != 16);
      v110 = 0;
      v111 = *(_QWORD *)(v10 + 72) + *(_DWORD *)(v10 + 184) * 8 * v86;
      v112 = *(_QWORD *)(v15 + 72) + *(_DWORD *)(v15 + 184) * 8 * v86;
      v113 = *(_QWORD *)(v9 + 72) + *(_DWORD *)(v9 + 184) * 8 * v86;
      do
      {
        if (v102 >= 0x10)
        {
          v114 = 0;
          do
          {
            *(uint8x16_t *)(v113 + 16 * v114) = vrhaddq_u8(*(uint8x16_t *)(v111 + 16 * v114), *(uint8x16_t *)(v112 + 16 * v114));
            ++v114;
          }
          while ((_DWORD)v104 != (_DWORD)v114);
        }
        v111 += v12;
        v112 += v12;
        v113 += v12;
        ++v110;
      }
      while (v110 != 8);
      ++v86;
      ++v103;
    }
    while (v103 != v87);
    if (v86 != v8)
      return 4294958327;
  }
  v88 = 0;
  v89 = *(_QWORD *)(v10 + 64) + *(_DWORD *)(v10 + 168) * 16 * v8;
  v90 = *(_QWORD *)(v15 + 64) + *(_DWORD *)(v15 + 168) * 16 * v8;
  v91 = *(_QWORD *)(v9 + 64) + *(_DWORD *)(v9 + 168) * 16 * v8;
  v92 = 16 * v14 + 16;
  v93 = v92 >> 4;
  if (v92 >> 4 <= 1)
    LODWORD(v93) = 1;
  do
  {
    if ((_DWORD)v92)
    {
      v94 = 0;
      do
      {
        *(uint8x16_t *)(v91 + 16 * v94) = vrhaddq_u8(*(uint8x16_t *)(v89 + 16 * v94), *(uint8x16_t *)(v90 + 16 * v94));
        ++v94;
      }
      while ((_DWORD)v93 != (_DWORD)v94);
    }
    v89 += v11;
    v90 += v11;
    v91 += v11;
    ++v88;
  }
  while (v88 != 16);
  v95 = 0;
  v96 = 8 * v8;
  v97 = *(_QWORD *)(v10 + 72) + (*(_DWORD *)(v10 + 184) * v96);
  v98 = *(_QWORD *)(v15 + 72) + (*(_DWORD *)(v15 + 184) * v96);
  v99 = *(_QWORD *)(v9 + 72) + (*(_DWORD *)(v9 + 184) * v96);
  v100 = v92 >> 4;
  if (v92 >> 4 <= 1)
    LODWORD(v100) = 1;
  do
  {
    if ((_DWORD)v92)
    {
      v101 = 0;
      do
      {
        *(uint8x16_t *)(v99 + 16 * v101) = vrhaddq_u8(*(uint8x16_t *)(v97 + 16 * v101), *(uint8x16_t *)(v98 + 16 * v101));
        ++v101;
      }
      while ((_DWORD)v100 != (_DWORD)v101);
    }
    result = 0;
    v97 += v12;
    v98 += v12;
    v99 += v12;
    ++v95;
  }
  while (v95 != 8);
  return result;
}

uint64_t sub_2160B3498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, int a8, int a9)
{
  uint64_t v15;
  char v16;
  int v17;
  _BYTE *v18;
  char v19;

  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a3 + 832);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a3 + 832);
  if (!*(_BYTE *)(a7 + 32))
  {
    if (v15 && *(_BYTE *)(v15 + 33))
    {
      v16 = 2;
      goto LABEL_9;
    }
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  if (!v15 || *(_BYTE *)(v15 + 33))
    goto LABEL_8;
  v16 = 1;
LABEL_9:
  *(_BYTE *)(a1 + 187) = v16;
  *(_QWORD *)(a1 + 224) = a3;
  *(_QWORD *)(a1 + 232) = a3 + 272;
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a7 + 32);
  *(_WORD *)(a1 + 31) = 0;
  if ((a8 & 0xFFFFFFFD) == 1 && a9)
  {
    v17 = 0;
    *(_DWORD *)(a1 + 240) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a3 + 816);
    v17 = *(_DWORD *)(a3 + 820);
  }
  *(_DWORD *)(a1 + 244) = v17;
  *(_BYTE *)(a1 + 28) = *(_DWORD *)(a7 + 20);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a7 + 32);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a7 + 33);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a6 + 8) == 1;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 216) = a4;
  **(_BYTE **)(a1 + 48) = a5[1338];
  v18 = *(_BYTE **)(a1 + 48);
  v18[4] = *(_BYTE *)(a6 + 85);
  v18[5] = *(_BYTE *)(a7 + 60);
  v18[2] = *(_DWORD *)(a7 + 64);
  v18[3] = *(_DWORD *)(a7 + 68);
  sub_2160B3694(a6, (_DWORD *)a7, (_QWORD *)a1);
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 56) = *(_DWORD *)(a6 + 80);
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 57) = *(_BYTE *)(a6 + 97);
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1) = a5[16];
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a6 + 87);
  v19 = a5[1337];
  if (v19)
    v19 = *(_BYTE *)(a7 + 32) == 0;
  *(_BYTE *)(a1 + 185) = v19;
  sub_2160B39A4((uint64_t)a5, a6, a7, a1);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a4 + 1280);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 188))
    return 0;
  if (*(_BYTE *)(a1 + 185))
  {
    *(_BYTE *)(a1 + 189) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 189) = 1;
    if (!*(_QWORD *)(a1 + 200))
      return 4294967188;
  }
  if (*(_QWORD *)(a1 + 208))
    return 0;
  else
    return 4294967188;
}

uint64_t sub_2160B3694(uint64_t result, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t i;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t j;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;

  v3 = a3[6];
  if (*(_DWORD *)(result + 68) == 2 && ((v4 = a2[5], v4 != 6) ? (v5 = v4 == 1) : (v5 = 1), v5))
  {
    *(_QWORD *)(v3 + 332) = 0x500000005;
    *(_QWORD *)(v3 + 348) = 0x2000000020;
  }
  else
  {
    *(_DWORD *)(v3 + 332) = a2[218];
    *(_DWORD *)(v3 + 336) = a2[219];
    *(_DWORD *)(v3 + 348) = 1 << a2[218];
    *(_DWORD *)(v3 + 352) = 1 << a2[219];
    v6 = a2[218];
    if (v6)
      v7 = 1 << (v6 - 1);
    else
      v7 = 0;
    *(_DWORD *)(v3 + 340) = v7;
    v8 = a2[219];
    if (v8)
      v9 = 1 << (v8 - 1);
    else
      v9 = 0;
    *(_DWORD *)(v3 + 344) = v9;
  }
  v10 = a2[5];
  if (v10 != 5 && v10)
    v11 = 0;
  else
    v11 = *(unsigned __int8 *)(result + 64);
  *(_DWORD *)(v3 + 356) = v11;
  v12 = a2[5];
  if (v12 == 6 || v12 == 1)
    v13 = *(_DWORD *)(result + 68);
  else
    v13 = 0;
  *(_DWORD *)(v3 + 360) = v13;
  if (v11 | v13)
  {
    v14 = a2[5];
    v15 = a3[6];
    v17 = a2[16];
    v16 = a2[17];
    if ((int)v17 <= v16)
      v18 = a2[17];
    else
      v18 = a2[16];
    if ((v14 == 6 || v14 == 1) && *(_DWORD *)(result + 68) == 2)
    {
      if ((v18 & 0x80000000) == 0)
      {
        v19 = (v18 + 1);
        v20 = v15 + 1132;
        do
        {
          *(_DWORD *)(v20 + 8) = 0;
          *(_QWORD *)v20 = 0;
          *(_QWORD *)(v20 + 384) = 0;
          *(_DWORD *)(v20 + 392) = 0;
          v20 += 12;
          --v19;
        }
        while (v19);
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      v21 = 0;
      v22 = (v18 + 1);
      v23 = a3[6];
      v24 = a2;
      do
      {
        for (i = 0; i != 3; ++i)
        {
          v26 = (_DWORD *)(v23 + i * 4);
          v26[91] = v24[i + 252];
          v26[187] = v24[i + 348];
          v26[283] = v24[i + 444];
          v26[379] = v24[i + 540];
        }
        ++v21;
        v24 += 3;
        v23 += 12;
      }
      while (v21 != v22);
    }
    if ((v14 == 6 || v14 == 1) && (v17 & 0x80000000) == 0)
    {
      v27 = 0;
      v28 = a2 + 252;
      v29 = v17 + 1;
      do
      {
        if ((v16 & 0x80000000) == 0)
        {
          v30 = 0;
          v31 = a2 + 348;
          v32 = v15;
          do
          {
            for (j = 0; j != 3; ++j)
            {
              v34 = *(_DWORD *)(result + 68);
              if (v34 == 2)
              {
                v36 = *(_QWORD *)(a3[28] + 8 * v27);
                v37 = *(_DWORD *)(v36 + 1280);
                v38 = *(_QWORD *)(a3[29] + 8 * v30);
                v39 = *(_DWORD *)(v38 + 1280);
                v40 = *(unsigned __int8 *)(v36 + 1364);
                if (v39 != v37 && *(_BYTE *)(v38 + 1364) == 0 && v40 == 0)
                {
                  v44 = (((v39 - v37) >> 1) + 0x4000) / (v39 - v37) * (*(_DWORD *)(a3[27] + 1280) - v37);
                  v45 = (v44 + 32) >> 6;
                  if (v44 > 65503)
                    v45 = 1023;
                  if (v44 < -65568)
                    v45 = -1024;
                  v46 = v32 + j * 4;
                  *(_DWORD *)(v46 + 14188) = v45 >> 2;
                  *(_DWORD *)(v46 + 1900) = 64 - (v45 >> 2);
                  if ((v45 - 516) <= 0xFFFFFCFB)
                  {
                    *(_DWORD *)(v46 + 14188) = 32;
                    *(_DWORD *)(v46 + 1900) = 32;
                  }
                }
                else
                {
                  v43 = v32 + j * 4;
                  *(_DWORD *)(v43 + 1900) = 32;
                  *(_DWORD *)(v43 + 14188) = 32;
                }
              }
              else if (v34 == 1)
              {
                v35 = v32 + j * 4;
                *(_DWORD *)(v35 + 1900) = v28[j];
                *(_DWORD *)(v35 + 14188) = v31[j];
              }
            }
            ++v30;
            v32 += 12;
            v31 += 3;
          }
          while (v30 != v16 + 1);
        }
        ++v27;
        v15 += 384;
        v28 += 3;
      }
      while (v27 != v29);
    }
  }
  return result;
}

double sub_2160B39A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t i;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t k;
  uint64_t j;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  char v39;
  char v40;
  int16x8_t *v41;
  uint64_t v42;
  unint64_t v43;
  int16x8_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  unint64_t v47;
  __int16 v48;
  BOOL v49;
  unint64_t v50;
  __int16 v51;
  __int128 v52;
  _BYTE v54[256];
  _OWORD v55[4];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 88))
  {
    v5 = 1;
    *(_BYTE *)(a4 + 1422193) = 1;
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 21);
    *(_BYTE *)(a4 + 1422193) = *(_BYTE *)(a1 + 21) != 0;
    if (v6)
      v5 = 1;
    else
      v5 = *(_BYTE *)(a4 + 184) != 0;
  }
  *(_BYTE *)(a4 + 1422192) = v5;
  memset(v55, 0, sizeof(v55));
  if (*(_BYTE *)(a2 + 88))
  {
    if (!*(_BYTE *)(a1 + 21))
    {
LABEL_35:
      v17 = 0;
      v18 = 0;
      while (1)
      {
        if (v18 <= 5)
        {
          if (*(_BYTE *)(a2 + v18 + 89))
          {
            if (*(_BYTE *)(a2 + v18 + 98))
            {
              if (v18 >= 3)
                v19 = &unk_254E10CB0;
              else
                v19 = &unk_254E10CA0;
            }
            else
            {
              v19 = (_OWORD *)(a2 + v17 + 106);
            }
            goto LABEL_61;
          }
          if ((_DWORD)v18 != 3 && (_DWORD)v18)
          {
            v19 = (_OWORD *)*((_QWORD *)v55 + (v18 - 1));
            goto LABEL_61;
          }
          if (*(_BYTE *)(a1 + 21))
          {
            v19 = (_OWORD *)*((_QWORD *)v55 + v18);
          }
          else
          {
            if (v18)
              v19 = &unk_254E10CB0;
            else
              v19 = &unk_254E10CA0;
LABEL_61:
            *((_QWORD *)v55 + v18) = v19;
          }
          *(_OWORD *)(a4 + 1422194 + v17) = *v19;
          goto LABEL_63;
        }
        if (*(_BYTE *)(a2 + v18 + 89))
          break;
        if (!*(_BYTE *)(a1 + 21))
          goto LABEL_51;
        v21 = (__int128 *)*((_QWORD *)v55 + v18);
LABEL_55:
        v22 = (_OWORD *)(a4 + ((unint64_t)(v18 - 6) << 6) + 1422290);
        v23 = *v21;
        v24 = v21[1];
        v25 = v21[3];
        v22[2] = v21[2];
        v22[3] = v25;
        *v22 = v23;
        v22[1] = v24;
LABEL_63:
        ++v18;
        v17 += 16;
        if (v18 == 8)
          goto LABEL_64;
      }
      v20 = (v18 - 6);
      if (*(_BYTE *)(a2 + v20 + 104))
      {
LABEL_51:
        if (v18 == 6)
          v21 = (__int128 *)&unk_254E10CC0;
        else
          v21 = (__int128 *)&unk_254E10D00;
      }
      else
      {
        v21 = (__int128 *)(a2 + (v20 << 6) + 202);
      }
      *((_QWORD *)v55 + v18) = v21;
      goto LABEL_55;
    }
  }
  else if (!*(_BYTE *)(a1 + 21))
  {
    *(_QWORD *)&v52 = 0x1010101010101010;
    *((_QWORD *)&v52 + 1) = 0x1010101010101010;
    *(_OWORD *)(a4 + 1422258) = v52;
    *(_OWORD *)(a4 + 1422274) = v52;
    *(_OWORD *)(a4 + 1422226) = v52;
    *(_OWORD *)(a4 + 1422242) = v52;
    *(_OWORD *)(a4 + 1422194) = v52;
    *(_OWORD *)(a4 + 1422210) = v52;
    if (*(_BYTE *)(a3 + 32) || *(_BYTE *)(a1 + 1337))
    {
      *(_OWORD *)(a4 + 1422482) = v52;
      *(_OWORD *)(a4 + 1422498) = v52;
      *(_OWORD *)(a4 + 1422450) = v52;
      *(_OWORD *)(a4 + 1422466) = v52;
      *(_OWORD *)(a4 + 1422418) = v52;
      *(_OWORD *)(a4 + 1422434) = v52;
    }
    memcpy((void *)(a4 + 1422656), &unk_2160F4C50, 0x300uLL);
    memcpy((void *)(a4 + 1423424), &unk_2160F4C50, 0x300uLL);
    v46.i64[0] = 0x10000D0010000D0;
    *(_OWORD *)(a4 + 1424224) = xmmword_2160F4FD0;
    *(_OWORD *)(a4 + 1424240) = unk_2160F4FE0;
    *(_OWORD *)(a4 + 1424256) = xmmword_2160F4FF0;
    *(_OWORD *)(a4 + 1424272) = unk_2160F5000;
    *(_OWORD *)(a4 + 1424192) = xmmword_2160F4FB0;
    *(_OWORD *)(a4 + 1424208) = unk_2160F4FC0;
    *(_OWORD *)(a4 + 1424320) = xmmword_2160F4FD0;
    *(_OWORD *)(a4 + 1424336) = unk_2160F4FE0;
    *(_OWORD *)(a4 + 1424352) = xmmword_2160F4FF0;
    *(_OWORD *)(a4 + 1424368) = unk_2160F5000;
    *(_OWORD *)(a4 + 1424288) = xmmword_2160F4FB0;
    *(_OWORD *)(a4 + 1424304) = unk_2160F4FC0;
    return *(double *)v46.i64;
  }
  v7 = 0;
  for (i = 0; i != 8; ++i)
  {
    if (i > 5)
    {
      v11 = (i - 6);
      if (*(_BYTE *)(a1 + i + 22) && !*(_BYTE *)(a1 + v11 + 36))
      {
        v12 = (__int128 *)(a1 + (v11 << 6) + 134);
      }
      else if (i == 6)
      {
        v12 = (__int128 *)&unk_254E10CC0;
      }
      else
      {
        v12 = (__int128 *)&unk_254E10D00;
      }
      *((_QWORD *)v55 + i) = v12;
      v13 = (_OWORD *)(a4 + (v11 << 6) + 1422290);
      v14 = v12[3];
      v16 = *v12;
      v15 = v12[1];
      v13[2] = v12[2];
      v13[3] = v14;
      *v13 = v16;
      v13[1] = v15;
    }
    else
    {
      if (*(_BYTE *)(a1 + i + 22))
      {
        if (i >= 3)
          v9 = &unk_254E10CB0;
        else
          v9 = &unk_254E10CA0;
        if (*(_BYTE *)(a1 + i + 30))
          v10 = v9;
        else
          v10 = (_OWORD *)(a1 + v7 + 38);
      }
      else if ((_DWORD)i != 3 && (_DWORD)i)
      {
        v10 = (_OWORD *)*((_QWORD *)v55 + (i - 1));
      }
      else if (i)
      {
        v10 = &unk_254E10CB0;
      }
      else
      {
        v10 = &unk_254E10CA0;
      }
      *((_QWORD *)v55 + i) = v10;
      *(_OWORD *)(a4 + 1422194 + v7) = *v10;
    }
    v7 += 16;
  }
  if (*(_BYTE *)(a2 + 88))
    goto LABEL_35;
LABEL_64:
  if (*(_BYTE *)(a3 + 32) || *(_BYTE *)(a1 + 1337))
  {
    v26 = 0;
    v27 = a4 + 1422194;
    v28 = -6;
    do
    {
      if (v26 > 5)
      {
        for (j = 0; j != 64; ++j)
          *(_BYTE *)(a4 + ((unint64_t)(v26 - 6) << 6) + byte_2160F48C4[j] + 1422514) = *(_BYTE *)(a4 + 1422290 + ((unint64_t)v28 << 6) + j);
      }
      else
      {
        for (k = 0; k != 16; ++k)
          *(_BYTE *)(a4 + 16 * v26 + byte_2160F48B4[k] + 1422418) = *(_BYTE *)(v27 + k);
      }
      ++v26;
      ++v28;
      v27 += 16;
    }
    while (v26 != 8);
  }
  v31 = 0;
  v32 = 1;
  do
  {
    v33 = 0;
    v34 = v32;
    do
    {
      *(_WORD *)&v54[128 * v31 + 2 * byte_2160F4904[v33]] = *(unsigned __int8 *)(a4
                                                                                                + 1422290
                                                                                                + (v31 << 6)
                                                                                                + v33);
      ++v33;
    }
    while (v33 != 64);
    v32 = 0;
    v31 = 1;
  }
  while ((v34 & 1) != 0);
  v35 = 0;
  v36 = a4 + 1422656;
  v37 = &xmmword_2160F4950;
  do
  {
    v38 = 0;
    v39 = 1;
    do
    {
      v40 = v39;
      v41 = (int16x8_t *)(v36 + 768 * v38);
      v42 = v38 << 7;
      v43 = -8;
      v44 = (int16x8_t *)v37;
      do
      {
        v45 = *v44++;
        v46 = vmulq_s16(v45, *(int16x8_t *)&v54[v42]);
        *v41++ = v46;
        v43 += 8;
        v42 += 16;
      }
      while (v43 < 0x38);
      v39 = 0;
      v38 = 1;
    }
    while ((v40 & 1) != 0);
    ++v35;
    v36 += 128;
    v37 += 8;
  }
  while (v35 != 6);
  v47 = 0;
  v48 = *(unsigned __int8 *)(a4 + 1422194);
  do
  {
    *(_WORD *)(a4 + 1424192 + 2 * v47) = asc_2160F4F50[v47] * v48;
    v49 = v47 >= 0x28;
    v47 += 8;
  }
  while (!v49);
  v50 = 0;
  v51 = *(unsigned __int8 *)(a4 + 1422418);
  do
  {
    *(_WORD *)(a4 + 1424288 + 2 * v50) = asc_2160F4F50[v50] * v51;
    v49 = v50 >= 0x28;
    v50 += 8;
  }
  while (!v49);
  return *(double *)v46.i64;
}

uint64_t sub_2160B3EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int *a7, _DWORD *a8, _DWORD *a9, unsigned __int8 a10, int a11, int a12, _DWORD *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  signed int v27;
  int v28;
  int *v29;
  unsigned int *v30;
  _BOOL4 v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  __n128 v66;
  int16x8_t v67;
  double v68;
  double v69;
  double v70;
  int8x16_t v71;
  int16x8_t v72;
  int v73;
  __n128 v74;
  int16x8_t v75;
  int32x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  unsigned int *v94;
  unint64_t v95;
  char v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  double v100;
  int8x16_t v101;
  double v102;
  double v103;
  double v104;
  int8x16_t v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int8x16_t *v110;
  uint64_t v111;
  uint64_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  unsigned int v116;
  char v117;
  char v118;
  uint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  signed int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int8x16_t *v143;
  int8x16_t v144;
  int8x16_t *v145;
  int8x16_t v146;
  int v147;
  int v148;
  int8x16_t *v149;
  int8x16_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  BOOL v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int8x16_t *v187;
  int8x16_t v188;
  int8x16_t *v189;
  int8x16_t v190;
  int v191;
  int v192;
  int8x16_t *v193;
  int8x16_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  uint64_t v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  int v224;
  unsigned int *v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  unint64_t v232;
  char v233;
  unsigned int *v234;
  unsigned int v235;
  unint64_t v236;
  int v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  unsigned int v247;
  unsigned int v248;
  unint64_t v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int *v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  unsigned __int8 *v257;
  uint64_t v258;
  _BYTE *v259;
  uint64_t v260;
  unsigned __int8 *v261;
  uint64_t v262;
  _BYTE *v263;
  char v264;
  unint64_t v265;
  unsigned int *v266;
  _BOOL4 v267;
  uint64_t v269;
  unsigned int *v270;
  uint64_t v271;
  int v272;
  unsigned int *v273;
  char v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int8x16_t *v298;
  int8x16_t v299;
  int8x16_t *v300;
  int8x16_t v301;
  BOOL v302;
  int v303;
  int8x16_t *v304;
  int8x16_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int8x16_t *v341;
  int8x16_t v342;
  int8x16_t *v343;
  int8x16_t v344;
  int v345;
  int8x16_t *v346;
  int8x16_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  __int128 v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  _BOOL4 v368;
  uint64_t v369;
  char v370;
  int v372;
  uint64_t v373;
  _DWORD *v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  unsigned int v378;
  int v379;
  int v380;
  uint64_t **v381;
  uint64_t v382;
  int v383;
  int v384;
  unsigned int v385;
  signed int v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  _BOOL4 v391;
  int v393;
  int v397;
  _BYTE *v399;
  int v400;
  int v401;
  unsigned int v402;
  int v403;
  signed int v404;
  int v405;
  int v406;
  uint64_t v407;
  unsigned __int8 v408;
  unsigned __int8 v409;
  unsigned __int8 *v410;
  _BYTE *v411;
  uint64_t v412;
  unint64_t v413;
  _QWORD v414[3];

  v13 = a4;
  v14 = 0;
  v414[1] = *MEMORY[0x24BDAC8D0];
  v390 = *(_QWORD *)(a1 + 88);
  v385 = *(_DWORD *)(a1 + 4);
  v382 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v382 + 80) = v390 + 32;
  v15 = a4 + 1425504;
  v413 = -1;
  v414[0] = -1;
  v399 = *(_BYTE **)(a4 + 1016);
  v381 = *(uint64_t ***)(a4 + 1176);
  v375 = *(_QWORD *)(a4 + 1184);
  v411 = 0;
  v412 = 0;
  v16 = *(_QWORD *)(a4 + 1104);
  if (v16)
    v17 = (unsigned __int8 *)(v16 + 120);
  else
    v17 = 0;
  v410 = v17;
  v404 = *(_DWORD *)(a1 + 4);
  v18 = *(_DWORD *)(a1 + 16) * v404;
  v407 = 0;
  v378 = *(_BYTE *)(a4 + 1425576) == 0;
  v406 = 0;
  v19 = *(unsigned __int8 *)(a4 + 1161);
  v20 = *(_DWORD *)(a4 + 1425560);
  v401 = v18;
  if (v20 >= v18)
    goto LABEL_375;
  v21 = *(_QWORD *)(a4 + 1425520);
  v22 = *(unsigned __int8 *)(a4 + 1425540);
  if (a12)
  {
    v23 = v20 / v404;
    v24 = v20 / v404 - 1;
    if (v404 > v20)
      v24 = 0;
    v25 = v24 + 2;
    if (v23 >= 4)
      v26 = (v23 & 0xFFFFFFFE) - 2;
    else
      v26 = 0;
    if (*(_BYTE *)(a4 + 1161))
    {
      v25 = v26 + 4;
      v27 = v26;
    }
    else
    {
      v27 = v24;
    }
    v400 = v25 * v404 - 1;
  }
  else
  {
    v400 = 0;
    v27 = 0;
  }
  v397 = *(_DWORD *)(a4 + 1428264) + *(_DWORD *)(a3 + 72) + 26;
  if (*(_BYTE *)(a4 + 1164))
  {
    if (*(_BYTE *)(a4 + 1161))
    {
      if (!v375)
        return 4294958327;
      sub_2160B13A8(v375, a4 + 1425504);
      sub_2160B1408(v375, *(_DWORD *)(v15 + 60), *(unsigned __int8 *)(v15 + 2756), (char)v397);
    }
    else
    {
      sub_215FC147C(v381, a2, a3, a4 + 1425544, v15);
    }
  }
  LODWORD(v376) = v21;
  v377 = v22;
  v386 = v27;
  v384 = 0;
  v372 = 0;
  v379 = 0;
  v383 = 0;
  v370 = 0;
  v28 = 0;
  v373 = v390 + 1152;
  v29 = (int *)(v13 + 976);
  v380 = 2 * v404;
  v30 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v13 + 1312) + 48) + 12 * a5);
  *v30 = (63 * *(_DWORD *)(a1 + 156)) >> 6;
  v30[1] = 1;
  v32 = (a10 & 0xFD) == 1 && a11 != 0;
  v368 = v32;
  v374 = (_DWORD *)(v13 + 1458280);
  v33 = v13 + 1458264;
  v34 = 1;
  v403 = v19;
  v387 = v13;
  v388 = v15;
  v369 = v13 + 1458264;
  do
  {
    if (v20 >= v401)
    {
LABEL_371:
      v14 = 4294958327;
      goto LABEL_375;
    }
    if (*(_BYTE *)(v13 + 1161))
    {
      v35 = v34;
      v36 = v20 / v380;
      v37 = v20 % v380;
      if (v20 % v380 >= 0)
        v38 = v20 % v380;
      else
        v38 = v37 + 1;
      v39 = v38 >> 1;
      v40 = v20 & 1;
      v41 = v40 | (2 * v36);
    }
    else
    {
      v35 = v34;
      v36 = v20 / v404;
      v37 = v20 % v404;
      v40 = v20 & 1;
      v39 = v20 % v404;
      v41 = v20 / v404;
    }
    *(_DWORD *)(v13 + 976) = v39;
    *(_DWORD *)(v13 + 988) = v41;
    *(_DWORD *)(v13 + 980) = v41;
    v42 = v36 & 1;
    v43 = *(_QWORD *)(v33 + 8 * (v42 ^ 1));
    *(_QWORD *)(v15 + 32752) = v43;
    *(_QWORD *)(v15 + 32744) = *(_QWORD *)(v33 + 8 * v42);
    *(_QWORD *)(v13 + 1152) = v43 + 400 * v37;
    v402 = v37;
    *(_QWORD *)(*(_QWORD *)(v15 + 32752) + 400 * v37 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 1192) + 1152)
                                                                                        + 8 * a6));
    **(_DWORD **)(v13 + 1152) = v20;
    *(_DWORD *)(v13 + 992) = v20;
    *(_BYTE *)(*(_QWORD *)(v13 + 1152) + 144) = 0;
    *(_BYTE *)(*(_QWORD *)(v13 + 1016) + 3) = 0;
    if (v40)
      v44 = *(_BYTE *)(v13 + 1007);
    else
      v44 = 0;
    v34 = v35;
    *(_BYTE *)(v13 + 1007) = v44;
    v45 = *(unsigned __int8 *)(v13 + 1004);
    if (v45 <= 9 && ((1 << v45) & 0x294) != 0)
    {
      v391 = 0;
      goto LABEL_41;
    }
    if (*(_BYTE *)(v13 + 1164))
    {
      v220 = *(_DWORD *)(v15 + 56);
      v221 = *(_QWORD *)(v15 + 32744);
      v222 = *(_QWORD *)(v15 + 32752);
      if (v19)
      {
        sub_2160CB7C4(v220, v221, v222, (uint64_t)v29, v402);
        v223 = (_BYTE *)(*(_QWORD *)(v13 + 1152) + 120);
        v412 = (uint64_t)v223;
        if (v383)
        {
          v224 = v406;
          HIDWORD(v407) = v406;
          *v223 = v406;
        }
        else
        {
          v256 = *(_QWORD *)(v13 + 1104);
          if (v256)
            v257 = (unsigned __int8 *)(v256 + 120);
          else
            v257 = 0;
          v258 = *(_QWORD *)(v13 + 1112);
          if (v258)
            v259 = (_BYTE *)(v258 + 120);
          else
            v259 = 0;
          v410 = v257;
          v411 = v259;
          sub_2160D7B5C(v375, &v410, *(unsigned __int8 *)(v13 + 1004), (_DWORD *)&v407 + 1);
          v224 = HIDWORD(v407);
        }
        v391 = 0;
        if (!v40 && v224)
        {
          ++*(_DWORD *)(v13 + 992);
          sub_2160CB7C4(*(_DWORD *)(v15 + 56), *(_QWORD *)(v15 + 32744), *(_QWORD *)(v15 + 32752), (uint64_t)v29, v402 + 1);
          v260 = *(_QWORD *)(v13 + 1104);
          v261 = (unsigned __int8 *)(v260 + 120);
          if (!v260)
            v261 = 0;
          v262 = *(_QWORD *)(v13 + 1112);
          if (v262)
            v263 = (_BYTE *)(v262 + 120);
          else
            v263 = 0;
          v410 = v261;
          v411 = v263;
          if (*(_BYTE *)(v13 + 1008) == 1)
            *v263 = BYTE4(v407);
          v412 = 0;
          sub_2160D7B5C(v375, &v410, *(unsigned __int8 *)(v13 + 1004), &v406);
          v412 = *(_QWORD *)(v13 + 1152) + 120;
          if (v406)
          {
            v264 = *(_BYTE *)(v13 + 1008);
          }
          else
          {
            sub_2160CBAE8(*(unsigned int *)(v15 + 56), *(_QWORD *)(v15 + 32744), *(_QWORD *)(v15 + 32752), (uint64_t)v29, v402 + 1, (uint64_t)&v410);
            sub_2160D582C(v375, &v410, &v407);
            v264 = v407 + 1;
            v379 = 1;
          }
          *(_BYTE *)(v13 + 1007) = v264;
          --*(_DWORD *)(v13 + 992);
          sub_2160CB7C4(*(_DWORD *)(v15 + 56), *(_QWORD *)(v15 + 32744), *(_QWORD *)(v15 + 32752), (uint64_t)v29, v402);
          v391 = 0;
          v46 = 1;
          v383 = 1;
          goto LABEL_42;
        }
        v383 = 0;
      }
      else
      {
        sub_2160CBB14(v220, v221, v222, v29);
        v391 = 0;
        HIDWORD(v407) = sub_215FC1768(v381, v402);
      }
LABEL_41:
      v46 = 1;
LABEL_42:
      v393 = 0;
      v389 = v46;
      while (1)
      {
        if (v20 >= v401)
          goto LABEL_371;
        v47 = v46 - 1;
        if (v46 < v389 || v383)
        {
          if (*(_BYTE *)(v13 + 1161))
          {
            v49 = v20 / v380;
            v50 = v20 % v380;
            if (v20 % v380 >= 0)
              v51 = v20 % v380;
            else
              v51 = v50 + 1;
            v52 = v51 >> 1;
            v53 = v20 & 1 | (2 * v49);
          }
          else
          {
            v49 = v20 / v404;
            v50 = v20 % v404;
            v52 = v20 % v404;
            v53 = v20 / v404;
          }
          *(_DWORD *)(v387 + 976) = v52;
          *(_DWORD *)(v387 + 988) = v53;
          *(_DWORD *)(v387 + 980) = v53;
          v54 = v49 & 1;
          v55 = *(_QWORD *)(v387 + 1458264 + 8 * (v54 ^ 1));
          *(_QWORD *)(v388 + 32752) = v55;
          *(_QWORD *)(v388 + 32744) = *(_QWORD *)(v387 + 1458264 + 8 * v54);
          *(_QWORD *)(v387 + 1152) = v55 + 400 * v50;
          v402 = v50;
          *(_QWORD *)(*(_QWORD *)(v388 + 32752) + 400 * v50 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v387 + 1192) + 1152)
                                                                                               + 8 * a6));
          **(_DWORD **)(v387 + 1152) = v20;
          *(_DWORD *)(v387 + 992) = v20;
          *(_BYTE *)(*(_QWORD *)(v387 + 1152) + 144) = 0;
          *(_BYTE *)(*(_QWORD *)(v387 + 1016) + 3) = 0;
          v48 = *(unsigned __int8 *)(v387 + 1164);
          if (!*(_BYTE *)(v387 + 1164))
          {
            if ((v20 & 1) != 0)
            {
              v13 = v387;
              v15 = v388;
              v57 = *(_BYTE *)(v387 + 1007);
            }
            else
            {
              v57 = 0;
              v13 = v387;
              v15 = v388;
            }
            *(_BYTE *)(v13 + 1007) = v57;
            goto LABEL_67;
          }
          v13 = v387;
          v15 = v388;
        }
        else
        {
          v48 = *(unsigned __int8 *)(v13 + 1164);
          if (!*(_BYTE *)(v13 + 1164))
            goto LABEL_57;
        }
        if (!v34)
          goto LABEL_371;
LABEL_57:
        if (v48)
        {
          v56 = *(unsigned __int8 *)(v13 + 1004);
          if (v56 > 9 || ((1 << v56) & 0x294) == 0)
          {
            if (!(v391 | v47 | HIDWORD(v407)))
              goto LABEL_74;
            if (v19)
              goto LABEL_69;
            goto LABEL_94;
          }
        }
LABEL_67:
        v58 = *(_DWORD *)(v15 + 56);
        v59 = *(_QWORD *)(v15 + 32744);
        v60 = *(_QWORD *)(v15 + 32752);
        if (v19)
        {
          sub_2160CB7C4(v58, v59, v60, (uint64_t)v29, v402);
          if (!(v391 | v47 | HIDWORD(v407)))
            goto LABEL_74;
LABEL_69:
          v61 = *(_BYTE *)(v13 + 1007);
          if (v61)
          {
            v62 = v379;
            if (*(_BYTE *)(v13 + 1164))
              v62 = 0;
            v379 = v62;
          }
          else if (v46 > 2 || v391)
          {
            v61 = *(_BYTE *)(v13 + 1008);
            *(_BYTE *)(v13 + 1007) = v61;
          }
          else
          {
            v61 = v407 + 1;
            *(_BYTE *)(v13 + 1007) = v407 + 1;
            *(_BYTE *)(v13 + 1008) = 0;
          }
          *(_BYTE *)(*(_QWORD *)(v13 + 1152) + 144) = v61 - 1;
          if (*(_BYTE *)(v13 + 1007) == 2)
            *(_DWORD *)(v13 + 980) &= ~1u;
          sub_2160CB7C4(*(_DWORD *)(v15 + 56), *(_QWORD *)(v15 + 32744), *(_QWORD *)(v15 + 32752), (uint64_t)v29, v402);
          goto LABEL_94;
        }
        sub_2160CBB14(v58, v59, v60, v29);
        if (!(v391 | v47 | HIDWORD(v407)))
        {
LABEL_74:
          if (v28)
          {
            v63 = a12
                ? sub_2160B5EF8((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408)
                : sub_2160B253C((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408);
            v14 = v63;
            if ((_DWORD)v63)
              goto LABEL_375;
          }
          if (v19)
          {
            if (v393 || (v20 & 1) == 0)
            {
              v405 = -1;
              if (v379)
              {
                LOBYTE(v73) = v407;
              }
              else if (*(_BYTE *)(v13 + 1164))
              {
                v89 = *(_QWORD *)(v13 + 1104);
                if (v89)
                  v90 = (unsigned __int8 *)(v89 + 120);
                else
                  v90 = 0;
                v91 = *(_QWORD *)(v13 + 1112);
                if (v91)
                  v92 = (_BYTE *)(v91 + 120);
                else
                  v92 = 0;
                v410 = v90;
                v411 = v92;
                v412 = *(_QWORD *)(v13 + 1152) + 120;
                sub_2160D582C(v375, &v410, &v405);
                LOBYTE(v73) = v405;
              }
              else
              {
                v93 = *(_QWORD *)(v15 + 16);
                v94 = *(unsigned int **)(v15 + 24);
                v95 = *(unsigned __int8 *)(v15 + 36);
                v73 = *(_DWORD *)(v15 + 32) >> 31;
                v405 = v73;
                v96 = ++v95 & 7;
                v97 = (unsigned int *)(v93 + (v95 >> 3));
                v98 = bswap32(*v97) << (v95 & 7);
                if (v97 > v94)
                  v97 = v94;
                *(_QWORD *)(v15 + 16) = v97;
                *(_DWORD *)(v15 + 32) = v98;
                *(_BYTE *)(v15 + 36) = v96;
              }
              v379 = 0;
              v64 = v73 + 1;
              *(_BYTE *)(v13 + 1007) = v64;
            }
            else
            {
              v64 = *(_BYTE *)(v13 + 1007);
            }
            *(_BYTE *)(*(_QWORD *)(v13 + 1152) + 144) = v64 - 1;
            if (*(_BYTE *)(v13 + 1007) == 2)
              *(_DWORD *)(v13 + 980) &= ~1u;
            sub_2160CB7C4(*(_DWORD *)(v15 + 56), *(_QWORD *)(v15 + 32744), *(_QWORD *)(v15 + 32752), (uint64_t)v29, v402);
            goto LABEL_136;
          }
          *(_BYTE *)(v13 + 1007) = 0;
          if (*(_BYTE *)(v13 + 1164))
          {
            v65 = sub_215FC1BA0(v381, (unsigned __int16 *)v29, 0, v378, v15, v393);
          }
          else
          {
LABEL_136:
            v65 = sub_2160D367C(v15, v378, a10, a11, (uint64_t)v29);
            if (*(_QWORD *)(v15 + 16) - *(_QWORD *)v15 > *(int *)(v15 + 12))
              goto LABEL_371;
          }
          v14 = v65;
          if ((_DWORD)v65)
            goto LABEL_375;
          if ((v399[54] - 26) < 0xCCu)
            goto LABEL_371;
          v397 = (char)v399[54]
               + (char)v397
               + 52
               - 52
               * (((20165 * ((char)v399[54] + (char)v397 + 52)) >> 20)
                + ((20165 * ((char)v399[54] + (char)v397 + 52)) >> 31));
          v399[55] = v397;
          if (v399[1] - 2 >= 4)
          {
            if (v399[1])
            {
              v14 = 4294966630;
              goto LABEL_375;
            }
            if (v399[2] == 25)
            {
              v111 = sub_2160CBFF8((uint64_t)v29);
            }
            else if (v368)
            {
              v111 = sub_215FCF9F8((unint64_t)v29, v66.n128_f64[0], (int8x16_t)v67, v68, v69, v70, v71, v72);
            }
            else if (*(_BYTE *)(v13 + 1007) == 2)
            {
              v111 = sub_215FCFC40((uint64_t)v29, (int32x4_t)v66, (int8x16_t)v67, v68, v69, v70, v71, v72);
            }
            else
            {
              v111 = sub_215FCF724((unint64_t)v29, (int32x4_t)v66, (int8x16_t)v67, v68, v69, v70, v71, v72);
            }
            v14 = v111;
            if ((_DWORD)v111)
              goto LABEL_375;
          }
          else
          {
            if (*(_BYTE *)(v13 + 1007))
              v99 = sub_215FD1214((uint64_t)v29, v66, *(int32x2_t *)v67.i8, *(int32x2_t *)&v68, *(int32x2_t *)&v69, *(int32x2_t *)&v70);
            else
              v99 = sub_215FD485C((uint64_t)v29, (int16x8_t)v66, v67);
            v14 = v99;
            if ((_DWORD)v99)
              goto LABEL_375;
            v405 = 0;
            v106 = *(unsigned __int8 *)(v13 + 1007);
            if (a12)
            {
              if (v106 == 2)
                v107 = sub_2160CCE30((uint64_t)v29, v100, v101, v102, v103, v104, v105);
              else
                v107 = sub_2160CCFB0((unint64_t)v29, v100, v101, v102, v103, v104, v105);
LABEL_150:
              v405 = v107;
              if (v107)
                goto LABEL_151;
            }
            else
            {
              if (v106 == 2)
              {
                v107 = sub_2160CBE38((uint64_t)v29, v100, v101, v102, v103, v104, v105);
                goto LABEL_150;
              }
              v112 = sub_2160CBD4C((unint64_t)v29, &v405, v100, v101, v102, v103, v104, v105);
              if ((_DWORD)v112)
                goto LABEL_374;
              if (v405)
              {
LABEL_151:
                v108 = *(_QWORD *)(v13 + 1312);
                v109 = *(_DWORD *)(v13 + 976);
                v110 = (int8x16_t *)(*(_QWORD *)(v13 + 1152) + 80);
                if (*(_BYTE *)(v13 + 1007))
                  sub_21609DD30(v108, v109, *(_DWORD *)(v13 + 988), v110);
                else
                  sub_21609DEA0(v108, v109, *(_DWORD *)(v13 + 980), v110);
              }
            }
            v384 = 1;
          }
          v393 = 0;
          v28 = 0;
          v87 = *(unsigned __int8 *)(v15 + 36) - v377 + 8 * (*(_QWORD *)(v15 + 16) - v376);
          v88 = -1;
          v372 = 1;
          v376 = *(_QWORD *)(v15 + 16);
          v377 = *(unsigned __int8 *)(v15 + 36);
          goto LABEL_167;
        }
LABEL_94:
        sub_2160CCC80((uint64_t)v29);
        if (*(_BYTE *)(v13 + 1007))
          v79 = sub_215FD1214((uint64_t)v29, v74, *(int32x2_t *)v75.i8, v76, v77, v78);
        else
          v79 = sub_215FD485C((uint64_t)v29, (int16x8_t)v74, v75);
        v14 = v79;
        if ((_DWORD)v79)
          goto LABEL_375;
        if (*(_BYTE *)(v13 + 1007)
          || (v80 = *(_QWORD *)(v13 + 1024), *(_BYTE *)(v80 + 272) != 1)
          || (v81 = *(_DWORD **)(*(_QWORD *)(v13 + 1152) + 112),
              v82 = *(unsigned __int8 *)(v80 + 24),
              v83 = *(unsigned __int8 *)(v80 + 25),
              v82 != 32)
          && *v81
          || v83 != 32 && v81[1]
          || *(_DWORD *)(v80 + 356)
          || *(_DWORD *)(v80 + 360))
        {
          if (v28)
          {
            v84 = a12
                ? sub_2160B5EF8((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408)
                : sub_2160B253C((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408);
            v14 = v84;
            if ((_DWORD)v84)
              goto LABEL_375;
          }
          v85 = *(unsigned __int8 *)(v13 + 1007);
          if (a12)
            v86 = v85 == 2 ? sub_2160CCF4C((uint64_t)v29) : sub_2160CD094((uint64_t)v29);
          else
            v86 = v85 == 2 ? sub_2160CBF9C((uint64_t)v29) : sub_2160CBF40((uint64_t)v29);
          v14 = v86;
          if ((_DWORD)v86)
            goto LABEL_375;
          v87 = 0;
          v28 = 0;
          v88 = 0;
          goto LABEL_120;
        }
        if (v28)
        {
          if (v82 == v408 && v83 == v409)
          {
            v87 = 0;
            v88 = 0;
            ++v28;
            v413 = *(_QWORD *)v29;
LABEL_120:
            v384 = 1;
            v393 = 1;
            goto LABEL_167;
          }
          if (a12)
            v218 = sub_2160B5EF8((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408);
          else
            v218 = sub_2160B253C((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408);
          v14 = v218;
          if ((_DWORD)v218)
            goto LABEL_375;
        }
        v87 = 0;
        v88 = 0;
        v408 = v82;
        v409 = v83;
        v219 = *(_DWORD *)(v13 + 980);
        LODWORD(v414[0]) = *(_DWORD *)(v13 + 976);
        HIDWORD(v414[0]) = v219;
        v413 = __PAIR64__(v219, v414[0]);
        v384 = 1;
        v393 = 1;
        v28 = 1;
LABEL_167:
        if (*(_BYTE *)(a1 + 544))
          sub_2160B1BA8(v374, (uint64_t)v29, v87);
        if (*(_DWORD *)(*(_QWORD *)(v13 + 1192) + 1164) <= *(_DWORD *)(v13 + 992))
          goto LABEL_373;
        if (v403)
          sub_2160CBC9C((uint64_t)v29, a6);
        else
          sub_2160CBC00((uint64_t)v29, a6);
        if (v399[1] || v399[2] != 25)
        {
          v116 = (char)v397;
          v117 = sub_2160DD8F4((char)v397, *(char *)(*(_QWORD *)(v13 + 1016) + 56));
          v118 = sub_2160DD8F4((char)v397, *(char *)(*(_QWORD *)(v13 + 1016) + 57));
        }
        else
        {
          v116 = 0;
          v117 = 0;
          v118 = 0;
        }
        v119 = *(_QWORD *)(v13 + 1312);
        v120 = *(_BYTE *)(*(_QWORD *)(v13 + 1016) + 3);
        v121 = *(_BYTE *)(v13 + 1007);
        v122 = *(_DWORD *)(v13 + 976) + *(_DWORD *)(v119 + 12) * *(_DWORD *)(v13 + 988);
        *(_WORD *)(*(_QWORD *)(v119 + 72) + 2 * v122) = a5;
        *(_BYTE *)(*(_QWORD *)(v119 + 112) + v122) = v116;
        *(_BYTE *)(*(_QWORD *)(v119 + 120) + v122) = v117;
        *(_BYTE *)(*(_QWORD *)(v119 + 128) + v122) = v118;
        *(_BYTE *)(*(_QWORD *)(v119 + 136) + v122) = v120;
        *(_BYTE *)(*(_QWORD *)(v119 + 144) + v122) = v121;
        v123 = *(_QWORD *)(v119 + 48);
        v124 = 12 * (unsigned __int16)a5;
        v114.i64[0] = *(_QWORD *)(v123 + v124);
        *(int32x2_t *)v113.i8 = vadd_s32(*(int32x2_t *)v114.i8, (int32x2_t)vand_s8((int8x8_t)(v116 | 0x100000000), (int8x8_t)vdup_n_s32(v88)));
        *(_QWORD *)(v123 + v124) = v113.i64[0];
        if (*(_BYTE *)(a3 + 8))
        {
          v19 = v403;
          if (!v403 || (v20 & 1) != 0)
          {
            if (v403)
              v34 = sub_2160D5244(v375) == 0;
            else
              v34 = !sub_215FC17EC(v381);
          }
          else
          {
            v34 = 1;
          }
        }
        else
        {
          v34 = sub_2160AC88C(v15);
          v19 = v403;
        }
        *a7 = v20;
        if (!a12 || v20 != v400)
          goto LABEL_285;
        if (v28)
        {
          v112 = sub_2160B5EF8((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408);
          if ((_DWORD)v112)
            goto LABEL_374;
        }
        if (v19)
        {
          v125 = v386;
          v126 = v386 + 2;
          sub_2160E7F70((uint64_t *)v382, v373, v386, v386 + 2, *(double *)v113.i64, *(int8x8_t *)v114.i8);
          if (*(int *)(v382 + 184) <= 0)
            goto LABEL_486;
          v127 = sub_21609B5F4(v382, *(_QWORD *)(v390 + 64), *(_DWORD *)(v390 + 168), *(_QWORD *)(v390 + 72), *(_DWORD *)(v390 + 184), 0, v385, v386, v126, *(_QWORD *)(v382 + 176), *(_DWORD *)(v382 + 184), (*(_DWORD *)(v390 + 132) + 15) >> 4);
          if ((_DWORD)v127)
            return v127;
          if (!*(_DWORD *)(v382 + 220))
            goto LABEL_283;
          v129 = *(_QWORD *)(v390 + 64);
          v128 = *(_QWORD *)(v390 + 72);
          v130 = *(_DWORD *)(v390 + 168);
          v131 = *(_DWORD *)(v390 + 184);
          if (*(_BYTE *)(v390 + 32))
          {
            v132 = v130;
            v133 = v131;
            if (!*(_BYTE *)(v390 + 37))
              v133 = 0;
            v128 += v133;
            if (!*(_BYTE *)(v390 + 37))
              v132 = 0;
            v129 += v132;
            v130 *= 2;
            v131 *= 2;
          }
          v134 = *(int *)(v390 + 164);
          v135 = *(int *)(v390 + 180);
          v136 = *(int *)(v390 + 132);
          v137 = *(int *)(v390 + 148);
          v138 = 16 * v386;
          v139 = 16 * v386 - 4;
          if (v386 < 1)
            v139 = 0;
          v140 = v138 + 32;
          v141 = v138 + 28;
          if (v140 == (_DWORD)v136)
            v141 = v140;
          v142 = v141 - v139;
          if (v141 > v139)
          {
            v143 = (int8x16_t *)(v129 + v130 * (uint64_t)v139);
            do
            {
              v144 = vqtbl1q_s8((int8x16_t)(16843009 * v143->u8[0]), (int8x16_t)xmmword_2160EE800);
              v143[-2] = v144;
              v143[-1] = v144;
              v145 = (int8x16_t *)((char *)v143 + v134);
              v146 = vqtbl1q_s8((int8x16_t)(16843009 * v143->u8[v134 - 1]), (int8x16_t)xmmword_2160EE800);
              *v145 = v146;
              v145[1] = v146;
              v143 = (int8x16_t *)((char *)v143 + v130);
              --v142;
            }
            while (v142);
          }
          v147 = v139 >> 1;
          v148 = (v141 >> 1) - (v139 >> 1);
          if (v141 >> 1 > v147)
          {
            v149 = (int8x16_t *)(v128 + v131 * (uint64_t)v147);
            do
            {
              v150 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v149->u16[-1] + v135)), (int8x16_t)xmmword_2160EE800);
              v149[-1] = vqtbl1q_s8((int8x16_t)(65537 * v149->u16[0]), (int8x16_t)xmmword_2160EE800);
              *(int8x16_t *)((char *)v149 + v135) = v150;
              v149 = (int8x16_t *)((char *)v149 + v131);
              --v148;
            }
            while (v148);
          }
          if (v386 <= 0)
          {
            v151 = 0;
            v152 = v129 - 32;
            v153 = -2 * v130;
            do
            {
              if ((int)v134 >= -63)
              {
                v154 = 0;
                do
                {
                  v155 = *(_OWORD *)(v152 + v154);
                  *(_OWORD *)(v152 - v130 + v154) = v155;
                  *(_OWORD *)(v152 + v153 + v154) = v155;
                  v156 = v154 < (int)v134 + 48;
                  v154 += 16;
                }
                while (v156);
              }
              v152 += v153;
              ++v151;
            }
            while (v151 != 10);
            v157 = 0;
            v158 = v128 - 16;
            do
            {
              if ((int)v135 >= -31)
              {
                v159 = 0;
                do
                {
                  *(_OWORD *)(v158 - v131 + v159) = *(_OWORD *)(v158 + v159);
                  v156 = v159 < (int)v135 + 16;
                  v159 += 16;
                }
                while (v156);
              }
              v158 -= v131;
              ++v157;
            }
            while (v157 != 8);
          }
          if (v141 == (_DWORD)v136)
          {
            v160 = 0;
            v161 = v130 * (v136 - 1);
            v162 = v129 - 32;
            v163 = v129 - 32 + v161;
            v164 = 2 * v130;
            v165 = v162 + v161 + v130;
            v166 = v162 + v161 + v164;
            do
            {
              if ((int)v134 >= -63)
              {
                v167 = 0;
                do
                {
                  v168 = *(_OWORD *)(v163 + v167);
                  *(_OWORD *)(v165 + v167) = v168;
                  *(_OWORD *)(v166 + v167) = v168;
                  v156 = v167 < v134 + 48;
                  v167 += 16;
                }
                while (v156);
              }
              v163 += v164;
              ++v160;
              v165 += v164;
              v166 += v164;
            }
            while (v160 != 10);
            v169 = 0;
            v170 = v128 + v131 * (v137 - 1) - 16;
            do
            {
              if ((int)v135 >= -31)
              {
                v171 = 0;
                do
                {
                  *(_OWORD *)(v170 + v131 + v171) = *(_OWORD *)(v170 + v171);
                  v156 = v171 < v135 + 16;
                  v171 += 16;
                }
                while (v156);
              }
              v170 += v131;
              ++v169;
            }
            while (v169 != 8);
          }
        }
        else
        {
          v125 = v386;
          v172 = v386 + 1;
          sub_21609E9C8((uint64_t *)v382, v373, 0, v385, v386, v386 + 1, v113, v114, v115);
          if (*(int *)(v382 + 184) <= 0)
          {
LABEL_486:
            puts("cchung: simplifid to do LF for DVDApiDecoder only");
            exit(1);
          }
          if (*(_BYTE *)(v382 + 224) && (*(_BYTE *)(v382 + 225) || *(_BYTE *)(v382 + 226)))
          {
            if (!v386 && !*(_QWORD *)(v382 + 232))
              *(_QWORD *)(v382 + 232) = sub_2160CB5FC((void *)(20 * *(_DWORD *)(v390 + 168)
                                                                           + 11 * *(_DWORD *)(v390 + 184)));
            v112 = sub_21609BD58(v382, 0, v385, v386, v172, v370 & 1, a13);
            if ((_DWORD)v112)
            {
LABEL_374:
              v14 = v112;
              goto LABEL_375;
            }
            v370 = 1;
            v173 = v382;
          }
          else
          {
            v112 = sub_21609B1DC(v382, 0, v385, v386, v172);
            v173 = v382;
            if ((_DWORD)v112)
              goto LABEL_374;
          }
          if (!*(_DWORD *)(v173 + 220))
          {
LABEL_284:
            v28 = 0;
            v400 += v404;
            ++v386;
            goto LABEL_285;
          }
          v175 = *(_QWORD *)(v390 + 64);
          v174 = *(_QWORD *)(v390 + 72);
          v176 = *(_DWORD *)(v390 + 168);
          v177 = *(_DWORD *)(v390 + 184);
          if (*(_BYTE *)(v390 + 32))
          {
            v178 = v176;
            v179 = v177;
            if (!*(_BYTE *)(v390 + 37))
              v179 = 0;
            v174 += v179;
            if (!*(_BYTE *)(v390 + 37))
              v178 = 0;
            v175 += v178;
            v176 *= 2;
            v177 *= 2;
          }
          v180 = *(int *)(v390 + 164);
          v181 = *(int *)(v390 + 180);
          v182 = *(int *)(v390 + 132);
          v183 = *(int *)(v390 + 148);
          v184 = 16 * v386 - 4;
          if (v386 < 1)
            v184 = 0;
          v185 = 16 * v386 + 16;
          if (v185 != (_DWORD)v182)
            v185 = (16 * v386) | 0xC;
          v186 = v185 - v184;
          if (v185 > v184)
          {
            v187 = (int8x16_t *)(v175 + v176 * (uint64_t)v184);
            do
            {
              v188 = vqtbl1q_s8((int8x16_t)(16843009 * v187->u8[0]), (int8x16_t)xmmword_2160EE800);
              v187[-2] = v188;
              v187[-1] = v188;
              v189 = (int8x16_t *)((char *)v187 + v180);
              v190 = vqtbl1q_s8((int8x16_t)(16843009 * v187->u8[v180 - 1]), (int8x16_t)xmmword_2160EE800);
              *v189 = v190;
              v189[1] = v190;
              v187 = (int8x16_t *)((char *)v187 + v176);
              --v186;
            }
            while (v186);
          }
          v191 = v184 >> 1;
          v192 = (v185 >> 1) - (v184 >> 1);
          if (v185 >> 1 > v191)
          {
            v193 = (int8x16_t *)(v174 + v177 * (uint64_t)v191);
            do
            {
              v194 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v193->u16[-1] + v181)), (int8x16_t)xmmword_2160EE800);
              v193[-1] = vqtbl1q_s8((int8x16_t)(65537 * v193->u16[0]), (int8x16_t)xmmword_2160EE800);
              *(int8x16_t *)((char *)v193 + v181) = v194;
              v193 = (int8x16_t *)((char *)v193 + v177);
              --v192;
            }
            while (v192);
          }
          if (v386 <= 0)
          {
            v195 = 0;
            v196 = v175 - 32;
            v197 = -2 * v176;
            do
            {
              if ((int)v180 >= -63)
              {
                v198 = 0;
                do
                {
                  v199 = *(_OWORD *)(v196 + v198);
                  *(_OWORD *)(v196 - v176 + v198) = v199;
                  *(_OWORD *)(v196 + v197 + v198) = v199;
                  v156 = v198 < (int)v180 + 48;
                  v198 += 16;
                }
                while (v156);
              }
              v196 += v197;
              ++v195;
            }
            while (v195 != 10);
            v200 = 0;
            v201 = v174 - 16;
            do
            {
              if ((int)v181 >= -31)
              {
                v202 = 0;
                do
                {
                  *(_OWORD *)(v201 - v177 + v202) = *(_OWORD *)(v201 + v202);
                  v156 = v202 < (int)v181 + 16;
                  v202 += 16;
                }
                while (v156);
              }
              v201 -= v177;
              ++v200;
            }
            while (v200 != 8);
          }
          if (v185 == (_DWORD)v182)
          {
            v203 = 0;
            v204 = v176 * (v182 - 1);
            v205 = v175 - 32;
            v206 = v175 - 32 + v204;
            v207 = 2 * v176;
            v208 = v205 + v204 + v176;
            v209 = v205 + v204 + v207;
            do
            {
              if ((int)v180 >= -63)
              {
                v210 = 0;
                do
                {
                  v211 = *(_OWORD *)(v206 + v210);
                  *(_OWORD *)(v208 + v210) = v211;
                  *(_OWORD *)(v209 + v210) = v211;
                  v156 = v210 < v180 + 48;
                  v210 += 16;
                }
                while (v156);
              }
              v206 += v207;
              ++v203;
              v208 += v207;
              v209 += v207;
            }
            while (v203 != 10);
            v212 = 0;
            v213 = v174 + v177 * (v183 - 1) - 16;
            do
            {
              if ((int)v181 >= -31)
              {
                v214 = 0;
                do
                {
                  *(_OWORD *)(v213 + v177 + v214) = *(_OWORD *)(v213 + v214);
                  v156 = v214 < v181 + 16;
                  v214 += 16;
                }
                while (v156);
              }
              v213 += v177;
              ++v212;
            }
            while (v212 != 8);
          }
        }
        if (!v19)
          goto LABEL_284;
        v126 = v125 + 2;
LABEL_283:
        v28 = 0;
        v400 += v380;
        v386 = v126;
LABEL_285:
        v20 = sub_2160CCE28(v20);
        v46 = v47;
        if (!v47)
        {
          v33 = v369;
          goto LABEL_366;
        }
      }
    }
    v226 = *(_QWORD *)(v15 + 16);
    v225 = *(unsigned int **)(v15 + 24);
    v227 = *(_DWORD *)(v15 + 32);
    v228 = *(unsigned __int8 *)(v15 + 36);
    v229 = __clz(v227 | 1);
    if (!v227)
      ++v229;
    if (v229 > 0xC)
    {
      v236 = v228 + 1;
      v237 = (v228 + 1) & 7;
      v238 = (unsigned int *)(v226 + (v236 >> 3));
      v239 = bswap32(*v238) << v237;
      if (v238 <= v225)
        v240 = v238;
      else
        v240 = *(unsigned int **)(v15 + 24);
      if (v227 < 0)
      {
        v244 = 0;
      }
      else
      {
        v241 = 0;
        do
        {
          v242 = v239;
          v243 = v237;
          v244 = v241 + 1;
          v245 = (v237 + 1);
          v237 = ((_BYTE)v237 + 1) & 7;
          v240 = (unsigned int *)((char *)v240 + (v245 >> 3));
          v239 = bswap32(*v240) << (v245 & 7);
          if (v240 > v225)
            v240 = *(unsigned int **)(v15 + 24);
          if ((v242 & 0x80000000) != 0)
            break;
        }
        while (v241++ < 0x1F);
        if (v244 - 1 > 0x17)
        {
          v247 = v239 >> (48 - v244);
          v248 = ((v243 + 1) & 7) + v244;
          v249 = v248 - 16;
          v233 = v248 & 7;
          v250 = (unsigned int *)((char *)v240 + (v249 >> 3));
          v251 = bswap32(*v250) << v233;
          if (v250 <= v225)
            v252 = v250;
          else
            v252 = *(unsigned int **)(v15 + 24);
          v254 = *(unsigned int *)((char *)v252 + 2);
          v253 = (unsigned int *)((char *)v252 + 2);
          v235 = bswap32(v254) << v233;
          if (v253 <= v225)
            v225 = v253;
          v255 = __PAIR64__(v247, v251) >> 16;
LABEL_350:
          v231 = v255 + ~(-1 << v244);
          goto LABEL_351;
        }
      }
      v255 = v239 >> -(char)v244;
      v265 = v244 + v237;
      v233 = (v244 + v237) & 7;
      v266 = (unsigned int *)((char *)v240 + (v265 >> 3));
      v235 = bswap32(*v266) << v233;
      if (v266 <= v225)
        v225 = v266;
      goto LABEL_350;
    }
    v230 = (v227 << (v229 + 1)) >> -(char)v229;
    if (!v229)
      v230 = 0;
    v231 = v230 + ~(-1 << v229);
    v232 = v228 + 2 * v229 + 1;
    v233 = v232 & 7;
    v234 = (unsigned int *)(v226 + (v232 >> 3));
    v235 = bswap32(*v234) << (v232 & 7);
    if (v234 <= v225)
      v225 = v234;
LABEL_351:
    *(_QWORD *)(v15 + 16) = v225;
    *(_DWORD *)(v15 + 32) = v235;
    *(_BYTE *)(v15 + 36) = v233;
    if (v231 + v20 > v401)
    {
LABEL_373:
      v14 = 4294958327;
      v19 = v403;
      goto LABEL_375;
    }
    v267 = sub_2160AC88C(v15);
    v34 = v267;
    v391 = !v267;
    if (v403)
    {
      if (v231 >= 1 && v267)
      {
        if (v40 && v231 == 1)
        {
          v391 = 0;
        }
        else
        {
          v391 = 0;
          v269 = *(_QWORD *)(v15 + 16);
          v270 = *(unsigned int **)(v15 + 24);
          v271 = *(unsigned __int8 *)(v15 + 36);
          v272 = *(_DWORD *)(v15 + 32) >> 31;
          LODWORD(v407) = v272;
          v273 = (unsigned int *)(v269 + ((unint64_t)++v271 >> 3));
          v274 = v271 & 7;
          if (v273 <= v270)
            v270 = v273;
          v275 = bswap32(*v273);
          *(_QWORD *)(v15 + 16) = v270;
          *(_DWORD *)(v15 + 32) = v275 << v274;
          *(_BYTE *)(v15 + 36) = v274;
          v379 = 1;
          if (!v40 && v231 == 1)
          {
            v391 = 0;
            *(_BYTE *)(v13 + 1007) = v272 + 1;
            v379 = 1;
          }
        }
      }
    }
    v46 = v267 + v231;
    v19 = v403;
    v33 = v369;
    if (v46)
      goto LABEL_42;
LABEL_366:
    ;
  }
  while (v34 && v20 < v401);
  if (a12)
  {
    *(_WORD *)(a1 + 104) = v20;
    if (v28)
    {
      v276 = sub_2160B5EF8((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408);
      goto LABEL_383;
    }
    goto LABEL_384;
  }
  if (!v28)
    goto LABEL_479;
  v276 = sub_2160B253C((uint64_t)v29, (unsigned int *)v414, (unsigned int *)&v413, &v408);
LABEL_383:
  v14 = v276;
  if ((_DWORD)v276)
    goto LABEL_375;
LABEL_384:
  v14 = 0;
  if (!a12 || v20 != v401)
    goto LABEL_482;
  if (v19)
  {
    v14 = sub_2160E7F70((uint64_t *)v382, v373, v386, v386 + 2, *(double *)v215.i64, *(int8x8_t *)v216.i8);
    if (*(int *)(v382 + 184) <= 0)
    {
      v278 = v390;
      if (!*(_DWORD *)(v382 + 220))
        goto LABEL_482;
    }
    else
    {
      v278 = v390;
      sub_21609B5F4(v382, *(_QWORD *)(v390 + 64), *(_DWORD *)(v390 + 168), *(_QWORD *)(v390 + 72), *(_DWORD *)(v390 + 184), 0, v385, v386, v386 + 2, *(_QWORD *)(v382 + 176), *(_DWORD *)(v382 + 184), (*(_DWORD *)(v390 + 132) + 15) >> 4);
      if (!*(_DWORD *)(v382 + 220))
        goto LABEL_482;
    }
    v282 = *(_QWORD *)(v278 + 64);
    v281 = *(_QWORD *)(v278 + 72);
    v283 = *(_DWORD *)(v278 + 168);
    v284 = *(_DWORD *)(v278 + 184);
    v285 = *(int *)(v278 + 132);
    if (*(_BYTE *)(v278 + 32))
    {
      v286 = v283;
      v287 = v284;
      if (!*(_BYTE *)(v278 + 37))
        v287 = 0;
      v281 += v287;
      if (!*(_BYTE *)(v278 + 37))
        v286 = 0;
      v282 += v286;
      v283 *= 2;
      v284 *= 2;
    }
    v288 = *(int *)(v278 + 164);
    v289 = *(int *)(v278 + 180);
    v290 = *(int *)(v278 + 148);
    v291 = 16 * v386;
    if (v386 >= 1)
      v292 = 16 * v386 - 4;
    else
      v292 = 0;
    v293 = v291 + 32;
    v294 = v291 + 28;
    if (v293 == (_DWORD)v285)
      v294 = v293;
    v295 = v292 >> 1;
    v296 = v294 >> 1;
    v297 = v294 - v292;
    if (v294 > v292)
    {
      v298 = (int8x16_t *)(v282 + v283 * (uint64_t)v292);
      do
      {
        v299 = vqtbl1q_s8((int8x16_t)(16843009 * v298->u8[0]), (int8x16_t)xmmword_2160EE800);
        v298[-2] = v299;
        v298[-1] = v299;
        v300 = (int8x16_t *)((char *)v298 + v288);
        v301 = vqtbl1q_s8((int8x16_t)(16843009 * v298->u8[v288 - 1]), (int8x16_t)xmmword_2160EE800);
        *v300 = v301;
        v300[1] = v301;
        v298 = (int8x16_t *)((char *)v298 + v283);
        --v297;
      }
      while (v297);
    }
    v302 = __OFSUB__(v296, v295);
    v303 = v296 - v295;
    if (!((v303 < 0) ^ v302 | (v303 == 0)))
    {
      v304 = (int8x16_t *)(v281 + v284 * (uint64_t)v295);
      do
      {
        v305 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v304->u16[-1] + v289)), (int8x16_t)xmmword_2160EE800);
        v304[-1] = vqtbl1q_s8((int8x16_t)(65537 * v304->u16[0]), (int8x16_t)xmmword_2160EE800);
        *(int8x16_t *)((char *)v304 + v289) = v305;
        v304 = (int8x16_t *)((char *)v304 + v284);
        --v303;
      }
      while (v303);
    }
    if (v386 <= 0)
    {
      v306 = 0;
      v307 = v282 - 32;
      v308 = -2 * v283;
      do
      {
        if ((int)v288 >= -63)
        {
          v309 = 0;
          do
          {
            v310 = *(_OWORD *)(v307 + v309);
            *(_OWORD *)(v307 - v283 + v309) = v310;
            *(_OWORD *)(v307 + v308 + v309) = v310;
            v156 = v309 < (int)v288 + 48;
            v309 += 16;
          }
          while (v156);
        }
        v307 += v308;
        ++v306;
      }
      while (v306 != 10);
      v311 = 0;
      v312 = v281 - 16;
      do
      {
        if ((int)v289 >= -31)
        {
          v313 = 0;
          do
          {
            *(_OWORD *)(v312 - v284 + v313) = *(_OWORD *)(v312 + v313);
            v156 = v313 < (int)v289 + 16;
            v313 += 16;
          }
          while (v156);
        }
        v312 -= v284;
        ++v311;
      }
      while (v311 != 8);
    }
    if (v294 == (_DWORD)v285)
    {
      v314 = 0;
      v315 = v283 * (v285 - 1);
      v316 = v282 + v315 - 32;
      v317 = 2 * v283;
      v318 = v315 + v317;
      v319 = v315 + v283 + v282 - 32;
      v320 = v318 + v282 - 32;
      do
      {
        if ((int)v288 >= -63)
        {
          v321 = 0;
          do
          {
            v322 = *(_OWORD *)(v316 + v321);
            *(_OWORD *)(v319 + v321) = v322;
            *(_OWORD *)(v320 + v321) = v322;
            v156 = v321 < v288 + 48;
            v321 += 16;
          }
          while (v156);
        }
        v316 += v317;
        ++v314;
        v319 += v317;
        v320 += v317;
      }
      while (v314 != 10);
      v323 = 0;
      v324 = v281 + v284 * (v290 - 1) - 16;
      do
      {
        if ((int)v289 >= -31)
        {
          v325 = 0;
          do
          {
            *(_OWORD *)(v324 + v284 + v325) = *(_OWORD *)(v324 + v325);
            v156 = v325 < v289 + 16;
            v325 += 16;
          }
          while (v156);
        }
        v324 += v284;
        ++v323;
      }
      while (v323 != 8);
      goto LABEL_481;
    }
    goto LABEL_482;
  }
  v279 = v386 + 1;
  sub_21609E9C8((uint64_t *)v382, v373, 0, v385, v386, v386 + 1, v215, v216, v217);
  if (*(int *)(v382 + 184) < 1
    || (!*(_BYTE *)(v382 + 224) || !*(_BYTE *)(v382 + 225) && !*(_BYTE *)(v382 + 226)
      ? (v280 = sub_21609B1DC(v382, 0, v385, v386, v279))
      : (v280 = sub_21609C614(v382, 0, v385, v386, v279)),
        v14 = v280,
        !(_DWORD)v280))
  {
    if (*(_DWORD *)(v382 + 220))
    {
      v327 = *(_QWORD *)(v390 + 64);
      v326 = *(_QWORD *)(v390 + 72);
      v328 = *(_DWORD *)(v390 + 168);
      v329 = *(_DWORD *)(v390 + 184);
      v330 = *(int *)(v390 + 132);
      if (*(_BYTE *)(v390 + 32))
      {
        v331 = v328;
        v332 = v329;
        if (!*(_BYTE *)(v390 + 37))
          v332 = 0;
        v326 += v332;
        if (!*(_BYTE *)(v390 + 37))
          v331 = 0;
        v327 += v331;
        v328 *= 2;
        v329 *= 2;
      }
      v333 = *(int *)(v390 + 164);
      v334 = *(int *)(v390 + 180);
      v335 = *(int *)(v390 + 148);
      if (v386 >= 1)
        v336 = 16 * v386 - 4;
      else
        v336 = 0;
      v337 = 16 * v386 + 16;
      if (v337 != (_DWORD)v330)
        v337 = (16 * v386) | 0xC;
      v338 = v336 >> 1;
      v339 = v337 >> 1;
      v340 = v337 - v336;
      if (v337 > v336)
      {
        v341 = (int8x16_t *)(v327 + v328 * (uint64_t)v336);
        do
        {
          v342 = vqtbl1q_s8((int8x16_t)(16843009 * v341->u8[0]), (int8x16_t)xmmword_2160EE800);
          v341[-2] = v342;
          v341[-1] = v342;
          v343 = (int8x16_t *)((char *)v341 + v333);
          v344 = vqtbl1q_s8((int8x16_t)(16843009 * v341->u8[v333 - 1]), (int8x16_t)xmmword_2160EE800);
          *v343 = v344;
          v343[1] = v344;
          v341 = (int8x16_t *)((char *)v341 + v328);
          --v340;
        }
        while (v340);
      }
      v302 = __OFSUB__(v339, v338);
      v345 = v339 - v338;
      if (!((v345 < 0) ^ v302 | (v345 == 0)))
      {
        v346 = (int8x16_t *)(v326 + v329 * (uint64_t)v338);
        do
        {
          v347 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v346->u16[-1] + v334)), (int8x16_t)xmmword_2160EE800);
          v346[-1] = vqtbl1q_s8((int8x16_t)(65537 * v346->u16[0]), (int8x16_t)xmmword_2160EE800);
          *(int8x16_t *)((char *)v346 + v334) = v347;
          v346 = (int8x16_t *)((char *)v346 + v329);
          --v345;
        }
        while (v345);
      }
      if (v386 <= 0)
      {
        v348 = 0;
        v349 = v327 - 32;
        v350 = -2 * v328;
        do
        {
          if ((int)v333 >= -63)
          {
            v351 = 0;
            do
            {
              v352 = *(_OWORD *)(v349 + v351);
              *(_OWORD *)(v349 - v328 + v351) = v352;
              *(_OWORD *)(v349 + v350 + v351) = v352;
              v156 = v351 < (int)v333 + 48;
              v351 += 16;
            }
            while (v156);
          }
          v349 += v350;
          ++v348;
        }
        while (v348 != 10);
        v353 = 0;
        v354 = v326 - 16;
        do
        {
          if ((int)v334 >= -31)
          {
            v355 = 0;
            do
            {
              *(_OWORD *)(v354 - v329 + v355) = *(_OWORD *)(v354 + v355);
              v156 = v355 < (int)v334 + 16;
              v355 += 16;
            }
            while (v156);
          }
          v354 -= v329;
          ++v353;
        }
        while (v353 != 8);
      }
      if (v337 != (_DWORD)v330)
      {
        v14 = 0;
LABEL_481:
        v19 = v403;
        v13 = v387;
        v15 = v388;
        goto LABEL_482;
      }
      v356 = 0;
      v357 = v328 * (v330 - 1);
      v358 = v327 + v357 - 32;
      v359 = 2 * v328;
      v360 = v357 + v359;
      v361 = v357 + v328 + v327 - 32;
      v362 = v360 + v327 - 32;
      do
      {
        if ((int)v333 >= -63)
        {
          v363 = 0;
          do
          {
            v364 = *(_OWORD *)(v358 + v363);
            *(_OWORD *)(v361 + v363) = v364;
            *(_OWORD *)(v362 + v363) = v364;
            v156 = v363 < v333 + 48;
            v363 += 16;
          }
          while (v156);
        }
        v358 += v359;
        ++v356;
        v361 += v359;
        v362 += v359;
      }
      while (v356 != 10);
      v365 = 0;
      v366 = v326 + v329 * (v335 - 1) - 16;
      v19 = v403;
      v13 = v387;
      v15 = v388;
      do
      {
        if ((int)v334 >= -31)
        {
          v367 = 0;
          do
          {
            *(_OWORD *)(v366 + v329 + v367) = *(_OWORD *)(v366 + v367);
            v156 = v367 < v334 + 16;
            v367 += 16;
          }
          while (v156);
        }
        v14 = 0;
        v366 += v329;
        ++v365;
      }
      while (v365 != 8);
LABEL_482:
      if (a8)
        *a8 = v384 == 0;
      if (a9)
        *a9 = v372 == 0;
      goto LABEL_375;
    }
LABEL_479:
    v14 = 0;
    goto LABEL_482;
  }
LABEL_375:
  if (!v19 && *(_BYTE *)(v13 + 1164))
    sub_215FC1698(v381, v15);
  return v14;
}

uint64_t sub_2160B5EF8(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  size_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  size_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  size_t v125;
  char *v126;
  char *v127;
  size_t v128;
  int v129;
  int v130;
  int v131;
  const void *v132;
  void *v133;
  const void *v134;
  void *v135;
  char *v136;
  unsigned int v137;
  char *__dst;
  char *__src;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;

  v4 = *a4;
  v5 = a4[1];
  if (v4 == 32 || v5 == 32)
  {
    if (v5 == 32 && v4 == 32)
      return 0xFFFFFFFFLL;
    if (*(_BYTE *)(a1 + 29))
      return 4294958327;
    v34 = a2[1];
    v35 = a3[1];
    if (v34 > v35)
      return 4294958327;
    v36 = (_DWORD)v5 == 32 ? a4 : a4 + 1;
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * ((_DWORD)v5 != 32) + 224) + 8 * *v36);
    v38 = *(_QWORD *)(a1 + 216);
    if (!v37 || v38 == 0)
      return 4294958327;
    if (*(_DWORD *)(v37 + 132) != *(_DWORD *)(v38 + 132))
      return 4294958327;
    if (*(_DWORD *)(v37 + 148) != *(_DWORD *)(v38 + 148))
      return 4294958327;
    v40 = (char *)*(unsigned int *)(v37 + 168);
    if ((_DWORD)v40 != *(_DWORD *)(v38 + 168))
      return 4294958327;
    v41 = *(unsigned int *)(v37 + 184);
    if ((_DWORD)v41 != *(_DWORD *)(v38 + 184))
      return 4294958327;
    v42 = *a2;
    v43 = 16 * *a2;
    v44 = 16 * v34 * v40;
    v45 = (char *)(*(_QWORD *)(v37 + 64) + v43 + v44);
    v46 = (char *)(*(_QWORD *)(v38 + 64) + v43 + v44);
    __dst = &v40[(_QWORD)v46];
    v47 = *a3;
    v48 = &v40[(_QWORD)v45];
    v49 = (2 * (_DWORD)v40);
    v141 = &v46[v49];
    v140 = &v45[v49];
    v50 = (3 * (_DWORD)v40);
    v145 = &v46[v50];
    v144 = &v45[v50];
    v51 = (4 * (_DWORD)v40);
    v147 = &v46[v51];
    v146 = &v45[v51];
    v52 = (5 * (_DWORD)v40);
    v151 = &v46[v52];
    v150 = &v45[v52];
    v53 = (6 * (_DWORD)v40);
    v153 = &v46[v53];
    v152 = &v45[v53];
    v54 = (8 * (_DWORD)v40);
    v55 = (7 * (_DWORD)v40);
    v157 = &v46[v55];
    v156 = &v45[v55];
    v160 = &v46[v54];
    v56 = (11 * (_DWORD)v40);
    v57 = (13 * (_DWORD)v40);
    v58 = (14 * (_DWORD)v40);
    v59 = (15 * (_DWORD)v40);
    __src = &v45[v54];
    v60 = (9 * (_DWORD)v40);
    v142 = &v46[v60];
    v143 = &v45[v60];
    v61 = (10 * (_DWORD)v40);
    v148 = &v46[v61];
    v149 = &v45[v61];
    v154 = &v46[v56];
    v155 = &v45[v56];
    v62 = (12 * (_DWORD)v40);
    v158 = &v46[v62];
    v162 = &v45[v62];
    v164 = &v46[v57];
    v166 = &v45[v57];
    v168 = &v46[v58];
    v170 = &v45[v58];
    v186 = &v46[v59];
    v63 = &v45[v59];
    if (v34 == v35)
    {
      v64 = 16 * (v47 - v42) + 16;
      memcpy(v46, v45, v64);
      memcpy(__dst, v48, v64);
      memcpy(v141, v140, v64);
      memcpy(v145, v144, v64);
      memcpy(v147, v146, v64);
      memcpy(v151, v150, v64);
      memcpy(v153, v152, v64);
      memcpy(v157, v156, v64);
      memcpy(v160, __src, v64);
      memcpy(v142, v143, v64);
      memcpy(v148, v149, v64);
      memcpy(v154, v155, v64);
      memcpy(v158, v162, v64);
      memcpy(v164, v166, v64);
      memcpy(v168, v170, v64);
      memcpy(v186, v63, v64);
      v65 = (char *)(*(_QWORD *)(v37 + 72) + v43 + *(_DWORD *)(v37 + 184) * 8 * v34);
      v66 = (char *)(*(_QWORD *)(v38 + 72) + v43 + *(_DWORD *)(v38 + 184) * 8 * v34);
      memcpy(v66, v65, v64);
      memcpy(&v66[v41], &v65[v41], v64);
      memcpy(&v66[(2 * v41)], &v65[(2 * v41)], v64);
      memcpy(&v66[(3 * v41)], &v65[(3 * v41)], v64);
      memcpy(&v66[(4 * v41)], &v65[(4 * v41)], v64);
      memcpy(&v66[(5 * v41)], &v65[(5 * v41)], v64);
      memcpy(&v66[(6 * v41)], &v65[(6 * v41)], v64);
      v67 = (7 * v41);
      v68 = &v66[v67];
      v69 = &v65[v67];
      v70 = v64;
    }
    else
    {
      v172 = (9 * (_DWORD)v40);
      v173 = (10 * (_DWORD)v40);
      v137 = v47;
      v174 = (12 * (_DWORD)v40);
      v175 = (2 * (_DWORD)v40);
      v176 = (3 * (_DWORD)v40);
      v177 = (4 * (_DWORD)v40);
      v178 = (5 * (_DWORD)v40);
      v179 = (6 * (_DWORD)v40);
      v180 = (7 * (_DWORD)v40);
      v181 = (11 * (_DWORD)v40);
      v182 = (8 * (_DWORD)v40);
      v183 = (13 * (_DWORD)v40);
      v184 = (14 * (_DWORD)v40);
      v185 = (15 * (_DWORD)v40);
      v115 = (*(_DWORD *)(v37 + 164) - v43);
      memcpy(v46, v45, v115);
      memcpy(__dst, v48, v115);
      memcpy(v141, v140, v115);
      memcpy(v145, v144, v115);
      memcpy(v147, v146, v115);
      memcpy(v151, v150, v115);
      memcpy(v153, v152, v115);
      memcpy(v157, v156, v115);
      memcpy(v160, __src, v115);
      memcpy(v142, v143, v115);
      memcpy(v148, v149, v115);
      memcpy(v154, v155, v115);
      memcpy(v158, v162, v115);
      memcpy(v164, v166, v115);
      memcpy(v168, v170, v115);
      memcpy(v186, v63, v115);
      v116 = (char *)(*(_QWORD *)(v37 + 72) + v43 + *(_DWORD *)(v37 + 184) * 8 * v34);
      v117 = (char *)(*(_QWORD *)(v38 + 72) + v43 + *(_DWORD *)(v38 + 184) * 8 * v34);
      memcpy(v117, v116, v115);
      memcpy(&v117[v41], &v116[v41], v115);
      v171 = (2 * v41);
      memcpy(&v117[v171], &v116[v171], v115);
      v169 = (3 * v41);
      memcpy(&v117[v169], &v116[v169], v115);
      v167 = (4 * v41);
      memcpy(&v117[v167], &v116[v167], v115);
      v165 = (5 * v41);
      memcpy(&v117[v165], &v116[v165], v115);
      v163 = (6 * v41);
      memcpy(&v117[v163], &v116[v163], v115);
      v118 = (7 * v41);
      v119 = &v117[v118];
      v120 = v118;
      memcpy(v119, &v116[v118], v115);
      v121 = v35 - (v34 + 1);
      if (v35 != v34 + 1)
      {
        v128 = *(unsigned int *)(v37 + 164);
        if ((_DWORD)v128 != *(_DWORD *)(v37 + 180))
          return 4294958327;
        v159 = (char *)v41;
        v161 = v40;
        v129 = v121 <= 1 ? 1 : v35 - (v34 + 1);
        v130 = 16 * v34 + 16;
        v131 = 8 * v34 + 8;
        v187 = v120;
        do
        {
          v132 = (const void *)(*(_QWORD *)(v37 + 64) + (*(_DWORD *)(v37 + 168) * v130));
          v133 = (void *)(*(_QWORD *)(v38 + 64) + (*(_DWORD *)(v38 + 168) * v130));
          memcpy(v133, v132, v128);
          memcpy(&v161[(_QWORD)v133], &v161[(_QWORD)v132], v128);
          memcpy((char *)v133 + v175, (char *)v132 + v175, v128);
          memcpy((char *)v133 + v176, (char *)v132 + v176, v128);
          memcpy((char *)v133 + v177, (char *)v132 + v177, v128);
          memcpy((char *)v133 + v178, (char *)v132 + v178, v128);
          memcpy((char *)v133 + v179, (char *)v132 + v179, v128);
          memcpy((char *)v133 + v180, (char *)v132 + v180, v128);
          memcpy((char *)v133 + v182, (char *)v132 + v182, v128);
          memcpy((char *)v133 + v172, (char *)v132 + v172, v128);
          memcpy((char *)v133 + v173, (char *)v132 + v173, v128);
          memcpy((char *)v133 + v181, (char *)v132 + v181, v128);
          memcpy((char *)v133 + v174, (char *)v132 + v174, v128);
          memcpy((char *)v133 + v183, (char *)v132 + v183, v128);
          memcpy((char *)v133 + v184, (char *)v132 + v184, v128);
          memcpy((char *)v133 + v185, (char *)v132 + v185, v128);
          v134 = (const void *)(*(_QWORD *)(v37 + 72) + (*(_DWORD *)(v37 + 184) * v131));
          v135 = (void *)(*(_QWORD *)(v38 + 72) + (*(_DWORD *)(v38 + 184) * v131));
          memcpy(v135, v134, v128);
          memcpy(&v159[(_QWORD)v135], &v159[(_QWORD)v134], v128);
          memcpy((char *)v135 + v171, (char *)v134 + v171, v128);
          memcpy((char *)v135 + v169, (char *)v134 + v169, v128);
          memcpy((char *)v135 + v167, (char *)v134 + v167, v128);
          memcpy((char *)v135 + v165, (char *)v134 + v165, v128);
          memcpy((char *)v135 + v163, (char *)v134 + v163, v128);
          v136 = (char *)v134 + v187;
          v120 = v187;
          memcpy((char *)v135 + v187, v136, v128);
          v130 += 16;
          v131 += 8;
          --v121;
          --v129;
        }
        while (v129);
        v41 = (unint64_t)v159;
        v40 = v161;
        if (v121)
          return 4294958327;
      }
      v122 = v120;
      v123 = (char *)(*(_QWORD *)(v37 + 64) + *(_DWORD *)(v37 + 168) * 16 * v35);
      v124 = (char *)(*(_QWORD *)(v38 + 64) + *(_DWORD *)(v38 + 168) * 16 * v35);
      v125 = 16 * v137 + 16;
      memcpy(v124, v123, v125);
      memcpy(&v40[(_QWORD)v124], &v40[(_QWORD)v123], v125);
      memcpy(&v124[v175], &v123[v175], v125);
      memcpy(&v124[v176], &v123[v176], v125);
      memcpy(&v124[v177], &v123[v177], v125);
      memcpy(&v124[v178], &v123[v178], v125);
      memcpy(&v124[v179], &v123[v179], v125);
      memcpy(&v124[v180], &v123[v180], v125);
      memcpy(&v124[v182], &v123[v182], v125);
      memcpy(&v124[v172], &v123[v172], v125);
      memcpy(&v124[v173], &v123[v173], v125);
      memcpy(&v124[v181], &v123[v181], v125);
      memcpy(&v124[v174], &v123[v174], v125);
      memcpy(&v124[v183], &v123[v183], v125);
      memcpy(&v124[v184], &v123[v184], v125);
      memcpy(&v124[v185], &v123[v185], v125);
      v126 = (char *)(*(_QWORD *)(v37 + 72) + *(_DWORD *)(v37 + 184) * 8 * v35);
      v127 = (char *)(*(_QWORD *)(v38 + 72) + *(_DWORD *)(v38 + 184) * 8 * v35);
      memcpy(v127, v126, v125);
      memcpy(&v127[v41], &v126[v41], v125);
      memcpy(&v127[v171], &v126[v171], v125);
      memcpy(&v127[v169], &v126[v169], v125);
      memcpy(&v127[v167], &v126[v167], v125);
      memcpy(&v127[v165], &v126[v165], v125);
      memcpy(&v127[v163], &v126[v163], v125);
      v68 = &v127[v122];
      v69 = &v126[v122];
      v70 = v125;
    }
    memcpy(v68, v69, v70);
    return 0;
  }
  if (*(_BYTE *)(a1 + 29))
    return 4294958327;
  v7 = a2[1];
  v8 = a3[1];
  if (v7 > v8)
    return 4294958327;
  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v4);
  v11 = *(unsigned int *)(v10 + 168);
  if ((_DWORD)v11 != *(_DWORD *)(v9 + 168))
    return 4294958327;
  v12 = *(unsigned int *)(v10 + 184);
  if ((_DWORD)v12 != *(_DWORD *)(v9 + 184))
    return 4294958327;
  v13 = *a2;
  v14 = *a3;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v5);
  if (v7 == v8)
  {
    v16 = v14 - v13;
    if (v14 >= v13)
    {
      v17 = 0;
      v18 = 16 * v13;
      v19 = v11 * 16 * v7;
      v20 = *(_QWORD *)(v10 + 64) + v18 + v19;
      v21 = *(_QWORD *)(v15 + 64) + v18 + *(_DWORD *)(v15 + 168) * 16 * v7;
      v22 = *(_QWORD *)(v9 + 64) + v18 + v19;
      v23 = 16 * v16 + 16;
      v24 = v23 >> 4;
      if (v23 >> 4 <= 1)
        LODWORD(v24) = 1;
      do
      {
        if ((_DWORD)v23)
        {
          v25 = 0;
          do
          {
            *(uint8x16_t *)(v22 + 16 * v25) = vrhaddq_u8(*(uint8x16_t *)(v20 + 16 * v25), *(uint8x16_t *)(v21 + 16 * v25));
            ++v25;
          }
          while ((_DWORD)v24 != (_DWORD)v25);
        }
        v20 += v11;
        v21 += v11;
        v22 += v11;
        ++v17;
      }
      while (v17 != 16);
      v26 = 0;
      v27 = 8 * v7;
      v28 = *(_QWORD *)(v10 + 72) + v18 + (*(_DWORD *)(v10 + 184) * v27);
      v29 = *(_QWORD *)(v15 + 72) + v18 + (*(_DWORD *)(v15 + 184) * v27);
      v30 = *(_QWORD *)(v9 + 72) + v18 + (*(_DWORD *)(v9 + 184) * v27);
      v31 = v23 >> 4;
      if (v23 >> 4 <= 1)
        LODWORD(v31) = 1;
      do
      {
        if ((_DWORD)v23)
        {
          v32 = 0;
          do
          {
            *(uint8x16_t *)(v30 + 16 * v32) = vrhaddq_u8(*(uint8x16_t *)(v28 + 16 * v32), *(uint8x16_t *)(v29 + 16 * v32));
            ++v32;
          }
          while ((_DWORD)v31 != (_DWORD)v32);
        }
        result = 0;
        v28 += v12;
        v29 += v12;
        v30 += v12;
        ++v26;
      }
      while (v26 != 8);
      return result;
    }
    return 4294958327;
  }
  v71 = 0;
  v72 = 16 * v13;
  v73 = v11 * 16 * v7;
  v74 = *(_QWORD *)(v10 + 64) + v72 + v73;
  v75 = *(_QWORD *)(v15 + 64) + v72 + *(_DWORD *)(v15 + 168) * 16 * v7;
  v76 = *(_QWORD *)(v9 + 64) + v72 + v73;
  v77 = *(_DWORD *)(v10 + 164) - 16 * v13;
  v78 = v77 >> 4;
  if (v77 >> 4 <= 1)
    LODWORD(v78) = 1;
  do
  {
    if (v77 >= 0x10)
    {
      v79 = 0;
      do
      {
        *(uint8x16_t *)(v76 + 16 * v79) = vrhaddq_u8(*(uint8x16_t *)(v74 + 16 * v79), *(uint8x16_t *)(v75 + 16 * v79));
        ++v79;
      }
      while ((_DWORD)v78 != (_DWORD)v79);
    }
    v74 += v11;
    v75 += v11;
    v76 += v11;
    ++v71;
  }
  while (v71 != 16);
  v80 = 0;
  v81 = *(_QWORD *)(v10 + 72) + v72 + *(_DWORD *)(v10 + 184) * 8 * v7;
  v82 = *(_QWORD *)(v15 + 72) + v72 + *(_DWORD *)(v15 + 184) * 8 * v7;
  v83 = *(_QWORD *)(v9 + 72) + v72 + *(_DWORD *)(v9 + 184) * 8 * v7;
  v84 = v77 >> 4;
  if (v77 >> 4 <= 1)
    LODWORD(v84) = 1;
  do
  {
    if (v77 >= 0x10)
    {
      v85 = 0;
      do
      {
        *(uint8x16_t *)(v83 + 16 * v85) = vrhaddq_u8(*(uint8x16_t *)(v81 + 16 * v85), *(uint8x16_t *)(v82 + 16 * v85));
        ++v85;
      }
      while ((_DWORD)v84 != (_DWORD)v85);
    }
    v81 += v12;
    v82 += v12;
    v83 += v12;
    ++v80;
  }
  while (v80 != 8);
  v86 = v7 + 1;
  v87 = v8 - v86;
  if (v8 != v86)
  {
    v102 = *(unsigned int *)(v10 + 164);
    if ((_DWORD)v102 != *(_DWORD *)(v10 + 180))
      return 4294958327;
    v103 = 0;
    if (v87 <= 1)
      v87 = 1;
    v104 = v102 >> 4;
    if (v102 >> 4 <= 1)
      LODWORD(v104) = 1;
    do
    {
      v105 = 0;
      v106 = *(_QWORD *)(v10 + 64) + *(_DWORD *)(v10 + 168) * 16 * v86;
      v107 = *(_QWORD *)(v15 + 64) + *(_DWORD *)(v15 + 168) * 16 * v86;
      v108 = *(_QWORD *)(v9 + 64) + *(_DWORD *)(v9 + 168) * 16 * v86;
      do
      {
        if (v102 >= 0x10)
        {
          v109 = 0;
          do
          {
            *(uint8x16_t *)(v108 + 16 * v109) = vrhaddq_u8(*(uint8x16_t *)(v106 + 16 * v109), *(uint8x16_t *)(v107 + 16 * v109));
            ++v109;
          }
          while ((_DWORD)v104 != (_DWORD)v109);
        }
        v106 += v11;
        v107 += v11;
        v108 += v11;
        ++v105;
      }
      while (v105 != 16);
      v110 = 0;
      v111 = *(_QWORD *)(v10 + 72) + *(_DWORD *)(v10 + 184) * 8 * v86;
      v112 = *(_QWORD *)(v15 + 72) + *(_DWORD *)(v15 + 184) * 8 * v86;
      v113 = *(_QWORD *)(v9 + 72) + *(_DWORD *)(v9 + 184) * 8 * v86;
      do
      {
        if (v102 >= 0x10)
        {
          v114 = 0;
          do
          {
            *(uint8x16_t *)(v113 + 16 * v114) = vrhaddq_u8(*(uint8x16_t *)(v111 + 16 * v114), *(uint8x16_t *)(v112 + 16 * v114));
            ++v114;
          }
          while ((_DWORD)v104 != (_DWORD)v114);
        }
        v111 += v12;
        v112 += v12;
        v113 += v12;
        ++v110;
      }
      while (v110 != 8);
      ++v86;
      ++v103;
    }
    while (v103 != v87);
    if (v86 != v8)
      return 4294958327;
  }
  v88 = 0;
  v89 = *(_QWORD *)(v10 + 64) + *(_DWORD *)(v10 + 168) * 16 * v8;
  v90 = *(_QWORD *)(v15 + 64) + *(_DWORD *)(v15 + 168) * 16 * v8;
  v91 = *(_QWORD *)(v9 + 64) + *(_DWORD *)(v9 + 168) * 16 * v8;
  v92 = 16 * v14 + 16;
  v93 = v92 >> 4;
  if (v92 >> 4 <= 1)
    LODWORD(v93) = 1;
  do
  {
    if ((_DWORD)v92)
    {
      v94 = 0;
      do
      {
        *(uint8x16_t *)(v91 + 16 * v94) = vrhaddq_u8(*(uint8x16_t *)(v89 + 16 * v94), *(uint8x16_t *)(v90 + 16 * v94));
        ++v94;
      }
      while ((_DWORD)v93 != (_DWORD)v94);
    }
    v89 += v11;
    v90 += v11;
    v91 += v11;
    ++v88;
  }
  while (v88 != 16);
  v95 = 0;
  v96 = 8 * v8;
  v97 = *(_QWORD *)(v10 + 72) + (*(_DWORD *)(v10 + 184) * v96);
  v98 = *(_QWORD *)(v15 + 72) + (*(_DWORD *)(v15 + 184) * v96);
  v99 = *(_QWORD *)(v9 + 72) + (*(_DWORD *)(v9 + 184) * v96);
  v100 = v92 >> 4;
  if (v92 >> 4 <= 1)
    LODWORD(v100) = 1;
  do
  {
    if ((_DWORD)v92)
    {
      v101 = 0;
      do
      {
        *(uint8x16_t *)(v99 + 16 * v101) = vrhaddq_u8(*(uint8x16_t *)(v97 + 16 * v101), *(uint8x16_t *)(v98 + 16 * v101));
        ++v101;
      }
      while ((_DWORD)v100 != (_DWORD)v101);
    }
    result = 0;
    v97 += v12;
    v98 += v12;
    v99 += v12;
    ++v95;
  }
  while (v95 != 8);
  return result;
}

uint64_t sub_2160B6E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int *a7, _DWORD *a8, _DWORD *a9, unsigned __int8 a10, int a11, int a12)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  uint64_t **v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  char v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  unsigned int v63;
  __n128 v64;
  int16x8_t v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  int16x8_t v72;
  double v73;
  double v74;
  double v75;
  int8x16_t v76;
  int16x8_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  double v81;
  int8x16_t v82;
  double v83;
  double v84;
  double v85;
  int8x16_t v86;
  uint64_t v87;
  int8x16_t *v88;
  uint64_t v89;
  unsigned int v90;
  char v91;
  char v92;
  uint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int8x16_t *v116;
  int8x16_t v117;
  int8x16_t *v118;
  int8x16_t v119;
  int v120;
  int v121;
  int8x16_t *v122;
  int8x16_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  BOOL v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  unint64_t v148;
  int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  unsigned int v159;
  unsigned int v160;
  unint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int *v165;
  unsigned int v166;
  int v167;
  unint64_t v168;
  unsigned int *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int8x16_t *v186;
  int8x16_t v187;
  int8x16_t *v188;
  int8x16_t v189;
  BOOL v190;
  int v191;
  int8x16_t *v192;
  int8x16_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  unsigned int v221;
  uint64_t v222;
  int v223;
  int v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  int v230;
  unsigned int v231;
  uint64_t v232;
  _BYTE *v233;
  _BOOL4 v234;
  uint64_t **v235;
  int v237;
  int v238;
  int v239;
  int v240;

  v15 = a4 + 1425504;
  v16 = *(_QWORD *)(a1 + 40);
  v219 = *(_QWORD *)(a1 + 88);
  v222 = v219 + 1152;
  v231 = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v16 + 80) = v219 + 32;
  v17 = *(_DWORD *)(v219 + 132) >> 4;
  *(_DWORD *)(v16 + 8) = v17;
  *(_DWORD *)(v16 + 20) = *(_DWORD *)(v16 + 12) * v17;
  v18 = (int *)(a4 + 976);
  v232 = v16;
  v233 = *(_BYTE **)(a4 + 1016);
  v19 = *(uint64_t ***)(a4 + 1176);
  v20 = *(_DWORD *)(a1 + 4);
  v21 = *(_DWORD *)(a1 + 16);
  v221 = *(_BYTE *)(a4 + 1425576) == 0;
  v22 = *(_DWORD *)(a4 + 1425560);
  v23 = v22 / v20 - 1;
  v24 = v20 + v20 * (v22 / v20) - 1;
  v238 = v20;
  v223 = 2 * v20;
  v25 = 2 * v20 - 1;
  if (v22)
    v26 = *(_DWORD *)(a4 + 1425560);
  else
    v26 = 0;
  if (!v22)
  {
    v24 = v25;
    v23 = 0;
  }
  if (a12)
    v27 = v26;
  else
    v27 = *(_DWORD *)(a4 + 1425560);
  if (a12)
    v28 = v24;
  else
    v28 = 0;
  v240 = v28;
  if (a12)
    v29 = v23;
  else
    v29 = 0;
  v239 = *(_DWORD *)(a4 + 1428264) + *(_DWORD *)(a3 + 72) + 26;
  if (*(_BYTE *)(a4 + 1164))
    sub_215FC147C(v19, a2, a3, a4 + 1425544, v15);
  v228 = a3;
  v235 = v19;
  v226 = 0;
  v220 = 0;
  v30 = v21 * v238;
  v31 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a4 + 1312) + 48) + 12 * a5);
  *v31 = (63 * *(_DWORD *)(a1 + 156)) >> 6;
  v31[1] = 1;
  v32 = a6;
  v34 = (a10 & 0xFD) == 1 && a11 != 0;
  v217 = v34;
  v218 = a4 + 1458264;
  v35 = 1;
  v237 = v21 * v238;
  do
  {
    v36 = v30 - v27;
    if (v30 <= v27)
    {
LABEL_232:
      v214 = 4294958327;
      goto LABEL_233;
    }
    if (*(_BYTE *)(a4 + 1161))
    {
      v37 = v27 / v223;
      v38 = v27 % v223;
      if (v27 % v223 >= 0)
        v39 = v27 % v223;
      else
        v39 = v38 + 1;
      v40 = v39 >> 1;
      v41 = v27 & 1 | (2 * v37);
    }
    else
    {
      v37 = v27 / v238;
      v38 = v27 % v238;
      v40 = v27 % v238;
      v41 = v27 / v238;
    }
    *(_DWORD *)(a4 + 976) = v40;
    *(_DWORD *)(a4 + 988) = v41;
    *(_DWORD *)(a4 + 980) = v41;
    v225 = v37;
    v42 = *(_QWORD *)(v218 + 8 * !(v37 & 1));
    *(_QWORD *)(v15 + 32752) = v42;
    *(_QWORD *)(v15 + 32744) = *(_QWORD *)(v218 + 8 * (v37 & 1));
    *(_QWORD *)(a4 + 1152) = v42 + 400 * v38;
    v227 = v38;
    *(_QWORD *)(*(_QWORD *)(v15 + 32752) + 400 * v38 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 1192) + 1152)
                                                                                        + 8 * a6));
    **(_DWORD **)(a4 + 1152) = v27;
    *(_DWORD *)(a4 + 992) = v27;
    *(_BYTE *)(*(_QWORD *)(a4 + 1152) + 144) = 0;
    *(_BYTE *)(*(_QWORD *)(a4 + 1016) + 3) = 0;
    if ((*(_BYTE *)(a4 + 1004) - 2) < 8u && ((0xA5u >> (*(_BYTE *)(a4 + 1004) - 2)) & 1) != 0)
    {
      v234 = 0;
LABEL_44:
      *(_BYTE *)(a4 + 1007) = 0;
      v54 = 1;
LABEL_45:
      v55 = v54;
      v230 = v54;
      while (1)
      {
        if (v55 < v54)
        {
          if (*(_BYTE *)(a4 + 1161))
          {
            v56 = v27 / v223;
            v57 = v27 % v223;
            if (v27 % v223 >= 0)
              v58 = v27 % v223;
            else
              v58 = v57 + 1;
            v59 = v58 >> 1;
            v60 = v27 & 1 | (2 * v56);
          }
          else
          {
            v56 = v27 / v238;
            v57 = v27 % v238;
            v59 = v27 % v238;
            v60 = v27 / v238;
          }
          *(_DWORD *)(a4 + 976) = v59;
          *(_DWORD *)(a4 + 988) = v60;
          *(_DWORD *)(a4 + 980) = v60;
          v225 = v56;
          v61 = *(_QWORD *)(a4 + 1458264 + 8 * !(v56 & 1));
          *(_QWORD *)(v15 + 32752) = v61;
          *(_QWORD *)(v15 + 32744) = *(_QWORD *)(a4 + 1458264 + 8 * (v56 & 1));
          *(_QWORD *)(a4 + 1152) = v61 + 400 * v57;
          v227 = v57;
          *(_QWORD *)(*(_QWORD *)(v15 + 32752) + 400 * v57 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 1192) + 1152)
                                                                                              + 8 * a6));
          **(_DWORD **)(a4 + 1152) = v27;
          *(_DWORD *)(a4 + 992) = v27;
          *(_BYTE *)(*(_QWORD *)(a4 + 1152) + 144) = 0;
          *(_BYTE *)(*(_QWORD *)(a4 + 1016) + 3) = 0;
        }
        if (v27 >= v237)
          goto LABEL_232;
        if (*(_BYTE *)(a4 + 1164))
          v62 = v35;
        else
          v62 = 1;
        if (!v62)
        {
          v214 = 4294958327;
          goto LABEL_234;
        }
        if (!*(_BYTE *)(a4 + 1164) || (v63 = *(unsigned __int8 *)(a4 + 1004), v63 <= 9) && ((1 << v63) & 0x294) != 0)
          sub_2160CBB14(*(_DWORD *)(v15 + 56), *(_QWORD *)(v15 + 32744), *(_QWORD *)(v15 + 32752), v18);
        if (!(--v55 | v234))
          break;
        sub_2160CCC80((uint64_t)v18);
        if (*(_BYTE *)(a4 + 1007))
          v69 = sub_215FD1214((uint64_t)v18, v64, *(int32x2_t *)v65.i8, v66, v67, v68);
        else
          v69 = sub_215FD485C((uint64_t)v18, (int16x8_t)v64, v65);
        v214 = v69;
        if ((_DWORD)v69)
          goto LABEL_233;
        v78 = a12 ? sub_2160CCF4C((uint64_t)v18) : sub_2160CBF9C((uint64_t)v18);
        v214 = v78;
        if ((_DWORD)v78)
          goto LABEL_233;
        v79 = 0;
        v226 = 1;
LABEL_101:
        if (*(_DWORD *)(*(_QWORD *)(a4 + 1192) + 1164) <= *(_DWORD *)(a4 + 992))
          goto LABEL_232;
        sub_2160CBC00((uint64_t)v18, v32);
        if (v233[1] || v233[2] != 25)
        {
          v90 = (char)v239;
          v91 = sub_2160DD8F4((char)v239, *(char *)(*(_QWORD *)(a4 + 1016) + 56));
          v92 = sub_2160DD8F4((char)v239, *(char *)(*(_QWORD *)(a4 + 1016) + 57));
        }
        else
        {
          v90 = 0;
          v91 = 0;
          v92 = 0;
        }
        v93 = *(_QWORD *)(a4 + 1312);
        v94 = *(_BYTE *)(*(_QWORD *)(a4 + 1016) + 3);
        v95 = *(_BYTE *)(a4 + 1007);
        v96 = *(_DWORD *)(a4 + 976) + *(_DWORD *)(v93 + 12) * *(_DWORD *)(a4 + 980);
        *(_WORD *)(*(_QWORD *)(v93 + 72) + 2 * v96) = a5;
        *(_BYTE *)(*(_QWORD *)(v93 + 112) + v96) = v90;
        *(_BYTE *)(*(_QWORD *)(v93 + 120) + v96) = v91;
        *(_BYTE *)(*(_QWORD *)(v93 + 128) + v96) = v92;
        *(_BYTE *)(*(_QWORD *)(v93 + 136) + v96) = v94;
        *(_BYTE *)(*(_QWORD *)(v93 + 144) + v96) = v95;
        *(int32x2_t *)(*(_QWORD *)(v93 + 48) + 12 * (unsigned __int16)a5) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v93 + 48)+ 12* (unsigned __int16)a5), (int32x2_t)vand_s8((int8x8_t)(v90 | 0x100000000), (int8x8_t)vdup_n_s32(v79)));
        if (*(_BYTE *)(v228 + 8))
          v35 = !sub_215FC17EC(v235);
        else
          v35 = sub_2160AC88C(v15);
        v100 = v232;
        *a7 = v27;
        if (a12 && v27 == v240)
        {
          v101 = (v29 + 1);
          sub_21609E9C8((uint64_t *)v232, v222, 0, v231, v29, v29 + 1, v97, v98, v99);
          if (*(int *)(v232 + 184) < 1)
          {
            puts("cchung: simplifid to do LF for DVDApiDecoder only");
            exit(1);
          }
          v102 = sub_21609B1DC(v232, 0, v231, v29, (int)v29 + 1);
          if ((_DWORD)v102)
          {
            v214 = v102;
            goto LABEL_233;
          }
          v32 = a6;
          if (*(_DWORD *)(v232 + 220))
          {
            v104 = *(_QWORD *)(v219 + 64);
            v103 = *(_QWORD *)(v219 + 72);
            v105 = *(_DWORD *)(v219 + 168);
            v106 = *(_DWORD *)(v219 + 184);
            if (*(_BYTE *)(v219 + 32))
            {
              v107 = v105;
              v108 = v106;
              if (!*(_BYTE *)(v219 + 37))
                v108 = 0;
              v103 += v108;
              if (!*(_BYTE *)(v219 + 37))
                v107 = 0;
              v104 += v107;
              v105 *= 2;
              v106 *= 2;
            }
            v109 = *(int *)(v219 + 164);
            v110 = *(int *)(v219 + 180);
            v111 = *(int *)(v219 + 132);
            v112 = *(int *)(v219 + 148);
            if ((int)v29 >= 1)
              v113 = 16 * v29 - 4;
            else
              v113 = 0;
            v114 = 16 * v101;
            if (16 * (_DWORD)v101 != (_DWORD)v111)
              v114 = 16 * v101 - 4;
            v115 = v114 - v113;
            if (v114 > v113)
            {
              v116 = (int8x16_t *)(v104 + v105 * (uint64_t)v113);
              do
              {
                v117 = vqtbl1q_s8((int8x16_t)(16843009 * v116->u8[0]), (int8x16_t)xmmword_2160EE800);
                v116[-2] = v117;
                v116[-1] = v117;
                v118 = (int8x16_t *)((char *)v116 + v109);
                v119 = vqtbl1q_s8((int8x16_t)(16843009 * v116->u8[v109 - 1]), (int8x16_t)xmmword_2160EE800);
                *v118 = v119;
                v118[1] = v119;
                v116 = (int8x16_t *)((char *)v116 + v105);
                --v115;
              }
              while (v115);
            }
            v120 = v113 >> 1;
            v121 = (v114 >> 1) - (v113 >> 1);
            if (v114 >> 1 > v120)
            {
              v122 = (int8x16_t *)(v103 + v106 * (uint64_t)v120);
              do
              {
                v123 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v122->u16[-1] + v110)), (int8x16_t)xmmword_2160EE800);
                v122[-1] = vqtbl1q_s8((int8x16_t)(65537 * v122->u16[0]), (int8x16_t)xmmword_2160EE800);
                *(int8x16_t *)((char *)v122 + v110) = v123;
                v122 = (int8x16_t *)((char *)v122 + v106);
                --v121;
              }
              while (v121);
            }
            if ((int)v29 <= 0)
            {
              v124 = 0;
              v125 = v104 - 32;
              v126 = -2 * v105;
              do
              {
                if ((int)v109 >= -63)
                {
                  v127 = 0;
                  do
                  {
                    v128 = *(_OWORD *)(v125 + v127);
                    *(_OWORD *)(v125 - v105 + v127) = v128;
                    *(_OWORD *)(v125 + v126 + v127) = v128;
                    v129 = v127 < (int)v109 + 48;
                    v127 += 16;
                  }
                  while (v129);
                }
                v125 += v126;
                ++v124;
              }
              while (v124 != 10);
              v130 = 0;
              v131 = v103 - 16;
              do
              {
                if ((int)v110 >= -31)
                {
                  v132 = 0;
                  do
                  {
                    *(_OWORD *)(v131 - v106 + v132) = *(_OWORD *)(v131 + v132);
                    v129 = v132 < (int)v110 + 16;
                    v132 += 16;
                  }
                  while (v129);
                }
                v131 -= v106;
                ++v130;
              }
              while (v130 != 8);
            }
            if (v114 == (_DWORD)v111)
            {
              v133 = 0;
              v134 = v105 * (v111 - 1);
              v135 = v104 - 32;
              v136 = v104 - 32 + v134;
              v137 = 2 * v105;
              v138 = v135 + v134 + v105;
              v139 = v135 + v134 + v137;
              do
              {
                if ((int)v109 >= -63)
                {
                  v140 = 0;
                  do
                  {
                    v141 = *(_OWORD *)(v136 + v140);
                    *(_OWORD *)(v138 + v140) = v141;
                    *(_OWORD *)(v139 + v140) = v141;
                    v129 = v140 < v109 + 48;
                    v140 += 16;
                  }
                  while (v129);
                }
                v136 += v137;
                ++v133;
                v138 += v137;
                v139 += v137;
              }
              while (v133 != 10);
              v142 = 0;
              v143 = v103 + v106 * (v112 - 1) - 16;
              do
              {
                if ((int)v110 >= -31)
                {
                  v144 = 0;
                  do
                  {
                    *(_OWORD *)(v143 + v106 + v144) = *(_OWORD *)(v143 + v144);
                    v129 = v144 < v110 + 16;
                    v144 += 16;
                  }
                  while (v129);
                }
                v143 += v106;
                ++v142;
              }
              while (v142 != 8);
            }
          }
          v240 += v238;
        }
        else
        {
          v101 = v29;
        }
        v27 = sub_2160CCE28(v27);
        v29 = v101;
        v54 = v230;
        if (!v55)
          goto LABEL_182;
      }
      if (*(_BYTE *)(a4 + 1164))
        v70 = sub_215FC1BA0(v235, (unsigned __int16 *)v18, *(unsigned __int8 *)(a4 + 1007), v221, v15, 0);
      else
        v70 = sub_2160D367C(v15, v221, a10, a11, (uint64_t)v18);
      v214 = v70;
      if ((_DWORD)v70)
        goto LABEL_233;
      if (*(_QWORD *)(v15 + 16) - *(_QWORD *)v15 > *(int *)(v15 + 12) || (v233[54] - 26) < 0xCCu)
        goto LABEL_232;
      v239 = (char)v233[54]
           + (char)v239
           + 52
           - 52
           * (((20165 * ((char)v233[54] + (char)v239 + 52)) >> 20)
            + ((20165 * ((char)v233[54] + (char)v239 + 52)) >> 31));
      v233[55] = v239;
      if (v233[1] - 2 < 4)
      {
        if (*(_BYTE *)(a4 + 1007))
          v80 = sub_215FD1214((uint64_t)v18, v71, *(int32x2_t *)v72.i8, *(int32x2_t *)&v73, *(int32x2_t *)&v74, *(int32x2_t *)&v75);
        else
          v80 = sub_215FD485C((uint64_t)v18, (int16x8_t)v71, v72);
        v214 = v80;
        if ((_DWORD)v80)
          goto LABEL_233;
        if (a12)
        {
          if (!sub_2160CCE30((uint64_t)v18, v81, v82, v83, v84, v85, v86))
            goto LABEL_95;
        }
        else if (!sub_2160CBE38((uint64_t)v18, v81, v82, v83, v84, v85, v86))
        {
LABEL_95:
          v79 = -1;
          v226 = 1;
LABEL_100:
          v220 = 1;
          goto LABEL_101;
        }
        v87 = *(_QWORD *)(a4 + 1312);
        v88 = (int8x16_t *)(*(_QWORD *)(a4 + 1152) + 80);
        if (*(_BYTE *)(a4 + 1007))
          sub_21609DD30(v87, v227, v225, v88);
        else
          sub_21609DEA0(v87, v227, v225, v88);
        goto LABEL_95;
      }
      if (v233[1])
      {
        v214 = 4294966630;
        goto LABEL_233;
      }
      if (v233[2] == 25)
      {
        v89 = sub_2160CBFF8((uint64_t)v18);
      }
      else
      {
        if (v217)
        {
LABEL_99:
          v79 = -1;
          goto LABEL_100;
        }
        v89 = sub_215FCFC40((uint64_t)v18, (int32x4_t)v71, (int8x16_t)v72, v73, v74, v75, v76, v77);
      }
      v214 = v89;
      if ((_DWORD)v89)
        goto LABEL_233;
      goto LABEL_99;
    }
    if (*(_BYTE *)(a4 + 1164))
    {
      sub_2160CBB14(*(_DWORD *)(v15 + 56), *(_QWORD *)(v15 + 32744), *(_QWORD *)(v15 + 32752), v18);
      v234 = sub_215FC1768(v235, v227);
      goto LABEL_44;
    }
    v44 = *(_QWORD *)(v15 + 16);
    v43 = *(unsigned int **)(v15 + 24);
    v45 = *(_DWORD *)(v15 + 32);
    v46 = *(unsigned __int8 *)(v15 + 36);
    v47 = __clz(v45 | 1);
    if (!v45)
      ++v47;
    if (v47 > 0xC)
    {
      v148 = v46 + 1;
      v149 = (v46 + 1) & 7;
      v150 = (unsigned int *)(v44 + (v148 >> 3));
      v151 = bswap32(*v150) << v149;
      if (v150 <= v43)
        v152 = v150;
      else
        v152 = *(unsigned int **)(v15 + 24);
      if (v45 < 0)
      {
        v156 = 0;
      }
      else
      {
        v153 = 0;
        do
        {
          v154 = v151;
          v155 = v149;
          v156 = v153 + 1;
          v157 = (v149 + 1);
          v149 = ((_BYTE)v149 + 1) & 7;
          v152 = (unsigned int *)((char *)v152 + (v157 >> 3));
          v151 = bswap32(*v152) << (v157 & 7);
          if (v152 > v43)
            v152 = *(unsigned int **)(v15 + 24);
          if ((v154 & 0x80000000) != 0)
            break;
        }
        while (v153++ < 0x1F);
        if (v156 - 1 > 0x17)
        {
          v159 = v151 >> (48 - v156);
          v160 = ((v155 + 1) & 7) + v156;
          v161 = v160 - 16;
          v51 = v160 & 7;
          v162 = (unsigned int *)((char *)v152 + (v161 >> 3));
          v163 = bswap32(*v162) << v51;
          if (v162 <= v43)
            v164 = v162;
          else
            v164 = *(unsigned int **)(v15 + 24);
          v166 = *(unsigned int *)((char *)v164 + 2);
          v165 = (unsigned int *)((char *)v164 + 2);
          v53 = bswap32(v166) << v51;
          if (v165 <= v43)
            v43 = v165;
          v167 = __PAIR64__(v159, v163) >> 16;
LABEL_177:
          v49 = v167 + ~(-1 << v156);
          goto LABEL_178;
        }
      }
      v167 = v151 >> -(char)v156;
      v168 = v156 + v149;
      v51 = (v156 + v149) & 7;
      v169 = (unsigned int *)((char *)v152 + (v168 >> 3));
      v53 = bswap32(*v169) << v51;
      if (v169 <= v43)
        v43 = v169;
      goto LABEL_177;
    }
    v48 = (v45 << (v47 + 1)) >> -(char)v47;
    if (!v47)
      v48 = 0;
    v49 = v48 + ~(-1 << v47);
    v50 = v46 + 2 * v47 + 1;
    v51 = v50 & 7;
    v52 = (unsigned int *)(v44 + (v50 >> 3));
    v53 = bswap32(*v52) << (v50 & 7);
    if (v52 <= v43)
      v43 = v52;
LABEL_178:
    *(_QWORD *)(v15 + 16) = v43;
    *(_DWORD *)(v15 + 32) = v53;
    v214 = 4294958327;
    *(_BYTE *)(v15 + 36) = v51;
    if (v49 > v36 || v49 < 0)
      goto LABEL_233;
    v35 = sub_2160AC88C(v15);
    v234 = !v35;
    *(_BYTE *)(a4 + 1007) = 0;
    v54 = v35 + v49;
    if (v35 + v49)
      goto LABEL_45;
    v101 = v29;
    v100 = v232;
LABEL_182:
    v30 = v237;
    if (!v35)
      break;
    v29 = v101;
  }
  while (v27 < v237);
  if (!a12 || v27 != v237)
    goto LABEL_228;
  v170 = v101 + 1;
  sub_21609E9C8((uint64_t *)v100, v222, 0, v231, v101, v101 + 1, v145, v146, v147);
  if (*(int *)(v100 + 184) < 1 || (v214 = sub_21609B1DC(v232, 0, v231, v101, (int)v101 + 1), !(_DWORD)v214))
  {
    if (*(_DWORD *)(v232 + 220))
    {
      v172 = *(_QWORD *)(v219 + 64);
      v171 = *(_QWORD *)(v219 + 72);
      v173 = *(_DWORD *)(v219 + 168);
      v174 = *(_DWORD *)(v219 + 184);
      v175 = *(int *)(v219 + 132);
      if (*(_BYTE *)(v219 + 32))
      {
        v176 = v173;
        v177 = v174;
        if (!*(_BYTE *)(v219 + 37))
          v177 = 0;
        v171 += v177;
        if (!*(_BYTE *)(v219 + 37))
          v176 = 0;
        v172 += v176;
        v173 *= 2;
        v174 *= 2;
      }
      v178 = *(int *)(v219 + 164);
      v179 = *(int *)(v219 + 180);
      v180 = *(int *)(v219 + 148);
      if ((int)v101 >= 1)
        v181 = 16 * v101 - 4;
      else
        v181 = 0;
      v182 = 16 * v170;
      if (16 * v170 != (_DWORD)v175)
        v182 = 16 * v170 - 4;
      v183 = v181 >> 1;
      v184 = v182 >> 1;
      v185 = v182 - v181;
      if (v182 > v181)
      {
        v186 = (int8x16_t *)(v172 + v173 * (uint64_t)v181);
        do
        {
          v187 = vqtbl1q_s8((int8x16_t)(16843009 * v186->u8[0]), (int8x16_t)xmmword_2160EE800);
          v186[-2] = v187;
          v186[-1] = v187;
          v188 = (int8x16_t *)((char *)v186 + v178);
          v189 = vqtbl1q_s8((int8x16_t)(16843009 * v186->u8[v178 - 1]), (int8x16_t)xmmword_2160EE800);
          *v188 = v189;
          v188[1] = v189;
          v186 = (int8x16_t *)((char *)v186 + v173);
          --v185;
        }
        while (v185);
      }
      v190 = __OFSUB__(v184, v183);
      v191 = v184 - v183;
      if (!((v191 < 0) ^ v190 | (v191 == 0)))
      {
        v192 = (int8x16_t *)(v171 + v174 * (uint64_t)v183);
        do
        {
          v193 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v192->u16[-1] + v179)), (int8x16_t)xmmword_2160EE800);
          v192[-1] = vqtbl1q_s8((int8x16_t)(65537 * v192->u16[0]), (int8x16_t)xmmword_2160EE800);
          *(int8x16_t *)((char *)v192 + v179) = v193;
          v192 = (int8x16_t *)((char *)v192 + v174);
          --v191;
        }
        while (v191);
      }
      if ((int)v101 <= 0)
      {
        v194 = 0;
        v195 = v172 - 32;
        v196 = -2 * v173;
        do
        {
          if ((int)v178 >= -63)
          {
            v197 = 0;
            do
            {
              v198 = *(_OWORD *)(v195 + v197);
              *(_OWORD *)(v195 - v173 + v197) = v198;
              *(_OWORD *)(v195 + v196 + v197) = v198;
              v129 = v197 < (int)v178 + 48;
              v197 += 16;
            }
            while (v129);
          }
          v195 += v196;
          ++v194;
        }
        while (v194 != 10);
        v199 = 0;
        v200 = v171 - 16;
        do
        {
          if ((int)v179 >= -31)
          {
            v201 = 0;
            do
            {
              *(_OWORD *)(v200 - v174 + v201) = *(_OWORD *)(v200 + v201);
              v129 = v201 < (int)v179 + 16;
              v201 += 16;
            }
            while (v129);
          }
          v200 -= v174;
          ++v199;
        }
        while (v199 != 8);
      }
      if (v182 == (_DWORD)v175)
      {
        v202 = 0;
        v203 = v173 * (v175 - 1);
        v204 = v172 + v203 - 32;
        v205 = 2 * v173;
        v206 = v203 + v205;
        v207 = v203 + v173 + v172 - 32;
        v208 = v206 + v172 - 32;
        do
        {
          if ((int)v178 >= -63)
          {
            v209 = 0;
            do
            {
              v210 = *(_OWORD *)(v204 + v209);
              *(_OWORD *)(v207 + v209) = v210;
              *(_OWORD *)(v208 + v209) = v210;
              v129 = v209 < v178 + 48;
              v209 += 16;
            }
            while (v129);
          }
          v204 += v205;
          ++v202;
          v207 += v205;
          v208 += v205;
        }
        while (v202 != 10);
        v211 = 0;
        v212 = v171 + v174 * (v180 - 1) - 16;
        do
        {
          if ((int)v179 >= -31)
          {
            v213 = 0;
            do
            {
              *(_OWORD *)(v212 + v174 + v213) = *(_OWORD *)(v212 + v213);
              v129 = v213 < v179 + 16;
              v213 += 16;
            }
            while (v129);
          }
          v212 += v174;
          ++v211;
        }
        while (v211 != 8);
      }
    }
LABEL_228:
    if (a8)
      *a8 = v226 == 0;
    v214 = 0;
    if (a9)
      *a9 = v220 == 0;
  }
LABEL_233:
  if (*(_BYTE *)(a4 + 1164))
LABEL_234:
    sub_215FC1698(v235, v15);
  return v214;
}

uint64_t sub_2160B7E88(uint64_t *a1, int a2, int a3)
{
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int16x8_t v26;
  uint16x8_t v27;
  int64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unsigned __int16 v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint64_t *v49;
  int v50;
  _DWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int32x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  __int16 v65;
  uint64_t **v67;
  int v68;
  int v69;
  _QWORD *v70;
  int8x16_t v71[2];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1[4];
  v6 = *((_DWORD *)a1 + 10);
  v64 = *((_DWORD *)a1 + 11);
  v52 = (_DWORD *)a1[6];
  v54 = a1[9];
  v55 = *((_QWORD *)v5 + 127);
  v7 = (uint64_t **)*((_QWORD *)v5 + 147);
  v8 = (_QWORD *)*((_QWORD *)v5 + 10);
  v9 = *(int *)(*a1 + 4);
  sub_215FC1468((uint64_t)v7);
  v10 = 0;
  v11 = v9 * a2;
  v68 = a2;
  if (*(_DWORD *)(v4 + 32) == 1)
    v12 = v9 * a2;
  else
    v12 = (a2 << 31 >> 31) & v9;
  v62 = v8[9];
  v63 = v9;
  v60 = v8[15];
  v61 = v8[14];
  v58 = v8[17];
  v59 = v8[16];
  v70 = v8;
  v65 = v6;
  v57 = (int32x2_t *)(v8[6] + 12 * v6);
  v69 = v11 + a3;
  v13 = a3;
  v14 = v11;
  v15 = v54 + 1168 * (v12 + (uint64_t)a3);
  v16 = 4 * (a3 + (uint64_t)v11);
  v67 = v7;
  v56 = v11;
  while (1)
  {
    v17 = v14 + v13;
    v18 = 4294958327;
    if (v14 + v13 >= *((int *)v70 + 5) || v69 < 0)
      goto LABEL_36;
    **((_DWORD **)v5 + 144) = v14 + v13;
    *((_DWORD *)v5 + 248) = v14 + v13;
    *((_DWORD *)v5 + 244) = v13;
    *((_DWORD *)v5 + 245) = v68;
    *(_DWORD *)(v15 + 820) = v14 + v13;
    *(_DWORD *)(v15 + 824) = v13;
    *(_DWORD *)(v15 + 828) = v68;
    sub_215FCF138(*((unsigned int *)v5 + 356390), *((_QWORD **)v5 + 182281), (int *)v5 + 244);
    v19 = v5[1004];
    if (v19 > 9 || ((1 << v19) & 0x294) == 0)
      break;
    *(_BYTE *)(v15 + 832) = 0;
LABEL_10:
    v71[0] = 0uLL;
    v20 = sub_215FC17F8(v7, (unsigned __int16 *)v5 + 488, (uint64_t)(v5 + 1425504), v15, (uint64_t)v71);
    if ((_DWORD)v20)
    {
      v18 = v20;
LABEL_36:
      v49 = a1;
      if (v10)
        goto LABEL_38;
LABEL_37:
      v5[36] = 1;
      *((_DWORD *)v5 + 11) = v13 - 1;
      goto LABEL_38;
    }
    if (*((_QWORD *)v5 + 178190) - *((_QWORD *)v5 + 178188) > *((int *)v5 + 356379))
      goto LABEL_36;
    *((_DWORD *)v5 + 2) = 1;
    v23 = *(char *)(v55 + 54);
    if ((*(_BYTE *)(v55 + 54) - 26) < 0xCCu)
      goto LABEL_36;
    v24 = v23 + *v5 + 52 - 52 * (((20165 * (v23 + *v5 + 52)) >> 20) + ((20165 * (v23 + *v5 + 52)) >> 31));
    *v5 = v23 + *v5 + 52 - 52 * (((20165 * (v23 + *v5 + 52)) >> 20) + (20165 * (v23 + *v5 + 52) < 0));
    *(_BYTE *)(v15 + 818) = v24;
    v25 = *(unsigned __int8 *)(*((_QWORD *)v5 + 127) + 1);
    *(_BYTE *)(v15 + 833) = v25;
    *(_BYTE *)(v15 + 834) = *(_BYTE *)(*((_QWORD *)v5 + 127) + 2);
    *(_BYTE *)(v15 + 835) = *(_BYTE *)(*((_QWORD *)v5 + 127) + 3);
    if (v25)
    {
      *((_DWORD *)v5 + 1) = 1;
      if (*(_BYTE *)(v15 + 816))
      {
        v26 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vcgtzq_s8(v71[0]), (int8x16_t)xmmword_2160F2B40), (int8x16_t)xmmword_2160F2B50);
        v27.i64[0] = 0x7000700070007;
        v27.i64[1] = 0x7000700070007;
        v28 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s16(v26, 8uLL), (int8x16_t)vshlq_u16((uint16x8_t)v26, v27));
        v29 = vandq_s8(vcltzq_s8((int8x16_t)v28), (int8x16_t)xmmword_2160F2980);
        v30 = vpaddq_s8(v29, v29);
        v31 = vpaddq_s8(v30, v30);
        v32 = vpaddq_s8(v31, v31).u16[0];
        v33 = (int64x2_t)vzip1q_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28);
        v22 = (int16x8_t)xmmword_2160F18B0;
        v34 = vandq_s8(vcltzq_s8(vqtbl1q_s8(vzip1q_s8((int8x16_t)v33, (int8x16_t)vdupq_laneq_s64(v33, 1)), (int8x16_t)xmmword_2160F18B0)), (int8x16_t)xmmword_2160F2980);
        v35 = vpaddq_s8(v34, v34);
        v36 = vpaddq_s8(v35, v35);
        v21 = (int16x8_t)vpaddq_s8(v36, v36);
        *(_DWORD *)(v70[4] + (v16 & 0x3FFFFFFFCLL)) = v21.u16[0] | (v32 << 16);
      }
      v37 = sub_215FD648C((uint64_t)(v5 + 976), v15, v21, v22);
      if ((_DWORD)v37)
      {
        v18 = v37;
        v7 = v67;
        goto LABEL_36;
      }
    }
    v38 = -1;
LABEL_18:
    sub_215FCF1E4((int *)v5 + 244, v64, (int64x2_t)v21);
    if (*(_BYTE *)(v15 + 833) || *(_BYTE *)(v15 + 834) != 25)
    {
      v39 = (char)v24;
      v42 = v5[13] + (char)v24;
      v43 = v5[14] + (char)v24;
      if (v42 >= 0x33)
        v42 = 51;
      if (v43 >= 0x33)
        v43 = 51;
      v40 = byte_2160F5010[v42];
      v41 = byte_2160F5010[v43];
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
    }
    *(_WORD *)(v62 + 2 * v17) = v65;
    *(_BYTE *)(v61 + v17) = v39;
    *(_BYTE *)(v60 + v17) = v40;
    *(_BYTE *)(v59 + v17) = v41;
    *(_BYTE *)(v58 + v17) = *(_BYTE *)(*((_QWORD *)v5 + 127) + 3);
    *v57 = vadd_s32(*v57, (int32x2_t)vand_s8((int8x8_t)(v39 | 0x100000000), (int8x8_t)vdup_n_s32(v38)));
    ++v13;
    v7 = v67;
    v44 = sub_215FC17EC(v67);
    v14 = v56;
    if (v13 < v63)
    {
      v15 += 1168;
      v16 += 4;
      v10 = 1;
      if (!v44)
        continue;
    }
    v18 = 0;
    v10 = !v44;
    *v52 = *((_DWORD *)v5 + 248);
    goto LABEL_36;
  }
  v45 = sub_215FC1768(v7, v13);
  *(_BYTE *)(v15 + 832) = v45;
  if (!v45)
    goto LABEL_10;
  LOBYTE(v24) = *v5;
  *((_DWORD *)v5 + 1) = 1;
  v46 = sub_2160CC524((uint64_t)(v5 + 976));
  if (!(_DWORD)v46)
  {
    v46 = sub_215FD648C((uint64_t)(v5 + 976), v15, v47, v48);
    if (!(_DWORD)v46)
    {
      v38 = 0;
      *(_WORD *)(v15 + 816) = 0;
      goto LABEL_18;
    }
  }
  v18 = v46;
  v49 = a1;
  v7 = v67;
  if (!v10)
    goto LABEL_37;
LABEL_38:
  sub_215FC1684((uint64_t)v7);
  if ((_DWORD)v18)
  {
    v5[36] = 1;
    *((_DWORD *)v5 + 11) = v13 - 1;
    v50 = *((_DWORD *)v5 + 248);
    if (v50)
      *v52 = v50 - 1;
  }
  *((_DWORD *)v49 + 20) = v18;
  return v18;
}

uint64_t sub_2160B83A0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int16x8_t v22;
  int16x8_t v23;
  int v24;
  unsigned int v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int16x8_t v31;
  uint16x8_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  _BOOL4 v47;
  int v48;
  int16x8_t v49;
  int16x8_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned int *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  unsigned int *v97;
  _BOOL4 v98;
  int v99;
  int v100;
  int v101;
  int v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  int32x2_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v121;
  int v122;
  unsigned int v123;
  int *v124;
  uint64_t v125;

  LODWORD(v3) = a3;
  v4 = a1;
  v5 = *(char **)(a1 + 32);
  v118 = *(_DWORD *)(a1 + 40);
  v125 = *(unsigned int *)(a1 + 44);
  v6 = *(_DWORD **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 72);
  v115 = *((_QWORD *)v5 + 127);
  v8 = *((_QWORD *)v5 + 10);
  v9 = *(int *)(*(_QWORD *)a1 + 4);
  v10 = *((_DWORD *)v5 + 7);
  v11 = v10 - v9;
  if (v10 <= (int)v9)
    v11 = 0;
  *((_DWORD *)v5 + 7) = v11;
  v116 = v5[1425576] == 0;
  v119 = v9;
  result = 4294958327;
  v13 = (v9 * a2 + a3);
  if ((int)v9 * a2 + a3 < 0 || (int)v13 >= *(_DWORD *)(v8 + 20))
    goto LABEL_83;
  v103 = v6;
  v104 = v4;
  v14 = 0;
  v124 = (int *)(v5 + 976);
  v111 = *(_QWORD *)(v8 + 72);
  v110 = *(_QWORD *)(v8 + 112);
  v109 = *(_QWORD *)(v8 + 120);
  v108 = *(_QWORD *)(v8 + 128);
  v107 = *(_QWORD *)(v8 + 136);
  v15 = (a2 << 31 >> 31) & v9;
  v117 = v8;
  if (v10 >= (int)v9)
    v10 = v9;
  v121 = v10;
  v114 = &v5[8 * !(a2 & 1) + 1458264];
  v113 = &v5[8 * (a2 & 1) + 1458264];
  v106 = (int32x2_t *)(*(_QWORD *)(v8 + 48) + 12 * v118);
  if ((int)v9 <= a3 + 1)
    v16 = a3 + 1;
  else
    v16 = v9;
  v102 = v16;
  v3 = a3;
  v105 = (int)v9 * a2;
  v112 = v15;
  v17 = 1168 * v15 + 1168 * a3 + v7 + 848;
  while (1)
  {
    v18 = v3 + v112;
    v19 = v7 + 1168 * (v3 + v112);
    **((_DWORD **)v5 + 144) = v13;
    *((_DWORD *)v5 + 248) = v13;
    *((_DWORD *)v5 + 244) = v3;
    *((_DWORD *)v5 + 245) = a2;
    *(_DWORD *)(v19 + 820) = v13;
    *(_DWORD *)(v19 + 824) = v3;
    *(_DWORD *)(v19 + 828) = a2;
    v20 = *(_QWORD *)v114;
    *((_QWORD *)v5 + 182282) = *(_QWORD *)v114;
    *((_QWORD *)v5 + 182281) = *(_QWORD *)v113;
    *((_QWORD *)v5 + 144) = v20 + 400 * v3;
    *(_QWORD *)(*((_QWORD *)v5 + 182282) + 400 * v3 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 149)
                                                                                                 + 1152)
                                                                                     + 8 * v125));
    sub_2160CBB14(*((_DWORD *)v5 + 356390), *((_QWORD *)v5 + 182281), *((_QWORD *)v5 + 182282), v124);
    v21 = v5[1004];
    if (v21 <= 9 && ((1 << v21) & 0x294) != 0)
      goto LABEL_13;
    v48 = v121;
    if (v121)
      goto LABEL_39;
    if (*((_DWORD *)v5 + 8) != 1)
    {
      v66 = *((_QWORD *)v5 + 178190);
      v65 = (unsigned int *)*((_QWORD *)v5 + 178191);
      v67 = *((_DWORD *)v5 + 356384);
      v68 = v5[1425540];
      v69 = __clz(v67 | 1);
      if (!v67)
        ++v69;
      if (v69 <= 0xC)
      {
        v70 = (v67 << (v69 + 1)) >> -(char)v69;
        if (!v69)
          v70 = 0;
        v71 = v70 + ~(-1 << v69);
        v72 = v68 + 2 * v69 + 1;
        v73 = v72 & 7;
        v74 = (unsigned int *)(v66 + (v72 >> 3));
        v75 = bswap32(*v74) << (v72 & 7);
        if (v74 <= v65)
          v65 = v74;
LABEL_72:
        *((_QWORD *)v5 + 178190) = v65;
        *((_DWORD *)v5 + 356384) = v75;
        v5[1425540] = v73;
        if ((signed int)(v71 + v13) > *(_DWORD *)(v117 + 20))
          goto LABEL_77;
        v123 = v71;
        v98 = sub_2160AC88C((uint64_t)(v5 + 1425504));
        v99 = v123;
        *((_DWORD *)v5 + 8) = v98;
        if ((int)(v123 + v3) > (int)v119)
        {
          *((_DWORD *)v5 + 7) = v123 + v3 - v119;
          v99 = v119 - v3;
        }
        v48 = v99;
        if (v99)
        {
LABEL_39:
          v122 = v48;
          *(_BYTE *)(v7 + 1168 * v18 + 832) = 1;
          LOBYTE(v25) = *v5;
          *((_DWORD *)v5 + 1) = 1;
          result = sub_2160CCC80((uint64_t)v124);
          if ((_DWORD)result)
            goto LABEL_78;
          result = sub_215FD485C((uint64_t)v124, v49, v50);
          if ((_DWORD)result)
            goto LABEL_78;
          v41 = 0;
          v51 = v7 + 1168 * v18;
          v52 = (_OWORD *)*((_QWORD *)v5 + 128);
          v53 = v52[1];
          v54 = v52[2];
          v55 = v52[4];
          *(_OWORD *)(v51 + 880) = v52[3];
          *(_OWORD *)(v51 + 896) = v55;
          *(_OWORD *)(v51 + 848) = v53;
          *(_OWORD *)(v51 + 864) = v54;
          v56 = v52[5];
          v57 = v52[6];
          v58 = v52[8];
          *(_OWORD *)(v51 + 944) = v52[7];
          *(_OWORD *)(v51 + 960) = v58;
          *(_OWORD *)(v51 + 912) = v56;
          *(_OWORD *)(v51 + 928) = v57;
          v59 = v52[9];
          v60 = v52[10];
          v61 = v52[12];
          *(_OWORD *)(v51 + 1008) = v52[11];
          *(_OWORD *)(v51 + 1024) = v61;
          *(_OWORD *)(v51 + 976) = v59;
          *(_OWORD *)(v51 + 992) = v60;
          v62 = v52[13];
          v63 = v52[14];
          v64 = v52[15];
          *(_OWORD *)(v51 + 1088) = v52[16];
          *(_OWORD *)(v51 + 1072) = v64;
          *(_OWORD *)(v51 + 1056) = v63;
          *(_OWORD *)(v51 + 1040) = v62;
          *(_BYTE *)(v51 + 1104) = *(_BYTE *)(*((_QWORD *)v5 + 128) + 272);
          v121 = v122 - 1;
          *(_WORD *)(v51 + 816) = 0;
          goto LABEL_24;
        }
        goto LABEL_76;
      }
      v76 = v68 + 1;
      v77 = (v68 + 1) & 7;
      v78 = (unsigned int *)(v66 + (v76 >> 3));
      v79 = bswap32(*v78) << v77;
      if (v78 <= v65)
        v80 = v78;
      else
        v80 = (unsigned int *)*((_QWORD *)v5 + 178191);
      if (v67 < 0)
      {
        v84 = 0;
      }
      else
      {
        v81 = 0;
        do
        {
          v82 = v79;
          v83 = v77;
          v84 = v81 + 1;
          v85 = (v77 + 1);
          v77 = ((_BYTE)v77 + 1) & 7;
          v80 = (unsigned int *)((char *)v80 + (v85 >> 3));
          v79 = bswap32(*v80) << (v85 & 7);
          if (v80 > v65)
            v80 = (unsigned int *)*((_QWORD *)v5 + 178191);
          if ((v82 & 0x80000000) != 0)
            break;
        }
        while (v81++ < 0x1F);
        if (v84 - 1 > 0x17)
        {
          v87 = v79 >> (48 - v84);
          v88 = ((v83 + 1) & 7) + v84;
          v89 = v88 - 16;
          v73 = v88 & 7;
          v90 = (unsigned int *)((char *)v80 + (v89 >> 3));
          v91 = bswap32(*v90) << v73;
          if (v90 <= v65)
            v92 = v90;
          else
            v92 = (unsigned int *)*((_QWORD *)v5 + 178191);
          v94 = *(unsigned int *)((char *)v92 + 2);
          v93 = (unsigned int *)((char *)v92 + 2);
          v75 = bswap32(v94) << v73;
          if (v93 <= v65)
            v65 = v93;
          v95 = __PAIR64__(v87, v91) >> 16;
LABEL_71:
          v71 = v95 + ~(-1 << v84);
          goto LABEL_72;
        }
      }
      v95 = v79 >> -(char)v84;
      v96 = v84 + v77;
      v73 = (v84 + v77) & 7;
      v97 = (unsigned int *)((char *)v80 + (v96 >> 3));
      v75 = bswap32(*v97) << v73;
      if (v97 <= v65)
        v65 = v97;
      goto LABEL_71;
    }
LABEL_76:
    v121 = 0;
LABEL_13:
    *(_BYTE *)(v7 + 1168 * v18 + 832) = 0;
    *((_DWORD *)v5 + 8) = 0;
    *((_DWORD *)v5 + 2) = 1;
    result = sub_2160D4C30((uint64_t)(v5 + 1425504), v116, 3, 0, (uint64_t)v124, (_BYTE *)v19);
    if ((_DWORD)result)
      goto LABEL_78;
    if (*((_QWORD *)v5 + 178190) - *((_QWORD *)v5 + 178188) > *((int *)v5 + 356379)
      || (v24 = *(char *)(v115 + 54), (*(_BYTE *)(v115 + 54) - 26) < 0xCCu))
    {
LABEL_77:
      result = 4294958327;
LABEL_78:
      v6 = v103;
      v4 = v104;
      if (v14)
        goto LABEL_85;
      goto LABEL_83;
    }
    v25 = v24 + *v5 + 52 - 52 * (((20165 * (v24 + *v5 + 52)) >> 20) + ((20165 * (v24 + *v5 + 52)) >> 31));
    *v5 = v24 + *v5 + 52 - 52 * (((20165 * (v24 + *v5 + 52)) >> 20) + (20165 * (v24 + *v5 + 52) < 0));
    v26 = *(unsigned __int8 *)(*((_QWORD *)v5 + 127) + 1);
    v27 = (_BYTE *)(v7 + 1168 * v18);
    v27[833] = v26;
    v27[834] = *(_BYTE *)(*((_QWORD *)v5 + 127) + 2);
    v27[835] = *(_BYTE *)(*((_QWORD *)v5 + 127) + 3);
    if (v26)
    {
      *((_DWORD *)v5 + 1) = 1;
      result = sub_215FD485C((uint64_t)v124, v22, v23);
      if ((_DWORD)result)
        goto LABEL_78;
      v28 = *(unsigned __int8 *)(*((_QWORD *)v5 + 128) + 272);
      *(_BYTE *)(v7 + 1168 * v18 + 1104) = v28;
      if (v28)
      {
        v29 = 0;
        v30 = 16 * v28;
        do
        {
          *(_OWORD *)(v17 + v29) = *(_OWORD *)(*((_QWORD *)v5 + 128) + v29 + 16);
          v29 += 16;
        }
        while (v30 != v29);
      }
      if (*(_BYTE *)(v7 + 1168 * v18 + 816))
      {
        v31 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vcgtzq_s8(*(int8x16_t *)(*((_QWORD *)v5 + 144) + 80)), (int8x16_t)xmmword_2160F2B40), (int8x16_t)xmmword_2160F2B50);
        v32.i64[0] = 0x7000700070007;
        v32.i64[1] = 0x7000700070007;
        v33 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s16(v31, 8uLL), (int8x16_t)vshlq_u16((uint16x8_t)v31, v32));
        v34 = vandq_s8(vcltzq_s8((int8x16_t)v33), (int8x16_t)xmmword_2160F2980);
        v35 = vpaddq_s8(v34, v34);
        v36 = vpaddq_s8(v35, v35);
        v37 = (int64x2_t)vzip1q_s8((int8x16_t)vdupq_laneq_s64(v33, 1), (int8x16_t)v33);
        v38 = vandq_s8(vcltzq_s8(vqtbl1q_s8(vzip1q_s8((int8x16_t)v37, (int8x16_t)vdupq_laneq_s64(v37, 1)), (int8x16_t)xmmword_2160F18B0)), (int8x16_t)xmmword_2160F2980);
        v39 = vpaddq_s8(v38, v38);
        v40 = vpaddq_s8(v39, v39);
        *(_DWORD *)(*(_QWORD *)(v117 + 32) + 4 * v13) = vpaddq_s8(v40, v40).u16[0] | (vpaddq_s8(v36, v36).u16[0] << 16);
      }
    }
    *(_BYTE *)(v7 + 1168 * v18 + 818) = v25;
    v41 = -1;
LABEL_24:
    if (*(_DWORD *)(*((_QWORD *)v5 + 149) + 1164) <= *((_DWORD *)v5 + 248))
      goto LABEL_77;
    sub_2160CBC00((uint64_t)v124, v125);
    if (*(_BYTE *)(v7 + 1168 * v18 + 833) || *(_BYTE *)(v7 + 1168 * v18 + 834) != 25)
    {
      v42 = (char)v25;
      v45 = v5[13] + (char)v25;
      v46 = v5[14] + (char)v25;
      if (v45 >= 0x33)
        v45 = 51;
      if (v46 >= 0x33)
        v46 = 51;
      v43 = byte_2160F5010[v45];
      v44 = byte_2160F5010[v46];
    }
    else
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
    }
    *(_WORD *)(v111 + 2 * v13) = v118;
    *(_BYTE *)(v110 + v13) = v42;
    *(_BYTE *)(v109 + v13) = v43;
    *(_BYTE *)(v108 + v13) = v44;
    *(_BYTE *)(v107 + v13) = *(_BYTE *)(*((_QWORD *)v5 + 127) + 3);
    *v106 = vadd_s32(*v106, (int32x2_t)vand_s8((int8x8_t)(v42 | 0x100000000), (int8x8_t)vdup_n_s32(v41)));
    ++v3;
    v47 = sub_2160AC88C((uint64_t)(v5 + 1425504));
    v14 = v47;
    if (v3 >= v119)
    {
      v6 = v103;
      v4 = v104;
      v100 = v102;
      goto LABEL_82;
    }
    if (!(v47 | v121))
      break;
    if (v3 + v105 >= 0)
    {
      ++v13;
      v17 += 1168;
      if (v3 + v105 < *(int *)(v117 + 20))
        continue;
    }
    goto LABEL_77;
  }
  v14 = 0;
  v100 = v3;
  v6 = v103;
  v4 = v104;
LABEL_82:
  result = 0;
  *v6 = *((_DWORD *)v5 + 248);
  LODWORD(v3) = v100;
  if (v14)
    goto LABEL_85;
LABEL_83:
  if (!*((_DWORD *)v5 + 7))
  {
    v5[36] = 1;
    *((_DWORD *)v5 + 11) = v3 - 1;
  }
LABEL_85:
  if ((_DWORD)result)
  {
    v5[36] = 1;
    *((_DWORD *)v5 + 11) = v3 - 1;
    v101 = *((_DWORD *)v5 + 248);
    if (v101)
      *v6 = v101 - 1;
  }
  *(_DWORD *)(v4 + 80) = result;
  return result;
}

uint64_t sub_2160B8BF0(uint64_t *a1, int a2, int a3)
{
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int16x8_t v26;
  uint16x8_t v27;
  int64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unsigned __int16 v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint64_t *v49;
  int v50;
  _DWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int32x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  __int16 v65;
  uint64_t **v67;
  int v68;
  int v69;
  _QWORD *v70;
  int8x16_t v71[2];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1[4];
  v6 = *((_DWORD *)a1 + 10);
  v64 = *((_DWORD *)a1 + 11);
  v52 = (_DWORD *)a1[6];
  v54 = a1[9];
  v55 = *((_QWORD *)v5 + 127);
  v7 = (uint64_t **)*((_QWORD *)v5 + 147);
  v8 = (_QWORD *)*((_QWORD *)v5 + 10);
  v9 = *(int *)(*a1 + 4);
  sub_215FC1468((uint64_t)v7);
  v10 = 0;
  v11 = v9 * a2;
  v68 = a2;
  if (*(_DWORD *)(v4 + 32) == 1)
    v12 = v9 * a2;
  else
    v12 = (a2 << 31 >> 31) & v9;
  v62 = v8[9];
  v63 = v9;
  v60 = v8[15];
  v61 = v8[14];
  v58 = v8[17];
  v59 = v8[16];
  v70 = v8;
  v65 = v6;
  v57 = (int32x2_t *)(v8[6] + 12 * v6);
  v69 = v11 + a3;
  v13 = a3;
  v14 = v11;
  v15 = v54 + 1168 * (v12 + (uint64_t)a3);
  v16 = 4 * (a3 + (uint64_t)v11);
  v67 = v7;
  v56 = v11;
  while (1)
  {
    v17 = v14 + v13;
    v18 = 4294958327;
    if (v14 + v13 >= *((int *)v70 + 5) || v69 < 0)
      goto LABEL_36;
    **((_DWORD **)v5 + 144) = v14 + v13;
    *((_DWORD *)v5 + 248) = v14 + v13;
    *((_DWORD *)v5 + 244) = v13;
    *((_DWORD *)v5 + 245) = v68;
    *(_DWORD *)(v15 + 820) = v14 + v13;
    *(_DWORD *)(v15 + 824) = v13;
    *(_DWORD *)(v15 + 828) = v68;
    sub_215FCF138(*((unsigned int *)v5 + 356390), *((_QWORD **)v5 + 182281), (int *)v5 + 244);
    v19 = v5[1004];
    if (v19 > 9 || ((1 << v19) & 0x294) == 0)
      break;
    *(_BYTE *)(v15 + 832) = 0;
LABEL_10:
    v71[0] = 0uLL;
    v20 = sub_215FC19CC(v7, (unsigned __int16 *)v5 + 488, (uint64_t)(v5 + 1425504), v15, (uint64_t)v71);
    if ((_DWORD)v20)
    {
      v18 = v20;
LABEL_36:
      v49 = a1;
      if (v10)
        goto LABEL_38;
LABEL_37:
      v5[36] = 1;
      *((_DWORD *)v5 + 11) = v13 - 1;
      goto LABEL_38;
    }
    if (*((_QWORD *)v5 + 178190) - *((_QWORD *)v5 + 178188) > *((int *)v5 + 356379))
      goto LABEL_36;
    *((_DWORD *)v5 + 2) = 1;
    v23 = *(char *)(v55 + 54);
    if ((*(_BYTE *)(v55 + 54) - 26) < 0xCCu)
      goto LABEL_36;
    v24 = v23 + *v5 + 52 - 52 * (((20165 * (v23 + *v5 + 52)) >> 20) + ((20165 * (v23 + *v5 + 52)) >> 31));
    *v5 = v23 + *v5 + 52 - 52 * (((20165 * (v23 + *v5 + 52)) >> 20) + (20165 * (v23 + *v5 + 52) < 0));
    *(_BYTE *)(v15 + 818) = v24;
    v25 = *(unsigned __int8 *)(*((_QWORD *)v5 + 127) + 1);
    *(_BYTE *)(v15 + 833) = v25;
    *(_BYTE *)(v15 + 834) = *(_BYTE *)(*((_QWORD *)v5 + 127) + 2);
    *(_BYTE *)(v15 + 835) = *(_BYTE *)(*((_QWORD *)v5 + 127) + 3);
    if (v25)
    {
      *((_DWORD *)v5 + 1) = 1;
      if (*(_BYTE *)(v15 + 816))
      {
        v26 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vcgtzq_s8(v71[0]), (int8x16_t)xmmword_2160F2B40), (int8x16_t)xmmword_2160F2B50);
        v27.i64[0] = 0x7000700070007;
        v27.i64[1] = 0x7000700070007;
        v28 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s16(v26, 8uLL), (int8x16_t)vshlq_u16((uint16x8_t)v26, v27));
        v29 = vandq_s8(vcltzq_s8((int8x16_t)v28), (int8x16_t)xmmword_2160F2980);
        v30 = vpaddq_s8(v29, v29);
        v31 = vpaddq_s8(v30, v30);
        v32 = vpaddq_s8(v31, v31).u16[0];
        v33 = (int64x2_t)vzip1q_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28);
        v22 = (int16x8_t)xmmword_2160F18B0;
        v34 = vandq_s8(vcltzq_s8(vqtbl1q_s8(vzip1q_s8((int8x16_t)v33, (int8x16_t)vdupq_laneq_s64(v33, 1)), (int8x16_t)xmmword_2160F18B0)), (int8x16_t)xmmword_2160F2980);
        v35 = vpaddq_s8(v34, v34);
        v36 = vpaddq_s8(v35, v35);
        v21 = (int16x8_t)vpaddq_s8(v36, v36);
        *(_DWORD *)(v70[4] + (v16 & 0x3FFFFFFFCLL)) = v21.u16[0] | (v32 << 16);
      }
      v37 = sub_215FD648C((uint64_t)(v5 + 976), v15, v21, v22);
      if ((_DWORD)v37)
      {
        v18 = v37;
        v7 = v67;
        goto LABEL_36;
      }
    }
    v38 = -1;
LABEL_18:
    sub_215FCF1E4((int *)v5 + 244, v64, (int64x2_t)v21);
    if (*(_BYTE *)(v15 + 833) || *(_BYTE *)(v15 + 834) != 25)
    {
      v39 = (char)v24;
      v42 = v5[13] + (char)v24;
      v43 = v5[14] + (char)v24;
      if (v42 >= 0x33)
        v42 = 51;
      if (v43 >= 0x33)
        v43 = 51;
      v40 = byte_2160F5010[v42];
      v41 = byte_2160F5010[v43];
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
    }
    *(_WORD *)(v62 + 2 * v17) = v65;
    *(_BYTE *)(v61 + v17) = v39;
    *(_BYTE *)(v60 + v17) = v40;
    *(_BYTE *)(v59 + v17) = v41;
    *(_BYTE *)(v58 + v17) = *(_BYTE *)(*((_QWORD *)v5 + 127) + 3);
    *v57 = vadd_s32(*v57, (int32x2_t)vand_s8((int8x8_t)(v39 | 0x100000000), (int8x8_t)vdup_n_s32(v38)));
    ++v13;
    v7 = v67;
    v44 = sub_215FC17EC(v67);
    v14 = v56;
    if (v13 < v63)
    {
      v15 += 1168;
      v16 += 4;
      v10 = 1;
      if (!v44)
        continue;
    }
    v18 = 0;
    v10 = !v44;
    *v52 = *((_DWORD *)v5 + 248);
    goto LABEL_36;
  }
  v45 = sub_215FC1768(v7, v13);
  *(_BYTE *)(v15 + 832) = v45;
  if (!v45)
    goto LABEL_10;
  LOBYTE(v24) = *v5;
  *((_DWORD *)v5 + 1) = 1;
  v46 = sub_2160CC524((uint64_t)(v5 + 976));
  if (!(_DWORD)v46)
  {
    v46 = sub_215FD648C((uint64_t)(v5 + 976), v15, v47, v48);
    if (!(_DWORD)v46)
    {
      v38 = 0;
      *(_WORD *)(v15 + 816) = 0;
      goto LABEL_18;
    }
  }
  v18 = v46;
  v49 = a1;
  v7 = v67;
  if (!v10)
    goto LABEL_37;
LABEL_38:
  if ((_DWORD)v18)
  {
    v5[36] = 1;
    *((_DWORD *)v5 + 11) = v13 - 1;
    v50 = *((_DWORD *)v5 + 248);
    if (v50)
      *v52 = v50 - 1;
  }
  sub_215FC1684((uint64_t)v7);
  *((_DWORD *)v49 + 20) = v18;
  return v18;
}

uint64_t sub_2160B9104(uint64_t a1, int a2, int a3, int a4, uint64_t a5, double a6, double a7, int8x16_t a8, double a9, double a10, int8x16_t a11, int16x8_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  int8x16_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v66;
  uint64_t v67;
  unsigned __int32 v84;
  uint64_t v85;
  signed __int32 v86;
  _OWORD *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t result;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _OWORD *v103;
  uint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  _OWORD *v113;

  v12 = a1;
  v13 = a4 - a3;
  if (a4 <= a3)
  {
    result = 0;
    goto LABEL_62;
  }
  v15 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v16 = *(int *)(a1 + 32);
  v17 = *(_QWORD *)(v15 + 72);
  v101 = v14 - 48;
  v18 = *(int *)(v15 + 56);
  if (*(_DWORD *)(*(_QWORD *)a1 + 32) == 1)
    v19 = v16 * a2;
  else
    v19 = (a2 << 31 >> 31) & v16;
  v110 = 16 * a2;
  v111 = 32 * a2;
  v109 = 8 * a2;
  v99 = *(int *)(v17 + 136);
  v100 = *(int *)(v17 + 152);
  v20 = 2 * v99;
  v98 = 2 * v100;
  v21 = v14 + 48 * (int)v16;
  v113 = (_OWORD *)(v15 + 936);
  v22 = (_OWORD *)(v15 + 880);
  v97 = a5 + 1423424;
  v94 = a5 + 1422656;
  v96 = a5 + 1424192;
  v103 = (_OWORD *)(v21 + 16);
  v105 = (_OWORD *)v21;
  v102 = (_BYTE *)(v21 + 32);
  v104 = v18 - 1;
  v23 = (int8x16_t *)(*(_QWORD *)(a1 + 8) + 1168 * (v19 + (uint64_t)a3));
  v24 = 16 * a3;
  v112 = *(_DWORD *)(a1 + 32);
  v107 = *(_QWORD *)(a1 + 24);
  v108 = -v16;
  v25 = a3 + (uint64_t)((int)v16 * a2);
  v106 = *(int *)(v15 + 56);
  do
  {
    v27 = v110;
    v26 = v111;
    if (!*(_BYTE *)v17)
    {
      v26 = v110;
      v27 = v109;
    }
    v28 = *(_QWORD *)(v17 + 32) + v24 + (v26 * *(_DWORD *)(v17 + 136));
    if ((v28 & 0x3F) == 0)
    {
      v29 = v99;
      if (!*(_BYTE *)(v15 + 21))
        v29 = 0;
      _X12 = v28 + v29;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
    }
    v66 = *(_QWORD *)(v17 + 40) + v24 + (v27 * *(_DWORD *)(v17 + 152));
    if ((v66 & 0x3F) == 0)
    {
      v67 = v100;
      if (!*(_BYTE *)(v15 + 21))
        v67 = 0;
      _X8 = v66 + v67;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
    }
    v84 = v23[51].u32[2];
    v85 = v108 + v25;
    if (v84 + 1 == v112)
      v86 = 0;
    else
      v86 = v84 + 1;
    *v113 = 0u;
    *(_OWORD *)(v15 + 952) = 0u;
    if (v84)
    {
      if (v25 > v18)
      {
        *(_QWORD *)v113 = v101 + 48 * (int)v84;
        if (v85 > v18)
          *(_QWORD *)(v15 + 960) = v105;
      }
    }
    v87 = (_OWORD *)(v14 + 48 * v84);
    if (v85 >= v18)
      *(_QWORD *)(v15 + 944) = v87;
    if (v86 && v85 >= v104)
      *(_QWORD *)(v15 + 952) = v14 + 48 * v86;
    *(_QWORD *)(v15 + 968) = v22;
    *(_QWORD *)&v88 = 0x2222222222222222;
    *((_QWORD *)&v88 + 1) = 0x2222222222222222;
    *v22 = v88;
    *(_OWORD *)(v15 + 896) = v88;
    if (v23[52].i8[0])
      goto LABEL_29;
    v91 = v23[51].u8[0];
    if (v23[52].i8[1])
    {
      if (v23[51].i8[0])
      {
        if (v23[52].i8[3])
          sub_2160A6904(v23, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v23, v15, v97);
        else
          sub_2160A60C4(v23, (uint64_t)v23, v15);
      }
      if (v23[51].i8[1])
      {
        result = sub_2160A8384((int16x8_t *)v23, (uint64_t)v23, v15);
        if ((_DWORD)result)
          goto LABEL_61;
      }
LABEL_29:
      sub_215FF1EA4((uint64_t)v23, v15);
      goto LABEL_30;
    }
    *(_BYTE *)(v15 + 912) = 0;
    v92 = v23[52].u8[2];
    if (v92 == 25)
    {
      sub_2160CC140((uint64_t)v23, v15);
      goto LABEL_30;
    }
    if (v23[52].u8[1] | v92)
    {
LABEL_41:
      sub_2160A78E8(v23, (uint64_t)v23, v15, v96);
      sub_21608DC74((uint64_t)v23, v15);
      goto LABEL_42;
    }
    if (v23[52].i8[3] == 1)
    {
      *(_BYTE *)(v15 + 912) = 1;
      if (v91)
        sub_2160A6904(v23, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v23, v15, v94);
      sub_21608AC5C((uint64_t)v23, v15, *(double *)&v88, a7, *(double *)a8.i64, a9, a10, (int16x8_t)a11, a12);
    }
    else
    {
      if (v23[52].i8[3])
        goto LABEL_41;
      if (v91)
        sub_2160A60C4(v23, (uint64_t)v23, v15);
      sub_216088554((uint64_t)v23, v15);
    }
LABEL_42:
    if (v23[51].i8[1])
    {
      result = sub_2160A8384((int16x8_t *)v23, (uint64_t)v23, v15);
      if ((_DWORD)result)
        goto LABEL_61;
    }
    else
    {
      *(_OWORD *)(v15 + 848) = 0u;
      *(_OWORD *)(v15 + 864) = 0u;
      *(_OWORD *)(v15 + 816) = 0u;
      *(_OWORD *)(v15 + 832) = 0u;
      *(_OWORD *)(v15 + 784) = 0u;
      *(_OWORD *)(v15 + 800) = 0u;
      *(_OWORD *)(v15 + 752) = 0u;
      *(_OWORD *)(v15 + 768) = 0u;
      *(_OWORD *)(v15 + 720) = 0u;
      *(_OWORD *)(v15 + 736) = 0u;
      *(_OWORD *)(v15 + 688) = 0u;
      *(_OWORD *)(v15 + 704) = 0u;
      *(_OWORD *)(v15 + 656) = 0u;
      *(_OWORD *)(v15 + 672) = 0u;
      *(_OWORD *)(v15 + 624) = 0u;
      *(_OWORD *)(v15 + 640) = 0u;
    }
    result = sub_21608DE70((uint64_t)v23, (int16x8_t *)v15);
    if ((_DWORD)result)
      goto LABEL_61;
LABEL_30:
    v14 = v107;
    if (*(_QWORD *)(v15 + 944))
    {
      *v105 = *v87;
      v89 = v107 + 48 * v84;
      *v103 = *(_OWORD *)(v89 + 16);
      *v102 = *(_BYTE *)(v89 + 32);
    }
    *v87 = *(_OWORD *)(v15 + 880);
    v90 = v107 + 48 * v84;
    *(_OWORD *)(v90 + 16) = *(_OWORD *)(v15 + 896);
    *(_BYTE *)(v90 + 32) = *(_BYTE *)(v15 + 912);
    v23 += 73;
    v24 += 16;
    ++v25;
    --v13;
    v18 = v106;
  }
  while (v13);
  result = 0;
LABEL_61:
  v12 = a1;
LABEL_62:
  *(_DWORD *)(v12 + 40) = result;
  return result;
}

uint64_t sub_2160B95F0(uint64_t a1, int a2, int a3, int a4, uint64_t a5, double a6, double a7, int8x16_t a8, double a9, double a10, int8x16_t a11, int16x8_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v64;
  uint64_t v65;
  unsigned __int32 v82;
  uint64_t v83;
  signed __int32 v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _OWORD *v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  _OWORD *v110;

  v12 = a1;
  v13 = a4 - a3;
  if (a4 <= a3)
  {
    result = 0;
    goto LABEL_59;
  }
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(int *)(a1 + 32);
  v17 = *(_QWORD *)(v14 + 72);
  v18 = *(int *)(v14 + 56);
  v108 = 32 * a2;
  v107 = 16 * a2;
  v106 = 8 * a2;
  v97 = *(int *)(v17 + 136);
  v98 = *(int *)(v17 + 152);
  v19 = 2 * v97;
  v96 = 2 * v98;
  v20 = v15 + 48 * (int)v16;
  v110 = (_OWORD *)(v14 + 936);
  v105 = (_OWORD *)(v14 + 880);
  v95 = a5 + 1423424;
  v92 = a5 + 1422656;
  v94 = a5 + 1424192;
  v100 = (_OWORD *)(v20 + 16);
  v102 = (_OWORD *)v20;
  v99 = (_BYTE *)(v20 + 32);
  v101 = v18 - 1;
  v21 = (int8x16_t *)(*(_QWORD *)(a1 + 8) + 1168 * ((int)((a2 << 31 >> 31) & v16) + (uint64_t)a3));
  v22 = 16 * a3;
  v109 = *(_DWORD *)(a1 + 32);
  v103 = v18;
  v104 = -v16;
  v23 = a3 + (uint64_t)((int)v16 * a2);
  do
  {
    v25 = v107;
    v24 = v108;
    if (!*(_BYTE *)v17)
    {
      v24 = v107;
      v25 = v106;
    }
    v26 = *(_QWORD *)(v17 + 32) + v22 + (v24 * *(_DWORD *)(v17 + 136));
    if ((v26 & 0x3F) == 0)
    {
      v27 = v97;
      if (!*(_BYTE *)(v14 + 21))
        v27 = 0;
      _X12 = v26 + v27;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
    }
    v64 = *(_QWORD *)(v17 + 40) + v22 + (v25 * *(_DWORD *)(v17 + 152));
    if ((v64 & 0x3F) == 0)
    {
      v65 = v98;
      if (!*(_BYTE *)(v14 + 21))
        v65 = 0;
      _X8 = v64 + v65;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
    }
    v82 = v21[51].u32[2];
    v83 = v104 + v23;
    if (v82 + 1 == v109)
      v84 = 0;
    else
      v84 = v82 + 1;
    *v110 = 0u;
    *(_OWORD *)(v14 + 952) = 0u;
    if (v82)
    {
      if (v23 > v18)
      {
        *(_QWORD *)v110 = v15 - 48 + 48 * (int)v82;
        if (v83 > v18)
          *(_QWORD *)(v14 + 960) = v102;
      }
    }
    v85 = (_OWORD *)(v15 + 48 * v82);
    if (v83 >= v18)
      *(_QWORD *)(v14 + 944) = v85;
    if (v84 && v83 >= v101)
      *(_QWORD *)(v14 + 952) = v15 + 48 * v84;
    *(_QWORD *)(v14 + 968) = v105;
    *(_QWORD *)&v86 = 0x2222222222222222;
    *((_QWORD *)&v86 + 1) = 0x2222222222222222;
    *v105 = v86;
    *(_OWORD *)(v14 + 896) = v86;
    if (v21[52].i8[0])
      goto LABEL_26;
    v89 = v21[51].u8[0];
    if (v21[52].i8[1])
    {
      if (v21[51].i8[0])
      {
        if (v21[52].i8[3])
          sub_2160A6904(v21, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v21, v14, v95);
        else
          sub_2160A60C4(v21, (uint64_t)v21, v14);
      }
      if (v21[51].i8[1])
      {
        result = sub_2160A8384((int16x8_t *)v21, (uint64_t)v21, v14);
        if ((_DWORD)result)
          goto LABEL_58;
      }
LABEL_26:
      sub_215FF1EA4((uint64_t)v21, v14);
      goto LABEL_27;
    }
    *(_BYTE *)(v14 + 912) = 0;
    v90 = v21[52].u8[2];
    if (v90 == 25)
    {
      sub_2160CC140((uint64_t)v21, v14);
      goto LABEL_27;
    }
    if (v21[52].u8[1] | v90)
    {
LABEL_38:
      sub_2160A78E8(v21, (uint64_t)v21, v14, v94);
      sub_21608DC74((uint64_t)v21, v14);
      goto LABEL_39;
    }
    if (v21[52].i8[3] == 1)
    {
      *(_BYTE *)(v14 + 912) = 1;
      if (v89)
        sub_2160A6904(v21, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v21, v14, v92);
      sub_21608AC5C((uint64_t)v21, v14, *(double *)&v86, a7, *(double *)a8.i64, a9, a10, (int16x8_t)a11, a12);
    }
    else
    {
      if (v21[52].i8[3])
        goto LABEL_38;
      if (v89)
        sub_2160A60C4(v21, (uint64_t)v21, v14);
      sub_216088554((uint64_t)v21, v14);
    }
LABEL_39:
    if (v21[51].i8[1])
    {
      result = sub_2160A8384((int16x8_t *)v21, (uint64_t)v21, v14);
      if ((_DWORD)result)
        goto LABEL_58;
    }
    else
    {
      *(_OWORD *)(v14 + 848) = 0u;
      *(_OWORD *)(v14 + 864) = 0u;
      *(_OWORD *)(v14 + 816) = 0u;
      *(_OWORD *)(v14 + 832) = 0u;
      *(_OWORD *)(v14 + 784) = 0u;
      *(_OWORD *)(v14 + 800) = 0u;
      *(_OWORD *)(v14 + 752) = 0u;
      *(_OWORD *)(v14 + 768) = 0u;
      *(_OWORD *)(v14 + 720) = 0u;
      *(_OWORD *)(v14 + 736) = 0u;
      *(_OWORD *)(v14 + 688) = 0u;
      *(_OWORD *)(v14 + 704) = 0u;
      *(_OWORD *)(v14 + 656) = 0u;
      *(_OWORD *)(v14 + 672) = 0u;
      *(_OWORD *)(v14 + 624) = 0u;
      *(_OWORD *)(v14 + 640) = 0u;
    }
    result = sub_21608DE70((uint64_t)v21, (int16x8_t *)v14);
    if ((_DWORD)result)
      goto LABEL_58;
LABEL_27:
    if (*(_QWORD *)(v14 + 944))
    {
      *v102 = *v85;
      v87 = v15 + 48 * v82;
      *v100 = *(_OWORD *)(v87 + 16);
      *v99 = *(_BYTE *)(v87 + 32);
    }
    *v85 = *(_OWORD *)(v14 + 880);
    v88 = v15 + 48 * v82;
    *(_OWORD *)(v88 + 16) = *(_OWORD *)(v14 + 896);
    *(_BYTE *)(v88 + 32) = *(_BYTE *)(v14 + 912);
    v21 += 73;
    v22 += 16;
    ++v23;
    --v13;
    v18 = v103;
  }
  while (v13);
  result = 0;
LABEL_58:
  v12 = a1;
LABEL_59:
  *(_DWORD *)(v12 + 40) = result;
  return result;
}

uint64_t sub_2160B9AD4(uint64_t a1, int a2, int a3, int a4, uint64_t a5, double a6, int8x16_t a7, double a8, double a9, double a10, int8x16_t a11, int16x8_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  int16x8_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v66;
  uint64_t v67;
  unsigned __int32 v84;
  uint64_t v85;
  signed __int32 v86;
  _OWORD *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t result;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _OWORD *v103;
  uint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  _OWORD *v113;

  v12 = a1;
  v13 = a4 - a3;
  if (a4 <= a3)
  {
    result = 0;
    goto LABEL_62;
  }
  v15 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v16 = *(int *)(a1 + 32);
  v17 = *(_QWORD *)(v15 + 72);
  v101 = v14 - 48;
  v18 = *(int *)(v15 + 56);
  if (*(_DWORD *)(*(_QWORD *)a1 + 32) == 1)
    v19 = v16 * a2;
  else
    v19 = (a2 << 31 >> 31) & v16;
  v110 = 16 * a2;
  v111 = 32 * a2;
  v109 = 8 * a2;
  v99 = *(int *)(v17 + 136);
  v100 = *(int *)(v17 + 152);
  v20 = 2 * v99;
  v98 = 2 * v100;
  v21 = v14 + 48 * (int)v16;
  v113 = (_OWORD *)(v15 + 936);
  v22 = (_OWORD *)(v15 + 880);
  v97 = a5 + 1423424;
  v94 = a5 + 1422656;
  v96 = a5 + 1424288;
  v103 = (_OWORD *)(v21 + 16);
  v105 = (_OWORD *)v21;
  v102 = (_BYTE *)(v21 + 32);
  v104 = v18 - 1;
  v23 = (int16x8_t *)(*(_QWORD *)(a1 + 8) + 1168 * (v19 + (uint64_t)a3));
  v24 = 16 * a3;
  v112 = *(_DWORD *)(a1 + 32);
  v107 = *(_QWORD *)(a1 + 24);
  v108 = -v16;
  v25 = a3 + (uint64_t)((int)v16 * a2);
  v106 = *(int *)(v15 + 56);
  do
  {
    v27 = v110;
    v26 = v111;
    if (!*(_BYTE *)v17)
    {
      v26 = v110;
      v27 = v109;
    }
    v28 = *(_QWORD *)(v17 + 32) + v24 + (v26 * *(_DWORD *)(v17 + 136));
    if ((v28 & 0x3F) == 0)
    {
      v29 = v99;
      if (!*(_BYTE *)(v15 + 21))
        v29 = 0;
      _X12 = v28 + v29;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v20;
      __asm { PRFM            #0, [X12] }
    }
    v66 = *(_QWORD *)(v17 + 40) + v24 + (v27 * *(_DWORD *)(v17 + 152));
    if ((v66 & 0x3F) == 0)
    {
      v67 = v100;
      if (!*(_BYTE *)(v15 + 21))
        v67 = 0;
      _X8 = v66 + v67;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v98;
      __asm { PRFM            #0, [X8] }
    }
    v84 = v23[51].u32[2];
    v85 = v108 + v25;
    if (v84 + 1 == v112)
      v86 = 0;
    else
      v86 = v84 + 1;
    *v113 = 0u;
    *(_OWORD *)(v15 + 952) = 0u;
    if (v84)
    {
      if (v25 > v18)
      {
        *(_QWORD *)v113 = v101 + 48 * (int)v84;
        if (v85 > v18)
          *(_QWORD *)(v15 + 960) = v105;
      }
    }
    v87 = (_OWORD *)(v14 + 48 * v84);
    if (v85 >= v18)
      *(_QWORD *)(v15 + 944) = v87;
    if (v86 && v85 >= v104)
      *(_QWORD *)(v15 + 952) = v14 + 48 * v86;
    *(_QWORD *)(v15 + 968) = v22;
    *(_QWORD *)&v88 = 0x2222222222222222;
    *((_QWORD *)&v88 + 1) = 0x2222222222222222;
    *v22 = v88;
    *(_OWORD *)(v15 + 896) = v88;
    if (v23[52].i8[0])
      goto LABEL_29;
    v91 = v23[51].u8[0];
    if (v23[52].i8[1])
    {
      if (v23[51].i8[0])
      {
        if (v23[52].i8[3])
          sub_2160A70F8((uint64_t)v23, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v23, v15, v97);
        else
          sub_2160A653C(v23, (uint64_t)v23, v15);
      }
      if (v23[51].i8[1])
      {
        result = sub_2160A88F8(v23, (uint64_t)v23, v15);
        if ((_DWORD)result)
          goto LABEL_61;
      }
LABEL_29:
      sub_215FFD760((uint64_t)v23, v15);
      goto LABEL_30;
    }
    *(_BYTE *)(v15 + 912) = 0;
    v92 = v23[52].u8[2];
    if (v92 == 25)
    {
      sub_2160CC140((uint64_t)v23, v15);
      goto LABEL_30;
    }
    if (v23[52].u8[1] | v92)
    {
LABEL_41:
      sub_2160A808C((uint64_t)v23, (uint64_t)v23, v15, v96);
      sub_21608DD78((uint64_t)v23, v15);
      goto LABEL_42;
    }
    if (v23[52].i8[3] == 1)
    {
      *(_BYTE *)(v15 + 912) = 1;
      if (v91)
        sub_2160A70F8((uint64_t)v23, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v23, v15, v94);
      sub_21608AC5C((uint64_t)v23, v15, *(double *)&v88, *(double *)a7.i64, a8, a9, a10, (int16x8_t)a11, a12);
    }
    else
    {
      if (v23[52].i8[3])
        goto LABEL_41;
      if (v91)
        sub_2160A653C(v23, (uint64_t)v23, v15);
      sub_216088554((uint64_t)v23, v15);
    }
LABEL_42:
    if (v23[51].i8[1])
    {
      result = sub_2160A88F8(v23, (uint64_t)v23, v15);
      if ((_DWORD)result)
        goto LABEL_61;
    }
    else
    {
      *(_OWORD *)(v15 + 848) = 0u;
      *(_OWORD *)(v15 + 864) = 0u;
      *(_OWORD *)(v15 + 816) = 0u;
      *(_OWORD *)(v15 + 832) = 0u;
      *(_OWORD *)(v15 + 784) = 0u;
      *(_OWORD *)(v15 + 800) = 0u;
      *(_OWORD *)(v15 + 752) = 0u;
      *(_OWORD *)(v15 + 768) = 0u;
      *(_OWORD *)(v15 + 720) = 0u;
      *(_OWORD *)(v15 + 736) = 0u;
      *(_OWORD *)(v15 + 688) = 0u;
      *(_OWORD *)(v15 + 704) = 0u;
      *(_OWORD *)(v15 + 656) = 0u;
      *(_OWORD *)(v15 + 672) = 0u;
      *(_OWORD *)(v15 + 624) = 0u;
      *(_OWORD *)(v15 + 640) = 0u;
    }
    result = sub_21608DE70((uint64_t)v23, (int16x8_t *)v15);
    if ((_DWORD)result)
      goto LABEL_61;
LABEL_30:
    v14 = v107;
    if (*(_QWORD *)(v15 + 944))
    {
      *v105 = *v87;
      v89 = v107 + 48 * v84;
      *v103 = *(_OWORD *)(v89 + 16);
      *v102 = *(_BYTE *)(v89 + 32);
    }
    *v87 = *(_OWORD *)(v15 + 880);
    v90 = v107 + 48 * v84;
    *(_OWORD *)(v90 + 16) = *(_OWORD *)(v15 + 896);
    *(_BYTE *)(v90 + 32) = *(_BYTE *)(v15 + 912);
    v23 += 73;
    v24 += 16;
    ++v25;
    --v13;
    v18 = v106;
  }
  while (v13);
  result = 0;
LABEL_61:
  v12 = a1;
LABEL_62:
  *(_DWORD *)(v12 + 40) = result;
  return result;
}

uint64_t sub_2160B9FC0(uint64_t a1, int a2, int a3, int a4, uint64_t a5, double a6, int8x16_t a7, double a8, double a9, double a10, int8x16_t a11, int16x8_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int16x8_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v64;
  uint64_t v65;
  unsigned __int32 v82;
  uint64_t v83;
  signed __int32 v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _OWORD *v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  _OWORD *v110;

  v12 = a1;
  v13 = a4 - a3;
  if (a4 <= a3)
  {
    result = 0;
    goto LABEL_59;
  }
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(int *)(a1 + 32);
  v17 = *(_QWORD *)(v14 + 72);
  v18 = *(int *)(v14 + 56);
  v108 = 32 * a2;
  v107 = 16 * a2;
  v106 = 8 * a2;
  v97 = *(int *)(v17 + 136);
  v98 = *(int *)(v17 + 152);
  v19 = 2 * v97;
  v96 = 2 * v98;
  v20 = v15 + 48 * (int)v16;
  v110 = (_OWORD *)(v14 + 936);
  v105 = (_OWORD *)(v14 + 880);
  v95 = a5 + 1423424;
  v92 = a5 + 1422656;
  v94 = a5 + 1424288;
  v100 = (_OWORD *)(v20 + 16);
  v102 = (_OWORD *)v20;
  v99 = (_BYTE *)(v20 + 32);
  v101 = v18 - 1;
  v21 = (int16x8_t *)(*(_QWORD *)(a1 + 8) + 1168 * ((int)((a2 << 31 >> 31) & v16) + (uint64_t)a3));
  v22 = 16 * a3;
  v109 = *(_DWORD *)(a1 + 32);
  v103 = v18;
  v104 = -v16;
  v23 = a3 + (uint64_t)((int)v16 * a2);
  do
  {
    v25 = v107;
    v24 = v108;
    if (!*(_BYTE *)v17)
    {
      v24 = v107;
      v25 = v106;
    }
    v26 = *(_QWORD *)(v17 + 32) + v22 + (v24 * *(_DWORD *)(v17 + 136));
    if ((v26 & 0x3F) == 0)
    {
      v27 = v97;
      if (!*(_BYTE *)(v14 + 21))
        v27 = 0;
      _X12 = v26 + v27;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
      _X12 = _X12 + v19;
      __asm { PRFM            #0, [X12] }
    }
    v64 = *(_QWORD *)(v17 + 40) + v22 + (v25 * *(_DWORD *)(v17 + 152));
    if ((v64 & 0x3F) == 0)
    {
      v65 = v98;
      if (!*(_BYTE *)(v14 + 21))
        v65 = 0;
      _X8 = v64 + v65;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + v96;
      __asm { PRFM            #0, [X8] }
    }
    v82 = v21[51].u32[2];
    v83 = v104 + v23;
    if (v82 + 1 == v109)
      v84 = 0;
    else
      v84 = v82 + 1;
    *v110 = 0u;
    *(_OWORD *)(v14 + 952) = 0u;
    if (v82)
    {
      if (v23 > v18)
      {
        *(_QWORD *)v110 = v15 - 48 + 48 * (int)v82;
        if (v83 > v18)
          *(_QWORD *)(v14 + 960) = v102;
      }
    }
    v85 = (_OWORD *)(v15 + 48 * v82);
    if (v83 >= v18)
      *(_QWORD *)(v14 + 944) = v85;
    if (v84 && v83 >= v101)
      *(_QWORD *)(v14 + 952) = v15 + 48 * v84;
    *(_QWORD *)(v14 + 968) = v105;
    *(_QWORD *)&v86 = 0x2222222222222222;
    *((_QWORD *)&v86 + 1) = 0x2222222222222222;
    *v105 = v86;
    *(_OWORD *)(v14 + 896) = v86;
    if (v21[52].i8[0])
      goto LABEL_26;
    v89 = v21[51].u8[0];
    if (v21[52].i8[1])
    {
      if (v21[51].i8[0])
      {
        if (v21[52].i8[3])
          sub_2160A70F8((uint64_t)v21, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v21, v14, v95);
        else
          sub_2160A653C(v21, (uint64_t)v21, v14);
      }
      if (v21[51].i8[1])
      {
        result = sub_2160A88F8(v21, (uint64_t)v21, v14);
        if ((_DWORD)result)
          goto LABEL_58;
      }
LABEL_26:
      sub_215FFD760((uint64_t)v21, v14);
      goto LABEL_27;
    }
    *(_BYTE *)(v14 + 912) = 0;
    v90 = v21[52].u8[2];
    if (v90 == 25)
    {
      sub_2160CC140((uint64_t)v21, v14);
      goto LABEL_27;
    }
    if (v21[52].u8[1] | v90)
    {
LABEL_38:
      sub_2160A808C((uint64_t)v21, (uint64_t)v21, v14, v94);
      sub_21608DD78((uint64_t)v21, v14);
      goto LABEL_39;
    }
    if (v21[52].i8[3] == 1)
    {
      *(_BYTE *)(v14 + 912) = 1;
      if (v89)
        sub_2160A70F8((uint64_t)v21, 2.90435521e-144, a7, a8, a9, a10, a11, (uint64_t)v21, v14, v92);
      sub_21608AC5C((uint64_t)v21, v14, *(double *)&v86, *(double *)a7.i64, a8, a9, a10, (int16x8_t)a11, a12);
    }
    else
    {
      if (v21[52].i8[3])
        goto LABEL_38;
      if (v89)
        sub_2160A653C(v21, (uint64_t)v21, v14);
      sub_216088554((uint64_t)v21, v14);
    }
LABEL_39:
    if (v21[51].i8[1])
    {
      result = sub_2160A88F8(v21, (uint64_t)v21, v14);
      if ((_DWORD)result)
        goto LABEL_58;
    }
    else
    {
      *(_OWORD *)(v14 + 848) = 0u;
      *(_OWORD *)(v14 + 864) = 0u;
      *(_OWORD *)(v14 + 816) = 0u;
      *(_OWORD *)(v14 + 832) = 0u;
      *(_OWORD *)(v14 + 784) = 0u;
      *(_OWORD *)(v14 + 800) = 0u;
      *(_OWORD *)(v14 + 752) = 0u;
      *(_OWORD *)(v14 + 768) = 0u;
      *(_OWORD *)(v14 + 720) = 0u;
      *(_OWORD *)(v14 + 736) = 0u;
      *(_OWORD *)(v14 + 688) = 0u;
      *(_OWORD *)(v14 + 704) = 0u;
      *(_OWORD *)(v14 + 656) = 0u;
      *(_OWORD *)(v14 + 672) = 0u;
      *(_OWORD *)(v14 + 624) = 0u;
      *(_OWORD *)(v14 + 640) = 0u;
    }
    result = sub_21608DE70((uint64_t)v21, (int16x8_t *)v14);
    if ((_DWORD)result)
      goto LABEL_58;
LABEL_27:
    if (*(_QWORD *)(v14 + 944))
    {
      *v102 = *v85;
      v87 = v15 + 48 * v82;
      *v100 = *(_OWORD *)(v87 + 16);
      *v99 = *(_BYTE *)(v87 + 32);
    }
    *v85 = *(_OWORD *)(v14 + 880);
    v88 = v15 + 48 * v82;
    *(_OWORD *)(v88 + 16) = *(_OWORD *)(v14 + 896);
    *(_BYTE *)(v88 + 32) = *(_BYTE *)(v14 + 912);
    v21 += 73;
    v22 += 16;
    ++v23;
    --v13;
    v18 = v103;
  }
  while (v13);
  result = 0;
LABEL_58:
  v12 = a1;
LABEL_59:
  *(_DWORD *)(v12 + 40) = result;
  return result;
}

uint64_t sub_2160BA4A4(uint64_t a1)
{
  uint64_t *v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  double v17;
  double v18;
  int8x16_t v19;
  int16x8_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int *v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int *v53;
  int v54;
  int v55;

  v2 = (uint64_t *)(a1 + 632);
  v3 = (unsigned int *)(a1 + 768);
  v49 = a1 + 720;
  v50 = 0;
  v4 = *(_DWORD *)(a1 + 752);
  v5 = *(_QWORD *)(a1 + 664);
  v51 = *(_QWORD *)(v5 + 1192) + 1152;
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v7 + 80) = v6;
  LODWORD(v6) = *(_DWORD *)(v6 + 100) >> 4;
  v8 = *(_DWORD *)(v7 + 12) * v6;
  v9 = (unsigned int *)(a1 + 784);
  *(_DWORD *)(v7 + 8) = v6;
  *(_DWORD *)(v7 + 20) = v8;
  v10 = (unsigned int *)(a1 + 776);
  v53 = (unsigned int *)(a1 + 792);
  v11 = (unsigned int *)(a1 + 804);
  v52 = v4 - 1;
  while (*(_DWORD *)(*v2 + 32) == 1)
  {
    if (*(_DWORD *)(a1 + 796) >= *(_DWORD *)(a1 + 756) || *(_DWORD *)(a1 + 808) == 1)
      goto LABEL_96;
    v12 = *(_QWORD *)(a1 + 640);
    v13 = sub_2160ECADC(0, 1u, v3);
    v21 = *(_DWORD *)(a1 + 772);
    if (v21 < *(_DWORD *)(a1 + 756))
    {
      if (!v13)
        goto LABEL_42;
LABEL_13:
      v22 = 1;
      goto LABEL_23;
    }
    sub_2160ECB04(v3);
    sub_2160EC880(*(pthread_mutex_t **)(v12 + 5041728));
    sub_2160EC88C(*(pthread_mutex_t **)(v12 + 5041728));
LABEL_16:
    if (sub_2160ECADC(0, 1u, v9))
    {
      v21 = *(_DWORD *)(a1 + 788);
      if (v21 < *(_DWORD *)(a1 + 780))
      {
        v22 = 3;
        goto LABEL_23;
      }
      sub_2160ECB04(v9);
    }
    if (sub_2160ECADC(0, 1u, v10))
    {
      v21 = *(_DWORD *)(a1 + 780);
      if (v21 < *(_DWORD *)(a1 + 772))
      {
        v22 = 2;
        goto LABEL_23;
      }
      sub_2160ECB04(v10);
    }
    if (sub_2160ECADC(0, 1u, v53))
    {
      v21 = *(_DWORD *)(a1 + 796);
      if (v21 >= *(_DWORD *)(a1 + 788)
        || (v26 = *(_DWORD *)(a1 + 780), v22 = 4, v26 < *(_DWORD *)(a1 + 756)) && v21 + 1 >= v26)
      {
        sub_2160ECB04(v53);
        goto LABEL_42;
      }
LABEL_23:
      if ((*v11 & 0x80000000) != 0 && (int)sub_2160ECB1C(v11) <= 0)
        sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 824));
      switch(v22)
      {
        case 1:
          if (v21 == *(_DWORD *)(v5 + 48))
            v27 = *(_DWORD *)(v5 + 40);
          else
            v27 = 0;
          if (*(_BYTE *)(v5 + 20))
          {
            if (*(_BYTE *)(v5 + 24))
            {
              v30 = sub_2160B8BF0(v2, v21, v27);
LABEL_85:
              v45 = v30;
              if (*(_BYTE *)(v5 + 36) == 1)
              {
                *(_DWORD *)(v5 + 52) = v21;
                *(_DWORD *)(a1 + 756) = v21 + 1;
              }
              if (*(_DWORD *)(a1 + 772) < *(_DWORD *)(v7 + 8))
                *(_DWORD *)(a1 + 772) = v21 + 1;
              v25 = v3;
              goto LABEL_94;
            }
          }
          else if (*(_BYTE *)(v5 + 24))
          {
            v30 = sub_2160B7E88(v2, v21, v27);
            goto LABEL_85;
          }
          v30 = sub_2160B83A0((uint64_t)v2, v21, v27);
          goto LABEL_85;
        case 2:
          if (v21 == *(_DWORD *)(v5 + 48))
            v28 = *(_DWORD *)(v5 + 40);
          else
            v28 = 0;
          v31 = v52;
          if (v21 == *(_DWORD *)(v5 + 52))
            v31 = *(_DWORD *)(v5 + 44);
          v32 = *(_QWORD *)(a1 + 736);
          v33 = *(unsigned __int8 *)(v32 + 20);
          v34 = *(unsigned __int8 *)(v32 + 24);
          v35 = v31 + 1;
          v36 = *(_QWORD *)(a1 + 664) + 976;
          if (v33)
          {
            if (v34)
              v37 = sub_2160B9AD4(v49, v21, v28, v35, v36, *(double *)v14.i64, (int8x16_t)v15, *(double *)v16.i64, v17, v18, v19, v20);
            else
              v37 = sub_2160B9FC0(v49, v21, v28, v35, v36, *(double *)v14.i64, (int8x16_t)v15, *(double *)v16.i64, v17, v18, v19, v20);
          }
          else if (v34)
          {
            v37 = sub_2160B9104(v49, v21, v28, v35, v36, *(double *)v14.i64, *(double *)v15.i64, (int8x16_t)v16, v17, v18, v19, v20);
          }
          else
          {
            v37 = sub_2160B95F0(v49, v21, v28, v35, v36, *(double *)v14.i64, *(double *)v15.i64, (int8x16_t)v16, v17, v18, v19, v20);
          }
          v45 = v37;
          if (*(_DWORD *)(a1 + 780) < *(_DWORD *)(v7 + 8))
            *(_DWORD *)(a1 + 780) = v21 + 1;
          v25 = v10;
          goto LABEL_94;
        case 3:
          if (v21 == *(_DWORD *)(v5 + 48))
            v23 = *(_DWORD *)(v5 + 40);
          else
            v23 = 0;
          v24 = v52;
          if (v21 == *(_DWORD *)(v5 + 52))
            v24 = *(_DWORD *)(v5 + 44);
          sub_21609E9C8((uint64_t *)v7, v51, v23, v24 + 1, v21, v21 + 1, v14, v15, v16);
          if (*(_DWORD *)(a1 + 788) < *(_DWORD *)(v7 + 8))
            *(_DWORD *)(a1 + 788) = v21 + 1;
          v25 = v9;
          goto LABEL_35;
        case 4:
          if (v21 == *(_DWORD *)(v5 + 48))
            v29 = *(_DWORD *)(v5 + 40);
          else
            v29 = 0;
          v38 = v52;
          if (v21 == *(_DWORD *)(v5 + 52))
            v38 = *(_DWORD *)(v5 + 44);
          if (*(_BYTE *)(v7 + 224))
          {
            v39 = *(_DWORD *)(v7 + 184);
            if (*(_BYTE *)(v7 + 225))
            {
              if (v39 > 0)
              {
                v55 = 0;
                v40 = v38 + 1;
                v41 = v21 + 1;
                v42 = &v55;
LABEL_78:
                v43 = sub_21609BD58(v7, v29, v40, v21, v41, 0, v42);
                goto LABEL_81;
              }
              v54 = 0;
            }
            else
            {
              v54 = 0;
              if (v39 > 0)
              {
                if (!*(_BYTE *)(v7 + 226))
                {
LABEL_72:
                  v43 = sub_21609B1DC(v7, v29, v38 + 1, v21, v21 + 1);
                  goto LABEL_81;
                }
                v40 = v38 + 1;
                v41 = v21 + 1;
                v42 = &v54;
                goto LABEL_78;
              }
            }
          }
          else
          {
            v54 = 0;
            if (*(int *)(v7 + 184) > 0)
              goto LABEL_72;
          }
          v48 = v38 + 1;
          v44 = v29;
          sub_216099280(v7, v29, v38 + 1, v21, v21 + 1);
          v43 = sub_21609A5B4(v7, v44, v48, v21, v21 + 1);
LABEL_81:
          v45 = v43;
          if (*(_DWORD *)(a1 + 796) < *(_DWORD *)(v7 + 8))
            *(_DWORD *)(a1 + 796) = v21 + 1;
          v25 = v53;
LABEL_94:
          v50 = v45;
          if (v45)
            *(_DWORD *)(a1 + 808) = 1;
LABEL_35:
          sub_2160ECB04(v25);
          break;
        default:
          continue;
      }
    }
    else
    {
LABEL_42:
      if (sub_2160ECB04(v11) == -1)
        sub_2160EC9B8(*(dispatch_semaphore_t **)(a1 + 824));
    }
  }
  if (*(_DWORD *)(a1 + 796) < *(_DWORD *)(a1 + 756) && *(_DWORD *)(a1 + 808) != 1)
  {
    if (sub_2160ECADC(0, 1u, v3))
    {
      v21 = *(_DWORD *)(a1 + 772);
      if (v21 < *(_DWORD *)(a1 + 756) && v21 < *(_DWORD *)(a1 + 780) + 2)
        goto LABEL_13;
      sub_2160ECB04(v3);
    }
    goto LABEL_16;
  }
LABEL_96:
  v46 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)(a1 + 796) = v46;
  *(_DWORD *)(a1 + 788) = v46;
  *(_DWORD *)(a1 + 780) = v46;
  *(_DWORD *)(a1 + 772) = v46;
  sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 824));
  *(_DWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 768) = 0;
  return v50;
}

uint64_t sub_2160BAA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, _DWORD *a9, _DWORD *a10, uint64_t a11, _BYTE *a12)
{
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  unsigned int *v24;
  int v25;
  int v26;
  int v27;

  v15 = a5 + 1423168;
  v16 = *(_DWORD *)(a2 + 4);
  v17 = *(_DWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 560);
  v19 = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a5 + 12) = *(_BYTE *)(a5 + 1423168);
  v20 = *(_QWORD *)(a5 + 1016);
  *(_BYTE *)(a5 + 13) = *(_BYTE *)(v20 + 56);
  *(_BYTE *)(a5 + 14) = *(_BYTE *)(v20 + 57);
  *(_DWORD *)(a5 + 16) = *(_DWORD *)(a5 + 996);
  *(_WORD *)(a5 + 20) = *(_WORD *)(a5 + 1005);
  *(_BYTE *)(a5 + 24) = *(_BYTE *)(a5 + 1164);
  v21 = *(_QWORD *)(a5 + 1192);
  *(_BYTE *)(a5 + 22) = *(_BYTE *)(v21 + 1363);
  *(_BYTE *)(a5 + 23) = 0;
  *(_QWORD *)(a5 + 64) = a5 + 1200;
  *(_QWORD *)(a5 + 72) = v21 + 32;
  *(_QWORD *)(a5 + 80) = *(_QWORD *)(a5 + 1312);
  *(_QWORD *)(a5 + 88) = v21;
  *(_BYTE *)(a5 + 928) = *(_BYTE *)(*(_QWORD *)(a5 + 1024) + 4);
  *(_BYTE *)(a5 + 36) = 0;
  *(_QWORD *)(a2 + 632) = a2;
  *(_QWORD *)(a2 + 640) = a1;
  *(_QWORD *)(a2 + 648) = a3;
  *(_QWORD *)(a2 + 656) = a4;
  *(_QWORD *)(a2 + 664) = a5;
  *(_DWORD *)(a2 + 672) = a6;
  *(_DWORD *)(a2 + 676) = a7;
  *(_QWORD *)(a2 + 680) = a8;
  *(_QWORD *)(a2 + 688) = a9;
  *(_QWORD *)(a2 + 696) = a10;
  *(_QWORD *)(a2 + 704) = v18;
  *(_QWORD *)(a2 + 720) = a2;
  *(_QWORD *)(a2 + 728) = v18;
  *(_QWORD *)(a2 + 736) = a5;
  *(_QWORD *)(a2 + 744) = v19;
  *(_DWORD *)(a2 + 752) = v16;
  *(_DWORD *)(a2 + 756) = v17;
  v22 = a5 + 1425504;
  v23 = *(uint64_t ***)(a5 + 1176);
  *(_BYTE *)a5 = *(_DWORD *)(a5 + 1428264) + *(_BYTE *)(a4 + 72) + 26;
  sub_215FC147C(v23, a3, a4, a5 + 1425544, a5 + 1425504);
  v24 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a5 + 1312) + 48) + 12 * a6);
  *v24 = (63 * *(_DWORD *)(a2 + 156)) >> 6;
  v24[1] = 1;
  *(_DWORD *)(a5 + 4) = 0;
  *(_DWORD *)(a5 + 8) = 0;
  v25 = *(_DWORD *)(v15 + 2392);
  if (*(_BYTE *)(a5 + 1161))
  {
    v26 = v25 % (2 * v16) / 2;
    if (*(unsigned __int8 *)(a5 + 1007) + 2 * (v25 / (2 * v16)) == 1)
      v27 = *(_DWORD *)(v15 + 2392) & 1;
    else
      v27 = 0;
  }
  else
  {
    v27 = v25 / v16;
    v26 = v25 % v16;
  }
  *(_DWORD *)(a5 + 40) = v26;
  *(_DWORD *)(a5 + 44) = v16 - 1;
  *(_DWORD *)(a5 + 48) = v27;
  *(_DWORD *)(a5 + 52) = v17;
  *(_DWORD *)(a5 + 56) = v25;
  *(_OWORD *)(a2 + 796) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 784) = 0u;
  if (v27)
  {
    *(_DWORD *)(a2 + 772) = v27;
    *(_DWORD *)(a2 + 780) = v27;
    *(_DWORD *)(a2 + 788) = v27;
    *(_DWORD *)(a2 + 796) = v27;
  }
  *(_DWORD *)(a2 + 800) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 824) = sub_2160EC928(1, 0);
  if (a12)
    *a12 = 1;
  sub_2160EBF40(a2 + 576);
  if (a9)
    *a9 = *(_DWORD *)(a5 + 4) == 0;
  if (a10)
    *a10 = *(_DWORD *)(a5 + 8) == 0;
  sub_215FC1698(v23, v22);
  sub_2160EC984(*(NSObject ***)(a2 + 824));
  *(_QWORD *)(a2 + 824) = 0;
  return 0;
}

uint64_t sub_2160BACAC(unsigned int *a1, unsigned int a2, unsigned int *a3, void *a4, int a5, char a6)
{
  uint64_t result;
  _BYTE v11[40];

  result = sub_2160AC81C(a1, a2, (uint64_t)v11);
  if (!(_DWORD)result)
  {
    if ((a5 & 0xFFFFFFFD) == 1)
      return sub_2160DABCC((uint64_t)v11, a3, a4, a5, 0, 1, 0, a6, 0);
    else
      return sub_2160DABCC((uint64_t)v11, a3, a4, 0, 0, 0, 0, a6, 0);
  }
  return result;
}

pthread_mutex_t *sub_2160BAD44(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  pthread_mutex_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  BOOL *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _BYTE v50[16];
  uint64_t v51;
  int v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  int v55;
  uint64_t v56;
  _BYTE *v57;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int **)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 88);
  v7 = *(unsigned int **)(v5 + 24);
  v56 = 0;
  v57 = 0;
  v8 = *(_QWORD *)(v5 + 40);
  v9 = *(unsigned __int8 *)(v8 + 225);
  v55 = 0;
  v54 = 0;
  v10 = *(_DWORD *)(v6 + 132) >> 4;
  v11 = *(_DWORD *)(v5 + 4) * v10;
  *(_DWORD *)(v5 + 16) = v10;
  *(_DWORD *)(v5 + 20) = v11;
  *(_DWORD *)(v8 + 192) = *(_DWORD *)(v6 + 1280);
  result = sub_2160EC880(*(pthread_mutex_t **)(v5 + 72));
  v13 = 0;
  v14 = *(_QWORD *)(v5 + 64);
  while (*(_DWORD *)(v14 + 4 * v13++))
    ;
  if (*(_DWORD *)(v5 + 52) + 1 == (_DWORD)v13)
    return result;
  v47 = v2;
  *(_DWORD *)(v14 + 4 * v13 - 4) = 1;
  sub_2160EC88C(*(pthread_mutex_t **)(v5 + 72));
  v48 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13 - 8);
  v16 = v48 + 1425504;
  v17 = sub_2160AC81C(v3, v4, v48 + 1425504);
  if (!v17)
  {
    v18 = v48;
    if (*(_BYTE *)(v5 + 544))
    {
      v17 = sub_2160AC81C(v3, v4, (uint64_t)v50);
      if (v17)
        goto LABEL_5;
      sub_2160B1B74(v48 + 1458280);
      sub_2160B1DFC(v48 + 1458280, 8 * v4);
      v18 = v48;
      v51 = *(_QWORD *)(v48 + 1425520);
      v52 = *(_DWORD *)(v48 + 1425536);
      v53 = *(_BYTE *)(v48 + 1425540);
    }
    v19 = v18 + 1425544;
    v20 = *(unsigned __int8 *)(a1 + 56);
    if ((v20 | 2) == 3)
    {
      v21 = sub_2160DABCC(v16, v7, (void *)(v18 + 1425544), v20, &v55, 0, (int *)(v5 + 160), v9 != 0, 0);
      v17 = v21;
      if (v55)
        v22 = 0;
      else
        v22 = *(_BYTE *)(a1 + 56) == 1;
      if (v22 || v21)
        goto LABEL_5;
    }
    else
    {
      v17 = sub_2160DABCC(v16, v7, (void *)(v18 + 1425544), 0, 0, 0, 0, v9 != 0, 0);
      if (v17)
        goto LABEL_5;
    }
    if (*(_BYTE *)(v5 + 544))
      sub_2160B1E04(v48 + 1458280, *(unsigned __int8 *)(v48 + 1425540) + 8 * (*(_DWORD *)(v48 + 1425520) - v51) - v53);
    v17 = sub_2160AC930((uint64_t)v7, *(_DWORD *)(v48 + 1425568), &v56);
    if (v17)
      goto LABEL_5;
    v17 = sub_2160AC8EC(v7, *(_DWORD *)(v56 + 4), &v57);
    if (v17)
      goto LABEL_5;
    sub_2160EC880(*(pthread_mutex_t **)(v47 + 5041584));
    v17 = sub_2160AFFFC(v19, v47 + 5016960, (int8x16_t *)(v48 + 1428296), v6, v23, v24);
    sub_2160EC88C(*(pthread_mutex_t **)(v47 + 5041584));
    if (v17)
      goto LABEL_5;
    *(_QWORD *)(v48 + 1455792) = v48 + 1456080;
    sub_2160CBD3C(v48 + 1429136, v48 + 1429200, v48 + 1455680, v48 + 1456336, (_QWORD *)(v48 + 976));
    v17 = sub_2160B3498(v48 + 976, v5, v48 + 1428296, v6, v57, v56, v19, *(unsigned __int8 *)(a1 + 56), v55);
    if (v17)
      goto LABEL_5;
    *(_QWORD *)(v48 + 1232) = v47 + 5041520;
    v17 = sub_2160BB5AC(v48 + 976, v47 + 5041520);
    if (v17)
      goto LABEL_5;
    *(_DWORD *)(*(_QWORD *)(v5 + 40) + 188) = *(unsigned __int8 *)(v48 + 1425576);
    *(_DWORD *)(*(_QWORD *)(v5 + 40) + 192) = *(_DWORD *)(v6 + 1280);
    v25 = v57;
    *(_DWORD *)(*(_QWORD *)(v5 + 40) + 196) = *((_DWORD *)v57 + 335) * v57[1339];
    *(_DWORD *)(*(_QWORD *)(v5 + 40) + 200) = *((_DWORD *)v25 + 336) * v25[1339];
    *(_DWORD *)(*(_QWORD *)(v5 + 40) + 204) = *((_DWORD *)v25 + 337) * v25[1339];
    *(_DWORD *)(*(_QWORD *)(v5 + 40) + 208) = *((_DWORD *)v25 + 338) * v25[1339];
    *(_DWORD *)(*(_QWORD *)(v5 + 40) + 212) = v25[1336];
    sub_21609DC00(*(_QWORD *)(v5 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(v48 + 1425564), *(_DWORD *)(v48 + 1428276), *(_DWORD *)(v48 + 1428280), *(_DWORD *)(v48 + 1428284));
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v48 + 1425560);
    v26 = *(_DWORD *)(v48 + 1425564);
    v17 = -8969;
    if (v26 > 7 || ((1 << v26) & 0xE7) == 0)
      goto LABEL_5;
    v27 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 552);
    if (*(_BYTE *)(v48 + 1425576))
    {
      v28 = v48;
      if (v27 != 1
        || (v29 = *(_QWORD *)(v48 + 1024), *(_DWORD *)(v29 + 356))
        || *(_DWORD *)(v29 + 360)
        || (*(unsigned __int8 *)(a1 + 56) | 2) == 3)
      {
        if (!*(_BYTE *)(v48 + 1164)
          && !*(_DWORD *)(v48 + 1425608)
          && !*(_DWORD *)(v48 + 1425612)
          && ((1 << v26) & 0x21) == 0
          && ((1 << v26) & 0x42) == 0
          && ((1 << v26) & 0x84) == 0)
        {
          goto LABEL_5;
        }
        v30 = sub_2160B6E5C(v5, (uint64_t)v57, v56, v48, *(_DWORD *)(a1 + 44), (int)v13 - 1, (int *)(a1 + 8), (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 52), *(_BYTE *)(a1 + 56), v55, 0);
        goto LABEL_50;
      }
LABEL_66:
      v44 = a1 + 8;
      v45 = *(_DWORD *)(a1 + 44);
      if (*(_BYTE *)(v28 + 1164))
      {
        LOBYTE(v46) = 0;
        sub_2160BAA34(v47, v5, (uint64_t)v57, v56, v48, v45, v13 - 1, v44, (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 52), v46, &v54);
      }
      else
      {
        sub_2160BB99C(v47, v5, (uint64_t)v57, v56, v48, v45, v13 - 1, v44, (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 52), &v54);
      }
      goto LABEL_51;
    }
    v28 = v48;
    if (v27 == 1 && *(_BYTE *)(v48 + 1161) != 1)
    {
      v31 = *(_QWORD *)(v48 + 1024);
      if (!*(_DWORD *)(v31 + 356) && !*(_DWORD *)(v31 + 360) && (*(unsigned __int8 *)(a1 + 56) | 2) != 3)
        goto LABEL_66;
    }
    if (*(_BYTE *)(v48 + 1164) || *(_DWORD *)(v48 + 1425608))
      goto LABEL_48;
    if (!*(_DWORD *)(v48 + 1425612) && !v57[1337])
    {
      if (((1 << v26) & 0x21) != 0)
      {
        sub_2160BC48C((_DWORD *)v5, (uint64_t)v57, v56, v48, *(_DWORD *)(a1 + 44), v13 - 1, (int *)(a1 + 8), (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 52), *(_BYTE *)(a1 + 56), v55);
      }
      else if (((1 << v26) & 0x42) != 0)
      {
        v30 = sub_2160BBBD4(v5, (uint64_t)v57, v56, v48, *(_DWORD *)(a1 + 44), (int)v13 - 1, (int *)(a1 + 8), (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 52), *(_BYTE *)(a1 + 56), v55);
      }
      else
      {
        if (((1 << v26) & 0x84) == 0)
          goto LABEL_5;
        v30 = sub_2160BCD10((_DWORD *)v5, (uint64_t)v57, v56, v48, *(_DWORD *)(a1 + 44), (int)v13 - 1, (int *)(a1 + 8), (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 52), *(_BYTE *)(a1 + 56), v55);
      }
LABEL_50:
      v17 = v30;
      if (v30)
        goto LABEL_5;
LABEL_51:
      v33 = *(_DWORD *)(v5 + 156);
      if (v33)
      {
        if (*(int *)(v48 + 1425548) <= 0)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(v48 + 1312) + 48);
          v35 = *(_DWORD *)(a1 + 44);
          v36 = v34 + 12 * v35;
          v38 = *(unsigned __int8 *)(v36 + 9);
          v37 = (BOOL *)(v36 + 9);
          if (v38 != 1)
            *v37 = (*(_DWORD *)(v34 + 12 * v35) / *(_DWORD *)(v34 + 12 * v35 + 4)) < v33;
        }
      }
      v39 = v54;
      v40 = *(_QWORD *)(v5 + 40);
      v41 = *(unsigned int *)(a1 + 4);
      v42 = *(_DWORD *)(a1 + 8);
      v43 = v42 + 1;
      sub_2160EC880(*(pthread_mutex_t **)(v40 + 160));
      if (v39)
      {
        if (v41 < v43)
          memset((void *)(*(_QWORD *)(v40 + 168) + v41), 30, (v42 - v41) + 1);
        sub_2160EC88C(*(pthread_mutex_t **)(v40 + 160));
        v17 = 0;
      }
      else
      {
        if (v41 < v43)
          memset((void *)(*(_QWORD *)(v40 + 168) + v41), 10, (v42 - v41) + 1);
        sub_2160EC88C(*(pthread_mutex_t **)(v40 + 160));
        v17 = sub_2160E7B20(*(_QWORD *)(v5 + 40), (_DWORD *)(*(_QWORD *)(v5 + 88) + 32), *(_QWORD *)(v5 + 88) + 1152, *(unsigned __int8 *)(a1 + 56), v55);
      }
      goto LABEL_5;
    }
    v28 = v48;
    if (*(_DWORD *)(v48 + 1425612))
    {
LABEL_48:
      v32 = v57;
    }
    else
    {
      v32 = v57;
      if (!v57[1337])
        goto LABEL_5;
    }
    v49 = 0;
    v30 = sub_2160B3EF0(v5, (uint64_t)v32, v56, v28, *(_DWORD *)(a1 + 44), (int)v13 - 1, (int *)(a1 + 8), (_DWORD *)(a1 + 48), (_DWORD *)(a1 + 52), *(_BYTE *)(a1 + 56), v55, 0, &v49);
    goto LABEL_50;
  }
LABEL_5:
  if (*(_BYTE *)(v5 + 544))
    sub_2160B1D90((_DWORD *)(v5 + 164), (_DWORD *)(v48 + 1458280));
  sub_2160EC880(*(pthread_mutex_t **)(v5 + 72));
  *(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * v13 - 4) = 0;
  result = sub_2160EC88C(*(pthread_mutex_t **)(v5 + 72));
  *(_DWORD *)a1 = v17;
  return result;
}

uint64_t sub_2160BB5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t j;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v2 = 0;
  v3 = 1;
  *(_DWORD *)(a1 + 296) = 1;
  while (1)
  {
    v4 = v3;
    v5 = *(unsigned int *)(a1 + 4 * v2 + 240);
    if ((v5 & 0x80000000) != 0 || v5 > 0x20)
      return 4294958327;
    v6 = *(_QWORD *)(a1 + 8 * v2 + 224);
    v7 = 33 * v2;
    v8 = *(_QWORD *)(a1 + 264) + 33 * v2;
    v9 = *(_QWORD *)(a1 + 272) + 33 * v2;
    v10 = *(_QWORD *)(a1 + 280) + v7;
    *(_BYTE *)(v8 + 32) = 0;
    *(_BYTE *)(v9 + 32) = 0;
    *(_BYTE *)(v10 + 32) = 0;
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v12 = *(_QWORD *)(v6 + 8 * i);
        *(_BYTE *)(v9 + i) = 0;
        *(_BYTE *)(v10 + i) = 0;
        if (v12)
        {
          v13 = *(unsigned int *)(a2 + 48);
          if ((_DWORD)v13)
          {
            v14 = 0;
            while (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v14) != v12)
            {
              if (v13 == ++v14)
                goto LABEL_11;
            }
            if (v14 <= 0xFE)
              LOBYTE(v12) = v14 + 1;
            else
              LOBYTE(v12) = 0;
          }
          else
          {
LABEL_11:
            LOBYTE(v12) = 0;
          }
        }
        *(_BYTE *)(v8 + i) = v12;
      }
    }
    if ((v4 & 1) == 0)
      return 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 288);
    do
    {
      *(_BYTE *)(v16 + v15) = 32;
      if ((_DWORD)v5)
      {
        v17 = 0;
        while (v15 != *(unsigned __int8 *)(v8 + v17))
        {
          if (v5 == ++v17)
            goto LABEL_24;
        }
        *(_BYTE *)(v16 + v15) = v17;
      }
LABEL_24:
      ++v15;
    }
    while (v15 != 81);
    v18 = 0;
    v19 = *(_QWORD **)(a1 + 304);
    *v19 = 0;
    v20 = v19 + 1;
    do
    {
      if (v18 >= *(unsigned int *)(a2 + 48))
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v18);
      v20[v18++] = v21;
    }
    while (v18 != 80);
    v23 = *(_BYTE **)(a1 + 312);
    v22 = *(_BYTE **)(a1 + 320);
    *v23 = 32;
    *v22 = 32;
    for (j = 1; j != 81; ++j)
      v23[j] = *(_BYTE *)(v16 + j);
    v25 = *(unsigned __int8 *)(a1 + 29);
    if (!*(_BYTE *)(a1 + 29))
    {
      if (!(_DWORD)v5)
        goto LABEL_65;
      v32 = 0;
      do
      {
        v33 = *(_QWORD *)(v6 + 8 * v32);
        if (*(_BYTE *)(v33 + 1362) || *(_BYTE *)(v33 + 34))
          return 4294958327;
        v34 = *(_QWORD *)(v33 + 1352);
        if (v34)
        {
          v35 = *(unsigned int *)(a2 + 48);
          if (!(_DWORD)v35)
            goto LABEL_62;
          v36 = 0;
          while (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v36) != v34)
          {
            if (v35 == ++v36)
              goto LABEL_62;
          }
          if ((v36 + 1) <= 0x50u)
            v23[(v36 + 1)] = v32;
          else
LABEL_62:
            *(_DWORD *)(a1 + 296) = 0;
        }
        ++v32;
      }
      while (v32 != (_DWORD)v5);
      v25 = *(unsigned __int8 *)(a1 + 29);
    }
    if (v25)
      v26 = (_DWORD)v5 == 0;
    else
      v26 = 1;
    if (!v26)
    {
      v27 = 0;
      do
      {
        v28 = *(_QWORD *)(v6 + 8 * v27);
        if (!*(_BYTE *)(v28 + 1362))
          return 4294958327;
        v29 = *(_QWORD *)(v28 + 1352);
        if (v29)
        {
          v30 = *(unsigned int *)(a2 + 48);
          if (!(_DWORD)v30)
            goto LABEL_47;
          v31 = 0;
          while (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v31) != v29)
          {
            if (v30 == ++v31)
              goto LABEL_47;
          }
          if ((v31 + 1) <= 0x50u)
            v22[(v31 + 1)] = v27;
          else
LABEL_47:
            *(_DWORD *)(a1 + 296) = 0;
        }
      }
      while (++v27 != (_DWORD)v5);
    }
LABEL_65:
    v37 = *(unsigned __int8 *)(a1 + 187);
    if (v37 == 2)
    {
      if (*(_BYTE *)(a1 + 29))
        return 4294958327;
      if (!(_DWORD)v5)
        goto LABEL_105;
      v46 = 0;
      while (1)
      {
        v47 = *(_QWORD *)(v6 + 8 * v46);
        if (*(_BYTE *)(v47 + 1362))
          return 4294958327;
        if (*(_BYTE *)(v47 + 34))
          return 4294958327;
        v48 = *(_QWORD *)(v47 + 1352);
        if (!v48)
          return 4294958327;
        v49 = *(unsigned int *)(a2 + 48);
        if ((_DWORD)v49)
        {
          v50 = 0;
          while (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v50) != v48)
          {
            if (v49 == ++v50)
              goto LABEL_99;
          }
          v51 = v50 + 1;
          if ((v50 + 1) <= 0x50u)
          {
            *(_BYTE *)(v16 + (v50 + 1)) = v46;
            goto LABEL_101;
          }
        }
        else
        {
LABEL_99:
          v51 = -1;
        }
        *(_DWORD *)(a1 + 296) = 0;
LABEL_101:
        *(_BYTE *)(v9 + v46) = v51;
        *(_BYTE *)(v10 + v46++) = v51;
        if (v46 == (_DWORD)v5)
          goto LABEL_105;
      }
    }
    if (v37 == 1)
    {
      if (!*(_BYTE *)(a1 + 29))
        return 4294958327;
      if ((_DWORD)v5)
        break;
    }
LABEL_105:
    v3 = 0;
    v2 = 1;
    if ((v4 & 1) == 0)
      return 0;
  }
  v38 = 0;
  v39 = *(unsigned __int8 *)(a1 + 30);
  while (1)
  {
    v40 = *(_QWORD *)(v6 + 8 * v38);
    if (!*(_BYTE *)(v40 + 1362))
      return 4294958327;
    v41 = *(_QWORD *)(v40 + 1352);
    if (!v41)
      return 4294958327;
    v42 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v42)
    {
      v43 = 0;
      while (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v43) != v41)
      {
        if (v42 == ++v43)
          goto LABEL_76;
      }
    }
    else
    {
LABEL_76:
      LOBYTE(v43) = -2;
    }
    *(_BYTE *)(v10 + v38) = v43 + 1;
    if (*(unsigned __int8 *)(v40 + 37) != v39)
    {
      v44 = 0;
      while (*(_QWORD *)(v6 + 8 * v44) != v41)
      {
        if (v5 <= ++v44)
        {
          v44 = 32;
          break;
        }
      }
      v45 = *(unsigned __int8 *)(v8 + v38);
      if (v45 > 0x50)
        *(_DWORD *)(a1 + 296) = 0;
      else
        *(_BYTE *)(v16 + v45) = v44;
      if (v44 <= 0x1Fu)
        *(_BYTE *)(v9 + v44) = v45;
    }
    if (++v38 == (_DWORD)v5)
      goto LABEL_105;
  }
}

void sub_2160BB99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, _DWORD *a9, _DWORD *a10, _BYTE *a11)
{
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;

  v13 = *(_DWORD *)(a2 + 4);
  v14 = *(_DWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 560);
  v16 = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a5 + 12) = *(_BYTE *)(a5 + 1423168);
  v17 = *(_QWORD *)(a5 + 1016);
  *(_BYTE *)(a5 + 13) = *(_BYTE *)(v17 + 56);
  *(_BYTE *)(a5 + 14) = *(_BYTE *)(v17 + 57);
  *(_DWORD *)(a5 + 16) = *(_DWORD *)(a5 + 996);
  *(_WORD *)(a5 + 20) = *(_WORD *)(a5 + 1005);
  *(_BYTE *)(a5 + 24) = *(_BYTE *)(a5 + 1164);
  v18 = *(_QWORD *)(a5 + 1192);
  *(_BYTE *)(a5 + 22) = *(_BYTE *)(v18 + 1363);
  *(_BYTE *)(a5 + 23) = 0;
  *(_QWORD *)(a5 + 64) = a5 + 1200;
  *(_QWORD *)(a5 + 72) = v18 + 32;
  *(_QWORD *)(a5 + 80) = *(_QWORD *)(a5 + 1312);
  *(_BYTE *)(a5 + 928) = *(_BYTE *)(*(_QWORD *)(a5 + 1024) + 4);
  *(_BYTE *)(a5 + 36) = 0;
  *(_QWORD *)(a5 + 28) = 0;
  *(_QWORD *)(a2 + 632) = a2;
  *(_QWORD *)(a2 + 640) = a1;
  *(_QWORD *)(a2 + 648) = a3;
  *(_QWORD *)(a2 + 656) = a4;
  *(_QWORD *)(a2 + 664) = a5;
  *(_DWORD *)(a2 + 672) = a6;
  *(_DWORD *)(a2 + 676) = a7;
  *(_QWORD *)(a2 + 680) = a8;
  *(_QWORD *)(a2 + 688) = a9;
  *(_QWORD *)(a2 + 696) = a10;
  *(_QWORD *)(a2 + 704) = v15;
  *(_QWORD *)(a2 + 728) = v15;
  *(_QWORD *)(a2 + 736) = a5;
  *(_QWORD *)(a2 + 744) = v16;
  *(_DWORD *)(a2 + 752) = v13;
  *(_DWORD *)(a2 + 756) = v14;
  *(_BYTE *)a5 = *(_DWORD *)(a5 + 1428264) + *(_DWORD *)(a4 + 72) + 26;
  v19 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a5 + 1312) + 48) + 12 * a6);
  *v19 = (63 * *(_DWORD *)(a2 + 156)) >> 6;
  v19[1] = 1;
  *(_DWORD *)(a5 + 4) = 0;
  *(_DWORD *)(a5 + 8) = 0;
  v20 = *(_DWORD *)(a5 + 1425560);
  if (*(_BYTE *)(a5 + 1161))
  {
    v21 = v20 % (2 * v13) / 2;
    if (*(unsigned __int8 *)(a5 + 1007) + 2 * (v20 / (2 * v13)) == 1)
      v22 = *(_DWORD *)(a5 + 1425560) & 1;
    else
      v22 = 0;
  }
  else
  {
    v22 = v20 / v13;
    v21 = v20 % v13;
  }
  *(_DWORD *)(a5 + 40) = v21;
  *(_DWORD *)(a5 + 44) = v13 - 1;
  *(_DWORD *)(a5 + 48) = v22;
  *(_DWORD *)(a5 + 52) = v14;
  *(_DWORD *)(a5 + 56) = v20;
  *(_OWORD *)(a2 + 796) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 784) = 0u;
  if (v22)
  {
    *(_DWORD *)(a2 + 772) = v22;
    *(_DWORD *)(a2 + 780) = v22;
    *(_DWORD *)(a2 + 788) = v22;
    *(_DWORD *)(a2 + 796) = v22;
  }
  *(_DWORD *)(a2 + 800) = *(_DWORD *)(a2 + 16);
  v23 = a1 + 5041656;
  *(_QWORD *)(*(_QWORD *)(a1 + 5041656) + 824) = sub_2160EC928(1, 0);
  if (a11)
    *a11 = 1;
  sub_2160EBF40(a2 + 576);
  if (a9)
    *a9 = *(_DWORD *)(a5 + 4) == 0;
  if (a10)
    *a10 = *(_DWORD *)(a5 + 8) == 0;
  sub_2160EC984(*(NSObject ***)(*(_QWORD *)v23 + 824));
  *(_QWORD *)(*(_QWORD *)v23 + 824) = 0;
}

uint64_t sub_2160BBBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int *a7, _DWORD *a8, _DWORD *a9, unsigned __int8 a10, int a11)
{
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t result;
  int v17;
  int *v18;
  int v19;
  int v20;
  unsigned int *v21;
  _BOOL4 v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  unsigned int *v57;
  _BOOL4 v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint64_t v65;
  _DWORD *v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int16x8_t v73;
  int16x8_t v74;
  double v75;
  double v76;
  double v77;
  int8x16_t v78;
  int16x8_t v79;
  double v80;
  int8x16_t v81;
  double v82;
  double v83;
  double v84;
  int8x16_t v85;
  unsigned int v86;
  char v87;
  char v88;
  uint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  _BOOL4 v93;
  int *v94;
  unsigned int v95;
  int v97;
  int v98;
  _BOOL4 v99;
  int v100;
  _DWORD *v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  __int16 v108;
  unsigned int v110;
  uint64_t v112;
  uint64_t v113;
  _BOOL4 v114;
  _BYTE *v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned __int8 v120[2];
  unint64_t v121;
  _QWORD v122[3];

  v122[1] = *MEMORY[0x24BDAC8D0];
  v11 = a4 + 1425504;
  v121 = -1;
  v122[0] = -1;
  v12 = *(_DWORD *)(a4 + 1425564);
  v13 = v12 == 6 || v12 == 1;
  if (!v13 || *(_BYTE *)(a4 + 1164) || *(_BYTE *)(a2 + 1337) || *(_BYTE *)(a4 + 1425576))
    return 4294958327;
  v97 = 0;
  v98 = 0;
  v106 = 0;
  v100 = 0;
  v17 = 0;
  v18 = (int *)(a4 + 976);
  v19 = *(_DWORD *)(a1 + 4);
  v20 = *(_DWORD *)(a1 + 16) * v19;
  v116 = v19;
  v117 = *(_DWORD *)(a4 + 1428264) + *(_DWORD *)(a3 + 72) + 26;
  v21 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a4 + 1312) + 48) + 12 * a5);
  v102 = 2 * v19;
  v113 = a6;
  v115 = *(_BYTE **)(a4 + 1016);
  v104 = *(unsigned __int8 *)(a4 + 1425540);
  v103 = *(_QWORD *)(a4 + 1425520);
  v23 = (a10 & 0xFD) == 1 && a11 != 0;
  v99 = v23;
  v101 = (_DWORD *)(a4 + 1458280);
  v108 = a5;
  v110 = (unsigned __int16)a5;
  v24 = *(_DWORD *)(a4 + 1425560);
  v112 = a4 + 1458264;
  *v21 = (63 * *(_DWORD *)(a1 + 156)) >> 6;
  v21[1] = 1;
  v118 = a4 + 976;
  do
  {
    **(_DWORD **)(a4 + 1152) = v24;
    *(_DWORD *)(a4 + 992) = v24;
    if (v24 >= v20
      || (*(_BYTE *)(a4 + 1004) - 2) < 8u && ((0xA5u >> (*(_BYTE *)(a4 + 1004) - 2)) & 1) != 0)
    {
      return 4294958327;
    }
    v26 = *(_QWORD *)(v11 + 16);
    v25 = *(unsigned int **)(v11 + 24);
    v27 = *(_DWORD *)(v11 + 32);
    v28 = *(unsigned __int8 *)(v11 + 36);
    v29 = __clz(v27 | 1);
    if (!v27)
      ++v29;
    if (v29 > 0xC)
    {
      v36 = v28 + 1;
      v37 = (v28 + 1) & 7;
      v38 = (unsigned int *)(v26 + (v36 >> 3));
      v39 = bswap32(*v38) << v37;
      if (v38 <= v25)
        v40 = v38;
      else
        v40 = *(unsigned int **)(v11 + 24);
      if (v27 < 0)
      {
        v44 = 0;
      }
      else
      {
        v41 = 0;
        do
        {
          v42 = v39;
          v43 = v37;
          v44 = v41 + 1;
          v45 = (v37 + 1);
          v37 = ((_BYTE)v37 + 1) & 7;
          v40 = (unsigned int *)((char *)v40 + (v45 >> 3));
          v39 = bswap32(*v40) << (v45 & 7);
          if (v40 > v25)
            v40 = *(unsigned int **)(v11 + 24);
          if ((v42 & 0x80000000) != 0)
            break;
        }
        while (v41++ < 0x1F);
        if (v44 - 1 > 0x17)
        {
          v47 = v39 >> (48 - v44);
          v48 = ((v43 + 1) & 7) + v44;
          v49 = v48 - 16;
          v33 = v48 & 7;
          v50 = (unsigned int *)((char *)v40 + (v49 >> 3));
          v51 = bswap32(*v50) << v33;
          if (v50 <= v25)
            v52 = v50;
          else
            v52 = *(unsigned int **)(v11 + 24);
          v54 = *(unsigned int *)((char *)v52 + 2);
          v53 = (unsigned int *)((char *)v52 + 2);
          v35 = bswap32(v54) << v33;
          if (v53 <= v25)
            v25 = v53;
          v55 = __PAIR64__(v47, v51) >> 16;
LABEL_49:
          v31 = v55 + ~(-1 << v44);
          goto LABEL_50;
        }
      }
      v55 = v39 >> -(char)v44;
      v56 = v44 + v37;
      v33 = (v44 + v37) & 7;
      v57 = (unsigned int *)((char *)v40 + (v56 >> 3));
      v35 = bswap32(*v57) << v33;
      if (v57 <= v25)
        v25 = v57;
      goto LABEL_49;
    }
    v30 = (v27 << (v29 + 1)) >> -(char)v29;
    if (!v29)
      v30 = 0;
    v31 = v30 + ~(-1 << v29);
    v32 = v28 + 2 * v29 + 1;
    v33 = v32 & 7;
    v34 = (unsigned int *)(v26 + (v32 >> 3));
    v35 = bswap32(*v34) << (v32 & 7);
    if (v34 <= v25)
      v25 = v34;
LABEL_50:
    *(_QWORD *)(v11 + 16) = v25;
    *(_DWORD *)(v11 + 32) = v35;
    *(_BYTE *)(v11 + 36) = v33;
    if ((int)(v31 + v24) > v20)
      return 4294958327;
    v58 = sub_2160AC88C(v11);
    v114 = !v58;
    if (v58 + v31)
    {
      v59 = v58 + v31 - 1;
      v105 = v20;
      while (1)
      {
        **(_DWORD **)(a4 + 1152) = v24;
        *(_DWORD *)(a4 + 992) = v24;
        if (v24 >= v20)
          return 4294958327;
        if (*(_BYTE *)(a4 + 1161))
        {
          v60 = v24 % v102 / 2;
          if (*(unsigned __int8 *)(a4 + 1007) + 2 * (v24 / v102) == 1)
            v61 = v24 & 1;
          else
            v61 = 0;
        }
        else
        {
          v61 = v24 / v116;
          v60 = v24 % v116;
        }
        *(_DWORD *)(a4 + 976) = v60;
        *(_DWORD *)(a4 + 980) = v61;
        v62 = *(_QWORD *)(v112 + 8 * !(v61 & 1));
        *(_QWORD *)(v11 + 32752) = v62;
        *(_QWORD *)(v11 + 32744) = *(_QWORD *)(v112 + 8 * (v61 & 1));
        *(_QWORD *)(a4 + 1152) = v62 + 400 * v60;
        *(_QWORD *)(*(_QWORD *)(v11 + 32752) + 400 * v60 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 1192) + 1152)
                                                                                            + 8 * v113));
        sub_2160CBB14(*(_DWORD *)(v11 + 56), *(_QWORD *)(v11 + 32744), *(_QWORD *)(v11 + 32752), v18);
        if (v59 | v114)
        {
          sub_2160CCDE0(*(_QWORD *)(a4 + 1016), *(_QWORD *)(a4 + 1024), *(unsigned __int8 *)(a4 + 1007));
          *(_BYTE *)(*(_QWORD *)(a4 + 1152) + 126) = *(_BYTE *)(*(_QWORD *)(a4 + 1024) + 272);
          result = sub_215FD485C((uint64_t)v18, v63, v64);
          if ((_DWORD)result)
            return result;
          if (*(_BYTE *)(a4 + 1007)
            || (v65 = *(_QWORD *)(a4 + 1024), *(_BYTE *)(v65 + 272) != 1)
            || (v66 = *(_DWORD **)(*(_QWORD *)(a4 + 1152) + 112),
                v67 = *(unsigned __int8 *)(v65 + 24),
                v68 = *(unsigned __int8 *)(v65 + 25),
                v67 != 32)
            && *v66
            || v68 != 32 && v66[1]
            || *(_DWORD *)(v65 + 356)
            || *(_DWORD *)(v65 + 360))
          {
            if (v17)
            {
              result = sub_2160B253C((uint64_t)v18, (unsigned int *)v122, (unsigned int *)&v121, v120);
              if ((_DWORD)result)
                return result;
            }
            result = sub_2160CBF40((uint64_t)v18);
            if ((_DWORD)result)
              return result;
            v69 = 0;
            v17 = 0;
            v70 = 0;
            goto LABEL_73;
          }
          if (v17)
          {
            if (v67 == v98 && v68 == v97)
            {
              v69 = 0;
              v94 = v18;
              v70 = 0;
              ++v17;
              v121 = *(_QWORD *)v94;
LABEL_73:
              v106 = 1;
              goto LABEL_96;
            }
            result = sub_2160B253C((uint64_t)v18, (unsigned int *)v122, (unsigned int *)&v121, v120);
            if ((_DWORD)result)
              return result;
          }
          v69 = 0;
          v70 = 0;
          v120[0] = v67;
          v120[1] = v68;
          v95 = *(_DWORD *)(a4 + 980);
          LODWORD(v122[0]) = *(_DWORD *)(a4 + 976);
          HIDWORD(v122[0]) = v95;
          v121 = __PAIR64__(v95, v122[0]);
          v106 = 1;
          v97 = v68;
          v98 = v67;
          v17 = 1;
        }
        else
        {
          if (v17)
          {
            result = sub_2160B253C((uint64_t)v18, (unsigned int *)v122, (unsigned int *)&v121, v120);
            if ((_DWORD)result)
              return result;
          }
          if ((a10 & 0xFD) == 1)
          {
            v71 = a10;
            v72 = a11;
          }
          else
          {
            v71 = 0;
            v72 = 0;
          }
          result = sub_2160D0ECC(v11, (uint64_t)v18, v71, v72);
          if ((_DWORD)result)
            return result;
          if (*(_QWORD *)(v11 + 16) - *(_QWORD *)v11 > *(int *)(v11 + 12) || (v115[54] - 26) < 0xCCu)
            return 4294958327;
          v117 = (char)v115[54]
               + (char)v117
               + 52
               - 52
               * (((20165 * ((char)v115[54] + (char)v117 + 52)) >> 20)
                + ((20165 * ((char)v115[54] + (char)v117 + 52)) >> 31));
          v115[55] = v117;
          if (v115[1] - 2 >= 4)
          {
            if (v115[1])
              return 4294958327;
            if (v115[2] == 25)
            {
              result = sub_2160CBFF8((uint64_t)v18);
            }
            else if (v99)
            {
              result = sub_215FCF9F8((unint64_t)v18, *(double *)v73.i64, (int8x16_t)v74, v75, v76, v77, v78, v79);
            }
            else
            {
              result = sub_215FCF724((unint64_t)v18, (int32x4_t)v73, (int8x16_t)v74, v75, v76, v77, v78, v79);
            }
            if ((_DWORD)result)
              return result;
          }
          else
          {
            result = sub_215FD485C((uint64_t)v18, v73, v74);
            if ((_DWORD)result)
              return result;
            v119 = 0;
            result = sub_2160CBD4C((unint64_t)v18, &v119, v80, v81, v82, v83, v84, v85);
            if ((_DWORD)result)
              return result;
            if (v119)
              sub_21609DEA0(*(_QWORD *)(a4 + 1312), v60, v61, (int8x16_t *)(*(_QWORD *)(a4 + 1152) + 80));
            v106 = 1;
          }
          v17 = 0;
          v69 = *(unsigned __int8 *)(v11 + 36) - v104 + 8 * (*(_QWORD *)(v11 + 16) - v103);
          v70 = -1;
          v100 = 1;
          v103 = *(_QWORD *)(v11 + 16);
          v104 = *(unsigned __int8 *)(v11 + 36);
        }
LABEL_96:
        if (*(_BYTE *)(a1 + 544))
          sub_2160B1BA8(v101, v118, v69);
        if (*(_DWORD *)(*(_QWORD *)(a4 + 1192) + 1164) <= *(_DWORD *)(a4 + 992))
          return 4294958327;
        sub_2160CBC00(v118, a6);
        if (v115[1] || v115[2] != 25)
        {
          v86 = (char)v117;
          v87 = sub_2160DD8F4((char)v117, *(char *)(*(_QWORD *)(a4 + 1016) + 56));
          v88 = sub_2160DD8F4((char)v117, *(char *)(*(_QWORD *)(a4 + 1016) + 57));
        }
        else
        {
          v86 = 0;
          v87 = 0;
          v88 = 0;
        }
        v89 = *(_QWORD *)(a4 + 1312);
        v90 = *(_BYTE *)(*(_QWORD *)(a4 + 1016) + 3);
        v91 = *(_BYTE *)(a4 + 1007);
        v92 = *(_DWORD *)(a4 + 976) + *(_DWORD *)(v89 + 12) * *(_DWORD *)(a4 + 980);
        *(_WORD *)(*(_QWORD *)(v89 + 72) + 2 * v92) = v108;
        *(_BYTE *)(*(_QWORD *)(v89 + 112) + v92) = v86;
        *(_BYTE *)(*(_QWORD *)(v89 + 120) + v92) = v87;
        *(_BYTE *)(*(_QWORD *)(v89 + 128) + v92) = v88;
        *(_BYTE *)(*(_QWORD *)(v89 + 136) + v92) = v90;
        *(_BYTE *)(*(_QWORD *)(v89 + 144) + v92) = v91;
        *(int32x2_t *)(*(_QWORD *)(v89 + 48) + 12 * v110) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v89 + 48) + 12 * v110), (int32x2_t)vand_s8((int8x8_t)(v86 | 0x100000000), (int8x8_t)vdup_n_s32(v70)));
        if (*(_BYTE *)(a3 + 8))
          return 4294958327;
        v93 = sub_2160AC88C(v11);
        *a7 = v24;
        v24 = sub_2160CCE28(v24);
        --v59;
        v18 = (int *)v118;
        v20 = v105;
        if (v59 == -1)
          goto LABEL_113;
      }
    }
    v93 = v58;
LABEL_113:
    ;
  }
  while (v93 && v24 < v20);
  if (!v17
    || (result = sub_2160B253C((uint64_t)v18, (unsigned int *)v122, (unsigned int *)&v121, v120), !(_DWORD)result))
  {
    if (a8)
      *a8 = v106 == 0;
    result = 0;
    if (a9)
      *a9 = v100 == 0;
  }
  return result;
}

void sub_2160BC48C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int *a7, _DWORD *a8, _DWORD *a9, char a10, int a11)
{
  uint64_t v11;
  int v12;
  BOOL v13;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  unsigned int *v20;
  _BOOL4 v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  unsigned int *v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unsigned int *v56;
  _BOOL4 v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int v64;
  uint64_t v65;
  _DWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int16x8_t v72;
  int16x8_t v73;
  double v74;
  double v75;
  double v76;
  int8x16_t v77;
  int16x8_t v78;
  double v79;
  int8x16_t v80;
  double v81;
  double v82;
  double v83;
  int8x16_t v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  char v89;
  char v90;
  uint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  _BOOL4 v95;
  unsigned int v96;
  int v98;
  int v99;
  _BOOL4 v100;
  int *v101;
  int v102;
  int v103;
  int v104;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  _BYTE *v111;
  int v112;
  int v113;
  int v114;
  int *v115;
  int v116;
  unsigned __int8 v117[2];
  unint64_t v118;
  _QWORD v119[3];

  v119[1] = *MEMORY[0x24BDAC8D0];
  v11 = a4 + 1425504;
  v118 = -1;
  v119[0] = -1;
  v12 = *(_DWORD *)(a4 + 1425564);
  v13 = v12 == 5 || v12 == 0;
  if (!v13 || *(_BYTE *)(a4 + 1164) || *(_BYTE *)(a2 + 1337) || *(_BYTE *)(a4 + 1425576))
    return;
  v16 = a5;
  v98 = 0;
  v99 = 0;
  v17 = 0;
  v102 = 0;
  v114 = 0;
  v115 = (int *)(a4 + 976);
  v18 = a1[1];
  v19 = a1[4] * v18;
  v113 = *(_DWORD *)(a4 + 1428264) + *(_DWORD *)(a3 + 72) + 26;
  v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a4 + 1312) + 48) + 12 * a5);
  v111 = *(_BYTE **)(a4 + 1016);
  v112 = v18;
  v103 = 2 * v18;
  v22 = (a10 & 0xFD) == 1 && a11 != 0;
  v100 = v22;
  v107 = (unsigned __int16)a5;
  v23 = *(_DWORD *)(a4 + 1425560);
  v108 = a4 + 1458264;
  v109 = a6;
  *v20 = (63 * a1[39]) >> 6;
  v20[1] = 1;
  do
  {
    **(_DWORD **)(a4 + 1152) = v23;
    *(_DWORD *)(a4 + 992) = v23;
    if (v23 >= v19
      || (*(_BYTE *)(a4 + 1004) - 2) < 8u && ((0xA5u >> (*(_BYTE *)(a4 + 1004) - 2)) & 1) != 0
      || *(_BYTE *)(a4 + 1164))
    {
      return;
    }
    v25 = *(_QWORD *)(v11 + 16);
    v24 = *(unsigned int **)(v11 + 24);
    v26 = *(_DWORD *)(v11 + 32);
    v27 = *(unsigned __int8 *)(v11 + 36);
    v28 = __clz(v26 | 1);
    if (!v26)
      ++v28;
    if (v28 > 0xC)
    {
      v35 = v27 + 1;
      v36 = (v27 + 1) & 7;
      v37 = (unsigned int *)(v25 + (v35 >> 3));
      v38 = bswap32(*v37) << v36;
      if (v37 <= v24)
        v39 = v37;
      else
        v39 = *(unsigned int **)(v11 + 24);
      if (v26 < 0)
      {
        v43 = 0;
      }
      else
      {
        v40 = 0;
        do
        {
          v41 = v38;
          v42 = v36;
          v43 = v40 + 1;
          v44 = (v36 + 1);
          v36 = ((_BYTE)v36 + 1) & 7;
          v39 = (unsigned int *)((char *)v39 + (v44 >> 3));
          v38 = bswap32(*v39) << (v44 & 7);
          if (v39 > v24)
            v39 = *(unsigned int **)(v11 + 24);
          if ((v41 & 0x80000000) != 0)
            break;
        }
        while (v40++ < 0x1F);
        if (v43 - 1 > 0x17)
        {
          v46 = v38 >> (48 - v43);
          v47 = ((v42 + 1) & 7) + v43;
          v48 = v47 - 16;
          v32 = v47 & 7;
          v49 = (unsigned int *)((char *)v39 + (v48 >> 3));
          v50 = bswap32(*v49) << v32;
          if (v49 <= v24)
            v51 = v49;
          else
            v51 = *(unsigned int **)(v11 + 24);
          v53 = *(unsigned int *)((char *)v51 + 2);
          v52 = (unsigned int *)((char *)v51 + 2);
          v34 = bswap32(v53) << v32;
          if (v52 <= v24)
            v24 = v52;
          v54 = __PAIR64__(v46, v50) >> 16;
LABEL_49:
          v30 = v54 + ~(-1 << v43);
          goto LABEL_50;
        }
      }
      v54 = v38 >> -(char)v43;
      v55 = v43 + v36;
      v32 = (v43 + v36) & 7;
      v56 = (unsigned int *)((char *)v39 + (v55 >> 3));
      v34 = bswap32(*v56) << v32;
      if (v56 <= v24)
        v24 = v56;
      goto LABEL_49;
    }
    v29 = (v26 << (v28 + 1)) >> -(char)v28;
    if (!v28)
      v29 = 0;
    v30 = v29 + ~(-1 << v28);
    v31 = v27 + 2 * v28 + 1;
    v32 = v31 & 7;
    v33 = (unsigned int *)(v25 + (v31 >> 3));
    v34 = bswap32(*v33) << (v31 & 7);
    if (v33 <= v24)
      v24 = v33;
LABEL_50:
    *(_QWORD *)(v11 + 16) = v24;
    *(_DWORD *)(v11 + 32) = v34;
    *(_BYTE *)(v11 + 36) = v32;
    if ((int)(v30 + v23) > v19)
      return;
    v57 = sub_2160AC88C(v11);
    v110 = !v57;
    if (v57 + v30)
    {
      v58 = v57 + v30 - 1;
      v101 = a7;
      v104 = v19;
      while (1)
      {
        **(_DWORD **)(a4 + 1152) = v23;
        *(_DWORD *)(a4 + 992) = v23;
        if (v23 >= v19)
          return;
        if (*(_BYTE *)(a4 + 1161))
        {
          v59 = v23 % v103 / 2;
          if (*(unsigned __int8 *)(a4 + 1007) + 2 * (v23 / v103) == 1)
            v60 = v23 & 1;
          else
            v60 = 0;
        }
        else
        {
          v60 = v23 / v112;
          v59 = v23 % v112;
        }
        *(_DWORD *)(a4 + 976) = v59;
        *(_DWORD *)(a4 + 980) = v60;
        v61 = *(_QWORD *)(v108 + 8 * !(v60 & 1));
        *(_QWORD *)(v11 + 32752) = v61;
        *(_QWORD *)(v11 + 32744) = *(_QWORD *)(v108 + 8 * (v60 & 1));
        *(_QWORD *)(a4 + 1152) = v61 + 400 * v59;
        *(_QWORD *)(*(_QWORD *)(v11 + 32752) + 400 * v59 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 1192) + 1152)
                                                                                            + 8 * v109));
        sub_2160CBB14(*(_DWORD *)(v11 + 56), *(_QWORD *)(v11 + 32744), *(_QWORD *)(v11 + 32752), v115);
        if (v58 | v110)
        {
          if (sub_2160CCDB0(*(_QWORD *)(a4 + 1016), *(_QWORD *)(a4 + 1024)))
            return;
          *(_BYTE *)(*(_QWORD *)(a4 + 1152) + 126) = *(_BYTE *)(*(_QWORD *)(a4 + 1024) + 272);
          sub_215FD7DD4((uint64_t)v115, v62, v63);
          if (v64)
            return;
          if (*(_BYTE *)(a4 + 1007)
            || (v65 = *(_QWORD *)(a4 + 1024), *(_BYTE *)(v65 + 272) != 1)
            || (v66 = *(_DWORD **)(*(_QWORD *)(a4 + 1152) + 112),
                v67 = *(unsigned __int8 *)(v65 + 24),
                v68 = *(unsigned __int8 *)(v65 + 25),
                v67 != 32)
            && *v66
            || v68 != 32 && v66[1]
            || *(_DWORD *)(v65 + 356)
            || *(_DWORD *)(v65 + 360))
          {
            v69 = (uint64_t)v115;
            if (v114 && sub_2160B253C((uint64_t)v115, (unsigned int *)v119, (unsigned int *)&v118, v117)
              || sub_2160CBF40((uint64_t)v115))
            {
              return;
            }
            v70 = 0;
            v71 = 0;
          }
          else
          {
            if (!v114)
              goto LABEL_107;
            if (v67 != v99 || v68 != v98)
            {
              if (sub_2160B253C((uint64_t)v115, (unsigned int *)v119, (unsigned int *)&v118, v117))
                return;
LABEL_107:
              v71 = 0;
              v117[0] = v67;
              v117[1] = v68;
              v96 = *(_DWORD *)(a4 + 980);
              LODWORD(v119[0]) = *(_DWORD *)(a4 + 976);
              HIDWORD(v119[0]) = v96;
              v118 = __PAIR64__(v96, v119[0]);
              v17 = 1;
              v98 = v68;
              v99 = v67;
              v70 = 1;
              v69 = (uint64_t)v115;
              goto LABEL_94;
            }
            v71 = 0;
            v70 = v114 + 1;
            v69 = (uint64_t)v115;
            v118 = *(_QWORD *)v115;
          }
          v17 = 1;
        }
        else
        {
          if (v114 && sub_2160B253C((uint64_t)v115, (unsigned int *)v119, (unsigned int *)&v118, v117)
            || sub_2160D2220(v11, (uint64_t)v115, 0, 0)
            || *(_QWORD *)(v11 + 16) - *(_QWORD *)v11 > *(int *)(v11 + 12)
            || (v111[54] - 26) < 0xCCu)
          {
            return;
          }
          v113 = (char)v111[54]
               + (char)v113
               + 52
               - 52
               * (((20165 * ((char)v111[54] + (char)v113 + 52)) >> 20)
                + ((20165 * ((char)v111[54] + (char)v113 + 52)) >> 31));
          v111[55] = v113;
          if (v111[1] - 2 >= 4)
          {
            if (v111[1])
              return;
            if (v111[2] == 25)
            {
              v69 = (uint64_t)v115;
              v86 = sub_2160CBFF8((uint64_t)v115);
              a7 = v101;
            }
            else
            {
              v69 = (uint64_t)v115;
              a7 = v101;
              v86 = v100
                  ? sub_215FCF9F8((unint64_t)v115, *(double *)v72.i64, (int8x16_t)v73, v74, v75, v76, v77, v78)
                  : sub_215FCF724((unint64_t)v115, (int32x4_t)v72, (int8x16_t)v73, v74, v75, v76, v77, v78);
            }
            if (v86)
              return;
            v70 = 0;
            v71 = -1;
            v102 = 1;
          }
          else
          {
            *(_QWORD *)&v79 = sub_215FD7DD4((uint64_t)v115, v72, v73).u64[0];
            if (v85)
              return;
            v116 = 0;
            if (sub_2160CBD4C((unint64_t)v115, &v116, v79, v80, v81, v82, v83, v84))
              return;
            if (v116)
              sub_21609DEA0(*(_QWORD *)(a4 + 1312), v59, v60, (int8x16_t *)(*(_QWORD *)(a4 + 1152) + 80));
            v70 = 0;
            v71 = -1;
            v17 = 1;
            v102 = 1;
            v69 = (uint64_t)v115;
            a7 = v101;
          }
        }
LABEL_94:
        if (*(_DWORD *)(*(_QWORD *)(a4 + 1192) + 1164) <= *(_DWORD *)(a4 + 992))
          return;
        v87 = v71;
        v114 = v70;
        sub_2160CBC00(v69, a6);
        if (v111[1] || v111[2] != 25)
        {
          v88 = (char)v113;
          v89 = sub_2160DD8F4((char)v113, *(char *)(*(_QWORD *)(a4 + 1016) + 56));
          v90 = sub_2160DD8F4((char)v113, *(char *)(*(_QWORD *)(a4 + 1016) + 57));
        }
        else
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
        }
        v91 = *(_QWORD *)(a4 + 1312);
        v92 = *(_BYTE *)(*(_QWORD *)(a4 + 1016) + 3);
        v93 = *(_BYTE *)(a4 + 1007);
        v94 = *(_DWORD *)(a4 + 976) + *(_DWORD *)(v91 + 12) * *(_DWORD *)(a4 + 980);
        *(_WORD *)(*(_QWORD *)(v91 + 72) + 2 * v94) = v16;
        *(_BYTE *)(*(_QWORD *)(v91 + 112) + v94) = v88;
        *(_BYTE *)(*(_QWORD *)(v91 + 120) + v94) = v89;
        *(_BYTE *)(*(_QWORD *)(v91 + 128) + v94) = v90;
        *(_BYTE *)(*(_QWORD *)(v91 + 136) + v94) = v92;
        *(_BYTE *)(*(_QWORD *)(v91 + 144) + v94) = v93;
        *(int32x2_t *)(*(_QWORD *)(v91 + 48) + 12 * v107) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v91 + 48) + 12 * v107), (int32x2_t)vand_s8((int8x8_t)(v88 | 0x100000000), (int8x8_t)vdup_n_s32(v87)));
        if (*(_BYTE *)(a3 + 8))
          return;
        v95 = sub_2160AC88C(v11);
        *a7 = v23;
        v23 = sub_2160CCE28(v23);
        --v58;
        v19 = v104;
        if (v58 == -1)
          goto LABEL_109;
      }
    }
    v95 = v57;
LABEL_109:
    ;
  }
  while (v95 && v23 < v19);
  if (!v114 || !sub_2160B253C((uint64_t)v115, (unsigned int *)v119, (unsigned int *)&v118, v117))
  {
    if (a8)
      *a8 = v17 == 0;
    if (a9)
      *a9 = v102 == 0;
  }
}

uint64_t sub_2160BCD10(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int *a7, _DWORD *a8, _DWORD *a9, unsigned __int8 a10, int a11)
{
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t result;
  __int16 v18;
  int *v19;
  int v20;
  int v21;
  unsigned int *v22;
  int v23;
  _BOOL4 v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int32x4_t v30;
  int8x16_t v31;
  double v32;
  double v33;
  double v34;
  int8x16_t v35;
  int16x8_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  _BOOL4 v46;
  int v47;
  int *v49;
  _BOOL4 v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  _BYTE *v58;

  v11 = a4 + 1425504;
  v12 = *(_DWORD *)(a4 + 1425564);
  v13 = v12 == 7 || v12 == 2;
  if (v13 && !*(_BYTE *)(a4 + 1164) && !*(_BYTE *)(a2 + 1337) && !*(_BYTE *)(a4 + 1425576))
  {
    v18 = a5;
    v19 = (int *)(a4 + 976);
    v58 = *(_BYTE **)(a4 + 1016);
    v20 = a1[1];
    v21 = a1[4] * v20;
    v56 = v20;
    v57 = *(_DWORD *)(a4 + 1428264) + *(_DWORD *)(a3 + 72) + 26;
    v22 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a4 + 1312) + 48) + 12 * a5);
    v51 = 2 * v20;
    v55 = a6;
    v23 = *(_DWORD *)(a4 + 1425560);
    v25 = (a10 & 0xFD) == 1 && a11 != 0;
    v50 = v25;
    v52 = (unsigned __int16)a5;
    *v22 = (63 * a1[39]) >> 6;
    v22[1] = 1;
    v54 = a4 + 1458264;
    v53 = v21;
    v49 = (int *)(a4 + 976);
    while (1)
    {
      **(_DWORD **)(a4 + 1152) = v23;
      *(_DWORD *)(a4 + 992) = v23;
      if (v23 >= v21)
        break;
      **(_DWORD **)(a4 + 1152) = v23;
      *(_DWORD *)(a4 + 992) = v23;
      if (*(_BYTE *)(a4 + 1161))
      {
        v26 = v23 % v51 / 2;
        if (*(unsigned __int8 *)(a4 + 1007) + 2 * (v23 / v51) == 1)
          v27 = v23 & 1;
        else
          v27 = 0;
      }
      else
      {
        v27 = v23 / v56;
        v26 = v23 % v56;
      }
      *(_DWORD *)(a4 + 976) = v26;
      *(_DWORD *)(a4 + 980) = v27;
      v28 = v27 & 1;
      v29 = *(_QWORD *)(v54 + 8 * (v28 ^ 1));
      *(_QWORD *)(v11 + 32752) = v29;
      *(_QWORD *)(v11 + 32744) = *(_QWORD *)(v54 + 8 * v28);
      *(_QWORD *)(a4 + 1152) = v29 + 400 * v26;
      *(_QWORD *)(*(_QWORD *)(v11 + 32752) + 400 * v26 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 1192) + 1152)
                                                                                          + 8 * v55));
      sub_2160CBB14(*(_DWORD *)(v11 + 56), *(_QWORD *)(v11 + 32744), *(_QWORD *)(v11 + 32752), v19);
      result = sub_2160D2F10(v11, (uint64_t)v19, a10, a11);
      if ((_DWORD)result)
        return result;
      if (*(_QWORD *)(v11 + 16) - *(_QWORD *)v11 > *(int *)(v11 + 12))
        return 4294958327;
      if ((v58[54] - 26) < 0xCCu)
        return 4294958327;
      v37 = (char)v58[54] + (char)v57 + 52;
      v38 = v37 - 52 * (((20165 * v37) >> 20) + ((20165 * v37) >> 31));
      v58[55] = v37 - 52 * (((20165 * v37) >> 20) + (20165 * v37 < 0));
      if (v58[1])
        return 4294958327;
      if (v58[2] == 25)
        result = sub_2160CBFF8((uint64_t)v19);
      else
        result = v50
               ? sub_215FCF9F8((unint64_t)v19, *(double *)v30.i64, v31, v32, v33, v34, v35, v36)
               : sub_215FCF724((unint64_t)v19, v30, v31, v32, v33, v34, v35, v36);
      if ((_DWORD)result)
        return result;
      if (*(_DWORD *)(*(_QWORD *)(a4 + 1192) + 1164) <= *(_DWORD *)(a4 + 992))
        return 4294958327;
      sub_2160CBC00((uint64_t)v19, a6);
      if (v58[1])
        return 4294958327;
      v39 = (__int16)v38;
      LOBYTE(v57) = v38;
      if (v58[2] == 25)
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
      }
      else
      {
        v40 = sub_2160DD8F4((char)v38, *(char *)(*(_QWORD *)(a4 + 1016) + 56));
        v19 = v49;
        v41 = sub_2160DD8F4((char)v39, *(char *)(*(_QWORD *)(a4 + 1016) + 57));
      }
      v42 = *(_QWORD *)(a4 + 1312);
      v43 = *(_BYTE *)(*(_QWORD *)(a4 + 1016) + 3);
      v44 = *(_BYTE *)(a4 + 1007);
      v45 = *(_DWORD *)(a4 + 976) + *(_DWORD *)(v42 + 12) * *(_DWORD *)(a4 + 980);
      *(_WORD *)(*(_QWORD *)(v42 + 72) + 2 * v45) = v18;
      *(_BYTE *)(*(_QWORD *)(v42 + 112) + v45) = v39;
      *(_BYTE *)(*(_QWORD *)(v42 + 120) + v45) = v40;
      *(_BYTE *)(*(_QWORD *)(v42 + 128) + v45) = v41;
      *(_BYTE *)(*(_QWORD *)(v42 + 136) + v45) = v43;
      *(_BYTE *)(*(_QWORD *)(v42 + 144) + v45) = v44;
      *(int32x2_t *)(*(_QWORD *)(v42 + 48) + 12 * v52) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v42 + 48) + 12 * v52), (int32x2_t)(v39 | 0x100000000));
      v46 = sub_2160AC88C(v11);
      *a7 = v23;
      v47 = sub_2160CCE28(v23);
      v21 = v53;
      if (v46)
      {
        v23 = v47;
        if (v47 < v53)
          continue;
      }
      if (a8)
        *a8 = 1;
      result = 0;
      if (a9)
        *a9 = 0;
      return result;
    }
  }
  return 4294958327;
}

uint64_t sub_2160BD104(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  int *v11;
  int *v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v30;
  unsigned int v31;
  signed int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v38;
  signed int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  void *v46;
  uint64_t v47;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;

  v9 = *(_DWORD *)(a1 + 4);
  v10 = (*(_DWORD *)(a1 + 16) * v9);
  v11 = (int *)sub_2160CB5FC((void *)(4 * (int)v10));
  v12 = (int *)sub_2160CB5FC((void *)(4 * (int)v10));
  v13 = sub_2160CB5FC((void *)(4 * (int)v10));
  *(_BYTE *)(a5 + 3) = 1;
  *v11 = 0;
  *v12 = v10 - 1;
  v46 = v13;
  bzero(v13, 4 * (int)v10);
  if (a2 < 1)
  {
    v15 = 1;
  }
  else
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = a3 + 80 * v14;
      v17 = *(_DWORD *)(v16 + 8);
      v18 = *(_DWORD *)(v16 + 4) & ~(*(int *)(v16 + 4) >> 31);
      if (v18 >= (int)v10)
        v18 = v10 - 1;
      if (v17 <= v18)
        v19 = v18;
      else
        v19 = v17;
      if (v19 >= (int)v10)
        v20 = v10 - 1;
      else
        v20 = v19;
      if (v15 >= 1)
      {
        v21 = v15;
        v22 = v11;
        v23 = v12;
        while (1)
        {
          v24 = *v22;
          v25 = *v23;
          if (*v22 <= v18 && v25 >= v20)
            break;
          ++v23;
          ++v22;
          if (!--v21)
            goto LABEL_36;
        }
        if (v24 == v18 && v25 == v20)
        {
          *v22 = -1;
          *v23 = -1;
        }
        else if (v24 != v18 || v25 <= v20)
        {
          if (v24 >= v18 || v25 != v20)
          {
            v11[v15] = v20 + 1;
            v12[v15++] = *v23;
          }
          *v23 = v18 - 1;
        }
        else
        {
          *v22 = v20 + 1;
        }
      }
LABEL_36:
      ++v14;
    }
    while (v14 != a2);
  }
  v51 = v10 - 1;
  v30 = *(_QWORD *)(a1 + 40);
  v31 = *(_DWORD *)(v30 + 56) - 1;
  if (v31 >= a2)
    v31 = a2;
  if (a2 <= 0)
    v32 = 0;
  else
    v32 = v31;
  *(_BYTE *)(*(_QWORD *)(v30 + 48) + 12 * v32 + 9) = 1;
  if (v15 >= 1)
  {
    v33 = 0;
    v47 = a5 + 32;
    v34 = v15;
    v49 = v15;
    v50 = v11;
    do
    {
      v35 = v11[v33];
      v36 = v12[v33];
      if ((_DWORD)v35 != -1 && v36 != -1)
      {
        if (v36 >= (int)v10)
          v38 = v51;
        else
          v38 = v12[v33];
        if (!**(_BYTE **)(*(_QWORD *)(a1 + 40) + 144))
        {
          if (a4)
            sub_215FDA254(v11[v33], v38, v9, a4 + 32, v47);
          else
            sub_215FDA3D4(v35, v38, v9, v47);
        }
        v52 = (v38 - v35);
        if (v38 >= (int)v35)
        {
          v39 = v35;
          do
          {
            if (*(_DWORD *)(a5 + 1164) > v39)
              *(_QWORD *)(*(_QWORD *)(a5 + 1256) + 8 * v39) = *(_QWORD *)(a5 + 1232);
            v40 = *(_QWORD *)(a1 + 40);
            v41 = v39 + (*(_DWORD *)(v40 + 12) - v9) * (v39 / v9);
            *(_WORD *)(*(_QWORD *)(v40 + 72) + 2 * v41) = v32;
            *(_BYTE *)(*(_QWORD *)(v40 + 112) + v41) = 0;
            *(_BYTE *)(*(_QWORD *)(v40 + 120) + v41) = 0;
            *(_BYTE *)(*(_QWORD *)(v40 + 128) + v41) = 0;
            *(_BYTE *)(*(_QWORD *)(v40 + 136) + v41) = 0;
            *(_BYTE *)(*(_QWORD *)(v40 + 144) + v41) = 0;
            ++v39;
          }
          while (v38 + 1 != v39);
        }
        v42 = v10;
        v43 = v38 + 1;
        v44 = *(_QWORD *)(a1 + 40);
        sub_2160EC880(*(pthread_mutex_t **)(v44 + 160));
        if (v35 < v43)
          memset((void *)(*(_QWORD *)(v44 + 168) + v35), 10, v52 + 1);
        sub_2160EC88C(*(pthread_mutex_t **)(v44 + 160));
        v10 = v42;
        v34 = v49;
        v11 = v50;
      }
      ++v33;
    }
    while (v33 != v34);
  }
  j__free(v11);
  j__free(v12);
  j__free(v46);
  return 0;
}

uint64_t sub_2160BD434(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 20) - 1;
  v4 = a2;
  v5 = (int *)(v2 + 8);
  do
  {
    v6 = *v5;
    v7 = *(v5 - 1) & ~(*(v5 - 1) >> 31);
    if (v7 >= v3)
      v7 = v3;
    if (v6 <= v7)
      v6 = v7;
    if (v6 >= v3)
      v6 = v3;
    if ((v7 | v6) >= 0)
      v8 = v6 - v7 + 1;
    else
      v8 = 0;
    result = (v8 + result);
    v5 += 20;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_2160BD4A0(unsigned int **a1, unsigned int *a2, unsigned int a3, int a4, int a5, uint64_t a6, uint64_t a7, _DWORD *a8, unsigned __int8 a9, int a10, unsigned __int8 a11, char a12, char a13, int a14)
{
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  char *v21;
  size_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  char v56;
  BOOL v57;
  int v58;
  int v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  BOOL v84;
  void *v85;
  void *v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  void *v92;
  void *v93;
  unsigned int v94;
  char *v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int8x16_t *v122;
  unint64_t v123;
  BOOL v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int16x8_t *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int16x8_t *v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  char v143;
  int v144;
  char v145;
  _BYTE *v146;
  _BYTE *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  int v156[2];
  uint64_t *v157;
  int v159;
  uint64_t v160;
  int v161;

  v15 = 0;
  v16 = 0;
  v161 = 0;
  v17 = -8969;
  if (!a2 || !a1 || (int)a3 < 1 || !a6)
  {
    v21 = 0;
    goto LABEL_20;
  }
  v21 = 0;
  if (!a7)
    goto LABEL_20;
  if (!*(_QWORD *)(a6 + 40))
  {
    v16 = 0;
    v21 = 0;
    goto LABEL_15;
  }
  v159 = a5;
  v24 = 80 * a3;
  v25 = sub_2160CB5FC((void *)v24);
  v16 = v25;
  if (!v25)
  {
    v21 = 0;
    goto LABEL_17;
  }
  bzero(v25, v24);
  v21 = (char *)sub_2160CB5FC((void *)(16 * a3));
  if (!v21)
  {
LABEL_17:
    v15 = 0;
    goto LABEL_18;
  }
  v26 = **(_QWORD **)(a6 + 56);
  *(_QWORD *)v156 = *(_QWORD *)(a6 + 24);
  v160 = 0;
  if (*(_BYTE *)(a6 + 544))
    sub_2160B1B74(a6 + 164);
  if (*(_DWORD *)(*(_QWORD *)(a6 + 40) + 56) < a3)
  {
    v15 = 0;
    v17 = -666;
LABEL_19:
    a5 = v159;
    goto LABEL_20;
  }
  v36 = 0;
  v37 = 0;
  v38 = a7 + 5039776;
  v39 = a7 + 5016960;
  v40 = a7 + 5041520;
  v155 = a3;
  v41 = 8;
  do
  {
    v42 = &v16[v36];
    *v42 = 0xFFFFFFFF00000000;
    *((_DWORD *)v42 + 2) = -1;
    v42[2] = a6;
    v42[3] = a7;
    v43 = a1[v37];
    v42[4] = v43;
    if (!v43)
      goto LABEL_17;
    *((_DWORD *)v42 + 10) = a2[v37];
    *((_DWORD *)v42 + 11) = v37;
    v42[6] = 0;
    *((_BYTE *)v42 + 56) = a9;
    v44 = &v21[v41];
    *((_QWORD *)v44 - 1) = sub_2160BAD44;
    *(_QWORD *)v44 = v42;
    ++v37;
    v36 += 10;
    v41 += 16;
  }
  while (10 * a3 != v36);
  v45 = v26 + 1425544;
  v150 = v40;
  v151 = v39;
  v149 = v26;
  v153 = (_BYTE *)(*(_QWORD *)v156 + 146576);
  v154 = v26 + 1425572;
  v152 = v38;
  v46 = *a2;
  v47 = v26 + 1425504;
  v48 = sub_2160AC81C(*a1, v46, v26 + 1425504);
  if (v48)
  {
LABEL_38:
    v17 = v48;
    v15 = 0;
    goto LABEL_19;
  }
  if ((a9 & 0xFD) == 1)
  {
    v17 = sub_2160DABCC(v47, *(unsigned int **)v156, (void *)(v26 + 1425544), a9, &v161, 0, (int *)(a6 + 160), a12 != 0, 0);
    v49 = v161;
  }
  else
  {
    v17 = sub_2160DABCC(v47, *(unsigned int **)v156, (void *)(v26 + 1425544), a9, &v161, 0, 0, a12 != 0, 0);
    v49 = 0;
    v161 = 0;
  }
  *(_DWORD *)(a6 + 836) = v49;
  a5 = v159;
  if (v17)
  {
LABEL_15:
    v15 = 0;
    goto LABEL_20;
  }
  if (!*(_DWORD *)(v154 + 28))
  {
    v48 = sub_2160AC8EC(*(unsigned int **)v156, *(_DWORD *)(*(_QWORD *)v156 + 146580), &v160);
    if (v48)
      goto LABEL_38;
    *(_DWORD *)(v16[2] + 552) = a3;
    *(_QWORD *)(v16[2] + 560) = *(_QWORD *)(a6 + 560);
    *(_QWORD *)(v16[2] + 568) = *(_QWORD *)(a6 + 568);
    fflush((FILE *)*MEMORY[0x24BDAC8D8]);
    *(_DWORD *)(v152 + 20) = 1;
    v50 = (uint64_t *)(a6 + 88);
    v48 = sub_2160AF218(v160, v45, v150, v151, (uint64_t *)(a6 + 88), v159, a9, v161, 0, a4);
    if (v48)
      goto LABEL_38;
    if (!*(_BYTE *)(v160 + 1336) && *(_BYTE *)(v160 + 1337) && !*(_BYTE *)(v154 + 4))
      *(_DWORD *)(*(_QWORD *)(a6 + 40) + 216) = 0;
    v51 = *v50;
    if (!*v50)
      goto LABEL_60;
    v157 = (uint64_t *)(a6 + 88);
    v52 = *(_QWORD *)(a6 + 40);
    if (*(_DWORD *)(v52 + 216))
    {
      if (*(_BYTE *)(v51 + 34))
        v51 = *(_QWORD *)(v51 + 1352);
      *(_QWORD *)(v52 + 176) = *(_QWORD *)(v51 + 192);
      *(_DWORD *)(*(_QWORD *)(a6 + 40) + 184) = *(_DWORD *)(v51 + 208);
      if (!*(_QWORD *)(a6 + 88))
      {
LABEL_60:
        v15 = 0;
        goto LABEL_61;
      }
    }
    *a8 = *(unsigned __int8 *)(v154 + 4);
    if (*(_BYTE *)(v154 + 4) == 1)
      v53 = 0;
    else
      v53 = a11;
    v54 = *(_QWORD *)(a6 + 40);
    if (a14 <= 0x10000 && v53 && *(int *)(v54 + 184) >= 1)
    {
      *(_BYTE *)(v54 + 224) = 1;
      v55 = a12;
      *(_BYTE *)(*(_QWORD *)(a6 + 40) + 225) = a12;
      v56 = a13;
      v57 = a13 == 1;
    }
    else
    {
      v57 = 0;
      *(_BYTE *)(v54 + 224) = 0;
      *(_BYTE *)(*(_QWORD *)(a6 + 40) + 225) = 0;
      v56 = a13;
      v55 = a12;
    }
    *(_BYTE *)(*(_QWORD *)(a6 + 40) + 226) = v57;
    *(_BYTE *)(*(_QWORD *)(a6 + 88) + 1304) = v53;
    *(_BYTE *)(*(_QWORD *)(a6 + 88) + 1305) = v55;
    *(_BYTE *)(*(_QWORD *)(a6 + 88) + 1306) = v56;
    *(_DWORD *)(*(_QWORD *)(a6 + 88) + 1384) = a14;
    v58 = *(_DWORD *)(*(_QWORD *)(a6 + 88) + 132) >> 4;
    v59 = *(_DWORD *)(a6 + 4) * v58;
    *(_DWORD *)(a6 + 16) = v58;
    *(_DWORD *)(a6 + 20) = v59;
    v60 = *(_QWORD *)(a6 + 40);
    v61 = *(unsigned int *)(v60 + 20);
    sub_2160EC880(*(pthread_mutex_t **)(v60 + 160));
    if ((_DWORD)v61)
      bzero(*(void **)(v60 + 168), v61);
    sub_2160EC88C(*(pthread_mutex_t **)(v60 + 160));
    *(_DWORD *)(*(_QWORD *)(a6 + 88) + 1264) = a4;
    sub_2160EC244(*(_QWORD *)(a6 + 80), (uint64_t)v21, a3);
    if (v159 == 1)
    {
LABEL_72:
      v15 = 0;
    }
    else
    {
      v62 = a3;
      v63 = (unsigned int *)v16;
      while (1)
      {
        v64 = *v63;
        v63 += 20;
        v15 = v64;
        if (v64)
          break;
        if (!--v62)
          goto LABEL_72;
      }
    }
    v65 = *(unsigned __int8 *)(a6 + 832);
    v66 = v161;
    v67 = v65 == 3 && v161 == 0;
    v68 = v65 | 2;
    if (!v67 && v68 == 3)
    {
      v72 = v15;
      v73 = v15;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a6 + 88) + 1378) = 0;
      v70 = sub_2160BD434((uint64_t)v16, a3);
      v71 = *(_DWORD *)(a6 + 20);
      if (v15 || (v72 = 0, v73 = 0, v70 != v71))
      {
        if (v70 > v71)
        {
LABEL_83:
          v17 = -8969;
          goto LABEL_19;
        }
        sub_2160BD104(a6, a3, (uint64_t)v16, *(_QWORD *)(v152 + 864), *(_QWORD *)(a6 + 88));
        v73 = 0;
        if (a4)
          v72 = 0;
        else
          v72 = v15;
        *(_BYTE *)(*(_QWORD *)(a6 + 88) + 1378) = 1;
        v66 = v161;
      }
    }
    sub_2160E99EC(*(_QWORD *)(a6 + 40), (_DWORD *)(*(_QWORD *)(a6 + 88) + 32), *(_QWORD *)(a6 + 88) + 1152, *(_QWORD *)(a6 + 80), a9, v66);
    sub_2160E7ADC(*(_QWORD *)(a6 + 40));
    if (!v53)
      goto LABEL_106;
    v74 = *v157;
    v75 = *(void **)(*v157 + 1392);
    if (!v75)
    {
      v75 = sub_2160CB5D4(*(unsigned int *)(a6 + 20));
      if (!v75)
        goto LABEL_145;
      v74 = *v157;
    }
    *(_QWORD *)(v74 + 1392) = *(_QWORD *)(*(_QWORD *)(a6 + 40) + 112);
    *(_QWORD *)(*(_QWORD *)(a6 + 40) + 112) = v75;
    v76 = *(_QWORD *)(a6 + 88);
    v77 = *(void **)(v76 + 1400);
    if (!v77)
    {
      v77 = sub_2160CB5D4(*(unsigned int *)(a6 + 20));
      if (!v77)
        goto LABEL_145;
      v76 = *v157;
    }
    *(_QWORD *)(v76 + 1400) = *(_QWORD *)(*(_QWORD *)(a6 + 40) + 120);
    *(_QWORD *)(*(_QWORD *)(a6 + 40) + 120) = v77;
    v78 = *(_QWORD *)(a6 + 88);
    v79 = *(void **)(v78 + 1408);
    if (!v79)
    {
      v79 = sub_2160CB5D4(*(unsigned int *)(a6 + 20));
      if (!v79)
        goto LABEL_145;
      v78 = *v157;
    }
    *(_QWORD *)(v78 + 1408) = *(_QWORD *)(*(_QWORD *)(a6 + 40) + 128);
    *(_QWORD *)(*(_QWORD *)(a6 + 40) + 128) = v79;
    v80 = *(_QWORD *)(a6 + 88);
    v81 = *(void **)(v80 + 1416);
    if (!v81)
    {
      v81 = sub_2160CB5D4(*(unsigned int *)(a6 + 20));
      if (!v81)
        goto LABEL_145;
      v80 = *v157;
    }
    *(_QWORD *)(v80 + 1416) = *(_QWORD *)(*(_QWORD *)(a6 + 40) + 136);
    *(_QWORD *)(*(_QWORD *)(a6 + 40) + 136) = v81;
    v82 = *(_QWORD *)(a6 + 88);
    v83 = *(void **)(v82 + 1424);
    if (v83)
    {
LABEL_105:
      *(_QWORD *)(v82 + 1424) = *(_QWORD *)(*(_QWORD *)(a6 + 40) + 72);
      *(_QWORD *)(*(_QWORD *)(a6 + 40) + 72) = v83;
LABEL_106:
      if (v73)
        v84 = v159 == 1;
      else
        v84 = 1;
      if (v84)
        v15 = v72;
      else
        v15 = v73;
      if (*(_DWORD *)(a6 + 108))
      {
        if (*(_DWORD *)(a6 + 128) < a3)
        {
          v85 = *(void **)(a6 + 120);
          if (v85)
            j__free(v85);
          v86 = sub_2160CB5FC((void *)(2 * a3));
          *(_QWORD *)(a6 + 120) = v86;
          if (!v86)
            goto LABEL_18;
          *(_DWORD *)(a6 + 128) = a3;
        }
        v87 = 0;
        *(_DWORD *)(a6 + 112) = 0;
        v88 = v16 + 6;
        v89 = a3;
        v90 = v16 + 6;
        do
        {
          v91 = *v90;
          v90 += 20;
          if (v91)
          {
            *(_WORD *)(*(_QWORD *)(a6 + 120) + 2 * v87) = *((_DWORD *)v88 - 11);
            v87 = *(_DWORD *)(a6 + 112) + 1;
            *(_DWORD *)(a6 + 112) = v87;
          }
          v88 = v90;
          --v89;
        }
        while (v89);
      }
      if (!*(_DWORD *)(a6 + 132))
        goto LABEL_132;
      if (*(_DWORD *)(a6 + 152) >= a3)
      {
LABEL_128:
        v94 = 0;
        *(_DWORD *)(a6 + 136) = 0;
        v95 = (char *)v16 + 52;
        v96 = (char *)v16 + 52;
        do
        {
          v97 = *(_DWORD *)v96;
          v96 += 80;
          if (v97)
          {
            *(_WORD *)(*(_QWORD *)(a6 + 144) + 2 * v94) = *((_DWORD *)v95 - 12);
            v94 = *(_DWORD *)(a6 + 136) + 1;
            *(_DWORD *)(a6 + 136) = v94;
          }
          v95 = v96;
          --v155;
        }
        while (v155);
LABEL_132:
        if (*(_BYTE *)(*v157 + 1372))
        {
          *(_QWORD *)(v152 + 864) = *v157;
          v98 = *v157;
          if (*(_BYTE *)(*v157 + 1372))
          {
            if (!*(_BYTE *)(v98 + 3))
            {
              v100 = *(_QWORD *)(v98 + 64);
              v99 = *(_QWORD *)(v98 + 72);
              v101 = *(_DWORD *)(v98 + 168);
              v102 = *(int *)(v98 + 164);
              if (*(_BYTE *)(v98 + 37))
                v103 = *(unsigned int *)(v98 + 168);
              else
                v103 = 0;
              v104 = *(_DWORD *)(v98 + 184);
              v105 = *(int *)(v98 + 180);
              if (*(_BYTE *)(v98 + 37))
                v106 = *(unsigned int *)(v98 + 184);
              else
                v106 = 0;
              v107 = *(_BYTE *)(v98 + 1362) != 0;
              v108 = v101 << v107;
              v109 = *(_DWORD *)(v98 + 132);
              v110 = *(_DWORD *)(v98 + 148);
              v111 = v101 << v107;
              if (v109 <= 0)
              {
                v112 = (int8x16_t *)(v100 + v103);
              }
              else
              {
                v112 = (int8x16_t *)(v100 + v103);
                do
                {
                  v113 = (int8x16_t *)((char *)v112 + v102);
                  v114 = vzip1q_s8(*v112, *v112);
                  v115 = vqtbl1q_s8(vzip1q_s8(v114, v114), (int8x16_t)xmmword_2160EE800);
                  v112[-2] = v115;
                  v112[-1] = v115;
                  v116 = vzip2q_s8(*(int8x16_t *)((char *)&v112[-1] + v102), *(int8x16_t *)((char *)&v112[-1] + v102));
                  v117 = vqtbl1q_s8(vzip2q_s8(v116, v116), (int8x16_t)xmmword_2160F1A00);
                  *v113 = v117;
                  v113[1] = v117;
                  v112 = (int8x16_t *)((char *)v112 + v108);
                  --v109;
                }
                while (v109);
              }
              v118 = 0;
              v119 = v104 << v107;
              v120 = (uint64_t)v112[-2].i64 - v108;
              v121 = (int)v102 + 48;
              v122 = v112 - 2;
              do
              {
                if ((int)v102 >= -63)
                {
                  v123 = 0;
                  do
                  {
                    v122[v123 / 0x10] = *(int8x16_t *)(v120 + v123);
                    v124 = (uint64_t)v123 < v121;
                    v123 += 16;
                  }
                  while (v124);
                }
                ++v118;
                v122 = (int8x16_t *)((char *)v122 + v111);
              }
              while (v118 != 20);
              v125 = 0;
              v126 = v100 + v103 - 32;
              v127 = v103 - v111 + v100 - 32;
              do
              {
                if ((int)v102 >= -63)
                {
                  v128 = 0;
                  do
                  {
                    *(_OWORD *)(v127 + v128) = *(_OWORD *)(v126 + v128);
                    v124 = v128 < v121;
                    v128 += 16;
                  }
                  while (v124);
                }
                ++v125;
                v127 -= v111;
              }
              while (v125 != 20);
              v129 = v119;
              if (v110 <= 0)
              {
                v130 = (int16x8_t *)(v99 + v106);
              }
              else
              {
                v130 = (int16x8_t *)(v99 + v106);
                do
                {
                  v130[-1] = (int16x8_t)vqtbl1q_s8((int8x16_t)vzip1q_s16(*v130, *v130), (int8x16_t)xmmword_2160EE800);
                  *(int8x16_t *)((char *)v130 + v105) = vqtbl1q_s8((int8x16_t)vzip2q_s16(*(int16x8_t *)((char *)&v130[-1] + v105), *(int16x8_t *)((char *)&v130[-1] + v105)), (int8x16_t)xmmword_2160F1A00);
                  v130 = (int16x8_t *)((char *)v130 + v119);
                  --v110;
                }
                while (v110);
              }
              v131 = 0;
              v132 = (uint64_t)v130[-1].i64 - v119;
              v133 = (int)v105 + 16;
              v134 = v130 - 1;
              do
              {
                if ((int)v105 >= -31)
                {
                  v135 = 0;
                  do
                  {
                    v134[v135 / 0x10] = *(int16x8_t *)(v132 + v135);
                    v124 = (uint64_t)v135 < v133;
                    v135 += 16;
                  }
                  while (v124);
                }
                ++v131;
                v134 = (int16x8_t *)((char *)v134 + v129);
              }
              while (v131 != 8);
              v136 = 0;
              v137 = v99 + v106 - 16;
              v138 = v106 - v129 + v99 - 16;
              do
              {
                if ((int)v105 >= -31)
                {
                  v139 = 0;
                  do
                  {
                    *(_OWORD *)(v138 + v139) = *(_OWORD *)(v137 + v139);
                    v124 = v139 < v133;
                    v139 += 16;
                  }
                  while (v124);
                }
                ++v136;
                v138 -= v129;
              }
              while (v136 != 8);
            }
          }
        }
        if (*(_DWORD *)(*(_QWORD *)v152 + 44))
        {
          v140 = sub_2160AE5BC(v149 + 1428092, *(_DWORD *)v154, v160, v151, *v157);
          if (v140)
            goto LABEL_184;
        }
        v141 = *(unsigned __int8 *)(a6 + 832);
        if ((v141 == 3 || v141 == 1) && v161)
          *(_BYTE *)(*v157 + 1372) = 0;
        v142 = *(_QWORD *)(*v157 + 1352);
        *(_BYTE *)(*v157 + 1376) = 1;
        if (v142 && *(_BYTE *)(v142 + 36))
          *(_BYTE *)(v142 + 1376) = 1;
        if (*(_BYTE *)(v154 + 2681))
          *(_DWORD *)(*(_QWORD *)v152 + 40) = 0;
        v140 = sub_2160AE470(v151);
        if (v140)
          goto LABEL_184;
        v143 = *(_BYTE *)(*v157 + 1371);
        if (*v153)
        {
          v144 = v153[2];
          if (!*(_BYTE *)(*v157 + 1371))
          {
            if (v153[2])
            {
              if (!*(_BYTE *)(v152 + 1898))
                goto LABEL_83;
              v143 = 1;
            }
            else
            {
              v143 = 0;
            }
LABEL_193:
            v146 = (_BYTE *)*v157;
            v146[1307] = *v153;
            v146[1308] = v153[1];
            v146[1309] = v153[2];
            v146[1310] = v153[3];
            v147 = (_BYTE *)*v157;
            v148 = *(unsigned __int8 *)(v152 + 1899);
            v147[1311] = *(_BYTE *)(v152 + 1898);
            v147[1312] = v148;
            v147[1313] = v148 & 0xF;
            v147[1314] = v148 >> 4;
            if ((v143 & 1) != 0 || *(_BYTE *)(v152 + 1898))
            {
              *(_WORD *)(*v157 + 1316) = *(_WORD *)(v152 + 1896);
              if (!*(_QWORD *)(v152 + 1888))
              {
                v140 = sub_2160CE760((uint64_t *)(v152 + 1888));
                if (v140)
                {
LABEL_184:
                  v17 = v140;
                  goto LABEL_19;
                }
              }
            }
LABEL_61:
            v17 = 0;
            goto LABEL_19;
          }
          *(_WORD *)(v152 + 1896) = *(_DWORD *)(v154 + 8);
          if (v144)
          {
            v143 = 1;
            *(_BYTE *)(v152 + 1898) = 1;
            v145 = v153[1];
LABEL_192:
            *(_BYTE *)(v152 + 1899) = v145;
            goto LABEL_193;
          }
        }
        else
        {
          if (!*(_BYTE *)(*v157 + 1371))
            goto LABEL_193;
          *(_WORD *)(v152 + 1896) = *(_DWORD *)(v154 + 8);
        }
        v145 = 0;
        v143 = 0;
        *(_BYTE *)(v152 + 1898) = 0;
        goto LABEL_192;
      }
      v92 = *(void **)(a6 + 144);
      if (v92)
        j__free(v92);
      v93 = sub_2160CB5FC((void *)(2 * a3));
      *(_QWORD *)(a6 + 144) = v93;
      if (v93)
      {
        *(_DWORD *)(a6 + 152) = a3;
        goto LABEL_128;
      }
LABEL_18:
      v17 = -108;
      goto LABEL_19;
    }
    v83 = sub_2160CB5D4(2 * *(unsigned int *)(a6 + 20));
    if (v83)
    {
      v82 = *v157;
      goto LABEL_105;
    }
LABEL_145:
    v17 = -108;
    v15 = v72;
    goto LABEL_19;
  }
  v15 = 0;
  v17 = -8969;
LABEL_20:
  if (*(_BYTE *)(a6 + 544))
  {
    v27 = a5;
    v28 = (float)(1000000.0 / (float)*(unsigned __int8 *)(a6 + 544));
    if ((byte_254E17434 & 1) == 0)
    {
      nullsub_1(a6 + 164, a6 + 392);
      byte_254E17434 = 1;
    }
    v29 = *(unsigned __int8 **)(a6 + 88);
    if (v29[1372])
    {
      v30 = sub_2160B1E14(a6 + 164, v29[1369]);
      v29 = *(unsigned __int8 **)(a6 + 88);
    }
    else
    {
      v30 = 1000;
    }
    v31 = v29[1371];
    v32 = dword_254E17438++;
    sub_2160B24BC((int *)(a6 + 392), v30, v28, v31, v32);
    nullsub_1(a6 + 164, a6 + 392);
    a5 = v27;
  }
  if (v15)
    v33 = a5 == 1;
  else
    v33 = 1;
  if (v33)
    v34 = v17;
  else
    v34 = v15;
  j__free(v16);
  j__free(v21);
  return v34;
}

uint64_t sub_2160BE194(unsigned int *a1, unsigned int a2, int *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  int *v8;
  _BYTE v9[40];
  _DWORD __src[470];
  uint64_t v11;

  result = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      result = sub_2160AC81C(a1, a2, (uint64_t)v9);
      if (!(_DWORD)result)
      {
        result = sub_2160D7CF4((uint64_t)v9, (char *)__src);
        if (!(_DWORD)result)
        {
          v6 = *a3;
          if (*a3 < 1)
          {
LABEL_14:
            memcpy(&a3[470 * v6 + 3], __src, 0x758uLL);
            result = 0;
            ++*a3;
          }
          else
          {
            v7 = *a3;
            v8 = a3;
            do
            {
              if (__src[332] != v8[335]
                || __src[333] != v8[336]
                || LOBYTE(__src[334]) != *((unsigned __int8 *)v8 + 1348))
              {
                return 0;
              }
              if (*((unsigned __int8 *)v8 + 27) == HIBYTE(__src[3]))
              {
                memcpy(v8 + 3, __src, 0x758uLL);
                return 0;
              }
              v8 += 470;
              --v7;
            }
            while (v7);
            if (v6 <= 31)
              goto LABEL_14;
            return 4294967246;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2160BE2C8(unsigned int *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _BYTE v9[40];
  char __src[1880];
  uint64_t v11;

  result = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      result = sub_2160AC81C(a1, a2, (uint64_t)v9);
      if (!(_DWORD)result)
      {
        result = sub_2160D7CF4((uint64_t)v9, __src);
        if (!(_DWORD)result)
        {
          v6 = *a3;
          if ((int)*a3 < 1)
          {
LABEL_11:
            memcpy(&a3[470 * v6 + 3], __src, 0x758uLL);
            ++*a3;
LABEL_13:
            LODWORD(result) = sub_2160DA298();
            if ((_DWORD)result == -12346)
              return 0;
            else
              return result;
          }
          else
          {
            v7 = (unsigned __int8 *)a3 + 27;
            v8 = *a3;
            do
            {
              if (*v7 == __src[15])
              {
                memcpy(v7 - 15, __src, 0x758uLL);
                goto LABEL_13;
              }
              v7 += 1880;
              --v8;
            }
            while (v8);
            if (v6 <= 31)
              goto LABEL_11;
            return 4294967246;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2160BE3DC()
{
  return 0;
}

uint64_t sub_2160BE3E4(unsigned int *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _BYTE v9[40];
  _DWORD __src[84];
  uint64_t v11;

  result = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      result = sub_2160AC81C(a1, a2, (uint64_t)v9);
      if (!(_DWORD)result)
      {
        result = sub_2160DA2A0((uint64_t)v9, a3, (uint64_t)__src);
        if (!(_DWORD)result)
        {
          v6 = a3[1];
          if (v6 < 1)
          {
LABEL_11:
            memcpy(&a3[84 * v6 + 15044], __src, 0x150uLL);
            result = 0;
            ++a3[1];
          }
          else
          {
            v7 = a3 + 15044;
            v8 = a3[1];
            do
            {
              if (*v7 == __src[0])
              {
                memcpy(v7, __src, 0x150uLL);
                return 0;
              }
              v7 += 84;
              --v8;
            }
            while (v8);
            if (v6 <= 255)
              goto LABEL_11;
            return 4294967246;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2160BE4F0(unsigned int *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  _BYTE v6[40];

  result = 0;
  if (a1 && a2)
  {
    result = sub_2160AC81C(a1, a2, (uint64_t)v6);
    if (!(_DWORD)result)
      return sub_2160DD684((uint64_t)v6, a3);
  }
  return result;
}

uint64_t sub_2160BE540(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v5[40];
  char v6[1880];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  result = sub_2160AC81C(a1, a2, (uint64_t)v5);
  if (!(_DWORD)result)
  {
    result = sub_2160D7CF4((uint64_t)v5, v6);
    if (!(_DWORD)result)
      return sub_2160BE5BC((uint64_t)v6, a3, 1);
  }
  return result;
}

uint64_t sub_2160BE5BC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v3 = 4294958327;
  if (!a1 || !a2)
    return v3;
  v4 = 16 * *(_DWORD *)(a1 + 1328) + 16;
  *(_DWORD *)a2 = v4;
  if (!a3)
  {
    v6 = 16 * *(_DWORD *)(a1 + 1332) + 16;
    *(_DWORD *)(a2 + 4) = v6;
    v7 = *(unsigned __int8 *)(a1 + 1339);
    if (*(_BYTE *)(a1 + 1339))
    {
      v7 = 2 * *(_DWORD *)(a1 + 1340);
      *(_DWORD *)(a2 + 8) = v7;
      v4 -= 2 * *(_DWORD *)(a1 + 1344);
      *(_DWORD *)(a2 + 12) = v4;
      v9 = 2 * *(_DWORD *)(a1 + 1348);
      *(_DWORD *)(a2 + 16) = v9;
      v6 -= 2 * *(_DWORD *)(a1 + 1352);
      goto LABEL_9;
    }
LABEL_8:
    v9 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v4;
    *(_DWORD *)(a2 + 16) = 0;
    goto LABEL_9;
  }
  v5 = 32 - 16 * *(unsigned __int8 *)(a1 + 1336);
  v6 = v5 + v5 * *(_DWORD *)(a1 + 1332);
  *(_DWORD *)(a2 + 4) = v6;
  v7 = *(unsigned __int8 *)(a1 + 1339);
  if (!*(_BYTE *)(a1 + 1339))
    goto LABEL_8;
  v8 = 4 - 2 * *(unsigned __int8 *)(a1 + 1336);
  v7 = 2 * *(_DWORD *)(a1 + 1340);
  *(_DWORD *)(a2 + 8) = v7;
  v4 -= 2 * *(_DWORD *)(a1 + 1344);
  *(_DWORD *)(a2 + 12) = v4;
  v9 = *(_DWORD *)(a1 + 1348) * v8;
  *(_DWORD *)(a2 + 16) = v9;
  v6 -= *(_DWORD *)(a1 + 1352) * v8;
LABEL_9:
  *(_DWORD *)(a2 + 20) = v6;
  *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 1336);
  *(_DWORD *)(a2 + 28) = *(unsigned __int8 *)(a1 + 1337);
  *(_DWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_2160F4880;
  *(_OWORD *)(a2 + 48) = xmmword_2160F4890;
  if (*(_BYTE *)(a1 + 1356))
  {
    if (*(_BYTE *)(a1 + 1360))
    {
      v10 = *(_DWORD *)(a1 + 1364);
      *(_DWORD *)(a2 + 56) = v10;
      if (v10 == 255)
      {
        *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 1368);
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 1372);
      }
    }
    if (*(_BYTE *)(a1 + 1378))
    {
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 1380);
      *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 1384);
      if (*(_BYTE *)(a1 + 1385))
      {
        *(_DWORD *)(a2 + 40) = 1;
        *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 1388);
        *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 1392);
        *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 1396);
      }
    }
  }
  if (v7 < 0 || v4 < 0 || (v6 | v9) < 0 || v6 < v9)
    return 4294958327;
  else
    return 0;
}

uint64_t sub_2160BE74C()
{
  unsigned int *v0;
  unsigned int v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[27];
  int v12;
  int v13;
  int v14;
  _BYTE v15[1880];
  char v16[1880];
  uint64_t v17;

  v0 = (unsigned int *)MEMORY[0x24BDAC7A8]();
  v17 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v14 = 0;
  if (!v3)
    return 4294958327;
  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  result = sub_2160AC81C(v0, v1, (uint64_t)v11);
  if (!(_DWORD)result)
  {
    result = sub_2160D7CF4((uint64_t)v11, v16);
    if (!(_DWORD)result)
    {
      *v7 = v16[1404];
      *v6 = v16[1408];
      memcpy(v15, v16, sizeof(v15));
      v12 = 1;
      result = sub_2160DA298();
      if (!(_DWORD)result || (_DWORD)result == -12346)
      {
        *v8 = 0;
        return sub_2160BE5BC((uint64_t)v16, v9, 1);
      }
    }
  }
  return result;
}

uint64_t sub_2160BE870(unsigned int **a1, unsigned int *a2, signed int a3, int a4, int a5, uint64_t a6, uint64_t a7, _DWORD *a8, unsigned __int8 a9, int a10, unsigned __int8 a11, char a12, char a13, int a14)
{
  if (a3 < 1)
    return 0;
  *(_BYTE *)(a6 + 832) = a9;
  return sub_2160BD4A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_2160BE8B0(uint64_t result)
{
  *(_QWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_2160BE8C0(uint64_t a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      j__free(v2);
    *(_QWORD *)(a1 + 40) = 0;
    v3 = *(void **)(a1 + 48);
    if (v3)
      j__free(v3);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

uint64_t sub_2160BE900(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v5;
  void *v6;
  uint64_t result;

  v2 = a1 + 36;
  if (a2 <= 0)
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(a1 + 44) = 0;
    result = 4294958327;
    *(_DWORD *)(v2 + 16) = 0;
  }
  else if (*(_DWORD *)v2 >= a2)
  {
    return 0;
  }
  else
  {
    j__free(*(void **)(a1 + 40));
    j__free(*(void **)(a1 + 48));
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v5 = sub_2160CB5D4(4 * a2);
    *(_QWORD *)(a1 + 40) = v5;
    if (v5 && (v6 = sub_2160CB5D4(8 * a2), (*(_QWORD *)(a1 + 48) = v6) != 0))
    {
      result = 0;
      *(_DWORD *)v2 = a2;
    }
    else
    {
      return 4294967188;
    }
  }
  return result;
}

uint64_t sub_2160BE9A4(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  void *v14;
  uint64_t v15;
  void *v17;
  uint64_t **v18;
  void *v19;

  *(_DWORD *)(a1 + 52) = a2;
  v3 = sub_2160CB5FC((void *)(4 * (a2 + 1)));
  *(_QWORD *)(a1 + 64) = v3;
  if (!v3)
    return 4294967188;
  v4 = *(int *)(a1 + 52);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v5) = 0;
      v4 = *(int *)(a1 + 52);
    }
    while (v5++ < v4);
  }
  v7 = sub_2160CB5FC((void *)(8 * v4));
  *(_QWORD *)(a1 + 56) = v7;
  if (!v7)
    return 4294967188;
  if (*(int *)(a1 + 52) < 1)
    return 0;
  v8 = 0;
  while (1)
  {
    v9 = *(_DWORD *)(a1 + 4);
    v10 = sub_2160CB5E8(0x164150uLL);
    v11 = (uint64_t)v10;
    if (!v10)
      goto LABEL_22;
    v12 = v10 + 364561;
    v13 = 2 * v9 + 2;
    v10[364561] = v13;
    *((_QWORD *)v10 + 182283) = sub_2160CB5E8(400 * v13);
    v14 = sub_2160CB5E8(400 * *v12);
    *(_QWORD *)(v11 + 1458272) = v14;
    v15 = *(_QWORD *)(v11 + 1458264);
    if (!v15 || v14 == 0)
    {
LABEL_22:
      sub_2160BEF50(v11);
      return 4294967188;
    }
    *(_QWORD *)(v11 + 1458248) = v15;
    *(_QWORD *)(v11 + 1458256) = v14;
    v17 = sub_2160CB618(1280);
    if (v17)
      *(_QWORD *)(v11 + 1040) = v17;
    else
      j__free(*(void **)(v11 + 1040));
    *(_QWORD *)(v11 + 1240) = v11 + 1457152;
    *(_QWORD *)(v11 + 1248) = v11 + 1457218;
    *(_QWORD *)(v11 + 1256) = v11 + 1457284;
    *(_QWORD *)(v11 + 1264) = v11 + 1457350;
    *(_QWORD *)(v11 + 1280) = v11 + 1457432;
    *(_QWORD *)(v11 + 1288) = v11 + 1458080;
    *(_QWORD *)(v11 + 1296) = v11 + 1458161;
    if (*(_QWORD *)(v11 + 1176) || *(_QWORD *)(v11 + 1184))
      return 4294958327;
    v18 = sub_215FC1334();
    *(_QWORD *)(v11 + 1176) = v18;
    if (!v18)
      return 4294967188;
    v19 = sub_2160CB5E8(0x3A8uLL);
    *(_QWORD *)(v11 + 1184) = v19;
    if (!v19)
      return 4294967188;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8++) = v11;
    if (v8 >= *(int *)(a1 + 52))
      return 0;
  }
}

uint64_t sub_2160BEB94(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int *a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  pthread_mutex_t *v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  int v28;

  v15 = *a4;
  v16 = sub_2160CB5E8(0x358uLL);
  v17 = (uint64_t)v16;
  if (!v16)
    goto LABEL_18;
  v16[210] = a4[2];
  v16[211] = a4[7];
  v16[8] = 0;
  *((_QWORD *)v16 + 3) = a2;
  v18 = *(_DWORD *)(a2 + 1340) + 1;
  v16[1] = v18;
  v19 = 2 - *(unsigned __int8 *)(a2 + 1348) + (2 - *(unsigned __int8 *)(a2 + 1348)) * *(_DWORD *)(a2 + 1344);
  v16[2] = v19;
  v20 = *(_DWORD *)(a2 + 1344) + 1;
  v16[3] = v19 * v18;
  v16[4] = v20;
  v21 = sub_2160CB5E8(0x110uLL);
  *(_QWORD *)(v17 + 40) = v21;
  if (!v21)
    goto LABEL_18;
  v22 = sub_2160E7960((uint64_t)v21, *(_DWORD *)(v17 + 4), *(_DWORD *)(v17 + 8));
  if ((_DWORD)v22)
  {
LABEL_19:
    sub_2160BEDA8(v17);
    v17 = 0;
    goto LABEL_20;
  }
  *(_DWORD *)(*(_QWORD *)(v17 + 40) + 268) = *(_DWORD *)(a6 + 5041852);
  v23 = sub_2160EC80C();
  *(_QWORD *)(v17 + 72) = v23;
  if (!v23 || *(_DWORD *)(v17 + 840) == -4 && (v24 = sub_2160EC0A4(v15, a8), (*(_QWORD *)(v17 + 80) = v24) == 0))
  {
LABEL_18:
    v22 = 4294967188;
    goto LABEL_19;
  }
  v22 = sub_2160BE9A4(v17, v15);
  if ((_DWORD)v22)
    goto LABEL_19;
  *(_DWORD *)v17 = 0;
  if (sub_2160C5BC0(a3))
    *(_DWORD *)v17 = 0;
  *(_DWORD *)(v17 + 108) = sub_2160C5BC8(a3);
  *(_DWORD *)(v17 + 112) = 0;
  *(_DWORD *)(v17 + 128) = 0;
  *(_QWORD *)(v17 + 120) = 0;
  *(_DWORD *)(v17 + 132) = sub_2160C5BD0(a3);
  *(_DWORD *)(v17 + 136) = 0;
  *(_QWORD *)(v17 + 144) = 0;
  *(_DWORD *)(v17 + 152) = 0;
  *(_DWORD *)(v17 + 156) = a5;
  if (a4[10] == -2)
    v25 = 1;
  else
    v25 = sub_2160C5BD8(a3);
  *(_DWORD *)(v17 + 48) = v25;
  v26 = sub_2160CB5E8(1168 * (*(_DWORD *)(v17 + 8) * *(_DWORD *)(v17 + 4)));
  *(_QWORD *)(v17 + 560) = v26;
  if (!v26)
    goto LABEL_18;
  v27 = sub_2160CB5E8(48 * (*(_DWORD *)(v17 + 4) + 1));
  *(_QWORD *)(v17 + 568) = v27;
  if (!v27)
    goto LABEL_18;
  if (a4[2] == -4)
  {
    v28 = dword_254E1743C++;
    sub_2160EBE84((_QWORD *)(v17 + 576), (uint64_t)sub_2160BA4A4, v17, v28, 2u, a8);
  }
  v22 = 0;
LABEL_20:
  *a1 = v17;
  return v22;
}

uint64_t sub_2160BEDA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      sub_2160E9A74(v2);
      j__free(*(void **)(a1 + 40));
      *(_QWORD *)(a1 + 40) = 0;
    }
    v3 = *(_QWORD *)(a1 + 848);
    if (v3)
    {
      sub_2160E9A74(v3);
      j__free(*(void **)(a1 + 848));
      *(_QWORD *)(a1 + 848) = 0;
    }
    sub_2160BEEA8(a1);
    sub_2160EC854(*(pthread_mutex_t **)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
    if (*(_DWORD *)(a1 + 840) == -4)
    {
      sub_2160EC1BC(*(unsigned int **)(a1 + 80));
      *(_QWORD *)(a1 + 80) = 0;
    }
    v4 = *(void **)(a1 + 120);
    if (v4)
    {
      if (!*(_DWORD *)(a1 + 108))
        goto LABEL_18;
      j__free(v4);
      *(_QWORD *)(a1 + 120) = 0;
      *(_DWORD *)(a1 + 128) = 0;
    }
    v5 = *(void **)(a1 + 144);
    if (!v5)
    {
LABEL_14:
      if (*(_DWORD *)(a1 + 840) == -4)
        sub_2160EBFAC(a1 + 576);
      j__free(*(void **)(a1 + 560));
      *(_QWORD *)(a1 + 560) = 0;
      j__free(*(void **)(a1 + 568));
      v6 = 0;
      *(_QWORD *)(a1 + 568) = 0;
      goto LABEL_19;
    }
    if (*(_DWORD *)(a1 + 132))
    {
      j__free(v5);
      *(_QWORD *)(a1 + 144) = 0;
      *(_DWORD *)(a1 + 152) = 0;
      goto LABEL_14;
    }
LABEL_18:
    v6 = 4294958327;
LABEL_19:
    j__free((void *)a1);
    return v6;
  }
  return 0;
}

uint64_t sub_2160BEEA8(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t **v5;
  void *v6;

  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 52);
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
        if (v4)
        {
          v5 = *(uint64_t ***)(v4 + 1176);
          if (v5)
          {
            sub_215FC13E0(v5);
            j__free(*(void **)(v4 + 1176));
            *(_QWORD *)(v4 + 1176) = 0;
          }
          v6 = *(void **)(v4 + 1184);
          if (v6)
          {
            j__free(v6);
            *(_QWORD *)(v4 + 1184) = 0;
          }
          sub_2160BEF50(v4);
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i) = 0;
          v2 = *(_DWORD *)(a1 + 52);
        }
      }
    }
    j__free(*(void **)(a1 + 56));
    *(_QWORD *)(a1 + 56) = 0;
    j__free(*(void **)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
  }
  return 0;
}

void sub_2160BEF50(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = a1 + 1458248;
    if (*(_QWORD *)(a1 + 1458248))
    {
      j__free(*(void **)(a1 + 1458264));
      j__free(*(void **)(v2 + 24));
      *(_OWORD *)v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
    j__free(*(void **)(a1 + 1040));
    j__free((void *)a1);
  }
}

uint64_t sub_2160BEFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6, unsigned int a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, uint64_t a11, _BYTE *a12, _DWORD *a13)
{
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int v44;
  unsigned int v45;
  _BYTE *v46;
  int v47;
  int16x8_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  int16x8_t v60;
  int16x8_t v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t v67;
  uint64_t j;
  unsigned int v69;
  unsigned int v70;
  char v71;
  char v72;
  unsigned int v73;
  unsigned int v74;
  _BOOL4 v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  double v79;
  double v80;
  int16x8_t v81;
  int16x8_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t i;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int16x8_t *v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v153;
  unsigned __int32 v154;
  _OWORD *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  _OWORD *v161;
  __int32 v162;
  uint64_t v163;
  __int32 v164;
  int *v165;
  __int128 v166;
  int v167;
  int v168;
  int v169;
  int v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  int32x4_t *v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  int8x16_t *v194;
  int8x16_t v195;
  int8x16_t *v196;
  int8x16_t v197;
  int v198;
  int v199;
  int8x16_t *v200;
  int8x16_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  BOOL v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int8x16_t *v241;
  int8x16_t v242;
  int8x16_t *v243;
  int8x16_t v244;
  int v245;
  int8x16_t *v246;
  int8x16_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  int *v275;
  uint64_t v276;
  _DWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  BOOL v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _OWORD *v286;
  uint64_t v288;
  int *v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  _OWORD *v298;
  int v299;
  _OWORD *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int16 v307;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t **v316;
  int *v317;
  int8x16_t v318[2];
  uint64_t v319;
  int8x16x2_t v320;

  v319 = *MEMORY[0x24BDAC8D0];
  v17 = a5 + 1423168;
  v18 = *(int *)(a2 + 4);
  HIDWORD(v276) = *(_DWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 560);
  v304 = *(_QWORD *)(a2 + 568);
  a5[12] = a5[1423168];
  v20 = *((_QWORD *)a5 + 127);
  a5[13] = *(_BYTE *)(v20 + 56);
  a5[14] = *(_BYTE *)(v20 + 57);
  *((_DWORD *)a5 + 4) = *((_DWORD *)a5 + 249);
  v317 = (int *)(a5 + 976);
  *((_WORD *)a5 + 10) = *(_WORD *)(a5 + 1005);
  a5[24] = a5[1164];
  v21 = *((_QWORD *)a5 + 149);
  a5[22] = *(_BYTE *)(v21 + 1363);
  a5[23] = 0;
  *((_QWORD *)a5 + 8) = a5 + 1200;
  *((_QWORD *)a5 + 9) = v21 + 32;
  *((_QWORD *)a5 + 10) = *((_QWORD *)a5 + 164);
  a5[928] = *(_BYTE *)(*((_QWORD *)a5 + 128) + 4);
  a5[36] = 0;
  *((_QWORD *)a5 + 11) = v21;
  *((_DWORD *)a5 + 24) = *((_DWORD *)a5 + 265);
  v22 = (uint64_t **)*((_QWORD *)a5 + 147);
  *a5 = *((_DWORD *)a5 + 357066) + *(_BYTE *)(a4 + 72) + 26;
  v309 = (uint64_t)(a5 + 1425504);
  sub_215FC147C(v22, a3, a4, (uint64_t)(a5 + 1425544), (uint64_t)(a5 + 1425504));
  v279 = a2;
  v23 = (63 * *(_DWORD *)(a2 + 156)) >> 6;
  v24 = a6;
  v307 = a6;
  v25 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)a5 + 164) + 48) + 12 * a6);
  *v25 = v23;
  v25[1] = 1;
  v26 = *((int *)v17 + 598);
  if (a5[1161])
  {
    v27 = (int)v26 % (2 * (int)v18) / 2;
    v28 = v26 & 1;
    if (a5[1007] + 2 * ((int)v26 / (2 * (int)v18)) != 1)
      v28 = 0;
  }
  else
  {
    v28 = (int)v26 / (int)v18;
    v27 = (int)v26 % (int)v18;
  }
  v299 = v28;
  v281 = v28 != 0;
  if (a12)
    *a12 = 1;
  v280 = *((_QWORD *)a5 + 149) + 1152;
  v29 = *((_QWORD *)a5 + 9);
  v30 = *((_QWORD *)a5 + 10);
  *(_QWORD *)(v30 + 80) = v29;
  v278 = v29;
  LODWORD(v29) = *(_DWORD *)(v29 + 100) >> 4;
  *(_DWORD *)(v30 + 8) = v29;
  *(_DWORD *)(v30 + 20) = *(_DWORD *)(v30 + 12) * v29;
  v305 = *((_QWORD *)a5 + 127);
  sub_215FC1468((uint64_t)v22);
  v282 = *(_QWORD *)(v30 + 48);
  v298 = (_OWORD *)(v304 + 48 * (int)v18);
  v300 = v298 + 1;
  v301 = (char *)(v298 + 2);
  v284 = *(_QWORD *)(v30 + 72);
  v285 = *(_QWORD *)(v30 + 152);
  v31 = *((_QWORD *)a5 + 9);
  v286 = a5 + 936;
  v32 = a5 + 880;
  v302 = v31;
  v294 = *(int *)(v31 + 152);
  v295 = *(int *)(v31 + 136);
  v277 = (_DWORD *)(a1 + 5041852);
  v33 = v299 * v18;
  v293 = v299 * (int)v18;
  v34 = v299;
  v283 = v26 - 1;
  v292 = (v299 - 1) * v18;
  v291 = (int)v18 * (uint64_t)v299;
  v306 = 12 * v24;
  v316 = v22;
  v311 = v18;
  v310 = v26;
  do
  {
    v313 = v34 * v18;
    v290 = v33;
    v312 = v27 + v33;
    v35 = v27;
    v303 = v34;
    v315 = v34;
    v288 = v27;
    do
    {
      v36 = v35 + v313;
      v37 = 4294958327;
      if (v35 + v313 >= *(int *)(v30 + 20) || v312 < 0)
        goto LABEL_214;
      v38 = v32;
      v39 = (_DWORD *)(v19 + 1168 * v35);
      **((_DWORD **)a5 + 144) = v36;
      *((_DWORD *)a5 + 248) = v36;
      *((_DWORD *)a5 + 244) = v35;
      *((_DWORD *)a5 + 245) = v315;
      v39[205] = v36;
      v39[206] = v35;
      v39[207] = v315;
      sub_215FCF138(v310, *((_QWORD **)a5 + 182281), v317);
      v40 = a5[1004];
      if (v40 <= 9 && ((1 << v40) & 0x294) != 0)
      {
        *(_BYTE *)(v19 + 1168 * v35 + 832) = 0;
      }
      else
      {
        v58 = sub_215FC1768(v22, v35);
        *(_BYTE *)(v19 + 1168 * v35 + 832) = v58;
        if (v58)
        {
          LOBYTE(v45) = *a5;
          *((_DWORD *)a5 + 2) = 0;
          v59 = sub_2160CC524((uint64_t)v317);
          if ((_DWORD)v59)
            goto LABEL_213;
          v62 = (_BYTE *)*((_QWORD *)a5 + 128);
          if (!v62[5] || !*(_BYTE *)(**((_QWORD **)a5 + 151) + 1364))
          {
            v63 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
            if (v63 == 5 || v63 == 3)
            {
              v64 = v62[272];
              if (v62[272])
              {
                v65 = v62 + 31;
                while (1)
                {
                  v66 = *v65;
                  v65 += 16;
                  if (v66 == 3)
                    break;
                  if (!--v64)
                    goto LABEL_62;
                }
                v84 = *((_QWORD *)a5 + 163);
                if (v303 > *(int *)(v84 + 12))
                {
                  sub_2160EC880(*(pthread_mutex_t **)(v84 + 16));
                  for (i = *(int *)(v84 + 12); v303 > i; i = *(int *)(v84 + 12))
                    sub_2160EC918(*(pthread_cond_t **)(v84 + 24), *(pthread_mutex_t **)(v84 + 16));
                  sub_2160EC88C(*(pthread_mutex_t **)(v84 + 16));
                }
              }
            }
          }
LABEL_62:
          v59 = sub_215FD648C((uint64_t)v317, v19 + 1168 * v35, v60, v61);
          if ((_DWORD)v59)
            goto LABEL_213;
          v69 = 0;
          goto LABEL_46;
        }
      }
      v318[0] = 0uLL;
      v41 = sub_215FC19CC(v22, (unsigned __int16 *)v317, v309, v19 + 1168 * v35, (uint64_t)v318);
      if ((_DWORD)v41)
      {
        v37 = v41;
        goto LABEL_214;
      }
      *((_DWORD *)a5 + 2) = 1;
      v44 = *(char *)(v305 + 54);
      if ((*(_BYTE *)(v305 + 54) - 26) < 0xCCu)
        goto LABEL_214;
      v45 = v44
          + *a5
          + 52
          - 52 * (((20165 * (v44 + *a5 + 52)) >> 20) + ((20165 * (v44 + *a5 + 52)) >> 31));
      *a5 = v44 + *a5 + 52 - 52 * (((20165 * (v44 + *a5 + 52)) >> 20) + (20165 * (v44 + *a5 + 52) < 0));
      v46 = (_BYTE *)(v19 + 1168 * v35);
      v46[818] = v45;
      v47 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
      v46[833] = v47;
      v46[834] = *(_BYTE *)(*((_QWORD *)a5 + 127) + 2);
      v46[835] = *(_BYTE *)(*((_QWORD *)a5 + 127) + 3);
      if (v47)
      {
        if (*(_BYTE *)(v19 + 1168 * v35 + 816))
        {
          v48 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vqtbl1q_s8(vcgtzq_s8(v318[0]), (int8x16_t)xmmword_2160F2B40), (int8x16_t)xmmword_2160F2B50), (int8x16_t)xmmword_2160F18B0);
          v49.i64[0] = 0x7000700070007;
          v49.i64[1] = 0x7000700070007;
          v320.val[1] = vorrq_s8((int8x16_t)vshlq_n_s16(v48, 8uLL), (int8x16_t)vshlq_u16((uint16x8_t)v48, v49));
          v50 = vandq_s8(vcltzq_s8(v320.val[1]), (int8x16_t)xmmword_2160F2980);
          v51 = vpaddq_s8(v50, v50);
          v52 = vpaddq_s8(v51, v51);
          v320.val[0] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v320.val[1], 1);
          v320.val[0] = vqtbl2q_s8(v320, (int8x16_t)xmmword_2160F48A0);
          v43 = (int16x8_t)vdupq_laneq_s64((int64x2_t)v320.val[0], 1);
          v320.val[0] = vandq_s8(vcltzq_s8(vzip1q_s8(v320.val[0], (int8x16_t)v43)), (int8x16_t)xmmword_2160F2980);
          v320.val[0] = vpaddq_s8(v320.val[0], v320.val[0]);
          v320.val[0] = vpaddq_s8(v320.val[0], v320.val[0]);
          v42 = (int16x8_t)vpaddq_s8(v320.val[0], v320.val[0]);
          *(_DWORD *)(*(_QWORD *)(v30 + 32) + 4 * (v35 + v313)) = vpaddq_s8(v52, v52).u16[0] | (v42.u16[0] << 16);
        }
        v53 = (_BYTE *)*((_QWORD *)a5 + 128);
        if (!v53[5] || !*(_BYTE *)(**((_QWORD **)a5 + 151) + 1364))
        {
          v54 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
          if (v54 == 5 || v54 == 3)
          {
            v55 = v53[272];
            if (v53[272])
            {
              v56 = v53 + 31;
              while (1)
              {
                v57 = *v56;
                v56 += 16;
                if (v57 == 3)
                  break;
                if (!--v55)
                  goto LABEL_44;
              }
              v67 = *((_QWORD *)a5 + 163);
              if (v303 > *(int *)(v67 + 12))
              {
                sub_2160EC880(*(pthread_mutex_t **)(v67 + 16));
                for (j = *(int *)(v67 + 12); v303 > j; j = *(int *)(v67 + 12))
                  sub_2160EC918(*(pthread_cond_t **)(v67 + 24), *(pthread_mutex_t **)(v67 + 16));
                sub_2160EC88C(*(pthread_mutex_t **)(v67 + 16));
              }
            }
          }
        }
LABEL_44:
        v59 = sub_215FD648C((uint64_t)v317, v19 + 1168 * v35, v42, v43);
        if ((_DWORD)v59)
        {
LABEL_213:
          v37 = v59;
          v22 = v316;
          goto LABEL_214;
        }
      }
      v69 = -1;
LABEL_46:
      sub_215FCF1E4(v317, a7, (int64x2_t)v42);
      if (*(_BYTE *)(v19 + 1168 * v35 + 833) || *(_BYTE *)(v19 + 1168 * v35 + 834) != 25)
      {
        v70 = (char)v45;
        v73 = a5[13] + (char)v45;
        v74 = a5[14] + (char)v45;
        if (v73 >= 0x33)
          v73 = 51;
        if (v74 >= 0x33)
          v74 = 51;
        v71 = byte_2160F5010[v73];
        v72 = byte_2160F5010[v74];
      }
      else
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
      }
      *(_WORD *)(*(_QWORD *)(v30 + 72) + 2 * v36) = v307;
      *(_BYTE *)(*(_QWORD *)(v30 + 112) + v36) = v70;
      *(_BYTE *)(*(_QWORD *)(v30 + 120) + v36) = v71;
      *(_BYTE *)(*(_QWORD *)(v30 + 128) + v36) = v72;
      *(_BYTE *)(*(_QWORD *)(v30 + 136) + v36) = *(_BYTE *)(*((_QWORD *)a5 + 127) + 3);
      *(int32x2_t *)(*(_QWORD *)(v30 + 48) + v306) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v30 + 48) + v306), (int32x2_t)vand_s8((int8x8_t)(v70 | 0x100000000), (int8x8_t)vdup_n_s32(v69)));
      ++v35;
      v22 = v316;
      v75 = sub_215FC17EC(v316);
      v83 = v75;
      if (v35 >= v311)
        break;
      v32 = v38;
    }
    while (!v75);
    v86 = v311;
    if (v75)
      v86 = v35;
    LODWORD(v276) = v86;
    if (v86 > (int)v288)
    {
      v87 = 0;
      v269 = *(unsigned __int8 *)(v282 + 12 * *(unsigned __int16 *)(v284 + 2 * v36) + 9);
      if (v303)
        v88 = 50529027;
      else
        v88 = 538976288;
      v273 = v88;
      v89 = v311;
      if (!v303)
        v89 = 0;
      v297 = v293 + v288;
      v272 = -v288;
      v90 = (int16x8_t *)(v19 + 1168 * (int)v288);
      v296 = v276 - v288;
      v91 = 16 * v288;
      v268 = v288 + v290 - v89;
      v271 = v292 + v288;
      v314 = v291 + v288;
      do
      {
        v92 = 32 * v315;
        v93 = 16 * v315;
        if (!*(_BYTE *)v302)
        {
          v92 = 16 * v315;
          v93 = 8 * v315;
        }
        v94 = *(_QWORD *)(v302 + 32) + v91 + (v92 * *(_DWORD *)(v302 + 136));
        v95 = a5[20];
        if ((v94 & 0x3F) == 0)
        {
          if (a5[21])
            v96 = v295;
          else
            v96 = 0;
          v97 = (_DWORD)v295 << (v95 != 0);
          if (!a5[20])
            v96 = 0;
          _X13 = v94 + v96;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v97;
          __asm { PRFM            #0, [X13] }
        }
        v134 = *(_QWORD *)(v302 + 40) + v91 + (v93 * *(_DWORD *)(v302 + 152));
        if ((v134 & 0x3F) == 0)
        {
          if (a5[21])
            v135 = v294;
          else
            v135 = 0;
          _ZF = v95 == 0;
          v136 = (_DWORD)v294 << (v95 != 0);
          if (_ZF)
            v135 = 0;
          _X9 = v134 + v135;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v136;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v136;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v136;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v136;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v136;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v136;
          __asm { PRFM            #0, [X9] }
          _X8 = _X9 + v136;
          __asm { PRFM            #0, [X8] }
        }
        v37 = 4294958327;
        if (v297 < 0)
          goto LABEL_214;
        v153 = v314 + v87;
        if (v314 + v87 >= *(int *)(v30 + 20))
          goto LABEL_214;
        v154 = v90[51].u32[2];
        v155 = (_OWORD *)(v304 + 48 * v154);
        if (v90[52].i8[0])
        {
          *v298 = *v155;
          v156 = v304 + 48 * v154;
          *v300 = *(_OWORD *)(v156 + 16);
          *v301 = *(_BYTE *)(v156 + 32);
          *(_QWORD *)&v157 = 0x2222222222222222;
          *((_QWORD *)&v157 + 1) = 0x2222222222222222;
          *v155 = v157;
          *(_BYTE *)(v156 + 32) = 0;
          v158 = *((_QWORD *)a5 + 128);
          if (*(_DWORD *)(v158 + 356) || *(_DWORD *)(v158 + 360))
            sub_216057DD8((uint64_t)v90, (uint64_t)a5);
          else
            sub_2160409DC((uint64_t)v90, (uint64_t)a5);
          v22 = v316;
        }
        else
        {
          if (!v90[52].i8[1])
          {
            *((_DWORD *)a5 + 1) = 0;
            v162 = v90[51].i32[2];
            v163 = v271 + v87;
            if (v162 + 1 == (_DWORD)v311)
              v164 = 0;
            else
              v164 = v162 + 1;
            *v286 = 0u;
            *(_OWORD *)(a5 + 952) = 0u;
            if (v162)
            {
              if (v153 > v310)
              {
                *(_QWORD *)v286 = v304 - 48 + 48 * v162;
                if (v163 > v310)
                  *((_QWORD *)a5 + 120) = v298;
              }
            }
            if (v163 >= v310)
              *((_QWORD *)a5 + 118) = v155;
            if (v164 && v163 >= v283)
              *((_QWORD *)a5 + 119) = v304 + 48 * v164;
            *((_QWORD *)a5 + 121) = v38;
            v165 = (int *)(v285 + 48 * v153);
            *(_QWORD *)&v166 = 0x303030303030303;
            *((_QWORD *)&v166 + 1) = 0x303030303030303;
            *((_OWORD *)v165 + 1) = v166;
            if (v272 == v87)
              v167 = 538976288;
            else
              v167 = 67372036;
            if (v272 == v87)
              v168 = 0;
            else
              v168 = -1;
            *(_OWORD *)v165 = v166;
            v169 = v90[51].u8[0];
            *(_BYTE *)(*((_QWORD *)a5 + 121) + 32) = 0;
            v170 = v90[52].u8[2];
            v289 = v165;
            v275 = v165 + 4;
            v274 = v167;
            v270 = v168;
            if (v170 == 25)
            {
              sub_2160CC140((uint64_t)v90, (uint64_t)a5);
              *(_QWORD *)&v171 = 0x2222222222222222;
              *((_QWORD *)&v171 + 1) = 0x2222222222222222;
              *(_OWORD *)v38 = v171;
              *((_OWORD *)v38 + 1) = v171;
LABEL_144:
              if (*((_QWORD *)a5 + 118))
              {
                *v298 = *v155;
                v174 = v304 + 48 * v154;
                *v300 = *(_OWORD *)(v174 + 16);
                *v301 = *(_BYTE *)(v174 + 32);
              }
              *v155 = *((_OWORD *)a5 + 55);
              v175 = (int32x4_t *)(v304 + 48 * v154);
              v76 = *((int32x4_t *)a5 + 56);
              v175[1] = v76;
              v175[2].i8[0] = a5[912];
              *v289 = v274;
              *v275 = v273;
              v22 = v316;
              if (v269 == 2)
              {
                v176 = *(unsigned __int16 *)(v284 + 2 * (v314 + v87));
                if (*(unsigned __int16 *)(v284 + 2 * (v314 + v87 + v270)) == v176)
                  v177 = v274;
                else
                  v177 = 538976288;
                _ZF = *(unsigned __int16 *)(v284 + 2 * (v268 + v87)) == v176;
                v178 = v273;
                if (!_ZF)
                  v178 = 538976288;
                *v289 = v177;
                *v275 = v178;
              }
              goto LABEL_153;
            }
            if (v90[52].u8[1] | v170)
            {
LABEL_132:
              sub_2160A808C((uint64_t)v90, (uint64_t)v90, (uint64_t)a5, (uint64_t)(a5 + 1425264));
              sub_21608DD78((uint64_t)v90, (uint64_t)a5);
            }
            else if (v90[52].i8[3] == 1)
            {
              *(_BYTE *)(*((_QWORD *)a5 + 121) + 32) = 1;
              if (v169)
                sub_2160A70F8((uint64_t)v90, 3.72097434e-294, (int8x16_t)v77, *(double *)v78.i64, v79, v80, (int8x16_t)v81, (uint64_t)v90, (uint64_t)a5, (uint64_t)(a5 + 1423632));
              sub_21608C474((uint64_t)v90, (uint64_t)a5, *(double *)&v166, *(double *)v77.i64, *(double *)v78.i64, v79, v80, v81, v82);
              *(_OWORD *)v289 = xmmword_2160F2C00;
              *(_OWORD *)v275 = xmmword_2160F2C00;
            }
            else
            {
              if (v90[52].i8[3])
                goto LABEL_132;
              *(_BYTE *)(*((_QWORD *)a5 + 121) + 32) = 0;
              if (v169)
                sub_2160A653C(v90, (uint64_t)v90, (uint64_t)a5);
              sub_2160898E4((uint64_t)v90, (uint64_t)a5);
            }
            if (v90[51].i8[1])
            {
              v59 = sub_2160A88F8(v90, (uint64_t)v90, (uint64_t)a5);
              if ((_DWORD)v59)
                goto LABEL_213;
            }
            else
            {
              *((_OWORD *)a5 + 53) = 0u;
              *((_OWORD *)a5 + 54) = 0u;
              *((_OWORD *)a5 + 51) = 0u;
              *((_OWORD *)a5 + 52) = 0u;
              *((_OWORD *)a5 + 49) = 0u;
              *((_OWORD *)a5 + 50) = 0u;
              *((_OWORD *)a5 + 47) = 0u;
              *((_OWORD *)a5 + 48) = 0u;
              *((_OWORD *)a5 + 45) = 0u;
              *((_OWORD *)a5 + 46) = 0u;
              *((_OWORD *)a5 + 43) = 0u;
              *((_OWORD *)a5 + 44) = 0u;
              *((_OWORD *)a5 + 41) = 0u;
              *((_OWORD *)a5 + 42) = 0u;
              *((_OWORD *)a5 + 39) = 0u;
              *((_OWORD *)a5 + 40) = 0u;
            }
            v59 = sub_21608DE70((uint64_t)v90, (int16x8_t *)a5);
            if ((_DWORD)v59)
              goto LABEL_213;
            goto LABEL_144;
          }
          v159 = v90[51].i8[0];
          if (v90[52].i8[3])
          {
            if (v90[51].i8[0])
              sub_2160A70F8((uint64_t)v90, *(double *)v76.i64, (int8x16_t)v77, *(double *)v78.i64, v79, v80, (int8x16_t)v81, (uint64_t)v90, (uint64_t)a5, (uint64_t)(a5 + 1424400));
            v160 = v304;
            v155 = (_OWORD *)(v304 + 48 * v154 + 16);
            v159 = 1;
            v161 = v298 + 1;
          }
          else
          {
            if (v90[51].i8[0])
            {
              sub_2160A653C(v90, (uint64_t)v90, (uint64_t)a5);
              v159 = 0;
            }
            v161 = v298;
            v160 = v304;
          }
          *v161 = *v155;
          *v301 = v159;
          *(_QWORD *)&v172 = 0x2222222222222222;
          *((_QWORD *)&v172 + 1) = 0x2222222222222222;
          *v155 = v172;
          *(_BYTE *)(v160 + 48 * v154 + 32) = v159;
          if (v90[51].i8[1])
          {
            v59 = sub_2160A88F8(v90, (uint64_t)v90, (uint64_t)a5);
            if ((_DWORD)v59)
              goto LABEL_213;
          }
          v173 = *((_QWORD *)a5 + 128);
          v22 = v316;
          if (*(_DWORD *)(v173 + 356) || *(_DWORD *)(v173 + 360))
            sub_216057DD8((uint64_t)v90, (uint64_t)a5);
          else
            sub_2160409DC((uint64_t)v90, (uint64_t)a5);
        }
LABEL_153:
        ++v87;
        v90 += 73;
        v91 += 16;
      }
      while (v296 != (_DWORD)v87);
    }
    if (!v303)
    {
      v18 = v311;
      goto LABEL_207;
    }
    v18 = v311;
    v179 = v299;
    if ((_DWORD)v276 == (_DWORD)v311)
    {
      v180 = v299 - 1;
      sub_21609DF3C((uint64_t *)v30, v280, 0, v311, v299 - 1, v315, v76, v77, v78);
      if (*(_BYTE *)(v30 + 224))
      {
        if (!*(_QWORD *)(v30 + 232))
          *(_QWORD *)(v30 + 232) = sub_2160CB5FC((void *)(20 * *(_DWORD *)(v278 + 136)
                                                                      + 11 * *(_DWORD *)(v278 + 152)));
        v37 = sub_21609BD58(v30, 0, v311, v180, v315, v281, a13);
        v281 = 1;
      }
      else
      {
        *(_DWORD *)(v30 + 268) = *v277;
        v37 = sub_21609B1DC(v30, 0, v311, v180, v315);
      }
      if ((_DWORD)v37)
        goto LABEL_214;
      v18 = v311;
      if (*(_DWORD *)(v30 + 220))
      {
        v182 = *(_QWORD *)(v278 + 32);
        v181 = *(_QWORD *)(v278 + 40);
        v183 = *(_DWORD *)(v278 + 136);
        v184 = *(_DWORD *)(v278 + 152);
        if (*(_BYTE *)v278)
        {
          v185 = v183;
          v186 = v184;
          if (!*(_BYTE *)(v278 + 5))
            v186 = 0;
          v181 += v186;
          if (!*(_BYTE *)(v278 + 5))
            v185 = 0;
          v182 += v185;
          v183 *= 2;
          v184 *= 2;
        }
        v187 = *(int *)(v278 + 132);
        v188 = *(int *)(v278 + 148);
        v189 = *(int *)(v278 + 100);
        v190 = *(int *)(v278 + 116);
        v191 = 16 * v315;
        v192 = 16 * v315 - 20;
        if (v303 < 2)
          v192 = 0;
        if (v191 != (_DWORD)v189)
          v191 -= 4;
        v193 = v191 - v192;
        if (v191 > v192)
        {
          v194 = (int8x16_t *)(v182 + v183 * (uint64_t)v192);
          do
          {
            v195 = vqtbl1q_s8((int8x16_t)(16843009 * v194->u8[0]), (int8x16_t)xmmword_2160EE800);
            v194[-2] = v195;
            v194[-1] = v195;
            v196 = (int8x16_t *)((char *)v194 + v187);
            v197 = vqtbl1q_s8((int8x16_t)(16843009 * v194->u8[v187 - 1]), (int8x16_t)xmmword_2160EE800);
            *v196 = v197;
            v196[1] = v197;
            v194 = (int8x16_t *)((char *)v194 + v183);
            --v193;
          }
          while (v193);
        }
        v198 = v192 >> 1;
        v199 = (v191 >> 1) - (v192 >> 1);
        if (v191 >> 1 > v198)
        {
          v200 = (int8x16_t *)(v181 + v184 * (uint64_t)v198);
          do
          {
            v201 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v200->u16[-1] + v188)), (int8x16_t)xmmword_2160EE800);
            v200[-1] = vqtbl1q_s8((int8x16_t)(65537 * v200->u16[0]), (int8x16_t)xmmword_2160EE800);
            *(int8x16_t *)((char *)v200 + v188) = v201;
            v200 = (int8x16_t *)((char *)v200 + v184);
            --v199;
          }
          while (v199);
        }
        if (v303 <= 1)
        {
          v202 = 0;
          v203 = v182 - 32;
          v204 = -2 * v183;
          do
          {
            if ((int)v187 >= -63)
            {
              v205 = 0;
              do
              {
                v206 = *(_OWORD *)(v203 + v205);
                *(_OWORD *)(v203 - v183 + v205) = v206;
                *(_OWORD *)(v203 + v204 + v205) = v206;
                v207 = v205 < (int)v187 + 48;
                v205 += 16;
              }
              while (v207);
            }
            v203 += v204;
            ++v202;
          }
          while (v202 != 10);
          v208 = 0;
          v209 = v181 - 16;
          do
          {
            if ((int)v188 >= -31)
            {
              v210 = 0;
              do
              {
                *(_OWORD *)(v209 - v184 + v210) = *(_OWORD *)(v209 + v210);
                v207 = v210 < (int)v188 + 16;
                v210 += 16;
              }
              while (v207);
            }
            v209 -= v184;
            ++v208;
          }
          while (v208 != 8);
        }
        if (v191 == (_DWORD)v189)
        {
          v211 = 0;
          v212 = v183 * (v189 - 1);
          v213 = v182 - 32;
          v214 = v182 - 32 + v212;
          v215 = 2 * v183;
          v216 = v213 + v212 + v183;
          v217 = v213 + v212 + v215;
          do
          {
            if ((int)v187 >= -63)
            {
              v218 = 0;
              do
              {
                v219 = *(_OWORD *)(v214 + v218);
                *(_OWORD *)(v216 + v218) = v219;
                *(_OWORD *)(v217 + v218) = v219;
                v207 = v218 < v187 + 48;
                v218 += 16;
              }
              while (v207);
            }
            v214 += v215;
            ++v211;
            v216 += v215;
            v217 += v215;
          }
          while (v211 != 10);
          v220 = 0;
          v221 = v181 + v184 * (v190 - 1) - 16;
          do
          {
            if ((int)v188 >= -31)
            {
              v222 = 0;
              do
              {
                *(_OWORD *)(v221 + v184 + v222) = *(_OWORD *)(v221 + v222);
                v207 = v222 < v188 + 16;
                v222 += 16;
              }
              while (v207);
            }
            v221 += v184;
            ++v220;
          }
          while (v220 != 8);
        }
      }
      sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(v279 + 88) + 16));
      *(_DWORD *)(*(_QWORD *)(v279 + 88) + 12) = v315 - 2;
      sub_2160EC90C(*(pthread_cond_t **)(*(_QWORD *)(v279 + 88) + 24));
      sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(v279 + 88) + 16));
LABEL_207:
      v179 = v299;
    }
    v27 = 0;
    v34 = v303 + 1;
    v299 = v179 + 1;
    v33 = v290 + v18;
    v293 += v18;
    v292 += v18;
    v291 += v18;
    v32 = v38;
  }
  while (!v83);
  if (v276 != __PAIR64__(v34, v18))
    goto LABEL_265;
  sub_21609DF3C((uint64_t *)v30, v280, 0, v18, HIDWORD(v276) - 1, HIDWORD(v276), v76, v77, v78);
  if (*(_BYTE *)(v30 + 224))
  {
    v223 = sub_21609BD58(v30, 0, v18, v315, HIDWORD(v276), v281, a13);
  }
  else
  {
    *(_DWORD *)(v30 + 268) = *v277;
    v223 = sub_21609B1DC(v30, 0, v18, HIDWORD(v276) - 1, HIDWORD(v276));
  }
  v37 = v223;
  if (!(_DWORD)v223)
  {
    if (*(_DWORD *)(v30 + 220))
    {
      v227 = *(_QWORD *)(v278 + 32);
      v226 = *(_QWORD *)(v278 + 40);
      v228 = *(_DWORD *)(v278 + 136);
      v229 = *(_DWORD *)(v278 + 152);
      v230 = *(int *)(v278 + 100);
      if (*(_BYTE *)v278)
      {
        v231 = v228;
        v232 = v229;
        if (!*(_BYTE *)(v278 + 5))
          v232 = 0;
        v226 += v232;
        if (!*(_BYTE *)(v278 + 5))
          v231 = 0;
        v227 += v231;
        v228 *= 2;
        v229 *= 2;
      }
      v233 = *(int *)(v278 + 132);
      v234 = *(int *)(v278 + 148);
      v235 = *(int *)(v278 + 116);
      if (SHIDWORD(v276) >= 2)
        v236 = 16 * (HIDWORD(v276) - 1) - 4;
      else
        v236 = 0;
      v237 = 16 * HIDWORD(v276);
      if (16 * HIDWORD(v276) != (_DWORD)v230)
        v237 = 16 * HIDWORD(v276) - 4;
      v238 = v236 >> 1;
      v239 = v237 >> 1;
      v240 = v237 - v236;
      if (v237 > v236)
      {
        v241 = (int8x16_t *)(v227 + v228 * (uint64_t)v236);
        do
        {
          v242 = vqtbl1q_s8((int8x16_t)(16843009 * v241->u8[0]), (int8x16_t)xmmword_2160EE800);
          v241[-2] = v242;
          v241[-1] = v242;
          v243 = (int8x16_t *)((char *)v241 + v233);
          v244 = vqtbl1q_s8((int8x16_t)(16843009 * v241->u8[v233 - 1]), (int8x16_t)xmmword_2160EE800);
          *v243 = v244;
          v243[1] = v244;
          v241 = (int8x16_t *)((char *)v241 + v228);
          --v240;
        }
        while (v240);
      }
      _VF = __OFSUB__(v239, v238);
      v245 = v239 - v238;
      if (!((v245 < 0) ^ _VF | (v245 == 0)))
      {
        v246 = (int8x16_t *)(v226 + v229 * (uint64_t)v238);
        do
        {
          v247 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v246->u16[-1] + v234)), (int8x16_t)xmmword_2160EE800);
          v246[-1] = vqtbl1q_s8((int8x16_t)(65537 * v246->u16[0]), (int8x16_t)xmmword_2160EE800);
          *(int8x16_t *)((char *)v246 + v234) = v247;
          v246 = (int8x16_t *)((char *)v246 + v229);
          --v245;
        }
        while (v245);
      }
      if (SHIDWORD(v276) <= 1)
      {
        v248 = 0;
        v249 = v227 - 32;
        v250 = -2 * v228;
        do
        {
          if ((int)v233 >= -63)
          {
            v251 = 0;
            do
            {
              v252 = *(_OWORD *)(v249 + v251);
              *(_OWORD *)(v249 - v228 + v251) = v252;
              *(_OWORD *)(v249 + v250 + v251) = v252;
              v207 = v251 < (int)v233 + 48;
              v251 += 16;
            }
            while (v207);
          }
          v249 += v250;
          ++v248;
        }
        while (v248 != 10);
        v253 = 0;
        v254 = v226 - 16;
        do
        {
          if ((int)v234 >= -31)
          {
            v255 = 0;
            do
            {
              *(_OWORD *)(v254 - v229 + v255) = *(_OWORD *)(v254 + v255);
              v207 = v255 < (int)v234 + 16;
              v255 += 16;
            }
            while (v207);
          }
          v254 -= v229;
          ++v253;
        }
        while (v253 != 8);
      }
      if (v237 == (_DWORD)v230)
      {
        v256 = 0;
        v257 = v228 * (v230 - 1);
        v258 = v227 + v257 - 32;
        v259 = 2 * v228;
        v260 = v257 + v259;
        v261 = v257 + v228 + v227 - 32;
        v262 = v260 + v227 - 32;
        do
        {
          if ((int)v233 >= -63)
          {
            v263 = 0;
            do
            {
              v264 = *(_OWORD *)(v258 + v263);
              *(_OWORD *)(v261 + v263) = v264;
              *(_OWORD *)(v262 + v263) = v264;
              v207 = v263 < v233 + 48;
              v263 += 16;
            }
            while (v207);
          }
          v258 += v259;
          ++v256;
          v261 += v259;
          v262 += v259;
        }
        while (v256 != 10);
        v265 = 0;
        v266 = v226 + v229 * (v235 - 1) - 16;
        do
        {
          if ((int)v234 >= -31)
          {
            v267 = 0;
            do
            {
              *(_OWORD *)(v266 + v229 + v267) = *(_OWORD *)(v266 + v267);
              v207 = v267 < v234 + 16;
              v267 += 16;
            }
            while (v207);
          }
          v266 += v229;
          ++v265;
        }
        while (v265 != 8);
      }
    }
    sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(v279 + 88) + 16));
    *(_DWORD *)(*(_QWORD *)(v279 + 88) + 12) = 0x7FFFFFFF;
    sub_2160EC90C(*(pthread_cond_t **)(*(_QWORD *)(v279 + 88) + 24));
    sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(v279 + 88) + 16));
LABEL_265:
    v37 = 0;
    *a8 = *((_DWORD *)a5 + 248);
  }
LABEL_214:
  sub_215FC1684((uint64_t)v22);
  if (a9)
    *a9 = 0;
  if (a10)
    *a10 = 0;
  sub_215FC1698(v22, v309);
  if ((_DWORD)v37)
  {
    v224 = *((_DWORD *)a5 + 248);
    if (v224)
      *a8 = v224 - 1;
  }
  return v37;
}

uint64_t sub_2160C0650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6, unsigned int a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, unsigned __int8 a11, int a12, _BYTE *a13, _DWORD *a14)
{
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  signed int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int8x16_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int v47;
  unsigned int v48;
  _BYTE *v49;
  int v50;
  int16x8_t v51;
  uint16x8_t v52;
  int64x2_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unsigned __int16 v57;
  int64x2_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  int v66;
  int16x8_t v67;
  int16x8_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  uint64_t j;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  char v88;
  char v89;
  unsigned int v90;
  unsigned int v91;
  _BOOL4 v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  double v96;
  double v97;
  int16x8_t v98;
  int16x8_t v99;
  _BOOL4 v100;
  unint64_t v101;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  uint64_t i;
  unint64_t v123;
  unsigned int *v124;
  int v125;
  int16x8_t *v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v172;
  uint64_t v173;
  int v174;
  unsigned __int32 v191;
  _OWORD *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  _OWORD *v198;
  __int32 v199;
  __int32 v200;
  double v201;
  int v202;
  int v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  int32x4_t *v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  int8x16_t *v223;
  int8x16_t v224;
  int8x16_t *v225;
  int8x16_t v226;
  int v227;
  int v228;
  int8x16_t *v229;
  int8x16_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  BOOL v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int8x16_t *v269;
  int8x16_t v270;
  int8x16_t *v271;
  int8x16_t v272;
  int v273;
  int8x16_t *v274;
  int8x16_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  signed int v296;
  uint64_t v297;
  _DWORD *v298;
  _OWORD *v299;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  BOOL v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v310;
  _DWORD *v311;
  int v312;
  _OWORD *v313;
  _OWORD *v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  signed int v321;
  _OWORD *v322;
  _OWORD *v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  __int16 v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t *v333;
  int v334;
  uint64_t *v335;
  int v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  int *v341;
  uint64_t v342;
  uint64_t v343;

  v15 = *(_DWORD *)(a2 + 4);
  v16 = v15;
  v296 = *(_DWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 560);
  v18 = *(_QWORD *)(a2 + 568);
  a5[12] = a5[1423168];
  v19 = *((_QWORD *)a5 + 127);
  a5[13] = *(_BYTE *)(v19 + 56);
  a5[14] = *(_BYTE *)(v19 + 57);
  *((_DWORD *)a5 + 4) = *((_DWORD *)a5 + 249);
  *((_WORD *)a5 + 10) = *(_WORD *)(a5 + 1005);
  a5[24] = a5[1164];
  v20 = *((_QWORD *)a5 + 149);
  a5[22] = *(_BYTE *)(v20 + 1363);
  a5[23] = 0;
  *((_QWORD *)a5 + 8) = a5 + 1200;
  *((_QWORD *)a5 + 9) = v20 + 32;
  v21 = *((_QWORD *)a5 + 164);
  *((_QWORD *)a5 + 10) = v21;
  a5[928] = *(_BYTE *)(*((_QWORD *)a5 + 128) + 4);
  *(_QWORD *)(a5 + 28) = 0;
  v311 = a5 + 28;
  a5[36] = 0;
  *((_QWORD *)a5 + 11) = v20;
  *((_DWORD *)a5 + 24) = *((_DWORD *)a5 + 265);
  *a5 = *((_DWORD *)a5 + 357066) + *(_DWORD *)(a4 + 72) + 26;
  v330 = a6;
  v22 = (unsigned int *)(*(_QWORD *)(v21 + 48) + 12 * a6);
  *v22 = (63 * *(_DWORD *)(a2 + 156)) >> 6;
  v22[1] = 1;
  v339 = a5 + 1423168;
  v23 = *((int *)a5 + 356390);
  if (a5[1161])
  {
    v24 = (int)v23 % (2 * v15) / 2;
    v25 = *((_DWORD *)a5 + 356390) & 1;
    if (a5[1007] + 2 * ((int)v23 / (2 * v15)) != 1)
      v25 = 0;
  }
  else
  {
    v25 = (int)v23 / v15;
    v24 = (int)v23 % v15;
  }
  v332 = (uint64_t *)(a5 + 1458248);
  v342 = (uint64_t)(a5 + 1425504);
  v304 = v25 != 0;
  if (a13)
    *a13 = 1;
  v341 = (int *)(a5 + 976);
  v301 = *((_QWORD *)a5 + 149) + 1152;
  v26 = *((_QWORD *)a5 + 9);
  v27 = *((_QWORD *)a5 + 10);
  *(_QWORD *)(v27 + 80) = v26;
  v303 = v26;
  LODWORD(v26) = *(_DWORD *)(v26 + 100) >> 4;
  v28 = *(_DWORD *)(v27 + 12);
  *(_DWORD *)(v27 + 8) = v26;
  *(_DWORD *)(v27 + 20) = v28 * v26;
  v328 = a5[1425576] == 0;
  v305 = v18 - 48;
  v327 = v18;
  v29 = v18 + 48 * v15;
  v323 = (_OWORD *)(v29 + 16);
  v322 = (_OWORD *)v29;
  v324 = (char *)(v29 + 32);
  v306 = (uint64_t)(a5 + 1424400);
  v314 = a5 + 936;
  v313 = a5 + 880;
  v30 = *((_QWORD *)a5 + 127);
  v302 = (uint64_t)(a5 + 1425264);
  v299 = a5 + 624;
  v31 = *((_QWORD *)a5 + 9);
  v297 = (uint64_t)(a5 + 1423632);
  v298 = (_DWORD *)(a1 + 5041852);
  v320 = *(int *)(v31 + 136);
  v32 = v25 * v15;
  v33 = v25;
  v325 = v31;
  v319 = *(int *)(v31 + 152);
  v310 = v23;
  v308 = v23 - 1;
  v318 = (v25 - 1) * v15;
  v316 = v25;
  v317 = v15 * (uint64_t)v25;
  v34 = a5 + 1458264;
  v329 = 12 * a6;
  v343 = v17;
  v326 = v30;
  v321 = v15;
  v331 = v15;
  v307 = a5 + 1458264;
  while (2)
  {
    v35 = *((_DWORD *)a5 + 7);
    v36 = v35 - v15;
    if (v35 <= v15)
      v36 = 0;
    if (v35 >= v15)
      v37 = v15;
    else
      v37 = *((_DWORD *)a5 + 7);
    *((_DWORD *)a5 + 7) = v36;
    v338 = v33 * v16;
    v340 = v33;
    v333 = (uint64_t *)&v34[8 * (v33 & 1)];
    v335 = (uint64_t *)&v34[8 * !(v33 & 1)];
    v312 = v32;
    v337 = v24 + v32;
    v38 = v24;
    v315 = v24;
    while (1)
    {
      v39 = v38 + v338;
      result = 4294958327;
      if (v38 + v338 >= *(int *)(v27 + 20) || v337 < 0)
        goto LABEL_234;
      v41 = v17 + 1168 * v38;
      **((_DWORD **)a5 + 144) = v39;
      *((_DWORD *)a5 + 248) = v39;
      *((_DWORD *)a5 + 244) = v38;
      *((_DWORD *)a5 + 245) = v340;
      *(_DWORD *)(v41 + 820) = v39;
      *(_DWORD *)(v41 + 824) = v38;
      *(_DWORD *)(v41 + 828) = v340;
      v42 = *v335;
      *v332 = *v333;
      v332[1] = v42;
      *((_QWORD *)a5 + 144) = v42 + 400 * v38;
      *(_QWORD *)(v332[1] + 400 * v38 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 149) + 1152)
                                                                       + 8 * a7));
      sub_2160CBB14(*((_DWORD *)v339 + 598), *v332, v332[1], v341);
      v43 = a5[1004];
      if (v43 <= 9 && ((1 << v43) & 0x294) != 0)
        goto LABEL_18;
      if (v37)
        goto LABEL_33;
      if (*((_DWORD *)a5 + 8) == 1)
      {
        v37 = 0;
        goto LABEL_18;
      }
      v76 = *((_QWORD *)v339 + 294);
      v77 = (unsigned int *)*((_QWORD *)v339 + 295);
      v78 = *((_DWORD *)v339 + 592);
      v79 = v339[2372];
      v80 = __clz(v78 | 1);
      if (!v78)
        ++v80;
      if (v80 > 0xC)
      {
        v101 = v79 + 1;
        v102 = (v79 + 1) & 7;
        v103 = (unsigned int *)(v76 + (v101 >> 3));
        v104 = bswap32(*v103) << v102;
        if (v103 <= v77)
          v105 = v103;
        else
          v105 = (unsigned int *)*((_QWORD *)v339 + 295);
        if (v78 < 0)
        {
          v109 = 0;
        }
        else
        {
          v106 = 0;
          do
          {
            v107 = v104;
            v108 = v102;
            v109 = v106 + 1;
            v110 = (v102 + 1);
            v102 = ((_BYTE)v102 + 1) & 7;
            v105 = (unsigned int *)((char *)v105 + (v110 >> 3));
            v104 = bswap32(*v105) << (v110 & 7);
            if (v105 > v77)
              v105 = (unsigned int *)*((_QWORD *)v339 + 295);
            if ((v107 & 0x80000000) != 0)
              break;
          }
          while (v106++ < 0x1F);
          if (v109 - 1 > 0x17)
          {
            v112 = v104 >> (48 - v109);
            v113 = ((v108 + 1) & 7) + v109;
            v114 = v113 - 16;
            v83 = v113 & 7;
            v115 = (unsigned int *)((char *)v105 + (v114 >> 3));
            v116 = bswap32(*v115) << v83;
            if (v115 <= v77)
              v117 = v115;
            else
              v117 = (unsigned int *)*((_QWORD *)v339 + 295);
            v119 = *(unsigned int *)((char *)v117 + 2);
            v118 = (unsigned int *)((char *)v117 + 2);
            v85 = bswap32(v119) << v83;
            if (v118 <= v77)
              v77 = v118;
            v120 = __PAIR64__(v112, v116) >> 16;
LABEL_98:
            v37 = v120 + ~(-1 << v109);
            goto LABEL_99;
          }
        }
        v120 = v104 >> -(char)v109;
        v123 = v109 + v102;
        v83 = (v109 + v102) & 7;
        v124 = (unsigned int *)((char *)v105 + (v123 >> 3));
        v85 = bswap32(*v124) << v83;
        if (v124 <= v77)
          v77 = v124;
        goto LABEL_98;
      }
      v81 = (v78 << (v80 + 1)) >> -(char)v80;
      if (!v80)
        v81 = 0;
      v37 = v81 + ~(-1 << v80);
      v82 = v79 + 2 * v80 + 1;
      v83 = v82 & 7;
      v84 = (unsigned int *)(v76 + (v82 >> 3));
      v85 = bswap32(*v84) << (v82 & 7);
      if (v84 <= v77)
        v77 = v84;
LABEL_99:
      *((_QWORD *)v339 + 294) = v77;
      *((_DWORD *)v339 + 592) = v85;
      v339[2372] = v83;
      if (v37 + (int)v38 + (int)v338 > *(_DWORD *)(v27 + 20))
        goto LABEL_233;
      *((_DWORD *)a5 + 8) = sub_2160AC88C(v342);
      if (v37 + (int)v38 > v321)
      {
        *v311 = v37 + v38 - v321;
        v37 = v321 - v38;
      }
      if (v37)
      {
LABEL_33:
        *(_BYTE *)(v17 + 1168 * v38 + 832) = 1;
        LOBYTE(v48) = *a5;
        *((_DWORD *)a5 + 2) = 0;
        result = sub_2160CC524((uint64_t)v341);
        if ((_DWORD)result)
          goto LABEL_234;
        v69 = (_BYTE *)*((_QWORD *)a5 + 128);
        if (!v69[5] || !*(_BYTE *)(**((_QWORD **)a5 + 151) + 1364))
        {
          v70 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
          if (v70 == 5 || v70 == 3)
          {
            v71 = v69[272];
            if (v69[272])
            {
              v72 = v69 + 31;
              while (1)
              {
                v73 = *v72;
                v72 += 16;
                if (v73 == 3)
                  break;
                if (!--v71)
                  goto LABEL_93;
              }
              v121 = *((_QWORD *)a5 + 163);
              if (v340 > *(int *)(v121 + 12))
              {
                sub_2160EC880(*(pthread_mutex_t **)(v121 + 16));
                for (i = *(int *)(v121 + 12); v340 > i; i = *(int *)(v121 + 12))
                  sub_2160EC918(*(pthread_cond_t **)(v121 + 24), *(pthread_mutex_t **)(v121 + 16));
                sub_2160EC88C(*(pthread_mutex_t **)(v121 + 16));
                v30 = v326;
              }
            }
          }
        }
LABEL_93:
        result = sub_215FD648C((uint64_t)v341, v41, v67, v68);
        if ((_DWORD)result)
          goto LABEL_234;
        v86 = 0;
        --v37;
        goto LABEL_60;
      }
LABEL_18:
      *(_BYTE *)(v17 + 1168 * v38 + 832) = 0;
      *((_DWORD *)a5 + 8) = 0;
      v44 = (int8x16_t *)*((_QWORD *)a5 + 144);
      v44[5].i64[0] = 0;
      v44[5].i64[1] = 0;
      result = sub_2160D4C30(v342, v328, a11, a12, (uint64_t)v341, (_BYTE *)v41);
      if ((_DWORD)result)
        goto LABEL_234;
      *((_DWORD *)a5 + 2) = 1;
      v47 = *(char *)(v30 + 54);
      if ((*(_BYTE *)(v30 + 54) - 26) < 0xCCu)
      {
LABEL_233:
        result = 4294958327;
        goto LABEL_234;
      }
      v48 = v47
          + *a5
          + 52
          - 52 * (((20165 * (v47 + *a5 + 52)) >> 20) + ((20165 * (v47 + *a5 + 52)) >> 31));
      *a5 = v47 + *a5 + 52 - 52 * (((20165 * (v47 + *a5 + 52)) >> 20) + (20165 * (v47 + *a5 + 52) < 0));
      v49 = (_BYTE *)(v343 + 1168 * v38);
      v49[818] = v48;
      v50 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
      v49[833] = v50;
      v49[834] = *(_BYTE *)(*((_QWORD *)a5 + 127) + 2);
      v49[835] = *(_BYTE *)(*((_QWORD *)a5 + 127) + 3);
      if (v50)
      {
        if (*(_BYTE *)(v343 + 1168 * v38 + 816))
        {
          v51 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vcgtzq_s8(v44[5]), (int8x16_t)xmmword_2160F2B40), (int8x16_t)xmmword_2160F2B50);
          v52.i64[0] = 0x7000700070007;
          v52.i64[1] = 0x7000700070007;
          v53 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s16(v51, 8uLL), (int8x16_t)vshlq_u16((uint16x8_t)v51, v52));
          v54 = vandq_s8(vcltzq_s8((int8x16_t)v53), (int8x16_t)xmmword_2160F2980);
          v55 = vpaddq_s8(v54, v54);
          v56 = vpaddq_s8(v55, v55);
          v57 = vpaddq_s8(v56, v56).u16[0];
          v58 = (int64x2_t)vzip1q_s8((int8x16_t)vdupq_laneq_s64(v53, 1), (int8x16_t)v53);
          v46 = (int16x8_t)xmmword_2160F18B0;
          v59 = vandq_s8(vcltzq_s8(vqtbl1q_s8(vzip1q_s8((int8x16_t)v58, (int8x16_t)vdupq_laneq_s64(v58, 1)), (int8x16_t)xmmword_2160F18B0)), (int8x16_t)xmmword_2160F2980);
          v60 = vpaddq_s8(v59, v59);
          v61 = vpaddq_s8(v60, v60);
          v45 = (int16x8_t)vpaddq_s8(v61, v61);
          *(_DWORD *)(*(_QWORD *)(v27 + 32) + 4 * (v38 + v338)) = v45.u16[0] | (v57 << 16);
        }
        v62 = (_BYTE *)*((_QWORD *)a5 + 128);
        if (!v62[5] || !*(_BYTE *)(**((_QWORD **)a5 + 151) + 1364))
        {
          v63 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
          if (v63 == 5 || v63 == 3)
          {
            v64 = v62[272];
            if (v62[272])
            {
              v65 = v62 + 31;
              while (1)
              {
                v66 = *v65;
                v65 += 16;
                if (v66 == 3)
                  break;
                if (!--v64)
                  goto LABEL_58;
              }
              v74 = *((_QWORD *)a5 + 163);
              if (v340 > *(int *)(v74 + 12))
              {
                sub_2160EC880(*(pthread_mutex_t **)(v74 + 16));
                for (j = *(int *)(v74 + 12); v340 > j; j = *(int *)(v74 + 12))
                  sub_2160EC918(*(pthread_cond_t **)(v74 + 24), *(pthread_mutex_t **)(v74 + 16));
                sub_2160EC88C(*(pthread_mutex_t **)(v74 + 16));
                v30 = v326;
              }
            }
          }
        }
LABEL_58:
        result = sub_215FD648C((uint64_t)v341, v41, v45, v46);
        if ((_DWORD)result)
          goto LABEL_234;
      }
      v86 = -1;
LABEL_60:
      sub_2160CBC00((uint64_t)v341, a7);
      v17 = v343;
      if (*(_BYTE *)(v343 + 1168 * v38 + 833) || *(_BYTE *)(v343 + 1168 * v38 + 834) != 25)
      {
        v87 = (char)v48;
        v90 = a5[13] + (char)v48;
        v91 = a5[14] + (char)v48;
        if (v90 >= 0x33)
          v90 = 51;
        if (v91 >= 0x33)
          v91 = 51;
        v88 = byte_2160F5010[v90];
        v89 = byte_2160F5010[v91];
      }
      else
      {
        v87 = 0;
        v88 = 0;
        v89 = 0;
      }
      *(_WORD *)(*(_QWORD *)(v27 + 72) + 2 * v39) = v330;
      *(_BYTE *)(*(_QWORD *)(v27 + 112) + v39) = v87;
      *(_BYTE *)(*(_QWORD *)(v27 + 120) + v39) = v88;
      *(_BYTE *)(*(_QWORD *)(v27 + 128) + v39) = v89;
      *(_BYTE *)(*(_QWORD *)(v27 + 136) + v39) = *(_BYTE *)(*((_QWORD *)a5 + 127) + 3);
      *(int32x2_t *)(*(_QWORD *)(v27 + 48) + v329) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v27 + 48) + v329), (int32x2_t)vand_s8((int8x8_t)(v87 | 0x100000000), (int8x8_t)vdup_n_s32(v86)));
      ++v38;
      v92 = sub_2160AC88C(v342);
      v100 = v92;
      if (v38 >= v331)
        break;
      if (!(v92 | v37))
        goto LABEL_105;
    }
    v125 = v321;
    if (!v92)
    {
LABEL_105:
      v100 = 0;
      if (*v311)
        v125 = v321;
      else
        v125 = v38;
    }
    v334 = v125;
    if (v125 > (int)v315)
    {
      v126 = (int16x8_t *)(v343 + 1168 * (int)v315);
      v127 = v125 - v315;
      v128 = v318 + v315;
      v129 = 16 * v315;
      v130 = v317 + v315;
      do
      {
        v132 = 16 * v340;
        v131 = 32 * v340;
        if (!*(_BYTE *)v325)
        {
          v131 = 16 * v340;
          v132 = 8 * v340;
        }
        v133 = *(_QWORD *)(v325 + 32) + v129 + (v131 * *(_DWORD *)(v325 + 136));
        v134 = a5[20];
        if ((v133 & 0x3F) == 0)
        {
          if (a5[21])
            v135 = v320;
          else
            v135 = 0;
          v136 = (_DWORD)v320 << (v134 != 0);
          if (!a5[20])
            v135 = 0;
          _X13 = v133 + v135;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v136;
          __asm { PRFM            #0, [X13] }
        }
        v172 = *(_QWORD *)(v325 + 40) + v129 + (v132 * *(_DWORD *)(v325 + 152));
        if ((v172 & 0x3F) == 0)
        {
          if (a5[21])
            v173 = v319;
          else
            v173 = 0;
          _ZF = v134 == 0;
          v174 = (_DWORD)v319 << (v134 != 0);
          if (_ZF)
            v173 = 0;
          _X9 = v172 + v173;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v174;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v174;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v174;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v174;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v174;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v174;
          __asm { PRFM            #0, [X9] }
          _X8 = _X9 + v174;
          __asm { PRFM            #0, [X8] }
        }
        result = 4294958327;
        if (v130 < 0 || v130 >= *(int *)(v27 + 20))
          goto LABEL_234;
        v191 = v126[51].u32[2];
        v192 = (_OWORD *)(v327 + 48 * v191);
        if (v126[52].i8[0])
        {
          *v322 = *v192;
          v193 = v327 + 48 * v191;
          *v323 = *(_OWORD *)(v193 + 16);
          *v324 = *(_BYTE *)(v193 + 32);
          *(_QWORD *)&v194 = 0x2222222222222222;
          *((_QWORD *)&v194 + 1) = 0x2222222222222222;
          *v192 = v194;
          *(_BYTE *)(v193 + 32) = 0;
        }
        else
        {
          if (!v126[52].i8[1])
          {
            *((_DWORD *)a5 + 1) = 0;
            v199 = v126[51].i32[2];
            if (v199 + 1 == v321)
              v200 = 0;
            else
              v200 = v199 + 1;
            v201 = 0.0;
            *v314 = 0u;
            v314[1] = 0u;
            if (v199)
            {
              if (v130 > v310)
              {
                *(_QWORD *)v314 = v305 + 48 * v199;
                if (v128 > v310)
                  *((_QWORD *)a5 + 120) = v322;
              }
            }
            if (v128 >= v310)
              *((_QWORD *)a5 + 118) = v192;
            if (v200 && v128 >= v308)
              *((_QWORD *)a5 + 119) = v327 + 48 * v200;
            *((_QWORD *)a5 + 121) = v313;
            v202 = v126[51].u8[0];
            a5[912] = 0;
            v203 = v126[52].u8[2];
            if (v203 == 25)
            {
              sub_2160CC140((uint64_t)v126, (uint64_t)a5);
              *(_QWORD *)&v204 = 0x2222222222222222;
              *((_QWORD *)&v204 + 1) = 0x2222222222222222;
              *v313 = v204;
              v313[1] = v204;
LABEL_174:
              if (*((_QWORD *)a5 + 118))
              {
                *v322 = *v192;
                v206 = v327 + 48 * v191;
                *v323 = *(_OWORD *)(v206 + 16);
                *v324 = *(_BYTE *)(v206 + 32);
              }
              *v192 = *((_OWORD *)a5 + 55);
              v207 = (int32x4_t *)(v327 + 48 * v191);
              v93 = *((int32x4_t *)a5 + 56);
              v207[1] = v93;
              v207[2].i8[0] = a5[912];
              goto LABEL_134;
            }
            if (v126[52].u8[1] | v203)
            {
LABEL_163:
              sub_2160A808C((uint64_t)v126, (uint64_t)v126, (uint64_t)a5, v302);
              sub_21608DD78((uint64_t)v126, (uint64_t)a5);
            }
            else if (v126[52].i8[3] == 1)
            {
              a5[912] = 1;
              if (v202)
                sub_2160A70F8((uint64_t)v126, 0.0, (int8x16_t)v94, *(double *)v95.i64, v96, v97, (int8x16_t)v98, (uint64_t)v126, (uint64_t)a5, v297);
              sub_21608C474((uint64_t)v126, (uint64_t)a5, v201, *(double *)v94.i64, *(double *)v95.i64, v96, v97, v98, v99);
            }
            else
            {
              if (v126[52].i8[3])
                goto LABEL_163;
              if (v202)
                sub_2160A653C(v126, (uint64_t)v126, (uint64_t)a5);
              sub_2160898E4((uint64_t)v126, (uint64_t)a5);
            }
            if (v126[51].i8[1])
            {
              result = sub_2160A88F8(v126, (uint64_t)v126, (uint64_t)a5);
              if ((_DWORD)result)
                goto LABEL_234;
            }
            else
            {
              v299[14] = 0u;
              v299[15] = 0u;
              v299[12] = 0u;
              v299[13] = 0u;
              v299[10] = 0u;
              v299[11] = 0u;
              v299[8] = 0u;
              v299[9] = 0u;
              v299[6] = 0u;
              v299[7] = 0u;
              v299[4] = 0u;
              v299[5] = 0u;
              v299[2] = 0u;
              v299[3] = 0u;
              *v299 = 0u;
              v299[1] = 0u;
            }
            result = sub_21608DE70((uint64_t)v126, (int16x8_t *)a5);
            if ((_DWORD)result)
              goto LABEL_234;
            goto LABEL_174;
          }
          v196 = v126[51].i8[0];
          if (v126[52].i8[3])
          {
            if (v126[51].i8[0])
              sub_2160A70F8((uint64_t)v126, *(double *)v93.i64, (int8x16_t)v94, *(double *)v95.i64, v96, v97, (int8x16_t)v98, (uint64_t)v126, (uint64_t)a5, v306);
            v197 = v327;
            v192 = (_OWORD *)(v327 + 48 * v191 + 16);
            v196 = 1;
            v198 = v323;
          }
          else
          {
            if (v126[51].i8[0])
            {
              sub_2160A653C(v126, (uint64_t)v126, (uint64_t)a5);
              v196 = 0;
            }
            v198 = v322;
            v197 = v327;
          }
          *v198 = *v192;
          *v324 = v196;
          *(_QWORD *)&v205 = 0x2222222222222222;
          *((_QWORD *)&v205 + 1) = 0x2222222222222222;
          *v192 = v205;
          *(_BYTE *)(v197 + 48 * v191 + 32) = v196;
          if (v126[51].i8[1])
          {
            result = sub_2160A88F8(v126, (uint64_t)v126, (uint64_t)a5);
            if ((_DWORD)result)
              goto LABEL_234;
          }
        }
        v195 = *((_QWORD *)a5 + 128);
        if (*(_DWORD *)(v195 + 356) || *(_DWORD *)(v195 + 360))
          sub_216057DD8((uint64_t)v126, (uint64_t)a5);
        else
          sub_2160409DC((uint64_t)v126, (uint64_t)a5);
LABEL_134:
        v17 = v343;
        v30 = v326;
        v126 += 73;
        v129 += 16;
        ++v128;
        ++v130;
        --v127;
      }
      while (v127);
    }
    v208 = v340;
    if (!v340)
    {
      v15 = v321;
      v209 = v316;
      goto LABEL_230;
    }
    v15 = v321;
    v209 = v316;
    if (v334 != v321)
    {
LABEL_230:
      if (v100 || *v311)
      {
        v24 = 0;
        v316 = v209 + 1;
        v32 = v312 + v15;
        v16 = v331;
        v318 += v331;
        v317 += v331;
        v33 = v208 + 1;
        v34 = v307;
        continue;
      }
      if (v296 == (_DWORD)v208 + 1 && v334 == v15)
      {
        v253 = v296 - 1;
        result = sub_21609E9C8((uint64_t *)v27, v301, 0, v15, v296 - 1, v296, v93, v94, v95);
        if ((_DWORD)result)
          goto LABEL_234;
        if (*(_BYTE *)(v27 + 224))
        {
          result = sub_21609BD58(v27, 0, v321, v340, v296, v304, a14);
        }
        else
        {
          *(_DWORD *)(v27 + 268) = *v298;
          result = sub_21609B1DC(v27, 0, v321, v253, v296);
        }
        if ((_DWORD)result)
          goto LABEL_234;
        if (*(_DWORD *)(v27 + 220))
        {
          v255 = *(_QWORD *)(v303 + 32);
          v254 = *(_QWORD *)(v303 + 40);
          v256 = *(_DWORD *)(v303 + 136);
          v257 = *(_DWORD *)(v303 + 152);
          v258 = *(int *)(v303 + 100);
          if (*(_BYTE *)v303)
          {
            v259 = v256;
            v260 = v257;
            if (!*(_BYTE *)(v303 + 5))
              v260 = 0;
            v254 += v260;
            if (!*(_BYTE *)(v303 + 5))
              v259 = 0;
            v255 += v259;
            v256 *= 2;
            v257 *= 2;
          }
          v261 = *(int *)(v303 + 132);
          v262 = *(int *)(v303 + 148);
          v263 = *(int *)(v303 + 116);
          if (v296 >= 2)
            v264 = 16 * v253 - 4;
          else
            v264 = 0;
          v265 = 16 * v296;
          if (16 * v296 != (_DWORD)v258)
            v265 = 16 * v296 - 4;
          v266 = v264 >> 1;
          v267 = v265 >> 1;
          v268 = v265 - v264;
          if (v265 > v264)
          {
            v269 = (int8x16_t *)(v255 + v256 * (uint64_t)v264);
            do
            {
              v270 = vqtbl1q_s8((int8x16_t)(16843009 * v269->u8[0]), (int8x16_t)xmmword_2160EE800);
              v269[-2] = v270;
              v269[-1] = v270;
              v271 = (int8x16_t *)((char *)v269 + v261);
              v272 = vqtbl1q_s8((int8x16_t)(16843009 * v269->u8[v261 - 1]), (int8x16_t)xmmword_2160EE800);
              *v271 = v272;
              v271[1] = v272;
              v269 = (int8x16_t *)((char *)v269 + v256);
              --v268;
            }
            while (v268);
          }
          _VF = __OFSUB__(v267, v266);
          v273 = v267 - v266;
          if (!((v273 < 0) ^ _VF | (v273 == 0)))
          {
            v274 = (int8x16_t *)(v254 + v257 * (uint64_t)v266);
            do
            {
              v275 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v274->u16[-1] + v262)), (int8x16_t)xmmword_2160EE800);
              v274[-1] = vqtbl1q_s8((int8x16_t)(65537 * v274->u16[0]), (int8x16_t)xmmword_2160EE800);
              *(int8x16_t *)((char *)v274 + v262) = v275;
              v274 = (int8x16_t *)((char *)v274 + v257);
              --v273;
            }
            while (v273);
          }
          if (v296 <= 1)
          {
            v276 = 0;
            v277 = v255 - 32;
            v278 = -2 * v256;
            do
            {
              if ((int)v261 >= -63)
              {
                v279 = 0;
                do
                {
                  v280 = *(_OWORD *)(v277 + v279);
                  *(_OWORD *)(v277 - v256 + v279) = v280;
                  *(_OWORD *)(v277 + v278 + v279) = v280;
                  v236 = v279 < (int)v261 + 48;
                  v279 += 16;
                }
                while (v236);
              }
              v277 += v278;
              ++v276;
            }
            while (v276 != 10);
            v281 = 0;
            v282 = v254 - 16;
            do
            {
              if ((int)v262 >= -31)
              {
                v283 = 0;
                do
                {
                  *(_OWORD *)(v282 - v257 + v283) = *(_OWORD *)(v282 + v283);
                  v236 = v283 < (int)v262 + 16;
                  v283 += 16;
                }
                while (v236);
              }
              v282 -= v257;
              ++v281;
            }
            while (v281 != 8);
          }
          if (v265 == (_DWORD)v258)
          {
            v284 = 0;
            v285 = v256 * (v258 - 1);
            v286 = v255 + v285 - 32;
            v287 = 2 * v256;
            v288 = v285 + v287;
            v289 = v285 + v256 + v255 - 32;
            v290 = v288 + v255 - 32;
            do
            {
              if ((int)v261 >= -63)
              {
                v291 = 0;
                do
                {
                  v292 = *(_OWORD *)(v286 + v291);
                  *(_OWORD *)(v289 + v291) = v292;
                  *(_OWORD *)(v290 + v291) = v292;
                  v236 = v291 < v261 + 48;
                  v291 += 16;
                }
                while (v236);
              }
              v286 += v287;
              ++v284;
              v289 += v287;
              v290 += v287;
            }
            while (v284 != 10);
            v293 = 0;
            v294 = v254 + v257 * (v263 - 1) - 16;
            do
            {
              if ((int)v262 >= -31)
              {
                v295 = 0;
                do
                {
                  *(_OWORD *)(v294 + v257 + v295) = *(_OWORD *)(v294 + v295);
                  v236 = v295 < v262 + 16;
                  v295 += 16;
                }
                while (v236);
              }
              v294 += v257;
              ++v293;
            }
            while (v293 != 8);
          }
        }
        sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(a2 + 88) + 16));
        *(_DWORD *)(*(_QWORD *)(a2 + 88) + 12) = 0x7FFFFFFF;
        sub_2160EC90C(*(pthread_cond_t **)(*(_QWORD *)(a2 + 88) + 24));
        sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(a2 + 88) + 16));
      }
      result = 0;
      *a8 = *((_DWORD *)a5 + 248);
      goto LABEL_234;
    }
    break;
  }
  result = sub_21609E9C8((uint64_t *)v27, v301, 0, v321, v316 - 1, v340, v93, v94, v95);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v27 + 224))
    {
      if (!*(_QWORD *)(v27 + 232))
        *(_QWORD *)(v27 + 232) = sub_2160CB5FC((void *)(20 * *(_DWORD *)(v303 + 136)
                                                                    + 11 * *(_DWORD *)(v303 + 152)));
      result = sub_21609BD58(v27, 0, v321, v316 - 1, v340, v304, a14);
      v304 = 1;
    }
    else
    {
      *(_DWORD *)(v27 + 268) = *v298;
      result = sub_21609B1DC(v27, 0, v321, v316 - 1, v340);
    }
    if (!(_DWORD)result)
    {
      v209 = v316;
      v208 = v340;
      if (*(_DWORD *)(v27 + 220))
      {
        v211 = *(_QWORD *)(v303 + 32);
        v210 = *(_QWORD *)(v303 + 40);
        v212 = *(_DWORD *)(v303 + 136);
        v213 = *(_DWORD *)(v303 + 152);
        if (*(_BYTE *)v303)
        {
          v214 = v212;
          v215 = v213;
          if (!*(_BYTE *)(v303 + 5))
            v215 = 0;
          v210 += v215;
          if (!*(_BYTE *)(v303 + 5))
            v214 = 0;
          v211 += v214;
          v212 *= 2;
          v213 *= 2;
        }
        v216 = *(int *)(v303 + 132);
        v217 = *(int *)(v303 + 148);
        v218 = *(int *)(v303 + 100);
        v219 = *(int *)(v303 + 116);
        v220 = 16 * v340;
        v221 = 16 * v340 - 20;
        if (v340 < 2)
          v221 = 0;
        if (v220 != (_DWORD)v218)
          v220 -= 4;
        v222 = v220 - v221;
        if (v220 > v221)
        {
          v223 = (int8x16_t *)(v211 + v212 * (uint64_t)v221);
          do
          {
            v224 = vqtbl1q_s8((int8x16_t)(16843009 * v223->u8[0]), (int8x16_t)xmmword_2160EE800);
            v223[-2] = v224;
            v223[-1] = v224;
            v225 = (int8x16_t *)((char *)v223 + v216);
            v226 = vqtbl1q_s8((int8x16_t)(16843009 * v223->u8[v216 - 1]), (int8x16_t)xmmword_2160EE800);
            *v225 = v226;
            v225[1] = v226;
            v223 = (int8x16_t *)((char *)v223 + v212);
            --v222;
          }
          while (v222);
        }
        v227 = v221 >> 1;
        v228 = (v220 >> 1) - (v221 >> 1);
        if (v220 >> 1 > v227)
        {
          v229 = (int8x16_t *)(v210 + v213 * (uint64_t)v227);
          do
          {
            v230 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v229->u16[-1] + v217)), (int8x16_t)xmmword_2160EE800);
            v229[-1] = vqtbl1q_s8((int8x16_t)(65537 * v229->u16[0]), (int8x16_t)xmmword_2160EE800);
            *(int8x16_t *)((char *)v229 + v217) = v230;
            v229 = (int8x16_t *)((char *)v229 + v213);
            --v228;
          }
          while (v228);
        }
        if (v340 <= 1)
        {
          v231 = 0;
          v232 = v211 - 32;
          v233 = -2 * v212;
          do
          {
            if ((int)v216 >= -63)
            {
              v234 = 0;
              do
              {
                v235 = *(_OWORD *)(v232 + v234);
                *(_OWORD *)(v232 - v212 + v234) = v235;
                *(_OWORD *)(v232 + v233 + v234) = v235;
                v236 = v234 < (int)v216 + 48;
                v234 += 16;
              }
              while (v236);
            }
            v232 += v233;
            ++v231;
          }
          while (v231 != 10);
          v237 = 0;
          v238 = v210 - 16;
          do
          {
            if ((int)v217 >= -31)
            {
              v239 = 0;
              do
              {
                *(_OWORD *)(v238 - v213 + v239) = *(_OWORD *)(v238 + v239);
                v236 = v239 < (int)v217 + 16;
                v239 += 16;
              }
              while (v236);
            }
            v238 -= v213;
            ++v237;
          }
          while (v237 != 8);
        }
        if (v220 == (_DWORD)v218)
        {
          v240 = 0;
          v241 = v212 * (v218 - 1);
          v242 = v211 - 32;
          v243 = v211 - 32 + v241;
          v244 = 2 * v212;
          v245 = v242 + v241 + v212;
          v246 = v242 + v241 + v244;
          do
          {
            if ((int)v216 >= -63)
            {
              v247 = 0;
              do
              {
                v248 = *(_OWORD *)(v243 + v247);
                *(_OWORD *)(v245 + v247) = v248;
                *(_OWORD *)(v246 + v247) = v248;
                v236 = v247 < v216 + 48;
                v247 += 16;
              }
              while (v236);
            }
            v243 += v244;
            ++v240;
            v245 += v244;
            v246 += v244;
          }
          while (v240 != 10);
          v249 = 0;
          v250 = v210 + v213 * (v219 - 1) - 16;
          do
          {
            if ((int)v217 >= -31)
            {
              v251 = 0;
              do
              {
                *(_OWORD *)(v250 + v213 + v251) = *(_OWORD *)(v250 + v251);
                v236 = v251 < v217 + 16;
                v251 += 16;
              }
              while (v236);
            }
            v250 += v213;
            ++v249;
          }
          while (v249 != 8);
        }
      }
      sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(a2 + 88) + 16));
      *(_DWORD *)(*(_QWORD *)(a2 + 88) + 12) = v340 - 2;
      sub_2160EC90C(*(pthread_cond_t **)(*(_QWORD *)(a2 + 88) + 24));
      sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(a2 + 88) + 16));
      v15 = v321;
      goto LABEL_230;
    }
  }
LABEL_234:
  if (a9)
    *a9 = 0;
  if (a10)
    *a10 = 0;
  if ((_DWORD)result)
  {
    v252 = *((_DWORD *)a5 + 248);
    if (v252)
      *a8 = v252 - 1;
  }
  return result;
}

uint64_t sub_2160C1D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6, unsigned int a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, uint64_t a11, _BYTE *a12, _DWORD *a13)
{
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int v44;
  unsigned int v45;
  _BYTE *v46;
  int v47;
  int16x8_t v48;
  uint16x8_t v49;
  int64x2_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  unsigned __int16 v54;
  int64x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  _BOOL4 v64;
  uint64_t v65;
  int16x8_t v66;
  int16x8_t v67;
  _BYTE *v68;
  int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t i;
  unsigned int v75;
  unsigned int v76;
  char v77;
  char v78;
  unsigned int v79;
  unsigned int v80;
  _BOOL4 v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  double v85;
  double v86;
  int16x8_t v87;
  int16x8_t v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t j;
  int v92;
  uint64_t v93;
  int8x16_t *v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v157;
  unsigned __int32 v158;
  _OWORD *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  _OWORD *v165;
  __int32 v166;
  uint64_t v167;
  __int32 v168;
  double v169;
  int v170;
  int v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  int32x4_t *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  int8x16_t *v191;
  int8x16_t v192;
  int8x16_t *v193;
  int8x16_t v194;
  int v195;
  int v196;
  int8x16_t *v197;
  int8x16_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  BOOL v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  int v224;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int8x16_t *v241;
  int8x16_t v242;
  int8x16_t *v243;
  int8x16_t v244;
  int v245;
  int8x16_t *v246;
  int8x16_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  signed int v272;
  _DWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  BOOL v277;
  _OWORD *v278;
  _OWORD *v279;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  _OWORD *v290;
  int v291;
  _OWORD *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  __int16 v299;
  uint64_t v301;
  uint64_t v302;
  int v303;
  unsigned int v304;
  uint64_t **v305;
  uint64_t v306;
  int *v307;
  int8x16_t v308[2];
  uint64_t v309;

  v309 = *MEMORY[0x24BDAC8D0];
  v17 = a5 + 1423168;
  v18 = *(int *)(a2 + 4);
  v272 = *(_DWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 560);
  v296 = *(_QWORD *)(a2 + 568);
  a5[12] = a5[1423168];
  v20 = *((_QWORD *)a5 + 127);
  a5[13] = *(_BYTE *)(v20 + 56);
  a5[14] = *(_BYTE *)(v20 + 57);
  *((_DWORD *)a5 + 4) = *((_DWORD *)a5 + 249);
  v307 = (int *)(a5 + 976);
  *((_WORD *)a5 + 10) = *(_WORD *)(a5 + 1005);
  a5[24] = a5[1164];
  v21 = *((_QWORD *)a5 + 149);
  a5[22] = *(_BYTE *)(v21 + 1363);
  a5[23] = 0;
  *((_QWORD *)a5 + 8) = a5 + 1200;
  *((_QWORD *)a5 + 9) = v21 + 32;
  *((_QWORD *)a5 + 10) = *((_QWORD *)a5 + 164);
  a5[928] = *(_BYTE *)(*((_QWORD *)a5 + 128) + 4);
  a5[36] = 0;
  *((_QWORD *)a5 + 11) = v21;
  *((_DWORD *)a5 + 24) = *((_DWORD *)a5 + 265);
  v22 = (uint64_t **)*((_QWORD *)a5 + 147);
  *a5 = *((_DWORD *)a5 + 357066) + *(_BYTE *)(a4 + 72) + 26;
  v302 = (uint64_t)(a5 + 1425504);
  sub_215FC147C(v22, a3, a4, (uint64_t)(a5 + 1425544), (uint64_t)(a5 + 1425504));
  v275 = a2;
  v23 = (63 * *(_DWORD *)(a2 + 156)) >> 6;
  v24 = a6;
  v299 = a6;
  v25 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)a5 + 164) + 48) + 12 * a6);
  *v25 = v23;
  v25[1] = 1;
  v26 = *((_DWORD *)v17 + 598);
  if (a5[1161])
  {
    v27 = v26 % (2 * (int)v18) / 2;
    v28 = *((_DWORD *)v17 + 598) & 1;
    if (a5[1007] + 2 * (v26 / (2 * (int)v18)) != 1)
      v28 = 0;
  }
  else
  {
    v28 = v26 / (int)v18;
    v27 = v26 % (int)v18;
  }
  v306 = *((int *)v17 + 598);
  v291 = v28;
  v277 = v28 != 0;
  if (a12)
    *a12 = 1;
  v276 = *((_QWORD *)a5 + 149) + 1152;
  v29 = *((_QWORD *)a5 + 9);
  v30 = *((_QWORD *)a5 + 10);
  *(_QWORD *)(v30 + 80) = v29;
  v274 = v29;
  LODWORD(v29) = *(_DWORD *)(v29 + 100) >> 4;
  *(_DWORD *)(v30 + 8) = v29;
  *(_DWORD *)(v30 + 20) = *(_DWORD *)(v30 + 12) * v29;
  v297 = *((_QWORD *)a5 + 127);
  sub_215FC1468((uint64_t)v22);
  v31 = v296 + 48 * (int)v18;
  v292 = (_OWORD *)(v31 + 16);
  v32 = *((_QWORD *)a5 + 9);
  v290 = (_OWORD *)v31;
  v294 = (char *)(v31 + 32);
  v295 = v32;
  v284 = *(int *)(v32 + 152);
  v285 = *(int *)(v32 + 136);
  v279 = a5 + 936;
  v273 = (_DWORD *)(a1 + 5041852);
  v33 = v291 * v18;
  v34 = v291;
  v283 = (v291 - 1) * v18;
  v282 = (int)v18 * (uint64_t)v291;
  v298 = 12 * v24;
  v305 = v22;
  v301 = v18;
  v278 = a5 + 880;
  do
  {
    v281 = v33;
    v35 = v34 * v18;
    v303 = v27 + v33;
    v36 = v27;
    v293 = v34;
    v304 = v34;
    v287 = v27;
    do
    {
      v37 = v36 + v35;
      v38 = 4294958327;
      if (v36 + v35 >= *(int *)(v30 + 20) || v303 < 0)
        goto LABEL_202;
      v39 = (_DWORD *)(v19 + 1168 * v36);
      **((_DWORD **)a5 + 144) = v37;
      *((_DWORD *)a5 + 248) = v37;
      *((_DWORD *)a5 + 244) = v36;
      *((_DWORD *)a5 + 245) = v304;
      v39[205] = v37;
      v39[206] = v36;
      v39[207] = v304;
      sub_215FCF138(v306, *((_QWORD **)a5 + 182281), v307);
      v40 = a5[1004];
      if (v40 <= 9 && ((1 << v40) & 0x294) != 0)
      {
        *(_BYTE *)(v19 + 1168 * v36 + 832) = 0;
LABEL_14:
        v308[0] = 0uLL;
        v41 = sub_215FC17F8(v22, (unsigned __int16 *)v307, v302, v19 + 1168 * v36, (uint64_t)v308);
        if ((_DWORD)v41)
          goto LABEL_200;
        *((_DWORD *)a5 + 2) = 1;
        v44 = *(char *)(v297 + 54);
        if ((*(_BYTE *)(v297 + 54) - 26) < 0xCCu)
          goto LABEL_202;
        v45 = v44
            + *a5
            + 52
            - 52 * (((20165 * (v44 + *a5 + 52)) >> 20) + ((20165 * (v44 + *a5 + 52)) >> 31));
        *a5 = v44 + *a5 + 52 - 52 * (((20165 * (v44 + *a5 + 52)) >> 20) + (20165 * (v44 + *a5 + 52) < 0));
        v46 = (_BYTE *)(v19 + 1168 * v36);
        v46[818] = v45;
        v47 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
        v46[833] = v47;
        v46[834] = *(_BYTE *)(*((_QWORD *)a5 + 127) + 2);
        v46[835] = *(_BYTE *)(*((_QWORD *)a5 + 127) + 3);
        if (v47)
        {
          if (*(_BYTE *)(v19 + 1168 * v36 + 816))
          {
            v48 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vcgtzq_s8(v308[0]), (int8x16_t)xmmword_2160F2B40), (int8x16_t)xmmword_2160F2B50);
            v49.i64[0] = 0x7000700070007;
            v49.i64[1] = 0x7000700070007;
            v50 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s16(v48, 8uLL), (int8x16_t)vshlq_u16((uint16x8_t)v48, v49));
            v51 = vandq_s8(vcltzq_s8((int8x16_t)v50), (int8x16_t)xmmword_2160F2980);
            v52 = vpaddq_s8(v51, v51);
            v53 = vpaddq_s8(v52, v52);
            v54 = vpaddq_s8(v53, v53).u16[0];
            v55 = (int64x2_t)vzip1q_s8((int8x16_t)vdupq_laneq_s64(v50, 1), (int8x16_t)v50);
            v43 = (int16x8_t)xmmword_2160F18B0;
            v56 = vandq_s8(vcltzq_s8(vqtbl1q_s8(vzip1q_s8((int8x16_t)v55, (int8x16_t)vdupq_laneq_s64(v55, 1)), (int8x16_t)xmmword_2160F18B0)), (int8x16_t)xmmword_2160F2980);
            v57 = vpaddq_s8(v56, v56);
            v58 = vpaddq_s8(v57, v57);
            v42 = (int16x8_t)vpaddq_s8(v58, v58);
            *(_DWORD *)(*(_QWORD *)(v30 + 32) + 4 * (v36 + v35)) = v42.u16[0] | (v54 << 16);
          }
          v59 = (_BYTE *)*((_QWORD *)a5 + 128);
          if (!v59[5] || !*(_BYTE *)(**((_QWORD **)a5 + 151) + 1364))
          {
            v60 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
            if (v60 == 5 || v60 == 3)
            {
              v61 = v59[272];
              if (v59[272])
              {
                v62 = v59 + 31;
                while (1)
                {
                  v63 = *v62;
                  v62 += 16;
                  if (v63 == 3)
                    break;
                  if (!--v61)
                    goto LABEL_44;
                }
                v73 = *((_QWORD *)a5 + 163);
                if (v293 > *(int *)(v73 + 12))
                {
                  sub_2160EC880(*(pthread_mutex_t **)(v73 + 16));
                  for (i = *(int *)(v73 + 12); v293 > i; i = *(int *)(v73 + 12))
                    sub_2160EC918(*(pthread_cond_t **)(v73 + 24), *(pthread_mutex_t **)(v73 + 16));
                  sub_2160EC88C(*(pthread_mutex_t **)(v73 + 16));
                }
              }
            }
          }
LABEL_44:
          v65 = sub_215FD648C((uint64_t)v307, v19 + 1168 * v36, v42, v43);
          if ((_DWORD)v65)
            goto LABEL_201;
        }
        v75 = -1;
        goto LABEL_46;
      }
      v64 = sub_215FC1768(v22, v36);
      *(_BYTE *)(v19 + 1168 * v36 + 832) = v64;
      if (!v64)
        goto LABEL_14;
      LOBYTE(v45) = *a5;
      *((_DWORD *)a5 + 2) = 0;
      v65 = sub_2160CC524((uint64_t)v307);
      if ((_DWORD)v65)
        goto LABEL_201;
      v68 = (_BYTE *)*((_QWORD *)a5 + 128);
      if (!v68[5] || !*(_BYTE *)(**((_QWORD **)a5 + 151) + 1364))
      {
        v69 = *(unsigned __int8 *)(*((_QWORD *)a5 + 127) + 1);
        if (v69 == 5 || v69 == 3)
        {
          v70 = v68[272];
          if (v68[272])
          {
            v71 = v68 + 31;
            while (1)
            {
              v72 = *v71;
              v71 += 16;
              if (v72 == 3)
                break;
              if (!--v70)
                goto LABEL_62;
            }
            v90 = *((_QWORD *)a5 + 163);
            if (v293 > *(int *)(v90 + 12))
            {
              sub_2160EC880(*(pthread_mutex_t **)(v90 + 16));
              for (j = *(int *)(v90 + 12); v293 > j; j = *(int *)(v90 + 12))
                sub_2160EC918(*(pthread_cond_t **)(v90 + 24), *(pthread_mutex_t **)(v90 + 16));
              sub_2160EC88C(*(pthread_mutex_t **)(v90 + 16));
            }
          }
        }
      }
LABEL_62:
      v65 = sub_215FD648C((uint64_t)v307, v19 + 1168 * v36, v66, v67);
      if ((_DWORD)v65)
      {
LABEL_201:
        v38 = v65;
        v22 = v305;
        goto LABEL_202;
      }
      v75 = 0;
LABEL_46:
      sub_215FCF1E4(v307, a7, (int64x2_t)v42);
      if (*(_BYTE *)(v19 + 1168 * v36 + 833) || *(_BYTE *)(v19 + 1168 * v36 + 834) != 25)
      {
        v76 = (char)v45;
        v79 = a5[13] + (char)v45;
        v80 = a5[14] + (char)v45;
        if (v79 >= 0x33)
          v79 = 51;
        if (v80 >= 0x33)
          v80 = 51;
        v77 = byte_2160F5010[v79];
        v78 = byte_2160F5010[v80];
      }
      else
      {
        v76 = 0;
        v77 = 0;
        v78 = 0;
      }
      *(_WORD *)(*(_QWORD *)(v30 + 72) + 2 * v37) = v299;
      *(_BYTE *)(*(_QWORD *)(v30 + 112) + v37) = v76;
      *(_BYTE *)(*(_QWORD *)(v30 + 120) + v37) = v77;
      *(_BYTE *)(*(_QWORD *)(v30 + 128) + v37) = v78;
      *(_BYTE *)(*(_QWORD *)(v30 + 136) + v37) = *(_BYTE *)(*((_QWORD *)a5 + 127) + 3);
      *(int32x2_t *)(*(_QWORD *)(v30 + 48) + v298) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v30 + 48) + v298), (int32x2_t)vand_s8((int8x8_t)(v76 | 0x100000000), (int8x8_t)vdup_n_s32(v75)));
      ++v36;
      v22 = v305;
      v81 = sub_215FC17EC(v305);
      v89 = v81;
    }
    while (v36 < v301 && !v81);
    v92 = v301;
    if (v81)
      v92 = v36;
    v271 = v92;
    if (v92 > (int)v287)
    {
      v93 = 0;
      v94 = (int8x16_t *)(v19 + 1168 * (int)v287);
      v286 = v92 - v287;
      v95 = 16 * v287;
      v289 = v287 + v281;
      v270 = v283 + v287;
      v288 = v282 + v287;
      while (1)
      {
        v96 = 32 * v304;
        v97 = 16 * v304;
        if (!*(_BYTE *)v295)
        {
          v96 = 16 * v304;
          v97 = 8 * v304;
        }
        v98 = *(_QWORD *)(v295 + 32) + v95 + (v96 * *(_DWORD *)(v295 + 136));
        v99 = a5[20];
        if ((v98 & 0x3F) == 0)
        {
          if (a5[21])
            v100 = v285;
          else
            v100 = 0;
          v101 = (_DWORD)v285 << (v99 != 0);
          if (!a5[20])
            v100 = 0;
          _X13 = v98 + v100;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v101;
          __asm { PRFM            #0, [X13] }
        }
        v138 = *(_QWORD *)(v295 + 40) + v95 + (v97 * *(_DWORD *)(v295 + 152));
        if ((v138 & 0x3F) == 0)
        {
          if (a5[21])
            v139 = v284;
          else
            v139 = 0;
          _ZF = v99 == 0;
          v140 = (_DWORD)v284 << (v99 != 0);
          if (_ZF)
            v139 = 0;
          _X9 = v138 + v139;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v140;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v140;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v140;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v140;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v140;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v140;
          __asm { PRFM            #0, [X9] }
          _X8 = _X9 + v140;
          __asm { PRFM            #0, [X8] }
        }
        *((_DWORD *)a5 + 248) = v289 + v93;
        v38 = 4294958327;
        v157 = v288 + v93;
        if (v288 + v93 < 0 || v157 >= *(int *)(v30 + 20))
          goto LABEL_202;
        v158 = v94[51].u32[2];
        v159 = (_OWORD *)(v296 + 48 * v158);
        if (v94[52].i8[0])
          break;
        if (!v94[52].i8[1])
        {
          *((_DWORD *)a5 + 1) = 0;
          v166 = v94[51].i32[2];
          v167 = v270 + v93;
          if (v166 + 1 == (_DWORD)v301)
            v168 = 0;
          else
            v168 = v166 + 1;
          v169 = 0.0;
          *v279 = 0u;
          *(_OWORD *)(a5 + 952) = 0u;
          if (v166)
          {
            if (v157 > v306)
            {
              *(_QWORD *)v279 = v296 - 48 + 48 * v166;
              if (v167 > v306)
                *((_QWORD *)a5 + 120) = v290;
            }
          }
          if (v167 >= v306)
            *((_QWORD *)a5 + 118) = v159;
          if (v168 && v167 >= v306 - 1)
            *((_QWORD *)a5 + 119) = v296 + 48 * v168;
          *((_QWORD *)a5 + 121) = v278;
          v170 = v94[51].u8[0];
          a5[912] = 0;
          v171 = v94[52].u8[2];
          if (v171 == 25)
          {
            sub_2160CC140((uint64_t)v94, (uint64_t)a5);
            *(_QWORD *)&v172 = 0x2222222222222222;
            *((_QWORD *)&v172 + 1) = 0x2222222222222222;
            *v278 = v172;
            *((_OWORD *)a5 + 56) = v172;
            goto LABEL_132;
          }
          if (v94[52].u8[1] | v171)
          {
LABEL_120:
            sub_2160A78E8(v94, (uint64_t)v94, (uint64_t)a5, (uint64_t)(a5 + 1425168));
            sub_21608DC74((uint64_t)v94, (uint64_t)a5);
          }
          else if (v94[52].i8[3] == 1)
          {
            a5[912] = 1;
            if (v170)
              sub_2160A6904(v94, 0.0, *(double *)v83.i64, (int8x16_t)v84, v85, v86, (int8x16_t)v87, (uint64_t)v94, (uint64_t)a5, (uint64_t)(a5 + 1423632));
            sub_21608C474((uint64_t)v94, (uint64_t)a5, v169, *(double *)v83.i64, *(double *)v84.i64, v85, v86, v87, v88);
          }
          else
          {
            if (v94[52].i8[3])
              goto LABEL_120;
            if (v170)
              sub_2160A60C4(v94, (uint64_t)v94, (uint64_t)a5);
            sub_2160898E4((uint64_t)v94, (uint64_t)a5);
          }
          if (v94[51].i8[1])
          {
            v65 = sub_2160A8384((int16x8_t *)v94, (uint64_t)v94, (uint64_t)a5);
            if ((_DWORD)v65)
              goto LABEL_201;
          }
          else
          {
            *((_OWORD *)a5 + 53) = 0u;
            *((_OWORD *)a5 + 54) = 0u;
            *((_OWORD *)a5 + 51) = 0u;
            *((_OWORD *)a5 + 52) = 0u;
            *((_OWORD *)a5 + 49) = 0u;
            *((_OWORD *)a5 + 50) = 0u;
            *((_OWORD *)a5 + 47) = 0u;
            *((_OWORD *)a5 + 48) = 0u;
            *((_OWORD *)a5 + 45) = 0u;
            *((_OWORD *)a5 + 46) = 0u;
            *((_OWORD *)a5 + 43) = 0u;
            *((_OWORD *)a5 + 44) = 0u;
            *((_OWORD *)a5 + 41) = 0u;
            *((_OWORD *)a5 + 42) = 0u;
            *((_OWORD *)a5 + 39) = 0u;
            *((_OWORD *)a5 + 40) = 0u;
          }
          v65 = sub_21608DE70((uint64_t)v94, (int16x8_t *)a5);
          if ((_DWORD)v65)
            goto LABEL_201;
LABEL_132:
          if (*((_QWORD *)a5 + 118))
          {
            *v290 = *v159;
            v175 = v296 + 48 * v158;
            *v292 = *(_OWORD *)(v175 + 16);
            *v294 = *(_BYTE *)(v175 + 32);
          }
          *v159 = *((_OWORD *)a5 + 55);
          v176 = (int32x4_t *)(v296 + 48 * v158);
          v82 = *((int32x4_t *)a5 + 56);
          v176[1] = v82;
          v176[2].i8[0] = a5[912];
LABEL_135:
          v22 = v305;
          goto LABEL_136;
        }
        v163 = v94[51].i8[0];
        if (v94[52].i8[3])
        {
          if (v94[51].i8[0])
            sub_2160A6904(v94, *(double *)v82.i64, *(double *)v83.i64, (int8x16_t)v84, v85, v86, (int8x16_t)v87, (uint64_t)v94, (uint64_t)a5, (uint64_t)(a5 + 1424400));
          v164 = v296;
          v159 = (_OWORD *)(v296 + 48 * v158 + 16);
          v163 = 1;
          v165 = v292;
        }
        else
        {
          if (v94[51].i8[0])
          {
            sub_2160A60C4(v94, (uint64_t)v94, (uint64_t)a5);
            v163 = 0;
          }
          v165 = v290;
          v164 = v296;
        }
        *v165 = *v159;
        *v294 = v163;
        *(_QWORD *)&v173 = 0x2222222222222222;
        *((_QWORD *)&v173 + 1) = 0x2222222222222222;
        *v159 = v173;
        *(_BYTE *)(v164 + 48 * v158 + 32) = v163;
        if (v94[51].i8[1])
        {
          v65 = sub_2160A8384((int16x8_t *)v94, (uint64_t)v94, (uint64_t)a5);
          if ((_DWORD)v65)
            goto LABEL_201;
        }
        v174 = *((_QWORD *)a5 + 128);
        v22 = v305;
        if (*(_DWORD *)(v174 + 356) || *(_DWORD *)(v174 + 360))
          sub_21604B778((uint64_t)v94, (uint64_t)a5);
        else
          sub_2160379A8((uint64_t)v94, (uint64_t)a5);
LABEL_136:
        v94 += 73;
        ++v93;
        v95 += 16;
        if (v286 == (_DWORD)v93)
          goto LABEL_141;
      }
      *v290 = *v159;
      v160 = v296 + 48 * v158;
      *v292 = *(_OWORD *)(v160 + 16);
      *v294 = *(_BYTE *)(v160 + 32);
      *(_QWORD *)&v161 = 0x2222222222222222;
      *((_QWORD *)&v161 + 1) = 0x2222222222222222;
      *v159 = v161;
      *(_BYTE *)(v160 + 32) = 0;
      v162 = *((_QWORD *)a5 + 128);
      if (*(_DWORD *)(v162 + 356) || *(_DWORD *)(v162 + 360))
        sub_21604B778((uint64_t)v94, (uint64_t)a5);
      else
        sub_2160379A8((uint64_t)v94, (uint64_t)a5);
      goto LABEL_135;
    }
LABEL_141:
    if (v293)
    {
      v18 = v301;
      if (v271 == (_DWORD)v301)
      {
        v177 = v291 - 1;
        v41 = sub_21609E9C8((uint64_t *)v30, v276, 0, v301, v291 - 1, v304, v82, v83, v84);
        if ((_DWORD)v41)
        {
LABEL_200:
          v38 = v41;
          goto LABEL_202;
        }
        if (*(_BYTE *)(v30 + 224))
        {
          if (!*(_QWORD *)(v30 + 232))
            *(_QWORD *)(v30 + 232) = sub_2160CB5FC((void *)(20 * *(_DWORD *)(v274 + 136)
                                                                        + 11 * *(_DWORD *)(v274 + 152)));
          v38 = sub_21609BD58(v30, 0, v301, v177, v304, v277, a13);
          v277 = 1;
        }
        else
        {
          *(_DWORD *)(v30 + 268) = *v273;
          v38 = sub_21609B1DC(v30, 0, v301, v177, v304);
        }
        if ((_DWORD)v38)
          goto LABEL_202;
        if (*(_DWORD *)(v30 + 220))
        {
          v179 = *(_QWORD *)(v274 + 32);
          v178 = *(_QWORD *)(v274 + 40);
          v180 = *(_DWORD *)(v274 + 136);
          v181 = *(_DWORD *)(v274 + 152);
          if (*(_BYTE *)v274)
          {
            v182 = v180;
            v183 = v181;
            if (!*(_BYTE *)(v274 + 5))
              v183 = 0;
            v178 += v183;
            if (!*(_BYTE *)(v274 + 5))
              v182 = 0;
            v179 += v182;
            v180 *= 2;
            v181 *= 2;
          }
          v184 = *(int *)(v274 + 132);
          v185 = *(int *)(v274 + 148);
          v186 = *(int *)(v274 + 100);
          v187 = *(int *)(v274 + 116);
          v188 = 16 * v304;
          v189 = 16 * v304 - 20;
          if (v293 < 2)
            v189 = 0;
          if (v188 != (_DWORD)v186)
            v188 -= 4;
          v190 = v188 - v189;
          if (v188 > v189)
          {
            v191 = (int8x16_t *)(v179 + v180 * (uint64_t)v189);
            do
            {
              v192 = vqtbl1q_s8((int8x16_t)(16843009 * v191->u8[0]), (int8x16_t)xmmword_2160EE800);
              v191[-2] = v192;
              v191[-1] = v192;
              v193 = (int8x16_t *)((char *)v191 + v184);
              v194 = vqtbl1q_s8((int8x16_t)(16843009 * v191->u8[v184 - 1]), (int8x16_t)xmmword_2160EE800);
              *v193 = v194;
              v193[1] = v194;
              v191 = (int8x16_t *)((char *)v191 + v180);
              --v190;
            }
            while (v190);
          }
          v195 = v189 >> 1;
          v196 = (v188 >> 1) - (v189 >> 1);
          if (v188 >> 1 > v195)
          {
            v197 = (int8x16_t *)(v178 + v181 * (uint64_t)v195);
            do
            {
              v198 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v197->u16[-1] + v185)), (int8x16_t)xmmword_2160EE800);
              v197[-1] = vqtbl1q_s8((int8x16_t)(65537 * v197->u16[0]), (int8x16_t)xmmword_2160EE800);
              *(int8x16_t *)((char *)v197 + v185) = v198;
              v197 = (int8x16_t *)((char *)v197 + v181);
              --v196;
            }
            while (v196);
          }
          if (v293 <= 1)
          {
            v199 = 0;
            v200 = v179 - 32;
            v201 = -2 * v180;
            do
            {
              if ((int)v184 >= -63)
              {
                v202 = 0;
                do
                {
                  v203 = *(_OWORD *)(v200 + v202);
                  *(_OWORD *)(v200 - v180 + v202) = v203;
                  *(_OWORD *)(v200 + v201 + v202) = v203;
                  v204 = v202 < (int)v184 + 48;
                  v202 += 16;
                }
                while (v204);
              }
              v200 += v201;
              ++v199;
            }
            while (v199 != 10);
            v205 = 0;
            v206 = v178 - 16;
            do
            {
              if ((int)v185 >= -31)
              {
                v207 = 0;
                do
                {
                  *(_OWORD *)(v206 - v181 + v207) = *(_OWORD *)(v206 + v207);
                  v204 = v207 < (int)v185 + 16;
                  v207 += 16;
                }
                while (v204);
              }
              v206 -= v181;
              ++v205;
            }
            while (v205 != 8);
          }
          if (v188 == (_DWORD)v186)
          {
            v208 = 0;
            v209 = v180 * (v186 - 1);
            v210 = v179 - 32;
            v211 = v179 - 32 + v209;
            v212 = 2 * v180;
            v213 = v210 + v209 + v180;
            v214 = v210 + v209 + v212;
            do
            {
              if ((int)v184 >= -63)
              {
                v215 = 0;
                do
                {
                  v216 = *(_OWORD *)(v211 + v215);
                  *(_OWORD *)(v213 + v215) = v216;
                  *(_OWORD *)(v214 + v215) = v216;
                  v204 = v215 < v184 + 48;
                  v215 += 16;
                }
                while (v204);
              }
              v211 += v212;
              ++v208;
              v213 += v212;
              v214 += v212;
            }
            while (v208 != 10);
            v217 = 0;
            v218 = v178 + v181 * (v187 - 1) - 16;
            do
            {
              if ((int)v185 >= -31)
              {
                v219 = 0;
                do
                {
                  *(_OWORD *)(v218 + v181 + v219) = *(_OWORD *)(v218 + v219);
                  v204 = v219 < v185 + 16;
                  v219 += 16;
                }
                while (v204);
              }
              v218 += v181;
              ++v217;
            }
            while (v217 != 8);
          }
        }
        sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(v275 + 88) + 16));
        *(_DWORD *)(*(_QWORD *)(v275 + 88) + 12) = v304 - 2;
        v220 = *(_QWORD *)(v275 + 88);
        v221 = *(_QWORD *)(v220 + 1352);
        if (v221 && *(_BYTE *)(v221 + 36))
        {
          *(_DWORD *)(v221 + 12) = *(_DWORD *)(v220 + 12);
          v220 = *(_QWORD *)(v275 + 88);
        }
        v18 = v301;
        sub_2160EC90C(*(pthread_cond_t **)(v220 + 24));
        sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(v275 + 88) + 16));
      }
    }
    else
    {
      v18 = v301;
    }
    v27 = 0;
    v34 = v293 + 1;
    ++v291;
    v33 = v281 + v18;
    v283 += v18;
    v282 += v18;
  }
  while (!v89);
  if (v272 != (_DWORD)v34 || v271 != (_DWORD)v18)
    goto LABEL_256;
  v222 = v272 - 1;
  v38 = sub_21609E9C8((uint64_t *)v30, v276, 0, v18, v272 - 1, v272, v82, v83, v84);
  if (!(_DWORD)v38)
  {
    if (*(_BYTE *)(v30 + 224))
    {
      v223 = sub_21609BD58(v30, 0, v301, v304, v272, v277, a13);
    }
    else
    {
      *(_DWORD *)(v30 + 268) = *v273;
      v223 = sub_21609B1DC(v30, 0, v301, v222, v272);
    }
    v38 = v223;
    if (!(_DWORD)v223)
    {
      if (*(_DWORD *)(v30 + 220))
      {
        v227 = *(_QWORD *)(v274 + 32);
        v226 = *(_QWORD *)(v274 + 40);
        v228 = *(_DWORD *)(v274 + 136);
        v229 = *(_DWORD *)(v274 + 152);
        v230 = *(int *)(v274 + 100);
        if (*(_BYTE *)v274)
        {
          v231 = v228;
          v232 = v229;
          if (!*(_BYTE *)(v274 + 5))
            v232 = 0;
          v226 += v232;
          if (!*(_BYTE *)(v274 + 5))
            v231 = 0;
          v227 += v231;
          v228 *= 2;
          v229 *= 2;
        }
        v233 = *(int *)(v274 + 132);
        v234 = *(int *)(v274 + 148);
        v235 = *(int *)(v274 + 116);
        if (v272 >= 2)
          v236 = 16 * v222 - 4;
        else
          v236 = 0;
        v237 = 16 * v272;
        if (16 * v272 != (_DWORD)v230)
          v237 = 16 * v272 - 4;
        v238 = v236 >> 1;
        v239 = v237 >> 1;
        v240 = v237 - v236;
        if (v237 > v236)
        {
          v241 = (int8x16_t *)(v227 + v228 * (uint64_t)v236);
          do
          {
            v242 = vqtbl1q_s8((int8x16_t)(16843009 * v241->u8[0]), (int8x16_t)xmmword_2160EE800);
            v241[-2] = v242;
            v241[-1] = v242;
            v243 = (int8x16_t *)((char *)v241 + v233);
            v244 = vqtbl1q_s8((int8x16_t)(16843009 * v241->u8[v233 - 1]), (int8x16_t)xmmword_2160EE800);
            *v243 = v244;
            v243[1] = v244;
            v241 = (int8x16_t *)((char *)v241 + v228);
            --v240;
          }
          while (v240);
        }
        _VF = __OFSUB__(v239, v238);
        v245 = v239 - v238;
        if (!((v245 < 0) ^ _VF | (v245 == 0)))
        {
          v246 = (int8x16_t *)(v226 + v229 * (uint64_t)v238);
          do
          {
            v247 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v246->u16[-1] + v234)), (int8x16_t)xmmword_2160EE800);
            v246[-1] = vqtbl1q_s8((int8x16_t)(65537 * v246->u16[0]), (int8x16_t)xmmword_2160EE800);
            *(int8x16_t *)((char *)v246 + v234) = v247;
            v246 = (int8x16_t *)((char *)v246 + v229);
            --v245;
          }
          while (v245);
        }
        if (v272 <= 1)
        {
          v248 = 0;
          v249 = v227 - 32;
          v250 = -2 * v228;
          do
          {
            if ((int)v233 >= -63)
            {
              v251 = 0;
              do
              {
                v252 = *(_OWORD *)(v249 + v251);
                *(_OWORD *)(v249 - v228 + v251) = v252;
                *(_OWORD *)(v249 + v250 + v251) = v252;
                v204 = v251 < (int)v233 + 48;
                v251 += 16;
              }
              while (v204);
            }
            v249 += v250;
            ++v248;
          }
          while (v248 != 10);
          v253 = 0;
          v254 = v226 - 16;
          do
          {
            if ((int)v234 >= -31)
            {
              v255 = 0;
              do
              {
                *(_OWORD *)(v254 - v229 + v255) = *(_OWORD *)(v254 + v255);
                v204 = v255 < (int)v234 + 16;
                v255 += 16;
              }
              while (v204);
            }
            v254 -= v229;
            ++v253;
          }
          while (v253 != 8);
        }
        if (v237 == (_DWORD)v230)
        {
          v256 = 0;
          v257 = v228 * (v230 - 1);
          v258 = v227 + v257 - 32;
          v259 = 2 * v228;
          v260 = v257 + v259;
          v261 = v257 + v228 + v227 - 32;
          v262 = v260 + v227 - 32;
          do
          {
            if ((int)v233 >= -63)
            {
              v263 = 0;
              do
              {
                v264 = *(_OWORD *)(v258 + v263);
                *(_OWORD *)(v261 + v263) = v264;
                *(_OWORD *)(v262 + v263) = v264;
                v204 = v263 < v233 + 48;
                v263 += 16;
              }
              while (v204);
            }
            v258 += v259;
            ++v256;
            v261 += v259;
            v262 += v259;
          }
          while (v256 != 10);
          v265 = 0;
          v266 = v226 + v229 * (v235 - 1) - 16;
          do
          {
            if ((int)v234 >= -31)
            {
              v267 = 0;
              do
              {
                *(_OWORD *)(v266 + v229 + v267) = *(_OWORD *)(v266 + v267);
                v204 = v267 < v234 + 16;
                v267 += 16;
              }
              while (v204);
            }
            v266 += v229;
            ++v265;
          }
          while (v265 != 8);
        }
      }
      sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(v275 + 88) + 16));
      *(_DWORD *)(*(_QWORD *)(v275 + 88) + 12) = 0x7FFFFFFF;
      v268 = *(_QWORD *)(v275 + 88);
      v269 = *(_QWORD *)(v268 + 1352);
      if (v269 && *(_BYTE *)(v269 + 36))
      {
        *(_DWORD *)(v269 + 12) = 0x7FFFFFFF;
        v268 = *(_QWORD *)(v275 + 88);
      }
      sub_2160EC90C(*(pthread_cond_t **)(v268 + 24));
      sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(v275 + 88) + 16));
LABEL_256:
      v38 = 0;
      *a8 = *((_DWORD *)a5 + 248);
    }
  }
LABEL_202:
  sub_215FC1684((uint64_t)v22);
  if (a9)
    *a9 = 0;
  if (a10)
    *a10 = 0;
  sub_215FC1698(v22, v302);
  if ((_DWORD)v38)
  {
    v224 = *((_DWORD *)a5 + 248);
    if (v224)
      *a8 = v224 - 1;
  }
  return v38;
}

uint64_t sub_2160C32D0(uint64_t a1, uint64_t a2, int32x4_t a3, int32x4_t a4, int8x16_t a5, uint64_t a6, uint64_t a7, char *a8, int a9, unsigned int a10, _DWORD *a11, _DWORD *a12, _DWORD *a13, unsigned __int8 a14, int a15, _BYTE *a16, _DWORD *a17)
{
  signed int v18;
  signed int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  int v27;
  _DWORD *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  signed int v35;
  int v36;
  uint64_t *v37;
  signed int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int8x16_t *v50;
  int16x8_t v51;
  int16x8_t v52;
  int v53;
  unsigned int v54;
  _BYTE *v55;
  int v56;
  int16x8_t v57;
  uint16x8_t v58;
  int64x2_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  unsigned __int16 v63;
  int64x2_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  _BYTE *v68;
  int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  int16x8_t v73;
  int16x8_t v74;
  _BYTE *v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  uint64_t j;
  uint64_t v82;
  unsigned int *v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  char v94;
  char v95;
  unsigned int v96;
  unsigned int v97;
  _BOOL4 v98;
  double v99;
  double v100;
  int16x8_t v101;
  int16x8_t v102;
  _BOOL4 v103;
  unint64_t v104;
  int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  char v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t i;
  unint64_t v126;
  unsigned int *v127;
  int v128;
  uint64_t v129;
  int8x16_t *v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v192;
  unsigned __int32 v193;
  _OWORD *v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  _OWORD *v200;
  __int32 v201;
  uint64_t v202;
  __int32 v203;
  double v204;
  int v205;
  int v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  __n128 *v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  int8x16_t *v226;
  int8x16_t v227;
  int8x16_t *v228;
  int8x16_t v229;
  int v230;
  int v231;
  int8x16_t *v232;
  int8x16_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  BOOL v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  signed int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int8x16_t *v283;
  int8x16_t v284;
  int8x16_t *v285;
  int8x16_t v286;
  int v287;
  int8x16_t *v288;
  int8x16_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  _DWORD *v315;
  uint64_t v316;
  signed int v317;
  uint64_t v318;
  uint64_t v319;
  BOOL v320;
  _OWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  _OWORD *v332;
  __int16 v333;
  signed int *v334;
  uint64_t v335;
  uint64_t v336;
  _OWORD *v337;
  signed int v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  _OWORD *v343;
  _OWORD *v344;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t *v352;
  char *v353;
  int v354;
  uint64_t v355;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  int *v361;
  uint64_t v362;

  v18 = *(_DWORD *)(a2 + 4);
  v19 = *(_DWORD *)(a2 + 16);
  v361 = (int *)(a8 + 976);
  v362 = *(_QWORD *)(a2 + 560);
  v20 = *(_QWORD *)(a2 + 568);
  a8[12] = a8[1423168];
  v21 = *((_QWORD *)a8 + 127);
  a8[13] = *(_BYTE *)(v21 + 56);
  a8[14] = *(_BYTE *)(v21 + 57);
  *((_DWORD *)a8 + 4) = *((_DWORD *)a8 + 249);
  *((_WORD *)a8 + 10) = *(_WORD *)(a8 + 1005);
  a8[24] = a8[1164];
  v22 = *((_QWORD *)a8 + 149);
  a8[22] = *(_BYTE *)(v22 + 1363);
  a8[23] = 0;
  *((_QWORD *)a8 + 8) = a8 + 1200;
  *((_QWORD *)a8 + 9) = v22 + 32;
  v23 = *((_QWORD *)a8 + 164);
  *((_QWORD *)a8 + 10) = v23;
  a8[928] = *(_BYTE *)(*((_QWORD *)a8 + 128) + 4);
  *(_QWORD *)(a8 + 28) = 0;
  a8[36] = 0;
  *((_QWORD *)a8 + 11) = v22;
  *((_DWORD *)a8 + 24) = *((_DWORD *)a8 + 265);
  *a8 = *((_DWORD *)a8 + 357066) + *(_DWORD *)(a7 + 72) + 26;
  v24 = (unsigned int *)(*(_QWORD *)(v23 + 48) + 12 * a9);
  *v24 = (63 * *(_DWORD *)(a2 + 156)) >> 6;
  v24[1] = 1;
  v359 = a8 + 1423168;
  v25 = *((_DWORD *)a8 + 356390);
  if (a8[1161])
  {
    v26 = (int)v25 % (2 * v18) / 2;
    if (a8[1007] + 2 * ((int)v25 / (2 * v18)) == 1)
      v27 = *((_DWORD *)a8 + 356390) & 1;
    else
      v27 = 0;
  }
  else
  {
    v27 = (int)v25 / v18;
    v26 = (int)v25 % v18;
  }
  v28 = a17;
  v29 = v27 != 0;
  if (a16)
    *a16 = 1;
  v30 = *((_QWORD *)a8 + 149) + 1152;
  v31 = *((_QWORD *)a8 + 9);
  v32 = *((_QWORD *)a8 + 10);
  *(_QWORD *)(v32 + 80) = v31;
  v33 = *(_DWORD *)(v31 + 100) >> 4;
  *(_DWORD *)(v32 + 8) = v33;
  *(_DWORD *)(v32 + 20) = *(_DWORD *)(v32 + 12) * v33;
  v351 = a8[1425576] == 0;
  v34 = *((_QWORD *)a8 + 9);
  v340 = *(int *)(v34 + 136);
  v347 = v34;
  v339 = *(int *)(v34 + 152);
  v35 = *((_DWORD *)a8 + 7);
  v36 = v35 - v18;
  if (v35 <= v18)
    v36 = 0;
  *((_DWORD *)a8 + 7) = v36;
  v350 = *((_QWORD *)a8 + 127);
  if (v27 >= v19)
  {
    v128 = 0;
    goto LABEL_249;
  }
  v318 = v31;
  v319 = v30;
  v334 = (signed int *)(a8 + 28);
  v320 = v27 != 0;
  v325 = a2;
  v37 = (uint64_t *)(a8 + 1458248);
  v360 = (uint64_t)(a8 + 1425504);
  v317 = v19;
  v328 = v19;
  if (v35 >= v18)
    v38 = v18;
  else
    v38 = v35;
  v323 = v20 - 48;
  v348 = v20;
  v39 = v20 + 48 * v18;
  v343 = (_OWORD *)v39;
  v344 = (_OWORD *)(v39 + 16);
  v346 = (char *)(v39 + 32);
  v324 = (uint64_t)(a8 + 1424400);
  v314 = (uint64_t)(a8 + 1423632);
  v332 = a8 + 936;
  v337 = a8 + 880;
  v322 = (uint64_t)(a8 + 1425168);
  v321 = a8 + 624;
  v315 = (_DWORD *)(a1 + 5041852);
  v316 = a1;
  v40 = v27 * v18;
  v41 = v27;
  v330 = (int)v25;
  v329 = (int)v25 - 1;
  v349 = v18;
  v42 = -(uint64_t)v18;
  v333 = v27 * v18 - 1;
  v43 = a8 + 1458264;
  v338 = v18;
  v327 = a8 + 1458264;
  do
  {
    v331 = v27;
    v335 = v40;
    v353 = &v43[8 * !(v41 & 1)];
    v358 = v41;
    v44 = v18 * v41;
    v352 = (uint64_t *)&v43[8 * (v41 & 1)];
    v354 = v26 + v40;
    v45 = v26;
    v355 = v44;
    v336 = v26;
    while (1)
    {
      v25 = v45 + v355;
      result = 4294958327;
      if (v45 + v355 >= *(int *)(v32 + 20) || v354 < 0)
        goto LABEL_305;
      v47 = v362 + 1168 * v45;
      **((_DWORD **)a8 + 144) = v25;
      *((_DWORD *)a8 + 248) = v25;
      *((_DWORD *)a8 + 244) = v45;
      *((_DWORD *)a8 + 245) = v358;
      *(_DWORD *)(v47 + 820) = v25;
      *(_DWORD *)(v47 + 824) = v45;
      *(_DWORD *)(v47 + 828) = v358;
      v48 = *(_QWORD *)v353;
      *v37 = *v352;
      *((_QWORD *)a8 + 182282) = v48;
      *((_QWORD *)a8 + 144) = v48 + 400 * v45;
      *(_QWORD *)(*((_QWORD *)a8 + 182282) + 400 * v45 + 112) = sub_2160CE484(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a8 + 149) + 1152)
                                                                                        + 8 * a10));
      sub_2160CBB14(*((_DWORD *)v359 + 598), *v37, *((_QWORD *)a8 + 182282), v361);
      v49 = a8[1004];
      if (v49 <= 9 && ((1 << v49) & 0x294) != 0)
        goto LABEL_20;
      if (v38)
        goto LABEL_35;
      if (*((_DWORD *)a8 + 8) == 1)
      {
        v38 = 0;
        goto LABEL_20;
      }
      v82 = *((_QWORD *)v359 + 294);
      v83 = (unsigned int *)*((_QWORD *)v359 + 295);
      v84 = *((_DWORD *)v359 + 592);
      v85 = v359[2372];
      v86 = __clz(v84 | 1);
      if (!v84)
        ++v86;
      if (v86 > 0xC)
      {
        v104 = v85 + 1;
        v105 = (v85 + 1) & 7;
        v106 = (unsigned int *)(v82 + (v104 >> 3));
        v107 = bswap32(*v106) << v105;
        if (v106 <= v83)
          v108 = v106;
        else
          v108 = (unsigned int *)*((_QWORD *)v359 + 295);
        if (v84 < 0)
        {
          v112 = 0;
        }
        else
        {
          v109 = 0;
          do
          {
            v110 = v107;
            v111 = v105;
            v112 = v109 + 1;
            v113 = (v105 + 1);
            v105 = ((_BYTE)v105 + 1) & 7;
            v108 = (unsigned int *)((char *)v108 + (v113 >> 3));
            v107 = bswap32(*v108) << (v113 & 7);
            if (v108 > v83)
              v108 = (unsigned int *)*((_QWORD *)v359 + 295);
            if ((v110 & 0x80000000) != 0)
              break;
          }
          while (v109++ < 0x1F);
          if (v112 - 1 > 0x17)
          {
            v115 = v107 >> (48 - v112);
            v116 = ((v111 + 1) & 7) + v112;
            v117 = v116 - 16;
            v89 = v116 & 7;
            v118 = (unsigned int *)((char *)v108 + (v117 >> 3));
            v119 = bswap32(*v118) << v89;
            if (v118 <= v83)
              v120 = v118;
            else
              v120 = (unsigned int *)*((_QWORD *)v359 + 295);
            v122 = *(unsigned int *)((char *)v120 + 2);
            v121 = (unsigned int *)((char *)v120 + 2);
            v91 = bswap32(v122) << v89;
            if (v121 <= v83)
              v83 = v121;
            v123 = __PAIR64__(v115, v119) >> 16;
LABEL_100:
            v38 = v123 + ~(-1 << v112);
            goto LABEL_101;
          }
        }
        v123 = v107 >> -(char)v112;
        v126 = v112 + v105;
        v89 = (v112 + v105) & 7;
        v127 = (unsigned int *)((char *)v108 + (v126 >> 3));
        v91 = bswap32(*v127) << v89;
        if (v127 <= v83)
          v83 = v127;
        goto LABEL_100;
      }
      v87 = (v84 << (v86 + 1)) >> -(char)v86;
      if (!v86)
        v87 = 0;
      v38 = v87 + ~(-1 << v86);
      v88 = v85 + 2 * v86 + 1;
      v89 = v88 & 7;
      v90 = (unsigned int *)(v82 + (v88 >> 3));
      v91 = bswap32(*v90) << (v88 & 7);
      if (v90 <= v83)
        v83 = v90;
LABEL_101:
      *((_QWORD *)v359 + 294) = v83;
      *((_DWORD *)v359 + 592) = v91;
      v359[2372] = v89;
      if (v38 + (int)v355 + (int)v45 > *(_DWORD *)(v32 + 20))
        goto LABEL_257;
      *((_DWORD *)a8 + 8) = sub_2160AC88C(v360);
      if (v38 + (int)v45 > v338)
      {
        *v334 = v38 + v45 - v338;
        v38 = v338 - v45;
      }
      if (v38)
      {
LABEL_35:
        *(_BYTE *)(v362 + 1168 * v45 + 832) = 1;
        LOBYTE(v54) = *a8;
        *((_DWORD *)a8 + 2) = 0;
        result = sub_2160CC524((uint64_t)v361);
        if ((_DWORD)result)
          goto LABEL_305;
        v75 = (_BYTE *)*((_QWORD *)a8 + 128);
        if (!v75[5] || !*(_BYTE *)(**((_QWORD **)a8 + 151) + 1364))
        {
          v76 = *(unsigned __int8 *)(*((_QWORD *)a8 + 127) + 1);
          if (v76 == 5 || v76 == 3)
          {
            v77 = v75[272];
            if (v75[272])
            {
              v78 = v75 + 31;
              while (1)
              {
                v79 = *v78;
                v78 += 16;
                if (v79 == 3)
                  break;
                if (!--v77)
                  goto LABEL_95;
              }
              v124 = *((_QWORD *)a8 + 163);
              if (v358 > *(int *)(v124 + 12))
              {
                sub_2160EC880(*(pthread_mutex_t **)(v124 + 16));
                for (i = *(int *)(v124 + 12); v358 > i; i = *(int *)(v124 + 12))
                  sub_2160EC918(*(pthread_cond_t **)(v124 + 24), *(pthread_mutex_t **)(v124 + 16));
                sub_2160EC88C(*(pthread_mutex_t **)(v124 + 16));
              }
            }
          }
        }
LABEL_95:
        result = sub_215FD648C((uint64_t)v361, v47, v73, v74);
        if ((_DWORD)result)
          goto LABEL_305;
        v92 = 0;
        --v38;
        goto LABEL_62;
      }
LABEL_20:
      *(_BYTE *)(v362 + 1168 * v45 + 832) = 0;
      *((_DWORD *)a8 + 8) = 0;
      v50 = (int8x16_t *)*((_QWORD *)a8 + 144);
      v50[5].i64[0] = 0;
      v50[5].i64[1] = 0;
      result = sub_2160D4C30(v360, v351, a14, a15, (uint64_t)v361, (_BYTE *)v47);
      if ((_DWORD)result)
        goto LABEL_305;
      *((_DWORD *)a8 + 2) = 1;
      v53 = *(char *)(v350 + 54);
      if ((*(_BYTE *)(v350 + 54) - 26) < 0xCCu)
      {
LABEL_257:
        result = 4294958327;
        goto LABEL_305;
      }
      v54 = v53
          + *a8
          + 52
          - 52 * (((20165 * (v53 + *a8 + 52)) >> 20) + ((20165 * (v53 + *a8 + 52)) >> 31));
      *a8 = v53 + *a8 + 52 - 52 * (((20165 * (v53 + *a8 + 52)) >> 20) + (20165 * (v53 + *a8 + 52) < 0));
      v55 = (_BYTE *)(v362 + 1168 * v45);
      v55[818] = v54;
      v56 = *(unsigned __int8 *)(*((_QWORD *)a8 + 127) + 1);
      v55[833] = v56;
      v55[834] = *(_BYTE *)(*((_QWORD *)a8 + 127) + 2);
      v55[835] = *(_BYTE *)(*((_QWORD *)a8 + 127) + 3);
      if (v56)
      {
        if (*(_BYTE *)(v362 + 1168 * v45 + 816))
        {
          v57 = (int16x8_t)vqtbl1q_s8(vqtbl1q_s8(vcgtzq_s8(v50[5]), (int8x16_t)xmmword_2160F2B40), (int8x16_t)xmmword_2160F2B50);
          v58.i64[0] = 0x7000700070007;
          v58.i64[1] = 0x7000700070007;
          v59 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s16(v57, 8uLL), (int8x16_t)vshlq_u16((uint16x8_t)v57, v58));
          v60 = vandq_s8(vcltzq_s8((int8x16_t)v59), (int8x16_t)xmmword_2160F2980);
          v61 = vpaddq_s8(v60, v60);
          v62 = vpaddq_s8(v61, v61);
          v63 = vpaddq_s8(v62, v62).u16[0];
          v64 = (int64x2_t)vzip1q_s8((int8x16_t)vdupq_laneq_s64(v59, 1), (int8x16_t)v59);
          v52 = (int16x8_t)xmmword_2160F18B0;
          v65 = vandq_s8(vcltzq_s8(vqtbl1q_s8(vzip1q_s8((int8x16_t)v64, (int8x16_t)vdupq_laneq_s64(v64, 1)), (int8x16_t)xmmword_2160F18B0)), (int8x16_t)xmmword_2160F2980);
          v66 = vpaddq_s8(v65, v65);
          v67 = vpaddq_s8(v66, v66);
          v51 = (int16x8_t)vpaddq_s8(v67, v67);
          *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4 * (v45 + v355)) = v51.u16[0] | (v63 << 16);
        }
        v68 = (_BYTE *)*((_QWORD *)a8 + 128);
        if (!v68[5] || !*(_BYTE *)(**((_QWORD **)a8 + 151) + 1364))
        {
          v69 = *(unsigned __int8 *)(*((_QWORD *)a8 + 127) + 1);
          if (v69 == 5 || v69 == 3)
          {
            v70 = v68[272];
            if (v68[272])
            {
              v71 = v68 + 31;
              while (1)
              {
                v72 = *v71;
                v71 += 16;
                if (v72 == 3)
                  break;
                if (!--v70)
                  goto LABEL_60;
              }
              v80 = *((_QWORD *)a8 + 163);
              if (v358 > *(int *)(v80 + 12))
              {
                sub_2160EC880(*(pthread_mutex_t **)(v80 + 16));
                for (j = *(int *)(v80 + 12); v358 > j; j = *(int *)(v80 + 12))
                  sub_2160EC918(*(pthread_cond_t **)(v80 + 24), *(pthread_mutex_t **)(v80 + 16));
                sub_2160EC88C(*(pthread_mutex_t **)(v80 + 16));
              }
            }
          }
        }
LABEL_60:
        result = sub_215FD648C((uint64_t)v361, v47, v51, v52);
        if ((_DWORD)result)
          goto LABEL_305;
      }
      v92 = -1;
LABEL_62:
      sub_2160CBC00((uint64_t)v361, a10);
      if (*(_BYTE *)(v362 + 1168 * v45 + 833) || *(_BYTE *)(v362 + 1168 * v45 + 834) != 25)
      {
        v93 = (char)v54;
        v96 = a8[13] + (char)v54;
        v97 = a8[14] + (char)v54;
        if (v96 >= 0x33)
          v96 = 51;
        if (v97 >= 0x33)
          v97 = 51;
        v94 = byte_2160F5010[v96];
        v95 = byte_2160F5010[v97];
      }
      else
      {
        v93 = 0;
        v94 = 0;
        v95 = 0;
      }
      *(_WORD *)(*(_QWORD *)(v32 + 72) + 2 * v25) = a9;
      *(_BYTE *)(*(_QWORD *)(v32 + 112) + v25) = v93;
      *(_BYTE *)(*(_QWORD *)(v32 + 120) + v25) = v94;
      *(_BYTE *)(*(_QWORD *)(v32 + 128) + v25) = v95;
      *(_BYTE *)(*(_QWORD *)(v32 + 136) + v25) = *(_BYTE *)(*((_QWORD *)a8 + 127) + 3);
      *(int32x2_t *)(*(_QWORD *)(v32 + 48) + 12 * a9) = vadd_s32(*(int32x2_t *)(*(_QWORD *)(v32 + 48) + 12 * a9), (int32x2_t)vand_s8((int8x8_t)(v93 | 0x100000000), (int8x8_t)vdup_n_s32(v92)));
      ++v45;
      v98 = sub_2160AC88C(v360);
      v103 = v98;
      if (v45 >= v349)
        break;
      if (!(v98 | v38))
        goto LABEL_107;
    }
    v128 = v338;
    if (!v98)
    {
LABEL_107:
      v103 = 0;
      if (*v334)
        v128 = v338;
      else
        v128 = v45;
    }
    v313 = v128;
    if (v128 > (int)v336)
    {
      v129 = 0;
      v130 = (int8x16_t *)(v362 + 1168 * (int)v336);
      v341 = v128 - v336;
      v131 = 16 * v336;
      v342 = v336 + v335;
      while (1)
      {
        v132 = 32 * v358;
        v133 = 16 * v358;
        if (!*(_BYTE *)v347)
        {
          v132 = 16 * v358;
          v133 = 8 * v358;
        }
        v134 = *(_QWORD *)(v347 + 32) + v131 + (v132 * *(_DWORD *)(v347 + 136));
        v135 = a8[20];
        if ((v134 & 0x3F) == 0)
        {
          if (a8[21])
            v136 = v340;
          else
            v136 = 0;
          v137 = (_DWORD)v340 << (v135 != 0);
          if (!a8[20])
            v136 = 0;
          _X13 = v134 + v136;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
          _X13 = _X13 + v137;
          __asm { PRFM            #0, [X13] }
        }
        v173 = *(_QWORD *)(v347 + 40) + v131 + (v133 * *(_DWORD *)(v347 + 152));
        if ((v173 & 0x3F) == 0)
        {
          if (a8[21])
            v174 = v339;
          else
            v174 = 0;
          _ZF = v135 == 0;
          v175 = (_DWORD)v339 << (v135 != 0);
          if (_ZF)
            v174 = 0;
          _X9 = v173 + v174;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v175;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v175;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v175;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v175;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v175;
          __asm { PRFM            #0, [X9] }
          _X9 = _X9 + v175;
          __asm { PRFM            #0, [X9] }
          _X8 = _X9 + v175;
          __asm { PRFM            #0, [X8] }
        }
        result = 4294958327;
        v192 = v342 + v129;
        if (v342 + v129 < 0 || v192 >= *(int *)(v32 + 20))
          goto LABEL_305;
        v193 = v130[51].u32[2];
        v194 = (_OWORD *)(v348 + 48 * v193);
        if (v130[52].i8[0])
        {
          *v343 = *v194;
          v195 = v348 + 48 * v193;
          *v344 = *(_OWORD *)(v195 + 16);
          *v346 = *(_BYTE *)(v195 + 32);
          *(_QWORD *)&v196 = 0x2222222222222222;
          *((_QWORD *)&v196 + 1) = 0x2222222222222222;
          *v194 = v196;
          *(_BYTE *)(v195 + 32) = 0;
        }
        else
        {
          if (!v130[52].i8[1])
          {
            *((_DWORD *)a8 + 1) = 0;
            v201 = v130[51].i32[2];
            v202 = v336 + v335 + v42 + v129;
            if (v201 + 1 == v338)
              v203 = 0;
            else
              v203 = v201 + 1;
            v204 = 0.0;
            *v332 = 0u;
            v332[1] = 0u;
            if (v201)
            {
              if (v192 > v330)
              {
                *(_QWORD *)v332 = v323 + 48 * v201;
                if (v202 > v330)
                  *((_QWORD *)a8 + 120) = v343;
              }
            }
            if (v202 >= v330)
              *((_QWORD *)a8 + 118) = v194;
            if (v203 && v202 >= v329)
              *((_QWORD *)a8 + 119) = v348 + 48 * v203;
            *((_QWORD *)a8 + 121) = v337;
            v205 = v130[51].u8[0];
            a8[912] = 0;
            v206 = v130[52].u8[2];
            if (v206 == 25)
            {
              sub_2160CC140((uint64_t)v130, (uint64_t)a8);
              *(_QWORD *)&v207 = 0x2222222222222222;
              *((_QWORD *)&v207 + 1) = 0x2222222222222222;
              *v337 = v207;
              v337[1] = v207;
LABEL_176:
              if (*((_QWORD *)a8 + 118))
              {
                *v343 = *v194;
                v209 = v348 + 48 * v193;
                *v344 = *(_OWORD *)(v209 + 16);
                *v346 = *(_BYTE *)(v209 + 32);
              }
              *v194 = *((_OWORD *)a8 + 55);
              v210 = (__n128 *)(v348 + 48 * v193);
              a3 = *((int32x4_t *)a8 + 56);
              v210[1] = (__n128)a3;
              v210[2].n128_u8[0] = a8[912];
              goto LABEL_136;
            }
            if (v130[52].u8[1] | v206)
            {
LABEL_165:
              sub_2160A78E8(v130, (uint64_t)v130, (uint64_t)a8, v322);
              sub_21608DC74((uint64_t)v130, (uint64_t)a8);
            }
            else if (v130[52].i8[3] == 1)
            {
              a8[912] = 1;
              if (v205)
                sub_2160A6904(v130, 0.0, *(double *)a4.i64, a5, v99, v100, (int8x16_t)v101, (uint64_t)v130, (uint64_t)a8, v314);
              sub_21608C474((uint64_t)v130, (uint64_t)a8, v204, *(double *)a4.i64, *(double *)a5.i64, v99, v100, v101, v102);
            }
            else
            {
              if (v130[52].i8[3])
                goto LABEL_165;
              if (v205)
                sub_2160A60C4(v130, (uint64_t)v130, (uint64_t)a8);
              sub_2160898E4((uint64_t)v130, (uint64_t)a8);
            }
            if (v130[51].i8[1])
            {
              result = sub_2160A8384((int16x8_t *)v130, (uint64_t)v130, (uint64_t)a8);
              if ((_DWORD)result)
                goto LABEL_305;
            }
            else
            {
              v321[14] = 0u;
              v321[15] = 0u;
              v321[12] = 0u;
              v321[13] = 0u;
              v321[10] = 0u;
              v321[11] = 0u;
              v321[8] = 0u;
              v321[9] = 0u;
              v321[6] = 0u;
              v321[7] = 0u;
              v321[4] = 0u;
              v321[5] = 0u;
              v321[2] = 0u;
              v321[3] = 0u;
              *v321 = 0u;
              v321[1] = 0u;
            }
            result = sub_21608DE70((uint64_t)v130, (int16x8_t *)a8);
            if ((_DWORD)result)
              goto LABEL_305;
            goto LABEL_176;
          }
          v198 = v130[51].i8[0];
          if (v130[52].i8[3])
          {
            if (v130[51].i8[0])
              sub_2160A6904(v130, *(double *)a3.i64, *(double *)a4.i64, a5, v99, v100, (int8x16_t)v101, (uint64_t)v130, (uint64_t)a8, v324);
            v199 = v348;
            v194 = (_OWORD *)(v348 + 48 * v193 + 16);
            v198 = 1;
            v200 = v344;
          }
          else
          {
            if (v130[51].i8[0])
            {
              sub_2160A60C4(v130, (uint64_t)v130, (uint64_t)a8);
              v198 = 0;
            }
            v200 = v343;
            v199 = v348;
          }
          *v200 = *v194;
          *v346 = v198;
          *(_QWORD *)&v208 = 0x2222222222222222;
          *((_QWORD *)&v208 + 1) = 0x2222222222222222;
          *v194 = v208;
          *(_BYTE *)(v199 + 48 * v193 + 32) = v198;
          if (v130[51].i8[1])
          {
            result = sub_2160A8384((int16x8_t *)v130, (uint64_t)v130, (uint64_t)a8);
            if ((_DWORD)result)
              goto LABEL_305;
          }
        }
        v197 = *((_QWORD *)a8 + 128);
        if (*(_DWORD *)(v197 + 356) || *(_DWORD *)(v197 + 360))
          sub_21604B778((uint64_t)v130, (uint64_t)a8);
        else
          sub_2160379A8((uint64_t)v130, (uint64_t)a8);
LABEL_136:
        v130 += 73;
        ++v129;
        v131 += 16;
        if (v341 == (_DWORD)v129)
        {
          LOWORD(v25) = v336 + v333 + v129;
          v128 = v313;
          break;
        }
      }
    }
    if (v358)
    {
      v211 = *(_QWORD *)(v32 + 72);
      v18 = v338;
      if (*(unsigned __int16 *)(v211 + 2 * (v358 - 1) * v349) != 60000
        && *(unsigned __int16 *)(v211 + 2 * ((int)v355 - 1)) != 60000
        && v313 == v338)
      {
        v212 = v331 - 1;
        result = sub_21609E9C8((uint64_t *)v32, v319, 0, v338, v331 - 1, v358, a3, a4, (int32x4_t)a5);
        if ((_DWORD)result)
          goto LABEL_305;
        if (*(_BYTE *)(v32 + 224))
        {
          if (!*(_QWORD *)(v32 + 232))
            *(_QWORD *)(v32 + 232) = sub_2160CB5FC((void *)(20 * *(_DWORD *)(v318 + 136)
                                                                        + 11 * *(_DWORD *)(v318 + 152)));
          result = sub_21609BD58(v32, 0, v338, v212, v358, v320, a17);
          v320 = 1;
        }
        else
        {
          *(_DWORD *)(v32 + 268) = *v315;
          result = sub_21609B1DC(v32, 0, v338, v212, v358);
        }
        if ((_DWORD)result)
          goto LABEL_305;
        v18 = v338;
        if (*(_DWORD *)(v32 + 220))
        {
          v214 = *(_QWORD *)(v318 + 32);
          v213 = *(_QWORD *)(v318 + 40);
          v215 = *(_DWORD *)(v318 + 136);
          v216 = *(_DWORD *)(v318 + 152);
          if (*(_BYTE *)v318)
          {
            v217 = v215;
            v218 = v216;
            if (!*(_BYTE *)(v318 + 5))
              v218 = 0;
            v213 += v218;
            if (!*(_BYTE *)(v318 + 5))
              v217 = 0;
            v214 += v217;
            v215 *= 2;
            v216 *= 2;
          }
          v219 = *(int *)(v318 + 132);
          v220 = *(int *)(v318 + 148);
          v221 = *(int *)(v318 + 100);
          v222 = *(int *)(v318 + 116);
          if (v358 >= 2)
            v223 = 16 * (v358 - 1) - 4;
          else
            v223 = 0;
          v224 = 16 * v358;
          if (16 * (_DWORD)v358 != (_DWORD)v221)
            v224 = 16 * v358 - 4;
          v225 = v224 - v223;
          if (v224 > v223)
          {
            v226 = (int8x16_t *)(v214 + v215 * (uint64_t)v223);
            do
            {
              v227 = vqtbl1q_s8((int8x16_t)(16843009 * v226->u8[0]), (int8x16_t)xmmword_2160EE800);
              v226[-2] = v227;
              v226[-1] = v227;
              v228 = (int8x16_t *)((char *)v226 + v219);
              v229 = vqtbl1q_s8((int8x16_t)(16843009 * v226->u8[v219 - 1]), (int8x16_t)xmmword_2160EE800);
              *v228 = v229;
              v228[1] = v229;
              v226 = (int8x16_t *)((char *)v226 + v215);
              --v225;
            }
            while (v225);
          }
          v230 = v223 >> 1;
          v231 = (v224 >> 1) - (v223 >> 1);
          if (v224 >> 1 > v230)
          {
            v232 = (int8x16_t *)(v213 + v216 * (uint64_t)v230);
            do
            {
              v233 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v232->u16[-1] + v220)), (int8x16_t)xmmword_2160EE800);
              v232[-1] = vqtbl1q_s8((int8x16_t)(65537 * v232->u16[0]), (int8x16_t)xmmword_2160EE800);
              *(int8x16_t *)((char *)v232 + v220) = v233;
              v232 = (int8x16_t *)((char *)v232 + v216);
              --v231;
            }
            while (v231);
          }
          if (v358 <= 1)
          {
            v234 = 0;
            v235 = v214 - 32;
            v236 = -2 * v215;
            do
            {
              if ((int)v219 >= -63)
              {
                v237 = 0;
                do
                {
                  v238 = *(_OWORD *)(v235 + v237);
                  *(_OWORD *)(v235 - v215 + v237) = v238;
                  *(_OWORD *)(v235 + v236 + v237) = v238;
                  v239 = v237 < (int)v219 + 48;
                  v237 += 16;
                }
                while (v239);
              }
              v235 += v236;
              ++v234;
            }
            while (v234 != 10);
            v240 = 0;
            v241 = v213 - 16;
            do
            {
              if ((int)v220 >= -31)
              {
                v242 = 0;
                do
                {
                  *(_OWORD *)(v241 - v216 + v242) = *(_OWORD *)(v241 + v242);
                  v239 = v242 < (int)v220 + 16;
                  v242 += 16;
                }
                while (v239);
              }
              v241 -= v216;
              ++v240;
            }
            while (v240 != 8);
          }
          if (v224 == (_DWORD)v221)
          {
            v243 = 0;
            v244 = v215 * (v221 - 1);
            v245 = v214 - 32;
            v246 = v214 - 32 + v244;
            v247 = 2 * v215;
            v248 = v245 + v244 + v215;
            v249 = v245 + v244 + v247;
            do
            {
              if ((int)v219 >= -63)
              {
                v250 = 0;
                do
                {
                  v251 = *(_OWORD *)(v246 + v250);
                  *(_OWORD *)(v248 + v250) = v251;
                  *(_OWORD *)(v249 + v250) = v251;
                  v239 = v250 < v219 + 48;
                  v250 += 16;
                }
                while (v239);
              }
              v246 += v247;
              ++v243;
              v248 += v247;
              v249 += v247;
            }
            while (v243 != 10);
            v252 = 0;
            v253 = v213 + v216 * (v222 - 1) - 16;
            do
            {
              if ((int)v220 >= -31)
              {
                v254 = 0;
                do
                {
                  *(_OWORD *)(v253 + v216 + v254) = *(_OWORD *)(v253 + v254);
                  v239 = v254 < v220 + 16;
                  v254 += 16;
                }
                while (v239);
              }
              v253 += v216;
              ++v252;
            }
            while (v252 != 8);
          }
        }
        sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(v325 + 88) + 16));
        *(_DWORD *)(*(_QWORD *)(v325 + 88) + 12) = v358 - 2;
        v255 = *(_QWORD *)(v325 + 88);
        v256 = *(_QWORD *)(v255 + 1352);
        if (v256 && *(_BYTE *)(v256 + 36))
        {
          *(_DWORD *)(v256 + 12) = *(_DWORD *)(v255 + 12);
          v257 = v325;
          v255 = *(_QWORD *)(v325 + 88);
        }
        else
        {
          v257 = v325;
        }
        sub_2160EC90C(*(pthread_cond_t **)(v255 + 24));
        sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(v257 + 88) + 16));
      }
      v128 = v313;
    }
    else
    {
      v18 = v338;
    }
    v41 = v358 + 1;
    v258 = *v334;
    if (!(v103 | *v334))
    {
      v27 = v358 + 1;
      a2 = v325;
      a1 = v316;
      v19 = v317;
      v28 = a17;
      v31 = v318;
      v29 = v320;
      v30 = v319;
      goto LABEL_249;
    }
    v26 = 0;
    v27 = v331 + 1;
    v259 = v258 - v18;
    if (v258 <= v18)
      v259 = 0;
    if (v258 >= v18)
      v38 = v18;
    else
      v38 = *v334;
    *v334 = v259;
    v40 = v335 + v18;
    v333 += v18;
    v43 = v327;
  }
  while (v41 != v328);
  a1 = v316;
  v19 = v317;
  v27 = v317;
  a2 = v325;
  v28 = a17;
  v31 = v318;
  v29 = v320;
  v30 = v319;
  v128 = v313;
LABEL_249:
  *(_WORD *)(a2 + 104) = v25 + 1;
  if (v27
    && (v260 = v27 - 1, v261 = *(_QWORD *)(v32 + 72), *(unsigned __int16 *)(v261 + 2 * (v27 - 1) * v18) != 60000)
    && v27 == v19
    && v128 == v18
    && *(unsigned __int16 *)(v261 + 2 * (v27 * v18 - 1)) != 60000)
  {
    v262 = v31;
    v263 = a1;
    v326 = a2;
    v264 = v19 - 1;
    v265 = v18;
    v266 = v18;
    v267 = v19;
    result = sub_21609E9C8((uint64_t *)v32, v30, 0, v266, v19 - 1, v19, a3, a4, (int32x4_t)a5);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(v32 + 224))
      {
        result = sub_21609BD58(v32, 0, v265, v260, v267, v29, v28);
      }
      else
      {
        *(_DWORD *)(v32 + 268) = *(_DWORD *)(v263 + 5041852);
        result = sub_21609B1DC(v32, 0, v265, v264, v267);
      }
      if (!(_DWORD)result)
      {
        if (*(_DWORD *)(v32 + 220))
        {
          v269 = *(_QWORD *)(v262 + 32);
          v268 = *(_QWORD *)(v262 + 40);
          v270 = *(_DWORD *)(v262 + 136);
          v271 = *(_DWORD *)(v262 + 152);
          v272 = *(int *)(v262 + 100);
          if (*(_BYTE *)v262)
          {
            v273 = v270;
            v274 = v271;
            if (!*(_BYTE *)(v262 + 5))
              v274 = 0;
            v268 += v274;
            if (!*(_BYTE *)(v262 + 5))
              v273 = 0;
            v269 += v273;
            v270 *= 2;
            v271 *= 2;
          }
          v275 = *(int *)(v262 + 132);
          v276 = *(int *)(v262 + 148);
          v277 = *(int *)(v262 + 116);
          if (v267 >= 2)
            v278 = 16 * v264 - 4;
          else
            v278 = 0;
          v279 = 16 * v267;
          if (16 * v267 != (_DWORD)v272)
            v279 = 16 * v267 - 4;
          v280 = v278 >> 1;
          v281 = v279 >> 1;
          v282 = v279 - v278;
          if (v279 > v278)
          {
            v283 = (int8x16_t *)(v269 + v270 * (uint64_t)v278);
            do
            {
              v284 = vqtbl1q_s8((int8x16_t)(16843009 * v283->u8[0]), (int8x16_t)xmmword_2160EE800);
              v283[-2] = v284;
              v283[-1] = v284;
              v285 = (int8x16_t *)((char *)v283 + v275);
              v286 = vqtbl1q_s8((int8x16_t)(16843009 * v283->u8[v275 - 1]), (int8x16_t)xmmword_2160EE800);
              *v285 = v286;
              v285[1] = v286;
              v283 = (int8x16_t *)((char *)v283 + v270);
              --v282;
            }
            while (v282);
          }
          _VF = __OFSUB__(v281, v280);
          v287 = v281 - v280;
          if (!((v287 < 0) ^ _VF | (v287 == 0)))
          {
            v288 = (int8x16_t *)(v268 + v271 * (uint64_t)v280);
            do
            {
              v289 = vqtbl1q_s8((int8x16_t)(65537 * *(unsigned __int16 *)((char *)&v288->u16[-1] + v276)), (int8x16_t)xmmword_2160EE800);
              v288[-1] = vqtbl1q_s8((int8x16_t)(65537 * v288->u16[0]), (int8x16_t)xmmword_2160EE800);
              *(int8x16_t *)((char *)v288 + v276) = v289;
              v288 = (int8x16_t *)((char *)v288 + v271);
              --v287;
            }
            while (v287);
          }
          if (v267 <= 1)
          {
            v290 = 0;
            v291 = v269 - 32;
            v292 = -2 * v270;
            do
            {
              if ((int)v275 >= -63)
              {
                v293 = 0;
                do
                {
                  v294 = *(_OWORD *)(v291 + v293);
                  *(_OWORD *)(v291 - v270 + v293) = v294;
                  *(_OWORD *)(v291 + v292 + v293) = v294;
                  v239 = v293 < (int)v275 + 48;
                  v293 += 16;
                }
                while (v239);
              }
              v291 += v292;
              ++v290;
            }
            while (v290 != 10);
            v295 = 0;
            v296 = v268 - 16;
            do
            {
              if ((int)v276 >= -31)
              {
                v297 = 0;
                do
                {
                  *(_OWORD *)(v296 - v271 + v297) = *(_OWORD *)(v296 + v297);
                  v239 = v297 < (int)v276 + 16;
                  v297 += 16;
                }
                while (v239);
              }
              v296 -= v271;
              ++v295;
            }
            while (v295 != 8);
          }
          if (v279 == (_DWORD)v272)
          {
            v298 = 0;
            v299 = v270 * (v272 - 1);
            v300 = v269 + v299 - 32;
            v301 = 2 * v270;
            v302 = v299 + v301;
            v303 = v299 + v270 + v269 - 32;
            v304 = v302 + v269 - 32;
            do
            {
              if ((int)v275 >= -63)
              {
                v305 = 0;
                do
                {
                  v306 = *(_OWORD *)(v300 + v305);
                  *(_OWORD *)(v303 + v305) = v306;
                  *(_OWORD *)(v304 + v305) = v306;
                  v239 = v305 < v275 + 48;
                  v305 += 16;
                }
                while (v239);
              }
              v300 += v301;
              ++v298;
              v303 += v301;
              v304 += v301;
            }
            while (v298 != 10);
            v307 = 0;
            v308 = v268 + v271 * (v277 - 1) - 16;
            do
            {
              if ((int)v276 >= -31)
              {
                v309 = 0;
                do
                {
                  *(_OWORD *)(v308 + v271 + v309) = *(_OWORD *)(v308 + v309);
                  v239 = v309 < v276 + 16;
                  v309 += 16;
                }
                while (v239);
              }
              v308 += v271;
              ++v307;
            }
            while (v307 != 8);
          }
        }
        sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(v326 + 88) + 16));
        *(_DWORD *)(*(_QWORD *)(v326 + 88) + 12) = 0x7FFFFFFF;
        v310 = *(_QWORD *)(v326 + 88);
        v311 = *(_QWORD *)(v310 + 1352);
        if (v311 && *(_BYTE *)(v311 + 36))
        {
          *(_DWORD *)(v311 + 12) = 0x7FFFFFFF;
          v310 = *(_QWORD *)(v326 + 88);
        }
        sub_2160EC90C(*(pthread_cond_t **)(v310 + 24));
        sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(v326 + 88) + 16));
        goto LABEL_304;
      }
    }
  }
  else
  {
LABEL_304:
    result = 0;
    *a11 = *((_DWORD *)a8 + 248);
  }
LABEL_305:
  if (a12)
    *a12 = 0;
  if (a13)
    *a13 = 0;
  if ((_DWORD)result)
  {
    v312 = *((_DWORD *)a8 + 248);
    if (v312)
      *a11 = v312 - 1;
  }
  return result;
}

uint64_t sub_2160C4B3C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _BYTE *a8, int a9)
{
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;

  if (a5 - a4 >= 2)
  {
    v9 = (a5 - a4) >> 1;
    v10 = (unsigned __int8 *)(a2 + (a4 >> 1) * a7);
    v11 = (unsigned __int8 *)(result + a6 * a4);
    v12 = &v11[a6];
    v13 = dword_2160F71A8[(a4 >> 1) & 0x1F];
    result = 2 * a6 - a3;
    v14 = a7 - a3;
    v15 = 2 * (a9 - a3);
    do
    {
      a4 += 2;
      v16 = dword_2160F71A8[(a4 >> 1) & 0x1F];
      if (a3 >= 2)
      {
        v17 = v14;
        v18 = v13 & 0xFFF;
        v19 = a8 + 1;
        v20 = a3 >> 1;
        do
        {
          v21 = v11[1];
          v22 = v12[1];
          v24 = *v11;
          v11 += 2;
          v23 = v24;
          v25 = *v12;
          v12 += 2;
          v26 = *v10;
          v27 = v10[1];
          v28 = v22 + v21 + v27;
          v29 = v16 + v23 + v25 + v26;
          v30 = byte_2160F5146[v18 + 1];
          v31 = byte_2160F5044[v23 + (byte_2160F5146[v18] & 1) - (byte_2160F5146[v18] >> 1) + 1];
          LOBYTE(v30) = byte_2160F5044[v21 + (v30 & 1) - (v30 >> 1) + 1];
          v32 = byte_2160F5146[v18 + 16];
          v33 = byte_2160F5146[v18 + 17];
          LOBYTE(v32) = byte_2160F5044[v25 + (v32 & 1) - (v32 >> 1) + 1];
          LOBYTE(v22) = byte_2160F5044[v22 + (v33 & 1) - (v33 >> 1) + 1];
          v34 = byte_2160F5146[v18 + 32];
          v35 = byte_2160F5146[v18 + 33];
          LOBYTE(v34) = byte_2160F5044[v26 + (v34 & 1) - (v34 >> 1) + 1];
          LOBYTE(v35) = byte_2160F5044[v27 + (v35 & 1) - (v35 >> 1) + 1];
          v16 = v29 + (v28 << 8);
          *(v19 - 1) = v34;
          *v19 = v31;
          v19[1] = v35;
          v19[2] = v30;
          v19[a9 - 1] = v34;
          v19[a9 + 1 - 1] = v32;
          v19[a9 + 2 - 1] = v35;
          v19[a9 + 3 - 1] = v22;
          v36 = ((_WORD)v18 + 34) & 0xFFF;
          v18 += 2;
          if ((v20 & 7) == 1)
            v18 = v36;
          v10 += 2;
          v19 += 4;
          --v20;
        }
        while (v20);
        a8 = v19 - 1;
        v14 = v17;
        v15 = 2 * (a9 - a3);
      }
      v11 += result;
      v12 += result;
      v10 += v14;
      a8 += v15;
      LOWORD(v13) = v16;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_2160C4D68(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _BYTE *a8, int a9, uint64_t a10)
{
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  if (a5 - a4 >= 2)
  {
    v10 = (a5 - a4) >> 1;
    v11 = (unsigned __int8 *)(a2 + (a4 >> 1) * a7);
    v12 = (unsigned __int8 *)(result + a6 * a4);
    v13 = &v12[a6];
    v14 = dword_2160F71A8;
    v15 = dword_2160F71A8[(a4 >> 1) & 0x1F];
    result = (a9 + 3);
    v16 = 2 * a6 - a3;
    v17 = a7 - a3;
    v18 = 2 * (a9 - a3);
    do
    {
      a4 += 2;
      v19 = v14[(a4 >> 1) & 0x1F];
      if (a3 >= 2)
      {
        v20 = v14;
        v21 = v15 & 0xFFF;
        v22 = a8 + 1;
        v23 = a3 >> 1;
        do
        {
          v24 = *(unsigned __int8 *)(a10 + *v12);
          v25 = *(unsigned __int8 *)(a10 + v12[1]);
          v26 = *(unsigned __int8 *)(a10 + *v13);
          v27 = *(unsigned __int8 *)(a10 + v13[1]);
          v28 = *v11;
          v29 = v11[1];
          v30 = v27 + v25 + v29;
          v31 = v19 + v24 + v26 + v28;
          v32 = byte_2160F5146[v21 + 1];
          v33 = byte_2160F5044[v24 + (byte_2160F5146[v21] & 1) - (byte_2160F5146[v21] >> 1) + 1];
          LOBYTE(v32) = byte_2160F5044[v25 + (v32 & 1) - (v32 >> 1) + 1];
          v34 = byte_2160F5146[v21 + 16];
          v35 = byte_2160F5146[v21 + 17];
          LOBYTE(v25) = byte_2160F5044[v26 + (v34 & 1) - (v34 >> 1) + 1];
          LOBYTE(v35) = byte_2160F5044[v27 + (v35 & 1) - (v35 >> 1) + 1];
          v36 = byte_2160F5146[v21 + 32];
          v37 = byte_2160F5146[v21 + 33];
          LOBYTE(v27) = byte_2160F5044[v28 + (v36 & 1) - (v36 >> 1) + 1];
          LOBYTE(v37) = byte_2160F5044[v29 + (v37 & 1) - (v37 >> 1) + 1];
          v19 = v31 + (v30 << 8);
          *(v22 - 1) = v27;
          *v22 = v33;
          v22[1] = v37;
          v22[2] = v32;
          v22[a9 - 1] = v27;
          v22[a9 + 1 - 1] = v25;
          v22[a9 + 2 - 1] = v37;
          v22[result - 1] = v35;
          if ((v23 & 7) == 1)
            v21 = ((_WORD)v21 + 34) & 0xFFF;
          else
            v21 += 2;
          v12 += 2;
          v13 += 2;
          v11 += 2;
          v22 += 4;
          --v23;
        }
        while (v23);
        a8 = v22 - 1;
        v14 = v20;
        v18 = 2 * (a9 - a3);
        v17 = a7 - a3;
      }
      v12 += v16;
      v13 += v16;
      v11 += v17;
      a8 += v18;
      LOWORD(v15) = v19;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_2160C4FB0()
{
  return 2;
}

uint64_t sub_2160C4FB8()
{
  return (unsigned __int16)dword_254E17440;
}

uint64_t sub_2160C4FC4(unsigned __int16 a1)
{
  uint64_t result;

  result = a1 | (HIWORD(dword_254E17440) << 16);
  dword_254E17440 = result;
  return result;
}

uint64_t sub_2160C4FDC(uint64_t a1, int a2, int a3)
{
  int v4;
  void *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;

  *(_WORD *)(a1 + 2) = a2;
  *(_WORD *)a1 = a3;
  v4 = a3 * a2;
  *(_DWORD *)(a1 + 4) = a3 * a2;
  memset_pattern16((void *)(a1 + 24), &unk_2160F7230, 0x800uLL);
  memset_pattern16((void *)(a1 + 1032), &unk_2160EE780, 0x1CuLL);
  *(_DWORD *)(a1 + 1020) = 3;
  *(_QWORD *)(a1 + 1024) = 0x300000003;
  *(_DWORD *)(a1 + 1060) = 3;
  *(_QWORD *)(a1 + 1064) = 0x300000003;
  *(_DWORD *)(a1 + 1044) = 0;
  memset_pattern16((void *)(a1 + 2072), &unk_2160F7240, 0x50uLL);
  memset_pattern16((void *)(a1 + 2152), &unk_2160EE780, 0xB0uLL);
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_QWORD *)(a1 + 2504) = 0;
  memset_pattern16((void *)(a1 + 2512), &unk_2160EE780, 0x1E8uLL);
  memset_pattern16((void *)(a1 + 3000), &unk_2160F7240, 0x5CuLL);
  v5 = sub_2160CB5D4(16 * v4);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = sub_2160CB5D4(*(unsigned int *)(a1 + 4));
  *(_QWORD *)(a1 + 16) = v6;
  if (v5)
    v7 = 1;
  else
    v7 = 2;
  if (v6)
    v8 = v5 == 0;
  else
    v8 = v7;
  if ((_DWORD)v8)
  {
    j__free(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
    j__free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v8;
}

void sub_2160C511C(uint64_t a1)
{
  j__free(*(void **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  j__free(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
}

double sub_2160C5150(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 67) = 0;
  *(_DWORD *)(a1 + 70) = 0;
  return result;
}

uint64_t sub_2160C5174(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 67))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      MEMORY[0x2199F4C28](v2, 0x1000C8077774924);
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      MEMORY[0x2199F4C28](v3, 0x1000C8077774924);
  }
  return a1;
}

char *sub_2160C51D8(char *result, uint64_t a2, size_t __n, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, char *__dst, char *a9, int a10, unsigned int a11)
{
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  if (a4 < a5)
  {
    v13 = a5;
    v14 = a4;
    v15 = (char *)(a2 + (a4 >> 1) * a7);
    v16 = &result[a6 * a4];
    v17 = __n;
    v18 = a6;
    v19 = a7;
    do
    {
      memcpy(__dst, v16, v17);
      v20 = &__dst[a10];
      v21 = &v16[v18];
      memcpy(a9, v15, v17);
      a9 += a11;
      v15 += v19;
      result = (char *)memcpy(v20, v21, v17);
      __dst = &v20[a10];
      v16 = &v21[v18];
      v14 += 2;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t sub_2160C52B4(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _BYTE *a8, int a9)
{
  unsigned int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE *v22;

  if (a5 - a4 >= 2)
  {
    v9 = (a5 - a4) >> 1;
    v10 = (char *)(a2 + (a4 >> 1) * a7);
    v11 = (char *)(result + a6 * a4);
    v12 = &v11[a6];
    v13 = 2 * a6 - a3;
    result = a7 - a3;
    do
    {
      if (a3 >= 2)
      {
        v14 = a8 + 1;
        v15 = a3 >> 1;
        do
        {
          v16 = *v11;
          v17 = v11[1];
          v18 = *v12;
          v19 = v12[1];
          v20 = *v10;
          v21 = v10[1];
          *(v14 - 1) = *v10;
          *v14 = v16;
          v14[1] = v21;
          v14[2] = v17;
          v14[a9 - 1] = v20;
          v22 = &v14[a9 + 3];
          v14[a9 + 1 - 1] = v18;
          v11 += 2;
          v12 += 2;
          v14[a9 + 2 - 1] = v21;
          v10 += 2;
          v14 += 4;
          *(v22 - 1) = v19;
          --v15;
        }
        while (v15);
        a8 = v14 - 1;
      }
      v11 += v13;
      v12 += v13;
      v10 += result;
      a8 += 2 * (a9 - a3);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_2160C53A4(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _BYTE *a8, int a9)
{
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;

  if (a5 - a4 >= 2)
  {
    v9 = (a5 - a4) >> 1;
    v10 = (unsigned __int8 *)(a2 + (a4 >> 1) * a7);
    v11 = (unsigned __int8 *)(result + a6 * a4);
    v12 = dword_2160F71A8[(a4 >> 1) & 0x1F];
    v49 = a3 >> 1;
    v13 = 2 * a6 - a3;
    v14 = a7 - a3;
    result = 2 * (a9 - a3);
    v15 = &v11[a6];
    v50 = a3;
    v47 = result;
    v48 = v14;
    do
    {
      a4 += 2;
      v16 = dword_2160F71A8[(a4 >> 1) & 0x1F];
      if (a3 >= 2)
      {
        v17 = v12 & 0xFFF;
        v18 = a8 + 1;
        v19 = v49;
        do
        {
          v20 = *v11;
          v21 = v11[1];
          v22 = *v15;
          v23 = v15[1];
          v24 = *v10;
          v25 = v10[1];
          LOWORD(v16) = v16 + v20 + v22 + v24 + (((_WORD)v23 + (_WORD)v21 + (_WORD)v25) << 8);
          v26 = 220 * v20 + 2 * byte_2160F6176[v17];
          v27 = v26 >= 0x100;
          v28 = v26 - 256;
          if (!v27)
            v28 = 0;
          v29 = v28 >> 8;
          if (v29 >= 0xDB)
            LOBYTE(v29) = -37;
          v30 = 220 * v21 + 2 * byte_2160F6176[v17 + 1];
          v27 = v30 >= 0x100;
          v31 = v30 - 256;
          if (!v27)
            v31 = 0;
          v32 = v31 >> 8;
          if (v32 >= 0xDB)
            LOBYTE(v32) = -37;
          v33 = 220 * v22 + 2 * byte_2160F6176[v17 + 16];
          v27 = v33 >= 0x100;
          v34 = v33 - 256;
          if (!v27)
            v34 = 0;
          v35 = v34 >> 8;
          if (v35 >= 0xDB)
            LOBYTE(v35) = -37;
          v36 = 220 * v23 + 2 * byte_2160F6176[v17 + 17];
          v27 = v36 >= 0x100;
          v37 = v36 - 256;
          if (!v27)
            v37 = 0;
          v38 = v37 >> 8;
          if (v38 >= 0xDB)
            LOBYTE(v38) = -37;
          v39 = 225 * v24 + 2 * byte_2160F6176[v17 + 32];
          v27 = v39 >= 0x100;
          v40 = v39 - 256;
          if (!v27)
            v40 = 0;
          v41 = v40 >> 8;
          if (v41 >= 0xE0)
            LOBYTE(v41) = -32;
          v42 = 225 * v25 + 2 * byte_2160F6176[v17 + 33];
          v27 = v42 >= 0x100;
          v43 = v42 - 256;
          if (!v27)
            v43 = 0;
          v44 = v43 >> 8;
          if (v44 >= 0xE0)
            LOBYTE(v44) = -32;
          v45 = v41 + 16;
          *(v18 - 1) = v45;
          *v18 = v29 + 16;
          v46 = v44 + 16;
          v18[1] = v46;
          v18[2] = v32 + 16;
          v18[a9 - 1] = v45;
          v18[a9 + 1 - 1] = v35 + 16;
          v18[a9 + 2 - 1] = v46;
          v18[a9 + 3 - 1] = v38 + 16;
          if ((v19 & 7) == 1)
            v17 = ((_WORD)v17 + 34) & 0xFFF;
          else
            v17 += 2;
          v11 += 2;
          v15 += 2;
          v10 += 2;
          v18 += 4;
          --v19;
        }
        while (v19);
        a8 = v18 - 1;
        a3 = v50;
        result = v47;
        v14 = v48;
      }
      v11 += v13;
      v15 += v13;
      v10 += v14;
      a8 += result;
      LOWORD(v12) = v16;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_2160C5630(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _BYTE *a8, int a9, uint64_t a10)
{
  unsigned int v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  if (a5 - a4 >= 2)
  {
    v10 = (a5 - a4) >> 1;
    v11 = (char *)(a2 + (a4 >> 1) * a7);
    v12 = (unsigned __int8 *)(result + a6 * a4);
    v13 = &v12[a6];
    result = 2 * a6 - a3;
    v14 = a7 - a3;
    do
    {
      if (a3 >= 2)
      {
        v15 = a8 + 1;
        v16 = a3 >> 1;
        do
        {
          v17 = *v12;
          v18 = v12[1];
          v19 = *v13;
          v20 = v13[1];
          v21 = *v11;
          v22 = v11[1];
          *(v15 - 1) = *v11;
          *v15 = *(_BYTE *)(a10 + v17);
          v15[1] = v22;
          v15[2] = *(_BYTE *)(a10 + v18);
          v15[a9 - 1] = v21;
          v15[a9 + 1 - 1] = *(_BYTE *)(a10 + v19);
          v15[a9 + 2 - 1] = v22;
          v12 += 2;
          v15[a9 + 3 - 1] = *(_BYTE *)(a10 + v20);
          v13 += 2;
          v11 += 2;
          v15 += 4;
          --v16;
        }
        while (v16);
        a8 = v15 - 1;
      }
      v12 += result;
      v13 += result;
      v11 += v14;
      a8 += 2 * (a9 - a3);
      --v10;
    }
    while (v10);
  }
  return result;
}

int32x4_t sub_2160C5734(int16x8_t *a1, _DWORD *a2, _DWORD *a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int32x4_t v36;
  int32x4_t result;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = vaddq_s16(v3, *a1);
  v7 = vaddq_s16(v5, v4);
  v8 = vsubq_s16(*a1, v3);
  v9 = vsubq_s16(v4, v5);
  v10 = vaddq_s16(v7, v6);
  v11 = vsubq_s16(v6, v7);
  v12 = vaddq_s16(v9, v8);
  v13 = vsubq_s16(v8, v9);
  v14 = (int32x4_t)vzip1q_s16(v10, v11);
  v15 = (int32x4_t)vzip2q_s16(v10, v11);
  v16 = (int32x4_t)vzip1q_s16(v12, v13);
  v17 = (int32x4_t)vzip2q_s16(v12, v13);
  v18 = (int64x2_t)vzip1q_s32(v14, v16);
  v19 = (int64x2_t)vzip2q_s32(v14, v16);
  v20 = (int64x2_t)vzip1q_s32(v15, v17);
  v21 = (int64x2_t)vzip2q_s32(v15, v17);
  v22 = (int16x8_t)vzip1q_s64(v18, v20);
  v23 = (int16x8_t)vzip2q_s64(v18, v20);
  v24 = (int16x8_t)vzip1q_s64(v19, v21);
  v25 = (int16x8_t)vzip2q_s64(v19, v21);
  v26 = vaddq_s16(v23, v22);
  v27 = vaddq_s16(v25, v24);
  v28 = vsubq_s16(v22, v23);
  v29 = vsubq_s16(v24, v25);
  v30 = vaddq_s16(v27, v26);
  v31 = vsubq_s16(v26, v27);
  v32 = vaddq_s16(v29, v28);
  v33 = vsubq_s16(v28, v29);
  v34 = (uint16x8_t)vaddq_s16(vaddq_s16(vmaxq_s16(v31, vnegq_s16(v31)), vmaxq_s16(v30, vnegq_s16(v30))), vaddq_s16(vmaxq_s16(v32, vnegq_s16(v32)), vmaxq_s16(v33, vnegq_s16(v33))));
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  v35 = vshlq_u16(v34, (uint16x8_t)v31);
  v36 = (int32x4_t)vqaddq_u16((uint16x8_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)vdupq_n_s64(0xFFFFFFF0uLL)), v35);
  v31.i64[0] = 0xFFFF0000FFFFLL;
  v31.i64[1] = 0xFFFF0000FFFFLL;
  result = vaddq_s32(v36, (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)v36, (int8x16_t)v31), (uint64x2_t)vdupq_n_s64(0xFFFFFFE0uLL)));
  *a2 = result.u16[0];
  *a3 = result.u16[4];
  return result;
}

uint64_t sub_2160C581C(uint64_t a1)
{
  uint64_t v1;
  uint16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint16x8_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int32x4_t v42;
  int32x4_t v43;

  v1 = 0;
  v2 = 0uLL;
  do
  {
    v3 = *(int16x8_t *)(a1 + v1);
    v4 = *(int16x8_t *)(a1 + v1 + 16);
    v5 = *(int16x8_t *)(a1 + v1 + 32);
    v6 = *(int16x8_t *)(a1 + v1 + 48);
    v7 = vaddq_s16(v5, v3);
    v8 = vaddq_s16(v6, v4);
    v9 = (int64x2_t)vsubq_s16(v3, v5);
    v10 = (int64x2_t)vsubq_s16(v4, v6);
    v11 = (int16x8_t)vzip2q_s64((int64x2_t)v7, v9);
    v12 = (int16x8_t)vzip2q_s64((int64x2_t)v8, v10);
    v7.i64[1] = v9.i64[0];
    v13 = vaddq_s16(v7, v11);
    v8.i64[1] = v10.i64[0];
    v14 = vaddq_s16(v8, v12);
    v15 = vsubq_s16(v7, v11);
    v16 = vsubq_s16(v8, v12);
    v17 = (int32x4_t)vzip1q_s16(v13, v15);
    v18 = (int32x4_t)vzip1q_s16(v14, v16);
    v19 = (int32x4_t)vzip2q_s16(v13, v15);
    v20 = (int32x4_t)vzip2q_s16(v14, v16);
    v21 = (int64x2_t)vzip1q_s32(v17, v19);
    v22 = (int64x2_t)vzip1q_s32(v18, v20);
    v23 = (int64x2_t)vzip2q_s32(v17, v19);
    v24 = (int64x2_t)vzip2q_s32(v18, v20);
    v25 = (int16x8_t)vzip1q_s64(v21, v23);
    v26 = (int16x8_t)vzip1q_s64(v22, v24);
    v27 = (int16x8_t)vzip2q_s64(v21, v23);
    v28 = (int16x8_t)vzip2q_s64(v22, v24);
    v29 = vaddq_s16(v25, v27);
    v30 = vaddq_s16(v26, v28);
    v31 = (int64x2_t)vsubq_s16(v25, v27);
    v32 = (int64x2_t)vsubq_s16(v26, v28);
    v33 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
    v34 = (int16x8_t)vzip2q_s64((int64x2_t)v30, v32);
    v29.i64[1] = v31.i64[0];
    v30.i64[1] = v32.i64[0];
    v35 = vaddq_s16(v29, v33);
    v36 = vaddq_s16(v30, v34);
    v37 = vsubq_s16(v29, v33);
    v38 = vsubq_s16(v30, v34);
    v2 = vqaddq_u16(vqaddq_u16(v2, vqaddq_u16((uint16x8_t)vmaxq_s16(v35, vnegq_s16(v35)), (uint16x8_t)vmaxq_s16(v37, vnegq_s16(v37)))), vqaddq_u16((uint16x8_t)vmaxq_s16(v36, vnegq_s16(v36)), (uint16x8_t)vmaxq_s16(v38, vnegq_s16(v38))));
    v1 += 64;
  }
  while ((_DWORD)v1 != 512);
  v39.i64[0] = -1;
  v39.i64[1] = -1;
  v40 = (int8x16_t)vshlq_u16(v2, v39);
  v41.i64[0] = 0xFFFF0000FFFFLL;
  v41.i64[1] = 0xFFFF0000FFFFLL;
  v42 = (int32x4_t)vandq_s8((int8x16_t)vqaddq_u16((uint16x8_t)vextq_s8(v40, (int8x16_t)0, 2uLL), (uint16x8_t)v40), v41);
  v43 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)0, 4uLL), v42);
  return vaddq_s32(v43, vdupq_laneq_s32(v43, 2)).u16[0];
}

uint64_t sub_2160C5930(int16x8_t *a1, unsigned int a2)
{
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  uint16x8_t v78;
  int8x16_t v79;
  int32x4_t v80;
  int32x4_t v81;

  v2 = *(int16x8_t *)((char *)a1 + 8 * a2);
  v3 = *(int16x8_t *)((char *)a1 + 10 * a2);
  v4 = *(int16x8_t *)((char *)a1 + 12 * a2);
  v5 = *(int16x8_t *)((char *)a1 + 14 * a2);
  v6 = vaddq_s16(v2, *a1);
  v7 = vaddq_s16(v3, *(int16x8_t *)((char *)a1 + 2 * a2));
  v8 = vsubq_s16(vaddq_s16(v2, v2), v6);
  v9 = vsubq_s16(vaddq_s16(v3, v3), v7);
  v10 = vaddq_s16(v4, *(int16x8_t *)((char *)a1 + 4 * a2));
  v11 = vaddq_s16(v5, *(int16x8_t *)((char *)a1 + 6 * a2));
  v12 = vsubq_s16(vaddq_s16(v4, v4), v10);
  v13 = vsubq_s16(vaddq_s16(v5, v5), v11);
  v14 = vaddq_s16(v10, v6);
  v15 = vaddq_s16(v11, v7);
  v16 = vsubq_s16(vaddq_s16(v10, v10), v14);
  v17 = vsubq_s16(vaddq_s16(v11, v11), v15);
  v18 = vaddq_s16(v12, v8);
  v19 = vaddq_s16(v13, v9);
  v20 = vsubq_s16(vaddq_s16(v12, v12), v18);
  v21 = vsubq_s16(vaddq_s16(v13, v13), v19);
  v22 = vaddq_s16(v15, v14);
  v23 = vaddq_s16(v17, v16);
  v24 = vsubq_s16(vaddq_s16(v15, v15), v22);
  v25 = vsubq_s16(vaddq_s16(v17, v17), v23);
  v26 = vaddq_s16(v19, v18);
  v27 = vaddq_s16(v21, v20);
  v28 = vsubq_s16(vaddq_s16(v19, v19), v26);
  v29 = vsubq_s16(vaddq_s16(v21, v21), v27);
  v30 = (int32x4_t)vzip1q_s16(v22, v24);
  v31 = (int32x4_t)vzip2q_s16(v22, v24);
  v32 = (int32x4_t)vzip1q_s16(v23, v25);
  v33 = (int32x4_t)vzip2q_s16(v23, v25);
  v34 = (int32x4_t)vzip1q_s16(v26, v28);
  v35 = (int32x4_t)vzip2q_s16(v26, v28);
  v36 = (int32x4_t)vzip1q_s16(v27, v29);
  v37 = (int32x4_t)vzip2q_s16(v27, v29);
  v38 = (int64x2_t)vzip1q_s32(v30, v32);
  v39 = (int64x2_t)vzip2q_s32(v30, v32);
  v40 = (int64x2_t)vzip1q_s32(v31, v33);
  v41 = (int64x2_t)vzip2q_s32(v31, v33);
  v42 = (int64x2_t)vzip1q_s32(v34, v36);
  v43 = (int64x2_t)vzip2q_s32(v34, v36);
  v44 = (int64x2_t)vzip1q_s32(v35, v37);
  v45 = (int64x2_t)vzip2q_s32(v35, v37);
  v46 = (int16x8_t)vzip1q_s64(v38, v42);
  v47 = (int16x8_t)vzip2q_s64(v38, v42);
  v48 = (int16x8_t)vzip1q_s64(v40, v44);
  v49 = (int16x8_t)vzip2q_s64(v40, v44);
  v50 = (int16x8_t)vzip1q_s64(v39, v43);
  v51 = (int16x8_t)vzip2q_s64(v39, v43);
  v52 = (int16x8_t)vzip1q_s64(v41, v45);
  v53 = (int16x8_t)vzip2q_s64(v41, v45);
  v54 = vaddq_s16(v46, v48);
  v55 = vaddq_s16(v47, v49);
  v56 = vsubq_s16(vaddq_s16(v48, v48), v54);
  v57 = vsubq_s16(vaddq_s16(v49, v49), v55);
  v58 = vaddq_s16(v50, v52);
  v59 = vaddq_s16(v51, v53);
  v60 = vsubq_s16(vaddq_s16(v52, v52), v58);
  v61 = vsubq_s16(vaddq_s16(v53, v53), v59);
  v62 = vaddq_s16(v54, v58);
  v63 = vaddq_s16(v55, v59);
  v64 = vsubq_s16(vaddq_s16(v58, v58), v62);
  v65 = vsubq_s16(vaddq_s16(v59, v59), v63);
  v66 = vaddq_s16(v56, v60);
  v67 = vaddq_s16(v57, v61);
  v68 = vsubq_s16(vaddq_s16(v60, v60), v66);
  v69 = vsubq_s16(vaddq_s16(v61, v61), v67);
  v70 = vaddq_s16(v62, v63);
  v71 = vaddq_s16(v64, v65);
  v72 = vsubq_s16(vaddq_s16(v63, v63), v70);
  v73 = vsubq_s16(vaddq_s16(v65, v65), v71);
  v74 = vaddq_s16(v66, v67);
  v75 = vaddq_s16(v68, v69);
  v76 = vsubq_s16(vaddq_s16(v67, v67), v74);
  v77 = vsubq_s16(vaddq_s16(v69, v69), v75);
  v78 = (uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vmaxq_s16(v72, vnegq_s16(v72)), vmaxq_s16(v70, vnegq_s16(v70))), vmaxq_s16(v71, vnegq_s16(v71))), vaddq_s16(vmaxq_s16(v73, vnegq_s16(v73)), vmaxq_s16(v74, vnegq_s16(v74)))), vaddq_s16(vaddq_s16(vmaxq_s16(v76, vnegq_s16(v76)), vmaxq_s16(v75, vnegq_s16(v75))), vmaxq_s16(v77, vnegq_s16(v77))));
  v72.i64[0] = -1;
  v72.i64[1] = -1;
  v79 = (int8x16_t)vshlq_u16(v78, (uint16x8_t)v72);
  v73.i64[0] = 0xFFFF0000FFFFLL;
  v73.i64[1] = 0xFFFF0000FFFFLL;
  v80 = (int32x4_t)vandq_s8((int8x16_t)vqaddq_u16((uint16x8_t)vextq_s8(v79, (int8x16_t)0, 2uLL), (uint16x8_t)v79), (int8x16_t)v73);
  v81 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)0, 4uLL), v80);
  return (vaddq_s32(v81, vdupq_laneq_s32(v81, 2)).u16[0] + 1) >> 1;
}

_DWORD *sub_2160C5BA0(_DWORD *result)
{
  *result |= 4u;
  return result;
}

_DWORD *sub_2160C5BB0(_DWORD *result)
{
  *result |= 8u;
  return result;
}

uint64_t sub_2160C5BC0(unsigned int a1)
{
  return (a1 >> 1) & 1;
}

uint64_t sub_2160C5BC8(unsigned int a1)
{
  return (a1 >> 2) & 1;
}

uint64_t sub_2160C5BD0(unsigned int a1)
{
  return (a1 >> 3) & 1;
}

uint64_t sub_2160C5BD8(unsigned int a1)
{
  return (a1 >> 4) & 1;
}

uint64_t sub_2160C5BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30[36648];
  uint64_t v31;

  v10 = MEMORY[0x24BDAC7A8]();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = v10;
  v31 = *MEMORY[0x24BDAC8D0];
  bzero(v30, 0x23CA0uLL);
  if (!v25)
    return 1;
  if (!sub_2160C5D60(0, v30, v24, v22, v20, v18, v16, v14, v12, a9, a10))
  {
    v27 = v25 + 4723788;
    v28 = v30;
    v29 = 32;
    while (v28[3] == *(_DWORD *)v27
         && v28[4] == *(_DWORD *)(v27 + 4)
         && v28[335] == *(_DWORD *)(v27 + 1328)
         && v28[336] == *(_DWORD *)(v27 + 1332)
         && *((unsigned __int8 *)v28 + 1437) == *(unsigned __int8 *)(v27 + 1425)
         && *((unsigned __int8 *)v28 + 1438) == *(unsigned __int8 *)(v27 + 1426))
    {
      v28 += 470;
      v27 += 1880;
      if (!--v29)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_2160C5D60(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int a5, unsigned int *a6, unsigned int *a7, int a8, uint64_t a9, unsigned int *a10, unsigned int a11)
{
  uint64_t i;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  unsigned int v22;
  uint64_t v23;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  _BYTE v30[36];
  int v31;

  LODWORD(i) = a8;
  *(_QWORD *)a2 = 0;
  a2[36647] = 0;
  if (a5)
  {
    v18 = (_DWORD *)(a1 + 5041852);
    v19 = a5;
    while (1)
    {
      v20 = *(_BYTE *)a3 & 0x1F;
      if (v20 == 6)
      {
        result = sub_2160BE4F0(a3, *a4, a2);
        goto LABEL_11;
      }
      if (v20 == 13)
        break;
      if (v20 == 7)
      {
        if (*a2 || a2[2])
        {
          result = sub_2160BE194(a3, *a4, (int *)a2);
        }
        else
        {
          sub_2160BE2C8(a3, *a4, a2);
          result = sub_2160BE540(a3, *a4, (uint64_t)v30);
          if (a1)
            *v18 = v31;
        }
LABEL_11:
        if ((_DWORD)result)
          return result;
      }
      v22 = *a4++;
      a3 = (unsigned int *)((char *)a3 + v22);
      if (!--v19)
        goto LABEL_16;
    }
    result = sub_2160BE3DC();
    goto LABEL_11;
  }
LABEL_16:
  v23 = a11;
  if (a11)
  {
    while (1)
    {
      result = sub_2160BE3DC();
      if ((_DWORD)result)
        break;
      v26 = *a10++;
      a9 += v26;
      if (!--v23)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    v27 = a2[2];
    if (!v27 || (result = 4294966630, v27 <= 1) && (int)*a2 <= 1)
    {
      if ((_DWORD)i)
      {
        for (i = i; i; --i)
        {
          v28 = *(_BYTE *)a6 & 0x1F;
          if (v28 == 6)
          {
            result = sub_2160BE4F0(a6, *a7, a2);
            if ((_DWORD)result)
              return result;
          }
          else if (v28 == 8)
          {
            result = sub_2160BE3E4(a6, *a7, a2);
            if ((_DWORD)result)
              return result;
          }
          v29 = *a7++;
          a6 = (unsigned int *)((char *)a6 + v29);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_2160C5F3C(uint64_t *a1, unsigned int *a2, unsigned int *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, unsigned int a7, uint64_t a8, unsigned int *a9, unsigned int a10, unsigned int *a11, unsigned int a12, char a13, int a14, uint64_t a15)
{
  int v20;
  int v21;
  FILE **v22;
  char *v23;
  uint64_t v24;
  pthread_mutex_t **v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  pthread_cond_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  pthread_t *v43;
  _QWORD *v44;
  int v45;
  pthread_mutex_t **v46;
  pthread_mutex_t *v47;
  pthread_mutex_t *v48;
  int v50;
  int v51;
  pthread_mutex_t **v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  unsigned int v57;
  char v59;
  uint64_t *v62;
  int v63;

  if (qword_254E17448 != -1)
    dispatch_once(&qword_254E17448, &unk_24D4DE5B8);
  sub_2160CB6AC();
  if (!*a11)
    *a11 = sub_2160EC9D4(8u);
  v20 = a11[3];
  if (v20)
  {
    if (v20 < 33)
      goto LABEL_10;
    v20 = 32;
  }
  else
  {
    v20 = 2;
  }
  a11[3] = v20;
LABEL_10:
  v63 = a11[4];
  if (!v63)
  {
    v63 = 1;
    a11[4] = 1;
  }
  v21 = a11[5];
  if (!v21)
  {
    v21 = 8;
    a11[5] = 8;
  }
  v55 = a11[2];
  if (a11[6])
  {
    v22 = (FILE **)MEMORY[0x24BDAC8D8];
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "INFO: maxNumberOfInflightPictures=%d\n", v20);
    fprintf(*v22, "INFO: numberOfFramesToInitiallyAllocate=%d\n", v63);
    fprintf(*v22, "INFO: numberOfFramesToWaitUntilDisplay=%d\n", v21);
    fprintf(*v22, "INFO: throttleThreshold=%d\n", a11[7]);
  }
  sub_2160EC9D4(8u);
  v23 = (char *)sub_2160CB5E8(0x4CEEC0uLL);
  v62 = a1;
  *a1 = (uint64_t)v23;
  if (!v23)
    goto LABEL_53;
  v24 = (uint64_t)v23;
  v51 = v21;
  v57 = a7;
  v25 = (pthread_mutex_t **)(v23 + 5041584);
  v26 = a6;
  v27 = (unsigned int *)(v23 + 4723760);
  v54 = (uint64_t)(v23 + 5041592);
  sub_2160CDDD8((uint64_t)(v23 + 5041592));
  v52 = v25;
  v53 = v27;
  *((_DWORD *)v25 + 66) = a11[2];
  v56 = v27 + 4;
  v28 = sub_2160C5D60(v24, v27 + 4, a2, a3, a4, a5, v26, v57, a8, a9, a10);
  if ((_DWORD)v28)
    goto LABEL_54;
  *(_DWORD *)(v24 + 5016956) = 0;
  if (a4)
  {
    v29 = a4;
    v30 = (char *)(v24 + 4723788);
    v31 = (char *)(v24 + 4870380);
    do
    {
      memcpy(v31, v30, 0x758uLL);
      v30 += 1880;
      v31 += 1880;
      --v29;
    }
    while (v29);
  }
  *(_DWORD *)(v24 + 4870368) = *v56;
  if (v57)
  {
    v32 = v57;
    v33 = (char *)(v24 + 4783952);
    v34 = (char *)(v24 + 4930544);
    do
    {
      memcpy(v34, v33, 0x150uLL);
      v33 += 336;
      v34 += 336;
      --v32;
    }
    while (v32);
  }
  *(_DWORD *)(v24 + 4870372) = v53[5];
  v52[28] = 0;
  *(pthread_mutex_t **)((char *)v52 + 236) = 0;
  *v53 = 1;
  if (v55 == -3)
  {
    if (a13)
      exit(1);
    *v53 = 0;
    *(_QWORD *)(v24 + 16) = sub_2160EC80C();
    v35 = sub_2160EC898();
    *(_QWORD *)(v24 + 24) = v35;
    v28 = 4294967188;
    if (!*(_QWORD *)(v24 + 16))
      goto LABEL_54;
    v59 = 0;
    if (!v35)
      goto LABEL_54;
    *(_DWORD *)v24 = -1;
    *(_DWORD *)(v24 + 4) = v20;
    *(_DWORD *)(v24 + 8) = 0;
    *((_QWORD *)v53 + 1) = 0;
    v53[1] = v51;
    if (v20 >= 1)
    {
      v36 = 0;
      v37 = 40;
      do
      {
        *(_QWORD *)(v24 + v37) = 0;
        ++v36;
        v37 += 147616;
      }
      while (v36 < v20);
      v38 = 0;
      v39 = 0;
      v40 = 147640;
      while (1)
      {
        v41 = v24 + v38;
        v42 = sub_2160BEB94((uint64_t *)(v24 + v38 + 40), (uint64_t)v56, a12, a11, 0, v24, v54, a14);
        if ((_DWORD)v42)
          break;
        *(_DWORD *)(v41 + 32) = 0;
        *(_QWORD *)(v41 + 176) = v24;
        *(_DWORD *)(v41 + 48) = 0;
        *(_QWORD *)(v41 + 64) = sub_2160EC928(1, 0);
        *(_QWORD *)(v41 + 72) = sub_2160EC928(1, 0);
        v43 = sub_2160EC560((void *(__cdecl *)(void *))sub_2160C64F8, (void *)(v41 + 32), a14);
        *(_QWORD *)(v41 + 56) = v43;
        *(_QWORD *)(v41 + 160) = 0;
        *(_DWORD *)(v41 + 168) = 0;
        v44 = (_QWORD *)(v24 + v40);
        *(v44 - 3) = a15;
        *v44 = 0;
        if (!*(_QWORD *)(v41 + 64))
          goto LABEL_53;
        v28 = 4294967188;
        if (!*(_QWORD *)(v41 + 72) || !v43)
          goto LABEL_54;
        ++v39;
        v38 += 147616;
        v40 += 147616;
        if (v39 >= *(int *)(v24 + 4))
          goto LABEL_37;
      }
      v28 = v42;
      goto LABEL_54;
    }
LABEL_37:
    v52[9] = *(pthread_mutex_t **)(v24 + 40);
  }
  else
  {
    v59 = a13;
    v28 = sub_2160BEB94((uint64_t *)(v24 + 5041656), (uint64_t)v56, a12, a11, 0, v24, v54, a14);
    if ((_DWORD)v28)
      goto LABEL_54;
  }
  v28 = sub_2160B0924(v24 + 4723788, v24 + 5016960);
  if ((_DWORD)v28)
    goto LABEL_54;
  if (*((_BYTE *)v53 + 1364))
    v45 = 1;
  else
    v45 = *((_BYTE *)v53 + 1365) ? 4 : 3;
  v28 = sub_2160CD78C(v24 + 5041520, v63, 16 * HIDWORD(v52[9]->__sig), 16 * *(_DWORD *)&v52[9]->__opaque[8], v45, 0, v50, 1, v54, 0);
  if ((_DWORD)v28)
    goto LABEL_54;
  v46 = v52;
  if (v55 != -3)
  {
    *v52 = sub_2160EC80C();
    v52[13] = sub_2160EC80C();
    v47 = sub_2160EC80C();
    v52[18] = v47;
    if (*v52)
    {
      v28 = 4294967188;
      if (v52[13] && v47)
      {
        v46 = v52;
        v52[12] = 0;
        goto LABEL_51;
      }
LABEL_54:
      sub_2160C66B0(*v62);
      *v62 = 0;
      return v28;
    }
LABEL_53:
    v28 = 4294967188;
    goto LABEL_54;
  }
LABEL_51:
  v46[9][8].__opaque[24] = v59;
  v48 = v46[9];
  if (v48[8].__opaque[24])
  {
    sub_2160B1B74((uint64_t)&v48[2].__opaque[28]);
    sub_2160B217C((uint64_t)v46[9][6].__opaque);
  }
  else
  {
    sub_2160B21FC(v48[6].__opaque, 0);
  }
  *(_DWORD *)(v24 + 5041672) = 0;
  *(_QWORD *)(v24 + 5041664) = 0;
  sub_2160C4FC4(0);
  return 0;
}

uint64_t sub_2160C64F8(uint64_t a1)
{
  void (**v3)(_QWORD);
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_2160EC54C(0);
  sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 40));
  sub_2160EC9B8(*(dispatch_semaphore_t **)(a1 + 32));
  if (!*(_DWORD *)(a1 + 16))
  {
    v3 = (void (**)(_QWORD))(a1 + 147584);
    do
    {
      voucher_adopt();
      *(_QWORD *)(a1 + 147608) = 0;
      sub_2160CA6CC(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 552), *(_QWORD *)(a1 + 120));
      v4 = *(void **)(a1 + 120);
      if (v4)
        j__free(v4);
      sub_2160BE8C0(a1 + 48);
      sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(a1 + 144) + 16));
      sub_2160CB530(a1);
      if (*v3 && *(_QWORD *)(a1 + 147592))
      {
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 144) + 5041808))
        {
          v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
          if (*(_BYTE *)(v8 + 1362))
          {
            v9 = *(_QWORD *)(v8 + 1352);
            if (v9)
            {
              while (!*(_BYTE *)(v9 + 4))
                sub_2160EC918(*(pthread_cond_t **)(*(_QWORD *)(a1 + 144) + 24), *(pthread_mutex_t **)(*(_QWORD *)(a1 + 144) + 16));
            }
          }
        }
        (*v3)(0);
      }
      v5 = *(_QWORD *)(a1 + 8);
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 144) + 5041808))
      {
        v7 = *(_QWORD *)(v5 + 88);
        if (*(_BYTE *)(v7 + 1362))
        {
          if (*(_BYTE *)(v7 + 34))
          {
            sub_2160ECB04((unsigned int *)(*(_QWORD *)(v7 + 1352) + 8));
            v5 = *(_QWORD *)(a1 + 8);
          }
        }
      }
      sub_2160ECB04((unsigned int *)(*(_QWORD *)(v5 + 88) + 8));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 4) = 1;
      *(_DWORD *)a1 = 0;
      --*(_DWORD *)(*(_QWORD *)(a1 + 144) + 8);
      sub_2160EC90C(*(pthread_cond_t **)(*(_QWORD *)(a1 + 144) + 24));
      sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(a1 + 144) + 16));
      v6 = (void *)voucher_adopt();
      os_release(v6);
      sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 40));
      sub_2160EC9B8(*(dispatch_semaphore_t **)(a1 + 32));
    }
    while (!*(_DWORD *)(a1 + 16));
  }
  return 0;
}

void sub_2160C66B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v2 = a1 + 5041584;
    v3 = *(_QWORD *)(a1 + 5041656);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 544) && *(_DWORD *)(v3 + 392) >= 2u)
        sub_2160C68AC(v3 + 392);
      if (*(_DWORD *)(v2 + 264) == -3)
      {
        sub_2160C6910((pthread_mutex_t *)a1);
        if (*(int *)(a1 + 4) >= 1)
        {
          v4 = 0;
          v5 = a1;
          do
          {
            *(_DWORD *)(v5 + 48) = 1;
            sub_2160EC9C4(*(dispatch_semaphore_t **)(v5 + 64));
            sub_2160EC7DC(*(pthread_t **)(v5 + 56));
            sub_2160EC984(*(NSObject ***)(v5 + 64));
            *(_QWORD *)(v5 + 64) = 0;
            sub_2160EC984(*(NSObject ***)(v5 + 72));
            *(_QWORD *)(v5 + 72) = 0;
            sub_2160EC7D0(*(void **)(v5 + 56));
            *(_QWORD *)(v5 + 56) = 0;
            v6 = *(_QWORD *)(v5 + 40);
            if (v6)
            {
              sub_2160BEDA8(v6);
              *(_QWORD *)(v5 + 40) = 0;
            }
            v7 = *(void **)(v5 + 160);
            if (v7)
            {
              j__free(v7);
              *(_QWORD *)(v5 + 160) = 0;
            }
            os_release(*(void **)(v5 + 147640));
            *(_QWORD *)(v5 + 147640) = 0;
            ++v4;
            v5 += 147616;
          }
          while (v4 < *(int *)(a1 + 4));
        }
        sub_2160B097C((pthread_mutex_t **)(a1 + 5016960));
        sub_2160CD8FC(a1 + 5041520);
        sub_2160EC854(*(pthread_mutex_t **)(a1 + 16));
        *(_QWORD *)(a1 + 16) = 0;
        sub_2160EC8E0(*(pthread_cond_t **)(a1 + 24));
        *(_QWORD *)(a1 + 24) = 0;
      }
      else
      {
        sub_2160EC854(*(pthread_mutex_t **)v2);
        *(_QWORD *)v2 = 0;
        sub_2160EC854(*(pthread_mutex_t **)(v2 + 104));
        *(_QWORD *)(v2 + 104) = 0;
        sub_2160EC854(*(pthread_mutex_t **)(v2 + 144));
        *(_QWORD *)(v2 + 144) = 0;
        sub_2160B097C((pthread_mutex_t **)(a1 + 5016960));
        sub_2160BEDA8(v3);
        sub_2160CD8FC(a1 + 5041520);
      }
    }
    v8 = *(_QWORD *)(v2 + 96);
    if (v8)
    {
      sub_2160BEDA8(v8);
      *(_DWORD *)(v2 + 112) = 1;
      sub_2160EC9C4(*(dispatch_semaphore_t **)(v2 + 128));
      sub_2160EC7DC(*(pthread_t **)(v2 + 120));
      sub_2160EC984(*(NSObject ***)(v2 + 128));
      *(_QWORD *)(v2 + 128) = 0;
      sub_2160EC984(*(NSObject ***)(v2 + 136));
      *(_QWORD *)(v2 + 136) = 0;
      sub_2160EC7D0(*(void **)(v2 + 120));
      *(_QWORD *)(v2 + 120) = 0;
    }
    v9 = *(_QWORD *)(v2 + 80);
    if (v9)
    {
      sub_2160CB698(v9);
      *(_QWORD *)(v2 + 80) = 0;
    }
    sub_2160CDE24(a1 + 5041592);
    j__free((void *)a1);
  }
}

uint64_t sub_2160C68AC(uint64_t a1)
{
  _QWORD *v1;
  void *v3;
  uint64_t result;

  v1 = (_QWORD *)(a1 + 64);
  if (!*(_QWORD *)(a1 + 64))
    return 0;
  if (*(_DWORD *)a1 < 2u || !*(_BYTE *)(a1 + 36))
    return 4294958324;
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    j__free(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
  result = 0;
  *v1 = 0;
  v1[1] = 0;
  return result;
}

pthread_mutex_t *sub_2160C6910(pthread_mutex_t *result)
{
  pthread_mutex_t *v1;

  if (result)
  {
    v1 = result;
    sub_2160EC880(*(pthread_mutex_t **)&result->__opaque[8]);
    if (*(int *)v1->__opaque >= 1)
    {
      do
        sub_2160EC918(*(pthread_cond_t **)&v1->__opaque[16], *(pthread_mutex_t **)&v1->__opaque[8]);
      while (*(int *)v1->__opaque > 0);
    }
    return sub_2160EC88C(*(pthread_mutex_t **)&v1->__opaque[8]);
  }
  return result;
}

uint64_t sub_2160C6960(int a1, int a2, int a3, _DWORD *a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8, unsigned __int8 a9, int a10, uint64_t a11)
{
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  char v24;
  unsigned __int8 v25;
  char v26;
  unsigned int *v27;
  uint64_t v28;
  char v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  signed int v36;
  unsigned int **v37;
  unsigned int *v38;
  int v39;
  _DWORD *v40;
  int v41;
  int v42;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;

  if (a10)
    v11 = a11 == 0;
  else
    v11 = 1;
  v12 = v11;
  v13 = 4294958327;
  if (a3 && a5)
  {
    v46 = *(_QWORD *)(a6 + 5041656);
    sub_2160BE8B0((uint64_t)&v47);
    v13 = sub_2160BE900((uint64_t)&v47, 400);
    if (!(_DWORD)v13)
    {
      if (v50 && v51)
      {
        v47 = a5;
        v13 = 4294958327;
        v49 = 0;
        v48 = a3;
        switch(a2)
        {
          case 0:
            v20 = sub_2160EBA84((uint64_t)&v47, v12);
            goto LABEL_20;
          case 2:
            v20 = sub_2160EBD8C((uint64_t)&v47);
            goto LABEL_20;
          case 3:
            v21 = 1;
            goto LABEL_19;
          case 4:
            v21 = 2;
            goto LABEL_19;
          case 5:
            v21 = 4;
LABEL_19:
            v20 = sub_2160EBC08((uint64_t)&v47, v21, (*(_DWORD *)(v46 + 4) * *(_DWORD *)(v46 + 8)) << 10, v12, a11);
LABEL_20:
            v13 = v20;
            v22 = v49;
            if ((_DWORD)v20)
              v23 = 1;
            else
              v23 = v49 == 0;
            if (!v23)
            {
              v24 = 0;
              v25 = 0;
              v26 = 0;
              v27 = (unsigned int *)(a6 + 4723776);
              *(_DWORD *)(a6 + 4870352) = 0;
              if (!*(_DWORD *)(v46 + 48))
              {
                if ((a9 | 2) == 3 || v22 < 1)
                {
                  v24 = 0;
                  v25 = 0;
                  v26 = 0;
                }
                else
                {
                  v28 = 0;
                  v29 = 0;
                  v24 = 0;
                  v25 = 0;
                  do
                  {
                    v30 = sub_2160DD934(*(_BYTE **)(v51 + 8 * v28));
                    v31 = 8 * (v30 - 1);
                    v32 = 0x101u >> v31;
                    v33 = 0x10001u >> v31;
                    if ((v30 - 1) < 3)
                    {
                      v25 = 1;
                      v24 = v32;
                      v29 = v33;
                    }
                    ++v28;
                  }
                  while (v28 < v49);
                  if (v29)
                  {
                    if ((unsigned __int16)sub_2160C4FB8())
                      v26 = 4;
                    else
                      v26 = 1;
                  }
                  else
                  {
                    v26 = 0;
                  }
                  v27 = (unsigned int *)(a6 + 4723776);
                }
              }
              if ((a9 | 2) == 3)
              {
                v34 = a9;
                v35 = a10;
              }
              else
              {
                v34 = 0;
                v35 = 0;
              }
              v13 = sub_2160C6C98(v46, (uint64_t)&v47, v27, v34, v35);
              if (!(_DWORD)v13)
              {
                v36 = v49;
                v37 = (unsigned int **)(v51 + 8 * v52);
                v38 = (unsigned int *)(v50 + 4 * v52);
                *(_DWORD *)(v46 + 156) = 0;
                *(_DWORD *)(*(_QWORD *)(v46 + 40) + 264) = 25;
                if (a4)
                {
                  v39 = a4[1];
                  if (v39)
                  {
                    v40 = a8;
                    v41 = a7;
                  }
                  else
                  {
                    v40 = a8;
                    v41 = a7;
                    if (*a4 <= 0x89u)
                    {
                      *(_DWORD *)(v46 + 156) = (138 - *a4) >> 2;
                      v39 = a4[1];
                    }
                  }
                  if (v39)
                    *(_DWORD *)(*(_QWORD *)(v46 + 40) + 264) = 0;
                  v42 = a4[2];
                }
                else
                {
                  v42 = 0x10000;
                  v40 = a8;
                  v41 = a7;
                }
                v13 = sub_2160BE870(v37, v38, v36, a1, v41, v46, a6, v40, a9, a10, v25, v24, v26, v42);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        v13 = 4294967188;
      }
    }
    sub_2160BE8C0((uint64_t)&v47);
  }
  return v13;
}

uint64_t sub_2160C6C98(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  int v24;
  _QWORD *v25;
  int *v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v35;
  int v36;
  _BOOL4 v37;
  _BYTE v39[20];
  int v40;
  int v41;

  v7 = *(int **)(a2 + 40);
  v6 = *(_QWORD **)(a2 + 48);
  v8 = *(unsigned int *)(a2 + 32);
  *(_DWORD *)(a2 + 64) = 0;
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v33 = 0;
    v10 = 0;
    if (a5)
      v11 = (a4 & 0xFFFFFFFD) == 1;
    else
      v11 = 0;
    v12 = (a4 & 0xFFFFFFFD) != 1 || a5 != 0;
    v36 = 0;
    v37 = v12;
    v31 = a1;
    v32 = a3 + 36646;
    v35 = a4 & 0xFD;
    while (1)
    {
      v13 = (unsigned int *)v6[v9];
      v14 = v7[v9];
      v15 = *(_BYTE *)v13 & 0x1F;
      fflush((FILE *)*MEMORY[0x24BDAC8D8]);
      if (v15 != 19 && v11)
        break;
      if (!v37)
      {
        switch(v15)
        {
          case 5:
            goto LABEL_41;
          case 6:
          case 9:
          case 10:
          case 11:
          case 12:
            goto LABEL_35;
          case 7:
            goto LABEL_26;
          case 8:
            goto LABEL_27;
          case 13:
            goto LABEL_31;
          default:
            if (v15 != 1)
              goto LABEL_34;
            goto LABEL_41;
        }
      }
      if (v35 != 1 && v15 != 5 && v15 != 1)
        break;
LABEL_41:
      v10 = sub_2160BACAC(v13, v14, a3, v39, a4, 0);
      if (!(_DWORD)v10 && (v40 == 7 || v40 == 2))
        v33 = 1;
      if (v36)
      {
        if (v41)
          goto LABEL_51;
        v36 = 1;
      }
      else
      {
        if (!(*v32 | v33) || v41)
          goto LABEL_51;
        v36 = 0;
      }
LABEL_52:
      if (++v9 == v8)
      {
        v24 = 0;
        v25 = v6;
        v26 = v7;
        do
        {
          v28 = *v26++;
          v27 = v28;
          if (*v25)
            v29 = v27 == 0;
          else
            v29 = 1;
          if (!v29)
          {
            v6[v24] = *v25;
            v7[v24++] = v27;
          }
          ++v25;
          --v8;
        }
        while (v8);
        a1 = v31;
        goto LABEL_62;
      }
    }
    if (v15 > 12)
    {
      if (v15 == 13)
      {
LABEL_31:
        v22 = sub_2160BE3DC();
LABEL_32:
        v10 = v22;
        goto LABEL_51;
      }
LABEL_34:
      if (v15 != 19)
        goto LABEL_35;
    }
    else
    {
      if (v15 != 7)
      {
        if (v15 != 8)
        {
LABEL_35:
          if (v15 == 6 && (int)v14 >= 2)
          {
            v10 = sub_2160BE4F0(v13, v14, a3);
            if ((_DWORD)v10)
              return v10;
          }
          goto LABEL_51;
        }
LABEL_27:
        if ((int)v14 >= 1)
        {
          v18 = *(_DWORD *)(a2 + 64);
          v19 = v14;
          v20 = v13;
          do
          {
            v21 = *(unsigned __int8 *)v20;
            v20 = (unsigned int *)((char *)v20 + 1);
            v18 += v21;
            *(_DWORD *)(a2 + 64) = v18;
            --v19;
          }
          while (v19);
        }
        v22 = sub_2160BE3E4(v13, v14, a3);
        goto LABEL_32;
      }
LABEL_26:
      v10 = sub_2160BE194(v13, v14, (int *)a3);
      v36 = 1;
    }
LABEL_51:
    v6[v9] = 0;
    v7[v9] = 0;
    goto LABEL_52;
  }
  v10 = 0;
  v24 = 0;
LABEL_62:
  *(_DWORD *)(a2 + 32) = v24;
  if (v24 > *(_DWORD *)(a1 + 12))
    return 4294958327;
  *(_DWORD *)(a2 + 56) = 0;
  return v10;
}

uint64_t sub_2160C6F78(uint64_t a1, int a2, int a3, uint64_t a4, _DWORD *a5, int a6, uint64_t a7, unsigned int a8, int a9, int a10)
{
  uint64_t v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  int32x2_t *v21;
  uint64_t v22;
  int v23;
  char v24;
  BOOL v25;
  char v26;
  int v27;
  __int32 v28;
  int v29;
  int32x2_t v30;
  BOOL v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  char *v38;
  int32x2_t *v39;
  int32x2_t *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  size_t v46;
  char *v47;
  char *v48;
  unsigned int v49;
  BOOL v50;
  int32x2_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int32 v60;
  int32x2_t v61;
  char v62;
  char v63;
  int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int v68;
  int v69;
  char *v70;
  char *v71;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  int v77;
  int v78;
  char v79;
  unsigned int v80;
  unsigned int __n;
  int __n_4;
  uint64_t v83;
  uint64_t v84;
  int32x2_t *v85;
  int32x2_t *v86;
  int v87;

  v17 = a1 + 5040672;
  if (a4)
    v18 = a5 == 0;
  else
    v18 = 1;
  v19 = !v18;
  if (a4)
  {
    v20 = *(_DWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 144) = 0;
  }
  else
  {
    v20 = 0;
  }
  v87 = 0;
  v85 = 0;
  v86 = 0;
  if (*(_DWORD *)(a1 + 5041808)
    && ((a2 & 1) != 0 && a10 || (a2 & 1) != 0 && !a10 && *(_DWORD *)(a1 + 5041824) - 1 == a2))
  {
    v21 = 0;
    v22 = 4294954949;
    goto LABEL_169;
  }
  __n = v20;
  v84 = a1 + 5040672;
  if (a4 && (*(_DWORD *)(a4 + 20) | 0x10) == 0x34323076)
    *(_DWORD *)(a4 + 20) = 875704438;
  __n_4 = v19;
  v83 = a1;
  v22 = sub_2160C772C(a1, a2, a3, a4, 0, a5, a7, a8, 0, 0, &v86, 0, a9, v19);
  v21 = v86;
  if (v86)
  {
    v23 = 1;
LABEL_22:
    v19 = __n_4;
    v24 = 0;
    goto LABEL_23;
  }
  v24 = 1;
  if (*(_DWORD *)(v84 + 1136))
  {
    v22 = sub_2160C772C(v83, a2, a3, a4, 0, a5, a7, a8, 0, 0, &v86, 1, a9, __n_4);
    v23 = 0;
    v21 = v86;
    if (v86)
      goto LABEL_22;
    v19 = __n_4;
    v24 = 1;
  }
  else
  {
    v21 = 0;
    v23 = 1;
    v19 = __n_4;
  }
LABEL_23:
  if ((_DWORD)v22)
    v25 = a6 == 1;
  else
    v25 = 1;
  if (!v25)
  {
    a1 = v83;
    v17 = v84;
    goto LABEL_169;
  }
  a1 = v83;
  if (!v19)
  {
    v17 = v84;
    goto LABEL_169;
  }
  v79 = v24;
  if (*a5)
  {
    v26 = 0;
    if (a9 && v21 && *(_DWORD *)(a4 + 64))
    {
      v75 = *(_DWORD *)(a4 + 68);
      v27 = a2;
      if (!*(_DWORD *)(v84 + 1136))
      {
LABEL_127:
        v62 = 1;
        v78 = v27;
        v22 = sub_2160C772C(v83, v27, a3, a4, 0, &v87, a7, a8, 0, 0, &v85, v23, 1, v19);
        v63 = 0;
        goto LABEL_128;
      }
      if (a2 == 1)
        goto LABEL_123;
      v27 = *(_DWORD *)(v84 + 1152);
      if (!v27)
        goto LABEL_123;
      v28 = v21[160].i32[0];
      if (v21[171].i8[3])
      {
        if (*(_DWORD *)(v84 + 24) + 1 != a2)
          goto LABEL_123;
        goto LABEL_38;
      }
      if ((a2 & 1) != 0 && !a10 && *(_DWORD *)(v84 + 1148))
        goto LABEL_123;
      v60 = *(_DWORD *)v84;
      if ((a2 & 1) == 0 || v28 <= v60)
      {
        if ((a2 & 1) == 0 || v28 >= v60)
        {
LABEL_38:
          if (v27 == a2)
          {
            v27 = a2 - 1;
LABEL_126:
            *(_DWORD *)(v84 + 1152) = a2;
            goto LABEL_127;
          }
          if ((a2 & 1) != 0)
          {
            if (v28 < *(_DWORD *)v84)
              v27 = *(_DWORD *)(v84 + 28);
            goto LABEL_126;
          }
          v61 = v21[169];
          if (v61)
          {
            v27 = *(_DWORD *)(*(_QWORD *)&v61 + 1264);
            goto LABEL_126;
          }
LABEL_123:
          v78 = 0;
          v62 = 0;
          *(_DWORD *)(v84 + 1152) = a2;
          v63 = 1;
LABEL_128:
          if (a6 != 1 && (_DWORD)v22)
            goto LABEL_138;
          v64 = v87;
          if (v87 && *(_DWORD *)(a4 + 64))
          {
            if (*(_DWORD *)(a4 + 68) == v75)
              v63 = 1;
            if ((v63 & 1) == 0)
            {
              v17 = v84;
              if (*(_DWORD *)(v84 + 1136))
              {
                v65 = sub_2160ACD64(v83, a2);
                if ((_DWORD)v65)
                {
                  v22 = v65;
                  goto LABEL_139;
                }
                v26 = 0;
                v80 = 0;
              }
              else
              {
                v80 = v22;
                v26 = 0;
              }
              goto LABEL_175;
            }
          }
          if ((a2 & 1) != 0)
          {
            v29 = v78;
            if (!*(_DWORD *)(v84 + 1136))
              goto LABEL_145;
            v22 = sub_2160ACD64(v83, a2);
            if ((_DWORD)v22)
            {
LABEL_138:
              v17 = v84;
              goto LABEL_139;
            }
            v64 = v87;
          }
          v29 = v78;
LABEL_145:
          v80 = v22;
          if (v64)
          {
            if (*(_DWORD *)(a4 + 64))
            {
              if (*(_DWORD *)(a4 + 68) == v75)
                v66 = 0;
              else
                v66 = v62;
              if ((v66 & 1) == 0)
                goto LABEL_155;
              goto LABEL_154;
            }
            if ((v62 & 1) != 0)
            {
LABEL_154:
              v26 = 0;
              goto LABEL_47;
            }
          }
          else
          {
            v21[172].i8[1] = 0;
            *a5 = 1;
          }
LABEL_155:
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 984) + 40) + 216))
          {
            v26 = 1;
            goto LABEL_47;
          }
          if (*(int *)(a4 + 32) >= 1)
          {
            v67 = 0;
            v68 = 0;
            v69 = *(_DWORD *)(a4 + 68);
            if (v69)
              v70 = *(char **)a4;
            else
              v70 = (char *)(*(_QWORD *)a4 + __n);
            if (v69)
              v71 = (char *)(*(_QWORD *)a4 + __n);
            else
              v71 = *(char **)a4;
            do
            {
              memcpy(&v70[v67], &v71[v67], __n);
              v68 += 2;
              v67 += 2 * __n;
            }
            while (v68 < *(_DWORD *)(a4 + 32));
          }
          v19 = __n_4;
          if (!__n_4)
            goto LABEL_167;
          v26 = 1;
LABEL_175:
          v29 = v78;
          goto LABEL_47;
        }
        v60 = *(_DWORD *)(v84 + 4);
      }
      if (v28 != v60 + 1 && v28 != v60 + 2)
        goto LABEL_123;
      goto LABEL_38;
    }
    v80 = v22;
  }
  else
  {
    v80 = v22;
    v26 = 0;
  }
  v29 = a2;
LABEL_47:
  if (!v21 || !*a5)
    goto LABEL_73;
  if (v21[4].i8[1])
  {
    v30 = v21[169];
    v17 = v84;
    if (v30)
    {
      if (*(_BYTE *)(*(_QWORD *)&v30 + 37))
      {
        *(_DWORD *)(a4 + 144) = *(_DWORD *)(*(_QWORD *)&v30 + 1280) != v21[160].i32[0];
        v31 = *(_DWORD *)(*(_QWORD *)&v30 + 1280) < v21[160].i32[0];
      }
      else
      {
        *(_DWORD *)(a4 + 144) = v21[160].i32[0] != *(_DWORD *)(*(_QWORD *)&v30 + 1280);
        v31 = v21[160].i32[0] < *(_DWORD *)(*(_QWORD *)&v30 + 1280);
      }
      v32 = v31;
      *(_DWORD *)(a4 + 148) = v32;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 144) = v21[161].i32[0] != v21[160].i32[1];
    *(_DWORD *)(a4 + 148) = v21[161].i32[0] < v21[160].i32[1];
    v17 = v84;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 984) + 40) + 216) && !v21[172].i8[2])
  {
    v40 = v21;
    if (v21[4].i8[2])
    {
      v40 = (int32x2_t *)v21[169];
      if (!v40)
        goto LABEL_119;
    }
    v76 = v26;
    v77 = v29;
    v41 = *(_DWORD *)(a4 + 52);
    v42 = *(_DWORD *)(a4 + 28) & ~(*(int *)(a4 + 28) >> 31);
    v43 = v40[26].i32[0];
    v44 = *(int *)(a4 + 16);
    v73 = 2 * *(int *)(a4 + 44);
    v74 = (int)v43 * (uint64_t)v41;
    if (*(_DWORD *)(a4 + 32) >= ((*(_DWORD *)(a4 + 56) - v41) & ~((*(_DWORD *)(a4 + 56) - v41) >> 31)))
      v45 = (*(_DWORD *)(a4 + 56) - v41) & ~((*(_DWORD *)(a4 + 56) - v41) >> 31);
    else
      v45 = *(_DWORD *)(a4 + 32);
    if ((int)v44 >= 2 * v42)
      v46 = (2 * v42);
    else
      v46 = v44;
    if (v45)
    {
      v47 = *(char **)a4;
      v48 = (char *)(*(_QWORD *)&v40[24] + v73 + v74);
      v49 = v45;
      do
      {
        memcpy(v47, v48, v46);
        v48 += v43;
        v47 += v44;
        --v49;
      }
      while (v49);
    }
    v17 = v84;
    if (*(_DWORD *)(v84 + 1136))
      v50 = v85 == 0;
    else
      v50 = 1;
    v26 = v76;
    if (v50 || (a2 & 1) == 0 && v77 == a2 - 1)
      goto LABEL_62;
    v51 = v85;
    if (v85[4].i8[2])
    {
      v51 = (int32x2_t *)v85[169];
      if (!v51)
      {
LABEL_119:
        v22 = 4294958327;
LABEL_139:
        v19 = __n_4;
        a1 = v83;
        goto LABEL_169;
      }
    }
    if (v45 >= 2)
    {
      v52 = v45 >> 1;
      v53 = 2 * *(int *)(a4 + 16);
      v54 = 2 * v51[26].i32[0];
      if (v85[4].i8[5])
        v55 = *(int *)(a4 + 16);
      else
        v55 = 0;
      v56 = (char *)(*(_QWORD *)a4 + v55);
      v57 = *(_QWORD *)&v51[24] + v73 + v74;
      if (v85[4].i8[5])
        v58 = v51[26].i32[0];
      else
        v58 = 0;
      v59 = (char *)(v57 + v58);
      do
      {
        memcpy(v56, v59, v46);
        v26 = v76;
        v59 += v54;
        v56 += v53;
        --v52;
      }
      while (v52);
    }
  }
LABEL_62:
  v33 = v26 ^ 1;
  if (!*(_DWORD *)(v17 + 1136))
    v33 = 1;
  if ((v33 & 1) == 0 && *(int *)(a4 + 32) >= 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = *(_DWORD *)(a4 + 68);
    if (v36)
      v37 = *(char **)a4;
    else
      v37 = (char *)(*(_QWORD *)a4 + __n);
    if (v36)
      v38 = (char *)(*(_QWORD *)a4 + __n);
    else
      v38 = *(char **)a4;
    do
    {
      memcpy(&v37[v34], &v38[v34], __n);
      v35 += 2;
      v34 += 2 * __n;
    }
    while (v35 < *(_DWORD *)(a4 + 32));
  }
LABEL_73:
  v19 = __n_4;
  if (!__n_4)
  {
LABEL_167:
    v17 = v84;
    goto LABEL_168;
  }
  v17 = v84;
  if (!*(_DWORD *)(v84 + 1136))
  {
LABEL_168:
    a1 = v83;
    v22 = v80;
LABEL_169:
    v39 = v85;
    if (!v85)
      goto LABEL_170;
LABEL_171:
    *(_DWORD *)(a1 + 4723744) = v39[40].i32[0];
    *(int32x2_t *)(a1 + 4723752) = v39[39];
    goto LABEL_172;
  }
  if ((v79 & 1) == 0)
    v21[172].i8[1] = 0;
  v39 = v85;
  a1 = v83;
  v22 = v80;
  if (v85)
  {
    v85[172].i8[1] = 1;
    goto LABEL_171;
  }
LABEL_170:
  v39 = v21;
  if (v21)
    goto LABEL_171;
LABEL_172:
  *(_DWORD *)(v17 + 1148) = v19 ^ 1;
  return v22;
}

uint64_t sub_2160C772C(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, _DWORD *a6, uint64_t a7, unsigned int a8, unsigned __int8 a9, int a10, int32x2_t **a11, int a12, int a13, int a14)
{
  _DWORD *v14;
  int32x2_t **v19;
  int v20;
  uint64_t *v21;
  int8x16_t v22;
  unsigned int v23;
  uint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  int32x2_t **v27;
  __int128 *v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int32x2_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  int8x16_t *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int32x2_t *v59;
  BOOL v60;
  int v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  uint64_t v69;
  int32x2_t v70;
  uint64_t v71;
  __int32 v72;
  int v73;
  int32x2_t v74;
  int32x2_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int32x2_t **v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  __int32 v118;
  int v119;
  int32x2_t v120;
  int32x2_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int32x2_t **v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  __int8 v151;
  __int8 v152;
  unsigned int *v153;
  int32x2_t v154;
  int32x2_t v155;
  int32x2_t v156;
  int32x2_t v157;
  int32x2_t v158;
  unsigned int v159;
  unsigned int v160;
  __int16 v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  void *v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  size_t v171;
  int32x2_t v172;
  int32x2_t v173;
  int32x2_t v174;
  int32x2_t v175;
  int32x2_t v176;
  int32x2_t v177;
  unsigned int v178;
  unsigned int v179;
  int8x16_t *v180;
  int8x16_t *v181;
  int8x16_t *v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int32x2_t *v186;
  int32x2_t *v187;
  int32x2_t **v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  _DWORD *v192;
  uint64_t *v193;
  uint64_t *v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  _QWORD *v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  int v226;
  uint64_t v227;

  v14 = a6;
  v19 = a11;
  v20 = a10;
  v227 = *MEMORY[0x24BDAC8D0];
  v21 = (uint64_t *)(a1 + 5041656);
  v226 = 0;
  v22 = 0uLL;
  v224 = 0u;
  v225 = 0u;
  v222 = 0u;
  v223 = 0u;
  v220 = 0u;
  v221 = 0u;
  v218 = 0u;
  v219 = 0u;
  v217 = 0u;
  if (a14)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0uLL;
    v26 = 4294954948;
    if (!a4 || !a6)
    {
      v203 = 0;
      v202 = 0;
      v30 = 0;
      v201 = 0;
      v200 = 0;
      v205 = 0;
      v204 = 0;
      v29 = 0;
      goto LABEL_28;
    }
    v191 = a5;
    v197 = a13;
    v189 = a8;
    v193 = (uint64_t *)(a1 + 5041656);
    v190 = a7;
    v27 = a11;
    *(_DWORD *)(a4 + 76) = 0;
    v28 = (__int128 *)(a4 + 76);
    v209 = 0;
    v26 = sub_2160AC8EC((unsigned int *)(a1 + 4723776), *(_DWORD *)(a1 + 4870356), &v209);
    if ((_DWORD)v26 || (v26 = sub_2160BE5BC(v209, (uint64_t)&v210, a13), (_DWORD)v26))
    {
      v24 = 0;
      v202 = 0;
      v203 = 0;
      v23 = 0;
      v200 = 0;
      v201 = 0;
      v205 = 0;
      v204 = 0;
      v29 = 0;
      v25 = 0uLL;
      v19 = a11;
      v30 = 0;
LABEL_28:
      *v19 = 0;
      goto LABEL_29;
    }
    v192 = v14;
    v199 = 0;
    *(_DWORD *)(a4 + 136) = v216;
    v22 = *(int8x16_t *)a4;
    v23 = *(_DWORD *)(a4 + 16);
    v47 = *(_QWORD *)(a4 + 20);
    v31 = *(_DWORD *)(a4 + 32);
    v48 = *(_QWORD *)(a4 + 36);
    HIDWORD(v202) = *(_DWORD *)(a4 + 60);
    v49 = *(_DWORD *)(a4 + 64);
    v226 = *(_DWORD *)(a4 + 220);
    LODWORD(v205) = *(_DWORD *)(a4 + 68);
    HIDWORD(v205) = v49;
    v204 = *(_DWORD *)(a4 + 72);
    v50 = *(_OWORD *)(a4 + 92);
    v217 = *v28;
    v218 = v50;
    v51 = *(_OWORD *)(a4 + 188);
    v223 = *(_OWORD *)(a4 + 172);
    v224 = v51;
    v225 = *(_OWORD *)(a4 + 204);
    v52 = *(_OWORD *)(a4 + 124);
    v219 = *(_OWORD *)(a4 + 108);
    v220 = v52;
    v53 = *(_OWORD *)(a4 + 156);
    v221 = *(_OWORD *)(a4 + 140);
    v222 = v53;
    v21 = v193;
    v20 = a10;
    if (*(_DWORD *)(*(_QWORD *)(*v193 + 40) + 216))
    {
      v24 = v48;
    }
    else
    {
      v24 = v48;
      if (v47 != 875704438)
      {
        if (v31 && v31 < v211 || v23 && v23 < v210 << (a10 == 0))
        {
          v208 = v22;
          if (a10)
          {
            *(_QWORD *)a4 = sub_2160CB5FC((void *)(v210 * v211));
            v54 = v210;
          }
          else
          {
            *(_QWORD *)a4 = sub_2160CB5FC((void *)(2 * v211 * v210));
            v54 = 2 * v210;
          }
          *(_DWORD *)(a4 + 16) = v54;
          v199 = 1;
          v22 = v208;
          v21 = v193;
          v20 = a10;
        }
        else
        {
          v199 = 0;
        }
      }
    }
    v203 = v47;
    v112 = v210;
    *(_DWORD *)(a4 + 32) = v211;
    v113 = v212;
    v114 = v213;
    *(_DWORD *)(a4 + 44) = v212;
    *(_DWORD *)(a4 + 48) = v114;
    v115 = v215;
    v200 = __PAIR64__(v214, v215);
    *(_DWORD *)(a4 + 52) = v214;
    *(_DWORD *)(a4 + 56) = v115;
    LODWORD(v202) = v113;
    v116 = v114 - v113;
    *(_DWORD *)(a4 + 24) = v112;
    *(_DWORD *)(a4 + 28) = v116;
    v201 = __PAIR64__(v116, v114);
  }
  else
  {
    v191 = a5;
    v197 = a13;
    v189 = a8;
    v190 = a7;
    v192 = a6;
    v27 = a11;
    v24 = 0;
    v202 = 0;
    v203 = 0;
    v23 = 0;
    v200 = 0;
    v201 = 0;
    v31 = 0;
    v205 = 0;
    v204 = 0;
    v199 = 0;
  }
  v194 = v21;
  v206 = v22;
  v32 = a1 + 5016960;
  if ((a9 & 0xFD) == 1)
  {
    v33 = a2;
    v34 = a9;
    v35 = v20;
    v36 = v20;
  }
  else
  {
    v35 = v20;
    v33 = a2;
    v34 = 0;
    v36 = 0;
  }
  v37 = sub_2160B06F0(v32, v33, a3 != 0, v34, v36, a12);
  v38 = (int32x2_t *)v37;
  v19 = v27;
  if (!a14)
  {
    v25 = v206;
    v30 = v31;
    if (v37)
    {
      v39 = *(_QWORD *)(v37 + 1352);
      v14 = v192;
      v29 = v199;
      v26 = 0;
      if (v39)
        *(_BYTE *)(v39 + 1377) = 1;
      goto LABEL_21;
    }
    v26 = 0;
    v14 = v192;
LABEL_27:
    v29 = v199;
    goto LABEL_28;
  }
  v25 = v206;
  v30 = v31;
  v14 = v192;
  if (!v192)
  {
    v26 = 4294954948;
    v29 = v199;
    goto LABEL_148;
  }
  if (!v37)
  {
    if (*(_DWORD *)(a4 + 140) == -12356)
      *(_DWORD *)(a4 + 140) = -12349;
    v26 = 0;
    *v192 = 0;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(v37 + 1379))
  {
    v55 = *(int8x16_t **)a4;
    v56 = *(_DWORD *)(a4 + 16);
    v57 = *(unsigned int *)(a4 + 24);
    v58 = *(unsigned int *)(a4 + 32);
    v59 = (int32x2_t *)(v37 + 32);
    if (v197)
      v60 = v38[4].i8[1] == 0;
    else
      v60 = 1;
    v61 = !v60;
    *(_DWORD *)(a4 + 64) = v61;
    LODWORD(v205) = v38[4].u8[6];
    HIDWORD(v205) = v61;
    *(_DWORD *)(a4 + 68) = v205;
    v204 = v38[4].u8[2];
    *(_DWORD *)(a4 + 72) = v204;
    v62 = (*(_DWORD *)(a4 + 56) - *(_DWORD *)(a4 + 52)) >> v61;
    *(_DWORD *)(a4 + 36) = (int)v58 >> v61;
    *(_DWORD *)(a4 + 40) = v62;
    v63 = v194;
    v64 = *(_QWORD *)(*v194 + 40);
    if ((*(_DWORD *)(v64 + 184) || *(_DWORD *)(v64 + 216)) && !v38[172].i8[2])
    {
      v29 = v199;
      if ((a9 & 0xFD) == 1 && v35)
      {
        v111 = v19;
        sub_215FDA544(v59, (void **)a4, v191);
        v19 = v111;
        v25 = v206;
      }
      goto LABEL_147;
    }
    v65 = v38[4].u8[1];
    v188 = v19;
    if (v38[170].u8[2] != v65)
    {
      v38[170].i8[2] = v65;
      v38[4].i8[0] = v65;
      v38[4].i8[5] = v38[4].i8[6];
      v66 = v38[17];
      v38[16] = v66;
      v38[18] = v38[19];
      v38[75] = vadd_s32(vdup_lane_s32(v66, 1), (int32x2_t)0xFFFFFFFF00000002);
      v67 = v38[52];
      if (v67)
      {
        *(_DWORD *)(*(_QWORD *)&v67 + 72) = 1;
        *(_QWORD *)(*(_QWORD *)&v67 + 64) = 0x100000001;
        *(_OWORD *)(*(_QWORD *)&v67 + 128) = xmmword_2160EF0C0;
      }
      v68 = v38[53];
      if (v68)
      {
        *(_DWORD *)(*(_QWORD *)&v68 + 72) = 1;
        *(_QWORD *)(*(_QWORD *)&v68 + 64) = 0x100000001;
        *(_OWORD *)(*(_QWORD *)&v68 + 128) = xmmword_2160EF0C0;
      }
      v178 = v57;
      v69 = v58;
      v180 = v55;
      v183 = v56;
      v70 = v38[54];
      if (v70)
      {
        *(_DWORD *)(*(_QWORD *)&v70 + 72) = 1;
        *(_QWORD *)(*(_QWORD *)&v70 + 64) = 0x100000001;
        *(_OWORD *)(*(_QWORD *)&v70 + 128) = xmmword_2160EF0C0;
      }
      sub_215FE4E70((uint64_t)v59, v38[23].i32[0]);
      if (v38[4].i8[1])
      {
        v59 = v38 + 4;
        v19 = v188;
        v63 = v194;
        v56 = v183;
        v55 = v180;
        v58 = v69;
        v57 = v178;
        if (!v38->i8[3])
        {
          v71 = v38[21].i32[0];
          if ((_DWORD)v71)
          {
            v72 = v38[23].i32[0];
            if (v72)
            {
              v73 = 0;
              v75 = v38[8];
              v74 = v38[9];
              v76 = v38[22].i32[1];
              v77 = 2 * v38[16].i32[1];
              v78 = 2 * v38[18].i32[1];
              v79 = 2 * v71;
              v80 = v38[20].i32[1];
              v81 = *(_QWORD *)&v75 - 32;
              v82 = v80 + 48;
              v83 = *(_QWORD *)&v75 - 2 * v71;
              v84 = *(_QWORD *)&v75 + v71;
              v85 = *(_QWORD *)&v75 - v71;
              do
              {
                if ((int)v80 >= -63)
                {
                  v86 = -16;
                  do
                  {
                    *(_OWORD *)(v83 + v86 - 16) = *(_OWORD *)(v81 + v86 + 16);
                    v25 = *(int8x16_t *)(v84 + v86 - 16);
                    *(int8x16_t *)(v85 + v86 - 16) = v25;
                    v86 += 16;
                  }
                  while (v86 < v82);
                }
                v81 -= 2 * v71;
                ++v73;
                v83 -= 2 * v71;
                v84 -= 2 * v71;
                v85 -= 2 * v71;
              }
              while (v73 != 20);
              v87 = 0;
              v88 = (v77 - 2) * v71;
              v89 = *(_QWORD *)&v75 + v88 - 32;
              v90 = v71 + v88;
              v91 = 3 * v71 + v88;
              v92 = v79 + v88 + *(_QWORD *)&v75 - 32;
              v93 = v90 + *(_QWORD *)&v75 - 32;
              v94 = v91 + *(_QWORD *)&v75 - 32;
              v58 = v69;
              v57 = v178;
              do
              {
                if ((int)v80 >= -63)
                {
                  v95 = -16;
                  do
                  {
                    *(_OWORD *)(v92 + v95 + 16) = *(_OWORD *)(v89 + v95 + 16);
                    v25 = *(int8x16_t *)(v93 + v95 + 16);
                    *(int8x16_t *)(v94 + v95 + 16) = v25;
                    v95 += 16;
                  }
                  while (v95 < v82);
                }
                v89 += v79;
                ++v87;
                v92 += v79;
                v93 += v79;
                v94 += v79;
              }
              while (v87 != 20);
              v96 = 0;
              v97 = *(_QWORD *)&v74 - 16;
              v98 = 2 * v72;
              v99 = v76 + 16;
              do
              {
                if ((int)v76 >= -31)
                {
                  v100 = 0;
                  do
                  {
                    *(_OWORD *)(v97 - 2 * v72 + v100) = *(_OWORD *)(v97 + v100);
                    v25 = *(int8x16_t *)(v97 + v72 + v100);
                    *(int8x16_t *)(v97 - v72 + v100) = v25;
                    v101 = v100 < v99;
                    v100 += 16;
                  }
                  while (v101);
                }
                v97 -= 2 * v72;
                ++v96;
              }
              while (v96 != 8);
              v102 = 0;
              v103 = (v78 - 2) * v72;
              v104 = *(_QWORD *)&v74 + v103 - 16;
              v105 = v72 + (uint64_t)v103;
              v106 = 3 * v72 + v103;
              v107 = v98 + v103 + *(_QWORD *)&v74 - 16;
              v108 = v105 + *(_QWORD *)&v74 - 16;
              v109 = v106 + *(_QWORD *)&v74 - 16;
              v59 = v38 + 4;
              v19 = v188;
              v56 = v183;
              v55 = v180;
              do
              {
                if ((int)v76 >= -31)
                {
                  v110 = -16;
                  do
                  {
                    *(_OWORD *)(v107 + v110 + 16) = *(_OWORD *)(v104 + v110 + 16);
                    v25 = *(int8x16_t *)(v108 + v110 + 16);
                    *(int8x16_t *)(v109 + v110 + 16) = v25;
                    v110 += 16;
                  }
                  while (v110 < v99);
                }
                v104 += v98;
                ++v102;
                v107 += v98;
                v108 += v98;
                v109 += v98;
              }
              while (v102 != 8);
            }
          }
        }
      }
      else
      {
        v59 = v38 + 4;
        v19 = v188;
        v63 = v194;
        v56 = v183;
        v55 = v180;
        v58 = v69;
        v57 = v178;
        if (!v38->i8[3])
        {
          v117 = v38[21].i32[0];
          if ((_DWORD)v117)
          {
            v118 = v38[23].i32[0];
            if (v118)
            {
              v119 = 0;
              v121 = v38[8];
              v120 = v38[9];
              v122 = v38[22].i32[1];
              v123 = v38[16].i32[1];
              v124 = v38[18].i32[1];
              v125 = v38[20].i32[1];
              v126 = *(_QWORD *)&v121 - 32;
              v127 = 2 * v117;
              v128 = v125 + 48;
              do
              {
                if ((int)v125 >= -63)
                {
                  v129 = 0;
                  do
                  {
                    v25 = *(int8x16_t *)(v126 + v129);
                    *(int8x16_t *)(v126 - v117 + v129) = v25;
                    *(int8x16_t *)(v126 - 2 * v117 + v129) = v25;
                    v101 = v129 < v128;
                    v129 += 16;
                  }
                  while (v101);
                }
                v126 -= 2 * v117;
                ++v119;
              }
              while (v119 != 10);
              v130 = 0;
              v131 = (v123 - 1) * v117;
              v132 = *(_QWORD *)&v121 + v131 - 32;
              v133 = v117 + v131 + *(_QWORD *)&v121 - 32;
              v134 = v131 + v127 + *(_QWORD *)&v121 - 32;
              v56 = v183;
              v58 = v69;
              v57 = v178;
              do
              {
                if ((int)v125 >= -63)
                {
                  v135 = 0;
                  do
                  {
                    v25 = *(int8x16_t *)(v132 + v135);
                    *(int8x16_t *)(v133 + v135) = v25;
                    *(int8x16_t *)(v134 + v135) = v25;
                    v101 = v135 < v128;
                    v135 += 16;
                  }
                  while (v101);
                }
                v132 += v127;
                ++v130;
                v133 += v127;
                v134 += v127;
              }
              while (v130 != 10);
              v136 = 0;
              v137 = *(_QWORD *)&v120 - 16;
              v138 = v122 + 16;
              v59 = v38 + 4;
              v55 = v180;
              do
              {
                if ((int)v122 >= -31)
                {
                  v139 = 0;
                  do
                  {
                    v25 = *(int8x16_t *)(v137 + v139);
                    *(int8x16_t *)(v137 - v118 + v139) = v25;
                    v101 = v139 < v138;
                    v139 += 16;
                  }
                  while (v101);
                }
                v137 -= v118;
                ++v136;
              }
              while (v136 != 8);
              v140 = 0;
              v141 = *(_QWORD *)&v120 + (v124 - 1) * v118 - 16;
              v19 = v188;
              do
              {
                if ((int)v122 >= -31)
                {
                  v142 = 0;
                  do
                  {
                    v25 = *(int8x16_t *)(v141 + v142);
                    *(int8x16_t *)(v141 + v118 + v142) = v25;
                    v101 = v142 < v138;
                    v142 += 16;
                  }
                  while (v101);
                }
                v141 += v118;
                ++v140;
              }
              while (v140 != 8);
            }
          }
        }
      }
    }
    if ((a9 & 0xFD) == 1 && v35)
    {
      v143 = v19;
      sub_215FDA544(v59, (void **)a4, v191);
      v19 = v143;
      v25 = v206;
LABEL_146:
      v29 = v199;
LABEL_147:
      v26 = 0;
      *v192 = 1;
LABEL_148:
      *v19 = v38;
      if (!v38)
        goto LABEL_29;
      goto LABEL_149;
    }
    v144 = v38[173].i32[0];
    v145 = v38[163].u8[0];
    v146 = v38[163].u8[2];
    v147 = v38[163].u8[1];
    *(_BYTE *)(a4 + 133) = v146 == 4;
    v148 = *v63;
    LOBYTE(v210) = v38[163].i8[3];
    v149 = v210;
    BYTE1(v210) = v38[163].i8[4];
    v150 = v38[163].u8[5];
    HIWORD(v210) = *(__int16 *)((char *)&v38[163].i16[2] + 1);
    if (!(_BYTE)v210)
    {
      v149 = v38[163].u8[7];
      v151 = v38[164].i8[0];
      v150 = v38[164].u8[1];
      v152 = v38[164].i8[2];
      LOBYTE(v210) = v38[163].i8[7];
      BYTE1(v210) = v151;
      BYTE2(v210) = v150;
      HIBYTE(v210) = v152;
    }
    if (v149 && v150 && !v38[4].i8[1])
    {
      v160 = v38[160].u32[0];
      v161 = v38[164].i16[2];
      v164 = v63[1];
      v163 = v63 + 1;
      v162 = v164;
      if (!v164)
      {
        v179 = v57;
        v196 = v58;
        v182 = v55;
        v185 = v56;
        v187 = v59;
        v26 = sub_2160CE760(v163);
        if ((_DWORD)v26)
          goto LABEL_155;
        v162 = *v163;
        v59 = v187;
        v56 = v185;
        v55 = v182;
        v58 = v196;
        v57 = v179;
      }
      v165 = sub_2160CE8C0((uint64_t)v59, a4, v55, v56, v57, v58, v190, v189, v197, v160, v161, &v210, v162);
      if ((_DWORD)v165)
      {
        v26 = v165;
        goto LABEL_155;
      }
    }
    else
    {
      if (v145 && v147 == 1 && v144 <= 0x10000)
      {
        v186 = v59;
        v153 = *(unsigned int **)(v148 + 848);
        if (v153)
        {
LABEL_128:
          v153[66] = *(_DWORD *)(*(_QWORD *)(v148 + 40) + 264);
          *((_WORD *)v153 + 112) = 257;
          *((_BYTE *)v153 + 226) = v146 == 1;
          *((_QWORD *)v153 + 22) = v55;
          v153[46] = v56;
          v153[22] = *(_DWORD *)(a4 + 20);
          *((_QWORD *)v153 + 12) = *(_QWORD *)(a4 + 176);
          v153[26] = *(_DWORD *)(a4 + 184);
          *((_QWORD *)v153 + 30) = v190;
          v154 = *(int32x2_t *)(v153 + 28);
          *((int32x2_t *)v153 + 14) = v38[174];
          v38[174] = v154;
          v155 = *(int32x2_t *)(v153 + 30);
          *((int32x2_t *)v153 + 15) = v38[175];
          v38[175] = v155;
          v156 = *(int32x2_t *)(v153 + 32);
          *((int32x2_t *)v153 + 16) = v38[176];
          v38[176] = v156;
          v157 = *(int32x2_t *)(v153 + 34);
          *((int32x2_t *)v153 + 17) = v38[177];
          v38[177] = v157;
          v158 = *(int32x2_t *)(v153 + 18);
          *((int32x2_t *)v153 + 9) = v38[178];
          v38[178] = v158;
          if (sub_2160EC32C(*(_QWORD *)(*v63 + 80)) <= 2)
            v159 = sub_2160EC32C(*(_QWORD *)(*v63 + 80));
          else
            v159 = 2;
          v195 = v159;
          v198 = sub_2160CB5FC((void *)(32 * v159));
          v166 = sub_2160CB5FC((void *)(16 * v159));
          v167 = v166;
          if (v159)
          {
            v168 = v166 + 1;
            v169 = v159;
            v170 = v198;
            do
            {
              *(_DWORD *)v170 = 0;
              v170[1] = v153;
              v170[2] = v186;
              v170[3] = v38 + 144;
              *(v168 - 1) = sub_2160E7AEC;
              *v168 = v170;
              v170 += 4;
              v168 += 2;
              --v169;
            }
            while (v169);
          }
          v171 = v153[5];
          sub_2160EC880(*((pthread_mutex_t **)v153 + 20));
          if ((_DWORD)v171)
            memset(*((void **)v153 + 21), 10, v171);
          sub_2160EC88C(*((pthread_mutex_t **)v153 + 20));
          sub_2160EC244(*(_QWORD *)(v148 + 80), (uint64_t)v167, v195);
          v172 = *(int32x2_t *)(v153 + 28);
          *((int32x2_t *)v153 + 14) = v38[174];
          v38[174] = v172;
          v173 = *(int32x2_t *)(v153 + 30);
          *((int32x2_t *)v153 + 15) = v38[175];
          v38[175] = v173;
          v174 = *(int32x2_t *)(v153 + 32);
          *((int32x2_t *)v153 + 16) = v38[176];
          v38[176] = v174;
          v175 = *(int32x2_t *)(v153 + 34);
          *((int32x2_t *)v153 + 17) = v38[177];
          v38[177] = v175;
          v176 = *(int32x2_t *)(v153 + 18);
          *((int32x2_t *)v153 + 9) = v38[178];
          v38[178] = v176;
          j__free(v198);
          j__free(v167);
          goto LABEL_145;
        }
        v181 = v55;
        v184 = v56;
        v153 = (unsigned int *)sub_2160CB5E8(0x110uLL);
        *(_QWORD *)(v148 + 848) = v153;
        v26 = sub_2160E7960((uint64_t)v153, *(_DWORD *)(v148 + 4), *(_DWORD *)(v148 + 8));
        if (!(_DWORD)v26)
        {
          bzero(*((void **)v153 + 18), v153[5]);
          bzero(*((void **)v153 + 6), 12 * v153[14]);
          v63 = v194;
          v56 = v184;
          v55 = v181;
          goto LABEL_128;
        }
LABEL_155:
        v25 = v206;
        v19 = v188;
        goto LABEL_17;
      }
      if (v145 && v146 == 1 && v144 <= 0x10000)
        sub_215FDA0B8((uint64_t)v59, a4, (uint64_t)v55, v56, v57, v58, v190, v189, v197);
      else
        sub_215FD9ED0((uint64_t)v59, a4, v55, v56, v25, v57, v58, v190, v189, v197);
    }
LABEL_145:
    v25 = v206;
    v19 = v188;
    goto LABEL_146;
  }
  *v192 = 0;
  *(_DWORD *)(a4 + 76) = 1;
  v26 = 4294954946;
LABEL_17:
  v29 = v199;
LABEL_21:
  *v19 = v38;
LABEL_149:
  v38[172].i8[1] = 1;
  if (!v38[4].i8[1])
  {
    v177 = v38[169];
    if (v177)
      *(_BYTE *)(*(_QWORD *)&v177 + 1377) = 1;
  }
LABEL_29:
  if (v29)
  {
    v207 = v25;
    if (*v14 == 1 && v30 >= 1)
    {
      v40 = 0;
      v41 = 0;
      do
      {
        memcpy((void *)(v207.i64[0] + v40), (const void *)(*(_QWORD *)a4 + (*(_DWORD *)(a4 + 16) * v41++)), v23);
        v40 += v23;
      }
      while (v30 != v41);
    }
    j__free(*(void **)a4);
    *(int8x16_t *)a4 = v207;
    v42 = v224;
    *(_OWORD *)(a4 + 172) = v223;
    *(_OWORD *)(a4 + 188) = v42;
    *(_OWORD *)(a4 + 204) = v225;
    v43 = v220;
    *(_OWORD *)(a4 + 108) = v219;
    *(_OWORD *)(a4 + 124) = v43;
    v44 = v222;
    *(_OWORD *)(a4 + 140) = v221;
    *(_OWORD *)(a4 + 156) = v44;
    v45 = v218;
    *(_OWORD *)(a4 + 76) = v217;
    *(_DWORD *)(a4 + 16) = v23;
    *(_QWORD *)(a4 + 20) = v203;
    *(_DWORD *)(a4 + 28) = HIDWORD(v201);
    *(_DWORD *)(a4 + 32) = v30;
    *(_QWORD *)(a4 + 36) = v24;
    *(_DWORD *)(a4 + 44) = v202;
    *(_DWORD *)(a4 + 48) = v201;
    *(_DWORD *)(a4 + 52) = HIDWORD(v200);
    *(_DWORD *)(a4 + 56) = v200;
    *(_DWORD *)(a4 + 60) = HIDWORD(v202);
    *(_DWORD *)(a4 + 64) = HIDWORD(v205);
    *(_DWORD *)(a4 + 68) = v205;
    *(_DWORD *)(a4 + 72) = v204;
    *(_DWORD *)(a4 + 220) = v226;
    *(_OWORD *)(a4 + 92) = v45;
  }
  return v26;
}

uint64_t sub_2160C85D4(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t result;
  int32x2_t *v9;
  int32x2_t *v10;
  int v11;

  v11 = 0;
  v10 = 0;
  if (a2 && (*(_DWORD *)(a2 + 20) | 0x10) == 0x34323076)
    *(_DWORD *)(a2 + 20) = 875704438;
  result = sub_2160C772C(a1, 0, 0, a2, 0, a3, 0, 0, 0, 0, &v10, 0, 1, 1);
  if ((a4 == 1 || !(_DWORD)result) && !*(_DWORD *)(a1 + 5041808) && *a3 && *(_DWORD *)(a2 + 64))
  {
    if (v10)
      return sub_2160C772C(a1, 0, 0, a2, 0, &v11, 0, 0, 0, 0, &v9, 1, 1, 1);
  }
  return result;
}

uint64_t sub_2160C86EC(uint64_t a1, int *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  BOOL v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  _BOOL4 v44;
  BOOL v46;
  BOOL v47;
  char v48;
  BOOL v50;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  _BOOL4 v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  _BYTE v75[4];
  unsigned int v76;
  int v77;
  char v78;
  unsigned __int8 v79;
  unsigned int v80;
  unsigned int v81;
  char v82;
  char v83;
  char v84;
  char v85;
  unsigned __int8 v86;
  char v87;

  v3 = a1;
  v4 = a2 + 1260414;
  v5 = *((_QWORD *)a2 + 630207);
  v6 = *(_DWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 24);
  a2[1260457] = 0;
  a2[1260458] = 0;
  sub_2160BE8B0((uint64_t)&v64);
  v9 = sub_2160BE900((uint64_t)&v64, 400);
  if (!(_DWORD)v9)
  {
    v64 = v7;
    v70 = 0;
    v65 = v8;
    if (!v8)
    {
LABEL_75:
      v9 = 4294958327;
      goto LABEL_124;
    }
    if (v6)
    {
      switch(v6)
      {
        case 2:
          v10 = sub_2160EBD8C((uint64_t)&v64);
          goto LABEL_11;
        case 3:
          v11 = 1;
          break;
        case 4:
          v11 = 2;
          break;
        case 5:
          v11 = 4;
          break;
        default:
          goto LABEL_75;
      }
      v10 = sub_2160EBC08((uint64_t)&v64, v11, (*(_DWORD *)(v5 + 4) * *(_DWORD *)(v5 + 8)) << 10, 0, 0);
    }
    else
    {
      v10 = sub_2160EBA84((uint64_t)&v64, 0);
    }
LABEL_11:
    v9 = v10;
    if (!(_DWORD)v10)
    {
      v12 = v70;
      if (v70)
      {
        v61 = v71;
        v62 = v72;
        v73 = 0xFFFFFFFF00000000;
        v67 = 1;
        v74 = 0;
        v66 = v70;
        if (v70 < 1)
        {
          v9 = 0;
          goto LABEL_84;
        }
        v52 = v3;
        v53 = v6;
        v13 = 0;
        v14 = 0;
        v59 = 0;
        v60 = 0x100000000;
        v15 = 0;
        v16 = 0;
        v63 = a2 + 1217592;
        v17 = -1;
        v56 = 0;
        v57 = -1;
        v18 = 0xFFFFFFFFLL;
        while (1)
        {
          v54 = v17;
          v55 = v15;
          v58 = 0;
          v19 = v14;
          v9 = v16;
          while (1)
          {
            v20 = v12;
            v21 = *(unsigned int **)(v62 + 8 * v13);
            v22 = *(unsigned int *)(v61 + 4 * v13);
            v23 = *(_BYTE *)v21;
            v24 = *(_BYTE *)v21 & 0x1F;
            fflush((FILE *)*MEMORY[0x24BDAC8D8]);
            if (v24 == 7)
            {
              v28 = sub_2160BE194(v21, v22, v63);
            }
            else
            {
              if (v24 != 8)
                goto LABEL_23;
              v25 = v21;
              v26 = v22;
              if ((int)v22 >= 1)
              {
                do
                {
                  v27 = *(unsigned __int8 *)v25;
                  v25 = (unsigned int *)((char *)v25 + 1);
                  v19 = (v19 + v27);
                  --v26;
                }
                while (v26);
              }
              v28 = sub_2160BE3E4(v21, v22, (unsigned int *)v63);
            }
            v9 = v28;
LABEL_23:
            if ((v23 & 0x1B) == 1)
              break;
            v12 = v20;
LABEL_67:
            if (++v13 == v12)
            {
              if (v58)
              {
                v70 = v54 + 1;
                HIDWORD(v73) = v54 + 1;
              }
              v15 = v55;
              goto LABEL_79;
            }
          }
          sub_2160BACAC(v21, v22, (unsigned int *)v63, v75, 0, 0);
          if (HIDWORD(v60))
          {
            v12 = v20;
            if ((_DWORD)v9 || (v18 & 0x80000000) == 0 && (_DWORD)v18 != v76)
            {
              v13 = 0;
              v14 = 0;
              v60 = 0;
              v15 = 0;
              v66 = v20;
              v17 = -1;
              v56 = 0;
              v57 = -1;
              v16 = v9;
              continue;
            }
            v29 = v76;
          }
          else
          {
            v30 = v59;
            if (!(v59 | v9))
              v30 = v77 == 2 || v77 == 7;
            v12 = v20;
            v59 = v30;
            if (!v30 || (v29 = v18, (_DWORD)v9))
            {
              HIDWORD(v60) = 0;
              goto LABEL_67;
            }
          }
          if (v85 != 1 || v82 || v83 || v84 || v86 < 2u || v87 || v80 > 1)
            goto LABEL_58;
          v32 = v77 == 1 || v77 == 6;
          v33 = !v32;
          if (v32 && v76)
            goto LABEL_58;
          if (v81 < 2)
            v33 = 1;
          if (!v33)
LABEL_58:
            v74 = -1;
          if (!v78)
          {
            v18 = v29;
            LODWORD(v67) = 0;
            v68 = v76 != 0;
            v69 = v77;
            goto LABEL_67;
          }
          v34 = v57;
          if (v57 == -1)
          {
            v14 = 0;
            HIDWORD(v67) = v79;
            v34 = v79;
            v35 = v55;
            goto LABEL_72;
          }
          if (v57 != v79)
          {
            LODWORD(v60) = v60 + 1;
            v18 = v29;
            if (v56 == (_DWORD)v19)
            {
              v58 = 1;
              v19 = v56;
            }
            else
            {
              v74 = -1;
              v58 = 1;
            }
            goto LABEL_67;
          }
          v14 = v19;
          v35 = v55;
          LODWORD(v19) = v56;
LABEL_72:
          if (v58)
            goto LABEL_75;
          v56 = v19;
          v57 = v34;
          v18 = v29;
          v16 = 0;
          v15 = v35 + 1;
          v68 = v76 != 0;
          v69 = v77;
          v17 = v13++;
          if (v13 == v12)
          {
LABEL_79:
            if (v15 != 1)
            {
              v6 = v53;
              v3 = v52;
              goto LABEL_84;
            }
            v6 = v53;
            v3 = v52;
            if ((_DWORD)v60 != 1)
LABEL_84:
              v74 = -1;
            if (!(_DWORD)v9)
            {
              v36 = SHIDWORD(v73);
              if (HIDWORD(v73) == -1)
              {
                *(_QWORD *)(v3 + 16) = 0;
                *(_DWORD *)(v3 + 28) = 0;
                v37 = v67;
                v38 = HIDWORD(v67);
                if ((_DWORD)v67)
                {
                  v4[43] = 1;
                  v4[44] = v38;
                  if (v4[39])
                  {
                    if (!v4[38])
                    {
                      v9 = 4294966630;
                      break;
                    }
                  }
                  else
                  {
                    v4[40] = v38;
                    *((_QWORD *)v4 + 19) = 0x100000001;
                  }
                }
              }
              else
              {
                if (v4[39])
                {
                  if (v4[38] == 1)
                  {
                    v9 = 4294954945;
                    break;
                  }
                }
                else
                {
                  v4[40] = HIDWORD(v67);
                  *((_QWORD *)v4 + 19) = 0x100000000;
                }
                v39 = v72;
                v40 = *(_QWORD *)(v72 + 8 * v36) - *(_DWORD *)(v3 + 8);
                v41 = *(_DWORD *)(v3 + 24) - v40;
                if (v6)
                {
                  if ((v6 - 3) > 2)
                    v42 = 0;
                  else
                    v42 = dword_2160F7394[v6 - 3];
                }
                else
                {
                  v42 = 3;
                }
                *(_DWORD *)(v3 + 24) = v40 - v42;
                *(_DWORD *)(v3 + 28) = v41 + v42;
                *(_QWORD *)(v3 + 16) = *(_QWORD *)(v39 + 8 * v36) - v42;
                v37 = v67;
                v38 = HIDWORD(v67);
              }
              *(_BYTE *)(v3 + 61) = v37 != 0;
              *(_BYTE *)(v3 + 62) = v38 != 0;
              v44 = v68;
              v43 = v69;
              v46 = v69 == 2 || v69 == 7;
              *(_BYTE *)(v3 + 63) = v46;
              if (v43)
                v47 = v43 == 5;
              else
                v47 = 1;
              v48 = v47;
              *(_BYTE *)(v3 + 64) = v48;
              v50 = v43 == 1 || v43 == 6;
              *(_BYTE *)(v3 + 65) = v50;
              *(_BYTE *)(v3 + 66) = v44;
              *(_DWORD *)(v3 + 68) = v70;
              *(_BYTE *)(v3 + 60) = 1;
              if (!v37 || v74 == -1 || v43 == 7 || v43 == 2)
              {
                v9 = 0;
                *(_BYTE *)(v3 + 72) = 0;
              }
              else
              {
                v9 = 0;
                *(_BYTE *)(v3 + 72) = 1;
              }
            }
            break;
          }
        }
      }
    }
  }
LABEL_124:
  sub_2160BE8C0((uint64_t)&v64);
  return v9;
}

uint64_t sub_2160C8D14(int a1, uint64_t a2, int *a3, uint64_t a4, int a5, _DWORD *a6, uint64_t a7)
{
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t result;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;

  if (*(_BYTE *)(a2 + 60) || (result = sub_2160C86EC(a2, a3), !(_DWORD)result))
  {
    v14 = *(unsigned __int8 *)(a2 + 61);
    if (a4)
    {
      *(_DWORD *)(a4 + 68) = 0;
      *(_DWORD *)(a4 + 72) = 0;
      *(_DWORD *)(a4 + 64) = v14;
      v15 = *(_BYTE **)(a4 + 200);
      if (v15)
        *v15 = v14;
      v16 = *(_BYTE **)(a4 + 208);
      if (v16)
        *v16 = a3[1260457];
      v17 = *(_BYTE **)(a4 + 216);
      if (v17)
        *v17 = a3[1260458];
    }
    if (v14)
    {
      v22 = 0;
      result = sub_2160C8F04(a1, *(_DWORD *)(a2 + 40), *(const void **)(a2 + 8), *(_DWORD *)(a2 + 24), a3, a4, a5, a6, &v22, &v23, 0, 0, 0, a7);
      if (!(_DWORD)result)
      {
        if (a4 && (*(_DWORD *)(a4 + 64) = v14, *(_DWORD *)(a4 + 68)))
          *(_DWORD *)(a2 + 48) = v22;
        else
          *(_DWORD *)(a2 + 44) = v22;
        v20 = *(_DWORD *)(a2 + 28);
        if (v20)
        {
          result = sub_2160C8F04(a1, *(_DWORD *)(a2 + 40), *(const void **)(a2 + 16), v20, a3, a4, 0, a6, &v22, &v23, 0, 0, 0, a7);
          if (a4)
          {
            *(_DWORD *)(a4 + 64) = v14;
            if (!(_DWORD)result)
            {
              if (*(_DWORD *)(a4 + 68))
              {
                result = 0;
                *(_DWORD *)(a2 + 48) = v22;
                return result;
              }
              goto LABEL_28;
            }
          }
          else if (!(_DWORD)result)
          {
LABEL_28:
            result = 0;
            v19 = v22;
            goto LABEL_18;
          }
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      v21 = 0;
      result = sub_2160C8F04(a1, *(_DWORD *)(a2 + 40), *(const void **)(a2 + 8), *(_DWORD *)(a2 + 24), a3, a4, a5, a6, &v21, &v23, 0, 0, 0, a7);
      if (!(_DWORD)result)
      {
        v19 = v21;
        *(_DWORD *)(a2 + 48) = v21;
LABEL_18:
        *(_DWORD *)(a2 + 44) = v19;
      }
    }
  }
  return result;
}

uint64_t sub_2160C8F04(int a1, int a2, const void *a3, unsigned int a4, int *a5, uint64_t a6, int a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, unsigned __int8 a11, int a12, uint64_t a13, uint64_t a14)
{
  _BOOL4 v19;
  int v20;
  int v21;
  int *v22;
  _DWORD *v23;
  int v24;
  int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  int *v34;
  uint64_t *v35;
  _QWORD *v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  int v60;
  int *v61;
  uint64_t v62;
  int *v63;
  _BOOL4 v64;
  int v68;
  int v69;
  uint64_t v70;

  v19 = a6 == 0;
  *a10 = 0;
  v20 = (*a5 + 1) % a5[1];
  *a5 = v20;
  sub_2160EC880(*((pthread_mutex_t **)a5 + 2));
  v21 = v20;
  v22 = &a5[36904 * v20];
  v24 = v22[8];
  v23 = v22 + 8;
  if (v24)
  {
    do
      sub_2160EC918(*((pthread_cond_t **)a5 + 3), *((pthread_mutex_t **)a5 + 2));
    while (*v23);
  }
  *v23 = 1;
  ++a5[2];
  sub_2160EC88C(*((pthread_mutex_t **)a5 + 2));
  v25 = &a5[36904 * v20];
  v27 = v25[42];
  v26 = (unsigned int *)(v25 + 42);
  v26[36866] = 1;
  v28 = a4 + 16;
  if (v27 >= a4 + 16)
  {
    v33 = *(void **)&a5[36904 * v21 + 40];
  }
  else
  {
    *v26 = v28;
    v29 = &a5[36904 * v21];
    v32 = (void *)*((_QWORD *)v29 + 20);
    v31 = v29 + 40;
    v30 = v32;
    if (v32)
    {
      j__free(v30);
      v28 = *v26;
    }
    v33 = sub_2160CB5D4(v28);
    *v31 = v33;
  }
  v68 = v21;
  v34 = &a5[36904 * v21];
  v35 = (uint64_t *)(v34 + 40);
  memcpy(v33, a3, a4);
  v36 = (_QWORD *)*((_QWORD *)v34 + 5);
  if (a6)
  {
    *(_DWORD *)(v36[5] + 88) = *(_DWORD *)(a6 + 20);
    *(_QWORD *)(v36[5] + 96) = *(_QWORD *)(a6 + 176);
    *(_DWORD *)(v36[5] + 104) = *(_DWORD *)(a6 + 184);
    *(_QWORD *)(v36[5] + 176) = *(_QWORD *)a6;
    v37 = *(_DWORD *)(a6 + 16);
  }
  else
  {
    v37 = 0;
    *(_DWORD *)(v36[5] + 88) = 0;
    *(_QWORD *)(v36[5] + 96) = 0;
    *(_DWORD *)(v36[5] + 104) = 0;
    *(_QWORD *)(v36[5] + 176) = 0;
  }
  *(_DWORD *)(v36[5] + 184) = v37;
  *(_DWORD *)(v36[5] + 216) = v19;
  v38 = &a5[36904 * v68];
  v39 = (uint64_t)(v38 + 20);
  v40 = (uint64_t *)(v38 + 38);
  v41 = sub_2160CAB60((uint64_t)v36, (uint64_t)(v38 + 20), (_QWORD *)v38 + 19, (uint64_t)a8, a2, a4, *v35, (uint64_t)a5, a11, a12, a13);
  if ((_DWORD)v41)
    goto LABEL_12;
  memcpy(&a5[36904 * v68 + 46], a5 + 1180944, 0x23CA0uLL);
  v36[3] = &a5[36904 * v68 + 46];
  if (a6)
  {
    v70 = 0;
    v41 = sub_2160AC8EC((unsigned int *)a5 + 1180944, a5[1217589], &v70);
    if ((_DWORD)v41)
    {
LABEL_12:
      sub_2160EC880(*((pthread_mutex_t **)a5 + 2));
      a5[36904 * *a5 + 8] = 0;
      --a5[2];
      sub_2160EC88C(*((pthread_mutex_t **)a5 + 2));
      return v41;
    }
    v43 = *(_DWORD *)(a6 + 16) >> (*(_DWORD *)(a6 + 20) != 875704438);
    if (v43 && v43 < 16 * *(_DWORD *)(v70 + 1328) + 16
      || (v44 = *(_DWORD *)(a6 + 32)) != 0 && v44 < 16 * *(_DWORD *)(v70 + 1332) + 16)
    {
      v41 = 4294958327;
      goto LABEL_12;
    }
  }
  v41 = sub_2160CADC0((uint64_t)v36, v39, *v40, a8, a7, (uint64_t)a5, a11, a12, a1);
  if ((_DWORD)v41)
    goto LABEL_12;
  v45 = (unsigned int *)&a5[36904 * v68];
  v46 = (uint64_t *)(v45 + 36694);
  memcpy(v45 + 36694, a5 + 1259950, 0x348uLL);
  sub_2160EC880(*((pthread_mutex_t **)a5 + 2));
  v47 = v45[36900];
  v48 = v45[36901];
  if ((int)v47 >= 1)
  {
    do
    {
      v49 = *v46++;
      sub_2160ECB1C((unsigned int *)(v49 + 8));
      --v47;
    }
    while (v47);
  }
  if ((int)v48 >= 1)
  {
    v50 = (uint64_t *)(v45 + 36762);
    do
    {
      v51 = *v50++;
      sub_2160ECB1C((unsigned int *)(v51 + 8));
      --v48;
    }
    while (v48);
  }
  sub_2160EC88C(*((pthread_mutex_t **)a5 + 2));
  v54 = sub_2160CB43C((uint64_t)v36, v52, v53, (uint64_t)a5);
  if ((_DWORD)v54)
  {
    v41 = v54;
    sub_2160EC880(*((pthread_mutex_t **)a5 + 2));
    sub_2160CB530((uint64_t)v23);
    sub_2160EC88C(*((pthread_mutex_t **)a5 + 2));
    goto LABEL_12;
  }
  v55 = v36[11];
  if (a6)
  {
    v56 = *(_QWORD *)(a6 + 120);
    *(_DWORD *)(v55 + 320) = *(_DWORD *)(a6 + 128);
    *(_QWORD *)(v55 + 312) = v56;
    *a9 = *(_DWORD *)(v55 + 1280);
    if (!*(_BYTE *)(v55 + 1362))
      goto LABEL_34;
    *(_DWORD *)(a6 + 64) = 1;
    *(_DWORD *)(a6 + 68) = *(unsigned __int8 *)(v55 + 37);
    *(_DWORD *)(a6 + 72) = *(unsigned __int8 *)(v55 + 34);
  }
  else
  {
    *a9 = *(_DWORD *)(v55 + 1280);
    if (!*(_BYTE *)(v55 + 1362))
      goto LABEL_34;
  }
  if (!*(_QWORD *)(v55 + 1352))
  {
    v60 = a5[1260452];
    v58 = v60 == 0;
    *a10 = v60 != 0;
    v57 = v68;
    if (v60)
      v59 = a14;
    else
      v59 = 0;
    sub_2160EC9B8(*(dispatch_semaphore_t **)&a5[36904 * v68 + 18]);
    goto LABEL_39;
  }
LABEL_34:
  *a10 = 1;
  v57 = v68;
  sub_2160EC9B8(*(dispatch_semaphore_t **)&a5[36904 * v68 + 18]);
  v58 = 0;
  v59 = a14;
LABEL_39:
  v61 = &a5[36904 * v57];
  *((_QWORD *)v61 + 18453) = v59;
  *((_QWORD *)v61 + 18455) = voucher_copy();
  sub_2160EC9C4(*((dispatch_semaphore_t **)v61 + 8));
  if (!a1)
  {
    a5[1180936] = -1;
    if (!v58)
    {
      ++a5[1180942];
      if ((int)sub_2160ACEDC((uint64_t)a5) > a5[1180941])
      {
        v69 = 1;
        if (a6)
        {
          *(_DWORD *)(a6 + 140) = 0;
          if (a14)
            v62 = 0;
          else
            v62 = a6;
          if (a14)
            v63 = 0;
          else
            v63 = &v69;
          if (a8)
            v64 = a8[2] > 0;
          else
            v64 = 1;
          sub_2160C6F78((uint64_t)a5, 0, 0, v62, v63, a7, 0, 0, 1, v64);
          if (a5[1180936] != -1 && v69)
            ++a5[1180943];
        }
      }
    }
  }
  return 0;
}

uint64_t sub_2160C94D0(int a1, int a2, int a3, _DWORD *a4, uint64_t a5, int *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  int v22;
  int v23;
  int v24;
  char v25;

  sub_2160C5150((uint64_t)v21);
  v21[1] = a5;
  v21[2] = 0;
  v22 = a3;
  v23 = 0;
  v25 = 0;
  v24 = a2;
  if (a10 && (*(_DWORD *)(a10 + 20) | 0x10) == 0x34323076)
    *(_DWORD *)(a10 + 20) = 875704438;
  if (a6[1260462] == -3)
    v18 = sub_2160C8D14(a1, (uint64_t)v21, a6, a10, a7, a4, a11);
  else
    v18 = sub_2160C95D8(a1, (uint64_t)v21, (uint64_t)a6, a10, a7, a4);
  v19 = v18;
  sub_2160C51D4((uint64_t)v21);
  return v19;
}

void sub_2160C95C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2160C51D4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2160C95D8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int **v52;
  unsigned int *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  size_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  int *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t v88;
  void *v89;
  unsigned int v90;
  _DWORD *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int16x8_t *v103;
  char v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int8x16_t *v110;
  int8x16_t *v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int i;
  uint64_t v125;
  uint64_t v126;
  int16x8_t *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  int j;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  int v153;
  int v154;
  _DWORD *v155;
  int v156;
  int v157;
  uint64_t v158;
  _BYTE *v159;
  int v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;

  if (!*(_BYTE *)(a2 + 60))
  {
    v21 = sub_2160C86EC(a2, (int *)a3);
    if ((_DWORD)v21)
      return v21;
  }
  v12 = a3 + 5039776;
  v13 = *(unsigned __int8 *)(a2 + 61);
  v155 = a6;
  if (a4)
  {
    *(_DWORD *)(a4 + 64) = v13;
    v14 = *(_BYTE **)(a4 + 200);
    if (v14)
      *v14 = v13;
    v15 = *(_BYTE **)(a4 + 208);
    if (v15)
      *v15 = *(_DWORD *)(a3 + 5041828);
    v16 = *(_BYTE **)(a4 + 216);
    if (v16)
      *v16 = *(_DWORD *)(a3 + 5041832);
    v17 = a3 + 5041656;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 176) = *(_QWORD *)a4;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 184) = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 88) = *(_DWORD *)(a4 + 20);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 96) = *(_QWORD *)(a4 + 176);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 104) = *(_DWORD *)(a4 + 184);
    v18 = a3 + 5041680;
    v19 = *(_QWORD *)(a3 + 5041680);
    if (!v19)
      goto LABEL_16;
    *(_QWORD *)(*(_QWORD *)(v19 + 40) + 176) = *(_QWORD *)a4;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 184) = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 88) = *(_DWORD *)(a4 + 20);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 96) = *(_QWORD *)(a4 + 176);
    v20 = *(_DWORD *)(a4 + 184);
  }
  else
  {
    v17 = a3 + 5041656;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 176) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 184) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 88) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 96) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 5041656) + 40) + 104) = 0;
    v18 = a3 + 5041680;
    v22 = *(_QWORD *)(a3 + 5041680);
    if (!v22)
      goto LABEL_16;
    v20 = 0;
    *(_QWORD *)(*(_QWORD *)(v22 + 40) + 176) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 184) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 88) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 96) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 104) = v20;
LABEL_16:
  v23 = a4 == 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 40) + 216) = v23;
  if (*(_QWORD *)v18)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 216) = v23;
  fflush((FILE *)*MEMORY[0x24BDAC8D8]);
  v24 = *(_DWORD *)(a3 + 5041736);
  switch(v24)
  {
    case -1:
      v24 = v13 == 0;
      goto LABEL_24;
    case 0:
      v24 = 2 * (v13 == 0);
      goto LABEL_24;
    case 1:
      if (v13)
        v24 = 2;
      else
        v24 = 1;
      goto LABEL_24;
    case 2:
      goto LABEL_25;
    default:
LABEL_24:
      *(_DWORD *)(a3 + 5041736) = v24;
LABEL_25:
      if (!v13)
      {
        LODWORD(v161) = 0;
        sub_2160C4FC4(0);
        v32 = v155;
        v21 = sub_2160C6960(a1, *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 24), v155, *(_QWORD *)(a2 + 8), a3, a5, &v161, 0, 0, 0);
        if ((_DWORD)v21)
          return v21;
        goto LABEL_45;
      }
      if (*(_QWORD *)v18 && v24 != 2 && *(_BYTE *)(a2 + 72))
      {
        v157 = 0;
        *(_DWORD *)(a3 + 5041744) = a1;
        *(_DWORD *)(*(_QWORD *)(a3 + 5041656) + 32) = *(_BYTE *)(a2 + 65) == 0;
        *(_DWORD *)(a3 + 5041748) = *(_DWORD *)(a2 + 40);
        *(_DWORD *)(a3 + 5041752) = *(_DWORD *)(a2 + 24);
        *(_QWORD *)(a3 + 5041760) = v155;
        *(_QWORD *)(a3 + 5041768) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a3 + 5041776) = a3;
        v154 = a5;
        *(_DWORD *)(a3 + 5041784) = a5;
        *(_QWORD *)(a3 + 5041792) = &v157;
        *(_BYTE *)(a3 + 5041800) = 0;
        *(_DWORD *)(a3 + 5041804) = 0;
        sub_2160EC880(*(pthread_mutex_t **)(a3 + 5041688));
        sub_2160EC880(*(pthread_mutex_t **)(a3 + 5041728));
        sub_2160EC9C4(*(dispatch_semaphore_t **)(a3 + 5041712));
        v25 = *(_DWORD *)(a2 + 28);
        if (!v25)
          return 4294958327;
        v26 = *(_QWORD *)(a2 + 16);
        if (!v26)
          return 4294958327;
        v153 = a1;
        v27 = *(_DWORD *)(a2 + 40);
        v28 = *(_QWORD *)(a3 + 5041656);
        sub_2160BE8B0((uint64_t)&v161);
        v29 = sub_2160BE900((uint64_t)&v161, 400);
        if ((_DWORD)v29)
        {
          v21 = v29;
          v30 = 0;
          v31 = 0;
          a1 = v153;
          a5 = v154;
          v32 = v155;
          goto LABEL_33;
        }
        v152 = v28;
        v161 = v26;
        v21 = 4294958327;
        v163 = 0;
        v162 = v25;
        v40 = v27;
        v41 = (*(_DWORD *)(v28 + 4) * *(_DWORD *)(v28 + 8)) << 10;
        a1 = v153;
        a5 = v154;
        v32 = v155;
        switch(v40)
        {
          case 0:
            v42 = sub_2160EBA84((uint64_t)&v161, 1);
            goto LABEL_74;
          case 2:
            v42 = sub_2160EBD8C((uint64_t)&v161);
            goto LABEL_74;
          case 3:
            v46 = 1;
            goto LABEL_73;
          case 4:
            v46 = 2;
            goto LABEL_73;
          case 5:
            v46 = 4;
LABEL_73:
            v42 = sub_2160EBC08((uint64_t)&v161, v46, v41, 1, 0);
LABEL_74:
            v21 = v42;
            if ((_DWORD)v42 || !v163)
              goto LABEL_34;
            v21 = sub_2160C6C98(v152, (uint64_t)&v161, (unsigned int *)(a3 + 4723776), 0, 0);
            if ((_DWORD)v21)
            {
LABEL_77:
              sub_2160BE8C0((uint64_t)&v161);
              return v21;
            }
            v47 = v166;
            v48 = v164;
            v49 = v165;
            v50 = v163;
            *(_DWORD *)(v152 + 156) = 0;
            *(_DWORD *)(*(_QWORD *)(v152 + 40) + 264) = 25;
            if (v155)
            {
              v51 = v155[1];
              if (*(_QWORD *)v155 <= 0x89uLL)
              {
                *(_DWORD *)(v152 + 156) = (138 - *v155) >> 2;
                v51 = v155[1];
              }
              if (v51)
                *(_DWORD *)(*(_QWORD *)(v152 + 40) + 264) = 0;
            }
            if (!(_DWORD)v50)
              goto LABEL_35;
            v52 = (unsigned int **)(v49 + 8 * v47);
            v148 = (int)v50;
            *(_BYTE *)(v152 + 832) = 0;
            v53 = (unsigned int *)(v48 + 4 * v47);
            v150 = v50;
            sub_2160EC880(*(pthread_mutex_t **)(a3 + 5041688));
            sub_2160EC88C(*(pthread_mutex_t **)(a3 + 5041688));
            v151 = (char *)sub_2160CB5FC((void *)(80 * v148));
            v54 = (char *)sub_2160CB5FC((void *)(16 * (v150 + 1)));
            v147 = **(_QWORD **)(v152 + 56);
            v145 = *(unsigned int **)(v152 + 24);
            v160 = 0;
            if ((int)v150 >= 1)
            {
              v55 = 0;
              v56 = 0;
              v57 = v54 + 8;
              do
              {
                v58 = &v151[v55];
                *(_QWORD *)v58 = 0xFFFFFFFF00000000;
                *((_DWORD *)v58 + 2) = -1;
                *((_QWORD *)v58 + 2) = v152;
                *((_QWORD *)v58 + 3) = a3;
                *((_QWORD *)v58 + 4) = v52[v56];
                *((_DWORD *)v58 + 10) = v53[v56];
                *((_DWORD *)v58 + 11) = v56;
                *((_QWORD *)v58 + 6) = 0;
                *(v57 - 1) = sub_2160BAD44;
                *v57 = &v151[v55];
                ++v56;
                v55 += 80;
                v57 += 2;
              }
              while (80 * v150 != v55);
            }
            v149 = (uint64_t)v54;
            if (sub_2160AC81C(*v52, *v53, v147 + 1425504))
              goto LABEL_88;
            v32 = v155;
            if (sub_2160DABCC(v147 + 1425504, v145, (void *)(v147 + 1425544), *(unsigned __int8 *)(v152 + 832), &v160, 0, 0, 0, 0))goto LABEL_93;
            v142 = a3 + 5016960;
            v59 = v145 + 3;
            v146 = a3 + 5041520;
            *(_DWORD *)(*((_QWORD *)v151 + 2) + 552) = v150;
            *(_QWORD *)(*((_QWORD *)v151 + 2) + 560) = *(_QWORD *)(v152 + 560);
            *(_QWORD *)(*((_QWORD *)v151 + 2) + 568) = *(_QWORD *)(v152 + 568);
            sub_2160EC880(*(pthread_mutex_t **)(a3 + 5041584));
            *(_DWORD *)(a3 + 5039796) = 1;
            v141 = (uint64_t)v59;
            v60 = (uint64_t)v59;
            v61 = v152 + 88;
            if (sub_2160AF218(v60, v147 + 1425544, a3 + 5041520, a3 + 5016960, (uint64_t *)(v152 + 88), 0, *(unsigned __int8 *)(v152 + 832), v160, 0, v153))goto LABEL_92;
            v62 = *(_QWORD *)v61;
            if (!*(_QWORD *)v61)
              goto LABEL_100;
            v63 = *(_QWORD *)(v152 + 40);
            if (!*(_DWORD *)(v63 + 216))
              goto LABEL_100;
            if (*(_BYTE *)(v62 + 34))
            {
              v62 = *(_QWORD *)(v62 + 1352);
              if (!v62)
                goto LABEL_191;
            }
            *(_QWORD *)(v63 + 176) = *(_QWORD *)(v62 + 192);
            *(_DWORD *)(*(_QWORD *)(v152 + 40) + 184) = *(_DWORD *)(v62 + 208);
            a1 = v153;
            a5 = v154;
LABEL_100:
            sub_2160EC88C(*(pthread_mutex_t **)(a3 + 5041584));
            v143 = (uint64_t *)(v152 + 88);
            if (*(_QWORD *)v61)
            {
              v64 = *(_DWORD *)(*(_QWORD *)v61 + 132) >> 4;
              v65 = *(_DWORD *)(v152 + 4) * v64;
              *(_DWORD *)(v152 + 16) = v64;
              *(_DWORD *)(v152 + 20) = v65;
              v66 = *(_QWORD *)(v152 + 40);
              v67 = *(unsigned int *)(v66 + 20);
              sub_2160EC880(*(pthread_mutex_t **)(v66 + 160));
              if ((_DWORD)v67)
                bzero(*(void **)(v66 + 168), v67);
              sub_2160EC88C(*(pthread_mutex_t **)(v66 + 160));
              if (*(_BYTE *)(v147 + 1425576) && *(_BYTE *)(v147 + 1428292) == 1 && (_DWORD)v150 == 1)
              {
                v68 = (unsigned int *)*((_QWORD *)v151 + 4);
                v69 = *((_DWORD *)v151 + 10);
                v70 = *((_QWORD *)v151 + 2);
                v139 = *(_QWORD *)(v70 + 88);
                v144 = *(unsigned int **)(v70 + 24);
                v159 = 0;
                v158 = 0;
                sub_2160EC880(*(pthread_mutex_t **)(v70 + 72));
                v71 = 0;
                v72 = *(_QWORD *)(v70 + 64);
                while (*(_DWORD *)(v72 + 4 * v71++))
                  ;
                *(_DWORD *)(v72 + 4 * v71 - 4) = 1;
                sub_2160EC88C(*(pthread_mutex_t **)(v70 + 72));
                v140 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + 8 * v71 - 8);
                v74 = sub_2160AC81C(v68, v69, v140 + 1425504);
                if (!v74)
                {
                  v138 = v140 + 1425544;
                  v74 = sub_2160DABCC(v140 + 1425504, v144, (void *)(v140 + 1425544), 0, 0, 0, 0, 0, 0);
                  if (!v74)
                  {
                    v74 = sub_2160AC930((uint64_t)v144, *(_DWORD *)(v140 + 1425568), &v158);
                    if (!v74)
                    {
                      v74 = sub_2160AC8EC(v144, *(_DWORD *)(v158 + 4), &v159);
                      if (!v74)
                      {
                        v74 = sub_2160AFFFC(v138, v142, (int8x16_t *)(v140 + 1428296), v139, v75, v76);
                        if (!v74)
                        {
                          *(_QWORD *)(v140 + 1455792) = v140 + 1456080;
                          sub_2160CBD3C(v140 + 1429136, v140 + 1429200, v140 + 1455680, v140 + 1456336, (_QWORD *)(v140 + 976));
                          v74 = sub_2160B3498(v140 + 976, v70, v140 + 1428296, v139, v159, v158, v138, 0, 0);
                          if (!v74)
                          {
                            *(_QWORD *)(v140 + 1232) = v146;
                            v74 = sub_2160BB5AC(v140 + 976, v146);
                            if (!v74)
                            {
                              *(_DWORD *)(*(_QWORD *)(v70 + 40) + 188) = *(unsigned __int8 *)(v140 + 1425576);
                              *(_DWORD *)(*(_QWORD *)(v70 + 40) + 192) = *(_DWORD *)(v139 + 1280);
                              v77 = v159;
                              *(_DWORD *)(*(_QWORD *)(v70 + 40) + 196) = *((_DWORD *)v159 + 335)
                                                                         * v159[1339];
                              *(_DWORD *)(*(_QWORD *)(v70 + 40) + 200) = *((_DWORD *)v77 + 336)
                                                                         * v77[1339];
                              *(_DWORD *)(*(_QWORD *)(v70 + 40) + 204) = *((_DWORD *)v77 + 337)
                                                                         * v77[1339];
                              *(_DWORD *)(*(_QWORD *)(v70 + 40) + 208) = *((_DWORD *)v77 + 338)
                                                                         * v77[1339];
                              *(_DWORD *)(*(_QWORD *)(v70 + 40) + 212) = v77[1336];
                              sub_21609DC00(*(_QWORD *)(v70 + 40), *((_DWORD *)v151 + 11), *(_DWORD *)(v140 + 1425564), *(_DWORD *)(v140 + 1428276), *(_DWORD *)(v140 + 1428280), *(_DWORD *)(v140 + 1428284));
                              *((_DWORD *)v151 + 1) = *(_DWORD *)(v140 + 1425560);
                              HIDWORD(v137) = *(_DWORD *)(v70 + 836);
                              LOBYTE(v137) = *(_BYTE *)(v70 + 832);
                              v74 = sub_2160BAA34(a3, v70, (uint64_t)v159, v158, v140, *((_DWORD *)v151 + 11), (int)v71 - 1, (uint64_t)(v151 + 8), (_DWORD *)v151 + 12, (_DWORD *)v151 + 13, v137, 0);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                sub_2160EC880(*(pthread_mutex_t **)(v70 + 72));
                *(_DWORD *)(*(_QWORD *)(v70 + 64) + 4 * v71 - 4) = 0;
                sub_2160EC88C(*(pthread_mutex_t **)(v70 + 72));
                *(_DWORD *)v151 = v74;
              }
              else
              {
                sub_2160EC244(*(_QWORD *)(v152 + 80), v149, v150 + 1);
              }
              v78 = v150;
              if ((int)v150 < 1)
              {
LABEL_122:
                v80 = 0;
              }
              else
              {
                v79 = (int *)v151;
                while (1)
                {
                  v81 = *v79;
                  v79 += 20;
                  v80 = v81;
                  if (v81)
                    break;
                  if (!--v78)
                    goto LABEL_122;
                }
              }
              v82 = v152;
              *(_DWORD *)(*(_QWORD *)(v152 + 88) + 1264) = v153;
              sub_2160E7ADC(*(_QWORD *)(v152 + 40));
              v84 = v150;
              v83 = (uint64_t)v151;
              if (*(_DWORD *)(v152 + 108))
              {
                if (v150 > *(_DWORD *)(v152 + 128))
                {
                  v85 = *(void **)(v152 + 120);
                  if (v85)
                    j__free(v85);
                  v82 = v152;
                  *(_QWORD *)(v152 + 120) = sub_2160CB5FC((void *)(2 * v148));
                  v84 = v150;
                  *(_DWORD *)(v152 + 128) = v150;
                }
                *(_DWORD *)(v82 + 112) = 0;
                v83 = (uint64_t)v151;
                if ((int)v84 >= 1)
                {
                  v86 = 0;
                  v87 = v151 + 48;
                  v88 = v84;
                  do
                  {
                    if (*v87)
                    {
                      *(_WORD *)(*(_QWORD *)(v82 + 120) + 2 * v86) = *(v87 - 11);
                      v86 = *(_DWORD *)(v82 + 112) + 1;
                      *(_DWORD *)(v82 + 112) = v86;
                    }
                    v87 += 20;
                    --v88;
                  }
                  while (v88);
                }
              }
              if (*(_DWORD *)(v82 + 132))
              {
                if (v84 > *(_DWORD *)(v82 + 152))
                {
                  v89 = *(void **)(v82 + 144);
                  if (v89)
                    j__free(v89);
                  v82 = v152;
                  *(_QWORD *)(v152 + 144) = sub_2160CB5FC((void *)(2 * v148));
                  v84 = v150;
                  *(_DWORD *)(v152 + 152) = v150;
                }
                *(_DWORD *)(v82 + 136) = 0;
                v83 = (uint64_t)v151;
                if ((int)v84 >= 1)
                {
                  v90 = 0;
                  v91 = v151 + 52;
                  v92 = v84;
                  do
                  {
                    if (*v91)
                    {
                      *(_WORD *)(*(_QWORD *)(v82 + 144) + 2 * v90) = *(v91 - 12);
                      v90 = *(_DWORD *)(v82 + 136) + 1;
                      *(_DWORD *)(v82 + 136) = v90;
                    }
                    v91 += 20;
                    --v92;
                  }
                  while (v92);
                }
              }
              *(_BYTE *)(*(_QWORD *)(v82 + 88) + 1378) = 0;
              v93 = sub_2160BD434(v83, v84);
              if ((v80 || v93 != *(_DWORD *)(v82 + 20))
                && sub_2160BD434((uint64_t)v151, v150) <= *(_DWORD *)(v82 + 20))
              {
                sub_2160BD104(v82, v150, (uint64_t)v151, *(_QWORD *)(a3 + 5040640), *(_QWORD *)(v82 + 88));
                *(_BYTE *)(*(_QWORD *)(v82 + 88) + 1378) = 1;
              }
              sub_2160EC880(*(pthread_mutex_t **)(*v143 + 16));
              *(_DWORD *)(*v143 + 12) = 0x7FFFFFFF;
              v94 = *v143;
              v95 = *(_QWORD *)(*v143 + 1352);
              if (v95 && *(_BYTE *)(v95 + 36))
              {
                *(_DWORD *)(v95 + 12) = 0x7FFFFFFF;
                v94 = *v143;
              }
              sub_2160EC90C(*(pthread_cond_t **)(v94 + 24));
              sub_2160EC88C(*(pthread_mutex_t **)(*v143 + 16));
              v96 = *v143;
              if (*(_BYTE *)(*v143 + 1372))
              {
                *(_QWORD *)(a3 + 5040640) = v96;
                v96 = *v143;
                if (!*(_BYTE *)(*v143 + 3))
                {
                  v97 = *(int *)(v96 + 164);
                  if (*(_BYTE *)(v96 + 37))
                    v98 = *(unsigned int *)(v96 + 168);
                  else
                    v98 = 0;
                  v99 = (int8x16_t *)(*(_QWORD *)(v96 + 64) + v98);
                  v100 = *(_DWORD *)(v96 + 184);
                  v101 = *(int *)(v96 + 180);
                  if (*(_BYTE *)(v96 + 37))
                    v102 = *(unsigned int *)(v96 + 184);
                  else
                    v102 = 0;
                  v103 = (int16x8_t *)(*(_QWORD *)(v96 + 72) + v102);
                  v104 = *(_BYTE *)(v96 + 1362) != 0;
                  v105 = *(_DWORD *)(v96 + 168) << v104;
                  v106 = *(_DWORD *)(v96 + 132);
                  v107 = *(_DWORD *)(v96 + 148);
                  v108 = v105;
                  if (v106 <= 0)
                  {
                    v110 = v99;
                  }
                  else
                  {
                    v109 = v97 - 16;
                    v110 = v99;
                    do
                    {
                      v111 = (int8x16_t *)((char *)v110 + v109);
                      v112 = vzip1q_s8(*v110, *v110);
                      v113 = vqtbl1q_s8(vzip1q_s8(v112, v112), (int8x16_t)xmmword_2160EE800);
                      v110[-2] = v113;
                      v110[-1] = v113;
                      v114 = vzip2q_s8(*(int8x16_t *)((char *)v110 + v109), *(int8x16_t *)((char *)v110 + v109));
                      v115 = vqtbl1q_s8(vzip2q_s8(v114, v114), (int8x16_t)xmmword_2160F1A00);
                      v111[1] = v115;
                      v111[2] = v115;
                      v110 = (int8x16_t *)((char *)v110 + v105);
                      --v106;
                    }
                    while (v106);
                  }
                  v116 = 0;
                  v117 = 0;
                  v118 = v100 << v104;
                  v119 = (int)v97 + 48;
                  v120 = &v110->i8[-v105];
                  do
                  {
                    if ((int)v97 >= -63)
                    {
                      v121 = -32;
                      do
                      {
                        *(_OWORD *)&v120[v108 + v116 + v121] = *(_OWORD *)&v120[v121];
                        v122 = v121 + 32;
                        v121 += 16;
                      }
                      while (v122 < v119);
                    }
                    ++v117;
                    v116 += v108;
                  }
                  while (v117 != 20);
                  v123 = 0;
                  for (i = 0; i != 20; ++i)
                  {
                    if ((int)v97 >= -63)
                    {
                      v125 = 0xFFFFFFFFFFFFFFELL;
                      do
                      {
                        *(int8x16_t *)((char *)v99 + v123 - v108 + v125 * 16) = v99[v125];
                        v126 = v125 * 16 + 32;
                        ++v125;
                      }
                      while (v126 < v119);
                    }
                    v123 -= v108;
                  }
                  if (v107 <= 0)
                  {
                    v127 = v103;
                  }
                  else
                  {
                    v127 = v103;
                    do
                    {
                      v127[-1] = (int16x8_t)vqtbl1q_s8((int8x16_t)vzip1q_s16(*v127, *v127), (int8x16_t)xmmword_2160EE800);
                      *(int8x16_t *)((char *)v127 + v101) = vqtbl1q_s8((int8x16_t)vzip2q_s16(*(int16x8_t *)((char *)v127 + v101 - 16), *(int16x8_t *)((char *)v127 + v101 - 16)), (int8x16_t)xmmword_2160F1A00);
                      v127 = (int16x8_t *)((char *)v127 + v118);
                      --v107;
                    }
                    while (v107);
                  }
                  v128 = 0;
                  v129 = 0;
                  v130 = (int)v101 + 16;
                  v131 = &v127->i8[-v118];
                  do
                  {
                    if ((int)v101 >= -31)
                    {
                      v132 = -16;
                      do
                      {
                        *(_OWORD *)&v131[v118 + v128 + v132] = *(_OWORD *)&v131[v132];
                        v132 += 16;
                      }
                      while (v132 < v130);
                    }
                    ++v129;
                    v128 += v118;
                  }
                  while (v129 != 8);
                  v133 = 0;
                  for (j = 0; j != 8; ++j)
                  {
                    if ((int)v101 >= -31)
                    {
                      v135 = -16;
                      do
                      {
                        *(int16x8_t *)((char *)v103 + v133 - v118 + v135) = v103[(unint64_t)v135 / 0x10];
                        v135 += 16;
                      }
                      while (v135 < v130);
                    }
                    v133 -= v118;
                  }
                  v96 = *v143;
                }
              }
              if (*(_DWORD *)(*(_QWORD *)v12 + 44))
              {
                if (sub_2160AE5BC(v147 + 1428092, *(_DWORD *)(v147 + 1425572), v141, v142, v96))
                {
LABEL_191:
                  v21 = 0;
                  a1 = v153;
                  a5 = v154;
                  goto LABEL_89;
                }
                v96 = *v143;
              }
              v136 = *(_QWORD *)(v96 + 1352);
              *(_BYTE *)(v96 + 1376) = 1;
              if (v136 && *(_BYTE *)(v136 + 36))
                *(_BYTE *)(v136 + 1376) = 1;
              if (*(_BYTE *)(v147 + 1428253))
                *(_DWORD *)(*(_QWORD *)v12 + 40) = 0;
              sub_2160EC880(*(pthread_mutex_t **)(a3 + 5041584));
              sub_2160AE470(v142);
              a1 = v153;
              a5 = v154;
              v32 = v155;
LABEL_92:
              sub_2160EC88C(*(pthread_mutex_t **)(a3 + 5041584));
LABEL_93:
              v21 = 0;
LABEL_94:
              v31 = (void *)v149;
              v30 = v151;
LABEL_33:
              j__free(v30);
              j__free(v31);
LABEL_34:
              sub_2160BE8C0((uint64_t)&v161);
              if (!(_DWORD)v21)
              {
LABEL_35:
                v33 = *(_QWORD *)(*(_QWORD *)v17 + 88);
                if (!v33)
                  return 4294954947;
                v34 = *(_DWORD *)(v33 + 1280);
                if (*(_BYTE *)(v33 + 37))
                  *(_DWORD *)(a2 + 48) = v34;
                else
                  *(_DWORD *)(a2 + 44) = v34;
                sub_2160EC9B8(*(dispatch_semaphore_t **)(a3 + 5041720));
                v39 = *(_QWORD *)(a3 + 5041680);
LABEL_63:
                v43 = *(_QWORD *)(v39 + 88);
                if (v43)
                {
                  v44 = *(_DWORD *)(v43 + 1280);
                  if (*(_BYTE *)(v43 + 37))
                    *(_DWORD *)(a2 + 48) = v44;
                  else
                    *(_DWORD *)(a2 + 44) = v44;
LABEL_45:
                  v156 = 0;
                  if (!a4)
                    return 0;
                  if (a1)
                  {
                    if (v32)
                      v37 = v32[2] > 0;
                    else
                      v37 = 0;
                    v38 = sub_2160C6F78(a3, a1, 1, a4, &v156, a5, 0, 0, 1, v37);
                  }
                  else
                  {
                    v38 = sub_2160C85D4(a3, a4, &v156, a5);
                  }
                  v21 = v38;
                  *(_DWORD *)(a4 + 76) = v156 == 0;
                  return v21;
                }
                return 4294954947;
              }
              return v21;
            }
LABEL_88:
            v21 = 0;
LABEL_89:
            v32 = v155;
            goto LABEL_94;
          default:
            goto LABEL_77;
        }
      }
      v32 = v155;
      if (*(_BYTE *)(a2 + 65))
        *(_DWORD *)(*(_QWORD *)v17 + 32) = 0;
      LODWORD(v161) = 0;
      LODWORD(v159) = 0;
      sub_2160C4FC4(0);
      v21 = sub_2160C6960(a1, *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 24), v155, *(_QWORD *)(a2 + 8), a3, a5, &v161, 0, 0, 0);
      if (!(_DWORD)v21)
      {
        v35 = *(_QWORD *)(*(_QWORD *)v17 + 88);
        if (!v35)
          return 4294954947;
        v36 = *(_DWORD *)(v35 + 1280);
        if (*(_BYTE *)(v35 + 37))
          *(_DWORD *)(a2 + 48) = v36;
        else
          *(_DWORD *)(a2 + 44) = v36;
        if (*(_DWORD *)(a2 + 28))
        {
          sub_2160C4FC4(0);
          v21 = sub_2160C6960(a1, *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 28), v155, *(_QWORD *)(a2 + 16), a3, 0, &v159, 0, 0, 0);
          if ((_DWORD)v21)
            return v21;
        }
        v39 = *(_QWORD *)v17;
        goto LABEL_63;
      }
      return v21;
  }
}

uint64_t sub_2160CA6CC(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  size_t v17;
  int v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  unsigned __int8 v27;
  void *v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  void *v34;
  unsigned int v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  uint64_t v40;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;

  v3 = *(_QWORD *)(a2 + 16);
  v43 = *(_QWORD *)(v3 + 88);
  v48 = 0;
  *(_WORD *)(v3 + 104) = 0;
  v4 = a1;
  if (a1 >= 1)
  {
    v5 = 0;
    while (1)
    {
      v6 = (int *)(a2 + 80 * v5);
      if (!*v6)
        break;
LABEL_23:
      if (++v5 == v4)
        goto LABEL_24;
    }
    v7 = a2 + 80 * v5;
    v8 = *(_DWORD *)(v7 + 44);
    v9 = *(_QWORD *)(v7 + 64);
    v45 = *(_QWORD *)(v7 + 24);
    v46 = *(_QWORD *)(v7 + 72);
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5);
    v44 = *(_DWORD *)(v7 + 60);
    v47 = 0;
    LODWORD(v7) = *(_DWORD *)(v43 + 132) >> 4;
    v11 = *(_DWORD *)(v3 + 4) * v7;
    *(_DWORD *)(v3 + 16) = v7;
    *(_DWORD *)(v3 + 20) = v11;
    *(_QWORD *)(v10 + 1455792) = v10 + 1456080;
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 188) = *(unsigned __int8 *)(v10 + 1425576);
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 192) = *(_DWORD *)(v43 + 1280);
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 196) = *(_DWORD *)(v9 + 1340) * *(unsigned __int8 *)(v9 + 1339);
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 200) = *(_DWORD *)(v9 + 1344) * *(unsigned __int8 *)(v9 + 1339);
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 204) = *(_DWORD *)(v9 + 1348) * *(unsigned __int8 *)(v9 + 1339);
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 208) = *(_DWORD *)(v9 + 1352) * *(unsigned __int8 *)(v9 + 1339);
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 212) = *(unsigned __int8 *)(v9 + 1336);
    if (!v5)
    {
      v12 = *(_QWORD *)(v3 + 40);
      v13 = *(unsigned int *)(v12 + 20);
      if ((int)v13 < 1)
      {
        v15 = *(_DWORD *)(v12 + 20);
      }
      else
      {
        v14 = 0;
        do
        {
          *(_WORD *)(*(_QWORD *)(v12 + 72) + v14) = 0;
          v14 += 2;
        }
        while (2 * v13 != v14);
        v15 = *(_DWORD *)(v12 + 20);
      }
      if (v15 > *(_DWORD *)(v12 + 24))
      {
        v16 = -8969;
LABEL_22:
        *v6 = v16;
        goto LABEL_23;
      }
      v17 = (int)v13;
      v42 = v8;
      bzero(*(void **)(v12 + 112), (int)v13);
      bzero(*(void **)(v12 + 120), v17);
      bzero(*(void **)(v12 + 128), v17);
      v8 = v42;
    }
    v18 = v8;
    sub_21609DC00(*(_QWORD *)(v3 + 40), v8, *(_DWORD *)(v10 + 1425564), *(_DWORD *)(v10 + 1428276), *(_DWORD *)(v10 + 1428280), *(_DWORD *)(v10 + 1428284));
    *(_DWORD *)(a2 + 80 * v5 + 4) = *(_DWORD *)(v10 + 1425560);
    v22 = *(_DWORD *)(v10 + 1425564);
    v16 = -8969;
    if (v22 <= 7 && ((1 << v22) & 0xE7) != 0)
    {
      v23 = a2 + 80 * v5;
      v24 = (_DWORD *)(v23 + 8);
      v25 = (_DWORD *)(v23 + 48);
      v26 = (_DWORD *)(v23 + 52);
      v27 = *(_BYTE *)(v23 + 56);
      if (*(_BYTE *)(v10 + 1425576))
      {
        if (*(_BYTE *)(v10 + 1164))
        {
          HIDWORD(v40) = v44;
          LOBYTE(v40) = v27;
          v16 = sub_2160BEFA8(v45, v3, v9, v46, (char *)v10, v18, 0, v24, v25, v26, v40, &v47, &v48);
        }
        else
        {
          v16 = sub_2160C0650(v45, v3, v9, v46, (char *)v10, v18, 0, v24, v25, v26, v27, v44, &v47, &v48);
        }
      }
      else if (*(_BYTE *)(v10 + 1164))
      {
        HIDWORD(v40) = v44;
        LOBYTE(v40) = v27;
        v16 = sub_2160C1D68(v45, v3, v9, v46, (char *)v10, v18, 0, v24, v25, v26, v40, &v47, &v48);
      }
      else
      {
        v16 = sub_2160C32D0(v45, v3, v19, v20, v21, v9, v46, (char *)v10, v18, 0, v24, v25, v26, v27, v44, &v47, &v48);
      }
    }
    goto LABEL_22;
  }
LABEL_24:
  if (*(_DWORD *)(v3 + 108))
  {
    if (*(_DWORD *)(v3 + 128) < a1)
    {
      v28 = *(void **)(v3 + 120);
      if (v28)
        j__free(v28);
      *(_QWORD *)(v3 + 120) = sub_2160CB5FC((void *)(2 * a1));
      *(_DWORD *)(v3 + 128) = a1;
    }
    *(_DWORD *)(v3 + 112) = 0;
    if (a1 >= 1)
    {
      v29 = 0;
      v30 = (_DWORD *)(a2 + 48);
      v31 = v4;
      v32 = (_DWORD *)(a2 + 48);
      do
      {
        v33 = *v32;
        v32 += 20;
        if (v33)
        {
          *(_WORD *)(*(_QWORD *)(v3 + 120) + 2 * v29) = *(v30 - 11);
          v29 = *(_DWORD *)(v3 + 112) + 1;
          *(_DWORD *)(v3 + 112) = v29;
        }
        v30 = v32;
        --v31;
      }
      while (v31);
    }
  }
  if (*(_DWORD *)(v3 + 132))
  {
    if (*(_DWORD *)(v3 + 152) < a1)
    {
      v34 = *(void **)(v3 + 144);
      if (v34)
        j__free(v34);
      *(_QWORD *)(v3 + 144) = sub_2160CB5FC((void *)(2 * a1));
      *(_DWORD *)(v3 + 152) = a1;
    }
    *(_DWORD *)(v3 + 136) = 0;
    if (a1 >= 1)
    {
      v35 = 0;
      v36 = (_DWORD *)(a2 + 52);
      v37 = (_DWORD *)(a2 + 52);
      do
      {
        v38 = *v37;
        v37 += 20;
        if (v38)
        {
          *(_WORD *)(*(_QWORD *)(v3 + 144) + 2 * v35) = *(v36 - 12);
          v35 = *(_DWORD *)(v3 + 136) + 1;
          *(_DWORD *)(v3 + 136) = v35;
        }
        v36 = v37;
        --v4;
      }
      while (v4);
    }
  }
  sub_2160EC880(*(pthread_mutex_t **)(*(_QWORD *)(v3 + 88) + 16));
  *(_DWORD *)(*(_QWORD *)(v3 + 88) + 12) = 0x7FFFFFFF;
  fflush((FILE *)*MEMORY[0x24BDAC8E8]);
  sub_2160EC90C(*(pthread_cond_t **)(*(_QWORD *)(v3 + 88) + 24));
  sub_2160EC88C(*(pthread_mutex_t **)(*(_QWORD *)(v3 + 88) + 16));
  return 0;
}

uint64_t sub_2160CAB60(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, int a10, uint64_t a11)
{
  BOOL v12;
  int v13;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  int v35;
  uint64_t v36;
  void *v37;
  int v38;

  if (a10)
    v12 = a11 == 0;
  else
    v12 = 1;
  v13 = v12;
  result = 4294958327;
  if (a6)
  {
    if (a7)
    {
      sub_2160BE8B0(a2);
      result = sub_2160BE900(a2, 400);
      if (!(_DWORD)result)
      {
        *(_DWORD *)(a2 + 32) = 0;
        *(_QWORD *)a2 = a7;
        result = 4294958327;
        *(_DWORD *)(a2 + 8) = a6;
        switch(a5)
        {
          case 0:
            result = sub_2160EBA84(a2, v13);
            goto LABEL_17;
          case 2:
            result = sub_2160EBD8C(a2);
            goto LABEL_17;
          case 3:
            v21 = a2;
            v22 = 1;
            goto LABEL_16;
          case 4:
            v21 = a2;
            v22 = 2;
            goto LABEL_16;
          case 5:
            v21 = a2;
            v22 = 4;
LABEL_16:
            result = sub_2160EBC08(v21, v22, (*(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 8)) << 10, v13, a11);
LABEL_17:
            if (!(_DWORD)result)
            {
              v23 = *(_DWORD *)(a2 + 32);
              if (v23)
              {
                if (a4)
                  v24 = *(_DWORD *)(a4 + 8);
                else
                  v24 = 0x10000;
                v25 = a9;
                if (!*(_DWORD *)(a1 + 48))
                {
                  if (v23 < 1)
                    goto LABEL_33;
                  v38 = v24;
                  v26 = 0;
                  v27 = 0;
                  v28 = 0;
                  v29 = 0;
                  do
                  {
                    v30 = sub_2160DD934(*(_BYTE **)(*(_QWORD *)(a2 + 48) + 8 * v26));
                    v31 = 8 * (v30 - 1);
                    v32 = 0x101u >> v31;
                    v33 = 0x10001u >> v31;
                    if ((v30 - 1) < 3)
                    {
                      v29 = 1;
                      v28 = v32;
                      v27 = v33;
                    }
                    ++v26;
                  }
                  while (v26 < *(int *)(a2 + 32));
                  v25 = a9;
                  if (v29 && v38 <= 0x10000)
                  {
                    v34 = 1;
                  }
                  else
                  {
LABEL_33:
                    v34 = 0;
                    v28 = 0;
                    v27 = 0;
                  }
                  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 224) = v34;
                  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 225) = v28;
                  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 226) = v27;
                }
                if ((v25 & 0xFFFFFFFD) == 1)
                {
                  v35 = a10;
                }
                else
                {
                  v25 = 0;
                  v35 = 0;
                }
                result = sub_2160C6C98(a1, a2, (unsigned int *)(a8 + 4723776), v25, v35);
                if (!(_DWORD)result)
                {
                  *(_DWORD *)(a2 + 56) = 0;
                  v36 = *(int *)(a2 + 32);
                  *(_DWORD *)(a1 + 552) = v36;
                  if ((_DWORD)v36)
                  {
                    v37 = sub_2160CB5FC((void *)(80 * v36));
                    result = 0;
                    *a3 = v37;
                  }
                  else
                  {
                    result = 4294954948;
                  }
                }
              }
              else
              {
                result = 4294958327;
              }
            }
            break;
          default:
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2160CADC0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5, uint64_t a6, int a7, int a8, int a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int *v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  int v61[3];

  v61[0] = a8;
  v16 = *(unsigned int *)(a1 + 552);
  if ((int)v16 > *(_DWORD *)(a1 + 52))
  {
    sub_2160BEEA8(a1);
    sub_2160BE9A4(a1, v16);
  }
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 264) = 25;
  if (a4 && *(_QWORD *)a4 <= 0x89uLL)
    *(_DWORD *)(a1 + 156) = (138 - *a4) >> 2;
  *(_BYTE *)(a1 + 832) = a7;
  v17 = *(int *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 40);
  v19 = (unsigned int **)(*(_QWORD *)(a2 + 48) + 8 * v17);
  v20 = **(_QWORD **)(a1 + 56);
  v60 = 0;
  if (!*v19)
    return 4294967188;
  v58 = (unsigned int *)(v18 + 4 * v17);
  v59 = a3;
  result = sub_2160AC81C(*v19, *v58, v20 + 1425504);
  if (!(_DWORD)result)
  {
    if ((a7 & 0xFFFFFFFD) == 1)
    {
      result = sub_2160DABCC(v20 + 1425504, (unsigned int *)(a6 + 4723776), (void *)(v20 + 1425544), a7, v61, 0, (int *)(a1 + 160), 0, 0);
      v22 = v61[0];
    }
    else
    {
      result = sub_2160DABCC(v20 + 1425504, (unsigned int *)(a6 + 4723776), (void *)(v20 + 1425544), a7, v61, 0, 0, 0, 0);
      v22 = 0;
      v61[0] = 0;
    }
    *(_DWORD *)(a1 + 836) = v22;
    if (!(_DWORD)result)
    {
      result = sub_2160AC8EC((unsigned int *)(a6 + 4723776), *(_DWORD *)(a6 + 4870356), &v60);
      if (!(_DWORD)result)
      {
        v53 = a6 + 5016960;
        v23 = a9;
        v52 = a6 + 5041520;
        v24 = *(_DWORD *)(a6 + 5041736);
        if (v24 != -1)
        {
          v25 = *(unsigned __int8 *)(v20 + 1425576);
          if (v24 != v25)
          {
            *(_DWORD *)(a6 + 5041736) = v25;
            sub_2160CB3B8((pthread_mutex_t *)a6);
            v23 = a9;
          }
        }
        *(_DWORD *)(a6 + 5039796) = 1;
        v49 = v23;
        v50 = (uint64_t *)(a6 + 5040640);
        v51 = a1 + 88;
        result = sub_2160AF218(v60, v20 + 1425544, v52, v53, (uint64_t *)(a1 + 88), a5, *(unsigned __int8 *)(a1 + 832), v61[0], 1, v23);
        if (!(_DWORD)result)
        {
          sub_2160ECB1C((unsigned int *)(*(_QWORD *)v51 + 8));
          v26 = *(_QWORD *)v51;
          if (!*(_DWORD *)(a6 + 5041808) && *(_BYTE *)(v26 + 1362) && !*(_BYTE *)(v26 + 34))
          {
            sub_2160ECB1C((unsigned int *)(v26 + 8));
            v26 = *(_QWORD *)v51;
          }
          v56 = *(unsigned int **)(a1 + 24);
          v27 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 224);
          *(_BYTE *)(v26 + 1304) = v27;
          v28 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 225);
          *(_BYTE *)(v26 + 1305) = v28;
          *(_BYTE *)(v26 + 1306) = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 226);
          v29 = v27 != 0;
          if ((int)v16 >= 1)
          {
            v48 = v26;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v55 = v29 & v28;
            v57 = 80 * v16;
            while (1)
            {
              v33 = v59 + v30;
              *(_QWORD *)v33 = 0xFFFFFFFF00000000;
              *(_DWORD *)(v33 + 8) = -1;
              *(_QWORD *)(v33 + 16) = a1;
              *(_QWORD *)(v33 + 24) = a6;
              *(_QWORD *)(v33 + 48) = 0;
              *(_DWORD *)(v33 + 44) = v31;
              *(_BYTE *)(v33 + 56) = a7;
              *(_DWORD *)(v33 + 60) = v61[0];
              v34 = v19[v31];
              if (!v34)
                break;
              v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v31);
              result = sub_2160AC81C(v34, v58[v31], v35 + 1425504);
              if ((_DWORD)result)
                return result;
              if ((a7 & 0xFD) == 1)
              {
                result = sub_2160DABCC(v35 + 1425504, v56, (void *)(v35 + 1425544), *(unsigned __int8 *)(v33 + 56), v61, 0, (int *)(a1 + 160), v55, 0);
                if (*(_BYTE *)(v33 + 56) == 1 && !v61[0])
                  return result;
              }
              else
              {
                result = sub_2160DABCC(v35 + 1425504, v56, (void *)(v35 + 1425544), 0, 0, 0, 0, v55, 0);
              }
              v54 = v35 + 1425544;
              v32 = result;
              if ((_DWORD)result)
                goto LABEL_35;
              v36 = (uint64_t *)(v59 + v30 + 72);
              result = sub_2160AC930((uint64_t)v56, *(_DWORD *)(v35 + 1425568), v36);
              v32 = result;
              if ((_DWORD)result)
                goto LABEL_35;
              v37 = (_QWORD *)(v59 + v30 + 64);
              result = sub_2160AC8EC(v56, *(_DWORD *)(*v36 + 4), v37);
              v32 = result;
              if ((_DWORD)result)
                goto LABEL_35;
              result = sub_2160AFFFC(v54, v53, (int8x16_t *)(v35 + 1428296), v48, v38, v39);
              v32 = result;
              if ((_DWORD)result)
                goto LABEL_35;
              sub_2160CBD3C(v35 + 1429136, v35 + 1429200, v35 + 1455680, v35 + 1456336, (_QWORD *)(v35 + 976));
              result = sub_2160B3498(v35 + 976, a1, v35 + 1428296, v48, (_BYTE *)*v37, *v36, v54, *(unsigned __int8 *)(v33 + 56), v61[0]);
              v32 = result;
              if ((_DWORD)result)
                goto LABEL_35;
              *(_QWORD *)(v35 + 1232) = v52;
              result = sub_2160BB5AC(v35 + 976, v52);
              v32 = result;
              if ((_DWORD)result)
                goto LABEL_35;
LABEL_36:
              ++v31;
              v30 += 80;
              if (v57 == v30)
                goto LABEL_42;
            }
            LODWORD(result) = -8969;
LABEL_35:
            *(_DWORD *)v33 = result;
            goto LABEL_36;
          }
          v32 = 0;
LABEL_42:
          v40 = *(_QWORD *)(a1 + 40);
          if (*(_DWORD *)(v40 + 216))
          {
            v41 = *(_QWORD *)v51;
            if (*(_BYTE *)(*(_QWORD *)v51 + 34))
            {
              v41 = *(_QWORD *)(v41 + 1352);
              if (!v41)
                return 4294958327;
            }
            v42 = v32;
            *(_QWORD *)(v40 + 176) = *(_QWORD *)(v41 + 192);
            *(_DWORD *)(*(_QWORD *)(a1 + 40) + 184) = *(_DWORD *)(v41 + 208);
            v40 = *(_QWORD *)(a1 + 40);
          }
          else
          {
            v42 = v32;
          }
          v43 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 132) >> 4;
          v44 = *(_DWORD *)(a1 + 4) * v43;
          *(_DWORD *)(a1 + 16) = v43;
          *(_DWORD *)(a1 + 20) = v44;
          *(_DWORD *)(v40 + 20) = v44;
          sub_2160E7ADC(*(_QWORD *)(a1 + 40));
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 220) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 1372);
          *(_DWORD *)(*(_QWORD *)(a1 + 88) + 12) = -1;
          v45 = *(_QWORD *)(a1 + 40);
          v46 = *(unsigned int *)(v45 + 20);
          sub_2160EC880(*(pthread_mutex_t **)(v45 + 160));
          if ((_DWORD)v46)
            bzero(*(void **)(v45 + 168), v46);
          sub_2160EC88C(*(pthread_mutex_t **)(v45 + 160));
          *(_DWORD *)(*(_QWORD *)v51 + 1264) = v49;
          v47 = *v50;
          if (*v50 && (!*(_BYTE *)(v47 + 1362) || *(_BYTE *)(v47 + 34)))
            *(_QWORD *)(a1 + 96) = v47;
          return v42;
        }
      }
    }
  }
  return result;
}

pthread_mutex_t *sub_2160CB3B8(pthread_mutex_t *result)
{
  pthread_mutex_t *v1;
  uint64_t v2;
  char *v3;
  _DWORD *v4;
  int v5;

  if (SHIDWORD(result->__sig) >= 1)
  {
    v1 = result;
    v2 = 0;
    do
    {
      sub_2160EC880(*(pthread_mutex_t **)&v1->__opaque[8]);
      v3 = (char *)v1 + 147616 * v2;
      v5 = *((_DWORD *)v3 + 8);
      v4 = v3 + 32;
      if (v5)
      {
        do
        {
          if (v2 == LODWORD(v1->__sig))
            break;
          sub_2160EC918(*(pthread_cond_t **)&v1->__opaque[16], *(pthread_mutex_t **)&v1->__opaque[8]);
        }
        while (*v4);
      }
      result = sub_2160EC88C(*(pthread_mutex_t **)&v1->__opaque[8]);
      ++v2;
    }
    while (v2 < SHIDWORD(v1->__sig));
  }
  return result;
}

uint64_t sub_2160CB43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = **(_QWORD **)(a1 + 56);
  v12 = 0;
  result = sub_2160AC8EC((unsigned int *)(a4 + 4723776), *(_DWORD *)(a4 + 4870356), &v12);
  if (!(_DWORD)result)
  {
    v8 = (_QWORD *)(a4 + 5039776);
    v9 = a4 + 5016960;
    v10 = *(_QWORD *)(a1 + 88);
    if (*(_BYTE *)(v10 + 1372))
    {
      v8[108] = v10;
      v10 = *(_QWORD *)(a1 + 88);
    }
    if (*(_DWORD *)(*v8 + 44))
    {
      result = sub_2160AE5BC(v6 + 1428092, *(_DWORD *)(v6 + 1425572), v12, v9, v10);
      if ((_DWORD)result)
        return result;
      v10 = *(_QWORD *)(a1 + 88);
    }
    v11 = *(_QWORD *)(v10 + 1352);
    *(_BYTE *)(v10 + 1376) = 1;
    if (v11 && *(_BYTE *)(v11 + 36))
      *(_BYTE *)(v11 + 1376) = 1;
    if (*(_BYTE *)(v6 + 1428253))
      *(_DWORD *)(*v8 + 40) = 0;
    return sub_2160AE470(v9);
  }
  return result;
}

uint64_t sub_2160CB530(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (uint64_t *)(result + 147016);
  v2 = *(unsigned int *)(result + 147568);
  v3 = *(unsigned int *)(result + 147572);
  if ((int)v2 >= 1)
  {
    v4 = (uint64_t *)(result + 146744);
    do
    {
      v5 = *v4++;
      result = sub_2160ECB04((unsigned int *)(v5 + 8));
      --v2;
    }
    while (v2);
  }
  if ((int)v3 >= 1)
  {
    do
    {
      v6 = *v1++;
      result = sub_2160ECB04((unsigned int *)(v6 + 8));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2160CB5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_215FD01E0();
  sub_215FD0F88();
  v2 = nullsub_1(v0, v1);
  nullsub_1(v2, v3);
  sub_215FD1080();
  sub_215FD1098();
  sub_215FD10D8();
  nullsub_1(v4, v5);
  sub_215FD11AC();
  return nullsub_1(v6, v7);
}

void *sub_2160CB5D4(size_t size)
{
  return malloc_type_calloc(1uLL, size, 0x374B7B4AuLL);
}

void *sub_2160CB5E8(size_t a1)
{
  return malloc_type_calloc(a1, 1uLL, 0xC38027E5uLL);
}

void *sub_2160CB5FC(void *size)
{
  if (size)
    return malloc_type_calloc(1uLL, (size_t)size, 0x9AB1E655uLL);
  return size;
}

void *sub_2160CB618(uint64_t a1)
{
  return malloc_type_calloc((unint64_t)(a1 + qword_254E2EA40 - 1) >> qword_254E2EA48, qword_254E2EA40, 0x2E47E086uLL);
}

uint64_t sub_2160CB640(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  v1 = malloc_type_malloc(qword_254E2EA40 + a1, 0x138A1FD7uLL);
  if (!v1)
    return 0;
  v2 = ((unint64_t)v1 + qword_254E2EA40) & -qword_254E2EA40;
  *(_DWORD *)(v2 - 4) = v2 - (_DWORD)v1;
  return v2;
}

void sub_2160CB698(uint64_t a1)
{
  if (a1)
    free((void *)(a1 - *(int *)(a1 - 4)));
}

uint64_t sub_2160CB6AC()
{
  uint64_t result;
  void (*v1)(void *, int);
  uint64_t v2;
  uint64_t (*v3)();
  size_t v4;
  uint64_t v5;
  char v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  strcpy(v6, "hw.cachelinesize");
  v4 = 8;
  v5 = 0;
  result = sysctlbyname(v6, &v5, &v4, 0, 0);
  qword_254E2EA40 = v5;
  qword_254E2EA50 = v5 - 1;
  switch((_DWORD)v5)
  {
    case 0x20:
      v1 = sub_2160CB7B0;
      v2 = 5;
      break;
    case 0x80:
      v1 = sub_2160CB7BC;
      v2 = 7;
      v3 = nullsub_3;
      goto LABEL_8;
    case 0x40:
      v1 = sub_2160CB7B0;
      v2 = 6;
      break;
    default:
      return result;
  }
  v3 = nullsub_2;
LABEL_8:
  qword_254E2EA58 = (uint64_t)v3;
  off_254E2EA60 = v1;
  qword_254E2EA48 = v2;
  return result;
}

void sub_2160CB7B0(void *a1, int a2)
{
  bzero(a1, (32 * a2));
}

void sub_2160CB7BC(void *a1, int a2)
{
  bzero(a1, (32 * a2));
}

__n128 sub_2160CB7C4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 result;
  __int8 *v45;

  v5 = *(_DWORD *)(a4 + 16);
  v6 = 2 * *(_DWORD *)(a4 + 20);
  v7 = *(__n128 **)(a4 + 176);
  *(_QWORD *)(a4 + 168) = 0;
  if ((v5 & 1) == 0)
  {
    v8 = v5 > a1 && a5 > 1;
    v9 = v8 << 63 >> 63;
    v10 = v6 + a1;
    if (v5 < v6 + a1)
      v11 = 0;
    else
      v11 = -1;
    v13 = v6 - 2 > a5 && v5 >= v10 - 2;
    v14 = v13 << 63 >> 63;
    v15 = v5 >= v10 + 2 && a5 > 1;
    v16 = v15 << 63 >> 63;
    v17 = *(_BYTE *)(a4 + 31);
    if (v17)
    {
      v18 = 0;
    }
    else
    {
      if ((v9 & 1) != 0)
      {
        v26 = a3 + 400 * (a5 - 2);
      }
      else
      {
        if (v5 < v10)
        {
          v18 = 1;
          v17 = 1;
          goto LABEL_58;
        }
        v26 = a2 + 400 * a5;
      }
      v18 = *(_BYTE *)(v26 + 144) + 1;
      v17 = v18;
    }
LABEL_58:
    v35 = a5;
    v36 = a5 + 1;
    if (v17 == 2)
      v37 = a5;
    else
      v37 = a5 + 1;
    v38 = a3 + 400 * a5 - 800;
    v39 = a2 + 400 * v37;
    v40 = v39 - 800;
    if (a5)
    {
      v6 = a5;
      v41 = a3;
    }
    else
    {
      v41 = a2;
    }
    *(_BYTE *)(a4 + 32) = v18;
    v42 = v41 + 400 * (v6 - 1);
    if (v5 <= a1)
      v43 = 0;
    else
      v43 = v42;
    *(_BYTE *)(a4 + 30) = 0;
    *(_QWORD *)(a4 + 128) = v9 & v38;
    *(_QWORD *)(a4 + 136) = v39 & v11;
    *(_QWORD *)(a4 + 144) = (v39 + 800) & v14;
    *(_QWORD *)(a4 + 152) = v40 & v16;
    *(_QWORD *)(a4 + 160) = v43;
    if (v17 == 2 && v5 >= v10 && !*(_BYTE *)((v39 & v11) + 0x90))
      *(_QWORD *)(a4 + 136) = v11 & (a2 + 400 * v36);
    *(_QWORD *)(a4 + 168) = v9 & (a3 + 400 * (v35 - 1));
    if (v17 == 2 && (v16 & 1) != 0 && !*(_BYTE *)((v40 & v16) + 0x90))
      *(_QWORD *)(a4 + 152) = v16 & (a2 + 400 * (v35 - 1));
    if (v17 == 2 && (v14 & 1) != 0 && !*(_BYTE *)(((v39 + 800) & v14) + 0x90))
      *(_QWORD *)(a4 + 144) = v14 & (a2 + 400 * (int)v35 + 1200);
    goto LABEL_79;
  }
  v20 = a5 > 2 && v5 > a1 + 2;
  v21 = v20 << 63 >> 63;
  v22 = a3 + 400 * a5;
  v23 = v21 & (v22 - 800);
  *(_QWORD *)(a4 + 128) = v23;
  v24 = v22 - 400;
  *(_QWORD *)(a4 + 160) = v24;
  v25 = *(unsigned __int8 *)(a4 + 31);
  if (*(_BYTE *)(a4 + 31))
    *(_BYTE *)(a4 + 32) = 0;
  else
    v25 = *(unsigned __int8 *)(a4 + 32);
  *(_BYTE *)(a4 + 30) = v25 == 2;
  if (v25 == 2)
  {
    v27 = v6 + a1;
    v28 = v6 - 2;
    if (v5 >= v27)
      v29 = a2 + 400 * a5;
    else
      v29 = 0;
    v30 = v5 < v27 - 2 || v28 <= a5;
    v31 = a2 + 400 * a5 + 800;
    if (v30)
      v31 = 0;
    v32 = v5 < v27 + 2 || a5 <= 1;
    *(_QWORD *)(a4 + 136) = v29;
    *(_QWORD *)(a4 + 144) = v31;
    v33 = a2 + 400 * (a5 - 2);
    if (v32)
      v33 = 0;
    *(_QWORD *)(a4 + 152) = v33;
    if ((v21 & 1) != 0 && !*(_BYTE *)(v23 + 144))
    {
      v34 = v21 & (a3 + 400 * (a5 - 3));
LABEL_53:
      *(_QWORD *)(a4 + 128) = v34;
      *(_QWORD *)(a4 + 168) = v23;
    }
  }
  else
  {
    *(_QWORD *)(a4 + 136) = v24;
    *(_QWORD *)(a4 + 144) = 0;
    v34 = v21 & (a3 + 400 * a5 - 1200);
    *(_QWORD *)(a4 + 152) = v34;
    if ((v21 & 1) != 0)
    {
      if (*(_BYTE *)((v21 & (a3 + 400 * a5 - 1200)) + 0x90) == 1)
        *(_QWORD *)(a4 + 152) = v23;
      if (*(_BYTE *)(v23 + 144) == 1)
        goto LABEL_53;
    }
  }
LABEL_79:
  v7[5].n128_u64[0] = 0;
  v7[5].n128_u64[1] = 0;
  v7[6].n128_u64[0] = 0;
  result.n128_u64[0] = 0x2222222222222222;
  result.n128_u64[1] = 0x2222222222222222;
  v7[2] = result;
  v7[3] = result;
  if ((*(_BYTE *)(a4 + 188) & 1) != 0 && !*(_BYTE *)(a4 + 189))
  {
    v7[7].n128_u8[8] = 0;
    v45 = &v7[7].n128_i8[8];
    *(_DWORD *)(v45 + 1) = -1;
    v45[5] = -1;
    *((_DWORD *)v45 + 52) = 0;
    v45[23] = 0;
    *((_OWORD *)v45 + 2) = 0u;
    *((_OWORD *)v45 + 3) = 0u;
    *((_OWORD *)v45 + 4) = 0u;
    *((_OWORD *)v45 + 5) = 0u;
    *((_OWORD *)v45 + 6) = 0u;
    *((_OWORD *)v45 + 7) = 0u;
    *((_OWORD *)v45 + 8) = 0u;
    *((_OWORD *)v45 + 9) = 0u;
    *((_QWORD *)v45 + 20) = 0;
    result.n128_u64[0] = 0x2020202020202020;
    result.n128_u64[1] = 0x2020202020202020;
    *(__n128 *)(v45 + 168) = result;
    *(__n128 *)(v45 + 184) = result;
    *((_QWORD *)v45 + 25) = 0;
  }
  return result;
}

uint64_t sub_2160CBAE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(a4 + 16) >= (int)result + 2 * *(_DWORD *)(a4 + 20))
    v6 = a2 + 400 * a5;
  else
    v6 = 0;
  if (v6)
    v7 = v6 + 120;
  else
    v7 = 0;
  *(_QWORD *)(a6 + 8) = v7;
  return result;
}

__n128 sub_2160CBB14(int a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  __int8 *v21;

  v5 = a4[4];
  v4 = a4[5];
  v6 = *a4;
  v7 = *a4 > 0;
  v8 = v4 - 1;
  v9 = *a4 - 1;
  v10 = a3 + 400 * v9;
  v11 = a2 + 400 * (v4 - 1);
  if (v5 <= a1)
    v11 = 0;
  if (v5 <= a1 || !v7)
    v10 = 0;
  v12 = (__n128 *)*((_QWORD *)a4 + 22);
  v13 = v4 + a1;
  if (v6)
    v11 = v10;
  v14 = v13 - 1;
  v17 = v5 < v13;
  v15 = v5 > v13;
  v16 = a2 + 400 * v6;
  if (v17)
    v16 = 0;
  v17 = v5 >= v14 && v6 < v8;
  *((_QWORD *)a4 + 16) = v10;
  *((_QWORD *)a4 + 17) = v16;
  v18 = a2 + 400 * (v6 + 1);
  if (!v17)
    v18 = 0;
  if (v15 && v7)
    v19 = a2 + 400 * v9;
  else
    v19 = 0;
  *((_QWORD *)a4 + 18) = v18;
  *((_QWORD *)a4 + 19) = v19;
  *((_QWORD *)a4 + 20) = v11;
  *((_QWORD *)a4 + 21) = 0;
  v12[5].n128_u64[0] = 0;
  v12[5].n128_u64[1] = 0;
  v12[6].n128_u64[0] = 0;
  result.n128_u64[0] = 0x2222222222222222;
  result.n128_u64[1] = 0x2222222222222222;
  v12[2] = result;
  v12[3] = result;
  if ((a4[47] & 1) != 0 && !*((_BYTE *)a4 + 189))
  {
    v12[7].n128_u8[8] = 0;
    v21 = &v12[7].n128_i8[8];
    *(_DWORD *)(v21 + 1) = -1;
    v21[5] = -1;
    *((_DWORD *)v21 + 52) = 0;
    v21[23] = 0;
    *((_OWORD *)v21 + 2) = 0u;
    *((_OWORD *)v21 + 3) = 0u;
    *((_OWORD *)v21 + 4) = 0u;
    *((_OWORD *)v21 + 5) = 0u;
    *((_OWORD *)v21 + 6) = 0u;
    *((_OWORD *)v21 + 7) = 0u;
    *((_OWORD *)v21 + 8) = 0u;
    *((_OWORD *)v21 + 9) = 0u;
    *((_QWORD *)v21 + 20) = 0;
    result.n128_u64[0] = 0x2020202020202020;
    result.n128_u64[1] = 0x2020202020202020;
    *(__n128 *)(v21 + 168) = result;
    *(__n128 *)(v21 + 184) = result;
    *((_QWORD *)v21 + 25) = 0;
  }
  return result;
}

char *sub_2160CBC00(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v7 + 272))
  {
    result = sub_215FD9BFC(v5 + 1152, v4, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), a2, *(_WORD **)(v6 + 112), *(unsigned __int8 *)(v7 + 272), **(_QWORD **)(a1 + 336), *(_BYTE *)(a1 + 31));
  }
  else if (*(_DWORD *)(v5 + 1164) <= (int)v4)
  {
    result = 0;
  }
  else
  {
    result = *(char **)(v5 + 8 * *(unsigned __int8 *)(a1 + 31) + 1232);
    *(_QWORD *)(*(_QWORD *)(v5 + 1256) + 8 * v4) = result;
  }
  *(_QWORD *)(v6 + 112) = result;
  if (*(_BYTE *)(a1 + 188))
    *(_QWORD *)(v6 + 320) = result;
  return result;
}

char *sub_2160CBC9C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v7 + 272))
  {
    result = sub_215FD9BFC(v5 + 1152, v4, *(_DWORD *)a1, *(_DWORD *)(a1 + 12), a2, *(_WORD **)(v6 + 112), *(unsigned __int8 *)(v7 + 272), **(_QWORD **)(a1 + 336), *(_BYTE *)(a1 + 31));
  }
  else if (*(_DWORD *)(v5 + 1164) <= (int)v4)
  {
    result = 0;
  }
  else
  {
    result = *(char **)(v5 + 8 * *(unsigned __int8 *)(a1 + 31) + 1232);
    *(_QWORD *)(*(_QWORD *)(v5 + 1256) + 8 * v4) = result;
  }
  *(_QWORD *)(v6 + 112) = result;
  if (*(_BYTE *)(a1 + 188))
    *(_QWORD *)(v6 + 320) = result;
  return result;
}

uint64_t sub_2160CBD3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  a5[5] = result;
  a5[6] = a2;
  a5[22] = a3;
  a5[7] = a4;
  return result;
}

uint64_t sub_2160CBD4C(unint64_t a1, _DWORD *a2, double a3, int8x16_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(a1 + 40);
  *a2 = 0;
  if (*(_BYTE *)(v9 + 52))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 3))
      sub_2160A9190(a1, *(_OWORD **)(a1 + 64), a1 + 1423424, a3, a4, a5, a6, a7, a8);
    else
      sub_2160A5C40(a1, *(_OWORD **)(a1 + 64));
    *a2 = 1;
  }
  if (*(_BYTE *)(v9 + 53))
    v11 = sub_2160AA18C(a1, (_OWORD *)(*(_QWORD *)(a1 + 64) + 512));
  else
    v11 = 0;
  v12 = *(_QWORD *)(a1 + 48);
  if (!*(_DWORD *)(v12 + 356) && !*(_DWORD *)(v12 + 360))
    return sub_215FE7B60(a1);
  sub_2160221B4(a1);
  return v11;
}

uint64_t sub_2160CBE38(uint64_t a1, double a2, int8x16_t a3, double a4, double a5, double a6, int8x16_t a7)
{
  _BYTE *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;

  v8 = *(_BYTE **)(a1 + 40);
  if (v8[52])
  {
    if (v8[3])
    {
      v9 = a1 + 1423424;
      v10 = *(_OWORD **)(a1 + 64);
      if (*(_BYTE *)(a1 + 31))
        sub_2160A3034(a1, v10, v9);
      else
        sub_2160A9990(a1, v10, v9, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      v12 = *(_OWORD **)(a1 + 64);
      if (*(_BYTE *)(a1 + 31))
        sub_2160A0064(a1, v12);
      else
        sub_2160A8DBC(a1, v12);
    }
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  if (v8[53])
    sub_2160AA24C(a1, (_OWORD *)(*(_QWORD *)(a1 + 64) + 512));
  if (*(_BYTE *)(a1 + 31))
  {
    sub_215FDB200();
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(v13 + 356) || *(_DWORD *)(v13 + 360))
      sub_2160150BC(a1);
    else
      sub_21600941C(a1);
  }
  return v11;
}

uint64_t sub_2160CBF40(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 31))
    return sub_215FDA9B4();
  v2 = *(_QWORD *)(a1 + 48);
  if (!*(_DWORD *)(v2 + 356) && !*(_DWORD *)(v2 + 360))
    return sub_215FE7B60(a1);
  sub_2160221B4(a1);
  return 0;
}

uint64_t sub_2160CBF9C(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 31))
  {
    sub_215FDB200();
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(v1 + 356) || *(_DWORD *)(v1 + 360))
      sub_2160150BC(a1);
    else
      sub_21600941C(a1);
  }
  return 0;
}

uint64_t sub_2160CBFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  int v26;
  uint64_t v27;
  uint64_t j;
  _BYTE *v29;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 216);
  v3 = *(_DWORD *)(a1 + 4);
  v4 = (16 * *(_DWORD *)a1);
  v5 = *(_QWORD *)(v2 + 64) + v4;
  v6 = 16 * v3;
  v7 = *(unsigned int *)(v2 + 168);
  v8 = 8 * v3;
  v9 = *(_DWORD *)(v2 + 184);
  if (*(_BYTE *)(a1 + 29) && *(_BYTE *)(v2 + 1363))
  {
    v10 = 2 * v7;
    v11 = 2 * v9;
    v12 = *(unsigned __int8 *)(a1 + 30);
    v13 = *(unsigned __int8 *)(v2 + 32);
    v14 = (32 * v3 * v7);
    if (!*(_BYTE *)(v2 + 32))
      v14 = (v7 * v6);
    v15 = v5 + v14;
    if (v12)
    {
      v15 += v7;
      v16 = *(_QWORD *)(v2 + 72) + v4;
      if (v13)
        v17 = v6;
      else
        v17 = v8;
      v18 = v16 + v9 * v17;
      v19 = v9;
    }
    else
    {
      v18 = *(_QWORD *)(v2 + 72) + v4;
      v20 = v9 * v8;
      v21 = v9 * v6;
      if (v13)
        v19 = v21;
      else
        v19 = v20;
    }
    v9 = v11;
  }
  else
  {
    v15 = v5 + (v7 * 16 * v3);
    v18 = *(_QWORD *)(v2 + 72) + v4;
    v19 = v9 * v8;
    v10 = v7;
  }
  v22 = 0;
  v23 = v18 + v19;
  v24 = v1 + 32;
  do
  {
    for (i = 0; i != 16; ++i)
      *(_BYTE *)(v15 + i) = *(_WORD *)(v24 + 2 * i);
    v15 += v10;
    v24 += 32;
    ++v22;
  }
  while (v22 != 16);
  v26 = 0;
  v27 = v1 + 544;
  do
  {
    for (j = 0; j != 16; j += 2)
    {
      v29 = (_BYTE *)(v23 + j);
      *v29 = *(_BYTE *)(v27 + j);
      v29[1] = *(_BYTE *)(v27 + j + 128);
    }
    v23 += v9;
    v27 += 16;
    ++v26;
  }
  while (v26 != 8);
  return 0;
}

uint64_t sub_2160CC140(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  int v26;
  uint64_t v27;
  uint64_t j;
  _BYTE *v29;

  v2 = *(unsigned __int8 **)(a2 + 72);
  v3 = *(_DWORD *)(a1 + 828);
  v4 = (16 * *(_DWORD *)(a1 + 824));
  v5 = *((_QWORD *)v2 + 4) + v4;
  v6 = 16 * v3;
  v7 = *((unsigned int *)v2 + 34);
  v8 = 8 * v3;
  v9 = *((_DWORD *)v2 + 38);
  if (*(_BYTE *)(a2 + 20) && *(_BYTE *)(a2 + 22))
  {
    v10 = 2 * v7;
    v11 = 2 * v9;
    v12 = *(unsigned __int8 *)(a2 + 21);
    v13 = *v2;
    v14 = (32 * v3 * v7);
    if (!*v2)
      v14 = (v7 * v6);
    v15 = v5 + v14;
    if (v12)
    {
      v15 += v7;
      v16 = *((_QWORD *)v2 + 5) + v4;
      if (v13)
        v17 = v6;
      else
        v17 = v8;
      v18 = v16 + v9 * v17;
      v19 = v9;
    }
    else
    {
      v18 = *((_QWORD *)v2 + 5) + v4;
      v20 = v9 * v8;
      v21 = v9 * v6;
      if (v13)
        v19 = v21;
      else
        v19 = v20;
    }
    v9 = v11;
  }
  else
  {
    v15 = v5 + (v7 * 16 * v3);
    v18 = *((_QWORD *)v2 + 5) + v4;
    v19 = v9 * v8;
    v10 = v7;
  }
  v22 = 0;
  v23 = v18 + v19;
  v24 = a1 + 32;
  do
  {
    for (i = 0; i != 16; ++i)
      *(_BYTE *)(v15 + i) = *(_WORD *)(v24 + 2 * i);
    v15 += v10;
    v24 += 32;
    ++v22;
  }
  while (v22 != 16);
  v26 = 0;
  v27 = a1 + 544;
  do
  {
    for (j = 0; j != 16; j += 2)
    {
      v29 = (_BYTE *)(v23 + j);
      *v29 = *(_BYTE *)(v27 + j);
      v29[1] = *(_BYTE *)(v27 + j + 128);
    }
    v23 += v9;
    v27 += 16;
    ++v26;
  }
  while (v26 != 8);
  return 0;
}

uint64_t sub_2160CC288(unsigned int a1, int a2, int a3, uint64_t a4)
{
  _OWORD *v4;
  __int16 v5;
  unsigned int v6;
  uint64_t result;
  int v8;
  unsigned __int8 *v9;
  _BOOL4 v11;
  int v12;
  _DWORD *v13;
  _BYTE *v14;
  int v15;
  char *v16;
  int v17;
  __int16 v18;

  if (a1 != 3 || a2)
  {
    v6 = 1;
    switch(a1)
    {
      case 0u:
        if (a2 <= 25)
          goto LABEL_14;
        return 4294958327;
      case 1u:
        if (a2 > 0)
          return 4294958327;
LABEL_14:
        *(_BYTE *)(a4 + 272) = 0;
LABEL_15:
        if (a2 | a1 || a3)
        {
          if (a2 | a1 || a3 != 1)
          {
            result = 0;
            v8 = 2;
          }
          else
          {
            result = 0;
            v8 = 7;
          }
        }
        else
        {
          result = 0;
          v8 = 1;
        }
        *(_BYTE *)(a4 + 31) = v8;
        goto LABEL_10;
      case 2u:
        if (a2 > 4)
          return 4294958327;
        v9 = (unsigned __int8 *)&unk_2160F770A;
        goto LABEL_22;
      case 3u:
        if (a2 > 22)
          return 4294958327;
        v9 = (unsigned __int8 *)&unk_2160F7748;
LABEL_22:
        v6 = v9[a2];
LABEL_24:
        *(_BYTE *)(a4 + 272) = v6;
LABEL_25:
        v11 = a1 == 4 && a2 == 0;
        if (a1 == 2 || v11)
        {
          v15 = byte_2160F7700[a2];
          *(_BYTE *)(a4 + 31) = v15;
          v14 = (_BYTE *)(a4 + 31);
          *(_BYTE *)(a4 + 47) = byte_2160F7705[a2];
          if ((a2 - 3) <= 1)
          {
            *(_DWORD *)(a4 + 8) = v15;
            v13 = (_DWORD *)(a4 + 8);
            *(_BYTE *)(a4 + 63) = 0;
            *(_BYTE *)(a4 + 79) = 0;
LABEL_40:
            if (v6 > 3)
              goto LABEL_51;
            if (a1 == 2)
            {
              v16 = (char *)&unk_2160F7710 + 2 * a2;
              goto LABEL_48;
            }
            if (a1 != 3)
            {
LABEL_51:
              result = 0;
              *v14 = 0;
              *v13 = 0;
              return result;
            }
LABEL_47:
            v16 = (char *)&unk_2160F7760 + 2 * a2;
LABEL_48:
            v17 = *(unsigned __int16 *)v16;
            if (v17 == 2064)
            {
              if (v6 == 2)
              {
                result = 0;
                v18 = 258;
                goto LABEL_56;
              }
            }
            else
            {
              if (v17 == 4112)
              {
                result = 0;
                v18 = 256;
LABEL_56:
                *(_WORD *)(a4 + 26) = v18;
                return result;
              }
              if (v6 == 2)
              {
                result = 0;
                v18 = 257;
                goto LABEL_56;
              }
            }
            return 4294958327;
          }
        }
        else
        {
          if (a1 == 3)
          {
            v12 = byte_2160F771A[a2];
            *(_DWORD *)(a4 + 8) = v12;
            v13 = (_DWORD *)(a4 + 8);
            *(_BYTE *)(a4 + 31) = v12;
            v14 = (_BYTE *)(a4 + 31);
            *(_BYTE *)(a4 + 47) = byte_2160F7731[a2];
            if (v6 >= 4)
              goto LABEL_51;
            goto LABEL_47;
          }
          v15 = *(unsigned __int8 *)(a4 + 31);
        }
        *(_DWORD *)(a4 + 8) = v15;
        v13 = (_DWORD *)(a4 + 8);
        v14 = (_BYTE *)(a4 + 31);
        goto LABEL_40;
      case 4u:
        goto LABEL_24;
      case 5u:
        v6 = 16;
        goto LABEL_24;
      default:
        v6 = 0;
        *(_BYTE *)(a4 + 272) = 0;
        if (a1 > 1)
          goto LABEL_25;
        goto LABEL_15;
    }
  }
  v4 = (_OWORD *)(a4 + 48);
  if (*(_BYTE *)a4)
  {
    v5 = 0;
    *(_BYTE *)(a4 + 272) = 4;
    *(_OWORD *)(a4 + 16) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 32) = xmmword_2160F76C0;
  }
  else
  {
    *(_BYTE *)(a4 + 272) = 16;
    *(_OWORD *)(a4 + 16) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 32) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 48) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 80) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 96) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 112) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 128) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 144) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 160) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 176) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 192) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 208) = xmmword_2160F76C0;
    *(_OWORD *)(a4 + 224) = xmmword_2160F76C0;
    v4 = (_OWORD *)(a4 + 256);
    v5 = 255;
    *(_OWORD *)(a4 + 240) = xmmword_2160F76C0;
  }
  result = 0;
  *v4 = xmmword_2160F76C0;
  *(_OWORD *)(a4 + 64) = xmmword_2160F76C0;
  *(_WORD *)(a4 + 26) = v5;
  v8 = 3;
LABEL_10:
  *(_DWORD *)(a4 + 8) = v8;
  return result;
}

uint64_t sub_2160CC524(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  __int16 v6;
  _OWORD *v7;

  v1 = *(unsigned __int8 *)(a1 + 28);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (v1 <= 8)
  {
    v4 = 1 << v1;
    if ((v4 & 0x129) != 0)
    {
      v5 = 4;
      *(_WORD *)(v2 + 1) = 4;
      *(_BYTE *)(v3 + 272) = 1;
      *(_BYTE *)(v3 + 31) = 4;
      *(_DWORD *)(v3 + 16) = 0;
      v6 = 256;
      *(_WORD *)(v3 + 24) = 0x2000;
LABEL_9:
      *(_WORD *)(v3 + 26) = v6;
      *(_DWORD *)(v3 + 8) = v5;
      goto LABEL_10;
    }
    if ((v4 & 0x42) != 0)
    {
      *(_WORD *)(v2 + 1) = 5;
      v7 = (_OWORD *)(v3 + 48);
      if (*(_BYTE *)v3)
      {
        v6 = 0;
        *(_BYTE *)(v3 + 272) = 4;
        *(_OWORD *)(v3 + 16) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 32) = xmmword_2160F76C0;
      }
      else
      {
        *(_BYTE *)(v3 + 272) = 16;
        *(_OWORD *)(v3 + 16) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 32) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 48) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 80) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 96) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 112) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 128) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 144) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 160) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 176) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 192) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 208) = xmmword_2160F76C0;
        *(_OWORD *)(v3 + 224) = xmmword_2160F76C0;
        v7 = (_OWORD *)(v3 + 256);
        v6 = 255;
        *(_OWORD *)(v3 + 240) = xmmword_2160F76C0;
      }
      *v7 = xmmword_2160F76C0;
      *(_OWORD *)(v3 + 64) = xmmword_2160F76C0;
      v5 = 3;
      goto LABEL_9;
    }
  }
LABEL_10:
  *(_BYTE *)(v2 + 3) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8) = *(unsigned __int8 *)(v3 + 31);
  return 0;
}

uint64_t sub_2160CC60C(int a1, unsigned int a2, char *a3, _BYTE *a4)
{
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;

  v4 = 0;
  switch(a1)
  {
    case 0:
    case 3:
    case 5:
    case 8:
      v5 = a2 - 5;
      v4 = 2 * (a2 < 5);
      v6 = a2 > 4;
      goto LABEL_6;
    case 1:
    case 6:
      v5 = a2 - 23;
      v6 = a2 > 0x16;
      if (a2 <= 0x16)
        v4 = 3;
      else
        v4 = 0;
LABEL_6:
      if (v6)
        LOBYTE(a2) = v5;
      goto LABEL_12;
    case 2:
    case 7:
      goto LABEL_12;
    case 4:
    case 9:
      v4 = a2 == 0;
      if (a2)
        LOBYTE(a2) = a2 - 1;
      else
        LOBYTE(a2) = 0;
LABEL_12:
      result = 0;
      *a3 = v4;
      *a4 = a2;
      break;
    default:
      result = 4294958327;
      break;
  }
  return result;
}

uint64_t sub_2160CC688(unsigned int a1, int a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int16 *v12;
  int v13;
  __int16 v14;

  if (a1 == 3 && !a2)
  {
    if (a5)
      return sub_215FCFFAC(a4);
    else
      return sub_215FD0104(a4);
  }
  switch((char)a1)
  {
    case 0:
      if (a2 <= 0x19u)
        goto LABEL_10;
      return 4294958327;
    case 1:
      if (!(_BYTE)a2)
        goto LABEL_10;
      return 4294958327;
    case 2:
      v10 = a2;
      if (a2 > 4u)
        return 4294958327;
      v11 = (unsigned __int8 *)&unk_2160F770A;
      goto LABEL_18;
    case 3:
      v10 = a2;
      if (a2 > 0x16u)
        return 4294958327;
      v11 = (unsigned __int8 *)&unk_2160F7748;
LABEL_18:
      v9 = v11[v10];
      break;
    case 4:
      v9 = 1;
      break;
    case 5:
      v9 = 16;
      break;
    default:
LABEL_10:
      v9 = 0;
      break;
  }
  *(_BYTE *)(a4 + 272) = v9;
  result = sub_2160CC834(a1, a2, a3, (_BYTE *)(a4 + 16));
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a4 + 8) = *(unsigned __int8 *)(a4 + 31);
    if (a1 < 2)
      return 0;
    if (v9 <= 3)
    {
      if (a1 == 2)
      {
        v12 = (unsigned __int16 *)&unk_2160F7710;
        goto LABEL_27;
      }
      if (a1 == 3)
      {
        v12 = (unsigned __int16 *)&unk_2160F7760;
LABEL_27:
        v13 = v12[a2];
        if (v13 == 2064)
        {
          if (v9 == 2)
          {
            result = 0;
            v14 = 258;
            goto LABEL_35;
          }
        }
        else
        {
          if (v13 == 4112)
          {
            result = 0;
            v14 = 256;
LABEL_35:
            *(_WORD *)(a4 + 26) = v14;
            return result;
          }
          if (v9 == 2)
          {
            result = 0;
            v14 = 257;
            goto LABEL_35;
          }
        }
        return 4294958327;
      }
    }
    result = 0;
    *(_BYTE *)(a4 + 31) = 0;
    *(_DWORD *)(a4 + 8) = 0;
  }
  return result;
}

uint64_t sub_2160CC834(unsigned int a1, unsigned int a2, int a3, _BYTE *a4)
{
  uint64_t result;
  char v6;

  if (!a4)
    return 4294958327;
  if (a1 <= 1)
  {
    if (a2 <= 0x19)
    {
      if (a2 | a1 | a3)
      {
        if (a2 | a1 || a3 != 1)
        {
          result = 0;
          v6 = 2;
        }
        else
        {
          result = 0;
          v6 = 7;
        }
      }
      else
      {
        result = 0;
        v6 = 1;
      }
      a4[15] = v6;
      return result;
    }
    return 4294958327;
  }
  if (a1 == 2)
  {
    if (a2 > 4)
      return 4294958327;
LABEL_13:
    a4[15] = byte_2160F7700[a2];
    a4[31] = byte_2160F7705[a2];
    if (a2 - 3 > 1)
      return 0;
    result = 0;
    a4[47] = 0;
    a4[63] = 0;
    return result;
  }
  if (a1 == 4 && !a2)
    goto LABEL_13;
  result = 4294958327;
  if (a1 == 3 && a2 <= 0x16)
  {
    result = 0;
    a4[15] = byte_2160F771A[a2];
    a4[31] = byte_2160F7731[a2];
  }
  return result;
}

uint64_t sub_2160CC930(int a1, unsigned int a2, unsigned int a3, _BYTE *a4, char *a5, int a6, int a7)
{
  char v7;
  unsigned int v8;
  uint64_t result;
  BOOL v10;

  *a4 = 0;
  *a5 = 0;
  if (a1 || !a2 || a2 == 25)
  {
    v7 = a3 & 0xF;
    v8 = a3 >> 4;
  }
  else
  {
    v8 = ((a2 + 1011) >> 2);
    if (a2 > 0xC)
    {
      v7 = 15;
    }
    else
    {
      v8 = ((a2 - 1) >> 2);
      v7 = 0;
    }
  }
  if (a6 != 3)
  {
    if (a6 == 1 || v8 <= 2)
      goto LABEL_10;
    return 4294958327;
  }
  if (!a7 && v8 >= 3)
    return 4294958327;
LABEL_10:
  v10 = a6 == 1 || a6 == 3;
  *a5 = v7;
  if (v10 && !a7 || (a6 | 2) != 3)
    *a4 = v8;
  result = 0;
  if (a6)
  {
    if (a7)
    {
      result = 0;
      *a4 = 0;
    }
  }
  return result;
}

uint64_t sub_2160CC9E0(int a1, int a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, int a7, int a8)
{
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;

  if (a7 < 1)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = a7;
    v10 = a5;
    do
    {
      v11 = *v10++;
      v8 += v11;
      --v9;
    }
    while (v9);
  }
  if (a7 <= a8)
  {
    v14 = a7;
    v15 = a8 + 1;
    v12 = v8;
    while (1)
    {
      v16 = *(unsigned __int8 *)(a3 + 4 * v14);
      if (a2 != 2)
        break;
      if ((v16 & 0xFC) != 0)
        return 4294958327;
      *(_DWORD *)(a4 + 4 * v14) = 4;
      v17 = byte_2160F77C1[v16];
      a5[v14] = v17;
      v18 = (unsigned __int8 *)&unk_2160F77C5 + v16;
      v19 = (char *)&unk_2160F77C9 + v16;
      if (v17)
        goto LABEL_21;
LABEL_47:
      v12 += v17;
      if (v15 == (_DWORD)++v14)
        goto LABEL_8;
    }
    if (v16 > 0xC)
      return 4294958327;
    *(_DWORD *)(a4 + 4 * v14) = byte_2160F77CD[v16];
    if (!a1 || (_DWORD)v16)
    {
      v17 = byte_2160F77DA[v16];
      a5[v14] = v17;
      v18 = (unsigned __int8 *)&unk_2160F77E7 + v16;
      v20 = (char *)&unk_2160F77F4;
    }
    else
    {
      v17 = byte_2160F7802[v16];
      a5[v14] = v17;
      v18 = (unsigned __int8 *)&unk_2160F780F + v16;
      v20 = (char *)&unk_2160F781C;
    }
    v19 = &v20[v16];
    if (!v17)
      goto LABEL_47;
LABEL_21:
    v21 = 0;
    v22 = 4 * v14;
    v23 = *v18;
    v24 = *v19;
    v25 = v23 == 8;
    v26 = v24 == 8 && v23 == 8;
    v27 = v23 == 4;
    v28 = v24 == 4;
    v29 = v24 == 4 && v27;
    v30 = v28 && v25;
    v31 = a6 + 16 * v8;
    v32 = v17;
    while (1)
    {
      if (v32 > 4)
        return 4294958327;
      *(_BYTE *)(v31 + 15) = *(_DWORD *)(a4 + 4 * v14);
      v33 = a5[v14];
      if (v26)
      {
        if (v33 != 1)
          return 4294958327;
        *(_WORD *)(a6 + 10) &= word_254E10E20[v22 >> 2];
        v22 += 4;
        if (*(_DWORD *)(a4 + 4 * v14) == 3)
          *(_QWORD *)v31 = 0;
      }
      else
      {
        if (v29)
        {
          if (v33 != 4)
            return 4294958327;
          v34 = *(_WORD *)(a6 + 10) & word_254E10E20[v22 >> 2];
          v35 = 3 << (2 * (v22 >> 2));
        }
        else
        {
          if (v30)
          {
            if (v33 != 2)
              return 4294958327;
            *(_WORD *)(a6 + 10) = (*(_WORD *)(a6 + 10) & word_254E10E20[v22 >> 2]) + (2 << (2 * (v22 >> 2)));
            v22 += 2;
            goto LABEL_45;
          }
          if (v33 != 2)
            return 4294958327;
          v34 = *(_WORD *)(a6 + 10) & word_254E10E20[v22 >> 2];
          v35 = 1 << (2 * (v22 >> 2));
        }
        *(_WORD *)(a6 + 10) = v34 + v35;
        ++v22;
      }
LABEL_45:
      ++v21;
      v32 = a5[v14];
      v31 += 16;
      if (v21 >= v32)
      {
        v8 += v21;
        goto LABEL_47;
      }
    }
  }
  v12 = v8;
LABEL_8:
  if (v12 > 16)
    return 4294958327;
  result = 0;
  *(_BYTE *)(a6 + 256) = v12;
  return result;
}

uint64_t sub_2160CCC80(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  _BYTE *v12;
  char v13;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 188);
  v3 = *(unsigned __int8 *)(a1 + 28);
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v3 <= 8)
  {
    v6 = 1 << v3;
    if ((v6 & 0x129) != 0)
    {
      *(_WORD *)(v5 + 1) = 4;
      *(_BYTE *)(v4 + 272) = 1;
      *(_BYTE *)(v4 + 31) = 4;
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 16785408;
      *(_DWORD *)(v4 + 8) = 4;
    }
    else if ((v6 & 0x42) != 0)
    {
      *(_WORD *)(v5 + 1) = 5;
      if (*(_BYTE *)(a1 + 31))
      {
        result = sub_215FCFFAC(v4);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        result = sub_215FD0104(v4);
        if ((_DWORD)result)
          return result;
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 176) + 126) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + 272);
  if (v2)
  {
    v7 = 0;
    v8 = *(_BYTE **)(a1 + 176);
    v8[120] = 1;
    v8[121] = *(_BYTE *)(v5 + 1);
    v8[122] = *(_BYTE *)(v5 + 2);
    v8[143] = 0;
    v9 = v8 + 226;
    v10 = v8 + 304;
    v11 = (char *)(v4 + 25);
    do
    {
      v12 = &v10[v7];
      *(v12 - 16) = *(v11 - 1);
      v13 = *v11;
      v11 += 16;
      *v12 = v13;
      *(_DWORD *)(v9 - 66) = 0;
      *(_DWORD *)(v9 - 2) = 0;
      ++v7;
      v9 += 4;
    }
    while (v7 != 16);
  }
  result = 0;
  *(_BYTE *)(v5 + 3) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8) = *(unsigned __int8 *)(v4 + 31);
  return result;
}

uint64_t sub_2160CCDB0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 1) = 4;
  *(_BYTE *)(a2 + 272) = 1;
  *(_BYTE *)(a2 + 31) = 4;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 16785408;
  *(_DWORD *)(a2 + 8) = 4;
  return 0;
}

uint64_t sub_2160CCDE0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  *(_WORD *)(a1 + 1) = 5;
  if (a3)
  {
    result = sub_215FCFFAC(a2);
    if ((_DWORD)result)
      return result;
    goto LABEL_3;
  }
  result = sub_215FD0104(a2);
  if (!(_DWORD)result)
LABEL_3:
    *(_DWORD *)(a2 + 8) = *(unsigned __int8 *)(a2 + 31);
  return result;
}

uint64_t sub_2160CCE28(int a1)
{
  return (a1 + 1);
}

uint64_t sub_2160CCE30(uint64_t a1, double a2, int8x16_t a3, double a4, double a5, double a6, int8x16_t a7)
{
  _BYTE *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;

  v8 = *(_BYTE **)(a1 + 40);
  if (v8[52])
  {
    if (v8[3])
    {
      v9 = a1 + 1423424;
      v10 = *(_OWORD **)(a1 + 64);
      if (*(_BYTE *)(a1 + 31))
        sub_2160A3034(a1, v10, v9);
      else
        sub_2160A9990(a1, v10, v9, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      v12 = *(_OWORD **)(a1 + 64);
      if (*(_BYTE *)(a1 + 31))
        sub_2160A0064(a1, v12);
      else
        sub_2160A8DBC(a1, v12);
    }
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  if (v8[53])
    sub_2160AA24C(a1, (_OWORD *)(*(_QWORD *)(a1 + 64) + 512));
  if (*(_BYTE *)(a1 + 31))
  {
    sub_215FDB200();
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(v13 + 356) || *(_DWORD *)(v13 + 360))
      sub_216061920(a1);
    else
      sub_21602BD08(a1);
  }
  return v11;
}

uint64_t sub_2160CCF4C(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 31))
  {
    sub_215FDB200();
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(v1 + 356) || *(_DWORD *)(v1 + 360))
      sub_216061920(a1);
    else
      sub_21602BD08(a1);
  }
  return 0;
}

uint64_t sub_2160CCFB0(unint64_t a1, double a2, int8x16_t a3, double a4, double a5, double a6, int8x16_t a7)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_BYTE **)(a1 + 40);
  if (v8[52])
  {
    if (v8[3])
      sub_2160A9190(a1, *(_OWORD **)(a1 + 64), a1 + 1423424, a2, a3, a4, a5, a6, a7);
    else
      sub_2160A5C40(a1, *(_OWORD **)(a1 + 64));
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  if (v8[53])
    sub_2160AA18C(a1, (_OWORD *)(*(_QWORD *)(a1 + 64) + 512));
  v10 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v10 + 356) || *(_DWORD *)(v10 + 360))
    sub_21606BB54(a1);
  else
    sub_216075704(a1);
  return v9;
}

uint64_t sub_2160CD094(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v1 + 356) || *(_DWORD *)(v1 + 360))
    sub_21606BB54(a1);
  else
    sub_216075704(a1);
  return 0;
}

uint64_t sub_2160CD0DC(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;

  v4 = (a2 + 15) >> 4;
  v5 = (a3 + 15) >> 4;
  v6 = (v5 * v4);
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  v7 = sub_2160CB5D4(40 * v6);
  *(_QWORD *)(a1 + 16) = v7;
  if (!v7)
    goto LABEL_7;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 16) + v8;
      *(_BYTE *)(v9 + 12) = 0;
      *(_WORD *)v9 = 8224;
      *(_QWORD *)(v9 + 4) = 0x8000800080008000;
      *(_QWORD *)(v9 + 16) = -1;
      *(_QWORD *)(v9 + 24) = -1;
      *(_QWORD *)(v9 + 32) = -1;
      v8 += 40;
    }
    while (40 * v6 != v8);
  }
  v10 = sub_2160CB5D4(v6 << 6);
  *(_QWORD *)(a1 + 24) = v10;
  if (v10)
  {
    result = 0;
    *(_QWORD *)(a1 + 36) = -1;
    *(_DWORD *)(a1 + 44) = -1;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_BYTE *)(a1 + 112) = 0;
  }
  else
  {
LABEL_7:
    sub_2160CD1AC(a1);
    return 4294967188;
  }
  return result;
}

void sub_2160CD1AC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    j__free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    j__free(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_2160CD1E8(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  void *v6;

  v4 = a2 + 15;
  v5 = a3 + 15;
  v6 = sub_2160CB5D4(464 * ((a3 + 15) >> 4) * ((a2 + 15) >> 4));
  *(_QWORD *)(a1 + 8) = v6;
  if (!v6)
    return 4294967188;
  *(_DWORD *)a1 = v4 >> 4;
  *(_DWORD *)(a1 + 4) = v5 >> 4;
  *(_QWORD *)(a1 + 28) = -1;
  sub_2160CD25C(a1);
  return 0;
}

uint64_t sub_2160CD25C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 24) = 0xFFFFFFFF00000000;
  v1 = (*(_DWORD *)(result + 4) * *(_DWORD *)result);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    for (i = 0; i != v1; ++i)
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 8);
      v6 = (_DWORD *)(v5 + 464 * i);
      *v6 = 0x7FFFFFFF;
      v6[3] = 0;
      v7 = v5 + v2;
      do
      {
        v8 = v7 + v4;
        *(_DWORD *)(v8 + 16) = 0x7FFFFFFF;
        *(_WORD *)(v8 + 40) = 8224;
        v4 += 28;
      }
      while (v4 != 448);
      v2 += 464;
    }
  }
  return result;
}

void sub_2160CD2CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    j__free(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_2160CD2F8(unsigned __int16 *a1, int a2, int a3, int a4)
{
  int v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;

  a1[1] = a2;
  *a1 = a3;
  v6 = a3 * a2;
  *((_DWORD *)a1 + 1) = a3 * a2;
  memset_pattern16(a1 + 16, &unk_2160F7230, 0x800uLL);
  memset_pattern16(a1 + 502, &unk_2160F7840, 0x64uLL);
  memset_pattern16(a1 + 506, &unk_2160F7850, 0x54uLL);
  memset_pattern16(a1 + 518, &unk_2160EE780, 0x24uLL);
  *((_DWORD *)a1 + 266) = 0;
  *((_QWORD *)a1 + 132) = 0;
  *((_OWORD *)a1 + 65) = 0u;
  v7 = sub_2160CB5D4(16 * v6);
  *((_QWORD *)a1 + 1) = v7;
  *((_QWORD *)a1 + 2) = 0;
  bzero(v7, 16 * v6);
  v8 = sub_2160CB5D4(16 * a4 * *a1);
  *((_QWORD *)a1 + 3) = v8;
  if (v7)
    v9 = 1;
  else
    v9 = 2;
  if (v8)
    v10 = v7 == 0;
  else
    v10 = v9;
  if ((_DWORD)v10)
  {
    j__free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    j__free(*((void **)a1 + 3));
    *((_QWORD *)a1 + 3) = 0;
  }
  return v10;
}

void sub_2160CD410(uint64_t a1)
{
  j__free(*(void **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  j__free(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t sub_2160CD444(uint64_t *a1, int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, char a8)
{
  void *v16;
  uint64_t v17;
  pthread_cond_t *v18;
  BOOL v19;
  uint64_t v20;
  int v22;
  int v23;
  int v24;

  v16 = sub_2160CB5FC((void *)0x1C70);
  v17 = (uint64_t)v16;
  if (!v16
    || ((bzero(v16, 0x1C70uLL),
         *(_QWORD *)(v17 + 16) = sub_2160EC80C(),
         v18 = sub_2160EC898(),
         *(_QWORD *)(v17 + 24) = v18,
         *(_QWORD *)(v17 + 16))
      ? (v19 = v18 == 0)
      : (v19 = 1),
        v19))
  {
    v20 = 4294967188;
  }
  else
  {
    *(_DWORD *)v17 = 0;
    *(_BYTE *)(v17 + 4) = 1;
    *(_QWORD *)(v17 + 8) = 0xFFFFFFFF00000000;
    if (a4 == 2)
    {
      v20 = 0;
      *(_BYTE *)v17 = 1;
      goto LABEL_9;
    }
    v20 = sub_215FDA5A4(a2, a3, v17 + 32, a4, a5);
    if (!(_DWORD)v20)
    {
      v22 = (-a2 & 0xF) + a2;
      v23 = (-a3 & 0xF) + a3;
      sub_2160CE50C(v17 + 1152, v22, v23, a6, a4, a7, a8);
      if (a4)
      {
LABEL_14:
        v20 = 0;
        *(_OWORD *)(v17 + 1408) = 0u;
        *(_OWORD *)(v17 + 1392) = 0u;
        goto LABEL_9;
      }
      v20 = sub_2160CD1E8(v17 + 6808, v22, v23);
      if (!(_DWORD)v20)
      {
        v20 = sub_2160CD0DC(v17 + 6848, v22, v23);
        if (!(_DWORD)v20)
        {
          v24 = (v22 + 15) >> 4;
          v20 = sub_2160DD9A0(v17 + 6624, (unsigned __int16)((v23 + 15) >> 4), (unsigned __int16)v24, 0);
          if (!(_DWORD)v20)
          {
            v20 = sub_2160C4FDC(v17 + 1432, (v23 + 15) >> 4, v24);
            if (!(_DWORD)v20)
            {
              v20 = sub_215FCE528(v17 + 6608, (v23 + 15) >> 4, v24);
              if (!(_DWORD)v20)
              {
                v20 = sub_2160CD2F8((unsigned __int16 *)(v17 + 4528), (v23 + 15) >> 4, v24, *(_DWORD *)(v17 + 168));
                if (!(_DWORD)v20)
                {
                  *(_WORD *)(v17 + 1) = 0;
                  *(_WORD *)(v17 + 6980) = 0;
                  *(_DWORD *)(v17 + 6984) = 0;
                  *(_WORD *)(v17 + 6988) = 0;
                  sub_2160B1B74(v17 + 6996);
                  sub_2160B24C4(v17 + 7224);
                  goto LABEL_14;
                }
              }
            }
          }
        }
      }
    }
  }
  sub_2160CD678(v17);
  v17 = 0;
LABEL_9:
  *a1 = v17;
  return v20;
}

void sub_2160CD678(uint64_t a1)
{
  pthread_mutex_t *v2;
  pthread_cond_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v2 = *(pthread_mutex_t **)(a1 + 16);
    if (v2)
      sub_2160EC854(v2);
    v3 = *(pthread_cond_t **)(a1 + 24);
    if (v3)
      sub_2160EC8E0(v3);
    sub_215FDA8F8(a1 + 32);
    sub_2160CE654(a1 + 1152);
    sub_2160DDAA4((void **)(a1 + 6624));
    sub_2160CD2CC(a1 + 6808);
    sub_2160CD1AC(a1 + 6848);
    *(_QWORD *)(a1 + 1376) = 0;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    *(_OWORD *)(a1 + 1280) = 0u;
    *(_OWORD *)(a1 + 1264) = 0u;
    sub_2160C511C(a1 + 1432);
    sub_215FCE5D0(a1 + 6608);
    sub_2160CD410(a1 + 4528);
    v4 = *(void **)(a1 + 7264);
    if (v4)
      j__free(v4);
    v5 = *(void **)(a1 + 1392);
    if (v5)
    {
      j__free(v5);
      *(_QWORD *)(a1 + 1392) = 0;
    }
    v6 = *(void **)(a1 + 1400);
    if (v6)
    {
      j__free(v6);
      *(_QWORD *)(a1 + 1400) = 0;
    }
    v7 = *(void **)(a1 + 1408);
    if (v7)
    {
      j__free(v7);
      *(_QWORD *)(a1 + 1408) = 0;
    }
    v8 = *(void **)(a1 + 1416);
    if (v8)
    {
      j__free(v8);
      *(_QWORD *)(a1 + 1416) = 0;
    }
    v9 = *(void **)(a1 + 1424);
    if (v9)
    {
      j__free(v9);
      *(_QWORD *)(a1 + 1424) = 0;
    }
    j__free((void *)a1);
  }
}

uint64_t sub_2160CD78C(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, char a8, uint64_t a9, char a10)
{
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)(a1 + 60) = a10;
  *(_QWORD *)a1 = a9;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = a2;
  *(_DWORD *)(a1 + 56) = 0;
  v16 = sub_2160CB5E8(0x7F8uLL);
  *(_QWORD *)(a1 + 32) = v16;
  if (!v16 || (v17 = sub_2160CB5E8(0x7F8uLL), (*(_QWORD *)(a1 + 40) = v17) == 0))
  {
    v25 = 4294967188;
LABEL_12:
    sub_2160CD8FC(a1);
    return v25;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = sub_2160CD444((uint64_t *)(*(_QWORD *)(a1 + 32) + v18), a3, a4, a5, a6, a7, *(_QWORD *)a1, a10);
      if ((_DWORD)v20)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v18);
      *(_BYTE *)(v21 + 1363) = a8;
      *(_BYTE *)(v21 + 35) = a8;
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + v18) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v18);
      ++v19;
      v18 += 8;
      if (v19 >= *(unsigned int *)(a1 + 28))
        goto LABEL_7;
    }
    v25 = v20;
    goto LABEL_12;
  }
LABEL_7:
  LODWORD(v22) = *(_DWORD *)(a1 + 48);
  if ((_DWORD)v22)
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v23);
      sub_2160CDA1C(v24);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v23++) = v24;
      v22 = *(unsigned int *)(a1 + 48);
    }
    while (v23 < v22);
  }
  v25 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a6;
  *(_DWORD *)(a1 + 28) = v22;
  *(_DWORD *)(a1 + 24) = a7;
  return v25;
}

void sub_2160CD8FC(uint64_t a1)
{
  unint64_t v2;

  if (*(_QWORD *)(a1 + 40) && *(_DWORD *)(a1 + 48))
  {
    v2 = 0;
    do
    {
      sub_2160CD678(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2++) = 0;
    }
    while (v2 < *(unsigned int *)(a1 + 48));
  }
  j__free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  j__free(*(void **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t sub_2160CD968(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((*(_DWORD *)(a1 + 48) - 255) < 0xFFFFFF00)
    return 0xFFFFFFFFLL;
  result = sub_2160CD444(&v6, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_QWORD *)a1, *(_BYTE *)(a1 + 60));
  if (!(_DWORD)result)
  {
    v5 = v6;
    *(_BYTE *)(v6 + 1363) = a2;
    *(_BYTE *)(v5 + 35) = a2;
    sub_2160CDA1C(v5);
    result = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(unsigned int *)(a1 + 48)) = v5;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * *(unsigned int *)(a1 + 28)) = v5;
    ++*(_DWORD *)(a1 + 48);
    ++*(_DWORD *)(a1 + 28);
  }
  return result;
}

uint64_t sub_2160CDA1C(uint64_t a1)
{
  _WORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int16 v10;
  char v11;
  int v12;
  char v13;
  char v14;

  *(_BYTE *)(a1 + 4) = 1;
  v9 = 0;
  v2 = (_WORD *)(a1 + 6980);
  v10 = 1;
  v14 = 0;
  sub_2160CDCB0((uint64_t)&v9, 3, 0, 2u);
  v3 = 0;
  *(_BYTE *)(a1 + 1369) = v9;
  *(_BYTE *)(a1 + 1371) = BYTE4(v9);
  *(_BYTE *)(a1 + 1370) = BYTE5(v9);
  *(_BYTE *)(a1 + 1374) = v11;
  *(_BYTE *)(a1 + 1364) = 0;
  *(_WORD *)(a1 + 1366) = v10;
  if ((v12 - 6) <= 0xF)
    v3 = byte_2160F7250[v12 - 6];
  *(_BYTE *)(a1 + 1375) = v3;
  *(_BYTE *)(a1 + 1382) = v13;
  *(_BYTE *)(a1 + 1381) = v14;
  *(_BYTE *)(a1 + 1372) = 0;
  *(_WORD *)(a1 + 1376) = 256;
  *(_BYTE *)(a1 + 1380) = 0;
  *(_DWORD *)(a1 + 12) = -1;
  *(_WORD *)(a1 + 1) = 0;
  *v2 = 0;
  *(_DWORD *)(a1 + 6984) = 0;
  v2[4] = 0;
  *(_DWORD *)(a1 + 1264) = 0;
  if (!*(_BYTE *)a1)
  {
    v4 = *(_QWORD *)(a1 + 416);
    if (v4)
    {
      *(_DWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 64) = 0x100000001;
      *(_OWORD *)(v4 + 128) = xmmword_2160EF0C0;
    }
    v5 = *(_QWORD *)(a1 + 424);
    if (v5)
    {
      *(_DWORD *)(v5 + 72) = 1;
      *(_QWORD *)(v5 + 64) = 0x100000001;
      *(_OWORD *)(v5 + 128) = xmmword_2160EF0C0;
    }
    v6 = *(_QWORD *)(a1 + 432);
    if (v6)
    {
      *(_DWORD *)(v6 + 72) = 1;
      *(_QWORD *)(v6 + 64) = 0x100000001;
      *(_OWORD *)(v6 + 128) = xmmword_2160EF0C0;
    }
    sub_2160CE700(a1 + 1152);
  }
  v7 = *(_QWORD *)(a1 + 1352);
  if (v7)
  {
    *(_QWORD *)(v7 + 1352) = 0;
    *(_QWORD *)(a1 + 1352) = 0;
  }
  *(_DWORD *)(a1 + 6892) = -1;
  *(_QWORD *)(a1 + 6884) = -1;
  *(_OWORD *)(a1 + 6912) = 0u;
  *(_OWORD *)(a1 + 6928) = 0u;
  *(_OWORD *)(a1 + 6944) = 0u;
  *(_BYTE *)(a1 + 6960) = 0;
  sub_2160B1B74(a1 + 6996);
  return sub_2160B24C4(a1 + 7224);
}

uint64_t sub_2160CDBC0(uint64_t a1, char a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a1 + 28);
  if (!v3)
  {
    v8 = *(unsigned int *)(a1 + 48);
    if (!(_DWORD)v8)
      goto LABEL_20;
    for (i = 0; i < v8; ++i)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (v10)
      {
        if (!*(_BYTE *)(v10 + 1) && !*(_BYTE *)(v10 + 2) && !*(_DWORD *)(v10 + 8))
        {
          sub_2160CDA1C(v10);
          v11 = *(unsigned int *)(a1 + 28);
          v8 = *(unsigned int *)(a1 + 48);
          if (v11 < v8)
          {
            v12 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 28) = v11 + 1;
            *(_QWORD *)(v12 + 8 * v11) = v10;
            v8 = *(unsigned int *)(a1 + 48);
          }
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 56);
      }
    }
    v3 = *(_DWORD *)(a1 + 28);
    if (!v3)
    {
LABEL_20:
      if (sub_2160CD968(a1, a2))
        return 0;
      v3 = *(_DWORD *)(a1 + 28);
      if (!v3)
        return 0;
    }
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v3 - 1;
  *(_DWORD *)(a1 + 28) = v5;
  result = *(_QWORD *)(v4 + 8 * v5);
  *(_QWORD *)(v4 + 8 * v5) = 0;
  if (result)
    *(_OWORD *)(result + 64) = *(_OWORD *)(result + 80);
  return result;
}

uint64_t sub_2160CDCB0(uint64_t result, int a2, unsigned __int8 a3, unsigned __int8 a4)
{
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v4 = 0;
  if (a2 == 19)
    v5 = 0;
  else
    v5 = a2;
  *(_DWORD *)(result + 12) = v5;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 19:
      v6 = 1;
      v4 = 2;
      v7 = 1;
      goto LABEL_15;
    case 3:
    case 17:
    case 22:
    case 23:
      LOBYTE(v4) = 1;
      goto LABEL_7;
    case 4:
    case 18:
LABEL_7:
      v6 = 0;
      v7 = v4;
      v8 = 1;
      v4 = 2;
      break;
    case 5:
      LOBYTE(v4) = 1;
      goto LABEL_11;
    case 6:
      v4 = 0;
      v6 = 0;
      v8 = 0;
      v7 = 1;
      break;
    case 7:
LABEL_11:
      v6 = 0;
      v7 = v4;
      v8 = 1;
      v4 = 0;
      break;
    case 8:
      break;
    case 9:
      LOBYTE(v4) = 1;
      goto LABEL_14;
    case 10:
    case 13:
    case 15:
    case 20:
      LOBYTE(v4) = 1;
      goto LABEL_9;
    case 11:
LABEL_14:
      v6 = 0;
      v7 = v4;
      v4 = 1;
LABEL_15:
      v8 = 1;
      break;
    case 12:
    case 14:
    case 16:
    case 21:
LABEL_9:
      v6 = 0;
      v8 = 0;
      v7 = v4;
      v4 = 1;
      break;
    default:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      break;
  }
  *(_DWORD *)result = v4;
  *(_BYTE *)(result + 4) = v6;
  *(_BYTE *)(result + 5) = v6;
  *(_BYTE *)(result + 6) = v7;
  *(_BYTE *)(result + 10) = v8;
  *(_WORD *)(result + 7) = -256;
  *(_BYTE *)(result + 9) = 0;
  v9 = a3;
  if (a3 >= 0xFu)
    v9 = 15;
  if (a4 >= 0xFu)
    v10 = 15;
  else
    v10 = a4;
  *(_BYTE *)(result + 16) = v9 | (16 * v10);
  *(_BYTE *)(result + 17) = (a2 - 17) < 2;
  return result;
}

uint64_t sub_2160CDDD8(uint64_t a1)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;
  uint64_t result;

  v2 = sub_2160EC80C();
  *(_QWORD *)a1 = v2;
  if (!v2)
    return 4294967188;
  v3 = sub_2160EC80C();
  *(_QWORD *)(a1 + 8) = v3;
  if (!v3)
    return 4294967188;
  result = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double sub_2160CDE24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if (*(_DWORD *)(a1 + 56))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(a1 + 48);
      v4 = *(_QWORD *)(v3 + 8 * v2);
      if (v4)
      {
        MEMORY[0x2199F4C28](v4, 0x1000C8077774924);
        v3 = *(_QWORD *)(a1 + 48);
      }
      *(_QWORD *)(v3 + 8 * v2++) = 0;
    }
    while (v2 != *(_DWORD *)(a1 + 56));
  }
  sub_2160EC854(*(pthread_mutex_t **)a1);
  sub_2160EC854(*(pthread_mutex_t **)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    MEMORY[0x2199F4C28](v5, 0x80C80B8603338);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    MEMORY[0x2199F4C28](v6, 0x80C80B8603338);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    MEMORY[0x2199F4C28](v7, 0x80C80B8603338);
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

pthread_mutex_t *sub_2160CDEF4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  sub_2160EC880(*(pthread_mutex_t **)a1);
  v6 = a3;
  if (a3 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(unsigned int *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 16);
      v10 = 0;
      if ((_DWORD)v8)
      {
        while (*(_QWORD *)(a2 + 8 * v7) != *(_QWORD *)(v9 + 8 * v10))
        {
          if (v8 == ++v10)
          {
            v10 = *(unsigned int *)(a1 + 24);
            goto LABEL_8;
          }
        }
        v10 = v10;
      }
LABEL_8:
      v11 = v8 - 1;
      *(_DWORD *)(a1 + 24) = v11;
      *(_QWORD *)(v9 + 8 * v10) = *(_QWORD *)(v9 + 8 * v11);
      ++v7;
    }
    while (v7 != a3);
  }
  sub_2160EC88C(*(pthread_mutex_t **)a1);
  sub_2160EC880(*(pthread_mutex_t **)(a1 + 8));
  if (a3 >= 1)
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(a2 + 8 * v12);
      v14 = *(_DWORD *)(a1 + 40);
      if (v14 == *(_DWORD *)(a1 + 44))
        break;
      v15 = *(_QWORD *)(a1 + 32);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v14 + 1;
      *(_QWORD *)(v15 + 8 * v14) = v13;
      if (++v12 == v6)
        return sub_2160EC88C(*(pthread_mutex_t **)(a1 + 8));
    }
    *(_DWORD *)(a1 + 44) = 2 * v14 + 2;
    v15 = operator new[]();
    v16 = *(unsigned int *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v16)
    {
      v18 = *(uint64_t **)(a1 + 32);
      v19 = (_QWORD *)v15;
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
    else if (!v17)
    {
      v14 = 0;
      goto LABEL_19;
    }
    MEMORY[0x2199F4C28](v17, 0x80C80B8603338);
    v14 = *(_DWORD *)(a1 + 40);
LABEL_19:
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_20;
  }
  return sub_2160EC88C(*(pthread_mutex_t **)(a1 + 8));
}

uint64_t sub_2160CE068(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;

  if (*(_DWORD *)(a1 + 40))
  {
    sub_2160EC880(*(pthread_mutex_t **)(a1 + 8));
    v4 = *(_DWORD *)(a1 + 40);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v4 - 1;
      *(_DWORD *)(a1 + 40) = v6;
      v7 = *(_QWORD *)(v5 + 8 * v6);
      sub_2160EC88C(*(pthread_mutex_t **)(a1 + 8));
      if (v7)
        goto LABEL_25;
    }
    else
    {
      sub_2160EC88C(*(pthread_mutex_t **)(a1 + 8));
    }
  }
  v7 = operator new[]();
  sub_2160EC880(*(pthread_mutex_t **)(a1 + 8));
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 44);
  if (v8 + 7 <= v9)
  {
    v10 = *(_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
  *(_DWORD *)(a1 + 44) = 2 * v9 + 16;
  v10 = operator new[]();
  v11 = *(unsigned int *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v11)
  {
    v13 = *(uint64_t **)(a1 + 32);
    v14 = (_QWORD *)v10;
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v11;
    }
    while (v11);
  }
  else if (!v12)
  {
    v8 = 0;
    goto LABEL_14;
  }
  MEMORY[0x2199F4C28](v12, 0x80C80B8603338);
  v8 = *(_DWORD *)(a1 + 40);
LABEL_14:
  *(_QWORD *)(a1 + 32) = v10;
LABEL_15:
  *(_DWORD *)(a1 + 40) = v8 + 1;
  *(_QWORD *)(v10 + 8 * v8) = v7 + a2;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v17 + 1;
  *(_QWORD *)(v16 + 8 * v17) = v7 + 2 * a2;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v19 + 1;
  *(_QWORD *)(v18 + 8 * v19) = v7 + 3 * a2;
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v21 + 1;
  *(_QWORD *)(v20 + 8 * v21) = v7 + 4 * a2;
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v23 + 1;
  *(_QWORD *)(v22 + 8 * v23) = v7 + 5 * a2;
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25) = v7 + 6 * a2;
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v27 + 1;
  *(_QWORD *)(v26 + 8 * v27) = v7 - a2 + 8 * a2;
  v28 = *(_DWORD *)(a1 + 56);
  v29 = *(_DWORD *)(a1 + 60);
  if (v28 >= v29)
  {
    *(_DWORD *)(a1 + 60) = 2 * v29 + 16;
    v30 = operator new[]();
    v31 = *(unsigned int *)(a1 + 56);
    v32 = *(_QWORD *)(a1 + 48);
    if ((_DWORD)v31)
    {
      v33 = *(uint64_t **)(a1 + 48);
      v34 = (_QWORD *)v30;
      do
      {
        v35 = *v33++;
        *v34++ = v35;
        --v31;
      }
      while (v31);
    }
    else if (!v32)
    {
      v28 = 0;
      goto LABEL_23;
    }
    MEMORY[0x2199F4C28](v32, 0x80C80B8603338);
    v28 = *(_DWORD *)(a1 + 56);
LABEL_23:
    *(_QWORD *)(a1 + 48) = v30;
    goto LABEL_24;
  }
  v30 = *(_QWORD *)(a1 + 48);
LABEL_24:
  *(_DWORD *)(a1 + 56) = v28 + 1;
  *(_QWORD *)(v30 + 8 * v28) = v7;
  sub_2160EC88C(*(pthread_mutex_t **)(a1 + 8));
LABEL_25:
  sub_2160EC880(*(pthread_mutex_t **)a1);
  v36 = *(_DWORD *)(a1 + 24);
  if (v36 == *(_DWORD *)(a1 + 28))
  {
    *(_DWORD *)(a1 + 28) = 2 * v36 + 2;
    v37 = operator new[]();
    v38 = *(unsigned int *)(a1 + 24);
    v39 = *(_QWORD *)(a1 + 16);
    if ((_DWORD)v38)
    {
      v40 = *(uint64_t **)(a1 + 16);
      v41 = (_QWORD *)v37;
      do
      {
        v42 = *v40++;
        *v41++ = v42;
        --v38;
      }
      while (v38);
    }
    else if (!v39)
    {
      v36 = 0;
      goto LABEL_33;
    }
    MEMORY[0x2199F4C28](v39, 0x80C80B8603338);
    v36 = *(_DWORD *)(a1 + 24);
LABEL_33:
    *(_QWORD *)(a1 + 16) = v37;
    goto LABEL_34;
  }
  v37 = *(_QWORD *)(a1 + 16);
LABEL_34:
  *(_DWORD *)(a1 + 24) = v36 + 1;
  *(_QWORD *)(v37 + 8 * v36) = v7;
  sub_2160EC88C(*(pthread_mutex_t **)a1);
  return v7;
}

uint64_t sub_2160CE3AC(uint64_t a1)
{
  sub_2160CDEF4(*(_QWORD *)a1, a1 + 16, *(_DWORD *)(a1 + 2064));
  *(_QWORD *)(a1 + 2064) = 0;
  return a1;
}

uint64_t sub_2160CE3E8(uint64_t a1, unsigned int a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;
  int v9;

  v4 = *(_DWORD *)(a1 + 2068);
  if (v4 >= 16)
  {
    result = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v5 = (((16 * *(_DWORD *)(a1 + 2072) + 255) >> 8) + 255) & 0x1FFFF00;
    *(_DWORD *)(a1 + 2068) = v5;
    *(_QWORD *)(a1 + 16 + 8 * *(int *)(a1 + 2064)) = sub_2160CE068(*(_QWORD *)a1, 16 * v5);
    v6 = *(int *)(a1 + 2064);
    result = *(_QWORD *)(a1 + 16 + 8 * v6);
    v9 = v6 + 1;
    v8 = -v9 < 0;
    v9 = v9;
    if (!v8)
      v9 = --(char)v9;
    *(_DWORD *)(a1 + 2064) = v9;
    v4 = *(_DWORD *)(a1 + 2068);
  }
  *(_QWORD *)(a1 + 8) = result + 16 * a2;
  *(_DWORD *)(a1 + 2068) = v4 - a2;
  return result;
}

uint64_t sub_2160CE484(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  int v6;

  if (*(int *)(a1 + 2068) >= 16)
    return *(_QWORD *)(a1 + 8);
  v2 = (((16 * *(_DWORD *)(a1 + 2072) + 255) >> 8) + 255) & 0x1FFFF00;
  *(_DWORD *)(a1 + 2068) = v2;
  *(_QWORD *)(a1 + 16 + 8 * *(int *)(a1 + 2064)) = sub_2160CE068(*(_QWORD *)a1, 16 * v2);
  v3 = *(int *)(a1 + 2064);
  result = *(_QWORD *)(a1 + 16 + 8 * v3);
  *(_QWORD *)(a1 + 8) = result;
  v6 = v3 + 1;
  v5 = -v6 < 0;
  v6 = v6;
  if (!v5)
    v6 = --(char)v6;
  *(_DWORD *)(a1 + 2064) = v6;
  return result;
}

__n128 sub_2160CE50C(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;

  v11 = (a2 + 15) >> 4;
  v12 = (((a3 + 15) >> 4) * v11) << ((a5 - 3) < 2);
  *(_DWORD *)(a1 + 12) = v12;
  *(_DWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 104) = operator new[]();
  if ((_DWORD)v12)
  {
    v13 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 104) + v13) = a1 + 32;
      v13 += 8;
    }
    while (8 * v12 != v13);
  }
  *(_DWORD *)(a1 + 8) = a4 << a7;
  *(_QWORD *)a1 = operator new[]();
  if (*(_DWORD *)(a1 + 8))
  {
    v14 = 0;
    do
    {
      v15 = operator new();
      *(_QWORD *)v15 = a6;
      *(_DWORD *)(v15 + 2072) = v12;
      *(_QWORD *)(v15 + 2064) = 0;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = v15;
    }
    while (v14 < *(unsigned int *)(a1 + 8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  v16 = a1 + 32;
  *(_QWORD *)(v16 + 8) = 16982048;
  result = *(__n128 *)v16;
  *(_OWORD *)(v16 + 16) = *(_OWORD *)v16;
  *(__n128 *)(v16 + 32) = result;
  *(_BYTE *)(v16 + 30) = 1;
  *(_BYTE *)(v16 + 46) = 2;
  *(_QWORD *)(v16 + 48) = v16;
  *(_QWORD *)(v16 + 56) = v16 + 16;
  *(_QWORD *)(v16 + 64) = v16 + 32;
  return result;
}

uint64_t sub_2160CE654(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    MEMORY[0x2199F4C28](v2, 0x20C8093837F09);
    *(_QWORD *)(a1 + 104) = 0;
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (!*(_DWORD *)(a1 + 8))
      goto LABEL_10;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)a1;
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
      if (v6)
      {
        v7 = sub_2160CE3AC(v6);
        MEMORY[0x2199F4C34](v7, 0x1020C40B61593EFLL);
        v5 = *(_QWORD *)a1;
      }
      *(_QWORD *)(v5 + 8 * v4++) = 0;
    }
    while (v4 < *(unsigned int *)(a1 + 8));
    result = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
LABEL_10:
      result = MEMORY[0x2199F4C28]();
    *(_QWORD *)a1 = 0;
  }
  return result;
}

double sub_2160CE700(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  double result;

  if (*(_DWORD *)(a1 + 8))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v2);
      sub_2160CDEF4(*(_QWORD *)v3, v3 + 16, *(_DWORD *)(v3 + 2064));
      result = 0.0;
      *(_QWORD *)(v3 + 2064) = 0;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 8));
  }
  return result;
}

uint64_t sub_2160CE760(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  int32x4_t v5;
  unsigned int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t *v9;
  int8x16_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x16_t v18;
  int v19;
  int16x8_t *v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int8x16_t v25;
  uint64_t v26;

  v2 = sub_2160CB640(49152);
  v3 = v2;
  if (v2)
  {
    v4 = (int8x16_t *)(v2 + 28672);
    memcpy((void *)(v2 + 28672), &unk_2160F7880, 0x1000uLL);
    LOWORD(v6) = 0;
    v7.i64[0] = 0x8000800080008;
    v7.i64[1] = 0x8000800080008;
    v8.i64[0] = -1;
    v8.i64[1] = -1;
    v9 = (int16x8_t *)v3;
    do
    {
      v10 = *v4;
      v11 = vshlq_s16((int16x8_t)vzip2q_s8(v10, v10), v7);
      v12 = vshlq_s16((int16x8_t)vzip1q_s8(v10, v10), v7);
      v13 = vqmovn_high_s16(vqmovn_s16(v12), v11);
      v14 = vshlq_s16(v11, v8);
      v15 = vshlq_s16(v12, v8);
      v16 = vqmovn_high_s16(vqmovn_s16(v15), v14);
      v17 = vshlq_s16(v14, v8);
      v18 = vqmovn_high_s16(vqmovn_s16(vshlq_s16(v15, v8)), v17);
      v19 = 1;
      v20 = v9;
      do
      {
        if (v19 != 8)
        {
          v15.i32[0] = 0;
          v17.i32[0] = v19 & 8;
          v5.i32[0] = v19 & 4;
          v21 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v5, (int32x4_t)v15), 0);
          v22 = vandq_s8(v10, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v17, (int32x4_t)v15)), 0));
          v23 = vbslq_s8((int8x16_t)v21, v22, vaddq_s8(v13, v22));
          v21.i32[0] = v19 & 2;
          v24 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v21, (int32x4_t)v15), 0);
          v17 = (int16x8_t)vbslq_s8((int8x16_t)v24, v23, vaddq_s8(v16, v23));
          v24.i32[0] = v19 & 1;
          v25 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v24, (int32x4_t)v15), 0);
          v5 = (int32x4_t)vaddq_s8(v18, (int8x16_t)v17);
          v15 = (int16x8_t)vbslq_s8(v25, (int8x16_t)v17, (int8x16_t)v5);
          *v20 = v15;
        }
        ++v19;
        v20 += 256;
      }
      while (v19 != 13);
      ++v9;
      ++v4;
      v6 = (unsigned __int16)(v6 + 16);
    }
    while (v6 < 0x1000);
    v26 = 0;
  }
  else
  {
    v26 = 4294967188;
  }
  if (*a1)
  {
    sub_2160CB698(*a1);
    *a1 = 0;
  }
  if (v3)
    *a1 = v3;
  return v26;
}

uint64_t sub_2160CE8C0(uint64_t a1, uint64_t a2, int8x16_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11, _BYTE *a12, uint64_t a13)
{
  unsigned int v15;
  uint64_t v16;

  if (!*(_DWORD *)(a2 + 136))
    return sub_2160CECB0(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  v15 = *(unsigned __int16 *)(a1 + 132);
  v16 = *(unsigned __int16 *)(a1 + 100);
  sub_215FCE6A4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v15, 0, v16, *(unsigned __int16 *)(a1 + 136), *(unsigned __int16 *)(a1 + 152), a3, a4);
  return sub_2160CE998((uint64_t)a3, (uint64_t)a3, a4, v15, v16, a10, a11, a12, a13);
}

uint64_t sub_2160CE998(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, uint64_t a5, unsigned int a6, char a7, _BYTE *a8, uint64_t a9)
{
  unsigned int v9;
  unsigned __int16 v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  _DWORD *v19;
  void *v20;
  int v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int16x8_t v26;
  uint16x8_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int8x16_t *v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;

  if (!*a8)
    return 0xFFFFFFFFLL;
  v9 = a8[2];
  if (!a8[2])
    return 0xFFFFFFFFLL;
  v16 = (a4 + 15) & 0xFFF0;
  v17 = (unsigned __int16 *)malloc_type_malloc(v16 >> 3, 0x1000040BDFB0063uLL);
  if (!v17)
  {
    fwrite("{PostProcDitherNoiseUpon2VUY} Error on memory allocation: noiseBlkPosPtr!\n", 0x4AuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 4294967188;
  }
  v18 = v17;
  v19 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  if (!v19)
  {
    fwrite("{PostProcDitherNoiseUpon2VUY} Error on memory allocation: prngByLFSRPtr!\n", 0x49uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    free(v18);
    return 4294967188;
  }
  v20 = v19;
  if (v9 > 0xC)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "{PostProcDitherNoiseUpon2VUY} Dithering noise strength (=%u) not currently supported.\n", v9);
    a5 = 4294966630;
  }
  else
  {
    *v19 = dword_2160F8880[(16 * (a7 & 0xF)) | (a6 >> 1) & 0xF] & 0x7FFFFFFF;
    if ((_DWORD)a5)
    {
      v21 = 0;
      v22 = 0;
      v23 = 16 * a3;
      v24 = (unsigned __int16)a3;
      v25 = a3;
      v26.i64[0] = 0xB000B000B000BLL;
      v26.i64[1] = 0xB000B000B000BLL;
      v27.i64[0] = 0x7000700070007;
      v27.i64[1] = 0x7000700070007;
      do
      {
        if (v16)
        {
          LOWORD(v28) = 0;
          v29 = 0;
          do
          {
            v30 = 2 * *v19;
            v31 = ((*v19 >> 30) ^ (*v19 >> 27)) & 1 | (2 * (*v19 & 0x3FFFFFFF));
            *v19 = v31;
            v18[(unsigned __int16)v29++] = (((unsigned __int16)v31 % 0x34u) | (((HIWORD(v30) & 0x7FFF)
                                                                              - 50
                                                                              * ((unsigned __int16)((5243 * (HIWORD(v30) & 0x7FFF)) >> 16) >> 2)) << 6)) & 0xFBC;
            v28 = (unsigned __int16)(v28 + 16);
          }
          while (v28 < v16);
        }
        v32 = v21 + 16;
        if (v21 + 16 >= a5)
          v33 = (unsigned __int16)(a5 - v22);
        else
          v33 = 16;
        if ((_DWORD)v33)
        {
          v34 = 0;
          v35 = a2;
          v36 = a1;
          do
          {
            if (v16)
            {
              v37 = 0;
              LOWORD(v38) = 0;
              v39 = 0;
              do
              {
                v40 = (int8x16_t *)(v35 + v37);
                v41 = *(int8x16_t *)(a9
                                   + (((v9 << 12) + 268431360) & 0xFFFF000)
                                   + ((unint64_t)(v34 & 0x3FF) << 6)
                                   + v18[(unsigned __int16)v39]);
                v42.i16[0] = *(_OWORD *)(v36 + v37);
                v42.i16[1] = BYTE2(*(_OWORD *)(v36 + v37));
                v42.i16[2] = BYTE4(*(_QWORD *)(v36 + v37));
                v42.i16[3] = BYTE6(*(_QWORD *)(v36 + v37));
                v42.i16[4] = *(_QWORD *)(v36 + v37 + 8);
                v42.i16[5] = BYTE2(*(_QWORD *)(v36 + v37 + 8));
                v42.i16[6] = BYTE12(*(_OWORD *)(v36 + v37));
                v42.i16[7] = BYTE14(*(_OWORD *)(v36 + v37));
                v43.i16[0] = *(_OWORD *)(v36 + v37 + 16);
                v43.i16[1] = BYTE2(*(_OWORD *)(v36 + v37 + 16));
                v43.i16[2] = BYTE4(*(_QWORD *)(v36 + v37 + 16));
                v43.i16[3] = BYTE6(*(_QWORD *)(v36 + v37 + 16));
                v43.i16[4] = *(_QWORD *)(v36 + v37 + 24);
                v43.i16[5] = BYTE2(*(_QWORD *)(v36 + v37 + 24));
                v43.i16[6] = BYTE12(*(_OWORD *)(v36 + v37 + 16));
                v43.i16[7] = BYTE14(*(_OWORD *)(v36 + v37 + 16));
                v44 = vqmovun_high_s16(vqmovun_s16(vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v36 + v37), v27), vshlq_s16((int16x8_t)vzip1q_s8(v41, v41), v26))), vaddq_s16((int16x8_t)vshlq_u16(*(uint16x8_t *)(v36 + v37 + 16), v27), vshlq_s16((int16x8_t)vzip2q_s8(v41, v41), v26)));
                *v40 = vorrq_s8(vzip1q_s8((int8x16_t)0, v44), v42);
                v40[1] = vorrq_s8(vzip2q_s8((int8x16_t)0, v44), v43);
                ++v39;
                v38 = (unsigned __int16)(v38 + 16);
                v37 += 32;
              }
              while (v38 < v16);
            }
            ++v34;
            v35 += v25;
            v36 += v24;
          }
          while (v34 != v33);
        }
        a2 += v23;
        a1 += (16 * v24);
        v21 = v32;
        v22 = v32;
      }
      while (v32 < a5);
      a5 = 0;
    }
  }
  free(v18);
  free(v20);
  return a5;
}

uint64_t sub_2160CECB0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, char a11, _BYTE *a12, uint64_t a13)
{
  int v13;
  BOOL v14;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _WORD *v23;
  _WORD *v24;
  _DWORD *v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int16x8_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  char *v48;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int8x8_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x8_t v58;
  int16x8_t v59;
  int8x16_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;

  v13 = a12[2];
  if (*a12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (v14)
    return 0xFFFFFFFFLL;
  v17 = *(_DWORD *)(a1 + 100);
  v18 = *(unsigned __int16 *)(a1 + 136);
  v19 = *(unsigned __int16 *)(a1 + 152);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = (*(_DWORD *)(a1 + 132) + 15) & 0xFFF0;
  v23 = sub_2160CB5D4(v22 >> 3);
  if (!v23)
    return 0xFFFFFFFFLL;
  v24 = v23;
  v67 = v18;
  v25 = sub_2160CB5D4(4uLL);
  if (v25)
  {
    v26 = v25;
    if ((v13 - 1) > 0xB)
    {
      v61 = 4294966630;
    }
    else
    {
      *v25 = dword_2160F8880[(16 * (a11 & 0xF)) | (a10 >> 1) & 0xF] & 0x7FFFFFFF;
      v65 = (v17 + 15) & 0xFFF0;
      if (v65)
      {
        LOWORD(v27) = 0;
        v64 = 16 * a4;
        v63 = (16 * v67);
        v28 = 2 * a4;
        v29 = (2 * v67);
        v30 = a13 + (((v13 << 12) + 268431360) & 0xFFFF000);
        v31 = a4;
        v32 = v20 + v67;
        v33.i64[0] = 0xB000B000B000BLL;
        v33.i64[1] = 0xB000B000B000BLL;
        do
        {
          v66 = v27;
          if (v22)
          {
            LOWORD(v34) = 0;
            v35 = 0;
            do
            {
              v36 = 2 * *v25;
              v37 = ((*v25 >> 30) ^ (*v25 >> 27)) & 1 | (2 * (*v25 & 0x3FFFFFFF));
              *v25 = v37;
              v24[(unsigned __int16)v35++] = (((unsigned __int16)v37 % 0x34u) | (((HIWORD(v36) & 0x7FFF)
                                                                                - 50
                                                                                * ((unsigned __int16)((5243 * (HIWORD(v36) & 0x7FFF)) >> 16) >> 2)) << 6)) & 0xFBC;
              v34 = (unsigned __int16)(v34 + 16);
            }
            while (v34 < v22);
          }
          LOWORD(v38) = 0;
          v39 = 0;
          v40 = v32;
          v41 = v21;
          v42 = v20;
          v68 = a3;
          v43 = a3;
          do
          {
            if (v22)
            {
              v44 = 0;
              v45 = 0;
              LOWORD(v46) = 0;
              v47 = 0;
              do
              {
                v48 = (char *)(v43 + v44);
                v49 = (int8x16_t *)(v30
                                  + (unsigned __int16)v24[(unsigned __int16)v47]
                                  + (unint64_t)((unsigned __int16)(v39 & 0x3FF) << 6));
                v50 = *(int8x16_t *)(v42 + v45);
                v51 = *v49;
                v52 = *(int8x16_t *)(v41 + v45);
                v53 = (int16x8_t)vzip2q_s8(v51, v51);
                v54 = vshlq_s16((int16x8_t)vzip1q_s8(v51, v51), v33);
                v55 = vqmovun_s16(vaddq_s16(v54, (int16x8_t)vzip1q_s8(v50, (int8x16_t)0)));
                vst2_s8(v48, (int8x8x2_t)v52);
                v48 += 16;
                *(int8x16_t *)v48 = vzip2q_s8(v52, vqmovun_high_s16(*(int8x8_t *)v54.i8, vaddq_s16(vshlq_s16(v53, v33), (int16x8_t)vzip2q_s8(v50, (int8x16_t)0))));
                v56 = v49[4];
                v57 = *(int8x16_t *)(v40 + v45);
                v58 = vqmovun_s16(vaddq_s16(vshlq_s16((int16x8_t)vzip1q_s8(v56, v56), v33), (int16x8_t)vzip1q_s8(v57, (int8x16_t)0)));
                v59 = vaddq_s16(vshlq_s16((int16x8_t)vzip2q_s8(v56, v56), v33), (int16x8_t)vzip2q_s8(v57, (int8x16_t)0));
                v60 = (int8x16_t *)(v43 + v31 + v44);
                vst2_s8(v60->i8, (int8x8x2_t)v52);
                v60[1] = vzip2q_s8(v52, vqmovun_high_s16(*(int8x8_t *)v59.i8, v59));
                ++v47;
                v46 = (unsigned __int16)(v46 + 16);
                v45 += 16;
                v44 += 32;
              }
              while (v46 < v22);
            }
            v39 = v38 + 2;
            v43 += v28;
            v42 += v29;
            v41 += v19;
            v38 = (unsigned __int16)(v38 + 2);
            v40 += v29;
          }
          while (v38 < 0x10);
          a3 = v68 + v64;
          v20 += v63;
          v21 += (8 * v19);
          v27 = (unsigned __int16)(v66 + 16);
          v32 += v63;
        }
        while (v27 < v65);
      }
      v61 = 0;
    }
    j__free(v24);
  }
  else
  {
    v61 = 0xFFFFFFFFLL;
    v26 = v24;
  }
  j__free(v26);
  return v61;
}

uint64_t sub_2160CEFD0(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  void *v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t result;
  unsigned int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int *v69;
  unsigned int *v70;
  int v71;
  int v72;
  uint64_t i;
  unint64_t v74;
  signed int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t k;
  unint64_t v83;
  signed int v84;
  unsigned int v85;
  unint64_t v86;
  int v87;
  int v88;
  BOOL v89;
  unsigned int *v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  _BYTE *v95;
  uint64_t n;
  unsigned int v97;
  unint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int *v105;
  BOOL v106;
  int v107;
  unsigned int v108;
  _BYTE *v109;
  uint64_t ii;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unint64_t v130;
  int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  BOOL v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unint64_t v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t v158;
  int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unint64_t v163;
  int v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  char v169;
  unsigned int v170;
  unsigned int v171;
  unint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unint64_t v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unint64_t v184;
  uint64_t j;
  unint64_t v186;
  unsigned int v187;
  unint64_t v188;
  uint64_t m;
  unint64_t v190;
  unsigned int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unint64_t v196;
  unsigned int *v197;
  int v198;
  int v199;
  char v200;
  unsigned int v201;
  unint64_t v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int *v208;
  unsigned int v209;
  char *v210;
  int *v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  unsigned int v215;
  unint64_t v216;
  int v217;
  int v218;
  unsigned __int8 v219;
  unsigned int v220;
  int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  __int16 v242;
  __int16 v243;

  v10 = *(unsigned __int8 *)(a5 + 28);
  v12 = *(_QWORD *)(a5 + 40);
  v11 = *(unsigned __int8 **)(a5 + 48);
  v13 = *(void **)(a5 + 56);
  v243 = 0;
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(unsigned __int8 *)(a1 + 36);
  v16 = __clz(v14 | 1);
  if (!v14)
    ++v16;
  v17 = (v14 << (v16 + 1)) >> -(char)v16;
  if (!v16)
    v17 = 0;
  v18 = v17 + ~(-1 << v16);
  v19 = v15 + 2 * v16 + 1;
  v20 = (v15 + 2 * v16 + 1) & 7;
  v21 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v19 >> 3));
  v22 = bswap32(*v21);
  if ((unint64_t)v21 > *(_QWORD *)(a1 + 24))
    v21 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v21;
  *(_DWORD *)(a1 + 32) = v22 << v20;
  *(_BYTE *)(a1 + 36) = v20;
  result = sub_2160CC60C(v10, v18, (char *)&v243 + 1, &v243);
  if (!(_DWORD)result)
  {
    *(_BYTE *)v12 = v18;
    v24 = HIBYTE(v243);
    *(_BYTE *)(v12 + 1) = HIBYTE(v243);
    v25 = v243;
    *(_BYTE *)(v12 + 2) = v243;
    if (!v24 && v25 == 25)
    {
      sub_2160CFFB4(a1, (uint64_t)v13, a3, a4);
      v26 = *(_QWORD *)(a5 + 176);
      if (v26)
        v27 = (_QWORD *)(v26 + 80);
      else
        v27 = 0;
      *v27 = 0x1010101010101010;
      v27[1] = 0x1010101010101010;
      if (!a4 || (a3 & 0xFD) != 1)
        v27[2] = 0x1010101010101010;
      result = 0;
      *(_BYTE *)(*(_QWORD *)(a5 + 48) + 272) = 0;
      *(_BYTE *)(v12 + 54) = 0;
      return result;
    }
    *(_BYTE *)(v12 + 3) = 0;
    if (!*(_BYTE *)(a5 + 184) || (v28 = *(_QWORD *)(a5 + 40), *(_BYTE *)(v28 + 1)) || *(_BYTE *)(v28 + 2))
    {
      v29 = 0;
    }
    else
    {
      v29 = *(_DWORD *)(a1 + 32) >> 31;
      v78 = *(unsigned __int8 *)(a1 + 36) + 1;
      v79 = v78 & 7;
      v80 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v78 >> 3));
      v81 = bswap32(*v80) << (v78 & 7);
      if ((unint64_t)v80 > *(_QWORD *)(a1 + 24))
        v80 = *(unsigned int **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v80;
      *(_DWORD *)(a1 + 32) = v81;
      *(_BYTE *)(a1 + 36) = v79;
      *(_BYTE *)(v12 + 3) = v29;
    }
    result = sub_2160CC688(v24, v25, v29, (uint64_t)v11, *(unsigned __int8 *)(a5 + 31));
    if (!(_DWORD)result)
    {
      v30 = v11[272];
      *(_BYTE *)(*(_QWORD *)(a5 + 176) + 126) = *(_BYTE *)(*(_QWORD *)(a5 + 48) + 272);
      v31 = *((_DWORD *)v11 + 2);
      if (v31 == 3)
        goto LABEL_259;
      v32 = (uint64_t)(v11 + 16);
      v33 = *(_QWORD *)(a5 + 40);
      if ((*(_BYTE *)(v33 + 1) || *(_BYTE *)(v33 + 2) == 25) && v30 == 4)
      {
        v34 = *(unsigned int **)(a1 + 24);
        v35 = *(_DWORD *)(a1 + 32);
        v36 = __clz(v35 | 1);
        if (!v35)
          ++v36;
        v37 = (v35 << (v36 + 1)) >> -(char)v36;
        if (v36)
          v38 = v37;
        else
          v38 = 0;
        v39 = v38 + ~(-1 << v36);
        v40 = *(unsigned __int8 *)(a1 + 36) + 2 * v36 + 1;
        v41 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v40 >> 3));
        v42 = *v41;
        *(_DWORD *)(v12 + 4) = v39;
        v43 = v40 & 7;
        v44 = bswap32(v42) << v43;
        if (v41 > v34)
          v41 = v34;
        v45 = __clz(v44 | 1);
        if (!v44)
          ++v45;
        v46 = v44 << (v45 + 1) >> -(char)v45;
        if (!v45)
          v46 = 0;
        v47 = v46 + ~(-1 << v45);
        v48 = v43 + 2 * v45 + 1;
        v49 = v48 & 7;
        v50 = (unsigned int *)((char *)v41 + (v48 >> 3));
        v51 = bswap32(*v50) << (v48 & 7);
        if (v50 > v34)
          v50 = v34;
        *(_DWORD *)(v12 + 8) = v47;
        v52 = __clz(v51 | 1);
        if (!v51)
          ++v52;
        v53 = v51 << (v52 + 1) >> -(char)v52;
        if (!v52)
          v53 = 0;
        v54 = v53 + ~(-1 << v52);
        v55 = v49 + 2 * v52 + 1;
        v56 = v55 & 7;
        v57 = (unsigned int *)((char *)v50 + (v55 >> 3));
        v58 = bswap32(*v57) << (v55 & 7);
        if (v57 > v34)
          v57 = v34;
        *(_DWORD *)(v12 + 12) = v54;
        v59 = __clz(v58 | 1);
        if (!v58)
          ++v59;
        v60 = v56 + 2 * v59 + 1;
        v61 = (unsigned int *)((char *)v57 + (v60 >> 3));
        v62 = bswap32(*v61);
        if (v61 <= v34)
          v34 = v61;
        v63 = v60 & 7;
        v64 = v62 << (v60 & 7);
        v65 = ~(-1 << v59);
        v66 = v58 << (v59 + 1) >> -(char)v59;
        if (v59)
          v67 = v66;
        else
          v67 = 0;
        *(_DWORD *)(v12 + 16) = v67 + v65;
        *(_QWORD *)(a1 + 16) = v34;
        *(_DWORD *)(a1 + 32) = v64;
        *(_BYTE *)(a1 + 36) = v63;
        v239 = v31;
        result = sub_2160CC9E0(*v11, *(unsigned __int8 *)(v12 + 1), v12 + 4, v12 + 20, (int *)(v12 + 36), v32, 0, 3);
        if ((_DWORD)result)
          return result;
        result = sub_2160D0090(a1, HIBYTE(v243), v243, v12 + 4, v12 + 20, v12 + 36, *(unsigned __int8 *)(a5 + 31), a2, (uint64_t)v11);
        v31 = v239;
        if ((_DWORD)result)
          return result;
LABEL_257:
        if (v31 == 2)
        {
          v198 = 0;
          v199 = 1;
          v200 = a3 & 0xFD;
          goto LABEL_288;
        }
LABEL_259:
        v200 = a3 & 0xFD;
        v201 = v11[272];
        v202 = *(_QWORD *)(a1 + 24);
        v203 = *(_DWORD *)(a1 + 32);
        v204 = __clz(v203 | 1);
        if (v203)
          v205 = v204;
        else
          v205 = v204 + 1;
        v206 = (v203 << (v205 + 1)) >> -(char)v205;
        if (!v205)
          v206 = 0;
        v207 = v206 + ~(-1 << v205);
        v208 = (unsigned int *)(*(_QWORD *)(a1 + 16)
                              + ((unint64_t)(*(unsigned __int8 *)(a1 + 36) + 2 * v205 + 1) >> 3));
        v209 = *v208;
        if ((unint64_t)v208 > v202)
          v208 = *(unsigned int **)(a1 + 24);
        if ((a3 & 0xFD) == 1 && a4 || !v11[1])
        {
          if (v207 <= 0xF)
          {
            v210 = (char *)&unk_2160F8C80 + 64 * (unint64_t)((HIBYTE(v243) | v243) == 0);
            goto LABEL_274;
          }
        }
        else if (v207 <= 0x2F)
        {
          v210 = (char *)&unk_2160F8D00 + 192 * ((HIBYTE(v243) | v243) == 0);
LABEL_274:
          v211 = (int *)&v210[4 * v207];
          v212 = (*(_BYTE *)(a1 + 36) + 2 * (_BYTE)v205 + 1) & 7;
          v213 = bswap32(v209) << ((*(_BYTE *)(a1 + 36) + 2 * v205 + 1) & 7);
          v198 = *v211;
          if ((*v211 & 0xF) == 0 || !*(_BYTE *)(a5 + 184))
            goto LABEL_287;
          v214 = *(_QWORD *)(a5 + 40);
          if (*(_BYTE *)(v214 + 1))
          {
            if (v201 > 4 || *(_BYTE *)(v214 + 1) == 3 && !*(_BYTE *)(v214 + 2) && !**(_BYTE **)(a5 + 48))
            {
LABEL_287:
              v199 = 0;
              *(_QWORD *)(a1 + 16) = v208;
              *(_DWORD *)(a1 + 32) = v213;
              *(_BYTE *)(a1 + 36) = v212;
LABEL_288:
              v242 = 0;
              if (v200 == 1)
              {
                v217 = a3;
                v218 = a4;
              }
              else
              {
                v217 = 0;
                v218 = 0;
              }
              result = sub_2160CC930(*(unsigned __int8 *)(v12 + 1), *(unsigned __int8 *)(v12 + 2), v198, &v242, (char *)&v242 + 1, v217, v218);
              if ((_DWORD)result)
                return result;
              v219 = v242;
              *(_BYTE *)(v12 + 53) = v242;
              v220 = HIBYTE(v242);
              *(_BYTE *)(v12 + 52) = HIBYTE(v242);
              if (((v198 < 1) & ~v199) != 0)
              {
                LOBYTE(v238) = 0;
              }
              else
              {
                v241 = v220;
                bzero(v13, 0x330uLL);
                v221 = *(_DWORD *)(a1 + 32);
                v222 = *(unsigned __int8 *)(a1 + 36);
                v223 = __clz(v221 | 1);
                if (v221)
                  v224 = v223;
                else
                  v224 = v223 + 1;
                v225 = (v221 << (v224 + 1)) >> -(char)v224;
                if (!v224)
                  v225 = 0;
                v240 = v225;
                v226 = v222 + 2 * v224 + 1;
                v227 = (v222 + 2 * v224 + 1) & 7;
                v228 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v226 >> 3));
                v229 = bswap32(*v228) << (v226 & 7);
                if ((unint64_t)v228 > *(_QWORD *)(a1 + 24))
                  v228 = *(unsigned int **)(a1 + 24);
                *(_QWORD *)(a1 + 16) = v228;
                *(_DWORD *)(a1 + 32) = v229;
                *(_BYTE *)(a1 + 36) = v227;
                v230 = *(_QWORD *)(a5 + 176);
                if (v230)
                  v231 = v230 + 80;
                else
                  v231 = 0;
                v232 = *(_QWORD *)(a5 + 128);
                v233 = *(_QWORD *)(a5 + 136);
                if (v232)
                  v234 = v232 + 80;
                else
                  v234 = 0;
                if (v233)
                  v235 = v233 + 80;
                else
                  v235 = 0;
                if (v200 == 1)
                  v236 = a3;
                else
                  v236 = 0;
                if (v200 == 1)
                  v237 = a4;
                else
                  v237 = 0;
                result = sub_2160D0854(a1, v199, *(unsigned __int8 *)(v12 + 3), a5, v231, v234, v235, v241, v219, (uint64_t)v13, v236, v237);
                if ((_DWORD)result)
                  return result;
                v238 = ((v240 + (1 << v224)) >> 1) - ((v240 + (1 << v224)) >> 1) * 2 * ((v240 + (1 << v224)) & 1);
              }
              result = 0;
              *(_BYTE *)(v12 + 54) = v238;
              return result;
            }
          }
          else if (!*(_BYTE *)(v214 + 2) || v201 >= 5)
          {
            goto LABEL_287;
          }
          v215 = v213 >> 31;
          v216 = (v212 + 1);
          LOBYTE(v212) = (v212 + 1) & 7;
          v208 = (unsigned int *)((char *)v208 + (v216 >> 3));
          v213 = bswap32(*v208) << (v216 & 7);
          if ((unint64_t)v208 > v202)
            v208 = *(unsigned int **)(a1 + 24);
          *(_BYTE *)(v12 + 3) = v215;
          goto LABEL_287;
        }
        return 4294958327;
      }
      if (v31 <= 7 && ((1 << v31) & 0x86) != 0)
      {
        v68 = v11[1];
        v70 = *(unsigned int **)(a1 + 16);
        v69 = *(unsigned int **)(a1 + 24);
        v71 = *(_DWORD *)(a1 + 32);
        v72 = *(unsigned __int8 *)(a1 + 36);
        if ((a3 & 0xFD) == 1)
        {
          if (v31 == 1)
          {
            for (i = 0; i != 16; ++i)
            {
              v74 = (v72 + 1);
              v72 = ((_BYTE)v72 + 1) & 7;
              v70 = (unsigned int *)((char *)v70 + (v74 >> 3));
              v75 = bswap32(*v70) << (v74 & 7);
              if (v70 > v69)
                v70 = v69;
              if ((v71 & 0x80000000) == 0)
              {
                v76 = v75 >> 29;
                v77 = (v72 + 3);
                v72 = ((_BYTE)v72 + 3) & 7;
                v70 = (unsigned int *)((char *)v70 + (v77 >> 3));
                v75 = bswap32(*v70) << (v77 & 7);
                if (v70 > v69)
                  v70 = v69;
                v11[i + 310] = v76;
              }
              v11[i + 290] = v71 < 0;
              v71 = v75;
            }
          }
          else
          {
            v75 = *(_DWORD *)(a1 + 32);
          }
          if (v31 == 7)
          {
            for (j = 0; j != 4; ++j)
            {
              v186 = (v72 + 1);
              v72 = ((_BYTE)v72 + 1) & 7;
              v70 = (unsigned int *)((char *)v70 + (v186 >> 3));
              v91 = bswap32(*v70) << (v186 & 7);
              if (v70 > v69)
                v70 = v69;
              if ((v75 & 0x80000000) == 0)
              {
                v187 = v91 >> 29;
                v188 = (v72 + 3);
                v72 = ((_BYTE)v72 + 3) & 7;
                v70 = (unsigned int *)((char *)v70 + (v188 >> 3));
                v91 = bswap32(*v70) << (v188 & 7);
                if (v70 > v69)
                  v70 = v69;
                v11[j + 326] = v187;
              }
              v11[j + 306] = v75 < 0;
              v75 = v91;
            }
          }
          else
          {
            v91 = v75;
          }
          LOBYTE(v193) = 0;
          if (a4 == 1 || !v68)
            goto LABEL_255;
        }
        else
        {
          if (v31 == 1)
          {
            for (k = 0; k != 16; ++k)
            {
              v83 = (v72 + 1);
              v72 = ((_BYTE)v72 + 1) & 7;
              v70 = (unsigned int *)((char *)v70 + (v83 >> 3));
              v84 = bswap32(*v70) << (v83 & 7);
              if (v70 > v69)
                v70 = v69;
              if ((v71 & 0x80000000) == 0)
              {
                v85 = v84 >> 29;
                v86 = (v72 + 3);
                v72 = ((_BYTE)v72 + 3) & 7;
                v70 = (unsigned int *)((char *)v70 + (v86 >> 3));
                v84 = bswap32(*v70) << (v86 & 7);
                if (v70 > v69)
                  v70 = v69;
                v11[k + 310] = v85;
              }
              v11[k + 290] = v71 < 0;
              v71 = v84;
            }
          }
          else
          {
            v84 = *(_DWORD *)(a1 + 32);
          }
          if (v31 == 7)
          {
            for (m = 0; m != 4; ++m)
            {
              v190 = (v72 + 1);
              v72 = ((_BYTE)v72 + 1) & 7;
              v70 = (unsigned int *)((char *)v70 + (v190 >> 3));
              v91 = bswap32(*v70) << (v190 & 7);
              if (v70 > v69)
                v70 = v69;
              if ((v84 & 0x80000000) == 0)
              {
                v191 = v91 >> 29;
                v192 = (v72 + 3);
                v72 = ((_BYTE)v72 + 3) & 7;
                v70 = (unsigned int *)((char *)v70 + (v192 >> 3));
                v91 = bswap32(*v70) << (v192 & 7);
                if (v70 > v69)
                  v70 = v69;
                v11[m + 326] = v191;
              }
              v11[m + 306] = v84 < 0;
              v84 = v91;
            }
          }
          else
          {
            v91 = v84;
          }
          if (!v68)
          {
            LOBYTE(v193) = 0;
LABEL_255:
            v11[289] = v193;
LABEL_256:
            *(_QWORD *)(a1 + 16) = v70;
            *(_DWORD *)(a1 + 32) = v91;
            *(_BYTE *)(a1 + 36) = v72;
            goto LABEL_257;
          }
        }
        v194 = __clz(v91 | 1);
        if (!v91)
          ++v194;
        v195 = v91 << (v194 + 1) >> -(char)v194;
        if (!v194)
          v195 = 0;
        v193 = v195 + ~(-1 << v194);
        v196 = v72 + 2 * v194 + 1;
        LOBYTE(v72) = v196 & 7;
        v197 = (unsigned int *)((char *)v70 + (v196 >> 3));
        v91 = bswap32(*v197) << v72;
        if (v197 <= v69)
          v70 = v197;
        else
          v70 = v69;
        goto LABEL_255;
      }
      v87 = *(unsigned __int8 *)(a5 + 31);
      v88 = v11[2];
      if (v11[2])
        v89 = 1;
      else
        v89 = v87 == 2;
      v70 = *(unsigned int **)(a1 + 16);
      v90 = *(unsigned int **)(a1 + 24);
      v91 = *(_DWORD *)(a1 + 32);
      v72 = *(unsigned __int8 *)(a1 + 36);
      v92 = v11[3];
      v93 = v11[272];
      if (v89 && v11[272])
      {
        if (v87 == 2)
          v88 = (2 * v88) | 1;
        if (a2)
          v94 = 16;
        else
          v94 = 32;
        v95 = v11 + 24;
        for (n = v11[272]; n; --n)
        {
          if (v95[7] == 5)
          {
            LOBYTE(v97) = 32;
          }
          else if (v88 == 1)
          {
            v98 = (v72 + 1);
            v72 = ((_BYTE)v72 + 1) & 7;
            v70 = (unsigned int *)((char *)v70 + (v98 >> 3));
            v99 = ~v91;
            v100 = bswap32(*v70) << (v98 & 7);
            if (v70 > v90)
              v70 = v90;
            v97 = v99 >> 31;
            v91 = v100;
          }
          else
          {
            v101 = __clz(v91 | 1);
            if (v91)
              v102 = v101;
            else
              v102 = v101 + 1;
            v103 = v91 << (v102 + 1) >> -(char)v102;
            if (!v102)
              v103 = 0;
            v97 = v103 + ~(-1 << v102);
            v104 = v72 + 2 * v102 + 1;
            v105 = (unsigned int *)((char *)v70 + (v104 >> 3));
            if (v105 <= v90)
              v70 = (unsigned int *)((char *)v70 + (v104 >> 3));
            else
              v70 = v90;
            if (v94 <= v97)
              return 4294958327;
            v72 = v104 & 7;
            v91 = bswap32(*v105) << v72;
          }
          *v95 = v97;
          v95 += 16;
        }
      }
      if (v92)
        v106 = 1;
      else
        v106 = v87 == 2;
      if (v106 && (_DWORD)v93)
      {
        if (v87 == 2)
          v107 = (2 * v92) | 1;
        else
          v107 = v92;
        if (a2)
          v108 = 16;
        else
          v108 = 32;
        v109 = v11 + 25;
        for (ii = v93; ii; --ii)
        {
          if (v109[6] == 4)
          {
            LOBYTE(v111) = 32;
          }
          else if (v107 == 1)
          {
            v112 = (v72 + 1);
            v72 = ((_BYTE)v72 + 1) & 7;
            v70 = (unsigned int *)((char *)v70 + (v112 >> 3));
            v113 = ~v91;
            v114 = bswap32(*v70) << (v112 & 7);
            if (v70 > v90)
              v70 = v90;
            v111 = v113 >> 31;
            v91 = v114;
          }
          else
          {
            v115 = __clz(v91 | 1);
            if (v91)
              v116 = v115;
            else
              v116 = v115 + 1;
            v117 = v91 << (v116 + 1) >> -(char)v116;
            if (!v116)
              v117 = 0;
            v111 = v117 + ~(-1 << v116);
            v118 = v72 + 2 * v116 + 1;
            v119 = (unsigned int *)((char *)v70 + (v118 >> 3));
            if (v119 <= v90)
              v70 = (unsigned int *)((char *)v70 + (v118 >> 3));
            else
              v70 = v90;
            if (v108 <= v111)
              return 4294958327;
            v72 = v118 & 7;
            v91 = bswap32(*v119) << v72;
          }
          *v109 = v111;
          v109 += 16;
        }
      }
      if (!(_DWORD)v93)
        goto LABEL_256;
      v120 = 0;
      while (1)
      {
        v121 = v32 + 16 * v120;
        if (*(_BYTE *)(v121 + 15) != 5)
          break;
LABEL_179:
        if (++v120 == v93)
        {
          v153 = 0;
          while (1)
          {
            v154 = v32 + 16 * v153;
            if (*(_BYTE *)(v154 + 15) != 4)
              break;
LABEL_217:
            if (++v153 == v93)
              goto LABEL_256;
          }
          v155 = __clz(v91 | 1);
          if (!v91)
            ++v155;
          if (v155 <= 0xC)
          {
            v156 = v91 << (v155 + 1) >> -(char)v155;
            if (!v155)
              v156 = 0;
            v157 = v156 + ~(-1 << v155);
            v158 = v72 + 2 * v155 + 1;
            v159 = v158 & 7;
            v160 = (unsigned int *)((char *)v70 + (v158 >> 3));
            v161 = bswap32(*v160) << v159;
            if (v160 <= v90)
              v162 = v160;
            else
              v162 = v90;
            goto LABEL_210;
          }
          v163 = (v72 + 1);
          v164 = v163 & 7;
          v165 = (unsigned int *)((char *)v70 + (v163 >> 3));
          v166 = bswap32(*v165) << v164;
          if (v165 <= v90)
            v167 = v165;
          else
            v167 = v90;
          if ((v91 & 0x80000000) != 0)
          {
            v171 = 0;
          }
          else
          {
            v168 = 0;
            do
            {
              v169 = v164;
              v170 = v166;
              v171 = v168 + 1;
              v172 = (v164 + 1);
              v164 = ((_BYTE)v164 + 1) & 7;
              v167 = (unsigned int *)((char *)v167 + (v172 >> 3));
              v166 = bswap32(*v167) << (v172 & 7);
              if (v167 > v90)
                v167 = v90;
              if ((v170 & 0x80000000) != 0)
                break;
              v140 = v168++ >= 0x1F;
            }
            while (!v140);
            if (v171 - 1 > 0x17)
            {
              v173 = v166 >> (48 - v171);
              v174 = ((v169 + 1) & 7) + v171;
              v175 = v174 - 16;
              v159 = v174 & 7;
              v176 = (unsigned int *)((char *)v167 + (v175 >> 3));
              v177 = bswap32(*v176) << v159;
              if (v176 > v90)
                v176 = v90;
              v178 = *(unsigned int *)((char *)v176 + 2);
              v162 = (unsigned int *)((char *)v176 + 2);
              v161 = bswap32(v178) << v159;
              if (v162 > v90)
                v162 = v90;
              v179 = __PAIR64__(v173, v177) >> 16;
LABEL_209:
              v157 = v179 + ~(-1 << v171);
LABEL_210:
              *(_WORD *)(v154 + 4) = ((v157 + 1) >> 1) - ((v157 + 1) >> 1) * 2 * (((_BYTE)v157 + 1) & 1);
              v181 = __clz(v161 | 1);
              if (!v161)
                ++v181;
              v182 = v161 << (v181 + 1) >> -(char)v181;
              if (!v181)
                v182 = 0;
              v183 = 1 << v181;
              v184 = v159 + 2 * v181 + 1;
              v72 = v184 & 7;
              v70 = (unsigned int *)((char *)v162 + (v184 >> 3));
              v91 = bswap32(*v70) << (v184 & 7);
              if (v70 > v90)
                v70 = v90;
              *(_WORD *)(v154 + 6) = ((v182 + v183) >> 1) - ((v182 + v183) >> 1) * 2 * ((v182 + v183) & 1);
              goto LABEL_217;
            }
          }
          v179 = v166 >> -(char)v171;
          v180 = v171 + v164;
          v159 = v180 & 7;
          v162 = (unsigned int *)((char *)v167 + (v180 >> 3));
          v161 = bswap32(*v162) << (v180 & 7);
          if (v162 > v90)
            v162 = v90;
          goto LABEL_209;
        }
      }
      v122 = __clz(v91 | 1);
      if (!v91)
        ++v122;
      if (v122 <= 0xC)
      {
        v123 = v91 << (v122 + 1) >> -(char)v122;
        if (!v122)
          v123 = 0;
        v124 = v123 + ~(-1 << v122);
        v125 = v72 + 2 * v122 + 1;
        v126 = v125 & 7;
        v127 = (unsigned int *)((char *)v70 + (v125 >> 3));
        v128 = bswap32(*v127) << v126;
        if (v127 <= v90)
          v129 = v127;
        else
          v129 = v90;
        goto LABEL_172;
      }
      v130 = (v72 + 1);
      v131 = v130 & 7;
      v132 = (unsigned int *)((char *)v70 + (v130 >> 3));
      v133 = bswap32(*v132) << v131;
      if (v132 <= v90)
        v134 = v132;
      else
        v134 = v90;
      if ((v91 & 0x80000000) != 0)
      {
        v138 = 0;
      }
      else
      {
        v135 = 0;
        do
        {
          v136 = v131;
          v137 = v133;
          v138 = v135 + 1;
          v139 = (v131 + 1);
          v131 = ((_BYTE)v131 + 1) & 7;
          v134 = (unsigned int *)((char *)v134 + (v139 >> 3));
          v133 = bswap32(*v134) << (v139 & 7);
          if (v134 > v90)
            v134 = v90;
          if ((v137 & 0x80000000) != 0)
            break;
          v140 = v135++ >= 0x1F;
        }
        while (!v140);
        if (v138 - 1 > 0x17)
        {
          v141 = v133 >> (48 - v138);
          v142 = ((v136 + 1) & 7) + v138;
          v143 = v142 - 16;
          v126 = v142 & 7;
          v144 = (unsigned int *)((char *)v134 + (v143 >> 3));
          v145 = bswap32(*v144) << v126;
          if (v144 > v90)
            v144 = v90;
          v146 = *(unsigned int *)((char *)v144 + 2);
          v129 = (unsigned int *)((char *)v144 + 2);
          v128 = bswap32(v146) << v126;
          if (v129 > v90)
            v129 = v90;
          v147 = __PAIR64__(v141, v145) >> 16;
LABEL_171:
          v124 = v147 + ~(-1 << v138);
LABEL_172:
          *(_WORD *)v121 = ((v124 + 1) >> 1) - ((v124 + 1) >> 1) * 2 * (((_BYTE)v124 + 1) & 1);
          v149 = __clz(v128 | 1);
          if (!v128)
            ++v149;
          v150 = v128 << (v149 + 1) >> -(char)v149;
          if (!v149)
            v150 = 0;
          v151 = 1 << v149;
          v152 = v126 + 2 * v149 + 1;
          v72 = v152 & 7;
          v70 = (unsigned int *)((char *)v129 + (v152 >> 3));
          v91 = bswap32(*v70) << (v152 & 7);
          if (v70 > v90)
            v70 = v90;
          *(_WORD *)(v121 + 2) = ((v150 + v151) >> 1) - ((v150 + v151) >> 1) * 2 * ((v150 + v151) & 1);
          goto LABEL_179;
        }
      }
      v147 = v133 >> -(char)v138;
      v148 = v138 + v131;
      v126 = v148 & 7;
      v129 = (unsigned int *)((char *)v134 + (v148 >> 3));
      v128 = bswap32(*v129) << (v148 & 7);
      if (v129 > v90)
        v129 = v90;
      goto LABEL_171;
    }
  }
  return result;
}

uint64_t sub_2160CFFB4(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t i;
  unsigned int v15;
  unsigned int v16;
  uint64_t j;
  unsigned int v18;
  unsigned int v19;

  v4 = 0;
  v5 = a2 + 672;
  v6 = (a3 & 0xFFFFFFFD) == 1;
  v7 = a4 != 0;
  v8 = v6 && v7;
  if (v6 && v7)
    v5 = 0;
  v9 = *(unsigned int **)(result + 16);
  v10 = *(unsigned int **)(result + 24);
  if (*(_BYTE *)(result + 36))
    v9 = (unsigned int *)((char *)v9 + 1);
  if (v9 > v10)
    v9 = *(unsigned int **)(result + 24);
  v11 = bswap32(*v9);
  do
  {
    v12 = HIBYTE(v11);
    v13 = *(unsigned int *)((char *)v9 + 1);
    v9 = (unsigned int *)((char *)v9 + 1);
    v11 = bswap32(v13);
    if (v9 > v10)
      v9 = v10;
    *(_WORD *)(a2 + 32 + v4) = v12;
    v4 += 2;
  }
  while (v4 != 512);
  if (!v8)
  {
    for (i = 0; i != 128; i += 2)
    {
      v15 = HIBYTE(v11);
      v16 = *(unsigned int *)((char *)v9 + 1);
      v9 = (unsigned int *)((char *)v9 + 1);
      v11 = bswap32(v16);
      if (v9 > v10)
        v9 = v10;
      *(_WORD *)(a2 + 544 + i) = v15;
    }
    for (j = 0; j != 128; j += 2)
    {
      v18 = HIBYTE(v11);
      v19 = *(unsigned int *)((char *)v9 + 1);
      v9 = (unsigned int *)((char *)v9 + 1);
      v11 = bswap32(v19);
      if (v9 > v10)
        v9 = v10;
      *(_WORD *)(v5 + j) = v18;
    }
  }
  *(_QWORD *)(result + 16) = v9;
  *(_DWORD *)(result + 32) = v11;
  *(_BYTE *)(result + 36) = 0;
  return result;
}

uint64_t sub_2160D0090(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unint64_t v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  __int16 v75;
  _WORD *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _DWORD *v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unint64_t v94;
  int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  char v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  __int16 v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unint64_t v117;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 32);
  v11 = *(unsigned __int8 *)(a1 + 36);
  if ((a2 - 4) >= 0xFFFFFFFE)
  {
    v13 = *(unsigned __int8 *)(a9 + 2);
    v14 = *(unsigned __int8 *)(a9 + 3);
    v15 = *(unsigned int **)(a1 + 24);
    if ((a7 == 2 || *(_BYTE *)(a9 + 2)) && (a2 != 2 || a3 != 4))
    {
      v16 = 0;
      v17 = 0;
      if (a7 == 2)
        v13 = (2 * v13) | 1;
      if (a8)
        v18 = 16;
      else
        v18 = 32;
      do
      {
        if (a2 == 3 && !*(_DWORD *)(a4 + 4 * v16) || *(_DWORD *)(a5 + 4 * v16) == 5)
        {
          LOBYTE(v19) = 32;
        }
        else if (v13 == 1)
        {
          v20 = (v11 + 1);
          v11 = ((_BYTE)v11 + 1) & 7;
          v9 = (unsigned int *)((char *)v9 + (v20 >> 3));
          v21 = ~v10;
          v22 = bswap32(*v9) << (v20 & 7);
          if (v9 > v15)
            v9 = v15;
          v19 = v21 >> 31;
          v10 = v22;
        }
        else
        {
          v23 = __clz(v10 | 1);
          if (v10)
            v24 = v23;
          else
            v24 = v23 + 1;
          v25 = v10 << (v24 + 1) >> -(char)v24;
          if (!v24)
            v25 = 0;
          v19 = v25 + ~(-1 << v24);
          v26 = v11 + 2 * v24 + 1;
          v11 = ((_BYTE)v11 + 2 * (_BYTE)v24 + 1) & 7;
          v9 = (unsigned int *)((char *)v9 + (v26 >> 3));
          v10 = bswap32(*v9) << (v26 & 7);
          if (v9 > v15)
            v9 = v15;
          if (v18 <= v19)
            goto LABEL_2;
        }
        if (*(int *)(a6 + 4 * v16) >= 1)
        {
          v27 = 0;
          v28 = (_BYTE *)(a9 + 24 + 16 * v17);
          do
          {
            *v28 = v19;
            v28 += 16;
            ++v27;
          }
          while (v27 < *(_DWORD *)(a6 + 4 * v16));
          v17 += v27;
        }
        ++v16;
      }
      while (v16 != 4);
    }
    if ((a7 == 2 || v14) && (a2 != 2 || a3 != 4))
    {
      v29 = 0;
      v30 = 0;
      if (a7 == 2)
        v14 = (2 * v14) | 1;
      if (a8)
        v31 = 16;
      else
        v31 = 32;
      do
      {
        if (a2 == 3 && !*(_DWORD *)(a4 + 4 * v29) || *(_DWORD *)(a5 + 4 * v29) == 4)
        {
          LOBYTE(v32) = 32;
        }
        else if (v14 == 1)
        {
          v33 = (v11 + 1);
          v11 = ((_BYTE)v11 + 1) & 7;
          v9 = (unsigned int *)((char *)v9 + (v33 >> 3));
          v34 = ~v10;
          v35 = bswap32(*v9) << (v33 & 7);
          if (v9 > v15)
            v9 = v15;
          v32 = v34 >> 31;
          v10 = v35;
        }
        else
        {
          v36 = __clz(v10 | 1);
          if (v10)
            v37 = v36;
          else
            v37 = v36 + 1;
          v38 = v10 << (v37 + 1) >> -(char)v37;
          if (!v37)
            v38 = 0;
          v32 = v38 + ~(-1 << v37);
          v39 = v11 + 2 * v37 + 1;
          v11 = ((_BYTE)v11 + 2 * (_BYTE)v37 + 1) & 7;
          v9 = (unsigned int *)((char *)v9 + (v39 >> 3));
          v10 = bswap32(*v9) << (v39 & 7);
          if (v9 > v15)
            v9 = v15;
          if (v31 <= v32)
            goto LABEL_2;
        }
        if (*(int *)(a6 + 4 * v29) >= 1)
        {
          v40 = 0;
          v41 = (_BYTE *)(a9 + 25 + 16 * v30);
          do
          {
            *v41 = v32;
            v41 += 16;
            ++v40;
          }
          while (v40 < *(_DWORD *)(a6 + 4 * v29));
          v30 += v40;
        }
        ++v29;
      }
      while (v29 != 4);
    }
    v42 = 0;
    LODWORD(v43) = 0;
    v44 = a9 + 16;
    while (1)
    {
      if (a2 == 3 && !*(_DWORD *)(a4 + 4 * v42) || *(_DWORD *)(a5 + 4 * v42) == 5)
      {
        if (*(int *)(a6 + 4 * v42) >= 1)
        {
          v45 = 0;
          v46 = (_DWORD *)(a9 + 16 + 16 * (int)v43);
          do
          {
            *v46 = 0;
            v46 += 4;
            ++v45;
          }
          while (v45 < *(_DWORD *)(a6 + 4 * v42));
          LODWORD(v43) = v43 + v45;
        }
        goto LABEL_108;
      }
      if (*(int *)(a6 + 4 * v42) >= 1)
        break;
LABEL_108:
      if (++v42 == 4)
      {
        v81 = 0;
        LODWORD(v82) = 0;
        while (1)
        {
          if (a2 == 3 && !*(_DWORD *)(a4 + 4 * v81) || *(_DWORD *)(a5 + 4 * v81) == 4)
          {
            if (*(int *)(a6 + 4 * v81) >= 1)
            {
              v83 = 0;
              v84 = (_DWORD *)(a9 + 20 + 16 * (int)v82);
              do
              {
                *v84 = 0;
                v84 += 4;
                ++v83;
              }
              while (v83 < *(_DWORD *)(a6 + 4 * v81));
              LODWORD(v82) = v82 + v83;
            }
            goto LABEL_154;
          }
          if (*(int *)(a6 + 4 * v81) >= 1)
            break;
LABEL_154:
          if (++v81 == 4)
          {
            v12 = 0;
            goto LABEL_156;
          }
        }
        v85 = 0;
        v82 = (int)v82;
        while (2)
        {
          v86 = __clz(v10 | 1);
          if (!v10)
            ++v86;
          if (v86 <= 0xC)
          {
            v87 = v10 << (v86 + 1) >> -(char)v86;
            if (!v86)
              v87 = 0;
            v88 = v87 + ~(-1 << v86);
            v89 = v11 + 2 * v86 + 1;
            v90 = v89 & 7;
            v91 = (unsigned int *)((char *)v9 + (v89 >> 3));
            v92 = bswap32(*v91) << v90;
            if (v91 <= v15)
              v93 = v91;
            else
              v93 = v15;
LABEL_147:
            v112 = ((v88 + 1) >> 1) - ((v88 + 1) >> 1) * 2 * ((v88 + 1) & 1);
            v113 = v44 + 16 * v82;
            *(_WORD *)(v113 + 4) = v112;
            v114 = __clz(v92 | 1);
            if (!v92)
              ++v114;
            v115 = v92 << (v114 + 1) >> -(char)v114;
            if (!v114)
              v115 = 0;
            v116 = 1 << v114;
            v117 = v90 + 2 * v114 + 1;
            v11 = v117 & 7;
            v9 = (unsigned int *)((char *)v93 + (v117 >> 3));
            v10 = bswap32(*v9) << (v117 & 7);
            if (v9 > v15)
              v9 = v15;
            *(_WORD *)(v113 + 6) = ((v115 + v116) >> 1) - ((v115 + v116) >> 1) * 2 * ((v115 + v116) & 1);
            ++v82;
            if (++v85 >= *(_DWORD *)(a6 + 4 * v81))
              goto LABEL_154;
            continue;
          }
          break;
        }
        v94 = (v11 + 1);
        v95 = v94 & 7;
        v96 = (unsigned int *)((char *)v9 + (v94 >> 3));
        v97 = bswap32(*v96) << v95;
        if (v96 <= v15)
          v98 = v96;
        else
          v98 = v15;
        if ((v10 & 0x80000000) != 0)
        {
          v102 = 0;
        }
        else
        {
          v99 = 0;
          do
          {
            v100 = v95;
            v101 = v97;
            v102 = v99 + 1;
            v103 = (v95 + 1);
            v95 = ((_BYTE)v95 + 1) & 7;
            v98 = (unsigned int *)((char *)v98 + (v103 >> 3));
            v97 = bswap32(*v98) << (v103 & 7);
            if (v98 > v15)
              v98 = v15;
            if ((v101 & 0x80000000) != 0)
              break;
            v66 = v99++ >= 0x1F;
          }
          while (!v66);
          if (v102 - 1 > 0x17)
          {
            v104 = v97 >> (48 - v102);
            v105 = ((v100 + 1) & 7) + v102;
            v106 = v105 - 16;
            v90 = v105 & 7;
            v107 = (unsigned int *)((char *)v98 + (v106 >> 3));
            v108 = bswap32(*v107) << v90;
            if (v107 > v15)
              v107 = v15;
            v109 = *(unsigned int *)((char *)v107 + 2);
            v93 = (unsigned int *)((char *)v107 + 2);
            v92 = bswap32(v109) << v90;
            if (v93 > v15)
              v93 = v15;
            v110 = __PAIR64__(v104, v108) >> 16;
LABEL_146:
            v88 = v110 + ~(-1 << v102);
            goto LABEL_147;
          }
        }
        v110 = v97 >> -(char)v102;
        v111 = v95 + v102;
        v90 = v111 & 7;
        v93 = (unsigned int *)((char *)v98 + (v111 >> 3));
        v92 = bswap32(*v93) << (v111 & 7);
        if (v93 > v15)
          v93 = v15;
        goto LABEL_146;
      }
    }
    v47 = 0;
    v43 = (int)v43;
    while (1)
    {
      v48 = __clz(v10 | 1);
      if (!v10)
        ++v48;
      if (v48 <= 0xC)
      {
        v49 = v10 << (v48 + 1) >> -(char)v48;
        if (!v48)
          v49 = 0;
        v50 = v49 + ~(-1 << v48);
        v51 = v11 + 2 * v48 + 1;
        v52 = v51 & 7;
        v53 = (unsigned int *)((char *)v9 + (v51 >> 3));
        v54 = bswap32(*v53) << v52;
        if (v53 <= v15)
          v55 = v53;
        else
          v55 = v15;
        goto LABEL_101;
      }
      v56 = (v11 + 1);
      v57 = v56 & 7;
      v58 = (unsigned int *)((char *)v9 + (v56 >> 3));
      v59 = bswap32(*v58) << v57;
      v60 = v58 <= v15 ? v58 : v15;
      if ((v10 & 0x80000000) != 0)
        break;
      v61 = 0;
      do
      {
        v62 = v57;
        v63 = v59;
        v64 = v61 + 1;
        v65 = (v57 + 1);
        v57 = ((_BYTE)v57 + 1) & 7;
        v60 = (unsigned int *)((char *)v60 + (v65 >> 3));
        v59 = bswap32(*v60) << (v65 & 7);
        if (v60 > v15)
          v60 = v15;
        if ((v63 & 0x80000000) != 0)
          break;
        v66 = v61++ >= 0x1F;
      }
      while (!v66);
      if (v64 - 1 <= 0x17)
        goto LABEL_98;
      v67 = v59 >> (48 - v64);
      v68 = ((v62 + 1) & 7) + v64;
      v69 = v68 - 16;
      v52 = v68 & 7;
      v70 = (unsigned int *)((char *)v60 + (v69 >> 3));
      v71 = bswap32(*v70) << v52;
      if (v70 > v15)
        v70 = v15;
      v72 = *(unsigned int *)((char *)v70 + 2);
      v55 = (unsigned int *)((char *)v70 + 2);
      v54 = bswap32(v72) << v52;
      if (v55 > v15)
        v55 = v15;
      v73 = __PAIR64__(v67, v71) >> 16;
LABEL_100:
      v50 = v73 + ~(-1 << v64);
LABEL_101:
      v75 = ((v50 + 1) >> 1) - ((v50 + 1) >> 1) * 2 * ((v50 + 1) & 1);
      v76 = (_WORD *)(v44 + 16 * v43);
      *v76 = v75;
      v77 = __clz(v54 | 1);
      if (!v54)
        ++v77;
      v78 = v54 << (v77 + 1) >> -(char)v77;
      if (!v77)
        v78 = 0;
      v79 = 1 << v77;
      v80 = v52 + 2 * v77 + 1;
      v11 = v80 & 7;
      v9 = (unsigned int *)((char *)v55 + (v80 >> 3));
      v10 = bswap32(*v9) << (v80 & 7);
      if (v9 > v15)
        v9 = v15;
      v76[1] = ((v78 + v79) >> 1) - ((v78 + v79) >> 1) * 2 * ((v78 + v79) & 1);
      ++v43;
      if (++v47 >= *(_DWORD *)(a6 + 4 * v42))
        goto LABEL_108;
    }
    v64 = 0;
LABEL_98:
    v73 = v59 >> -(char)v64;
    v74 = v57 + v64;
    v52 = v74 & 7;
    v55 = (unsigned int *)((char *)v60 + (v74 >> 3));
    v54 = bswap32(*v55) << (v74 & 7);
    if (v55 > v15)
      v55 = v15;
    goto LABEL_100;
  }
LABEL_2:
  v12 = 4294958327;
LABEL_156:
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 36) = v11;
  return v12;
}

uint64_t sub_2160D0854(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned __int8 a9, uint64_t a10, char a11, int a12)
{
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t result;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  _OWORD *v45;
  _WORD *v46;
  uint64_t v47;
  _WORD *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t i;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t j;
  int v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[32];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a4 + 29))
    v18 = 1;
  else
    v18 = *(unsigned __int8 *)(a4 + 31) == 2;
  v19 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 40) + 1);
  v90 = a7;
  if (!a2)
  {
    v29 = 0;
    v30 = 16;
    goto LABEL_24;
  }
  v20 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 40) + 1);
  v21 = *(_QWORD *)(a4 + 128);
  v22 = 5;
  if (v21 && (*(_BYTE *)(a4 + 185) & 1) != 0)
  {
    v23 = *(_BYTE *)(a4 + 31) == 1 && *(_BYTE *)(v21 + 144) == 1;
    v24 = v23;
    v23 = (v24 & *(_BYTE *)(a4 + 16)) == 0;
    v22 = 5;
    if (!v23)
      v22 = 13;
  }
  if (!a6)
  {
    v25 = 0;
    v26 = 0;
    if (a7)
      goto LABEL_17;
LABEL_20:
    v28 = 0;
    v27 = 0;
    goto LABEL_21;
  }
  v25 = *(unsigned __int8 *)(a6 + v22);
  v26 = 1;
  if (!a7)
    goto LABEL_20;
LABEL_17:
  v27 = *(unsigned __int8 *)(a7 + 10);
  v28 = 1;
LABEL_21:
  if (sub_2160D4C84(a1, byte_2160F4780[(unint64_t)(v27 + v25 + (v28 & v26)) >> (v28 & v26)], a10, 0x10u) == 999)return 4294958327;
  v30 = 15;
  v29 = 1;
  a7 = v90;
  v19 = v20;
LABEL_24:
  v87 = v29;
  v91 = a1;
  if (a3)
  {
    v32 = v92;
    memset(v92, 0, sizeof(v92));
  }
  else
  {
    v32 = (_OWORD *)(a10 + 32);
  }
  v33 = 0;
  v34 = (uint64_t)v32 + 2 * v87;
  v85 = v19;
  v86 = v18;
  v35 = 48;
  if (!v19)
    v35 = 0;
  v36 = 1422194;
  if (v18)
    v36 = 1422418;
  v89 = (_BYTE *)(a4 + 1422192);
  v37 = a4 + v36 + v87 + v35;
  do
  {
    if (((a8 >> (v33 >> 2)) & 1) != 0)
    {
      v38 = sub_2160B160C(v33, a5, a6, a7, a4);
      v39 = sub_2160D4C84(v91, v38, v34, v30);
      if (v39 == 999)
        return 4294958327;
      *(_BYTE *)(a5 + v33) = v39;
      a7 = v90;
      if (!a3 && *v89)
      {
        v40 = 0;
        do
        {
          *(_WORD *)(v34 + 2 * v40) *= *(unsigned __int8 *)(v37 + v40);
          ++v40;
        }
        while (16 - (_DWORD)v87 != v40);
      }
    }
    v34 += 32;
    ++v33;
  }
  while (v33 != 16);
  if (a3)
  {
    v41 = 0;
    v42 = a10 + 2 * v87 + 32;
    v43 = v92;
    do
    {
      v44 = 0;
      v45 = v43;
      v46 = (_WORD *)v42;
      do
      {
        v47 = 0;
        v48 = v46;
        do
        {
          *v48 = *(_WORD *)((char *)v45 + v47);
          v48 += 4;
          v47 += 2;
        }
        while (v47 != 32);
        ++v44;
        ++v46;
        v45 += 2;
      }
      while (v44 != 4);
      v42 += 128;
      ++v41;
      v43 += 8;
    }
    while (v41 != 4);
  }
  v49 = a11 & 0xFD;
  if (v49 == 1 && a12)
    return 0;
  if (a12 || v49 != 1)
  {
    v50 = a9;
    if (!a9 && v49 != 1)
      return 0;
  }
  else
  {
    v50 = a9;
    if (!a9)
      return 0;
  }
  if (sub_2160D4C84(v91, 0, a10 + 800, 4u) == 999
    || sub_2160D4C84(v91, 0, a10 + 808, 4u) == 999)
  {
    return 4294958327;
  }
  if (*v89)
  {
    v51 = 0;
    v52 = 64;
    if (!v85)
      v52 = 16;
    v53 = 1422194;
    if (v18)
      v53 = 1422418;
    v54 = (unsigned __int8 *)(a4 + v53 + v52);
    do
    {
      *(_WORD *)(a10 + 800 + v51) *= *v54;
      v51 += 2;
    }
    while (v51 != 8);
    v55 = 0;
    v56 = 80;
    if (!v85)
      v56 = 32;
    v57 = 1422194;
    if (v18)
      v57 = 1422418;
    v58 = (unsigned __int8 *)(a4 + v57 + v56);
    do
    {
      *(_WORD *)(a10 + 808 + v55) *= *v58;
      v55 += 2;
    }
    while (v55 != 8);
  }
  if (v50 != 1)
  {
    v59 = 0;
    v60 = a6 + 16;
    if (!a6)
      v60 = 0;
    v88 = v60;
    if (v90)
      v61 = v90 + 16;
    else
      v61 = 0;
    v62 = *(_QWORD *)(a4 + 168);
    if (v62)
      v63 = v62 + 96;
    else
      v63 = 0;
    if (a5)
      v64 = a5 + 16;
    else
      v64 = 0;
    v65 = 64;
    if (!v85)
      v65 = 16;
    v66 = 1422194;
    if (v18)
      v66 = 1422418;
    v67 = a10 + 546;
    v68 = a4 + v66 + v65 + 1;
    while (1)
    {
      v69 = sub_2160B1700(v59, v64, v88, v61, v63, a4);
      v70 = sub_2160D4C84(v91, v69, v67, 0xFu);
      if (v70 == 999)
        break;
      *(_BYTE *)(v64 + v59) = v70;
      if (*v89)
      {
        for (i = 0; i != 15; ++i)
          *(_WORD *)(v67 + 2 * i) *= *(unsigned __int8 *)(v68 + i);
      }
      v67 += 32;
      if (++v59 == 4)
      {
        v72 = 0;
        if (a6)
          v73 = a6 + 20;
        else
          v73 = 0;
        if (v90)
          v74 = v90 + 20;
        else
          v74 = 0;
        v75 = *(_QWORD *)(a4 + 168);
        if (v75)
          v76 = v75 + 100;
        else
          v76 = 0;
        if (a5)
          v77 = a5 + 20;
        else
          v77 = 0;
        v78 = 80;
        if (!v85)
          v78 = 32;
        v79 = 1422194;
        if (v86)
          v79 = 1422418;
        v80 = a10 + 674;
        v81 = a4 + v79 + v78 + 1;
        while (1)
        {
          v82 = sub_2160B1700(v72, v77, v73, v74, v76, a4);
          v83 = sub_2160D4C84(v91, v82, v80, 0xFu);
          if (v83 == 999)
            break;
          *(_BYTE *)(v77 + v72) = v83;
          if (*v89)
          {
            for (j = 0; j != 15; ++j)
              *(_WORD *)(v80 + 2 * j) *= *(unsigned __int8 *)(v81 + j);
          }
          result = 0;
          v80 += 32;
          if (++v72 == 4)
            return result;
        }
        return 4294958327;
      }
    }
    return 4294958327;
  }
  return 0;
}

uint64_t sub_2160D0ECC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  uint64_t v26;
  int v27;
  uint64_t result;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  int v69;
  unint64_t v70;
  char v71;
  unsigned int *v72;
  unsigned int v73;
  int v74;
  int v75;
  unint64_t v76;
  int v77;
  _BOOL8 v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned __int8 v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  char v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  void *v110;
  __int16 v111;

  v4 = *(unsigned __int8 *)(a2 + 28);
  if (v4 != 6 && v4 != 1)
    return 4294958327;
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(unsigned __int8 **)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(a1 + 32);
  v13 = __clz(v12 | 1);
  if (!v12)
    ++v13;
  v14 = (v12 << (v13 + 1)) >> -(char)v13;
  if (!v13)
    v14 = 0;
  v15 = v14 + ~(-1 << v13);
  v16 = *(unsigned __int8 *)(a1 + 36) + 2 * v13 + 1;
  v17 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v16 >> 3));
  if ((unint64_t)v17 <= v11)
    v11 = *(_QWORD *)(a1 + 16) + (v16 >> 3);
  v18 = v15 - 23;
  if (v15 <= 0x16)
    v18 = v15;
  v19 = *v17;
  if (v15 <= 0x16)
    v20 = 3;
  else
    v20 = 0;
  v21 = (*(_BYTE *)(a1 + 36) + 2 * v13 + 1) & 7;
  *(_QWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 32) = bswap32(v19) << v21;
  *(_BYTE *)(a1 + 36) = v21;
  *(_BYTE *)v9 = v15;
  *(_BYTE *)(v9 + 1) = v20;
  *(_BYTE *)(v9 + 2) = v18;
  v22 = v18;
  if (v15 >= 0x17 && v18 == 25)
  {
    sub_2160CFFB4(a1, v10, 0, 0);
    result = 0;
    v66 = *(_QWORD *)(a2 + 176);
    if (v66)
      v67 = (_QWORD *)(v66 + 80);
    else
      v67 = 0;
    v67[1] = 0x1010101010101010;
    v67[2] = 0x1010101010101010;
    *v67 = 0x1010101010101010;
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + 272) = 0;
    *(_BYTE *)(v9 + 54) = 0;
    return result;
  }
  *(_BYTE *)(v9 + 3) = 0;
  v110 = (void *)v10;
  if (!*(_BYTE *)(a2 + 184) || (v26 = *(_QWORD *)(a2 + 40), *(_BYTE *)(v26 + 1)) || *(_BYTE *)(v26 + 2))
  {
    v27 = 0;
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 32) >> 31;
    v70 = *(unsigned __int8 *)(a1 + 36) + 1;
    v71 = v70 & 7;
    v72 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v70 >> 3));
    v73 = bswap32(*v72) << (v70 & 7);
    if ((unint64_t)v72 > *(_QWORD *)(a1 + 24))
      v72 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v72;
    *(_DWORD *)(a1 + 32) = v73;
    *(_BYTE *)(a1 + 36) = v71;
    *(_BYTE *)(v9 + 3) = v27;
  }
  result = sub_2160CC688(v20, v22, v27, (uint64_t)v8, *(unsigned __int8 *)(a2 + 31));
  if (!(_DWORD)result)
  {
    v29 = v8[272];
    *(_BYTE *)(*(_QWORD *)(a2 + 176) + 126) = *(_BYTE *)(*(_QWORD *)(a2 + 48) + 272);
    v30 = *((_DWORD *)v8 + 2);
    if (v30 != 3)
    {
      if (((v31 = *(_QWORD *)(a2 + 40), *(_BYTE *)(v31 + 1)) || *(_BYTE *)(v31 + 2) == 25) && v29 == 4)
      {
        v32 = *(unsigned int **)(a1 + 24);
        v33 = *(_DWORD *)(a1 + 32);
        v34 = __clz(v33 | 1);
        if (!v33)
          ++v34;
        v35 = (v33 << (v34 + 1)) >> -(char)v34;
        if (v34)
          v36 = v35;
        else
          v36 = 0;
        v37 = v36 + ~(-1 << v34);
        v38 = *(unsigned __int8 *)(a1 + 36) + 2 * v34 + 1;
        v39 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v38 >> 3));
        v40 = *v39;
        *(_DWORD *)(v9 + 4) = v37;
        v41 = v38 & 7;
        v42 = bswap32(v40) << v41;
        if (v39 > v32)
          v39 = v32;
        v43 = __clz(v42 | 1);
        if (!v42)
          ++v43;
        v44 = v42 << (v43 + 1) >> -(char)v43;
        if (!v43)
          v44 = 0;
        v45 = v44 + ~(-1 << v43);
        v46 = v41 + 2 * v43 + 1;
        v47 = v46 & 7;
        v48 = (unsigned int *)((char *)v39 + (v46 >> 3));
        v49 = bswap32(*v48) << (v46 & 7);
        if (v48 > v32)
          v48 = v32;
        *(_DWORD *)(v9 + 8) = v45;
        v50 = __clz(v49 | 1);
        if (!v49)
          ++v50;
        v51 = v49 << (v50 + 1) >> -(char)v50;
        if (!v50)
          v51 = 0;
        v52 = v51 + ~(-1 << v50);
        v53 = v47 + 2 * v50 + 1;
        v54 = v53 & 7;
        v55 = (unsigned int *)((char *)v48 + (v53 >> 3));
        v56 = bswap32(*v55) << (v53 & 7);
        if (v55 > v32)
          v55 = v32;
        *(_DWORD *)(v9 + 12) = v52;
        v57 = __clz(v56 | 1);
        if (!v56)
          ++v57;
        v58 = v54 + 2 * v57 + 1;
        v59 = (unsigned int *)((char *)v55 + (v58 >> 3));
        v60 = bswap32(*v59);
        if (v59 <= v32)
          v32 = v59;
        v61 = v58 & 7;
        v62 = v60 << (v58 & 7);
        v63 = ~(-1 << v57);
        v64 = v56 << (v57 + 1) >> -(char)v57;
        if (v57)
          v65 = v64;
        else
          v65 = 0;
        *(_DWORD *)(v9 + 16) = v65 + v63;
        *(_QWORD *)(a1 + 16) = v32;
        *(_DWORD *)(a1 + 32) = v62;
        *(_BYTE *)(a1 + 36) = v61;
        result = sub_2160CC9E0(*v8, *(unsigned __int8 *)(v9 + 1), v9 + 4, v9 + 20, (int *)(v9 + 36), (uint64_t)(v8 + 16), 0, 3);
        if ((_DWORD)result)
          return result;
        sub_2160D15A8(a1, v20, v9 + 4, v9 + 20, v9 + 36, (uint64_t)v8);
      }
      else
      {
        if ((a3 & 0xFFFFFFFD) == 1)
        {
          v68 = a3;
          v69 = a4;
        }
        else
        {
          v68 = 0;
          v69 = 0;
        }
        sub_2160D1AC4(a1, (uint64_t)v8, v68, v69);
      }
      if (v30 == 2)
      {
        v74 = 0;
        v75 = 1;
LABEL_88:
        v111 = 0;
        result = sub_2160CC930(*(unsigned __int8 *)(v9 + 1), *(unsigned __int8 *)(v9 + 2), v74, &v111, (char *)&v111 + 1, 0, 0);
        if ((_DWORD)result)
          return result;
        v86 = v111;
        *(_BYTE *)(v9 + 53) = v111;
        v87 = HIBYTE(v111);
        *(_BYTE *)(v9 + 52) = HIBYTE(v111);
        if (((v74 < 1) & ~v75) != 0)
        {
          LOBYTE(v104) = 0;
LABEL_113:
          *(_BYTE *)(v9 + 54) = v104;
          if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= *(int *)(a1 + 12))
            return 0;
          else
            return 4294958327;
        }
        bzero(v110, 0x330uLL);
        v88 = *(_DWORD *)(a1 + 32);
        v89 = *(unsigned __int8 *)(a1 + 36);
        v90 = __clz(v88 | 1);
        if (v88)
          v91 = v90;
        else
          v91 = v90 + 1;
        v92 = (v88 << (v91 + 1)) >> -(char)v91;
        if (v91)
          v93 = v92;
        else
          v93 = 0;
        v94 = v89 + 2 * v91 + 1;
        v95 = (v89 + 2 * v91 + 1) & 7;
        v96 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v94 >> 3));
        v97 = bswap32(*v96) << (v94 & 7);
        if ((unint64_t)v96 > *(_QWORD *)(a1 + 24))
          v96 = *(unsigned int **)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v96;
        *(_DWORD *)(a1 + 32) = v97;
        *(_BYTE *)(a1 + 36) = v95;
        v98 = *(_QWORD *)(a2 + 176);
        if (v98)
          v99 = v98 + 80;
        else
          v99 = 0;
        v100 = *(_QWORD *)(a2 + 128);
        v101 = *(_QWORD *)(a2 + 136);
        if (v100)
          v102 = v100 + 80;
        else
          v102 = 0;
        if (v101)
          v103 = v101 + 80;
        else
          v103 = 0;
        result = sub_2160D0854(a1, v75, *(unsigned __int8 *)(v9 + 3), a2, v99, v102, v103, v87, v86, (uint64_t)v110, 0, 0);
        if (!(_DWORD)result)
        {
          v104 = ((v93 + (1 << v91)) >> 1) - ((v93 + (1 << v91)) >> 1) * 2 * ((v93 + (1 << v91)) & 1);
          goto LABEL_113;
        }
        return result;
      }
    }
    v76 = *(_QWORD *)(a1 + 24);
    v77 = *(_DWORD *)(a1 + 32);
    v79 = v15 > 0x16 && v22 == 0;
    v80 = __clz(v77 | 1);
    if (!v77)
      ++v80;
    v81 = (v77 << (v80 + 1)) >> -(char)v80;
    if (v80)
      v82 = v81;
    else
      v82 = 0;
    v83 = (*(_BYTE *)(a1 + 36) + 2 * (_BYTE)v80 + 1) & 7;
    v84 = (unsigned int *)(*(_QWORD *)(a1 + 16) + ((unint64_t)(*(unsigned __int8 *)(a1 + 36) + 2 * v80 + 1) >> 3));
    v85 = bswap32(*v84) << v83;
    if ((unint64_t)v84 > v76)
      v84 = *(unsigned int **)(a1 + 24);
    if ((a3 & 0xFFFFFFFD) == 1 && a4)
    {
      v74 = 0;
LABEL_87:
      v75 = 0;
      *(_QWORD *)(a1 + 16) = v84;
      *(_DWORD *)(a1 + 32) = v85;
      *(_BYTE *)(a1 + 36) = v83;
      goto LABEL_88;
    }
    v105 = v82 + ~(-1 << v80);
    if (v8[1])
    {
      if (v105 <= 0x2F)
      {
        v106 = (char *)&unk_2160F8D00 + 192 * v79;
        goto LABEL_120;
      }
    }
    else if (v105 <= 0xF)
    {
      v106 = (char *)&unk_2160F8C80 + 64 * v79;
LABEL_120:
      v74 = *(_DWORD *)&v106[4 * v105];
      if ((v74 & 0xF) != 0)
      {
        if (!*(_BYTE *)(a2 + 184))
          LOBYTE(v79) = 1;
        if (!v79 && v8[272] <= 4u)
        {
          v107 = *(_QWORD *)(a2 + 40);
          if (*(_BYTE *)(v107 + 1) != 3 || *(_BYTE *)(v107 + 2) || **(_BYTE **)(a2 + 48))
          {
            v108 = v85 >> 31;
            v109 = (v83 + 1);
            LOBYTE(v83) = (v83 + 1) & 7;
            v84 = (unsigned int *)((char *)v84 + (v109 >> 3));
            v85 = bswap32(*v84) << (v109 & 7);
            if ((unint64_t)v84 > v76)
              v84 = *(unsigned int **)(a1 + 24);
            *(_BYTE *)(v9 + 3) = v108;
          }
        }
      }
      goto LABEL_87;
    }
    return 4294958327;
  }
  return result;
}

uint64_t sub_2160D15A8(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  __int16 v43;
  _WORD *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unint64_t v64;
  int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  char v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  __int16 v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;

  if ((a2 - 4) >= 0xFFFFFFFE)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    v8 = a6 + 16;
    v9 = *(unsigned __int8 *)(result + 36);
    v10 = *(_DWORD *)(result + 32);
    v12 = *(unsigned int **)(result + 16);
    v11 = *(unsigned int **)(result + 24);
    while (1)
    {
      if (a2 == 3 && !*(_DWORD *)(a3 + 4 * v6) || *(_DWORD *)(a4 + 4 * v6) == 5)
      {
        if (*(int *)(a5 + 4 * v6) >= 1)
        {
          v13 = 0;
          v14 = (_DWORD *)(v8 + 16 * (int)v7);
          do
          {
            *v14 = 0;
            v14 += 4;
            ++v13;
          }
          while (v13 < *(_DWORD *)(a5 + 4 * v6));
          LODWORD(v7) = v7 + v13;
        }
        goto LABEL_47;
      }
      if (*(int *)(a5 + 4 * v6) >= 1)
        break;
LABEL_47:
      if (++v6 == 4)
      {
        v49 = 0;
        v50 = 0;
        v51 = a6 + 20;
        while (a2 == 3 && !*(_DWORD *)(a3 + 4 * v49) || *(_DWORD *)(a4 + 4 * v49) == 4)
        {
          if (*(int *)(a5 + 4 * v49) >= 1)
          {
            v52 = 0;
            v53 = (_DWORD *)(v51 + 16 * v50);
            do
            {
              *v53 = 0;
              v53 += 4;
              ++v52;
            }
            while (v52 < *(_DWORD *)(a5 + 4 * v49));
            v50 += v52;
          }
LABEL_94:
          if (++v49 == 4)
          {
            *(_QWORD *)(result + 16) = v12;
            *(_DWORD *)(result + 32) = v10;
            *(_BYTE *)(result + 36) = v9;
            return result;
          }
        }
        if (*(int *)(a5 + 4 * v49) < 1)
          goto LABEL_94;
        v54 = 0;
        v55 = v50;
        while (2)
        {
          v56 = __clz(v10 | 1);
          if (!v10)
            ++v56;
          if (v56 <= 0xC)
          {
            v57 = v10 << (v56 + 1) >> -(char)v56;
            if (!v56)
              v57 = 0;
            v58 = v57 + ~(-1 << v56);
            v59 = v9 + 2 * v56 + 1;
            v60 = v59 & 7;
            v61 = (unsigned int *)((char *)v12 + (v59 >> 3));
            v62 = bswap32(*v61) << v60;
            if (v61 <= v11)
              v63 = v61;
            else
              v63 = v11;
LABEL_86:
            v82 = ((v58 + 1) >> 1) - ((v58 + 1) >> 1) * 2 * ((v58 + 1) & 1);
            v83 = v8 + 16 * v55;
            *(_WORD *)(v83 + 4) = v82;
            v84 = __clz(v62 | 1);
            if (!v62)
              ++v84;
            v85 = v62 << (v84 + 1) >> -(char)v84;
            if (!v84)
              v85 = 0;
            v86 = 1 << v84;
            v87 = v60 + 2 * v84 + 1;
            v9 = v87 & 7;
            v12 = (unsigned int *)((char *)v63 + (v87 >> 3));
            v10 = bswap32(*v12) << (v87 & 7);
            if (v12 > v11)
              v12 = v11;
            *(_WORD *)(v83 + 6) = ((v85 + v86) >> 1) - ((v85 + v86) >> 1) * 2 * ((v85 + v86) & 1);
            ++v55;
            if (++v54 >= *(_DWORD *)(a5 + 4 * v49))
            {
              v50 = v55;
              goto LABEL_94;
            }
            continue;
          }
          break;
        }
        v64 = (v9 + 1);
        v65 = v64 & 7;
        v66 = (unsigned int *)((char *)v12 + (v64 >> 3));
        v67 = bswap32(*v66) << v65;
        if (v66 <= v11)
          v68 = v66;
        else
          v68 = v11;
        if ((v10 & 0x80000000) != 0)
        {
          v72 = 0;
        }
        else
        {
          v69 = 0;
          do
          {
            v70 = v65;
            v71 = v67;
            v72 = v69 + 1;
            v73 = (v65 + 1);
            v65 = ((_BYTE)v65 + 1) & 7;
            v68 = (unsigned int *)((char *)v68 + (v73 >> 3));
            v67 = bswap32(*v68) << (v73 & 7);
            if (v68 > v11)
              v68 = v11;
            if ((v71 & 0x80000000) != 0)
              break;
            v34 = v69++ >= 0x1F;
          }
          while (!v34);
          if (v72 - 1 > 0x17)
          {
            v74 = v67 >> (48 - v72);
            v75 = ((v70 + 1) & 7) + v72;
            v76 = v75 - 16;
            v60 = v75 & 7;
            v77 = (unsigned int *)((char *)v68 + (v76 >> 3));
            v78 = bswap32(*v77) << v60;
            if (v77 > v11)
              v77 = v11;
            v79 = *(unsigned int *)((char *)v77 + 2);
            v63 = (unsigned int *)((char *)v77 + 2);
            v62 = bswap32(v79) << v60;
            if (v63 > v11)
              v63 = v11;
            v80 = __PAIR64__(v74, v78) >> 16;
LABEL_85:
            v58 = v80 + ~(-1 << v72);
            goto LABEL_86;
          }
        }
        v80 = v67 >> -(char)v72;
        v81 = v65 + v72;
        v60 = v81 & 7;
        v63 = (unsigned int *)((char *)v68 + (v81 >> 3));
        v62 = bswap32(*v63) << (v81 & 7);
        if (v63 > v11)
          v63 = v11;
        goto LABEL_85;
      }
    }
    v15 = 0;
    v7 = (int)v7;
    while (1)
    {
      v16 = __clz(v10 | 1);
      if (!v10)
        ++v16;
      if (v16 <= 0xC)
      {
        v17 = v10 << (v16 + 1) >> -(char)v16;
        if (!v16)
          v17 = 0;
        v18 = v17 + ~(-1 << v16);
        v19 = v9 + 2 * v16 + 1;
        v20 = v19 & 7;
        v21 = (unsigned int *)((char *)v12 + (v19 >> 3));
        v22 = bswap32(*v21) << v20;
        if (v21 <= v11)
          v23 = v21;
        else
          v23 = v11;
        goto LABEL_40;
      }
      v24 = (v9 + 1);
      v25 = v24 & 7;
      v26 = (unsigned int *)((char *)v12 + (v24 >> 3));
      v27 = bswap32(*v26) << v25;
      v28 = v26 <= v11 ? v26 : v11;
      if ((v10 & 0x80000000) != 0)
        break;
      v29 = 0;
      do
      {
        v30 = v25;
        v31 = v27;
        v32 = v29 + 1;
        v33 = (v25 + 1);
        v25 = ((_BYTE)v25 + 1) & 7;
        v28 = (unsigned int *)((char *)v28 + (v33 >> 3));
        v27 = bswap32(*v28) << (v33 & 7);
        if (v28 > v11)
          v28 = v11;
        if ((v31 & 0x80000000) != 0)
          break;
        v34 = v29++ >= 0x1F;
      }
      while (!v34);
      if (v32 - 1 <= 0x17)
        goto LABEL_37;
      v35 = v27 >> (48 - v32);
      v36 = ((v30 + 1) & 7) + v32;
      v37 = v36 - 16;
      v20 = v36 & 7;
      v38 = (unsigned int *)((char *)v28 + (v37 >> 3));
      v39 = bswap32(*v38) << v20;
      if (v38 > v11)
        v38 = v11;
      v40 = *(unsigned int *)((char *)v38 + 2);
      v23 = (unsigned int *)((char *)v38 + 2);
      v22 = bswap32(v40) << v20;
      if (v23 > v11)
        v23 = v11;
      v41 = __PAIR64__(v35, v39) >> 16;
LABEL_39:
      v18 = v41 + ~(-1 << v32);
LABEL_40:
      v43 = ((v18 + 1) >> 1) - ((v18 + 1) >> 1) * 2 * ((v18 + 1) & 1);
      v44 = (_WORD *)(v8 + 16 * v7);
      *v44 = v43;
      v45 = __clz(v22 | 1);
      if (!v22)
        ++v45;
      v46 = v22 << (v45 + 1) >> -(char)v45;
      if (!v45)
        v46 = 0;
      v47 = 1 << v45;
      v48 = v20 + 2 * v45 + 1;
      v9 = v48 & 7;
      v12 = (unsigned int *)((char *)v23 + (v48 >> 3));
      v10 = bswap32(*v12) << (v48 & 7);
      if (v12 > v11)
        v12 = v11;
      v44[1] = ((v46 + v47) >> 1) - ((v46 + v47) >> 1) * 2 * ((v46 + v47) & 1);
      ++v7;
      if (++v15 >= *(_DWORD *)(a5 + 4 * v6))
        goto LABEL_47;
    }
    v32 = 0;
LABEL_37:
    v41 = v27 >> -(char)v32;
    v42 = v25 + v32;
    v20 = v42 & 7;
    v23 = (unsigned int *)((char *)v28 + (v42 >> 3));
    v22 = bswap32(*v23) << (v42 & 7);
    if (v23 > v11)
      v23 = v11;
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_2160D1AC4(uint64_t result, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  unsigned int v6;
  _BYTE *v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  uint64_t i;
  unint64_t v13;
  signed int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t k;
  unint64_t v18;
  signed int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unint64_t v72;
  int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  char v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  unsigned int *v95;
  uint64_t j;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t m;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 <= 7 && ((1 << v4) & 0x86) != 0)
  {
    v6 = *(unsigned __int8 *)(a2 + 1);
    v7 = (_BYTE *)(result + 36);
    v8 = *(unsigned __int8 *)(result + 36);
    v9 = *(unsigned int **)(result + 16);
    v10 = *(unsigned int **)(result + 24);
    v11 = *(_DWORD *)(result + 32);
    if ((a3 & 0xFFFFFFFD) == 1)
    {
      if (v4 == 1)
      {
        for (i = 0; i != 16; ++i)
        {
          v13 = (v8 + 1);
          v8 = ((_BYTE)v8 + 1) & 7;
          v9 = (unsigned int *)((char *)v9 + (v13 >> 3));
          v14 = bswap32(*v9) << (v13 & 7);
          if (v9 > v10)
            v9 = v10;
          if ((v11 & 0x80000000) == 0)
          {
            v15 = v14 >> 29;
            v16 = (v8 + 3);
            v8 = ((_BYTE)v8 + 3) & 7;
            v9 = (unsigned int *)((char *)v9 + (v16 >> 3));
            v14 = bswap32(*v9) << (v16 & 7);
            if (v9 > v10)
              v9 = v10;
            *(_BYTE *)(a2 + i + 310) = v15;
          }
          *(_BYTE *)(a2 + i + 290) = v11 < 0;
          v11 = v14;
        }
      }
      else
      {
        v14 = *(_DWORD *)(result + 32);
      }
      if (v4 == 7)
      {
        for (j = 0; j != 4; ++j)
        {
          v97 = (v8 + 1);
          v8 = ((_BYTE)v8 + 1) & 7;
          v9 = (unsigned int *)((char *)v9 + (v97 >> 3));
          v98 = bswap32(*v9) << (v97 & 7);
          if (v9 > v10)
            v9 = v10;
          if ((v14 & 0x80000000) == 0)
          {
            v99 = v98 >> 29;
            v100 = (v8 + 3);
            v8 = ((_BYTE)v8 + 3) & 7;
            v9 = (unsigned int *)((char *)v9 + (v100 >> 3));
            v98 = bswap32(*v9) << (v100 & 7);
            if (v9 > v10)
              v9 = v10;
            *(_BYTE *)(a2 + j + 326) = v99;
          }
          *(_BYTE *)(a2 + j + 306) = v14 < 0;
          v14 = v98;
        }
      }
      else
      {
        v98 = v14;
      }
      LOBYTE(v109) = 0;
      if (a4 != 1 && v6)
      {
        v110 = __clz(v98 | 1);
        if (!v98)
          ++v110;
        v111 = v98 << (v110 + 1) >> -(char)v110;
        if (!v110)
          v111 = 0;
        v109 = v111 + ~(-1 << v110);
        v112 = v8 + 2 * v110 + 1;
        LOBYTE(v8) = v112 & 7;
        v9 = (unsigned int *)((char *)v9 + (v112 >> 3));
        v98 = bswap32(*v9) << (v112 & 7);
        if (v9 > v10)
          v9 = v10;
      }
      *(_BYTE *)(a2 + 289) = v109;
      goto LABEL_148;
    }
    if (v4 == 1)
    {
      for (k = 0; k != 16; ++k)
      {
        v18 = (v8 + 1);
        v8 = ((_BYTE)v8 + 1) & 7;
        v9 = (unsigned int *)((char *)v9 + (v18 >> 3));
        v19 = bswap32(*v9) << (v18 & 7);
        if (v9 > v10)
          v9 = v10;
        if ((v11 & 0x80000000) == 0)
        {
          v20 = v19 >> 29;
          v21 = (v8 + 3);
          v8 = ((_BYTE)v8 + 3) & 7;
          v9 = (unsigned int *)((char *)v9 + (v21 >> 3));
          v19 = bswap32(*v9) << (v21 & 7);
          if (v9 > v10)
            v9 = v10;
          *(_BYTE *)(a2 + k + 310) = v20;
        }
        *(_BYTE *)(a2 + k + 290) = v11 < 0;
        v11 = v19;
      }
    }
    else
    {
      v19 = *(_DWORD *)(result + 32);
    }
    if (v4 == 7)
    {
      for (m = 0; m != 4; ++m)
      {
        v102 = (v8 + 1);
        v8 = ((_BYTE)v8 + 1) & 7;
        v9 = (unsigned int *)((char *)v9 + (v102 >> 3));
        v98 = bswap32(*v9) << (v102 & 7);
        if (v9 > v10)
          v9 = v10;
        if ((v19 & 0x80000000) == 0)
        {
          v103 = v98 >> 29;
          v104 = (v8 + 3);
          v8 = ((_BYTE)v8 + 3) & 7;
          v9 = (unsigned int *)((char *)v9 + (v104 >> 3));
          v98 = bswap32(*v9) << (v104 & 7);
          if (v9 > v10)
            v9 = v10;
          *(_BYTE *)(a2 + m + 326) = v103;
        }
        *(_BYTE *)(a2 + m + 306) = v19 < 0;
        v19 = v98;
      }
      if (!v6)
        goto LABEL_137;
    }
    else
    {
      v98 = v19;
      if (!v6)
      {
LABEL_137:
        *(_BYTE *)(a2 + 289) = v6;
LABEL_148:
        *(_QWORD *)(result + 16) = v9;
        *(_DWORD *)(result + 32) = v98;
        goto LABEL_149;
      }
    }
    v105 = __clz(v98 | 1);
    if (v98)
      v106 = v105;
    else
      v106 = v105 + 1;
    v107 = v98 << (v106 + 1) >> -(char)v106;
    if (!v106)
      v107 = 0;
    v6 = v107 + ~(-1 << v106);
    v108 = v8 + 2 * v106 + 1;
    LOBYTE(v8) = (v8 + 2 * v106 + 1) & 7;
    v9 = (unsigned int *)((char *)v9 + (v108 >> 3));
    v98 = bswap32(*v9) << (v108 & 7);
    if (v9 > v10)
      v9 = v10;
    goto LABEL_137;
  }
  v7 = (_BYTE *)(result + 36);
  v8 = *(unsigned __int8 *)(result + 36);
  v22 = *(unsigned int **)(result + 16);
  v23 = *(_DWORD *)(result + 32);
  v24 = *(unsigned __int8 *)(a2 + 272);
  if (*(_BYTE *)(a2 + 272))
  {
    v25 = 0;
    v26 = *(unsigned int **)(result + 24);
    v27 = a2 + 16;
    while (1)
    {
      v28 = v27 + 16 * v25;
      if (*(_BYTE *)(v28 + 15) != 5)
        break;
LABEL_66:
      if (++v25 == v24)
      {
        v62 = 0;
        while (1)
        {
          v63 = v27 + 16 * v62;
          if (*(_BYTE *)(v63 + 15) != 4)
            break;
LABEL_106:
          if (++v62 == v24)
            goto LABEL_107;
        }
        v64 = __clz(v23 | 1);
        if (!v23)
          ++v64;
        if (v64 <= 0xC)
        {
          v65 = v23 << (v64 + 1) >> -(char)v64;
          if (!v64)
            v65 = 0;
          v66 = v65 + ~(-1 << v64);
          v67 = v8 + 2 * v64 + 1;
          v68 = v67 & 7;
          v69 = (unsigned int *)((char *)v22 + (v67 >> 3));
          v70 = bswap32(*v69) << v68;
          if (v69 <= v26)
            v71 = v69;
          else
            v71 = v26;
          goto LABEL_97;
        }
        v72 = (v8 + 1);
        v73 = v72 & 7;
        v74 = (unsigned int *)((char *)v22 + (v72 >> 3));
        v75 = bswap32(*v74) << v73;
        if (v74 <= v26)
          v76 = v74;
        else
          v76 = v26;
        if ((v23 & 0x80000000) != 0)
        {
          v80 = 0;
        }
        else
        {
          v77 = 0;
          do
          {
            v78 = v73;
            v79 = v75;
            v80 = v77 + 1;
            v81 = (v73 + 1);
            v73 = ((_BYTE)v73 + 1) & 7;
            v76 = (unsigned int *)((char *)v76 + (v81 >> 3));
            v75 = bswap32(*v76) << (v81 & 7);
            if (v76 > v26)
              v76 = v26;
            if ((v79 & 0x80000000) != 0)
              break;
            v47 = v77++ >= 0x1F;
          }
          while (!v47);
          if (v80 - 1 > 0x17)
          {
            v82 = v75 >> (48 - v80);
            v83 = ((v78 + 1) & 7) + v80;
            v84 = v83 - 16;
            v68 = v83 & 7;
            v85 = (unsigned int *)((char *)v76 + (v84 >> 3));
            v86 = bswap32(*v85) << v68;
            if (v85 > v26)
              v85 = v26;
            v87 = *(unsigned int *)((char *)v85 + 2);
            v71 = (unsigned int *)((char *)v85 + 2);
            v70 = bswap32(v87) << v68;
            if (v71 > v26)
              v71 = v26;
            v88 = __PAIR64__(v82, v86) >> 16;
LABEL_96:
            v66 = v88 + ~(-1 << v80);
LABEL_97:
            *(_WORD *)(v63 + 4) = ((v66 + 1) >> 1) - ((v66 + 1) >> 1) * 2 * (((_BYTE)v66 + 1) & 1);
            v90 = __clz(v70 | 1);
            if (!v70)
              ++v90;
            v91 = v70 << (v90 + 1) >> -(char)v90;
            if (v90)
              v92 = v91;
            else
              v92 = 0;
            v93 = 1 << v90;
            v94 = v68 + 2 * v90 + 1;
            v8 = v94 & 7;
            v95 = (unsigned int *)((char *)v71 + (v94 >> 3));
            v23 = bswap32(*v95) << v8;
            if (v95 <= v26)
              v22 = v95;
            else
              v22 = v26;
            *(_WORD *)(v63 + 6) = ((v92 + v93) >> 1) - ((v92 + v93) >> 1) * 2 * (((_BYTE)v92 + (_BYTE)v93) & 1);
            goto LABEL_106;
          }
        }
        v88 = v75 >> -(char)v80;
        v89 = v73 + v80;
        v68 = ((_BYTE)v73 + (_BYTE)v80) & 7;
        v71 = (unsigned int *)((char *)v76 + (v89 >> 3));
        v70 = bswap32(*v71) << (v89 & 7);
        if (v71 > v26)
          v71 = v26;
        goto LABEL_96;
      }
    }
    v29 = __clz(v23 | 1);
    if (!v23)
      ++v29;
    if (v29 <= 0xC)
    {
      v30 = v23 << (v29 + 1) >> -(char)v29;
      if (!v29)
        v30 = 0;
      v31 = v30 + ~(-1 << v29);
      v32 = v8 + 2 * v29 + 1;
      v33 = v32 & 7;
      v34 = (unsigned int *)((char *)v22 + (v32 >> 3));
      v35 = bswap32(*v34) << v33;
      if (v34 <= v26)
        v36 = v34;
      else
        v36 = v26;
      goto LABEL_57;
    }
    v37 = (v8 + 1);
    v38 = v37 & 7;
    v39 = (unsigned int *)((char *)v22 + (v37 >> 3));
    v40 = bswap32(*v39) << v38;
    if (v39 <= v26)
      v41 = v39;
    else
      v41 = v26;
    if ((v23 & 0x80000000) != 0)
    {
      v45 = 0;
    }
    else
    {
      v42 = 0;
      do
      {
        v43 = v38;
        v44 = v40;
        v45 = v42 + 1;
        v46 = (v38 + 1);
        v38 = ((_BYTE)v38 + 1) & 7;
        v41 = (unsigned int *)((char *)v41 + (v46 >> 3));
        v40 = bswap32(*v41) << (v46 & 7);
        if (v41 > v26)
          v41 = v26;
        if ((v44 & 0x80000000) != 0)
          break;
        v47 = v42++ >= 0x1F;
      }
      while (!v47);
      if (v45 - 1 > 0x17)
      {
        v48 = v40 >> (48 - v45);
        v49 = ((v43 + 1) & 7) + v45;
        v50 = v49 - 16;
        v33 = v49 & 7;
        v51 = (unsigned int *)((char *)v41 + (v50 >> 3));
        v52 = bswap32(*v51) << v33;
        if (v51 > v26)
          v51 = v26;
        v53 = *(unsigned int *)((char *)v51 + 2);
        v36 = (unsigned int *)((char *)v51 + 2);
        v35 = bswap32(v53) << v33;
        if (v36 > v26)
          v36 = v26;
        v54 = __PAIR64__(v48, v52) >> 16;
LABEL_56:
        v31 = v54 + ~(-1 << v45);
LABEL_57:
        *(_WORD *)v28 = ((v31 + 1) >> 1) - ((v31 + 1) >> 1) * 2 * (((_BYTE)v31 + 1) & 1);
        v56 = __clz(v35 | 1);
        if (!v35)
          ++v56;
        v57 = v35 << (v56 + 1) >> -(char)v56;
        if (v56)
          v58 = v57;
        else
          v58 = 0;
        v59 = 1 << v56;
        v60 = v33 + 2 * v56 + 1;
        v8 = v60 & 7;
        v61 = (unsigned int *)((char *)v36 + (v60 >> 3));
        v23 = bswap32(*v61) << v8;
        if (v61 <= v26)
          v22 = v61;
        else
          v22 = v26;
        *(_WORD *)(v28 + 2) = ((v58 + v59) >> 1) - ((v58 + v59) >> 1) * 2 * (((_BYTE)v58 + (_BYTE)v59) & 1);
        goto LABEL_66;
      }
    }
    v54 = v40 >> -(char)v45;
    v55 = v38 + v45;
    v33 = ((_BYTE)v38 + (_BYTE)v45) & 7;
    v36 = (unsigned int *)((char *)v41 + (v55 >> 3));
    v35 = bswap32(*v36) << (v55 & 7);
    if (v36 > v26)
      v36 = v26;
    goto LABEL_56;
  }
LABEL_107:
  *(_QWORD *)(result + 16) = v22;
  *(_DWORD *)(result + 32) = v23;
LABEL_149:
  *v7 = v8;
  return result;
}

uint64_t sub_2160D2220(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned __int8 v18;
  unsigned int v19;
  _BOOL4 v20;
  char v21;
  int v22;
  int v23;
  uint64_t v27;
  int v28;
  uint64_t result;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  char v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  int v75;
  _BOOL8 v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned __int8 v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  char *v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  int v108;
  __int16 v109;

  v4 = *(unsigned __int8 *)(a2 + 28);
  if (v4 != 5 && v4 != 0)
    return 4294958327;
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(unsigned __int8 **)(a2 + 48);
  v10 = *(void **)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(a1 + 32);
  v13 = __clz(v12 | 1);
  if (!v12)
    ++v13;
  v14 = (v12 << (v13 + 1)) >> -(char)v13;
  if (!v13)
    v14 = 0;
  v15 = v14 + ~(-1 << v13);
  v16 = *(unsigned __int8 *)(a1 + 36) + 2 * v13 + 1;
  v17 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v16 >> 3));
  if ((unint64_t)v17 <= v11)
    v11 = *(_QWORD *)(a1 + 16) + (v16 >> 3);
  v18 = v15 - 5;
  if (v15 <= 4)
    v18 = v15;
  v19 = *v17;
  v20 = v15 < 5;
  v21 = v16 & 7;
  *(_QWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 32) = bswap32(v19) << v21;
  *(_BYTE *)(a1 + 36) = v21;
  *(_BYTE *)v9 = v15;
  v22 = 2 * v20;
  *(_BYTE *)(v9 + 1) = 2 * v20;
  *(_BYTE *)(v9 + 2) = v18;
  v23 = v18;
  if (v15 >= 5 && v18 == 25)
  {
    sub_2160CFFB4(a1, (uint64_t)v10, 0, 0);
    result = 0;
    v31 = *(_QWORD *)(a2 + 176);
    if (v31)
      v32 = (_QWORD *)(v31 + 80);
    else
      v32 = 0;
    v32[1] = 0x1010101010101010;
    v32[2] = 0x1010101010101010;
    *v32 = 0x1010101010101010;
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + 272) = 0;
    *(_BYTE *)(v9 + 54) = 0;
    return result;
  }
  *(_BYTE *)(v9 + 3) = 0;
  if (!*(_BYTE *)(a2 + 184) || (v27 = *(_QWORD *)(a2 + 40), *(_BYTE *)(v27 + 1)) || *(_BYTE *)(v27 + 2))
  {
    v28 = 0;
  }
  else
  {
    v28 = *(_DWORD *)(a1 + 32) >> 31;
    v69 = *(unsigned __int8 *)(a1 + 36) + 1;
    v70 = v69 & 7;
    v71 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v69 >> 3));
    v72 = bswap32(*v71) << (v69 & 7);
    if ((unint64_t)v71 > *(_QWORD *)(a1 + 24))
      v71 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v71;
    *(_DWORD *)(a1 + 32) = v72;
    *(_BYTE *)(a1 + 36) = v70;
    *(_BYTE *)(v9 + 3) = v28;
  }
  result = sub_2160CC688(2 * v20, v23, v28, (uint64_t)v8, *(unsigned __int8 *)(a2 + 31));
  if (!(_DWORD)result)
  {
    v30 = v8[272];
    *(_BYTE *)(*(_QWORD *)(a2 + 176) + 126) = *(_BYTE *)(*(_QWORD *)(a2 + 48) + 272);
    if (*((_DWORD *)v8 + 2) == 3)
      return 0xFFFFFFFFLL;
    v33 = *(_QWORD *)(a2 + 40);
    v108 = *((_DWORD *)v8 + 2);
    if ((*(_BYTE *)(v33 + 1) || *(_BYTE *)(v33 + 2) == 25) && v30 == 4)
    {
      v34 = *(unsigned int **)(a1 + 24);
      v35 = *(_DWORD *)(a1 + 32);
      v36 = __clz(v35 | 1);
      if (!v35)
        ++v36;
      v37 = (v35 << (v36 + 1)) >> -(char)v36;
      if (v36)
        v38 = v37;
      else
        v38 = 0;
      v39 = v38 + ~(-1 << v36);
      v40 = *(unsigned __int8 *)(a1 + 36) + 2 * v36 + 1;
      v41 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v40 >> 3));
      v42 = *v41;
      *(_DWORD *)(v9 + 4) = v39;
      v43 = v40 & 7;
      v44 = bswap32(v42) << v43;
      if (v41 > v34)
        v41 = v34;
      v45 = __clz(v44 | 1);
      if (!v44)
        ++v45;
      v46 = v44 << (v45 + 1) >> -(char)v45;
      if (!v45)
        v46 = 0;
      v47 = v46 + ~(-1 << v45);
      v48 = v43 + 2 * v45 + 1;
      v49 = v48 & 7;
      v50 = (unsigned int *)((char *)v41 + (v48 >> 3));
      v51 = bswap32(*v50) << (v48 & 7);
      if (v50 > v34)
        v50 = v34;
      *(_DWORD *)(v9 + 8) = v47;
      v52 = __clz(v51 | 1);
      if (!v51)
        ++v52;
      v53 = v51 << (v52 + 1) >> -(char)v52;
      if (!v52)
        v53 = 0;
      v54 = v53 + ~(-1 << v52);
      v55 = v49 + 2 * v52 + 1;
      v56 = v55 & 7;
      v57 = (unsigned int *)((char *)v50 + (v55 >> 3));
      v58 = bswap32(*v57) << (v55 & 7);
      if (v57 > v34)
        v57 = v34;
      *(_DWORD *)(v9 + 12) = v54;
      v59 = __clz(v58 | 1);
      if (!v58)
        ++v59;
      v60 = v56 + 2 * v59 + 1;
      v61 = (unsigned int *)((char *)v57 + (v60 >> 3));
      v62 = bswap32(*v61);
      if (v61 <= v34)
        v34 = v61;
      v63 = v60 & 7;
      v64 = v62 << (v60 & 7);
      v65 = ~(-1 << v59);
      v66 = v58 << (v59 + 1) >> -(char)v59;
      if (v59)
        v67 = v66;
      else
        v67 = 0;
      *(_DWORD *)(v9 + 16) = v67 + v65;
      *(_QWORD *)(a1 + 16) = v34;
      *(_DWORD *)(a1 + 32) = v64;
      *(_BYTE *)(a1 + 36) = v63;
      result = sub_2160CC9E0(*v8, *(unsigned __int8 *)(v9 + 1), v9 + 4, v9 + 20, (int *)(v9 + 36), (uint64_t)(v8 + 16), 0, 3);
      if ((_DWORD)result)
        return result;
      sub_2160D28DC(a1, v22, v9 + 20, v9 + 36, (uint64_t)v8);
    }
    else
    {
      sub_2160D2B30(a1, (uint64_t)v8);
    }
    if (v108 == 2)
    {
      v68 = 0;
LABEL_83:
      v109 = 0;
      result = sub_2160CC930(*(unsigned __int8 *)(v9 + 1), *(unsigned __int8 *)(v9 + 2), v68, &v109, (char *)&v109 + 1, 0, 0);
      if ((_DWORD)result)
        return result;
      v84 = v109;
      *(_BYTE *)(v9 + 53) = v109;
      v85 = HIBYTE(v109);
      *(_BYTE *)(v9 + 52) = HIBYTE(v109);
      if (v108 != 2 && v68 < 1)
      {
        LOBYTE(v86) = 0;
        goto LABEL_109;
      }
      bzero(v10, 0x330uLL);
      v89 = *(_DWORD *)(a1 + 32);
      v90 = *(unsigned __int8 *)(a1 + 36);
      v91 = __clz(v89 | 1);
      if (v89)
        v92 = v91;
      else
        v92 = v91 + 1;
      v93 = (v89 << (v92 + 1)) >> -(char)v92;
      if (v92)
        v94 = v93;
      else
        v94 = 0;
      v95 = v90 + 2 * v92 + 1;
      v96 = (v90 + 2 * v92 + 1) & 7;
      v97 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v95 >> 3));
      v98 = bswap32(*v97) << (v95 & 7);
      if ((unint64_t)v97 > *(_QWORD *)(a1 + 24))
        v97 = *(unsigned int **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v97;
      *(_DWORD *)(a1 + 32) = v98;
      *(_BYTE *)(a1 + 36) = v96;
      v99 = *(_QWORD *)(a2 + 176);
      if (v99)
        v100 = v99 + 80;
      else
        v100 = 0;
      v101 = *(_QWORD *)(a2 + 128);
      v102 = *(_QWORD *)(a2 + 136);
      if (v101)
        v103 = v101 + 80;
      else
        v103 = 0;
      if (v102)
        v104 = v102 + 80;
      else
        v104 = 0;
      result = sub_2160D0854(a1, v108 == 2, *(unsigned __int8 *)(v9 + 3), a2, v100, v103, v104, v85, v84, (uint64_t)v10, 0, 0);
      if (!(_DWORD)result)
      {
        v86 = ((v94 + (1 << v92)) >> 1) - ((v94 + (1 << v92)) >> 1) * 2 * ((v94 + (1 << v92)) & 1);
LABEL_109:
        *(_BYTE *)(v9 + 54) = v86;
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= *(int *)(a1 + 12))
          return 0;
        else
          return 4294958327;
      }
      return result;
    }
    v73 = v8[272];
    v74 = *(_QWORD *)(a1 + 24);
    v75 = *(_DWORD *)(a1 + 32);
    v77 = v15 > 4 && v23 == 0;
    v78 = __clz(v75 | 1);
    if (!v75)
      ++v78;
    v79 = (v75 << (v78 + 1)) >> -(char)v78;
    if (v78)
      v80 = v79;
    else
      v80 = 0;
    v81 = (*(_BYTE *)(a1 + 36) + 2 * (_BYTE)v78 + 1) & 7;
    v82 = (unsigned int *)(*(_QWORD *)(a1 + 16) + ((unint64_t)(*(unsigned __int8 *)(a1 + 36) + 2 * v78 + 1) >> 3));
    v83 = bswap32(*v82) << v81;
    if ((unint64_t)v82 > v74)
      v82 = *(unsigned int **)(a1 + 24);
    if ((a3 & 0xFFFFFFFD) == 1 && a4)
    {
      v68 = 0;
LABEL_82:
      *(_QWORD *)(a1 + 16) = v82;
      *(_DWORD *)(a1 + 32) = v83;
      *(_BYTE *)(a1 + 36) = v81;
      goto LABEL_83;
    }
    v87 = v80 + ~(-1 << v78);
    if (v8[1])
    {
      if (v87 <= 0x2F)
      {
        v88 = (char *)&unk_2160F8D00 + 192 * v77;
        goto LABEL_116;
      }
    }
    else if (v87 <= 0xF)
    {
      v88 = (char *)&unk_2160F8C80 + 64 * v77;
LABEL_116:
      v68 = *(_DWORD *)&v88[4 * v87];
      if ((v68 & 0xF) != 0)
      {
        if (!*(_BYTE *)(a2 + 184))
          LOBYTE(v77) = 1;
        if (!v77 && v73 <= 4)
        {
          v105 = *(_QWORD *)(a2 + 40);
          if (*(_BYTE *)(v105 + 1) != 3 || *(_BYTE *)(v105 + 2) || **(_BYTE **)(a2 + 48))
          {
            v106 = v83 >> 31;
            v107 = (v81 + 1);
            LOBYTE(v81) = (v81 + 1) & 7;
            v82 = (unsigned int *)((char *)v82 + (v107 >> 3));
            v83 = bswap32(*v82) << (v107 & 7);
            if ((unint64_t)v82 > v74)
              v82 = *(unsigned int **)(a1 + 24);
            *(_BYTE *)(v9 + 3) = v106;
          }
        }
      }
      goto LABEL_82;
    }
    return 4294958327;
  }
  return result;
}

uint64_t sub_2160D28DC(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unint64_t v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  __int16 v40;
  _WORD *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;

  if (a2 == 2)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    v7 = a5 + 16;
    v8 = *(unsigned __int8 *)(result + 36);
    v9 = *(_DWORD *)(result + 32);
    v10 = *(unsigned int **)(result + 16);
    v11 = *(unsigned int **)(result + 24);
    while (1)
    {
      if (*(_DWORD *)(a3 + 4 * v5) == 5)
        return result;
      if (*(int *)(a4 + 4 * v5) >= 1)
        break;
LABEL_41:
      if (++v5 == 4)
      {
        *(_QWORD *)(result + 16) = v10;
        *(_DWORD *)(result + 32) = v9;
        *(_BYTE *)(result + 36) = v8;
        return result;
      }
    }
    v12 = 0;
    v6 = (int)v6;
    while (1)
    {
      v13 = __clz(v9 | 1);
      if (!v9)
        ++v13;
      if (v13 <= 0xC)
      {
        v14 = v9 << (v13 + 1) >> -(char)v13;
        if (!v13)
          v14 = 0;
        v15 = v14 + ~(-1 << v13);
        v16 = v8 + 2 * v13 + 1;
        v17 = v16 & 7;
        v18 = (unsigned int *)((char *)v10 + (v16 >> 3));
        v19 = bswap32(*v18) << v17;
        if (v18 <= v11)
          v20 = v18;
        else
          v20 = v11;
        goto LABEL_34;
      }
      v21 = (v8 + 1);
      v22 = v21 & 7;
      v23 = (unsigned int *)((char *)v10 + (v21 >> 3));
      v24 = bswap32(*v23) << v22;
      v25 = v23 <= v11 ? v23 : v11;
      if ((v9 & 0x80000000) != 0)
        break;
      v26 = 0;
      do
      {
        v27 = v22;
        v28 = v24;
        v29 = v26 + 1;
        v30 = (v22 + 1);
        v22 = ((_BYTE)v22 + 1) & 7;
        v25 = (unsigned int *)((char *)v25 + (v30 >> 3));
        v24 = bswap32(*v25) << (v30 & 7);
        if (v25 > v11)
          v25 = v11;
        if ((v28 & 0x80000000) != 0)
          break;
      }
      while (v26++ < 0x1F);
      if (v29 - 1 <= 0x17)
        goto LABEL_31;
      v32 = v24 >> (48 - v29);
      v33 = ((v27 + 1) & 7) + v29;
      v34 = v33 - 16;
      v17 = v33 & 7;
      v35 = (unsigned int *)((char *)v25 + (v34 >> 3));
      v36 = bswap32(*v35) << v17;
      if (v35 > v11)
        v35 = v11;
      v37 = *(unsigned int *)((char *)v35 + 2);
      v20 = (unsigned int *)((char *)v35 + 2);
      v19 = bswap32(v37) << v17;
      if (v20 > v11)
        v20 = v11;
      v38 = __PAIR64__(v32, v36) >> 16;
LABEL_33:
      v15 = v38 + ~(-1 << v29);
LABEL_34:
      v40 = ((v15 + 1) >> 1) - ((v15 + 1) >> 1) * 2 * ((v15 + 1) & 1);
      v41 = (_WORD *)(v7 + 16 * v6);
      *v41 = v40;
      v42 = __clz(v19 | 1);
      if (!v19)
        ++v42;
      v43 = v19 << (v42 + 1) >> -(char)v42;
      if (!v42)
        v43 = 0;
      v44 = 1 << v42;
      v45 = v17 + 2 * v42 + 1;
      v8 = v45 & 7;
      v10 = (unsigned int *)((char *)v20 + (v45 >> 3));
      v9 = bswap32(*v10) << (v45 & 7);
      if (v10 > v11)
        v10 = v11;
      v41[1] = ((v43 + v44) >> 1) - ((v43 + v44) >> 1) * 2 * ((v43 + v44) & 1);
      ++v6;
      if (++v12 >= *(_DWORD *)(a4 + 4 * v5))
        goto LABEL_41;
    }
    v29 = 0;
LABEL_31:
    v38 = v24 >> -(char)v29;
    v39 = v22 + v29;
    v17 = v39 & 7;
    v20 = (unsigned int *)((char *)v25 + (v39 >> 3));
    v19 = bswap32(*v20) << (v39 & 7);
    if (v20 > v11)
      v20 = v11;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_2160D2B30(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v4;
  unsigned int *v5;
  int v6;
  int v7;
  uint64_t i;
  unint64_t v9;
  signed int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t j;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unint64_t v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  unsigned int *v63;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2 <= 7 && ((1 << v2) & 0x86) != 0)
  {
    v5 = *(unsigned int **)(result + 16);
    v4 = *(unsigned int **)(result + 24);
    v6 = *(_DWORD *)(result + 32);
    v7 = *(unsigned __int8 *)(result + 36);
    if (v2 == 1)
    {
      for (i = 0; i != 16; ++i)
      {
        v9 = (v7 + 1);
        v7 = ((_BYTE)v7 + 1) & 7;
        v5 = (unsigned int *)((char *)v5 + (v9 >> 3));
        v10 = bswap32(*v5) << (v9 & 7);
        if (v5 > v4)
          v5 = v4;
        if ((v6 & 0x80000000) == 0)
        {
          v11 = v10 >> 29;
          v12 = (v7 + 3);
          v7 = ((_BYTE)v7 + 3) & 7;
          v5 = (unsigned int *)((char *)v5 + (v12 >> 3));
          v10 = bswap32(*v5) << (v12 & 7);
          if (v5 > v4)
            v5 = v4;
          *(_BYTE *)(a2 + i + 310) = v11;
        }
        *(_BYTE *)(a2 + i + 290) = v6 < 0;
        v6 = v10;
      }
    }
    else
    {
      v10 = *(_DWORD *)(result + 32);
    }
    v13 = *(unsigned __int8 *)(a2 + 1);
    if (v2 == 7)
    {
      for (j = 0; j != 4; ++j)
      {
        v15 = (v7 + 1);
        v7 = ((_BYTE)v7 + 1) & 7;
        v5 = (unsigned int *)((char *)v5 + (v15 >> 3));
        v16 = bswap32(*v5) << (v15 & 7);
        if (v5 > v4)
          v5 = v4;
        if ((v10 & 0x80000000) == 0)
        {
          v17 = v16 >> 29;
          v18 = (v7 + 3);
          v7 = ((_BYTE)v7 + 3) & 7;
          v5 = (unsigned int *)((char *)v5 + (v18 >> 3));
          v16 = bswap32(*v5) << (v18 & 7);
          if (v5 > v4)
            v5 = v4;
          *(_BYTE *)(a2 + j + 326) = v17;
        }
        *(_BYTE *)(a2 + j + 306) = v10 < 0;
        v10 = v16;
      }
      if (v13)
        goto LABEL_26;
    }
    else
    {
      v16 = v10;
      if (*(_BYTE *)(a2 + 1))
      {
LABEL_26:
        v19 = __clz(v16 | 1);
        if (v16)
          v20 = v19;
        else
          v20 = v19 + 1;
        v21 = v16 << (v20 + 1) >> -(char)v20;
        if (!v20)
          v21 = 0;
        v22 = v21 + ~(-1 << v20);
        v23 = v7 + 2 * v20 + 1;
        LOBYTE(v7) = (v7 + 2 * v20 + 1) & 7;
        v5 = (unsigned int *)((char *)v5 + (v23 >> 3));
        v16 = bswap32(*v5) << (v23 & 7);
        if (v5 > v4)
          v5 = v4;
        goto LABEL_36;
      }
    }
    LOBYTE(v22) = 0;
LABEL_36:
    *(_BYTE *)(a2 + 289) = v22;
    *(_QWORD *)(result + 16) = v5;
    *(_DWORD *)(result + 32) = v16;
    *(_BYTE *)(result + 36) = v7;
    return result;
  }
  if (v2 != 3)
  {
    v24 = *(unsigned __int8 *)(result + 36);
    v25 = *(_DWORD *)(result + 32);
    v26 = *(unsigned int **)(result + 16);
    v27 = *(unsigned __int8 *)(a2 + 272);
    if (*(_BYTE *)(a2 + 272))
    {
      v28 = 0;
      v29 = *(unsigned int **)(result + 24);
      v30 = a2 + 16;
      while (1)
      {
        v31 = v30 + 16 * v28;
        if (*(_BYTE *)(v31 + 15) == 5)
          return result;
        v32 = __clz(v25 | 1);
        if (!v25)
          ++v32;
        if (v32 <= 0xC)
        {
          v33 = v25 << (v32 + 1) >> -(char)v32;
          if (!v32)
            v33 = 0;
          v34 = v33 + ~(-1 << v32);
          v35 = v24 + 2 * v32 + 1;
          v36 = v35 & 7;
          v37 = (unsigned int *)((char *)v26 + (v35 >> 3));
          v38 = bswap32(*v37) << v36;
          if (v37 <= v29)
            v39 = v37;
          else
            v39 = v29;
          goto LABEL_69;
        }
        v40 = (v24 + 1);
        v41 = v40 & 7;
        v42 = (unsigned int *)((char *)v26 + (v40 >> 3));
        v43 = bswap32(*v42) << v41;
        v44 = v42 <= v29 ? v42 : v29;
        if ((v25 & 0x80000000) != 0)
          break;
        v45 = 0;
        do
        {
          v46 = v41;
          v47 = v43;
          v48 = v45 + 1;
          v49 = (v41 + 1);
          v41 = ((_BYTE)v41 + 1) & 7;
          v44 = (unsigned int *)((char *)v44 + (v49 >> 3));
          v43 = bswap32(*v44) << (v49 & 7);
          if (v44 > v29)
            v44 = v29;
          if ((v47 & 0x80000000) != 0)
            break;
        }
        while (v45++ < 0x1F);
        if (v48 - 1 <= 0x17)
          goto LABEL_66;
        v51 = v43 >> (48 - v48);
        v52 = ((v46 + 1) & 7) + v48;
        v53 = v52 - 16;
        v36 = v52 & 7;
        v54 = (unsigned int *)((char *)v44 + (v53 >> 3));
        v55 = bswap32(*v54) << v36;
        if (v54 > v29)
          v54 = v29;
        v56 = *(unsigned int *)((char *)v54 + 2);
        v39 = (unsigned int *)((char *)v54 + 2);
        v38 = bswap32(v56) << v36;
        if (v39 > v29)
          v39 = v29;
        v57 = __PAIR64__(v51, v55) >> 16;
LABEL_68:
        v34 = v57 + ~(-1 << v48);
LABEL_69:
        *(_WORD *)v31 = ((v34 + 1) >> 1) - ((v34 + 1) >> 1) * 2 * (((_BYTE)v34 + 1) & 1);
        v58 = __clz(v38 | 1);
        if (!v38)
          ++v58;
        v59 = v38 << (v58 + 1) >> -(char)v58;
        if (v58)
          v60 = v59;
        else
          v60 = 0;
        v61 = 1 << v58;
        v62 = v36 + 2 * v58 + 1;
        v24 = v62 & 7;
        v63 = (unsigned int *)((char *)v39 + (v62 >> 3));
        v25 = bswap32(*v63) << (v62 & 7);
        if (v63 <= v29)
          v26 = v63;
        else
          v26 = v29;
        *(_WORD *)(v31 + 2) = ((v60 + v61) >> 1) - ((v60 + v61) >> 1) * 2 * (((_BYTE)v60 + (_BYTE)v61) & 1);
        if (++v28 == v27)
          goto LABEL_78;
      }
      v48 = 0;
LABEL_66:
      v57 = v43 >> -(char)v48;
      v36 = ((_BYTE)v41 + (_BYTE)v48) & 7;
      v39 = (unsigned int *)((char *)v44 + ((unint64_t)(v41 + v48) >> 3));
      v38 = bswap32(*v39) << ((v41 + v48) & 7);
      if (v39 > v29)
        v39 = v29;
      goto LABEL_68;
    }
LABEL_78:
    *(_QWORD *)(result + 16) = v26;
    *(_DWORD *)(result + 32) = v25;
    *(_BYTE *)(result + 36) = v24;
  }
  return result;
}

uint64_t sub_2160D2F10(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int *v27;
  int v28;
  int v29;
  uint64_t k;
  unint64_t v31;
  signed int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  signed int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t m;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t j;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  char *v66;
  char *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  __int16 v95;

  v9 = *(_BYTE **)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v10 = *(void **)(a2 + 56);
  v11 = *(_DWORD *)(a1 + 32);
  v12 = __clz(v11 | 1);
  if (!v11)
    ++v12;
  v13 = (v11 << (v12 + 1)) >> -(char)v12;
  if (!v12)
    LOBYTE(v13) = 0;
  v14 = (unsigned int *)(*(_QWORD *)(a1 + 16) + ((unint64_t)(*(unsigned __int8 *)(a1 + 36) + 2 * v12 + 1) >> 3));
  v15 = ~(-1 << v12);
  v16 = (*(_BYTE *)(a1 + 36) + 2 * v12 + 1) & 7;
  v17 = bswap32(*v14) << v16;
  if ((unint64_t)v14 > *(_QWORD *)(a1 + 24))
    v14 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 32) = v17;
  *(_BYTE *)(a1 + 36) = v16;
  *v9 = v13 + v15;
  v9[1] = 0;
  v9[2] = v13 + v15;
  v18 = (v13 + v15);
  if (v18 == 25)
  {
    sub_2160CFFB4(a1, (uint64_t)v10, a3, a4);
    v19 = *(_QWORD *)(a2 + 176);
    if (v19)
      v20 = (_QWORD *)(v19 + 80);
    else
      v20 = 0;
    *v20 = 0x1010101010101010;
    v20[1] = 0x1010101010101010;
    if (!a4 || (a3 & 0xFD) != 1)
      v20[2] = 0x1010101010101010;
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + 272) = 0;
    v9[54] = 0;
    return result;
  }
  v9[3] = 0;
  if (!*(_BYTE *)(a2 + 184) || (v22 = *(_QWORD *)(a2 + 40), *(_BYTE *)(v22 + 1)) || *(_BYTE *)(v22 + 2))
  {
    v23 = 0;
  }
  else
  {
    v23 = *(_DWORD *)(a1 + 32) >> 31;
    v40 = *(unsigned __int8 *)(a1 + 36) + 1;
    v41 = v40 & 7;
    v42 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v40 >> 3));
    v43 = bswap32(*v42) << (v40 & 7);
    if ((unint64_t)v42 > *(_QWORD *)(a1 + 24))
      v42 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v42;
    *(_DWORD *)(a1 + 32) = v43;
    *(_BYTE *)(a1 + 36) = v41;
    v9[3] = v23;
  }
  result = sub_2160CC688(0, v18, v23, v8, *(unsigned __int8 *)(a2 + 31));
  if ((_DWORD)result)
    return result;
  *(_BYTE *)(*(_QWORD *)(a2 + 176) + 126) = *(_BYTE *)(*(_QWORD *)(a2 + 48) + 272);
  v24 = *(_DWORD *)(v8 + 8);
  result = 4294958327;
  if (v24 > 7 || ((1 << v24) & 0x86) == 0)
    return result;
  v25 = *(unsigned __int8 *)(v8 + 1);
  v26 = *(unsigned int **)(a1 + 16);
  v27 = *(unsigned int **)(a1 + 24);
  v28 = *(_DWORD *)(a1 + 32);
  v29 = *(unsigned __int8 *)(a1 + 36);
  if ((a3 & 0xFFFFFFFD) != 1)
  {
    if (v24 == 1)
    {
      for (i = 0; i != 16; ++i)
      {
        v36 = (v29 + 1);
        v29 = ((_BYTE)v29 + 1) & 7;
        v26 = (unsigned int *)((char *)v26 + (v36 >> 3));
        v37 = bswap32(*v26) << (v36 & 7);
        if (v26 > v27)
          v26 = v27;
        if ((v28 & 0x80000000) == 0)
        {
          v38 = v37 >> 29;
          v39 = (v29 + 3);
          v29 = ((_BYTE)v29 + 3) & 7;
          v26 = (unsigned int *)((char *)v26 + (v39 >> 3));
          v37 = bswap32(*v26) << (v39 & 7);
          if (v26 > v27)
            v26 = v27;
          *(_BYTE *)(v8 + i + 310) = v38;
        }
        *(_BYTE *)(v8 + i + 290) = v28 < 0;
        v28 = v37;
      }
    }
    else
    {
      v37 = *(_DWORD *)(a1 + 32);
    }
    if (v24 == 7)
    {
      for (j = 0; j != 4; ++j)
      {
        v50 = (v29 + 1);
        v29 = ((_BYTE)v29 + 1) & 7;
        v26 = (unsigned int *)((char *)v26 + (v50 >> 3));
        v46 = bswap32(*v26) << (v50 & 7);
        if (v26 > v27)
          v26 = v27;
        if ((v37 & 0x80000000) == 0)
        {
          v51 = v46 >> 29;
          v52 = (v29 + 3);
          v29 = ((_BYTE)v29 + 3) & 7;
          v26 = (unsigned int *)((char *)v26 + (v52 >> 3));
          v46 = bswap32(*v26) << (v52 & 7);
          if (v26 > v27)
            v26 = v27;
          *(_BYTE *)(v8 + j + 326) = v51;
        }
        *(_BYTE *)(v8 + j + 306) = v37 < 0;
        v37 = v46;
      }
      if (v25)
        goto LABEL_75;
    }
    else
    {
      v46 = v37;
      if (v25)
      {
LABEL_75:
        v54 = __clz(v46 | 1);
        if (!v46)
          ++v54;
        v55 = v46 << (v54 + 1) >> -(char)v54;
        if (!v54)
          v55 = 0;
        v53 = v55 + ~(-1 << v54);
        v56 = v29 + 2 * v54 + 1;
        v29 = v56 & 7;
        v26 = (unsigned int *)((char *)v26 + (v56 >> 3));
        v46 = bswap32(*v26) << (v56 & 7);
        if (v26 > v27)
          v26 = v27;
        goto LABEL_83;
      }
    }
    LOBYTE(v53) = 0;
    goto LABEL_83;
  }
  if (v24 == 1)
  {
    for (k = 0; k != 16; ++k)
    {
      v31 = (v29 + 1);
      v29 = ((_BYTE)v29 + 1) & 7;
      v26 = (unsigned int *)((char *)v26 + (v31 >> 3));
      v32 = bswap32(*v26) << (v31 & 7);
      if (v26 > v27)
        v26 = v27;
      if ((v28 & 0x80000000) == 0)
      {
        v33 = v32 >> 29;
        v34 = (v29 + 3);
        v29 = ((_BYTE)v29 + 3) & 7;
        v26 = (unsigned int *)((char *)v26 + (v34 >> 3));
        v32 = bswap32(*v26) << (v34 & 7);
        if (v26 > v27)
          v26 = v27;
        *(_BYTE *)(v8 + k + 310) = v33;
      }
      *(_BYTE *)(v8 + k + 290) = v28 < 0;
      v28 = v32;
    }
  }
  else
  {
    v32 = *(_DWORD *)(a1 + 32);
  }
  if (v24 == 7)
  {
    for (m = 0; m != 4; ++m)
    {
      v45 = (v29 + 1);
      v29 = ((_BYTE)v29 + 1) & 7;
      v26 = (unsigned int *)((char *)v26 + (v45 >> 3));
      v46 = bswap32(*v26) << (v45 & 7);
      if (v26 > v27)
        v26 = v27;
      if ((v32 & 0x80000000) == 0)
      {
        v47 = v46 >> 29;
        v48 = (v29 + 3);
        v29 = ((_BYTE)v29 + 3) & 7;
        v26 = (unsigned int *)((char *)v26 + (v48 >> 3));
        v46 = bswap32(*v26) << (v48 & 7);
        if (v26 > v27)
          v26 = v27;
        *(_BYTE *)(v8 + m + 326) = v47;
      }
      *(_BYTE *)(v8 + m + 306) = v32 < 0;
      v32 = v46;
    }
  }
  else
  {
    v46 = v32;
  }
  LOBYTE(v53) = 0;
  if (a4 != 1 && v25)
    goto LABEL_75;
LABEL_83:
  *(_BYTE *)(v8 + 289) = v53;
  *(_QWORD *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 32) = v46;
  *(_BYTE *)(a1 + 36) = v29;
  if (v24 == 2)
  {
    LOBYTE(v57) = 0;
    goto LABEL_111;
  }
  v58 = *(_QWORD *)(a1 + 24);
  v59 = __clz(v46 | 1);
  if (v46)
    v60 = v59;
  else
    v60 = v59 + 1;
  v61 = v46 << (v60 + 1) >> -(char)v60;
  if (!v60)
    v61 = 0;
  v62 = v61 + ~(-1 << v60);
  v63 = v29 + 2 * v60 + 1;
  v64 = (unsigned int *)((char *)v26 + (v63 >> 3));
  v65 = *v64;
  if ((unint64_t)v64 > v58)
    v64 = *(unsigned int **)(a1 + 24);
  if (((a3 & 0xFD) != 1 || !a4) && *(_BYTE *)(v8 + 1))
  {
    if (v62 <= 0x2F)
    {
      v66 = (char *)&unk_2160F8D00 + 192 * (v18 == 0);
      goto LABEL_100;
    }
    return 4294958327;
  }
  if (v62 > 0xF)
    return 4294958327;
  v66 = (char *)&unk_2160F8C80 + 64 * (unint64_t)(v18 == 0);
LABEL_100:
  v67 = &v66[4 * v62];
  v68 = v63 & 7;
  v69 = bswap32(v65) << v68;
  v57 = *(_DWORD *)v67;
  if ((*(_DWORD *)v67 & 0xF) != 0)
  {
    if (v18)
    {
      if (*(_BYTE *)(a2 + 184))
      {
        if (*(unsigned __int8 *)(v8 + 272) <= 4u)
        {
          v70 = *(_QWORD *)(a2 + 40);
          if (*(_BYTE *)(v70 + 1) != 3 || *(_BYTE *)(v70 + 2) || **(_BYTE **)(a2 + 48))
          {
            v71 = v69 >> 31;
            v72 = (v68 + 1);
            LOBYTE(v68) = (v68 + 1) & 7;
            v64 = (unsigned int *)((char *)v64 + (v72 >> 3));
            v69 = bswap32(*v64) << (v72 & 7);
            if ((unint64_t)v64 > v58)
              v64 = *(unsigned int **)(a1 + 24);
            v9[3] = v71;
          }
        }
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v64;
  *(_DWORD *)(a1 + 32) = v69;
  *(_BYTE *)(a1 + 36) = v68;
LABEL_111:
  v95 = 0;
  if ((a3 & 0xFD) == 1)
  {
    v73 = a3;
    v74 = a4;
  }
  else
  {
    v73 = 0;
    v74 = 0;
  }
  result = sub_2160CC930(v9[1], v9[2], v57, &v95, (char *)&v95 + 1, v73, v74);
  if (!(_DWORD)result)
  {
    v75 = v95;
    v9[53] = v95;
    v76 = HIBYTE(v95);
    v9[52] = HIBYTE(v95);
    if (v24 != 2 && !v76 && !v75)
    {
      LOBYTE(v77) = 0;
      goto LABEL_137;
    }
    v78 = v24 == 2;
    bzero(v10, 0x330uLL);
    v79 = *(_DWORD *)(a1 + 32);
    v80 = *(unsigned __int8 *)(a1 + 36);
    v81 = __clz(v79 | 1);
    if (v79)
      v82 = v81;
    else
      v82 = v81 + 1;
    v83 = (v79 << (v82 + 1)) >> -(char)v82;
    if (!v82)
      v83 = 0;
    v94 = v83;
    v84 = v80 + 2 * v82 + 1;
    v85 = (v80 + 2 * v82 + 1) & 7;
    v86 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v84 >> 3));
    v87 = bswap32(*v86) << (v84 & 7);
    if ((unint64_t)v86 > *(_QWORD *)(a1 + 24))
      v86 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v86;
    *(_DWORD *)(a1 + 32) = v87;
    *(_BYTE *)(a1 + 36) = v85;
    v88 = *(_QWORD *)(a2 + 176);
    if (v88)
      v89 = v88 + 80;
    else
      v89 = 0;
    v90 = *(_QWORD *)(a2 + 128);
    v91 = *(_QWORD *)(a2 + 136);
    if (v90)
      v92 = v90 + 80;
    else
      v92 = 0;
    if (v91)
      v93 = v91 + 80;
    else
      v93 = 0;
    result = sub_2160D0854(a1, v78, v9[3], a2, v89, v92, v93, v76, v75, (uint64_t)v10, a3, a4);
    if (!(_DWORD)result)
    {
      v77 = ((v94 + (1 << v82)) >> 1) - ((v94 + (1 << v82)) >> 1) * 2 * ((v94 + (1 << v82)) & 1);
LABEL_137:
      v9[54] = v77;
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= *(int *)(a1 + 12))
        return 0;
      else
        return 4294958327;
    }
  }
  return result;
}

uint64_t sub_2160D367C(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;

  if (*(_BYTE *)(a5 + 188))
    LODWORD(result) = sub_2160D36D0(a1, a2, a3, a4, a5);
  else
    LODWORD(result) = sub_2160CEFD0(a1, a2, a3, a4, a5);
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= *(int *)(a1 + 12))
    return result;
  else
    return 4294958327;
}

uint64_t sub_2160D36D0(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  __int16 v51;
  unsigned int v52;
  unsigned __int8 v53;
  __int16 v54;
  int v55;
  unsigned __int8 *v56[2];
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned __int8 *)(a5 + 28);
  v10 = *(_QWORD *)(a5 + 40);
  v11 = *(unsigned __int8 **)(a5 + 48);
  v12 = *(void **)(a5 + 56);
  v55 = *(char *)(v10 + 54);
  v13 = *(unsigned __int8 **)(a5 + 208);
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v14 = *(_QWORD *)(a5 + 128);
  v15 = *(_QWORD *)(a5 + 136);
  if (v14)
    v16 = (unsigned __int8 *)(v14 + 120);
  else
    v16 = 0;
  if (v15)
    v17 = (unsigned __int8 *)(v15 + 120);
  else
    v17 = 0;
  v56[0] = v16;
  v56[1] = v17;
  v18 = *(_QWORD *)(a5 + 168);
  v19 = *(_QWORD *)(a5 + 160);
  v20 = v18 == 0;
  v21 = v18 + 120;
  if (v20)
    v21 = 0;
  v57 = (_BYTE *)(*(_QWORD *)(a5 + 176) + 120);
  v58 = v21;
  v22 = v19 + 120;
  if (!v19)
    v22 = 0;
  v48 = v22;
  sub_2160D5248(v13, (uint64_t *)v56, v9, (_BYTE *)&v54 + 1);
  v23 = sub_2160CC60C(v9, HIBYTE(v54), (char *)&v54, &v53);
  if ((_DWORD)v23)
    return v23;
  *(_BYTE *)v10 = HIBYTE(v54);
  v25 = v54;
  *(_BYTE *)(v10 + 1) = v54;
  v26 = v53;
  *(_BYTE *)(v10 + 2) = v53;
  v57[1] = v25;
  v57[2] = v26;
  *(_BYTE *)(v10 + 3) = 0;
  if (!v25 && v26 == 25)
  {
    *(_BYTE *)(v10 + 54) = 0;
    sub_2160CFFB4(a1, (uint64_t)v12, a3, a4);
    v27 = *(_QWORD *)(a5 + 176);
    if (v27)
      v28 = (_QWORD *)(v27 + 80);
    else
      v28 = 0;
    *v28 = 0x1010101010101010;
    v28[1] = 0x1010101010101010;
    if (!a4 || (a3 & 0xFD) != 1)
      v28[2] = 0x1010101010101010;
    if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 > *(int *)(a1 + 12))
      return 4294958327;
    v57[23] = 0;
    *(_BYTE *)(*(_QWORD *)(a5 + 48) + 272) = 0;
    *(_BYTE *)(*(_QWORD *)(a5 + 40) + 54) = 0;
    if (*(_BYTE *)(a1 + 36))
      return 0xFFFFFFFFLL;
    sub_2160B13A8((uint64_t)v13, a1);
    return 0;
  }
  v57[23] = 0;
  if (*(_BYTE *)(a5 + 184))
  {
    v29 = *(_QWORD *)(a5 + 40);
    if (!*(_BYTE *)(v29 + 1) && !*(_BYTE *)(v29 + 2))
    {
      HIBYTE(v51) = 0;
      sub_2160D57CC((uint64_t)v13, v56, (_BYTE *)&v51 + 1);
      *(_BYTE *)(v10 + 3) = HIBYTE(v51);
      v25 = v54;
      v26 = v53;
    }
  }
  v23 = sub_2160CC688(v25, v26, *(unsigned __int8 *)(v10 + 3), (uint64_t)v11, *(unsigned __int8 *)(a5 + 31));
  if ((_DWORD)v23)
    return v23;
  v30 = v11[272];
  *(_BYTE *)(*(_QWORD *)(a5 + 176) + 126) = *(_BYTE *)(*(_QWORD *)(a5 + 48) + 272);
  v31 = *((_DWORD *)v11 + 2);
  if (v31 == 3)
  {
    v32 = v11[272];
LABEL_30:
    sub_2160D588C((uint64_t)v13, v56, &v52, v11[1], a4, *(_DWORD *)(a5 + 16) & *(unsigned __int8 *)(a5 + 185));
    v33 = 0;
    goto LABEL_31;
  }
  v36 = *(_QWORD *)(a5 + 40);
  if ((*(_BYTE *)(v36 + 1) || *(_BYTE *)(v36 + 2) == 25) && v30 == 4)
  {
    sub_2160D5634((uint64_t)v13, v9, v10 + 4);
    v23 = sub_2160CC9E0(*v11, *(unsigned __int8 *)(v10 + 1), v10 + 4, v10 + 20, (int *)(v10 + 36), (uint64_t)(v11 + 16), 0, 3);
    if ((_DWORD)v23)
      return v23;
    v57[6] = v11[272];
    v37 = 31;
    for (i = 7; i != 23; ++i)
    {
      v57[i] = v11[v37];
      v37 += 16;
    }
    LODWORD(v47) = a2;
    v39 = sub_2160D6944((int *)v13, (uint64_t *)v56, v54, v53, v10 + 4, v10 + 20, v10 + 36, *(unsigned __int8 *)(a5 + 31), v47, (uint64_t)v11, *(_DWORD *)(a5 + 16) & *(unsigned __int8 *)(a5 + 185));
  }
  else
  {
    v57[6] = v11[272];
    v44 = 31;
    for (j = 7; j != 23; ++j)
    {
      v57[j] = v11[v44];
      v44 += 16;
    }
    v39 = sub_2160D5D24((uint64_t)v13, (uint64_t *)v56, *(unsigned __int8 *)(a5 + 31), a2, (uint64_t)v11, a4, *(_DWORD *)(a5 + 16) & *(unsigned __int8 *)(a5 + 185));
  }
  v23 = v39;
  if ((_DWORD)v39)
    return v23;
  v32 = v11[272];
  if (v31 != 2)
    goto LABEL_30;
  v33 = 1;
LABEL_31:
  v51 = 0;
  if ((a3 & 0xFFFFFFFD) == 1)
  {
    v34 = a3;
    v35 = a4;
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v23 = sub_2160CC930(*(unsigned __int8 *)(v10 + 1), *(unsigned __int8 *)(v10 + 2), v52, &v51, (char *)&v51 + 1, v34, v35);
  if (!(_DWORD)v23)
  {
    v40 = v51;
    *(_BYTE *)(v10 + 53) = v51;
    v41 = HIBYTE(v51);
    *(_BYTE *)(v10 + 52) = HIBYTE(v51);
    v57[4] = v41;
    v57[5] = v40;
    v42 = v52;
    if ((v52 & 0xF) != 0 && *(_BYTE *)(a5 + 184))
    {
      v43 = *(_QWORD *)(a5 + 40);
      if (*(_BYTE *)(v43 + 1))
      {
        if (v32 > 4 || *(_BYTE *)(v43 + 1) == 3 && !*(_BYTE *)(v43 + 2) && !**(_BYTE **)(a5 + 48))
          goto LABEL_62;
LABEL_61:
        v50 = 0;
        sub_2160D57CC((uint64_t)v13, v56, &v50);
        *(_BYTE *)(v10 + 3) = v50;
        v42 = v52;
        goto LABEL_62;
      }
      if (*(_BYTE *)(v43 + 2) && v32 < 5)
        goto LABEL_61;
    }
LABEL_62:
    if (((v42 < 1) & ~v33) != 0)
    {
      v46 = 0;
    }
    else
    {
      bzero(v12, 0x330uLL);
      sub_2160D5BF4((uint64_t)v13, v48, (uint64_t)v57, &v55);
      sub_2160D6E1C((uint64_t)v13, (uint64_t *)v56, a2, *(unsigned __int8 *)(a5 + 31) - 1, *(_QWORD *)(a5 + 176) + 80, (uint64_t)v12, *(unsigned __int8 *)(v10 + 3), a5);
      v46 = v55;
    }
    *(_BYTE *)(v10 + 54) = v46;
  }
  return v23;
}

uint64_t sub_2160D3C40(uint64_t a1, int a2, int a3, int a4, uint64_t a5, _BYTE *a6)
{
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t result;
  unsigned int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  char v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int *v70;
  unsigned int *v71;
  int v72;
  int v73;
  uint64_t i;
  unint64_t v75;
  signed int v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t k;
  unint64_t v84;
  signed int v85;
  unsigned int v86;
  unint64_t v87;
  int v88;
  int v89;
  BOOL v90;
  unsigned int *v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  _BYTE *v96;
  uint64_t n;
  unsigned int v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int *v106;
  BOOL v107;
  int v108;
  unsigned int v109;
  _BYTE *v110;
  uint64_t ii;
  unsigned int v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unint64_t v131;
  int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  char v137;
  unsigned int v138;
  unsigned int v139;
  unint64_t v140;
  BOOL v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unint64_t v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unint64_t v159;
  int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unint64_t v164;
  int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  char v170;
  unsigned int v171;
  unsigned int v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  unint64_t v185;
  uint64_t j;
  unint64_t v187;
  unsigned int v188;
  unint64_t v189;
  uint64_t m;
  unint64_t v191;
  unsigned int v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unint64_t v197;
  unsigned int *v198;
  int v199;
  int v200;
  char v201;
  unsigned int v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  char *v211;
  int *v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v217;
  int v218;
  int v219;
  int v220;
  unsigned __int8 v221;
  unsigned int v222;
  int v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unint64_t v228;
  char v229;
  unsigned int *v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  __int16 v244;
  __int16 v245;

  v12 = *(unsigned __int8 *)(a5 + 28);
  v14 = *(_QWORD *)(a5 + 40);
  v13 = *(unsigned __int8 **)(a5 + 48);
  v245 = 0;
  v15 = *(_DWORD *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 36);
  v17 = __clz(v15 | 1);
  if (!v15)
    ++v17;
  v18 = (v15 << (v17 + 1)) >> -(char)v17;
  if (!v17)
    v18 = 0;
  v19 = v18 + ~(-1 << v17);
  v20 = v16 + 2 * v17 + 1;
  v21 = (v16 + 2 * v17 + 1) & 7;
  v22 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v20 >> 3));
  v23 = bswap32(*v22);
  if ((unint64_t)v22 > *(_QWORD *)(a1 + 24))
    v22 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 32) = v23 << v21;
  *(_BYTE *)(a1 + 36) = v21;
  result = sub_2160CC60C(v12, v19, (char *)&v245 + 1, &v245);
  if (!(_DWORD)result)
  {
    *(_BYTE *)v14 = v19;
    v25 = HIBYTE(v245);
    *(_BYTE *)(v14 + 1) = HIBYTE(v245);
    v26 = v245;
    *(_BYTE *)(v14 + 2) = v245;
    if (!v25 && v26 == 25)
    {
      sub_2160CFFB4(a1, (uint64_t)a6, a3, a4);
      v27 = *(_QWORD *)(a5 + 176);
      if (v27)
        v28 = (_QWORD *)(v27 + 80);
      else
        v28 = 0;
      *v28 = 0x1010101010101010;
      v28[1] = 0x1010101010101010;
      if (!a4 || (a3 & 0xFD) != 1)
        v28[2] = 0x1010101010101010;
      result = 0;
      *(_BYTE *)(*(_QWORD *)(a5 + 48) + 272) = 0;
      *(_BYTE *)(v14 + 54) = 0;
      return result;
    }
    *(_BYTE *)(v14 + 3) = 0;
    if (!*(_BYTE *)(a5 + 184) || (v29 = *(_QWORD *)(a5 + 40), *(_BYTE *)(v29 + 1)) || *(_BYTE *)(v29 + 2))
    {
      v30 = 0;
    }
    else
    {
      v30 = *(_DWORD *)(a1 + 32) >> 31;
      v79 = *(unsigned __int8 *)(a1 + 36) + 1;
      v80 = v79 & 7;
      v81 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v79 >> 3));
      v82 = bswap32(*v81) << (v79 & 7);
      if ((unint64_t)v81 > *(_QWORD *)(a1 + 24))
        v81 = *(unsigned int **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v81;
      *(_DWORD *)(a1 + 32) = v82;
      *(_BYTE *)(a1 + 36) = v80;
      *(_BYTE *)(v14 + 3) = v30;
    }
    result = sub_2160CC688(v25, v26, v30, (uint64_t)v13, *(unsigned __int8 *)(a5 + 31));
    if (!(_DWORD)result)
    {
      v31 = v13[272];
      *(_BYTE *)(*(_QWORD *)(a5 + 176) + 126) = *(_BYTE *)(*(_QWORD *)(a5 + 48) + 272);
      v32 = *((_DWORD *)v13 + 2);
      if (v32 == 3)
        goto LABEL_259;
      v33 = (uint64_t)(v13 + 16);
      v34 = *(_QWORD *)(a5 + 40);
      if ((*(_BYTE *)(v34 + 1) || *(_BYTE *)(v34 + 2) == 25) && v31 == 4)
      {
        v35 = *(unsigned int **)(a1 + 24);
        v36 = *(_DWORD *)(a1 + 32);
        v37 = __clz(v36 | 1);
        if (!v36)
          ++v37;
        v38 = (v36 << (v37 + 1)) >> -(char)v37;
        if (v37)
          v39 = v38;
        else
          v39 = 0;
        v40 = v39 + ~(-1 << v37);
        v41 = *(unsigned __int8 *)(a1 + 36) + 2 * v37 + 1;
        v42 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v41 >> 3));
        v43 = *v42;
        *(_DWORD *)(v14 + 4) = v40;
        v44 = v41 & 7;
        v45 = bswap32(v43) << v44;
        if (v42 > v35)
          v42 = v35;
        v46 = __clz(v45 | 1);
        if (!v45)
          ++v46;
        v47 = v45 << (v46 + 1) >> -(char)v46;
        if (!v46)
          v47 = 0;
        v48 = v47 + ~(-1 << v46);
        v49 = v44 + 2 * v46 + 1;
        v50 = v49 & 7;
        v51 = (unsigned int *)((char *)v42 + (v49 >> 3));
        v52 = bswap32(*v51) << (v49 & 7);
        if (v51 > v35)
          v51 = v35;
        *(_DWORD *)(v14 + 8) = v48;
        v53 = __clz(v52 | 1);
        if (!v52)
          ++v53;
        v54 = v52 << (v53 + 1) >> -(char)v53;
        if (!v53)
          v54 = 0;
        v55 = v54 + ~(-1 << v53);
        v56 = v50 + 2 * v53 + 1;
        v57 = v56 & 7;
        v58 = (unsigned int *)((char *)v51 + (v56 >> 3));
        v59 = bswap32(*v58) << (v56 & 7);
        if (v58 > v35)
          v58 = v35;
        *(_DWORD *)(v14 + 12) = v55;
        v60 = __clz(v59 | 1);
        if (!v59)
          ++v60;
        v61 = v57 + 2 * v60 + 1;
        v62 = (unsigned int *)((char *)v58 + (v61 >> 3));
        v63 = bswap32(*v62);
        if (v62 <= v35)
          v35 = v62;
        v64 = v61 & 7;
        v65 = v63 << (v61 & 7);
        v66 = ~(-1 << v60);
        v67 = v59 << (v60 + 1) >> -(char)v60;
        if (v60)
          v68 = v67;
        else
          v68 = 0;
        *(_DWORD *)(v14 + 16) = v68 + v66;
        *(_QWORD *)(a1 + 16) = v35;
        *(_DWORD *)(a1 + 32) = v65;
        *(_BYTE *)(a1 + 36) = v64;
        v241 = v32;
        result = sub_2160CC9E0(*v13, *(unsigned __int8 *)(v14 + 1), v14 + 4, v14 + 20, (int *)(v14 + 36), v33, 0, 3);
        if ((_DWORD)result)
          return result;
        result = sub_2160D0090(a1, HIBYTE(v245), v245, v14 + 4, v14 + 20, v14 + 36, *(unsigned __int8 *)(a5 + 31), a2, (uint64_t)v13);
        v32 = v241;
        if ((_DWORD)result)
          return result;
LABEL_257:
        if (v32 == 2)
        {
          v199 = 0;
          v200 = 1;
          v201 = a3 & 0xFD;
          goto LABEL_288;
        }
LABEL_259:
        v201 = a3 & 0xFD;
        v202 = v13[272];
        v203 = *(_QWORD *)(a1 + 24);
        v204 = *(_DWORD *)(a1 + 32);
        v205 = __clz(v204 | 1);
        if (v204)
          v206 = v205;
        else
          v206 = v205 + 1;
        v207 = (v204 << (v206 + 1)) >> -(char)v206;
        if (!v206)
          v207 = 0;
        v208 = v207 + ~(-1 << v206);
        v209 = (unsigned int *)(*(_QWORD *)(a1 + 16)
                              + ((unint64_t)(*(unsigned __int8 *)(a1 + 36) + 2 * v206 + 1) >> 3));
        v210 = *v209;
        if ((unint64_t)v209 > v203)
          v209 = *(unsigned int **)(a1 + 24);
        if ((a3 & 0xFD) == 1 && a4 || !v13[1])
        {
          if (v208 <= 0xF)
          {
            v211 = (char *)&unk_2160F8C80 + 64 * (unint64_t)((HIBYTE(v245) | v245) == 0);
            goto LABEL_274;
          }
        }
        else if (v208 <= 0x2F)
        {
          v211 = (char *)&unk_2160F8D00 + 192 * ((HIBYTE(v245) | v245) == 0);
LABEL_274:
          v212 = (int *)&v211[4 * v208];
          v213 = (*(_BYTE *)(a1 + 36) + 2 * (_BYTE)v206 + 1) & 7;
          v214 = bswap32(v210) << ((*(_BYTE *)(a1 + 36) + 2 * v206 + 1) & 7);
          v199 = *v212;
          if ((*v212 & 0xF) == 0 || !*(_BYTE *)(a5 + 184))
            goto LABEL_287;
          v215 = *(_QWORD *)(a5 + 40);
          if (*(_BYTE *)(v215 + 1))
          {
            if (v202 > 4 || *(_BYTE *)(v215 + 1) == 3 && !*(_BYTE *)(v215 + 2) && !**(_BYTE **)(a5 + 48))
            {
LABEL_287:
              v200 = 0;
              *(_QWORD *)(a1 + 16) = v209;
              *(_DWORD *)(a1 + 32) = v214;
              *(_BYTE *)(a1 + 36) = v213;
LABEL_288:
              v244 = 0;
              if (v201 == 1)
              {
                v218 = a3;
                v219 = a4;
              }
              else
              {
                v218 = 0;
                v219 = 0;
              }
              result = sub_2160CC930(*(unsigned __int8 *)(v14 + 1), *(unsigned __int8 *)(v14 + 2), v199, &v244, (char *)&v244 + 1, v218, v219);
              if ((_DWORD)result)
                return result;
              v220 = v200;
              v221 = v244;
              *(_BYTE *)(v14 + 53) = v244;
              v222 = HIBYTE(v244);
              *(_BYTE *)(v14 + 52) = HIBYTE(v244);
              a6[817] = v221;
              a6[816] = v222;
              if (((v199 < 1) & ~v220) != 0)
              {
                LOBYTE(v240) = 0;
              }
              else
              {
                v243 = v220;
                bzero(a6, 0x330uLL);
                v223 = *(_DWORD *)(a1 + 32);
                v224 = *(unsigned __int8 *)(a1 + 36);
                v225 = __clz(v223 | 1);
                if (v223)
                  v226 = v225;
                else
                  v226 = v225 + 1;
                v227 = (v223 << (v226 + 1)) >> -(char)v226;
                if (!v226)
                  v227 = 0;
                v242 = v227;
                v228 = v224 + 2 * v226 + 1;
                v229 = (v224 + 2 * v226 + 1) & 7;
                v230 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v228 >> 3));
                v231 = bswap32(*v230) << (v228 & 7);
                if ((unint64_t)v230 > *(_QWORD *)(a1 + 24))
                  v230 = *(unsigned int **)(a1 + 24);
                *(_QWORD *)(a1 + 16) = v230;
                *(_DWORD *)(a1 + 32) = v231;
                *(_BYTE *)(a1 + 36) = v229;
                v232 = *(_QWORD *)(a5 + 176);
                if (v232)
                  v233 = v232 + 80;
                else
                  v233 = 0;
                v234 = *(_QWORD *)(a5 + 128);
                v235 = *(_QWORD *)(a5 + 136);
                if (v234)
                  v236 = v234 + 80;
                else
                  v236 = 0;
                if (v235)
                  v237 = v235 + 80;
                else
                  v237 = 0;
                if (v201 == 1)
                  v238 = a3;
                else
                  v238 = 0;
                if (v201 == 1)
                  v239 = a4;
                else
                  v239 = 0;
                result = sub_2160D0854(a1, v243, *(unsigned __int8 *)(v14 + 3), a5, v233, v236, v237, v222, v221, (uint64_t)a6, v238, v239);
                if ((_DWORD)result)
                  return result;
                v240 = ((v242 + (1 << v226)) >> 1) - ((v242 + (1 << v226)) >> 1) * 2 * ((v242 + (1 << v226)) & 1);
              }
              result = 0;
              *(_BYTE *)(v14 + 54) = v240;
              return result;
            }
          }
          else if (!*(_BYTE *)(v215 + 2) || v202 >= 5)
          {
            goto LABEL_287;
          }
          v216 = v214 >> 31;
          v217 = (v213 + 1);
          LOBYTE(v213) = (v213 + 1) & 7;
          v209 = (unsigned int *)((char *)v209 + (v217 >> 3));
          v214 = bswap32(*v209) << (v217 & 7);
          if ((unint64_t)v209 > v203)
            v209 = *(unsigned int **)(a1 + 24);
          *(_BYTE *)(v14 + 3) = v216;
          goto LABEL_287;
        }
        return 4294958327;
      }
      if (v32 <= 7 && ((1 << v32) & 0x86) != 0)
      {
        v69 = v13[1];
        v71 = *(unsigned int **)(a1 + 16);
        v70 = *(unsigned int **)(a1 + 24);
        v72 = *(_DWORD *)(a1 + 32);
        v73 = *(unsigned __int8 *)(a1 + 36);
        if ((a3 & 0xFD) == 1)
        {
          if (v32 == 1)
          {
            for (i = 0; i != 16; ++i)
            {
              v75 = (v73 + 1);
              v73 = ((_BYTE)v73 + 1) & 7;
              v71 = (unsigned int *)((char *)v71 + (v75 >> 3));
              v76 = bswap32(*v71) << (v75 & 7);
              if (v71 > v70)
                v71 = v70;
              if ((v72 & 0x80000000) == 0)
              {
                v77 = v76 >> 29;
                v78 = (v73 + 3);
                v73 = ((_BYTE)v73 + 3) & 7;
                v71 = (unsigned int *)((char *)v71 + (v78 >> 3));
                v76 = bswap32(*v71) << (v78 & 7);
                if (v71 > v70)
                  v71 = v70;
                a6[i + 1142] = v77;
              }
              a6[i + 1122] = v72 < 0;
              v72 = v76;
            }
          }
          else
          {
            v76 = *(_DWORD *)(a1 + 32);
          }
          if (v32 == 7)
          {
            for (j = 0; j != 4; ++j)
            {
              v187 = (v73 + 1);
              v73 = ((_BYTE)v73 + 1) & 7;
              v71 = (unsigned int *)((char *)v71 + (v187 >> 3));
              v92 = bswap32(*v71) << (v187 & 7);
              if (v71 > v70)
                v71 = v70;
              if ((v76 & 0x80000000) == 0)
              {
                v188 = v92 >> 29;
                v189 = (v73 + 3);
                v73 = ((_BYTE)v73 + 3) & 7;
                v71 = (unsigned int *)((char *)v71 + (v189 >> 3));
                v92 = bswap32(*v71) << (v189 & 7);
                if (v71 > v70)
                  v71 = v70;
                a6[j + 1158] = v188;
              }
              a6[j + 1138] = v76 < 0;
              v76 = v92;
            }
          }
          else
          {
            v92 = v76;
          }
          LOBYTE(v194) = 0;
          if (a4 == 1 || !v69)
            goto LABEL_255;
        }
        else
        {
          if (v32 == 1)
          {
            for (k = 0; k != 16; ++k)
            {
              v84 = (v73 + 1);
              v73 = ((_BYTE)v73 + 1) & 7;
              v71 = (unsigned int *)((char *)v71 + (v84 >> 3));
              v85 = bswap32(*v71) << (v84 & 7);
              if (v71 > v70)
                v71 = v70;
              if ((v72 & 0x80000000) == 0)
              {
                v86 = v85 >> 29;
                v87 = (v73 + 3);
                v73 = ((_BYTE)v73 + 3) & 7;
                v71 = (unsigned int *)((char *)v71 + (v87 >> 3));
                v85 = bswap32(*v71) << (v87 & 7);
                if (v71 > v70)
                  v71 = v70;
                a6[k + 1142] = v86;
              }
              a6[k + 1122] = v72 < 0;
              v72 = v85;
            }
          }
          else
          {
            v85 = *(_DWORD *)(a1 + 32);
          }
          if (v32 == 7)
          {
            for (m = 0; m != 4; ++m)
            {
              v191 = (v73 + 1);
              v73 = ((_BYTE)v73 + 1) & 7;
              v71 = (unsigned int *)((char *)v71 + (v191 >> 3));
              v92 = bswap32(*v71) << (v191 & 7);
              if (v71 > v70)
                v71 = v70;
              if ((v85 & 0x80000000) == 0)
              {
                v192 = v92 >> 29;
                v193 = (v73 + 3);
                v73 = ((_BYTE)v73 + 3) & 7;
                v71 = (unsigned int *)((char *)v71 + (v193 >> 3));
                v92 = bswap32(*v71) << (v193 & 7);
                if (v71 > v70)
                  v71 = v70;
                a6[m + 1158] = v192;
              }
              a6[m + 1138] = v85 < 0;
              v85 = v92;
            }
          }
          else
          {
            v92 = v85;
          }
          if (!v69)
          {
            LOBYTE(v194) = 0;
LABEL_255:
            a6[1121] = v194;
LABEL_256:
            *(_QWORD *)(a1 + 16) = v71;
            *(_DWORD *)(a1 + 32) = v92;
            *(_BYTE *)(a1 + 36) = v73;
            goto LABEL_257;
          }
        }
        v195 = __clz(v92 | 1);
        if (!v92)
          ++v195;
        v196 = v92 << (v195 + 1) >> -(char)v195;
        if (!v195)
          v196 = 0;
        v194 = v196 + ~(-1 << v195);
        v197 = v73 + 2 * v195 + 1;
        LOBYTE(v73) = v197 & 7;
        v198 = (unsigned int *)((char *)v71 + (v197 >> 3));
        v92 = bswap32(*v198) << v73;
        if (v198 <= v70)
          v71 = v198;
        else
          v71 = v70;
        goto LABEL_255;
      }
      v88 = *(unsigned __int8 *)(a5 + 31);
      v89 = v13[2];
      if (v13[2])
        v90 = 1;
      else
        v90 = v88 == 2;
      v71 = *(unsigned int **)(a1 + 16);
      v91 = *(unsigned int **)(a1 + 24);
      v92 = *(_DWORD *)(a1 + 32);
      v73 = *(unsigned __int8 *)(a1 + 36);
      v93 = v13[3];
      v94 = v13[272];
      if (v90 && v13[272])
      {
        if (v88 == 2)
          v89 = (2 * v89) | 1;
        if (a2)
          v95 = 16;
        else
          v95 = 32;
        v96 = v13 + 24;
        for (n = v13[272]; n; --n)
        {
          if (v96[7] == 5)
          {
            LOBYTE(v98) = 32;
          }
          else if (v89 == 1)
          {
            v99 = (v73 + 1);
            v73 = ((_BYTE)v73 + 1) & 7;
            v71 = (unsigned int *)((char *)v71 + (v99 >> 3));
            v100 = ~v92;
            v101 = bswap32(*v71) << (v99 & 7);
            if (v71 > v91)
              v71 = v91;
            v98 = v100 >> 31;
            v92 = v101;
          }
          else
          {
            v102 = __clz(v92 | 1);
            if (v92)
              v103 = v102;
            else
              v103 = v102 + 1;
            v104 = v92 << (v103 + 1) >> -(char)v103;
            if (!v103)
              v104 = 0;
            v98 = v104 + ~(-1 << v103);
            v105 = v73 + 2 * v103 + 1;
            v106 = (unsigned int *)((char *)v71 + (v105 >> 3));
            if (v106 <= v91)
              v71 = (unsigned int *)((char *)v71 + (v105 >> 3));
            else
              v71 = v91;
            if (v95 <= v98)
              return 4294958327;
            v73 = v105 & 7;
            v92 = bswap32(*v106) << v73;
          }
          *v96 = v98;
          v96 += 16;
        }
      }
      if (v93)
        v107 = 1;
      else
        v107 = v88 == 2;
      if (v107 && (_DWORD)v94)
      {
        if (v88 == 2)
          v108 = (2 * v93) | 1;
        else
          v108 = v93;
        if (a2)
          v109 = 16;
        else
          v109 = 32;
        v110 = v13 + 25;
        for (ii = v94; ii; --ii)
        {
          if (v110[6] == 4)
          {
            LOBYTE(v112) = 32;
          }
          else if (v108 == 1)
          {
            v113 = (v73 + 1);
            v73 = ((_BYTE)v73 + 1) & 7;
            v71 = (unsigned int *)((char *)v71 + (v113 >> 3));
            v114 = ~v92;
            v115 = bswap32(*v71) << (v113 & 7);
            if (v71 > v91)
              v71 = v91;
            v112 = v114 >> 31;
            v92 = v115;
          }
          else
          {
            v116 = __clz(v92 | 1);
            if (v92)
              v117 = v116;
            else
              v117 = v116 + 1;
            v118 = v92 << (v117 + 1) >> -(char)v117;
            if (!v117)
              v118 = 0;
            v112 = v118 + ~(-1 << v117);
            v119 = v73 + 2 * v117 + 1;
            v120 = (unsigned int *)((char *)v71 + (v119 >> 3));
            if (v120 <= v91)
              v71 = (unsigned int *)((char *)v71 + (v119 >> 3));
            else
              v71 = v91;
            if (v109 <= v112)
              return 4294958327;
            v73 = v119 & 7;
            v92 = bswap32(*v120) << v73;
          }
          *v110 = v112;
          v110 += 16;
        }
      }
      if (!(_DWORD)v94)
        goto LABEL_256;
      v121 = 0;
      while (1)
      {
        v122 = v33 + 16 * v121;
        if (*(_BYTE *)(v122 + 15) != 5)
          break;
LABEL_179:
        if (++v121 == v94)
        {
          v154 = 0;
          while (1)
          {
            v155 = v33 + 16 * v154;
            if (*(_BYTE *)(v155 + 15) != 4)
              break;
LABEL_217:
            if (++v154 == v94)
              goto LABEL_256;
          }
          v156 = __clz(v92 | 1);
          if (!v92)
            ++v156;
          if (v156 <= 0xC)
          {
            v157 = v92 << (v156 + 1) >> -(char)v156;
            if (!v156)
              v157 = 0;
            v158 = v157 + ~(-1 << v156);
            v159 = v73 + 2 * v156 + 1;
            v160 = v159 & 7;
            v161 = (unsigned int *)((char *)v71 + (v159 >> 3));
            v162 = bswap32(*v161) << v160;
            if (v161 <= v91)
              v163 = v161;
            else
              v163 = v91;
            goto LABEL_210;
          }
          v164 = (v73 + 1);
          v165 = v164 & 7;
          v166 = (unsigned int *)((char *)v71 + (v164 >> 3));
          v167 = bswap32(*v166) << v165;
          if (v166 <= v91)
            v168 = v166;
          else
            v168 = v91;
          if ((v92 & 0x80000000) != 0)
          {
            v172 = 0;
          }
          else
          {
            v169 = 0;
            do
            {
              v170 = v165;
              v171 = v167;
              v172 = v169 + 1;
              v173 = (v165 + 1);
              v165 = ((_BYTE)v165 + 1) & 7;
              v168 = (unsigned int *)((char *)v168 + (v173 >> 3));
              v167 = bswap32(*v168) << (v173 & 7);
              if (v168 > v91)
                v168 = v91;
              if ((v171 & 0x80000000) != 0)
                break;
              v141 = v169++ >= 0x1F;
            }
            while (!v141);
            if (v172 - 1 > 0x17)
            {
              v174 = v167 >> (48 - v172);
              v175 = ((v170 + 1) & 7) + v172;
              v176 = v175 - 16;
              v160 = v175 & 7;
              v177 = (unsigned int *)((char *)v168 + (v176 >> 3));
              v178 = bswap32(*v177) << v160;
              if (v177 > v91)
                v177 = v91;
              v179 = *(unsigned int *)((char *)v177 + 2);
              v163 = (unsigned int *)((char *)v177 + 2);
              v162 = bswap32(v179) << v160;
              if (v163 > v91)
                v163 = v91;
              v180 = __PAIR64__(v174, v178) >> 16;
LABEL_209:
              v158 = v180 + ~(-1 << v172);
LABEL_210:
              *(_WORD *)(v155 + 4) = ((v158 + 1) >> 1) - ((v158 + 1) >> 1) * 2 * (((_BYTE)v158 + 1) & 1);
              v182 = __clz(v162 | 1);
              if (!v162)
                ++v182;
              v183 = v162 << (v182 + 1) >> -(char)v182;
              if (!v182)
                v183 = 0;
              v184 = 1 << v182;
              v185 = v160 + 2 * v182 + 1;
              v73 = v185 & 7;
              v71 = (unsigned int *)((char *)v163 + (v185 >> 3));
              v92 = bswap32(*v71) << (v185 & 7);
              if (v71 > v91)
                v71 = v91;
              *(_WORD *)(v155 + 6) = ((v183 + v184) >> 1) - ((v183 + v184) >> 1) * 2 * ((v183 + v184) & 1);
              goto LABEL_217;
            }
          }
          v180 = v167 >> -(char)v172;
          v181 = v172 + v165;
          v160 = v181 & 7;
          v163 = (unsigned int *)((char *)v168 + (v181 >> 3));
          v162 = bswap32(*v163) << (v181 & 7);
          if (v163 > v91)
            v163 = v91;
          goto LABEL_209;
        }
      }
      v123 = __clz(v92 | 1);
      if (!v92)
        ++v123;
      if (v123 <= 0xC)
      {
        v124 = v92 << (v123 + 1) >> -(char)v123;
        if (!v123)
          v124 = 0;
        v125 = v124 + ~(-1 << v123);
        v126 = v73 + 2 * v123 + 1;
        v127 = v126 & 7;
        v128 = (unsigned int *)((char *)v71 + (v126 >> 3));
        v129 = bswap32(*v128) << v127;
        if (v128 <= v91)
          v130 = v128;
        else
          v130 = v91;
        goto LABEL_172;
      }
      v131 = (v73 + 1);
      v132 = v131 & 7;
      v133 = (unsigned int *)((char *)v71 + (v131 >> 3));
      v134 = bswap32(*v133) << v132;
      if (v133 <= v91)
        v135 = v133;
      else
        v135 = v91;
      if ((v92 & 0x80000000) != 0)
      {
        v139 = 0;
      }
      else
      {
        v136 = 0;
        do
        {
          v137 = v132;
          v138 = v134;
          v139 = v136 + 1;
          v140 = (v132 + 1);
          v132 = ((_BYTE)v132 + 1) & 7;
          v135 = (unsigned int *)((char *)v135 + (v140 >> 3));
          v134 = bswap32(*v135) << (v140 & 7);
          if (v135 > v91)
            v135 = v91;
          if ((v138 & 0x80000000) != 0)
            break;
          v141 = v136++ >= 0x1F;
        }
        while (!v141);
        if (v139 - 1 > 0x17)
        {
          v142 = v134 >> (48 - v139);
          v143 = ((v137 + 1) & 7) + v139;
          v144 = v143 - 16;
          v127 = v143 & 7;
          v145 = (unsigned int *)((char *)v135 + (v144 >> 3));
          v146 = bswap32(*v145) << v127;
          if (v145 > v91)
            v145 = v91;
          v147 = *(unsigned int *)((char *)v145 + 2);
          v130 = (unsigned int *)((char *)v145 + 2);
          v129 = bswap32(v147) << v127;
          if (v130 > v91)
            v130 = v91;
          v148 = __PAIR64__(v142, v146) >> 16;
LABEL_171:
          v125 = v148 + ~(-1 << v139);
LABEL_172:
          *(_WORD *)v122 = ((v125 + 1) >> 1) - ((v125 + 1) >> 1) * 2 * (((_BYTE)v125 + 1) & 1);
          v150 = __clz(v129 | 1);
          if (!v129)
            ++v150;
          v151 = v129 << (v150 + 1) >> -(char)v150;
          if (!v150)
            v151 = 0;
          v152 = 1 << v150;
          v153 = v127 + 2 * v150 + 1;
          v73 = v153 & 7;
          v71 = (unsigned int *)((char *)v130 + (v153 >> 3));
          v92 = bswap32(*v71) << (v153 & 7);
          if (v71 > v91)
            v71 = v91;
          *(_WORD *)(v122 + 2) = ((v151 + v152) >> 1) - ((v151 + v152) >> 1) * 2 * ((v151 + v152) & 1);
          goto LABEL_179;
        }
      }
      v148 = v134 >> -(char)v139;
      v149 = v139 + v132;
      v127 = v149 & 7;
      v130 = (unsigned int *)((char *)v135 + (v149 >> 3));
      v129 = bswap32(*v130) << (v149 & 7);
      if (v130 > v91)
        v130 = v91;
      goto LABEL_171;
    }
  }
  return result;
}

uint64_t sub_2160D4C30(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;

  if (*(_BYTE *)(a5 + 188))
    LODWORD(result) = sub_2160D36D0(a1, a2, a3, a4, a5);
  else
    LODWORD(result) = sub_2160D3C40(a1, a2, a3, a4, a5, a6);
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= *(int *)(a1 + 12))
    return result;
  else
    return 4294958327;
}

uint64_t sub_2160D4C84(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _UNKNOWN **v11;
  _UNKNOWN ***v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _UNKNOWN ***v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  _BOOL4 v58;
  int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  int v86;
  int v87;
  _WORD *v88;
  int *v89;
  int v90;
  int v92;
  _DWORD v93[16];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int **)(a1 + 16);
  v5 = *(unsigned int **)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 36);
  if (a4 == 4)
  {
    if (a2)
      return 999;
    v12 = off_24D4DE5F0;
    v13 = 0x800000;
    v11 = &off_24D4DEBB0;
  }
  else
  {
    if (a2 == 3)
    {
      v9 = v6 >> 28;
      if (v6 >> 26 == 3)
      {
        v10 = 6;
LABEL_18:
        v18 = (v10 + v7);
        LOBYTE(v7) = (v10 + v7) & 7;
        v19 = (unsigned int *)((char *)v4 + (v18 >> 3));
        v20 = bswap32(*v19);
        if (v19 <= v5)
          v4 = v19;
        else
          v4 = *(unsigned int **)(a1 + 24);
        v21 = v20 << v7;
        goto LABEL_100;
      }
      v24 = (v6 >> 26) & 3;
      v25 = v24 != 3;
      if ((v25 & (v6 >> 29 > 4)) != 0)
        v26 = 256;
      else
        v26 = 0;
      v22 = v26 | (v25 << 7);
      ++v9;
      v23 = 6;
      v12 = &off_24D4DE620;
      goto LABEL_28;
    }
    v11 = off_24D4DE5E0[a2 + 1];
    v12 = &off_24D4DE620;
    v13 = 0x8000;
  }
  v14 = v13 | v6;
  v15 = __clz(v13 | v6);
  if (!LOBYTE(v11[2 * v15 + 1]))
  {
    v9 = 999;
    v21 = *(_DWORD *)(a1 + 32);
    goto LABEL_100;
  }
  if (a4 == 4)
    v16 = 31;
  else
    v16 = 32;
  v17 = 1 << a2;
  if (a4 == 4)
    v10 = v17 + 1;
  else
    v10 = 1 << a2;
  if (v6 >> (v16 - v17) == *((unsigned __int8 *)&off_24D4DE5E0[55] + a2 + 4))
  {
    v9 = 0;
    goto LABEL_18;
  }
  v22 = *(unsigned __int16 *)((char *)v11[2 * v15]
                            + ((((2 * v14) << v15) >> (LOBYTE(v11[2 * v15 + 1]) - 1)) & 0xFFFFFFFE));
  v23 = v22 >> 9;
  v9 = (v22 >> 2) & 0x1F;
  v24 = v22 & 3;
LABEL_28:
  v27 = v24 + v7 + v23;
  v7 = ((_BYTE)v24 + (_BYTE)v7 + (_BYTE)v23) & 7;
  v4 = (unsigned int *)((char *)v4 + (v27 >> 3));
  v28 = bswap32(*v4);
  if (v4 > v5)
    v4 = *(unsigned int **)(a1 + 24);
  v21 = v28 << v7;
  if (v24)
  {
    v29 = v6 << v23;
    v30 = v93;
    v31 = v24;
    do
    {
      *v30++ = (v29 >> 30) | 1;
      v29 *= 2;
      --v31;
    }
    while (v31);
  }
  v32 = v9 - v24;
  if (v9 != v24)
  {
    if ((v32 & 0x80000000) != 0)
      return 999;
    v55 = v24;
    v56 = ((v22 >> 6) & 2) + 2;
    v57 = (v22 >> 8) & 1;
    v58 = !(v22 & 0x100);
    v59 = &v93[v55];
    while (v21 < 0x20000)
    {
      v72 = __clz(v21 | 1);
      if (v21)
        v73 = v72;
      else
        v73 = v72 + 1;
      v74 = v73 - 15;
      if (v73 == 15)
      {
        v75 = bswap32(*(unsigned int *)((char *)v4 + 1)) << v7;
        v69 = ((15 << (v57 + v58)) + v56 + ((v75 >> 12) & 0xFFF)) >> 1;
        v70 = (-((v75 >> 12) & 1) ^ v69) + ((v75 >> 12) & 1);
        v71 = (v7 + 28);
LABEL_74:
        v7 = v71 & 7;
        v4 = (unsigned int *)((char *)v4 + (v71 >> 3));
        v76 = bswap32(*v4);
        if (v4 > v5)
          v4 = v5;
        v21 = v76 << v7;
        goto LABEL_88;
      }
      if (v74 > 9)
        return 999;
      v77 = v7 + v73 + 1;
      v78 = v77 & 7;
      v79 = (unsigned int *)((char *)v4 + (v77 >> 3));
      v80 = bswap32(*v79);
      if (v79 <= v5)
        v81 = v79;
      else
        v81 = v5;
      v82 = v80 << v78;
      v83 = v73 + v78;
      v84 = v82 >> (35 - v73);
      v85 = (v83 - 3);
      v7 = v85 & 7;
      v4 = (unsigned int *)((char *)v81 + (v85 >> 3));
      v21 = bswap32(*v4) << v7;
      if (v4 > v5)
        v4 = v5;
      v86 = 15 << v57;
      if (!v57)
        v86 = 30;
      v69 = (v84 + v56 + v86 + (4096 << v74) - 4096) >> 1;
      if ((v84 & 1) != 0)
        v70 = -v69;
      else
        v70 = v69;
LABEL_88:
      v87 = v57 + v58;
      if (v87 > 6)
        return 999;
      if (v69 <= *((unsigned __int16 *)&off_24D4DE5E0[53] + v87 + 3))
        v57 = v87;
      else
        v57 = v87 + 1;
      v8 = 999;
      if (HIWORD(v69) || v57 > 6)
        return v8;
      v58 = 0;
      *v59++ = v70;
      v56 = 2;
      if (!--v32)
        goto LABEL_34;
    }
    v60 = __clz(v21);
    v61 = (2 * v21) << v60;
    v62 = v57 + v60;
    v63 = v61 >> ~(_BYTE)v57 >> 1;
    v64 = (v60 << v57) + v56;
    v65 = v61 >> 28;
    if (v60 == 14)
      v56 += 14;
    else
      v65 = v60;
    if (v60 == 14)
      v66 = v57 + v60 + 5;
    else
      v66 = v62 + 1;
    if (v57)
    {
      v56 = v64;
      v65 = v63;
      v67 = v62 + 1;
    }
    else
    {
      v67 = v66;
    }
    v68 = v65 + v56;
    v69 = (v65 + v56) >> 1;
    v70 = (-(v65 & 1) ^ (v68 >> 1)) + (v65 & 1);
    v71 = (v67 + v7);
    goto LABEL_74;
  }
LABEL_34:
  v33 = a3 + 2 * a4;
  v34 = &v92;
  if (v9 >= a4)
    goto LABEL_96;
  v35 = (int)v12[2 * v9 + 1];
  v36 = v35 | v21;
  if (v36 < 0x800000)
    return 999;
  v37 = __clz(v36);
  v38 = *((unsigned __int8 *)v12[2 * v9][v37] + ((unint64_t)((2 * v36) << v37 >> (v35 - 1)) >> 1));
  v39 = v7 + (v38 >> 4);
  v7 = ((_BYTE)v7 + (v38 >> 4)) & 7;
  v4 = (unsigned int *)((char *)v4 + (v39 >> 3));
  v40 = bswap32(*v4);
  if (v4 > v5)
    v4 = v5;
  v21 = v40 << v7;
  v41 = v38 & 0xF;
  v42 = a4 - (v41 + v9);
  if (a4 < v41 + v9)
    v42 = 0;
  v33 -= 2 * v42;
  if (!v41)
  {
LABEL_96:
    v54 = v9;
    goto LABEL_97;
  }
  if (v9 == 1)
  {
LABEL_55:
    v54 = 1;
    goto LABEL_98;
  }
  v43 = 1;
  v34 = v93;
  while (1)
  {
    v44 = *((unsigned __int8 *)&off_24D4DE5E0[55] + v41 + 6);
    *(_WORD *)(v33 - 2) = *v34;
    v45 = v33 - 2;
    v46 = &off_24D4DE5E0[2 * v44];
    v47 = *((_DWORD *)v46 + 78) | v21;
    v48 = __clz(v47);
    v49 = *((unsigned __int8 *)v46[38][v48] + ((unint64_t)((2 * v47) << v48 >> (*((_DWORD *)v46 + 78) - 1)) >> 1));
    v50 = v49 & 0xF;
    v51 = v7 + (v49 >> 4);
    v7 = v51 & 7;
    v4 = (unsigned int *)((char *)v4 + (v51 >> 3));
    v52 = bswap32(*v4);
    if (v4 > v5)
      v4 = v5;
    v21 = v52 << v7;
    v33 = v45 - 2 * v50;
    v41 -= v50;
    if (v41)
      v53 = 0;
    else
      v53 = 10;
    if (v41 < 0)
      v53 = 3;
    if (v53)
      break;
    if (v41 < 0)
      v41 = 999;
    ++v43;
    ++v34;
    if (v9 == v43)
    {
      --v34;
      goto LABEL_55;
    }
  }
  if (v53 == 3)
    goto LABEL_100;
  v54 = v9 - v43;
  if ((int)(v9 - v43) >= 0)
  {
LABEL_97:
    if (!v54)
      goto LABEL_100;
LABEL_98:
    v88 = (_WORD *)(v33 - 2);
    v89 = v34 + 1;
    do
    {
      v90 = *v89++;
      *v88-- = v90;
      --v54;
    }
    while (v54);
    goto LABEL_100;
  }
  v9 = 999;
LABEL_100:
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = v21;
  *(_BYTE *)(a1 + 36) = v7;
  if ((uint64_t)v4 - *(_QWORD *)a1 <= *(int *)(a1 + 12))
    return v9;
  else
    return 999;
}

uint64_t sub_2160D5248(unsigned __int8 *a1, uint64_t *a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  _BOOL4 v17;
  BOOL v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;

  v6 = *a2;
  if (*a2)
  {
    v7 = *(unsigned __int8 *)(v6 + 1);
    v8 = *(unsigned __int8 *)(v6 + 2);
  }
  else
  {
    v7 = 255;
    v8 = 255;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = *(unsigned __int8 *)(v9 + 1);
    v11 = *(unsigned __int8 *)(v9 + 2);
  }
  else
  {
    v10 = 255;
    v11 = 255;
  }
  result = 4294966630;
  switch(a3)
  {
    case 2:
    case 7:
      if (v7 | v8)
        v13 = v6 == 0;
      else
        v13 = 1;
      v14 = 3;
      if (!v13)
        v14 = 4;
      if (v9)
        v15 = (v10 | v11) == 0;
      else
        v15 = 1;
      if (!v15)
        ++v14;
      if (!sub_2160B1454((uint64_t)a1, &a1[2 * v14 + 16]))
        goto LABEL_62;
      if (sub_2160B1588((uint64_t)a1) == 1)
      {
        LOBYTE(v16) = 25;
      }
      else
      {
        v33 = 3 * sub_2160B1454((uint64_t)a1, a1 + 28);
        if (sub_2160B1454((uint64_t)a1, a1 + 30))
        {
          if (sub_2160B1454((uint64_t)a1, a1 + 32))
            v34 = 9;
          else
            v34 = 5;
          v35 = v34 + 4 * v33;
        }
        else
        {
          v35 = (4 * v33) | 1;
        }
        v16 = v35 + 2 * sub_2160B1454((uint64_t)a1, a1 + 34);
        LOBYTE(v16) = v16 + sub_2160B1454((uint64_t)a1, a1 + 36);
      }
      goto LABEL_72;
    case 4:
    case 9:
      return result;
    default:
      v17 = a3 == 6 || a3 == 1;
      if (a3 != 6 && a3 != 1)
      {
        if (!sub_2160B1454((uint64_t)a1, a1 + 44))
        {
          if (sub_2160B1454((uint64_t)a1, a1 + 46))
          {
            if (sub_2160B1454((uint64_t)a1, a1 + 50))
              LOBYTE(v16) = 1;
            else
              LOBYTE(v16) = 2;
          }
          else if (sub_2160B1454((uint64_t)a1, a1 + 48))
          {
            LOBYTE(v16) = 3;
          }
          else
          {
            LOBYTE(v16) = 0;
          }
          goto LABEL_72;
        }
        v36 = sub_2160B1454((uint64_t)a1, a1 + 50) == 0;
        v37 = 5;
        goto LABEL_86;
      }
      if (v11)
        v18 = 0;
      else
        v18 = v10 == 3;
      v19 = v10 & 0xFE;
      v20 = v18 || v19 == 4;
      v21 = 27;
      if (!v20)
        v21 = 28;
      if (v9)
        v22 = v21;
      else
        v22 = 27;
      v23 = v7 == 3 && v8 == 0;
      v24 = v7 & 0xFE;
      v26 = !v23 && v24 != 4;
      if (v6)
        v27 = v26;
      else
        v27 = 0;
      if (!sub_2160B1454((uint64_t)a1, &a1[2 * v22 + 16 + 2 * v27]))
      {
LABEL_62:
        LOBYTE(v16) = 0;
        goto LABEL_72;
      }
      if (!sub_2160B1454((uint64_t)a1, a1 + 76))
      {
        if (sub_2160B1454((uint64_t)a1, a1 + 80))
          LOBYTE(v16) = 2;
        else
          LOBYTE(v16) = 1;
        goto LABEL_72;
      }
      v28 = sub_2160B1454((uint64_t)a1, a1 + 78);
      v29 = sub_2160B1454((uint64_t)a1, a1 + 80);
      v30 = sub_2160B1454((uint64_t)a1, a1 + 80);
      v31 = sub_2160B1454((uint64_t)a1, a1 + 80);
      if (!v28)
      {
        if (v29)
          v37 = 7;
        else
          v37 = 3;
        if (v30)
          v37 += 2;
        v36 = v31 == 0;
LABEL_86:
        if (v36)
          v16 = v37;
        else
          v16 = v37 + 1;
        goto LABEL_89;
      }
      if (v29)
        v32 = 20;
      else
        v32 = 12;
      if (v30)
        v32 += 4;
      if (v31)
        v32 |= 2u;
      if (v32 == 24)
      {
        v16 = 11;
      }
      else if (v32 == 26)
      {
        v16 = 22;
      }
      else
      {
        if (v32 == 22)
          v42 = 23;
        else
          v42 = v32;
        if (sub_2160B1454((uint64_t)a1, a1 + 80))
          v16 = v42 + 1;
        else
          v16 = v42;
      }
LABEL_89:
      v38 = v16 < 0x18 && v17;
      if (v16 >= 6 && !v38)
      {
        if (sub_2160B1588((uint64_t)a1))
        {
          if (v17)
            LOBYTE(v16) = 48;
          else
            LOBYTE(v16) = 30;
        }
        else
        {
          v39 = v16 + 12 * sub_2160B1454((uint64_t)a1, a1 + 52);
          if (sub_2160B1454((uint64_t)a1, a1 + 54))
          {
            if (sub_2160B1454((uint64_t)a1, a1 + 54))
              v40 = 8;
            else
              v40 = 4;
            v39 += v40;
          }
          v41 = v39 + 2 * sub_2160B1454((uint64_t)a1, a1 + 56);
          LOBYTE(v16) = v41 + sub_2160B1454((uint64_t)a1, a1 + 56);
        }
      }
LABEL_72:
      result = 0;
      *a4 = v16;
      return result;
  }
}

uint64_t sub_2160D5634(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  v6 = 0;
  v7 = (unsigned __int8 *)(a1 + 88);
  v8 = (unsigned __int8 *)(a1 + 90);
  v9 = (unsigned __int8 *)(a1 + 94);
  v10 = (unsigned __int8 *)(a1 + 58);
  v22 = (unsigned __int8 *)(a1 + 60);
  v23 = (unsigned __int8 *)(a1 + 92);
  v21 = (unsigned __int8 *)(a1 + 62);
  do
  {
    if (a2 == 1 || a2 == 6)
    {
      result = sub_2160B1454(a1, v7);
      if (!(_DWORD)result)
        goto LABEL_12;
      if (sub_2160B1454(a1, v8))
      {
        v12 = sub_2160B1454(a1, v23);
        v13 = sub_2160B1454(a1, v9);
        v14 = v13;
        if (v12)
        {
          result = sub_2160B1454(a1, v9);
          v15 = (_DWORD)result == 0;
          if (v14)
          {
            if ((_DWORD)result)
              v16 = 11;
            else
              v16 = 10;
            goto LABEL_24;
          }
          v18 = 8;
          v19 = 6;
        }
        else
        {
          v15 = v13 == 0;
          v18 = 4;
          v19 = 2;
        }
        if (v15)
          v20 = v19;
        else
          v20 = v18;
        result = sub_2160B1454(a1, v9);
        v16 = v20 | ((_DWORD)result != 0);
        goto LABEL_24;
      }
      result = sub_2160B1454(a1, v9);
      v16 = result != 0;
LABEL_24:
      v17 = v16 + 1;
      goto LABEL_25;
    }
    result = sub_2160B1454(a1, v10);
    if ((_DWORD)result)
    {
LABEL_12:
      v17 = 0;
      goto LABEL_25;
    }
    result = sub_2160B1454(a1, v22);
    if ((_DWORD)result)
    {
      result = sub_2160B1454(a1, v21);
      if ((_DWORD)result)
        v17 = 2;
      else
        v17 = 3;
    }
    else
    {
      v17 = 1;
    }
LABEL_25:
    *(_DWORD *)(a3 + v6) = v17;
    v6 += 4;
  }
  while (v6 != 16);
  return result;
}

uint64_t sub_2160D57CC(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (*a2)
    v5 = *(unsigned __int8 *)(*a2 + 23) + 399;
  else
    v5 = 399;
  v6 = a2[1];
  if (v6)
    v6 = *(unsigned __int8 *)(v6 + 23);
  result = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * (v5 + v6) + 16));
  *a3 = result;
  *(_BYTE *)(a2[2] + 23) = result;
  return result;
}

uint64_t sub_2160D582C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (*a2)
    v5 = *(unsigned __int8 *)(*a2 + 24) + 70;
  else
    v5 = 70;
  v6 = a2[1];
  if (v6)
    v6 = *(unsigned __int8 *)(v6 + 24);
  result = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * (v5 + v6) + 16));
  *a3 = result;
  *(_BYTE *)(a2[2] + 24) = result;
  return result;
}

uint64_t sub_2160D588C(uint64_t a1, unsigned __int8 **a2, unsigned int *a3, int a4, int a5, int a6)
{
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  char v13;
  unsigned int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  char v32;
  uint64_t v33;
  int v34;
  char v38;
  int v39;
  int v40;

  v8 = *a2;
  if (*a2)
  {
    v9 = v8[1];
    v10 = v8[2];
  }
  else
  {
    v9 = 255;
    v10 = 255;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = v11[1];
    LODWORD(v11) = v11[2] == 25;
  }
  else
  {
    v12 = 255;
  }
  v13 = 0;
  v14 = 0;
  if (v12)
    LODWORD(v11) = 0;
  v40 = (int)v11;
  v38 = 2 * (a6 != 0);
  v39 = v12 & 0xFE;
  v15 = 1;
  do
  {
    v16 = v15;
    v17 = 1;
    do
    {
      v18 = v17;
      if ((v17 & 1) != 0)
      {
        if (!v8)
          goto LABEL_25;
        if (a2[2][24])
        {
          if (a2[2][24] == 1 && !(*a2)[24])
          {
            v19 = 0;
            if ((v16 & 1) == 0)
            {
              v8 = a2[3];
              v9 = v8[1];
              v10 = v8[2];
            }
          }
          else
          {
            v19 = v13;
          }
        }
        else
        {
          v19 = v38;
          if ((*a2)[24] != 1)
            v19 = v13;
        }
        if ((v9 || v10 != 25) && ((v9 & 0xFE) == 4 || ((v8[4] >> (v19 + 1)) & 1) == 0))
        {
          v20 = 1;
          if ((v16 & 1) == 0)
          {
LABEL_32:
            v21 = 2 * (((v14 >> (v13 - 2)) & 1) == 0);
            goto LABEL_33;
          }
        }
        else
        {
LABEL_25:
          v20 = 0;
          if ((v16 & 1) == 0)
            goto LABEL_32;
        }
      }
      else
      {
        v20 = ((v14 >> (v13 - 1)) & 1) == 0;
        if ((v16 & 1) == 0)
          goto LABEL_32;
      }
      v21 = (uint64_t)a2[1];
      if (v21)
      {
        if ((v40 & 1) != 0 || v39 != 4 && ((*(unsigned __int8 *)(v21 + 4) >> (v13 + 2)) & 1) != 0)
          v21 = 0;
        else
          v21 = 2;
      }
LABEL_33:
      result = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * (v20 + v21) + 162));
      v17 = 0;
      v23 = 1 << v13;
      if (!(_DWORD)result)
        v23 = 0;
      v14 += v23;
      ++v13;
    }
    while ((v18 & 1) != 0);
    v15 = 0;
  }
  while ((v16 & 1) != 0);
  v24 = *a2;
  if (*a2)
  {
    if (a4 && !a5)
    {
      v9 = v24[1];
      v10 = v24[2];
      if (!v24[1] && v10 == 25)
      {
        v9 = 0;
        v25 = 78;
        goto LABEL_54;
      }
      if ((v9 & 0xFE) == 4)
      {
LABEL_51:
        v25 = 77;
      }
      else
      {
        v25 = 77;
        if (v24[5])
          v25 = 78;
      }
LABEL_54:
      v26 = a2[1];
      v27 = v40;
      if (v40)
        v28 = 2;
      else
        v28 = 0;
      if (v26)
      {
        v29 = v28;
      }
      else
      {
        v27 = 1;
        v29 = 0;
      }
      if ((v27 & 1) == 0 && v39 != 4)
        v29 = 2 * (v26[5] != 0);
      result = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * (v25 + v29) + 16));
      if ((_DWORD)result)
      {
        if (!v24)
          goto LABEL_69;
        if (!v9 && v10 == 25)
        {
          v30 = 82;
          goto LABEL_72;
        }
        if ((v9 & 0xFE) != 4)
        {
          v30 = 81;
          if (v24[5] == 2)
            v30 = 82;
        }
        else
        {
LABEL_69:
          v30 = 81;
        }
LABEL_72:
        v31 = a2[1];
        if (v31)
          v32 = v40;
        else
          v32 = 1;
        if (v31)
          v33 = v28;
        else
          v33 = 0;
        if ((v32 & 1) == 0 && v39 != 4)
          v33 = 2 * (v31[5] == 2);
        result = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * (v30 + v33) + 16));
        if ((_DWORD)result == 1)
          v34 = 32;
        else
          v34 = 16;
        v14 += v34;
      }
    }
  }
  else if (a4 && !a5)
  {
    goto LABEL_51;
  }
  *a3 = v14;
  return result;
}

uint64_t sub_2160D5BF4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;

  if (!a2
    || (*(_BYTE *)(a2 + 1) & 0xFE) == 4
    || ((v7 = *(unsigned __int8 *)(a2 + 2), !*(_BYTE *)(a2 + 1)) ? (v8 = v7 == 25) : (v8 = 0),
        v8
     || (!*(_BYTE *)(a2 + 1) ? (v9 = v7 == 25) : (v9 = 1),
         !v9 ? (v10 = v7 == 0) : (v10 = 1),
         v10 && !*(_BYTE *)(a2 + 4) && !*(_BYTE *)(a2 + 5))))
  {
    v11 = 60;
  }
  else
  {
    v11 = 60;
    if (*(_DWORD *)(a2 + 208))
      v11 = 61;
  }
  result = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * v11 + 16));
  if ((_DWORD)result)
  {
    result = sub_2160D5CC8(a1, (unsigned __int8 *)(a1 + 140), 0x33u);
    v13 = result + 1;
  }
  else
  {
    v13 = 0;
  }
  if ((v13 & 1) != 0)
    v14 = (v13 + 1) >> 1;
  else
    v14 = -((v13 + 1) >> 1);
  *a4 = v14;
  *(_DWORD *)(a3 + 208) = v14;
  return result;
}

uint64_t sub_2160D5CC8(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;

  v6 = 0;
  if (sub_2160B1454(a1, a2))
  {
    v7 = a2 + 2;
    do
      v6 = (v6 + 1);
    while (sub_2160B1454(a1, v7) && v6 < a3);
  }
  return v6;
}

uint64_t sub_2160D5D24(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  unsigned int v10;
  uint64_t i;
  int v14;
  int v15;
  int v16;
  uint64_t j;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned __int16 *v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int16 *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned __int16 *v54;
  unint64_t v55;
  char v56;
  int v58;

  v10 = *(_DWORD *)(a5 + 8);
  if (v10 > 7 || ((1 << v10) & 0x86) == 0)
  {
    v58 = *(unsigned __int8 *)(a5 + 3);
    v24 = a5 + 16;
    v25 = *(unsigned __int8 *)(a5 + 272);
    if (*(_BYTE *)(a5 + 2))
      v26 = 1;
    else
      v26 = a3 == 2;
    if (!v26 || (_DWORD)v25 == 0)
    {
      v22 = 0;
    }
    else
    {
      v28 = 0;
      v22 = 0;
      v29 = 0;
      do
      {
        v30 = v24 + 16 * v28;
        if (*(_BYTE *)(v30 + 15) == 5)
        {
          LOBYTE(v31) = 32;
        }
        else
        {
          v32 = *(unsigned __int16 *)(a5 + 26);
          if (v29 <= 15)
          {
            if (v32 >= 0x103)
              v33 = 259;
            else
              v33 = *(unsigned __int16 *)(a5 + 26);
            v34 = &word_254E10E30[40 * v33];
            do
            {
              if (v28 == *((unsigned __int8 *)v34 + v29))
                break;
              ++v29;
            }
            while (v29 != 16);
          }
          v31 = sub_2160D6284(a1, a1, a2, v29, v32, 0, a7);
          if (v31 <= ((2 * *(unsigned __int8 *)(a5 + 2)) | 1u))
            v22 = v22;
          else
            v22 = 4294958327;
        }
        *(_BYTE *)(v30 + 8) = v31;
        *(_BYTE *)(a2[2] + v28++ + 168) = v31;
      }
      while (v28 != v25);
    }
    if (v58)
      v35 = 1;
    else
      v35 = a3 == 2;
    if (v35 && (_DWORD)v25)
    {
      v36 = 0;
      v37 = 0;
      do
      {
        v38 = v24 + 16 * v36;
        if (*(_BYTE *)(v38 + 15) == 4)
        {
          LOBYTE(v39) = 32;
        }
        else
        {
          v40 = *(unsigned __int16 *)(a5 + 26);
          if (v37 <= 15)
          {
            if (v40 >= 0x103)
              v41 = 259;
            else
              v41 = *(unsigned __int16 *)(a5 + 26);
            v42 = &word_254E10E30[40 * v41];
            do
            {
              if (v36 == *((unsigned __int8 *)v42 + v37))
                break;
              ++v37;
            }
            while (v37 != 16);
          }
          v39 = sub_2160D6284(a1, a1, a2, v37, v40, 1, a7);
          if (v39 <= ((2 * *(unsigned __int8 *)(a5 + 3)) | 1u))
            v22 = v22;
          else
            v22 = 4294958327;
        }
        *(_BYTE *)(v38 + 9) = v39;
        *(_BYTE *)(a2[2] + v36++ + 184) = v39;
      }
      while (v36 != v25);
    }
    if ((_DWORD)v25)
    {
      v43 = 0;
      v44 = 0;
      do
      {
        v45 = v24 + 16 * v43;
        if (*(_BYTE *)(v45 + 15) != 5)
        {
          v46 = *(unsigned __int16 *)(a5 + 26);
          if (v44 <= 15)
          {
            if (v46 >= 0x103)
              v47 = 259;
            else
              v47 = *(unsigned __int16 *)(a5 + 26);
            v48 = &word_254E10E30[40 * v47];
            do
            {
              if (v43 == *((unsigned __int8 *)v48 + v44))
                break;
              ++v44;
            }
            while (v44 != 16);
          }
          *(_WORD *)v45 = sub_2160D6520((int *)a1, a1, a2, v44, v46, 0, 0, a7);
          *(_WORD *)(v45 + 2) = sub_2160D6520((int *)a1, a1, a2, v44, *(_WORD *)(a5 + 26), 1u, 0, a7);
        }
        ++v43;
      }
      while (v43 != v25);
      v49 = 0;
      v50 = 0;
      do
      {
        v51 = v24 + 16 * v49;
        if (*(_BYTE *)(v51 + 15) != 4)
        {
          v52 = *(unsigned __int16 *)(a5 + 26);
          if (v50 <= 15)
          {
            if (v52 >= 0x103)
              v53 = 259;
            else
              v53 = *(unsigned __int16 *)(a5 + 26);
            v54 = &word_254E10E30[40 * v53];
            do
            {
              if (v49 == *((unsigned __int8 *)v54 + v50))
                break;
              ++v50;
            }
            while (v50 != 16);
          }
          *(_WORD *)(v51 + 4) = sub_2160D6520((int *)a1, a1, a2, v50, v52, 0, 1, a7);
          *(_WORD *)(v51 + 6) = sub_2160D6520((int *)a1, a1, a2, v50, *(_WORD *)(a5 + 26), 1u, 1, a7);
        }
        ++v49;
      }
      while (v49 != v25);
    }
  }
  else
  {
    if (v10 == 1)
    {
      for (i = 0; i != 16; ++i)
      {
        v14 = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 152));
        *(_BYTE *)(a5 + i + 290) = v14;
        if (!v14)
        {
          v15 = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 154));
          v16 = v15 | (2 * sub_2160B1454(a1, (unsigned __int8 *)(a1 + 154)));
          *(_BYTE *)(a5 + i + 310) = v16 | (4 * sub_2160B1454(a1, (unsigned __int8 *)(a1 + 154)));
        }
      }
    }
    if (v10 == 7)
    {
      for (j = 0; j != 4; ++j)
      {
        v18 = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 152));
        *(_BYTE *)(a5 + j + 306) = v18;
        if (!v18)
        {
          v19 = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 154));
          v20 = v19 | (2 * sub_2160B1454(a1, (unsigned __int8 *)(a1 + 154)));
          *(_BYTE *)(a5 + j + 326) = v20 | (4 * sub_2160B1454(a1, (unsigned __int8 *)(a1 + 154)));
        }
      }
    }
    if (a6 == 1 || !*(_BYTE *)(a5 + 1))
    {
      v22 = 0;
      *(_BYTE *)(a2[2] + 3) = 0;
      *(_BYTE *)(a5 + 289) = 0;
    }
    else
    {
      v21 = *a2;
      if (*a2)
        v21 = *(unsigned __int8 *)(v21 + 1) - 2 >= 4
           && (*(_BYTE *)(v21 + 1) || *(_BYTE *)(v21 + 2) != 25)
           && *(unsigned __int8 *)(v21 + 3) != 0;
      v55 = a2[1];
      if (v55)
        v55 = *(unsigned __int8 *)(v55 + 1) - 2 >= 4
           && (*(_BYTE *)(v55 + 1) || *(_BYTE *)(v55 + 2) != 25)
           && *(unsigned __int8 *)(v55 + 3) != 0;
      if (sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * (v55 + v21) + 144)))
      {
        if (sub_2160B1454(a1, (unsigned __int8 *)(a1 + 150)))
        {
          if (sub_2160B1454(a1, (unsigned __int8 *)(a1 + 150)))
            v56 = 3;
          else
            v56 = 2;
        }
        else
        {
          v56 = 1;
        }
      }
      else
      {
        v56 = 0;
      }
      v22 = 0;
      *(_BYTE *)(a5 + 289) = v56;
      *(_BYTE *)(a2[2] + 3) = v56;
    }
  }
  return v22;
}

uint64_t sub_2160D6284(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  uint64_t v9;
  _BOOL4 v10;
  char *v11;
  int v12;
  char *v13;
  uint64_t v14;
  _BOOL4 v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v32;
  _BOOL4 v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;

  v9 = *a3;
  if (!*a3)
    goto LABEL_5;
  if (*(_BYTE *)(a3[2] + 24))
  {
    if (*(_BYTE *)(a3[2] + 24) != 1 || *(_BYTE *)(v9 + 24))
    {
LABEL_5:
      v10 = 0;
      v11 = byte_254E10D40;
      goto LABEL_13;
    }
    v10 = 0;
    if (a4 >= 8)
      v9 = a3[3];
    v11 = (char *)&unk_254E10D78;
  }
  else
  {
    v12 = *(unsigned __int8 *)(v9 + 24);
    v11 = byte_254E10D40;
    v13 = (char *)&unk_254E10DA8;
    if (a7)
      v13 = (char *)&unk_254E10DD8;
    v10 = v12 == 1;
    if (v12 == 1)
      v11 = v13;
  }
LABEL_13:
  v14 = a3[1];
  v15 = v14 && !*(_BYTE *)(a3[2] + 24) && *(unsigned __int8 *)(v14 + 24) == 1;
  v16 = &v11[a4];
  v17 = *v16;
  v18 = v16[16];
  v19 = (v17 & 1) == 0 && v10;
  v20 = (v18 & 1) == 0 && v15;
  if ((v17 & 1) != 0)
  {
    v9 = a3[2];
    v22 = a5;
    if (a5 >= 0x103u)
      v22 = 259;
LABEL_31:
    v23 = *((unsigned __int8 *)&word_254E10E30[40 * v22] + ((v17 >> 1) & 0xF));
    v24 = *(unsigned __int8 *)(v9 + 16 * (a6 != 0) + v23 + 168);
    if (v24 != 32 && v19 < v24)
    {
      v27 = *(unsigned __int8 *)(v9 + v23 + 7);
      if (!a6)
      {
        LODWORD(v9) = (v27 & 0xFFFFFFFD) == 4;
        if ((v18 & 1) == 0)
          goto LABEL_43;
        goto LABEL_37;
      }
      LODWORD(v9) = (v27 - 5) < 2;
LABEL_42:
      if ((v18 & 1) == 0)
        goto LABEL_43;
LABEL_37:
      v14 = a3[2];
      v26 = 259;
      if (a5 < 0x103u)
        v26 = a5;
      goto LABEL_48;
    }
    goto LABEL_36;
  }
  if (!v9)
    goto LABEL_42;
  v21 = *(unsigned __int8 *)(v9 + 1);
  if (v21 >= 6 || ((0x33u >> v21) & 1) == 0)
  {
    v22 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 200) + 10);
    if (v22 >= 0x103)
      v22 = 259;
    goto LABEL_31;
  }
LABEL_36:
  LODWORD(v9) = 0;
  if ((v18 & 1) != 0)
    goto LABEL_37;
LABEL_43:
  if (!v14)
    goto LABEL_60;
  v28 = *(unsigned __int8 *)(v14 + 1);
  if (v28 < 6 && ((0x33u >> v28) & 1) != 0)
    goto LABEL_53;
  v26 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 200) + 10);
  if (v26 >= 0x103)
    v26 = 259;
LABEL_48:
  v29 = *((unsigned __int8 *)&word_254E10E30[40 * v26] + ((v18 >> 1) & 0xF));
  v30 = *(unsigned __int8 *)(v14 + 16 * (a6 != 0) + v29 + 168);
  if (v30 == 32 || v20 >= v30)
  {
LABEL_53:
    v14 = 0;
    goto LABEL_60;
  }
  v32 = *(unsigned __int8 *)(v14 + v29 + 7);
  if (a6)
    v33 = (v32 - 7) > 0xFFFFFFFD;
  else
    v33 = (v32 & 0xFFFFFFFD) == 4;
  v14 = 2 * v33;
LABEL_60:
  v34 = (_DWORD)v9 == 0;
  v35 = 54;
  if (!v34)
    v35 = 55;
  result = sub_2160B1454(a1, (unsigned __int8 *)(a2 + 2 * (v35 + v14) + 16));
  if ((_DWORD)result)
    return (sub_2160D5CC8(a1, (unsigned __int8 *)(a2 + 132), 0x1Eu) + 1) & 0x1F;
  return result;
}

uint64_t sub_2160D6520(int *a1, uint64_t a2, uint64_t *a3, int a4, unsigned __int16 a5, unsigned int a6, int a7, int a8)
{
  uint64_t v15;
  unsigned int v16;
  char *v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  char *v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  BOOL v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  __int16 v55;
  _BOOL4 v56;
  int v57;

  v15 = *a3;
  if (!*a3)
    goto LABEL_5;
  if (*(_BYTE *)(a3[2] + 24))
  {
    if (*(_BYTE *)(a3[2] + 24) != 1 || *(_BYTE *)(v15 + 24))
    {
LABEL_5:
      v16 = 1;
      v17 = byte_254E10D40;
      v18 = 1;
      goto LABEL_22;
    }
    if (a4 >= 8)
      v15 = a3[3];
    v18 = 1;
    if (a6)
      v16 = 2;
    else
      v16 = 1;
    v17 = (char *)&unk_254E10D78;
  }
  else
  {
    v19 = *(unsigned __int8 *)(v15 + 24);
    v17 = byte_254E10D40;
    v20 = (char *)&unk_254E10DD8;
    if (!a8)
      v20 = (char *)&unk_254E10DA8;
    if (a6)
      v21 = 2;
    else
      v21 = 1;
    v22 = v19 == 1;
    if (v19 == 1)
      v17 = v20;
    v16 = 1;
    if (v22)
      v18 = v21;
    else
      v18 = 1;
  }
LABEL_22:
  v23 = a3[1];
  v24 = 1;
  v25 = 1;
  if (a6 && v23)
  {
    if (*(_BYTE *)(a3[2] + 24))
    {
      if (*(_BYTE *)(a3[2] + 24) == 1)
      {
        if (*(_BYTE *)(v23 + 24))
          v24 = 1;
        else
          v24 = 2;
      }
    }
    else if (*(_BYTE *)(v23 + 24) == 1)
    {
      v25 = 2;
    }
    else
    {
      v25 = 1;
    }
  }
  v26 = a5;
  v27 = &v17[a4];
  v28 = *v27;
  v29 = *v27;
  v30 = v27[16];
  v31 = (v30 >> 1) & 0xF;
  if ((v30 & 1) != 0)
  {
    v35 = a5;
    if (a5 >= 0x103u)
      v35 = 259;
    v34 = *(__int16 *)(a3[2]
                     + ((unint64_t)(a7 != 0) << 6)
                     + 4 * *((unsigned __int8 *)&word_254E10E30[40 * v35] + v31)
                     + 2 * a6
                     + 40);
    if ((v34 & 0x80000000) != 0)
      v34 = -v34;
    else
      v34 = (unsigned __int16)v34;
  }
  else if (!v23
         || ((v32 = *(unsigned __int8 *)(v23 + 1), !*(_BYTE *)(v23 + 2)) ? (v33 = v32 == 3) : (v33 = 0),
             v33 || v32 < 6 && ((0x33u >> v32) & 1) != 0))
  {
    v34 = 0;
  }
  else
  {
    v36 = *(unsigned __int16 *)(*(_QWORD *)(v23 + 200) + 10);
    if (v36 >= 0x103)
      v36 = 259;
    v37 = *(unsigned __int16 *)(v23
                              + ((unint64_t)(a7 != 0) << 6)
                              + 4 * *((unsigned __int8 *)&word_254E10E30[40 * v36] + v31)
                              + 2 * a6
                              + 40);
    if ((v37 & 0x8000u) != 0)
      v37 = -(__int16)v37;
    v34 = v37 * v25 / v24;
  }
  v38 = (v28 >> 1) & 0xF;
  if ((v29 & 1) != 0)
  {
    v41 = a5;
    if (a5 >= 0x103u)
      v41 = 259;
    v42 = *(__int16 *)(a3[2]
                     + ((unint64_t)(a7 != 0) << 6)
                     + 4 * *((unsigned __int8 *)&word_254E10E30[40 * v41] + v38)
                     + 2 * a6
                     + 40);
    if (v42 < 0)
      LODWORD(v15) = -v42;
    else
      LODWORD(v15) = *(unsigned __int16 *)(a3[2]
                                         + ((unint64_t)(a7 != 0) << 6)
                                         + 4 * *((unsigned __int8 *)&word_254E10E30[40 * v41] + v38)
                                         + 2 * a6
                                         + 40);
  }
  else if (v15)
  {
    v39 = *(unsigned __int8 *)(v15 + 1);
    if (*(_BYTE *)(v15 + 2))
      v40 = 0;
    else
      v40 = v39 == 3;
    if (v40 || v39 < 6 && ((0x33u >> v39) & 1) != 0)
    {
      LODWORD(v15) = 0;
    }
    else
    {
      v43 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 200) + 10);
      if (v43 >= 0x103)
        v43 = 259;
      v44 = *(unsigned __int16 *)(v15
                                + ((unint64_t)(a7 != 0) << 6)
                                + 4 * *((unsigned __int8 *)&word_254E10E30[40 * v43] + v38)
                                + 2 * a6
                                + 40);
      if ((v44 & 0x8000u) != 0)
        v44 = -(__int16)v44;
      LODWORD(v15) = v44 * v18 / v16;
    }
  }
  v45 = v15 + v34;
  v46 = 8 * a6;
  if (v45 > 2)
  {
    v48 = v45 >= 0x21;
    v47 = 7 * a6 + 41;
    if (v48)
      v47 = 7 * a6 + 42;
  }
  else
  {
    v47 = 7 * a6 + 40;
  }
  if (sub_2160B1454((uint64_t)a1, (unsigned __int8 *)(a2 + 2 * v47 + 16)))
  {
    v49 = (unsigned __int8 *)(a2 + 2 * (v46 - a6 + 43) + 16);
    if (sub_2160B1454((uint64_t)a1, v49))
    {
      v50 = 0;
      v51 = v49 + 2;
      do
      {
        v52 = sub_2160B1454((uint64_t)a1, v51);
        v53 = v50 - 1;
        if (!v52)
          break;
        v51 += 2 * (v50 == 0) + 2 * (v50 == -1);
        v22 = v50-- == -6;
      }
      while (!v22);
      if (v52)
        v54 = sub_2160D7BE0(a1, 3) - v53 + 1;
      else
        v54 = -v53;
    }
    else
    {
      LOWORD(v54) = 0;
    }
    v56 = sub_2160B1528(a1);
    v55 = ~(_WORD)v54;
    if (!v56)
      v55 = v54 + 1;
  }
  else
  {
    v55 = 0;
  }
  v57 = a5;
  if (v26 >= 0x103)
    v57 = 259;
  *(_WORD *)(a3[2]
           + ((unint64_t)(a7 != 0) << 6)
           + 4 * *((unsigned __int8 *)&word_254E10E30[40 * v57] + a4)
           + 2 * a6
           + 40) = v55;
  return v55;
}

uint64_t sub_2160D6944(int *a1, uint64_t *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned __int16 *v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v55;

  v49 = *(unsigned __int8 *)(a10 + 3);
  v51 = a3;
  if ((a8 == 2 || *(_BYTE *)(a10 + 2)) && (a3 != 2 || a4 != 4))
  {
    v15 = 0;
    v50 = 0;
    v16 = 0;
    v17 = 0;
    v14 = a6;
    do
    {
      if (a3 == 3 && !*(_DWORD *)(a5 + 4 * v15) || *(_DWORD *)(v14 + 4 * v15) == 5)
      {
        LOBYTE(v18) = 32;
      }
      else
      {
        v18 = sub_2160D6284((uint64_t)a1, (uint64_t)a1, a2, v17, *(_WORD *)(a10 + 26), 0, a11);
        a3 = v51;
        v14 = a6;
        v50 |= v18 > ((2 * *(unsigned __int8 *)(a10 + 2)) | 1u);
      }
      if (*(int *)(a7 + 4 * v15) >= 1)
      {
        v19 = 0;
        v20 = (_BYTE *)(a10 + 24 + 16 * v16);
        do
        {
          *v20 = v18;
          v20 += 16;
          *(_BYTE *)(a2[2] + v16 + 168 + v19++) = v18;
        }
        while ((int)v19 < *(_DWORD *)(a7 + 4 * v15));
        v16 += v19;
      }
      ++v15;
      v17 += 4;
    }
    while (v15 != 4);
  }
  else
  {
    v50 = 0;
    v14 = a6;
  }
  if ((a8 == 2 || v49) && (a3 != 2 || a4 != 4))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      if (a3 == 3 && !*(_DWORD *)(a5 + 4 * v21) || *(_DWORD *)(v14 + 4 * v21) == 4)
      {
        LOBYTE(v24) = 32;
      }
      else
      {
        v24 = sub_2160D6284((uint64_t)a1, (uint64_t)a1, a2, v23, *(_WORD *)(a10 + 26), 1, a11);
        a3 = v51;
        v14 = a6;
        v50 |= v24 > ((2 * *(unsigned __int8 *)(a10 + 3)) | 1u);
      }
      if (*(int *)(a7 + 4 * v21) >= 1)
      {
        v25 = 0;
        v26 = (_BYTE *)(a10 + 25 + 16 * v22);
        do
        {
          *v26 = v24;
          v26 += 16;
          *(_BYTE *)(a2[2] + v22 + 184 + v25++) = v24;
        }
        while ((int)v25 < *(_DWORD *)(a7 + 4 * v21));
        v22 += v25;
      }
      ++v21;
      v23 += 4;
    }
    while (v21 != 4);
  }
  v27 = 0;
  LODWORD(v28) = 0;
  v29 = 0;
  v55 = a10 + 16;
  do
  {
    if (a3 == 3 && !*(_DWORD *)(a5 + 4 * v27) || *(_DWORD *)(v14 + 4 * v27) == 5)
    {
      if (*(int *)(a7 + 4 * v27) >= 1)
      {
        v30 = 0;
        v31 = (_DWORD *)(a10 + 16 + 16 * (int)v28);
        do
        {
          *v31 = 0;
          v31 += 4;
          ++v30;
        }
        while (v30 < *(_DWORD *)(a7 + 4 * v27));
        LODWORD(v28) = v28 + v30;
      }
    }
    else if (*(int *)(a7 + 4 * v27) >= 1)
    {
      v32 = 0;
      v28 = (int)v28;
      do
      {
        v33 = *(unsigned __int16 *)(a10 + 26);
        if (v29 <= 15)
        {
          if (v33 >= 0x103)
            v34 = 259;
          else
            v34 = *(unsigned __int16 *)(a10 + 26);
          v35 = &word_254E10E30[40 * v34];
          do
          {
            if ((_DWORD)v28 == *((unsigned __int8 *)v35 + v29))
              break;
            ++v29;
          }
          while (v29 != 16);
        }
        v36 = (_WORD *)(v55 + 16 * v28);
        *v36 = sub_2160D6520(a1, (uint64_t)a1, a2, v29, v33, 0, 0, a11);
        v36[1] = sub_2160D6520(a1, (uint64_t)a1, a2, v29, *(_WORD *)(a10 + 26), 1u, 0, a11);
        ++v28;
        ++v32;
      }
      while (v32 < *(_DWORD *)(a7 + 4 * v27));
      v14 = a6;
      a3 = v51;
    }
    ++v27;
  }
  while (v27 != 4);
  v37 = 0;
  LODWORD(v38) = 0;
  v39 = 0;
  do
  {
    if (a3 == 3 && !*(_DWORD *)(a5 + 4 * v37) || *(_DWORD *)(v14 + 4 * v37) == 4)
    {
      if (*(int *)(a7 + 4 * v37) >= 1)
      {
        v40 = 0;
        v41 = (_DWORD *)(a10 + 20 + 16 * (int)v38);
        do
        {
          *v41 = 0;
          v41 += 4;
          ++v40;
        }
        while (v40 < *(_DWORD *)(a7 + 4 * v37));
        LODWORD(v38) = v38 + v40;
      }
    }
    else if (*(int *)(a7 + 4 * v37) >= 1)
    {
      v42 = 0;
      v38 = (int)v38;
      do
      {
        v43 = *(unsigned __int16 *)(a10 + 26);
        if (v39 <= 15)
        {
          if (v43 >= 0x103)
            v44 = 259;
          else
            v44 = *(unsigned __int16 *)(a10 + 26);
          v45 = &word_254E10E30[40 * v44];
          do
          {
            if ((_DWORD)v38 == *((unsigned __int8 *)v45 + v39))
              break;
            ++v39;
          }
          while (v39 != 16);
        }
        v46 = v55 + 16 * v38;
        *(_WORD *)(v46 + 4) = sub_2160D6520(a1, (uint64_t)a1, a2, v39, v43, 0, 1, a11);
        *(_WORD *)(v46 + 6) = sub_2160D6520(a1, (uint64_t)a1, a2, v39, *(_WORD *)(a10 + 26), 1u, 1, a11);
        ++v38;
        ++v42;
      }
      while (v42 < *(_DWORD *)(a7 + 4 * v37));
      v14 = a6;
      a3 = v51;
    }
    ++v37;
  }
  while (v37 != 4);
  return v50;
}

uint64_t sub_2160D6E1C(uint64_t result, uint64_t *a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  int *v11;
  unsigned __int8 *v12;
  _BOOL4 v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  int v27;
  int v28;
  uint64_t i;
  int v30;
  __int16 v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  char v65;
  char v66;
  char v67;
  uint64_t j;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  int v77;
  char v78;
  char v79;
  char v80;
  uint64_t k;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  _BOOL4 v86;
  uint64_t v87;
  int *v88;
  char v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  char v94;
  int v95;
  char *v96;
  int v97;
  int *v98;
  int v99;
  int *v101;
  _BOOL4 v102;

  v11 = (int *)result;
  v12 = (unsigned __int8 *)a2[2];
  v102 = v12[1] < 2u;
  if (*(_BYTE *)(a8 + 29))
    v13 = 1;
  else
    v13 = *(unsigned __int8 *)(a8 + 31) == 2;
  v84 = v12[5];
  v92 = v12[4];
  v14 = *(unsigned __int8 *)(*(_QWORD *)(a8 + 40) + 1);
  if (v12[1] || ((v15 = v12[2]) != 0 ? (v16 = v15 == 25) : (v16 = 1), v16))
  {
    v83 = 0;
    v82 = 5;
  }
  else
  {
    result = sub_2160D7624((int *)result, a2, 0, 0, v102, 0, 0, a3, a4, a6, *(_DWORD *)(a8 + 16) & *(unsigned __int8 *)(a8 + 185));
    v82 = 1;
    v83 = 1;
  }
  v17 = a6 + 2 * v83 + 32;
  v101 = v11;
  v87 = a6;
  v85 = v14;
  v86 = v13;
  if (a7)
  {
    v18 = 0;
    if (a3)
      v19 = a4 == 1;
    else
      v19 = 1;
    v20 = 201;
    if (v19)
      v20 = 218;
    v21 = 834;
    if (v19)
    {
      v21 = 902;
      v22 = (int *)&unk_2160F927C;
    }
    else
    {
      v22 = (int *)&unk_2160F9478;
    }
    v98 = &v11[v20 + 4];
    v96 = (char *)v11 + v21 + 16;
    v23 = a6 + 2 * v83;
    v88 = v22;
    do
    {
      *(_BYTE *)(a5 + 4 * v18) = 0;
      if (((v92 >> v18) & 1) != 0)
      {
        v24 = 0;
        v25 = 0;
        v90 = 4 * v18;
        v26 = (4 * v18) & 0xF8 | (2 * (v18 & 1));
        *(_QWORD *)(a2[2] + 32) |= (1 << (v26 | 1));
        *(_QWORD *)(a2[2] + 32) |= (4 << v26);
        *(_QWORD *)(a2[2] + 32) |= (1 << (v26 | 5));
        *(_QWORD *)(a2[2] + 32) |= (1 << (v26 + 6));
        while (1)
        {
          result = sub_2160B1454((uint64_t)v11, (unsigned __int8 *)v98 + 2 * v22[v24]);
          if ((_DWORD)result)
          {
            *(_WORD *)(v17 + 2 * v24) = 1;
            ++v25;
            result = sub_2160B1454((uint64_t)v11, (unsigned __int8 *)&v96[2 * dword_2160F9634[v24]]);
            if ((_DWORD)result)
              break;
          }
          if (++v24 == 63)
          {
            *(_WORD *)(v17 + 126) = 1;
            ++v25;
            break;
          }
        }
        v93 = v18;
        v27 = 0;
        v28 = 1;
        for (i = 158; i != 30; i -= 2)
        {
          if (*(_WORD *)(v23 + i))
          {
            v30 = v28 >= 4 ? 4 : v28;
            v31 = sub_2160B1454((uint64_t)v11, (unsigned __int8 *)v11 + 2 * v30 + 868);
            v32 = (unsigned __int16)(*(_WORD *)(v23 + i) + v31);
            *(_WORD *)(v23 + i) += v31;
            if (v32 == 2)
            {
              v33 = v27 >= 4 ? 4 : v27;
              v28 = 0;
              *(_WORD *)(v23 + i) += sub_2160D7C80(v11, (unsigned __int8 *)v11 + 2 * v33 + 878);
              ++v27;
            }
            else if (v28)
            {
              ++v28;
            }
            else
            {
              v28 = 0;
            }
            result = sub_2160B1528(v11);
            if ((_DWORD)result)
              *(_WORD *)(v23 + i) = -*(_WORD *)(v23 + i);
          }
        }
        v22 = v88;
        *(_BYTE *)(a5 + v90) = v25;
        v18 = v93;
      }
      v17 += 128;
      ++v18;
      v23 += 128;
    }
    while (v18 != 4);
  }
  else
  {
    LODWORD(v34) = 0;
    v35 = 0;
    v36 = 48;
    if (!v14)
      v36 = 0;
    v37 = 1422194;
    if (v13)
      v37 = 1422418;
    v38 = a8 + v37 + v83 + v36;
    v39 = 16 - v83;
    v40 = 1;
    v97 = 2;
    do
    {
      v99 = 0;
      v89 = v40;
      v41 = 1;
      v42 = 2;
      v91 = v35;
      do
      {
        v94 = v41;
        v95 = v35;
        if (((v92 >> v35) & 1) != 0)
        {
          v43 = v34;
          v44 = v91;
          do
          {
            v34 = v43;
            v45 = v99;
            do
            {
              result = sub_2160D7624(v101, a2, v82, 0, v102, v45, v44, a3, a4, v17, *(_DWORD *)(a8 + 16) & *(unsigned __int8 *)(a8 + 185));
              *(_BYTE *)(a5 + v34) = result;
              if (*(_BYTE *)(a8 + 1422192))
              {
                v46 = 0;
                do
                {
                  *(_WORD *)(v17 + 2 * v46) *= *(unsigned __int8 *)(v38 + v46);
                  ++v46;
                }
                while (v39 != v46);
              }
              v17 += 32;
              ++v45;
              ++v34;
            }
            while (v45 != v42);
            ++v44;
            v43 = v34;
          }
          while (v44 != v97);
        }
        else
        {
          v17 += 128;
          LODWORD(v34) = v34 + 4;
        }
        v41 = 0;
        v35 = v95 + 1;
        v42 += 2;
        v99 = 2;
      }
      while ((v94 & 1) != 0);
      v40 = 0;
      v97 += 2;
      v35 = 2;
    }
    while ((v89 & 1) != 0);
  }
  if (v84)
  {
    sub_2160D7624(v101, a2, 6u, 0, v102, 0, 0, a3, a4, v87 + 800, *(_DWORD *)(a8 + 16) & *(unsigned __int8 *)(a8 + 185));
    result = sub_2160D7624(v101, a2, 6u, 1, v102, 0, 0, a3, a4, v87 + 808, *(_DWORD *)(a8 + 16) & *(unsigned __int8 *)(a8 + 185));
    v47 = (_BYTE *)(a8 + 1422192);
    if (*(_BYTE *)(a8 + 1422192))
    {
      v48 = 0;
      v49 = 64;
      if (!v85)
        v49 = 16;
      v50 = 1422194;
      if (v86)
        v50 = 1422418;
      v51 = (unsigned __int8 *)(a8 + v50 + v49);
      do
      {
        *(_WORD *)(v87 + 800 + v48) *= *v51;
        v48 += 2;
      }
      while (v48 != 8);
      v52 = 0;
      v53 = 80;
      if (!v85)
        v53 = 32;
      v54 = 1422194;
      if (v86)
        v54 = 1422418;
      v55 = (unsigned __int8 *)(a8 + v54 + v53);
      do
      {
        *(_WORD *)(v87 + 808 + v52) *= *v55;
        v52 += 2;
      }
      while (v52 != 8);
    }
    if (v84 != 1)
    {
      LODWORD(v56) = 0;
      v57 = 0;
      if (a5)
        v58 = a5 + 16;
      else
        v58 = 0;
      v59 = 64;
      if (!v85)
        v59 = 16;
      v60 = 1422194;
      if (v86)
        v60 = 1422418;
      v61 = v87 + 546;
      v62 = a8 + v60 + v59 + 1;
      v63 = 1;
      do
      {
        v64 = 0;
        v65 = v63;
        v56 = (int)v56;
        v66 = 1;
        do
        {
          v67 = v66;
          *(_BYTE *)(v58 + v56) = sub_2160D7624(v101, a2, 7u, 0, v102, v64, v57, a3, a4, v61, *(_DWORD *)(a8 + 16) & *(unsigned __int8 *)(a8 + 185));
          if (*v47)
          {
            for (j = 0; j != 15; ++j)
              *(_WORD *)(v61 + 2 * j) *= *(unsigned __int8 *)(v62 + j);
          }
          v66 = 0;
          v61 += 32;
          ++v56;
          v64 = 1;
        }
        while ((v67 & 1) != 0);
        v63 = 0;
        v57 = 1;
      }
      while ((v65 & 1) != 0);
      LODWORD(v69) = 0;
      v70 = 0;
      if (a5)
        v71 = a5 + 20;
      else
        v71 = 0;
      v72 = 80;
      if (!v85)
        v72 = 32;
      v73 = 1422194;
      if (v86)
        v73 = 1422418;
      v74 = v87 + 674;
      v75 = a8 + v73 + v72 + 1;
      v76 = 1;
      do
      {
        v77 = 0;
        v78 = v76;
        v69 = (int)v69;
        v79 = 1;
        do
        {
          v80 = v79;
          result = sub_2160D7624(v101, a2, 7u, 1, v102, v77, v70, a3, a4, v74, *(_DWORD *)(a8 + 16) & *(unsigned __int8 *)(a8 + 185));
          *(_BYTE *)(v71 + v69) = result;
          if (*v47)
          {
            for (k = 0; k != 15; ++k)
              *(_WORD *)(v74 + 2 * k) *= *(unsigned __int8 *)(v75 + k);
          }
          v79 = 0;
          v74 += 32;
          ++v69;
          v77 = 1;
        }
        while ((v80 & 1) != 0);
        v76 = 0;
        v70 = 1;
      }
      while ((v78 & 1) != 0);
    }
  }
  return result;
}

uint64_t sub_2160D7624(int *a1, uint64_t *a2, unsigned int a3, int a4, int a5, int a6, unsigned int a7, int a8, int a9, uint64_t a10, int a11)
{
  unsigned int v15;
  char v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unint64_t v20;
  char v21;
  char v22;
  _BOOL4 v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL4 v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  _UNKNOWN **v36;
  _BOOL4 v37;
  BOOL v38;
  int *v39;
  int *v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _WORD *v56;
  int v57;
  int v58;
  __int16 v59;
  int v60;
  int v61;
  char v63;
  char v64;
  int v65;
  uint64_t v66;

  v15 = a3 & 0xFFFFFFFB;
  if (a3 == 7)
    v16 = -2;
  else
    v16 = 0;
  if (a4)
    v17 = 0;
  else
    v17 = a3 == 7;
  if (a4)
    v18 = 0;
  else
    v18 = a3 == 6;
  if (a4)
    v19 = a3 == 6;
  else
    v19 = 0;
  LODWORD(v20) = a5 != 0;
  if (v15 == 1)
    v21 = 12;
  else
    v21 = 2 * (a3 == 7);
  if (v15 == 1)
    v22 = 3;
  else
    v22 = a3 == 7;
  if (v15 == 1)
  {
    v16 = -4;
    v23 = 1;
  }
  else
  {
    v23 = a3 == 7;
  }
  if (v23)
    v24 = a7;
  else
    v24 = 0;
  if (v23)
    v25 = a6;
  else
    v25 = 0;
  if (!a3)
  {
    v26 = 0;
    if (!v24)
      goto LABEL_33;
    goto LABEL_45;
  }
  if (v15 == 1)
  {
    v26 = a6 + 4 * a7 + 1;
    if (!v24)
      goto LABEL_33;
LABEL_45:
    v28 = (*(_QWORD *)(a2[2] + 32) & (unint64_t)(1 << (v26 + v16))) >> (v26 + v16);
LABEL_46:
    if (!v25)
      goto LABEL_49;
    goto LABEL_47;
  }
  if (v18)
    v26 = 17;
  else
    v26 = 18;
  if (a3 == 6)
  {
LABEL_44:
    if (!v24)
      goto LABEL_33;
    goto LABEL_45;
  }
  v29 = v25 + 2 * v24;
  if (v17)
  {
    v26 = v29 + 19;
    goto LABEL_44;
  }
  v26 = v29 + 23;
  if (v24)
    goto LABEL_45;
LABEL_33:
  v27 = a2[1];
  LODWORD(v28) = a5 != 0;
  if (!v27)
    goto LABEL_46;
  if (*(_BYTE *)(v27 + 1) || *(_BYTE *)(v27 + 2) != 25)
  {
    v28 = (*(_QWORD *)(v27 + 32) & (unint64_t)(1 << (v26 + v21))) >> (v26 + v21);
    if (!v25)
      goto LABEL_49;
LABEL_47:
    v20 = (*(_QWORD *)(a2[2] + 32) & (unint64_t)(1 << (v26 - 1))) >> (v26 - 1);
    goto LABEL_77;
  }
  LODWORD(v28) = 1;
  if (v25)
    goto LABEL_47;
LABEL_49:
  v30 = *a2;
  if (!*a2)
    goto LABEL_77;
  if (*(_BYTE *)(a2[2] + 24) != 1)
  {
    if (!*(_BYTE *)(a2[2] + 24) && *(_BYTE *)(v30 + 24) == 1)
    {
      if (v15 == 1)
      {
        if (a11)
          v22 = 11;
        else
          v22 = 3;
        v34 = (4 * (a7 >> 1)) | 1;
        goto LABEL_73;
      }
      if (a3 == 7)
      {
        if (a11)
          v22 = 3;
        else
          v22 = 1;
      }
      else
      {
        v22 = 0;
        if (!a3)
        {
          LOBYTE(v34) = 0;
          goto LABEL_73;
        }
      }
      if (v18)
      {
        LOBYTE(v34) = 17;
      }
      else
      {
        if (v17)
          v63 = 19;
        else
          v63 = 23;
        if (v19)
          LOBYTE(v34) = 18;
        else
          LOBYTE(v34) = v63;
      }
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (*(_BYTE *)(v30 + 24))
  {
LABEL_72:
    LOBYTE(v34) = v26;
    goto LABEL_73;
  }
  v32 = a3 == 7 && v24 > 0;
  v33 = v24 > 1 && v15 == 1;
  if (v33 || v32)
  {
    v30 = a2[3];
LABEL_131:
    if (v15 == 1)
    {
      LOBYTE(v34) = (8 * (a7 & 1)) | 1;
      v22 = 3;
    }
    else
    {
      if (v18)
      {
        LOBYTE(v34) = 17;
      }
      else
      {
        if (v17)
          v64 = 19;
        else
          v64 = 23;
        if (v19)
          LOBYTE(v34) = 18;
        else
          LOBYTE(v34) = v64;
      }
      v22 = a3 == 7;
    }
    goto LABEL_73;
  }
  if (a3)
    goto LABEL_131;
  LOBYTE(v34) = 0;
LABEL_73:
  if (*(_BYTE *)(v30 + 1) || *(_BYTE *)(v30 + 2) != 25)
    v20 = (*(_QWORD *)(v30 + 32) & (unint64_t)(1 << (v34 + v22))) >> (v34
                                                                                              + v22);
  else
    LODWORD(v20) = 1;
LABEL_77:
  if (!sub_2160B1454((uint64_t)a1, (unsigned __int8 *)&a1[2 * dword_2160F917C[a3] + 46 + (int)v28] + 2 * (int)v20 + 2))return 0;
  v35 = a3;
  *(_QWORD *)(a2[2] + 32) |= 1 << v26;
  v36 = &off_24D4DF330;
  if (!a8)
    v36 = &off_24D4DF2F0;
  v37 = a9 == 1 || a8 == 0;
  v38 = !v37;
  if (v37)
    v39 = (int *)&unk_2160F91BC;
  else
    v39 = (int *)&unk_2160F91DC;
  v40 = (int *)&unk_2160F921C;
  if (!v38)
    v40 = (int *)&unk_2160F91FC;
  v42 = a3 == 1 || a3 == 7;
  v66 = a3;
  v43 = a10 + 2 * (v42 << 63 >> 63);
  v44 = v42;
  v65 = dword_2160F919C[a3];
  v45 = v65 - (v42 ^ 1);
  v46 = 0;
  if (v45 > (int)v42)
  {
    v47 = (uint64_t)a1 + 2 * v39[v35] + 16;
    v48 = (uint64_t)a1 + 2 * v40[v35] + 16;
    v49 = (int *)v36[v35];
    v50 = (uint64_t)*(&off_24D4DF370 + v35);
    do
    {
      if (sub_2160B1454((uint64_t)a1, (unsigned __int8 *)(v47 + 2 * v49[v44])))
      {
        *(_WORD *)(v43 + 2 * v44) = 1;
        v46 = (v46 + 1);
        if (sub_2160B1454((uint64_t)a1, (unsigned __int8 *)(v48 + 2 * *(int *)(v50 + 4 * v44))))
        {
          if (v44 <= v45)
            v51 = v45;
          else
            v51 = v44;
          v44 = v51 + 1;
        }
      }
      ++v44;
    }
    while (v44 < v45);
  }
  if (v44 <= v45)
  {
    *(_WORD *)(v43 + 2 * v44) = 1;
    v46 = (v46 + 1);
  }
  v52 = 0;
  v53 = (uint64_t)a1 + 2 * dword_2160F97B0[v66] + 16;
  v54 = (uint64_t)a1 + 2 * dword_2160F97D0[v66] + 16;
  v55 = v65 + 1;
  v56 = (_WORD *)(a10 + 2 * (v65 - 1));
  v57 = 1;
  do
  {
    if (*v56)
    {
      if (v57 >= 4)
        v58 = 4;
      else
        v58 = v57;
      v59 = sub_2160B1454((uint64_t)a1, (unsigned __int8 *)(v53 + 2 * v58));
      v60 = (unsigned __int16)(*v56 + v59);
      *v56 += v59;
      if (v60 == 2)
      {
        if (v52 >= 4)
          v61 = 4;
        else
          v61 = v52;
        v57 = 0;
        *v56 += sub_2160D7C80(a1, (unsigned __int8 *)(v54 + 2 * v61));
        ++v52;
      }
      else if (v57)
      {
        ++v57;
      }
      else
      {
        v57 = 0;
      }
      if (sub_2160B1528(a1))
        *v56 = -*v56;
    }
    --v55;
    --v56;
  }
  while (v55 > 1);
  return v46;
}

uint64_t sub_2160D7B5C(uint64_t a1, unsigned __int8 **a2, int a3, _DWORD *a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  unsigned __int8 *v11;

  v6 = *a2;
  if (*a2)
    LODWORD(v6) = *v6 != 1;
  v7 = a2[1];
  if (v7)
    LODWORD(v7) = *v7 != 1;
  v8 = (_DWORD)v7 + (_DWORD)v6;
  if (a3 == 6 || a3 == 1)
    v9 = v8 | 0x18;
  else
    v9 = v8 + 11;
  result = sub_2160B1454(a1, (unsigned __int8 *)(a1 + 2 * v9 + 16));
  *a4 = result;
  v11 = a2[2];
  if (v11)
    *v11 = result;
  return result;
}

uint64_t sub_2160D7BE0(int *a1, int a2)
{
  int v3;
  int v4;
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  int v11;

  v3 = 0;
  do
  {
    v4 = a2;
    v5 = sub_2160B1528(a1);
    v6 = 1 << v4;
    if (v5)
      a2 = v4 + 1;
    else
      a2 = v4;
    if (!v5)
      v6 = 0;
    v3 += v6;
  }
  while (v5 && a2 < 15);
  v7 = 0;
  if (a2)
  {
    if (v5)
      v8 = v4 + 1;
    else
      v8 = v4;
    v9 = v8 - 1;
    do
    {
      v10 = sub_2160B1528(a1);
      v11 = 1 << v9;
      if (!v10)
        v11 = 0;
      v7 |= v11;
      --v9;
    }
    while (v9 != -1);
  }
  return (v7 + v3);
}

uint64_t sub_2160D7C80(int *a1, unsigned __int8 *a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;

  result = sub_2160B1454((uint64_t)a1, a2);
  if ((_DWORD)result)
  {
    v5 = 0;
    do
    {
      v6 = sub_2160B1454((uint64_t)a1, a2);
      v7 = v5 - 1;
      if (!v6)
        break;
    }
    while (v5-- != -11);
    if (v6)
      return sub_2160D7BE0(a1, 0) - v7 + 1;
    else
      return -v7;
  }
  return result;
}

uint64_t sub_2160D7CF4(uint64_t a1, char *a2)
{
  unsigned int *v4;
  int v5;
  unint64_t v6;
  unsigned int *v7;
  double v8;
  unsigned int *v9;
  uint64_t result;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  unsigned int *v27;
  signed int v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  signed int v32;
  unint64_t v33;
  int v34;
  unsigned int *v35;
  signed int v36;
  unsigned int *v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  double v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int *v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int *v73;
  int v74;
  signed int v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  int v79;
  signed int v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned __int8 v96;
  unsigned int v97;
  unint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  int v113;
  unsigned int *v114;
  signed int v115;
  unint64_t v116;
  int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  unsigned int *v136;
  signed int v137;
  unsigned int *v138;
  unint64_t v139;
  unsigned int *v140;
  unsigned int *v141;
  int v142;
  signed int v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  unsigned int v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  int v170;
  char *v171;
  BOOL *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unint64_t v196;
  unsigned int *v197;
  int v198;
  unsigned int *v199;
  signed int v200;
  unint64_t v201;
  int v202;
  unsigned int *v203;
  signed int v204;
  unsigned int v205;
  int v206;
  unsigned int *v207;
  unsigned int *v208;
  int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unint64_t v217;
  unsigned int *v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unint64_t v224;
  unsigned int *v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unint64_t v234;
  unsigned int *v235;
  unsigned int *v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  unint64_t v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  unint64_t v257;
  unint64_t v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  unsigned int v263;
  unint64_t v264;
  int v265;
  unint64_t v266;
  char v267;
  unsigned int v268;
  unsigned int v269;
  unint64_t v270;
  unsigned int *v271;
  unsigned int v272;
  unsigned int v273;

  v4 = *(unsigned int **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 36) + 1;
  v7 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v6 >> 3));
  bzero(a2, 0x758uLL);
  if (v7 <= v4)
    v9 = v7;
  else
    v9 = v4;
  result = 4294958327;
  if (v5 < 0)
    return result;
  v11 = ((v6 & 7) + 2) & 7;
  v12 = (unsigned int *)((char *)v9 + ((unint64_t)((v6 & 7) + 2) >> 3));
  v13 = (bswap32(*v12) << (((v6 & 7) + 2) & 7)) & 0xF8000000;
  if (!(bswap32(*v7) << (v6 & 7) >> 30) || v13 != 939524096)
    return result;
  v15 = (v11 + 5);
  v16 = ((_BYTE)v11 + 5) & 7;
  if (v12 > v4)
    v12 = v4;
  v17 = (unsigned int *)((char *)v12 + (v15 >> 3));
  v18 = bswap32(*v17);
  v19 = v18 << v16 >> 24;
  *(_DWORD *)a2 = v19;
  v20 = (1 << ((v18 << v16 >> 24) - 66)) & 0x400400801;
  if (v19 - 66 > 0x22 || v20 == 0)
    return result;
  if (v17 > v4)
    v17 = v4;
  v24 = *(unsigned int *)((char *)v17 + 1);
  v22 = (unsigned int *)((char *)v17 + 1);
  v23 = v24;
  if (v22 > v4)
    v22 = v4;
  a2[8] = ((bswap32(v23) << v16) & 0x80000000) != 0;
  v25 = (v16 + 1);
  v26 = v25 & 7;
  v27 = (unsigned int *)((char *)v22 + (v25 >> 3));
  v28 = bswap32(*v27) << v26;
  if (v27 > v4)
    v27 = v4;
  a2[9] = v28 < 0;
  v29 = (v26 + 1);
  v30 = ((_BYTE)v26 + 1) & 7;
  v31 = (unsigned int *)((char *)v27 + (v29 >> 3));
  v32 = bswap32(*v31) << (v29 & 7);
  if (v31 > v4)
    v31 = v4;
  a2[10] = v32 < 0;
  v33 = (v30 + 1);
  v34 = ((_BYTE)v30 + 1) & 7;
  v35 = (unsigned int *)((char *)v31 + (v33 >> 3));
  v36 = bswap32(*v35) << (v33 & 7);
  if (v35 > v4)
    v35 = v4;
  a2[11] = v36 < 0;
  v37 = (unsigned int *)((char *)v35 + ((v34 + 1) >> 3));
  if (v37 > v4)
    v37 = v4;
  v38 = ((((_BYTE)v34 + 1) & 7) + 4) & 7;
  v39 = (unsigned int *)((char *)v37 + ((unint64_t)((((_BYTE)v34 + 1) & 7u) + 4) >> 3));
  v40 = bswap32(*v39) << ((((v34 + 1) & 7) + 4) & 7);
  if (v39 > v4)
    v39 = v4;
  *((_DWORD *)a2 + 1) = HIBYTE(v40);
  v42 = *(unsigned int *)((char *)v39 + 1);
  v41 = (char *)v39 + 1;
  v43 = bswap32(v42) << v38;
  if (v41 <= (char *)v4)
    v44 = (unsigned int *)v41;
  else
    v44 = v4;
  v45 = sub_2160D8D78((uint64_t)a2, (uint64_t)(a2 + 1360), v8);
  v46 = __clz(v43 | 1);
  if (!v43)
    ++v46;
  v47 = v43 << (v46 + 1) >> -(char)v46;
  if (!v46)
    LOBYTE(v47) = 0;
  v48 = v47 + ~(-1 << v46);
  v49 = v48;
  a2[15] = v48;
  v50 = v38 + 2 * v46 + 1;
  v51 = (unsigned int *)((char *)v44 + (v50 >> 3));
  if (v51 <= v4)
    v52 = (unsigned int *)((char *)v44 + (v50 >> 3));
  else
    v52 = v4;
  if (v49 > 0x1F)
    return 4294958327;
  v53 = v50 & 7;
  v54 = bswap32(*v51) << v53;
  if (v19 == 100)
  {
    v55 = __clz(v54 | 1);
    if (!v54)
      ++v55;
    v56 = v54 << (v55 + 1) >> -(char)v55;
    if (v55)
      v57 = v56;
    else
      v57 = 0;
    v58 = v57 + ~(-1 << v55);
    a2[16] = v58;
    if (v58 > 1u)
      return 4294958327;
    v59 = v53 + 2 * v55 + 1;
    v60 = (unsigned int *)((char *)v52 + (v59 >> 3));
    v61 = v59 & 7;
    v62 = bswap32(*v60) << v61;
    v63 = __clz(v62 | 1);
    if (!v62)
      ++v63;
    v64 = v62 << (v63 + 1) >> -(char)v63;
    if (!v63)
      LOBYTE(v64) = 0;
    a2[18] = v64 + ~(-1 << v63);
    if ((_BYTE)v64 + ~(-1 << v63))
      return 4294958327;
    if (v60 > v4)
      v60 = v4;
    v65 = v61 + 2 * v63 + 1;
    v66 = (unsigned int *)((char *)v60 + (v65 >> 3));
    v67 = v65 & 7;
    v68 = bswap32(*v66) << v67;
    v69 = __clz(v68 | 1);
    if (!v68)
      ++v69;
    v70 = v68 << (v69 + 1) >> -(char)v69;
    if (!v69)
      v70 = 0;
    v71 = v70 + ~(-1 << v69);
    a2[19] = v71;
    if ((_BYTE)v71)
      return 4294958327;
    if (v66 > v4)
      v66 = v4;
    v72 = v67 + 2 * v69 + 1;
    v73 = (unsigned int *)((char *)v66 + (v72 >> 3));
    v74 = v72 & 7;
    v75 = bswap32(*v73) << v74;
    a2[20] = v75 < 0;
    if (v75 < 0)
      return 4294958327;
    if (v73 > v4)
      v73 = v4;
    v76 = (v74 + 1);
    v77 = (unsigned int *)((char *)v73 + (v76 >> 3));
    if (v77 <= v4)
      v78 = v77;
    else
      v78 = v4;
    v79 = v76 & 7;
    v80 = bswap32(*v77) << v79;
    a2[21] = v80 < 0;
    v81 = (v79 + 1);
    v53 = ((_BYTE)v79 + 1) & 7;
    v52 = (unsigned int *)((char *)v78 + (v81 >> 3));
    v82 = bswap32(*v52);
    v83 = v82 << v53;
    if (v52 > v4)
      v52 = v4;
    if (v80 < 0)
    {
      v166 = 0;
      v167 = 38;
      while (1)
      {
        a2[v166 + 22] = v83 < 0;
        v168 = (v53 + 1);
        v53 = ((_BYTE)v53 + 1) & 7;
        v52 = (unsigned int *)((char *)v52 + (v168 >> 3));
        v54 = bswap32(*v52) << (v168 & 7);
        if (v52 > v4)
          v52 = v4;
        if (v83 < 0)
        {
          *(_QWORD *)(a1 + 16) = v52;
          *(_DWORD *)(a1 + 32) = v54;
          *(_BYTE *)(a1 + 36) = v53;
          v169 = (_DWORD)v52 - *(_DWORD *)a1;
          v170 = *(_DWORD *)(a1 + 8);
          if (v166 > 5)
          {
            if (v170 < v169)
              return 4294958327;
            v175 = (v166 - 6);
            v171 = &a2[64 * v175 + 134];
            v172 = (BOOL *)&a2[v175 + 36];
            v173 = a1;
            v174 = 64;
          }
          else
          {
            if (v170 < v169)
              return 4294958327;
            v171 = &a2[v167];
            v172 = (BOOL *)&a2[v166 + 30];
            v173 = a1;
            v174 = 16;
          }
          result = sub_2160D8F04(v173, (uint64_t)v171, v174, v172);
          if ((_DWORD)result)
            return result;
          v52 = *(unsigned int **)(a1 + 16);
          v4 = *(unsigned int **)(a1 + 24);
          v54 = *(_DWORD *)(a1 + 32);
          v53 = *(unsigned __int8 *)(a1 + 36);
        }
        ++v166;
        v167 += 16;
        v83 = v54;
        if (v166 == 8)
          goto LABEL_73;
      }
    }
    v54 = v82 << v53;
  }
  else
  {
    a2[16] = 1;
  }
LABEL_73:
  v84 = __clz(v54 | 1);
  if (!v54)
    ++v84;
  v85 = v54 << (v84 + 1) >> -(char)v84;
  v86 = v84 ? v85 : 0;
  v87 = v86 + ~(-1 << v84);
  *((_DWORD *)a2 + 68) = v87;
  if (v87 > 0xC)
    return 4294958327;
  v88 = v53 + 2 * v84 + 1;
  v89 = (unsigned int *)((char *)v52 + (v88 >> 3));
  if (v89 <= v4)
    v90 = v89;
  else
    v90 = v4;
  v91 = v88 & 7;
  v92 = bswap32(*v89) << v91;
  v93 = __clz(v92 | 1);
  if (v92)
    v94 = v93;
  else
    v94 = v93 + 1;
  v95 = v92 << (v94 + 1) >> -(char)v94;
  if (!v94)
    LOBYTE(v95) = 0;
  v96 = v95 + ~(-1 << v94);
  v97 = v96;
  a2[276] = v96;
  v98 = v91 + 2 * v94 + 1;
  v99 = (unsigned int *)((char *)v90 + (v98 >> 3));
  v100 = v99 <= v4 ? (unsigned int *)((char *)v90 + (v98 >> 3)) : v4;
  if (v97 > 2)
    return 4294958327;
  v101 = v98 & 7;
  v102 = bswap32(*v99) << v101;
  if (v97 == 1)
  {
    a2[284] = (v102 & 0x80000000) != 0;
    v145 = (v101 + 1);
    v146 = ((_BYTE)v101 + 1) & 7;
    v147 = (unsigned int *)((char *)v100 + (v145 >> 3));
    v148 = bswap32(*v147) << (v145 & 7);
    if (v147 > v4)
      v147 = v4;
    v149 = __clz(v148 | 1);
    if (!v148)
      ++v149;
    if (v149 <= 0xC)
    {
      result = 0;
      v150 = v148 << (v149 + 1) >> -(char)v149;
      if (!v149)
        v150 = 0;
      v151 = v150 + ~(-1 << v149);
      v152 = v146 + 2 * v149 + 1;
      v101 = v152 & 7;
      v100 = (unsigned int *)((char *)v147 + (v152 >> 3));
      v102 = bswap32(*v100) << (v152 & 7);
      if (v100 > v4)
        v100 = v4;
      goto LABEL_176;
    }
    v153 = (v146 + 1);
    v101 = ((_BYTE)v146 + 1) & 7;
    v100 = (unsigned int *)((char *)v147 + (v153 >> 3));
    v102 = bswap32(*v100) << (v153 & 7);
    if (v100 > v4)
      v100 = v4;
    if ((v148 & 0x80000000) != 0)
    {
      v154 = 0;
    }
    else
    {
      v154 = 0;
      do
      {
        v155 = v154;
        v156 = v101;
        v157 = v102;
        ++v154;
        v158 = (v101 + 1);
        v101 = ((_BYTE)v101 + 1) & 7;
        v100 = (unsigned int *)((char *)v100 + (v158 >> 3));
        v102 = bswap32(*v100) << (v158 & 7);
        if (v100 > v4)
          v100 = v4;
      }
      while ((v157 & 0x80000000) == 0 && v155 < 0x1F);
      if (v155 > 0x1E)
      {
        v177 = 0;
        result = 4294958327;
        v151 = -2;
LABEL_177:
        *((_DWORD *)a2 + 72) = ((v151 + 1) >> 1) - ((v151 + 1) >> 1) * 2 * ((v151 + 1) & 1);
        if (!v177)
          goto LABEL_311;
        v178 = __clz(v102 | 1);
        if (!v102)
          ++v178;
        if (v178 <= 0xC)
        {
          result = 0;
          v179 = v102 << (v178 + 1) >> -(char)v178;
          if (!v178)
            v179 = 0;
          v180 = v179 + ~(-1 << v178);
          v181 = v101 + 2 * v178 + 1;
          v101 = v181 & 7;
          v100 = (unsigned int *)((char *)v100 + (v181 >> 3));
          v182 = bswap32(*v100) << (v181 & 7);
          if (v100 > v4)
            v100 = v4;
          goto LABEL_264;
        }
        v183 = (v101 + 1);
        v101 = ((_BYTE)v101 + 1) & 7;
        v100 = (unsigned int *)((char *)v100 + (v183 >> 3));
        v182 = bswap32(*v100) << (v183 & 7);
        if (v100 > v4)
          v100 = v4;
        if ((v102 & 0x80000000) != 0)
        {
          v184 = 0;
        }
        else
        {
          v184 = 0;
          do
          {
            v185 = v184;
            v186 = v101;
            v187 = v182;
            ++v184;
            v188 = (v101 + 1);
            v101 = ((_BYTE)v101 + 1) & 7;
            v100 = (unsigned int *)((char *)v100 + (v188 >> 3));
            v182 = bswap32(*v100) << (v188 & 7);
            if (v100 > v4)
              v100 = v4;
          }
          while ((v187 & 0x80000000) == 0 && v185 < 0x1F);
          if (v185 > 0x1E)
          {
            v246 = 0;
            result = 4294958327;
            v180 = -2;
            goto LABEL_265;
          }
          if (v184 - 1 > 0x17)
          {
            v189 = v182 >> (48 - v184);
            v190 = ((v186 + 1) & 7) + v184;
            v191 = v190 - 16;
            v101 = v190 & 7;
            v192 = (unsigned int *)((char *)v100 + (v191 >> 3));
            v193 = bswap32(*v192) << v101;
            if (v192 > v4)
              v192 = v4;
            v194 = *(unsigned int *)((char *)v192 + 2);
            v100 = (unsigned int *)((char *)v192 + 2);
            v182 = bswap32(v194) << v101;
            if (v100 > v4)
              v100 = v4;
            v195 = __PAIR64__(v189, v193) >> 16;
LABEL_263:
            result = 0;
            v180 = v195 + ~(-1 << v184);
LABEL_264:
            v246 = 1;
LABEL_265:
            *((_DWORD *)a2 + 73) = ((v180 + 1) >> 1)
                                 - ((v180 + 1) >> 1) * 2 * ((v180 + 1) & 1);
            if (v246)
            {
              v247 = __clz(v182 | 1);
              if (!v182)
                ++v247;
              v248 = v182 << (v247 + 1) >> -(char)v247;
              if (!v247)
                v248 = 0;
              v249 = v248 + ~(-1 << v247);
              *((_DWORD *)a2 + 74) = v249;
              if (v249 > 0xFF)
                return 4294958327;
              v250 = v101 + 2 * v247 + 1;
              v251 = (unsigned int *)((char *)v100 + (v250 >> 3));
              if (v251 <= v4)
                v100 = (unsigned int *)((char *)v100 + (v250 >> 3));
              else
                v100 = v4;
              v101 = v250 & 7;
              v102 = bswap32(*v251) << v101;
              *((_DWORD *)a2 + 468) = 0;
              if (!(_DWORD)v249)
                goto LABEL_101;
              v252 = 0;
              while (1)
              {
                v253 = __clz(v102 | 1);
                v254 = v102 ? v253 : v253 + 1;
                if (v254 <= 0xC)
                  break;
                v258 = (v101 + 1);
                v101 = ((_BYTE)v101 + 1) & 7;
                v100 = (unsigned int *)((char *)v100 + (v258 >> 3));
                v259 = bswap32(*v100) << (v258 & 7);
                if (v100 > v4)
                  v100 = v4;
                v260 = 0;
                if ((v102 & 0x80000000) != 0)
                  goto LABEL_294;
                do
                {
                  v261 = v260;
                  v262 = v101;
                  v263 = v259;
                  ++v260;
                  v264 = (v101 + 1);
                  v101 = ((_BYTE)v101 + 1) & 7;
                  v100 = (unsigned int *)((char *)v100 + (v264 >> 3));
                  v259 = bswap32(*v100) << (v264 & 7);
                  if (v100 > v4)
                    v100 = v4;
                }
                while ((v263 & 0x80000000) == 0 && v261 < 0x1F);
                if (v261 <= 0x1E)
                {
                  if (v260 - 1 > 0x17)
                  {
                    v268 = v259 >> (48 - v260);
                    v269 = ((v262 + 1) & 7) + v260;
                    v270 = v269 - 16;
                    v101 = v269 & 7;
                    v271 = (unsigned int *)((char *)v100 + (v270 >> 3));
                    v272 = bswap32(*v271) << v101;
                    if (v271 > v4)
                      v271 = v4;
                    v273 = *(unsigned int *)((char *)v271 + 2);
                    v100 = (unsigned int *)((char *)v271 + 2);
                    v102 = bswap32(v273) << v101;
                    if (v100 > v4)
                      v100 = v4;
                    v265 = __PAIR64__(v268, v272) >> 16;
                  }
                  else
                  {
LABEL_294:
                    v265 = v259 >> -(char)v260;
                    v266 = v101 + v260;
                    v101 = ((_BYTE)v101 + (_BYTE)v260) & 7;
                    v100 = (unsigned int *)((char *)v100 + (v266 >> 3));
                    v102 = bswap32(*v100) << (v266 & 7);
                    if (v100 > v4)
                      v100 = v4;
                  }
                  result = 0;
                  v256 = v265 + ~(-1 << v260);
LABEL_304:
                  v267 = 1;
                  goto LABEL_305;
                }
                v267 = 0;
                result = 4294958327;
                v256 = -2;
                v102 = v259;
LABEL_305:
                *(_DWORD *)&a2[4 * v252 + 300] = ((v256 + 1) >> 1)
                                               - ((v256 + 1) >> 1) * 2 * ((v256 + 1) & 1);
                if ((v267 & 1) == 0)
                  goto LABEL_311;
                if (++v252 == v249)
                  goto LABEL_101;
              }
              result = 0;
              v255 = v102 << (v254 + 1) >> -(char)v254;
              if (!v254)
                v255 = 0;
              v256 = v255 + ~(-1 << v254);
              v257 = v101 + 2 * v254 + 1;
              v101 = ((_BYTE)v101 + 2 * (_BYTE)v254 + 1) & 7;
              v100 = (unsigned int *)((char *)v100 + (v257 >> 3));
              v102 = bswap32(*v100) << (v257 & 7);
              if (v100 > v4)
                v100 = v4;
              goto LABEL_304;
            }
            v102 = v182;
LABEL_311:
            if (!(_DWORD)result)
            {
LABEL_312:
              result = 0;
              *(_QWORD *)(a1 + 16) = v100;
              *(_DWORD *)(a1 + 32) = v102;
              *(_BYTE *)(a1 + 36) = v101;
              return result;
            }
            return result;
          }
        }
        v195 = v182 >> -(char)v184;
        v245 = v101 + v184;
        v101 = ((_BYTE)v101 + (_BYTE)v184) & 7;
        v100 = (unsigned int *)((char *)v100 + (v245 >> 3));
        v182 = bswap32(*v100) << (v245 & 7);
        if (v100 > v4)
          v100 = v4;
        goto LABEL_263;
      }
      if (v154 - 1 > 0x17)
      {
        v159 = v102 >> (48 - v154);
        v160 = ((v156 + 1) & 7) + v154;
        v161 = v160 - 16;
        v101 = v160 & 7;
        v162 = (unsigned int *)((char *)v100 + (v161 >> 3));
        v163 = bswap32(*v162) << v101;
        if (v162 > v4)
          v162 = v4;
        v164 = *(unsigned int *)((char *)v162 + 2);
        v100 = (unsigned int *)((char *)v162 + 2);
        v102 = bswap32(v164) << v101;
        if (v100 > v4)
          v100 = v4;
        v165 = __PAIR64__(v159, v163) >> 16;
LABEL_175:
        result = 0;
        v151 = v165 + ~(-1 << v154);
LABEL_176:
        v177 = 1;
        goto LABEL_177;
      }
    }
    v165 = v102 >> -(char)v154;
    v176 = v101 + v154;
    v101 = ((_BYTE)v101 + (_BYTE)v154) & 7;
    v100 = (unsigned int *)((char *)v100 + (v176 >> 3));
    v102 = bswap32(*v100) << (v176 & 7);
    if (v100 > v4)
      v100 = v4;
    goto LABEL_175;
  }
  if (!v97)
  {
    v103 = __clz(v102 | 1);
    if (!v102)
      ++v103;
    v104 = v102 << (v103 + 1) >> -(char)v103;
    if (!v103)
      v104 = 0;
    v105 = v104 + ~(-1 << v103);
    *((_DWORD *)a2 + 70) = v105;
    if (v105 > 0xC)
      return 4294958327;
    v106 = v101 + 2 * v103 + 1;
    v100 = (unsigned int *)((char *)v100 + (v106 >> 3));
    v107 = *v100;
    *((_DWORD *)a2 + 468) = 16 << v105;
    if (v100 > v4)
      v100 = v4;
    a2[284] = 0;
    *((_QWORD *)a2 + 36) = 0;
    v101 = v106 & 7;
    v102 = bswap32(v107) << v101;
    *((_DWORD *)a2 + 74) = 0;
  }
LABEL_101:
  v108 = __clz(v102 | 1);
  if (v102)
    v109 = v108;
  else
    v109 = v108 + 1;
  v110 = v102 << (v109 + 1) >> -(char)v109;
  if (!v109)
    v110 = 0;
  v111 = v110 + ~(-1 << v109);
  *((_DWORD *)a2 + 330) = v111;
  v112 = v101 + 2 * v109 + 1;
  v113 = v112 & 7;
  v114 = (unsigned int *)((char *)v100 + (v112 >> 3));
  v115 = bswap32(*v114) << v113;
  if (v114 > v4)
    v114 = v4;
  a2[1324] = v115 < 0;
  v116 = (v113 + 1);
  v117 = ((_BYTE)v113 + 1) & 7;
  v118 = (unsigned int *)((char *)v114 + (v116 >> 3));
  v119 = bswap32(*v118) << (v116 & 7);
  if (v118 <= v4)
    v120 = v118;
  else
    v120 = v4;
  v121 = __clz(v119 | 1);
  if (v119)
    v122 = v121;
  else
    v122 = v121 + 1;
  v123 = v119 << (v122 + 1) >> -(char)v122;
  if (!v122)
    v123 = 0;
  v124 = v123 + ~(-1 << v122);
  *((_DWORD *)a2 + 332) = v124;
  v125 = v117 + 2 * v122 + 1;
  v126 = ((_BYTE)v117 + 2 * (_BYTE)v122 + 1) & 7;
  v127 = (unsigned int *)((char *)v120 + (v125 >> 3));
  v128 = bswap32(*v127) << v126;
  if (v127 <= v4)
    v129 = v127;
  else
    v129 = v4;
  v130 = __clz(v128 | 1);
  if (v128)
    v131 = v130;
  else
    v131 = v130 + 1;
  v132 = v128 << (v131 + 1) >> -(char)v131;
  if (!v131)
    v132 = 0;
  v133 = v132 + ~(-1 << v131);
  *((_DWORD *)a2 + 333) = v133;
  v134 = v126 + 2 * v131 + 1;
  v135 = ((_BYTE)v126 + 2 * (_BYTE)v131 + 1) & 7;
  v136 = (unsigned int *)((char *)v129 + (v134 >> 3));
  v137 = bswap32(*v136) << v135;
  if (v136 <= v4)
    v138 = v136;
  else
    v138 = v4;
  a2[1336] = v137 < 0;
  v139 = (v135 + 1);
  v140 = (unsigned int *)((char *)v138 + (v139 >> 3));
  if (v140 <= v4)
    v141 = (unsigned int *)((char *)v138 + (v139 >> 3));
  else
    v141 = v4;
  if (v111 > 0x10 || (unint64_t)(v124 + 1 + (v124 + 1) * v133) >> 23)
    return 4294958327;
  v142 = v139 & 7;
  v143 = bswap32(*v140) << (v139 & 7);
  sub_2160D8D78((uint64_t)a2, (uint64_t)(a2 + 1360), v45);
  if (a2[1336])
  {
    a2[1337] = 0;
  }
  else
  {
    a2[1337] = v143 < 0;
    v196 = (v142 + 1);
    v142 = ((_BYTE)v142 + 1) & 7;
    v197 = (unsigned int *)((char *)v141 + (v196 >> 3));
    v143 = bswap32(*v197) << v142;
    if (v197 <= v4)
      v141 = v197;
    else
      v141 = v4;
  }
  a2[1338] = v143 < 0;
  v198 = ((_BYTE)v142 + 1) & 7;
  v199 = (unsigned int *)((char *)v141 + ((unint64_t)(v142 + 1) >> 3));
  v200 = bswap32(*v199) << v198;
  if (v199 > v4)
    v199 = v4;
  a2[1339] = v200 < 0;
  v201 = (v198 + 1);
  v202 = ((_BYTE)v198 + 1) & 7;
  v203 = (unsigned int *)((char *)v199 + (v201 >> 3));
  v204 = bswap32(*v203) << (v201 & 7);
  if (v203 > v4)
    v203 = v4;
  if ((v200 & 0x80000000) == 0)
  {
    *(_OWORD *)(a2 + 1340) = 0u;
    goto LABEL_211;
  }
  v211 = __clz(v204 | 1);
  v212 = v204 ? v211 : v211 + 1;
  v213 = (v204 << (v212 + 1)) >> -(char)v212;
  v214 = v212 ? v213 : 0;
  v215 = v214 + ~(-1 << v212);
  *((_DWORD *)a2 + 335) = v215;
  v216 = 9 * *((_DWORD *)a2 + 332);
  if (v215 > v216)
    return 4294958327;
  v217 = v202 + 2 * v212 + 1;
  v218 = (unsigned int *)((char *)v203 + (v217 >> 3));
  v219 = v217 & 7;
  v220 = bswap32(*v218) << v219;
  v221 = __clz(v220 | 1);
  if (!v220)
    ++v221;
  v222 = v220 << (v221 + 1) >> -(char)v221;
  if (!v221)
    v222 = 0;
  v223 = v222 + ~(-1 << v221);
  *((_DWORD *)a2 + 336) = v223;
  if (v223 > v216)
    return 4294958327;
  if (v218 > v4)
    v218 = v4;
  v224 = v219 + 2 * v221 + 1;
  v225 = (unsigned int *)((char *)v218 + (v224 >> 3));
  v226 = v224 & 7;
  v227 = bswap32(*v225) << (v224 & 7);
  v228 = __clz(v227 | 1);
  v229 = v227 ? v228 : v228 + 1;
  v230 = v227 << (v229 + 1) >> -(char)v229;
  v231 = v229 ? v230 : 0;
  v232 = v231 + ~(-1 << v229);
  *((_DWORD *)a2 + 337) = v232;
  v233 = 17 * *((_DWORD *)a2 + 333);
  if (v232 > v233)
    return 4294958327;
  if (v225 > v4)
    v225 = v4;
  v234 = v226 + 2 * v229 + 1;
  v235 = (unsigned int *)((char *)v225 + (v234 >> 3));
  if (v235 <= v4)
    v236 = v235;
  else
    v236 = v4;
  v237 = v234 & 7;
  v238 = bswap32(*v235) << v237;
  v239 = __clz(v238 | 1);
  if (!v238)
    ++v239;
  v240 = v238 << (v239 + 1) >> -(char)v239;
  if (!v239)
    v240 = 0;
  v241 = v240 + ~(-1 << v239);
  *((_DWORD *)a2 + 338) = v241;
  v242 = v237 + 2 * v239 + 1;
  v243 = (unsigned int *)((char *)v236 + (v242 >> 3));
  v203 = v243 <= v4 ? (unsigned int *)((char *)v236 + (v242 >> 3)) : v4;
  if (v241 > v233)
    return 4294958327;
  v202 = v242 & 7;
  v204 = bswap32(*v243) << (v242 & 7);
LABEL_211:
  a2[1356] = v204 < 0;
  v205 = v202 + 1;
  v206 = v205 & 7;
  v207 = (unsigned int *)((char *)v203 + (v205 >> 3));
  if (v207 <= v4)
    v208 = v207;
  else
    v208 = v4;
  if ((v204 & 0x80000000) == 0)
    goto LABEL_215;
  v244 = bswap32(*v207);
  *(_QWORD *)(a1 + 16) = v208;
  *(_DWORD *)(a1 + 32) = v244 << v206;
  *(_BYTE *)(a1 + 36) = v206;
  if (*(_DWORD *)(a1 + 8) < (int)v208 - *(_DWORD *)a1)
    return 4294958327;
  result = sub_2160D8FF4(a1, v144, (uint64_t)(a2 + 1360));
  if (!(_DWORD)result)
  {
    v208 = *(unsigned int **)(a1 + 16);
    v4 = *(unsigned int **)(a1 + 24);
    v206 = *(unsigned __int8 *)(a1 + 36);
LABEL_215:
    LOBYTE(v101) = 0;
    v100 = (unsigned int *)((char *)v208 + ((v206 + 1) >> 3));
    if (v100 > v4)
      v100 = v4;
    if ((((_BYTE)v206 + 1) & 7) != 0)
      v100 = (unsigned int *)((char *)v100 + 1);
    if (v100 > v4)
      v100 = v4;
    v102 = bswap32(*v100);
    v209 = *((_DWORD *)a2 + 332) + 1;
    v210 = *((_DWORD *)a2 + 333);
    *((_DWORD *)a2 + 467) = 1 << (*((_DWORD *)a2 + 68) + 4);
    *((_DWORD *)a2 + 469) = v209 + v209 * v210 - 1;
    goto LABEL_312;
  }
  return result;
}

double sub_2160D8D78(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  double result;

  v3 = 0;
  v4 = *(_DWORD *)(a1 + 4);
  v5 = -1;
  do
  {
    if (v4 == byte_2160F7380[v3])
      v5 = v3;
    ++v3;
  }
  while (v3 != 20);
  if (v5 == -1)
  {
    v5 = 0;
  }
  else if (v4 == 11 && *(_BYTE *)(a1 + 11))
  {
    v5 = 1;
  }
  LODWORD(a3) = dword_2160F7330[v5];
  v6 = (int)fmin((double)*(unint64_t *)&a3* 384.0/ ((double)(((*(_DWORD *)(a1 + 1328) << 8)+ 256+ ((*(_DWORD *)(a1 + 1328) << 8) + 256) * *(_DWORD *)(a1 + 1332))* (2 - *(unsigned __int8 *)(a1 + 1336)))* 1.5), 16.0);
  *(_DWORD *)(a2 + 20) = 5;
  *(_QWORD *)(a2 + 28) = 0x200000002;
  *(_DWORD *)(a2 + 36) = 2;
  *(_BYTE *)(a2 + 70) = 1;
  HIDWORD(v7) = 1;
  *(_OWORD *)(a2 + 72) = xmmword_2160F97F0;
  if (*(_DWORD *)a1 == 100 && *(_BYTE *)(a1 + 11) == 1)
    v8 = 0;
  else
    v8 = v6;
  *(_DWORD *)(a2 + 88) = v8;
  *(_DWORD *)(a2 + 92) = v6;
  LODWORD(v7) = dword_2160F7290[v5];
  *(double *)&v9 = (double)v7 * 1000.0 * 0.015625 + -1.0 + 0.5;
  *(_DWORD *)(a2 + 108) = (int)*(double *)&v9;
  LODWORD(v9) = dword_2160F72E0[v5];
  *(_DWORD *)(a2 + 236) = (int)((double)v9 * 200.0 * 0.0625 + -1.0 + 0.5);
  *(_QWORD *)&result = 0x1700000017;
  *(_OWORD *)(a2 + 492) = xmmword_2160F47A0;
  return result;
}

uint64_t sub_2160D8F04(uint64_t a1, uint64_t a2, int a3, BOOL *a4)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 36);
  if (a3)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 24);
    LODWORD(v9) = 8;
    v10 = 8;
    do
    {
      if (!(_DWORD)v9)
        goto LABEL_14;
      v11 = __clz(v5 | 1);
      if (v5)
        v12 = v11;
      else
        v12 = v11 + 1;
      v13 = v5 << (v12 + 1) >> -(char)v12;
      if (!v12)
        v13 = 0;
      v14 = ((v13 + (1 << v12)) >> 1) - ((v13 + (1 << v12)) >> 1) * 2 * ((v13 + (1 << v12)) & 1);
      if (v14 != (char)v14)
        return 4294958327;
      v15 = v6 + 2 * v12 + 1;
      v16 = (unsigned int *)(v4 + (v15 >> 3));
      if ((unint64_t)v16 <= v8)
        v4 += v15 >> 3;
      else
        v4 = v8;
      v6 = v15 & 7;
      v5 = bswap32(*v16) << v6;
      v9 = (v14 + v10);
      *a4 = (v9 | v7) == 0;
      v17 = v9;
      if (!(_DWORD)v9)
      {
LABEL_14:
        LODWORD(v9) = 0;
        v17 = v10;
      }
      *(_BYTE *)(a2 + v7++) = v17;
      v10 = v17;
    }
    while (a3 != v7);
  }
  v18 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 36) = v6;
  return v18;
}

uint64_t sub_2160D8FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unsigned int *v19;
  signed int v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t v28;
  int v29;
  unsigned int *v30;
  signed int v31;
  unint64_t v32;
  int v33;
  unsigned int *v34;
  signed int v35;
  unsigned int *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  unsigned int *v49;
  signed int v50;
  unint64_t v51;
  int v52;
  unsigned int *v53;
  signed int v54;
  unint64_t v55;
  int v56;
  unsigned int *v57;
  signed int v58;
  unsigned int *v59;
  int v60;
  unsigned int *v61;
  signed int v62;
  unsigned int *v63;
  unint64_t v64;
  unsigned int *v65;
  int v66;
  unsigned int *v67;
  signed int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int *v71;
  signed int v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  char *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  int v115;
  unint64_t v116;
  int v117;
  unsigned int *v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unint64_t v134;
  int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  char v141;
  unsigned int v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unint64_t v162;
  int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  int v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  int v181;
  unsigned int *v182;
  int v183;
  unsigned int *v184;
  unsigned int v185;
  unint64_t v186;
  int v187;
  unsigned int *v188;
  unsigned int v189;
  unint64_t v190;
  int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unint64_t v201;
  unsigned int *v202;
  unsigned int *v203;
  int v204;
  unint64_t v205;
  int v206;
  unsigned int *v207;
  unsigned int v208;
  unint64_t v209;
  int v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  unint64_t v216;
  int v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int *v220;
  unint64_t v221;
  int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  int v231;
  unint64_t v232;
  unsigned int v233;
  unsigned int v234;
  unint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  int v245;
  unsigned int *v246;
  unsigned int v247;
  unint64_t v248;
  int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  int v258;
  unint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int *v265;
  unsigned int v266;
  int v267;
  unint64_t v268;
  unsigned int *v269;
  int v270;
  unsigned int *v271;
  unsigned int v272;
  unint64_t v273;
  int v274;
  unsigned int *v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int *v281;
  unint64_t v282;
  int v283;
  unsigned int *v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unint64_t v290;
  unsigned int *v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int *v297;
  unint64_t v298;
  unsigned int *v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unint64_t v306;
  unsigned int *v307;
  unsigned int *v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unint64_t v314;
  unsigned int *v315;
  unsigned int *v316;
  int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unint64_t v322;
  int v323;
  unsigned int *v324;
  unsigned int v325;
  unint64_t v327;
  int v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  char v333;
  unsigned int v334;
  unint64_t v335;
  unsigned int v336;
  unsigned int v337;
  unint64_t v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int *v341;
  unsigned int v342;
  int v343;
  unint64_t v344;
  unsigned int v345;
  unsigned int v346;
  unint64_t v347;
  unsigned int *v348;
  unint64_t v349;
  int v350;
  unsigned int *v351;
  unsigned int v352;
  unsigned int *v353;
  unsigned int v354;
  unsigned int v355;
  char v356;
  unsigned int v357;
  unint64_t v358;
  int v359;
  unint64_t v360;
  unsigned int v361;
  unint64_t v362;
  unsigned int *v363;
  unsigned int v364;
  unsigned int *v365;
  unsigned int v366;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 36);
  *(_BYTE *)a3 = v5 < 0;
  v7 = v6 + 1;
  v8 = (v6 + 1) & 7;
  v9 = (unsigned int *)(v4 + (v7 >> 3));
  v10 = bswap32(*v9) << v8;
  if (v9 > v3)
    v9 = v3;
  if (v5 < 0)
  {
    v11 = HIBYTE(v10);
    *(_DWORD *)(a3 + 4) = HIBYTE(v10);
    v12 = *(unsigned int *)((char *)v9 + 1);
    v9 = (unsigned int *)((char *)v9 + 1);
    v10 = bswap32(v12) << v8;
    if (v9 > v3)
      v9 = v3;
    if (v11 == 255)
    {
      *(_DWORD *)(a3 + 8) = HIWORD(v10);
      v14 = *(unsigned int *)((char *)v9 + 2);
      v13 = (unsigned int *)((char *)v9 + 2);
      v15 = bswap32(v14) << v8;
      if (v13 > v3)
        v13 = v3;
      *(_DWORD *)(a3 + 12) = HIWORD(v15);
      v16 = *(unsigned int *)((char *)v13 + 2);
      v9 = (unsigned int *)((char *)v13 + 2);
      v10 = bswap32(v16) << v8;
      if (v9 > v3)
        v9 = v3;
    }
  }
  *(_BYTE *)(a3 + 16) = (v10 & 0x80000000) != 0;
  v17 = (v8 + 1);
  v18 = ((_BYTE)v8 + 1) & 7;
  v19 = (unsigned int *)((char *)v9 + (v17 >> 3));
  v20 = bswap32(*v19) << (v17 & 7);
  if (v19 > v3)
    v19 = v3;
  if ((v10 & 0x80000000) != 0)
  {
    *(_BYTE *)(a3 + 17) = v20 < 0;
    v21 = (v18 + 1);
    v18 = ((_BYTE)v18 + 1) & 7;
    v22 = (unsigned int *)((char *)v19 + (v21 >> 3));
    v20 = bswap32(*v22) << v18;
    if (v22 <= v3)
      v19 = v22;
    else
      v19 = v3;
  }
  *(_BYTE *)(a3 + 18) = v20 < 0;
  v23 = (v18 + 1);
  v24 = ((_BYTE)v18 + 1) & 7;
  v25 = (unsigned int *)((char *)v19 + (v23 >> 3));
  v26 = bswap32(*v25) << v24;
  if (v25 <= v3)
    v27 = v25;
  else
    v27 = v3;
  if (v20 < 0)
  {
    *(_DWORD *)(a3 + 20) = v26 >> 29;
    v28 = (v24 + 3);
    v29 = v28 & 7;
    v30 = (unsigned int *)((char *)v27 + (v28 >> 3));
    v31 = bswap32(*v30) << v29;
    if (v30 > v3)
      v30 = v3;
    *(_BYTE *)(a3 + 24) = v31 < 0;
    v32 = (v29 + 1);
    v33 = v32 & 7;
    v34 = (unsigned int *)((char *)v30 + (v32 >> 3));
    v35 = bswap32(*v34) << (v32 & 7);
    if (v34 <= v3)
      v36 = v34;
    else
      v36 = v3;
    *(_BYTE *)(a3 + 25) = v35 < 0;
    v37 = (v33 + 1);
    v24 = v37 & 7;
    v27 = (unsigned int *)((char *)v36 + (v37 >> 3));
    v26 = bswap32(*v27) << (v37 & 7);
    if (v27 > v3)
      v27 = v3;
    if (v35 < 0)
    {
      *(_DWORD *)(a3 + 28) = HIBYTE(v26);
      v39 = *(unsigned int *)((char *)v27 + 1);
      v38 = (unsigned int *)((char *)v27 + 1);
      v40 = bswap32(v39) << v24;
      v41 = (char *)(v38 <= v3 ? v38 : v3);
      *(_DWORD *)(a3 + 32) = HIBYTE(v40);
      v43 = *(_DWORD *)(v41 + 1);
      v42 = (unsigned int *)(v41 + 1);
      v44 = bswap32(v43) << v24;
      v45 = v42 <= v3 ? v42 : v3;
      *(_DWORD *)(a3 + 36) = HIBYTE(v44);
      v46 = *(unsigned int *)((char *)v45 + 1);
      v27 = (unsigned int *)((char *)v45 + 1);
      v26 = bswap32(v46) << v24;
      if (v27 > v3)
        v27 = v3;
    }
  }
  *(_BYTE *)(a3 + 40) = (v26 & 0x80000000) != 0;
  v47 = (v24 + 1);
  v48 = v47 & 7;
  v49 = (unsigned int *)((char *)v27 + (v47 >> 3));
  v50 = bswap32(*v49) << v48;
  if (v49 > v3)
    v49 = v3;
  if ((v26 & 0x80000000) != 0)
  {
    v75 = __clz(v50 | 1);
    if (v50)
      v76 = v75;
    else
      v76 = v75 + 1;
    if (v76)
      v77 = (v50 << (v76 + 1)) >> -(char)v76;
    else
      v77 = 0;
    v78 = v77 + ~(-1 << v76);
    *(_DWORD *)(a3 + 44) = v78;
    if (v78 > 5)
      return 4294958327;
    v79 = v48 + 2 * v76 + 1;
    v80 = (unsigned int *)((char *)v49 + (v79 >> 3));
    if (v80 <= v3)
      v81 = v80;
    else
      v81 = v3;
    v82 = v79 & 7;
    v83 = bswap32(*v80) << v82;
    v84 = __clz(v83 | 1);
    if (!v83)
      ++v84;
    v85 = v83 << (v84 + 1) >> -(char)v84;
    if (!v84)
      v85 = 0;
    v86 = v85 + ~(-1 << v84);
    *(_DWORD *)(a3 + 48) = v86;
    v87 = v82 + 2 * v84 + 1;
    v88 = (unsigned int *)((char *)v81 + (v87 >> 3));
    v49 = v88 <= v3 ? (unsigned int *)((char *)v81 + (v87 >> 3)) : v3;
    if (v86 > 5)
      return 4294958327;
    v48 = v87 & 7;
    v50 = bswap32(*v88) << v48;
  }
  *(_BYTE *)(a3 + 52) = v50 < 0;
  v51 = (v48 + 1);
  v52 = ((_BYTE)v48 + 1) & 7;
  v53 = (unsigned int *)((char *)v49 + (v51 >> 3));
  v54 = bswap32(*v53) << v52;
  if (v53 > v3)
    v53 = v3;
  if (v50 < 0)
  {
    v90 = *(unsigned int *)((char *)v53 + 2);
    v89 = (unsigned int *)((char *)v53 + 2);
    v91 = bswap32(v90) << v52;
    if (v89 > v3)
      v89 = v3;
    v94 = *(unsigned int *)((char *)v89 + 2);
    v92 = (char *)v89 + 2;
    v93 = v94;
    v95 = v54 & 0xFFFF0000 | HIWORD(v91);
    *(_DWORD *)(a3 + 56) = v95;
    if (!v95)
      return 4294958327;
    if (v92 <= (char *)v3)
      v96 = (unsigned int *)v92;
    else
      v96 = v3;
    v97 = bswap32(v93) << v52;
    v99 = *(unsigned int *)((char *)v96 + 2);
    v98 = (unsigned int *)((char *)v96 + 2);
    v100 = bswap32(v99) << v52;
    if (v98 > v3)
      v98 = v3;
    v103 = *(unsigned int *)((char *)v98 + 2);
    v101 = (unsigned int *)((char *)v98 + 2);
    v102 = v103;
    v104 = v97 & 0xFFFF0000 | HIWORD(v100);
    *(_DWORD *)(a3 + 60) = v104;
    if (!v104)
      return 4294958327;
    if (v101 > v3)
      v101 = v3;
    *(_BYTE *)(a3 + 64) = ((bswap32(v102) << v52) & 0x80000000) != 0;
    v105 = (v52 + 1);
    v52 = ((_BYTE)v52 + 1) & 7;
    v53 = (unsigned int *)((char *)v101 + (v105 >> 3));
    v54 = bswap32(*v53) << v52;
    if (v53 > v3)
      v53 = v3;
  }
  *(_BYTE *)(a3 + 65) = v54 < 0;
  v55 = (v52 + 1);
  v56 = v55 & 7;
  v57 = (unsigned int *)((char *)v53 + (v55 >> 3));
  v58 = bswap32(*v57) << (v55 & 7);
  if (v57 <= v3)
    v59 = v57;
  else
    v59 = v3;
  if (v54 < 0)
  {
    v106 = __clz(v58 | 1);
    if (v58)
      v107 = v106;
    else
      v107 = v106 + 1;
    v108 = (v58 << (v107 + 1)) >> -(char)v107;
    if (v107)
      v109 = v108;
    else
      v109 = 0;
    v110 = v109 + ~(-1 << v107);
    *(_DWORD *)(a3 + 96) = v110;
    if (v110 > 0x1F)
      return 4294958327;
    v111 = 0;
    v112 = v56 + 2 * v107 + 1;
    v113 = (unsigned int *)((char *)v59 + (v112 >> 3));
    if (v113 <= v3)
      v114 = (unsigned int *)((char *)v59 + (v112 >> 3));
    else
      v114 = v3;
    v115 = v112 & 7;
    *(_DWORD *)(a3 + 100) = bswap32(*v113) << v115 >> 28;
    v116 = (v115 + 4);
    v117 = v116 & 7;
    v118 = (unsigned int *)((char *)v114 + (v116 >> 3));
    v119 = bswap32(*v118) << v117;
    if (v118 > v3)
      v118 = v3;
    *(_DWORD *)(a3 + 104) = v119 >> 28;
    v120 = (v117 + 4);
    v121 = v120 & 7;
    v122 = (unsigned int *)((char *)v118 + (v120 >> 3));
    v123 = bswap32(*v122) << (v120 & 7);
    if (v122 <= v3)
      v124 = v122;
    else
      v124 = v3;
    do
    {
      v125 = __clz(v123 | 1);
      if (v123)
        v126 = v125;
      else
        v126 = v125 + 1;
      v127 = a3 + 4 * v111;
      if (v126 > 0xC)
      {
        v134 = (v121 + 1);
        v135 = v134 & 7;
        v136 = (unsigned int *)((char *)v124 + (v134 >> 3));
        v137 = bswap32(*v136) << v135;
        if (v136 <= v3)
          v138 = v136;
        else
          v138 = v3;
        v139 = 0;
        if ((v123 & 0x80000000) != 0)
          goto LABEL_129;
        do
        {
          v140 = v139;
          v141 = v135;
          v142 = v137;
          ++v139;
          v143 = (v135 + 1);
          v135 = ((_BYTE)v135 + 1) & 7;
          v138 = (unsigned int *)((char *)v138 + (v143 >> 3));
          v137 = bswap32(*v138) << (v143 & 7);
          if (v138 > v3)
            v138 = v3;
        }
        while ((v142 & 0x80000000) == 0 && v140 < 0x1F);
        if (v140 > 0x1E)
        {
          *(_DWORD *)(v127 + 108) = -2;
          return 4294958327;
        }
        if (v139 - 1 <= 0x17)
        {
LABEL_129:
          v144 = v137 >> -(char)v139;
          v145 = v135 + v139;
          v130 = ((_BYTE)v135 + (_BYTE)v139) & 7;
          v133 = (unsigned int *)((char *)v138 + (v145 >> 3));
          v132 = bswap32(*v133) << (v145 & 7);
          if (v133 > v3)
            v133 = v3;
        }
        else
        {
          v146 = v137 >> (48 - v139);
          v147 = ((v141 + 1) & 7) + v139;
          v148 = v147 - 16;
          v130 = v147 & 7;
          v149 = (unsigned int *)((char *)v138 + (v148 >> 3));
          v150 = bswap32(*v149) << v130;
          if (v149 > v3)
            v149 = v3;
          v151 = *(unsigned int *)((char *)v149 + 2);
          v133 = (unsigned int *)((char *)v149 + 2);
          v132 = bswap32(v151) << v130;
          if (v133 > v3)
            v133 = v3;
          v144 = __PAIR64__(v146, v150) >> 16;
        }
        *(_DWORD *)(v127 + 108) = v144 + ~(-1 << v139);
      }
      else
      {
        v128 = v123 << (v126 + 1) >> -(char)v126;
        if (!v126)
          v128 = 0;
        *(_DWORD *)(v127 + 108) = v128 + ~(-1 << v126);
        v129 = v121 + 2 * v126 + 1;
        v130 = v129 & 7;
        v131 = (unsigned int *)((char *)v124 + (v129 >> 3));
        v132 = bswap32(*v131) << v130;
        if (v131 <= v3)
          v133 = v131;
        else
          v133 = v3;
      }
      v152 = __clz(v132 | 1);
      if (v132)
        v153 = v152;
      else
        v153 = v152 + 1;
      if (v153 > 0xC)
      {
        v162 = (v130 + 1);
        v163 = ((_BYTE)v130 + 1) & 7;
        v164 = (unsigned int *)((char *)v133 + (v162 >> 3));
        v165 = bswap32(*v164) << v163;
        if (v164 <= v3)
          v166 = v164;
        else
          v166 = v3;
        v167 = 0;
        if ((v132 & 0x80000000) != 0)
          goto LABEL_157;
        do
        {
          v168 = v167;
          v169 = v163;
          v170 = v165;
          ++v167;
          v171 = (v163 + 1);
          v163 = ((_BYTE)v163 + 1) & 7;
          v166 = (unsigned int *)((char *)v166 + (v171 >> 3));
          v165 = bswap32(*v166) << (v171 & 7);
          if (v166 > v3)
            v166 = v3;
        }
        while ((v170 & 0x80000000) == 0 && v168 < 0x1F);
        if (v168 > 0x1E)
        {
          *(_DWORD *)(v127 + 236) = -2;
          return 4294958327;
        }
        if (v167 - 1 <= 0x17)
        {
LABEL_157:
          v172 = v165 >> -(char)v167;
          v173 = v163 + v167;
          v158 = ((_BYTE)v163 + (_BYTE)v167) & 7;
          v161 = (unsigned int *)((char *)v166 + (v173 >> 3));
          v160 = bswap32(*v161) << v158;
          if (v161 > v3)
            v161 = v3;
        }
        else
        {
          v174 = v165 >> (48 - v167);
          v175 = ((v169 + 1) & 7) + v167;
          v176 = v175 - 16;
          v158 = v175 & 7;
          v177 = (unsigned int *)((char *)v166 + (v176 >> 3));
          v178 = bswap32(*v177) << v158;
          if (v177 <= v3)
            v179 = v177;
          else
            v179 = v3;
          v180 = *(unsigned int *)((char *)v179 + 2);
          v161 = (unsigned int *)((char *)v179 + 2);
          v160 = bswap32(v180) << v158;
          if (v161 > v3)
            v161 = v3;
          v172 = __PAIR64__(v174, v178) >> 16;
        }
        v181 = v172 + ~(-1 << v167);
        v156 = v111;
        *(_DWORD *)(v127 + 236) = v181;
      }
      else
      {
        v154 = v132 << (v153 + 1) >> -(char)v153;
        if (!v153)
          v154 = 0;
        v155 = v154 + ~(-1 << v153);
        v156 = v111;
        *(_DWORD *)(v127 + 236) = v155;
        v157 = v130 + 2 * v153 + 1;
        v158 = ((_BYTE)v130 + 2 * (_BYTE)v153 + 1) & 7;
        v159 = (unsigned int *)((char *)v133 + (v157 >> 3));
        v160 = bswap32(*v159) << v158;
        if (v159 <= v3)
          v161 = v159;
        else
          v161 = v3;
      }
      *(_DWORD *)(a3 + 4 * v156 + 364) = v160 >> 31;
      v121 = ((_BYTE)v158 + 1) & 7;
      v182 = (unsigned int *)((char *)v161 + ((unint64_t)(v158 + 1) >> 3));
      v123 = bswap32(*v182) << v121;
      if (v182 <= v3)
        v124 = (unsigned int *)((char *)v161 + ((unint64_t)(v158 + 1) >> 3));
      else
        v124 = v3;
      ++v111;
    }
    while (v111 <= v110);
    *(_DWORD *)(a3 + 492) = v123 >> 27;
    v183 = ((_BYTE)v121 + 5) & 7;
    v184 = (unsigned int *)((char *)v124 + ((unint64_t)(v121 + 5) >> 3));
    v185 = bswap32(*v184) << v183;
    if (v184 > v3)
      v184 = v3;
    *(_DWORD *)(a3 + 496) = v185 >> 27;
    v186 = (v183 + 5);
    v187 = v186 & 7;
    v188 = (unsigned int *)((char *)v184 + (v186 >> 3));
    v189 = bswap32(*v188) << (v186 & 7);
    if (v188 > v3)
      v188 = v3;
    *(_DWORD *)(a3 + 500) = v189 >> 27;
    v190 = (v187 + 5);
    v191 = ((_BYTE)v187 + 5) & 7;
    v192 = (unsigned int *)((char *)v188 + (v190 >> 3));
    v193 = bswap32(*v192) << (v190 & 7);
    if (v192 > v3)
      v192 = v3;
    *(_DWORD *)(a3 + 504) = v193 >> 27;
    v56 = ((_BYTE)v191 + 5) & 7;
    v194 = (unsigned int *)((char *)v192 + ((unint64_t)(v191 + 5) >> 3));
    v58 = bswap32(*v194) << v56;
    if (v194 <= v3)
      v59 = v194;
    else
      v59 = v3;
  }
  *(_BYTE *)(a3 + 66) = v58 < 0;
  v60 = ((_BYTE)v56 + 1) & 7;
  v61 = (unsigned int *)((char *)v59 + ((unint64_t)(v56 + 1) >> 3));
  v62 = bswap32(*v61) << ((v56 + 1) & 7);
  if (v61 <= v3)
    v63 = (unsigned int *)((char *)v59 + ((unint64_t)(v56 + 1) >> 3));
  else
    v63 = v3;
  if ((v58 & 0x80000000) == 0)
  {
    if ((v54 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_52;
  }
  v195 = __clz(v62 | 1);
  if (v62)
    v196 = v195;
  else
    v196 = v195 + 1;
  v197 = (v62 << (v196 + 1)) >> -(char)v196;
  if (v196)
    v198 = v197;
  else
    v198 = 0;
  v199 = v198 + ~(-1 << v196);
  *(_DWORD *)(a3 + 96) = v199;
  if (v199 > 0x1F)
    return 4294958327;
  v200 = 0;
  v201 = v60 + 2 * v196 + 1;
  v202 = (unsigned int *)((char *)v63 + (v201 >> 3));
  if (v202 <= v3)
    v203 = v202;
  else
    v203 = v3;
  v204 = v201 & 7;
  *(_DWORD *)(a3 + 100) = bswap32(*v202) << v204 >> 28;
  v205 = (v204 + 4);
  v206 = v205 & 7;
  v207 = (unsigned int *)((char *)v203 + (v205 >> 3));
  v208 = bswap32(*v207) << v206;
  if (v207 > v3)
    v207 = v3;
  *(_DWORD *)(a3 + 104) = v208 >> 28;
  v209 = (v206 + 4);
  v210 = ((_BYTE)v206 + 4) & 7;
  v211 = (unsigned int *)((char *)v207 + (v209 >> 3));
  v212 = bswap32(*v211) << (v209 & 7);
  if (v211 <= v3)
    v213 = v211;
  else
    v213 = v3;
  do
  {
    v214 = __clz(v212 | 1);
    if (!v212)
      ++v214;
    if (v214 > 0xC)
    {
      v221 = (v210 + 1);
      v222 = v221 & 7;
      v223 = (unsigned int *)((char *)v213 + (v221 >> 3));
      v224 = bswap32(*v223) << v222;
      if (v223 <= v3)
        v225 = v223;
      else
        v225 = v3;
      v226 = 0;
      if ((v212 & 0x80000000) != 0)
        goto LABEL_213;
      do
      {
        v227 = v226;
        v228 = v222;
        v229 = v224;
        ++v226;
        v230 = (v222 + 1);
        v222 = ((_BYTE)v222 + 1) & 7;
        v225 = (unsigned int *)((char *)v225 + (v230 >> 3));
        v224 = bswap32(*v225) << (v230 & 7);
        if (v225 > v3)
          v225 = v3;
      }
      while ((v229 & 0x80000000) == 0 && v227 < 0x1F);
      if (v227 > 0x1E)
      {
        *(_DWORD *)(a3 + 4 * v200 + 108) = -2;
        return 4294958327;
      }
      if (v226 - 1 <= 0x17)
      {
LABEL_213:
        v231 = v224 >> -(char)v226;
        v232 = v222 + v226;
        v217 = ((_BYTE)v222 + (_BYTE)v226) & 7;
        v220 = (unsigned int *)((char *)v225 + (v232 >> 3));
        v219 = bswap32(*v220) << (v232 & 7);
        if (v220 > v3)
          v220 = v3;
      }
      else
      {
        v233 = v224 >> (48 - v226);
        v234 = ((v228 + 1) & 7) + v226;
        v235 = v234 - 16;
        v217 = v234 & 7;
        v236 = (unsigned int *)((char *)v225 + (v235 >> 3));
        v237 = bswap32(*v236) << v217;
        if (v236 > v3)
          v236 = v3;
        v238 = *(unsigned int *)((char *)v236 + 2);
        v220 = (unsigned int *)((char *)v236 + 2);
        v219 = bswap32(v238) << v217;
        if (v220 > v3)
          v220 = v3;
        v231 = __PAIR64__(v233, v237) >> 16;
      }
      *(_DWORD *)(a3 + 4 * v200 + 108) = v231 + ~(-1 << v226);
    }
    else
    {
      v215 = v212 << (v214 + 1) >> -(char)v214;
      if (!v214)
        v215 = 0;
      *(_DWORD *)(a3 + 4 * v200 + 108) = v215 + ~(-1 << v214);
      v216 = v210 + 2 * v214 + 1;
      v217 = v216 & 7;
      v218 = (unsigned int *)((char *)v213 + (v216 >> 3));
      v219 = bswap32(*v218) << v217;
      if (v218 <= v3)
        v220 = v218;
      else
        v220 = v3;
    }
    v239 = __clz(v219 | 1);
    if (v219)
      v240 = v239;
    else
      v240 = v239 + 1;
    if (v240 > 0xC)
    {
      v248 = (v217 + 1);
      v249 = ((_BYTE)v217 + 1) & 7;
      v250 = (unsigned int *)((char *)v220 + (v248 >> 3));
      v251 = bswap32(*v250) << v249;
      if (v250 <= v3)
        v252 = v250;
      else
        v252 = v3;
      v253 = 0;
      if ((v219 & 0x80000000) != 0)
        goto LABEL_241;
      do
      {
        v254 = v253;
        v255 = v249;
        v256 = v251;
        ++v253;
        v257 = (v249 + 1);
        v249 = ((_BYTE)v249 + 1) & 7;
        v252 = (unsigned int *)((char *)v252 + (v257 >> 3));
        v251 = bswap32(*v252) << (v257 & 7);
        if (v252 > v3)
          v252 = v3;
      }
      while ((v256 & 0x80000000) == 0 && v254 < 0x1F);
      if (v254 > 0x1E)
      {
        *(_DWORD *)(a3 + 4 * v200 + 236) = -2;
        return 4294958327;
      }
      if (v253 - 1 <= 0x17)
      {
LABEL_241:
        v258 = v251 >> -(char)v253;
        v259 = v249 + v253;
        v245 = ((_BYTE)v249 + (_BYTE)v253) & 7;
        v246 = (unsigned int *)((char *)v252 + (v259 >> 3));
        v247 = bswap32(*v246) << v245;
        if (v246 > v3)
          v246 = v3;
      }
      else
      {
        v260 = v251 >> (48 - v253);
        v261 = ((v255 + 1) & 7) + v253;
        v262 = v261 - 16;
        v245 = v261 & 7;
        v263 = (unsigned int *)((char *)v252 + (v262 >> 3));
        v264 = bswap32(*v263) << v245;
        if (v263 <= v3)
          v265 = v263;
        else
          v265 = v3;
        v266 = *(unsigned int *)((char *)v265 + 2);
        v246 = (unsigned int *)((char *)v265 + 2);
        v247 = bswap32(v266) << v245;
        if (v246 > v3)
          v246 = v3;
        v258 = __PAIR64__(v260, v264) >> 16;
      }
      v267 = v258 + ~(-1 << v253);
      v243 = v200;
      *(_DWORD *)(a3 + 4 * v200 + 236) = v267;
    }
    else
    {
      v241 = v219 << (v240 + 1) >> -(char)v240;
      if (!v240)
        v241 = 0;
      v242 = v241 + ~(-1 << v240);
      v243 = v200;
      *(_DWORD *)(a3 + 4 * v200 + 236) = v242;
      v244 = v217 + 2 * v240 + 1;
      v245 = ((_BYTE)v217 + 2 * (_BYTE)v240 + 1) & 7;
      v246 = (unsigned int *)((char *)v220 + (v244 >> 3));
      v247 = bswap32(*v246) << v245;
      if (v246 > v3)
        v246 = v3;
    }
    *(_DWORD *)(a3 + 4 * v243 + 364) = v247 >> 31;
    v268 = (v245 + 1);
    v210 = v268 & 7;
    v269 = (unsigned int *)((char *)v246 + (v268 >> 3));
    v212 = bswap32(*v269) << v210;
    if (v269 <= v3)
      v213 = v269;
    else
      v213 = v3;
    ++v200;
  }
  while (v200 <= v199);
  *(_DWORD *)(a3 + 492) = v212 >> 27;
  v270 = ((_BYTE)v210 + 5) & 7;
  v271 = (unsigned int *)((char *)v213 + ((unint64_t)(v210 + 5) >> 3));
  v272 = bswap32(*v271) << v270;
  if (v271 > v3)
    v271 = v3;
  *(_DWORD *)(a3 + 496) = v272 >> 27;
  v273 = (v270 + 5);
  v274 = v273 & 7;
  v275 = (unsigned int *)((char *)v271 + (v273 >> 3));
  v276 = bswap32(*v275) << (v273 & 7);
  if (v275 > v3)
    v275 = v3;
  *(_DWORD *)(a3 + 500) = v276 >> 27;
  v277 = (v274 + 5);
  v278 = ((_BYTE)v274 + 5) & 7;
  v279 = (unsigned int *)((char *)v275 + (v277 >> 3));
  v280 = bswap32(*v279) << (v277 & 7);
  if (v279 > v3)
    v279 = v3;
  *(_DWORD *)(a3 + 504) = v280 >> 27;
  v60 = ((_BYTE)v278 + 5) & 7;
  v281 = (unsigned int *)((char *)v279 + ((unint64_t)(v278 + 5) >> 3));
  v62 = bswap32(*v281) << v60;
  if (v281 <= v3)
    v63 = v281;
  else
    v63 = v3;
  if ((v58 | v54) < 0)
  {
LABEL_52:
    *(_BYTE *)(a3 + 67) = v62 < 0;
    v64 = (v60 + 1);
    v60 = ((_BYTE)v60 + 1) & 7;
    v65 = (unsigned int *)((char *)v63 + (v64 >> 3));
    v62 = bswap32(*v65) << v60;
    if (v65 <= v3)
      v63 = v65;
    else
      v63 = v3;
  }
LABEL_55:
  *(_BYTE *)(a3 + 68) = v62 < 0;
  v66 = ((_BYTE)v60 + 1) & 7;
  v67 = (unsigned int *)((char *)v63 + ((unint64_t)(v60 + 1) >> 3));
  v68 = bswap32(*v67) << v66;
  if (v67 > v3)
    v67 = v3;
  *(_BYTE *)(a3 + 69) = v68 < 0;
  v69 = (v66 + 1);
  v70 = v69 & 7;
  v71 = (unsigned int *)((char *)v67 + (v69 >> 3));
  v72 = bswap32(*v71) << (v69 & 7);
  if (v71 <= v3)
    v73 = v71;
  else
    v73 = v3;
  if ((v68 & 0x80000000) == 0)
    goto LABEL_61;
  *(_BYTE *)(a3 + 70) = v72 < 0;
  v282 = v70 + 1;
  v283 = ((_BYTE)v70 + 1) & 7;
  v284 = (unsigned int *)((char *)v73 + (v282 >> 3));
  v285 = bswap32(*v284) << (v282 & 7);
  v286 = __clz(v285 | 1);
  if (!v285)
    ++v286;
  v287 = v285 << (v286 + 1) >> -(char)v286;
  if (v286)
    v288 = v287;
  else
    v288 = 0;
  v289 = v288 + ~(-1 << v286);
  *(_DWORD *)(a3 + 72) = v289;
  if (v289 > 0x10)
    return 4294958327;
  if (v284 > v3)
    v284 = v3;
  v290 = v283 + 2 * v286 + 1;
  v291 = (unsigned int *)((char *)v284 + (v290 >> 3));
  v292 = v290 & 7;
  v293 = bswap32(*v291) << (v290 & 7);
  v294 = __clz(v293 | 1);
  if (!v293)
    ++v294;
  v295 = v293 << (v294 + 1) >> -(char)v294;
  if (!v294)
    v295 = 0;
  v296 = v295 + ~(-1 << v294);
  *(_DWORD *)(a3 + 76) = v296;
  if (v296 > 0x10)
    return 4294958327;
  if (v291 <= v3)
    v297 = v291;
  else
    v297 = v3;
  v298 = v292 + 2 * v294 + 1;
  v299 = (unsigned int *)((char *)v297 + (v298 >> 3));
  v300 = v298 & 7;
  v301 = bswap32(*v299) << v300;
  v302 = __clz(v301 | 1);
  if (!v301)
    ++v302;
  v303 = v301 << (v302 + 1) >> -(char)v302;
  v304 = v302 ? v303 : 0;
  v305 = v304 + ~(-1 << v302);
  *(_DWORD *)(a3 + 80) = v305;
  if (v305 > 0x10)
    return 4294958327;
  if (v299 > v3)
    v299 = v3;
  v306 = v300 + 2 * v302 + 1;
  v307 = (unsigned int *)((char *)v299 + (v306 >> 3));
  if (v307 <= v3)
    v308 = v307;
  else
    v308 = v3;
  v309 = v306 & 7;
  v310 = bswap32(*v307) << v309;
  v311 = __clz(v310 | 1);
  if (!v310)
    ++v311;
  v312 = v310 << (v311 + 1) >> -(char)v311;
  if (!v311)
    v312 = 0;
  v313 = v312 + ~(-1 << v311);
  *(_DWORD *)(a3 + 84) = v313;
  v314 = v309 + 2 * v311 + 1;
  v315 = (unsigned int *)((char *)v308 + (v314 >> 3));
  v316 = v315 <= v3 ? v315 : v3;
  if (v313 > 0x10)
    return 4294958327;
  v317 = v314 & 7;
  v318 = bswap32(*v315) << (v314 & 7);
  v319 = __clz(v318 | 1);
  if (!v318)
    ++v319;
  if (v319 > 0xC)
  {
    v327 = (v317 + 1);
    v328 = ((_BYTE)v317 + 1) & 7;
    v329 = (unsigned int *)((char *)v316 + (v327 >> 3));
    v330 = bswap32(*v329) << (v327 & 7);
    if (v329 > v3)
      v329 = v3;
    if ((v318 & 0x80000000) != 0)
    {
      v331 = 0;
    }
    else
    {
      v331 = 0;
      do
      {
        v332 = v331;
        v333 = v328;
        v334 = v330;
        ++v331;
        v335 = (v328 + 1);
        v328 = ((_BYTE)v328 + 1) & 7;
        v329 = (unsigned int *)((char *)v329 + (v335 >> 3));
        v330 = bswap32(*v329) << (v335 & 7);
        if (v329 > v3)
          v329 = v3;
      }
      while ((v334 & 0x80000000) == 0 && v332 < 0x1F);
      if (v332 > 0x1E)
      {
        *(_DWORD *)(a3 + 88) = -2;
        return 4294958327;
      }
      if (v331 - 1 > 0x17)
      {
        v336 = v330 >> (48 - v331);
        v337 = ((v333 + 1) & 7) + v331;
        v338 = v337 - 16;
        v323 = v337 & 7;
        v339 = (unsigned int *)((char *)v329 + (v338 >> 3));
        v340 = bswap32(*v339) << v323;
        if (v339 <= v3)
          v341 = v339;
        else
          v341 = v3;
        v342 = *(unsigned int *)((char *)v341 + 2);
        v324 = (unsigned int *)((char *)v341 + 2);
        v325 = bswap32(v342) << v323;
        if (v324 > v3)
          v324 = v3;
        v343 = __PAIR64__(v336, v340) >> 16;
LABEL_334:
        v321 = v343 + ~(-1 << v331);
        *(_DWORD *)(a3 + 88) = v321;
        goto LABEL_335;
      }
    }
    v343 = v330 >> -(char)v331;
    v344 = v328 + v331;
    v323 = ((_BYTE)v328 + (_BYTE)v331) & 7;
    v324 = (unsigned int *)((char *)v329 + (v344 >> 3));
    v325 = bswap32(*v324) << v323;
    if (v324 > v3)
      v324 = v3;
    goto LABEL_334;
  }
  v320 = v318 << (v319 + 1) >> -(char)v319;
  if (!v319)
    v320 = 0;
  v321 = v320 + ~(-1 << v319);
  *(_DWORD *)(a3 + 88) = v321;
  v322 = v317 + 2 * v319 + 1;
  v323 = v322 & 7;
  v324 = (unsigned int *)((char *)v316 + (v322 >> 3));
  v325 = bswap32(*v324) << v323;
  if (v324 > v3)
    v324 = v3;
LABEL_335:
  v345 = __clz(v325 | 1);
  if (!v325)
    ++v345;
  if (v345 > 0xC)
  {
    v349 = (v323 + 1);
    v350 = v349 & 7;
    v351 = (unsigned int *)((char *)v324 + (v349 >> 3));
    v352 = bswap32(*v351) << v350;
    if (v351 <= v3)
      v353 = v351;
    else
      v353 = v3;
    v354 = 0;
    if ((v325 & 0x80000000) != 0)
      goto LABEL_353;
    do
    {
      v355 = v354;
      v356 = v350;
      v357 = v352;
      ++v354;
      v358 = (v350 + 1);
      v350 = ((_BYTE)v350 + 1) & 7;
      v353 = (unsigned int *)((char *)v353 + (v358 >> 3));
      v352 = bswap32(*v353) << (v358 & 7);
      if (v353 > v3)
        v353 = v3;
    }
    while ((v357 & 0x80000000) == 0 && v355 < 0x1F);
    if (v355 <= 0x1E)
    {
      if (v354 - 1 > 0x17)
      {
        v361 = v352 >> (48 - v354);
        v70 = ((v356 + 1) & 7) + v354;
        v362 = v70 - 16;
        LOBYTE(v70) = v70 & 7;
        v363 = (unsigned int *)((char *)v353 + (v362 >> 3));
        v364 = bswap32(*v363) << v70;
        if (v363 <= v3)
          v365 = v363;
        else
          v365 = v3;
        v366 = *(unsigned int *)((char *)v365 + 2);
        v73 = (unsigned int *)((char *)v365 + 2);
        v72 = bswap32(v366) << v70;
        if (v73 > v3)
          v73 = v3;
        v359 = __PAIR64__(v361, v364) >> 16;
        goto LABEL_364;
      }
LABEL_353:
      v359 = v352 >> -(char)v354;
      v360 = v350 + v354;
      LOBYTE(v70) = v360 & 7;
      v73 = (unsigned int *)((char *)v353 + (v360 >> 3));
      v72 = bswap32(*v73) << v70;
      if (v73 > v3)
        v73 = v3;
LABEL_364:
      v346 = v359 + ~(-1 << v354);
      *(_DWORD *)(a3 + 92) = v346;
      goto LABEL_365;
    }
    *(_DWORD *)(a3 + 92) = -2;
    return 4294958327;
  }
  v70 = v325 << (v345 + 1) >> -(char)v345;
  if (!v345)
    v70 = 0;
  v346 = v70 + ~(-1 << v345);
  *(_DWORD *)(a3 + 92) = v346;
  v347 = v323 + 2 * v345 + 1;
  LOBYTE(v70) = v347 & 7;
  v348 = (unsigned int *)((char *)v324 + (v347 >> 3));
  v72 = bswap32(*v348) << v70;
  if (v348 <= v3)
    v73 = v348;
  else
    v73 = v3;
LABEL_365:
  if (v346 > 0x10 || v321 > v346)
    return 4294958327;
LABEL_61:
  v74 = 0;
  *(_QWORD *)(a1 + 16) = v73;
  *(_DWORD *)(a1 + 32) = v72;
  *(_BYTE *)(a1 + 36) = v70;
  return v74;
}

uint64_t sub_2160DA298()
{
  return 4294954950;
}

uint64_t sub_2160DA2A0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  signed int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  int v32;
  unsigned int *v33;
  signed int v34;
  unint64_t v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  signed int v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int *v71;
  int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  int v97;
  unsigned int *v98;
  signed int v99;
  unint64_t v100;
  int v101;
  unsigned int *v102;
  signed int v103;
  unint64_t v104;
  char v105;
  unsigned int *v106;
  unsigned int v107;
  int v108;
  _BOOL4 v109;
  unsigned int *v110;
  unsigned int *v111;
  signed int v112;
  unint64_t v113;
  unsigned int *v114;
  signed int v115;
  uint64_t v116;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int *v121;
  int v122;
  int v123;
  uint64_t v124;
  BOOL *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int *v137;
  int *v138;

  v138 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int **)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 36);
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v8 = v7 + 1;
  v9 = (v7 + 1) & 7;
  v10 = (unsigned int *)(v4 + (v8 >> 3));
  if (v10 <= v5)
    v11 = v10;
  else
    v11 = v5;
  v12 = ((_BYTE)v9 + 2) & 7;
  v13 = (unsigned int *)((char *)v11 + ((unint64_t)(v9 + 2) >> 3));
  if (v13 <= v5)
    v14 = v13;
  else
    v14 = v5;
  LODWORD(v15) = ((_BYTE)v12 + 5) & 7;
  v16 = (unsigned int *)((char *)v14 + ((unint64_t)(v12 + 5) >> 3));
  v17 = bswap32(*v16) << ((v12 + 5) & 7);
  if (v16 <= v5)
    v18 = v16;
  else
    v18 = v5;
  v19 = 4294958327;
  if ((v6 & 0x80000000) == 0 && bswap32(*v10) << v9 >> 30 && ((bswap32(*v13) << v12) & 0xF8000000) == 0x40000000)
  {
    v21 = __clz(v17 | 1);
    v22 = v17 ? v21 : v21 + 1;
    v23 = v22 ? (v17 << (v22 + 1)) >> -(char)v22 : 0;
    v24 = v23 + ~(-1 << v22);
    *(_DWORD *)a3 = v24;
    v25 = v15 + 2 * v22 + 1;
    LODWORD(v15) = v25 & 7;
    v26 = (unsigned int *)((char *)v18 + (v25 >> 3));
    v17 = bswap32(*v26) << v15;
    v18 = v26 <= v5 ? v26 : v5;
    if (v24 <= 0xFF)
    {
      v27 = __clz(v17 | 1);
      if (!v17)
        ++v27;
      v28 = (v17 << (v27 + 1)) >> -(char)v27;
      if (!v27)
        v28 = 0;
      v29 = v28 + ~(-1 << v27);
      *(_DWORD *)(a3 + 4) = v29;
      v30 = v15 + 2 * v27 + 1;
      LODWORD(v15) = v30 & 7;
      v31 = (unsigned int *)((char *)v18 + (v30 >> 3));
      v17 = bswap32(*v31) << v15;
      v18 = v31 <= v5 ? v31 : v5;
      if (v29 <= 0x1F)
      {
        v19 = sub_2160AC8EC(a2, v29, &v138);
        if (!(_DWORD)v19)
        {
          *(_BYTE *)(a3 + 8) = v17 < 0;
          v32 = ((_BYTE)v15 + 1) & 7;
          v33 = (unsigned int *)((char *)v18 + ((unint64_t)(v15 + 1) >> 3));
          v34 = bswap32(*v33) << v32;
          if (v33 > v5)
            v33 = v5;
          *(_BYTE *)(a3 + 9) = v34 < 0;
          v35 = (v32 + 1);
          v36 = v35 & 7;
          v37 = (unsigned int *)((char *)v33 + (v35 >> 3));
          v38 = bswap32(*v37) << v36;
          if (v37 > v5)
            v37 = v5;
          v39 = __clz(v38 | 1);
          if (!v38)
            ++v39;
          if (v39 <= 0xC)
          {
            v40 = v38 << (v39 + 1) >> -(char)v39;
            if (!v39)
              v40 = 0;
            v41 = v40 + ~(-1 << v39);
            *(_DWORD *)(a3 + 12) = v41;
            v42 = v36 + 2 * v39 + 1;
            LODWORD(v15) = v42 & 7;
            v43 = (unsigned int *)((char *)v37 + (v42 >> 3));
            v17 = bswap32(*v43) << (v42 & 7);
            if (v43 <= v5)
              v18 = v43;
            else
              v18 = v5;
LABEL_67:
            if (v41)
            {
              v19 = 4294966630;
              goto LABEL_137;
            }
            v61 = __clz(v17 | 1);
            if (v17)
              v62 = v61;
            else
              v62 = v61 + 1;
            if (v62)
              v63 = (v17 << (v62 + 1)) >> -(char)v62;
            else
              v63 = 0;
            v64 = v63 + ~(-1 << v62);
            *(_DWORD *)(a3 + 56) = v64;
            v65 = v15 + 2 * v62 + 1;
            LODWORD(v15) = v65 & 7;
            v66 = (unsigned int *)((char *)v18 + (v65 >> 3));
            v17 = bswap32(*v66) << v15;
            if (v66 <= v5)
              v18 = v66;
            else
              v18 = v5;
            if (v64 <= 0x1F)
            {
              v67 = __clz(v17 | 1);
              if (!v17)
                ++v67;
              v68 = (v17 << (v67 + 1)) >> -(char)v67;
              if (!v67)
                v68 = 0;
              v69 = v68 + ~(-1 << v67);
              *(_DWORD *)(a3 + 60) = v69;
              v70 = v15 + 2 * v67 + 1;
              LODWORD(v15) = v70 & 7;
              v71 = (unsigned int *)((char *)v18 + (v70 >> 3));
              v17 = bswap32(*v71) << v15;
              v18 = v71 <= v5 ? v71 : v5;
              if (v69 <= 0x1F)
              {
                *(_BYTE *)(a3 + 64) = v17 < 0;
                v72 = ((_BYTE)v15 + 1) & 7;
                v73 = (unsigned int *)((char *)v18 + ((unint64_t)(v15 + 1) >> 3));
                v74 = bswap32(*v73) << v72;
                if (v73 > v5)
                  v73 = v5;
                v75 = v74 >> 30;
                *(_DWORD *)(a3 + 68) = v75;
                v76 = (v72 + 2);
                LODWORD(v15) = v76 & 7;
                v77 = (unsigned int *)((char *)v73 + (v76 >> 3));
                v17 = bswap32(*v77) << (v76 & 7);
                v18 = v77 <= v5 ? v77 : v5;
                if (v75 != 3)
                {
                  v78 = __clz(v17 | 1);
                  v79 = v17 ? v78 : v78 + 1;
                  v80 = v79 ? (v17 << (v79 + 1)) >> -(char)v79 : 0;
                  v81 = 1 << v79;
                  v82 = v15 + 2 * v79 + 1;
                  LODWORD(v15) = v82 & 7;
                  v83 = (unsigned int *)((char *)v18 + (v82 >> 3));
                  v17 = bswap32(*v83) << v15;
                  v18 = v83 <= v5 ? v83 : v5;
                  v84 = ((v80 + v81) >> 1) - ((v80 + v81) >> 1) * 2 * (((_BYTE)v80 + (_BYTE)v81) & 1);
                  *(_DWORD *)(a3 + 72) = v84;
                  if (v84 + 26 <= 0x33)
                  {
                    v85 = __clz(v17 | 1);
                    if (!v17)
                      ++v85;
                    v86 = (v17 << (v85 + 1)) >> -(char)v85;
                    if (!v85)
                      v86 = 0;
                    v87 = 1 << v85;
                    v88 = v15 + 2 * v85 + 1;
                    LODWORD(v15) = v88 & 7;
                    v89 = (unsigned int *)((char *)v18 + (v88 >> 3));
                    v17 = bswap32(*v89) << v15;
                    v18 = v89 <= v5 ? v89 : v5;
                    v90 = ((v86 + v87) >> 1) - ((v86 + v87) >> 1) * 2 * ((v86 + v87) & 1);
                    *(_DWORD *)(a3 + 76) = v90;
                    if (v90 + 26 <= 0x33)
                    {
                      v91 = __clz(v17 | 1);
                      if (!v17)
                        ++v91;
                      v92 = (v17 << (v91 + 1)) >> -(char)v91;
                      if (!v91)
                        v92 = 0;
                      v93 = 1 << v91;
                      v94 = v15 + 2 * v91 + 1;
                      LODWORD(v15) = v94 & 7;
                      v95 = (unsigned int *)((char *)v18 + (v94 >> 3));
                      v17 = bswap32(*v95) << v15;
                      v18 = v95 <= v5 ? v95 : v5;
                      v96 = ((v92 + v93) >> 1) - ((v92 + v93) >> 1) * 2 * (((_BYTE)v92 + (_BYTE)v93) & 1);
                      *(_DWORD *)(a3 + 80) = v96;
                      if (v96 + 12 <= 0x18)
                      {
                        *(_BYTE *)(a3 + 84) = v17 < 0;
                        v97 = ((_BYTE)v15 + 1) & 7;
                        v98 = (unsigned int *)((char *)v18 + ((unint64_t)(v15 + 1) >> 3));
                        v99 = bswap32(*v98) << v97;
                        if (v98 > v5)
                          v98 = v5;
                        *(_BYTE *)(a3 + 85) = v99 < 0;
                        v100 = (v97 + 1);
                        v101 = v100 & 7;
                        v102 = (unsigned int *)((char *)v98 + (v100 >> 3));
                        v103 = bswap32(*v102) << (v100 & 7);
                        if (v102 > v5)
                          v102 = v5;
                        *(_BYTE *)(a3 + 86) = v103 < 0;
                        v104 = (v101 + 1);
                        v105 = (v101 + 1) & 7;
                        v106 = (unsigned int *)((char *)v102 + (v104 >> 3));
                        v107 = bswap32(*v106);
                        if (v106 > v5)
                          v106 = v5;
                        v108 = *v138;
                        *(_QWORD *)(a1 + 16) = v106;
                        *(_DWORD *)(a1 + 32) = v107 << v105;
                        *(_BYTE *)(a1 + 36) = v105;
                        v109 = sub_2160AC88C(a1);
                        v18 = *(unsigned int **)(a1 + 16);
                        v110 = *(unsigned int **)(a1 + 24);
                        v15 = *(unsigned __int8 *)(a1 + 36);
                        if (!v109
                          || v108 - 100 > 0x2C
                          || ((1 << (v108 - 100)) & 0x100000400401) == 0)
                        {
                          *(_BYTE *)(a3 + 97) = *(_DWORD *)(a3 + 80);
LABEL_162:
                          v19 = 0;
                          v136 = (unsigned int *)((char *)v18 + ((v15 + 1) >> 3));
                          if (v136 > v110)
                            v136 = v110;
                          if ((((_BYTE)v15 + 1) & 7) != 0)
                            v137 = (unsigned int *)((char *)v136 + 1);
                          else
                            v137 = v136;
                          if (v137 <= v110)
                            v18 = v137;
                          else
                            v18 = v110;
                          v17 = bswap32(*v18);
                          LOBYTE(v15) = 0;
                          goto LABEL_137;
                        }
                        *(_BYTE *)(a3 + 87) = *(int *)(a1 + 32) < 0;
                        v111 = (unsigned int *)((char *)v18 + ((unint64_t)(v15 + 1) >> 3));
                        v112 = bswap32(*v111) << ((v15 + 1) & 7);
                        if (v111 > v110)
                          v111 = v110;
                        *(_BYTE *)(a3 + 88) = v112 < 0;
                        v113 = (((_DWORD)v15 + 1) & 7u) + 1;
                        LODWORD(v15) = ((((_BYTE)v15 + 1) & 7) + 1) & 7;
                        v114 = (unsigned int *)((char *)v111 + (v113 >> 3));
                        v115 = bswap32(*v114) << v15;
                        if (v114 <= v110)
                          v18 = v114;
                        else
                          v18 = v110;
                        if (v112 < 0)
                        {
                          v118 = 0;
                          v119 = 106;
                          while (1)
                          {
                            *(_BYTE *)(a3 + v118 + 89) = v115 < 0;
                            v120 = (v15 + 1);
                            LODWORD(v15) = ((_BYTE)v15 + 1) & 7;
                            v121 = (unsigned int *)((char *)v18 + (v120 >> 3));
                            v17 = bswap32(*v121) << v15;
                            if (v121 <= v110)
                              v18 = v121;
                            else
                              v18 = v110;
                            if (v115 < 0)
                            {
                              *(_QWORD *)(a1 + 16) = v18;
                              *(_DWORD *)(a1 + 32) = v17;
                              *(_BYTE *)(a1 + 36) = v15;
                              v122 = (_DWORD)v18 - *(_DWORD *)a1;
                              v123 = *(_DWORD *)(a1 + 8);
                              if (v118 > 5)
                              {
                                if (v123 < v122)
                                  goto LABEL_136;
                                v128 = (v118 - 6);
                                v124 = a3 + (v128 << 6) + 202;
                                v125 = (BOOL *)(a3 + v128 + 104);
                                v126 = a1;
                                v127 = 64;
                              }
                              else
                              {
                                if (v123 < v122)
                                  goto LABEL_136;
                                v124 = a3 + v119;
                                v125 = (BOOL *)(a3 + v118 + 98);
                                v126 = a1;
                                v127 = 16;
                              }
                              v19 = sub_2160D8F04(v126, v124, v127, v125);
                              if ((_DWORD)v19)
                                goto LABEL_137;
                              v18 = *(unsigned int **)(a1 + 16);
                              v110 = *(unsigned int **)(a1 + 24);
                              v17 = *(_DWORD *)(a1 + 32);
                              LODWORD(v15) = *(unsigned __int8 *)(a1 + 36);
                            }
                            ++v118;
                            v119 += 16;
                            v115 = v17;
                            if (v118 >= 2 * (unint64_t)*(unsigned __int8 *)(a3 + 87) + 6)
                              goto LABEL_154;
                          }
                        }
                        v17 = v115;
LABEL_154:
                        v129 = __clz(v17 | 1);
                        if (!v17)
                          ++v129;
                        v130 = (v17 << (v129 + 1)) >> -(char)v129;
                        if (!v129)
                          v130 = 0;
                        v131 = 1 << v129;
                        v132 = v15 + 2 * v129 + 1;
                        LODWORD(v15) = v132 & 7;
                        v133 = (unsigned int *)((char *)v18 + (v132 >> 3));
                        v134 = *v133;
                        if (v133 <= v110)
                          v18 = v133;
                        else
                          v18 = v110;
                        v135 = ((v130 + v131) >> 1) - ((v130 + v131) >> 1) * 2 * ((v130 + v131) & 1);
                        *(_BYTE *)(a3 + 97) = v135;
                        if ((v135 << 24) + 218103807 < 0x19FFFFFF)
                          goto LABEL_162;
                        v17 = bswap32(v134) << v15;
                      }
                    }
                  }
                }
              }
            }
LABEL_136:
            v19 = 4294958327;
            goto LABEL_137;
          }
          v44 = (v36 + 1);
          LODWORD(v15) = v44 & 7;
          v45 = (unsigned int *)((char *)v37 + (v44 >> 3));
          v17 = bswap32(*v45) << (v44 & 7);
          if (v45 <= v5)
            v18 = v45;
          else
            v18 = v5;
          if ((v38 & 0x80000000) != 0)
          {
            v46 = 0;
          }
          else
          {
            v46 = 0;
            do
            {
              v47 = v46;
              v48 = v15;
              v49 = v17;
              ++v46;
              v50 = (v15 + 1);
              LODWORD(v15) = ((_BYTE)v15 + 1) & 7;
              v51 = (unsigned int *)((char *)v18 + (v50 >> 3));
              v17 = bswap32(*v51) << v15;
              if (v51 <= v5)
                v18 = v51;
              else
                v18 = v5;
            }
            while ((v49 & 0x80000000) == 0 && v47 < 0x1F);
            if (v47 > 0x1E)
            {
              *(_DWORD *)(a3 + 12) = -2;
              goto LABEL_136;
            }
            if (v46 - 1 > 0x17)
            {
              v52 = v17 >> (48 - v46);
              v53 = ((v48 + 1) & 7) + v46;
              LODWORD(v15) = v53 & 7;
              v54 = (unsigned int *)((char *)v18 + ((unint64_t)(v53 - 16) >> 3));
              v55 = bswap32(*v54) << v15;
              if (v54 > v5)
                v54 = v5;
              v57 = *(unsigned int *)((char *)v54 + 2);
              v56 = (unsigned int *)((char *)v54 + 2);
              v17 = bswap32(v57) << v15;
              if (v56 <= v5)
                v18 = v56;
              else
                v18 = v5;
              v58 = __PAIR64__(v52, v55) >> 16;
              goto LABEL_66;
            }
          }
          v58 = v17 >> -(char)v46;
          v59 = v15 + v46;
          LODWORD(v15) = ((_BYTE)v15 + (_BYTE)v46) & 7;
          v60 = (unsigned int *)((char *)v18 + (v59 >> 3));
          v17 = bswap32(*v60) << v15;
          if (v60 <= v5)
            v18 = v60;
          else
            v18 = v5;
LABEL_66:
          v41 = v58 + ~(-1 << v46);
          *(_DWORD *)(a3 + 12) = v41;
          goto LABEL_67;
        }
      }
    }
  }
  do
  {
LABEL_137:
    v116 = v19;
    if ((_DWORD)v19)
      break;
    *(_QWORD *)(a1 + 16) = v18;
    *(_DWORD *)(a1 + 32) = v17;
    *(_BYTE *)(a1 + 36) = v15;
    v19 = 4294958327;
  }
  while (*(_DWORD *)(a1 + 8) < (int)v18 - *(_DWORD *)a1);
  return v116;
}

uint64_t sub_2160DABCC(uint64_t a1, unsigned int *a2, void *a3, int a4, int *a5, int a6, int *a7, char a8, BOOL *a9)
{
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  unsigned int *v28;
  signed int v29;
  unsigned int *v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  int v79;
  int v80;
  int *v81;
  int v82;
  unint64_t v83;
  unsigned int *v84;
  signed int v85;
  unsigned int v86;
  unint64_t v87;
  unsigned int *v88;
  unint64_t v89;
  unsigned int *v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  unsigned int *v98;
  int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  char v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  int v114;
  unint64_t v115;
  unsigned int *v116;
  _DWORD *v117;
  unint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unint64_t v130;
  unsigned int *v131;
  int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  char v137;
  unsigned int v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  char v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  int v163;
  unint64_t v164;
  unsigned int *v165;
  unint64_t v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unint64_t v171;
  unsigned int *v172;
  int v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  char v178;
  unsigned int v179;
  unsigned int v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  int v188;
  unint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  unint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  unint64_t v196;
  unsigned int *v197;
  unint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  unint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unsigned int *v206;
  signed int v207;
  unint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unint64_t v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unint64_t v233;
  unsigned int *v234;
  uint64_t v235;
  unint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  signed int v239;
  unint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  unint64_t v253;
  unsigned int *v254;
  unint64_t v255;
  unsigned int *i;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  unint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v265;
  unsigned int v266;
  unint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  unint64_t v276;
  unsigned int *v277;
  int v278;
  int v279;
  int v280;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  unint64_t v288;
  unsigned int *v289;
  int v290;
  int *v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  unint64_t v295;
  unsigned int *v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  unint64_t v300;
  int v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unint64_t v312;
  unsigned int *v313;
  unsigned int v314;
  char v315;
  uint64_t v318;
  uint64_t v319;

  v318 = 0;
  v319 = 0;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(unsigned int **)(a1 + 24);
  v17 = *(_DWORD *)(a1 + 32);
  v18 = *(unsigned __int8 *)(a1 + 36);
  bzero(a3, 0xAC0uLL);
  v19 = a3;
  v20 = (unsigned int *)(v15 + ((unint64_t)(v18 + 1) >> 3));
  v21 = bswap32(*v20) << ((v18 + 1) & 7);
  if (v20 > v16)
    v20 = v16;
  *((_DWORD *)a3 + 1) = v21 >> 30;
  v22 = ((((_BYTE)v18 + 1) & 7) + 2) & 7;
  v23 = (unsigned int *)((char *)v20 + ((unint64_t)((((_DWORD)v18 + 1) & 7u) + 2) >> 3));
  v24 = bswap32(*v23) << ((((v18 + 1) & 7) + 2) & 7);
  if (v23 <= v16)
    v25 = v23;
  else
    v25 = v16;
  v26 = v24 >> 27;
  *((_DWORD *)a3 + 2) = v24 >> 27;
  v27 = ((_BYTE)v22 + 5) & 7;
  v28 = (unsigned int *)((char *)v25 + ((unint64_t)(v22 + 5) >> 3));
  v29 = bswap32(*v28) << v27;
  if (v28 <= v16)
    v30 = (unsigned int *)((char *)v25 + ((unint64_t)(v22 + 5) >> 3));
  else
    v30 = v16;
  if (v17 < 0)
    goto LABEL_69;
  v31 = v26 > 0x13 || ((1 << v26) & 0x80022) == 0;
  if (v31)
    goto LABEL_69;
  v32 = __clz(v29 | 1);
  if (!v29)
    ++v32;
  if (v32 <= 0xC)
  {
    v33 = (v29 << (v32 + 1)) >> -(char)v32;
    if (!v32)
      v33 = 0;
    v19[3] = v33 + ~(-1 << v32);
    v34 = v27 + 2 * v32 + 1;
    v35 = v34 & 7;
    v36 = (unsigned int *)((char *)v30 + (v34 >> 3));
    v37 = bswap32(*v36) << v35;
    if (v36 <= v16)
      v38 = v36;
    else
      v38 = v16;
    goto LABEL_42;
  }
  v39 = ((_BYTE)v27 + 1) & 7;
  v40 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
  v41 = bswap32(*v40) << v39;
  if (v40 <= v16)
    v42 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
  else
    v42 = v16;
  if (v29 < 0)
  {
    v46 = 0;
LABEL_39:
    v55 = v41 >> -(char)v46;
    v56 = v39 + v46;
    v35 = ((_BYTE)v39 + (_BYTE)v46) & 7;
    v38 = (unsigned int *)((char *)v42 + (v56 >> 3));
    v37 = bswap32(*v38) << (v56 & 7);
    if (v38 > v16)
      v38 = v16;
    goto LABEL_41;
  }
  v43 = 0;
  do
  {
    v44 = v39;
    v45 = v41;
    v46 = v43 + 1;
    v47 = (v39 + 1);
    v39 = ((_BYTE)v39 + 1) & 7;
    v42 = (unsigned int *)((char *)v42 + (v47 >> 3));
    v41 = bswap32(*v42) << (v47 & 7);
    if (v42 > v16)
      v42 = v16;
    if ((v45 & 0x80000000) != 0)
      break;
    v48 = v43++ >= 0x1F;
  }
  while (!v48);
  if (v46 - 1 <= 0x17)
    goto LABEL_39;
  v49 = v41 >> (48 - v46);
  v50 = ((v44 + 1) & 7) + v46;
  v51 = v50 - 16;
  v35 = v50 & 7;
  v52 = (unsigned int *)((char *)v42 + (v51 >> 3));
  v53 = bswap32(*v52) << v35;
  if (v52 > v16)
    v52 = v16;
  v54 = *(unsigned int *)((char *)v52 + 2);
  v38 = (unsigned int *)((char *)v52 + 2);
  v37 = bswap32(v54) << v35;
  if (v38 > v16)
    v38 = v16;
  v55 = __PAIR64__(v49, v53) >> 16;
LABEL_41:
  v19[3] = v55 + ~(-1 << v46);
LABEL_42:
  v57 = __clz(v37 | 1);
  if (v37)
    v58 = v57;
  else
    v58 = v57 + 1;
  v59 = v37 << (v58 + 1) >> -(char)v58;
  if (!v58)
    v59 = 0;
  v60 = v59 + ~(-1 << v58);
  v19[5] = v60;
  v61 = v35 + 2 * v58 + 1;
  v27 = v61 & 7;
  v62 = (unsigned int *)((char *)v38 + (v61 >> 3));
  v29 = bswap32(*v62) << v27;
  if (v62 <= v16)
    v30 = v62;
  else
    v30 = v16;
  if (v60 > 9)
    goto LABEL_69;
  if (v26 == 5 && v60 != 7 && v60 != 2)
    goto LABEL_69;
  v315 = a8;
  v64 = __clz(v29 | 1);
  if (!v29)
    ++v64;
  v65 = (v29 << (v64 + 1)) >> -(char)v64;
  if (!v64)
    v65 = 0;
  v66 = v65 + ~(-1 << v64);
  v19[6] = v66;
  v67 = v27 + 2 * v64 + 1;
  v27 = v67 & 7;
  v68 = (unsigned int *)((char *)v30 + (v67 >> 3));
  v29 = bswap32(*v68) << v27;
  if (v68 <= v16)
    v30 = v68;
  else
    v30 = v16;
  v69 = (uint64_t)v19;
  v70 = sub_2160AC930((uint64_t)a2, v66, &v318);
  if ((_DWORD)v70)
    goto LABEL_70;
  v70 = sub_2160AC8EC(a2, *(_DWORD *)(v318 + 4), &v319);
  if ((_DWORD)v70)
    goto LABEL_70;
  v71 = v319;
  v72 = v69;
  v73 = *(_DWORD *)(v319 + 1876);
  if (!*(_BYTE *)(v319 + 1336))
    v73 = (2 * v73) | 1;
  if (*(_DWORD *)(v69 + 12) > v73)
    goto LABEL_69;
  v76 = v318;
  v77 = a2 + 36645;
  a2[36645] = *(_DWORD *)(v318 + 4);
  a2[36646] = 1;
  if ((a4 & 0xFFFFFFFD) != 1)
    goto LABEL_95;
  if (!a5)
  {
LABEL_78:
    v78 = *(_DWORD *)(v69 + 8);
    goto LABEL_79;
  }
  v78 = *(_DWORD *)(v69 + 8);
  if (v78 == 1)
  {
    if (*(_DWORD *)(v69 + 20) != 7)
    {
      v81 = a7;
      if (!a7)
      {
LABEL_93:
        v80 = 0;
        goto LABEL_94;
      }
      goto LABEL_90;
    }
    *a5 = 1;
    *(_DWORD *)(v69 + 20) = 7;
    goto LABEL_78;
  }
LABEL_79:
  if (a6 || v78 != 19)
  {
    v81 = a7;
    if (!a7)
      goto LABEL_92;
    if (v78 == 5)
    {
      v82 = 1;
LABEL_91:
      *v81 = v82;
LABEL_92:
      if (!a5)
        goto LABEL_95;
      goto LABEL_93;
    }
LABEL_90:
    v82 = 0;
    goto LABEL_91;
  }
  *(_DWORD *)(v69 + 20) = 7;
  if (*a7)
    v79 = 5;
  else
    v79 = 1;
  *(_DWORD *)(v69 + 8) = v79;
  if (a5)
  {
    v80 = 1;
LABEL_94:
    *a5 = v80;
  }
LABEL_95:
  *(_DWORD *)(v69 + 28) = v29 >> (28 - *(_DWORD *)(v71 + 272));
  v83 = (v27 + *(_DWORD *)(v71 + 272) + 4);
  v27 = ((_BYTE)v27 + *(_BYTE *)(v71 + 272) + 4) & 7;
  v84 = (unsigned int *)((char *)v30 + (v83 >> 3));
  v85 = bswap32(*v84) << v27;
  if (v84 <= v16)
    v30 = v84;
  else
    v30 = v16;
  *(_WORD *)(v69 + 32) = 0;
  if (*(_BYTE *)(v71 + 1336))
  {
    v86 = 0;
  }
  else
  {
    v86 = v85 >> 31;
    *(_BYTE *)(v69 + 32) = v85 < 0;
    v87 = (v27 + 1);
    v27 = ((_BYTE)v27 + 1) & 7;
    v88 = (unsigned int *)((char *)v30 + (v87 >> 3));
    v29 = bswap32(*v88) << v27;
    if (v88 <= v16)
      v30 = v88;
    else
      v30 = v16;
    if (v85 < 0)
    {
      *(_BYTE *)(v69 + 33) = v29 < 0;
      v89 = (v27 + 1);
      v27 = ((_BYTE)v27 + 1) & 7;
      v90 = (unsigned int *)((char *)v30 + (v89 >> 3));
      v29 = bswap32(*v90) << v27;
      if (v90 <= v16)
        v30 = v90;
      else
        v30 = v16;
    }
    if (!*(_BYTE *)(v71 + 1336) && *(_BYTE *)(v71 + 1337) && (v85 & 0x80000000) == 0)
    {
      v86 = 0;
      v92 = *(_DWORD *)(v69 + 12);
      v91 = 2 * v92;
      goto LABEL_110;
    }
    v85 = v29;
  }
  v91 = *(_DWORD *)(v69 + 12);
  v92 = v91;
  v29 = v85;
LABEL_110:
  *(_DWORD *)(v69 + 16) = v91;
  v93 = (2
       - *(unsigned __int8 *)(v71 + 1336)
       + (2 - *(unsigned __int8 *)(v71 + 1336)) * *(_DWORD *)(v71 + 1332))
      / (v86 + 1);
  v94 = v93 + v93 * *(_DWORD *)(v71 + 1328);
  if (!*(_BYTE *)(v71 + 1337) || v86)
  {
    if (v92 >= v94)
      goto LABEL_69;
  }
  else if (v92 >= v94 >> 1)
  {
    goto LABEL_69;
  }
  if (*(_DWORD *)(v69 + 8) == 5)
  {
    v95 = __clz(v29 | 1);
    if (!v29)
      ++v95;
    if (v95 <= 0xC)
    {
      v96 = (v29 << (v95 + 1)) >> -(char)v95;
      if (!v95)
        v96 = 0;
      *(_DWORD *)(v69 + 36) = v96 + ~(-1 << v95);
      v97 = v27 + 2 * v95 + 1;
      v27 = v97 & 7;
      v98 = (unsigned int *)((char *)v30 + (v97 >> 3));
      v29 = bswap32(*v98) << v27;
      if (v98 <= v16)
        v30 = v98;
      else
        v30 = v16;
      goto LABEL_149;
    }
    v99 = ((_BYTE)v27 + 1) & 7;
    v100 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
    v101 = bswap32(*v100) << v99;
    if (v100 <= v16)
      v102 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
    else
      v102 = v16;
    if (v29 < 0)
    {
      v106 = 0;
    }
    else
    {
      v103 = 0;
      do
      {
        v104 = v99;
        v105 = v101;
        v106 = v103 + 1;
        v107 = (v99 + 1);
        v99 = ((_BYTE)v99 + 1) & 7;
        v102 = (unsigned int *)((char *)v102 + (v107 >> 3));
        v101 = bswap32(*v102) << (v107 & 7);
        if (v102 > v16)
          v102 = v16;
        if ((v105 & 0x80000000) != 0)
          break;
        v48 = v103++ >= 0x1F;
      }
      while (!v48);
      if (v106 - 1 > 0x17)
      {
        v108 = v101 >> (48 - v106);
        v109 = ((v104 + 1) & 7) + v106;
        v27 = v109 & 7;
        v110 = (unsigned int *)((char *)v102 + ((unint64_t)(v109 - 16) >> 3));
        v111 = bswap32(*v110) << (v109 & 7);
        if (v110 > v16)
          v110 = v16;
        v113 = *(unsigned int *)((char *)v110 + 2);
        v112 = (unsigned int *)((char *)v110 + 2);
        v29 = bswap32(v113) << v27;
        if (v112 <= v16)
          v30 = v112;
        else
          v30 = v16;
        v114 = __PAIR64__(v108, v111) >> 16;
        goto LABEL_148;
      }
    }
    v114 = v101 >> -(char)v106;
    v115 = v99 + v106;
    v27 = v115 & 7;
    v116 = (unsigned int *)((char *)v102 + (v115 >> 3));
    v29 = bswap32(*v116) << (v115 & 7);
    if (v116 <= v16)
      v30 = v116;
    else
      v30 = v16;
LABEL_148:
    *(_DWORD *)(v69 + 36) = v114 + ~(-1 << v106);
  }
LABEL_149:
  *(_DWORD *)(v69 + 52) = 0;
  *(_DWORD *)(v69 + 44) = 0;
  v117 = (_DWORD *)(v69 + 44);
  *(_DWORD *)(v69 + 48) = 0;
  if (*(_BYTE *)(v71 + 276) == 1)
  {
    if (*(_BYTE *)(v71 + 284))
      goto LABEL_254;
    v126 = __clz(v29 | 1);
    if (v29)
      v127 = v126;
    else
      v127 = v126 + 1;
    if (v127 <= 0xC)
    {
      v128 = (v29 << (v127 + 1)) >> -(char)v127;
      if (!v127)
        v128 = 0;
      v129 = v128 + ~(-1 << v127);
      v130 = v27 + 2 * v127 + 1;
      v27 = v130 & 7;
      v131 = (unsigned int *)((char *)v30 + (v130 >> 3));
      v29 = bswap32(*v131) << v27;
      if (v131 <= v16)
        v30 = v131;
      else
        v30 = v16;
LABEL_219:
      *(_DWORD *)(v69 + 48) = ((v129 + 1) >> 1) - ((v129 + 1) >> 1) * 2 * ((v129 + 1) & 1);
      if (v86 || *(_BYTE *)(v76 + 9) != 1)
        goto LABEL_254;
      v168 = __clz(v29 | 1);
      if (v29)
        v169 = v168;
      else
        v169 = v168 + 1;
      if (v169 <= 0xC)
      {
        v170 = (v29 << (v169 + 1)) >> -(char)v169;
        if (!v169)
          v170 = 0;
        v123 = v170 + ~(-1 << v169);
        v171 = v27 + 2 * v169 + 1;
        v27 = v171 & 7;
        v172 = (unsigned int *)((char *)v30 + (v171 >> 3));
        v29 = bswap32(*v172) << v27;
        if (v172 <= v16)
          v30 = v172;
        else
          v30 = v16;
        goto LABEL_252;
      }
      v173 = ((_BYTE)v27 + 1) & 7;
      v174 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
      v175 = bswap32(*v174) << v173;
      if (v174 <= v16)
        v176 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
      else
        v176 = v16;
      if (v29 < 0)
      {
        v180 = 0;
      }
      else
      {
        v177 = 0;
        do
        {
          v178 = v173;
          v179 = v175;
          v180 = v177 + 1;
          v181 = (v173 + 1);
          v173 = ((_BYTE)v173 + 1) & 7;
          v176 = (unsigned int *)((char *)v176 + (v181 >> 3));
          v175 = bswap32(*v176) << (v181 & 7);
          if (v176 > v16)
            v176 = v16;
          if ((v179 & 0x80000000) != 0)
            break;
          v48 = v177++ >= 0x1F;
        }
        while (!v48);
        if (v180 - 1 > 0x17)
        {
          v182 = v175 >> (48 - v180);
          v183 = ((v178 + 1) & 7) + v180;
          v27 = v183 & 7;
          v184 = (unsigned int *)((char *)v176 + ((unint64_t)(v183 - 16) >> 3));
          v185 = bswap32(*v184) << (v183 & 7);
          if (v184 > v16)
            v184 = v16;
          v187 = *(unsigned int *)((char *)v184 + 2);
          v186 = (unsigned int *)((char *)v184 + 2);
          v29 = bswap32(v187) << v27;
          if (v186 <= v16)
            v30 = v186;
          else
            v30 = v16;
          v188 = __PAIR64__(v182, v185) >> 16;
          goto LABEL_251;
        }
      }
      v188 = v175 >> -(char)v180;
      v189 = v173 + v180;
      v27 = v189 & 7;
      v190 = (unsigned int *)((char *)v176 + (v189 >> 3));
      v29 = bswap32(*v190) << (v189 & 7);
      if (v190 <= v16)
        v30 = v190;
      else
        v30 = v16;
LABEL_251:
      v123 = v188 + ~(-1 << v180);
LABEL_252:
      v117 = (_DWORD *)(v69 + 52);
      goto LABEL_253;
    }
    v148 = ((_BYTE)v27 + 1) & 7;
    v149 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
    v150 = bswap32(*v149) << v148;
    if (v149 <= v16)
      v151 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
    else
      v151 = v16;
    if (v29 < 0)
    {
      v155 = 0;
    }
    else
    {
      v152 = 0;
      do
      {
        v153 = v148;
        v154 = v150;
        v155 = v152 + 1;
        v156 = (v148 + 1);
        v148 = ((_BYTE)v148 + 1) & 7;
        v151 = (unsigned int *)((char *)v151 + (v156 >> 3));
        v150 = bswap32(*v151) << (v156 & 7);
        if (v151 > v16)
          v151 = v16;
        if ((v154 & 0x80000000) != 0)
          break;
        v48 = v152++ >= 0x1F;
      }
      while (!v48);
      if (v155 - 1 > 0x17)
      {
        v157 = v150 >> (48 - v155);
        v158 = ((v153 + 1) & 7) + v155;
        v27 = v158 & 7;
        v159 = (unsigned int *)((char *)v151 + ((unint64_t)(v158 - 16) >> 3));
        v160 = bswap32(*v159) << (v158 & 7);
        if (v159 > v16)
          v159 = v16;
        v162 = *(unsigned int *)((char *)v159 + 2);
        v161 = (unsigned int *)((char *)v159 + 2);
        v29 = bswap32(v162) << v27;
        if (v161 <= v16)
          v30 = v161;
        else
          v30 = v16;
        v163 = __PAIR64__(v157, v160) >> 16;
        goto LABEL_218;
      }
    }
    v163 = v150 >> -(char)v155;
    v166 = v148 + v155;
    v27 = v166 & 7;
    v167 = (unsigned int *)((char *)v151 + (v166 >> 3));
    v29 = bswap32(*v167) << (v166 & 7);
    if (v167 <= v16)
      v30 = v167;
    else
      v30 = v16;
LABEL_218:
    v129 = v163 + ~(-1 << v155);
    goto LABEL_219;
  }
  if (!*(_BYTE *)(v71 + 276))
  {
    *(_DWORD *)(v69 + 40) = v29 >> (28 - *(_DWORD *)(v71 + 280));
    v118 = (v27 + *(_DWORD *)(v71 + 280) + 4);
    v27 = ((_BYTE)v27 + *(_BYTE *)(v71 + 280) + 4) & 7;
    v119 = (unsigned int *)((char *)v30 + (v118 >> 3));
    v29 = bswap32(*v119) << v27;
    v30 = v119 <= v16 ? v119 : v16;
    if (!v86 && *(_BYTE *)(v76 + 9) == 1)
    {
      v120 = __clz(v29 | 1);
      if (v29)
        v121 = v120;
      else
        v121 = v120 + 1;
      if (v121 <= 0xC)
      {
        v122 = (v29 << (v121 + 1)) >> -(char)v121;
        if (!v121)
          v122 = 0;
        v123 = v122 + ~(-1 << v121);
        v124 = v27 + 2 * v121 + 1;
        v27 = v124 & 7;
        v125 = (unsigned int *)((char *)v30 + (v124 >> 3));
        v29 = bswap32(*v125) << v27;
        if (v125 <= v16)
          v30 = v125;
        else
          v30 = v16;
        goto LABEL_253;
      }
      v132 = ((_BYTE)v27 + 1) & 7;
      v133 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
      v134 = bswap32(*v133) << v132;
      if (v133 <= v16)
        v135 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
      else
        v135 = v16;
      if (v29 < 0)
      {
        v139 = 0;
      }
      else
      {
        v136 = 0;
        do
        {
          v137 = v132;
          v138 = v134;
          v139 = v136 + 1;
          v140 = (v132 + 1);
          v132 = ((_BYTE)v132 + 1) & 7;
          v135 = (unsigned int *)((char *)v135 + (v140 >> 3));
          v134 = bswap32(*v135) << (v140 & 7);
          if (v135 > v16)
            v135 = v16;
          if ((v138 & 0x80000000) != 0)
            break;
          v48 = v136++ >= 0x1F;
        }
        while (!v48);
        if (v139 - 1 > 0x17)
        {
          v141 = v134 >> (48 - v139);
          v142 = ((v137 + 1) & 7) + v139;
          v27 = v142 & 7;
          v143 = (unsigned int *)((char *)v135 + ((unint64_t)(v142 - 16) >> 3));
          v144 = bswap32(*v143) << (v142 & 7);
          if (v143 > v16)
            v143 = v16;
          v146 = *(unsigned int *)((char *)v143 + 2);
          v145 = (unsigned int *)((char *)v143 + 2);
          v29 = bswap32(v146) << v27;
          if (v145 <= v16)
            v30 = v145;
          else
            v30 = v16;
          v147 = __PAIR64__(v141, v144) >> 16;
          goto LABEL_213;
        }
      }
      v147 = v134 >> -(char)v139;
      v164 = v132 + v139;
      v27 = v164 & 7;
      v165 = (unsigned int *)((char *)v135 + (v164 >> 3));
      v29 = bswap32(*v165) << (v164 & 7);
      if (v165 <= v16)
        v30 = v165;
      else
        v30 = v16;
LABEL_213:
      v123 = v147 + ~(-1 << v139);
LABEL_253:
      *v117 = ((v123 + 1) >> 1) - ((v123 + 1) >> 1) * 2 * ((v123 + 1) & 1);
    }
  }
LABEL_254:
  *(_DWORD *)(v69 + 56) = 0;
  if (*(_BYTE *)(v76 + 86))
  {
    v191 = __clz(v29 | 1);
    if (!v29)
      ++v191;
    v192 = (v29 << (v191 + 1)) >> -(char)v191;
    if (!v191)
      v192 = 0;
    *(_DWORD *)(v69 + 56) = v192 + ~(-1 << v191);
    v193 = v27 + 2 * v191 + 1;
    v27 = v193 & 7;
    v194 = (unsigned int *)((char *)v30 + (v193 >> 3));
    v29 = bswap32(*v194) << v27;
    if (v194 <= v16)
      v30 = v194;
    else
      v30 = v16;
  }
  v195 = *(_DWORD *)(v69 + 20);
  if (v195 == 6 || v195 == 1)
  {
    *(_BYTE *)(v69 + 60) = v29 < 0;
    v196 = (v27 + 1);
    v27 = ((_BYTE)v27 + 1) & 7;
    v197 = (unsigned int *)((char *)v30 + (v196 >> 3));
    v29 = bswap32(*v197) << v27;
    if (v197 <= v16)
      v30 = v197;
    else
      v30 = v16;
  }
  if (v195 <= 8 && ((1 << v195) & 0x16B) != 0)
  {
    *(_BYTE *)(v69 + 61) = v29 < 0;
    v198 = (v27 + 1);
    v27 = ((_BYTE)v27 + 1) & 7;
    v199 = (unsigned int *)((char *)v30 + (v198 >> 3));
    v200 = bswap32(*v199) << (v198 & 7);
    if (v199 <= v16)
      v30 = v199;
    else
      v30 = v16;
    if (v29 < 0)
    {
      v211 = __clz(v200 | 1);
      if (!v200)
        ++v211;
      v212 = v200 << (v211 + 1) >> -(char)v211;
      if (!v211)
        v212 = 0;
      v213 = v212 + ~(-1 << v211);
      *(_DWORD *)(v69 + 64) = v213;
      v214 = v27 + 2 * v211 + 1;
      v27 = v214 & 7;
      v215 = (unsigned int *)((char *)v30 + (v214 >> 3));
      v29 = bswap32(*v215) << v27;
      if (v215 <= v16)
        v30 = v215;
      else
        v30 = v16;
      if (v213 > 0x1F)
        goto LABEL_69;
      if (v195 == 6 || v195 == 1)
      {
        v216 = __clz(v29 | 1);
        if (!v29)
          ++v216;
        v217 = (v29 << (v216 + 1)) >> -(char)v216;
        if (!v216)
          v217 = 0;
        v218 = v217 + ~(-1 << v216);
        *(_DWORD *)(v69 + 68) = v218;
        v219 = v27 + 2 * v216 + 1;
        v27 = v219 & 7;
        v220 = (unsigned int *)((char *)v30 + (v219 >> 3));
        v29 = bswap32(*v220) << v27;
        v30 = v220 <= v16 ? v220 : v16;
        if (v218 > 0x1F)
          goto LABEL_69;
      }
    }
    else
    {
      *(_DWORD *)(v69 + 64) = *(_DWORD *)(v76 + 56);
      *(_DWORD *)(v69 + 68) = *(_DWORD *)(v76 + 60);
      v29 = v200;
    }
  }
  if (v195 > 9 || ((1 << v195) & 0x294) == 0)
  {
    *(_BYTE *)(v69 + 72) = v29 < 0;
    v236 = (v27 + 1);
    v27 = ((_BYTE)v27 + 1) & 7;
    v237 = (unsigned int *)((char *)v30 + (v236 >> 3));
    v238 = bswap32(*v237);
    v239 = v238 << v27;
    if (v237 <= v16)
      v30 = v237;
    else
      v30 = v16;
    if (v29 < 0)
    {
      v240 = 0;
      v29 = v239;
      v70 = 4294958327;
      while (1)
      {
        v241 = __clz(v29 | 1);
        if (v29)
          v242 = v241;
        else
          v242 = v241 + 1;
        v243 = (v29 << (v242 + 1)) >> -(char)v242;
        if (!v242)
          v243 = 0;
        v244 = v243 + ~(-1 << v242);
        v245 = v27 + 2 * v242 + 1;
        v27 = v245 & 7;
        v246 = (unsigned int *)((char *)v30 + (v245 >> 3));
        v29 = bswap32(*v246) << v27;
        v30 = v246 <= v16 ? v246 : v16;
        if (v244 > 3)
          goto LABEL_69;
        *(_DWORD *)(v69 + 76 + 4 * v240) = v244;
        if (v244 == 3)
          goto LABEL_276;
        v247 = __clz(v29 | 1);
        if (!v29)
          ++v247;
        v248 = (v29 << (v247 + 1)) >> -(char)v247;
        if (!v247)
          v248 = 0;
        v249 = v248 + ~(-1 << v247);
        v250 = v27 + 2 * v247 + 1;
        v27 = v250 & 7;
        v251 = (unsigned int *)((char *)v30 + (v250 >> 3));
        if (v251 <= v16)
          v30 = v251;
        else
          v30 = v16;
        if (v244 >= 2)
          v252 = v69 + 604;
        else
          v252 = v69 + 340;
        *(_DWORD *)(v252 + 4 * v240) = v249;
        v29 = bswap32(*v251) << v27;
        if (v240 <= *(unsigned int *)(v69 + 64))
        {
          v31 = v240++ == 32;
          if (!v31)
            continue;
        }
        goto LABEL_70;
      }
    }
    v29 = v238 << v27;
  }
LABEL_276:
  if (v195 == 6 || v195 == 1)
  {
    *(_BYTE *)(v69 + 73) = v29 < 0;
    v201 = (v27 + 1);
    v27 = ((_BYTE)v27 + 1) & 7;
    v202 = (unsigned int *)((char *)v30 + (v201 >> 3));
    v203 = bswap32(*v202);
    if (v202 <= v16)
      v30 = v202;
    else
      v30 = v16;
    if ((v29 & 0x80000000) == 0)
    {
      v29 = v203 << v27;
      goto LABEL_283;
    }
    v221 = -32;
    v222 = v69;
    v29 = v203 << v27;
    while (1)
    {
      v223 = v221;
      v224 = __clz(v29 | 1);
      if (v29)
        v225 = v224;
      else
        v225 = v224 + 1;
      v226 = (v29 << (v225 + 1)) >> -(char)v225;
      if (!v225)
        v226 = 0;
      v227 = v226 + ~(-1 << v225);
      v228 = v27 + 2 * v225 + 1;
      v27 = v228 & 7;
      v229 = (unsigned int *)((char *)v30 + (v228 >> 3));
      v29 = bswap32(*v229) << v27;
      v30 = v229 <= v16 ? v229 : v16;
      if (v227 > 3)
        break;
      *(_DWORD *)(v222 + 208) = v227;
      if (v227 == 3)
        goto LABEL_283;
      v230 = __clz(v29 | 1);
      if (!v29)
        ++v230;
      v231 = (v29 << (v230 + 1)) >> -(char)v230;
      if (!v230)
        v231 = 0;
      v232 = v231 + ~(-1 << v230);
      v233 = v27 + 2 * v230 + 1;
      v27 = v233 & 7;
      v234 = (unsigned int *)((char *)v30 + (v233 >> 3));
      if (v234 <= v16)
        v30 = v234;
      else
        v30 = v16;
      if (v227 >= 2)
        v235 = 736;
      else
        v235 = 472;
      *(_DWORD *)(v222 + v235) = v232;
      v29 = bswap32(*v234) << v27;
      v70 = 4294958327;
      if (v223 + 32 <= (unint64_t)*(unsigned int *)(v69 + 68))
      {
        v221 = v223 + 1;
        v222 += 4;
        if (v223)
          continue;
      }
      goto LABEL_70;
    }
LABEL_69:
    v70 = 4294958327;
    goto LABEL_70;
  }
LABEL_283:
  if (*(_BYTE *)(v76 + 64) && (!v195 || v195 == 5) || *(_DWORD *)(v76 + 68) == 1 && (v195 == 6 || v195 == 1))
  {
    *(_QWORD *)(a1 + 16) = v30;
    *(_DWORD *)(a1 + 32) = v29;
    *(_BYTE *)(a1 + 36) = v27;
    if (*(_DWORD *)(a1 + 8) < (int)v30 - *(_DWORD *)a1)
      goto LABEL_69;
    v204 = v71;
    v70 = sub_2160DC31C(a1, (_DWORD *)v69, v76);
    if ((_DWORD)v70)
      goto LABEL_70;
    v71 = v204;
    v77 = a2 + 36645;
    v72 = v69;
    v30 = *(unsigned int **)(a1 + 16);
    v16 = *(unsigned int **)(a1 + 24);
    v29 = *(_DWORD *)(a1 + 32);
    v27 = *(unsigned __int8 *)(a1 + 36);
  }
  if (*(_BYTE *)(v72 + 2544))
    goto LABEL_69;
  if (!*(_DWORD *)(v72 + 4))
  {
LABEL_301:
    v210 = v29;
    goto LABEL_429;
  }
  if (*(_DWORD *)(v72 + 8) == 5)
  {
    *(_BYTE *)(v72 + 2708) = v29 < 0;
    v205 = ((_BYTE)v27 + 1) & 7;
    v206 = (unsigned int *)((char *)v30 + ((unint64_t)(v27 + 1) >> 3));
    v207 = bswap32(*v206) << v205;
    if (v206 > v16)
      v206 = v16;
    *(_BYTE *)(v72 + 2709) = v207 < 0;
    v208 = (v205 + 1);
    v27 = v208 & 7;
    v209 = (unsigned int *)((char *)v206 + (v208 >> 3));
    v29 = bswap32(*v209) << (v208 & 7);
    if (v209 <= v16)
      v30 = v209;
    else
      v30 = v16;
    if (*(_DWORD *)(v72 + 2712))
      goto LABEL_69;
    goto LABEL_301;
  }
  *(_BYTE *)(v72 + 2544) = v29 < 0;
  v253 = (v27 + 1);
  v27 = ((_BYTE)v27 + 1) & 7;
  v254 = (unsigned int *)((char *)v30 + (v253 >> 3));
  v210 = bswap32(*v254) << (v253 & 7);
  if (v254 <= v16)
    v30 = v254;
  else
    v30 = v16;
  if ((v29 & 0x80000000) == 0)
    goto LABEL_429;
  v255 = 0;
  for (i = (unsigned int *)(v72 + 2548); ; ++i)
  {
    v257 = __clz(v210 | 1);
    if (!v210)
      ++v257;
    v258 = v210 << (v257 + 1) >> -(char)v257;
    v259 = v257 ? v258 : 0;
    v260 = ~(-1 << v257);
    v261 = v27 + 2 * v257 + 1;
    v27 = ((_BYTE)v27 + 2 * (_BYTE)v257 + 1) & 7;
    v262 = (unsigned int *)((char *)v30 + (v261 >> 3));
    v210 = bswap32(*v262) << (v261 & 7);
    v30 = v262 <= v16 ? v262 : v16;
    v263 = v259 + v260;
    if (!(v259 + v260))
      break;
    if (v263 > 6 || v255 > 7)
    {
      v70 = 4294958327;
      v29 = v210;
      goto LABEL_70;
    }
    *i = v263;
    if ((v263 | 2) == 3)
    {
      v265 = __clz(v210 | 1);
      if (!v210)
        ++v265;
      v266 = v210 << (v265 + 1) >> -(char)v265;
      if (!v265)
        v266 = 0;
      i[8] = v266 + ~(-1 << v265);
      v267 = v27 + 2 * v265 + 1;
      v27 = ((_BYTE)v27 + 2 * (_BYTE)v265 + 1) & 7;
      v268 = (unsigned int *)((char *)v30 + (v267 >> 3));
      v210 = bswap32(*v268) << (v267 & 7);
      if (v268 <= v16)
        v30 = v268;
      else
        v30 = v16;
    }
    if (v263 == 6 || v263 == 3)
    {
      v271 = __clz(v210 | 1);
      if (!v210)
        ++v271;
      v272 = v210 << (v271 + 1) >> -(char)v271;
      if (!v271)
        v272 = 0;
      i[24] = v272 + ~(-1 << v271);
      v273 = v27 + 2 * v271 + 1;
      v27 = ((_BYTE)v27 + 2 * (_BYTE)v271 + 1) & 7;
      v274 = (unsigned int *)((char *)v30 + (v273 >> 3));
      v210 = bswap32(*v274) << (v273 & 7);
      if (v274 <= v16)
        v30 = v274;
      else
        v30 = v16;
    }
    else if (v263 == 2)
    {
      v269 = __clz(v210 | 1);
      if (!v210)
        ++v269;
      v270 = v210 << (v269 + 1) >> -(char)v269;
      if (!v269)
        v270 = 0;
      i[16] = v270 + ~(-1 << v269);
      goto LABEL_422;
    }
    if (v263 != 4)
      goto LABEL_425;
    v269 = __clz(v210 | 1);
    if (!v210)
      ++v269;
    v275 = v210 << (v269 + 1) >> -(char)v269;
    if (!v269)
      v275 = 0;
    i[32] = v275 + ~(-1 << v269);
LABEL_422:
    v276 = v27 + 2 * v269 + 1;
    v27 = ((_BYTE)v27 + 2 * (_BYTE)v269 + 1) & 7;
    v277 = (unsigned int *)((char *)v30 + (v276 >> 3));
    v210 = bswap32(*v277) << (v276 & 7);
    if (v277 <= v16)
      v30 = v277;
    else
      v30 = v16;
LABEL_425:
    ++v255;
  }
  if ((v255 & 0xFFFFFFF8) == 0)
    *i = 0;
  v72 = v69;
LABEL_429:
  *(_BYTE *)(v72 + 2748) = *(_BYTE *)(v76 + 8);
  *(_BYTE *)(v72 + 2749) = *(_DWORD *)(v71 + 1320);
  if (!*(_BYTE *)(v76 + 64) || (v278 = *(_DWORD *)(v72 + 20), LOBYTE(v279) = 1, v278) && v278 != 5)
  {
    v279 = *(_DWORD *)(v76 + 68);
    if (v279)
    {
      v280 = *(_DWORD *)(v72 + 20);
      LOBYTE(v279) = v280 == 1 || v280 == 6;
    }
  }
  *(_BYTE *)(v72 + 2750) = v279;
  if (a9)
    *a9 = *(_BYTE *)(v76 + 8) == 1;
  v282 = *(_DWORD *)(v72 + 20);
  if (*(_BYTE *)(v76 + 8) != 1 || v282 <= 9 && ((1 << v282) & 0x294) != 0)
  {
    LOBYTE(v283) = 0;
    goto LABEL_445;
  }
  v309 = __clz(v210 | 1);
  if (v210)
    v310 = v309;
  else
    v310 = v309 + 1;
  v311 = v210 << (v310 + 1) >> -(char)v310;
  if (!v310)
    v311 = 0;
  v283 = v311 + ~(-1 << v310);
  v312 = v27 + 2 * v310 + 1;
  v27 = ((_BYTE)v27 + 2 * (_BYTE)v310 + 1) & 7;
  v313 = (unsigned int *)((char *)v30 + (v312 >> 3));
  v314 = bswap32(*v313);
  v29 = v314 << v27;
  if (v313 <= v16)
    v30 = v313;
  else
    v30 = v16;
  if (v283 > 2)
    goto LABEL_69;
  v210 = v314 << v27;
  v72 = v69;
LABEL_445:
  *(_BYTE *)(v72 + 2716) = v283;
  v284 = __clz(v210 | 1);
  if (!v210)
    ++v284;
  v285 = v210 << (v284 + 1) >> -(char)v284;
  if (v284)
    v286 = v285;
  else
    v286 = 0;
  v287 = 1 << v284;
  v288 = v27 + 2 * v284 + 1;
  v27 = v288 & 7;
  v289 = (unsigned int *)((char *)v30 + (v288 >> 3));
  v29 = bswap32(*v289) << v27;
  if (v289 <= v16)
    v30 = v289;
  else
    v30 = v16;
  *(_DWORD *)(v72 + 2720) = ((v286 + v287) >> 1) - ((v286 + v287) >> 1) * 2 * (((_BYTE)v286 + (_BYTE)v287) & 1);
  if (v282 <= 9 && ((1 << v282) & 0x318) != 0)
  {
LABEL_455:
    v70 = 4294966630;
    goto LABEL_70;
  }
  v290 = 0;
  v291 = (int *)(v72 + 2732);
  *(_QWORD *)(v72 + 2732) = 0;
  *(_DWORD *)(v72 + 2740) = 0;
  if (*(_BYTE *)(v76 + 84) == 1)
  {
    v292 = __clz(v29 | 1);
    if (!v29)
      ++v292;
    v293 = (v29 << (v292 + 1)) >> -(char)v292;
    if (!v292)
      v293 = 0;
    v294 = v293 + ~(-1 << v292);
    *v291 = v294;
    v295 = v27 + 2 * v292 + 1;
    v27 = v295 & 7;
    v296 = (unsigned int *)((char *)v30 + (v295 >> 3));
    v29 = bswap32(*v296) << v27;
    if (v296 <= v16)
      v30 = v296;
    else
      v30 = v16;
    v290 = 1;
    if (v294 != 1)
    {
      v297 = __clz(v29 | 1);
      if (!v29)
        ++v297;
      v298 = (v29 << (v297 + 1)) >> -(char)v297;
      if (!v297)
        v298 = 0;
      v299 = 1 << v297;
      v300 = v27 + 2 * v297 + 1;
      v301 = v300 & 7;
      v302 = (unsigned int *)((char *)v30 + (v300 >> 3));
      v303 = bswap32(*v302) << v301;
      if (v302 > v16)
        v302 = v16;
      *(_DWORD *)(v69 + 2736) = ((v298 + v299) >> 1) - ((v298 + v299) >> 1) * 2 * ((v298 + v299) & 1);
      v304 = __clz(v303 | 1);
      if (!v303)
        ++v304;
      v305 = v303 << (v304 + 1) >> -(char)v304;
      if (!v304)
        v305 = 0;
      v306 = 1 << v304;
      v307 = v301 + 2 * v304 + 1;
      LOBYTE(v27) = v307 & 7;
      v308 = (unsigned int *)((char *)v302 + (v307 >> 3));
      v29 = bswap32(*v308) << (v307 & 7);
      if (v308 <= v16)
        v30 = v308;
      else
        v30 = v16;
      *(_DWORD *)(v69 + 2740) = ((v305 + v306) >> 1) - ((v305 + v306) >> 1) * 2 * ((v305 + v306) & 1);
      v290 = v294;
    }
  }
  if (!v77[2])
  {
    if ((v315 & 1) == 0)
      goto LABEL_496;
    if (v290 == 1)
      goto LABEL_495;
    goto LABEL_69;
  }
  *v291 = 1;
  if ((v315 & 1) == 0)
    goto LABEL_496;
LABEL_495:
  *v291 = 0;
LABEL_496:
  if (*(_DWORD *)(v76 + 12) && (*(_DWORD *)(v76 + 16) - 3) < 3)
    goto LABEL_455;
  if (sub_2160DC8EC(a2, v69))
    v70 = 4294958327;
  else
    v70 = 0;
  do
  {
LABEL_70:
    v74 = v70;
    if ((_DWORD)v70)
      break;
    *(_QWORD *)(a1 + 16) = v30;
    *(_DWORD *)(a1 + 32) = v29;
    *(_BYTE *)(a1 + 36) = v27;
    v70 = 4294958327;
  }
  while (*(_DWORD *)(a1 + 8) < (int)v30 - *(_DWORD *)a1);
  return v74;
}

uint64_t sub_2160DC31C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  unint64_t v70;
  int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unint64_t v78;
  int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unint64_t v103;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 36);
  v7 = __clz(v5 | 1);
  if (!v5)
    ++v7;
  v8 = (v5 << (v7 + 1)) >> -(char)v7;
  if (!v7)
    v8 = 0;
  v9 = v8 + ~(-1 << v7);
  a2[218] = v9;
  v10 = v6 + 2 * v7 + 1;
  v11 = v10 & 7;
  v12 = (unsigned int *)(v4 + (v10 >> 3));
  v13 = bswap32(*v12) << (v10 & 7);
  if (v12 <= v3)
    v14 = v12;
  else
    v14 = v3;
  v15 = __clz(v13 | 1);
  if (v13)
    v16 = v15;
  else
    v16 = v15 + 1;
  v17 = v13 << (v16 + 1) >> -(char)v16;
  if (!v16)
    v17 = 0;
  v18 = v17 + ~(-1 << v16);
  a2[219] = v18;
  v19 = v11 + 2 * v16 + 1;
  v20 = v19 & 7;
  v21 = (unsigned int *)((char *)v14 + (v19 >> 3));
  v22 = bswap32(*v21) << (v19 & 7);
  if (v21 > v3)
    v21 = v3;
  v23 = a2[16];
  if ((v23 - 32) < 0xFFFFFFDF)
    goto LABEL_16;
  v25 = 0;
  v26 = a2 + 252;
  v27 = 1 << v18;
  v28 = 1 << v9;
  if ((v23 + 1) > 1)
    v29 = (v23 + 1);
  else
    v29 = 1;
  v30 = a2;
  do
  {
    v31 = (v20 + 1);
    v32 = ((_BYTE)v20 + 1) & 7;
    v33 = (unsigned int *)((char *)v21 + (v31 >> 3));
    v34 = bswap32(*v33) << (v31 & 7);
    if (v33 > v3)
      v33 = v3;
    if ((v22 & 0x80000000) != 0)
    {
      v36 = __clz(v34 | 1);
      if (!v34)
        ++v36;
      v37 = v34 << (v36 + 1) >> -(char)v36;
      if (!v36)
        v37 = 0;
      v38 = 1 << v36;
      v39 = v32 + 2 * v36 + 1;
      v40 = v39 & 7;
      v41 = (unsigned int *)((char *)v33 + (v39 >> 3));
      v42 = bswap32(*v41) << v40;
      if (v41 <= v3)
        v43 = v41;
      else
        v43 = v3;
      v26[3 * v25] = ((v37 + v38) >> 1) - ((v37 + v38) >> 1) * 2 * ((v37 + v38) & 1);
      v44 = __clz(v42 | 1);
      if (!v42)
        ++v44;
      v45 = v42 << (v44 + 1) >> -(char)v44;
      if (v44)
        v46 = v45;
      else
        v46 = 0;
      v47 = 1 << v44;
      v48 = v40 + 2 * v44 + 1;
      v32 = v48 & 7;
      v49 = (unsigned int *)((char *)v43 + (v48 >> 3));
      v34 = bswap32(*v49) << v32;
      if (v49 <= v3)
        v33 = v49;
      else
        v33 = v3;
      v35 = ((v46 + v47) >> 1) - ((v46 + v47) >> 1) * 2 * (((_BYTE)v46 + (_BYTE)v47) & 1);
    }
    else
    {
      v35 = 0;
      v26[3 * v25] = v28;
    }
    v50 = 0;
    a2[3 * v25 + 444] = v35;
    v51 = (v32 + 1);
    v20 = ((_BYTE)v32 + 1) & 7;
    v21 = (unsigned int *)((char *)v33 + (v51 >> 3));
    v22 = bswap32(*v21) << (v51 & 7);
    if (v21 > v3)
      v21 = v3;
    do
    {
      if ((v34 & 0x80000000) != 0)
      {
        v53 = __clz(v22 | 1);
        if (!v22)
          ++v53;
        v54 = v22 << (v53 + 1) >> -(char)v53;
        if (!v53)
          v54 = 0;
        v55 = 1 << v53;
        v56 = v20 + 2 * v53 + 1;
        v57 = v56 & 7;
        v58 = (unsigned int *)((char *)v21 + (v56 >> 3));
        v59 = bswap32(*v58) << v57;
        if (v58 <= v3)
          v60 = v58;
        else
          v60 = v3;
        v30[v50 + 253] = ((v54 + v55) >> 1) - ((v54 + v55) >> 1) * 2 * ((v54 + v55) & 1);
        v61 = __clz(v59 | 1);
        if (!v59)
          ++v61;
        if (v61)
          v62 = v59 << (v61 + 1) >> -(char)v61;
        else
          v62 = 0;
        v63 = 1 << v61;
        v64 = v57 + 2 * v61 + 1;
        v20 = ((_BYTE)v57 + 2 * (_BYTE)v61 + 1) & 7;
        v21 = (unsigned int *)((char *)v60 + (v64 >> 3));
        v22 = bswap32(*v21) << (v64 & 7);
        if (v21 > v3)
          v21 = v3;
        v52 = ((v62 + v63) >> 1) - ((v62 + v63) >> 1) * 2 * (((_BYTE)v62 + (_BYTE)v63) & 1);
      }
      else
      {
        v52 = 0;
        v30[v50 + 253] = v27;
      }
      v30[v50 + 445] = v52;
      ++v50;
    }
    while (v50 != 2);
    ++v25;
    v30 += 3;
  }
  while (v25 != v29);
  v65 = a2[5];
  if (v65 != 6 && v65 != 1 || *(_DWORD *)(a3 + 68) != 1)
  {
LABEL_111:
    v24 = 0;
    goto LABEL_112;
  }
  v66 = a2[17];
  if ((v66 - 32) >= 0xFFFFFFDF)
  {
    v67 = 0;
    if ((v66 + 1) > 1)
      v68 = (v66 + 1);
    else
      v68 = 1;
    v69 = a2;
    do
    {
      v70 = (v20 + 1);
      v71 = ((_BYTE)v20 + 1) & 7;
      v72 = (unsigned int *)((char *)v21 + (v70 >> 3));
      v73 = bswap32(*v72) << (v70 & 7);
      if (v72 > v3)
        v72 = v3;
      if ((v22 & 0x80000000) != 0)
      {
        v75 = __clz(v73 | 1);
        if (!v73)
          ++v75;
        v76 = v73 << (v75 + 1) >> -(char)v75;
        if (!v75)
          v76 = 0;
        v77 = 1 << v75;
        v78 = v71 + 2 * v75 + 1;
        v79 = v78 & 7;
        v80 = (unsigned int *)((char *)v72 + (v78 >> 3));
        v81 = bswap32(*v80) << v79;
        if (v80 <= v3)
          v82 = v80;
        else
          v82 = v3;
        a2[3 * v67 + 348] = ((v76 + v77) >> 1) - ((v76 + v77) >> 1) * 2 * ((v76 + v77) & 1);
        v83 = __clz(v81 | 1);
        if (!v81)
          ++v83;
        v84 = v81 << (v83 + 1) >> -(char)v83;
        if (v83)
          v85 = v84;
        else
          v85 = 0;
        v86 = 1 << v83;
        v87 = v79 + 2 * v83 + 1;
        v71 = v87 & 7;
        v88 = (unsigned int *)((char *)v82 + (v87 >> 3));
        v73 = bswap32(*v88) << v71;
        if (v88 <= v3)
          v72 = v88;
        else
          v72 = v3;
        v74 = ((v85 + v86) >> 1) - ((v85 + v86) >> 1) * 2 * (((_BYTE)v85 + (_BYTE)v86) & 1);
      }
      else
      {
        v74 = 0;
        a2[3 * v67 + 348] = v28;
      }
      v89 = 0;
      a2[3 * v67 + 540] = v74;
      v90 = (v71 + 1);
      v20 = ((_BYTE)v71 + 1) & 7;
      v21 = (unsigned int *)((char *)v72 + (v90 >> 3));
      v22 = bswap32(*v21) << (v90 & 7);
      if (v21 > v3)
        v21 = v3;
      do
      {
        if ((v73 & 0x80000000) != 0)
        {
          v92 = __clz(v22 | 1);
          if (!v22)
            ++v92;
          v93 = v22 << (v92 + 1) >> -(char)v92;
          if (!v92)
            v93 = 0;
          v94 = 1 << v92;
          v95 = v20 + 2 * v92 + 1;
          v96 = v95 & 7;
          v97 = (unsigned int *)((char *)v21 + (v95 >> 3));
          v98 = bswap32(*v97) << v96;
          if (v97 <= v3)
            v99 = v97;
          else
            v99 = v3;
          v69[v89 + 349] = ((v93 + v94) >> 1) - ((v93 + v94) >> 1) * 2 * ((v93 + v94) & 1);
          v100 = __clz(v98 | 1);
          if (!v98)
            ++v100;
          if (v100)
            v101 = v98 << (v100 + 1) >> -(char)v100;
          else
            v101 = 0;
          v102 = 1 << v100;
          v103 = v96 + 2 * v100 + 1;
          v20 = ((_BYTE)v96 + 2 * (_BYTE)v100 + 1) & 7;
          v21 = (unsigned int *)((char *)v99 + (v103 >> 3));
          v22 = bswap32(*v21) << (v103 & 7);
          if (v21 > v3)
            v21 = v3;
          v91 = ((v101 + v102) >> 1) - ((v101 + v102) >> 1) * 2 * (((_BYTE)v101 + (_BYTE)v102) & 1);
        }
        else
        {
          v91 = 0;
          v69[v89 + 349] = v27;
        }
        v69[v89 + 541] = v91;
        ++v89;
      }
      while (v89 != 2);
      ++v67;
      v69 += 3;
    }
    while (v67 != v68);
    goto LABEL_111;
  }
LABEL_16:
  v24 = 4294958327;
LABEL_112:
  *(_QWORD *)(a1 + 16) = v21;
  *(_DWORD *)(a1 + 32) = v22;
  *(_BYTE *)(a1 + 36) = v20;
  return v24;
}

uint64_t sub_2160DC8EC(unsigned int *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = sub_2160AC930((uint64_t)a1, *(_DWORD *)(a2 + 24), &v7);
  if (!(_DWORD)result)
  {
    result = sub_2160AC8EC(a1, *(_DWORD *)(v7 + 4), &v8);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(v8 + 1336))
      {
        if (*(_BYTE *)(a2 + 32))
          return 4294958327;
        v5 = *(_DWORD *)(v8 + 1332) + 1;
      }
      else
      {
        v6 = *(_DWORD *)(v8 + 1332);
        if (*(_BYTE *)(a2 + 32))
          v5 = v6 + 1;
        else
          v5 = 2 * v6 + 2;
      }
      if (*(_DWORD *)(a2 + 12) > (v5 + v5 * *(_DWORD *)(v8 + 1328)))
        return 4294958327;
      result = 4294958327;
      if ((*(_DWORD *)(v7 + 72) + *(_DWORD *)(a2 + 2720) + 26) <= 0x33)
      {
        if (*(unsigned __int8 *)(a2 + 2716) <= 2u)
          return 0;
        else
          return 4294958327;
      }
    }
  }
  return result;
}

uint64_t sub_2160DC9C0(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(unsigned __int8 *)(result + 36);
  if (a2 < 1)
  {
    v7 = *(_DWORD *)(result + 32);
  }
  else
  {
    v4 = v3 & 7;
    do
    {
      v5 = (v3 + 8) >> 3;
      v6 = (unsigned int *)(v2 + v5);
      if ((unint64_t)(v2 + v5) <= *(_QWORD *)(result + 24))
        v2 += v5;
      else
        v2 = *(_QWORD *)(result + 24);
      v3 = v4;
      --a2;
    }
    while (a2);
    v7 = bswap32(*v6) << v4;
    LOBYTE(v3) = v4;
  }
  *(_QWORD *)(result + 16) = v2;
  *(_DWORD *)(result + 32) = v7;
  *(_BYTE *)(result + 36) = v3;
  return result;
}

uint64_t sub_2160DCA20(uint64_t a1, int a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;

  v3 = a3 + 36548;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int **)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 36);
  v8 = __clz(v6 | 1);
  if (!v6)
    ++v8;
  if (v8 > 0xC)
  {
    v15 = v7 + 1;
    v16 = v15 & 7;
    v17 = (unsigned int *)(v4 + (v15 >> 3));
    v18 = bswap32(*v17) << v16;
    if (v17 > v5)
      v17 = *(unsigned int **)(a1 + 24);
    if (v6 < 0)
    {
      v22 = 0;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = v16;
        v21 = v18;
        v22 = v19 + 1;
        v23 = (v16 + 1);
        v16 = ((_BYTE)v16 + 1) & 7;
        v17 = (unsigned int *)((char *)v17 + (v23 >> 3));
        v18 = bswap32(*v17) << (v23 & 7);
        if (v17 > v5)
          v17 = *(unsigned int **)(a1 + 24);
        if ((v21 & 0x80000000) != 0)
          break;
      }
      while (v19++ < 0x1F);
      if (v22 - 1 > 0x17)
      {
        v25 = v18 >> (48 - v22);
        v26 = ((v20 + 1) & 7) + v22;
        v27 = v26 - 16;
        v11 = v26 & 7;
        v28 = (unsigned int *)((char *)v17 + (v27 >> 3));
        v29 = bswap32(*v28) << v11;
        if (v28 <= v5)
          v30 = v28;
        else
          v30 = *(unsigned int **)(a1 + 24);
        v31 = *(unsigned int *)((char *)v30 + 2);
        v14 = (unsigned int *)((char *)v30 + 2);
        v13 = bswap32(v31) << v11;
        if (v14 > v5)
          v14 = *(unsigned int **)(a1 + 24);
        v32 = __PAIR64__(v25, v29) >> 16;
LABEL_28:
        *v3 = v32 + ~(-1 << v22);
        goto LABEL_29;
      }
    }
    v32 = v18 >> -(char)v22;
    v33 = v16 + v22;
    v11 = ((_BYTE)v16 + (_BYTE)v22) & 7;
    v14 = (unsigned int *)((char *)v17 + (v33 >> 3));
    v13 = bswap32(*v14) << v11;
    if (v14 > v5)
      v14 = *(unsigned int **)(a1 + 24);
    goto LABEL_28;
  }
  v9 = (v6 << (v8 + 1)) >> -(char)v8;
  if (!v8)
    v9 = 0;
  *v3 = v9 + ~(-1 << v8);
  v10 = v7 + 2 * v8 + 1;
  v11 = ((_BYTE)v7 + 2 * (_BYTE)v8 + 1) & 7;
  v12 = (unsigned int *)(v4 + (v10 >> 3));
  v13 = bswap32(*v12) << v11;
  if (v12 <= v5)
    v14 = v12;
  else
    v14 = v5;
LABEL_29:
  a3[36549] = v13 >> 31;
  v34 = ((_BYTE)v11 + 1) & 7;
  v35 = (unsigned int *)((char *)v14 + ((unint64_t)(v11 + 1) >> 3));
  v36 = bswap32(*v35) << v34;
  if (v35 > v5)
    v35 = v5;
  a3[36550] = v36 >> 31;
  v37 = (v34 + 1);
  v38 = v37 & 7;
  v39 = (unsigned int *)((char *)v35 + (v37 >> 3));
  v40 = bswap32(*v39) << (v37 & 7);
  if (v39 > v5)
    v39 = v5;
  a3[36551] = v40 >> 30;
  v41 = (unsigned int *)((char *)v39 + ((v38 + 2) >> 3));
  if (v41 > v5)
    v41 = v5;
  if ((((_BYTE)v38 + 2) & 7) != 0)
    v42 = (unsigned int *)((char *)v41 + 1);
  else
    v42 = v41;
  if (v42 <= v5)
    v5 = v42;
  v43 = bswap32(*v5);
  v44 = (char *)v5 - v4;
  if ((uint64_t)v44 <= a2)
    v45 = 0;
  else
    v45 = -8969;
  *(_QWORD *)(a1 + 16) = v5;
  if (((a2 - (_DWORD)v44) & 0x1FFFFFFF) != 0)
    v46 = 4294958327;
  else
    v46 = v45;
  *(_DWORD *)(a1 + 32) = v43;
  *(_BYTE *)(a1 + 36) = 0;
  return v46;
}

uint64_t sub_2160DCC58(uint64_t a1, int a2, unsigned int *a3)
{
  int *v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  uint64_t result;
  unsigned int v69;
  uint64_t v70;

  v4 = (int *)(a3 + 36554);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int **)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(unsigned __int8 *)(a1 + 36);
  v70 = 0;
  v9 = __clz(v7 | 1);
  if (!v7)
    ++v9;
  v10 = (v7 << (v9 + 1)) >> -(char)v9;
  if (!v9)
    v10 = 0;
  v11 = v10 + ~(-1 << v9);
  *v4 = v11;
  v12 = v8 + 2 * v9 + 1;
  v13 = (unsigned int *)(v5 + (v12 >> 3));
  if (v13 <= v6)
    v14 = (unsigned int *)(v5 + (v12 >> 3));
  else
    v14 = v6;
  if (v11 > 31)
    return 4294958327;
  v17 = *v13;
  if (sub_2160AC8EC(a3, v11, &v70))
    return 4294958327;
  v18 = v12 & 7;
  v19 = bswap32(v17) << (v12 & 7);
  v4[91] = *v4;
  v4[92] = 1;
  v20 = v70;
  if (*(_BYTE *)(v70 + 1425))
  {
    v21 = 0;
    do
    {
      v22 = *(_DWORD *)(v20 + 1852);
      if ((v22 + 1) > 0x18)
      {
        v28 = v19 >> (47 - v22);
        v29 = (v18 + v22 - 15);
        v25 = ((_BYTE)v18 + (_BYTE)v22 - 15) & 7;
        v30 = (unsigned int *)((char *)v14 + (v29 >> 3));
        v31 = bswap32(*v30) << v25;
        if (v30 > v6)
          v30 = v6;
        v32 = *(unsigned int *)((char *)v30 + 2);
        v26 = (unsigned int *)((char *)v30 + 2);
        v27 = bswap32(v32) << v25;
        if (v26 > v6)
          v26 = v6;
        v23 = __PAIR64__(v28, v31) >> 16;
      }
      else
      {
        v23 = v19 >> ~(_BYTE)v22;
        v24 = (v22 + 1 + v18);
        v25 = ((_BYTE)v22 + 1 + (_BYTE)v18) & 7;
        v26 = (unsigned int *)((char *)v14 + (v24 >> 3));
        v27 = bswap32(*v26) << v25;
        if (v26 > v6)
          v26 = v6;
      }
      a3[v21 + 36556] = v23;
      v33 = *(_DWORD *)(v20 + 1852);
      if ((v33 + 1) > 0x18)
      {
        v37 = v27 >> (47 - v33);
        v38 = (v25 + v33 - 15);
        v18 = v38 & 7;
        v39 = (unsigned int *)((char *)v26 + (v38 >> 3));
        v40 = bswap32(*v39) << (v38 & 7);
        if (v39 <= v6)
          v41 = v39;
        else
          v41 = v6;
        v43 = *(unsigned int *)((char *)v41 + 2);
        v42 = (unsigned int *)((char *)v41 + 2);
        v19 = bswap32(v43) << v18;
        if (v42 <= v6)
          v14 = v42;
        else
          v14 = v6;
        v34 = __PAIR64__(v37, v40) >> 16;
      }
      else
      {
        v34 = v27 >> ~(_BYTE)v33;
        v35 = (v33 + 1 + v25);
        v18 = v35 & 7;
        v36 = (unsigned int *)((char *)v26 + (v35 >> 3));
        v19 = bswap32(*v36) << v18;
        if (v36 <= v6)
          v14 = v36;
        else
          v14 = v6;
      }
      a3[v21++ + 36588] = v34;
    }
    while (v21 <= *(_DWORD *)(v20 + 1456));
  }
  if (*(_BYTE *)(v20 + 1426))
  {
    v44 = 0;
    do
    {
      v45 = *(_DWORD *)(v20 + 1852);
      if ((v45 + 1) > 0x18)
      {
        v51 = v19 >> (47 - v45);
        v52 = (v18 + v45 - 15);
        v48 = ((_BYTE)v18 + (_BYTE)v45 - 15) & 7;
        v53 = (unsigned int *)((char *)v14 + (v52 >> 3));
        v54 = bswap32(*v53) << v48;
        if (v53 > v6)
          v53 = v6;
        v55 = *(unsigned int *)((char *)v53 + 2);
        v49 = (unsigned int *)((char *)v53 + 2);
        v50 = bswap32(v55) << v48;
        if (v49 > v6)
          v49 = v6;
        v46 = __PAIR64__(v51, v54) >> 16;
      }
      else
      {
        v46 = v19 >> ~(_BYTE)v45;
        v47 = (v45 + 1 + v18);
        v48 = ((_BYTE)v45 + 1 + (_BYTE)v18) & 7;
        v49 = (unsigned int *)((char *)v14 + (v47 >> 3));
        v50 = bswap32(*v49) << v48;
        if (v49 > v6)
          v49 = v6;
      }
      a3[v44 + 36556] = v46;
      v56 = *(_DWORD *)(v20 + 1852);
      if ((v56 + 1) > 0x18)
      {
        v60 = v50 >> (47 - v56);
        v61 = (v48 + v56 - 15);
        v18 = v61 & 7;
        v62 = (unsigned int *)((char *)v49 + (v61 >> 3));
        v63 = bswap32(*v62) << (v61 & 7);
        if (v62 <= v6)
          v64 = v62;
        else
          v64 = v6;
        v66 = *(unsigned int *)((char *)v64 + 2);
        v65 = (unsigned int *)((char *)v64 + 2);
        v19 = bswap32(v66) << v18;
        if (v65 <= v6)
          v14 = v65;
        else
          v14 = v6;
        v57 = __PAIR64__(v60, v63) >> 16;
      }
      else
      {
        v57 = v50 >> ~(_BYTE)v56;
        v58 = (v56 + 1 + v48);
        v18 = v58 & 7;
        v59 = (unsigned int *)((char *)v49 + (v58 >> 3));
        v19 = bswap32(*v59) << v18;
        if (v59 <= v6)
          v14 = v59;
        else
          v14 = v6;
      }
      a3[v44++ + 36588] = v57;
    }
    while (v44 <= *(_DWORD *)(v20 + 1456));
  }
  v67 = v18 ? (unsigned int *)((char *)v14 + 1) : v14;
  if (v67 > v6)
    v67 = v6;
  if ((uint64_t)v67 - v5 > a2)
    return 4294958327;
  result = 0;
  v69 = bswap32(*v67);
  *(_QWORD *)(a1 + 16) = v67;
  *(_DWORD *)(a1 + 32) = v69;
  *(_BYTE *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_2160DD00C(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;

  v3 = (_QWORD *)(a3 + 146560);
  v4 = *(unsigned int **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 36);
  v8 = a2 - 17;
  if (a2 >= 17)
  {
    v11 = 0;
    v9 = v7 & 7;
    do
    {
      *((_BYTE *)v3 + v11) = HIBYTE(v6);
      v4 = (unsigned int *)((char *)v4 + ((unint64_t)(v7 + 8) >> 3));
      v6 = bswap32(*v4) << v9;
      if ((unint64_t)v4 > v5)
        v4 = (unsigned int *)v5;
      ++v11;
      v7 = v9;
    }
    while (v11 != 16);
    if (*v3 == 0x674D1BC93BCC5E61 && *(_QWORD *)(a3 + 146568) == 0x7AA09944698764BDLL)
    {
      *(_BYTE *)(a3 + 146576) = 1;
      *(_BYTE *)(a3 + 146577) = HIBYTE(v6);
      v13 = *(unsigned int *)((char *)v4 + 1);
      v4 = (unsigned int *)((char *)v4 + 1);
      v14 = HIBYTE(v6) & 0xF;
      v15 = v6 >> 28;
      v16 = bswap32(v13) << v9;
      if ((unint64_t)v4 > v5)
        v4 = (unsigned int *)v5;
      *(_BYTE *)(a3 + 146578) = v14;
      *(_BYTE *)(a3 + 146579) = v15;
      v6 = v16;
    }
    else
    {
      v8 = a2 - 16;
      *(_BYTE *)(a3 + 146576) = 0;
    }
    if (v8 >= 1)
    {
      do
      {
        v17 = (unsigned int *)((char *)v4 + 1);
        if ((unint64_t)v4 + 1 <= v5)
          v4 = (unsigned int *)((char *)v4 + 1);
        else
          v4 = (unsigned int *)v5;
        --v8;
      }
      while (v8);
      v6 = bswap32(*v17) << v9;
    }
  }
  else
  {
    if (a2 < 1)
    {
      LOBYTE(v9) = *(_BYTE *)(a1 + 36);
    }
    else
    {
      v9 = v7 & 7;
      do
      {
        v10 = (unsigned int *)((char *)v4 + ((v7 + 8) >> 3));
        if ((unint64_t)v10 <= v5)
          v4 = (unsigned int *)((char *)v4 + ((v7 + 8) >> 3));
        else
          v4 = *(unsigned int **)(a1 + 24);
        v7 = v9;
        --a2;
      }
      while (a2);
      v6 = bswap32(*v10) << v9;
    }
    *(_BYTE *)(a3 + 146576) = 0;
  }
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 36) = v9;
  return 0;
}

uint64_t sub_2160DD15C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unint64_t v67;
  unsigned int *v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int *v73;
  int v74;
  unsigned int *v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  int v80;
  unsigned int *v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int *v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unint64_t v88;
  int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;

  v4 = a3 + 36620;
  v6 = *(unsigned int **)(a1 + 16);
  v5 = *(unsigned int **)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(unsigned __int8 *)(a1 + 36);
  v99 = 0;
  if (sub_2160AC8EC(a3, a3[36645], &v99))
    return 4294958327;
  v10 = v99;
  if (*(_BYTE *)(v99 + 1425) || *(_BYTE *)(v99 + 1426))
  {
    v11 = *(_DWORD *)(v99 + 1856);
    if ((v11 + 1) > 0x18)
    {
      v17 = v7 >> (47 - v11);
      v18 = (v8 + v11 - 15);
      v14 = ((_BYTE)v8 + (_BYTE)v11 - 15) & 7;
      v19 = (unsigned int *)((char *)v6 + (v18 >> 3));
      v20 = bswap32(*v19) << v14;
      if (v19 > v5)
        v19 = v5;
      v21 = *(unsigned int *)((char *)v19 + 2);
      v15 = (unsigned int *)((char *)v19 + 2);
      v16 = bswap32(v21) << v14;
      if (v15 > v5)
        v15 = v5;
      v12 = __PAIR64__(v17, v20) >> 16;
    }
    else
    {
      v12 = v7 >> ~(_BYTE)v11;
      v13 = (v11 + 1 + v8);
      v14 = ((_BYTE)v11 + 1 + (_BYTE)v8) & 7;
      v15 = (unsigned int *)((char *)v6 + (v13 >> 3));
      v16 = bswap32(*v15) << v14;
      if (v15 > v5)
        v15 = v5;
    }
    *v4 = v12;
    v22 = *(_DWORD *)(v10 + 1860);
    if ((v22 + 1) > 0x18)
    {
      v26 = v16 >> (47 - v22);
      v27 = (v14 + v22 - 15);
      v8 = v27 & 7;
      v28 = (unsigned int *)((char *)v15 + (v27 >> 3));
      v29 = bswap32(*v28) << v8;
      if (v28 > v5)
        v28 = v5;
      v31 = *(unsigned int *)((char *)v28 + 2);
      v30 = (unsigned int *)((char *)v28 + 2);
      v7 = bswap32(v31) << v8;
      if (v30 <= v5)
        v6 = v30;
      else
        v6 = v5;
      v23 = __PAIR64__(v26, v29) >> 16;
    }
    else
    {
      v23 = v16 >> ~(_BYTE)v22;
      v24 = (v22 + 1 + v14);
      v8 = v24 & 7;
      v25 = (unsigned int *)((char *)v15 + (v24 >> 3));
      v7 = bswap32(*v25) << v8;
      if (v25 <= v5)
        v6 = v25;
      else
        v6 = v5;
    }
    v4[1] = v23;
  }
  if (*(_BYTE *)(v10 + 1428))
  {
    v32 = v7 >> 28;
    v4[2] = v7 >> 28;
    v33 = (v8 + 4) >> 3;
    v8 = (v8 + 4) & 7;
    v34 = (unsigned int *)((char *)v6 + v33);
    if ((unsigned int *)((char *)v6 + v33) <= v5)
      v6 = (unsigned int *)((char *)v6 + v33);
    else
      v6 = v5;
    if (v32 <= 8)
    {
      v35 = bswap32(*v34) << v8;
      v36 = qword_2160F9808[v32];
      v37 = v4 + 3;
      while (1)
      {
        *v37 = v35 >> 31;
        v38 = (v8 + 1);
        v8 = ((_BYTE)v8 + 1) & 7;
        v39 = (unsigned int *)((char *)v6 + (v38 >> 3));
        v40 = bswap32(*v39) << (v38 & 7);
        v6 = v39 <= v5 ? v39 : v5;
        if ((v35 & 0x80000000) != 0)
          break;
        v35 = v40;
LABEL_92:
        ++v37;
        if (!--v36)
          goto LABEL_93;
      }
      v4[6] = v40 >> 30;
      v41 = ((_BYTE)v8 + 2) & 7;
      v42 = (unsigned int *)((char *)v6 + ((unint64_t)(v8 + 2) >> 3));
      v43 = bswap32(*v42) << v41;
      if (v42 > v5)
        v42 = v5;
      v4[7] = v43 >> 31;
      v44 = (v41 + 1);
      v45 = v44 & 7;
      v46 = (unsigned int *)((char *)v42 + (v44 >> 3));
      v47 = bswap32(*v46) << (v44 & 7);
      if (v46 > v5)
        v46 = v5;
      v4[8] = v47 >> 27;
      v48 = (unsigned int *)((char *)v46 + ((unint64_t)(v45 + 5) >> 3));
      v49 = bswap32(*v48) << ((v45 + 5) & 7);
      if (v48 > v5)
        v48 = v5;
      v4[9] = v49 >> 31;
      v50 = (((_BYTE)v45 + 5) & 7u) + 1;
      v51 = ((((_BYTE)v45 + 5) & 7) + 1) & 7;
      v52 = (unsigned int *)((char *)v48 + (v50 >> 3));
      v53 = bswap32(*v52) << (v50 & 7);
      if (v52 > v5)
        v52 = v5;
      v4[10] = v53 >> 31;
      v54 = (v51 + 1);
      v55 = ((_BYTE)v51 + 1) & 7;
      v56 = (unsigned int *)((char *)v52 + (v54 >> 3));
      v57 = bswap32(*v56) << (v54 & 7);
      if (v56 <= v5)
        v58 = v56;
      else
        v58 = v5;
      v4[11] = v57 >> 31;
      v59 = ((_BYTE)v55 + 1) & 7;
      v60 = (unsigned int *)((char *)v58 + ((unint64_t)(v55 + 1) >> 3));
      v61 = bswap32(*v60) << v59;
      if (v60 <= v5)
        v62 = v60;
      else
        v62 = v5;
      v4[12] = HIBYTE(v61);
      v64 = *(unsigned int *)((char *)v62 + 1);
      v63 = (unsigned int *)((char *)v62 + 1);
      v65 = bswap32(v64) << v59;
      if (v63 <= v5)
        v66 = v63;
      else
        v66 = v5;
      if ((v49 & 0x80000000) != 0)
      {
        v4[13] = v65 >> 26;
        v79 = (v59 + 6);
        v80 = v79 & 7;
        v81 = (unsigned int *)((char *)v66 + (v79 >> 3));
        v82 = bswap32(*v81) << v80;
        if (v81 > v5)
          v81 = v5;
        v4[14] = v82 >> 26;
        v83 = (v80 + 6);
        v8 = v83 & 7;
        v84 = (unsigned int *)((char *)v81 + (v83 >> 3));
        v35 = bswap32(*v84) << v8;
        if (v84 <= v5)
          v6 = v84;
        else
          v6 = v5;
      }
      else
      {
        v4[16] = v65 >> 31;
        v67 = (v59 + 1);
        v8 = v67 & 7;
        v68 = (unsigned int *)((char *)v66 + (v67 >> 3));
        v35 = bswap32(*v68) << (v67 & 7);
        if (v68 <= v5)
          v6 = v68;
        else
          v6 = v5;
        if ((v65 & 0x80000000) == 0)
          goto LABEL_79;
        v4[13] = v35 >> 26;
        v69 = ((_BYTE)v8 + 6) & 7;
        v70 = (unsigned int *)((char *)v6 + ((unint64_t)(v8 + 6) >> 3));
        v71 = bswap32(*v70) << v69;
        if (v70 > v5)
          v70 = v5;
        v4[17] = v71 >> 31;
        v72 = (v69 + 1);
        v8 = v72 & 7;
        v73 = (unsigned int *)((char *)v70 + (v72 >> 3));
        v35 = bswap32(*v73) << v8;
        v6 = v73 <= v5 ? v73 : v5;
        if ((v71 & 0x80000000) == 0)
          goto LABEL_79;
        v4[14] = v35 >> 26;
        v74 = ((_BYTE)v8 + 6) & 7;
        v75 = (unsigned int *)((char *)v6 + ((unint64_t)(v8 + 6) >> 3));
        v76 = bswap32(*v75) << v74;
        if (v75 > v5)
          v75 = v5;
        v4[18] = v76 >> 31;
        v77 = (v74 + 1);
        v8 = v77 & 7;
        v78 = (unsigned int *)((char *)v75 + (v77 >> 3));
        v35 = bswap32(*v78) << v8;
        v6 = v78 <= v5 ? v78 : v5;
        if ((v76 & 0x80000000) == 0)
          goto LABEL_79;
      }
      v4[15] = v35 >> 27;
      v85 = (v8 + 5);
      v8 = ((_BYTE)v8 + 5) & 7;
      v86 = (unsigned int *)((char *)v6 + (v85 >> 3));
      v35 = bswap32(*v86) << (v85 & 7);
      if (v86 <= v5)
        v6 = v86;
      else
        v6 = v5;
LABEL_79:
      v87 = *(_DWORD *)(v10 + 1864);
      if (v87)
      {
        v88 = v87 + v8;
        if (v87 > 0x18)
        {
          v91 = v35 >> (48 - v87);
          v8 = v88 & 7;
          v92 = (unsigned int *)((char *)v6 + ((unint64_t)(v88 - 16) >> 3));
          v93 = bswap32(*v92) << (v88 & 7);
          if (v92 <= v5)
            v94 = v92;
          else
            v94 = v5;
          v96 = *(unsigned int *)((char *)v94 + 2);
          v95 = (unsigned int *)((char *)v94 + 2);
          v35 = bswap32(v96) << v8;
          if (v95 <= v5)
            v6 = v95;
          else
            v6 = v5;
          v89 = __PAIR64__(v91, v93) >> 16;
        }
        else
        {
          v89 = v35 >> -(char)v87;
          v8 = v88 & 7;
          v90 = (unsigned int *)((char *)v6 + (v88 >> 3));
          v35 = bswap32(*v90) << v8;
          if (v90 <= v5)
            v6 = v90;
          else
            v6 = v5;
        }
        v4[19] = v89;
      }
      goto LABEL_92;
    }
  }
LABEL_93:
  result = 0;
  if (v8)
    v97 = (unsigned int *)((char *)v6 + 1);
  else
    v97 = v6;
  if (v97 > v5)
    v97 = v5;
  v98 = *v97;
  *(_QWORD *)(a1 + 16) = v97;
  *(_DWORD *)(a1 + 32) = bswap32(v98);
  *(_BYTE *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_2160DD684(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 36) + 1;
  v4 = *(_QWORD *)(a1 + 16) + (v3 >> 3);
  if (v4 > v2)
    v4 = *(_QWORD *)(a1 + 24);
  v5 = 4294958327;
  if ((*(_DWORD *)(a1 + 32) & 0x80000000) != 0)
    return v5;
  v6 = (unsigned int *)(v4 + ((unint64_t)((v3 & 7) + 2) >> 3));
  if (((bswap32(*v6) << (((v3 & 7) + 2) & 7)) & 0xF8000000) != 0x30000000)
    return v5;
  v5 = 0;
  if ((unint64_t)v6 > v2)
    v6 = *(unsigned int **)(a1 + 24);
  v9 = (((v3 & 7) + 2) & 7) + 5;
  v10 = (unsigned int *)((char *)v6 + (v9 >> 3));
  if ((unint64_t)v10 <= v2)
    v11 = (unsigned int *)((char *)v6 + (v9 >> 3));
  else
    v11 = *(unsigned int **)(a1 + 24);
  LODWORD(v9) = v9 & 7;
  v12 = bswap32(*v10) << v9;
  while (2)
  {
    v13 = (v9 + 8);
    v14 = v9 & 7;
    v15 = (unsigned int *)((char *)v11 + (v13 >> 3));
    v16 = bswap32(*v15);
    if ((unint64_t)v15 <= v2)
      v17 = v15;
    else
      v17 = (unsigned int *)v2;
    v18 = v16 << v14;
    v19 = HIBYTE(v12);
    if (v19 == 255)
    {
      v20 = 0;
      do
      {
        v20 += 255;
        v21 = *(unsigned int *)((char *)v17 + 1);
        v17 = (unsigned int *)((char *)v17 + 1);
        v22 = bswap32(v21);
        if ((unint64_t)v17 > v2)
          v17 = (unsigned int *)v2;
        v19 = HIBYTE(v18);
        v18 = v22 << v14;
      }
      while (v19 == 255);
    }
    else
    {
      v20 = 0;
    }
    v24 = *(unsigned int *)((char *)v17 + 1);
    v23 = (char *)v17 + 1;
    v25 = bswap32(v24);
    if ((unint64_t)v23 > v2)
      v23 = (char *)v2;
    v26 = v25 << v14;
    v27 = HIBYTE(v18);
    if (HIBYTE(v18) == 255)
    {
      v28 = 0;
      do
      {
        v28 += 255;
        v29 = *(_DWORD *)++v23;
        v30 = bswap32(v29);
        if ((unint64_t)v23 > v2)
          v23 = (char *)v2;
        v27 = HIBYTE(v26);
        v26 = v30 << v14;
      }
      while (v27 == 255);
    }
    else
    {
      v28 = 0;
    }
    v31 = v28 + v27;
    if ((unint64_t)&v23[v31] > *(_QWORD *)a1 + (unint64_t)*(unsigned int *)(a1 + 8))
      return 4294958327;
    *(_QWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 32) = v26;
    *(_BYTE *)(a1 + 36) = v14;
    switch(v20 + v19)
    {
      case 0u:
        v32 = sub_2160DCC58(a1, v31, a2);
        goto LABEL_37;
      case 1u:
        v5 = sub_2160DD15C(a1, v31, a2);
        goto LABEL_38;
      case 5u:
        sub_2160DD00C(a1, v31, (uint64_t)a2);
        v5 = 0;
        goto LABEL_38;
      case 6u:
        v32 = sub_2160DCA20(a1, v31, a2);
LABEL_37:
        v5 = v32;
        if (!(_DWORD)v32)
          goto LABEL_38;
        return v5;
      default:
        sub_2160DC9C0(a1, v31);
LABEL_38:
        v11 = *(unsigned int **)(a1 + 16);
        v2 = *(_QWORD *)(a1 + 24);
        v12 = *(_DWORD *)(a1 + 32);
        v9 = *(unsigned __int8 *)(a1 + 36);
        if (HIBYTE(v12) != 128)
        {
          if (*(_DWORD *)(a1 + 8) <= (int)v11 - *(_DWORD *)a1)
          {
            if (!(_DWORD)v5)
              goto LABEL_50;
            return v5;
          }
          continue;
        }
        v33 = v9 + 1;
        LOBYTE(v9) = 0;
        v11 = (unsigned int *)((char *)v11 + (v33 >> 3));
        if ((unint64_t)v11 > v2)
          v11 = *(unsigned int **)(a1 + 24);
        if ((v33 & 7) != 0)
          v11 = (unsigned int *)((char *)v11 + 1);
        if ((unint64_t)v11 > v2)
          v11 = *(unsigned int **)(a1 + 24);
        v12 = bswap32(*v11);
        if (!(_DWORD)v5)
        {
LABEL_50:
          *(_QWORD *)(a1 + 16) = v11;
          *(_DWORD *)(a1 + 32) = v12;
          *(_BYTE *)(a1 + 36) = v9;
        }
        return v5;
    }
  }
}

uint64_t sub_2160DD8F4(int a1, int a2)
{
  int v2;

  if (a1 + a2 >= 51)
    v2 = 51;
  else
    v2 = a1 + a2;
  return byte_2160F9850[v2 - ((a1 + a2) & ((a1 + a2) >> 31))];
}

uint64_t sub_2160DD91C(int a1, int a2)
{
  return byte_2160F9884[a2 + 12 + a1];
}

uint64_t sub_2160DD934(_BYTE *a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  int v4;

  if (*a1 != 6)
    return 255;
  v1 = a1 + 17;
  v2 = 260;
  do
  {
    v3 = *(v1 - 16);
    ++v1;
    v2 -= 255;
  }
  while (v3 == 255);
  if (v3 != v2)
    return 255;
  do
  {
    v4 = *(v1 - 16);
    ++v1;
  }
  while (v4 == 255);
  if (qword_254E15F70 == *((_QWORD *)v1 - 2) && unk_254E15F78 == *((_QWORD *)v1 - 1))
    return *v1;
  else
    return 255;
}

uint64_t sub_2160DD9A0(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t result;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  result = 0;
  *(_DWORD *)(a1 + 148) = 1065353216;
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_DWORD *)(a1 + 4) = a3 * a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  if (!a4)
  {
    v6 = sub_2160CB5D4(4 * (a3 * a2));
    *(_QWORD *)(a1 + 40) = v6;
    if (!v6)
      goto LABEL_11;
    v7 = sub_2160CB5D4(*(unsigned int *)(a1 + 4));
    *(_QWORD *)(a1 + 72) = v7;
    if (!v7)
      goto LABEL_11;
    v8 = sub_2160CB5D4(2 * *(unsigned int *)(a1 + 4));
    *(_QWORD *)(a1 + 112) = v8;
    if (!v8)
      goto LABEL_11;
    v9 = sub_2160CB5D4(2 * *(unsigned int *)(a1 + 4));
    *(_QWORD *)(a1 + 120) = v9;
    if (!v9)
      goto LABEL_11;
    v10 = sub_2160CB5D4(2 * *(unsigned int *)(a1 + 4));
    *(_QWORD *)(a1 + 128) = v10;
    if (!v10)
      goto LABEL_11;
    v11 = sub_2160CB5D4(*(unsigned int *)(a1 + 4));
    *(_QWORD *)(a1 + 96) = v11;
    if (v11
      && (v12 = sub_2160CB5D4(4 * (4 * *(_DWORD *)(a1 + 4))), (*(_QWORD *)(a1 + 160) = v12) != 0)
      && (v13 = sub_2160CB5D4((4 * *(_DWORD *)(a1 + 4))), (*(_QWORD *)(a1 + 152) = v13) != 0))
    {
      return 0;
    }
    else
    {
LABEL_11:
      sub_2160DDAA4((void **)a1);
      return 1;
    }
  }
  return result;
}

void sub_2160DDAA4(void **a1)
{
  j__free(a1[5]);
  a1[5] = 0;
  j__free(a1[9]);
  a1[9] = 0;
  j__free(a1[14]);
  a1[14] = 0;
  j__free(a1[15]);
  a1[15] = 0;
  j__free(a1[16]);
  a1[16] = 0;
  j__free(a1[12]);
  a1[12] = 0;
  j__free(a1[20]);
  a1[20] = 0;
  j__free(a1[19]);
  a1[19] = 0;
}

_QWORD *sub_2160DDB20(uint64_t a1, int a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = sub_2160CB5FC((void *)0x90);
  v7 = v6;
  if (v6)
  {
    v6[3] = a1;
    *(_BYTE *)v6 = 0;
    *((_DWORD *)v6 + 1) = a2;
    *((_DWORD *)v6 + 2) = a3;
    v6[2] = sub_2160EC80C();
  }
  return v7;
}

pthread_mutex_t *sub_2160DDB74(pthread_mutex_t *result)
{
  uint64_t v1;

  if (!LOBYTE(result->__sig))
  {
    v1 = (uint64_t)result;
    sub_2160EC880(*(pthread_mutex_t **)&result->__opaque[8]);
    if (!*(_BYTE *)v1)
    {
      sub_215FE4C4C(v1, *(_QWORD *)(v1 + 24), *(_DWORD *)(v1 + 4), *(_DWORD *)(v1 + 8));
      *(_BYTE *)v1 = 1;
    }
    return sub_2160EC88C(*(pthread_mutex_t **)(v1 + 16));
  }
  return result;
}

void sub_2160DDBD0(uint64_t a1)
{
  sub_2160EC854(*(pthread_mutex_t **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)a1)
    sub_215FE4D84(a1);
}

pthread_mutex_t *sub_2160DDC10(pthread_mutex_t *result)
{
  uint64_t v1;
  int sig_high;
  int v3;

  v1 = (uint64_t)result;
  sig_high = HIDWORD(result[1].__sig);
  if (sig_high)
  {
    sub_2160EC880(*(pthread_mutex_t **)&result->__opaque[40]);
    if (*(_DWORD *)(v1 + 68))
    {
      *(_DWORD *)(v1 + 68) = 0;
      sub_215FE4FF4(v1);
    }
    result = sub_2160EC88C(*(pthread_mutex_t **)(v1 + 48));
  }
  v3 = *(_DWORD *)(v1 + 72);
  if (v3)
  {
    sub_2160EC880(*(pthread_mutex_t **)(v1 + 56));
    if (*(_DWORD *)(v1 + 72))
    {
      *(_DWORD *)(v1 + 72) = 0;
      sub_215FE55C0(v1);
    }
    result = sub_2160EC88C(*(pthread_mutex_t **)(v1 + 56));
  }
  if (!sig_high)
  {
    sub_2160EC880(*(pthread_mutex_t **)(v1 + 48));
    result = sub_2160EC88C(*(pthread_mutex_t **)(v1 + 48));
    if (v3)
      goto LABEL_11;
LABEL_13:
    sub_2160EC880(*(pthread_mutex_t **)(v1 + 56));
    result = sub_2160EC88C(*(pthread_mutex_t **)(v1 + 56));
    goto LABEL_11;
  }
  if (!v3)
    goto LABEL_13;
LABEL_11:
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t sub_2160DDCC0(unsigned int a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_2160DDD08 + 4 * byte_2160F98D0[HIWORD(a1) & 3 | (4 * (a1 & 3))]))(HIWORD(a1) & 3 | (4 * (a1 & 3)));
}

uint64_t sub_2160DDD08@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  result = 1;
  *a1 = v5 + a3 + v4 * v3;
  *a2 = v6 + a3 + v4 * v3;
  return result;
}

uint64_t sub_2160DDE40(unsigned int a1)
{
  return ((uint64_t (*)(void))((char *)sub_2160DDE80 + 4 * byte_2160F98E0[HIWORD(a1) & 3 | (4 * (a1 & 3))]))();
}

uint64_t sub_2160DDE80@<X0>(_QWORD *a1@<X2>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = 0;
  v6 = v4 + a2;
  *a1 = v6 - v2;
  a1[1] = v6;
  v7 = v3 + a2;
  a1[2] = v7 - 1;
  a1[3] = v7;
  return result;
}

uint64_t sub_2160DE1A8(unsigned int a1, uint64_t a2, _WORD *a3)
{
  int v4;
  int8x16_t *v5;
  uint64_t result;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(int8x16_t **)(a2 + 56);
  if (sub_2160DDCC0(a1))
    result = off_253D723D8(v5, 16, 0, 0, v4);
  else
    result = off_253D723C8(v5, 16, 0, v4);
  *a3 = result;
  return result;
}

uint64_t sub_2160DE23C(unsigned int a1, uint64_t a2, _WORD *a3)
{
  int v4;
  int8x16_t *v5;
  uint64_t result;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(int8x16_t **)(a2 + 56);
  if (sub_2160DDCC0(a1))
    result = off_253D723E8(v5, 16, 0, 0, v4);
  else
    result = off_253D723E0(v5, 16, 0, v4);
  *a3 = result;
  return result;
}

uint64_t sub_2160DE2D0(unsigned int a1, uint64_t a2, _WORD *a3)
{
  int v4;
  unint64_t *v5;
  double v6;
  double v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t result;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unint64_t **)(a2 + 56);
  if (sub_2160DDCC0(a1))
    result = off_253D723F8(v5, 16, 0, 0, v4, v6, v7, (uint8x16_t)v8, v9, v10, (uint8x16_t)v11, v12, (uint8x16_t)v13);
  else
    result = off_253D723F0((uint64_t *)v5, 16, 0, v4, v6, v7, v8, v9, v10, v11, v12, v13);
  *a3 = result;
  return result;
}

uint64_t sub_2160DE364(unsigned int a1, uint64_t a2, _WORD *a3)
{
  int v4;
  unint64_t *v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t result;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unint64_t **)(a2 + 56);
  if (sub_2160DDCC0(a1))
    result = off_253D72410(v5, 16, 0, 0, v4, (uint8x16_t)v6, v7, (uint8x16_t)v8, v9, (uint8x16_t)v10, (uint8x16_t)v11, (uint8x16_t)v12);
  else
    result = off_253D72408(v5, 16, 0, v4, v6, v7, v8, v9, v10, v11, v12);
  *a3 = result;
  return result;
}

double sub_2160DE3F8(unsigned int a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v4;
  unint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  int32x4_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  int32x4_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t *v21;
  uint8x16_t *v22;
  int32x4_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t *v26;
  uint8x16_t *v27;
  int32x4_t v28;
  int32x4_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t *v34;
  int32x4_t v35;
  uint8x16_t v36;
  uint8x16_t *v37;
  uint8x16_t v38;
  uint8x16_t *v39;
  int32x4_t v40;
  uint8x16_t v41;
  uint8x16_t *v42;
  int32x4_t v43;
  int32x4_t v44;
  double result;

  v4 = *(uint8x16_t **)(a2 + 56);
  v6 = (uint8x16_t *)*(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  if (sub_2160DDCC0(a1))
  {
    v7 = (uint8x16_t *)((char *)v6 + v5 + v5);
    v8 = v7;
    v9 = *v7;
    v10 = *v7;
    v11 = (uint8x16_t *)((char *)v7 + v5);
    v12 = (uint8x16_t *)((char *)v8 + v5);
    v13 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)v6 + v5), *(uint8x16_t *)((char *)v6 + v5)), v4[3])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*v6, *v6), v4[1]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(v9, v10), v4[5])))));
    v14 = *v11;
    v15 = *v12;
    v16 = (uint8x16_t *)((char *)v11 + v5);
    v17 = (uint8x16_t *)((char *)v12 + v5);
    v18 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(v14, v15), v4[7]))));
    v19 = *v16;
    v20 = *v17;
    v21 = (uint8x16_t *)((char *)v16 + v5);
    v22 = (uint8x16_t *)((char *)v17 + v5);
    v23 = vaddq_s32(v18, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(v19, v20), v4[9])))));
    v24 = *v21;
    v25 = *v22;
    v26 = (uint8x16_t *)((char *)v21 + v5);
    v27 = (uint8x16_t *)((char *)v22 + v5);
    v28 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)v5, *(uint8x16_t *)v5), v4[2])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(MEMORY[0], MEMORY[0]), *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(2 * v5), *(uint8x16_t *)(2 * v5)), v4[4]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(5 * v5), *(uint8x16_t *)(5 * v5)), v4[10]))))), vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(3 * v5), *(uint8x16_t *)(3 * v5)), v4[6])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(4 * v5), *(uint8x16_t *)(4 * v5)), v4[8]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(6 * v5), *(uint8x16_t *)(6 * v5)), v4[12]))))));
    v29 = vaddq_s32(vaddq_s32(v13, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(v24, v25), v4[11]))))), vaddq_s32(v23, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*v26, *v27), v4[13]))))));
    v30 = vrhaddq_u8(*(uint8x16_t *)(7 * v5), *(uint8x16_t *)(7 * v5));
    v31 = vrhaddq_u8(*(uint8x16_t *)((char *)v26 + v5), *(uint8x16_t *)((char *)v27 + v5));
  }
  else
  {
    v32 = (uint8x16_t *)((char *)v6 + v5 + v5);
    v33 = *v32;
    v34 = (uint8x16_t *)((char *)v32 + v5);
    v35 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v6 + v5), v4[3])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v6, v4[1]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v33, v4[5])))));
    v36 = *v34;
    v37 = (uint8x16_t *)((char *)v34 + v5);
    v38 = *v37;
    v39 = (uint8x16_t *)((char *)v37 + v5);
    v40 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, v4[7])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, v4[9])))));
    v41 = *v39;
    v42 = (uint8x16_t *)((char *)v39 + v5);
    v28 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v5, v4[2])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(MEMORY[0], *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(2 * v5), v4[4]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(5 * v5), v4[10]))))), vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(3 * v5), v4[6])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(4 * v5), v4[8]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(6 * v5), v4[12]))))));
    v30 = *(uint8x16_t *)(7 * v5);
    v31 = *(uint8x16_t *)((char *)v42 + v5);
    v29 = vaddq_s32(vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v41, v4[11]))))), vaddq_s32(v40, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v42, v4[13]))))));
  }
  v43 = vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, v4[14])))));
  v44 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v31, v4[15])))));
  *(_QWORD *)&result = vaddq_s32(vaddq_s32(vaddq_s32(v43, v44), vdupq_laneq_s32(v43, 2)), vdupq_laneq_s32(v44, 2)).u64[0];
  *a3 = LOWORD(result);
  return result;
}

double sub_2160DE884(unsigned int a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v4;
  unint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  int32x4_t v8;
  int32x4_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  int32x4_t v13;
  int32x4_t v14;
  double result;

  v4 = *(uint8x16_t **)(a2 + 56);
  v6 = (uint8x16_t *)*(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  if (sub_2160DDCC0(a1))
  {
    v7 = (uint8x16_t *)((char *)v6 + v5 + v5);
    v8 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)v5, *(uint8x16_t *)v5), v4[2])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(MEMORY[0], MEMORY[0]), *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(2 * v5), *(uint8x16_t *)(2 * v5)), v4[4])))));
    v9 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)v6 + v5), *(uint8x16_t *)((char *)v6 + v5)), v4[3])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*v6, *v6), v4[1]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*v7, *v7), v4[5])))));
    v10 = vrhaddq_u8(*(uint8x16_t *)(3 * v5), *(uint8x16_t *)(3 * v5));
    v11 = vrhaddq_u8(*(uint8x16_t *)((char *)v7 + v5), *(uint8x16_t *)((char *)v7 + v5));
  }
  else
  {
    v12 = (uint8x16_t *)((char *)v6 + v5 + v5);
    v8 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v5, v4[2])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(MEMORY[0], *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(2 * v5), v4[4])))));
    v9 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v6 + v5), v4[3])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v6, v4[1]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v12, v4[5])))));
    v10 = *(uint8x16_t *)(3 * v5);
    v11 = *(uint8x16_t *)((char *)v12 + v5);
  }
  v13 = vaddq_s32(v8, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v10, v4[6])))));
  v14 = vaddq_s32(v9, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v11, v4[7])))));
  *(_QWORD *)&result = vaddq_s32(vaddq_s32(vaddq_s32(v13, v14), vdupq_laneq_s32(v13, 2)), vdupq_laneq_s32(v14, 2)).u64[0];
  *a3 = LOWORD(result);
  return result;
}

double sub_2160DEAD0(unsigned int a1, uint64_t a2, _WORD *a3)
{
  unint64_t v5;
  uint64_t *v6;
  int v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int32x4_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint8x16_t v32;
  uint8x16_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint8x16_t v46;
  uint8x16_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  int32x4_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  int64x2_t v59;
  int64x2_t v60;
  uint64_t *v61;
  int32x4_t v62;
  uint64_t *v63;
  uint8x16_t v64;
  uint64_t *v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t *v70;
  uint8x16_t v71;
  uint64_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  uint8x16_t v75;
  int32x4_t v76;
  int32x4_t v77;
  double result;

  v6 = (uint64_t *)*(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  v7 = sub_2160DDCC0(a1);
  v14 = *(_QWORD *)(a2 + 64);
  v15.i64[0] = MEMORY[0];
  v16.i64[0] = *v6;
  if (v7)
  {
    v8.i64[0] = MEMORY[0];
    v9.i64[0] = *v6;
    v17 = (uint8x16_t)vzip1q_s64(v15, v16);
    v18 = (uint8x16_t)vzip1q_s64(v8, v9);
    v8.i64[0] = *(_QWORD *)v5;
    v9.i64[0] = *(uint64_t *)((char *)v6 + v5);
    v10.i64[0] = *(_QWORD *)v5;
    v11.i64[0] = v9.i64[0];
    v19 = (uint64_t *)((char *)v6 + v5 + v5);
    v20 = v19;
    v21 = vrhaddq_u8(v17, v18);
    v22 = vrhaddq_u8((uint8x16_t)vzip1q_s64(v8, v9), (uint8x16_t)vzip1q_s64(v10, v11));
    v23 = *(int64x2_t *)v14;
    v24 = *(int64x2_t *)(v14 + 16);
    v25 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, (uint8x16_t)v24))));
    v23.i64[0] = *(_QWORD *)(2 * v5);
    v24.i64[0] = *v19;
    v10.i64[0] = v23.i64[0];
    v11.i64[0] = *v19;
    v26 = (uint8x16_t)vzip1q_s64(v23, v24);
    v27 = (uint8x16_t)vzip1q_s64(v10, v11);
    v28 = (uint64_t *)((char *)v19 + v5);
    v29 = (uint64_t *)((char *)v20 + v5);
    v10.i64[0] = *(_QWORD *)(3 * v5);
    v11.i64[0] = *v28;
    v12.i64[0] = v10.i64[0];
    v13.i64[0] = *v29;
    v30 = (uint64_t *)((char *)v28 + v5);
    v31 = (uint64_t *)((char *)v29 + v5);
    v32 = vrhaddq_u8(v26, v27);
    v33 = vrhaddq_u8((uint8x16_t)vzip1q_s64(v10, v11), (uint8x16_t)vzip1q_s64(v12, v13));
    v34 = *(int64x2_t *)(v14 + 32);
    v35 = *(int64x2_t *)(v14 + 48);
    v36 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v32, (uint8x16_t)v34))));
    v37 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v33, (uint8x16_t)v35))));
    v38 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, *(uint8x16_t *)v14)))));
    v39 = vaddq_s32(v37, v25);
    v36.i64[0] = *(_QWORD *)(4 * v5);
    v37.i64[0] = *v30;
    v34.i64[0] = v36.i64[0];
    v35.i64[0] = *v31;
    v40 = (uint8x16_t)vzip1q_s64((int64x2_t)v36, (int64x2_t)v37);
    v41 = (uint8x16_t)vzip1q_s64(v34, v35);
    v42 = (uint64_t *)((char *)v30 + v5);
    v43 = (uint64_t *)((char *)v31 + v5);
    v34.i64[0] = *(_QWORD *)(5 * v5);
    v35.i64[0] = *v42;
    v12.i64[0] = v34.i64[0];
    v13.i64[0] = *v43;
    v44 = (uint64_t *)((char *)v42 + v5);
    v45 = (uint64_t *)((char *)v43 + v5);
    v46 = vrhaddq_u8(v40, v41);
    v47 = vrhaddq_u8((uint8x16_t)vzip1q_s64(v34, v35), (uint8x16_t)vzip1q_s64(v12, v13));
    v48 = *(int64x2_t *)(v14 + 128);
    v49 = *(int64x2_t *)(v14 + 144);
    v50 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v46, (uint8x16_t)v48))));
    v51 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, (uint8x16_t)v49))));
    v52 = vaddq_s32(v38, v50);
    v53 = vaddq_s32(v39, v51);
    v50.i64[0] = *(_QWORD *)(6 * v5);
    v51.i64[0] = *v44;
    v48.i64[0] = v50.i64[0];
    v49.i64[0] = *v45;
    v54 = (uint8x16_t)vzip1q_s64((int64x2_t)v50, (int64x2_t)v51);
    v55 = (uint8x16_t)vzip1q_s64(v48, v49);
    v48.i64[0] = *(_QWORD *)(7 * v5);
    v49.i64[0] = *(uint64_t *)((char *)v44 + v5);
    v12.i64[0] = v48.i64[0];
    v13.i64[0] = *(uint64_t *)((char *)v45 + v5);
    v56 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(v54, v55), *(uint8x16_t *)(v14 + 160)))));
    v57 = vabdq_u8(vrhaddq_u8((uint8x16_t)vzip1q_s64(v48, v49), (uint8x16_t)vzip1q_s64(v12, v13)), *(uint8x16_t *)(v14 + 176));
  }
  else
  {
    v58 = (uint8x16_t)vzip1q_s64(v15, v16);
    v16.i64[0] = *(_QWORD *)v5;
    v8.i64[0] = *(uint64_t *)((char *)v6 + v5);
    v59 = *(int64x2_t *)v14;
    v60 = *(int64x2_t *)(v14 + 16);
    v61 = (uint64_t *)((char *)v6 + v5 + v5);
    v62 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v16, v8), (uint8x16_t)v60))));
    v8.i64[0] = *(_QWORD *)(2 * v5);
    v59.i64[0] = *v61;
    v63 = (uint64_t *)((char *)v61 + v5);
    v64 = (uint8x16_t)vzip1q_s64(v8, v59);
    v59.i64[0] = *(_QWORD *)(3 * v5);
    v60.i64[0] = *v63;
    v65 = (uint64_t *)((char *)v63 + v5);
    v66 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v64, *(uint8x16_t *)(v14 + 32)))));
    v67 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v59, v60), *(uint8x16_t *)(v14 + 48)))));
    v68 = vaddq_s32(v66, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v58, *(uint8x16_t *)v14)))));
    v69 = vaddq_s32(v67, v62);
    v66.i64[0] = *(_QWORD *)(4 * v5);
    v67.i64[0] = *v65;
    v70 = (uint64_t *)((char *)v65 + v5);
    v71 = (uint8x16_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v67);
    v67.i64[0] = *(_QWORD *)(5 * v5);
    v60.i64[0] = *v70;
    v72 = (uint64_t *)((char *)v70 + v5);
    v73 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, *(uint8x16_t *)(v14 + 128)))));
    v74 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v67, v60), *(uint8x16_t *)(v14 + 144)))));
    v52 = vaddq_s32(v68, v73);
    v53 = vaddq_s32(v69, v74);
    v73.i64[0] = *(_QWORD *)(6 * v5);
    v74.i64[0] = *v72;
    v75 = (uint8x16_t)vzip1q_s64((int64x2_t)v73, (int64x2_t)v74);
    v74.i64[0] = *(_QWORD *)(7 * v5);
    v60.i64[0] = *(uint64_t *)((char *)v72 + v5);
    v56 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v75, *(uint8x16_t *)(v14 + 160)))));
    v57 = vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v74, v60), *(uint8x16_t *)(v14 + 176));
  }
  v76 = vaddq_s32(v52, v56);
  v77 = vaddq_s32(v53, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v57))));
  *(_QWORD *)&result = vaddq_s32(vaddq_s32(vaddq_s32(v77, v76), vdupq_laneq_s32(v76, 2)), vdupq_laneq_s32(v77, 2)).u64[0];
  *a3 = LOWORD(result);
  return result;
}

double sub_2160DEE58(unsigned int a1, uint64_t a2, _WORD *a3)
{
  unint64_t v5;
  uint64_t *v6;
  int v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint64_t *v19;
  uint8x16_t v20;
  uint8x16_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int32x4_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  int64x2_t v31;
  int64x2_t v32;
  uint64_t *v33;
  uint8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  double result;

  v6 = (uint64_t *)*(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  v7 = sub_2160DDCC0(a1);
  v14 = *(_QWORD *)(a2 + 64);
  v15.i64[0] = MEMORY[0];
  v16.i64[0] = *v6;
  if (v7)
  {
    v8.i64[0] = MEMORY[0];
    v9.i64[0] = *v6;
    v17 = (uint8x16_t)vzip1q_s64(v15, v16);
    v18 = (uint8x16_t)vzip1q_s64(v8, v9);
    v8.i64[0] = *(_QWORD *)v5;
    v9.i64[0] = *(uint64_t *)((char *)v6 + v5);
    v10.i64[0] = *(_QWORD *)v5;
    v11.i64[0] = v9.i64[0];
    v19 = (uint64_t *)((char *)v6 + v5 + v5);
    v20 = vrhaddq_u8(v17, v18);
    v21 = vrhaddq_u8((uint8x16_t)vzip1q_s64(v8, v9), (uint8x16_t)vzip1q_s64(v10, v11));
    v22 = *(int64x2_t *)v14;
    v23 = *(int64x2_t *)(v14 + 16);
    v24 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v20, *(uint8x16_t *)v14))));
    v25 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, (uint8x16_t)v23))));
    v22.i64[0] = *(_QWORD *)(2 * v5);
    v23.i64[0] = *v19;
    v10.i64[0] = v22.i64[0];
    v11.i64[0] = *v19;
    v26 = (uint8x16_t)vzip1q_s64(v22, v23);
    v27 = (uint8x16_t)vzip1q_s64(v10, v11);
    v10.i64[0] = *(_QWORD *)(3 * v5);
    v11.i64[0] = *(uint64_t *)((char *)v19 + v5);
    v12.i64[0] = v10.i64[0];
    v13.i64[0] = v11.i64[0];
    v28 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(v26, v27), *(uint8x16_t *)(v14 + 32)))));
    v29 = vabdq_u8(vrhaddq_u8((uint8x16_t)vzip1q_s64(v10, v11), (uint8x16_t)vzip1q_s64(v12, v13)), *(uint8x16_t *)(v14 + 48));
  }
  else
  {
    v30 = (uint8x16_t)vzip1q_s64(v15, v16);
    v16.i64[0] = *(_QWORD *)v5;
    v8.i64[0] = *(uint64_t *)((char *)v6 + v5);
    v31 = *(int64x2_t *)v14;
    v32 = *(int64x2_t *)(v14 + 16);
    v33 = (uint64_t *)((char *)v6 + v5 + v5);
    v24 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, *(uint8x16_t *)v14))));
    v25 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v16, v8), (uint8x16_t)v32))));
    v8.i64[0] = *(_QWORD *)(2 * v5);
    v31.i64[0] = *v33;
    v34 = (uint8x16_t)vzip1q_s64(v8, v31);
    v31.i64[0] = *(_QWORD *)(3 * v5);
    v32.i64[0] = *(uint64_t *)((char *)v33 + v5);
    v28 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v34, *(uint8x16_t *)(v14 + 32)))));
    v29 = vabdq_u8((uint8x16_t)vzip1q_s64(v31, v32), *(uint8x16_t *)(v14 + 48));
  }
  v35 = vaddq_s32(v28, v24);
  v36 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v29))), v25);
  *(_QWORD *)&result = vaddq_s32(vaddq_s32(vaddq_s32(v36, v35), vdupq_laneq_s32(v35, 2)), vdupq_laneq_s32(v36, 2)).u64[0];
  *a3 = LOWORD(result);
  return result;
}

double sub_2160DF030(uint8x16_t **a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t v5;
  int32x4_t v6;
  uint8x16_t *v7;
  int32x4_t v8;
  uint64_t v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint8x16_t *v24;
  uint8x16_t *v25;
  uint8x16_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  uint8x16_t *v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint8x16_t *v44;
  uint8x16_t *v45;
  uint8x16_t *v46;
  uint8x16_t v47;
  uint8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint8x16_t *v52;
  uint8x16_t *v53;
  uint8x16_t *v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint8x16_t *v58;
  uint8x16_t *v59;
  uint8x16_t *v60;
  uint8x16_t v61;
  uint8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint8x16_t *v66;
  uint8x16_t *v67;
  uint8x16_t *v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint8x16_t *v72;
  uint8x16_t *v73;
  uint8x16_t *v74;
  uint8x16_t v75;
  uint8x16_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint8x16_t *v80;
  uint8x16_t *v81;
  uint8x16_t *v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint8x16_t *v86;
  uint8x16_t *v87;
  uint8x16_t *v88;
  uint8x16_t v89;
  uint8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint8x16_t *v94;
  uint8x16_t *v95;
  uint8x16_t *v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint8x16_t *v100;
  uint8x16_t v101;
  uint8x16_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  double result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = a1[1];
  v5 = v3[1];
  v6 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, *v3))));
  v7 = a1[2];
  v8 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v7, *v3))));
  v9 = *(unsigned int *)(a2 + 16);
  v10 = (uint8x16_t *)((char *)*a1 + v9);
  v11 = (uint8x16_t *)((char *)v4 + v9);
  v12 = (uint8x16_t *)((char *)v7 + v9);
  v13 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v10, v5)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(**a1, *v3)))));
  v14 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v11, v5)))), v6);
  v15 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v12, v5)))), v8);
  v16 = (uint8x16_t *)((char *)v10 + v9);
  v17 = (uint8x16_t *)((char *)v11 + v9);
  v18 = (uint8x16_t *)((char *)v12 + v9);
  v19 = v3[2];
  v20 = v3[3];
  v21 = vaddq_s32(v13, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v16, v19)))));
  v22 = vaddq_s32(v14, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v17, v19)))));
  v23 = vaddq_s32(v15, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v18, v19)))));
  v24 = (uint8x16_t *)((char *)v16 + v9);
  v25 = (uint8x16_t *)((char *)v17 + v9);
  v26 = (uint8x16_t *)((char *)v18 + v9);
  v27 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v24, v20))));
  v28 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v25, v20))));
  v29 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v26, v20))));
  v30 = (uint8x16_t *)((char *)v24 + v9);
  v31 = (uint8x16_t *)((char *)v25 + v9);
  v32 = (uint8x16_t *)((char *)v26 + v9);
  v33 = v3[4];
  v34 = v3[5];
  v35 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v30, v33)))));
  v36 = vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v31, v33)))));
  v37 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v32, v33)))));
  v38 = (uint8x16_t *)((char *)v30 + v9);
  v39 = (uint8x16_t *)((char *)v31 + v9);
  v40 = (uint8x16_t *)((char *)v32 + v9);
  v41 = vaddq_s32(v21, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v38, v34)))));
  v42 = vaddq_s32(v22, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v39, v34)))));
  v43 = vaddq_s32(v23, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v40, v34)))));
  v44 = (uint8x16_t *)((char *)v38 + v9);
  v45 = (uint8x16_t *)((char *)v39 + v9);
  v46 = (uint8x16_t *)((char *)v40 + v9);
  v47 = v3[6];
  v48 = v3[7];
  v49 = vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v44, v47)))));
  v50 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v45, v47)))));
  v51 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v46, v47)))));
  v52 = (uint8x16_t *)((char *)v44 + v9);
  v53 = (uint8x16_t *)((char *)v45 + v9);
  v54 = (uint8x16_t *)((char *)v46 + v9);
  v55 = vaddq_s32(v41, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v52, v48)))));
  v56 = vaddq_s32(v42, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v53, v48)))));
  v57 = vaddq_s32(v43, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v54, v48)))));
  v58 = (uint8x16_t *)((char *)v52 + v9);
  v59 = (uint8x16_t *)((char *)v53 + v9);
  v60 = (uint8x16_t *)((char *)v54 + v9);
  v61 = v3[8];
  v62 = v3[9];
  v63 = vaddq_s32(v49, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v58, v61)))));
  v64 = vaddq_s32(v50, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v59, v61)))));
  v65 = vaddq_s32(v51, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v60, v61)))));
  v66 = (uint8x16_t *)((char *)v58 + v9);
  v67 = (uint8x16_t *)((char *)v59 + v9);
  v68 = (uint8x16_t *)((char *)v60 + v9);
  v69 = vaddq_s32(v55, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v66, v62)))));
  v70 = vaddq_s32(v56, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v67, v62)))));
  v71 = vaddq_s32(v57, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v68, v62)))));
  v72 = (uint8x16_t *)((char *)v66 + v9);
  v73 = (uint8x16_t *)((char *)v67 + v9);
  v74 = (uint8x16_t *)((char *)v68 + v9);
  v75 = v3[10];
  v76 = v3[11];
  v77 = vaddq_s32(v63, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v72, v75)))));
  v78 = vaddq_s32(v64, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v73, v75)))));
  v79 = vaddq_s32(v65, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v74, v75)))));
  v80 = (uint8x16_t *)((char *)v72 + v9);
  v81 = (uint8x16_t *)((char *)v73 + v9);
  v82 = (uint8x16_t *)((char *)v74 + v9);
  v83 = vaddq_s32(v69, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v80, v76)))));
  v84 = vaddq_s32(v70, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v81, v76)))));
  v85 = vaddq_s32(v71, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v82, v76)))));
  v86 = (uint8x16_t *)((char *)v80 + v9);
  v87 = (uint8x16_t *)((char *)v81 + v9);
  v88 = (uint8x16_t *)((char *)v82 + v9);
  v89 = v3[12];
  v90 = v3[13];
  v91 = vaddq_s32(v77, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v86, v89)))));
  v92 = vaddq_s32(v78, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v87, v89)))));
  v93 = vaddq_s32(v79, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v88, v89)))));
  v94 = (uint8x16_t *)((char *)v86 + v9);
  v95 = (uint8x16_t *)((char *)v87 + v9);
  v96 = (uint8x16_t *)((char *)v88 + v9);
  v97 = vaddq_s32(v83, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v94, v90)))));
  v98 = vaddq_s32(v84, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v95, v90)))));
  v99 = vaddq_s32(v85, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v96, v90)))));
  v100 = (uint8x16_t *)((char *)v96 + v9);
  v101 = v3[14];
  v102 = v3[15];
  v103 = vaddq_s32(v93, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v100, v101)))));
  v104 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v100 + v9), v102))));
  v105 = vaddq_s32(vaddq_s32(v97, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v94 + v9 + v9), v102))))), vaddq_s32(v91, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v94 + v9), v101))))));
  v106 = vaddq_s32(vaddq_s32(v98, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v95 + v9 + v9), v102))))), vaddq_s32(v92, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v95 + v9), v101))))));
  *a3 = vaddq_s32(v105, vdupq_laneq_s32(v105, 2)).u16[0];
  a3[1] = vaddq_s32(v106, vdupq_laneq_s32(v106, 2)).u16[0];
  v107 = vaddq_s32(vaddq_s32(v99, v104), v103);
  *(_QWORD *)&result = vaddq_s32(v107, vdupq_laneq_s32(v107, 2)).u64[0];
  a3[2] = LOWORD(result);
  return result;
}

double sub_2160DF5A4(uint8x16_t **a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t v5;
  int32x4_t v6;
  uint8x16_t *v7;
  int32x4_t v8;
  uint64_t v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint8x16_t *v24;
  uint8x16_t *v25;
  uint8x16_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  uint8x16_t *v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint8x16_t *v44;
  uint8x16_t v45;
  uint8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  double result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = a1[1];
  v5 = v3[1];
  v6 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, *v3))));
  v7 = a1[2];
  v8 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v7, *v3))));
  v9 = *(unsigned int *)(a2 + 16);
  v10 = (uint8x16_t *)((char *)*a1 + v9);
  v11 = (uint8x16_t *)((char *)v4 + v9);
  v12 = (uint8x16_t *)((char *)v7 + v9);
  v13 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v10, v5)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(**a1, *v3)))));
  v14 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v11, v5)))), v6);
  v15 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v12, v5)))), v8);
  v16 = (uint8x16_t *)((char *)v10 + v9);
  v17 = (uint8x16_t *)((char *)v11 + v9);
  v18 = (uint8x16_t *)((char *)v12 + v9);
  v19 = v3[2];
  v20 = v3[3];
  v21 = vaddq_s32(v13, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v16, v19)))));
  v22 = vaddq_s32(v14, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v17, v19)))));
  v23 = vaddq_s32(v15, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v18, v19)))));
  v24 = (uint8x16_t *)((char *)v16 + v9);
  v25 = (uint8x16_t *)((char *)v17 + v9);
  v26 = (uint8x16_t *)((char *)v18 + v9);
  v27 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v24, v20))));
  v28 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v25, v20))));
  v29 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v26, v20))));
  v30 = (uint8x16_t *)((char *)v24 + v9);
  v31 = (uint8x16_t *)((char *)v25 + v9);
  v32 = (uint8x16_t *)((char *)v26 + v9);
  v33 = v3[4];
  v34 = v3[5];
  v35 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v30, v33)))));
  v36 = vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v31, v33)))));
  v37 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v32, v33)))));
  v38 = (uint8x16_t *)((char *)v30 + v9);
  v39 = (uint8x16_t *)((char *)v31 + v9);
  v40 = (uint8x16_t *)((char *)v32 + v9);
  v41 = vaddq_s32(v21, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v38, v34)))));
  v42 = vaddq_s32(v22, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v39, v34)))));
  v43 = vaddq_s32(v23, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v40, v34)))));
  v44 = (uint8x16_t *)((char *)v40 + v9);
  v45 = v3[6];
  v46 = v3[7];
  v47 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v44, v45)))));
  v48 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v44 + v9), v46))));
  v49 = vaddq_s32(vaddq_s32(v41, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v38 + v9 + v9), v46))))), vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v38 + v9), v45))))));
  v50 = vaddq_s32(vaddq_s32(v42, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v39 + v9 + v9), v46))))), vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v39 + v9), v45))))));
  *a3 = vaddq_s32(v49, vdupq_laneq_s32(v49, 2)).u16[0];
  a3[1] = vaddq_s32(v50, vdupq_laneq_s32(v50, 2)).u16[0];
  v51 = vaddq_s32(vaddq_s32(v43, v48), v47);
  *(_QWORD *)&result = vaddq_s32(v51, vdupq_laneq_s32(v51, 2)).u64[0];
  a3[2] = LOWORD(result);
  return result;
}

double sub_2160DF868(uint64_t a1, uint64_t a2, _WORD *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, int64x2_t a7, double a8, int64x2_t a9, int64x2_t a10, int64x2_t a11)
{
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint8x16_t v17;
  char *v18;
  uint8x16_t v19;
  unint64_t *v20;
  char *v21;
  uint8x16_t v22;
  uint64_t v23;
  int64x2_t v24;
  uint8x16_t v25;
  uint64_t *v26;
  unint64_t *v27;
  uint8x16_t v28;
  unint64_t *v29;
  unint64_t *v30;
  uint8x16_t v31;
  unint64_t *v32;
  unint64_t *v33;
  int64x2_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint8x16_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint8x16_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint8x16_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  int32x4_t v59;
  uint64_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint8x16_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint8x16_t v69;
  uint64_t *v70;
  uint64_t *v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint8x16_t v77;
  uint64_t *v78;
  uint8x16_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint8x16_t v82;
  int64x2_t v83;
  uint8x16_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  uint8x16_t v91;
  uint64_t *v92;
  uint8x16_t v93;
  uint64_t *v94;
  uint64_t *v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  uint8x16_t v101;
  uint8x16_t v102;
  uint8x16_t v103;
  int64x2_t v104;
  uint8x16_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  uint8x16_t v111;
  uint8x16_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  double result;

  v14 = *(unsigned int *)(a2 + 16);
  v13 = *(unsigned int *)(a2 + 20);
  v15 = *(unint64_t **)(a1 + 8);
  v16 = (unint64_t *)(*(_QWORD *)a1 + v14);
  a4.i64[0] = **(_QWORD **)a1;
  a5.i64[0] = *v16;
  v17 = (uint8x16_t)vzip1q_s64(a4, a5);
  v18 = (char *)v15 + v14;
  a5.i64[0] = *v15;
  a6.i64[0] = *(unint64_t *)((char *)v15 + v14);
  v19 = (uint8x16_t)vzip1q_s64(a5, a6);
  v20 = *(unint64_t **)(a1 + 16);
  v21 = (char *)v20 + v14;
  a6.i64[0] = *v20;
  a7.i64[0] = *(unint64_t *)((char *)v20 + v14);
  v22 = (uint8x16_t)vzip1q_s64(a6, a7);
  v23 = *(_QWORD *)(a2 + 64);
  v24 = *(int64x2_t *)v23;
  v25 = *(uint8x16_t *)(v23 + 16);
  v26 = (uint64_t *)(*(_QWORD *)a1 + v13);
  v27 = (unint64_t *)((char *)v16 + v13);
  v24.i64[0] = *v26;
  a9.i64[0] = *v27;
  v28 = (uint8x16_t)vzip1q_s64(v24, a9);
  v29 = (unint64_t *)((char *)v15 + v13);
  v30 = (unint64_t *)&v18[v13];
  a9.i64[0] = *v29;
  a10.i64[0] = *v30;
  v31 = (uint8x16_t)vzip1q_s64(a9, a10);
  v32 = (unint64_t *)((char *)v20 + v13);
  v33 = (unint64_t *)&v21[v13];
  a10.i64[0] = *v32;
  a11.i64[0] = *v33;
  v34 = vzip1q_s64(a10, a11);
  v35 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v25))));
  v36 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v31, v25))));
  v37 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v34, v25))));
  v38 = vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v17, *(uint8x16_t *)v23)))));
  v39 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v19, *(uint8x16_t *)v23)))));
  v40 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, *(uint8x16_t *)v23)))));
  v41 = (uint64_t *)((char *)v26 + v13);
  v42 = (uint64_t *)((char *)v27 + v13);
  v35.i64[0] = *v41;
  v37.i64[0] = *v42;
  v43 = (uint8x16_t)vzip1q_s64((int64x2_t)v35, (int64x2_t)v37);
  v44 = (uint64_t *)((char *)v29 + v13);
  v45 = (uint64_t *)((char *)v30 + v13);
  v37.i64[0] = *v44;
  v36.i64[0] = *v45;
  v46 = (uint8x16_t)vzip1q_s64((int64x2_t)v37, (int64x2_t)v36);
  v47 = (uint64_t *)((char *)v32 + v13);
  v48 = (uint64_t *)((char *)v33 + v13);
  v36.i64[0] = *v47;
  v34.i64[0] = *v48;
  v49 = (uint8x16_t)vzip1q_s64((int64x2_t)v36, v34);
  v50 = *(int64x2_t *)(v23 + 32);
  v51 = *(int64x2_t *)(v23 + 48);
  v52 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v43, (uint8x16_t)v50))));
  v53 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v46, (uint8x16_t)v50))));
  v54 = (uint64_t *)((char *)v41 + v13);
  v55 = (uint64_t *)((char *)v42 + v13);
  v56 = (uint64_t *)((char *)v44 + v13);
  v57 = (uint64_t *)((char *)v45 + v13);
  v58 = (uint64_t *)((char *)v47 + v13);
  v59 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v49, (uint8x16_t)v50))));
  v60 = (uint64_t *)((char *)v48 + v13);
  v61 = vaddq_s32(v38, v52);
  v62 = vaddq_s32(v39, v53);
  v63 = vaddq_s32(v40, v59);
  v52.i64[0] = *v54;
  v53.i64[0] = *v55;
  v64 = (uint64_t *)((char *)v54 + v13);
  v65 = (uint64_t *)((char *)v55 + v13);
  v66 = (uint8x16_t)vzip1q_s64((int64x2_t)v52, (int64x2_t)v53);
  v53.i64[0] = *v56;
  v59.i64[0] = *v57;
  v67 = (uint64_t *)((char *)v56 + v13);
  v68 = (uint64_t *)((char *)v57 + v13);
  v69 = (uint8x16_t)vzip1q_s64((int64x2_t)v53, (int64x2_t)v59);
  v59.i64[0] = *v58;
  v50.i64[0] = *v60;
  v70 = (uint64_t *)((char *)v58 + v13);
  v71 = (uint64_t *)((char *)v60 + v13);
  v72 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v66, (uint8x16_t)v51))));
  v73 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v69, (uint8x16_t)v51))));
  v74 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v59, v50), (uint8x16_t)v51))));
  v50.i64[0] = *v64;
  v51.i64[0] = *v65;
  v75 = (uint64_t *)((char *)v64 + v13);
  v76 = (uint64_t *)((char *)v65 + v13);
  v77 = (uint8x16_t)vzip1q_s64(v50, v51);
  v51.i64[0] = *v67;
  v11.i64[0] = *v68;
  v78 = (uint64_t *)((char *)v68 + v13);
  v79 = (uint8x16_t)vzip1q_s64(v51, v11);
  v11.i64[0] = *v70;
  v12.i64[0] = *v71;
  v80 = (uint64_t *)((char *)v70 + v13);
  v81 = (uint64_t *)((char *)v71 + v13);
  v82 = (uint8x16_t)vzip1q_s64(v11, v12);
  v83 = *(int64x2_t *)(v23 + 128);
  v84 = *(uint8x16_t *)(v23 + 144);
  v85 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v77, (uint8x16_t)v83))));
  v86 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v79, (uint8x16_t)v83))));
  v87 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v82, (uint8x16_t)v83))));
  v88 = vaddq_s32(v72, v85);
  v89 = vaddq_s32(v73, v86);
  v90 = vaddq_s32(v74, v87);
  v85.i64[0] = *v75;
  v86.i64[0] = *v76;
  v91 = (uint8x16_t)vzip1q_s64((int64x2_t)v85, (int64x2_t)v86);
  v86.i64[0] = *(uint64_t *)((char *)v67 + v13);
  v87.i64[0] = *v78;
  v92 = (uint64_t *)((char *)v78 + v13);
  v93 = (uint8x16_t)vzip1q_s64((int64x2_t)v86, (int64x2_t)v87);
  v87.i64[0] = *v80;
  v83.i64[0] = *v81;
  v94 = (uint64_t *)((char *)v80 + v13);
  v95 = (uint64_t *)((char *)v81 + v13);
  v96 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v93, v84))));
  v97 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v87, v83), v84))));
  v98 = vaddq_s32(v61, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v91, v84)))));
  v99 = vaddq_s32(v62, v96);
  v100 = vaddq_s32(v63, v97);
  v63.i64[0] = *(uint64_t *)((char *)v75 + v13);
  v96.i64[0] = *(uint64_t *)((char *)v76 + v13);
  v101 = (uint8x16_t)vzip1q_s64((int64x2_t)v63, (int64x2_t)v96);
  v96.i64[0] = *(uint64_t *)((char *)v67 + v13 + v13);
  v97.i64[0] = *v92;
  v102 = (uint8x16_t)vzip1q_s64((int64x2_t)v96, (int64x2_t)v97);
  v97.i64[0] = *v94;
  v83.i64[0] = *v95;
  v103 = (uint8x16_t)vzip1q_s64((int64x2_t)v97, v83);
  v104 = *(int64x2_t *)(v23 + 160);
  v105 = *(uint8x16_t *)(v23 + 176);
  v106 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v102, (uint8x16_t)v104))));
  v107 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v103, (uint8x16_t)v104))));
  v108 = vaddq_s32(v88, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v101, (uint8x16_t)v104)))));
  v109 = vaddq_s32(v89, v106);
  v89.i64[0] = *(uint64_t *)((char *)v75 + v13 + v13);
  v106.i64[0] = *(uint64_t *)((char *)v76 + v13 + v13);
  v110 = vaddq_s32(v90, v107);
  v111 = (uint8x16_t)vzip1q_s64((int64x2_t)v89, (int64x2_t)v106);
  v106.i64[0] = *(uint64_t *)((char *)v67 + v13 + v13 + v13);
  v107.i64[0] = *(uint64_t *)((char *)v92 + v13);
  v112 = (uint8x16_t)vzip1q_s64((int64x2_t)v106, (int64x2_t)v107);
  v107.i64[0] = *(uint64_t *)((char *)v94 + v13);
  v104.i64[0] = *(uint64_t *)((char *)v95 + v13);
  v113 = vaddq_s32(vaddq_s32(v98, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v111, v105))))), v108);
  v114 = vaddq_s32(vaddq_s32(v99, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v112, v105))))), v109);
  *a3 = vaddq_s32(v113, vdupq_laneq_s32(v113, 2)).u16[0];
  a3[1] = vaddq_s32(v114, vdupq_laneq_s32(v114, 2)).u16[0];
  v115 = vaddq_s32(vaddq_s32(v100, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v107, v104), v105))))), v110);
  *(_QWORD *)&result = vaddq_s32(v115, vdupq_laneq_s32(v115, 2)).u64[0];
  a3[2] = LOWORD(result);
  return result;
}

double sub_2160DFC40(uint64_t a1, uint64_t a2, _WORD *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, int64x2_t a7, double a8, int64x2_t a9, int64x2_t a10, int64x2_t a11)
{
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  uint8x16_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint8x16_t v27;
  unint64_t *v28;
  unint64_t *v29;
  uint8x16_t v30;
  int64x2_t v31;
  uint8x16_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint8x16_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint8x16_t v38;
  uint64_t *v39;
  uint64_t *v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  int64x2_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  double result;

  v15 = *(unsigned int *)(a2 + 16);
  v14 = *(unsigned int *)(a2 + 20);
  v16 = *(unint64_t **)(a1 + 8);
  v17 = *(unint64_t **)(a1 + 16);
  v18 = (unint64_t *)(*(_QWORD *)a1 + v15);
  v19 = (unint64_t *)((char *)v16 + v15);
  v20 = (unint64_t *)((char *)v17 + v15);
  v21 = *(_QWORD *)(a2 + 64);
  a4.i64[0] = **(_QWORD **)a1;
  a5.i64[0] = *v18;
  v22 = (uint64_t *)(*(_QWORD *)a1 + v14);
  v23 = (unint64_t *)((char *)v18 + v14);
  v24 = (uint8x16_t)vzip1q_s64(a4, a5);
  a5.i64[0] = *v16;
  a6.i64[0] = *v19;
  v25 = (unint64_t *)((char *)v16 + v14);
  v26 = (unint64_t *)((char *)v19 + v14);
  v27 = (uint8x16_t)vzip1q_s64(a5, a6);
  a6.i64[0] = *v17;
  a7.i64[0] = *v20;
  v28 = (unint64_t *)((char *)v17 + v14);
  v29 = (unint64_t *)((char *)v20 + v14);
  v30 = (uint8x16_t)vzip1q_s64(a6, a7);
  v31 = *(int64x2_t *)v21;
  v32 = *(uint8x16_t *)(v21 + 16);
  v31.i64[0] = *v22;
  a9.i64[0] = *v23;
  v33 = (uint64_t *)((char *)v22 + v14);
  v34 = (uint64_t *)((char *)v23 + v14);
  v35 = (uint8x16_t)vzip1q_s64(v31, a9);
  a9.i64[0] = *v25;
  a10.i64[0] = *v26;
  v36 = (uint64_t *)((char *)v25 + v14);
  v37 = (uint64_t *)((char *)v26 + v14);
  v38 = (uint8x16_t)vzip1q_s64(a9, a10);
  a10.i64[0] = *v28;
  a11.i64[0] = *v29;
  v39 = (uint64_t *)((char *)v28 + v14);
  v40 = (uint64_t *)((char *)v29 + v14);
  v41 = vzip1q_s64(a10, a11);
  v42 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v32))));
  v43 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, v32))));
  v44 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v41, v32))));
  v45 = vaddq_s32(v42, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v24, *(uint8x16_t *)v21)))));
  v46 = vaddq_s32(v43, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v27, *(uint8x16_t *)v21)))));
  v47 = vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, *(uint8x16_t *)v21)))));
  v42.i64[0] = *v33;
  v44.i64[0] = *v34;
  v48 = (uint8x16_t)vzip1q_s64((int64x2_t)v42, (int64x2_t)v44);
  v44.i64[0] = *v36;
  v43.i64[0] = *v37;
  v49 = (uint8x16_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v43);
  v43.i64[0] = *v39;
  v41.i64[0] = *v40;
  v50 = (uint8x16_t)vzip1q_s64((int64x2_t)v43, v41);
  v51 = *(int64x2_t *)(v21 + 32);
  v52 = *(uint8x16_t *)(v21 + 48);
  v53 = vabdq_u8(v48, (uint8x16_t)v51);
  v54 = vabdq_u8(v49, (uint8x16_t)v51);
  v55 = vabdq_u8(v50, (uint8x16_t)v51);
  v51.i64[0] = *(uint64_t *)((char *)v33 + v14);
  v11.i64[0] = *(uint64_t *)((char *)v34 + v14);
  v12.i64[0] = *(uint64_t *)((char *)v36 + v14);
  v56 = (uint8x16_t)vzip1q_s64(v51, v11);
  v11.i64[0] = *(uint64_t *)((char *)v37 + v14);
  v57 = (uint8x16_t)vzip1q_s64(v12, v11);
  v12.i64[0] = *(uint64_t *)((char *)v39 + v14);
  v13.i64[0] = *(uint64_t *)((char *)v40 + v14);
  v58 = vaddq_s32(v45, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v53))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v52))))));
  v59 = vaddq_s32(v46, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v54))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v57, v52))))));
  v60 = vaddq_s32(v47, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v55))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v12, v13), v52))))));
  *a3 = vaddq_s32(v58, vdupq_laneq_s32(v58, 2)).u16[0];
  *(_QWORD *)&result = vaddq_s32(v60, vdupq_laneq_s32(v60, 2)).u64[0];
  a3[1] = vaddq_s32(v59, vdupq_laneq_s32(v59, 2)).u16[0];
  a3[2] = LOWORD(result);
  return result;
}

int8x8_t sub_2160DFE30(uint8x16_t **a1, uint64_t a2, _QWORD *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t v5;
  int32x4_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint8x16_t *v20;
  uint8x16_t *v21;
  uint8x16_t *v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint8x16_t *v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  uint8x16_t *v40;
  uint8x16_t *v41;
  uint8x16_t v42;
  uint8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint8x16_t *v48;
  uint8x16_t *v49;
  uint8x16_t *v50;
  uint8x16_t *v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint8x16_t *v56;
  uint8x16_t *v57;
  uint8x16_t *v58;
  uint8x16_t *v59;
  uint8x16_t v60;
  uint8x16_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint8x16_t *v66;
  uint8x16_t *v67;
  uint8x16_t *v68;
  uint8x16_t *v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  uint8x16_t *v74;
  uint8x16_t *v75;
  uint8x16_t *v76;
  uint8x16_t *v77;
  uint8x16_t v78;
  uint8x16_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint8x16_t *v84;
  uint8x16_t *v85;
  uint8x16_t *v86;
  uint8x16_t *v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  uint8x16_t *v92;
  uint8x16_t *v93;
  uint8x16_t *v94;
  uint8x16_t *v95;
  uint8x16_t v96;
  uint8x16_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  uint8x16_t *v102;
  uint8x16_t *v103;
  uint8x16_t *v104;
  uint8x16_t *v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint8x16_t *v110;
  uint8x16_t *v111;
  uint8x16_t *v112;
  uint8x16_t *v113;
  uint8x16_t v114;
  uint8x16_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint8x16_t *v120;
  uint8x16_t *v121;
  uint8x16_t *v122;
  uint8x16_t *v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  uint8x16_t v128;
  uint8x16_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int8x8_t result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = a1[1];
  v5 = v3[1];
  v6 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, *v3))));
  v7 = a1[2];
  v8 = a1[3];
  v9 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v7, *v3))));
  v10 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v8, *v3))));
  v11 = *(unsigned int *)(a2 + 16);
  v12 = (uint8x16_t *)((char *)*a1 + v11);
  v13 = (uint8x16_t *)((char *)v4 + v11);
  v14 = (uint8x16_t *)((char *)v7 + v11);
  v15 = (uint8x16_t *)((char *)v8 + v11);
  v16 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v12, v5)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(**a1, *v3)))));
  v17 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v13, v5)))), v6);
  v18 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v14, v5)))), v9);
  v19 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v15, v5)))), v10);
  v20 = (uint8x16_t *)((char *)v12 + v11);
  v21 = (uint8x16_t *)((char *)v13 + v11);
  v22 = (uint8x16_t *)((char *)v14 + v11);
  v23 = (uint8x16_t *)((char *)v15 + v11);
  v24 = v3[2];
  v25 = v3[3];
  v26 = vaddq_s32(v16, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v20, v24)))));
  v27 = vaddq_s32(v17, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v21, v24)))));
  v28 = vaddq_s32(v18, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v22, v24)))));
  v29 = vaddq_s32(v19, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v23, v24)))));
  v30 = (uint8x16_t *)((char *)v20 + v11);
  v31 = (uint8x16_t *)((char *)v21 + v11);
  v32 = (uint8x16_t *)((char *)v22 + v11);
  v33 = (uint8x16_t *)((char *)v23 + v11);
  v34 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v30, v25))));
  v35 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v31, v25))));
  v36 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v32, v25))));
  v37 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v33, v25))));
  v38 = (uint8x16_t *)((char *)v30 + v11);
  v39 = (uint8x16_t *)((char *)v31 + v11);
  v40 = (uint8x16_t *)((char *)v32 + v11);
  v41 = (uint8x16_t *)((char *)v33 + v11);
  v42 = v3[4];
  v43 = v3[5];
  v44 = vaddq_s32(v34, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v38, v42)))));
  v45 = vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v39, v42)))));
  v46 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v40, v42)))));
  v47 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v41, v42)))));
  v48 = (uint8x16_t *)((char *)v38 + v11);
  v49 = (uint8x16_t *)((char *)v39 + v11);
  v50 = (uint8x16_t *)((char *)v40 + v11);
  v51 = (uint8x16_t *)((char *)v41 + v11);
  v52 = vaddq_s32(v26, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v48, v43)))));
  v53 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v49, v43)))));
  v54 = vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v50, v43)))));
  v55 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v51, v43)))));
  v56 = (uint8x16_t *)((char *)v48 + v11);
  v57 = (uint8x16_t *)((char *)v49 + v11);
  v58 = (uint8x16_t *)((char *)v50 + v11);
  v59 = (uint8x16_t *)((char *)v51 + v11);
  v60 = v3[6];
  v61 = v3[7];
  v62 = vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v56, v60)))));
  v63 = vaddq_s32(v45, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v57, v60)))));
  v64 = vaddq_s32(v46, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v58, v60)))));
  v65 = vaddq_s32(v47, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v59, v60)))));
  v66 = (uint8x16_t *)((char *)v56 + v11);
  v67 = (uint8x16_t *)((char *)v57 + v11);
  v68 = (uint8x16_t *)((char *)v58 + v11);
  v69 = (uint8x16_t *)((char *)v59 + v11);
  v70 = vaddq_s32(v52, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v66, v61)))));
  v71 = vaddq_s32(v53, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v67, v61)))));
  v72 = vaddq_s32(v54, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v68, v61)))));
  v73 = vaddq_s32(v55, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v69, v61)))));
  v74 = (uint8x16_t *)((char *)v66 + v11);
  v75 = (uint8x16_t *)((char *)v67 + v11);
  v76 = (uint8x16_t *)((char *)v68 + v11);
  v77 = (uint8x16_t *)((char *)v69 + v11);
  v78 = v3[8];
  v79 = v3[9];
  v80 = vaddq_s32(v62, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v74, v78)))));
  v81 = vaddq_s32(v63, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v75, v78)))));
  v82 = vaddq_s32(v64, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v76, v78)))));
  v83 = vaddq_s32(v65, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v77, v78)))));
  v84 = (uint8x16_t *)((char *)v74 + v11);
  v85 = (uint8x16_t *)((char *)v75 + v11);
  v86 = (uint8x16_t *)((char *)v76 + v11);
  v87 = (uint8x16_t *)((char *)v77 + v11);
  v88 = vaddq_s32(v70, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v84, v79)))));
  v89 = vaddq_s32(v71, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v85, v79)))));
  v90 = vaddq_s32(v72, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v86, v79)))));
  v91 = vaddq_s32(v73, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v87, v79)))));
  v92 = (uint8x16_t *)((char *)v84 + v11);
  v93 = (uint8x16_t *)((char *)v85 + v11);
  v94 = (uint8x16_t *)((char *)v86 + v11);
  v95 = (uint8x16_t *)((char *)v87 + v11);
  v96 = v3[10];
  v97 = v3[11];
  v98 = vaddq_s32(v80, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v92, v96)))));
  v99 = vaddq_s32(v81, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v93, v96)))));
  v100 = vaddq_s32(v82, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v94, v96)))));
  v101 = vaddq_s32(v83, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v95, v96)))));
  v102 = (uint8x16_t *)((char *)v92 + v11);
  v103 = (uint8x16_t *)((char *)v93 + v11);
  v104 = (uint8x16_t *)((char *)v94 + v11);
  v105 = (uint8x16_t *)((char *)v95 + v11);
  v106 = vaddq_s32(v88, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v102, v97)))));
  v107 = vaddq_s32(v89, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v103, v97)))));
  v108 = vaddq_s32(v90, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v104, v97)))));
  v109 = vaddq_s32(v91, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v105, v97)))));
  v110 = (uint8x16_t *)((char *)v102 + v11);
  v111 = (uint8x16_t *)((char *)v103 + v11);
  v112 = (uint8x16_t *)((char *)v104 + v11);
  v113 = (uint8x16_t *)((char *)v105 + v11);
  v114 = v3[12];
  v115 = v3[13];
  v116 = vaddq_s32(v98, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v110, v114)))));
  v117 = vaddq_s32(v99, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v111, v114)))));
  v118 = vaddq_s32(v100, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v112, v114)))));
  v119 = vaddq_s32(v101, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v113, v114)))));
  v120 = (uint8x16_t *)((char *)v110 + v11);
  v121 = (uint8x16_t *)((char *)v111 + v11);
  v122 = (uint8x16_t *)((char *)v112 + v11);
  v123 = (uint8x16_t *)((char *)v113 + v11);
  v124 = vaddq_s32(v106, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v120, v115)))));
  v125 = vaddq_s32(v107, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v121, v115)))));
  v126 = vaddq_s32(v108, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v122, v115)))));
  v127 = vaddq_s32(v109, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v123, v115)))));
  v128 = v3[14];
  v129 = v3[15];
  v130 = vaddq_s32(vaddq_s32(v124, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v120 + v11 + v11), v129))))), vaddq_s32(v116, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v120 + v11), v128))))));
  v131 = vaddq_s32(vaddq_s32(v125, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v121 + v11 + v11), v129))))), vaddq_s32(v117, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v121 + v11), v128))))));
  v132 = vaddq_s32(vaddq_s32(v126, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v122 + v11 + v11), v129))))), vaddq_s32(v118, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v122 + v11), v128))))));
  v133 = vaddq_s32(vaddq_s32(v127, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v123 + v11 + v11), v129))))), vaddq_s32(v119, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v123 + v11), v128))))));
  *(int32x2_t *)v132.i8 = vadd_s32(*(int32x2_t *)v132.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v132, 2));
  result = vext_s8(*(int8x8_t *)v132.i8, (int8x8_t)vzip1_s16(*(int16x4_t *)v132.i8, (int16x4_t)vadd_s32(*(int32x2_t *)v133.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v133, 2))), 4uLL);
  v130.i32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v130.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v130, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v131.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v131, 2))).u32[0];
  v130.i32[1] = result.i32[1];
  *a3 = v130.i64[0];
  return result;
}

int8x8_t sub_2160E0568(uint8x16_t **a1, uint64_t a2, _QWORD *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t v5;
  int32x4_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint8x16_t *v20;
  uint8x16_t *v21;
  uint8x16_t *v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint8x16_t *v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  uint8x16_t *v40;
  uint8x16_t *v41;
  uint8x16_t v42;
  uint8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint8x16_t *v48;
  uint8x16_t *v49;
  uint8x16_t *v50;
  uint8x16_t *v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int8x8_t result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = a1[1];
  v5 = v3[1];
  v6 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, *v3))));
  v7 = a1[2];
  v8 = a1[3];
  v9 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v7, *v3))));
  v10 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v8, *v3))));
  v11 = *(unsigned int *)(a2 + 16);
  v12 = (uint8x16_t *)((char *)*a1 + v11);
  v13 = (uint8x16_t *)((char *)v4 + v11);
  v14 = (uint8x16_t *)((char *)v7 + v11);
  v15 = (uint8x16_t *)((char *)v8 + v11);
  v16 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v12, v5)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(**a1, *v3)))));
  v17 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v13, v5)))), v6);
  v18 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v14, v5)))), v9);
  v19 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v15, v5)))), v10);
  v20 = (uint8x16_t *)((char *)v12 + v11);
  v21 = (uint8x16_t *)((char *)v13 + v11);
  v22 = (uint8x16_t *)((char *)v14 + v11);
  v23 = (uint8x16_t *)((char *)v15 + v11);
  v24 = v3[2];
  v25 = v3[3];
  v26 = vaddq_s32(v16, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v20, v24)))));
  v27 = vaddq_s32(v17, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v21, v24)))));
  v28 = vaddq_s32(v18, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v22, v24)))));
  v29 = vaddq_s32(v19, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v23, v24)))));
  v30 = (uint8x16_t *)((char *)v20 + v11);
  v31 = (uint8x16_t *)((char *)v21 + v11);
  v32 = (uint8x16_t *)((char *)v22 + v11);
  v33 = (uint8x16_t *)((char *)v23 + v11);
  v34 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v30, v25))));
  v35 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v31, v25))));
  v36 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v32, v25))));
  v37 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v33, v25))));
  v38 = (uint8x16_t *)((char *)v30 + v11);
  v39 = (uint8x16_t *)((char *)v31 + v11);
  v40 = (uint8x16_t *)((char *)v32 + v11);
  v41 = (uint8x16_t *)((char *)v33 + v11);
  v42 = v3[4];
  v43 = v3[5];
  v44 = vaddq_s32(v34, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v38, v42)))));
  v45 = vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v39, v42)))));
  v46 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v40, v42)))));
  v47 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v41, v42)))));
  v48 = (uint8x16_t *)((char *)v38 + v11);
  v49 = (uint8x16_t *)((char *)v39 + v11);
  v50 = (uint8x16_t *)((char *)v40 + v11);
  v51 = (uint8x16_t *)((char *)v41 + v11);
  v52 = vaddq_s32(v26, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v48, v43)))));
  v53 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v49, v43)))));
  v54 = vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v50, v43)))));
  v55 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v51, v43)))));
  v56 = v3[6];
  v57 = v3[7];
  v58 = vaddq_s32(vaddq_s32(v52, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v48 + v11 + v11), v57))))), vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v48 + v11), v56))))));
  v59 = vaddq_s32(vaddq_s32(v53, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v49 + v11 + v11), v57))))), vaddq_s32(v45, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v49 + v11), v56))))));
  v60 = vaddq_s32(vaddq_s32(v54, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v50 + v11 + v11), v57))))), vaddq_s32(v46, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v50 + v11), v56))))));
  v61 = vaddq_s32(vaddq_s32(v55, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v51 + v11 + v11), v57))))), vaddq_s32(v47, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v51 + v11), v56))))));
  *(int32x2_t *)v60.i8 = vadd_s32(*(int32x2_t *)v60.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v60, 2));
  result = vext_s8(*(int8x8_t *)v60.i8, (int8x8_t)vzip1_s16(*(int16x4_t *)v60.i8, (int16x4_t)vadd_s32(*(int32x2_t *)v61.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2))), 4uLL);
  v58.i32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v58.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v58, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v59.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v59, 2))).u32[0];
  v58.i32[1] = result.i32[1];
  *a3 = v58.i64[0];
  return result;
}

int8x8_t sub_2160E0910(uint64_t a1, uint64_t a2, _QWORD *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, double a7, double a8, int64x2_t a9, int64x2_t a10, int64x2_t a11)
{
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint8x16_t v19;
  char *v20;
  uint64_t v21;
  uint8x16_t v22;
  int64x2_t v23;
  int32x4_t v24;
  uint64_t *v25;
  unint64_t *v26;
  char *v27;
  uint8x16_t v28;
  unint64_t *v29;
  int64x2_t v30;
  int32x4_t v31;
  int64x2_t v32;
  int32x4_t v33;
  uint64_t *v34;
  char *v35;
  uint8x16_t v36;
  char *v37;
  char *v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint8x16_t v42;
  unint64_t *v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  int64x2_t v49;
  uint8x16_t v50;
  int32x4_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  uint8x16_t v58;
  int64x2_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  int32x4_t v64;
  uint64_t *v65;
  uint64_t *v66;
  int32x4_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint8x16_t v70;
  uint64_t *v71;
  uint64_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  uint8x16_t v75;
  int64x2_t v76;
  int32x4_t v77;
  int32x4_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint8x16_t v81;
  uint64_t *v82;
  uint64_t *v83;
  int64x2_t v84;
  int64x2_t v85;
  uint8x16_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  uint8x16_t v90;
  int64x2_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  uint8x16_t v95;
  int64x2_t v96;
  int32x4_t v97;
  int32x4_t v98;
  uint8x16_t v99;
  int64x2_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  uint8x16_t v104;
  int64x2_t v105;
  int64x2_t v106;
  uint8x16_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint8x16_t v110;
  int64x2_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  uint8x16_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int8x8_t result;

  v16 = *(unsigned int *)(a2 + 16);
  v15 = *(unsigned int *)(a2 + 20);
  v17 = *(unint64_t **)(a1 + 8);
  v18 = (unint64_t *)(*(_QWORD *)a1 + v16);
  a4.i64[0] = **(_QWORD **)a1;
  a5.i64[0] = *v18;
  v19 = (uint8x16_t)vzip1q_s64(a4, a5);
  v20 = (char *)v17 + v16;
  a5.i64[0] = *v17;
  a6.i64[0] = *(unint64_t *)((char *)v17 + v16);
  v21 = *(_QWORD *)(a2 + 64);
  v22 = *(uint8x16_t *)(v21 + 16);
  v23 = (int64x2_t)vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(a5, a6), *(uint8x16_t *)v21)));
  v24 = (int32x4_t)vpaddlq_u32((uint32x4_t)v23);
  v25 = *(uint64_t **)(a1 + 16);
  v26 = *(unint64_t **)(a1 + 24);
  v27 = (char *)v25 + v16;
  v23.i64[0] = *v25;
  a9.i64[0] = *(uint64_t *)((char *)v25 + v16);
  v28 = (uint8x16_t)vzip1q_s64(v23, a9);
  v29 = (unint64_t *)((char *)v26 + v16);
  a9.i64[0] = *v26;
  a10.i64[0] = *v29;
  v30 = vzip1q_s64(a9, a10);
  v31 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, *(uint8x16_t *)v21))));
  v32 = (int64x2_t)vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v30, *(uint8x16_t *)v21)));
  v33 = (int32x4_t)vpaddlq_u32((uint32x4_t)v32);
  v34 = (uint64_t *)(*(_QWORD *)a1 + v15);
  v35 = (char *)v18 + v15;
  v32.i64[0] = *v34;
  v30.i64[0] = *(unint64_t *)((char *)v18 + v15);
  v36 = (uint8x16_t)vzip1q_s64(v32, v30);
  v37 = (char *)v17 + v15;
  v38 = &v20[v15];
  v30.i64[0] = *(unint64_t *)((char *)v17 + v15);
  a11.i64[0] = *(_QWORD *)&v20[v15];
  v39 = vzip1q_s64(v30, a11);
  v40 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, v22)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v19, *(uint8x16_t *)v21)))));
  v41 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v39, v22)))), v24);
  v24.i64[0] = *(uint64_t *)((char *)v25 + v15);
  v39.i64[0] = *(_QWORD *)&v27[v15];
  v42 = (uint8x16_t)vzip1q_s64((int64x2_t)v24, v39);
  v43 = (unint64_t *)((char *)v29 + v15);
  v39.i64[0] = *(unint64_t *)((char *)v26 + v15);
  a11.i64[0] = *v43;
  v44 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v42, v22)))), v31);
  v45 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v39, a11), v22))));
  v46 = vaddq_s32(v45, v33);
  v33.i64[0] = *(uint64_t *)((char *)v34 + v15);
  v45.i64[0] = *(unint64_t *)((char *)v18 + v15 + v15);
  v47 = (uint8x16_t)vzip1q_s64((int64x2_t)v33, (int64x2_t)v45);
  v45.i64[0] = *(unint64_t *)((char *)v17 + v15 + v15);
  v31.i64[0] = *(_QWORD *)&v20[v15 + v15];
  v48 = (uint8x16_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v31);
  v49 = *(int64x2_t *)(v21 + 32);
  v50 = *(uint8x16_t *)(v21 + 48);
  v51 = vaddq_s32(v40, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, (uint8x16_t)v49)))));
  v52 = (uint64_t *)((char *)v25 + v15 + v15);
  v53 = (uint64_t *)&v27[v15 + v15];
  v54 = (uint64_t *)((char *)v26 + v15 + v15);
  v55 = (uint64_t *)((char *)v43 + v15);
  v56 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, (uint8x16_t)v49))));
  v57 = vaddq_s32(v41, v56);
  v41.i64[0] = *v52;
  v56.i64[0] = *v53;
  v58 = (uint8x16_t)vzip1q_s64((int64x2_t)v41, (int64x2_t)v56);
  v56.i64[0] = *v54;
  v11.i64[0] = *v55;
  v59 = vzip1q_s64((int64x2_t)v56, v11);
  v60 = (uint64_t *)((char *)v34 + v15 + v15);
  v61 = (uint64_t *)&v35[v15 + v15];
  v62 = (uint64_t *)&v37[v15 + v15];
  v63 = (uint64_t *)&v38[v15 + v15];
  v64 = vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v58, (uint8x16_t)v49)))));
  v65 = (uint64_t *)((char *)v52 + v15);
  v66 = (uint64_t *)((char *)v54 + v15);
  v67 = vaddq_s32(v46, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v59, (uint8x16_t)v49)))));
  v44.i64[0] = *v60;
  v46.i64[0] = *v61;
  v68 = (uint64_t *)((char *)v60 + v15);
  v69 = (uint64_t *)((char *)v61 + v15);
  v70 = (uint8x16_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v46);
  v46.i64[0] = *v62;
  v49.i64[0] = *v63;
  v71 = (uint64_t *)((char *)v62 + v15);
  v72 = (uint64_t *)((char *)v63 + v15);
  v73 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v70, v50))));
  v74 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v46, v49), v50))));
  v49.i64[0] = *v65;
  v59.i64[0] = *(uint64_t *)((char *)v53 + v15);
  v75 = (uint8x16_t)vzip1q_s64(v49, v59);
  v59.i64[0] = *v66;
  v12.i64[0] = *(uint64_t *)((char *)v55 + v15);
  v76 = vzip1q_s64(v59, v12);
  v77 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v75, v50))));
  v78 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v76, v50))));
  v76.i64[0] = *v68;
  v12.i64[0] = *v69;
  v79 = (uint64_t *)((char *)v68 + v15);
  v80 = (uint64_t *)((char *)v69 + v15);
  v81 = (uint8x16_t)vzip1q_s64(v76, v12);
  v12.i64[0] = *v71;
  v13.i64[0] = *v72;
  v82 = (uint64_t *)((char *)v71 + v15);
  v83 = (uint64_t *)((char *)v72 + v15);
  v84 = vzip1q_s64(v12, v13);
  v85 = *(int64x2_t *)(v21 + 128);
  v86 = *(uint8x16_t *)(v21 + 144);
  v87 = vaddq_s32(v73, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v81, (uint8x16_t)v85)))));
  v88 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v84, (uint8x16_t)v85))));
  v89 = vaddq_s32(v74, v88);
  v88.i64[0] = *(uint64_t *)((char *)v65 + v15);
  v84.i64[0] = *(uint64_t *)((char *)v53 + v15 + v15);
  v90 = (uint8x16_t)vzip1q_s64((int64x2_t)v88, v84);
  v84.i64[0] = *(uint64_t *)((char *)v66 + v15);
  v14.i64[0] = *(uint64_t *)((char *)v55 + v15 + v15);
  v91 = vzip1q_s64(v84, v14);
  v92 = vaddq_s32(v77, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v90, (uint8x16_t)v85)))));
  v93 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v91, (uint8x16_t)v85))));
  v94 = vaddq_s32(v78, v93);
  v93.i64[0] = *v79;
  v91.i64[0] = *v80;
  v95 = (uint8x16_t)vzip1q_s64((int64x2_t)v93, v91);
  v91.i64[0] = *v82;
  v85.i64[0] = *v83;
  v96 = vzip1q_s64(v91, v85);
  v97 = vaddq_s32(v51, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v95, v86)))));
  v98 = vaddq_s32(v57, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v96, v86)))));
  v57.i64[0] = *(uint64_t *)((char *)v65 + v15 + v15);
  v96.i64[0] = *(uint64_t *)((char *)v53 + v15 + v15 + v15);
  v99 = (uint8x16_t)vzip1q_s64((int64x2_t)v57, v96);
  v96.i64[0] = *(uint64_t *)((char *)v66 + v15 + v15);
  v85.i64[0] = *(uint64_t *)((char *)v55 + v15 + v15 + v15);
  v100 = vzip1q_s64(v96, v85);
  v101 = vaddq_s32(v64, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v99, v86)))));
  v102 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v100, v86))));
  v103 = vaddq_s32(v67, v102);
  v102.i64[0] = *(uint64_t *)((char *)v79 + v15);
  v100.i64[0] = *(uint64_t *)((char *)v80 + v15);
  v104 = (uint8x16_t)vzip1q_s64((int64x2_t)v102, v100);
  v100.i64[0] = *(uint64_t *)((char *)v82 + v15);
  v85.i64[0] = *(uint64_t *)((char *)v83 + v15);
  v105 = vzip1q_s64(v100, v85);
  v106 = *(int64x2_t *)(v21 + 160);
  v107 = *(uint8x16_t *)(v21 + 176);
  v108 = vaddq_s32(v87, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v104, (uint8x16_t)v106)))));
  v109 = vaddq_s32(v89, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v105, (uint8x16_t)v106)))));
  v89.i64[0] = *(uint64_t *)((char *)v65 + v15 + v15 + v15);
  v105.i64[0] = *(uint64_t *)((char *)v53 + v15 + v15 + v15 + v15);
  v110 = (uint8x16_t)vzip1q_s64((int64x2_t)v89, v105);
  v105.i64[0] = *(uint64_t *)((char *)v66 + v15 + v15 + v15);
  v14.i64[0] = *(uint64_t *)((char *)v55 + v15 + v15 + v15 + v15);
  v111 = vzip1q_s64(v105, v14);
  v112 = vaddq_s32(v92, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v110, (uint8x16_t)v106)))));
  v113 = vaddq_s32(v94, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v111, (uint8x16_t)v106)))));
  v94.i64[0] = *(uint64_t *)((char *)v79 + v15 + v15);
  v111.i64[0] = *(uint64_t *)((char *)v80 + v15 + v15);
  v106.i64[0] = *(uint64_t *)((char *)v82 + v15 + v15);
  v14.i64[0] = *(uint64_t *)((char *)v83 + v15 + v15);
  v114 = vaddq_s32(vaddq_s32(v97, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v94, v111), v107))))), v108);
  v115 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v106, v14), v107))));
  v116 = vaddq_s32(vaddq_s32(v98, v115), v109);
  v109.i64[0] = *(uint64_t *)((char *)v65 + v15 + v15 + v15 + v15);
  v115.i64[0] = *(uint64_t *)((char *)v53 + v15 + v15 + v15 + v15 + v15);
  v117 = (uint8x16_t)vzip1q_s64((int64x2_t)v109, (int64x2_t)v115);
  v115.i64[0] = *(uint64_t *)((char *)v66 + v15 + v15 + v15 + v15);
  v97.i64[0] = *(uint64_t *)((char *)v55 + v15 + v15 + v15 + v15 + v15);
  v118 = vaddq_s32(vaddq_s32(v101, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v117, v107))))), v112);
  v119 = vaddq_s32(vaddq_s32(v103, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v115, (int64x2_t)v97), v107))))), v113);
  *(int32x2_t *)v118.i8 = vadd_s32(*(int32x2_t *)v118.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v118, 2));
  result = vext_s8(*(int8x8_t *)v118.i8, (int8x8_t)vzip1_s16(*(int16x4_t *)v118.i8, (int16x4_t)vadd_s32(*(int32x2_t *)v119.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v119, 2))), 4uLL);
  v118.i32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v114.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v114, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v116.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v116, 2))).u32[0];
  v118.i32[1] = result.i32[1];
  *a3 = v118.i64[0];
  return result;
}

__n64 sub_2160E0E28(uint64_t a1, uint64_t a2, __n64 *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, double a7, double a8, int64x2_t a9, int64x2_t a10, int64x2_t a11)
{
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  uint8x16_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint8x16_t v27;
  unint64_t *v28;
  uint8x16_t v29;
  int64x2_t v30;
  int32x4_t v31;
  uint64_t *v32;
  uint8x16_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int64x2_t v36;
  int32x4_t v37;
  uint8x16_t v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint8x16_t v42;
  int64x2_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint8x16_t v53;
  int64x2_t v54;
  int32x4_t v55;
  uint16x8_t v56;
  uint8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  __n64 result;

  v16 = *(unsigned int *)(a2 + 16);
  v15 = *(unsigned int *)(a2 + 20);
  v17 = *(unint64_t **)(a1 + 8);
  v18 = *(uint64_t **)(a1 + 16);
  v19 = *(unint64_t **)(a1 + 24);
  v20 = (unint64_t *)(*(_QWORD *)a1 + v16);
  v21 = (unint64_t *)((char *)v17 + v16);
  v22 = (unint64_t *)((char *)v18 + v16);
  v23 = (unint64_t *)((char *)v19 + v16);
  v24 = *(uint8x16_t **)(a2 + 64);
  a4.i64[0] = **(_QWORD **)a1;
  a5.i64[0] = *v20;
  v25 = (uint64_t *)(*(_QWORD *)a1 + v15);
  v26 = (uint64_t *)((char *)v20 + v15);
  v27 = (uint8x16_t)vzip1q_s64(a4, a5);
  a5.i64[0] = *v17;
  a6.i64[0] = *v21;
  v28 = (unint64_t *)((char *)v21 + v15);
  v29 = v24[1];
  v30 = (int64x2_t)vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(a5, a6), *v24)));
  v31 = (int32x4_t)vpaddlq_u32((uint32x4_t)v30);
  v30.i64[0] = *v18;
  a9.i64[0] = *v22;
  v32 = (uint64_t *)((char *)v22 + v15);
  v33 = (uint8x16_t)vzip1q_s64(v30, a9);
  a9.i64[0] = *v19;
  a10.i64[0] = *v23;
  v34 = vzip1q_s64(a9, a10);
  v35 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v33, *v24))));
  v36 = (int64x2_t)vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v34, *v24)));
  v37 = (int32x4_t)vpaddlq_u32((uint32x4_t)v36);
  v36.i64[0] = *v25;
  v34.i64[0] = *v26;
  v38 = (uint8x16_t)vzip1q_s64(v36, v34);
  v34.i64[0] = *(unint64_t *)((char *)v17 + v15);
  a11.i64[0] = *v28;
  v39 = vzip1q_s64(v34, a11);
  v40 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, v29)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v27, *v24)))));
  v41 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v39, v29)))), v31);
  v31.i64[0] = *(uint64_t *)((char *)v18 + v15);
  v39.i64[0] = *v32;
  v42 = (uint8x16_t)vzip1q_s64((int64x2_t)v31, v39);
  v39.i64[0] = *(unint64_t *)((char *)v19 + v15);
  a11.i64[0] = *(unint64_t *)((char *)v23 + v15);
  v43 = vzip1q_s64(v39, a11);
  v44 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v42, v29)))), v35);
  v45 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v43, v29))));
  v46 = vaddq_s32(v45, v37);
  v45.i64[0] = *(uint64_t *)((char *)v25 + v15);
  v43.i64[0] = *(uint64_t *)((char *)v26 + v15);
  v47 = (uint8x16_t)vzip1q_s64((int64x2_t)v45, v43);
  v43.i64[0] = *(unint64_t *)((char *)v17 + v15 + v15);
  v35.i64[0] = *(unint64_t *)((char *)v28 + v15);
  v48 = (uint8x16_t)vzip1q_s64(v43, (int64x2_t)v35);
  v49 = v24[2];
  v50 = v24[3];
  v51 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, v49))));
  v52 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, v49))));
  v11.i64[0] = *(uint64_t *)((char *)v18 + v15 + v15);
  v12.i64[0] = *(uint64_t *)((char *)v32 + v15);
  v53 = (uint8x16_t)vzip1q_s64(v11, v12);
  v12.i64[0] = *(unint64_t *)((char *)v19 + v15 + v15);
  v13.i64[0] = *(unint64_t *)((char *)v23 + v15 + v15);
  v54 = vzip1q_s64(v12, v13);
  v55 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, v49))));
  v56 = vpaddlq_u8(vabdq_u8((uint8x16_t)v54, v49));
  v54.i64[0] = *(uint64_t *)((char *)v25 + v15 + v15);
  v13.i64[0] = *(uint64_t *)((char *)v26 + v15 + v15);
  v57 = (uint8x16_t)vzip1q_s64(v54, v13);
  v13.i64[0] = *(unint64_t *)((char *)v17 + v15 + v15 + v15);
  v14.i64[0] = *(unint64_t *)((char *)v28 + v15 + v15);
  v58 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v57, v50))));
  v59 = vaddq_s32(v40, vaddq_s32(v51, v58));
  v60 = vaddq_s32(v52, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v13, v14), v50)))));
  v61 = vaddq_s32(v41, v60);
  v60.i64[0] = *(uint64_t *)((char *)v18 + v15 + v15 + v15);
  v52.i64[0] = *(uint64_t *)((char *)v32 + v15 + v15);
  v62 = (uint8x16_t)vzip1q_s64((int64x2_t)v60, (int64x2_t)v52);
  v52.i64[0] = *(unint64_t *)((char *)v19 + v15 + v15 + v15);
  v58.i64[0] = *(unint64_t *)((char *)v23 + v15 + v15 + v15);
  v63 = vaddq_s32(v44, vaddq_s32(v55, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v62, v50))))));
  v64 = vaddq_s32(v46, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(v56)), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v52, (int64x2_t)v58), v50))))));
  *(int32x2_t *)v63.i8 = vadd_s32(*(int32x2_t *)v63.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2));
  result.n64_u32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v59.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v59, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v61.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2))).u32[0];
  result.n64_u32[1] = vext_s8(*(int8x8_t *)&v63, (int8x8_t)vzip1_s16(*(int16x4_t *)&v63, (int16x4_t)vadd_s32(*(int32x2_t *)&v64, (int32x2_t)vdupq_laneq_s32(v64, 2))), 4uLL).u32[1];
  a3->n64_u64[0] = result.n64_u64[0];
  return result;
}

__n64 sub_2160E10B8(unsigned int a1, uint64_t a2, __n64 *a3)
{
  uint8x16_t *v4;
  unint64_t v5;
  uint8x16_t v6;
  int32x4_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  int32x4_t v10;
  uint8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t v16;
  int32x4_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint8x16_t v28;
  int32x4_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint8x16_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint8x16_t v40;
  int32x4_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint8x16_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint8x16_t v52;
  int32x4_t v53;
  uint64_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint8x16_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint8x16_t v65;
  int32x4_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint8x16_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  uint8x16_t v77;
  int32x4_t v78;
  uint8x16_t v79;
  uint8x16_t v80;
  int32x4_t v81;
  uint8x16_t v82;
  int32x4_t v83;
  int32x4_t v84;
  uint8x16_t v85;
  int32x4_t v86;
  uint8x16_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  uint8x16_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  uint8x16_t v98;
  uint8x16_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  uint8x16_t v104;
  uint8x16_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint8x16_t v110;
  uint8x16_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint8x16_t v120;
  uint8x16_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  uint8x16_t v130;
  uint8x16_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  uint8x16_t v140;
  uint8x16_t v141;
  int32x4_t v142;
  int32x4_t v143;
  uint8x16_t v144;
  int32x4_t v145;
  int16x4_t v146;
  __n64 result;
  uint8x16_t *v148;

  v4 = *(uint8x16_t **)(a2 + 56);
  v5 = *(unsigned int *)(a2 + 16);
  if (sub_2160DDE40(a1))
  {
    v6 = vrhaddq_u8(*(uint8x16_t *)v5, *(uint8x16_t *)v5);
    v7 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, v6))));
    v8 = v4[1];
    v9 = v4[2];
    v10 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v6, v8)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(MEMORY[0], MEMORY[0]), *v4)))));
    v11 = vrhaddq_u8(*(uint8x16_t *)(2 * v5), *(uint8x16_t *)(2 * v5));
    v12 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v8, v11)))), v7);
    v13 = vaddq_s32(v10, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v11, v9)))));
    v14 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)v5, *(uint8x16_t *)v5), v8)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(MEMORY[0], MEMORY[0]), *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v11, v9)))));
    v15 = v14;
    v16 = vrhaddq_u8(*(uint8x16_t *)(3 * v5), *(uint8x16_t *)(3 * v5));
    v17 = vaddq_s32(v12, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v9, v16)))));
    v18 = v4[3];
    v19 = v4[4];
    v20 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v16, v18))));
    v21 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(3 * v5), *(uint8x16_t *)(3 * v5)), v18))));
    v22 = v21;
    v23 = vrhaddq_u8(*(uint8x16_t *)(4 * v5), *(uint8x16_t *)(4 * v5));
    v24 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v18, v23))));
    v25 = vaddq_s32(v20, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v23, v19)))));
    v26 = vaddq_s32(v21, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v23, v19)))));
    v27 = vaddq_s32(v22, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v23, v19)))));
    v28 = vrhaddq_u8(*(uint8x16_t *)(5 * v5), *(uint8x16_t *)(5 * v5));
    v29 = vaddq_s32(v24, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v19, v28)))));
    v30 = v4[5];
    v31 = v4[6];
    v32 = vaddq_s32(v13, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v30)))));
    v33 = vaddq_s32(v14, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v30)))));
    v34 = vaddq_s32(v15, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v30)))));
    v35 = vrhaddq_u8(*(uint8x16_t *)(6 * v5), *(uint8x16_t *)(6 * v5));
    v36 = vaddq_s32(v17, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, v35)))));
    v37 = vaddq_s32(v25, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v31)))));
    v38 = vaddq_s32(v26, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v31)))));
    v39 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v31)))));
    v40 = vrhaddq_u8(*(uint8x16_t *)(7 * v5), *(uint8x16_t *)(7 * v5));
    v41 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v31, v40)))));
    v42 = v4[7];
    v43 = v4[8];
    v44 = vaddq_s32(v32, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v40, v42)))));
    v45 = vaddq_s32(v33, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v40, v42)))));
    v46 = vaddq_s32(v34, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v40, v42)))));
    v47 = vrhaddq_u8(*(uint8x16_t *)(8 * v5), *(uint8x16_t *)(8 * v5));
    v48 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v42, v47)))));
    v49 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, v43)))));
    v50 = vaddq_s32(v38, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, v43)))));
    v51 = vaddq_s32(v39, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, v43)))));
    v52 = vrhaddq_u8(*(uint8x16_t *)(9 * v5), *(uint8x16_t *)(9 * v5));
    v53 = vaddq_s32(v41, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v43, v52)))));
    v54 = 10 * v5;
    v55 = v4[9];
    v56 = v4[10];
    v57 = vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v52, v55)))));
    v58 = vaddq_s32(v45, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v52, v55)))));
    v59 = vaddq_s32(v46, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(9 * v5), *(uint8x16_t *)(9 * v5)), v55)))));
    v60 = vrhaddq_u8(*(uint8x16_t *)(10 * v5), *(uint8x16_t *)(10 * v5));
    v61 = vaddq_s32(v48, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v55, v60)))));
    v62 = vaddq_s32(v49, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v60, v56)))));
    v63 = vaddq_s32(v50, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v60, v56)))));
    v64 = vaddq_s32(v51, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v60, v56)))));
    v65 = vrhaddq_u8(*(uint8x16_t *)(11 * v5), *(uint8x16_t *)(11 * v5));
    v66 = vaddq_s32(v53, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v65)))));
    v67 = v4[11];
    v68 = v4[12];
    v69 = vaddq_s32(v57, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v65, v67)))));
    v70 = vaddq_s32(v58, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(11 * v5), *(uint8x16_t *)(11 * v5)), v67)))));
    v71 = vaddq_s32(v59, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(11 * v5), *(uint8x16_t *)(11 * v5)), v67)))));
    v72 = vrhaddq_u8(*(uint8x16_t *)(12 * v5), *(uint8x16_t *)(12 * v5));
    v73 = vaddq_s32(v61, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v67, v72)))));
    v148 = (uint8x16_t *)(13 * v5);
    v74 = vaddq_s32(v62, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v72, v68)))));
    v75 = vaddq_s32(v63, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v72, v68)))));
    v76 = vaddq_s32(v64, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v72, v68)))));
    v77 = vrhaddq_u8(*(uint8x16_t *)(13 * v5), *(uint8x16_t *)(13 * v5));
    v78 = vaddq_s32(v66, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v68, v77)))));
    v79 = v4[13];
    v80 = v4[14];
    v81 = vaddq_s32(v69, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v77, v79)))));
    v82 = vrhaddq_u8(*(uint8x16_t *)(14 * v5), *(uint8x16_t *)(14 * v5));
    v83 = vaddq_s32(v73, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v79, v82)))));
    v84 = vaddq_s32(v74, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v82, v80)))));
    v85 = vrhaddq_u8(*(uint8x16_t *)(15 * v5), *(uint8x16_t *)(15 * v5));
    v86 = vaddq_s32(v83, vaddq_s32(v78, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v80, v85))))));
    v87 = v4[15];
    v88 = vaddq_s32(vaddq_s32(v81, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v85, v87))))), v84);
    v89 = vaddq_s32(vaddq_s32(vaddq_s32(v70, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*v148, *(uint8x16_t *)(v54 + v5 + v5 + v5)), v79))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)v148 + v5 + v5), *(uint8x16_t *)(v54 + v5 + v5 + v5 + v5 + v5)), v87))))), vaddq_s32(v75, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(
                                   *(uint8x16_t *)((char *)v148 + v5),
                                   *(uint8x16_t *)(v54 + v5 + v5 + v5 + v5)),
                                 v80))))));
    v90 = vaddq_s32(vaddq_s32(vaddq_s32(v71, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(13 * v5), *(uint8x16_t *)(13 * v5)), v79))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v85, v87))))), vaddq_s32(v76, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(14 * v5), *(uint8x16_t *)(14 * v5)), v80))))));
    v91 = vabdq_u8(v87, vrhaddq_u8(*(uint8x16_t *)(16 * v5), *(uint8x16_t *)(16 * v5)));
  }
  else
  {
    v92 = v4[1];
    v93 = v4[2];
    v94 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v5, v92)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(MEMORY[0], *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(2 * v5), v93)))));
    v95 = v94;
    v96 = v94;
    v97 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v92, *(uint8x16_t *)(2 * v5))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, *(uint8x16_t *)v5))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v93, *(uint8x16_t *)(3 * v5))))));
    v98 = v4[3];
    v99 = v4[4];
    v100 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(3 * v5), v98)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(4 * v5), v99)))));
    v101 = v100;
    v102 = v100;
    v103 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v98, *(uint8x16_t *)(4 * v5))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v99, *(uint8x16_t *)(5 * v5))))));
    v104 = v4[5];
    v105 = v4[6];
    v106 = vaddq_s32(v100, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(6 * v5), v105)))));
    v107 = vaddq_s32(v101, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(6 * v5), v105)))));
    v108 = vaddq_s32(v102, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(6 * v5), v105)))));
    v109 = vaddq_s32(v103, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v105, *(uint8x16_t *)(7 * v5))))));
    v110 = v4[7];
    v111 = v4[8];
    v112 = vaddq_s32(vaddq_s32(v94, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(5 * v5), v104))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(7 * v5), v110)))));
    v113 = vaddq_s32(vaddq_s32(v95, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(5 * v5), v104))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(7 * v5), v110)))));
    v114 = vaddq_s32(vaddq_s32(v96, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(5 * v5), v104))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(7 * v5), v110)))));
    v115 = vaddq_s32(vaddq_s32(v97, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v104, *(uint8x16_t *)(6 * v5)))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v110, *(uint8x16_t *)(8 * v5))))));
    v116 = vaddq_s32(v106, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(8 * v5), v111)))));
    v117 = vaddq_s32(v107, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(8 * v5), v111)))));
    v118 = vaddq_s32(v108, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(8 * v5), v111)))));
    v119 = vaddq_s32(v109, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v111, *(uint8x16_t *)(9 * v5))))));
    v120 = v4[9];
    v121 = v4[10];
    v122 = vaddq_s32(v112, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(9 * v5), v120)))));
    v123 = vaddq_s32(v113, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(9 * v5), v120)))));
    v124 = vaddq_s32(v114, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(9 * v5), v120)))));
    v125 = vaddq_s32(v115, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v120, *(uint8x16_t *)(10 * v5))))));
    v126 = vaddq_s32(v116, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(10 * v5), v121)))));
    v127 = vaddq_s32(v117, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(10 * v5), v121)))));
    v128 = vaddq_s32(v118, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(10 * v5), v121)))));
    v129 = vaddq_s32(v119, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v121, *(uint8x16_t *)(11 * v5))))));
    v130 = v4[11];
    v131 = v4[12];
    v132 = vaddq_s32(v122, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(11 * v5), v130)))));
    v133 = vaddq_s32(v123, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(11 * v5), v130)))));
    v134 = vaddq_s32(v124, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(11 * v5), v130)))));
    v135 = vaddq_s32(v125, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v130, *(uint8x16_t *)(12 * v5))))));
    v136 = vaddq_s32(v126, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(12 * v5), v131)))));
    v137 = vaddq_s32(v127, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(12 * v5), v131)))));
    v138 = vaddq_s32(v128, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(12 * v5), v131)))));
    v139 = vaddq_s32(v129, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v131, *(uint8x16_t *)(13 * v5))))));
    v140 = v4[13];
    v141 = v4[14];
    v142 = vaddq_s32(v133, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(13 * v5), v140)))));
    v143 = vaddq_s32(v134, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(13 * v5), v140)))));
    v86 = vaddq_s32(vaddq_s32(v135, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v140, *(uint8x16_t *)(14 * v5)))))), vaddq_s32(v139, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v141, *(uint8x16_t *)(15 * v5)))))));
    v144 = v4[15];
    v88 = vaddq_s32(vaddq_s32(vaddq_s32(v132, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(13 * v5), v140))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(15 * v5), v144))))), vaddq_s32(v136, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(14 * v5), v141))))));
    v89 = vaddq_s32(vaddq_s32(v142, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(15 * v5), v144))))), vaddq_s32(v137, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(14 * v5), v141))))));
    v90 = vaddq_s32(vaddq_s32(v143, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(15 * v5), v144))))), vaddq_s32(v138, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(14 * v5), v141))))));
    v91 = vabdq_u8(v144, *(uint8x16_t *)(16 * v5));
  }
  v145 = vaddq_s32(v86, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v91))));
  v146 = (int16x4_t)vadd_s32(*(int32x2_t *)v89.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v89, 2));
  result.n64_u32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v88.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v88, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v145.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v145, 2))).u32[0];
  result.n64_u32[1] = vext_s8(*(int8x8_t *)&v146, (int8x8_t)vzip1_s16(v146, (int16x4_t)vadd_s32(*(int32x2_t *)&v90, (int32x2_t)vdupq_laneq_s32(v90, 2))), 4uLL).u32[1];
  a3->n64_u64[0] = result.n64_u64[0];
  return result;
}

__n64 sub_2160E222C(unsigned int a1, uint64_t a2, __n64 *a3)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint8x16_t v6;
  int32x4_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  int32x4_t v10;
  uint8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint8x16_t v15;
  int32x4_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint8x16_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint8x16_t v27;
  int32x4_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  uint8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint8x16_t v36;
  int32x4_t v37;
  uint8x16_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  int32x4_t v53;
  int16x4_t v54;
  __n64 result;

  v4 = *(uint8x16_t **)(a2 + 56);
  v5 = (uint8x16_t *)*(unsigned int *)(a2 + 16);
  if (sub_2160DDE40(a1))
  {
    v6 = vrhaddq_u8(*v5, *v5);
    v7 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, v6))));
    v8 = v4[1];
    v9 = v4[2];
    v10 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v6, v8)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(MEMORY[0], MEMORY[0]), *v4)))));
    v11 = vrhaddq_u8(*(uint8x16_t *)(2 * (_QWORD)v5), *(uint8x16_t *)(2 * (_QWORD)v5));
    v12 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v8, v11)))), v7);
    v13 = vaddq_s32(v10, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v11, v9)))));
    v14 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*v5, *v5), v8)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(MEMORY[0], MEMORY[0]), *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v11, v9)))));
    v15 = vrhaddq_u8(*(uint8x16_t *)(3 * (_QWORD)v5), *(uint8x16_t *)(3 * (_QWORD)v5));
    v16 = vaddq_s32(v12, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v9, v15)))));
    v17 = v4[3];
    v18 = v4[4];
    v19 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v15, v17))));
    v20 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(3 * (_QWORD)v5), *(uint8x16_t *)(3 * (_QWORD)v5)), v17))));
    v21 = v20;
    v22 = vrhaddq_u8(*(uint8x16_t *)(4 * (_QWORD)v5), *(uint8x16_t *)(4 * (_QWORD)v5));
    v23 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v17, v22))));
    v24 = vaddq_s32(v19, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, v18)))));
    v25 = vaddq_s32(v20, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, v18)))));
    v26 = vaddq_s32(v21, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, v18)))));
    v27 = vrhaddq_u8(*(uint8x16_t *)(5 * (_QWORD)v5), *(uint8x16_t *)(5 * (_QWORD)v5));
    v28 = vaddq_s32(v23, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v18, v27)))));
    v29 = v4[5];
    v30 = v4[6];
    v31 = vaddq_s32(v13, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v27, v29)))));
    v32 = vaddq_s32(v14, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(5 * (_QWORD)v5), *(uint8x16_t *)(5 * (_QWORD)v5)), v29)))));
    v33 = vrhaddq_u8(*(uint8x16_t *)(6 * (_QWORD)v5), *(uint8x16_t *)(6 * (_QWORD)v5));
    v34 = vaddq_s32(v24, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v33, v30)))));
    v35 = vaddq_s32(v25, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v33, v30)))));
    v36 = vrhaddq_u8(*(uint8x16_t *)(7 * (_QWORD)v5), *(uint8x16_t *)(7 * (_QWORD)v5));
    v37 = vaddq_s32(vaddq_s32(v16, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v29, v33))))), vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, v36))))));
    v38 = v4[7];
    v39 = vaddq_s32(vaddq_s32(v31, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, v38))))), v34);
    v40 = vaddq_s32(vaddq_s32(v32, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, v38))))), v35);
    v41 = vaddq_s32(vaddq_s32(v32, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, v38))))), vaddq_s32(v26, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(vrhaddq_u8(*(uint8x16_t *)(6 * (_QWORD)v5), *(uint8x16_t *)(6 * (_QWORD)v5)), v30))))));
    v42 = vrhaddq_u8(*(uint8x16_t *)(8 * (_QWORD)v5), *(uint8x16_t *)(8 * (_QWORD)v5));
  }
  else
  {
    v43 = v4[1];
    v44 = v4[2];
    v45 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v5, v43)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(MEMORY[0], *v4))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(2 * (_QWORD)v5), v44)))));
    v46 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v43, *(uint8x16_t *)(2 * (_QWORD)v5))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, *v5))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v44, *(uint8x16_t *)(3 * (_QWORD)v5))))));
    v47 = v4[3];
    v48 = v4[4];
    v49 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(3 * (_QWORD)v5), v47)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(4 * (_QWORD)v5), v48)))));
    v50 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, *(uint8x16_t *)(4 * (_QWORD)v5))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, *(uint8x16_t *)(5 * (_QWORD)v5))))));
    v51 = v4[5];
    v52 = v4[6];
    v37 = vaddq_s32(vaddq_s32(v46, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v51, *(uint8x16_t *)(6 * (_QWORD)v5)))))), vaddq_s32(v50, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v52, *(uint8x16_t *)(7 * (_QWORD)v5)))))));
    v38 = v4[7];
    v39 = vaddq_s32(vaddq_s32(vaddq_s32(v45, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(5 * (_QWORD)v5), v51))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(7 * (_QWORD)v5), v38))))), vaddq_s32(v49, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)(6 * (_QWORD)v5), v52))))));
    v40 = v39;
    v41 = v39;
    v42 = *(uint8x16_t *)(8 * (_QWORD)v5);
  }
  v53 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, v42)))));
  v54 = (int16x4_t)vadd_s32(*(int32x2_t *)v40.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2));
  result.n64_u32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v39.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v53.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2))).u32[0];
  result.n64_u32[1] = vext_s8(*(int8x8_t *)&v54, (int8x8_t)vzip1_s16(v54, (int16x4_t)vadd_s32(*(int32x2_t *)&v41, (int32x2_t)vdupq_laneq_s32(v41, 2))), 4uLL).u32[1];
  a3->n64_u64[0] = result.n64_u64[0];
  return result;
}

__n64 sub_2160E2B0C(unsigned int a1, uint64_t a2, __n64 *a3)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int64x2_t v28;
  int32x4_t v29;
  uint8x16_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int32x4_t v33;
  uint8x16_t v34;
  int64x2_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  int64x2_t v39;
  uint8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint64_t *v47;
  uint8x16_t v48;
  uint64_t *v49;
  int64x2_t v50;
  int64x2_t v51;
  int32x4_t v52;
  uint64_t *v53;
  uint8x16_t v54;
  uint64_t *v55;
  int64x2_t v56;
  uint8x16_t v57;
  uint64_t *v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t *v67;
  uint8x16_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  char *v73;
  int64x2_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  uint8x16_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int32x4_t v86;
  uint8x16_t v87;
  int64x2_t v88;
  uint8x16_t v89;
  uint64_t *v90;
  uint8x16_t v91;
  uint64_t *v92;
  uint8x16_t v93;
  int64x2_t v94;
  int64x2_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int32x4_t v110;
  uint8x16_t v111;
  int64x2_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  uint8x16_t v122;
  int64x2_t v123;
  int32x4_t v124;
  int64x2_t v125;
  uint8x16_t v126;
  uint8x16_t v127;
  uint8x16_t v128;
  uint8x16_t v129;
  uint8x16_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint8x16_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int32x4_t v141;
  int32x4_t v142;
  uint8x16_t v143;
  int64x2_t v144;
  uint8x16_t v145;
  uint8x16_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  uint8x16_t v153;
  int32x4_t v154;
  uint16x8_t v155;
  int64x2_t v156;
  int32x4_t v157;
  uint8x16_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int32x4_t v161;
  uint64_t *v162;
  uint64_t *v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  uint64_t *v169;
  int32x4_t v170;
  int32x4_t v171;
  uint64_t *v172;
  uint64_t *v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t *v181;
  uint8x16_t v182;
  uint64_t *v183;
  uint8x16_t v184;
  uint8x16_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  uint64_t *v189;
  int64x2_t v190;
  int32x4_t v191;
  uint8x16_t v192;
  int64x2_t v193;
  uint8x16_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  uint8x16_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  uint8x16_t v208;
  uint8x16_t v209;
  uint8x16_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  uint8x16_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int16x4_t v222;
  __n64 result;

  v5 = (uint64_t *)*(unsigned int *)(a2 + 16);
  v4 = *(unsigned int *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = sub_2160DDE40(a1);
  v20.i64[0] = MEMORY[0];
  if (v7)
  {
    v8.i64[0] = *v5;
    v21 = vzip1q_s64(v20, v8);
    v8.i64[0] = MEMORY[0];
    v9.i64[0] = *v5;
    v22 = vzip1q_s64(v8, v9);
    v23 = (int64x2_t)vrhaddq_u8((uint8x16_t)v21, (uint8x16_t)v22);
    v21.i64[0] = MEMORY[0];
    v22.i64[0] = *v5;
    v24 = vzip1q_s64(v21, v22);
    v22.i64[0] = MEMORY[0];
    v9.i64[0] = *v5;
    v25 = vrhaddq_u8((uint8x16_t)v24, (uint8x16_t)vzip1q_s64(v22, v9));
    v24.i64[0] = MEMORY[0];
    v9.i64[0] = *v5;
    v26 = (uint8x16_t)vzip1q_s64(v24, v9);
    v9.i64[0] = MEMORY[0];
    v10.i64[0] = *v5;
    v27 = vrhaddq_u8(v26, (uint8x16_t)vzip1q_s64(v9, v10));
    v28 = *(int64x2_t *)v6;
    v29 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v23, *(uint8x16_t *)v6))));
    v10.i64[0] = *(_QWORD *)v4;
    v13.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v30 = (uint8x16_t)vzip1q_s64(v10, v13);
    v13.i64[0] = *(_QWORD *)v4;
    v14.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v31 = vzip1q_s64(v13, v14);
    v32 = (int64x2_t)vrhaddq_u8(v30, (uint8x16_t)v31);
    v33 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v23, 1), v32), *(uint8x16_t *)v6))));
    v28.i64[0] = *(_QWORD *)v4;
    v31.i64[0] = v14.i64[0];
    v34 = (uint8x16_t)vzip1q_s64(v28, v31);
    v31.i64[0] = *(_QWORD *)v4;
    v35 = vzip1q_s64(v31, v14);
    v36 = vrhaddq_u8(v34, (uint8x16_t)v35);
    v35.i64[0] = *(_QWORD *)v4;
    v37 = (uint8x16_t)vzip1q_s64(v35, v14);
    v14.i64[0] = *(_QWORD *)v4;
    v15.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v38 = vrhaddq_u8(v37, (uint8x16_t)vzip1q_s64(v14, v15));
    v39 = *(int64x2_t *)(v6 + 16);
    v40 = *(uint8x16_t *)(v6 + 32);
    v41 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v32, (uint8x16_t)v39))));
    v42 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, (uint8x16_t)v39))));
    v43 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, (uint8x16_t)v39))));
    v44 = vaddq_s32(v41, v29);
    v45 = vaddq_s32(v42, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v25, *(uint8x16_t *)v6)))));
    v46 = vaddq_s32(v43, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v27, *(uint8x16_t *)v6)))));
    v47 = (uint64_t *)((char *)v5 + v4 + v4);
    v42.i64[0] = *(_QWORD *)(2 * v4);
    v43.i64[0] = *v47;
    v48 = (uint8x16_t)vzip1q_s64((int64x2_t)v42, (int64x2_t)v43);
    v49 = v47;
    v43.i64[0] = *(_QWORD *)(2 * v4);
    v41.i64[0] = *v47;
    v50 = vzip1q_s64((int64x2_t)v43, (int64x2_t)v41);
    v51 = (int64x2_t)vrhaddq_u8(v48, (uint8x16_t)v50);
    v52 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v32, 1), v51), (uint8x16_t)v39)))), v33);
    v53 = v47;
    v33.i64[0] = *(_QWORD *)(2 * v4);
    v39.i64[0] = *v47;
    v54 = (uint8x16_t)vzip1q_s64((int64x2_t)v33, v39);
    v55 = v47;
    v39.i64[0] = *(_QWORD *)(2 * v4);
    v50.i64[0] = *v47;
    v56 = vzip1q_s64(v39, v50);
    v57 = vrhaddq_u8(v54, (uint8x16_t)v56);
    v58 = v47;
    v56.i64[0] = *(_QWORD *)(2 * v4);
    v50.i64[0] = *v47;
    v59 = (uint8x16_t)vzip1q_s64(v56, v50);
    v50.i64[0] = *(_QWORD *)(2 * v4);
    v41.i64[0] = *v47;
    v60 = vrhaddq_u8(v59, (uint8x16_t)vzip1q_s64(v50, (int64x2_t)v41));
    v61 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v51, v40))));
    v62 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v57, v40))));
    v63 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v60, v40))));
    v64 = vaddq_s32(v44, v61);
    v65 = vaddq_s32(v45, v62);
    v66 = vaddq_s32(v46, v63);
    v67 = (uint64_t *)((char *)v47 + v4);
    v62.i64[0] = *(_QWORD *)(3 * v4);
    v63.i64[0] = *v67;
    v68 = (uint8x16_t)vzip1q_s64((int64x2_t)v62, (int64x2_t)v63);
    v63.i64[0] = *(_QWORD *)(3 * v4);
    v61.i64[0] = *(uint64_t *)((char *)v49 + v4);
    v69 = vzip1q_s64((int64x2_t)v63, (int64x2_t)v61);
    v70 = (int64x2_t)vrhaddq_u8(v68, (uint8x16_t)v69);
    v71 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v51, 1), v70), v40))));
    v72 = vaddq_s32(v52, v71);
    v73 = (char *)v53 + v4;
    v71.i64[0] = *(_QWORD *)(3 * v4);
    v51.i64[0] = *(uint64_t *)((char *)v53 + v4);
    v74 = vzip1q_s64((int64x2_t)v71, v51);
    v51.i64[0] = *(_QWORD *)(3 * v4);
    v69.i64[0] = *(uint64_t *)((char *)v55 + v4);
    v75 = vrhaddq_u8((uint8x16_t)v74, (uint8x16_t)vzip1q_s64(v51, v69));
    v74.i64[0] = *(_QWORD *)(3 * v4);
    v69.i64[0] = *(uint64_t *)((char *)v58 + v4);
    v76 = (uint8x16_t)vzip1q_s64(v74, v69);
    v69.i64[0] = *(_QWORD *)(3 * v4);
    v61.i64[0] = *(uint64_t *)((char *)v5 + v4 + v4 + v4);
    v77 = vrhaddq_u8(v76, (uint8x16_t)vzip1q_s64(v69, (int64x2_t)v61));
    v78 = *(uint8x16_t *)(v6 + 48);
    v79 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v70, v78))));
    v80 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v75, v78))));
    v81 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v77, v78))));
    v61.i64[0] = *(_QWORD *)(4 * v4);
    v17.i64[0] = *(uint64_t *)((char *)v67 + v4);
    v82 = (uint8x16_t)vzip1q_s64((int64x2_t)v61, v17);
    v17.i64[0] = *(_QWORD *)(4 * v4);
    v18.i64[0] = *(uint64_t *)((char *)v49 + v4 + v4);
    v83 = vzip1q_s64(v17, v18);
    v84 = (int64x2_t)vrhaddq_u8(v82, (uint8x16_t)v83);
    v85 = vzip1q_s64(vdupq_laneq_s64(v70, 1), v84);
    v86 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v85, v78))));
    v85.i64[0] = *(_QWORD *)(4 * v4);
    v83.i64[0] = *(uint64_t *)((char *)v53 + v4 + v4);
    v87 = (uint8x16_t)vzip1q_s64(v85, v83);
    v83.i64[0] = *(_QWORD *)(4 * v4);
    v18.i64[0] = *(uint64_t *)((char *)v55 + v4 + v4);
    v88 = vzip1q_s64(v83, v18);
    v89 = vrhaddq_u8(v87, (uint8x16_t)v88);
    v90 = (uint64_t *)((char *)v58 + v4 + v4);
    v88.i64[0] = *(_QWORD *)(4 * v4);
    v18.i64[0] = *v90;
    v91 = (uint8x16_t)vzip1q_s64(v88, v18);
    v92 = (uint64_t *)((char *)v5 + v4 + v4 + v4 + v4);
    v18.i64[0] = *(_QWORD *)(4 * v4);
    v19.i64[0] = *v92;
    v93 = vrhaddq_u8(v91, (uint8x16_t)vzip1q_s64(v18, v19));
    v94 = *(int64x2_t *)(v6 + 128);
    v95 = *(int64x2_t *)(v6 + 144);
    v96 = (uint64_t *)((char *)v67 + v4 + v4);
    v97 = (uint64_t *)((char *)v49 + v4 + v4 + v4);
    v98 = (uint64_t *)&v73[v4 + v4];
    v99 = (uint64_t *)((char *)v55 + v4 + v4 + v4);
    v100 = (uint64_t *)((char *)v90 + v4);
    v101 = (uint64_t *)((char *)v92 + v4);
    v102 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v84, (uint8x16_t)v94))));
    v103 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v89, (uint8x16_t)v94))));
    v104 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v93, (uint8x16_t)v94))));
    v105 = vaddq_s32(v79, v102);
    v106 = vaddq_s32(v80, v103);
    v107 = vaddq_s32(v81, v104);
    v103.i64[0] = *(_QWORD *)(5 * v4);
    v104.i64[0] = *v96;
    v108 = vzip1q_s64((int64x2_t)v103, (int64x2_t)v104);
    v104.i64[0] = *(_QWORD *)(5 * v4);
    v102.i64[0] = *v97;
    v109 = (int64x2_t)vrhaddq_u8((uint8x16_t)v108, (uint8x16_t)vzip1q_s64((int64x2_t)v104, (int64x2_t)v102));
    v110 = vaddq_s32(v86, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v84, 1), v109), (uint8x16_t)v94)))));
    v86.i64[0] = *(_QWORD *)(5 * v4);
    v108.i64[0] = *v98;
    v111 = (uint8x16_t)vzip1q_s64((int64x2_t)v86, v108);
    v108.i64[0] = *(_QWORD *)(5 * v4);
    v94.i64[0] = *v99;
    v112 = vzip1q_s64(v108, v94);
    v113 = vrhaddq_u8(v111, (uint8x16_t)v112);
    v112.i64[0] = *(_QWORD *)(5 * v4);
    v94.i64[0] = *v100;
    v114 = (uint8x16_t)vzip1q_s64(v112, v94);
    v94.i64[0] = *(_QWORD *)(5 * v4);
    v102.i64[0] = *v101;
    v115 = vrhaddq_u8(v114, (uint8x16_t)vzip1q_s64(v94, (int64x2_t)v102));
    v116 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v109, (uint8x16_t)v95))));
    v117 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v113, (uint8x16_t)v95))));
    v118 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v115, (uint8x16_t)v95))));
    v119 = vaddq_s32(v64, v116);
    v120 = vaddq_s32(v65, v117);
    v121 = vaddq_s32(v66, v118);
    v66.i64[0] = *(_QWORD *)(6 * v4);
    v118.i64[0] = *(uint64_t *)((char *)v96 + v4);
    v122 = (uint8x16_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v118);
    v118.i64[0] = *(_QWORD *)(6 * v4);
    v116.i64[0] = *(uint64_t *)((char *)v97 + v4);
    v123 = (int64x2_t)vrhaddq_u8(v122, (uint8x16_t)vzip1q_s64((int64x2_t)v118, (int64x2_t)v116));
    v124 = vaddq_s32(v72, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v109, 1), v123), (uint8x16_t)v95)))));
    v72.i64[0] = *(_QWORD *)(6 * v4);
    v116.i64[0] = *(uint64_t *)((char *)v98 + v4);
    v125 = vzip1q_s64((int64x2_t)v72, (int64x2_t)v116);
    v116.i64[0] = *(_QWORD *)(6 * v4);
    v109.i64[0] = *(uint64_t *)((char *)v99 + v4);
    v126 = vrhaddq_u8((uint8x16_t)v125, (uint8x16_t)vzip1q_s64((int64x2_t)v116, v109));
    v125.i64[0] = *(_QWORD *)(6 * v4);
    v109.i64[0] = *(uint64_t *)((char *)v100 + v4);
    v127 = (uint8x16_t)vzip1q_s64(v125, v109);
    v109.i64[0] = *(_QWORD *)(6 * v4);
    v95.i64[0] = *(uint64_t *)((char *)v101 + v4);
    v128 = vrhaddq_u8(v127, (uint8x16_t)vzip1q_s64(v109, v95));
    v129 = *(uint8x16_t *)(v6 + 160);
    v130 = *(uint8x16_t *)(v6 + 176);
    v131 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v123, v129))));
    v132 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v126, v129))));
    v133 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v128, v129))));
    v134 = vaddq_s32(v105, v131);
    v135 = vaddq_s32(v106, v132);
    v136 = vaddq_s32(v107, v133);
    v132.i64[0] = *(_QWORD *)(7 * v4);
    v133.i64[0] = *(uint64_t *)((char *)v96 + v4 + v4);
    v137 = (uint8x16_t)vzip1q_s64((int64x2_t)v132, (int64x2_t)v133);
    v133.i64[0] = *(_QWORD *)(7 * v4);
    v131.i64[0] = *(uint64_t *)((char *)v97 + v4 + v4);
    v138 = vzip1q_s64((int64x2_t)v133, (int64x2_t)v131);
    v139 = (int64x2_t)vrhaddq_u8(v137, (uint8x16_t)v138);
    v140 = vzip1q_s64(vdupq_laneq_s64(v123, 1), v139);
    v141 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v140, v129))));
    v142 = vaddq_s32(v110, v141);
    v141.i64[0] = *(_QWORD *)(7 * v4);
    v140.i64[0] = *(uint64_t *)((char *)v98 + v4 + v4);
    v138.i64[0] = v141.i64[0];
    v143 = (uint8x16_t)vzip1q_s64((int64x2_t)v141, v140);
    v140.i64[0] = *(uint64_t *)((char *)v99 + v4 + v4);
    v144 = vzip1q_s64(v138, v140);
    v138.i64[0] = *(_QWORD *)(7 * v4);
    v145 = vrhaddq_u8(v143, (uint8x16_t)v144);
    v144.i64[0] = *(uint64_t *)((char *)v100 + v4 + v4);
    v131.i64[0] = *(uint64_t *)((char *)v101 + v4 + v4);
    v146 = vrhaddq_u8((uint8x16_t)vzip1q_s64(v138, v144), (uint8x16_t)vzip1q_s64(v138, (int64x2_t)v131));
    v147 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v145, v130))));
    v148 = vaddq_s32(vaddq_s32(v119, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v139, v130))))), v134);
    v149 = vaddq_s32(vaddq_s32(v120, v147), v135);
    v150 = vaddq_s32(v121, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v146, v130)))));
    v151 = vaddq_s32(v150, v136);
    v150.i64[0] = *(_QWORD *)(8 * v4);
    v135.i64[0] = v150.i64[0];
    v152 = vaddq_s32(vaddq_s32(v124, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v139, 1), (int64x2_t)vrhaddq_u8((uint8x16_t)v150, (uint8x16_t)v135)), v130))))), v142);
  }
  else
  {
    v9.i64[0] = *v5;
    v8.i64[0] = MEMORY[0];
    v10.i64[0] = *v5;
    v153 = (uint8x16_t)vzip1q_s64(v8, v10);
    v154 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v20, v9), *(uint8x16_t *)v6))));
    v12.i64[0] = *(_QWORD *)v4;
    v155 = vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v9, v12), *(uint8x16_t *)v6));
    v11.i64[0] = MEMORY[0];
    v13.i64[0] = *v5;
    v156 = vzip1q_s64(v11, v13);
    v157 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v156, *(uint8x16_t *)v6))));
    v156.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v13.i64[0] = *(_QWORD *)v4;
    v14.i64[0] = v156.i64[0];
    v158 = (uint8x16_t)vzip1q_s64(v13, v14);
    v159 = *(int64x2_t *)(v6 + 16);
    v160 = *(int64x2_t *)(v6 + 32);
    v161 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v12, v156), (uint8x16_t)v159))));
    v162 = (uint64_t *)((char *)v5 + v4 + v4);
    v163 = v162;
    v164 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v158, (uint8x16_t)v159))));
    v165 = vaddq_s32(v161, v154);
    v166 = vaddq_s32(v164, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v153, *(uint8x16_t *)v6)))));
    v161.i64[0] = *(_QWORD *)(2 * v4);
    v167 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v156, (int64x2_t)v161), (uint8x16_t)v159))));
    v168 = vaddq_s32(v167, (int32x4_t)vpaddlq_u32(vpaddlq_u16(v155)));
    v167.i64[0] = *(_QWORD *)v4;
    v164.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v169 = v162;
    v170 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v167, (int64x2_t)v164), (uint8x16_t)v159))));
    v171 = vaddq_s32(v170, v157);
    v170.i64[0] = *v162;
    v172 = (uint64_t *)((char *)v162 + v4);
    v164.i64[0] = v161.i64[0];
    v159.i64[0] = *v163;
    v173 = (uint64_t *)((char *)v163 + v4);
    v174 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v161, (int64x2_t)v170), (uint8x16_t)v160))));
    v175 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v164, v159), (uint8x16_t)v160))));
    v176 = vaddq_s32(v165, v174);
    v177 = vaddq_s32(v166, v175);
    v174.i64[0] = *(_QWORD *)(3 * v4);
    v178 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v170, (int64x2_t)v174), (uint8x16_t)v160))));
    v179 = vaddq_s32(v168, v178);
    v178.i64[0] = *(_QWORD *)(2 * v4);
    v175.i64[0] = *v169;
    v180 = vaddq_s32(v171, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v178, (int64x2_t)v175), (uint8x16_t)v160)))));
    v175.i64[0] = *v172;
    v181 = (uint64_t *)((char *)v172 + v4);
    v182 = (uint8x16_t)vzip1q_s64((int64x2_t)v174, (int64x2_t)v175);
    v159.i64[0] = *v173;
    v183 = (uint64_t *)((char *)v173 + v4);
    v184 = (uint8x16_t)vzip1q_s64((int64x2_t)v174, v159);
    v185 = *(uint8x16_t *)(v6 + 48);
    v186 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v182, v185))));
    v187 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v184, v185))));
    v16.i64[0] = *(_QWORD *)(4 * v4);
    v188 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v175, v16), v185))));
    v160.i64[0] = *(_QWORD *)(3 * v4);
    v17.i64[0] = *(uint64_t *)((char *)v169 + v4);
    v189 = (uint64_t *)((char *)v169 + v4 + v4);
    v190 = vzip1q_s64(v160, v17);
    v191 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v190, v185))));
    v190.i64[0] = *v181;
    v17.i64[0] = v16.i64[0];
    v18.i64[0] = *v183;
    v192 = (uint8x16_t)vzip1q_s64(v17, v18);
    v193 = *(int64x2_t *)(v6 + 128);
    v194 = *(uint8x16_t *)(v6 + 144);
    v195 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v16, v190), (uint8x16_t)v193))));
    v196 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v192, (uint8x16_t)v193))));
    v197 = vaddq_s32(v186, v195);
    v198 = vaddq_s32(v187, v196);
    v195.i64[0] = *(_QWORD *)(5 * v4);
    v199 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v190, (int64x2_t)v195), (uint8x16_t)v193))));
    v200 = vaddq_s32(v188, v199);
    v199.i64[0] = *(_QWORD *)(4 * v4);
    v196.i64[0] = *v189;
    v201 = vaddq_s32(v191, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v199, (int64x2_t)v196), (uint8x16_t)v193)))));
    v196.i64[0] = *(uint64_t *)((char *)v181 + v4);
    v202 = (uint8x16_t)vzip1q_s64((int64x2_t)v195, (int64x2_t)v196);
    v193.i64[0] = *(uint64_t *)((char *)v183 + v4);
    v203 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v195, v193), v194))));
    v204 = vaddq_s32(v176, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v202, v194)))));
    v205 = vaddq_s32(v177, v203);
    v203.i64[0] = *(_QWORD *)(6 * v4);
    v206 = vaddq_s32(v179, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v196, (int64x2_t)v203), v194)))));
    v179.i64[0] = *(_QWORD *)(5 * v4);
    v196.i64[0] = *(uint64_t *)((char *)v189 + v4);
    v207 = vaddq_s32(v180, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v179, (int64x2_t)v196), v194)))));
    v180.i64[0] = *(uint64_t *)((char *)v181 + v4 + v4);
    v196.i64[0] = v203.i64[0];
    v193.i64[0] = *(uint64_t *)((char *)v183 + v4 + v4);
    v208 = (uint8x16_t)vzip1q_s64((int64x2_t)v196, v193);
    v209 = *(uint8x16_t *)(v6 + 160);
    v210 = *(uint8x16_t *)(v6 + 176);
    v211 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v203, (int64x2_t)v180), v209))));
    v212 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v208, v209))));
    v213 = vaddq_s32(v197, v211);
    v214 = vaddq_s32(v198, v212);
    v211.i64[0] = *(_QWORD *)(7 * v4);
    v215 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v180, (int64x2_t)v211), v209))));
    v216 = vaddq_s32(v200, v215);
    v215.i64[0] = *(_QWORD *)(6 * v4);
    v212.i64[0] = *(uint64_t *)((char *)v189 + v4 + v4);
    v217 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v215, (int64x2_t)v212), v209))));
    v218 = vaddq_s32(v201, v217);
    v217.i64[0] = v211.i64[0];
    v212.i64[0] = *(uint64_t *)((char *)v183 + v4 + v4 + v4);
    v219 = (uint8x16_t)vzip1q_s64((int64x2_t)v217, (int64x2_t)v212);
    v212.i64[0] = *(uint64_t *)((char *)v181 + v4 + v4 + v4);
    v220 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v219, v210))));
    v148 = vaddq_s32(vaddq_s32(v204, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v211, (int64x2_t)v212), v210))))), v213);
    v221 = vaddq_s32(v205, v220);
    v149 = vaddq_s32(v221, v214);
    v221.i64[0] = *(_QWORD *)(8 * v4);
    v152 = vaddq_s32(vaddq_s32(v206, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v212, (int64x2_t)v221), v210))))), v216);
    v206.i64[0] = v211.i64[0];
    v214.i64[0] = *(uint64_t *)((char *)v189 + v4 + v4 + v4);
    v151 = vaddq_s32(vaddq_s32(v207, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v206, (int64x2_t)v214), v210))))), v218);
  }
  v222 = (int16x4_t)vadd_s32(*(int32x2_t *)v149.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v149, 2));
  result.n64_u32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v148.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v148, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v152.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v152, 2))).u32[0];
  result.n64_u32[1] = vext_s8(*(int8x8_t *)&v222, (int8x8_t)vzip1_s16(v222, (int16x4_t)vadd_s32(*(int32x2_t *)&v151, (int32x2_t)vdupq_laneq_s32(v151, 2))), 4uLL).u32[1];
  a3->n64_u64[0] = result.n64_u64[0];
  return result;
}

__n64 sub_2160E37AC(unsigned int a1, uint64_t a2, __n64 *a3)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t *v29;
  uint8x16_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  uint8x16_t v36;
  int64x2_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint8x16_t v48;
  int64x2_t v49;
  int32x4_t v50;
  uint8x16_t v51;
  int64x2_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint8x16_t v59;
  int64x2_t v60;
  int64x2_t v61;
  uint32x4_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  uint8x16_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int32x4_t v77;
  uint64_t *v78;
  uint8x16_t v79;
  int64x2_t v80;
  uint8x16_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int64x2_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  int16x4_t v97;
  __n64 result;

  v5 = (uint64_t *)*(unsigned int *)(a2 + 16);
  v4 = *(unsigned int *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = sub_2160DDE40(a1);
  v19.i64[0] = MEMORY[0];
  if (v7)
  {
    v8.i64[0] = *v5;
    v20 = vzip1q_s64(v19, v8);
    v8.i64[0] = MEMORY[0];
    v9.i64[0] = *v5;
    v21 = vzip1q_s64(v8, v9);
    v22 = (int64x2_t)vrhaddq_u8((uint8x16_t)v20, (uint8x16_t)v21);
    v20.i64[0] = MEMORY[0];
    v21.i64[0] = *v5;
    v23 = vzip1q_s64(v20, v21);
    v21.i64[0] = MEMORY[0];
    v9.i64[0] = *v5;
    v24 = vrhaddq_u8((uint8x16_t)v23, (uint8x16_t)vzip1q_s64(v21, v9));
    v23.i64[0] = MEMORY[0];
    v9.i64[0] = *v5;
    v25 = (uint8x16_t)vzip1q_s64(v23, v9);
    v9.i64[0] = MEMORY[0];
    v11.i64[0] = *v5;
    v26 = vrhaddq_u8(v25, (uint8x16_t)vzip1q_s64(v9, v11));
    v27 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v22, *(uint8x16_t *)v6))));
    v28 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v24, *(uint8x16_t *)v6))));
    v12.i64[0] = *(_QWORD *)v4;
    v13.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v29 = (uint64_t *)((char *)v5 + v4 + v4);
    v30 = (uint8x16_t)vzip1q_s64(v12, v13);
    v13.i64[0] = *(_QWORD *)v4;
    v14.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v31 = vzip1q_s64(v13, v14);
    v32 = vdupq_laneq_s64(v22, 1);
    v33 = (int64x2_t)vrhaddq_u8(v30, (uint8x16_t)v31);
    v34 = vzip1q_s64(v32, v33);
    v35 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v34, *(uint8x16_t *)v6))));
    v34.i64[0] = *(_QWORD *)v4;
    v31.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v36 = (uint8x16_t)vzip1q_s64(v34, v31);
    v31.i64[0] = *(_QWORD *)v4;
    v32.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v37 = vzip1q_s64(v31, v32);
    v38 = vrhaddq_u8(v36, (uint8x16_t)v37);
    v37.i64[0] = *(_QWORD *)v4;
    v39 = (uint8x16_t)vzip1q_s64(v37, v32);
    v32.i64[0] = *(_QWORD *)v4;
    v15.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v40 = vrhaddq_u8(v39, (uint8x16_t)vzip1q_s64(v32, v15));
    v41 = *(int64x2_t *)(v6 + 16);
    v42 = *(int64x2_t *)(v6 + 32);
    v43 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v33, (uint8x16_t)v41))));
    v44 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v40, (uint8x16_t)v41))));
    v45 = vaddq_s32(v43, v27);
    v46 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, (uint8x16_t)v41)))), v28);
    v47 = vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v26, *(uint8x16_t *)v6)))));
    v28.i64[0] = *(_QWORD *)(2 * v4);
    v44.i64[0] = *v29;
    v48 = (uint8x16_t)vzip1q_s64((int64x2_t)v28, (int64x2_t)v44);
    v44.i64[0] = *(_QWORD *)(2 * v4);
    v43.i64[0] = *v29;
    v49 = (int64x2_t)vrhaddq_u8(v48, (uint8x16_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v43));
    v50 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v33, 1), v49), (uint8x16_t)v41)))), v35);
    v33.i64[0] = *(_QWORD *)(2 * v4);
    v35.i64[0] = *v29;
    v51 = (uint8x16_t)vzip1q_s64(v33, (int64x2_t)v35);
    v35.i64[0] = *(_QWORD *)(2 * v4);
    v41.i64[0] = *v29;
    v52 = vzip1q_s64((int64x2_t)v35, v41);
    v53 = vrhaddq_u8(v51, (uint8x16_t)v52);
    v52.i64[0] = *(_QWORD *)(2 * v4);
    v41.i64[0] = *v29;
    v54 = (uint8x16_t)vzip1q_s64(v52, v41);
    v41.i64[0] = *(_QWORD *)(2 * v4);
    v43.i64[0] = *v29;
    v55 = vrhaddq_u8(v54, (uint8x16_t)vzip1q_s64(v41, (int64x2_t)v43));
    v56 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v49, (uint8x16_t)v42))));
    v57 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, (uint8x16_t)v42))));
    v58 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v55, (uint8x16_t)v42))));
    v43.i64[0] = *(_QWORD *)(3 * v4);
    v16.i64[0] = *(uint64_t *)((char *)v29 + v4);
    v59 = (uint8x16_t)vzip1q_s64((int64x2_t)v43, v16);
    v16.i64[0] = *(_QWORD *)(3 * v4);
    v17.i64[0] = *(uint64_t *)((char *)v29 + v4);
    v60 = vzip1q_s64(v16, v17);
    v61 = (int64x2_t)vrhaddq_u8(v59, (uint8x16_t)v60);
    v62 = vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v49, 1), v61), (uint8x16_t)v42)));
    v42.i64[0] = *(_QWORD *)(3 * v4);
    v60.i64[0] = v17.i64[0];
    v17.i64[0] = v42.i64[0];
    v18.i64[0] = *(uint64_t *)((char *)v29 + v4);
    v63 = (uint8x16_t)vzip1q_s64(v42, v60);
    v64 = (uint8x16_t)vzip1q_s64(v17, v18);
    v17.i64[0] = *(_QWORD *)(3 * v4);
    v65 = vrhaddq_u8(v63, v64);
    v66 = vrhaddq_u8((uint8x16_t)vzip1q_s64(v17, v18), (uint8x16_t)vzip1q_s64(v17, v18));
    v67 = *(uint8x16_t *)(v6 + 48);
    v68 = vaddq_s32(v45, vaddq_s32(v56, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v61, v67))))));
    v69 = vaddq_s32(v46, vaddq_s32(v57, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v65, v67))))));
    v70 = vaddq_s32(v58, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v66, v67)))));
    v71 = vaddq_s32(v47, v70);
    v70.i64[0] = *(_QWORD *)(4 * v4);
    v46.i64[0] = v70.i64[0];
    v72 = vaddq_s32(v50, vaddq_s32((int32x4_t)vpaddlq_u32(v62), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(vdupq_laneq_s64(v61, 1), (int64x2_t)vrhaddq_u8((uint8x16_t)v70, (uint8x16_t)v46)), v67))))));
  }
  else
  {
    v9.i64[0] = *v5;
    v8.i64[0] = MEMORY[0];
    v10.i64[0] = *v5;
    v73 = (uint8x16_t)vzip1q_s64(v8, v10);
    v74 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v19, v9), *(uint8x16_t *)v6))));
    v11.i64[0] = *(_QWORD *)v4;
    v75 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v9, v11), *(uint8x16_t *)v6))));
    v12.i64[0] = MEMORY[0];
    v13.i64[0] = *v5;
    v76 = vzip1q_s64(v12, v13);
    v77 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v76, *(uint8x16_t *)v6))));
    v76.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v78 = (uint64_t *)((char *)v5 + v4 + v4);
    v13.i64[0] = *(_QWORD *)v4;
    v14.i64[0] = v76.i64[0];
    v79 = (uint8x16_t)vzip1q_s64(v13, v14);
    v80 = *(int64x2_t *)(v6 + 16);
    v81 = *(uint8x16_t *)(v6 + 32);
    v82 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v11, v76), (uint8x16_t)v80))));
    v83 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v79, (uint8x16_t)v80))));
    v84 = vaddq_s32(v82, v74);
    v85 = vaddq_s32(v83, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v73, *(uint8x16_t *)v6)))));
    v82.i64[0] = *(_QWORD *)(2 * v4);
    v86 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v76, (int64x2_t)v82), (uint8x16_t)v80))));
    v87 = vaddq_s32(v86, v75);
    v86.i64[0] = *(_QWORD *)v4;
    v83.i64[0] = *(uint64_t *)((char *)v5 + v4);
    v88 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v86, (int64x2_t)v83), (uint8x16_t)v80)))), v77);
    v77.i64[0] = *v78;
    v83.i64[0] = v82.i64[0];
    v80.i64[0] = *v78;
    v89 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v82, (int64x2_t)v77), v81))));
    v90 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v83, v80), v81))));
    v80.i64[0] = *(_QWORD *)(3 * v4);
    v91 = (int64x2_t)vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v77, v80), v81)));
    v92 = (int32x4_t)vpaddlq_u32((uint32x4_t)v91);
    v91.i64[0] = *(_QWORD *)(2 * v4);
    v16.i64[0] = *v78;
    v93 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v91, v16), v81))));
    v16.i64[0] = *(uint64_t *)((char *)v78 + v4);
    v94 = (uint8x16_t)vzip1q_s64(v80, v16);
    v17.i64[0] = v16.i64[0];
    v95 = (uint8x16_t)vzip1q_s64(v80, v17);
    v96 = *(uint8x16_t *)(v6 + 48);
    v68 = vaddq_s32(v84, vaddq_s32(v89, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v94, v96))))));
    v69 = vaddq_s32(v85, vaddq_s32(v90, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v95, v96))))));
    v85.i64[0] = *(_QWORD *)(4 * v4);
    v72 = vaddq_s32(v87, vaddq_s32(v92, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(v16, (int64x2_t)v85), v96))))));
    v87.i64[0] = *(_QWORD *)(3 * v4);
    v89.i64[0] = v16.i64[0];
    v71 = vaddq_s32(v88, vaddq_s32(v93, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v87, (int64x2_t)v89), v96))))));
  }
  v97 = (int16x4_t)vadd_s32(*(int32x2_t *)v69.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2));
  result.n64_u32[0] = vzip1_s16((int16x4_t)vadd_s32(*(int32x2_t *)v68.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v68, 2)), (int16x4_t)vadd_s32(*(int32x2_t *)v72.i8, (int32x2_t)*(_OWORD *)&vdupq_laneq_s32(v72, 2))).u32[0];
  result.n64_u32[1] = vext_s8(*(int8x8_t *)&v97, (int8x8_t)vzip1_s16(v97, (int16x4_t)vadd_s32(*(int32x2_t *)&v71, (int32x2_t)vdupq_laneq_s32(v71, 2))), 4uLL).u32[1];
  a3->n64_u64[0] = result.n64_u64[0];
  return result;
}

double sub_2160E3E28(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint8x16_t v6;
  int32x4_t v7;
  uint8x16_t *v8;
  int32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint32x4_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint8x16_t v28;
  uint8x16_t *v29;
  int32x4_t v30;
  uint8x16_t v31;
  uint8x16_t *v32;
  int32x4_t v33;
  int32x4_t v34;
  uint8x16_t v35;
  uint8x16_t *v36;
  int32x4_t v37;
  uint8x16_t v38;
  uint8x16_t *v39;
  int32x4_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint8x16_t v45;
  uint8x16_t *v46;
  int32x4_t v47;
  uint8x16_t v48;
  uint8x16_t *v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint8x16_t v53;
  uint8x16_t *v54;
  int32x4_t v55;
  uint8x16_t v56;
  uint8x16_t *v57;
  int32x4_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint8x16_t v63;
  uint8x16_t *v64;
  int32x4_t v65;
  uint8x16_t v66;
  uint8x16_t *v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint8x16_t v71;
  uint8x16_t *v72;
  int32x4_t v73;
  uint8x16_t v74;
  uint8x16_t *v75;
  int32x4_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint8x16_t v81;
  uint8x16_t *v82;
  int32x4_t v83;
  uint8x16_t v84;
  uint8x16_t *v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  uint8x16_t v89;
  uint8x16_t *v90;
  int32x4_t v91;
  uint8x16_t v92;
  uint8x16_t *v93;
  int32x4_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  int32x4_t v97;
  int32x4_t v98;
  uint8x16_t v99;
  uint8x16_t *v100;
  int32x4_t v101;
  uint8x16_t v102;
  uint8x16_t *v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  uint8x16_t v107;
  uint8x16_t *v108;
  int32x4_t v109;
  uint8x16_t v110;
  uint8x16_t *v111;
  int32x4_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  int32x4_t v115;
  int32x4_t v116;
  uint8x16_t v117;
  uint8x16_t *v118;
  int32x4_t v119;
  uint8x16_t v120;
  uint8x16_t *v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  uint8x16_t v125;
  uint8x16_t *v126;
  int32x4_t v127;
  uint8x16_t v128;
  uint8x16_t *v129;
  int32x4_t v130;
  uint8x16_t v131;
  uint8x16_t v132;
  __int8 *v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  uint8x16_t v138;
  uint8x16_t v139;
  uint8x16_t *v140;
  uint8x16_t v141;
  int32x4_t v142;
  uint8x16_t v143;
  uint8x16_t *v144;
  uint8x16_t *v145;
  uint8x16_t v146;
  uint8x16_t v147;
  uint8x16_t v148;
  uint8x16_t v149;
  uint8x16_t *v150;
  uint8x16_t *v151;
  int32x4_t v152;
  uint8x16_t v153;
  uint8x16_t v154;
  int32x4_t v155;
  int32x4_t v156;
  uint8x16_t v157;
  uint8x16_t v158;
  uint8x16_t *v159;
  uint8x16_t *v160;
  int32x4_t v161;
  uint8x16_t v162;
  uint8x16_t v163;
  int32x4_t v164;
  int32x4_t v165;
  uint8x16_t v166;
  uint8x16_t v167;
  uint8x16_t *v168;
  uint8x16_t *v169;
  int32x4_t v170;
  int32x4_t v171;
  uint8x16_t v172;
  uint8x16_t v173;
  int32x4_t v174;
  int32x4_t v175;
  uint8x16_t v176;
  uint8x16_t v177;
  uint8x16_t *v178;
  uint8x16_t *v179;
  int32x4_t v180;
  int32x4_t v181;
  uint8x16_t v182;
  uint8x16_t v183;
  int32x4_t v184;
  int32x4_t v185;
  uint8x16_t v186;
  uint8x16_t v187;
  uint8x16_t *v188;
  uint8x16_t *v189;
  int32x4_t v190;
  int32x4_t v191;
  uint8x16_t v192;
  uint8x16_t v193;
  int32x4_t v194;
  int32x4_t v195;
  uint8x16_t v196;
  uint8x16_t v197;
  uint8x16_t *v198;
  uint8x16_t *v199;
  int32x4_t v200;
  int32x4_t v201;
  uint8x16_t v202;
  uint8x16_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  double result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = (uint8x16_t *)a1[4];
  v5 = (uint8x16_t *)a1[5];
  v6 = v3[1];
  v7 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v5, *v3))));
  v8 = (uint8x16_t *)a1[3];
  v9 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v8, *v3))));
  v11 = *(unsigned int *)(a2 + 16);
  v10 = *(unsigned int *)(a2 + 20);
  v12 = (uint8x16_t *)((char *)v5 + v11);
  v13 = (uint8x16_t *)((char *)v8 + v11);
  v14 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v12, v6)))), v7);
  v15 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v13, v6)))), v9);
  v16 = (uint8x16_t *)((char *)v12 + v11);
  v17 = *v16;
  v18 = (uint8x16_t *)((char *)v13 + v11);
  v19 = vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v16, *v3)));
  v20 = (uint8x16_t *)((char *)v16 + v11);
  v21 = *v18;
  v22 = vabdq_u8(*v3, *v18);
  v23 = (uint8x16_t *)((char *)v18 + v11);
  v24 = v3[2];
  v25 = v3[3];
  v26 = vaddq_s32(v14, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v17, v24)))));
  v27 = vaddq_s32(v15, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v24)))));
  v28 = *v20;
  v29 = (uint8x16_t *)((char *)v20 + v11);
  v30 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v6)))), (int32x4_t)vpaddlq_u32(v19));
  v31 = *v23;
  v32 = (uint8x16_t *)((char *)v23 + v11);
  v33 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v6, v31)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v22))));
  v34 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v25))));
  v35 = *v29;
  v36 = (uint8x16_t *)((char *)v29 + v11);
  v37 = vaddq_s32(v30, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v24)))));
  v38 = *v32;
  v39 = (uint8x16_t *)((char *)v32 + v11);
  v40 = vaddq_s32(v33, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v24, v38)))));
  v41 = v3[4];
  v42 = v3[5];
  v43 = vaddq_s32(v34, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v41)))));
  v44 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v31, v25)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, v41)))));
  v45 = *v36;
  v46 = (uint8x16_t *)((char *)v36 + v11);
  v47 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v45, v25))));
  v48 = *v39;
  v49 = (uint8x16_t *)((char *)v39 + v11);
  v50 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v25, v48))));
  v51 = vaddq_s32(v26, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v45, v42)))));
  v52 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, v42)))));
  v53 = *v46;
  v54 = (uint8x16_t *)((char *)v46 + v11);
  v55 = vaddq_s32(v47, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, v41)))));
  v56 = *v49;
  v57 = (uint8x16_t *)((char *)v49 + v11);
  v58 = vaddq_s32(v50, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v41, v56)))));
  v59 = v3[6];
  v60 = v3[7];
  v61 = vaddq_s32(v43, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, v59)))));
  v62 = vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v59)))));
  v63 = *v54;
  v64 = (uint8x16_t *)((char *)v54 + v11);
  v65 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v63, v42)))));
  v66 = *v57;
  v67 = (uint8x16_t *)((char *)v57 + v11);
  v68 = vaddq_s32(v40, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v42, v66)))));
  v69 = vaddq_s32(v51, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v63, v60)))));
  v70 = vaddq_s32(v52, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v66, v60)))));
  v71 = *v64;
  v72 = (uint8x16_t *)((char *)v64 + v11);
  v73 = vaddq_s32(v55, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, v59)))));
  v74 = *v67;
  v75 = (uint8x16_t *)((char *)v67 + v11);
  v76 = vaddq_s32(v58, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v59, v74)))));
  v77 = v3[8];
  v78 = v3[9];
  v79 = vaddq_s32(v61, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, v77)))));
  v80 = vaddq_s32(v62, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v74, v77)))));
  v81 = *v72;
  v82 = (uint8x16_t *)((char *)v72 + v11);
  v83 = vaddq_s32(v65, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v81, v60)))));
  v84 = *v75;
  v85 = (uint8x16_t *)((char *)v75 + v11);
  v86 = vaddq_s32(v68, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v60, v84)))));
  v87 = vaddq_s32(v69, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v81, v78)))));
  v88 = vaddq_s32(v70, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v84, v78)))));
  v89 = *v82;
  v90 = (uint8x16_t *)((char *)v82 + v11);
  v91 = vaddq_s32(v73, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v89, v77)))));
  v92 = *v85;
  v93 = (uint8x16_t *)((char *)v85 + v11);
  v94 = vaddq_s32(v76, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v77, v92)))));
  v95 = v3[10];
  v96 = v3[11];
  v97 = vaddq_s32(v79, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v89, v95)))));
  v98 = vaddq_s32(v80, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v92, v95)))));
  v99 = *v90;
  v100 = (uint8x16_t *)((char *)v90 + v11);
  v101 = vaddq_s32(v83, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v99, v78)))));
  v102 = *v93;
  v103 = (uint8x16_t *)((char *)v93 + v11);
  v104 = vaddq_s32(v86, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v78, v102)))));
  v105 = vaddq_s32(v87, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v99, v96)))));
  v106 = vaddq_s32(v88, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v102, v96)))));
  v107 = *v100;
  v108 = (uint8x16_t *)((char *)v100 + v11);
  v109 = vaddq_s32(v91, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v107, v95)))));
  v110 = *v103;
  v111 = (uint8x16_t *)((char *)v103 + v11);
  v112 = vaddq_s32(v94, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v95, v110)))));
  v113 = v3[12];
  v114 = v3[13];
  v115 = vaddq_s32(v97, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v107, v113)))));
  v116 = vaddq_s32(v98, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v110, v113)))));
  v117 = *v108;
  v118 = (uint8x16_t *)((char *)v108 + v11);
  v119 = vaddq_s32(v101, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v117, v96)))));
  v120 = *v111;
  v121 = (uint8x16_t *)((char *)v111 + v11);
  v122 = vaddq_s32(v104, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v96, v120)))));
  v123 = vaddq_s32(v105, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v117, v114)))));
  v124 = vaddq_s32(v106, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v120, v114)))));
  v125 = *v118;
  v126 = (uint8x16_t *)((char *)v118 + v11);
  v127 = vaddq_s32(v109, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v125, v113)))));
  v128 = *v121;
  v129 = (uint8x16_t *)((char *)v121 + v11);
  v130 = vaddq_s32(v112, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v113, v128)))));
  v131 = v3[14];
  v132 = v3[15];
  v133 = &v4->i8[v11];
  v134 = vaddq_s32(vaddq_s32(v123, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v126, v132))))), vaddq_s32(v115, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v125, v131))))));
  v135 = vaddq_s32(vaddq_s32(v124, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v129, v132))))), vaddq_s32(v116, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v128, v131))))));
  v136 = vaddq_s32(vaddq_s32(vaddq_s32(v119, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v126, v114))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v126 + v11 + v11), v132))))), vaddq_s32(v127, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v126 + v11), v131))))));
  v137 = vaddq_s32(vaddq_s32(vaddq_s32(v122, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v114, *v129))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v129 + v11 + v11), v132))))), vaddq_s32(v130, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v129 + v11), v131))))));
  a3[5] = vaddq_s32(v134, vdupq_laneq_s32(v134, 2)).u16[0];
  *a3 = vaddq_s32(v136, vdupq_laneq_s32(v136, 2)).u16[0];
  a3[3] = vaddq_s32(v135, vdupq_laneq_s32(v135, 2)).u16[0];
  a3[2] = vaddq_s32(v137, vdupq_laneq_s32(v137, 2)).u16[0];
  v138 = *v4;
  v139 = *(uint8x16_t *)((char *)v4 + v11);
  v140 = (uint8x16_t *)((char *)v4 + v10);
  v141 = v3[1];
  v142 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v139, v141)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v138, *v3)))));
  v143 = *v140;
  v144 = (uint8x16_t *)((char *)v140 + v10);
  v145 = (uint8x16_t *)&v133[v10 + v10];
  v146 = v3[2];
  v147 = v3[3];
  v148 = *v144;
  v149 = *v145;
  v150 = (uint8x16_t *)((char *)v144 + v10);
  v151 = (uint8x16_t *)((char *)v145 + v10);
  v152 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v141, v149)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, v148)))));
  v153 = v3[4];
  v154 = v3[5];
  v155 = vaddq_s32(v142, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v148, v153)))));
  v156 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v143, v146)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)&v133[v10], v147))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v149, v154)))));
  v157 = *v150;
  v158 = *v151;
  v159 = (uint8x16_t *)((char *)v150 + v10);
  v160 = (uint8x16_t *)((char *)v151 + v10);
  v161 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v146, v157)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v147, v158)))));
  v162 = v3[6];
  v163 = v3[7];
  v164 = vaddq_s32(v155, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v157, v162)))));
  v165 = vaddq_s32(v156, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v158, v163)))));
  v166 = *v159;
  v167 = *v160;
  v168 = (uint8x16_t *)((char *)v159 + v10);
  v169 = (uint8x16_t *)((char *)v160 + v10);
  v170 = vaddq_s32(v152, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v153, v166)))));
  v171 = vaddq_s32(v161, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v154, v167)))));
  v172 = v3[8];
  v173 = v3[9];
  v174 = vaddq_s32(v164, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v166, v172)))));
  v175 = vaddq_s32(v165, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v167, v173)))));
  v176 = *v168;
  v177 = *v169;
  v178 = (uint8x16_t *)((char *)v168 + v10);
  v179 = (uint8x16_t *)((char *)v169 + v10);
  v180 = vaddq_s32(v170, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v162, v176)))));
  v181 = vaddq_s32(v171, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v163, v177)))));
  v182 = v3[10];
  v183 = v3[11];
  v184 = vaddq_s32(v174, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v176, v182)))));
  v185 = vaddq_s32(v175, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v177, v183)))));
  v186 = *v178;
  v187 = *v179;
  v188 = (uint8x16_t *)((char *)v178 + v10);
  v189 = (uint8x16_t *)((char *)v179 + v10);
  v190 = vaddq_s32(v180, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v172, v186)))));
  v191 = vaddq_s32(v181, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v173, v187)))));
  v192 = v3[12];
  v193 = v3[13];
  v194 = vaddq_s32(v184, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v186, v192)))));
  v195 = vaddq_s32(v185, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v187, v193)))));
  v196 = *v188;
  v197 = *v189;
  v198 = (uint8x16_t *)((char *)v188 + v10);
  v199 = (uint8x16_t *)((char *)v189 + v10);
  v200 = vaddq_s32(v190, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v182, v196)))));
  v201 = vaddq_s32(v191, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v183, v197)))));
  v202 = v3[14];
  v203 = v3[15];
  v204 = vaddq_s32(vaddq_s32(v194, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v196, v202))))), vaddq_s32(v195, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v197, v203))))));
  v205 = vaddq_s32(v200, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v192, *v198)))));
  v206 = vaddq_s32(v201, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v193, *v199)))));
  v207 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v203, *(uint8x16_t *)((char *)v199 + v10)))));
  v208 = vaddq_s32(v205, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v202, *(uint8x16_t *)((char *)v198 + v10))))));
  a3[4] = vaddq_s32(v204, vdupq_laneq_s32(v204, 2)).u16[0];
  v209 = vaddq_s32(v208, vaddq_s32(v206, v207));
  *(_QWORD *)&result = vaddq_s32(v209, vdupq_laneq_s32(v209, 2)).u64[0];
  a3[1] = LOWORD(result);
  return result;
}

double sub_2160E47D0(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint8x16_t v6;
  int32x4_t v7;
  uint8x16_t *v8;
  int32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint32x4_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint8x16_t v28;
  uint8x16_t *v29;
  int32x4_t v30;
  uint8x16_t v31;
  uint8x16_t *v32;
  int32x4_t v33;
  int32x4_t v34;
  uint8x16_t v35;
  uint8x16_t *v36;
  int32x4_t v37;
  uint8x16_t v38;
  uint8x16_t *v39;
  int32x4_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint8x16_t v45;
  uint8x16_t *v46;
  int32x4_t v47;
  uint8x16_t v48;
  uint8x16_t *v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint8x16_t v53;
  uint8x16_t *v54;
  int32x4_t v55;
  uint8x16_t v56;
  uint8x16_t *v57;
  int32x4_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  __int8 *v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t *v68;
  uint8x16_t v69;
  int32x4_t v70;
  uint8x16_t v71;
  uint8x16_t *v72;
  uint8x16_t *v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t *v78;
  uint8x16_t *v79;
  int32x4_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  int32x4_t v83;
  int32x4_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t *v87;
  uint8x16_t *v88;
  int32x4_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  double result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = (uint8x16_t *)a1[4];
  v5 = (uint8x16_t *)a1[5];
  v6 = v3[1];
  v7 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v5, *v3))));
  v8 = (uint8x16_t *)a1[3];
  v9 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v8, *v3))));
  v11 = *(unsigned int *)(a2 + 16);
  v10 = *(unsigned int *)(a2 + 20);
  v12 = (uint8x16_t *)((char *)v5 + v11);
  v13 = (uint8x16_t *)((char *)v8 + v11);
  v14 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v12, v6)))), v7);
  v15 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v13, v6)))), v9);
  v16 = (uint8x16_t *)((char *)v12 + v11);
  v17 = *v16;
  v18 = (uint8x16_t *)((char *)v13 + v11);
  v19 = vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v16, *v3)));
  v20 = (uint8x16_t *)((char *)v16 + v11);
  v21 = *v18;
  v22 = vabdq_u8(*v3, *v18);
  v23 = (uint8x16_t *)((char *)v18 + v11);
  v24 = v3[2];
  v25 = v3[3];
  v26 = vaddq_s32(v14, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v17, v24)))));
  v27 = vaddq_s32(v15, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v24)))));
  v28 = *v20;
  v29 = (uint8x16_t *)((char *)v20 + v11);
  v30 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v6)))), (int32x4_t)vpaddlq_u32(v19));
  v31 = *v23;
  v32 = (uint8x16_t *)((char *)v23 + v11);
  v33 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v6, v31)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v22))));
  v34 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v25))));
  v35 = *v29;
  v36 = (uint8x16_t *)((char *)v29 + v11);
  v37 = vaddq_s32(v30, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v24)))));
  v38 = *v32;
  v39 = (uint8x16_t *)((char *)v32 + v11);
  v40 = vaddq_s32(v33, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v24, v38)))));
  v41 = v3[4];
  v42 = v3[5];
  v43 = vaddq_s32(v34, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v41)))));
  v44 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v31, v25)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, v41)))));
  v45 = *v36;
  v46 = (uint8x16_t *)((char *)v36 + v11);
  v47 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v45, v25))));
  v48 = *v39;
  v49 = (uint8x16_t *)((char *)v39 + v11);
  v50 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v25, v48))));
  v51 = vaddq_s32(v26, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v45, v42)))));
  v52 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, v42)))));
  v53 = *v46;
  v54 = (uint8x16_t *)((char *)v46 + v11);
  v55 = vaddq_s32(v47, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, v41)))));
  v56 = *v49;
  v57 = (uint8x16_t *)((char *)v49 + v11);
  v58 = vaddq_s32(v50, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v41, v56)))));
  v59 = v3[6];
  v60 = v3[7];
  v61 = &v4->i8[v11];
  v62 = vaddq_s32(vaddq_s32(v51, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v54, v60))))), vaddq_s32(v43, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, v59))))));
  v63 = vaddq_s32(vaddq_s32(v52, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v57, v60))))), vaddq_s32(v44, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v59))))));
  v64 = vaddq_s32(vaddq_s32(vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v54, v42))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v54 + v11 + v11), v60))))), vaddq_s32(v55, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v54 + v11), v59))))));
  v65 = vaddq_s32(vaddq_s32(vaddq_s32(v40, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v42, *v57))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v57 + v11 + v11), v60))))), vaddq_s32(v58, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v57 + v11), v59))))));
  a3[5] = vaddq_s32(v62, vdupq_laneq_s32(v62, 2)).u16[0];
  *a3 = vaddq_s32(v64, vdupq_laneq_s32(v64, 2)).u16[0];
  a3[3] = vaddq_s32(v63, vdupq_laneq_s32(v63, 2)).u16[0];
  a3[2] = vaddq_s32(v65, vdupq_laneq_s32(v65, 2)).u16[0];
  v66 = *v4;
  v67 = *(uint8x16_t *)((char *)v4 + v11);
  v68 = (uint8x16_t *)((char *)v4 + v10);
  v69 = v3[1];
  v70 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v67, v69)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v66, *v3)))));
  v71 = *v68;
  v72 = (uint8x16_t *)((char *)v68 + v10);
  v73 = (uint8x16_t *)&v61[v10 + v10];
  v74 = v3[2];
  v75 = v3[3];
  v76 = *v72;
  v77 = *v73;
  v78 = (uint8x16_t *)((char *)v72 + v10);
  v79 = (uint8x16_t *)((char *)v73 + v10);
  v80 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v69, v77)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, v76)))));
  v81 = v3[4];
  v82 = v3[5];
  v83 = vaddq_s32(v70, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v76, v81)))));
  v84 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, v74)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)&v61[v10], v75))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v77, v82)))));
  v85 = *v78;
  v86 = *v79;
  v87 = (uint8x16_t *)((char *)v78 + v10);
  v88 = (uint8x16_t *)((char *)v79 + v10);
  v89 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v74, v85)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v75, v86)))));
  v90 = v3[6];
  v91 = v3[7];
  v92 = vaddq_s32(vaddq_s32(v83, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v85, v90))))), vaddq_s32(v84, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v86, v91))))));
  v93 = vaddq_s32(v80, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v81, *v87)))));
  v94 = vaddq_s32(v89, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v82, *v88)))));
  v95 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v91, *(uint8x16_t *)((char *)v88 + v10)))));
  v96 = vaddq_s32(v93, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v90, *(uint8x16_t *)((char *)v87 + v10))))));
  a3[4] = vaddq_s32(v92, vdupq_laneq_s32(v92, 2)).u16[0];
  v97 = vaddq_s32(v96, vaddq_s32(v94, v95));
  *(_QWORD *)&result = vaddq_s32(v97, vdupq_laneq_s32(v97, 2)).u64[0];
  a3[1] = LOWORD(result);
  return result;
}

double sub_2160E4CD8(_QWORD *a1, uint64_t a2, _WORD *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, double a7, int64x2_t a8, int64x2_t a9, int64x2_t a10, int64x2_t a11)
{
  int64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  char *v16;
  uint8x16_t v17;
  unint64_t *v18;
  char *v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  int32x4_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint8x16_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t *v32;
  uint64_t *v33;
  int32x4_t v34;
  uint64_t *v35;
  int32x4_t v36;
  int32x4_t v37;
  uint8x16_t v38;
  unint64_t *v39;
  uint8x16_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  int32x4_t v45;
  int32x4_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint8x16_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint8x16_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint8x16_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  uint64_t *v77;
  uint8x16_t v78;
  uint64_t *v79;
  int64x2_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  uint8x16_t v88;
  uint8x16_t v89;
  int32x4_t v90;
  int32x4_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  int32x4_t v99;
  uint64_t *v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  uint8x16_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int64x2_t v113;
  int64x2_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint8x16_t v119;
  uint8x16_t v120;
  uint8x16_t v121;
  int32x4_t v122;
  int32x4_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint8x16_t v128;
  uint8x16_t v129;
  int32x4_t v130;
  uint8x16_t v131;
  uint8x16_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint8x16_t v140;
  uint8x16_t v141;
  int32x4_t v142;
  int32x4_t v143;
  uint8x16_t v144;
  uint8x16_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint8x16_t v153;
  uint8x16_t v154;
  int32x4_t v155;
  int32x4_t v156;
  uint8x16_t v157;
  uint8x16_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  double result;

  v13 = *(unsigned int *)(a2 + 16);
  v12 = *(unsigned int *)(a2 + 20);
  v14 = (uint64_t *)a1[4];
  v15 = (unint64_t *)a1[5];
  v16 = (char *)v15 + v13;
  a4.i64[0] = *v15;
  a5.i64[0] = *(unint64_t *)((char *)v15 + v13);
  v17 = (uint8x16_t)vzip1q_s64(a4, a5);
  v18 = (unint64_t *)a1[3];
  v19 = (char *)v18 + v13;
  a5.i64[0] = *v18;
  a6.i64[0] = *(unint64_t *)((char *)v18 + v13);
  v20 = *(uint8x16_t **)(a2 + 64);
  v21 = v20[1];
  v22 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64(a5, a6), *v20))));
  v23 = (unint64_t *)((char *)v15 + v12);
  v24 = (unint64_t *)&v16[v12];
  a8.i64[0] = *v23;
  a9.i64[0] = *v24;
  v25 = (uint8x16_t)vzip1q_s64(a8, a9);
  v26 = (unint64_t *)((char *)v18 + v12);
  v27 = (unint64_t *)&v19[v12];
  a9.i64[0] = *v26;
  a10.i64[0] = *v27;
  v28 = (uint8x16_t)vzip1q_s64(a9, a10);
  v29 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v20, v25))));
  v30 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v20, v28))));
  v31 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v25, v21))));
  v32 = (uint64_t *)((char *)v23 + v12);
  v33 = (uint64_t *)((char *)v24 + v12);
  v34 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v21))));
  v35 = (uint64_t *)((char *)v26 + v12);
  v36 = vaddq_s32(v31, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v17, *v20)))));
  v37 = vaddq_s32(v34, v22);
  v31.i64[0] = *v32;
  v34.i64[0] = *v33;
  v38 = (uint8x16_t)vzip1q_s64((int64x2_t)v31, (int64x2_t)v34);
  v39 = (unint64_t *)((char *)v27 + v12);
  v34.i64[0] = *v35;
  a11.i64[0] = *v39;
  v40 = (uint8x16_t)vzip1q_s64((int64x2_t)v34, a11);
  v41 = (uint64_t *)((char *)v32 + v12);
  v42 = (uint64_t *)((char *)v33 + v12);
  v43 = (uint64_t *)((char *)v35 + v12);
  v44 = (uint64_t *)((char *)v39 + v12);
  v45 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v38)))), v29);
  v46 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v40)))), v30);
  v47 = v20[2];
  v48 = v20[3];
  v49 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v38, v47)))));
  v50 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v40, v47)))));
  v36.i64[0] = *v41;
  v37.i64[0] = *v42;
  v51 = (uint64_t *)((char *)v41 + v12);
  v52 = (uint64_t *)((char *)v42 + v12);
  v53 = (uint8x16_t)vzip1q_s64((int64x2_t)v36, (int64x2_t)v37);
  v36.i64[0] = *v43;
  v37.i64[0] = *v44;
  v54 = (uint64_t *)((char *)v43 + v12);
  v55 = (uint64_t *)((char *)v44 + v12);
  v56 = (uint8x16_t)vzip1q_s64((int64x2_t)v36, (int64x2_t)v37);
  v57 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, v53))));
  v58 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, v56))));
  v59 = vaddq_s32(v45, v57);
  v60 = vaddq_s32(v46, v58);
  v61 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, v48))));
  v62 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v48))));
  v45.i64[0] = *v51;
  v46.i64[0] = *v52;
  v63 = (uint64_t *)((char *)v51 + v12);
  v64 = (uint64_t *)((char *)v52 + v12);
  v65 = (uint8x16_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v46);
  v46.i64[0] = *v54;
  v58.i64[0] = *v55;
  v66 = (uint64_t *)((char *)v54 + v12);
  v67 = (uint64_t *)((char *)v55 + v12);
  v68 = (uint8x16_t)vzip1q_s64((int64x2_t)v46, (int64x2_t)v58);
  v69 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, v65))));
  v70 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, v68))));
  v71 = v20[8];
  v72 = v20[9];
  v73 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v65, v71))));
  v74 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v68, v71))));
  v75 = vaddq_s32(v61, v73);
  v76 = vaddq_s32(v62, v74);
  v73.i64[0] = *v63;
  v74.i64[0] = *v64;
  v77 = (uint64_t *)((char *)v63 + v12);
  v78 = (uint8x16_t)vzip1q_s64((int64x2_t)v73, (int64x2_t)v74);
  v73.i64[0] = *v66;
  v11.i64[0] = *v67;
  v79 = (uint64_t *)((char *)v66 + v12);
  v80 = vzip1q_s64((int64x2_t)v73, v11);
  v81 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, v78))));
  v82 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, (uint8x16_t)v80))));
  v83 = vaddq_s32(v69, v81);
  v84 = vaddq_s32(v70, v82);
  v85 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v80, v72))));
  v86 = vaddq_s32(v49, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v78, v72)))));
  v87 = vaddq_s32(v50, v85);
  v50.i64[0] = *v77;
  v85.i64[0] = *(uint64_t *)((char *)v64 + v12);
  v88 = (uint8x16_t)vzip1q_s64((int64x2_t)v50, (int64x2_t)v85);
  v85.i64[0] = *v79;
  v82.i64[0] = *(uint64_t *)((char *)v67 + v12);
  v89 = (uint8x16_t)vzip1q_s64((int64x2_t)v85, (int64x2_t)v82);
  v90 = vaddq_s32(v59, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v72, v88)))));
  v91 = vaddq_s32(v60, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v72, v89)))));
  v92 = v20[10];
  v93 = v20[11];
  v94 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v89, v92))));
  v95 = vaddq_s32(v75, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v88, v92)))));
  v96 = vaddq_s32(v76, v94);
  v76.i64[0] = *(uint64_t *)((char *)v77 + v12);
  v94.i64[0] = *(uint64_t *)((char *)v64 + v12 + v12);
  v97 = (uint8x16_t)vzip1q_s64((int64x2_t)v76, (int64x2_t)v94);
  v94.i64[0] = *(uint64_t *)((char *)v79 + v12);
  v80.i64[0] = *(uint64_t *)((char *)v67 + v12 + v12);
  v98 = (uint8x16_t)vzip1q_s64((int64x2_t)v94, v80);
  v99 = vaddq_s32(v83, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v92, v97)))));
  v100 = (uint64_t *)((char *)v14 + v13);
  v101 = vaddq_s32(v84, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v92, v98)))));
  v102 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v98, v93))));
  v103 = vaddq_s32(v86, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v97, v93)))));
  v104 = vaddq_s32(v103, v95);
  v105 = vaddq_s32(vaddq_s32(v87, v102), v96);
  v96.i64[0] = *(uint64_t *)((char *)v77 + v12 + v12);
  v103.i64[0] = *(uint64_t *)((char *)v64 + v12 + v12 + v12);
  v86.i64[0] = *(uint64_t *)((char *)v79 + v12 + v12);
  v106 = (uint8x16_t)vzip1q_s64((int64x2_t)v96, (int64x2_t)v103);
  v103.i64[0] = *(uint64_t *)((char *)v67 + v12 + v12 + v12);
  v107 = vaddq_s32(vaddq_s32(v90, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v93, v106))))), v99);
  v108 = vaddq_s32(vaddq_s32(v91, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v93, (uint8x16_t)vzip1q_s64((int64x2_t)v86, (int64x2_t)v103)))))), v101);
  v109 = (int64x2_t)vaddq_s32(v104, vdupq_laneq_s32(v104, 2));
  v110 = (int64x2_t)vaddq_s32(v107, vdupq_laneq_s32(v107, 2));
  v111 = vdupq_laneq_s32(v105, 2);
  v112 = vdupq_laneq_s32(v108, 2);
  v113 = (int64x2_t)vaddq_s32(v105, v111);
  v114 = (int64x2_t)vaddq_s32(v108, v112);
  a3[5] = v109.i16[0];
  *a3 = v110.i16[0];
  a3[3] = v113.i16[0];
  a3[2] = v114.i16[0];
  v114.i64[0] = *v14;
  v110.i64[0] = *v100;
  v115 = (uint64_t *)((char *)v14 + v12);
  v116 = (uint64_t *)((char *)v100 + v12);
  v113.i64[0] = *v115;
  v109.i64[0] = *v116;
  v117 = (uint64_t *)((char *)v115 + v12);
  v118 = (uint64_t *)((char *)v116 + v12);
  v119 = (uint8x16_t)vzip1q_s64(v114, v110);
  v120 = (uint8x16_t)vzip1q_s64(v113, v109);
  v121 = v20[1];
  v122 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v120, v121))));
  v123 = vaddq_s32(v122, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v119, *v20)))));
  v122.i64[0] = *v117;
  v111.i64[0] = *v118;
  v124 = (uint64_t *)((char *)v117 + v12);
  v125 = (uint64_t *)((char *)v118 + v12);
  v112.i64[0] = *v124;
  v101.i64[0] = *v125;
  v126 = (uint64_t *)((char *)v124 + v12);
  v127 = (uint64_t *)((char *)v125 + v12);
  v128 = (uint8x16_t)vzip1q_s64((int64x2_t)v122, (int64x2_t)v111);
  v129 = (uint8x16_t)vzip1q_s64((int64x2_t)v112, (int64x2_t)v101);
  v130 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v121, v129)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v20, v128)))));
  v131 = v20[2];
  v132 = v20[3];
  v133 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v128, v131))));
  v134 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v129, v132))));
  v135 = vaddq_s32(v123, v133);
  v133.i64[0] = *v126;
  v101.i64[0] = *v127;
  v136 = (uint64_t *)((char *)v126 + v12);
  v137 = (uint64_t *)((char *)v127 + v12);
  v86.i64[0] = *v136;
  v99.i64[0] = *v137;
  v138 = (uint64_t *)((char *)v136 + v12);
  v139 = (uint64_t *)((char *)v137 + v12);
  v140 = (uint8x16_t)vzip1q_s64((int64x2_t)v133, (int64x2_t)v101);
  v141 = (uint8x16_t)vzip1q_s64((int64x2_t)v86, (int64x2_t)v99);
  v142 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v132, v141))));
  v143 = vaddq_s32(v130, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v131, v140)))));
  v144 = v20[8];
  v145 = v20[9];
  v146 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v141, v145))));
  v147 = vaddq_s32(v134, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v140, v144)))));
  v148 = vaddq_s32(v135, v146);
  v134.i64[0] = *v138;
  v146.i64[0] = *v139;
  v149 = (uint64_t *)((char *)v138 + v12);
  v150 = (uint64_t *)((char *)v139 + v12);
  v99.i64[0] = *v149;
  v102.i64[0] = *v150;
  v151 = (uint64_t *)((char *)v149 + v12);
  v152 = (uint64_t *)((char *)v150 + v12);
  v153 = (uint8x16_t)vzip1q_s64((int64x2_t)v134, (int64x2_t)v146);
  v154 = (uint8x16_t)vzip1q_s64((int64x2_t)v99, (int64x2_t)v102);
  v155 = vaddq_s32(v142, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v144, v153)))));
  v156 = vaddq_s32(v143, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v145, v154)))));
  v157 = v20[10];
  v158 = v20[11];
  v159 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v153, v157))));
  v160 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v154, v158))));
  v161 = vaddq_s32(v147, v159);
  v162 = vaddq_s32(vaddq_s32(v148, v160), v161);
  v161.i64[0] = *v151;
  v159.i64[0] = *(uint64_t *)((char *)v151 + v12);
  v160.i64[0] = *v152;
  v99.i64[0] = *(uint64_t *)((char *)v152 + v12);
  a3[4] = vaddq_s32(v162, vdupq_laneq_s32(v162, 2)).u16[0];
  v163 = vaddq_s32(vaddq_s32(v156, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v158, (uint8x16_t)vzip1q_s64((int64x2_t)v159, (int64x2_t)v99)))))), vaddq_s32(v155, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v157, (uint8x16_t)vzip1q_s64((int64x2_t)v161, (int64x2_t)v160)))))));
  *(_QWORD *)&result = vaddq_s32(v163, vdupq_laneq_s32(v163, 2)).u64[0];
  a3[1] = LOWORD(result);
  return result;
}

double sub_2160E5308(_QWORD *a1, uint64_t a2, _WORD *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, int64x2_t a7, int64x2_t a8, int64x2_t a9, int64x2_t a10, int64x2_t a11)
{
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t *v21;
  uint8x16_t v22;
  uint8x16_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  uint8x16_t v28;
  uint64_t *v29;
  uint8x16_t v30;
  uint64_t *v31;
  uint8x16_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint8x16_t v43;
  int64x2_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  int32x4_t v51;
  uint32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  uint8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int64x2_t v64;
  int64x2_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint8x16_t v79;
  uint8x16_t v80;
  int32x4_t v81;
  uint8x16_t v82;
  uint8x16_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  double result;

  v14 = *(unsigned int *)(a2 + 16);
  v13 = *(unsigned int *)(a2 + 20);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = (uint64_t *)a1[4];
  v17 = (unint64_t *)a1[5];
  v18 = (unint64_t *)((char *)v17 + v14);
  v19 = (unint64_t *)a1[3];
  v20 = (unint64_t *)((char *)v19 + v14);
  v21 = (uint64_t *)((char *)v16 + v14);
  a4.i64[0] = *v17;
  a5.i64[0] = *v18;
  a6.i64[0] = *v19;
  a7.i64[0] = *v20;
  v22 = (uint8x16_t)vzip1q_s64(a4, a5);
  v23 = (uint8x16_t)vzip1q_s64(a6, a7);
  v24 = (unint64_t *)((char *)v17 + v13);
  v25 = (unint64_t *)((char *)v18 + v13);
  v26 = (unint64_t *)((char *)v19 + v13);
  v27 = (unint64_t *)((char *)v20 + v13);
  v28 = *(uint8x16_t *)(v15 + 16);
  a8.i64[0] = *v24;
  a9.i64[0] = *v25;
  v29 = (uint64_t *)((char *)v24 + v13);
  v30 = (uint8x16_t)vzip1q_s64(a8, a9);
  a9.i64[0] = *v26;
  a10.i64[0] = *v27;
  v31 = (uint64_t *)((char *)v26 + v13);
  v32 = (uint8x16_t)vzip1q_s64(a9, a10);
  v33 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v15, v30))));
  v34 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v15, v32))));
  v35 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, v28))));
  v36 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v32, v28))));
  v37 = vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, *(uint8x16_t *)v15)))));
  v38 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v23, *(uint8x16_t *)v15)))));
  v35.i64[0] = *v29;
  v36.i64[0] = *(unint64_t *)((char *)v25 + v13);
  v39 = (uint8x16_t)vzip1q_s64((int64x2_t)v35, (int64x2_t)v36);
  v36.i64[0] = *v31;
  a11.i64[0] = *(unint64_t *)((char *)v27 + v13);
  v40 = (uint8x16_t)vzip1q_s64((int64x2_t)v36, a11);
  v41 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v39)))), v33);
  v42 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v40)))), v34);
  v43 = *(uint8x16_t *)(v15 + 32);
  v44 = *(int64x2_t *)(v15 + 48);
  v45 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v39, v43))));
  v46 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v40, v43))));
  v47 = vaddq_s32(v37, v45);
  v48 = vaddq_s32(v38, v46);
  v45.i64[0] = *(uint64_t *)((char *)v29 + v13);
  v46.i64[0] = *(unint64_t *)((char *)v25 + v13 + v13);
  v49 = (uint8x16_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v46);
  v46.i64[0] = *(uint64_t *)((char *)v31 + v13);
  v11.i64[0] = *(unint64_t *)((char *)v27 + v13 + v13);
  v50 = (uint8x16_t)vzip1q_s64((int64x2_t)v46, v11);
  v51 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v43, v49))));
  v52 = vpaddlq_u16(vpaddlq_u8(vabdq_u8(v43, v50)));
  v53 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v49, (uint8x16_t)v44))));
  v54 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v50, (uint8x16_t)v44))));
  v55 = vaddq_s32(v47, v53);
  v53.i64[0] = *(uint64_t *)((char *)v29 + v13 + v13);
  v12.i64[0] = *(unint64_t *)((char *)v25 + v13 + v13 + v13);
  v56 = vaddq_s32(v48, v54);
  v57 = (uint8x16_t)vzip1q_s64((int64x2_t)v53, v12);
  v54.i64[0] = *(uint64_t *)((char *)v31 + v13 + v13);
  v12.i64[0] = *(unint64_t *)((char *)v27 + v13 + v13 + v13);
  v58 = vaddq_s32(v41, vaddq_s32(v51, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v44, v57))))));
  v59 = vaddq_s32(v42, vaddq_s32((int32x4_t)vpaddlq_u32(v52), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v44, (uint8x16_t)vzip1q_s64((int64x2_t)v54, v12)))))));
  v60 = (int64x2_t)vaddq_s32(v55, vdupq_laneq_s32(v55, 2));
  v61 = (int64x2_t)vaddq_s32(v58, vdupq_laneq_s32(v58, 2));
  v62 = vdupq_laneq_s32(v56, 2);
  v63 = vdupq_laneq_s32(v59, 2);
  v64 = (int64x2_t)vaddq_s32(v56, v62);
  v65 = (int64x2_t)vaddq_s32(v59, v63);
  a3[5] = v60.i16[0];
  *a3 = v61.i16[0];
  a3[3] = v64.i16[0];
  a3[2] = v65.i16[0];
  v60.i64[0] = *v16;
  v64.i64[0] = *v21;
  v66 = (uint64_t *)((char *)v16 + v13);
  v67 = (uint64_t *)((char *)v21 + v13);
  v65.i64[0] = *v66;
  v61.i64[0] = *v67;
  v68 = (uint64_t *)((char *)v66 + v13);
  v69 = (uint64_t *)((char *)v67 + v13);
  v70 = (uint8x16_t)vzip1q_s64(v60, v64);
  v71 = (uint8x16_t)vzip1q_s64(v65, v61);
  v72 = *(uint8x16_t *)(v15 + 16);
  v73 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, v72))));
  v74 = vaddq_s32(v73, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v70, *(uint8x16_t *)v15)))));
  v73.i64[0] = *v68;
  v62.i64[0] = *v69;
  v75 = (uint64_t *)((char *)v68 + v13);
  v76 = (uint64_t *)((char *)v69 + v13);
  v63.i64[0] = *v75;
  v41.i64[0] = *v76;
  v77 = (uint64_t *)((char *)v75 + v13);
  v78 = (uint64_t *)((char *)v76 + v13);
  v79 = (uint8x16_t)vzip1q_s64((int64x2_t)v73, (int64x2_t)v62);
  v80 = (uint8x16_t)vzip1q_s64((int64x2_t)v63, (int64x2_t)v41);
  v81 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v72, v80)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v15, v79)))));
  v82 = *(uint8x16_t *)(v15 + 32);
  v83 = *(uint8x16_t *)(v15 + 48);
  v84 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v79, v82))));
  v85 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v80, v83))));
  v86 = vaddq_s32(vaddq_s32(v74, v84), v85);
  v84.i64[0] = *v77;
  v85.i64[0] = *v78;
  v41.i64[0] = *(uint64_t *)((char *)v77 + v13);
  v44.i64[0] = *(uint64_t *)((char *)v78 + v13);
  v87 = vaddq_s32(v81, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v82, (uint8x16_t)vzip1q_s64((int64x2_t)v84, (int64x2_t)v85))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v83, (uint8x16_t)vzip1q_s64((int64x2_t)v41, v44)))))));
  *(_QWORD *)&result = vaddq_s32(v86, vdupq_laneq_s32(v86, 2)).u64[0];
  a3[4] = LOWORD(result);
  a3[1] = vaddq_s32(v87, vdupq_laneq_s32(v87, 2)).u16[0];
  return result;
}

double sub_2160E5658(uint8x16_t **a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v3;
  uint8x16_t *v4;
  uint8x16_t v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8x16_t *v9;
  uint8x16_t v10;
  int32x4_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  int32x4_t v14;
  uint8x16_t *v15;
  uint8x16_t v16;
  uint8x16_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint8x16_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint8x16_t v28;
  uint8x16_t *v29;
  int32x4_t v30;
  int32x4_t v31;
  uint8x16_t v32;
  uint8x16_t *v33;
  uint8x16_t v34;
  uint8x16_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint8x16_t v39;
  uint8x16_t *v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint8x16_t v44;
  uint8x16_t *v45;
  uint8x16_t v46;
  uint8x16_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint8x16_t v51;
  uint8x16_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint8x16_t v56;
  uint8x16_t *v57;
  uint8x16_t v58;
  uint8x16_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint8x16_t v63;
  uint8x16_t *v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint8x16_t v68;
  uint8x16_t *v69;
  uint8x16_t v70;
  uint8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint8x16_t v75;
  uint8x16_t *v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint8x16_t v80;
  uint8x16_t *v81;
  uint8x16_t v82;
  uint8x16_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  uint8x16_t v87;
  uint8x16_t *v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  uint8x16_t *v97;
  uint8x16_t v98;
  uint8x16_t v99;
  uint8x16_t *v100;
  uint8x16_t *v101;
  int32x4_t v102;
  uint8x16_t v103;
  uint8x16_t v104;
  uint8x16_t *v105;
  uint8x16_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  uint8x16_t v109;
  uint8x16_t v110;
  int32x4_t v111;
  int32x4_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  uint8x16_t *v115;
  uint8x16_t *v116;
  int32x4_t v117;
  int32x4_t v118;
  uint8x16_t v119;
  uint8x16_t v120;
  int32x4_t v121;
  int32x4_t v122;
  uint8x16_t v123;
  uint8x16_t v124;
  uint8x16_t *v125;
  uint8x16_t *v126;
  int32x4_t v127;
  int32x4_t v128;
  uint8x16_t v129;
  uint8x16_t v130;
  int32x4_t v131;
  int32x4_t v132;
  uint8x16_t v133;
  uint8x16_t v134;
  uint8x16_t *v135;
  uint8x16_t *v136;
  int32x4_t v137;
  int32x4_t v138;
  uint8x16_t v139;
  uint8x16_t v140;
  int32x4_t v141;
  int32x4_t v142;
  uint8x16_t v143;
  uint8x16_t v144;
  uint8x16_t *v145;
  uint8x16_t *v146;
  int32x4_t v147;
  int32x4_t v148;
  uint8x16_t v149;
  uint8x16_t v150;
  int32x4_t v151;
  int32x4_t v152;
  uint8x16_t v153;
  uint8x16_t v154;
  uint8x16_t *v155;
  uint8x16_t *v156;
  int32x4_t v157;
  int32x4_t v158;
  uint8x16_t v159;
  uint8x16_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  uint8x16_t v165;
  uint8x16_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  uint8x16_t *v171;
  uint8x16_t v172;
  uint8x16_t *v173;
  uint8x16_t v174;
  uint8x16_t *v175;
  uint8x16_t v176;
  uint8x16_t *v177;
  uint8x16_t v178;
  uint8x16_t v179;
  uint8x16_t *v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  uint8x16_t v184;
  uint8x16_t *v185;
  uint8x16_t v186;
  uint8x16_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  uint8x16_t v191;
  uint8x16_t *v192;
  int32x4_t v193;
  int32x4_t v194;
  uint8x16_t v195;
  uint8x16_t *v196;
  uint8x16_t v197;
  uint8x16_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  uint8x16_t v202;
  uint8x16_t *v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  uint8x16_t v207;
  uint8x16_t *v208;
  uint8x16_t v209;
  uint8x16_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  uint8x16_t v214;
  uint8x16_t *v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  uint8x16_t v219;
  uint8x16_t *v220;
  uint8x16_t v221;
  uint8x16_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  uint8x16_t v226;
  uint8x16_t *v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  uint8x16_t v231;
  uint8x16_t *v232;
  uint8x16_t v233;
  uint8x16_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  uint8x16_t v238;
  uint8x16_t *v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  uint8x16_t v243;
  uint8x16_t *v244;
  uint8x16_t v245;
  uint8x16_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  uint8x16_t v250;
  uint8x16_t *v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  uint8x16_t v255;
  uint8x16_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  double result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = a1[4];
  v5 = v3[1];
  v6 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v4, *v3))));
  v7 = *(unsigned int *)(a2 + 16);
  v8 = *(unsigned int *)(a2 + 20);
  v9 = (uint8x16_t *)((char *)v4 + v7);
  v10 = *v9;
  v11 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v9, *v3))));
  v12 = (uint8x16_t *)((char *)v9 + v7);
  v13 = *v12;
  v14 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, *v12))));
  v15 = (uint8x16_t *)((char *)v12 + v7);
  v16 = *v15;
  v17 = (uint8x16_t *)((char *)v15 + v7);
  v18 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v10, v5)))), v6);
  v19 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v13, v5)))), v11);
  v20 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v5, v16)))), v14);
  v21 = *v17;
  v22 = (uint8x16_t *)((char *)v17 + v7);
  v23 = v3[2];
  v24 = v3[3];
  v25 = vaddq_s32(v18, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v13, v23)))));
  v26 = vaddq_s32(v19, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v16, v23)))));
  v27 = vaddq_s32(v20, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v23, v21)))));
  v28 = *v22;
  v29 = (uint8x16_t *)((char *)v22 + v7);
  v30 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v16, v24))));
  v31 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v24))));
  v32 = *v29;
  v33 = (uint8x16_t *)((char *)v29 + v7);
  v34 = v3[4];
  v35 = v3[5];
  v36 = vaddq_s32(v30, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v34)))));
  v37 = vaddq_s32(v31, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v34)))));
  v38 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v24, v28)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v34, v32)))));
  v39 = *v33;
  v40 = (uint8x16_t *)((char *)v33 + v7);
  v41 = vaddq_s32(v25, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v35)))));
  v42 = vaddq_s32(v26, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v32, v35)))));
  v43 = vaddq_s32(v27, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v39)))));
  v44 = *v40;
  v45 = (uint8x16_t *)((char *)v40 + v7);
  v46 = v3[6];
  v47 = v3[7];
  v48 = vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v32, v46)))));
  v49 = vaddq_s32(v37, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v39, v46)))));
  v50 = vaddq_s32(v38, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v46, v44)))));
  v51 = *v45;
  v52 = (uint8x16_t *)((char *)v45 + v7);
  v53 = vaddq_s32(v41, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v39, v47)))));
  v54 = vaddq_s32(v42, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v44, v47)))));
  v55 = vaddq_s32(v43, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v47, v51)))));
  v56 = *v52;
  v57 = (uint8x16_t *)((char *)v52 + v7);
  v58 = v3[8];
  v59 = v3[9];
  v60 = vaddq_s32(v48, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v44, v58)))));
  v61 = vaddq_s32(v49, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v51, v58)))));
  v62 = vaddq_s32(v50, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v58, v56)))));
  v63 = *v57;
  v64 = (uint8x16_t *)((char *)v57 + v7);
  v65 = vaddq_s32(v53, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v51, v59)))));
  v66 = vaddq_s32(v54, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v59)))));
  v67 = vaddq_s32(v55, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v59, v63)))));
  v68 = *v64;
  v69 = (uint8x16_t *)((char *)v64 + v7);
  v70 = v3[10];
  v71 = v3[11];
  v72 = vaddq_s32(v60, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v70)))));
  v73 = vaddq_s32(v61, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v63, v70)))));
  v74 = vaddq_s32(v62, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v70, v68)))));
  v75 = *v69;
  v76 = (uint8x16_t *)((char *)v69 + v7);
  v77 = vaddq_s32(v65, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v63, v71)))));
  v78 = vaddq_s32(v66, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v68, v71)))));
  v79 = vaddq_s32(v67, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, v75)))));
  v80 = *v76;
  v81 = (uint8x16_t *)((char *)v76 + v7);
  v82 = v3[12];
  v83 = v3[13];
  v84 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v75, v82))));
  v85 = vaddq_s32(v72, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v68, v82)))));
  v86 = vaddq_s32(v74, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v82, v80)))));
  v87 = *v81;
  v88 = (uint8x16_t *)((char *)v81 + v7);
  v89 = vaddq_s32(v77, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v75, v83)))));
  v90 = vaddq_s32(v78, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v80, v83)))));
  v91 = vaddq_s32(v79, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v83, v87)))));
  v92 = v3[14];
  v93 = v3[15];
  v94 = vaddq_s32(vaddq_s32(v89, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v87, v93))))), vaddq_s32(v85, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v80, v92))))));
  v95 = vaddq_s32(vaddq_s32(v90, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v88, v93))))), vaddq_s32(vaddq_s32(v73, v84), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v87, v92))))));
  v96 = vaddq_s32(vaddq_s32(v91, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v93, *(uint8x16_t *)((char *)v88 + v7)))))), vaddq_s32(v86, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v92, *v88))))));
  a3[4] = vaddq_s32(v94, vdupq_laneq_s32(v94, 2)).u16[0];
  a3[2] = vaddq_s32(v95, vdupq_laneq_s32(v95, 2)).u16[0];
  a3[5] = vaddq_s32(v96, vdupq_laneq_s32(v96, 2)).u16[0];
  v97 = (uint8x16_t *)((char *)*a1 + v7);
  v98 = *v97;
  v99 = v3[1];
  v100 = (uint8x16_t *)((char *)*a1 + v8);
  v101 = (uint8x16_t *)((char *)v97 + v8);
  v102 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v98, v99))));
  v103 = *v100;
  v104 = *v101;
  v105 = (uint8x16_t *)((char *)v100 + v8);
  v106 = (uint8x16_t *)((char *)v101 + v8);
  v107 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, v103))));
  v108 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v99, v104))));
  v109 = v3[2];
  v110 = v3[3];
  v111 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v103, v109)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(**a1, *v3)))));
  v112 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v104, v110)))), v102);
  v113 = *v105;
  v114 = *v106;
  v115 = (uint8x16_t *)((char *)v105 + v8);
  v116 = (uint8x16_t *)((char *)v106 + v8);
  v117 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v109, v113)))), v107);
  v118 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v110, v114)))), v108);
  v119 = v3[4];
  v120 = v3[5];
  v121 = vaddq_s32(v111, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v113, v119)))));
  v122 = vaddq_s32(v112, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v114, v120)))));
  v123 = *v115;
  v124 = *v116;
  v125 = (uint8x16_t *)((char *)v115 + v8);
  v126 = (uint8x16_t *)((char *)v116 + v8);
  v127 = vaddq_s32(v117, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v119, v123)))));
  v128 = vaddq_s32(v118, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v120, v124)))));
  v129 = v3[6];
  v130 = v3[7];
  v131 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v123, v129))));
  v132 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v124, v130))));
  v133 = *v125;
  v134 = *v126;
  v135 = (uint8x16_t *)((char *)v125 + v8);
  v136 = (uint8x16_t *)((char *)v126 + v8);
  v137 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v129, v133))));
  v138 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v130, v134))));
  v139 = v3[8];
  v140 = v3[9];
  v141 = vaddq_s32(v131, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v133, v139)))));
  v142 = vaddq_s32(v132, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v134, v140)))));
  v143 = *v135;
  v144 = *v136;
  v145 = (uint8x16_t *)((char *)v135 + v8);
  v146 = (uint8x16_t *)((char *)v136 + v8);
  v147 = vaddq_s32(v137, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v139, v143)))));
  v148 = vaddq_s32(v138, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v140, v144)))));
  v149 = v3[10];
  v150 = v3[11];
  v151 = vaddq_s32(v121, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v143, v149)))));
  v152 = vaddq_s32(v122, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v144, v150)))));
  v153 = *v145;
  v154 = *v146;
  v155 = (uint8x16_t *)((char *)v145 + v8);
  v156 = (uint8x16_t *)((char *)v146 + v8);
  v157 = vaddq_s32(v127, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v149, v153)))));
  v158 = vaddq_s32(v128, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v150, v154)))));
  v159 = v3[12];
  v160 = v3[13];
  v161 = vaddq_s32(v141, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v153, v159)))));
  v162 = vaddq_s32(v142, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v154, v160)))));
  v163 = vaddq_s32(v147, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v159, *v155)))));
  v164 = vaddq_s32(v148, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v160, *v156)))));
  v165 = v3[14];
  v166 = v3[15];
  v167 = vaddq_s32(vaddq_s32(v151, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v155, v165))))), v161);
  v168 = vaddq_s32(vaddq_s32(v152, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v156, v166))))), v162);
  v169 = vaddq_s32(vaddq_s32(v157, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v165, *(uint8x16_t *)((char *)v155 + v8)))))), v163);
  v170 = vaddq_s32(vaddq_s32(v158, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v166, *(uint8x16_t *)((char *)v156 + v8)))))), v164);
  *a3 = vaddq_s32(vaddq_s32(vaddq_s32(v167, v168), vdupq_laneq_s32(v167, 2)), vdupq_laneq_s32(v168, 2)).u16[0];
  a3[1] = vaddq_s32(vaddq_s32(vaddq_s32(v169, v170), vdupq_laneq_s32(v169, 2)), vdupq_laneq_s32(v170, 2)).u16[0];
  v171 = a1[6];
  v172 = *v171;
  v173 = (uint8x16_t *)((char *)v171 + v7);
  v174 = *v173;
  v175 = (uint8x16_t *)((char *)v173 + v7);
  v176 = *v175;
  v177 = (uint8x16_t *)((char *)v175 + v7);
  v178 = v3[1];
  v179 = *v177;
  v180 = (uint8x16_t *)((char *)v177 + v7);
  v181 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v174, v178)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v172, *v3)))));
  v182 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v176, v178)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v174, *v3)))));
  v183 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v178, v179)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, v176)))));
  v184 = *v180;
  v185 = (uint8x16_t *)((char *)v180 + v7);
  v186 = v3[2];
  v187 = v3[3];
  v188 = vaddq_s32(v181, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v176, v186)))));
  v189 = vaddq_s32(v182, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v179, v186)))));
  v190 = vaddq_s32(v183, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v186, v184)))));
  v191 = *v185;
  v192 = (uint8x16_t *)((char *)v185 + v7);
  v193 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v179, v187))));
  v194 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v184, v187))));
  v195 = *v192;
  v196 = (uint8x16_t *)((char *)v192 + v7);
  v197 = v3[4];
  v198 = v3[5];
  v199 = vaddq_s32(v193, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v184, v197)))));
  v200 = vaddq_s32(v194, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v191, v197)))));
  v201 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v187, v191)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v197, v195)))));
  v202 = *v196;
  v203 = (uint8x16_t *)((char *)v196 + v7);
  v204 = vaddq_s32(v188, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v191, v198)))));
  v205 = vaddq_s32(v189, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v195, v198)))));
  v206 = vaddq_s32(v190, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v198, v202)))));
  v207 = *v203;
  v208 = (uint8x16_t *)((char *)v203 + v7);
  v209 = v3[6];
  v210 = v3[7];
  v211 = vaddq_s32(v199, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v195, v209)))));
  v212 = vaddq_s32(v200, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v202, v209)))));
  v213 = vaddq_s32(v201, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v209, v207)))));
  v214 = *v208;
  v215 = (uint8x16_t *)((char *)v208 + v7);
  v216 = vaddq_s32(v204, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v202, v210)))));
  v217 = vaddq_s32(v205, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v207, v210)))));
  v218 = vaddq_s32(v206, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v210, v214)))));
  v219 = *v215;
  v220 = (uint8x16_t *)((char *)v215 + v7);
  v221 = v3[8];
  v222 = v3[9];
  v223 = vaddq_s32(v211, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v207, v221)))));
  v224 = vaddq_s32(v212, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v214, v221)))));
  v225 = vaddq_s32(v213, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v221, v219)))));
  v226 = *v220;
  v227 = (uint8x16_t *)((char *)v220 + v7);
  v228 = vaddq_s32(v216, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v214, v222)))));
  v229 = vaddq_s32(v217, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v219, v222)))));
  v230 = vaddq_s32(v218, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v222, v226)))));
  v231 = *v227;
  v232 = (uint8x16_t *)((char *)v227 + v7);
  v233 = v3[10];
  v234 = v3[11];
  v235 = vaddq_s32(v223, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v219, v233)))));
  v236 = vaddq_s32(v224, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v226, v233)))));
  v237 = vaddq_s32(v225, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v233, v231)))));
  v238 = *v232;
  v239 = (uint8x16_t *)((char *)v232 + v7);
  v240 = vaddq_s32(v228, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v226, v234)))));
  v241 = vaddq_s32(v229, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v231, v234)))));
  v242 = vaddq_s32(v230, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v234, v238)))));
  v243 = *v239;
  v244 = (uint8x16_t *)((char *)v239 + v7);
  v245 = v3[12];
  v246 = v3[13];
  v247 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v238, v245))));
  v248 = vaddq_s32(v235, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v231, v245)))));
  v249 = vaddq_s32(v237, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v245, v243)))));
  v250 = *v244;
  v251 = (uint8x16_t *)((char *)v244 + v7);
  v252 = vaddq_s32(v240, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v238, v246)))));
  v253 = vaddq_s32(v241, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v243, v246)))));
  v254 = vaddq_s32(v242, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v246, v250)))));
  v255 = v3[14];
  v256 = v3[15];
  v257 = vaddq_s32(v248, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v243, v255)))));
  v258 = vaddq_s32(v249, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v255, *v251)))));
  v259 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v256, *(uint8x16_t *)((char *)v251 + v7)))));
  v260 = vaddq_s32(vaddq_s32(v252, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v250, v256))))), v257);
  v261 = vaddq_s32(vaddq_s32(v253, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v251, v256))))), vaddq_s32(vaddq_s32(v236, v247), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v250, v255))))));
  a3[6] = vaddq_s32(v260, vdupq_laneq_s32(v260, 2)).u16[0];
  a3[3] = vaddq_s32(v261, vdupq_laneq_s32(v261, 2)).u16[0];
  v262 = vaddq_s32(vaddq_s32(v254, v259), v258);
  *(_QWORD *)&result = vaddq_s32(v262, vdupq_laneq_s32(v262, 2)).u64[0];
  a3[7] = LOWORD(result);
  return result;
}

double sub_2160E62B4(uint8x16_t **a1, uint64_t a2, _WORD *a3)
{
  uint8x16_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint8x16_t *v6;
  uint8x16_t v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t *v11;
  uint8x16_t v12;
  uint8x16_t *v13;
  uint8x16_t v14;
  uint8x16_t *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint8x16_t v26;
  uint8x16_t *v27;
  int32x4_t v28;
  int32x4_t v29;
  uint8x16_t v30;
  uint8x16_t *v31;
  uint8x16_t v32;
  uint8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint8x16_t v37;
  uint8x16_t *v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint8x16_t *v47;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t *v50;
  uint8x16_t *v51;
  int32x4_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t *v55;
  uint8x16_t *v56;
  int32x4_t v57;
  int32x4_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t *v65;
  uint8x16_t *v66;
  int32x4_t v67;
  int32x4_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  uint8x16_t *v77;
  uint8x16_t v78;
  uint8x16_t *v79;
  uint8x16_t v80;
  uint8x16_t *v81;
  uint8x16_t v82;
  uint8x16_t *v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t *v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  uint8x16_t v90;
  uint8x16_t *v91;
  uint8x16_t v92;
  uint8x16_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  uint8x16_t v97;
  uint8x16_t *v98;
  int32x4_t v99;
  int32x4_t v100;
  uint8x16_t v101;
  uint8x16_t *v102;
  uint8x16_t v103;
  uint8x16_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  uint8x16_t v108;
  uint8x16_t *v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  double result;

  v3 = *(uint8x16_t **)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  v6 = a1[4];
  v7 = *v6;
  v8 = (uint8x16_t *)((char *)v6 + v4);
  v9 = *v8;
  v10 = v3[1];
  v11 = (uint8x16_t *)((char *)v8 + v4);
  v12 = *v11;
  v13 = (uint8x16_t *)((char *)v11 + v4);
  v14 = *v13;
  v15 = (uint8x16_t *)((char *)v13 + v4);
  v16 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v9, v10)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v7, *v3)))));
  v17 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v12, v10)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v9, *v3)))));
  v18 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v10, v14)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, v12)))));
  v19 = *v15;
  v20 = (uint8x16_t *)((char *)v15 + v4);
  v21 = v3[2];
  v22 = v3[3];
  v23 = vaddq_s32(v16, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v12, v21)))));
  v24 = vaddq_s32(v17, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v14, v21)))));
  v25 = vaddq_s32(v18, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v19)))));
  v26 = *v20;
  v27 = (uint8x16_t *)((char *)v20 + v4);
  v28 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v14, v22))));
  v29 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v19, v22))));
  v30 = *v27;
  v31 = (uint8x16_t *)((char *)v27 + v4);
  v32 = v3[4];
  v33 = v3[5];
  v34 = vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v19, v32)))));
  v35 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v26, v32)))));
  v36 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, v26)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v32, v30)))));
  v37 = *v31;
  v38 = (uint8x16_t *)((char *)v31 + v4);
  v39 = vaddq_s32(v23, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v26, v33)))));
  v40 = vaddq_s32(v24, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, v33)))));
  v41 = vaddq_s32(v25, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v33, v37)))));
  v42 = v3[6];
  v43 = v3[7];
  v44 = vaddq_s32(vaddq_s32(v39, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v37, v43))))), vaddq_s32(v34, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v30, v42))))));
  v45 = vaddq_s32(vaddq_s32(v40, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v38, v43))))), vaddq_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v37, v42))))));
  v46 = vaddq_s32(vaddq_s32(v41, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v43, *(uint8x16_t *)((char *)v38 + v4)))))), vaddq_s32(v36, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v42, *v38))))));
  a3[4] = vaddq_s32(v44, vdupq_laneq_s32(v44, 2)).u16[0];
  a3[2] = vaddq_s32(v45, vdupq_laneq_s32(v45, 2)).u16[0];
  a3[5] = vaddq_s32(v46, vdupq_laneq_s32(v46, 2)).u16[0];
  v47 = (uint8x16_t *)((char *)*a1 + v4);
  v48 = *v47;
  v49 = v3[1];
  v50 = (uint8x16_t *)((char *)*a1 + v5);
  v51 = (uint8x16_t *)((char *)v47 + v5);
  v52 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v48, v49))));
  v53 = *v50;
  v54 = *v51;
  v55 = (uint8x16_t *)((char *)v50 + v5);
  v56 = (uint8x16_t *)((char *)v51 + v5);
  v57 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, v53))));
  v58 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v49, v54))));
  v59 = v3[2];
  v60 = v3[3];
  v61 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v53, v59)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(**a1, *v3)))));
  v62 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v54, v60)))), v52);
  v63 = *v55;
  v64 = *v56;
  v65 = (uint8x16_t *)((char *)v55 + v5);
  v66 = (uint8x16_t *)((char *)v56 + v5);
  v67 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v59, v63)))), v57);
  v68 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v60, v64)))), v58);
  v69 = v3[4];
  v70 = v3[5];
  v71 = v3[6];
  v72 = v3[7];
  v73 = vaddq_s32(vaddq_s32(v61, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v63, v69))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v65, v71)))));
  v74 = vaddq_s32(vaddq_s32(v62, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v64, v70))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v66, v72)))));
  v75 = vaddq_s32(v67, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v69, *v65)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, *(uint8x16_t *)((char *)v65 + v5)))))));
  v76 = vaddq_s32(v68, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v70, *v66)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v72, *(uint8x16_t *)((char *)v66 + v5)))))));
  *a3 = vaddq_s32(vaddq_s32(vaddq_s32(v73, v74), vdupq_laneq_s32(v73, 2)), vdupq_laneq_s32(v74, 2)).u16[0];
  a3[1] = vaddq_s32(vaddq_s32(vaddq_s32(v75, v76), vdupq_laneq_s32(v75, 2)), vdupq_laneq_s32(v76, 2)).u16[0];
  v77 = a1[6];
  v78 = *v77;
  v79 = (uint8x16_t *)((char *)v77 + v4);
  v80 = *v79;
  v81 = (uint8x16_t *)((char *)v79 + v4);
  v82 = *v81;
  v83 = (uint8x16_t *)((char *)v81 + v4);
  v84 = v3[1];
  v85 = *v83;
  v86 = (uint8x16_t *)((char *)v83 + v4);
  v87 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v80, v84)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v78, *v3)))));
  v88 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v82, v84)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v80, *v3)))));
  v89 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v84, v85)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v3, v82)))));
  v90 = *v86;
  v91 = (uint8x16_t *)((char *)v86 + v4);
  v92 = v3[2];
  v93 = v3[3];
  v94 = vaddq_s32(v87, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v82, v92)))));
  v95 = vaddq_s32(v88, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v85, v92)))));
  v96 = vaddq_s32(v89, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v92, v90)))));
  v97 = *v91;
  v98 = (uint8x16_t *)((char *)v91 + v4);
  v99 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v85, v93))));
  v100 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v90, v93))));
  v101 = *v98;
  v102 = (uint8x16_t *)((char *)v98 + v4);
  v103 = v3[4];
  v104 = v3[5];
  v105 = vaddq_s32(v99, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v90, v103)))));
  v106 = vaddq_s32(v100, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v97, v103)))));
  v107 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v93, v97)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v103, v101)))));
  v108 = *v102;
  v109 = (uint8x16_t *)((char *)v102 + v4);
  v110 = vaddq_s32(v94, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v97, v104)))));
  v111 = vaddq_s32(v95, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v101, v104)))));
  v112 = vaddq_s32(v96, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v104, v108)))));
  v113 = v3[6];
  v114 = v3[7];
  v115 = vaddq_s32(vaddq_s32(v110, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v108, v114))))), vaddq_s32(v105, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v101, v113))))));
  v116 = vaddq_s32(vaddq_s32(v111, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v109, v114))))), vaddq_s32(v106, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v108, v113))))));
  v117 = vaddq_s32(vaddq_s32(v112, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v114, *(uint8x16_t *)((char *)v109 + v4)))))), vaddq_s32(v107, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v113, *v109))))));
  a3[6] = vaddq_s32(v115, vdupq_laneq_s32(v115, 2)).u16[0];
  *(_QWORD *)&result = vaddq_s32(v117, vdupq_laneq_s32(v117, 2)).u64[0];
  a3[3] = vaddq_s32(v116, vdupq_laneq_s32(v116, 2)).u16[0];
  a3[7] = LOWORD(result);
  return result;
}

double sub_2160E6920(uint64_t a1, uint64_t a2, _WORD *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, int64x2_t a7, double a8, double a9, int64x2_t a10, int64x2_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint8x16_t v14;
  char *v15;
  uint8x16_t v16;
  unint64_t *v17;
  uint8x16_t v18;
  uint64_t v19;
  uint8x16_t v20;
  unint64_t *v21;
  unint64_t *v22;
  int32x4_t v23;
  uint64_t *v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint64_t *v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint8x16_t v45;
  uint8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint8x16_t v56;
  uint8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint8x16_t v64;
  uint8x16_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  uint8x16_t v74;
  uint8x16_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint8x16_t v98;
  uint8x16_t v99;
  uint8x16_t v100;
  uint8x16_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint8x16_t v111;
  uint8x16_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint8x16_t v125;
  uint8x16_t v126;
  uint8x16_t v127;
  uint8x16_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint8x16_t v137;
  uint8x16_t v138;
  uint8x16_t v139;
  uint8x16_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int64x2_t v148;
  int64x2_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint8x16_t v156;
  uint8x16_t v157;
  uint8x16_t v158;
  uint8x16_t v159;
  int32x4_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint8x16_t v163;
  uint8x16_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint8x16_t v171;
  uint8x16_t v172;
  uint8x16_t v173;
  int64x2_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint8x16_t v182;
  uint8x16_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  uint8x16_t v187;
  uint8x16_t v188;
  int32x4_t v189;
  int32x4_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint8x16_t v193;
  uint8x16_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint8x16_t v201;
  uint8x16_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  uint8x16_t v207;
  uint8x16_t v208;
  int32x4_t v209;
  int32x4_t v210;
  uint8x16_t v211;
  uint8x16_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  double result;

  v12 = *(unsigned int *)(a2 + 16);
  v11 = *(unsigned int *)(a2 + 20);
  v13 = *(unint64_t **)(a1 + 32);
  a4.i64[0] = *v13;
  a5.i64[0] = *(unint64_t *)((char *)v13 + v12);
  v14 = (uint8x16_t)vzip1q_s64(a4, a5);
  v15 = (char *)v13 + v11;
  a6.i64[0] = *(unint64_t *)((char *)v13 + v11);
  v16 = (uint8x16_t)vzip1q_s64(a5, a6);
  v17 = (unint64_t *)((char *)v13 + v12 + v11);
  a7.i64[0] = *v17;
  v18 = (uint8x16_t)vzip1q_s64(a6, a7);
  v19 = *(_QWORD *)(a2 + 64);
  v20 = *(uint8x16_t *)(v19 + 16);
  v21 = (unint64_t *)&v15[v11];
  v22 = (unint64_t *)((char *)v17 + v11);
  v23 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v19, v18))));
  a10.i64[0] = *v21;
  a11.i64[0] = *v22;
  v24 = (uint64_t *)((char *)v21 + v11);
  v25 = (uint8x16_t)vzip1q_s64(a7, a10);
  v26 = (uint8x16_t)vzip1q_s64(a10, a11);
  v27 = (uint64_t *)((char *)v22 + v11);
  v28 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v25, v20))));
  v29 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v18, v20)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v14, *(uint8x16_t *)v19)))));
  v30 = vaddq_s32(v28, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v16, *(uint8x16_t *)v19)))));
  v31 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v20, v26)))), v23);
  v28.i64[0] = *v24;
  v23.i64[0] = *v27;
  v32 = (uint64_t *)((char *)v24 + v11);
  v33 = (uint64_t *)((char *)v27 + v11);
  v34 = (uint8x16_t)vzip1q_s64(a11, (int64x2_t)v28);
  v35 = (uint8x16_t)vzip1q_s64((int64x2_t)v28, (int64x2_t)v23);
  v36 = *(uint8x16_t *)(v19 + 32);
  v37 = *(int64x2_t *)(v19 + 48);
  v38 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v26, v36))));
  v39 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v34, v36))));
  v40 = vaddq_s32(v29, v38);
  v41 = vaddq_s32(v30, v39);
  v42 = vaddq_s32(v31, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, v35)))));
  v39.i64[0] = *v32;
  v38.i64[0] = *v33;
  v43 = (uint64_t *)((char *)v32 + v11);
  v44 = (uint64_t *)((char *)v33 + v11);
  v45 = (uint8x16_t)vzip1q_s64((int64x2_t)v23, (int64x2_t)v39);
  v46 = (uint8x16_t)vzip1q_s64((int64x2_t)v39, (int64x2_t)v38);
  v47 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, (uint8x16_t)v37))));
  v48 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v45, (uint8x16_t)v37))));
  v49 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v37, v46))));
  v37.i64[0] = *v43;
  v50 = *(uint8x16_t *)(v19 + 128);
  v51 = *(uint8x16_t *)(v19 + 144);
  v52 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v46, v50))));
  v53 = vaddq_s32(v47, v52);
  v52.i64[0] = *v44;
  v54 = (uint64_t *)((char *)v43 + v11);
  v55 = (uint64_t *)((char *)v44 + v11);
  v56 = (uint8x16_t)vzip1q_s64((int64x2_t)v38, v37);
  v57 = (uint8x16_t)vzip1q_s64(v37, (int64x2_t)v52);
  v58 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v56, v50))));
  v59 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v50, v57))));
  v60 = vaddq_s32(v48, v58);
  v61 = vaddq_s32(v49, v59);
  v49.i64[0] = *v54;
  v59.i64[0] = *v55;
  v62 = (uint64_t *)((char *)v54 + v11);
  v63 = (uint64_t *)((char *)v55 + v11);
  v64 = (uint8x16_t)vzip1q_s64((int64x2_t)v52, (int64x2_t)v49);
  v65 = (uint8x16_t)vzip1q_s64((int64x2_t)v49, (int64x2_t)v59);
  v66 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v64, v51))));
  v67 = vaddq_s32(v40, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v57, v51)))));
  v68 = vaddq_s32(v41, v66);
  v69 = vaddq_s32(v42, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v51, v65)))));
  v66.i64[0] = *v62;
  v70 = *(uint8x16_t *)(v19 + 160);
  v71 = *(uint8x16_t *)(v19 + 176);
  v72 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v65, v70))));
  v73 = vaddq_s32(v53, v72);
  v72.i64[0] = *v63;
  v74 = (uint8x16_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v66);
  v75 = (uint8x16_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v72);
  v76 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v74, v70))));
  v77 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v70, v75))));
  v78 = vaddq_s32(v60, v76);
  v79 = vaddq_s32(v61, v77);
  v77.i64[0] = *(uint64_t *)((char *)v62 + v11);
  v76.i64[0] = *(uint64_t *)((char *)v63 + v11);
  v80 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v72, (int64x2_t)v77), v71))));
  v81 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v71, (uint8x16_t)vzip1q_s64((int64x2_t)v77, (int64x2_t)v76)))));
  v82 = vaddq_s32(vaddq_s32(v67, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v75, v71))))), v73);
  v83 = vaddq_s32(vaddq_s32(v68, v80), v78);
  v84 = vaddq_s32(vaddq_s32(v69, v81), v79);
  v85 = vdupq_laneq_s32(v82, 2);
  v86 = vdupq_laneq_s32(v83, 2);
  v87 = vdupq_laneq_s32(v84, 2);
  v88 = (int64x2_t)vaddq_s32(v82, v85);
  v89 = (int64x2_t)vaddq_s32(v83, v86);
  v90 = (int64x2_t)vaddq_s32(v84, v87);
  a3[4] = v88.i16[0];
  a3[2] = v89.i16[0];
  a3[5] = v90.i16[0];
  v91 = (uint64_t *)(*(_QWORD *)a1 + v12);
  v88.i64[0] = **(_QWORD **)a1;
  v89.i64[0] = *v91;
  v92 = (uint64_t *)(*(_QWORD *)a1 + v11);
  v93 = (uint64_t *)((char *)v91 + v11);
  v90.i64[0] = *v92;
  v85.i64[0] = *v93;
  v94 = (uint64_t *)((char *)v92 + v11);
  v95 = (uint64_t *)((char *)v93 + v11);
  v86.i64[0] = *v94;
  v87.i64[0] = *v95;
  v96 = (uint64_t *)((char *)v94 + v11);
  v97 = (uint64_t *)((char *)v95 + v11);
  v98 = (uint8x16_t)vzip1q_s64(v88, v89);
  v99 = (uint8x16_t)vzip1q_s64(v90, (int64x2_t)v85);
  v100 = (uint8x16_t)vzip1q_s64((int64x2_t)v86, (int64x2_t)v87);
  v101 = *(uint8x16_t *)(v19 + 16);
  v102 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v19, v99))));
  v103 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v99, v101))));
  v104 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v101, v100))));
  v105 = vaddq_s32(v103, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v98, *(uint8x16_t *)v19)))));
  v106 = vaddq_s32(v104, v102);
  v102.i64[0] = *v96;
  v104.i64[0] = *v97;
  v107 = (uint64_t *)((char *)v96 + v11);
  v108 = (uint64_t *)((char *)v97 + v11);
  v87.i64[0] = *v107;
  v79.i64[0] = *v108;
  v109 = (uint64_t *)((char *)v107 + v11);
  v110 = (uint64_t *)((char *)v108 + v11);
  v111 = (uint8x16_t)vzip1q_s64((int64x2_t)v102, (int64x2_t)v104);
  v112 = (uint8x16_t)vzip1q_s64((int64x2_t)v87, (int64x2_t)v79);
  v113 = *(uint8x16_t *)(v19 + 32);
  v114 = *(uint8x16_t *)(v19 + 48);
  v115 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v100, v113))));
  v116 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v113, v111))));
  v117 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v111, v114))));
  v118 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v114, v112))));
  v119 = vaddq_s32(v105, v115);
  v120 = vaddq_s32(v106, v116);
  v115.i64[0] = *v109;
  v116.i64[0] = *v110;
  v121 = (uint64_t *)((char *)v109 + v11);
  v122 = (uint64_t *)((char *)v110 + v11);
  v80.i64[0] = *v121;
  v81.i64[0] = *v122;
  v123 = (uint64_t *)((char *)v121 + v11);
  v124 = (uint64_t *)((char *)v122 + v11);
  v125 = (uint8x16_t)vzip1q_s64((int64x2_t)v115, (int64x2_t)v116);
  v126 = (uint8x16_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v81);
  v127 = *(uint8x16_t *)(v19 + 128);
  v128 = *(uint8x16_t *)(v19 + 144);
  v129 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v112, v127))));
  v130 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v127, v125))));
  v131 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v125, v128))));
  v132 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v128, v126))));
  v133 = vaddq_s32(v117, v129);
  v134 = vaddq_s32(v118, v130);
  v135 = vaddq_s32(v119, v131);
  v136 = vaddq_s32(v120, v132);
  v131.i64[0] = *v123;
  v118.i64[0] = *v124;
  v130.i64[0] = *(uint64_t *)((char *)v123 + v11);
  v132.i64[0] = *(uint64_t *)((char *)v124 + v11);
  v137 = (uint8x16_t)vzip1q_s64((int64x2_t)v131, (int64x2_t)v118);
  v138 = (uint8x16_t)vzip1q_s64((int64x2_t)v130, (int64x2_t)v132);
  v139 = *(uint8x16_t *)(v19 + 160);
  v140 = *(uint8x16_t *)(v19 + 176);
  v141 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v126, v139))));
  v142 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v139, v137))));
  v143 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v140, v138))));
  v144 = vaddq_s32(vaddq_s32(v135, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v137, v140))))), vaddq_s32(v133, v141));
  v145 = vaddq_s32(vaddq_s32(v136, v143), vaddq_s32(v134, v142));
  v146 = vdupq_laneq_s32(v144, 2);
  v147 = vdupq_laneq_s32(v145, 2);
  v148 = (int64x2_t)vaddq_s32(v144, v146);
  v149 = (int64x2_t)vaddq_s32(v145, v147);
  *a3 = v148.i16[0];
  a3[1] = v149.i16[0];
  v150 = *(uint64_t **)(a1 + 48);
  v151 = (uint64_t *)((char *)v150 + v12);
  v148.i64[0] = *v150;
  v149.i64[0] = *v151;
  v152 = (uint64_t *)((char *)v150 + v11);
  v153 = (uint64_t *)((char *)v151 + v11);
  v146.i64[0] = *v152;
  v147.i64[0] = *v153;
  v154 = (uint64_t *)((char *)v152 + v11);
  v155 = (uint64_t *)((char *)v153 + v11);
  v156 = (uint8x16_t)vzip1q_s64(v148, v149);
  v157 = (uint8x16_t)vzip1q_s64(v149, (int64x2_t)v146);
  v158 = (uint8x16_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v147);
  v159 = *(uint8x16_t *)(v19 + 16);
  v160 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)v19, v158))));
  v143.i64[0] = *v154;
  v142.i64[0] = *v155;
  v161 = (uint64_t *)((char *)v154 + v11);
  v162 = (uint64_t *)((char *)v155 + v11);
  v163 = (uint8x16_t)vzip1q_s64((int64x2_t)v147, (int64x2_t)v143);
  v164 = (uint8x16_t)vzip1q_s64((int64x2_t)v143, (int64x2_t)v142);
  v165 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v163, v159))));
  v166 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v158, v159)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v156, *(uint8x16_t *)v19)))));
  v167 = vaddq_s32(v165, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v157, *(uint8x16_t *)v19)))));
  v168 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v159, v164)))), v160);
  v165.i64[0] = *v161;
  v160.i64[0] = *v162;
  v169 = (uint64_t *)((char *)v161 + v11);
  v170 = (uint64_t *)((char *)v162 + v11);
  v171 = (uint8x16_t)vzip1q_s64((int64x2_t)v142, (int64x2_t)v165);
  v172 = (uint8x16_t)vzip1q_s64((int64x2_t)v165, (int64x2_t)v160);
  v173 = *(uint8x16_t *)(v19 + 32);
  v174 = *(int64x2_t *)(v19 + 48);
  v175 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v164, v173))));
  v176 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v171, v173))));
  v177 = vaddq_s32(v166, v175);
  v178 = vaddq_s32(v167, v176);
  v179 = vaddq_s32(v168, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v173, v172)))));
  v176.i64[0] = *v169;
  v175.i64[0] = *v170;
  v180 = (uint64_t *)((char *)v169 + v11);
  v181 = (uint64_t *)((char *)v170 + v11);
  v182 = (uint8x16_t)vzip1q_s64((int64x2_t)v160, (int64x2_t)v176);
  v183 = (uint8x16_t)vzip1q_s64((int64x2_t)v176, (int64x2_t)v175);
  v184 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v172, (uint8x16_t)v174))));
  v185 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v182, (uint8x16_t)v174))));
  v186 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v174, v183))));
  v174.i64[0] = *v180;
  v187 = *(uint8x16_t *)(v19 + 128);
  v188 = *(uint8x16_t *)(v19 + 144);
  v189 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v183, v187))));
  v190 = vaddq_s32(v184, v189);
  v189.i64[0] = *v181;
  v191 = (uint64_t *)((char *)v180 + v11);
  v192 = (uint64_t *)((char *)v181 + v11);
  v193 = (uint8x16_t)vzip1q_s64((int64x2_t)v175, v174);
  v194 = (uint8x16_t)vzip1q_s64(v174, (int64x2_t)v189);
  v195 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v193, v187))));
  v196 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v187, v194))));
  v197 = vaddq_s32(v185, v195);
  v198 = vaddq_s32(v186, v196);
  v186.i64[0] = *v191;
  v196.i64[0] = *v192;
  v199 = (uint64_t *)((char *)v191 + v11);
  v200 = (uint64_t *)((char *)v192 + v11);
  v201 = (uint8x16_t)vzip1q_s64((int64x2_t)v189, (int64x2_t)v186);
  v202 = (uint8x16_t)vzip1q_s64((int64x2_t)v186, (int64x2_t)v196);
  v203 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v201, v188))));
  v204 = vaddq_s32(v177, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v194, v188)))));
  v205 = vaddq_s32(v178, v203);
  v206 = vaddq_s32(v179, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v188, v202)))));
  v203.i64[0] = *v199;
  v207 = *(uint8x16_t *)(v19 + 160);
  v208 = *(uint8x16_t *)(v19 + 176);
  v209 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v202, v207))));
  v210 = vaddq_s32(v190, v209);
  v209.i64[0] = *v200;
  v211 = (uint8x16_t)vzip1q_s64((int64x2_t)v196, (int64x2_t)v203);
  v212 = (uint8x16_t)vzip1q_s64((int64x2_t)v203, (int64x2_t)v209);
  v213 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v211, v207))));
  v214 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v207, v212))));
  v215 = vaddq_s32(v197, v213);
  v216 = vaddq_s32(v198, v214);
  v214.i64[0] = *(uint64_t *)((char *)v199 + v11);
  v213.i64[0] = *(uint64_t *)((char *)v200 + v11);
  v217 = vaddq_s32(vaddq_s32(v204, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v212, v208))))), v210);
  v218 = vaddq_s32(vaddq_s32(v205, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v209, (int64x2_t)v214), v208))))), v215);
  v219 = vaddq_s32(vaddq_s32(v206, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v208, (uint8x16_t)vzip1q_s64((int64x2_t)v214, (int64x2_t)v213)))))), v216);
  a3[6] = vaddq_s32(v217, vdupq_laneq_s32(v217, 2)).u16[0];
  *(_QWORD *)&result = vaddq_s32(v219, vdupq_laneq_s32(v219, 2)).u64[0];
  a3[3] = vaddq_s32(v218, vdupq_laneq_s32(v218, 2)).u16[0];
  a3[7] = LOWORD(result);
  return result;
}

double sub_2160E70E0(uint64_t a1, uint64_t a2, _WORD *a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, int64x2_t a7, double a8, double a9, int64x2_t a10, int64x2_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint8x16_t *v13;
  unint64_t *v14;
  char *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int32x4_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint8x16_t v27;
  uint8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  int64x2_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int64x2_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  int32x4_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint8x16_t v91;
  uint8x16_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  uint8x16_t v99;
  uint8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  double result;

  v12 = *(unsigned int *)(a2 + 16);
  v11 = *(unsigned int *)(a2 + 20);
  v13 = *(uint8x16_t **)(a2 + 64);
  v14 = *(unint64_t **)(a1 + 32);
  v15 = (char *)v14 + v12;
  a4.i64[0] = *v14;
  a5.i64[0] = *(unint64_t *)((char *)v14 + v12);
  v16 = (unint64_t *)((char *)v14 + v11);
  v17 = (unint64_t *)&v15[v11];
  a6.i64[0] = *v16;
  a7.i64[0] = *v17;
  v18 = (unint64_t *)((char *)v16 + v11);
  v19 = (unint64_t *)((char *)v17 + v11);
  v20 = (uint8x16_t)vzip1q_s64(a4, a5);
  v21 = (uint8x16_t)vzip1q_s64(a5, a6);
  v22 = (uint8x16_t)vzip1q_s64(a6, a7);
  v23 = v13[1];
  v24 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v13, v22))));
  a10.i64[0] = *v18;
  a11.i64[0] = *v19;
  v25 = (uint64_t *)((char *)v18 + v11);
  v26 = (uint64_t *)((char *)v19 + v11);
  v27 = (uint8x16_t)vzip1q_s64(a7, a10);
  v28 = (uint8x16_t)vzip1q_s64(a10, a11);
  v29 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v27, v23))));
  v30 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, v23)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v20, *v13)))));
  v31 = vaddq_s32(v29, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, *v13)))));
  v32 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v23, v28)))), v24);
  v29.i64[0] = *v25;
  v24.i64[0] = *v26;
  v33 = (uint8x16_t)vzip1q_s64(a11, (int64x2_t)v29);
  v34 = (uint8x16_t)vzip1q_s64((int64x2_t)v29, (int64x2_t)v24);
  v35 = v13[2];
  v36 = v13[3];
  v37 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v28, v35))));
  v38 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v33, v35))));
  v39 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v35, v34))));
  v40 = vaddq_s32(v30, v37);
  v37.i64[0] = *(uint64_t *)((char *)v25 + v11);
  v41 = vaddq_s32(v31, v38);
  v38.i64[0] = *(uint64_t *)((char *)v26 + v11);
  v42 = vaddq_s32(v40, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v34, v36)))));
  v43 = vaddq_s32(v41, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v24, (int64x2_t)v37), v36)))));
  v44 = vaddq_s32(v39, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v36, (uint8x16_t)vzip1q_s64((int64x2_t)v37, (int64x2_t)v38))))));
  v45 = vdupq_laneq_s32(v42, 2);
  v46 = vdupq_laneq_s32(v43, 2);
  v47 = vaddq_s32(v32, v44);
  v48 = vdupq_laneq_s32(v47, 2);
  v49 = (int64x2_t)vaddq_s32(v42, v45);
  v50 = (int64x2_t)vaddq_s32(v43, v46);
  v51 = (int64x2_t)vaddq_s32(v47, v48);
  a3[4] = v49.i16[0];
  a3[2] = v50.i16[0];
  a3[5] = v51.i16[0];
  v52 = (uint64_t *)(*(_QWORD *)a1 + v12);
  v49.i64[0] = **(_QWORD **)a1;
  v50.i64[0] = *v52;
  v53 = (uint64_t *)(*(_QWORD *)a1 + v11);
  v54 = (uint64_t *)((char *)v52 + v11);
  v51.i64[0] = *v53;
  v48.i64[0] = *v54;
  v55 = (uint64_t *)((char *)v53 + v11);
  v56 = (uint64_t *)((char *)v54 + v11);
  v45.i64[0] = *v55;
  v46.i64[0] = *v56;
  v57 = (uint64_t *)((char *)v55 + v11);
  v58 = (uint64_t *)((char *)v56 + v11);
  v59 = (uint8x16_t)vzip1q_s64(v49, v50);
  v60 = (uint8x16_t)vzip1q_s64(v51, (int64x2_t)v48);
  v61 = (uint8x16_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v46);
  v62 = v13[1];
  v63 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v13, v60))));
  v64 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v60, v62))));
  v65 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v62, v61))));
  v66 = vaddq_s32(v64, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v59, *v13)))));
  v67 = vaddq_s32(v65, v63);
  v63.i64[0] = *v57;
  v65.i64[0] = *v58;
  v46.i64[0] = *(uint64_t *)((char *)v57 + v11);
  v37.i64[0] = *(uint64_t *)((char *)v58 + v11);
  v68 = (uint8x16_t)vzip1q_s64((int64x2_t)v63, (int64x2_t)v65);
  v69 = (uint8x16_t)vzip1q_s64((int64x2_t)v46, (int64x2_t)v37);
  v70 = v13[2];
  v71 = (int64x2_t)v13[3];
  v72 = vaddq_s32(vaddq_s32(v66, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v61, v70))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v68, (uint8x16_t)v71)))));
  v73 = vaddq_s32(v67, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v70, v68)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v71, v69))))));
  v74 = vdupq_laneq_s32(v72, 2);
  v75 = vdupq_laneq_s32(v73, 2);
  v76 = (int64x2_t)vaddq_s32(v72, v74);
  v77 = (int64x2_t)vaddq_s32(v73, v75);
  *a3 = v76.i16[0];
  a3[1] = v77.i16[0];
  v78 = *(uint64_t **)(a1 + 48);
  v79 = (uint64_t *)((char *)v78 + v12);
  v76.i64[0] = *v78;
  v77.i64[0] = *v79;
  v80 = (uint64_t *)((char *)v78 + v11);
  v81 = (uint64_t *)((char *)v79 + v11);
  v74.i64[0] = *v80;
  v75.i64[0] = *v81;
  v82 = (uint64_t *)((char *)v80 + v11);
  v83 = (uint64_t *)((char *)v81 + v11);
  v84 = (uint8x16_t)vzip1q_s64(v76, v77);
  v85 = (uint8x16_t)vzip1q_s64(v77, (int64x2_t)v74);
  v86 = (uint8x16_t)vzip1q_s64((int64x2_t)v74, (int64x2_t)v75);
  v87 = v13[1];
  v88 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v13, v86))));
  v71.i64[0] = *v82;
  v39.i64[0] = *v83;
  v89 = (uint64_t *)((char *)v82 + v11);
  v90 = (uint64_t *)((char *)v83 + v11);
  v91 = (uint8x16_t)vzip1q_s64((int64x2_t)v75, v71);
  v92 = (uint8x16_t)vzip1q_s64(v71, (int64x2_t)v39);
  v93 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v91, v87))));
  v94 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v86, v87)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v84, *v13)))));
  v95 = vaddq_s32(v93, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v85, *v13)))));
  v96 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v87, v92)))), v88);
  v93.i64[0] = *v89;
  v88.i64[0] = *v90;
  v97 = (uint8x16_t)vzip1q_s64((int64x2_t)v39, (int64x2_t)v93);
  v98 = (uint8x16_t)vzip1q_s64((int64x2_t)v93, (int64x2_t)v88);
  v99 = v13[2];
  v100 = v13[3];
  v101 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v92, v99))));
  v102 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v97, v99))));
  v103 = vaddq_s32(v94, v101);
  v104 = vaddq_s32(v95, v102);
  v102.i64[0] = *(uint64_t *)((char *)v89 + v11);
  v101.i64[0] = *(uint64_t *)((char *)v90 + v11);
  v105 = vaddq_s32(v103, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v98, v100)))));
  v106 = vaddq_s32(v104, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)vzip1q_s64((int64x2_t)v88, (int64x2_t)v102), v100)))));
  v107 = vaddq_s32(v96, vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v99, v98)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v100, (uint8x16_t)vzip1q_s64((int64x2_t)v102, (int64x2_t)v101)))))));
  a3[6] = vaddq_s32(v105, vdupq_laneq_s32(v105, 2)).u16[0];
  *(_QWORD *)&result = vaddq_s32(v107, vdupq_laneq_s32(v107, 2)).u64[0];
  a3[3] = vaddq_s32(v106, vdupq_laneq_s32(v106, 2)).u16[0];
  a3[7] = LOWORD(result);
  return result;
}

double sub_2160E74F8(int *a1, uint64_t a2)
{
  uint8x16_t *v2;
  uint64_t v3;
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  int32x4_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  int32x4_t v19;
  int32x4_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t *v23;
  uint8x16_t *v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t *v27;
  uint8x16_t *v28;
  int32x4_t v29;
  double result;
  int8x16x2_t v31;

  v2 = (uint8x16_t *)*((_QWORD *)a1 + 7);
  v3 = a1[4];
  v4 = (uint8x16_t *)(*((_QWORD *)a1 + 3) + *a1 + (v3 * a1[1]));
  v5 = (uint8x16_t *)((char *)v4 + (8 * v3));
  v6 = *v4;
  v7 = *v5;
  v8 = (uint8x16_t *)((char *)v4 + v3);
  v9 = (uint8x16_t *)((char *)v5 + v3);
  v10 = *v8;
  v11 = *v9;
  v12 = (uint8x16_t *)((char *)v8 + v3);
  v13 = (uint8x16_t *)((char *)v9 + v3);
  v14 = vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v10, v2[1])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v6, *v2)))));
  v15 = *v12;
  v16 = *v13;
  v17 = (uint8x16_t *)((char *)v12 + v3);
  v18 = (uint8x16_t *)((char *)v13 + v3);
  v19 = vaddq_s32(v14, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v15, v2[2])))));
  v20 = vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v11, v2[9])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v7, v2[8]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v16, v2[10])))));
  v21 = *v17;
  v22 = *v18;
  v23 = (uint8x16_t *)((char *)v17 + v3);
  v24 = (uint8x16_t *)((char *)v18 + v3);
  v25 = *v23;
  v26 = *v24;
  v27 = (uint8x16_t *)((char *)v23 + v3);
  v28 = (uint8x16_t *)((char *)v24 + v3);
  v31.val[0] = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v19, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v27, v2[5]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v27 + v3 + v3), v2[7]))))), vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v21, v2[3])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v25, v2[4]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v27 + v3), v2[6]))))));
  v31.val[1] = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v20, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v28, v2[13]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v28 + v3 + v3), v2[15]))))), vaddq_s32(vaddq_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v22, v2[11])))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(v26, v2[12]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v28 + v3), v2[14]))))));
  *(_QWORD *)(a2 + 24) = vqtbl2q_s8(v31, (int8x16_t)xmmword_2160ED100).u64[0];
  v29 = vaddq_s32((int32x4_t)v31.val[1], (int32x4_t)v31.val[0]);
  *(_WORD *)(a2 + 16) = v29.i16[0];
  *(_WORD *)(a2 + 18) = v29.i16[4];
  *(_WORD *)a2 = vaddq_s32(v29, vdupq_laneq_s32(v29, 2)).u16[0];
  *(_QWORD *)&result = vaddq_s32((int32x4_t)v31.val[0], vdupq_laneq_s32((int32x4_t)v31.val[0], 2)).u64[0];
  *(_WORD *)(a2 + 8) = LOWORD(result);
  *(_WORD *)(a2 + 10) = vaddq_s32((int32x4_t)v31.val[1], vdupq_laneq_s32((int32x4_t)v31.val[1], 2)).u16[0];
  return result;
}

int8x16_t *sub_2160E7730(int8x16_t *result, int a2, int16x8_t *a3, int a4)
{
  int i;
  int8x16_t v5;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 2)
    {
      v5 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(a3[2], (int16x8_t)vzip1q_s8(*(int8x16_t *)((char *)result + a2), (int8x16_t)0))), vaddq_s16(a3[3], (int16x8_t)vzip2q_s8(*(int8x16_t *)((char *)result + a2), (int8x16_t)0)));
      *result = vqmovun_high_s16(vqmovun_s16(vaddq_s16(*a3, (int16x8_t)vzip1q_s8(*result, (int8x16_t)0))), vaddq_s16(a3[1], (int16x8_t)vzip2q_s8(*result, (int8x16_t)0)));
      *(int8x16_t *)((char *)result + a2) = v5;
      result = (int8x16_t *)((char *)result + 2 * a2);
      a3 += 4;
    }
  }
  return result;
}

int8x16_t *sub_2160E77A8(int8x16_t *result, int a2, uint64_t a3, int16x8_t *a4, int a5)
{
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;

  if (a5 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = (int8x16_t *)(a3 + 16 * v5);
      v7 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(a4[2], (int16x8_t)vzip1q_s8(v6[1], (int8x16_t)0))), vaddq_s16(a4[3], (int16x8_t)vzip2q_s8(v6[1], (int8x16_t)0)));
      *result = vqmovun_high_s16(vqmovun_s16(vaddq_s16(*a4, (int16x8_t)vzip1q_s8(*v6, (int8x16_t)0))), vaddq_s16(a4[1], (int16x8_t)vzip2q_s8(*v6, (int8x16_t)0)));
      *(int8x16_t *)((char *)result + a2) = v7;
      result = (int8x16_t *)((char *)result + 2 * a2);
      v5 += 2;
      a4 += 4;
    }
    while ((int)v5 < a5);
  }
  return result;
}

int8x16_t *sub_2160E7820(int8x16_t *result, unsigned int a2, int8x16_t *a3, unsigned int a4, int16x8_t *a5, int a6)
{
  int i;
  int8x16_t v7;
  int8x16_t v8;
  int16x8_t v9;

  if (a6 >= 1)
  {
    for (i = 0; i < a6; i += 2)
    {
      v7 = *(int8x16_t *)((char *)result + a2);
      v8 = *(int8x16_t *)((char *)a3 + a4);
      v9 = vsubq_s16((int16x8_t)vzip2q_s8(*result, (int8x16_t)0), (int16x8_t)vzip2q_s8(*a3, (int8x16_t)0));
      *a5 = vsubq_s16((int16x8_t)vzip1q_s8(*result, (int8x16_t)0), (int16x8_t)vzip1q_s8(*a3, (int8x16_t)0));
      a5[1] = v9;
      a5[2] = vsubq_s16((int16x8_t)vzip1q_s8(v7, (int8x16_t)0), (int16x8_t)vzip1q_s8(v8, (int8x16_t)0));
      a5[3] = vsubq_s16((int16x8_t)vzip2q_s8(v7, (int8x16_t)0), (int16x8_t)vzip2q_s8(v8, (int8x16_t)0));
      result = (int8x16_t *)((char *)result + 2 * a2);
      a3 = (int8x16_t *)((char *)a3 + 2 * a4);
      a5 += 4;
    }
  }
  return result;
}

unint64_t *sub_2160E78A4(unint64_t *result, unsigned int a2, unint64_t *a3, unsigned int a4, uint64_t a5, int a6, double a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11)
{
  uint64_t v11;
  __n128 *v12;

  if (a6 >= 1)
  {
    v11 = 0;
    do
    {
      v12 = (__n128 *)(a5 + 16 * v11);
      a8.i64[0] = *result;
      a9.i64[0] = *a3;
      a10.i64[0] = *(unint64_t *)((char *)result + a2);
      a11.i64[0] = *(unint64_t *)((char *)a3 + a4);
      a10 = vzip1q_s8(a10, (int8x16_t)0);
      a11 = vzip1q_s8(a11, (int8x16_t)0);
      a8 = (int8x16_t)vsubq_s16((int16x8_t)vzip1q_s8(a8, (int8x16_t)0), (int16x8_t)vzip1q_s8(a9, (int8x16_t)0));
      a9 = (int8x16_t)vsubq_s16((int16x8_t)a10, (int16x8_t)a11);
      *v12 = (__n128)a8;
      v12[1] = (__n128)a9;
      result = (unint64_t *)((char *)result + 2 * a2);
      a3 = (unint64_t *)((char *)a3 + 2 * a4);
      v11 += 2;
    }
    while ((int)v11 < a6);
  }
  return result;
}

uint64_t sub_2160E790C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t j;
  int v6;

  for (i = 0; i != 8; ++i)
  {
    for (j = 0; j != 8; ++j)
    {
      v6 = *(__int16 *)(a4 + 2 * j) + *(unsigned __int8 *)(a3 + j);
      if (v6 >= 255)
        v6 = 255;
      *(_BYTE *)(result + j) = v6 & ~(v6 >> 31);
    }
    result += a2;
    a4 += 16;
    a3 += 8;
  }
  return result;
}

uint64_t sub_2160E7960(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  size_t v5;
  void *v6;
  void *v7;
  pthread_mutex_t *v8;

  result = 4294958327;
  if (!((a3 | a2) >> 16) && !((a3 * (unint64_t)a2) >> 31))
  {
    v5 = a3 * a2;
    *(_DWORD *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 12) = a2;
    *(_DWORD *)(a1 + 20) = v5;
    *(_DWORD *)(a1 + 24) = v5;
    *(_DWORD *)(a1 + 16) = 4 * a2;
    *(_QWORD *)a1 = sub_2160CB5FC((void *)(8 * (16 * v5)));
    *(_QWORD *)(a1 + 32) = sub_2160CB5D4(4 * v5);
    *(_QWORD *)(a1 + 152) = sub_2160CB640(16 * (v5 + 2 * v5));
    *(_QWORD *)(a1 + 112) = sub_2160CB5D4(v5);
    *(_QWORD *)(a1 + 120) = sub_2160CB5D4(v5);
    *(_QWORD *)(a1 + 128) = sub_2160CB5D4(v5);
    *(_QWORD *)(a1 + 136) = sub_2160CB5E8(v5);
    *(_QWORD *)(a1 + 72) = sub_2160CB5D4(2 * v5);
    v6 = sub_2160CB5E8(v5);
    *(_QWORD *)(a1 + 144) = v6;
    if (!v6)
      return 4294967188;
    if (!*(_QWORD *)a1)
      return 4294967188;
    v7 = *(void **)(a1 + 32);
    if (!v7
      || !*(_QWORD *)(a1 + 152)
      || !*(_QWORD *)(a1 + 112)
      || !*(_QWORD *)(a1 + 120)
      || !*(_QWORD *)(a1 + 128)
      || !*(_QWORD *)(a1 + 136)
      || !*(_QWORD *)(a1 + 72))
    {
      return 4294967188;
    }
    bzero(v7, 4 * *(unsigned int *)(a1 + 20));
    *(_DWORD *)(a1 + 56) = 64;
    *(_QWORD *)(a1 + 48) = sub_2160CB5FC((void *)0x300);
    v8 = sub_2160EC80C();
    *(_QWORD *)(a1 + 64) = v8;
    result = 4294967188;
    if (*(_QWORD *)(a1 + 48) && v8)
    {
      *(_QWORD *)(a1 + 160) = sub_2160EC80C();
      *(_QWORD *)(a1 + 168) = operator new[]();
      if (*(_QWORD *)(a1 + 160))
      {
        result = 0;
        *(_QWORD *)(a1 + 232) = 0;
        return result;
      }
      return 4294967188;
    }
  }
  return result;
}

void sub_2160E7ADC(uint64_t a1)
{
  bzero(*(void **)(a1 + 32), 4 * *(unsigned int *)(a1 + 20));
}

uint64_t sub_2160E7AEC(uint64_t a1)
{
  uint64_t result;

  result = sub_2160E7B20(*(_QWORD *)(a1 + 8), *(_DWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), 0, 0);
  *(_DWORD *)a1 = result;
  return result;
}

uint64_t sub_2160E7B20(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5)
{
  int v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  void *v34;
  size_t v35;
  int v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned int v40;
  uint64_t v42;
  BOOL v43;
  int v44;
  int v45;

  v45 = 0;
  *(_QWORD *)(a1 + 80) = a2;
  v8 = a2[25] >> 4;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 12) * v8;
  v9 = **(unsigned __int8 **)(a1 + 144);
  if (a4 == 1 && !a5)
  {
    v10 = 0;
    *(_DWORD *)(a1 + 20) = 0;
    return v10;
  }
  v12 = (a4 & 0xFFFFFFFD) == 1 && a5 != 0;
  v43 = v12;
  v13 = *(_QWORD *)(a1 + 168);
  sub_2160EC880(*(pthread_mutex_t **)(a1 + 160));
  v14 = **(_BYTE **)(a1 + 144) != 0;
  v15 = *(_DWORD *)(a1 + 8) >> v14;
  v16 = v15 == 0;
  if (!v15)
  {
    v10 = 0;
LABEL_73:
    sub_2160EC88C(*(pthread_mutex_t **)(a1 + 160));
    return v10;
  }
  v42 = a3;
  v10 = 0;
  v17 = 0;
  while (2)
  {
    v18 = 0;
    v19 = *(_DWORD *)(a1 + 12);
    while (1)
    {
      v20 = (v18 * v19) << v14;
      v21 = (v18 * v19 + v19) << v14;
      v22 = v20;
      if (v21 > v20)
      {
        v23 = (unsigned __int8 *)(v13 + v20);
        v22 = (v18 * v19) << v14;
        while (1)
        {
          v24 = *v23++;
          if (v24 != 20)
            break;
          if (v21 == ++v22)
            goto LABEL_34;
        }
      }
      if (v22 == v21)
        break;
      if (*(_BYTE *)(v13 + v22) != 30)
        v18 = v15;
      if (++v18 >= v15)
      {
        if (v16)
          goto LABEL_73;
        v25 = 0;
        while (1)
        {
          v26 = (v25 * v19) << v14;
          v27 = (v25 * v19 + v19) << v14;
          v28 = v26;
          if (v27 > v26)
          {
            v29 = (unsigned __int8 *)(v13 + v26);
            v28 = (v25 * v19) << v14;
            while (1)
            {
              v30 = *v29++;
              if (v30 != 10)
                break;
              if (v27 == ++v28)
                goto LABEL_64;
            }
          }
          if (v28 == v27)
            break;
          if (*(unsigned __int8 *)(v13 + v28) < 0xAu)
            v25 = v15;
          if (++v25 >= v15)
            goto LABEL_73;
        }
LABEL_64:
        memset((void *)(v13 + v26), 11, v27 - v26);
        sub_2160EC88C(*(pthread_mutex_t **)(a1 + 160));
        v40 = *(_DWORD *)(a1 + 12);
        if (!(v26 % v40) && !(v27 % v40))
        {
          if (v9)
          {
            sub_2160E7F70((uint64_t *)a1, v42, v26 / v40, v27 / v40, *(double *)v37.i64, *(int8x8_t *)v38.i8);
            v10 = 0;
          }
          else
          {
            sub_21609E9C8((uint64_t *)a1, v42, 0, v40, v26 / v40, v27 / v40, v37, v38, v39);
          }
          sub_2160EC880(*(pthread_mutex_t **)(a1 + 160));
          if (v27 > v26)
          {
            v34 = (void *)(*(_QWORD *)(a1 + 168) + v26);
            v35 = v27 + ~(_DWORD)v26 + 1;
            v36 = 20;
LABEL_61:
            memset(v34, v36, v35);
          }
          goto LABEL_62;
        }
        return 4294958327;
      }
    }
LABEL_34:
    memset((void *)(v13 + v20), 21, v21 - v20);
    sub_2160EC88C(*(pthread_mutex_t **)(a1 + 160));
    v31 = *(_DWORD *)(a1 + 12);
    if (v20 % v31 || v21 % v31)
      return 4294958327;
    if (!*(_BYTE *)(a1 + 224))
    {
      if (*(int *)(a1 + 184) >= 1 && !v9)
      {
LABEL_46:
        v33 = sub_21609B1DC(a1, 0, *(_DWORD *)(a1 + 12), v20 / v31, v21 / v31);
        goto LABEL_47;
      }
LABEL_53:
      if (v9)
      {
        *(_DWORD *)(a1 + 184) = 0;
        sub_2160E9674(a1, a2[34], v20, v21);
        if (!v43)
          sub_2160E9830(a1, a2[34], v20, v21);
      }
      else
      {
        v33 = sub_216099280(a1, 0, *(_DWORD *)(a1 + 12), v20 / v31, v21 / v31);
        if ((_DWORD)v33)
          return v33;
        if (!v43)
        {
          v33 = sub_21609A5B4(a1, 0, v31, v20 / v31, v21 / v31);
LABEL_47:
          v10 = 0;
          if (!(_DWORD)v33)
            goto LABEL_59;
          return v33;
        }
      }
      v10 = 0;
      goto LABEL_59;
    }
    v32 = *(_DWORD *)(a1 + 184);
    if (!*(_BYTE *)(a1 + 225))
    {
      if (v32 >= 1 && !v9)
      {
        if (*(_BYTE *)(a1 + 226))
        {
          v44 = 0;
          v10 = sub_21609BD58(a1, 0, v31, v20 / v31, v21 / v31, 0, &v44);
          goto LABEL_59;
        }
        goto LABEL_46;
      }
      goto LABEL_53;
    }
    if (v32 < 1)
    {
LABEL_59:
      sub_2160EC880(*(pthread_mutex_t **)(a1 + 160));
      if (v21 > v20)
      {
        v34 = (void *)(*(_QWORD *)(a1 + 168) + v20);
        v35 = v21 + ~(_DWORD)v20 + 1;
        v36 = 30;
        goto LABEL_61;
      }
LABEL_62:
      sub_2160EC88C(*(pthread_mutex_t **)(a1 + 160));
      v13 = *(_QWORD *)(a1 + 168);
      sub_2160EC880(*(pthread_mutex_t **)(a1 + 160));
      v14 = **(_BYTE **)(a1 + 144) != 0;
      v15 = *(_DWORD *)(a1 + 8) >> v14;
      v16 = v15 == 0;
      if (v15)
        continue;
      goto LABEL_73;
    }
    break;
  }
  if (!(_DWORD)v20 && !*(_QWORD *)(a1 + 232))
    *(_QWORD *)(a1 + 232) = sub_2160CB5FC((void *)(20 * a2[34] + 11 * a2[38]));
  v10 = sub_21609BD58(a1, 0, v31, v20 / v31, v21 / v31, v17 & 1, &v45);
  if (!(_DWORD)v10)
  {
    v17 = 1;
    goto LABEL_59;
  }
  return v10;
}

uint64_t sub_2160E7F70(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, double a5, int8x8_t a6)
{
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int32x2_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  _BOOL4 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  _BOOL4 v48;
  int v49;
  int v50;
  unsigned __int8 v51;
  int v52;
  unsigned int v53;
  int8x16_t v54;
  unsigned int v55;
  BOOL v57;
  unsigned int v58;
  int *v59;
  int *v60;
  signed int v61;
  unint64_t v62;
  int v63;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  _BOOL4 v79;
  BOOL v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  __int16 v87;
  unsigned int v88;
  __int16 v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned __int8 v96;
  int v97;
  char v98;
  unsigned int v99;
  unsigned int v100;
  __int16 v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  unsigned int v105;
  int v106;
  char v107;
  int v108;
  int v109;
  int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  BOOL v115;
  unsigned int v117;
  int v118;
  int v119;
  unsigned __int16 v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  char v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char v131;
  unsigned __int8 v132;
  char v133;
  unsigned __int8 v134;
  char v135;
  unsigned __int8 v136;
  char v137;
  char v138;
  unsigned int v139;
  BOOL v141;
  BOOL v142;
  int v143;
  BOOL v144;
  BOOL v145;
  int v146;
  int v148;
  int v149;
  int v150;
  int v151;
  BOOL v152;
  BOOL v157;
  _BOOL4 v160;
  char v161;
  unsigned int v162;
  unsigned int v163;
  int *v164;
  uint64_t v165;
  int *v166;
  unint64_t v167;
  int v168;
  int v169;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  __int16 *v184;
  __int16 *v185;
  __int16 v186;
  int v187;
  __int16 v188;
  __int16 v189;
  __int16 v190;
  int v191;
  __int16 v192;
  __int16 v193;
  int v194;
  __int16 v195;
  __int16 v196;
  unsigned int v197;
  __int16 v198;
  int v199;
  char v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  BOOL v205;
  int v206;
  unsigned int v207;
  __int16 v208;
  int v209;
  char v210;
  int v211;
  unsigned int v212;
  int v213;
  char v214;
  int v215;
  int v216;
  int v217;
  int v218;
  BOOL v219;
  _BOOL4 v220;
  __int16 v221;
  __int16 v222;
  int v223;
  int v224;
  char v225;
  unsigned __int8 v226;
  int v227;
  int v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  char v232;
  BOOL v233;
  unsigned int v234;
  char v235;
  char v236;
  unsigned __int8 v237;
  char v238;
  unsigned __int8 v239;
  char v240;
  unsigned __int8 v241;
  char v242;
  char v243;
  unsigned int v244;
  BOOL v245;
  char v246;
  int v247;
  int v248;
  int v249;
  int v250;
  BOOL v251;
  char *v257;
  __int16 v258;
  int v259;
  int v260;
  int v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned __int8 v265;
  int v266;
  uint64_t v267;
  unsigned int v268;
  int v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t *v275;
  int *v276;
  uint64_t v277;
  _BOOL4 v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  _BOOL4 v283;
  signed int v284;
  int v285;
  uint64_t v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  int *v290;
  int v291;
  _BOOL4 v292;
  _BOOL4 v293;
  unsigned int v294;
  int v295;
  _BOOL4 v296;
  int v297;
  BOOL v298;
  int v299;
  int *v300;
  __int16 v301;
  int v302;
  int v303;
  unsigned int v304;
  BOOL v305;
  char v306;
  unsigned __int8 v307;
  int *v308;
  unsigned int v309;
  unsigned __int8 v310;
  unsigned int v311;
  char v312;
  int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  _BOOL4 v317;
  unsigned int v318;
  int v319;
  int v320;
  unsigned int v321;
  int *v322;
  int v323;
  unsigned int v324;
  int *v325;
  unsigned int v326;
  _BOOL4 v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  int v340;
  int v341;
  int v342;
  BOOL v343;
  unsigned __int8 v344;
  unsigned int v345;
  __int16 v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  char v354;
  int v355;
  int v356;

  v261 = *((unsigned __int8 *)a1 + 225);
  v279 = a3;
  if (a3 < a4)
  {
    v257 = (char *)&unk_2160F76A0 + dword_254E2EA68;
    v6 = *((_DWORD *)a1 + 3);
    v356 = 4 * v6;
    v263 = 2 * v6;
    v267 = a1[6];
    v7 = *a1;
    v8 = (int *)(a1[19] + 48 * v6 * v279);
    v9 = a1[9];
    v277 = a1[4];
    v260 = 20 * v6;
    v10 = a2 + 32;
    v11 = *(_QWORD *)(a2 + 104);
    v12 = a2 + 64;
    v340 = 4 * v279;
    v13 = (int32x2_t)0xCC3300CC00CC00;
    v275 = a1;
    v274 = v6;
    v347 = *a1;
    v272 = a2 + 32;
    v273 = v9;
    v270 = a2 + 64;
    v271 = v11;
    while (!v6)
    {
LABEL_511:
      v340 += 4;
      if (++v279 == a4)
        return 0;
    }
    v281 = 0;
    v286 = (int)((v263 * (v279 >> 1)) | v279 & 1);
    v266 = v279 * v6;
    v262 = (v279 & 0xFFFFFFFE) * v6;
    v299 = 4 * v279;
    v14 = 0;
    v15 = 32;
    while (1)
    {
      v16 = (v14 + v266);
      v17 = (int)v16;
      v18 = v14 ? v16 - 1 : v266;
      v19 = v14;
      v20 = a1[18];
      v291 = v16;
      v21 = *(unsigned __int8 *)(v20 + (int)v16);
      v292 = v21 == 2;
      v285 = v19;
      if (v19 && v21 == 1)
      {
        v293 = 0;
        v296 = *(unsigned __int8 *)(v20 + v18) == 2;
      }
      else
      {
        v296 = 0;
        if (v19)
        {
          v293 = 0;
          if (v21 == 2)
          {
            v296 = 0;
            v293 = *(unsigned __int8 *)(v20 + (int)v16 - 1) == 1;
          }
        }
        else
        {
          v293 = 0;
        }
      }
      if (v279 > 1)
      {
        if ((v279 & 1) != 0)
        {
          v22 = v286;
          v37 = v286 - 1;
          if (v21 == 2)
            v37 = v286 - v263;
          v328 = v37;
          if (v21 == 2)
            v24 = (v16 - v263);
          else
            v24 = (v16 - v6);
          v38 = v356;
          if (v21 == 2)
            v38 = v260;
          v295 = v38;
          v36 = 0;
        }
        else
        {
          v25 = v16 - v263;
          v26 = *(unsigned __int8 *)(v20 + (v16 - v263));
          v22 = v286;
          v27 = v286 - v263;
          if (v26 == 2)
            v28 = v286 - v263;
          else
            v28 = v27 + 1;
          if (v26 == 2)
            v29 = v25;
          else
            v29 = v291 - v6;
          if (v26 == 2)
            v30 = v260;
          else
            v30 = v356;
          v31 = v26 == 2;
          v32 = v26 == 2;
          if (v26 == 2)
            v33 = v286 - v263;
          else
            v33 = v27 + 1;
          if (v32)
          {
            v34 = v260;
          }
          else
          {
            v25 = v291 - v6;
            v34 = v356;
          }
          if (v21 != 2)
            v33 = v28;
          v328 = v33;
          v24 = v21 == 2 ? v25 : v29;
          v35 = v21 == 2 ? v34 : v30;
          v295 = v35;
          v36 = v21 != 2 && v31;
        }
        v327 = v36;
      }
      else
      {
        if ((v279 & 1) != 0)
        {
          v22 = v286;
          v23 = v286 - 1;
          if (v21 == 2)
            v23 = v286;
          v328 = v23;
          v24 = v21 == 2 ? v16 : (v16 - v6);
          v327 = 0;
        }
        else
        {
          v327 = 0;
          v22 = v286;
          v328 = v286;
          v24 = v16;
        }
        v295 = v356;
      }
      v333 = v24;
      v278 = v21 != *(unsigned __int8 *)(v20 + (int)v24);
      v39 = v21 == 2 ? 1 : 3;
      v350 = v39;
      v40 = v285 ? v22 - 2 : v22;
      v337 = v296 || v293;
      if (v296 || v293)
      {
        v41 = v22 & 0xFFFFFFFE;
        if (v285)
          v41 = (v22 & 0xFFFFFFFE) - 2;
        v315 = v41;
        v18 = v285 ? v262 - 1 + v285 : v262;
        v42 = v279 & 0xFFFFFFFE;
      }
      else
      {
        v315 = v40;
        v42 = v279;
      }
      v314 = v42;
      v43 = *(unsigned __int8 *)(a1[17] + v17);
      v8[4] = 33686018;
      v44 = v43 ? 0 : 33686018;
      *v8 = 33686018;
      v8[1] = v44;
      v8[2] = 33686018;
      v8[3] = v44;
      v8[5] = v44;
      v8[6] = 33686018;
      v8[7] = v44;
      if (*(_BYTE *)(v267 + 12 * *(unsigned __int16 *)(v9 + 2 * v17) + 9) != 1)
        break;
      *(_BYTE *)v8 = 0x80;
LABEL_102:
      v8 += 12;
      v286 += 2;
      v14 = v285 + 1;
      v281 += 4;
      v15 = 4;
      if (v285 + 1 == v6)
        goto LABEL_511;
    }
    v282 = *(unsigned __int8 *)(v267 + 12 * *(unsigned __int16 *)(v9 + 2 * v17) + 9);
    v287 = *(unsigned __int16 *)(v9 + 2 * v17);
    v308 = v8 + 4;
    v45 = *(_QWORD *)(v11 + 8 * v286);
    v46 = *(unsigned __int16 *)(v9 + 2 * v18);
    v280 = *(unsigned __int16 *)(v9 + 2 * (int)v24);
    v48 = v10 <= v45 && v45 <= v12;
    if (v261 | v48)
    {
      if (*(_BYTE *)(a1[17] + v17))
        v49 = 0;
      else
        v49 = 50529027;
      v8[2] = 50529027;
      v8[3] = v49;
      v8[4] = 50529027;
      v8[5] = v49;
      v8[6] = 50529027;
      v8[7] = v49;
      v8[9] = 50529027;
      v50 = 16843009 * v15;
      *v8 = v50;
      v8[1] = v49;
      if (v337)
        v8[8] = v50;
      if (v278 || v292)
        v51 = 3;
      else
        v51 = 4;
      if (v279 <= 1 && v21 == 2 || !v279)
      {
        *v308 = 538976288;
      }
      else
      {
        v52 = 16843009 * v51;
        *v308 = v52;
        v8[9] = v52;
      }
      if (v282 == 2)
      {
        *(_BYTE *)v8 = v15 | (32 * (v46 != v287));
        *((_BYTE *)v8 + 16) = v51 | (32 * (v280 != v287));
      }
      goto LABEL_102;
    }
    v53 = bswap32(*(_DWORD *)(v277 + 4 * v17));
    v342 = *(unsigned __int8 *)(a1[17] + v17);
    if (*(_BYTE *)(a1[17] + v17))
    {
      v54 = vbicq_s8((int8x16_t)xmmword_2160F2B70, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v53), (int8x16_t)xmmword_2160F2B60)));
      a6 = (int8x8_t)vextq_s8(v54, v54, 8uLL).u64[0];
      v13 = (int32x2_t)vorr_s8(*(int8x8_t *)v54.i8, a6);
      v53 |= v13.i32[0] | v13.i32[1];
    }
    v55 = 0;
    v354 = v257[*(unsigned __int8 *)(v267 + 12 * *(unsigned __int16 *)(v9 + 2 * v17) + 8)];
    v297 = 4 * v285;
    v57 = v282 != 2 || v46 == *(unsigned __int16 *)(v9 + 2 * v17);
    v305 = v57;
    v300 = v8 + 8;
    v290 = v8 + 9;
    v302 = (v53 >> 4) & 0xFFF0000 | v53 & 0xFFF0000;
    v258 = *(_WORD *)(v45 + 10);
    v268 = v53 >> 30;
    v264 = (v53 >> 28) & 3;
    v355 = (v53 >> 4) & 0xFFF0FFF | v53;
    v259 = (v53 >> 4) & 0xFFF0FFF | v53 & 0xFFFFFFF;
    v284 = v350 + 1;
    v58 = 4;
    v59 = v8;
    v276 = v8;
    v348 = v21;
    v349 = v17;
    while (2)
    {
      if (v55)
      {
        v18 += v6;
        ++v314;
        if (*(_BYTE *)(a1[17] + v17))
        {
          v13 = (int32x2_t)33686018;
          v60 = v300;
          *(_OWORD *)v300 = xmmword_2160F2BD0;
        }
        else
        {
          v60 = v300;
          *(_QWORD *)v300 = 0x202020202020202;
          *((_QWORD *)v300 + 1) = 0x202020202020202;
        }
        v58 = 1;
        v61 = (v286 & 0xFFFFFFFE) - 1;
        v59 = v60;
      }
      else
      {
        v61 = v315;
      }
      v315 = v61;
      v62 = *(_QWORD *)(v11 + 8 * v61);
      if (v355)
      {
        if (v302 == 268369920)
          v58 = 1;
        v313 = -1;
        v63 = v302 == 268369920;
      }
      else if ((v258 & 0xFFFD) == 0x100)
      {
        v313 = 0;
        v63 = 0;
        v13 = (int32x2_t)0x2020202002020202;
        *(_OWORD *)v59 = xmmword_2160F2B80;
        v58 = 1;
      }
      else
      {
        v63 = 0;
        v313 = -1;
      }
      v345 = v55;
      if (!v305)
      {
        v337 = 0;
LABEL_146:
        v73 = 0;
        v74 = 0;
        *(_BYTE *)v59 = 32;
LABEL_147:
        v72 = v355;
        goto LABEL_159;
      }
      if (!v297)
        goto LABEL_146;
      if (v10 <= v62 && v62 <= v12)
      {
        v73 = 0;
        *v59 = 67372036;
        v74 = 1;
        goto LABEL_147;
      }
      v65 = bswap32(*(_DWORD *)(v277 + 4 * v18));
      if ((v65 & 0xCC0000) != 0)
        v66 = 13382400;
      else
        v66 = 0;
      if ((v65 & 0x330000) != 0)
        v67 = 3342387;
      else
        v67 = 0;
      v68 = v67 | v66 | v65;
      if (*(_BYTE *)(a1[17] + v18))
        v65 = v68;
      if (v296)
      {
        v73 = 0;
        v69 = (v65 >> 18) & 3;
        v70 = HIWORD(v65) & 3;
        if ((v279 & 1) == 0)
          v70 = v69;
        v71 = dword_2160F98F0[v70];
LABEL_153:
        v76 = v355;
      }
      else
      {
        if (!v293)
        {
          v73 = 0;
          v71 = HIWORD(v65);
          goto LABEL_153;
        }
        v73 = 0;
        v75 = v268;
        if (v55)
          v75 = v264;
        v76 = v259 | (dword_2160F98F0[v75] << 28);
        v71 = HIWORD(v65);
      }
      v72 = v76 | (v71 << 28);
      v77 = v337;
LABEL_155:
      if (v73 < v58)
      {
        if ((v73 & v342) != 0)
        {
          v74 = 0;
LABEL_158:
          *(_BYTE *)v59 = 32;
          goto LABEL_159;
        }
        v74 = v313 | (v72 >> 28) | (v73 == 0);
        if (!v74)
          goto LABEL_158;
        v74 = 1;
        if (v72 >> 28 == 15)
          goto LABEL_159;
        v78 = 0;
        v353 = v73 + v297;
        v351 = v73 + v297 - 1;
        v288 = v73;
        if (v73)
          v79 = 0;
        else
          v79 = v293;
        v80 = v296;
        if (v73)
          v80 = 0;
        v343 = v80;
        v81 = v72;
        v303 = v18;
        v329 = v58;
        v325 = v59;
        v323 = v63;
        v319 = v77;
        v321 = v72;
        v317 = v79;
        while (!v79)
        {
          v82 = v340 + v78;
          if (v343)
          {
            v83 = ((2 * (v279 & 1)) & 3 | (4 * v314)) + (v78 >> 1);
            if ((v81 & 0x80000000) != 0)
              goto LABEL_307;
            goto LABEL_177;
          }
          v83 = v299 + v78;
          if ((v81 & 0x80000000) == 0)
            goto LABEL_177;
LABEL_307:
          v81 *= 2;
          if (++v78 == 4)
          {
            v74 = 1;
            a1 = v275;
            v6 = v274;
            v8 = v276;
            v10 = v272;
            v9 = v273;
            v12 = v270;
            v11 = v271;
            v73 = v288;
LABEL_159:
            v77 = 0;
            v63 |= v74;
            *(_BYTE *)v59++ |= (32 * v74) ^ 0x20;
            v72 *= 16;
            ++v73;
            goto LABEL_155;
          }
        }
        v82 = v299 + 2 * v345 + (v78 >> 1);
        v83 = 4 * v314 + v78;
        if ((v81 & 0x80000000) != 0)
          goto LABEL_307;
LABEL_177:
        v84 = *(_QWORD *)(v7 + 8 * (v353 + v82 * v356));
        v85 = *(_QWORD *)(v7 + 8 * (v351 + v83 * v356));
        if (v84 == v85)
        {
          LOBYTE(v114) = 0;
        }
        else
        {
          v86 = *(_WORD *)v84;
          v87 = *(_WORD *)(v84 + 2);
          v88 = *(unsigned __int16 *)(v84 + 12);
          v89 = *(_WORD *)v85;
          v90 = *(_WORD *)(v85 + 2);
          v92 = *(_WORD *)v84 - *(_WORD *)v85;
          LOBYTE(v91) = v92;
          v93 = (__int16)(v87 - v90);
          v94 = *(unsigned __int16 *)(v85 + 12);
          LOWORD(v95) = v88 - v94;
          if (v92 >= 0)
          {
            v96 = HIBYTE(v92);
          }
          else
          {
            v91 = -(unsigned __int16)(v86 - v89);
            v96 = (unsigned __int16)-v92 >> 8;
          }
          if (v93 < 0)
            v97 = -(unsigned __int16)(v87 - v90);
          else
            LOBYTE(v97) = v87 - v90;
          if (v93 >= 0)
            v98 = (unsigned __int16)(v87 - v90) >> 8;
          else
            v98 = (unsigned __int16)(v90 - v87) >> 8;
          v99 = -(unsigned __int16)v95 >> 8;
          if ((__int16)(v88 - v94) >= 0)
          {
            LOBYTE(v100) = (unsigned __int16)(v88 - v94) >> 8;
          }
          else
          {
            v95 = -(unsigned __int16)(v88 - v94);
            LOBYTE(v100) = v99;
          }
          if ((v354 & 2) != 0)
          {
            if (v96)
              v115 = 1;
            else
              v115 = v91 > 3u;
            if (!v115 && v98 == 0)
            {
              if ((_BYTE)v100)
                v144 = 0;
              else
                v144 = v350 >= v97;
              v114 = !v144;
              if ((_BYTE)v95)
                v114 = 1;
              LOBYTE(v77) = v319;
              if (!v319)
              {
                if (v114)
                  v145 = 0;
                else
                  v145 = v21 == 2;
                v58 = v329;
                v59 = v325;
                v63 = v323;
                v72 = v321;
                v79 = v317;
                if (v145)
                  LOBYTE(v114) = (*(_BYTE *)(v84 + 8) ^ *(_BYTE *)(v85 + 8)) & 1;
                goto LABEL_306;
              }
              v58 = v329;
              v59 = v325;
              v63 = v323;
              v72 = v321;
            }
            else
            {
              LOBYTE(v114) = 1;
              v58 = v329;
              v59 = v325;
              v63 = v323;
              LOBYTE(v77) = v319;
              v72 = v321;
            }
            v79 = v317;
          }
          else
          {
            v101 = *(_WORD *)(v84 + 4);
            v102 = *(_WORD *)(v84 + 6);
            v103 = *(_WORD *)(v85 + 4);
            v104 = *(_WORD *)(v85 + 6);
            v105 = -(unsigned __int16)(v102 - v104) >> 8;
            if ((__int16)(v102 - v104) < 0)
            {
              v106 = -(unsigned __int16)(v102 - v104);
            }
            else
            {
              LOBYTE(v105) = (unsigned __int16)(v102 - v104) >> 8;
              LOBYTE(v106) = v102 - v104;
            }
            v107 = (unsigned __int16)(v101 - v103) >> 8;
            if ((__int16)(v101 - v103) >= 0)
            {
              LOBYTE(v108) = v101 - v103;
            }
            else
            {
              v107 = (unsigned __int16)(v103 - v101) >> 8;
              v108 = -(unsigned __int16)(v101 - v103);
            }
            v309 = *(unsigned __int8 *)(v84 + 8);
            v311 = *(unsigned __int8 *)(v84 + 9);
            v109 = (v309 >> 4) & 2 | (v311 >> 5);
            if (v109)
              v110 = 0;
            else
              v110 = -1;
            if (v109 == 1)
              v111 = -1;
            else
              v111 = v110;
            if (v109 == 2)
            {
              v110 = -1;
              v112 = -1;
            }
            else
            {
              v112 = v111;
            }
            v331 = *(_WORD *)(v84 + 12);
            v335 = *(_WORD *)(v85 + 12);
            if (v331 == v335)
            {
              v21 = v348;
              v113 = *(_WORD *)(v84 + 12);
              v7 = v347;
            }
            else
            {
              v117 = v88 - (bswap32(v94) >> 16);
              LOWORD(v91) = v86 - v103;
              v118 = (__int16)(v86 - v103);
              v119 = (__int16)(v87 - v104);
              v120 = v101 - v89;
              v121 = (__int16)(v101 - v89);
              v122 = (__int16)(v102 - v90);
              v123 = (__int16)v117;
              v124 = -(unsigned __int16)v91 >> 8;
              if (v118 >= 0)
              {
                v96 = BYTE1(v91);
              }
              else
              {
                v91 = -(unsigned __int16)v91;
                v96 = v124;
              }
              if (v119 < 0)
                v97 = -(unsigned __int16)(v87 - v104);
              else
                LOBYTE(v97) = v87 - v104;
              if (v119 >= 0)
                v98 = (unsigned __int16)(v87 - v104) >> 8;
              else
                v98 = (unsigned __int16)(v104 - v87) >> 8;
              if (v121 < 0)
                v108 = -v120;
              else
                LOBYTE(v108) = v120;
              if (v121 >= 0)
                v107 = HIBYTE(v120);
              else
                v107 = (unsigned __int16)-v120 >> 8;
              if (v122 < 0)
                v106 = -(unsigned __int16)(v102 - v90);
              else
                LOBYTE(v106) = v102 - v90;
              if (v122 >= 0)
                LOBYTE(v105) = (unsigned __int16)(v102 - v90) >> 8;
              else
                LOBYTE(v105) = (unsigned __int16)(v90 - v102) >> 8;
              v125 = BYTE1(v117);
              if ((v117 & 0x8000u) != 0)
                v95 = -(unsigned __int16)v117;
              else
                LOBYTE(v95) = v117;
              v126 = -(unsigned __int16)v117;
              v7 = v347;
              v100 = v126 >> 8;
              if (v123 >= 0)
                LOBYTE(v100) = v125;
              v21 = v348;
              v113 = *(_WORD *)(v84 + 12);
            }
            v127 = v88 >> 8;
            v128 = v94 >> 8;
            v129 = v110 & 3;
            v130 = v110 & v350;
            v131 = v98 & v111;
            v132 = v97 & v111;
            v133 = v107 & v110;
            v134 = v108 & v110;
            v135 = v105 & v110;
            v136 = v106 & v110;
            v137 = v100 & v112;
            v138 = v95 & v112;
            v139 = (v91 & v111);
            v141 = (v96 & v111) != 0 || (v111 & 3u) < v139;
            if (v131)
              v141 = 1;
            if ((v111 & v350) < v132)
              v141 = 1;
            if (v133)
              v141 = 1;
            if (v129 < v134)
              v141 = 1;
            if (v135)
              v141 = 1;
            if (v130 < v136)
              v141 = 1;
            v142 = v137 != 0;
            v143 = *(_WORD *)(v85 + 12);
            if ((v113 - v128) | (v127 - v335))
            {
              v114 = v141 || v142 || v138 != 0;
              v17 = v349;
              v77 = v319;
            }
            else
            {
              v146 = sub_2160E9B20((__int16 *)v84, (__int16 *)v85, v284, v292, v319, v13, (int32x2_t)a6);
              v143 = v335;
              v77 = v319;
              v113 = v331;
              v114 = v146;
              v17 = v349;
            }
            v18 = v303;
            v58 = v329;
            v59 = v325;
            v63 = v323;
            v72 = v321;
            v79 = v317;
            if (!v77 && !v114 && v21 == 2)
            {
              v148 = *(_BYTE *)(v85 + 8) & 1;
              v149 = *(_BYTE *)(v85 + 9) & 1;
              v150 = v309 & 1;
              v151 = v311 & 1;
              v152 = v113 == v143 && v150 == v148 && v151 == v149 && v127 == v128
                  || v150 == v149 && v151 == v148 && v113 == v128 && v127 == v143;
              LOBYTE(v114) = !v152;
            }
          }
        }
LABEL_306:
        *((_BYTE *)v59 + v78) = v114 | v77;
        goto LABEL_307;
      }
      v55 = v345 + 1;
      if (v345 < v337)
        continue;
      break;
    }
    v157 = v282 != 2 || v280 == v287;
    v298 = v157;
    v289 = v291 - v6;
    *(_BYTE *)v8 |= ((_BYTE)v63 << 6) ^ 0x40;
    v160 = v279 == 1 && v21 == 2 || v299 == 0;
    v283 = v160;
    if (v278 || v292)
      v161 = 3;
    else
      v161 = 4;
    v265 = v161;
    v162 = 0;
    v163 = 4;
    v164 = v308;
    v165 = v333;
LABEL_328:
    v339 = v162;
    if (v162)
    {
      v163 = 1;
      if (*(_BYTE *)(a1[17] + v17))
      {
        v13 = (int32x2_t)33686018;
        v166 = v290;
        *(_OWORD *)v290 = xmmword_2160F2BD0;
      }
      else
      {
        v166 = v290;
        *(_QWORD *)v290 = 0x202020202020202;
        *((_QWORD *)v290 + 1) = 0x202020202020202;
      }
      v328 = v286 - v263 + 1;
      v165 = v289;
      v295 = v356;
      v164 = v166;
    }
    v167 = *(_QWORD *)(v11 + 8 * v328);
    if (v355)
    {
      if ((v355 & 0xFFF) == 0xFFF)
        v163 = 1;
      v168 = -1;
      v169 = (v355 & 0xFFF) == 4095;
    }
    else if ((v258 & 0xFFFE) == 0x100)
    {
      v168 = 0;
      v169 = 0;
      v13 = (int32x2_t)0x2020202002020202;
      *(_OWORD *)v164 = xmmword_2160F2B80;
      v163 = 1;
    }
    else
    {
      v169 = 0;
      v168 = -1;
    }
    if (!v298)
    {
      v327 = 0;
LABEL_357:
      v179 = 0;
      v180 = 0;
      *(_BYTE *)v164 = 32;
LABEL_358:
      v177 = v355 << 16;
      goto LABEL_510;
    }
    if (v283)
      goto LABEL_357;
    if (v10 <= v167 && v167 <= v12)
    {
      v179 = 0;
      *v164 = 16843009 * v265;
      v180 = 1;
      goto LABEL_358;
    }
    v171 = bswap32(*(_DWORD *)(v277 + 4 * (int)v165));
    if ((v171 & 0x33000000) != 0)
      v172 = 855638220;
    else
      v172 = 0;
    v173 = v168;
    if ((v171 & 0x330000) != 0)
      v174 = 3342387;
    else
      v174 = 0;
    v175 = v174 | v172;
    v168 = v173;
    v176 = v175 | v171;
    if (*(_BYTE *)(a1[17] + (int)v165))
      v171 = v176;
    v179 = 0;
    v177 = (v355 << 16) | (v171 << 28);
    v178 = v278;
    while (1)
    {
      if (v179 >= v163)
      {
        *(_BYTE *)v308 |= ((_BYTE)v169 << 6) ^ 0x40;
        v162 = v339 + 1;
        if (v339 >= v327)
          goto LABEL_102;
        goto LABEL_328;
      }
      if ((v179 & v342) != 0)
      {
        v180 = 0;
        *(_BYTE *)v164 = 32;
        goto LABEL_510;
      }
      v294 = v179;
      v180 = v168 | (v177 >> 28) | (v179 == 0);
      if (v180)
        break;
      *(_BYTE *)v164 = 32;
LABEL_509:
      v179 = v294;
LABEL_510:
      v178 = 0;
      v169 |= v180;
      *(_BYTE *)v164++ |= (32 * v180) ^ 0x20;
      v177 *= 16;
      ++v179;
    }
    v180 = 1;
    if (v177 >> 28 == 15)
      goto LABEL_509;
    v269 = v168;
    v181 = 0;
    v182 = v295;
    if (v179)
      v182 = v356;
    v352 = v281 + v356 * (v340 + v179) - v182;
    v183 = v177;
    v334 = v165;
    v324 = v163;
    v326 = v177;
    v322 = v164;
    v320 = v169;
    v332 = v178;
    while ((v183 & 0x80000000) != 0)
    {
LABEL_506:
      v183 *= 2;
      if (++v181 == 4)
      {
        v180 = 1;
        a1 = v275;
        v6 = v274;
        v8 = v276;
        v10 = v272;
        v9 = v273;
        v12 = v270;
        v11 = v271;
        v168 = v269;
        goto LABEL_509;
      }
    }
    v184 = *(__int16 **)(v7 + 8 * (v281 + v356 * (v340 + v294) + v181));
    v185 = *(__int16 **)(v7 + 8 * (v352 + v181));
    if (v184 == v185)
    {
      LOBYTE(v218) = 0;
    }
    else
    {
      v186 = *v185;
      v346 = *v184;
      v188 = *v184 - *v185;
      LOBYTE(v187) = v188;
      v189 = v184[1];
      v190 = v185[1];
      v191 = (__int16)(v189 - v190);
      v192 = v184[2];
      v193 = v185[2];
      v194 = (__int16)(v192 - v193);
      v195 = v185[3];
      v196 = v184[3] - v195;
      v197 = (unsigned __int16)v184[4];
      v198 = v185[4];
      v199 = (__int16)(v197 - v198);
      if (v188 >= 0)
      {
        v200 = HIBYTE(v188);
      }
      else
      {
        v187 = -(unsigned __int16)(v346 - v186);
        v200 = (unsigned __int16)-v188 >> 8;
      }
      v201 = (unsigned __int16)v184[6];
      v202 = (unsigned __int16)v185[6];
      if (v191 < 0)
        v203 = -(unsigned __int16)(v189 - v190);
      else
        LOBYTE(v203) = v189 - v190;
      v344 = v203;
      v204 = -(unsigned __int16)(v189 - v190) >> 8;
      if (v191 >= 0)
        LOBYTE(v204) = (unsigned __int16)(v189 - v190) >> 8;
      v205 = v194 < 0;
      if (v194 < 0)
        v206 = -(unsigned __int16)(v192 - v193);
      else
        LOBYTE(v206) = v192 - v193;
      if (v205)
        LOBYTE(v207) = (unsigned __int16)(v193 - v192) >> 8;
      else
        LOBYTE(v207) = (unsigned __int16)(v192 - v193) >> 8;
      v208 = v201 - v202;
      if (v196 < 0)
        v209 = -(unsigned __int16)(v184[3] - v195);
      else
        LOBYTE(v209) = *((_BYTE *)v184 + 6) - v195;
      if (v196 >= 0)
        v210 = (unsigned __int16)(v184[3] - v195) >> 8;
      else
        v210 = (unsigned __int16)(v195 - v184[3]) >> 8;
      if (v199 < 0)
        v211 = -(unsigned __int16)(v197 - v198);
      else
        LOBYTE(v211) = v197 - v198;
      v212 = -(unsigned __int16)(v197 - v198) >> 8;
      if (v199 >= 0)
        LOBYTE(v212) = (unsigned __int16)(v197 - v198) >> 8;
      if (v208 < 0)
        v213 = -(unsigned __int16)(v201 - v202);
      else
        LOBYTE(v213) = v201 - v202;
      if (v208 >= 0)
        v214 = (unsigned __int16)(v201 - v202) >> 8;
      else
        v214 = (unsigned __int16)(v202 - v201) >> 8;
      if ((v354 & 2) != 0)
      {
        LOBYTE(v218) = 1;
        v164 = v322;
        LOBYTE(v178) = v332;
        if (v200)
        {
          v7 = v347;
          v17 = v349;
          v165 = v334;
          v163 = v324;
          v169 = v320;
        }
        else
        {
          v7 = v347;
          v17 = v349;
          v165 = v334;
          v163 = v324;
          v169 = v320;
          if (v187 <= 3u)
          {
            v32 = v204 == 0;
            v177 = v326;
            if (v32)
            {
              v219 = !v214 && v350 >= v344;
              v220 = !v219;
              v218 = (_BYTE)v213 || v220;
              if (v218 != 1 && v348 == 2 && !v332)
                LOBYTE(v218) = (v197 ^ v198) & 1;
            }
            goto LABEL_505;
          }
        }
        v177 = v326;
      }
      else
      {
        v301 = v185[1];
        v330 = (unsigned __int16)v185[4];
        v306 = v185[4];
        v307 = v184[4];
        v304 = v197 >> 8;
        v215 = (v307 >> 4) & 2 | ((unsigned __int16)v184[4] >> 13);
        if (v215)
          v216 = 0;
        else
          v216 = -1;
        if (v215 == 1)
          v217 = -1;
        else
          v217 = v216;
        if (v215 == 2)
        {
          v217 = 0;
          v310 = 0;
          v216 = 255;
          v312 = -1;
        }
        else
        {
          v310 = v216;
          v312 = v217;
        }
        v221 = v184[2];
        v222 = v184[3];
        v223 = v185[6];
        v336 = v202 >> 8;
        v338 = v201 >> 8;
        v316 = v216 & 3;
        v341 = v184[6];
        v318 = v216 & v350;
        if (v341 == v223)
        {
          v7 = v347;
          v224 = v348;
          v17 = v349;
          v165 = v334;
          v163 = v324;
          v164 = v322;
          v169 = v320;
          v225 = v344;
          v226 = v310;
        }
        else
        {
          v211 = v197 - (bswap32(v330) >> 16);
          LOBYTE(v187) = v346 - v193;
          v227 = (__int16)(v189 - v195);
          LOWORD(v206) = v221 - v186;
          v228 = (__int16)(v222 - v301);
          v229 = v201 - (bswap32(v202) >> 16);
          if ((__int16)(v346 - v193) >= 0)
          {
            v200 = (unsigned __int16)(v346 - v193) >> 8;
          }
          else
          {
            v187 = -(unsigned __int16)(v346 - v193);
            v200 = (unsigned __int16)(v193 - v346) >> 8;
          }
          if (v227 < 0)
            v230 = -(unsigned __int16)(v189 - v195);
          else
            LOBYTE(v230) = v189 - v195;
          if (v227 >= 0)
            LOBYTE(v204) = (unsigned __int16)(v189 - v195) >> 8;
          else
            LOBYTE(v204) = (unsigned __int16)(v195 - v189) >> 8;
          v207 = -(unsigned __int16)v206 >> 8;
          if ((__int16)(v221 - v186) >= 0)
            LOBYTE(v207) = (unsigned __int16)(v221 - v186) >> 8;
          else
            v206 = -(unsigned __int16)(v221 - v186);
          if (v228 < 0)
            v209 = -(unsigned __int16)(v222 - v301);
          else
            LOBYTE(v209) = v222 - v301;
          if (v228 >= 0)
            v210 = (unsigned __int16)(v222 - v301) >> 8;
          else
            v210 = (unsigned __int16)(v301 - v222) >> 8;
          v231 = -(unsigned __int16)v211 >> 8;
          if ((v211 & 0x8000u) == 0)
          {
            LOBYTE(v212) = BYTE1(v211);
          }
          else
          {
            v211 = -(unsigned __int16)v211;
            LOBYTE(v212) = v231;
          }
          v232 = BYTE1(v229);
          v233 = (v229 & 0x8000u) != 0;
          if ((v229 & 0x8000u) != 0)
            v213 = -(unsigned __int16)v229;
          else
            LOBYTE(v213) = v229;
          v234 = -(unsigned __int16)v229 >> 8;
          if (v233)
            v214 = v234;
          else
            v214 = v232;
          v225 = v230;
          v7 = v347;
          v224 = v348;
          v17 = v349;
          v165 = v334;
          v163 = v324;
          v164 = v322;
          v169 = v320;
          v226 = v310;
        }
        v235 = v200 & v217;
        v236 = v204 & v217;
        v237 = v225 & v217;
        v238 = v207 & v216;
        v239 = v206 & v216;
        v240 = v210 & v216;
        v241 = v209 & v216;
        v242 = v211 & v226;
        v243 = v214 & v312;
        v244 = (v187 & v217);
        if (v235)
          v245 = 0;
        else
          v245 = (v217 & 3u) >= v244;
        v246 = !v245;
        if (v236)
          v246 = 1;
        if ((v217 & v350) < v237)
          v246 = 1;
        if (v238)
          v246 = 1;
        if (v316 < v239)
          v246 = 1;
        if (v240)
          v246 = 1;
        if (v318 < v241)
          v246 = 1;
        if ((v341 - v336) | (v338 - v223))
          v218 = v246 & 1 | ((v212 & v226) != 0 || v242 != 0 || v243 != 0 || (v213 & v312) != 0);
        else
          v218 = sub_2160E9B20(v184, v185, v284, v292, v332, v13, (int32x2_t)a6);
        v177 = v326;
        if (v218)
        {
          LOBYTE(v178) = v332;
        }
        else
        {
          LOBYTE(v178) = v332;
          if (v224 == 2 && !v332)
          {
            v247 = v306 & 1;
            v248 = (v330 >> 8) & 1;
            v249 = v307 & 1;
            v250 = v304 & 1;
            v251 = v341 == v223 && v249 == v247 && v250 == v248 && v338 == v336
                || v250 == v247 && v249 == v248 && v341 == v336 && v338 == v223;
            LOBYTE(v218) = !v251;
          }
        }
      }
    }
LABEL_505:
    *((_BYTE *)v164 + v181) = v218 | v178;
    goto LABEL_506;
  }
  return 0;
}

uint64_t sub_2160E9674(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v26;
  unsigned int v27;

  v26 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v26)
  {
    v6 = 0;
    v7 = 2 * a2;
    v27 = a3 / v26;
    v8 = 16 * (a3 / v26);
    v9 = a4 / v26;
    while (v27 >= v9)
    {
LABEL_23:
      if (++v6 == v26)
        return 0;
    }
    v10 = (16 * v6);
    v11 = v27;
    while (1)
    {
      v12 = 0;
      v13 = *(_DWORD *)(a1 + 12);
      v14 = v6 + v13 * v11;
      v15 = *(_QWORD *)(a1 + 144);
      v16 = *(unsigned __int8 *)(v15 + v14);
      if (v11 && v16 == 1)
        v12 = *(unsigned __int8 *)(v15 + v14 - v13) == 2;
      if (!v6)
        break;
      if (v16 == 1)
      {
        v17 = 0;
        v18 = *(unsigned __int8 *)(v15 + v14 - 1) == 2;
      }
      else
      {
        if (v16 != 2)
          break;
        v18 = 0;
        v17 = *(unsigned __int8 *)(v15 + v14 - 1) == 1;
      }
LABEL_14:
      if (v16 == 2)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 32) + v10 + v8 * *(_DWORD *)(*(_QWORD *)(a1 + 80) + 136);
        v20 = (v11 << 31 >> 31) & a2;
        v21 = v7;
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 80);
        v19 = *(_QWORD *)(v22 + 32) + v10;
        v20 = 16 * v11 * *(_DWORD *)(v22 + 136);
        v21 = a2;
      }
      v23 = (unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 48 * v14);
      if ((v23[16] & 0xC0) + *v23 <= 0x7F)
      {
        if (v17)
          v24 = 2;
        else
          v24 = 0;
        sub_2160E9F04((unsigned __int8 *)a1, v19 + v20, v19 + v20, v6, v11, v21, v23, v12, v24 | v18);
      }
      if (++v11 == v9)
        goto LABEL_23;
    }
    v18 = 0;
    v17 = 0;
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_2160E9830(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v26;
  unsigned int v27;

  v26 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v26)
  {
    v6 = 0;
    v7 = 2 * a2;
    v27 = a3 / v26;
    v8 = 8 * (a3 / v26);
    v9 = a4 / v26;
    while (v27 >= v9)
    {
LABEL_23:
      if (++v6 == v26)
        return 0;
    }
    v10 = (16 * v6);
    v11 = v27;
    while (1)
    {
      v12 = 0;
      v13 = *(_DWORD *)(a1 + 12);
      v14 = v6 + v13 * v11;
      v15 = *(_QWORD *)(a1 + 144);
      v16 = *(unsigned __int8 *)(v15 + v14);
      if (v11 && v16 == 1)
        v12 = *(unsigned __int8 *)(v15 + v14 - v13) == 2;
      if (!v6)
        break;
      if (v16 == 1)
      {
        v17 = 0;
        v18 = *(unsigned __int8 *)(v15 + v14 - 1) == 2;
      }
      else
      {
        if (v16 != 2)
          break;
        v18 = 0;
        v17 = *(unsigned __int8 *)(v15 + v14 - 1) == 1;
      }
LABEL_14:
      if (v16 == 2)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + v10 + v8 * *(_DWORD *)(*(_QWORD *)(a1 + 80) + 152);
        v20 = (v11 << 31 >> 31) & a2;
        v21 = v7;
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 80);
        v19 = *(_QWORD *)(v22 + 40) + v10;
        v20 = 8 * v11 * *(_DWORD *)(v22 + 152);
        v21 = a2;
      }
      v23 = (unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 48 * v14);
      if ((v23[16] & 0xC0) + *v23 <= 0x7F)
      {
        if (v17)
          v24 = 2;
        else
          v24 = 0;
        sub_2160EAD54(a1, v19 + v20, v19 + v20, v6, v11, v21, v23, (unsigned __int8 *)v12, v24 | v18);
      }
      if (++v11 == v9)
        goto LABEL_23;
    }
    v18 = 0;
    v17 = 0;
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_2160E99EC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  v7 = sub_2160E7B20(a1, a2, a3, a5, a6);
  v8 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v8)
  {
    v9 = *(_BYTE **)(a1 + 168);
    if (*v9 != 30)
      goto LABEL_7;
    v10 = 1;
    do
    {
      v11 = v10;
      if (v8 == v10)
        break;
      v12 = v9[v10++];
    }
    while (v12 == 30);
    if (v11 < v8)
LABEL_7:
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v8 = 0;
  }
  bzero(*(void **)(a1 + 32), 4 * v8);
  return v7;
}

void sub_2160E9A74(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_2160EC854(*(pthread_mutex_t **)(a1 + 160));
    *(_QWORD *)(a1 + 160) = 0;
    v2 = *(_QWORD *)(a1 + 168);
    if (v2)
      MEMORY[0x2199F4C28](v2, 0x1000C8077774924);
    *(_QWORD *)(a1 + 168) = 0;
    j__free(*(void **)a1);
    j__free(*(void **)(a1 + 32));
    sub_2160CB698(*(_QWORD *)(a1 + 152));
    j__free(*(void **)(a1 + 112));
    j__free(*(void **)(a1 + 120));
    j__free(*(void **)(a1 + 128));
    j__free(*(void **)(a1 + 136));
    j__free(*(void **)(a1 + 144));
    j__free(*(void **)(a1 + 72));
    j__free(*(void **)(a1 + 48));
    j__free(*(void **)(a1 + 232));
    sub_2160EC854(*(pthread_mutex_t **)(a1 + 64));
  }
}

uint64_t sub_2160E9B20(__int16 *a1, __int16 *a2, signed int a3, int a4, int a5, int32x2_t a6, int32x2_t a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  unsigned __int8 v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;

  v7 = *((unsigned __int8 *)a1 + 12);
  v8 = *((unsigned __int8 *)a2 + 12);
  v9 = *((unsigned __int8 *)a2 + 13);
  if (a4 && !a5)
  {
    v7 = v7 & 0xFFFFFEFF | ((a1[4] & 1) << 8);
    v8 = v8 & 0xFFFFFEFF | ((a2[4] & 1) << 8);
    v9 = v9 & 0xFFFFFEFF | ((*((_BYTE *)a2 + 9) & 1) << 8);
  }
  if (v8 == v9)
  {
    a6.i16[0] = a1[2];
    a6.i16[2] = *a1;
    a7.i16[0] = a2[1];
    a7.i16[2] = a2[3];
    v10 = vshr_n_s32(vshl_n_s32(a6, 0x10uLL), 0x10uLL);
    v11 = vshr_n_s32(vshl_n_s32(a7, 0x10uLL), 0x10uLL);
    v12 = vdup_n_s32(a3);
    v13 = (int32x2_t)vorr_s8((int8x8_t)vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vabd_s32(v10, vdup_n_s32(a2[2])), (int8x8_t)vabd_s32(vrev64_s32(v10), vdup_n_s32(*a2))), (uint32x2_t)0x300000003), vorr_s8((int8x8_t)vcge_s32(vabd_s32(vdup_n_s32(a1[1]), v11), v12), (int8x8_t)vcge_s32(vabd_s32(vdup_n_s32(a1[3]), vrev64_s32(v11)), v12)));
    v14 = vand_s8((int8x8_t)v13, (int8x8_t)vdup_lane_s32(v13, 1)).u8[0];
  }
  else
  {
    v15 = *a1;
    if (v8 == v7)
    {
      v17 = v15 - *a2;
      v16 = v17 < 0;
      v18 = a1[1] - a2[1];
      v19 = a1[2] - a2[2];
      v20 = a2[3];
    }
    else
    {
      v17 = v15 - a2[2];
      v16 = v17 < 0;
      v18 = a1[1] - a2[3];
      v19 = a1[2] - *a2;
      v20 = a2[1];
    }
    v21 = a1[3] - v20;
    if (v16)
      v17 = -v17;
    if (v18 < 0)
      v18 = -v18;
    if (v19 < 0)
      v19 = -v19;
    if (v21 < 0)
      v21 = v20 - a1[3];
    v22 = v19 | v17;
    v14 = v18 >= a3 || v22 > 3 || v21 >= a3;
  }
  return v14 & 1;
}

_BYTE *sub_2160E9C80(_BYTE *result, int a2, int a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;

  v7 = result[-a2];
  v8 = *result;
  v9 = v7 - v8;
  if (v9 * v9 < (a5 * a5))
  {
    v10 = result[-2 * a2];
    if ((v10 - v7) * (v10 - v7) < (a6 * a6))
    {
      v11 = result[a2];
      if ((v11 - v8) * (v11 - v8) < a6 * a6)
      {
        v12 = a2;
        v13 = -(uint64_t)a2;
        v14 = -2 * a2;
        v15 = -3 * a2;
        v16 = result[-3 * a2];
        if (a3 == 4)
        {
          v17 = result[2 * a2];
          if (v9 >= 0)
            v18 = v7 - v8;
          else
            v18 = v8 - v7;
          v19 = v16 - v7;
          if ((int)(v16 - v7) < 0)
            v19 = v7 - v16;
          if ((int)(v17 - v8) >= 0)
            v20 = v17 - v8;
          else
            v20 = v8 - v17;
          if (v19 >= a6 || v18 >= (a5 >> 2) + 2)
          {
            v22 = (v7 + 2 * v10 + v11 + 2) >> 2;
            LOBYTE(v23) = v10;
          }
          else
          {
            v21 = v8 + v7 + v10;
            v22 = (v11 + 2 * v21 + v16 + 4) >> 3;
            v23 = (v21 + v16 + 2) >> 2;
            v16 = (v21 + 3 * v16 + 2 * result[-4 * v12] + 4) >> 3;
          }
          if (v20 >= a6 || v18 >= (a5 >> 2) + 2)
          {
            v41 = (v8 + v10 + 2 * v11 + 2) >> 2;
          }
          else
          {
            v40 = v8 + v7 + v11;
            v41 = (v10 + 2 * v40 + v17 + 4) >> 3;
            v11 = (v40 + v17 + 2) >> 2;
            v17 = (v40 + 3 * v17 + 2 * result[3 * v12] + 4) >> 3;
          }
          result[v13] = v22;
          result[v14] = v23;
          result[v15] = v16;
          *result = v41;
          result[v12] = v11;
          result[2 * v12] = v17;
        }
        else
        {
          v24 = result[2 * a2];
          if ((int)(v16 - v7) >= 0)
            v25 = v16 - v7;
          else
            v25 = v7 - v16;
          if (v24 - v8 >= 0)
            v26 = v24 - v8;
          else
            v26 = v8 - v24;
          if (v25 >= a6)
            v27 = a7;
          else
            v27 = a7 + 1;
          if (v26 < a6)
            ++v27;
          v28 = v10 - v11 + 4 * (v8 - v7) + 4;
          v29 = v28 >> 3;
          v30 = v28 >> 3;
          if (v30 < (__int16)-(__int16)v27)
            v31 = -v27;
          else
            LOWORD(v31) = v29;
          if (v30 > (__int16)v27)
            LOWORD(v31) = v27;
          v32 = (__int16)(v31 + v7) & ~((__int16)(v31 + v7) >> 31);
          if (v32 >= 0xFF)
            LOBYTE(v32) = -1;
          v33 = (__int16)(v8 - v31) & ~((__int16)(v8 - v31) >> 31);
          if (v33 >= 0xFF)
            LOBYTE(v33) = -1;
          v34 = v8 + v7 + 1;
          v35 = v16 - 2 * v10 + (v34 >> 1);
          if (-a7 > v35 >> 1)
            v36 = -a7;
          else
            v36 = v35 >> 1;
          if (a7 < (__int16)v36)
            LOBYTE(v36) = a7;
          v37 = v10 + v36;
          if (v25 < a6)
            LOBYTE(v10) = v37;
          if (v26 < a6)
          {
            v38 = v24 - 2 * v11 + (v34 >> 1);
            if (-a7 > v38 >> 1)
              v39 = -a7;
            else
              v39 = v38 >> 1;
            if (a7 < (__int16)v39)
              LOBYTE(v39) = a7;
            LOBYTE(v11) = v11 + v39;
          }
          result[v13] = v32;
          result[v14] = v10;
          *result = v33;
          result[v12] = v11;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_2160E9F04(unsigned __int8 *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned int a8, unsigned int a9)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int i;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  char v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t j;
  int v96;
  int v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  int v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned __int8 *v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unsigned __int8 *v152;
  int v154;
  int v155;
  unsigned __int8 *v156;
  int v157;
  int v158;
  int v159;
  int v160;
  unsigned __int8 *v163;
  uint64_t v165;
  int v166;
  int v168;
  int v169;
  _QWORD *v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  unsigned __int8 *v175;
  int v176;
  _DWORD v177[4];
  _BYTE v178[128];
  _QWORD v179[16];

  v9 = a7;
  v152 = result;
  v10 = a9;
  v179[14] = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v11 = 0;
    for (i = 17; i > 1; --i)
    {
      *(_OWORD *)(a3 + v11) = *(_OWORD *)(a2 + v11);
      v11 += a6;
    }
  }
  v13 = 0;
  v14 = *((_DWORD *)result + 3);
  v15 = v14 * a5;
  v151 = v14 * a5 + a4;
  v16 = *((_QWORD *)result + 6) + 12 * *(unsigned __int16 *)(*((_QWORD *)result + 9) + 2 * v151);
  v17 = *(char *)(v16 + 10);
  v18 = *(char *)(v16 + 11);
  v19 = *((_QWORD *)result + 14);
  v20 = *(unsigned __int8 *)(v19 + (v14 * a5 + a4));
  v160 = v17;
  v21 = v20 + v17;
  v159 = v18;
  v147 = v20;
  v22 = v20 + v18;
  v23 = v21 & ~(v21 >> 31);
  if (v23 >= 0x33)
    v24 = 51;
  else
    v24 = v23;
  v25 = v22 & ~(v22 >> 31);
  v176 = byte_2160F9900[v24];
  if (v25 >= 0x33)
    v25 = 51;
  v26 = byte_2160F9940[v25];
  v163 = a7 + 16;
  v27 = (char *)&byte_2160F9980[4 * v24];
  do
  {
    v28 = a7[v13];
    if (v28 >= 3)
      v28 = 3;
    *(_DWORD *)&v178[4 * v13 + 112] = v27[v28];
    v29 = a7[v13 + 16];
    if (v29 >= 3)
      v29 = 3;
    v177[v13++] = v27[v29];
  }
  while (v13 != 16);
  v30 = *a7;
  v172 = a3;
  if (v30 <= 0x3F)
  {
    if (a4 && v30 < 0x20)
    {
      v31 = a4 - 1;
      result = byte_2160F9980;
      if (a9)
      {
        v32 = 0;
        v33 = v147 + 1 + *(unsigned __int8 *)(v19 + v31 + v14 * (a5 & 0xFFFFFFFE));
        v34 = v18 + (v33 >> 1);
        LODWORD(v35) = (v160 + (v33 >> 1)) & ~((int)(v160 + (v33 >> 1)) >> 31);
        if (v35 >= 0x33)
          v35 = 51;
        else
          v35 = v35;
        v36 = v34 & ~(v34 >> 31);
        v168 = byte_2160F9900[v35];
        if (v36 >= 0x33)
          v37 = 51;
        else
          v37 = v36;
        v157 = byte_2160F9940[v37];
        do
        {
          v38 = a7[v32];
          if (v38 >= 3)
            v38 = 3;
          *((_DWORD *)&v179[6] + v32++) = byte_2160F9980[4 * v35 + v38];
        }
        while (v32 != 16);
        v39 = v147 + 1 + *(unsigned __int8 *)(v19 + v31 + v14 * (a5 | 1u));
        v40 = v160 + (v39 >> 1);
        v41 = v159 + (v39 >> 1);
        v42 = v40 & ~(v40 >> 31);
        if (v42 >= 0x33)
          v43 = 51;
        else
          v43 = v42;
        v44 = v41 & ~(v41 >> 31);
        if (v44 >= 0x33)
          v44 = 51;
        v155 = byte_2160F9900[v43];
        v45 = byte_2160F9940[v44];
      }
      else
      {
        v46 = 0;
        v47 = v147 + *(unsigned __int8 *)(v19 + (v31 + v15)) + 1;
        v48 = v18 + (v47 >> 1);
        v49 = (v160 + (v47 >> 1)) & ~((int)(v160 + (v47 >> 1)) >> 31);
        if (v49 >= 0x33)
          v35 = 51;
        else
          v35 = v49;
        v168 = byte_2160F9900[v35];
        v50 = v48 & ~(v48 >> 31);
        if (v50 >= 0x33)
          v50 = 51;
        v157 = byte_2160F9940[v50];
        do
        {
          v51 = a7[v46];
          if (v51 >= 3)
            v51 = 3;
          *((_DWORD *)&v179[6] + v46++) = byte_2160F9980[4 * v35 + v51];
        }
        while (v46 != 16);
        v43 = v35;
        v155 = v168;
        v45 = v157;
      }
      v154 = v45;
      if (a9 == 2)
      {
        v146 = v43;
        v52 = 0;
        v165 = a6;
        v174 = 4 * a6;
        v53 = 1;
        v148 = (char *)&byte_2160F9980[4 * v35];
        do
        {
          v54 = v53;
          v55 = &a7[2 * v52];
          v56 = *v55;
          v57 = v55[1];
          if (v57 | v56)
          {
            if (v57 >= 3)
              v58 = 3;
            else
              v58 = v55[1];
            v59 = v148[v58];
            if (v56 >= 3)
              v60 = 3;
            else
              v60 = v56;
            v61 = v148[v60];
            v62 = (_BYTE *)(a3 + v52 * v174);
            sub_2160E9C80(v62, 1, v56, v10, v168, v157, v61);
            v63 = &v62[a6];
            sub_2160E9C80(v63, 1, v56, v64, v168, v157, v61);
            sub_2160E9C80(&v63[a6], 1, v57, v65, v168, v157, v59);
            result = sub_2160E9C80(&v63[a6 + a6], 1, v57, v66, v168, v157, v59);
            a3 = v172;
          }
          v53 = 0;
          v52 = 1;
        }
        while ((v54 & 1) != 0);
        v67 = 0;
        v68 = 8 * a6;
        v150 = (char *)&byte_2160F9980[4 * v146];
        v9 = a7;
        do
        {
          v69 = a7[v67 + 32];
          v70 = a7[v67 + 33];
          if (v70 | v69)
          {
            if (v70 >= 3)
              v71 = 3;
            else
              v71 = a7[v67 + 33];
            v169 = v150[v71];
            if (v69 >= 3)
              v72 = 3;
            else
              v72 = a7[v67 + 32];
            v158 = v150[v72];
            v73 = (_BYTE *)(a3 + v68);
            sub_2160E9C80(v73, 1, v69, v10, v155, v154, v158);
            v74 = &v73[v165];
            sub_2160E9C80(v74, 1, v69, v75, v155, v154, v158);
            sub_2160E9C80(&v74[v165], 1, v70, v76, v155, v154, v169);
            result = sub_2160E9C80(&v74[v165 + v165], 1, v70, v77, v155, v154, v169);
            a3 = v172;
          }
          v67 += 2;
          v68 += v174;
        }
        while (v67 != 4);
      }
      else
      {
        v78 = 0;
        v79 = 0;
        v174 = 4 * a6;
        v165 = a6;
        v149 = (char *)&byte_2160F9980[4 * v43];
        do
        {
          v80 = v9[v79];
          v81 = *((_DWORD *)&v179[6] + v79);
          v82 = v80;
          v83 = v81;
          if ((_DWORD)v10 == 1)
          {
            v82 = v9[v79 + 32];
            if (v82 >= 3)
              v84 = 3;
            else
              v84 = v9[v79 + 32];
            v83 = v149[v84];
          }
          if (v82 | v80)
          {
            v85 = (_BYTE *)(a3 + v78);
            sub_2160E9C80(v85, 1, v9[v79], v10, v168, v157, *((_DWORD *)&v179[6] + v79));
            v86 = &v85[a6];
            sub_2160E9C80(v86, 1, v82, v87, v155, v154, v83);
            v88 = &v86[a6];
            sub_2160E9C80(v88, 1, v80, v89, v168, v157, v81);
            result = sub_2160E9C80(&v88[a6], 1, v82, v90, v155, v154, v83);
            v10 = a9;
            a3 = v172;
          }
          ++v79;
          v78 += v174;
        }
        while (v79 != 4);
      }
    }
    else
    {
      v174 = 4 * a6;
      v165 = a6;
    }
    v170 = v179;
    v91 = v9 + 4;
    v92 = 4;
    while (1)
    {
      v93 = v9[v92];
      if (v93 == 4)
        break;
      if (v93 <= 0x1F)
        goto LABEL_81;
LABEL_85:
      v170 += 2;
      v91 += 4;
      v104 = v92 >= 0xC;
      v92 += 4;
      v9 = a7;
      if (v104)
        goto LABEL_87;
    }
    v9[v92 | 1] = 4;
    v9[v92 | 2] = 4;
    v9[v92 | 3] = 4;
LABEL_81:
    v94 = 0;
    for (j = 0; j != 4; ++j)
    {
      v96 = v91[j];
      if (v91[j])
      {
        v97 = *((_DWORD *)v170 + j);
        v98 = (_BYTE *)(a3 + v92 + v94);
        sub_2160E9C80(v98, 1, v91[j], v10, v176, v26, v97);
        v99 = &v98[v165];
        sub_2160E9C80(v99, 1, v96, v100, v176, v26, v97);
        v101 = &v99[v165];
        sub_2160E9C80(v101, 1, v96, v102, v176, v26, v97);
        result = sub_2160E9C80(&v101[v165], 1, v96, v103, v176, v26, v97);
        a3 = v172;
      }
      v94 += v174;
    }
    goto LABEL_85;
  }
LABEL_87:
  v105 = v163;
  v106 = *v163;
  if (v106 <= 0x3F)
  {
    v107 = a8;
    if (a5 && v106 <= 0x1F)
    {
      v108 = 0;
      v171 = 0;
      v156 = v9 + 36;
      v109 = a6 << (a8 != 0);
      do
      {
        v166 = v108;
        if (v107)
        {
          if ((v108 + a5) < 2)
            v110 = 0;
          else
            v110 = *(unsigned __int8 *)(*((_QWORD *)v152 + 14)
                                      + (a4 + *((_DWORD *)v152 + 3) * (a5 - 2 + v108)));
          if (v108)
            v105 = v156;
        }
        else
        {
          v111 = *((_QWORD *)v152 + 18);
          if (*(_BYTE *)(v111 + v151) != 2)
          {
            v114 = *((_QWORD *)v152 + 14);
            v112 = *((_DWORD *)v152 + 3);
            v115 = a4;
            v116 = a5 - 1;
LABEL_103:
            v110 = *(unsigned __int8 *)(v114 + v115 + v112 * v116);
            goto LABEL_105;
          }
          if (a5 >= 2)
          {
            v112 = *((_DWORD *)v152 + 3);
            v113 = *(unsigned __int8 *)(v111 + (v151 - 2 * v112));
            v114 = *((_QWORD *)v152 + 14);
            if (v113 == 2)
            {
              v115 = a4;
              v116 = a5 - 2;
            }
            else
            {
              v115 = a4;
              v116 = (a5 & 0xFFFFFFFE) - 1;
            }
            goto LABEL_103;
          }
          v110 = 0;
        }
LABEL_105:
        v117 = 0;
        v118 = v147 + 1 + v110;
        v119 = v159 + (v118 >> 1);
        LODWORD(v120) = (v160 + (v118 >> 1)) & ~((int)(v160 + (v118 >> 1)) >> 31);
        if (v120 >= 0x33)
          v120 = 51;
        else
          v120 = v120;
        v121 = v119 & ~(v119 >> 31);
        if (v121 >= 0x33)
          v121 = 51;
        v122 = byte_2160F9900[v120];
        v123 = byte_2160F9940[v121];
        do
        {
          v124 = v105[v117];
          if (v124 >= 3)
            v124 = 3;
          *(_DWORD *)&v178[4 * v117++ + 48] = byte_2160F9980[4 * v120 + v124];
        }
        while (v117 != 16);
        v125 = *v105;
        if (v125 == 4)
        {
          *(_WORD *)(v105 + 1) = 1028;
          v105[3] = 4;
LABEL_117:
          v126 = 0;
          v127 = v171;
          do
          {
            v128 = v105[v126];
            if (v105[v126])
            {
              v129 = *(_DWORD *)&v178[4 * v126 + 48];
              v130 = (_BYTE *)(a3 + v127);
              sub_2160E9C80(v130, v109, v105[v126], v10, v122, v123, v129);
              sub_2160E9C80(v130 + 1, v109, v128, v131, v122, v123, v129);
              sub_2160E9C80(v130 + 2, v109, v128, v132, v122, v123, v129);
              result = sub_2160E9C80(v130 + 3, v109, v128, v133, v122, v123, v129);
              a3 = v172;
            }
            ++v126;
            v127 += 4;
          }
          while (v126 != 4);
          goto LABEL_121;
        }
        if (v125 <= 0x1F)
          goto LABEL_117;
LABEL_121:
        v171 += a6;
        v108 = v166 + 1;
        v107 = a8;
        v105 = v163;
        v9 = a7;
      }
      while (v166 + 1 <= a8);
    }
    v134 = a3 + 4 * a6;
    v135 = v178;
    v175 = v9 + 20;
    v136 = 4;
    while (1)
    {
      v137 = v105[v136];
      v173 = v136;
      if (v137 == 4)
        break;
      if (v137 <= 0x1F)
        goto LABEL_128;
LABEL_132:
      v134 += 4 * a6;
      v135 += 16;
      v175 += 4;
      v136 = v173 + 4;
      v105 = v163;
      if (v173 >= 0xC)
        return result;
    }
    v105[v136 | 1] = 4;
    v105[v136 | 2] = 4;
    v105[v136 | 3] = 4;
LABEL_128:
    v138 = 0;
    v139 = v175;
    do
    {
      v141 = *v139++;
      v140 = v141;
      if (v141)
      {
        v142 = *(_DWORD *)&v135[v138];
        sub_2160E9C80((_BYTE *)(v134 + v138), a6, v140, v10, v176, v26, v142);
        sub_2160E9C80((_BYTE *)(v134 + v138 + 1), a6, v140, v143, v176, v26, v142);
        sub_2160E9C80((_BYTE *)(v134 + v138 + 2), a6, v140, v144, v176, v26, v142);
        result = sub_2160E9C80((_BYTE *)(v134 + v138 + 3), a6, v140, v145, v176, v26, v142);
      }
      v138 += 4;
    }
    while (v138 != 16);
    goto LABEL_132;
  }
  return result;
}

_BYTE *sub_2160EAA9C(_BYTE *result, int a2, int a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, int a11)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;

  if (a3)
  {
    v11 = result[-3 * a2];
    v12 = result[a2];
    v13 = result[-a2];
    v14 = result[3 * a2];
    v15 = *result;
    v16 = result[-2 * a2];
    if ((v16 - v15) * (v16 - v15) < (a5 * a5))
    {
      v17 = result[-4 * a2];
      v18 = a6 * a6;
      if ((v17 - v16) * (v17 - v16) < v18)
      {
        v19 = result[2 * a2];
        if ((v19 - v15) * (v19 - v15) < v18)
        {
          if (a3 == 4)
          {
            v20 = (v19 + 2 * v17 + v16 + 2) >> 2;
            v21 = (v17 + 2 * v19 + v15 + 2) >> 2;
          }
          else
          {
            v22 = (v17 - v19 + 4 * (v15 - v16) + 4) >> 3;
            if (v22 <= ~a7)
              v23 = ~a7;
            else
              v23 = v22;
            if (v22 > a7 + 1)
              v24 = a7 + 1;
            else
              v24 = v23;
            v20 = (v24 + v16) & ~((v24 + v16) >> 31);
            if (v20 >= 0xFF)
              LOBYTE(v20) = -1;
            v21 = (v15 - v24) & ~((v15 - v24) >> 31);
            if (v21 >= 0xFF)
              LOBYTE(v21) = -1;
          }
          result[-2 * a2] = v20;
          *result = v21;
        }
      }
    }
    if ((v13 - v12) * (v13 - v12) < (a9 * a9)
      && (v11 - v13) * (v11 - v13) < (a10 * a10)
      && (v14 - v12) * (v14 - v12) < (a10 * a10))
    {
      v25 = (v11 - v14 + 4 * (v12 - v13) + 4) >> 3;
      if (v25 <= ~a11)
        v26 = ~a11;
      else
        v26 = (v11 - v14 + 4 * (v12 - v13) + 4) >> 3;
      if (v25 > a11 + 1)
        v27 = a11 + 1;
      else
        v27 = v26;
      v28 = (v27 + v13) & ~((v27 + v13) >> 31);
      if (v28 >= 0xFF)
        LOBYTE(v28) = -1;
      v29 = (v12 - v27) & ~((v12 - v27) >> 31);
      if (v29 >= 0xFF)
        LOBYTE(v29) = -1;
      v30 = (v13 + 2 * v11 + v14 + 2) >> 2;
      v31 = (v11 + v12 + 2 * v14 + 2) >> 2;
      if (a3 == 4)
        v32 = v30;
      else
        v32 = v28;
      if (a3 != 4)
        LOBYTE(v31) = v29;
      result[-a2] = v32;
      result[a2] = v31;
    }
  }
  return result;
}

_BYTE *sub_2160EAC74(_BYTE *result, int a2, int a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a3)
  {
    v7 = *result;
    v8 = result[-a2];
    if ((v8 - v7) * (v8 - v7) < (a5 * a5))
    {
      v9 = result[-2 * a2];
      if ((v9 - v8) * (v9 - v8) < (a6 * a6))
      {
        v10 = result[a2];
        if ((v10 - v7) * (v10 - v7) < (a6 * a6))
        {
          v11 = (v9 - v10 + 4 * (v7 - v8) + 4) >> 3;
          if (v11 <= ~a7)
            v12 = ~a7;
          else
            v12 = (v9 - v10 + 4 * (v7 - v8) + 4) >> 3;
          if (v11 > a7 + 1)
            v13 = a7 + 1;
          else
            v13 = v12;
          v14 = (v13 + v8) & ~((v13 + v8) >> 31);
          if (v14 >= 0xFF)
            LOBYTE(v14) = -1;
          v15 = (v7 - v13) & ~((v7 - v13) >> 31);
          if (v15 >= 0xFF)
            LOBYTE(v15) = -1;
          v16 = (v10 + 2 * v9 + v8 + 2) >> 2;
          v17 = (v9 + 2 * v10 + v7 + 2) >> 2;
          if (a3 != 4)
          {
            LOBYTE(v16) = v14;
            LOBYTE(v17) = v15;
          }
          result[-a2] = v16;
          *result = v17;
        }
      }
    }
  }
  return result;
}

unint64_t sub_2160EAD54(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned __int8 *a8, int a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t result;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  unsigned __int8 *v83;
  char v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  unsigned __int8 *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  int v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned __int8 *v177;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned __int8 *v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  unsigned __int8 *v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned __int8 *v202;
  int v203;
  int v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  int v207;
  unsigned __int8 *v208;
  uint64_t v210;
  int v211;
  int v212;
  _DWORD v213[128];
  uint64_t v214;

  v9 = a3;
  v214 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v10 = 0;
    for (i = 9; i > 1; --i)
    {
      *(_OWORD *)(a3 + v10) = *(_OWORD *)(a2 + v10);
      v10 += a6;
    }
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 12);
  v174 = v13 * a5 + a4;
  v14 = *(_QWORD *)(a1 + 48) + 12 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 2 * v174);
  v15 = *(char *)(v14 + 10);
  v16 = *(char *)(v14 + 11);
  v18 = *(_QWORD *)(a1 + 120);
  v17 = *(_QWORD *)(a1 + 128);
  v19 = *(unsigned __int8 *)(v18 + (v13 * a5 + a4));
  v20 = *(unsigned __int8 *)(v17 + (v13 * a5 + a4));
  v21 = v19 + v15;
  v175 = v19;
  v22 = v19 + v16;
  v23 = v20 + v15;
  v173 = v20;
  v24 = v20 + v16;
  v25 = v21 & ~(v21 >> 31);
  if (v25 >= 0x33)
    v26 = 51;
  else
    v26 = v25;
  if ((v22 & ~(v22 >> 31)) >= 0x33)
    v27 = 51;
  else
    v27 = v22 & ~(v22 >> 31);
  LODWORD(v28) = v23 & ~(v23 >> 31);
  if (v28 >= 0x33)
    v28 = 51;
  else
    v28 = v28;
  v188 = byte_2160F9940[v27];
  v189 = byte_2160F9900[v26];
  if ((v24 & ~(v24 >> 31)) >= 0x33)
    v29 = 51;
  else
    v29 = v24 & ~(v24 >> 31);
  v186 = byte_2160F9940[v29];
  v187 = byte_2160F9900[v28];
  v183 = a7 + 16;
  v30 = &byte_2160F9980[4 * v26];
  do
  {
    v31 = a7[v12 + 8];
    if (v31 >= 3)
      v31 = 3;
    v213[v12 + 104] = v30[v31];
    v32 = a7[v12 + 24];
    if (v32 >= 3)
      v32 = 3;
    v213[v12++ + 72] = v30[v32];
  }
  while (v12 != 4);
  v179 = v16;
  v180 = v15;
  v181 = a8;
  v33 = 0;
  v34 = &byte_2160F9980[4 * v28];
  do
  {
    v35 = a7[v33 + 8];
    if (v35 >= 3)
      v35 = 3;
    v213[v33 + 40] = v34[v35];
    v36 = a7[v33 + 24];
    if (v36 >= 3)
      v36 = 3;
    result = (unint64_t)&v213[v33];
    *(_DWORD *)(result + 32) = v34[v36];
    ++v33;
  }
  while (v33 != 4);
  v38 = *a7;
  if (v38 <= 0x3F)
  {
    if (a4 && v38 <= 0x1F)
    {
      v39 = a4 - 1;
      v40 = 0;
      if (a9)
      {
        v41 = v39 + v13 * (a5 & 0xFFFFFFFE);
        v42 = v175 + 1 + *(unsigned __int8 *)(v18 + v41);
        v43 = v16 + (v42 >> 1);
        LODWORD(v44) = (v15 + (v42 >> 1)) & ~((int)(v15 + (v42 >> 1)) >> 31);
        if (v44 >= 0x33)
          v44 = 51;
        else
          v44 = v44;
        v45 = v43 & ~(v43 >> 31);
        a8 = byte_2160F9900;
        v204 = byte_2160F9900[v44];
        if (v45 >= 0x33)
          v46 = 51;
        else
          v46 = v45;
        v201 = byte_2160F9940[v46];
        do
        {
          v47 = a7[v40];
          if (v47 >= 3)
            v47 = 3;
          v213[v40++ + 112] = byte_2160F9980[4 * v44 + v47];
        }
        while (v40 != 4);
        v48 = 0;
        v49 = v173 + 1 + *(unsigned __int8 *)(v17 + v41);
        v50 = v16 + (v49 >> 1);
        LODWORD(v51) = (v15 + (v49 >> 1)) & ~((int)(v15 + (v49 >> 1)) >> 31);
        if (v51 >= 0x33)
          v51 = 51;
        else
          v51 = v51;
        v52 = v50 & ~(v50 >> 31);
        v199 = byte_2160F9900[v51];
        if (v52 >= 0x33)
          v53 = 51;
        else
          v53 = v52;
        v197 = byte_2160F9940[v53];
        result = (unint64_t)&byte_2160F9980[4 * v51];
        do
        {
          v54 = a7[v48];
          if (v54 >= 3)
            v54 = 3;
          v213[v48++ + 48] = *(unsigned __int8 *)(result + v54);
        }
        while (v48 != 4);
        v55 = v39 + v13 * (a5 | 1);
        v56 = v175 + 1 + *(unsigned __int8 *)(v18 + v55);
        v57 = v15 + (v56 >> 1);
        v58 = v16 + (v56 >> 1);
        v59 = v57 & ~(v57 >> 31);
        if (v59 >= 0x33)
          v60 = 51;
        else
          v60 = v59;
        v61 = v58 & ~(v58 >> 31);
        if (v61 >= 0x33)
          v61 = 51;
        v194 = byte_2160F9940[v61];
        v195 = byte_2160F9900[v60];
        v62 = v173 + 1 + *(unsigned __int8 *)(v17 + v55);
        v63 = v15 + (v62 >> 1);
        v64 = v16 + (v62 >> 1);
        v65 = v63 & ~(v63 >> 31);
        if (v65 >= 0x33)
          v66 = 51;
        else
          v66 = v65;
        v67 = v64 & ~(v64 >> 31);
        if (v67 >= 0x33)
          v67 = 51;
        v192 = byte_2160F9900[v66];
        v68 = byte_2160F9940[v67];
      }
      else
      {
        v69 = (v39 + v13 * a5);
        v70 = v175 + *(unsigned __int8 *)(v18 + v69) + 1;
        result = v16;
        v71 = v16 + (v70 >> 1);
        LODWORD(v44) = (v15 + (v70 >> 1)) & ~((int)(v15 + (v70 >> 1)) >> 31);
        if (v44 >= 0x33)
          v44 = 51;
        else
          v44 = v44;
        v204 = byte_2160F9900[v44];
        v72 = v71 & ~(v71 >> 31);
        if (v72 >= 0x33)
          v72 = 51;
        v201 = byte_2160F9940[v72];
        do
        {
          v73 = a7[v40];
          if (v73 >= 3)
            v73 = 3;
          v213[v40++ + 112] = byte_2160F9980[4 * v44 + v73];
        }
        while (v40 != 4);
        v74 = 0;
        v75 = v173 + *(unsigned __int8 *)(v17 + v69) + 1;
        v76 = v16 + (v75 >> 1);
        v77 = (v15 + (v75 >> 1)) & ~((int)(v15 + (v75 >> 1)) >> 31);
        if (v77 >= 0x33)
          v51 = 51;
        else
          v51 = v77;
        v199 = byte_2160F9900[v51];
        v78 = v76 & ~(v76 >> 31);
        if (v78 >= 0x33)
          v79 = 51;
        else
          v79 = v78;
        v197 = byte_2160F9940[v79];
        do
        {
          v80 = a7[v74];
          if (v80 >= 3)
            v80 = 3;
          v213[v74++ + 48] = byte_2160F9980[4 * v51 + v80];
        }
        while (v74 != 4);
        v60 = v44;
        v66 = v51;
        v192 = v199;
        v194 = v201;
        v195 = v204;
        v68 = v197;
      }
      v184 = v68;
      if (a9 == 2)
      {
        v171 = v66;
        v172 = v60;
        v81 = 0;
        v210 = 2 * a6;
        v82 = 1;
        v177 = &byte_2160F9980[4 * v51];
        v83 = &byte_2160F9980[4 * v44];
        do
        {
          v84 = v82;
          v85 = &a7[2 * v81];
          v86 = *v85;
          v87 = v85[1];
          if (v87 | v86)
          {
            if (v87 >= 3)
              v88 = 3;
            else
              v88 = v85[1];
            v89 = v177[v88];
            v90 = v83[v88];
            if (v86 >= 3)
              v91 = 3;
            else
              v91 = v86;
            v92 = (_BYTE *)(v9 + v81 * v210);
            sub_2160EAA9C(v92, 1, v86, v9, v204, v201, v83[v91], (uint64_t)a8, v199, v197, v177[v91]);
            result = (unint64_t)sub_2160EAA9C(&v92[a6], 1, v87, v93, v204, v201, v90, v94, v199, v197, v89);
            v9 = a3;
          }
          v82 = 0;
          v81 = 1;
        }
        while ((v84 & 1) != 0);
        v95 = 0;
        v96 = 4 * a6;
        v202 = &byte_2160F9980[4 * v172];
        v205 = &byte_2160F9980[4 * v171];
        do
        {
          v97 = a7[v95 + 32];
          v98 = a7[v95 + 33];
          if (v98 | v97)
          {
            if (v98 >= 3)
              v99 = 3;
            else
              v99 = a7[v95 + 33];
            v100 = v205[v99];
            v101 = v202[v99];
            if (v97 >= 3)
              v102 = 3;
            else
              v102 = a7[v95 + 32];
            v103 = (_BYTE *)(v9 + v96);
            sub_2160EAA9C(v103, 1, v97, v9, v195, v194, v202[v102], (uint64_t)a8, v192, v184, v205[v102]);
            result = (unint64_t)sub_2160EAA9C(&v103[a6], 1, v98, v104, v195, v194, v101, v105, v192, v184, v100);
            v9 = a3;
          }
          v95 += 2;
          v96 += v210;
        }
        while (v95 != 4);
      }
      else
      {
        v106 = 0;
        v107 = 0;
        v108 = &byte_2160F9980[4 * v66];
        v109 = &byte_2160F9980[4 * v60];
        do
        {
          v110 = a7[v107];
          v111 = v110;
          if (a9 == 1)
            v111 = a7[v107 + 32];
          if (v111 | v110)
          {
            if (v111 >= 3)
              v112 = 3;
            else
              v112 = v111;
            v113 = v108[v112];
            v114 = v109[v112];
            v115 = (_BYTE *)(v9 + v106);
            sub_2160EAA9C(v115, 1, v110, v9, v204, v201, v213[v107 + 112], (uint64_t)a8, v199, v197, v213[v107 + 48]);
            result = (unint64_t)sub_2160EAA9C(&v115[a6], 1, v111, v116, v195, v194, v114, v117, v192, v184, v113);
            v9 = a3;
          }
          ++v107;
          v106 += 2 * a6;
        }
        while (v107 != 4);
      }
    }
    v118 = a7[8];
    if (v118 == 4)
    {
      *(_WORD *)(a7 + 9) = 1028;
      a7[11] = 4;
    }
    else if (v118 > 0x1F)
    {
      goto LABEL_121;
    }
    v119 = 0;
    v206 = a7 + 8;
    v120 = 8;
    do
    {
      v121 = v206[v119];
      if (v206[v119])
      {
        v122 = v213[v119 + 40];
        v123 = v213[v119 + 104];
        v124 = (_BYTE *)(v9 + v120);
        sub_2160EAA9C(v124, 1, v121, v9, v189, v188, v123, (uint64_t)a8, v187, v186, v122);
        result = (unint64_t)sub_2160EAA9C(&v124[a6], 1, v121, v125, v189, v188, v123, v126, v187, v186, v122);
        v9 = a3;
      }
      ++v119;
      v120 += 2 * a6;
    }
    while (v119 != 4);
  }
LABEL_121:
  v127 = *v183;
  if (v127 > 0x3F)
    return result;
  v128 = v181;
  if (a5 && v127 <= 0x1F)
  {
    LODWORD(result) = 0;
    v193 = 0;
    v129 = a6 << (v181 != 0);
    while (1)
    {
      v185 = result;
      if (v128)
      {
        v131 = v179;
        v130 = v180;
        if ((result + a5) < 2)
        {
          v133 = 0;
          v134 = 0;
        }
        else
        {
          v132 = a4 + *(_DWORD *)(a1 + 12) * (a5 - 2 + result);
          v133 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v132);
          v134 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + v132);
        }
        if ((_DWORD)result)
          v138 = a7 + 36;
        else
          v138 = v183;
      }
      else
      {
        v135 = *(_QWORD *)(a1 + 144);
        v131 = v179;
        v130 = v180;
        if (*(_BYTE *)(v135 + v174) == 2)
        {
          if (a5 < 2)
          {
            v133 = 0;
            v134 = 0;
          }
          else
          {
            v136 = *(_DWORD *)(a1 + 12);
            if (*(_BYTE *)(v135 + (v174 - 2 * v136)) == 2)
              v137 = a5 - 2;
            else
              v137 = (a5 & 0xFFFFFFFE) - 1;
            v140 = a4 + v136 * v137;
            v133 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v140);
            v134 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + v140);
          }
        }
        else
        {
          v139 = a4 + *(_DWORD *)(a1 + 12) * (a5 - 1);
          v133 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v139);
          v134 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + v139);
        }
        v138 = v183;
      }
      v141 = 0;
      v142 = v175 + 1 + v133;
      v143 = v131 + (v142 >> 1);
      LODWORD(v144) = (v130 + (v142 >> 1)) & ~((int)(v130 + (v142 >> 1)) >> 31);
      if (v144 >= 0x33)
        v144 = 51;
      else
        v144 = v144;
      v145 = v143 & ~(v143 >> 31);
      if (v145 >= 0x33)
        v145 = 51;
      v207 = byte_2160F9900[v144];
      v203 = byte_2160F9940[v145];
      do
      {
        v146 = v138[v141];
        if (v146 >= 3)
          v146 = 3;
        v213[v141++ + 80] = byte_2160F9980[4 * v144 + v146];
      }
      while (v141 != 4);
      v147 = 0;
      v148 = v173 + 1 + v134;
      v149 = v131 + (v148 >> 1);
      LODWORD(v150) = (v130 + (v148 >> 1)) & ~((int)(v130 + (v148 >> 1)) >> 31);
      if (v150 >= 0x33)
        v150 = 51;
      else
        v150 = v150;
      v151 = v149 & ~(v149 >> 31);
      if (v151 >= 0x33)
        v151 = 51;
      v200 = byte_2160F9900[v150];
      v198 = byte_2160F9940[v151];
      do
      {
        v152 = v138[v147];
        if (v152 >= 3)
          v152 = 3;
        v213[v147++ + 16] = byte_2160F9980[4 * v150 + v152];
      }
      while (v147 != 4);
      v153 = *v138;
      if (v153 == 4)
        break;
      if (v153 <= 0x1F)
        goto LABEL_162;
LABEL_166:
      v193 += a6;
      result = (v185 + 1);
      v128 = v181;
      if (result > v181)
        goto LABEL_167;
    }
    *(_WORD *)(v138 + 1) = 1028;
    v138[3] = 4;
LABEL_162:
    v154 = 0;
    v155 = v193;
    v196 = v138;
    do
    {
      v156 = v138[v154];
      if (v138[v154])
      {
        v157 = v213[v154 + 16];
        v211 = v213[v154 + 80];
        v158 = (_BYTE *)(v9 + v155);
        sub_2160EAC74(v158, v129, v156, v9, v207, v203, v211);
        sub_2160EAC74(v158 + 1, v129, v156, v159, v200, v198, v157);
        sub_2160EAC74(v158 + 2, v129, v156, v160, v207, v203, v211);
        sub_2160EAC74(v158 + 3, v129, v156, v161, v200, v198, v157);
        v138 = v196;
        v9 = a3;
      }
      ++v154;
      v155 += 4;
    }
    while (v154 != 4);
    goto LABEL_166;
  }
LABEL_167:
  v162 = a7[24];
  if (v162 == 4)
  {
    *(_WORD *)(a7 + 25) = 1028;
    a7[27] = 4;
  }
  else if (v162 > 0x1F)
  {
    return result;
  }
  v163 = 0;
  v208 = a7 + 24;
  v164 = 4 * a6;
  do
  {
    v165 = v208[v163];
    if (v208[v163])
    {
      v166 = v213[v163 + 8];
      v212 = v213[v163 + 72];
      v167 = (_BYTE *)(v9 + v164);
      sub_2160EAC74(v167, a6, v165, v9, v189, v188, v212);
      sub_2160EAC74(v167 + 1, a6, v165, v168, v187, v186, v166);
      sub_2160EAC74(v167 + 2, a6, v165, v169, v189, v188, v212);
      result = (unint64_t)sub_2160EAC74(v167 + 3, a6, v165, v170, v187, v186, v166);
      v9 = a3;
    }
    ++v163;
    v164 += 4;
  }
  while (v163 != 4);
  return result;
}

uint64_t sub_2160EBA84(uint64_t a1, int a2)
{
  _BYTE *v3;
  int v4;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v3 = *(_BYTE **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= 1 && v3 != 0)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 48);
    if (*v3 || v3[1])
      goto LABEL_10;
    if (v3[2] == 1)
    {
      v16 = -3;
      v17 = 3;
    }
    else
    {
      if (v3[2] || v3[3] != 1)
      {
LABEL_10:
        *v8 = v3;
        goto LABEL_11;
      }
      v16 = -4;
      v17 = 4;
    }
    v3 += v17;
    v4 += v16;
    *v8 = v3;
    if (v4 < 1)
    {
      v11 = 1;
LABEL_21:
      result = 0;
      v13 = v4 + (_DWORD)v3 - v8[v11 - 1];
      *(_DWORD *)(v7 + 4 * (v11 - 1)) = v13;
      if (v13)
        v14 = v11;
      else
        v14 = v11 - 1;
      *(_DWORD *)(a1 + 32) = v14;
      if (a2 && v14 >= 1)
      {
        v15 = 0;
        do
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v15) = sub_2160AC684(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v15), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v15));
          ++v15;
        }
        while (v15 < *(int *)(a1 + 32));
        return 0;
      }
      return result;
    }
LABEL_11:
    LODWORD(v9) = 0;
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = (int)v9;
      if (v10 >= 2 && v3[(int)v9] == 1)
      {
        v9 = (int)v9 + 1;
        if ((int)v12 + 1 >= v4 || v11 >= *(_DWORD *)(a1 + 36))
          return 4294958327;
        v8[v11] = &v3[v9];
        *(_DWORD *)(v7 + 4 * (v11 - 1)) = (_DWORD)v3 + v9 - v8[v11 - 1] + ~v10;
        ++v11;
        v12 = v9;
        v10 = 0;
      }
      if (v3[v12])
        v10 = 0;
      else
        ++v10;
      LODWORD(v9) = v9 + 1;
    }
    while ((int)v9 < v4);
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return 4294958327;
}

uint64_t sub_2160EBC08(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  unsigned int *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  unsigned int v18;
  char *v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;

  v6 = *(unsigned int **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1)
    v8 = v7 > a2;
  else
    v8 = 0;
  if (!v8 || v7 > a3)
    goto LABEL_9;
  v13 = 0;
  v15 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v16 = (char *)v6 + v7;
  v17 = 1;
  while (1)
  {
    if (a2 == 4)
    {
      v18 = bswap32(*v6);
      goto LABEL_18;
    }
    if (a2 == 2)
    {
      v18 = bswap32(*(unsigned __int16 *)v6) >> 16;
      goto LABEL_18;
    }
    if (a2 != 1)
      break;
    v18 = *(unsigned __int8 *)v6;
LABEL_18:
    v19 = (char *)v6 + v18 + a2;
    v20 = v19 <= v16 && v19 - 1 >= (char *)v6;
    if (!v20)
      goto LABEL_9;
    v10 = 0;
    v21 = (char *)v6 + a2;
    *(_QWORD *)(v14 + 8 * v13) = v21;
    *(_DWORD *)(v15 + 4 * v13) = v18;
    v22 = v18;
    v23 = v13 + 1;
    v6 = (unsigned int *)&v21[v22];
    if ((char *)v6 + a2 <= v16)
    {
      v20 = v13++ >= 0x18F;
      if (!v20)
        continue;
    }
    goto LABEL_28;
  }
  v17 = 0;
  v10 = 4294958327;
  v23 = v13;
LABEL_28:
  *(_DWORD *)(a1 + 32) = v23;
  if (a4)
  {
    if (v23 >= 1)
    {
      v24 = 0;
      while (1)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v24);
        if ((v25 & 0x80000000) != 0)
          break;
        v26 = sub_2160AC684(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v24), v25);
        *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v24) = v26;
        if (a5)
          *(_DWORD *)(a5 + 4 * v24) = v26;
        if (++v24 >= *(int *)(a1 + 32))
          goto LABEL_40;
      }
LABEL_9:
      v10 = 4294958327;
LABEL_10:
      *(_DWORD *)(a1 + 32) = 0;
      return v10;
    }
  }
  else if (a5 && v23 >= 1)
  {
    v27 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v27) = *(_DWORD *)(a5 + 4 * v27);
      ++v27;
    }
    while (v27 < *(int *)(a1 + 32));
  }
LABEL_40:
  if ((v17 & 1) == 0)
    goto LABEL_10;
  return 0;
}

uint64_t sub_2160EBD8C(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = *(unsigned int **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
    v3 = v1 == 0;
  else
    v3 = 1;
  if (v3)
  {
    LODWORD(v5) = 0;
    v4 = 4294958327;
  }
  else
  {
    v5 = 0;
    v7 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = (unsigned int *)((char *)v1 + v2);
    while (v1[1] == 1986688113)
    {
      v10 = *v1;
      v9 = v1 + 2;
      *(_QWORD *)(v6 + 8 * v5) = v9;
      v11 = bswap32(v10) - 8;
      *(_DWORD *)(v7 + 4 * v5++) = v11;
      v1 = (unsigned int *)((char *)v9 + v11);
      if (v1 >= v8)
        goto LABEL_11;
    }
    *(_QWORD *)(v6 + 8 * v5) = 0;
    *(_DWORD *)(v7 + 4 * v5) = 0;
LABEL_11:
    v4 = 0;
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v4;
}

uint64_t sub_2160EBE0C(uint64_t a1)
{
  sub_2160EC54C(0);
  sub_2160EBE3C(a1);
  return 0;
}

dispatch_semaphore_t *sub_2160EBE3C(uint64_t a1)
{
  dispatch_semaphore_t *i;
  void (*v3)(_QWORD);

  for (i = *(dispatch_semaphore_t **)(a1 + 16); ; i = *(dispatch_semaphore_t **)(a1 + 16))
  {
    sub_2160EC9B8(i);
    v3 = *(void (**)(_QWORD))(a1 + 40);
    if (!v3)
      break;
    v3(*(_QWORD *)(a1 + 48));
    sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 24));
  }
  return sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 24));
}

uint64_t sub_2160EBE84(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  int v7;
  uint64_t result;
  unint64_t v10;

  if (a5 <= 1)
    v7 = 1;
  else
    v7 = a5;
  a1[5] = a2;
  a1[6] = a3;
  *((_DWORD *)a1 + 8) = a4;
  result = (v7 - 1);
  *(_DWORD *)a1 = result;
  if (v7 != 1)
  {
    a1[2] = sub_2160EC928(result, 0);
    a1[3] = sub_2160EC928(*(unsigned int *)a1, 0);
    result = operator new[]();
    a1[1] = result;
    if (*(_DWORD *)a1)
    {
      v10 = 0;
      do
      {
        result = (uint64_t)sub_2160EC560((void *(__cdecl *)(void *))sub_2160EBE0C, a1, a6);
        *(_QWORD *)(a1[1] + 8 * v10++) = result;
      }
      while (v10 < *(unsigned int *)a1);
    }
  }
  return result;
}

intptr_t sub_2160EBF40(uint64_t a1)
{
  unsigned int v2;
  intptr_t result;
  unsigned int v4;

  if (*(_DWORD *)a1)
  {
    v2 = 0;
    do
    {
      sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 16));
      ++v2;
    }
    while (v2 < *(_DWORD *)a1);
  }
  result = (*(uint64_t (**)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48));
  if (*(_DWORD *)a1)
  {
    v4 = 0;
    do
    {
      result = sub_2160EC9B8(*(dispatch_semaphore_t **)(a1 + 24));
      ++v4;
    }
    while (v4 < *(_DWORD *)a1);
  }
  return result;
}

uint64_t sub_2160EBFAC(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  _QWORD *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  if (*(_DWORD *)result)
  {
    v1 = (unsigned int *)result;
    v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    v3 = (_QWORD *)(result + 16);
    do
    {
      sub_2160EC9C4(*((dispatch_semaphore_t **)v1 + 2));
      ++v2;
    }
    while (v2 < *v1);
    if (*v1)
    {
      v4 = 0;
      do
      {
        sub_2160EC9B8(*((dispatch_semaphore_t **)v1 + 3));
        ++v4;
      }
      while (v4 < *v1);
      if (*v1)
      {
        v5 = 0;
        do
          sub_2160EC7DC(*(pthread_t **)(*((_QWORD *)v1 + 1) + 8 * v5++));
        while (v5 < *v1);
      }
    }
    sub_2160EC984(*((NSObject ***)v1 + 2));
    sub_2160EC984(*((NSObject ***)v1 + 3));
    *v3 = 0;
    v3[1] = 0;
    if (*v1)
    {
      v6 = 0;
      do
      {
        sub_2160EC7D0(*(void **)(*((_QWORD *)v1 + 1) + 8 * v6));
        *(_QWORD *)(*((_QWORD *)v1 + 1) + 8 * v6++) = 0;
      }
      while (v6 < *v1);
    }
    result = *((_QWORD *)v1 + 1);
    if (result)
      result = MEMORY[0x2199F4C28](result, 0x20C8093837F09);
    *((_QWORD *)v1 + 1) = 0;
  }
  return result;
}

uint64_t sub_2160EC0A4(unsigned int a1, int a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  void *v7;
  uint64_t v8;

  if (a1 <= 1)
    v3 = 1;
  else
    v3 = a1;
  v4 = malloc_type_malloc(0x30uLL, 0x10E004024023721uLL);
  v5 = (uint64_t)v4;
  if (!v4)
    goto LABEL_16;
  v4[5] = 0;
  v6 = sub_2160EC80C();
  *(_QWORD *)v5 = v6;
  if (!v6)
    goto LABEL_16;
  *(_DWORD *)(v5 + 32) = v3 - 1;
  if (v3 == 1)
  {
    *(_QWORD *)(v5 + 24) = 0;
    return v5;
  }
  v7 = malloc_type_malloc(8 * (v3 - 1), 0x2004093837F09uLL);
  *(_QWORD *)(v5 + 24) = v7;
  if (!v7)
    goto LABEL_16;
  if (*(int *)(v5 + 32) >= 1)
  {
    v8 = 0;
    while (1)
    {
      if (v8)
      {
        *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v8) = sub_2160EC338(v5, ((v8 + 1) >> 1) + 1, a2);
      }
      else
      {
        sub_2160ECAD4(1);
        **(_QWORD **)(v5 + 24) = sub_2160EC338(v5, 1, a2);
      }
      if (!*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v8))
        break;
      if (++v8 >= *(int *)(v5 + 32))
        return v5;
    }
LABEL_16:
    sub_2160EC1BC((unsigned int *)v5);
    return 0;
  }
  return v5;
}

void sub_2160EC1BC(unsigned int *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  if (a1)
  {
    v2 = (uint64_t *)*((_QWORD *)a1 + 3);
    v3 = a1[8];
    a1[4] = -1;
    if ((int)v3 >= 1)
    {
      v4 = v2;
      do
      {
        sub_2160EC4C0(*v4);
        sub_2160EC4C8(*v4);
        v5 = *v4++;
        sub_2160EC480(v5);
        --v3;
      }
      while (v3);
    }
    free(v2);
    *((_QWORD *)a1 + 3) = 0;
    sub_2160EC854(*(pthread_mutex_t **)a1);
    *(_QWORD *)a1 = 0;
    os_release(*((void **)a1 + 5));
  }
  free(a1);
}

void sub_2160EC244(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (a3)
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 32);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)(a1 + 24);
      *(_QWORD *)(a1 + 8) = a2;
      *(_DWORD *)(a1 + 16) = a3;
      *(_QWORD *)(a1 + 40) = voucher_copy();
      *(_DWORD *)(a1 + 20) = 1;
      v8 = v6 + 1;
      if ((int)v6 + 1 <= a3)
        v6 = v6;
      else
        v6 = a3 - 1;
      if ((_DWORD)v6)
      {
        v9 = v6;
        v10 = v7;
        do
        {
          v11 = *v10++;
          sub_2160EC4C0(v11);
          --v9;
        }
        while (v9);
      }
      (*(void (**)(_QWORD))a2)(*(_QWORD *)(a2 + 8));
      if (v8 < a3)
        sub_2160EC4D8(a1);
      if ((_DWORD)v6)
      {
        do
        {
          v12 = *v7++;
          sub_2160EC4D0(v12);
          --v6;
        }
        while (v6);
      }
      os_release(*(void **)(a1 + 40));
      *(_QWORD *)(a1 + 40) = 0;
    }
    else
    {
      v13 = a3;
      v14 = (_QWORD *)(a2 + 8);
      do
      {
        ((void (*)(_QWORD))*(v14 - 1))(*v14);
        v14 += 2;
        --v13;
      }
      while (v13);
    }
  }
}

uint64_t sub_2160EC32C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) + 1);
}

uint64_t sub_2160EC338(uint64_t a1, int a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  NSObject **v8;
  BOOL v9;
  pthread_t *v10;

  v6 = malloc_type_malloc(0x28uLL, 0x10200401C8C6399uLL);
  v7 = (uint64_t)v6;
  if (!v6)
    goto LABEL_7;
  *v6 = a1;
  v6[1] = sub_2160EC928(1, 0);
  v8 = sub_2160EC928(1, 0);
  *(_QWORD *)(v7 + 24) = v8;
  *(_DWORD *)(v7 + 32) = a2;
  v9 = !*(_QWORD *)(v7 + 8) || v8 == 0;
  if (v9
    || (v10 = sub_2160EC560((void *(__cdecl *)(void *))sub_2160EC3E8, (void *)v7, a3),
        (*(_QWORD *)(v7 + 16) = v10) == 0))
  {
LABEL_7:
    sub_2160EC480(v7);
    return 0;
  }
  return v7;
}

uint64_t sub_2160EC3E8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  void *v5;

  sub_2160EC54C(0);
  v2 = *(_QWORD *)a1;
  while (1)
  {
    v3 = *(_DWORD *)(a1 + 32);
    if (v3 >= 1)
      sub_2160ECAD4(v3);
    sub_2160EC9B8(*(dispatch_semaphore_t **)(a1 + 8));
    sub_2160EC880(*(pthread_mutex_t **)v2);
    v4 = *(_DWORD *)(v2 + 16);
    sub_2160EC88C(*(pthread_mutex_t **)v2);
    if (v4 == -1)
      break;
    os_retain(*(void **)(v2 + 40));
    voucher_adopt();
    sub_2160EC4D8(v2);
    sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 24));
    v5 = (void *)voucher_adopt();
    os_release(v5);
  }
  return 0;
}

void sub_2160EC480(uint64_t a1)
{
  if (a1)
  {
    sub_2160EC7D0(*(void **)(a1 + 16));
    sub_2160EC984(*(NSObject ***)(a1 + 8));
    sub_2160EC984(*(NSObject ***)(a1 + 24));
    free((void *)a1);
  }
}

dispatch_semaphore_t *sub_2160EC4C0(uint64_t a1)
{
  return sub_2160EC9C4(*(dispatch_semaphore_t **)(a1 + 8));
}

pthread_t *sub_2160EC4C8(uint64_t a1)
{
  return sub_2160EC7DC(*(pthread_t **)(a1 + 16));
}

intptr_t sub_2160EC4D0(uint64_t a1)
{
  return sub_2160EC9B8(*(dispatch_semaphore_t **)(a1 + 24));
}

pthread_mutex_t *sub_2160EC4D8(uint64_t a1)
{
  pthread_mutex_t *i;
  int v3;
  uint64_t v4;
  pthread_mutex_t *result;

  for (i = *(pthread_mutex_t **)a1; ; i = *(pthread_mutex_t **)a1)
  {
    sub_2160EC880(i);
    v3 = *(_DWORD *)(a1 + 20);
    if (*(_DWORD *)(a1 + 16) == v3)
      break;
    *(_DWORD *)(a1 + 20) = v3 + 1;
    v4 = *(_QWORD *)(a1 + 8);
    result = sub_2160EC88C(*(pthread_mutex_t **)a1);
    if (!v4)
      return result;
    (*(void (**)(_QWORD))(v4 + 16 * v3))(*(_QWORD *)(v4 + 16 * v3 + 8));
  }
  return sub_2160EC88C(*(pthread_mutex_t **)a1);
}

uint64_t sub_2160EC54C(const char *a1)
{
  if (!a1)
    a1 = "com.apple.coremedia.JVTlib";
  return pthread_setname_np(a1);
}

pthread_t *sub_2160EC560(void *(__cdecl *a1)(void *), void *a2, int a3)
{
  pthread_t *v6;
  thread_inspect_t v7;
  integer_t *v9;
  int v10;
  integer_t v11;
  integer_t v12[4];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[4];
  __int128 v18;
  uint64_t v19;
  pthread_attr_t __attr;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = (pthread_t *)malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  if (v6)
  {
    memset(&__attr, 0, sizeof(__attr));
    if (pthread_attr_init(&__attr))
    {
LABEL_9:
      free(v6);
      return 0;
    }
    if (a3 == 27 && pthread_attr_set_qos_class_np(&__attr, QOS_CLASS_UTILITY, 0))
      goto LABEL_8;
    if (pthread_attr_setdetachstate(&__attr, 1))
      goto LABEL_8;
    if (pthread_create(v6, &__attr, a1, a2))
      goto LABEL_8;
    v7 = pthread_mach_thread_np(*v6);
    v19 = 0;
    *(_OWORD *)thread_info_out = 0u;
    v18 = 0u;
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)v12 = 0u;
    thread_info_outCnt = 10;
    if (thread_info(v7, 3u, thread_info_out, &thread_info_outCnt))
    {
LABEL_8:
      pthread_attr_destroy(&__attr);
      goto LABEL_9;
    }
    switch(DWORD1(v18))
    {
      case 4:
        thread_info_outCnt = 4;
        if (thread_info(v7, 0xCu, (thread_info_t)&v14 + 2, &thread_info_outCnt))
          goto LABEL_8;
        v9 = (integer_t *)&v14 + 3;
        break;
      case 2:
        thread_info_outCnt = 5;
        if (thread_info(v7, 0xBu, (thread_info_t)&v13 + 1, &thread_info_outCnt))
          goto LABEL_8;
        v9 = (integer_t *)&v13 + 2;
        break;
      case 1:
        thread_info_outCnt = 5;
        if (thread_info(v7, 0xAu, v12, &thread_info_outCnt))
          goto LABEL_8;
        v9 = &v12[1];
        break;
      default:
        goto LABEL_8;
    }
    v11 = a3 - *v9;
    v10 = sub_2160EC764(*v6, 3u, &v11);
    pthread_attr_destroy(&__attr);
    if (!v10)
      return v6;
    goto LABEL_9;
  }
  return v6;
}

uint64_t sub_2160EC764(_opaque_pthread_t *a1, thread_policy_flavor_t a2, integer_t *a3)
{
  uint64_t result;
  thread_act_t v7;
  qos_class_t __qos_class;

  __qos_class = QOS_CLASS_UNSPECIFIED;
  result = pthread_get_qos_class_np(a1, &__qos_class, 0);
  if (!(_DWORD)result && __qos_class != QOS_CLASS_UTILITY)
  {
    v7 = pthread_mach_thread_np(a1);
    return thread_policy_set(v7, a2, a3, 1u);
  }
  return result;
}

void sub_2160EC7D0(void *a1)
{
  if (a1)
    free(a1);
}

pthread_t *sub_2160EC7DC(pthread_t *result)
{
  void *v1;

  v1 = 0;
  if (result)
  {
    pthread_join(*result, &v1);
    return (pthread_t *)v1;
  }
  return result;
}

pthread_mutex_t *sub_2160EC80C()
{
  pthread_mutex_t *v0;
  pthread_mutex_t *v1;

  v0 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  v1 = v0;
  if (v0)
    pthread_mutex_init(v0, 0);
  return v1;
}

void sub_2160EC854(pthread_mutex_t *a1)
{
  if (a1)
    pthread_mutex_destroy(a1);
  free(a1);
}

pthread_mutex_t *sub_2160EC880(pthread_mutex_t *result)
{
  if (result)
    return (pthread_mutex_t *)pthread_mutex_lock(result);
  return result;
}

pthread_mutex_t *sub_2160EC88C(pthread_mutex_t *result)
{
  if (result)
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  return result;
}

pthread_cond_t *sub_2160EC898()
{
  pthread_cond_t *v0;
  pthread_cond_t *v1;

  v0 = (pthread_cond_t *)malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  v1 = v0;
  if (v0)
    pthread_cond_init(v0, 0);
  return v1;
}

void sub_2160EC8E0(pthread_cond_t *a1)
{
  if (a1)
    pthread_cond_destroy(a1);
  free(a1);
}

pthread_cond_t *sub_2160EC90C(pthread_cond_t *result)
{
  if (result)
    return (pthread_cond_t *)pthread_cond_broadcast(result);
  return result;
}

pthread_cond_t *sub_2160EC918(pthread_cond_t *result, pthread_mutex_t *a2)
{
  if (result)
  {
    if (a2)
      return (pthread_cond_t *)pthread_cond_wait(result, a2);
  }
  return result;
}

NSObject **sub_2160EC928(uint64_t a1, unsigned int a2)
{
  NSObject **v3;
  dispatch_semaphore_t v4;

  v3 = (NSObject **)malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  if (v3)
  {
    v4 = dispatch_semaphore_create(a2);
    *v3 = v4;
    if (!v4)
    {
      sub_2160EC984(v3);
      return 0;
    }
  }
  return v3;
}

void sub_2160EC984(NSObject **a1)
{
  NSObject *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      dispatch_release(v2);
    free(a1);
  }
}

intptr_t sub_2160EC9B8(dispatch_semaphore_t *a1)
{
  return dispatch_semaphore_wait(*a1, 0xFFFFFFFFFFFFFFFFLL);
}

dispatch_semaphore_t *sub_2160EC9C4(dispatch_semaphore_t *result)
{
  if (result)
    return (dispatch_semaphore_t *)dispatch_semaphore_signal(*result);
  return result;
}

uint64_t sub_2160EC9D4(unsigned int a1)
{
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  size_t v7;
  int v8;
  size_t v9;
  int v10;

  v10 = 0;
  v9 = 4;
  if (sysctlbyname("hw.activecpu", &v10, &v9, 0, 0))
    return 1;
  v8 = 0;
  v7 = 4;
  v3 = sysctlbyname("hw.cputhreadtype", &v8, &v7, 0, 0);
  if (v10 >= 0)
    v4 = v10;
  else
    v4 = v10 + 1;
  if (v8)
    v5 = v3 == 0;
  else
    v5 = 0;
  v6 = v4 >> 1;
  if (!v5)
    v6 = v10;
  if (v6 >= a1)
    return a1;
  else
    return v6;
}

uint64_t sub_2160ECA7C(integer_t a1)
{
  uint64_t result;
  _opaque_pthread_t *v3;
  integer_t v4;

  result = dword_254E17450;
  if (!dword_254E17450)
  {
    result = sub_2160EC9D4(8u);
    dword_254E17450 = result;
  }
  if (result >= 3)
  {
    v4 = a1;
    v3 = pthread_self();
    return sub_2160EC764(v3, 4u, &v4);
  }
  return result;
}

uint64_t sub_2160ECAD4(int a1)
{
  return sub_2160ECA7C(a1 + 1);
}

uint64_t sub_2160ECADC(int a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t result;

  while (1)
  {
    v3 = __ldaxr(a3);
    if (v3 != a1)
      break;
    if (!__stlxr(a2, a3))
      return 1;
  }
  result = 0;
  __clrex();
  return result;
}

uint64_t sub_2160ECB04(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v2;

  do
  {
    v1 = __ldaxr(a1);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, a1));
  return v2;
}

uint64_t sub_2160ECB1C(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v2;

  do
  {
    v1 = __ldaxr(a1);
    v2 = v1 + 1;
  }
  while (__stlxr(v2, a1));
  return v2;
}

uint64_t sub_2160ECB34(unsigned int a1)
{
  return bswap32(a1);
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x24BDBB790](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x24BDBB7A0](allocator, ptr);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC188](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC190](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x24BDBC4C0](theString, formatOptions, format);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x24BDC0080]();
}

OSStatus CMBlockBufferCopyDataBytes(CMBlockBufferRef theSourceBuffer, size_t offsetToData, size_t dataLength, void *destination)
{
  return MEMORY[0x24BDC00B0](theSourceBuffer, offsetToData, dataLength, destination);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x24BDC00C0](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x24BDC00D0](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x24BDC00D8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x24BDC0180]();
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return (CFPropertyListRef)MEMORY[0x24BDC01A8](desc, extensionKey);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x24BDC01E0](target, key, attachmentModeOut);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x24BDC02B8](sbuf);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x24BDC0330](sbuf, createIfNecessary);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x24BDC0668](videoDesc);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x24BDC5180](buffer, key, value, *(_QWORD *)&attachmentMode);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  MEMORY[0x24BDC52A8](pixelBuffer, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5320](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x24BDC5398](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

void CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(CFDictionaryRef description, OSType pixelFormat)
{
  MEMORY[0x24BDC53D0](description, *(_QWORD *)&pixelFormat);
}

uint64_t FigFormatDescriptionRelease()
{
  return MEMORY[0x24BDC08A0]();
}

uint64_t FigFormatDescriptionRetain()
{
  return MEMORY[0x24BDC08A8]();
}

uint64_t FigSignalErrorAt3()
{
  return MEMORY[0x24BDC09E8]();
}

uint64_t FigThreadGetMachThreadPriorityValue()
{
  return MEMORY[0x24BDC0A70]();
}

uint64_t VTDecoderSessionEmitDecodedFrame()
{
  return MEMORY[0x24BDF9028]();
}

uint64_t VTDecoderSessionGetPixelBufferPool()
{
  return MEMORY[0x24BDF9040]();
}

uint64_t VTDecoderSessionSetPixelBufferAttributes()
{
  return MEMORY[0x24BDF9048]();
}

uint64_t VTRegisterVideoDecoderWithInfo()
{
  return MEMORY[0x24BDF9188]();
}

uint64_t VTTileDecoderSessionEmitDecodedTile()
{
  return MEMORY[0x24BDF91B0]();
}

uint64_t VTVideoDecoderGetCMBaseObject()
{
  return MEMORY[0x24BDF91D8]();
}

uint64_t VTVideoDecoderGetClassID()
{
  return MEMORY[0x24BDF91E0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24D4DE170();
}

uint64_t operator delete()
{
  return off_24D4DE178();
}

uint64_t operator new[]()
{
  return off_24D4DE180();
}

uint64_t operator new()
{
  return off_24D4DE188();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x24BDADEA0](predicate, context, function);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void os_release(void *object)
{
  MEMORY[0x24BDAF3F0](object);
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x24BDAF3F8](object);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF778](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF790](a1);
}

int pthread_attr_set_qos_class_np(pthread_attr_t *__attr, qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x24BDAF798](__attr, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x24BDAF7A0](a1, *(_QWORD *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7C8](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7D0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x24BDAF800](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_get_qos_class_np(pthread_t __pthread, qos_class_t *__qos_class, int *__relative_priority)
{
  return MEMORY[0x24BDAF838](__pthread, __qos_class, __relative_priority);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x24BDAF880](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x24BDAF8A8](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x24BDAF998](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x24BDAF9F8](a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x24BDB0210](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x24BDB0220](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x24BDB0400]();
}

