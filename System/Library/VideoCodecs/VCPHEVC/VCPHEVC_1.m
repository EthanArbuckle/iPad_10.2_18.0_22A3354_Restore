uint64_t sub_1C975CB08(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 1)
  {
    v6 = a6;
    v9 = result;
    v10 = 0;
    v11 = a6 + 2;
    v18 = a2;
    v12 = 8 - a4;
    v13 = 4 * a2;
    v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        v15 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v6 + v15) = (_DWORD)result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        v17 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v11 + v17) = (_DWORD)result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C975CC10(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  __int16 v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_WORD *)(a4 + 2 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_WORD *)(a4 - 2);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630F0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C975CE28(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  __int16 *v58;
  __int16 *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_WORD *)(a4 + 2 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 2 * v12;
      v17 = -2 * v14;
      v18 = a4 + 2 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (__int16 *)(v16 - 2);
      v21 = (__int16 *)(v18 - 2);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_WORD *)(v16 + 2 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (__int16 *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 2 * v5;
      v30 = -2 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (__int16 *)(v29 - 2);
      v33 = a4 + 2 * a3 * (v5 - 1) - 2;
      v34 = -2 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (__int16 *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_WORD *)(v29 + 2 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (__int16 *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_WORD *)(a4 + 2 * ~a3);
    *(_WORD *)(a5 - 2) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 2 * (int)v6;
      v47 = (__int16 *)(a4 - 2 * a3);
      v48 = v47;
      v49 = (_WORD *)(a5 + 2 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_WORD *)((char *)v49 + v46);
        v48 = (__int16 *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_WORD *)(a5 + 2 * (v45 + v5));
      v57 = 2 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_WORD *)((char *)v56 + v57);
        v58 = (__int16 *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1C98630F0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C975D144(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v4;

  v4 = 4;
  do
  {
    *a4 = *(_QWORD *)(a2 + 16);
    a4 = (_QWORD *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

__n128 sub_1C975D164(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;

  v4 = a2 + 2;
  v5 = 8;
  do
  {
    result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975D188(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;

  v4 = a2 + 4;
  v5 = 16;
  do
  {
    result = *v4;
    v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975D1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = 32;
  do
  {
    result = *(__n128 *)(a2 + 128);
    v6 = *(_OWORD *)(a2 + 144);
    v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1C975D1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = 64;
  do
  {
    v5 = *(_OWORD *)(a2 + 256);
    v6 = *(_OWORD *)(a2 + 272);
    v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    result = *(__n128 *)(a2 + 320);
    v9 = *(_OWORD *)(a2 + 336);
    v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

int16x4_t sub_1C975D214(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x4_t result;

  for (i = 0; i != 8; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C975D23C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x8_t result;

  for (i = 0; i != 16; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C975D264(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 1;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-1] = result;
    *v5 = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

void sub_1C975D290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 32; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

void sub_1C975D2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 64; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

uint64_t sub_1C975D300(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = 8 - a3;
    v11 = 2 * a2;
    v12 = 2 * a4;
    do
    {
      v13 = 0;
      do
      {
        result = sub_1C971C898(v8, a3);
        *(_WORD *)(a5 + v13) = (_DWORD)result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void *sub_1C975D398(void *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  _WORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;

  if (!a2)
    return memset((void *)(a5 - 2), 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  v5 = (1 << (char)result);
  if ((int)v5 >= 8)
    v6 = 8;
  else
    v6 = v5;
  v7 = __clz(__rbit32(a2));
  if (v7 < 9)
    v8 = ((2 << (char)result) + (char)~byte_1C9832564[9 * (int)result - 18 + v7]) * a3 - 1;
  else
    v8 = byte_1C9832564[9 * (int)result + 9 + v7] - a3;
  v9 = *(unsigned __int16 *)(a4 + 2 * v8);
  if ((int)v5 >= 4)
  {
    v10 = 0;
    LODWORD(v11) = ((int)v5 + 4) >> 3;
    v12 = 2 << (char)result;
    if ((int)v11 <= 1)
      v11 = 1;
    else
      v11 = v11;
    if ((int)v5 >= 8)
      v13 = 8;
    else
      v13 = 1 << (char)result;
    v14 = v13;
    v15 = a5 + 2 * v12;
    v16 = -2 * v13;
    v17 = a4 + 2 * a3 * (v12 - 1);
    v18 = a3 * v13;
    v19 = (_WORD *)(v15 - 2);
    v20 = (unsigned __int16 *)(v17 - 2);
    v21 = v6 + 1;
    v22 = -(uint64_t)v13;
    do
    {
      if (((a2 >> v10) & 1) != 0)
      {
        v23 = v21;
        v24 = v20;
        v25 = v19;
        do
        {
          v9 = *v24;
          *v25-- = v9;
          v24 -= a3;
          --v23;
        }
        while (v23 > 1);
      }
      else
      {
        v26 = v22;
        do
        {
          *(_WORD *)(v15 + 2 * v26) = v9;
          v27 = __CFADD__(v26++, 1);
        }
        while (!v27);
      }
      ++v10;
      v19 = (_WORD *)((char *)v19 + v16);
      v20 -= v18;
      v15 += v16;
    }
    while (v10 != v11);
    v28 = 0;
    v29 = a5 + 2 * v5;
    v30 = -2 * v14;
    if ((1 << (char)result) >= 8uLL)
      v31 = 8;
    else
      v31 = (1 << (char)result);
    v32 = (_WORD *)(v29 - 2);
    v33 = a4 + 2 * a3 * (v5 - 1) - 2;
    v34 = -2 * v18;
    v35 = v31 + 1;
    v36 = -v14;
    do
    {
      if (((a2 >> v28) & 0x10) != 0)
      {
        v37 = v35;
        v38 = (unsigned __int16 *)v33;
        v39 = v32;
        do
        {
          v9 = *v38;
          *v39-- = v9;
          v38 -= a3;
          --v37;
        }
        while (v37 > 1);
      }
      else
      {
        v40 = v36;
        do
        {
          *(_WORD *)(v29 + 2 * v40) = v9;
          v27 = __CFADD__(v40++, 1);
        }
        while (!v27);
      }
      ++v28;
      v32 = (_WORD *)((char *)v32 + v30);
      v33 += v34;
      v29 += v30;
    }
    while (v28 != v11);
  }
  if ((a2 & 0x100) != 0)
    v9 = *(unsigned __int16 *)(a4 + 2 * ~a3);
  *(_WORD *)(a5 - 2) = v9;
  if ((int)v5 >= 4)
  {
    v41 = 0;
    LODWORD(v42) = (int)v5 >> 2;
    v43 = 2 << (char)result;
    if ((int)v5 >> 2 <= 1)
      v42 = 1;
    else
      v42 = v42;
    v44 = a4 - 2 * a3;
    v45 = a5 + 2 * (2 << (char)result);
    do
    {
      if (((a2 >> v41) & 0x200) != 0)
      {
        for (i = 0; i != 8; i += 2)
        {
          v9 = *(unsigned __int16 *)(v44 + i);
          *(_WORD *)(v45 + i) = v9;
        }
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (4 * v41 + v43)) = vdup_n_s16(v9);
      }
      ++v41;
      v45 += 8;
      v44 += 8;
    }
    while (v41 != v42);
    v47 = 0;
    v48 = a5 + 2 * (v43 + v5);
    v49 = a4 - 2 * a3 + 2 * v5;
    do
    {
      if (((a2 >> v47) & 0x2000) != 0)
      {
        for (j = 0; j != 8; j += 2)
        {
          v9 = *(unsigned __int16 *)(v49 + j);
          *(_WORD *)(v48 + j) = v9;
        }
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (v5 + 4 * v47 + v43)) = vdup_n_s16(v9);
      }
      ++v47;
      v48 += 8;
      v49 += 8;
    }
    while (v47 != v42);
  }
  return result;
}

void *sub_1C975D690(void *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;

  if (!a2)
    return memset((void *)(a5 - 2), 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  v5 = (1 << (char)result);
  v6 = __clz(__rbit32(a2));
  if (v6 < 9)
    v7 = ((2 << (char)result) + (char)~byte_1C9832564[9 * (int)result + 18 + v6]) * a3 - 1;
  else
    v7 = byte_1C9832564[9 * (int)result + 9 + v6] - a3;
  LODWORD(v8) = (int)v5 >> 2;
  v9 = *(unsigned __int16 *)(a4 + 2 * v7);
  if ((int)v5 >= 4)
  {
    v10 = 0;
    v11 = 2 << (char)result;
    v12 = a5 + 2 * v11;
    if ((int)v8 <= 1)
      v13 = 1;
    else
      v13 = v8;
    v14 = a4 + 2 * a3 * (v11 - 1) - 2;
    do
    {
      v15 = v10 + 1;
      if (((a2 >> v10) & 1) != 0)
      {
        v16 = -2;
        v17 = (unsigned __int16 *)v14;
        do
        {
          v9 = *v17;
          *(_WORD *)(v12 + v16) = v9;
          v16 -= 2;
          v17 -= a3;
        }
        while (v16 != -10);
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (v11 - 4 * v15)) = vdup_n_s16(v9);
      }
      v12 -= 8;
      v14 -= 8 * a3;
      v10 = v15;
    }
    while (v15 != v13);
    v18 = 0;
    v19 = a5 + 2 * v5;
    v20 = a4 + 2 * a3 * (v5 - 1) - 2;
    do
    {
      v21 = v18 + 1;
      if (((a2 >> v18) & 0x10) != 0)
      {
        v22 = -2;
        v23 = (unsigned __int16 *)v20;
        do
        {
          v9 = *v23;
          *(_WORD *)(v19 + v22) = v9;
          v22 -= 2;
          v23 -= a3;
        }
        while (v22 != -10);
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (v5 - 4 * v21)) = vdup_n_s16(v9);
      }
      v19 -= 8;
      v20 -= 8 * a3;
      v18 = v21;
    }
    while (v21 != v13);
  }
  if ((a2 & 0x100) != 0)
    v9 = *(unsigned __int16 *)(a4 + 2 * ~a3);
  *(_WORD *)(a5 - 2) = v9;
  if ((int)v5 >= 4)
  {
    v24 = 0;
    v25 = 2 << (char)result;
    if ((int)v8 <= 1)
      v8 = 1;
    else
      v8 = v8;
    v26 = a5 + 2 * v25;
    v27 = a4 - 2 * a3;
    do
    {
      if (((a2 >> v24) & 0x200) != 0)
      {
        for (i = 0; i != 8; i += 2)
        {
          v9 = *(unsigned __int16 *)(v27 + i);
          *(_WORD *)(v26 + i) = v9;
        }
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (4 * v24 + v25)) = vdup_n_s16(v9);
      }
      ++v24;
      v26 += 8;
      v27 += 8;
    }
    while (v24 != v8);
    v29 = 0;
    v30 = a5 + 2 * (v25 + (unint64_t)v5);
    v31 = a4 - 2 * a3 + 2 * v5;
    do
    {
      if (((a2 >> v29) & 0x2000) != 0)
      {
        for (j = 0; j != 8; j += 2)
        {
          v9 = *(unsigned __int16 *)(v31 + j);
          *(_WORD *)(v30 + j) = v9;
        }
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (v5 + 4 * v29 + (2 << (char)result))) = vdup_n_s16(v9);
      }
      ++v29;
      v30 += 8;
      v31 += 8;
    }
    while (v29 != v8);
  }
  return result;
}

char *sub_1C975D924(char *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  __int16 *v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  uint64_t v56;
  __int16 *v57;
  __int16 *v58;
  _WORD *v59;
  __int16 v60;
  uint64_t v61;

  if (!a2)
    return (char *)memset((void *)(a5 - 2), 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  v5 = (1 << (char)result);
  if ((int)v5 >= 8)
    v6 = 8;
  else
    v6 = v5;
  v7 = __clz(__rbit32(a2));
  if (v7 < 9)
    v8 = ((2 << (char)result) + (char)~byte_1C9832564[9 * (int)result - 18 + v7]) * a3 - 1;
  else
    v8 = byte_1C9832564[9 * (int)result - 27 + v7] - a3;
  LODWORD(v9) = ((int)v5 + 4) >> 3;
  v10 = *(_WORD *)(a4 + 2 * v8);
  if ((int)v5 >= 4)
  {
    v11 = 0;
    v12 = 2 << (char)result;
    if ((int)v9 <= 1)
      v13 = 1;
    else
      v13 = v9;
    if ((int)v5 >= 8)
      v14 = 8;
    else
      v14 = 1 << (char)result;
    v15 = v14;
    v16 = a5 + 2 * v12;
    v17 = -2 * v14;
    v18 = a4 + 2 * a3 * (v12 - 1);
    v19 = a3 * v14;
    v20 = (__int16 *)(v16 - 2);
    v21 = (__int16 *)(v18 - 2);
    v22 = -(uint64_t)v14;
    do
    {
      if (((a2 >> v11) & 1) != 0)
      {
        v23 = v6 + 1;
        v24 = v21;
        v25 = v20;
        do
        {
          v10 = *v24;
          *v25-- = *v24;
          v24 -= a3;
          --v23;
        }
        while (v23 > 1);
      }
      else
      {
        v26 = v22;
        do
        {
          *(_WORD *)(v16 + 2 * v26) = v10;
          v27 = __CFADD__(v26++, 1);
        }
        while (!v27);
      }
      ++v11;
      v20 = (__int16 *)((char *)v20 + v17);
      v21 -= v19;
      v16 += v17;
    }
    while (v11 != v13);
    v28 = 0;
    v29 = a5 + 2 * v5;
    v30 = -2 * v15;
    if ((1 << (char)result) >= 8uLL)
      v31 = 8;
    else
      v31 = (1 << (char)result);
    v32 = (__int16 *)(v29 - 2);
    v33 = a4 + 2 * a3 * (v5 - 1) - 2;
    v34 = -2 * v19;
    v35 = v31 + 1;
    v36 = -v15;
    do
    {
      if (((a2 >> v28) & 0x10) != 0)
      {
        v37 = v35;
        v38 = (__int16 *)v33;
        v39 = v32;
        do
        {
          v10 = *v38;
          *v39-- = *v38;
          v38 -= a3;
          --v37;
        }
        while (v37 > 1);
      }
      else
      {
        v40 = v36;
        do
        {
          *(_WORD *)(v29 + 2 * v40) = v10;
          v27 = __CFADD__(v40++, 1);
        }
        while (!v27);
      }
      ++v28;
      v32 = (__int16 *)((char *)v32 + v30);
      v33 += v34;
      v29 += v30;
    }
    while (v28 != v13);
  }
  if ((a2 & 0x100) != 0)
    v10 = *(_WORD *)(a4 + 2 * ~a3);
  *(_WORD *)(a5 - 2) = v10;
  if ((int)v5 >= 4)
  {
    v41 = 0;
    v42 = 2 << (char)result;
    v43 = (int)v6;
    if ((int)v6 <= 1)
      v44 = 1;
    else
      v44 = v6;
    v45 = v42;
    if ((int)v9 <= 1)
      v9 = 1;
    else
      v9 = v9;
    v46 = 2 * (int)v6;
    v47 = (__int16 *)(a4 - 2 * a3);
    v48 = v47;
    result = (char *)(a5 + 2 * v42);
    do
    {
      if (((a2 >> v41) & 0x200) != 0)
      {
        v49 = v48;
        v50 = result;
        v51 = v44;
        do
        {
          v52 = *v49++;
          v10 = v52;
          *v50++ = v52;
          --v51;
        }
        while (v51);
      }
      else
      {
        v53 = 0;
        do
          *(_WORD *)&result[2 * v53++] = v10;
        while (v43 != v53);
      }
      ++v41;
      result += v46;
      v48 = (__int16 *)((char *)v48 + v46);
    }
    while (v41 != v9);
    v54 = 0;
    v55 = (_WORD *)(a5 + 2 * (v45 + v5));
    v56 = 2 * v43;
    v57 = &v47[v5];
    do
    {
      if (((a2 >> v54) & 0x2000) != 0)
      {
        v58 = v57;
        v59 = v55;
        result = (char *)v44;
        do
        {
          v60 = *v58++;
          v10 = v60;
          *v59++ = v60;
          --result;
        }
        while (result);
      }
      else
      {
        v61 = 0;
        do
          v55[v61++] = v10;
        while (v43 != v61);
      }
      ++v54;
      v55 = (_WORD *)((char *)v55 + v56);
      v57 = (__int16 *)((char *)v57 + v56);
    }
    while (v54 != v9);
  }
  return result;
}

unsigned __int8 *sub_1C975DC3C(unsigned __int8 *result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  _BYTE *v8;
  int v9;

  v2 = 1;
  do
  {
    v3 = 0;
    v4 = *(result - 2);
    v5 = v2;
    *(_BYTE *)(a2 - 2) = (*result + 2 * v4 + result[32] + 2) >> 2;
    *(_BYTE *)(a2 + 62) = result[62];
    *(_BYTE *)(a2 + 30) = result[30];
    v6 = v4;
    do
    {
      v7 = result[v3];
      v8 = (_BYTE *)(a2 + v3);
      *v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      v9 = result[v3 + 32];
      v8[32] = (v6 + 2 * v9 + result[v3 + 34] + 2) >> 2;
      v3 += 2;
      v4 = v7;
      v6 = v9;
    }
    while (v3 != 30);
    v2 = 0;
    ++result;
    ++a2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int8 *sub_1C975DCE4(unsigned __int8 *result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  _BYTE *v8;
  int v9;

  v2 = 1;
  do
  {
    v3 = 0;
    v4 = *(result - 2);
    v5 = v2;
    *(_BYTE *)(a2 - 2) = (*result + 2 * v4 + result[64] + 2) >> 2;
    *(_BYTE *)(a2 + 126) = result[126];
    *(_BYTE *)(a2 + 62) = result[62];
    v6 = v4;
    do
    {
      v7 = result[v3];
      v8 = (_BYTE *)(a2 + v3);
      *v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      v9 = result[v3 + 64];
      v8[64] = (v6 + 2 * v9 + result[v3 + 66] + 2) >> 2;
      v3 += 2;
      v4 = v7;
      v6 = v9;
    }
    while (v3 != 62);
    v2 = 0;
    ++result;
    ++a2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int8 *sub_1C975DD8C(unsigned __int8 *result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  _BYTE *v8;
  int v9;

  v2 = 1;
  do
  {
    v3 = 0;
    v4 = *(result - 2);
    v5 = v2;
    *(_BYTE *)(a2 - 2) = (*result + 2 * v4 + result[128] + 2) >> 2;
    *(_BYTE *)(a2 + 254) = result[254];
    *(_BYTE *)(a2 + 126) = result[126];
    v6 = v4;
    do
    {
      v7 = result[v3];
      v8 = (_BYTE *)(a2 + v3);
      *v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      v9 = result[v3 + 128];
      v8[128] = (v6 + 2 * v9 + result[v3 + 130] + 2) >> 2;
      v3 += 2;
      v4 = v7;
      v6 = v9;
    }
    while (v3 != 126);
    v2 = 0;
    ++result;
    ++a2;
  }
  while ((v5 & 1) != 0);
  return result;
}

uint64_t sub_1C975DE34(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 1)
  {
    v6 = a6;
    v10 = result;
    v11 = 0;
    v12 = a6 + 1;
    v13 = 8 - a4;
    v18 = a2;
    v14 = 2 * a2;
    do
    {
      if (a2 >= 1)
      {
        v15 = 0;
        do
        {
          result = sub_1C971C898(v10, a4);
          *(_BYTE *)(v6 + v15) = (_DWORD)result << v13;
          v15 += 2;
        }
        while (v14 != v15);
      }
      v6 += a5;
      ++v11;
    }
    while (v11 != a3);
    v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        v17 = 0;
        do
        {
          result = sub_1C971C898(v10, a4);
          *(_BYTE *)(v12 + v17) = (_DWORD)result << v13;
          v17 += 2;
        }
        while (2 * v18 != v17);
      }
      v12 += a5;
      ++v16;
    }
    while (v16 != a3);
  }
  return result;
}

void *sub_1C975DF3C(void *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;

  if (!a2)
    return memset((void *)(a5 - 1), 128, (4 << (char)result) | 1);
  v6 = 1 << (char)result;
  v7 = (1 << (char)result) + 4;
  if (1 << (char)result >= 8)
    v8 = 8;
  else
    v8 = v6;
  v9 = __clz(__rbit32(a2));
  if (v9 < 9)
    v10 = ((2 << (char)result) + (char)~byte_1C9832564[9 * (int)result - 18 + v9]) * a3 - 1;
  else
    v10 = byte_1C9832564[9 * (int)result - 27 + v9] - a3;
  v11 = v7 >> 3;
  v12 = *(unsigned __int8 *)(a4 + v10);
  v63 = (1 << (char)result);
  v55 = v8;
  v56 = (char)result;
  v54 = v7 >> 3;
  if (v6 >= 4)
  {
    v13 = 0;
    v14 = (int)v8;
    v15 = 2 << (char)result;
    if (v11 <= 1)
      v16 = 1;
    else
      v16 = v11;
    if (v6 >= 8)
      v17 = 8;
    else
      v17 = 1 << (char)result;
    v18 = (_BYTE *)(a5 + v15 - 1);
    v19 = -(uint64_t)v17;
    v20 = a4 + a3 * (v15 - 1) - 1;
    v53 = v17;
    v21 = -(a3 * v17);
    v22 = -a3;
    v59 = 2 << (char)result;
    v60 = v8 + 1;
    do
    {
      v23 = v13 + 1;
      if (((a2 >> v13) & 1) != 0)
      {
        v24 = v60;
        v25 = (unsigned __int8 *)v20;
        v26 = v18;
        do
        {
          v12 = *v25;
          *v26-- = v12;
          v25 += v22;
          --v24;
        }
        while (v24 > 1);
      }
      else
      {
        result = memset((void *)(a5 + v59 - v23 * v14), v12, v14);
      }
      v18 += v19;
      v20 += v21;
      v13 = v23;
    }
    while (v23 != v16);
    v27 = 0;
    v28 = 8;
    if (v63 < 8)
      v28 = v63;
    v29 = (_BYTE *)(a5 + v63 - 1);
    v30 = a4 + a3 * (v63 - 1) - 1;
    v61 = v28 + 1;
    do
    {
      v31 = v27 + 1;
      if (((a2 >> v27) & 0x10) != 0)
      {
        v32 = v61;
        v33 = (unsigned __int8 *)v30;
        v34 = v29;
        do
        {
          v12 = *v33;
          *v34-- = v12;
          v33 -= a3;
          --v32;
        }
        while (v32 > 1);
      }
      else
      {
        result = memset((void *)(a5 + v63 - v31 * v14), v12, v14);
      }
      v29 -= v53;
      v30 += v21;
      v27 = v31;
    }
    while (v31 != v16);
  }
  if ((a2 & 0x100) != 0)
    v12 = *(unsigned __int8 *)(a4 + ~a3);
  *(_BYTE *)(a5 - 1) = v12;
  if ((int)v63 >= 4)
  {
    v35 = 0;
    v36 = 2 << v56;
    if (v55 <= 1)
      v37 = 1;
    else
      v37 = v55;
    v38 = v36;
    if (v54 <= 1)
      v39 = 1;
    else
      v39 = v54;
    v40 = (_BYTE *)(a5 + v36);
    v41 = (unsigned __int8 *)(a4 - a3);
    do
    {
      if (((a2 >> v35) & 0x200) != 0)
      {
        v42 = v41;
        v43 = v40;
        v44 = v37;
        do
        {
          v45 = *v42++;
          v12 = v45;
          *v43++ = v45;
          --v44;
        }
        while (v44);
      }
      else
      {
        result = memset((void *)(a5 + v35 * v55 + v38), v12, v55);
      }
      ++v35;
      v40 += v55;
      v41 += v55;
    }
    while (v35 != v39);
    v46 = 0;
    v47 = (_BYTE *)(a5 + v38 + v63);
    v48 = (unsigned __int8 *)(a4 + v63 - a3);
    do
    {
      if (((a2 >> v46) & 0x2000) != 0)
      {
        v49 = v48;
        v50 = v47;
        v51 = v37;
        do
        {
          v52 = *v49++;
          v12 = v52;
          *v50++ = v52;
          --v51;
        }
        while (v51);
      }
      else
      {
        result = memset((void *)(a5 + v63 + v46 * v55 + v38), v12, v55);
      }
      ++v46;
      v47 += v55;
      v48 += v55;
    }
    while (v46 != v39);
  }
  return result;
}

void sub_1C975E2C0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4;

  v4 = 4;
  do
  {
    *a4 = *(_DWORD *)(a2 + 8);
    a4 = (_DWORD *)((char *)a4 + a3);
    --v4;
  }
  while (v4);
}

void sub_1C975E2DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v4;

  v4 = 8;
  do
  {
    *a4 = *(_QWORD *)(a2 + 16);
    a4 = (_QWORD *)((char *)a4 + a3);
    --v4;
  }
  while (v4);
}

__n128 sub_1C975E2F8(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;

  v4 = a2 + 2;
  v5 = 16;
  do
  {
    result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975E318(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;

  v4 = a2 + 4;
  v5 = 32;
  do
  {
    result = *v4;
    v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975E338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = 64;
  do
  {
    result = *(__n128 *)(a2 + 128);
    v6 = *(_OWORD *)(a2 + 144);
    v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += a3;
    --v4;
  }
  while (v4);
  return result;
}

void sub_1C975E360(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t i;

  for (i = 0; i != 4; ++i)
  {
    *a4 = 16843009 * *(unsigned __int8 *)(a2 + i);
    a4 = (_DWORD *)((char *)a4 + a3);
  }
}

void sub_1C975E388(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t i;

  for (i = 0; i != 8; ++i)
  {
    *a4 = 0x101010101010101 * *(unsigned __int8 *)(a2 + i);
    a4 = (_QWORD *)((char *)a4 + a3);
  }
}

void sub_1C975E3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v5;

  for (i = 0; i != 16; ++i)
  {
    v5 = 0x101010101010101 * *(unsigned __int8 *)(a2 + i);
    *a4 = v5;
    a4[1] = v5;
    a4 = (uint64_t *)((char *)a4 + a3);
  }
}

int8x16_t sub_1C975E3D8(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t i;
  const char *v5;
  int8x16_t result;

  for (i = 0; i != 32; ++i)
  {
    v5 = (const char *)(a2 + i);
    result = vld1q_dup_s8(v5);
    *a4 = result;
    a4[1] = result;
    a4 = (int8x16_t *)((char *)a4 + a3);
  }
  return result;
}

int8x16_t sub_1C975E3FC(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t i;
  const char *v5;
  int8x16_t result;

  for (i = 0; i != 64; ++i)
  {
    v5 = (const char *)(a2 + i);
    result = vld1q_dup_s8(v5);
    a4[2] = result;
    a4[3] = result;
    *a4 = result;
    a4[1] = result;
    a4 = (int8x16_t *)((char *)a4 + a3);
  }
  return result;
}

uint64_t sub_1C975E424(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t i;

  if (a2 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 - a3;
    v12 = a2;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        result = sub_1C971C898(v9, a3);
        *(_BYTE *)(a5 + i) = (_DWORD)result << v11;
      }
      a5 += a4;
      ++v10;
    }
    while (v10 != a2);
  }
  return result;
}

uint64_t sub_1C975E4BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (**v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  if ((int)a2 > 9)
  {
    if ((_DWORD)a2 == 10)
    {
      v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 64);
      return (*v6)(a2, a4, a5, a6);
    }
    if ((_DWORD)a2 == 26)
    {
      v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 144);
      return (*v6)(a2, a4, a5, a6);
    }
LABEL_8:
    v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 224);
    return (*v6)(a2, a4, a5, a6);
  }
  if (!(_DWORD)a2)
  {
    v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 264);
    return (*v6)(a2, a4, a5, a6);
  }
  if ((_DWORD)a2 != 1)
    goto LABEL_8;
  v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 304);
  return (*v6)(a2, a4, a5, a6);
}

uint64_t sub_1C975E530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = v11;
  STACK[0x4038] = *MEMORY[0x1E0C80C00];
  v22 = v11 + 64;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t *))(v11
                                                                                                 + 64
                                                                                                 + ((8 * ((v21 & 3) != 0)) | (16 * ((*(_QWORD *)&v21 & 0x30000) != 0)))))(v18, v16, v21, v23, v24, (int)v18, &STACK[0x2020]);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(v22
                                                                                        + ((8 * ((v15 & 3) != 0)) | (16 * ((*(_QWORD *)&v15 & 0x30000) != 0)))))(v19, v17, v15, v13, a9, (int)v19, &v26);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unint64_t *, _QWORD, uint64_t *, uint64_t, uint64_t))(v20 + 160))(v19, v17, (int)v19, &STACK[0x2020], (int)v19, &v26, a10, a11);
}

uint64_t sub_1C975E680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v11;
  STACK[0x8038] = *MEMORY[0x1E0C80C00];
  v20 = v11 + 96;
  v22 = (2 * v21);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t *))(v11
                                                                                                 + 96
                                                                                                 + ((8 * ((v19 & 7) != 0)) | (16 * ((*(_QWORD *)&v19 & 0x70000) != 0)))))(v22, v16, v19, v23, v24, (int)v22, &STACK[0x4020]);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(v20
                                                                                        + ((8 * ((v15 & 7) != 0)) | (16 * ((*(_QWORD *)&v15 & 0x70000) != 0)))))(v22, v17, v15, v13, a9, (int)v22, &v26);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unint64_t *, _QWORD, uint64_t *, uint64_t, uint64_t))(v18 + 168))(v22, v17, (int)v22, &STACK[0x4020], (int)v22, &v26, a10, a11);
}

uint64_t sub_1C975E7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v12 = MEMORY[0x1E0C80A78]();
  v26 = v13;
  v25 = v14;
  v16 = v15;
  v18 = v17;
  v19 = v12;
  STACK[0x4058] = *MEMORY[0x1E0C80C00];
  v21 = v12 + 64;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t *))(v12
                                                                                                 + 64
                                                                                                 + ((8 * ((v20 & 3) != 0)) | (16 * ((*(_QWORD *)&v20 & 0x30000) != 0)))))(v17, v15, v20, v22, v23, (int)v17, &STACK[0x2040]);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(v21
                                                                                        + ((8 * ((a10 & 3) != 0)) | (16 * ((a10 & 0x30000) != 0)))))(v18, v16, a10, a11, a12, (int)v18, &v27);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t *, uint64_t, _QWORD))(v19 + 144))(v18, v16, v25, v26, (int)v18, &STACK[0x2040], a9, (int)v18);
}

uint64_t sub_1C975E948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v12 = MEMORY[0x1E0C80A78]();
  v26 = v13;
  v25 = v14;
  v16 = v15;
  v17 = v12;
  STACK[0x8058] = *MEMORY[0x1E0C80C00];
  v19 = v12 + 96;
  v21 = (2 * v20);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, unint64_t *))(v12
                                                                                                 + 96
                                                                                                 + ((8 * ((v18 & 7) != 0)) | (16 * ((*(_QWORD *)&v18 & 0x70000) != 0)))))(v21, v15, v18, v22, v23, (int)v21, &STACK[0x4040]);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(v19
                                                                                        + ((8 * ((a10 & 7) != 0)) | (16 * ((a10 & 0x70000) != 0)))))(v21, v16, a10, a11, a12, (int)v21, &v27);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t *, uint64_t, _QWORD))(v17 + 152))(v21, v16, v25, v26, (int)v21, &STACK[0x4040], a9, (int)v21);
}

uint64_t sub_1C975EAC0()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975EB1C()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975EB78()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975EBD4()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975EC30(_QWORD *a1)
{
  *a1 = sub_1C9773848;
  a1[1] = sub_1C97738F8;
  a1[2] = sub_1C9773A9C;
  a1[3] = sub_1C9773ECC;
  a1[8] = sub_1C97746CC;
  a1[9] = sub_1C97747A4;
  a1[10] = sub_1C9774948;
  a1[11] = sub_1C9774D78;
  a1[20] = sub_1C9769F3C;
  a1[16] = sub_1C976A084;
  a1[18] = sub_1C976A1D0;
  return 0;
}

uint64_t sub_1C975ECAC(_QWORD *a1)
{
  a1[4] = sub_1C9773848;
  a1[5] = sub_1C977556C;
  a1[6] = sub_1C97756BC;
  a1[7] = sub_1C9775948;
  a1[12] = sub_1C97746CC;
  a1[13] = sub_1C9775CC8;
  a1[14] = sub_1C9775E18;
  a1[15] = sub_1C97760A4;
  a1[21] = sub_1C9769F3C;
  a1[17] = sub_1C976A084;
  a1[19] = sub_1C976A1D0;
  return 0;
}

uint64_t sub_1C975ED28()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975ED84()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975EDE0()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975EE3C()
{
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1C975EE98(_QWORD *a1)
{
  *a1 = sub_1C97637D0;
  a1[1] = sub_1C9763890;
  a1[2] = sub_1C9763A38;
  a1[3] = sub_1C9763EB0;
  a1[8] = sub_1C976478C;
  a1[9] = sub_1C9764874;
  a1[10] = sub_1C9764A1C;
  a1[11] = sub_1C9764E94;
  a1[20] = sub_1C9765764;
  a1[16] = sub_1C97658AC;
  a1[18] = sub_1C97659F8;
  return 0;
}

uint64_t sub_1C975EF14(_QWORD *a1)
{
  a1[4] = sub_1C97637D0;
  a1[5] = sub_1C976EBF4;
  a1[6] = sub_1C976ED44;
  a1[7] = sub_1C976EFE4;
  a1[12] = sub_1C976478C;
  a1[13] = sub_1C976F388;
  a1[14] = sub_1C976F4D8;
  a1[15] = sub_1C976F778;
  a1[21] = sub_1C9765764;
  a1[17] = sub_1C97658AC;
  a1[19] = sub_1C97659F8;
  return 0;
}

uint64_t sub_1C975EF90(_QWORD *a1)
{
  *a1 = sub_1C9765BC4;
  a1[1] = sub_1C9765C84;
  a1[2] = sub_1C9765E2C;
  a1[3] = sub_1C97662A4;
  a1[8] = sub_1C9766B9C;
  a1[9] = sub_1C9766C84;
  a1[10] = sub_1C9766E2C;
  a1[11] = sub_1C97672A4;
  a1[20] = sub_1C9767B90;
  a1[16] = sub_1C9767CD8;
  a1[18] = sub_1C9767E24;
  return 0;
}

uint64_t sub_1C975F00C(_QWORD *a1)
{
  a1[4] = sub_1C9765BC4;
  a1[5] = sub_1C976FB10;
  a1[6] = sub_1C976FC60;
  a1[7] = sub_1C976FF00;
  a1[12] = sub_1C9766B9C;
  a1[13] = sub_1C97702B0;
  a1[14] = sub_1C9770400;
  a1[15] = sub_1C97706A0;
  a1[21] = sub_1C9767B90;
  a1[17] = sub_1C9767CD8;
  a1[19] = sub_1C9767E24;
  return 0;
}

uint64_t sub_1C975F088(_QWORD *a1)
{
  *a1 = sub_1C9767FF0;
  a1[1] = sub_1C97680B0;
  a1[2] = sub_1C9768268;
  a1[3] = sub_1C97686E8;
  a1[8] = sub_1C9768F88;
  a1[9] = sub_1C9769070;
  a1[10] = sub_1C9769228;
  a1[11] = sub_1C97696A8;
  a1[20] = sub_1C9769F3C;
  a1[16] = sub_1C976A084;
  a1[18] = sub_1C976A1D0;
  return 0;
}

uint64_t sub_1C975F104(_QWORD *a1)
{
  a1[4] = sub_1C9767FF0;
  a1[5] = sub_1C9770A44;
  a1[6] = sub_1C9770BA4;
  a1[7] = sub_1C9770E58;
  a1[12] = sub_1C9768F88;
  a1[13] = sub_1C9771218;
  a1[14] = sub_1C9771378;
  a1[15] = sub_1C977162C;
  a1[21] = sub_1C9769F3C;
  a1[17] = sub_1C976A084;
  a1[19] = sub_1C976A1D0;
  return 0;
}

uint64_t sub_1C975F180(_QWORD *a1)
{
  *a1 = sub_1C976A39C;
  a1[1] = sub_1C976A45C;
  a1[2] = sub_1C976A604;
  a1[3] = sub_1C976AA7C;
  a1[8] = sub_1C976B374;
  a1[9] = sub_1C976B45C;
  a1[10] = sub_1C976B604;
  a1[11] = sub_1C976BA7C;
  a1[20] = sub_1C976C368;
  a1[16] = sub_1C976C4B0;
  a1[18] = sub_1C976C5FC;
  return 0;
}

uint64_t sub_1C975F1FC(_QWORD *a1)
{
  a1[4] = sub_1C976A39C;
  a1[5] = sub_1C97719E0;
  a1[6] = sub_1C9771B30;
  a1[7] = sub_1C9771DD0;
  a1[12] = sub_1C976B374;
  a1[13] = sub_1C9772180;
  a1[14] = sub_1C97722D0;
  a1[15] = sub_1C9772570;
  a1[21] = sub_1C976C368;
  a1[17] = sub_1C976C4B0;
  a1[19] = sub_1C976C5FC;
  return 0;
}

uint64_t sub_1C975F278(_QWORD *a1)
{
  *a1 = sub_1C976C7C8;
  a1[1] = sub_1C976C888;
  a1[2] = sub_1C976CA30;
  a1[3] = sub_1C976CEA8;
  a1[8] = sub_1C976D7A0;
  a1[9] = sub_1C976D888;
  a1[10] = sub_1C976DA30;
  a1[11] = sub_1C976DEA8;
  a1[20] = sub_1C976E794;
  a1[16] = sub_1C976E8DC;
  a1[18] = sub_1C976EA28;
  return 0;
}

uint64_t sub_1C975F2F4(_QWORD *a1)
{
  a1[4] = sub_1C976C7C8;
  a1[5] = sub_1C9772914;
  a1[6] = sub_1C9772A64;
  a1[7] = sub_1C9772D04;
  a1[12] = sub_1C976D7A0;
  a1[13] = sub_1C97730B4;
  a1[14] = sub_1C9773204;
  a1[15] = sub_1C97734A4;
  a1[21] = sub_1C976E794;
  a1[17] = sub_1C976E8DC;
  a1[19] = sub_1C976EA28;
  return 0;
}

unint64_t sub_1C975F370(unint64_t result, int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  _DWORD *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  int v23;
  _OWORD *v24;
  __int128 v26;
  __int128 v36;
  __int128 v37;
  __int128 v43;
  __int128 v44;
  __int128 v50;
  __int128 v51;
  _OWORD *v56;
  _OWORD *v57;
  _OWORD *v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  int v63;
  char *v64;
  __int128 v73;
  __int128 v74;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v84;
  __int128 v85;
  __int128 v89;
  _OWORD *v93;
  _OWORD *v94;
  _OWORD *v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t *v100;
  uint64_t v103;
  uint64_t v104;
  uint64_t v108;
  _QWORD *v112;
  int v113;
  int v114;
  _DWORD *v115;
  int v117;

  v7 = 4 * a4;
  if ((int)result < 32)
  {
    v13 = a7;
    v12 = a5;
    v59 = result;
  }
  else
  {
    v8 = 0;
    v117 = a2 + 4;
    v9 = &a5[4 * a4];
    v10 = v9 + 31;
    v11 = &v9[a4];
    v12 = a5;
    v13 = a7;
    do
    {
      v14 = &a5[a4];
      v15 = v11;
      v16 = v10;
      v17 = &a5[2 * a4];
      v18 = &a5[6 * a4];
      v19 = a5;
      v20 = a7;
      v21 = &a5[3 * a4];
      v22 = (uint64_t)&a5[8 * a4 - a4];
      v23 = v117;
      do
      {
        v24 = &v20[v8 / 4];
        _X1 = &v19[v8 / 4];
        v26 = *(_OWORD *)&v19[v8 / 4 + 4];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = &v16[v8];
        __asm
        {
          PRFUM           #0, [X1,#-0x1F]
          PRFM            #0, [X1]
        }
        _X1 = &v14[v8];
        v36 = *(_OWORD *)&v14[v8];
        v37 = *(_OWORD *)&v14[v8 + 16];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = &v15[v8];
        __asm
        {
          PRFM            #0, [X1]
          PRFUM           #0, [X1,#0x1F]
        }
        _X1 = &v17[v8];
        v43 = *(_OWORD *)&v17[v8];
        v44 = *(_OWORD *)&v17[v8 + 16];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = &v18[v8];
        __asm
        {
          PRFM            #0, [X1]
          PRFUM           #0, [X1,#0x1F]
        }
        _X1 = &v21[v8];
        v50 = *(_OWORD *)&v21[v8];
        v51 = *(_OWORD *)&v21[v8 + 16];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = v22 + v8;
        __asm
        {
          PRFM            #0, [X1]
          PRFUM           #0, [X1,#0x1F]
        }
        v56 = (_OWORD *)((char *)&v20[v8 / 4] + a6);
        *v24 = *(_OWORD *)&v19[v8 / 4];
        v24[1] = v26;
        v57 = (_OWORD *)((char *)v56 + a6);
        *v56 = v36;
        v56[1] = v37;
        v58 = (_OWORD *)((char *)v56 + a6 + a6);
        v23 -= 4;
        v22 += v7;
        v21 += v7;
        v20 += a6;
        v19 = (_DWORD *)((char *)v19 + v7);
        v18 += v7;
        *v57 = v43;
        v57[1] = v44;
        v17 += v7;
        v16 += v7;
        v15 += v7;
        v14 += v7;
        *v58 = v50;
        v58[1] = v51;
      }
      while (v23 > 4);
      v12 += 32;
      v13 += 8;
      v59 = result - 32;
      v8 += 32;
      v60 = (int)result <= 63;
      result = (result - 32);
    }
    while (!v60);
  }
  v61 = 2 * a4;
  if ((v59 & 0x10) == 0)
  {
    v62 = a2;
    if ((v59 & 8) == 0)
      goto LABEL_18;
    goto LABEL_15;
  }
  v62 = a2;
  v63 = a2 + 4;
  v64 = v12;
  result = (unint64_t)v13;
  do
  {
    _X1 = &v64[v7];
    _X4 = &v64[a4];
    _X6 = &v64[5 * a4];
    _X7 = &v64[v61];
    _X19 = &v64[6 * a4];
    _X20 = &v64[3 * a4];
    _X21 = &v64[7 * a4];
    v73 = *(_OWORD *)v64;
    _X2 = v64 + 31;
    v74 = v73;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#0xF]
    }
    v78 = &_X4[2 * a4];
    v79 = *(_OWORD *)_X4;
    _X4 += 31;
    v80 = v79;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X6]
      PRFUM           #0, [X6,#0xF]
    }
    v84 = *(_OWORD *)_X7;
    _X7 += 31;
    v85 = v84;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0xF]
    }
    v89 = *(_OWORD *)_X20;
    _X20 += 31;
    __asm
    {
      PRFM            #0, [X20]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    v64 = &v78[a4];
    *(_OWORD *)result = v74;
    v93 = (_OWORD *)(result + a6);
    *v93 = v80;
    v94 = (_OWORD *)((char *)v93 + a6);
    v95 = (_OWORD *)((char *)v94 + a6);
    *v94 = v85;
    result = (unint64_t)v94 + a6 + a6;
    v63 -= 4;
    *v95 = v89;
  }
  while (v63 > 4);
  v12 += 16;
  v13 += 4;
  if ((v59 & 8) != 0)
  {
LABEL_15:
    v96 = v62 + 2;
    v97 = v12;
    v98 = v13;
    do
    {
      _X17 = (char *)v97 + v7;
      v100 = (_QWORD *)((char *)v97 + a4);
      _X1 = (char *)v97 + 5 * a4;
      v103 = *v97;
      _X16 = (char *)v97 + 15;
      v104 = v103;
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      v97 = (uint64_t *)((char *)v100 + a4);
      v108 = *v100;
      result = (unint64_t)v100 + 15;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X1,#7]
      }
      *v98 = v104;
      v112 = (_QWORD *)((char *)v98 + a6);
      *v112 = v108;
      v98 = (_QWORD *)((char *)v112 + a6);
      v96 -= 2;
    }
    while (v96 > 2);
    v12 += 8;
    v13 += 2;
  }
LABEL_18:
  if ((v59 & 4) != 0)
  {
    v113 = v62 + 2;
    do
    {
      v114 = *(_DWORD *)&v12[a4];
      *v13 = *(_DWORD *)v12;
      v115 = (_DWORD *)((char *)v13 + a6);
      *v115 = v114;
      v13 = (_DWORD *)((char *)v115 + a6);
      v12 += v61;
      v113 -= 2;
    }
    while (v113 > 2);
  }
  return result;
}

uint64_t sub_1C975F670(uint64_t result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int8x16_t *a7)
{
  int8x8_t v7;
  int8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  int v17;
  int8x8_t *v18;
  int8x16_t *v19;
  int8x8_t v20;
  int8x16_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  int8x8_t v25;
  int v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  int8x8_t *v36;
  int8x16_t v37;
  int8x8_t v46;
  int v47;
  uint8x8_t v48;
  uint8x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint8x8_t v52;
  uint8x8_t v53;
  uint8x8_t v54;
  uint8x8_t v55;
  int8x16_t v56;

  if ((int)result < 16)
  {
    v22 = result;
  }
  else
  {
    v7 = qword_1C98325B0[(a3 & 3) - 1];
    v8 = (int8x8_t *)(_X4 + 5);
    v9 = (uint8x8_t)vdup_lane_s8(v7, 0);
    v10 = (uint8x8_t)vdup_lane_s8(v7, 1);
    v11 = (uint8x8_t)vdup_lane_s8(v7, 2);
    v12 = (uint8x8_t)vdup_lane_s8(v7, 3);
    v13 = (uint8x8_t)vdup_lane_s8(v7, 4);
    v14 = (uint8x8_t)vdup_lane_s8(v7, 5);
    v15 = (uint8x8_t)vdup_lane_s8(v7, 6);
    v16 = (uint8x8_t)vdup_lane_s8(v7, 7);
    do
    {
      v17 = a2 + 1;
      v18 = v8;
      v19 = a7;
      do
      {
        v20 = v18[-1];
        v21 = *(int8x16_t *)v18->i8;
        *v19 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v20, *v18, 1uLL), v10), (uint8x8_t)v20, v9), (uint8x8_t)vext_s8(v20, *v18, 2uLL), v11), (uint8x8_t)vext_s8(v20, *v18, 3uLL), v12), (uint8x8_t)vext_s8(v20, *v18, 4uLL), v13), (uint8x8_t)vext_s8(v20, *v18, 6uLL), v15),
                                  (uint8x8_t)vext_s8(v20, *v18, 5uLL),
                                  v14),
                                (uint8x8_t)vext_s8(v20, *v18, 7uLL),
                                v16),
                   6uLL),
                 (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 1uLL), v10), (uint8x8_t)*v18, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 3uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 5uLL), v14),
                              (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 7uLL),
                              v16),
                 6uLL);
        v19 = (int8x16_t *)((char *)v19 + a6);
        v18 = (int8x8_t *)((char *)v18 + a4);
        --v17;
      }
      while (v17 > 1);
      ++a7;
      _X4 += 16;
      v22 = result - 16;
      v8 += 2;
      v23 = (int)result <= 31;
      result = (result - 16);
    }
    while (!v23);
  }
  v24 = 4 * a4;
  if ((v22 & 8) != 0)
  {
    v25 = qword_1C98325B0[(a3 & 3) - 1];
    v26 = a2 + 1;
    v27 = (uint8x8_t)vdup_lane_s8(v25, 0);
    v28 = (uint8x8_t)vdup_lane_s8(v25, 1);
    v29 = (uint8x8_t)vdup_lane_s8(v25, 2);
    v30 = (uint8x8_t)vdup_lane_s8(v25, 3);
    v31 = (uint8x8_t)vdup_lane_s8(v25, 4);
    v32 = (uint8x8_t)vdup_lane_s8(v25, 5);
    v33 = (uint8x8_t)vdup_lane_s8(v25, 6);
    v34 = (uint8x8_t)vdup_lane_s8(v25, 7);
    _X12 = _X4;
    v36 = (int8x8_t *)a7;
    do
    {
      v37 = *(int8x16_t *)(_X12 - 3);
      __asm { PRFUM           #0, [X12,#0x1C] }
      _X14 = _X12 + v24;
      __asm
      {
        PRFUM           #0, [X14,#-3]
        PRFUM           #0, [X14,#0xC]
      }
      *v36 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 1uLL), v28), *(uint8x8_t *)v37.i8, v27), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 2uLL), v29), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 3uLL), v30), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 4uLL), v31), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 6uLL), v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 5uLL),
                              v32),
                            (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 7uLL),
                            v34),
               6uLL);
      v36 = (int8x8_t *)((char *)v36 + a6);
      _X12 += a4;
      --v26;
    }
    while (v26 > 1);
    a7 = (int8x16_t *)((char *)a7 + 8);
    _X4 += 8;
  }
  if ((v22 & 4) != 0)
  {
    v46 = qword_1C98325B0[(a3 & 3) - 1];
    v47 = a2 + 1;
    v48 = (uint8x8_t)vdup_lane_s8(v46, 0);
    v49 = (uint8x8_t)vdup_lane_s8(v46, 1);
    v50 = (uint8x8_t)vdup_lane_s8(v46, 2);
    v51 = (uint8x8_t)vdup_lane_s8(v46, 3);
    v52 = (uint8x8_t)vdup_lane_s8(v46, 4);
    v53 = (uint8x8_t)vdup_lane_s8(v46, 5);
    v54 = (uint8x8_t)vdup_lane_s8(v46, 6);
    v55 = (uint8x8_t)vdup_lane_s8(v46, 7);
    do
    {
      v56 = *(int8x16_t *)(_X4 - 3);
      __asm { PRFUM           #0, [X4,#0x1C] }
      _X10 = _X4 + v24;
      __asm
      {
        PRFUM           #0, [X10,#-3]
        PRFUM           #0, [X10,#0xC]
      }
      a7->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 1uLL), v49), *(uint8x8_t *)v56.i8, v48), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 2uLL), v50), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 3uLL), v51), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 4uLL), v52), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 6uLL), v54), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 5uLL),
                                    v53),
                                  (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 7uLL),
                                  v55),
                     6uLL).u32[0];
      a7 = (int8x16_t *)((char *)a7 + a6);
      _X4 += a4;
      --v47;
    }
    while (v47 > 1);
  }
  return result;
}

uint64_t sub_1C975F8DC(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, int8x8_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x8_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  int8x8_t *v25;
  uint8x16_t v29;
  uint8x16_t *v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint8x16_t v46;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t *v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint8x16_t v67;
  uint8x16_t *v68;
  uint8x16_t v74;
  uint8x8_t *v75;
  char *v76;
  char *v78;
  char *v79;
  int v81;
  int8x8_t *v82;
  char *v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  char v103;
  BOOL v104;
  uint64_t v105;
  uint8x8_t v109;
  uint8x8_t v110;
  int8x8_t v111;
  uint8x8_t v117;
  uint8x8_t v118;
  uint8x8_t *v123;
  uint8x8_t v124;
  uint8x8_t v125;
  uint8x8_t v131;
  uint8x8_t v138;
  uint8x8_t v139;
  uint8x8_t v145;
  uint8x8_t v146;
  uint8x8_t v151;
  uint8x8_t v152;
  int v156;
  uint8x8_t v157;
  uint8x8_t v158;
  uint8x8_t v159;
  uint8x8_t v160;
  uint8x8_t v161;
  uint8x8_t v162;
  uint8x8_t v163;
  uint8x8_t *v164;
  int8x8_t *v165;
  uint8x8_t v166;
  uint16x8_t v174;
  uint16x8_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  uint16x8_t v182;
  uint16x8_t v183;
  uint16x8_t v184;
  uint8x8_t v185;
  uint16x8_t v189;
  uint16x8_t v190;
  uint16x8_t v191;
  uint16x8_t v192;
  uint8x8_t v193;
  uint16x8_t v197;
  uint16x8_t v198;
  uint16x8_t v199;
  uint8x8_t v200;
  int8x8_t *v204;
  int8x8_t *v205;
  int8x8_t *v206;
  int8x8_t v207;
  uint8x8_t v211;
  uint8x8_t v212;
  uint8x8_t *v217;
  uint8x8_t v218;
  uint8x8_t v219;
  uint8x8_t v225;
  uint8x8_t v232;
  uint8x8_t v233;
  uint8x8_t *v238;
  uint8x8_t v239;
  uint8x8_t v240;
  uint8x8_t v246;
  uint8x8_t v252;
  uint8x8_t v253;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint8x8_t v264;
  uint8x8_t v265;
  uint8x8_t v266;
  uint8x8_t v267;
  uint8x8_t v268;
  uint8x8_t v269;
  uint8x8_t v270;
  uint8x8_t v271;
  uint16x8_t v279;
  uint16x8_t v280;
  uint16x8_t v281;
  uint16x8_t v282;
  uint16x8_t v287;
  uint16x8_t v288;
  uint16x8_t v289;
  uint8x8_t v290;
  uint16x8_t v294;
  uint16x8_t v295;
  uint16x8_t v296;
  uint16x8_t v297;
  uint8x8_t v298;
  uint16x8_t v302;
  uint16x8_t v303;
  uint16x8_t v304;
  uint8x8_t v305;
  int16x8_t v309;
  int16x8_t v310;
  int8x8_t *v311;
  int8x8_t *v312;

  v7 = (a3 >> 16) & 3;
  v8 = 4 * a4;
  if ((int)result < 16)
  {
    v25 = a7;
    v103 = result;
  }
  else
  {
    v9 = 0;
    v10 = qword_1C98325B0[v7 - 1];
    v11 = 2 * a6;
    v12 = (char *)a5 + 9 * a4;
    v13 = 2 * a4;
    v14 = (char *)a5 + 5 * a4;
    v15 = (char *)a5 + 4 * a4;
    v16 = (uint8x16_t)vdupq_lane_s8(v10, 0);
    v17 = (uint8x16_t)vdupq_lane_s8(v10, 1);
    v18 = (uint8x16_t)vdupq_lane_s8(v10, 2);
    v19 = (uint8x16_t)vdupq_lane_s8(v10, 3);
    v20 = (uint8x16_t)vdupq_lane_s8(v10, 4);
    v21 = (uint8x16_t)vdupq_lane_s8(v10, 5);
    v22 = &a5[a4];
    v23 = (uint8x16_t)vdupq_lane_s8(v10, 6);
    v24 = (uint8x16_t)vdupq_lane_s8(v10, 7);
    v25 = a7;
    do
    {
      _X22 = (char *)a5 + v8 + -3 * a4;
      _X23 = (_OWORD *)((char *)a5 + a4 + -3 * a4);
      _X21 = (uint64_t)&a5[3] - 3 * a4 + 7;
      v29 = *(uint8x16_t *)&a5->i8[-3 * a4];
      __asm
      {
        PRFM            #0, [X21]
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0xF]
      }
      _X21 = (char *)_X23 + v8;
      v38 = (uint8x16_t *)((char *)_X23 + a4);
      v39 = *(uint8x16_t *)_X23;
      _X23 = (_OWORD *)((char *)_X23 + 31);
      v40 = v39;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &v38->i8[v8];
      _X23 = &v38[1].i8[15];
      v46 = *v38;
      _X22 = &v38->i8[a4];
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &_X22[v8];
      _X23 = &_X22[a4];
      v53 = *(uint8x16_t *)_X22;
      _X22 += 31;
      v54 = v53;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &_X23[v8];
      v59 = (uint8x16_t *)&_X23[a4];
      v60 = *(uint8x16_t *)_X23;
      _X23 += 31;
      v61 = v60;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &v59->i8[v8];
      _X23 = &v59[1].i8[15];
      v67 = *v59;
      v68 = (uint8x16_t *)((char *)v59 + a4);
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
      }
      _X27 = &v68->i8[v8];
      __asm { PRFUM           #0, [X21,#0xF] }
      _X23 = &v68[1].i8[15];
      v74 = *v68;
      v75 = v22;
      v76 = v15;
      __asm { PRFM            #0, [X23] }
      v78 = v14;
      v79 = v12;
      __asm { PRFM            #0, [X27] }
      v81 = a2 + 2;
      v82 = a7;
      __asm { PRFUM           #0, [X27,#0xF] }
      v84 = (char *)a7 + a6;
      do
      {
        v85 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v40.i8, *(uint8x8_t *)v16.i8);
        v86 = vmlsl_high_u8(vmull_high_u8(v46, v17), v40, v16);
        v87 = vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v40.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v16.i8), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v18.i8);
        v88 = vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v40, v17), v29, v16), v46, v18);
        v29 = v46;
        v46 = v61;
        v61 = v74;
        v89 = vmlal_u8(v87, *(uint8x8_t *)v54.i8, *(uint8x8_t *)v19.i8);
        v90 = vmlal_high_u8(v88, v54, v19);
        v91 = vmlsl_u8(v85, *(uint8x8_t *)v54.i8, *(uint8x8_t *)v18.i8);
        v92 = vmlsl_high_u8(v86, v54, v18);
        v40 = v54;
        v54 = v67;
        _X28 = (uint64_t)&v76[v9 + 31];
        v67 = *(uint8x16_t *)&v76[v9];
        __asm { PRFM            #0, [X28] }
        _X28 = &v75[v9 / 8];
        __asm
        {
          PRFM            #0, [X28]
          PRFUM           #0, [X28,#0xF]
        }
        _X28 = (uint64_t)&v78[v9 + 31];
        v74 = *(uint8x16_t *)&v78[v9];
        _X30 = &v79[v9];
        __asm
        {
          PRFM            #0, [X28]
          PRFM            #0, [X30]
          PRFUM           #0, [X30,#0xF]
        }
        *(int8x16_t *)v82[v9 / 8].i8 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v89, *(uint8x8_t *)v46.i8, *(uint8x8_t *)v20.i8), *(uint8x8_t *)v61.i8, *(uint8x8_t *)v23.i8), *(uint8x8_t *)v54.i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v67.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v90, v46, v20), v61, v23), v54, v21), v67, v24),
                                         6uLL);
        *(int8x16_t *)&v84[v9] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(v91, *(uint8x8_t *)v46.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v54.i8, *(uint8x8_t *)v20.i8), *(uint8x8_t *)v67.i8, *(uint8x8_t *)v23.i8), *(uint8x8_t *)v61.i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v74.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(v92, v46, v19), v54, v20),
                                                    v67,
                                                    v23),
                                                  v61,
                                                  v21),
                                                v74,
                                                v24),
                                   6uLL);
        v82 = (int8x8_t *)((char *)v82 + v11);
        v84 += v11;
        v81 -= 2;
        v79 += v13;
        v78 += v13;
        v76 += v13;
        v75 = (uint8x8_t *)((char *)v75 + v13);
      }
      while (v81 > 2);
      v25 += 2;
      a5 += 2;
      v103 = result - 16;
      v9 += 16;
      v104 = (int)result <= 31;
      result = (result - 16);
    }
    while (!v104);
  }
  v105 = a4;
  if ((v103 & 8) != 0)
  {
    _X13 = (uint8x8_t *)((char *)a5 - 3 * a4);
    _X14 = (char *)_X13 + 4 * a4;
    _X15 = (uint8x8_t *)((char *)_X13 + a4);
    v109 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    v110 = v109;
    v111 = qword_1C98325B0[v7 - 1];
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    _X13 = (char *)_X15 + 4 * a4;
    _X14 = (uint8x8_t *)((char *)_X15 + a4);
    v117 = *_X15;
    _X15 = (uint8x8_t *)((char *)_X15 + 15);
    v118 = v117;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X14 + 4 * a4;
    v123 = (uint8x8_t *)((char *)_X14 + a4);
    v124 = *_X14;
    _X14 = (uint8x8_t *)((char *)_X14 + 15);
    v125 = v124;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)v123 + 4 * a4;
    _X14 = (char *)&v123[1] + 7;
    v131 = *v123;
    _X15 = (uint8x8_t *)((char *)v123 + a4);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X15 + 4 * a4;
    _X14 = (uint8x8_t *)((char *)_X15 + a4);
    v138 = *_X15;
    _X15 = (uint8x8_t *)((char *)_X15 + 15);
    v139 = v138;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X14 + 4 * a4;
    _X15 = (uint8x8_t *)((char *)_X14 + a4);
    v145 = *_X14;
    _X14 = (uint8x8_t *)((char *)_X14 + 15);
    v146 = v145;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X15 + 4 * a4;
    v151 = *_X15;
    _X15 = (uint8x8_t *)((char *)_X15 + 15);
    v152 = v151;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    v156 = a2 + 4;
    result = 6 * a4;
    v157 = (uint8x8_t)vdup_lane_s8(v111, 1);
    v158 = (uint8x8_t)vdup_lane_s8(v111, 0);
    v159 = (uint8x8_t)vdup_lane_s8(v111, 2);
    v160 = (uint8x8_t)vdup_lane_s8(v111, 3);
    v161 = (uint8x8_t)vdup_lane_s8(v111, 4);
    v162 = (uint8x8_t)vdup_lane_s8(v111, 5);
    v163 = (uint8x8_t)vdup_lane_s8(v111, 6);
    v164 = a5;
    v165 = v25;
    v166 = (uint8x8_t)vdup_lane_s8(v111, 7);
    do
    {
      _X26 = &v164[v105];
      _X25 = (uint8x8_t *)((char *)v164 + 5 * a4);
      _X24 = (char *)v164 + 9 * a4;
      _X23 = (uint8x8_t *)((char *)v164 + result);
      _X22 = (char *)v164 + 10 * a4;
      _X19 = (uint8x8_t *)((char *)v164 + 7 * a4);
      _X7 = (char *)v164 + 11 * a4;
      v164 = (uint8x8_t *)((char *)v164 + v8);
      v174 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v118, v157), v110, v158), v125, v159), v131, v160);
      v175 = vmlsl_u8(vmlsl_u8(vmull_u8(v125, v157), v118, v158), v131, v159);
      v176 = vmull_u8(v131, v157);
      v177 = vmlsl_u8(vmull_u8(v139, v157), v131, v158);
      _X27 = (char *)&v164[1] + 7;
      v131 = *v164;
      __asm
      {
        PRFM            #0, [X27]
        PRFM            #0, [X26]
        PRFUM           #0, [X26,#7]
      }
      v182 = vmlal_u8(v174, v139, v161);
      v183 = vmlal_u8(v175, v139, v160);
      v184 = vmlsl_u8(vmlsl_u8(v176, v125, v158), v139, v159);
      v110 = v139;
      v185 = *_X25;
      _X25 = (uint8x8_t *)((char *)_X25 + 15);
      v139 = v185;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X24]
        PRFUM           #0, [X24,#7]
      }
      v189 = vmlsl_u8(vmlal_u8(v182, v152, v163), v146, v162);
      v190 = vmlal_u8(v183, v146, v161);
      v191 = vmlal_u8(v184, v146, v160);
      v192 = vmlsl_u8(v177, v146, v159);
      v118 = v146;
      v193 = *_X23;
      _X23 = (uint8x8_t *)((char *)_X23 + 15);
      v146 = v193;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#7]
      }
      v197 = vmlsl_u8(vmlal_u8(v190, *v164, v163), v152, v162);
      v198 = vmlal_u8(v191, v152, v161);
      v199 = vmlal_u8(v192, v152, v160);
      v125 = v152;
      v200 = *_X19;
      _X19 = (uint8x8_t *)((char *)_X19 + 15);
      v152 = v200;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      *(int8x8_t *)v198.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v198, v139, v163), *v164, v162), v146, v166), 6uLL);
      *(int8x8_t *)v199.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v199, *v164, v161), v146, v163), v139, v162), v200, v166), 6uLL);
      *v165 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v189, *v164, v166), 6uLL);
      v204 = (int8x8_t *)((char *)v165 + a6);
      *v204 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v197, v139, v166), 6uLL);
      v205 = (int8x8_t *)((char *)v204 + a6);
      *v205 = *(int8x8_t *)v198.i8;
      v206 = (int8x8_t *)((char *)v205 + a6);
      *v206 = *(int8x8_t *)v199.i8;
      v165 = (int8x8_t *)((char *)v206 + a6);
      v156 -= 4;
    }
    while (v156 > 4);
    ++v25;
    ++a5;
  }
  if ((v103 & 4) != 0)
  {
    v207 = qword_1C98325B0[v7 - 1];
    _X10 = (uint8x8_t *)((char *)a5 - 3 * a4);
    _X11 = (char *)_X10 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X10 + a4);
    v211 = *_X10;
    _X10 = (uint8x8_t *)((char *)_X10 + 15);
    v212 = v211;
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X10 = (char *)_X13 + 4 * a4;
    v217 = (uint8x8_t *)((char *)_X13 + a4);
    v218 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    v219 = v218;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)v217 + 4 * a4;
    _X13 = (char *)&v217[1] + 7;
    v225 = *v217;
    _X11 = (uint8x8_t *)((char *)v217 + a4);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)_X11 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X11 + a4);
    v232 = *_X11;
    _X11 = (uint8x8_t *)((char *)_X11 + 15);
    v233 = v232;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)_X13 + 4 * a4;
    v238 = (uint8x8_t *)((char *)_X13 + a4);
    v239 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    v240 = v239;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)v238 + 4 * a4;
    _X13 = (char *)&v238[1] + 7;
    v246 = *v238;
    _X11 = (uint8x8_t *)((char *)v238 + a4);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)_X11 + 4 * a4;
    v252 = *_X11;
    _X11 = (uint8x8_t *)((char *)_X11 + 15);
    v253 = v252;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    v257 = a2 + 4;
    v258 = 11 * a4;
    v259 = 7 * a4;
    v260 = 5 * a4;
    v261 = 10 * a4;
    v262 = 6 * a4;
    v263 = 9 * a4;
    v264 = (uint8x8_t)vdup_lane_s8(v207, 1);
    v265 = (uint8x8_t)vdup_lane_s8(v207, 0);
    v266 = (uint8x8_t)vdup_lane_s8(v207, 2);
    v267 = (uint8x8_t)vdup_lane_s8(v207, 3);
    v268 = (uint8x8_t)vdup_lane_s8(v207, 4);
    v269 = (uint8x8_t)vdup_lane_s8(v207, 5);
    v270 = (uint8x8_t)vdup_lane_s8(v207, 6);
    v271 = (uint8x8_t)vdup_lane_s8(v207, 7);
    do
    {
      _X1 = &a5[v105];
      _X0 = (uint8x8_t *)((char *)a5 + v260);
      _X3 = (char *)a5 + v263;
      _X2 = (uint8x8_t *)((char *)a5 + v262);
      _X19 = (char *)a5 + v261;
      _X7 = (uint8x8_t *)((char *)a5 + v259);
      _X20 = (char *)a5 + v258;
      a5 = (uint8x8_t *)((char *)a5 + v8);
      v279 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v219, v264), v212, v265), v225, v266), v233, v267);
      v280 = vmlsl_u8(vmlsl_u8(vmull_u8(v225, v264), v219, v265), v233, v266);
      v281 = vmull_u8(v233, v264);
      v282 = vmlsl_u8(vmull_u8(v240, v264), v233, v265);
      _X6 = (char *)&a5[1] + 7;
      v233 = *a5;
      __asm
      {
        PRFM            #0, [X6]
        PRFM            #0, [X1]
        PRFUM           #0, [X1,#7]
      }
      v287 = vmlal_u8(v279, v240, v268);
      v288 = vmlal_u8(v280, v240, v267);
      v289 = vmlsl_u8(vmlsl_u8(v281, v225, v265), v240, v266);
      v212 = v240;
      v290 = *_X0;
      _X0 = (uint8x8_t *)((char *)_X0 + 15);
      v240 = v290;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X3]
        PRFUM           #0, [X3,#7]
      }
      v294 = vmlsl_u8(vmlal_u8(v287, v253, v270), v246, v269);
      v295 = vmlal_u8(v288, v246, v268);
      v296 = vmlal_u8(v289, v246, v267);
      v297 = vmlsl_u8(v282, v246, v266);
      v219 = v246;
      v298 = *_X2;
      _X2 = (uint8x8_t *)((char *)_X2 + 15);
      v246 = v298;
      __asm
      {
        PRFM            #0, [X2]
        PRFM            #0, [X19]
        PRFUM           #0, [X19,#7]
      }
      v302 = vmlsl_u8(vmlal_u8(v295, *a5, v270), v253, v269);
      v303 = vmlal_u8(v296, v253, v268);
      v304 = vmlal_u8(v297, v253, v267);
      v225 = v253;
      v305 = *_X7;
      _X7 = (uint8x8_t *)((char *)_X7 + 15);
      v253 = v305;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X20]
        PRFUM           #0, [X20,#7]
      }
      v309 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v303, v240, v270), *a5, v269), v246, v271);
      v310 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v304, *a5, v268), v246, v270), v240, v269), v305, v271);
      v25->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v294, *a5, v271), 6uLL).u32[0];
      v311 = (int8x8_t *)((char *)v25 + a6);
      v311->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v302, v240, v271), 6uLL).u32[0];
      v312 = (int8x8_t *)((char *)v311 + a6);
      v312->i32[0] = vqrshrun_n_s16(v309, 6uLL).u32[0];
      result = (uint64_t)v312 + a6;
      v25 = (int8x8_t *)((char *)v312 + a6 + a6);
      v257 -= 4;
      *(_DWORD *)result = vqrshrun_n_s16(v310, 6uLL).u32[0];
    }
    while (v257 > 4);
  }
  return result;
}

uint64_t sub_1C975FFEC(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint64_t v19;
  _DWORD *v20;
  int8x16_t v24;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v62;
  int8x16_t v63;
  int16x8_t v68;
  int8x16_t v69;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int16x8_t v81;
  uint64_t v82;
  int v83;
  _DWORD *v84;
  char *v85;
  int32x4_t v86;
  int32x4_t v87;
  int8x16_t v89;
  int8x16_t v95;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int v108;
  BOOL v109;
  int8x8_t v110;
  uint8x16_t v112;
  uint8x16_t v113;
  int8x16_t *v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v128;
  int8x16_t v135;
  int8x16_t v136;
  int16x8_t v137;
  uint8x16_t v143;
  uint8x16_t v144;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v156;
  int8x16_t v157;
  int v160;
  uint8x16_t v161;
  int8x16_t v162;
  uint8x8_t v163;
  int8x16_t v164;
  uint8x8_t v165;
  int8x16_t v166;
  uint8x8_t v168;
  uint8x16_t v169;
  int8x16_t v170;
  uint8x8_t v171;
  int8x16_t v172;
  uint8x8_t v173;
  uint8x16_t v174;
  uint16x8_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  int16x8_t v182;
  int8x16_t v183;
  uint8x8_t v185;
  uint8x8_t v186;
  uint8x8_t v187;
  uint8x8_t v188;
  uint8x8_t v189;

  v7 = 4 * a4;
  if ((int)result < 8)
  {
    v20 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v8 = 0;
  v9 = qword_1C98325B0[(a3 & 3) - 1];
  v188 = (uint8x8_t)vdup_lane_s8(v9, 1);
  v189 = (uint8x8_t)vdup_lane_s8(v9, 0);
  v10 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1C98325B0[((a3 >> 16) & 3) - 1]);
  v11 = -3 * a4 - 3;
  v12 = 2 * a6;
  v13 = a5 + 8 * a4 - 3;
  v14 = 2 * a4;
  v15 = a5 + 5 * a4;
  v186 = (uint8x8_t)vdup_lane_s8(v9, 3);
  v187 = (uint8x8_t)vdup_lane_s8(v9, 2);
  v185 = (uint8x8_t)vdup_lane_s8(v9, 4);
  v16 = (uint8x8_t)vdup_lane_s8(v9, 5);
  v17 = (uint8x8_t)vdup_lane_s8(v9, 6);
  v18 = (uint8x8_t)vdup_lane_s8(v9, 7);
  v19 = a5 + 4 * a4;
  v20 = a7;
  do
  {
    _X22 = a5 + v11 + v7;
    _X23 = (_OWORD *)(a5 + v11 + a4);
    _X21 = a5 + v11 + 31;
    v24 = *(int8x16_t *)(a5 + v11);
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X22]
      PRFUM           #0, [X22,#0xF]
    }
    _X21 = (char *)_X23 + v7;
    _X22 = (_OWORD *)((char *)_X23 + a4);
    v34 = *(int8x16_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 31);
    v35 = v34;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X22 + v7;
    _X23 = (_OWORD *)((char *)_X22 + a4);
    v41 = *(int8x16_t *)_X22;
    _X22 = (_OWORD *)((char *)_X22 + 31);
    v42 = v41;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X23 + v7;
    _X22 = (_OWORD *)((char *)_X23 + a4);
    v48 = *(int8x16_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 31);
    v49 = v48;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X22 + v7;
    _X23 = (_OWORD *)((char *)_X22 + a4);
    v55 = *(int8x16_t *)_X22;
    _X22 = (_OWORD *)((char *)_X22 + 31);
    v56 = v55;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X23 + v7;
    _X22 = (_OWORD *)((char *)_X23 + a4);
    v62 = *(int8x16_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 31);
    v63 = v62;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X22 + v7;
    v68 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 1uLL), v188), *(uint8x8_t *)v24.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 7uLL),
                       v18);
    v69 = *(int8x16_t *)_X22;
    _X22 = (_OWORD *)((char *)_X22 + 31);
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    v73 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 1uLL), v188), *(uint8x8_t *)v35.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 7uLL),
                       v18);
    v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 1uLL), v188), *(uint8x8_t *)v42.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 7uLL),
                       v18);
    v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 1uLL), v188), *(uint8x8_t *)v49.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 7uLL),
                       v18);
    v76 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 1uLL), v188), *(uint8x8_t *)v56.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 7uLL),
                       v18);
    v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 1uLL), v188), *(uint8x8_t *)v63.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 7uLL),
                       v18);
    v78 = v13;
    v79 = v19;
    v80 = v15;
    v81 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 1uLL), v188), *(uint8x8_t *)v69.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 7uLL),
                       v18);
    v82 = v13 + a4;
    v83 = a2 + 2;
    v84 = a7;
    v85 = (char *)a7 + a6;
    do
    {
      v86 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v68.i8, *(int16x4_t *)v10.i8, 0);
      v87 = vmlsl_high_lane_s16(vmull_high_lane_s16(v73, *(int16x4_t *)v10.i8, 1), v68, *(int16x4_t *)v10.i8, 0);
      v68 = v74;
      _X28 = v79 + v8;
      v89 = *(int8x16_t *)(v79 + v8 - 3);
      _X30 = v78 + v8;
      __asm
      {
        PRFUM           #0, [X28,#0x1C]
        PRFM            #0, [X30]
        PRFUM           #0, [X30,#0xF]
      }
      _X28 = v80 + v8;
      v95 = *(int8x16_t *)(v80 + v8 - 3);
      _X30 = v82 + v8;
      __asm
      {
        PRFUM           #0, [X28,#0x1C]
        PRFM            #0, [X30]
      }
      v99 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 0);
      v100 = vmlsl_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v10.i8, 1), v73, *(int16x4_t *)v10.i8, 0);
      v73 = v75;
      __asm { PRFUM           #0, [X30,#0xF] }
      v102 = vmlsl_lane_s16(v86, *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 2);
      v103 = vmlsl_high_lane_s16(v87, v74, *(int16x4_t *)v10.i8, 2);
      v74 = v76;
      v76 = v81;
      v104 = vmlal_lane_s16(v102, *(int16x4_t *)v75.i8, *(int16x4_t *)v10.i8, 3);
      v105 = vmlal_high_lane_s16(v103, v75, *(int16x4_t *)v10.i8, 3);
      v106 = vmlsl_lane_s16(v99, *(int16x4_t *)v75.i8, *(int16x4_t *)v10.i8, 2);
      v107 = vmlsl_high_lane_s16(v100, v75, *(int16x4_t *)v10.i8, 2);
      v75 = v77;
      v81 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 1uLL), v188), *(uint8x8_t *)v95.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 5uLL), v16),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 7uLL),
                         v18);
      v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 1uLL), v188), *(uint8x8_t *)v89.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 5uLL), v16),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 7uLL),
                         v18);
      *(int8x8_t *)&v84[v8 / 4] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v104, *(int16x4_t *)v74.i8, v10, 4), *(int16x4_t *)v76.i8, v10, 6), *(int16x4_t *)v75.i8, v10, 5), *(int16x4_t *)v77.i8, v10, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v105, v74, v10, 4), v76, v10, 6),
                                          v75,
                                          v10,
                                          5),
                                        v77,
                                        v10,
                                        7),
                                      6uLL),
                                    6uLL);
      *(int8x8_t *)&v85[v8] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v106, *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v75.i8, v10, 4), *(int16x4_t *)v77.i8, v10, 6), *(int16x4_t *)v76.i8, v10, 5), *(int16x4_t *)v81.i8, v10, 7),
                                    6uLL),
                                  vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v107, v74, *(int16x4_t *)v10.i8, 3), v75, v10, 4), v77, v10, 6), v76, v10, 5), v81, v10, 7), 6uLL), 6uLL);
      v84 = (_DWORD *)((char *)v84 + v12);
      v85 += v12;
      v83 -= 2;
      v82 += v14;
      v80 += v14;
      v79 += v14;
      v78 += v14;
    }
    while (v83 > 2);
    v20 += 2;
    a5 += 8;
    v108 = result - 8;
    v8 += 8;
    v109 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v109);
  if (v108)
  {
LABEL_10:
    v110 = qword_1C98325B0[((a3 >> 16) & 3) - 1];
    _X11 = -3 * a4 + a5;
    v112 = *(uint8x16_t *)(_X11 - 3);
    _X11 -= 3;
    v113 = v112;
    __asm { PRFUM           #0, [X11,#0x1F] }
    _X10 = _X11 + 4 * a4;
    __asm
    {
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (_OWORD *)(_X11 + a4);
    _X11 = _X11 + a4 + 4 * a4;
    v120 = (int8x16_t *)((char *)_X10 + a4);
    v121 = *(int8x16_t *)_X10;
    _X10 = (_OWORD *)((char *)_X10 + 31);
    v122 = v121;
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    _X10 = &v120->i8[4 * a4];
    _X11 = &v120[1].i8[15];
    v128 = *v120;
    _X12 = &v120->i8[a4];
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = &_X12[4 * a4];
    _X11 = &_X12[a4];
    v135 = *(int8x16_t *)_X12;
    _X12 += 31;
    v136 = v135;
    v137 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1C98325B0[(a3 & 3) - 1]);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = &_X11[4 * a4];
    _X12 = &_X11[a4];
    v143 = *(uint8x16_t *)_X11;
    _X11 += 31;
    v144 = v143;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = &_X12[4 * a4];
    _X11 = &_X12[a4];
    v150 = *(int8x16_t *)_X12;
    _X12 += 31;
    v151 = v150;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X12 = &_X11[4 * a4];
    v156 = *(int8x16_t *)_X11;
    _X11 += 31;
    v157 = v156;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
    }
    v160 = a2 + 1;
    v161 = (uint8x16_t)vdupq_lane_s8(v110, 0);
    v162 = vdupq_lane_s8(v110, 2);
    v163 = (uint8x8_t)vextq_s8(v162, v162, 8uLL).u64[0];
    v164 = vdupq_lane_s8(v110, 3);
    v165 = (uint8x8_t)vextq_s8(v164, v164, 8uLL).u64[0];
    v166 = vdupq_lane_s8(v110, 4);
    __asm { PRFUM           #0, [X12,#0xF] }
    v168 = (uint8x8_t)vextq_s8(v166, v166, 8uLL).u64[0];
    v169 = (uint8x16_t)vdupq_lane_s8(v110, 1);
    v170 = vdupq_lane_s8(v110, 6);
    v171 = (uint8x8_t)vextq_s8(v170, v170, 8uLL).u64[0];
    v172 = vdupq_lane_s8(v110, 7);
    v173 = (uint8x8_t)vextq_s8(v172, v172, 8uLL).u64[0];
    v174 = (uint8x16_t)vdupq_lane_s8(v110, 5);
    do
    {
      v175 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v122.i8, *(uint8x8_t *)v169.i8), *(uint8x8_t *)v113.i8, *(uint8x8_t *)v161.i8);
      v176 = vmull_high_u8((uint8x16_t)v122, v169);
      v177 = vmull_high_u8(v113, v161);
      v113 = (uint8x16_t)v122;
      v122 = v128;
      v128 = v136;
      v136 = (int8x16_t)v144;
      v144 = (uint8x16_t)v151;
      v151 = v157;
      _X12 = a5 + v7;
      v157 = *(int8x16_t *)(a5 + v7 - 3);
      _X13 = a5 + 8 * a4 - 3;
      __asm
      {
        PRFUM           #0, [X12,#0x1C]
        PRFM            #0, [X13]
      }
      v182 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v175, *(uint8x8_t *)v122.i8, *(uint8x8_t *)v162.i8), *(uint8x8_t *)v128.i8, *(uint8x8_t *)v164.i8), *(uint8x8_t *)v136.i8, *(uint8x8_t *)v166.i8), *(uint8x8_t *)v151.i8, *(uint8x8_t *)v170.i8), *(uint8x8_t *)v144.i8, *(uint8x8_t *)v174.i8), *(uint8x8_t *)v157.i8, *(uint8x8_t *)v172.i8);
      *(int16x4_t *)v176.i8 = vsub_s16(*(int16x4_t *)v176.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v177, (uint8x8_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL), v163));
      v183 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v176, (uint8x8_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), v165), (uint8x8_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), v168), (uint8x8_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), v171);
      *(int16x4_t *)v183.i8 = vsub_s16(*(int16x4_t *)v183.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v144, v174), (uint8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL), v173));
      *(int16x4_t *)v182.i8 = vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, (int8x16_t)v182, 2uLL), *(int16x4_t *)v137.i8, 1), *(int16x4_t *)v182.i8, *(int16x4_t *)v137.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, (int8x16_t)v182, 4uLL), *(int16x4_t *)v137.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, (int8x16_t)v182, 6uLL), *(int16x4_t *)v137.i8,
                                          3),
                                        v182,
                                        v137,
                                        4),
                                      (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, v183, 0xCuLL),
                                      v137,
                                      6),
                                    (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, v183, 0xAuLL),
                                    v137,
                                    5),
                                  (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, v183, 0xEuLL),
                                  v137,
                                  7),
                                6uLL);
      __asm { PRFUM           #0, [X13,#0xF] }
      *v20 = vqrshrun_n_s16(v182, 6uLL).u32[0];
      v20 = (_DWORD *)((char *)v20 + a6);
      --v160;
      a5 += a4;
    }
    while (v160 > 1);
  }
  return result;
}

unint64_t sub_1C9760714(unint64_t result, int a2, double a3, uint16x8_t a4, double a5, uint16x8_t a6, uint64_t a7, uint64_t a8, const float *a9, uint64_t a10, uint16x8_t *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8x16_t v14;
  uint16x8_t *v15;
  int v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v29;
  uint16x8_t v30;
  uint8x16_t v36;
  uint8x16_t v37;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v51;
  uint16x8_t v53;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t *v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t *v61;
  uint16x8_t *v62;
  char v63;
  BOOL v64;
  int v65;
  uint8x16_t v66;
  const float *v67;
  uint16x8_t v76;
  uint16x8_t v77;
  char *v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint8x16_t v87;
  uint8x16_t v88;
  uint8x16_t v92;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t *v98;
  uint16x8_t *v99;
  uint16x8_t *v100;
  uint64_t v101;
  int v102;
  __n128 *v103;
  const float *v104;
  uint8x8_t *v106;
  uint8x8_t v109;
  uint8x8_t v110;
  uint8x8_t v114;
  uint16x8_t v118;
  uint16x8_t v119;
  int v120;
  const float *v121;
  uint8x8_t v122;

  v11 = a8;
  v12 = 2 * a8;
  v13 = 2 * a10;
  if ((int)result < 32)
  {
    v63 = result;
    if ((result & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_10;
  }
  v14.i64[0] = 0x4040404040404040;
  v14.i64[1] = 0x4040404040404040;
  do
  {
    v15 = a11;
    v16 = a2 + 4;
    _X7 = (uint16x8_t *)a9;
    do
    {
      v18 = *_X7;
      v19 = _X7[1];
      __asm { PRFUM           #0, [X7,#0x3F] }
      _X20 = &_X7[1].i8[v11 * 4 + 15];
      __asm
      {
        PRFUM           #0, [X20,#-0x1F]
        PRFM            #0, [X20]
      }
      _X20 = &_X7->i8[a8];
      v29 = *(uint16x8_t *)((char *)_X7 + a8);
      v30 = *(uint16x8_t *)((char *)&_X7[1] + a8);
      __asm { PRFUM           #0, [X20,#0x3F] }
      _X21 = &_X7->i8[5 * a8];
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1F]
      }
      _X21 = &_X7->i8[v12];
      v36 = *(uint8x16_t *)((char *)_X7 + 2 * a8);
      v37 = *(uint8x16_t *)((char *)&_X7[1] + v12);
      __asm { PRFUM           #0, [X21,#0x3F] }
      _X21 = &_X7->i8[6 * a8];
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1F]
      }
      _X21 = (uint8x16_t *)((char *)_X7 + 3 * a8);
      _X22 = &_X7->i8[7 * a8];
      _X7 = (uint16x8_t *)((char *)_X7 + 2 * a8 + a8 + a8);
      v44.i64[0] = 0xE000E000E000E000;
      v44.i64[1] = 0xE000E000E000E000;
      v45 = vmlal_u8(v44, *(uint8x8_t *)v18.i8, (uint8x8_t)0x4040404040404040);
      v46.i64[0] = 0xE000E000E000E000;
      v46.i64[1] = 0xE000E000E000E000;
      v47 = *_X21;
      v48 = _X21[1];
      v49 = vmlal_high_u8(v46, (uint8x16_t)v18, v14);
      __asm { PRFUM           #0, [X21,#0x3F] }
      v18.i64[0] = 0xE000E000E000E000;
      v18.i64[1] = 0xE000E000E000E000;
      v51 = vmlal_u8(v18, *(uint8x8_t *)v19.i8, (uint8x8_t)0x4040404040404040);
      __asm { PRFM            #0, [X22] }
      v53.i64[0] = 0xE000E000E000E000;
      v53.i64[1] = 0xE000E000E000E000;
      __asm { PRFUM           #0, [X22,#0x1F] }
      v55 = vmlal_high_u8(v53, (uint8x16_t)v19, v14);
      v19.i64[0] = 0xE000E000E000E000;
      v19.i64[1] = 0xE000E000E000E000;
      v56 = vmlal_u8(v19, *(uint8x8_t *)v29.i8, (uint8x8_t)0x4040404040404040);
      *v15 = v45;
      v15[1] = v49;
      v45.i64[0] = 0xE000E000E000E000;
      v45.i64[1] = 0xE000E000E000E000;
      v57 = vmlal_high_u8(v45, (uint8x16_t)v29, v14);
      v58 = (uint16x8_t *)((char *)v15 + v13);
      v29.i64[0] = 0xE000E000E000E000;
      v29.i64[1] = 0xE000E000E000E000;
      v15[2] = v51;
      v15[3] = v55;
      v59 = vmlal_u8(v29, *(uint8x8_t *)v30.i8, (uint8x8_t)0x4040404040404040);
      v51.i64[0] = 0xE000E000E000E000;
      v51.i64[1] = 0xE000E000E000E000;
      v60 = vmlal_high_u8(v51, (uint8x16_t)v30, v14);
      *v58 = v56;
      v58[1] = v57;
      v56.i64[0] = 0xE000E000E000E000;
      v56.i64[1] = 0xE000E000E000E000;
      v30.i64[0] = 0xE000E000E000E000;
      v30.i64[1] = 0xE000E000E000E000;
      v58[2] = v59;
      v58[3] = v60;
      v61 = (uint16x8_t *)((char *)v15 + v13 + v13);
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      *v61 = vmlal_u8(v56, *(uint8x8_t *)v36.i8, (uint8x8_t)0x4040404040404040);
      v61[1] = vmlal_high_u8(v30, v36, v14);
      v56.i64[0] = 0xE000E000E000E000;
      v56.i64[1] = 0xE000E000E000E000;
      v59.i64[0] = 0xE000E000E000E000;
      v59.i64[1] = 0xE000E000E000E000;
      v61[2] = vmlal_u8(v60, *(uint8x8_t *)v37.i8, (uint8x8_t)0x4040404040404040);
      v61[3] = vmlal_high_u8(v56, v37, v14);
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      v62 = (uint16x8_t *)((char *)v61 + v13);
      *v62 = vmlal_u8(v59, *(uint8x8_t *)v47.i8, (uint8x8_t)0x4040404040404040);
      v62[1] = vmlal_high_u8(v60, v47, v14);
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      v56.i64[0] = 0xE000E000E000E000;
      v56.i64[1] = 0xE000E000E000E000;
      a6 = vmlal_high_u8(v56, v48, v14);
      v16 -= 4;
      v15 = (uint16x8_t *)((char *)v61 + v13 + v13);
      v62[2] = vmlal_u8(v60, *(uint8x8_t *)v48.i8, (uint8x8_t)0x4040404040404040);
      v62[3] = a6;
    }
    while (v16 > 4);
    a9 += 8;
    a11 += 4;
    v63 = result - 32;
    v64 = (int)result <= 63;
    result = (result - 32);
  }
  while (!v64);
  if ((v63 & 0x10) != 0)
  {
LABEL_10:
    v65 = a2 + 4;
    v66.i64[0] = 0x4040404040404040;
    v66.i64[1] = 0x4040404040404040;
    result = (unint64_t)a11;
    v67 = a9;
    do
    {
      _X2 = &v67[v11];
      _X7 = (_OWORD *)((char *)v67 + a8);
      _X19 = (char *)v67 + 5 * a8;
      _X20 = (_OWORD *)((char *)v67 + v12);
      _X21 = (char *)v67 + 6 * a8;
      _X22 = (_OWORD *)((char *)v67 + 3 * a8);
      _X23 = (char *)v67 + 7 * a8;
      v76 = *(uint16x8_t *)v67;
      _X17 = (char *)v67 + 31;
      v77 = v76;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#0xF]
      }
      v81 = (char *)_X7 + 2 * a8;
      v82 = *(uint16x8_t *)_X7;
      _X7 = (_OWORD *)((char *)_X7 + 31);
      v83 = v82;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
        PRFUM           #0, [X19,#0xF]
      }
      v87 = *(uint8x16_t *)_X20;
      _X20 = (_OWORD *)((char *)_X20 + 31);
      v88 = v87;
      __asm
      {
        PRFM            #0, [X20]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      v92 = *(uint8x16_t *)_X22;
      _X22 = (_OWORD *)((char *)_X22 + 31);
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X23]
        PRFUM           #0, [X23,#0xF]
      }
      v67 = (const float *)&v81[a8];
      v96.i64[0] = 0xE000E000E000E000;
      v96.i64[1] = 0xE000E000E000E000;
      v97.i64[0] = 0xE000E000E000E000;
      v97.i64[1] = 0xE000E000E000E000;
      *(uint16x8_t *)result = vmlal_u8(v96, *(uint8x8_t *)v77.i8, (uint8x8_t)0x4040404040404040);
      *(uint16x8_t *)(result + 16) = vmlal_high_u8(v97, (uint8x16_t)v77, v66);
      v77.i64[0] = 0xE000E000E000E000;
      v77.i64[1] = 0xE000E000E000E000;
      v96.i64[0] = 0xE000E000E000E000;
      v96.i64[1] = 0xE000E000E000E000;
      v98 = (uint16x8_t *)(result + v13);
      *v98 = vmlal_u8(v77, *(uint8x8_t *)v83.i8, (uint8x8_t)0x4040404040404040);
      v98[1] = vmlal_high_u8(v96, (uint8x16_t)v83, v66);
      v77.i64[0] = 0xE000E000E000E000;
      v77.i64[1] = 0xE000E000E000E000;
      v83.i64[0] = 0xE000E000E000E000;
      v83.i64[1] = 0xE000E000E000E000;
      v99 = (uint16x8_t *)((char *)v98 + v13);
      *v99 = vmlal_u8(v77, *(uint8x8_t *)v88.i8, (uint8x8_t)0x4040404040404040);
      v99[1] = vmlal_high_u8(v83, v88, v66);
      v77.i64[0] = 0xE000E000E000E000;
      v77.i64[1] = 0xE000E000E000E000;
      v83.i64[0] = 0xE000E000E000E000;
      v83.i64[1] = 0xE000E000E000E000;
      a6 = vmlal_high_u8(v83, v92, v66);
      v100 = (uint16x8_t *)((char *)v99 + v13);
      *v100 = vmlal_u8(v77, *(uint8x8_t *)v92.i8, (uint8x8_t)0x4040404040404040);
      v100[1] = a6;
      v65 -= 4;
      result = (unint64_t)v100->u64 + v13;
    }
    while (v65 > 4);
    a9 += 4;
    a11 += 2;
  }
LABEL_13:
  v101 = 4 * a10;
  if ((v63 & 8) != 0)
  {
    v102 = a2 + 2;
    v103 = (__n128 *)a11;
    v104 = a9;
    do
    {
      _X17 = &v104[v11];
      v106 = (uint8x8_t *)((char *)v104 + a8);
      _X2 = (char *)v104 + 5 * a8;
      v109 = *(uint8x8_t *)v104;
      _X16 = (char *)v104 + 15;
      v110 = v109;
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      v104 = (const float *)((char *)v106 + a8);
      v114 = *v106;
      result = (unint64_t)&v106[1] + 7;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#7]
      }
      v118.i64[0] = 0xE000E000E000E000;
      v118.i64[1] = 0xE000E000E000E000;
      a6 = vmlal_u8(v118, v110, (uint8x8_t)0x4040404040404040);
      *v103 = (__n128)a6;
      v119.i64[0] = 0xE000E000E000E000;
      v119.i64[1] = 0xE000E000E000E000;
      a4 = vmlal_u8(v119, v114, (uint8x8_t)0x4040404040404040);
      *(uint16x8_t *)((char *)v103 + 2 * a10) = a4;
      v102 -= 2;
      v103 = (__n128 *)((char *)v103 + v101);
    }
    while (v102 > 2);
    a9 += 2;
    ++a11;
  }
  if ((v63 & 4) != 0)
  {
    v120 = a2 + 2;
    do
    {
      v121 = (const float *)((char *)a9 + a8);
      *(float32x2_t *)a4.i8 = vld1_dup_f32(a9);
      a9 = (const float *)((char *)a9 + v12);
      v122 = (uint8x8_t)vld1_dup_f32(v121);
      a6.i32[0] = -536813568;
      a6.i16[2] = -8192;
      a6.i16[3] = -8192;
      a6 = vmlal_u8(a6, *(uint8x8_t *)a4.i8, (uint8x8_t)0x4040404040404040);
      a11->i64[0] = a6.i64[0];
      a4.i32[0] = -536813568;
      a4.i16[2] = -8192;
      a4.i16[3] = -8192;
      a4 = vmlal_u8(a4, v122, (uint8x8_t)0x4040404040404040);
      *(uint64_t *)((char *)a11->i64 + 2 * a10) = a4.i64[0];
      a11 = (uint16x8_t *)((char *)a11 + v101);
      v120 -= 2;
    }
    while (v120 > 2);
  }
  return result;
}

uint64_t sub_1C9760A7C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  int8x8_t v8;
  int16x4_t *v9;
  uint8x8_t *v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  int16x8_t v19;
  int v20;
  uint8x8_t *v21;
  uint16x8_t *v22;
  int8x8_t v23;
  int8x16_t v24;
  uint16x8_t v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  int8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  uint8x8_t v35;
  uint8x8_t v36;
  int v37;
  uint8x8_t v38;
  int16x8_t v39;
  uint16x8_t *v41;
  int8x16_t v42;
  int8x8_t v51;
  uint8x8_t v52;
  uint8x8_t v53;
  uint8x8_t v54;
  uint8x8_t v55;
  uint8x8_t v56;
  uint8x8_t v57;
  int v58;
  uint8x8_t v59;
  uint8x8_t v60;
  int8x16_t v61;
  uint8x8_t v66;
  uint8x8_t v67;
  uint8x8_t v68;
  uint8x8_t v69;
  uint8x8_t v70;
  int16x4_t v71;
  uint16x8_t v72;

  v7 = 2 * a6;
  if ((int)result < 16)
  {
    v26 = result;
  }
  else
  {
    v8 = qword_1C98325B0[(a3 & 3) - 1];
    v9 = a7 + 2;
    v10 = (uint8x8_t *)(_X4 + 5);
    v11 = (uint8x8_t)vdup_lane_s8(v8, 0);
    v12 = (uint8x8_t)vdup_lane_s8(v8, 1);
    v13 = (uint8x8_t)vdup_lane_s8(v8, 2);
    v14 = (uint8x8_t)vdup_lane_s8(v8, 3);
    v15 = (uint8x8_t)vdup_lane_s8(v8, 4);
    v16 = (uint8x8_t)vdup_lane_s8(v8, 5);
    v17 = (uint8x8_t)vdup_lane_s8(v8, 6);
    v18 = (uint8x8_t)vdup_lane_s8(v8, 7);
    v19.i64[0] = 0xE000E000E000E000;
    v19.i64[1] = 0xE000E000E000E000;
    do
    {
      v20 = a2 + 1;
      v21 = v10;
      v22 = (uint16x8_t *)v9;
      do
      {
        v23 = (int8x8_t)v21[-1];
        v24 = *(int8x16_t *)v21->i8;
        v25 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 1uLL), v12), *v21, v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v13), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 3uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v17),
                  (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 5uLL),
                  v16),
                (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 7uLL),
                v18);
        v22[-1] = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 1uLL), v12), (uint8x8_t)v23, v11), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 2uLL), v13), v19), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 3uLL), v14), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 4uLL), v15), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 6uLL), v17),
                      (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 5uLL),
                      v16),
                    (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 7uLL),
                    v18);
        *v22 = v25;
        v22 = (uint16x8_t *)((char *)v22 + v7);
        v21 = (uint8x8_t *)((char *)v21 + a4);
        --v20;
      }
      while (v20 > 1);
      a7 += 4;
      _X4 += 16;
      v26 = result - 16;
      v9 += 4;
      v10 += 2;
      v27 = (int)result <= 31;
      result = (result - 16);
    }
    while (!v27);
  }
  v28 = 4 * a4;
  if ((v26 & 8) != 0)
  {
    v29 = qword_1C98325B0[(a3 & 3) - 1];
    v30 = (uint8x8_t)vdup_lane_s8(v29, 0);
    v31 = (uint8x8_t)vdup_lane_s8(v29, 1);
    v32 = (uint8x8_t)vdup_lane_s8(v29, 2);
    v33 = (uint8x8_t)vdup_lane_s8(v29, 3);
    v34 = (uint8x8_t)vdup_lane_s8(v29, 4);
    v35 = (uint8x8_t)vdup_lane_s8(v29, 5);
    v36 = (uint8x8_t)vdup_lane_s8(v29, 6);
    v37 = a2 + 1;
    v38 = (uint8x8_t)vdup_lane_s8(v29, 7);
    v39.i64[0] = 0xE000E000E000E000;
    v39.i64[1] = 0xE000E000E000E000;
    _X12 = _X4;
    v41 = (uint16x8_t *)a7;
    do
    {
      v42 = *(int8x16_t *)(_X12 - 3);
      __asm { PRFUM           #0, [X12,#0x1C] }
      _X15 = _X12 + v28;
      __asm
      {
        PRFUM           #0, [X15,#-3]
        PRFUM           #0, [X15,#0xC]
      }
      *v41 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 1uLL), v31), *(uint8x8_t *)v42.i8, v30), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 2uLL), v32), v39), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 3uLL), v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL), v34), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 6uLL), v36),
                 (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 5uLL),
                 v35),
               (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 7uLL),
               v38);
      v41 = (uint16x8_t *)((char *)v41 + v7);
      _X12 += a4;
      --v37;
    }
    while (v37 > 1);
    a7 += 2;
    _X4 += 8;
  }
  if ((v26 & 4) != 0)
  {
    v51 = qword_1C98325B0[(a3 & 3) - 1];
    v52 = (uint8x8_t)vdup_lane_s8(v51, 0);
    v53 = (uint8x8_t)vdup_lane_s8(v51, 1);
    v54 = (uint8x8_t)vdup_lane_s8(v51, 2);
    v55 = (uint8x8_t)vdup_lane_s8(v51, 3);
    v56 = (uint8x8_t)vdup_lane_s8(v51, 4);
    v57 = (uint8x8_t)vdup_lane_s8(v51, 5);
    v58 = a2 + 1;
    v59 = (uint8x8_t)vdup_lane_s8(v51, 6);
    v60 = (uint8x8_t)vdup_lane_s8(v51, 7);
    do
    {
      v61 = *(int8x16_t *)(_X4 - 3);
      __asm { PRFUM           #0, [X4,#0x1C] }
      _X11 = _X4 + v28;
      __asm
      {
        PRFUM           #0, [X11,#-3]
        PRFUM           #0, [X11,#0xC]
      }
      v66 = (uint8x8_t)vextq_s8(v61, v61, 3uLL).u64[0];
      v67 = (uint8x8_t)vextq_s8(v61, v61, 4uLL).u64[0];
      v68 = (uint8x8_t)vextq_s8(v61, v61, 5uLL).u64[0];
      v69 = (uint8x8_t)vextq_s8(v61, v61, 6uLL).u64[0];
      v70 = (uint8x8_t)vextq_s8(v61, v61, 7uLL).u64[0];
      v71 = (int16x4_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 1uLL), v53).u64[0];
      v72 = vmlal_u8(vmull_u8(*(uint8x8_t *)v61.i8, v52), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 2uLL), v54);
      *(int16x4_t *)v72.i8 = vsub_s16(v71, *(int16x4_t *)v72.i8);
      *a7 = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(vmlal_u8(v72, v66, v55), v67, v56), v69, v59), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v68, v57), v70, v60)), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      _X4 += a4;
      --v58;
    }
    while (v58 > 1);
  }
  return result;
}

uint64_t sub_1C9760D10(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint16x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  int16x8_t v21;
  uint8x16_t v24;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t *v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v49;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x8_t *v73;
  int v74;
  uint16x8_t *v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  uint16x8_t *v95;
  char v96;
  BOOL v97;
  int8x8_t v98;
  uint8x8_t v102;
  uint8x8_t v103;
  uint8x8_t v109;
  uint8x8_t v110;
  uint8x8_t v116;
  uint8x8_t v117;
  uint8x8_t v123;
  uint8x8_t v124;
  uint8x8_t v130;
  uint8x8_t v131;
  uint8x8_t v137;
  uint8x8_t v138;
  uint8x8_t v143;
  uint8x8_t v144;
  int v147;
  uint8x8_t v148;
  uint8x8_t v149;
  uint8x8_t v150;
  uint8x8_t v151;
  uint8x8_t v152;
  uint8x8_t v153;
  uint8x8_t v154;
  int16x8_t v156;
  uint8x8_t *v157;
  uint16x8_t *v158;
  uint8x8_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  int16x8_t v163;
  uint16x8_t v164;
  uint16x8_t v176;
  uint8x8_t v177;
  uint16x8_t v181;
  uint16x8_t v182;
  uint16x8_t v183;
  int16x8_t v184;
  uint8x8_t v185;
  uint16x8_t v189;
  uint16x8_t v190;
  uint16x8_t v191;
  uint8x8_t v192;
  uint16x8_t *v196;
  uint16x8_t *v197;
  uint16x8_t *v198;
  int8x8_t v199;
  uint8x8_t v203;
  uint8x8_t v204;
  uint8x8_t v210;
  uint8x8_t v211;
  uint8x8_t v217;
  uint8x8_t v218;
  uint8x8_t v224;
  uint8x8_t v225;
  uint8x8_t v231;
  uint8x8_t v232;
  uint8x8_t *v237;
  uint8x8_t v238;
  uint8x8_t v239;
  uint8x8_t v244;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint8x8_t v255;
  uint8x8_t v256;
  uint8x8_t v257;
  uint8x8_t v258;
  uint8x8_t v259;
  uint8x8_t v260;
  uint64_t v261;
  uint8x8_t v262;
  uint8x8_t v263;
  uint16x8_t v271;
  uint16x8_t v272;
  uint16x8_t v273;
  uint16x8_t v274;
  int16x4_t v275;
  int16x4_t v280;
  uint16x8_t v281;
  uint16x8_t v282;
  int16x4_t v283;
  uint8x8_t v284;
  uint16x8_t v288;
  uint16x8_t v289;
  uint16x8_t v290;
  uint16x8_t v291;
  uint8x8_t v292;
  uint16x8_t v296;
  uint16x8_t v297;
  uint16x8_t v298;
  uint8x8_t v299;
  uint16x8_t v303;
  int16x4_t *v304;

  v8 = (a3 >> 16) & 3;
  v9 = 4 * a4;
  v10 = a4;
  v11 = 2 * a6;
  if ((int)result < 16)
  {
    v96 = result;
    if ((result & 8) == 0)
      goto LABEL_8;
  }
  else
  {
    v12 = qword_1C98325B0[v8 - 1];
    v13 = (uint8x16_t)vdupq_lane_s8(v12, 0);
    v14 = (uint8x16_t)vdupq_lane_s8(v12, 1);
    v15 = (uint8x16_t)vdupq_lane_s8(v12, 2);
    v16 = (uint8x16_t)vdupq_lane_s8(v12, 3);
    v17 = (uint8x16_t)vdupq_lane_s8(v12, 4);
    v18 = (uint8x16_t)vdupq_lane_s8(v12, 5);
    v19 = (uint8x16_t)vdupq_lane_s8(v12, 6);
    v20 = (uint8x16_t)vdupq_lane_s8(v12, 7);
    v21.i64[0] = 0xE000E000E000E000;
    v21.i64[1] = 0xE000E000E000E000;
    do
    {
      _X5 = (char *)a5 + v9 + -3 * a4;
      _X7 = (uint64_t)&a5[3] - 3 * a4 + 7;
      v24 = *(uint8x16_t *)&a5->i8[-3 * a4];
      _X17 = (_OWORD *)((char *)a5 + a4 + -3 * a4);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      _X5 = (char *)_X17 + v9;
      _X7 = (_OWORD *)((char *)_X17 + a4);
      v35 = *(uint8x16_t *)_X17;
      _X17 = (_OWORD *)((char *)_X17 + 31);
      v36 = v35;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      _X17 = (char *)_X7 + v9;
      v41 = (uint8x16_t *)((char *)_X7 + a4);
      v42 = *(uint8x16_t *)_X7;
      _X7 = (_OWORD *)((char *)_X7 + 31);
      v43 = v42;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = &v41->i8[v9];
      _X7 = &v41[1].i8[15];
      v49 = *v41;
      _X5 = &v41->i8[a4];
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = &_X5[v9];
      _X7 = &_X5[a4];
      v56 = *(uint8x16_t *)_X5;
      _X5 += 31;
      v57 = v56;
      __asm
      {
        PRFM            #0, [X5]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = &_X7[v9];
      _X5 = &_X7[a4];
      v63 = *(uint8x16_t *)_X7;
      _X7 += 31;
      v64 = v63;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X7 = &_X5[v9];
      v69 = *(uint8x16_t *)_X5;
      _X5 += 31;
      v70 = v69;
      __asm
      {
        PRFM            #0, [X5]
        PRFM            #0, [X7]
      }
      v73 = a5;
      v74 = a2 + 2;
      __asm { PRFUM           #0, [X7,#0xF] }
      v76 = (uint16x8_t *)a7;
      do
      {
        v77 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v13.i8);
        v78 = vmlsl_high_u8(vmull_high_u8(v43, v14), v36, v13);
        v79 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v15.i8);
        v80 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v36, v14), v24, v13), v43, v15);
        v24 = v43;
        v43 = v57;
        v81 = vmlal_u8((uint16x8_t)vaddq_s16(v79, v21), *(uint8x8_t *)v49.i8, *(uint8x8_t *)v16.i8);
        v82 = vmlal_high_u8((uint16x8_t)vaddq_s16(v80, v21), v49, v16);
        v83 = (int16x8_t)vmlsl_u8(v77, *(uint8x8_t *)v49.i8, *(uint8x8_t *)v15.i8);
        v84 = (int16x8_t)vmlsl_high_u8(v78, v49, v15);
        v36 = v49;
        v49 = v64;
        v57 = v70;
        _X19 = (uint64_t)&v73[3] + v9 + 7;
        v64 = *(uint8x16_t *)&v73->i8[4 * a4];
        __asm { PRFM            #0, [X19] }
        _X19 = &v73[v10];
        __asm
        {
          PRFM            #0, [X19]
          PRFUM           #0, [X19,#0xF]
        }
        _X19 = (uint64_t)&v73[3] + 5 * a4 + 7;
        v70 = *(uint8x16_t *)&v73->i8[5 * a4];
        __asm { PRFM            #0, [X19] }
        _X19 = (char *)v73 + 9 * a4;
        __asm
        {
          PRFM            #0, [X19]
          PRFUM           #0, [X19,#0xF]
        }
        *v76 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v81, *(uint8x8_t *)v43.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v57.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v49.i8, *(uint8x8_t *)v18.i8), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v20.i8);
        v76[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v82, v43, v17), v57, v19), v49, v18), v64, v20);
        v95 = (uint16x8_t *)((char *)v76 + v11);
        *v95 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v83, v21), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v16.i8), *(uint8x8_t *)v49.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v57.i8, *(uint8x8_t *)v18.i8), *(uint8x8_t *)v70.i8, *(uint8x8_t *)v20.i8);
        v95[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8((uint16x8_t)vaddq_s16(v84, v21), v43, v16), v49, v17), v64, v19), v57, v18), v70, v20);
        v74 -= 2;
        v73 = (uint8x8_t *)((char *)v73 + 2 * a4);
        v76 = (uint16x8_t *)((char *)v95 + v11);
      }
      while (v74 > 2);
      a7 += 4;
      a5 += 2;
      v96 = result - 16;
      v97 = (int)result <= 31;
      result = (result - 16);
    }
    while (!v97);
    if ((v96 & 8) == 0)
    {
LABEL_8:
      if ((v96 & 4) == 0)
        return result;
      goto LABEL_14;
    }
  }
  v98 = qword_1C98325B0[v8 - 1];
  _X13 = (uint8x8_t *)((char *)a5 - 3 * a4);
  _X14 = (char *)_X13 + 4 * a4;
  _X15 = (uint8x8_t *)((char *)_X13 + a4);
  v102 = *_X13;
  _X13 = (uint8x8_t *)((char *)_X13 + 15);
  v103 = v102;
  __asm
  {
    PRFM            #0, [X13]
    PRFM            #0, [X14]
    PRFUM           #0, [X14,#7]
  }
  _X13 = (char *)_X15 + 4 * a4;
  _X14 = (uint8x8_t *)((char *)_X15 + a4);
  v109 = *_X15;
  _X15 = (uint8x8_t *)((char *)_X15 + 15);
  v110 = v109;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X14 + 4 * a4;
  _X15 = (uint8x8_t *)((char *)_X14 + a4);
  v116 = *_X14;
  _X14 = (uint8x8_t *)((char *)_X14 + 15);
  v117 = v116;
  __asm
  {
    PRFM            #0, [X14]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X15 + 4 * a4;
  _X14 = (uint8x8_t *)((char *)_X15 + a4);
  v123 = *_X15;
  _X15 = (uint8x8_t *)((char *)_X15 + 15);
  v124 = v123;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X14 + 4 * a4;
  _X15 = (uint8x8_t *)((char *)_X14 + a4);
  v130 = *_X14;
  _X14 = (uint8x8_t *)((char *)_X14 + 15);
  v131 = v130;
  __asm
  {
    PRFM            #0, [X14]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X15 + 4 * a4;
  _X14 = (uint8x8_t *)((char *)_X15 + a4);
  v137 = *_X15;
  _X15 = (uint8x8_t *)((char *)_X15 + 15);
  v138 = v137;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X7 = (char *)_X14 + 4 * a4;
  v143 = *_X14;
  _X14 = (uint8x8_t *)((char *)_X14 + 15);
  v144 = v143;
  __asm
  {
    PRFM            #0, [X14]
    PRFM            #0, [X7]
  }
  v147 = a2 + 4;
  result = 10 * a4;
  v148 = (uint8x8_t)vdup_lane_s8(v98, 1);
  v149 = (uint8x8_t)vdup_lane_s8(v98, 0);
  v150 = (uint8x8_t)vdup_lane_s8(v98, 2);
  v151 = (uint8x8_t)vdup_lane_s8(v98, 3);
  v152 = (uint8x8_t)vdup_lane_s8(v98, 4);
  v153 = (uint8x8_t)vdup_lane_s8(v98, 5);
  v154 = (uint8x8_t)vdup_lane_s8(v98, 6);
  __asm { PRFUM           #0, [X7,#7] }
  v156.i64[0] = 0xE000E000E000E000;
  v156.i64[1] = 0xE000E000E000E000;
  v157 = a5;
  v158 = (uint16x8_t *)a7;
  v159 = (uint8x8_t)vdup_lane_s8(v98, 7);
  do
  {
    v160 = vmlsl_u8(vmull_u8(v110, v148), v103, v149);
    v103 = v131;
    v161 = vmull_u8(v124, v148);
    v162 = vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(v160, v117, v150), v156), v124, v151);
    v163 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8(v117, v148), v110, v149), v124, v150);
    v164 = vmlsl_u8(vmull_u8(v103, v148), v124, v149);
    _X21 = (uint64_t)&v157[1] + v9 + 7;
    v124 = *(uint8x8_t *)((char *)v157 + 4 * a4);
    _X22 = &v157[v10];
    _X23 = (uint8x8_t *)((char *)v157 + 5 * a4);
    _X24 = (char *)v157 + 9 * a4;
    _X25 = (uint8x8_t *)((char *)v157 + 6 * a4);
    _X26 = (char *)v157 + result;
    _X27 = (uint8x8_t *)((char *)v157 + 7 * a4);
    _X28 = (char *)v157 + 11 * a4;
    v157 = (uint8x8_t *)((char *)v157 + v9);
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X22]
      PRFUM           #0, [X22,#7]
    }
    v176 = vmlal_u8((uint16x8_t)vaddq_s16(v163, v156), v103, v151);
    v177 = *_X23;
    _X23 = (uint8x8_t *)((char *)_X23 + 15);
    v131 = v177;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X24]
      PRFUM           #0, [X24,#7]
    }
    v110 = v138;
    v181 = vmlsl_u8(vmlal_u8(vmlal_u8(v162, v103, v152), v144, v154), v138, v153);
    v182 = vmlal_u8(v176, v138, v152);
    v183 = vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(v161, v117, v149), v103, v150), v156), v138, v151);
    v184 = (int16x8_t)vmlsl_u8(v164, v138, v150);
    v185 = *_X25;
    _X25 = (uint8x8_t *)((char *)_X25 + 15);
    v138 = v185;
    __asm
    {
      PRFM            #0, [X25]
      PRFM            #0, [X26]
      PRFUM           #0, [X26,#7]
    }
    v189 = vmlsl_u8(vmlal_u8(v182, v124, v154), v144, v153);
    v190 = vmlal_u8(v183, v144, v152);
    v191 = vmlal_u8((uint16x8_t)vaddq_s16(v184, v156), v144, v151);
    v117 = v144;
    v192 = *_X27;
    _X27 = (uint8x8_t *)((char *)_X27 + 15);
    v144 = v192;
    __asm
    {
      PRFM            #0, [X27]
      PRFM            #0, [X28]
      PRFUM           #0, [X28,#7]
    }
    *v158 = vmlsl_u8(v181, v124, v159);
    v196 = (uint16x8_t *)((char *)v158 + v11);
    *v196 = vmlsl_u8(v189, v131, v159);
    v197 = (uint16x8_t *)((char *)v196 + v11);
    *v197 = vmlsl_u8(vmlsl_u8(vmlal_u8(v190, v131, v154), v124, v153), v138, v159);
    v198 = (uint16x8_t *)((char *)v197 + v11);
    *v198 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v191, v124, v152), v138, v154), v131, v153), v192, v159);
    v147 -= 4;
    v158 = (uint16x8_t *)((char *)v198 + v11);
  }
  while (v147 > 4);
  a7 += 2;
  ++a5;
  if ((v96 & 4) != 0)
  {
LABEL_14:
    v199 = qword_1C98325B0[v8 - 1];
    _X11 = (uint8x8_t *)((char *)a5 - 3 * a4);
    _X12 = (char *)_X11 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X11 + a4);
    v203 = *_X11;
    _X11 = (uint8x8_t *)((char *)_X11 + 15);
    v204 = v203;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#7]
    }
    _X11 = (char *)_X13 + 4 * a4;
    _X12 = (uint8x8_t *)((char *)_X13 + a4);
    v210 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    v211 = v210;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X12 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X12 + a4);
    v217 = *_X12;
    _X12 = (uint8x8_t *)((char *)_X12 + 15);
    v218 = v217;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X13 + 4 * a4;
    _X12 = (uint8x8_t *)((char *)_X13 + a4);
    v224 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    v225 = v224;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X12 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X12 + a4);
    v231 = *_X12;
    _X12 = (uint8x8_t *)((char *)_X12 + 15);
    v232 = v231;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X13 + 4 * a4;
    v237 = (uint8x8_t *)((char *)_X13 + a4);
    v238 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    v239 = v238;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)&v237[1] + 7;
    v244 = *v237;
    _X12 = (char *)v237 + 4 * a4;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#7]
    }
    v249 = a2 + 4;
    v250 = 11 * a4;
    v251 = 7 * a4;
    v252 = 5 * a4;
    v253 = 10 * a4;
    v254 = 6 * a4;
    v255 = (uint8x8_t)vdup_lane_s8(v199, 1);
    v256 = (uint8x8_t)vdup_lane_s8(v199, 0);
    v257 = (uint8x8_t)vdup_lane_s8(v199, 2);
    v258 = (uint8x8_t)vdup_lane_s8(v199, 3);
    v259 = (uint8x8_t)vdup_lane_s8(v199, 4);
    v260 = (uint8x8_t)vdup_lane_s8(v199, 5);
    v261 = 9 * a4;
    v262 = (uint8x8_t)vdup_lane_s8(v199, 6);
    v263 = (uint8x8_t)vdup_lane_s8(v199, 7);
    do
    {
      _X2 = &a5[v10];
      _X0 = (uint8x8_t *)((char *)a5 + v252);
      _X3 = (char *)a5 + v261;
      _X1 = (uint8x8_t *)((char *)a5 + v254);
      _X7 = (char *)a5 + v253;
      _X5 = (uint8x8_t *)((char *)a5 + v251);
      _X20 = (char *)a5 + v250;
      a5 = (uint8x8_t *)((char *)a5 + v9);
      v271 = vmull_u8(v211, v255);
      v272 = vmull_u8(v225, v255);
      v273 = vmull_u8(v225, v256);
      *(int16x4_t *)v271.i8 = vsub_s16(*(int16x4_t *)v271.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v204, v256), v218, v257));
      v274 = vmlal_u8(v271, v225, v258);
      v275 = (int16x4_t)vmlal_u8(vmull_u8(v211, v256), v225, v257).u64[0];
      _X19 = (char *)&a5[1] + 7;
      v225 = *a5;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#7]
      }
      v280 = (int16x4_t)vmull_u8(v232, v255).u64[0];
      v281 = vmlal_u8(v274, v232, v259);
      *(int16x4_t *)v7.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmull_u8(v218, v255), v275);
      v282 = vmlal_u8(v7, v232, v258);
      v283 = (int16x4_t)vmlal_u8(vmull_u8(v218, v256), v232, v257).u64[0];
      v204 = v232;
      v284 = *_X0;
      _X0 = (uint8x8_t *)((char *)_X0 + 15);
      v232 = v284;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X3]
        PRFUM           #0, [X3,#7]
      }
      v288 = vmull_u8(v239, v260);
      v289 = vmlal_u8(v282, v239, v259);
      *(int16x4_t *)v272.i8 = vsub_s16(*(int16x4_t *)v272.i8, v283);
      v290 = vmlal_u8(v272, v239, v258);
      v291 = vmlal_u8(v273, v239, v257);
      v211 = v239;
      v292 = *_X1;
      _X1 = (uint8x8_t *)((char *)_X1 + 15);
      v239 = v292;
      __asm
      {
        PRFM            #0, [X1]
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      v296 = vmull_u8(v244, v260);
      v281.i64[0] = vmlal_u8(v281, v244, v262).u64[0];
      v297 = vmlal_u8(v290, v244, v259);
      *(int16x4_t *)v291.i8 = vsub_s16(v280, *(int16x4_t *)v291.i8);
      v298 = vmlal_u8(v291, v244, v258);
      v299 = *_X5;
      _X5 = (uint8x8_t *)((char *)_X5 + 15);
      v218 = v244;
      __asm
      {
        PRFM            #0, [X5]
        PRFM            #0, [X20]
        PRFUM           #0, [X20,#7]
      }
      v303 = vmull_u8(*a5, v260);
      *a7 = vadd_s16(vsub_s16(*(int16x4_t *)v281.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v288, *a5, v263)), (int16x4_t)0xE000E000E000E000);
      v7 = vmlal_u8(v289, v225, v262);
      *(int16x4_t *)((char *)a7 + v11) = vadd_s16(vsub_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v296, v232, v263)), (int16x4_t)0xE000E000E000E000);
      v304 = (int16x4_t *)((char *)a7 + v11 + v11);
      *v304 = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v297, v232, v262), (int16x4_t)*(_OWORD *)&vmlal_u8(v303, v239, v263)), (int16x4_t)0xE000E000E000E000);
      result = (uint64_t)v304 + v11;
      v249 -= 4;
      a7 = (int16x4_t *)(result + v11);
      *(int16x4_t *)result = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(v298, v225, v259), v239, v262), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v232, v260), v299, v263)), (int16x4_t)0xE000E000E000E000);
      v244 = v299;
    }
    while (v249 > 4);
  }
  return result;
}

uint64_t sub_1C9761408(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  char *v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  int8x16_t *v21;
  int8x16_t v23;
  int8x16_t v33;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v54;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  uint64_t v78;
  int v79;
  int32x4_t v80;
  int32x4_t v81;
  int8x16_t v83;
  int8x16_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int v104;
  BOOL v105;
  int8x8_t v106;
  uint8x16_t v108;
  uint8x16_t v109;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v131;
  int8x16_t v132;
  uint8x16_t v138;
  uint8x16_t v139;
  int8x16_t v145;
  int8x16_t v146;
  int16x8_t v147;
  int8x16_t v152;
  int8x16_t v153;
  int v155;
  uint64_t v157;
  int8x16_t v158;
  uint8x8_t v159;
  int8x16_t v160;
  uint8x8_t v161;
  int8x16_t v162;
  uint8x8_t v163;
  int8x16_t v164;
  uint8x8_t v166;
  uint8x16_t v167;
  int8x16_t v168;
  uint8x8_t v169;
  uint8x16_t v170;
  int32x4_t v171;
  uint8x16_t v172;
  uint16x8_t v173;
  uint16x8_t v174;
  uint16x8_t v175;
  int16x8_t v180;
  int8x16_t v181;
  uint8x8_t v183;
  uint8x8_t v184;
  uint8x8_t v185;
  uint8x8_t v186;

  v7 = 4 * a4;
  v8 = 8 * a4;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v9 = qword_1C98325B0[(a3 & 3) - 1];
  v185 = (uint8x8_t)vdup_lane_s8(v9, 1);
  v186 = (uint8x8_t)vdup_lane_s8(v9, 0);
  v10 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1C98325B0[((a3 >> 16) & 3) - 1]);
  v11 = -3 * a4 - 3;
  v12 = (char *)a7 + 2 * a6;
  v183 = (uint8x8_t)vdup_lane_s8(v9, 3);
  v184 = (uint8x8_t)vdup_lane_s8(v9, 2);
  v13 = (uint8x8_t)vdup_lane_s8(v9, 4);
  v14 = (uint8x8_t)vdup_lane_s8(v9, 5);
  v15 = (uint8x8_t)vdup_lane_s8(v9, 6);
  v16 = (uint8x8_t)vdup_lane_s8(v9, 7);
  v17 = 5 * a4;
  v18.i64[0] = 0x700000007;
  v18.i64[1] = 0x700000007;
  do
  {
    v19 = 0;
    _X21 = a5 + v11 + v7;
    v21 = (int8x16_t *)(a5 + v11 + a4);
    _X20 = a5 + v11 + 31;
    v23 = *(int8x16_t *)(a5 + v11);
    __asm
    {
      PRFM            #0, [X20]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X20 = &v21->i8[v7];
    _X21 = &v21[1].i8[15];
    v33 = *v21;
    _X22 = &v21->i8[a4];
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X22[v7];
    _X21 = &_X22[a4];
    v40 = *(int8x16_t *)_X22;
    _X22 += 31;
    v41 = v40;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X21[v7];
    v46 = (int8x16_t *)&_X21[a4];
    v47 = *(int8x16_t *)_X21;
    _X21 += 31;
    v48 = v47;
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &v46->i8[v7];
    _X21 = &v46[1].i8[15];
    v54 = *v46;
    _X22 = &v46->i8[a4];
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X22[v7];
    _X21 = &_X22[a4];
    v61 = *(int8x16_t *)_X22;
    _X22 += 31;
    v62 = v61;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X21[v7];
    v67 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 1uLL), v185), *(uint8x8_t *)v23.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 7uLL),
                       v16);
    v68 = *(int8x16_t *)_X21;
    _X21 += 31;
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    v72 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 1uLL), v185), *(uint8x8_t *)v33.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 7uLL),
                       v16);
    v73 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 1uLL), v185), *(uint8x8_t *)v41.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 7uLL),
                       v16);
    v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 1uLL), v185), *(uint8x8_t *)v48.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 7uLL),
                       v16);
    v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 1uLL), v185), *(uint8x8_t *)v54.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 7uLL),
                       v16);
    v76 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 1uLL), v185), *(uint8x8_t *)v62.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 7uLL),
                       v16);
    v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 1uLL), v185), *(uint8x8_t *)v68.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 7uLL),
                       v16);
    v78 = a5;
    v79 = a2 + 2;
    do
    {
      v80 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v10.i8, 0);
      v81 = vmlsl_high_lane_s16(vmull_high_lane_s16(v72, *(int16x4_t *)v10.i8, 1), v67, *(int16x4_t *)v10.i8, 0);
      v67 = v73;
      _X22 = v78 + v7;
      v83 = *(int8x16_t *)(v78 + v7 - 3);
      __asm { PRFUM           #0, [X22,#0x1C] }
      _X22 = v78 + v8 - 3;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0xF]
      }
      _X22 = v78 + v17;
      v89 = *(int8x16_t *)(v78 + v17 - 3);
      v90 = vmull_lane_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 1);
      v91 = vmull_high_lane_s16(v73, *(int16x4_t *)v10.i8, 1);
      v92 = vmlsl_lane_s16(v80, *(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 2);
      v93 = vmlsl_high_lane_s16(v81, v73, *(int16x4_t *)v10.i8, 2);
      v73 = v75;
      __asm { PRFUM           #0, [X22,#0x1C] }
      _X22 = v78 + v8 - 3 + a4;
      __asm { PRFM            #0, [X22] }
      v97 = vmlsl_lane_s16(v90, *(int16x4_t *)v72.i8, *(int16x4_t *)v10.i8, 0);
      v98 = vmlsl_high_lane_s16(v91, v72, *(int16x4_t *)v10.i8, 0);
      v72 = v74;
      __asm { PRFUM           #0, [X22,#0xF] }
      v100 = vmlal_lane_s16(vaddq_s32(v92, v18), *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 3);
      v101 = vmlal_high_lane_s16(vaddq_s32(v93, v18), v74, *(int16x4_t *)v10.i8, 3);
      v102 = vmlsl_lane_s16(v97, *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 2);
      v103 = vmlsl_high_lane_s16(v98, v74, *(int16x4_t *)v10.i8, 2);
      v74 = v76;
      v75 = v77;
      v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 1uLL), v185), *(uint8x8_t *)v89.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 5uLL), v14),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 7uLL),
                         v16);
      v76 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 1uLL), v185), *(uint8x8_t *)v83.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 5uLL), v14),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 7uLL),
                         v16);
      *(int16x8_t *)&a7->i8[v19] = vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v100, *(int16x4_t *)v73.i8, v10, 4), *(int16x4_t *)v75.i8, v10, 6), *(int16x4_t *)v74.i8, v10, 5), *(int16x4_t *)v76.i8, v10, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v101, v73, v10, 4), v75, v10, 6), v74,
                                         v10,
                                         5),
                                       v76,
                                       v10,
                                       7),
                                     6uLL);
      *(int16x8_t *)&v12[v19] = vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vaddq_s32(v102, v18), *(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v74.i8, v10, 4), *(int16x4_t *)v76.i8, v10, 6), *(int16x4_t *)v75.i8, v10, 5),
                                      *(int16x4_t *)v77.i8,
                                      v10,
                                      7),
                                    6uLL),
                                  vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vaddq_s32(v103, v18), v73, *(int16x4_t *)v10.i8, 3), v74, v10, 4), v76, v10, 6), v75, v10, 5), v77, v10, 7), 6uLL);
      v19 += 4 * a6;
      v79 -= 2;
      v78 += 2 * a4;
    }
    while (v79 > 2);
    a7 += 2;
    a5 += 8;
    v104 = result - 8;
    v12 += 16;
    v105 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v105);
  if (v104)
  {
LABEL_10:
    v106 = qword_1C98325B0[((a3 >> 16) & 3) - 1];
    _X10 = -3 * a4 + a5;
    v108 = *(uint8x16_t *)(_X10 - 3);
    _X10 -= 3;
    v109 = v108;
    __asm { PRFUM           #0, [X10,#0x1F] }
    _X11 = _X10 + 4 * a4;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    _X10 = (_OWORD *)(_X10 + a4);
    _X11 = (char *)_X10 + 4 * a4;
    _X12 = (_OWORD *)((char *)_X10 + a4);
    v117 = *(int8x16_t *)_X10;
    _X10 = (_OWORD *)((char *)_X10 + 31);
    v118 = v117;
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    _X10 = (char *)_X12 + 4 * a4;
    _X11 = (_OWORD *)((char *)_X12 + a4);
    v124 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    v125 = v124;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (char *)_X11 + 4 * a4;
    _X12 = (_OWORD *)((char *)_X11 + a4);
    v131 = *(int8x16_t *)_X11;
    _X11 = (_OWORD *)((char *)_X11 + 31);
    v132 = v131;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (char *)_X12 + 4 * a4;
    _X11 = (_OWORD *)((char *)_X12 + a4);
    v138 = *(uint8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    v139 = v138;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (char *)_X11 + 4 * a4;
    _X12 = (_OWORD *)((char *)_X11 + a4);
    v145 = *(int8x16_t *)_X11;
    _X11 = (_OWORD *)((char *)_X11 + 31);
    v146 = v145;
    v147 = (int16x8_t)vmovl_u8((uint8x8_t)qword_1C98325B0[(a3 & 3) - 1]);
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X13 = (char *)_X12 + 4 * a4;
    v152 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    v153 = v152;
    __asm { PRFM            #0, [X12] }
    v155 = a2 + 1;
    __asm { PRFM            #0, [X13] }
    v157 = v8 - 3;
    v158 = vdupq_lane_s8(v106, 2);
    v159 = (uint8x8_t)vextq_s8(v158, v158, 8uLL).u64[0];
    v160 = vdupq_lane_s8(v106, 3);
    v161 = (uint8x8_t)vextq_s8(v160, v160, 8uLL).u64[0];
    v162 = vdupq_lane_s8(v106, 4);
    v163 = (uint8x8_t)vextq_s8(v162, v162, 8uLL).u64[0];
    v164 = vdupq_lane_s8(v106, 6);
    __asm { PRFUM           #0, [X13,#0xF] }
    v166 = (uint8x8_t)vextq_s8(v164, v164, 8uLL).u64[0];
    v167 = (uint8x16_t)vdupq_lane_s8(v106, 0);
    v168 = vdupq_lane_s8(v106, 7);
    v169 = (uint8x8_t)vextq_s8(v168, v168, 8uLL).u64[0];
    v170 = (uint8x16_t)vdupq_lane_s8(v106, 1);
    v171.i64[0] = 0x700000007;
    v171.i64[1] = 0x700000007;
    v172 = (uint8x16_t)vdupq_lane_s8(v106, 5);
    do
    {
      v173 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v170.i8), *(uint8x8_t *)v109.i8, *(uint8x8_t *)v167.i8);
      v174 = vmull_high_u8((uint8x16_t)v118, v170);
      v175 = vmull_high_u8(v109, v167);
      v109 = (uint8x16_t)v118;
      v118 = v125;
      v125 = v132;
      v132 = (int8x16_t)v139;
      v139 = (uint8x16_t)v146;
      v146 = v153;
      _X12 = a5 + v7;
      v153 = *(int8x16_t *)(a5 + v7 - 3);
      _X13 = a5 + v157;
      __asm
      {
        PRFUM           #0, [X12,#0x1C]
        PRFM            #0, [X13]
      }
      v180 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v173, *(uint8x8_t *)v118.i8, *(uint8x8_t *)v158.i8), *(uint8x8_t *)v125.i8, *(uint8x8_t *)v160.i8), *(uint8x8_t *)v132.i8, *(uint8x8_t *)v162.i8), *(uint8x8_t *)v146.i8, *(uint8x8_t *)v164.i8), *(uint8x8_t *)v139.i8, *(uint8x8_t *)v172.i8), *(uint8x8_t *)v153.i8, *(uint8x8_t *)v168.i8);
      *(int16x4_t *)v174.i8 = vsub_s16(*(int16x4_t *)v174.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v175, (uint8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), v159));
      v181 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v174, (uint8x8_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL), v161), (uint8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL), v163), (uint8x8_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL), v166);
      *(int16x4_t *)v181.i8 = vsub_s16(*(int16x4_t *)v181.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v139, v172), (uint8x8_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL), v169));
      __asm { PRFUM           #0, [X13,#0xF] }
      *a7 = vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vaddq_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 2uLL), *(int16x4_t *)v147.i8, 1), *(int16x4_t *)v180.i8, *(int16x4_t *)v147.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL), *(int16x4_t *)v147.i8, 2), v171),
                        (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 6uLL),
                        *(int16x4_t *)v147.i8,
                        3),
                      v180,
                      v147,
                      4),
                    (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, v181, 0xCuLL),
                    v147,
                    6),
                  (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, v181, 0xAuLL),
                  v147,
                  5),
                (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, v181, 0xEuLL),
                v147,
                7),
              6uLL);
      a7 = (int16x4_t *)((char *)a7 + 2 * a6);
      --v155;
      a5 += a4;
    }
    while (v155 > 1);
  }
  return result;
}

double sub_1C9761AE8(int a1, int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint8x16_t *a8)
{
  int16x8_t *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int v12;
  uint8x16_t *v13;
  int16x8_t v14;
  uint8x16_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int16x8_t *v22;
  int16x8_t *v23;
  uint64_t *v24;
  uint8x16_t v25;
  uint8x16_t v26;
  int v27;
  uint64_t v28;
  int16x8_t v29;

  if (a1 < 16)
  {
    v16 = a1;
  }
  else
  {
    v8 = (int16x8_t *)(a6 + 2);
    v9 = a4 + 1;
    do
    {
      v10 = v9;
      v11 = v8;
      v12 = a2 + 1;
      v13 = a8;
      do
      {
        v14 = (int16x8_t)vqrshrn_high_n_s16(vqrshrn_n_s16(vhaddq_s16(v10[-1], v11[-1]), 6uLL), vhaddq_s16(*v10, *v11), 6uLL);
        v15.i64[0] = 0x8080808080808080;
        v15.i64[1] = 0x8080808080808080;
        *v13 = vsqaddq_u8(v15, (int8x16_t)v14);
        v13 = (uint8x16_t *)((char *)v13 + a7);
        --v12;
        v11 = (int16x8_t *)((char *)v11 + 2 * a5);
        v10 = (int16x8_t *)((char *)v10 + 2 * a3);
      }
      while (v12 > 1);
      ++a8;
      a4 += 2;
      a6 += 4;
      v16 = a1 - 16;
      v8 += 2;
      v9 += 2;
      v17 = a1 <= 31;
      a1 -= 16;
    }
    while (!v17);
  }
  v18 = 2 * a7;
  v19 = 4 * a5;
  v20 = 4 * a3;
  if ((v16 & 8) != 0)
  {
    v21 = a2 + 2;
    v22 = a4;
    v23 = (int16x8_t *)a6;
    v24 = (uint64_t *)a8;
    do
    {
      v14 = (int16x8_t)vqrshrn_high_n_s16(vqrshrn_n_s16(vhaddq_s16(*v22, *v23), 6uLL), vhaddq_s16(*(int16x8_t *)((char *)v22 + 2 * a3), *(int16x8_t *)((char *)v23 + 2 * a5)), 6uLL);
      v25.i64[0] = 0x8080808080808080;
      v25.i64[1] = 0x8080808080808080;
      v26 = vsqaddq_u8(v25, (int8x16_t)v14);
      *v24 = v26.i64[0];
      *(uint64_t *)((char *)v24 + a7) = v26.i64[1];
      v24 = (uint64_t *)((char *)v24 + v18);
      v21 -= 2;
      v23 = (int16x8_t *)((char *)v23 + v19);
      v22 = (int16x8_t *)((char *)v22 + v20);
    }
    while (v21 > 2);
    a8 = (uint8x16_t *)((char *)a8 + 8);
    ++a4;
    a6 += 2;
  }
  if ((v16 & 4) != 0)
  {
    v27 = a2 + 2;
    do
    {
      v28 = a4->i64[0];
      v14.i64[1] = *(uint64_t *)((char *)a4->i64 + 2 * a3);
      v29.i64[0] = *a6;
      v29.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      *(int8x8_t *)v14.i8 = vqrshrn_n_s16(vhaddq_s16(v14, v29), 6uLL);
      *(uint8x8_t *)v29.i8 = vsqadd_u8((uint8x8_t)0x8080808080808080, *(int8x8_t *)v14.i8);
      a8->i32[0] = v29.i32[0];
      *(__int32 *)((char *)a8->i32 + a7) = v29.i32[1];
      a8 = (uint8x16_t *)((char *)a8 + v18);
      v27 -= 2;
      a6 = (uint64_t *)((char *)a6 + v19);
      a4 = (int16x8_t *)((char *)a4 + v20);
    }
    while (v27 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1C9761C4C(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, int8x16_t *a8)
{
  const float *v8;
  int16x8_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int16x4_t *v14;
  int16x4_t *v15;
  int v16;
  int8x16_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int16x4_t *v23;
  uint64_t *v24;
  int8x16_t v25;
  int16x4_t v26;
  int v27;
  int8x8_t v28;

  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v8 = a4 + 1;
  v10 = (int16x4_t)vld1_dup_f32(v8);
  v11 = vdupq_n_s32(a3);
  v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  v13 = vnegq_s32(v11);
  if ((int)result < 16)
  {
    v18 = result;
  }
  else
  {
    v14 = a6 + 2;
    do
    {
      v15 = v14;
      v16 = a2 + 1;
      v17 = a8;
      do
      {
        *v17 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, v15[-2], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)v15[-2].i8, v9), v13))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *v15, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)v15->i8, v9), v13)));
        v17 = (int8x16_t *)((char *)v17 + a7);
        --v16;
        v15 = (int16x4_t *)((char *)v15 + 2 * a5);
      }
      while (v16 > 1);
      ++a8;
      a6 += 4;
      v18 = result - 16;
      v14 += 4;
      v19 = (int)result <= 31;
      result = (result - 16);
    }
    while (!v19);
  }
  v20 = 2 * a7;
  v21 = 4 * a5;
  if ((v18 & 8) != 0)
  {
    v22 = a2 + 2;
    v23 = a6;
    v24 = (uint64_t *)a8;
    do
    {
      v25 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *v23, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)v23->i8, v9), v13))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)v23 + 2 * a5), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v23->i8[2 * a5], v9), v13)));
      *v24 = v25.i64[0];
      *(uint64_t *)((char *)v24 + a7) = v25.i64[1];
      v24 = (uint64_t *)((char *)v24 + v20);
      v22 -= 2;
      v23 = (int16x4_t *)((char *)v23 + v21);
    }
    while (v22 > 2);
    a8 = (int8x16_t *)((char *)a8 + 8);
    a6 += 2;
  }
  if ((v18 & 4) != 0)
  {
    v26 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v27 = a2 + 2;
    do
    {
      v28 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v26), v13)));
      a8->i32[0] = v28.i32[0];
      *(__int32 *)((char *)a8->i32 + a7) = v28.i32[1];
      a8 = (int8x16_t *)((char *)a8 + v20);
      v27 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v21);
    }
    while (v27 > 2);
  }
  return result;
}

int16x4_t *sub_1C9761E00(int16x4_t *result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, int8x16_t *a11)
{
  const float *v11;
  int16x8_t v12;
  const float *v14;
  int16x8_t v15;
  int16x4_t *v16;
  int16x4_t v17;
  int16x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x4_t *v21;
  int16x4_t *v22;
  int16x4_t *v23;
  int16x4_t *v24;
  int v25;
  int8x16_t *v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int16x4_t *v33;
  uint64_t *v34;
  int8x16_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int v38;
  int8x8_t v39;

  v12 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = a4 + 1;
  v15 = (int16x8_t)vld1q_dup_f32(a7);
  v14 = a7 + 1;
  v16 = a9;
  v17 = (int16x4_t)vld1_dup_f32(v11);
  v18 = (int16x4_t)vld1_dup_f32(v14);
  v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v18, v17), vdupq_n_s32(a3)));
  v20 = vdupq_n_s32(~a3);
  if ((int)result < 16)
  {
    v27 = (char)result;
  }
  else
  {
    v21 = a9 + 2;
    v22 = a6 + 2;
    do
    {
      v23 = v22;
      v24 = v21;
      v25 = a2 + 1;
      v26 = a11;
      do
      {
        *v26 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, v23[-2], *(int16x4_t *)v12.i8), v24[-2], *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)v23[-2].i8, v12), *(int16x8_t *)v24[-2].i8, v15), v20))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *v23, *(int16x4_t *)v12.i8), *v24, *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)v23->i8, v12), *(int16x8_t *)v24->i8, v15), v20)));
        v26 = (int8x16_t *)((char *)v26 + a10);
        --v25;
        v24 = (int16x4_t *)((char *)v24 + 2 * a8);
        v23 = (int16x4_t *)((char *)v23 + 2 * a5);
      }
      while (v25 > 1);
      ++a11;
      a6 += 4;
      v16 += 4;
      v27 = (_BYTE)result - 16;
      v21 += 4;
      v22 += 4;
      v28 = (int)result <= 31;
      result = (int16x4_t *)((_DWORD)result - 16);
    }
    while (!v28);
  }
  v29 = 2 * a10;
  v30 = 4 * a8;
  v31 = 4 * a5;
  if ((v27 & 8) != 0)
  {
    v32 = a2 + 2;
    result = a6;
    v33 = v16;
    v34 = (uint64_t *)a11;
    do
    {
      v35 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *result, *(int16x4_t *)v12.i8), *v33, *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)result->i8, v12), *(int16x8_t *)v33->i8, v15), v20))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)result + 2 * a5), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v33 + 2 * a8), *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(
                    vmlal_high_s16(v19, *(int16x8_t *)&result->i8[2 * a5], v12),
                    *(int16x8_t *)&v33->i8[2 * a8],
                    v15),
                  v20)));
      *v34 = v35.i64[0];
      *(uint64_t *)((char *)v34 + a10) = v35.i64[1];
      v34 = (uint64_t *)((char *)v34 + v29);
      v32 -= 2;
      v33 = (int16x4_t *)((char *)v33 + v30);
      result = (int16x4_t *)((char *)result + v31);
    }
    while (v32 > 2);
    a11 = (int8x16_t *)((char *)a11 + 8);
    a6 += 2;
    v16 += 2;
  }
  if ((v27 & 4) != 0)
  {
    v36 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v37 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v38 = a2 + 2;
    do
    {
      v39 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v16, *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v36), *(int16x4_t *)((char *)v16 + 2 * a8), v37), v20)));
      a11->i32[0] = v39.i32[0];
      *(__int32 *)((char *)a11->i32 + a10) = v39.i32[1];
      a11 = (int8x16_t *)((char *)a11 + v29);
      v38 -= 2;
      v16 = (int16x4_t *)((char *)v16 + v30);
      a6 = (int16x4_t *)((char *)a6 + v31);
    }
    while (v38 > 2);
  }
  return result;
}

uint64_t sub_1C9762038(uint64_t result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int8x8_t *a7, double a8, double a9, double a10, double a11, double a12, uint16x8_t a13, double a14, int8x16_t a15)
{
  uint64_t v15;
  int8x8_t v16;
  char *v17;
  uint8x16_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int8x16_t v25;
  int8x16_t *v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  char v32;
  BOOL v33;
  uint64_t v34;
  int8x8_t v35;
  int v36;
  uint8x8_t v37;
  uint8x8_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  int8x8_t *v42;
  int8x16_t v43;
  int8x16_t v53;
  int8x8_t *v58;
  int8x8_t v59;
  int v60;
  uint64_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  uint8x8_t v64;
  uint8x8_t v65;
  int8x16_t v66;
  int8x16_t v72;

  v15 = 2 * a4;
  if ((int)result < 16)
  {
    v32 = result;
  }
  else
  {
    v16 = qword_1C98325D0[(a3 & 7) - 1];
    v17 = (char *)a7 + a6;
    v18 = (uint8x16_t)vdupq_lane_s8(v16, 0);
    v19 = (uint8x8_t)vdup_lane_s8(v16, 1);
    v20 = (uint8x8_t)vdup_lane_s8(v16, 2);
    v21 = (uint8x8_t)vdup_lane_s8(v16, 3);
    do
    {
      v22 = 0;
      v23 = -2;
      v24 = a2 + 2;
      do
      {
        v25 = *(int8x16_t *)(_X4 + v23);
        a13.i64[0] = *(_QWORD *)(_X4 + v23 + 16);
        v26 = (int8x16_t *)(_X4 + v23 + a4);
        a15.i64[0] = v26[1].i64[0];
        v27 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL), v20), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 6uLL), v21);
        v28 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v25, (int8x16_t)a13, 0xAuLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, (int8x16_t)a13, 0xCuLL), v20), (uint8x16_t)v25, v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, (int8x16_t)a13, 0xEuLL), v21);
        v29 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v26, *v26, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(*v26, *v26, 4uLL), v20), *(uint8x8_t *)v26->i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v26, *v26, 6uLL), v21);
        v30 = (uint8x8_t)vextq_s8(*v26, a15, 0xAuLL).u64[0];
        v31 = (uint8x8_t)vextq_s8(*v26, a15, 0xCuLL).u64[0];
        a15 = vextq_s8(*v26, a15, 0xEuLL);
        a13 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v30, v19), v31, v20), *(uint8x16_t *)v26, v18), *(uint8x8_t *)a15.i8, v21);
        *(int8x16_t *)&a7->i8[v22] = vqrshrun_high_n_s16(vqrshrun_n_s16(v27, 6uLL), v28, 6uLL);
        *(int8x16_t *)&v17[v22] = vqrshrun_high_n_s16(vqrshrun_n_s16(v29, 6uLL), (int16x8_t)a13, 6uLL);
        v22 += 2 * a6;
        v23 += v15;
        v24 -= 2;
      }
      while (v24 > 2);
      a7 += 2;
      _X4 += 16;
      v32 = result - 16;
      v17 += 16;
      v33 = (int)result <= 31;
      result = (result - 16);
    }
    while (!v33);
  }
  v34 = 4 * a4;
  if ((v32 & 8) != 0)
  {
    v35 = qword_1C98325D0[(a3 & 7) - 1];
    v36 = a2 + 2;
    v37 = (uint8x8_t)vdup_lane_s8(v35, 0);
    v38 = (uint8x8_t)vdup_lane_s8(v35, 1);
    v39 = (uint8x8_t)vdup_lane_s8(v35, 2);
    v40 = (uint8x8_t)vdup_lane_s8(v35, 3);
    _X15 = _X4;
    v42 = a7;
    do
    {
      v43 = *(int8x16_t *)(_X15 - 2);
      __asm { PRFUM           #0, [X15,#0x1D] }
      _X17 = _X15 + v34 - 2;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = _X15 + a4;
      v53 = *(int8x16_t *)(_X15 + a4 - 2);
      __asm { PRFUM           #0, [X17,#0x1D] }
      _X17 = _X15 + v34 - 2 + a4;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      *v42 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 2uLL), v38), (uint8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 4uLL), v39), *(uint8x8_t *)v43.i8, v37), (uint8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 6uLL), v40), 6uLL);
      v58 = (int8x8_t *)((char *)v42 + a6);
      *v58 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 2uLL), v38), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 4uLL), v39), *(uint8x8_t *)v53.i8, v37), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 6uLL), v40), 6uLL);
      v42 = (int8x8_t *)((char *)v58 + a6);
      v36 -= 2;
      _X15 += v15;
    }
    while (v36 > 2);
    ++a7;
    _X4 += 8;
  }
  if ((v32 & 4) != 0)
  {
    v59 = qword_1C98325D0[(a3 & 7) - 1];
    v60 = a2 + 2;
    v61 = v34 - 2;
    v62 = (uint8x8_t)vdup_lane_s8(v59, 0);
    v63 = (uint8x8_t)vdup_lane_s8(v59, 1);
    v64 = (uint8x8_t)vdup_lane_s8(v59, 2);
    v65 = (uint8x8_t)vdup_lane_s8(v59, 3);
    do
    {
      v66 = *(int8x16_t *)(_X4 - 2);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X12 = _X4 + v61;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      _X12 = _X4 + a4;
      v72 = *(int8x16_t *)(_X4 + a4 - 2);
      __asm { PRFUM           #0, [X12,#0x1D] }
      _X12 = _X4 + v61 + a4;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      a7->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 2uLL), v63), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 4uLL), v64), *(uint8x8_t *)v66.i8, v62), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 6uLL), v65), 6uLL).u32[0];
      *(__int32 *)((char *)a7->i32 + a6) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 2uLL), v63), (uint8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 4uLL), v64), *(uint8x8_t *)v72.i8, v62), (uint8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 6uLL), v65), 6uLL).u32[0];
      a7 = (int8x8_t *)((char *)a7 + a6 + a6);
      v60 -= 2;
      _X4 += v15;
    }
    while (v60 > 2);
  }
  return result;
}

double sub_1C97622E0(int a1, int a2, unint64_t a3, uint64_t a4, _OWORD *_X4, uint64_t a6, int8x8_t *a7, uint8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint8x16_t v17;
  char *v18;
  uint8x16_t v19;
  uint8x16_t v20;
  int8x8_t *v21;
  uint8x16_t v23;
  uint8x16_t v32;
  uint8x16_t v39;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v46;
  int8x8_t *v47;
  char *v49;
  uint8x16_t v50;
  uint8x16_t v52;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  char v66;
  BOOL v67;
  int8x8_t v68;
  uint8x8_t v71;
  uint8x8_t v80;
  int v85;
  uint8x8_t v86;
  uint8x8_t v87;
  uint8x8_t v88;
  int8x8_t *v89;
  char *v90;
  uint8x8_t v91;
  char *v92;
  uint8x8_t v94;
  uint16x8_t v99;
  uint16x8_t v100;
  int8x8_t *v106;
  int8x8_t v107;
  uint8x8_t v110;
  uint8x8_t v120;
  int v124;
  uint8x8_t v125;
  uint8x8_t v126;
  uint8x8_t v127;
  uint8x8_t v128;
  uint8x8_t v130;
  uint16x8_t v137;
  uint16x8_t v138;
  uint8x8_t v139;
  int8x8_t *v143;

  v8 = (a3 >> 16) & 7;
  v9 = 2 * a4;
  if (a1 < 16)
  {
    v21 = a7;
    v66 = a1;
  }
  else
  {
    v10 = 0;
    v11 = qword_1C98325D0[v8 - 1];
    v12 = 4 * a4;
    v13 = 2 * a6;
    v14 = (uint64_t)_X4 + 8 * a4 - a4;
    v15 = (char *)_X4 + 3 * a4;
    v16 = (char *)_X4 + 2 * a4;
    a8 = (uint8x16_t)vdupq_lane_s8(v11, 0);
    v17 = (uint8x16_t)vdupq_lane_s8(v11, 1);
    v18 = (char *)_X4 + 6 * a4;
    v19 = (uint8x16_t)vdupq_lane_s8(v11, 2);
    v20 = (uint8x16_t)vdupq_lane_s8(v11, 3);
    v21 = a7;
    do
    {
      _X22 = (uint64_t)_X4 - a4 + 31;
      v23 = *(uint8x16_t *)((char *)_X4 - a4);
      _X21 = (char *)_X4 + v12 - a4;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      v32 = *(uint8x16_t *)_X4;
      __asm { PRFUM           #0, [X4,#0x1F] }
      _X21 = (char *)_X4 + v12;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X27 = (char *)_X4 + a4 + v12;
      _X21 = (uint64_t)_X4 + a4 + 31;
      v39 = *(uint8x16_t *)((char *)_X4 + a4);
      __asm { PRFM            #0, [X21] }
      v41 = v18;
      v42 = v16;
      v43 = v15;
      v44 = v14;
      __asm { PRFM            #0, [X27] }
      v46 = a2 + 2;
      v47 = a7;
      __asm { PRFUM           #0, [X27,#0xF] }
      v49 = (char *)a7 + a6;
      do
      {
        v50 = v39;
        _X28 = (uint64_t)&v42[v10 + 31];
        v52 = *(uint8x16_t *)&v42[v10];
        __asm { PRFM            #0, [X28] }
        _X28 = &v41[v10];
        __asm
        {
          PRFM            #0, [X28]
          PRFUM           #0, [X28,#0xF]
        }
        v57 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v39.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)a8.i8);
        v58 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v32, v17), v39, v19), v23, a8);
        v59 = vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v17.i8);
        v60 = vmull_high_u8(v39, v17);
        _X28 = (uint64_t)&v43[v10 + 31];
        v39 = *(uint8x16_t *)&v43[v10];
        v23 = v50;
        __asm { PRFM            #0, [X28] }
        _X28 = v44 + v10;
        __asm
        {
          PRFM            #0, [X28]
          PRFUM           #0, [X28,#0xF]
        }
        *(int8x16_t *)v47[v10 / 8].i8 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v57, *(uint8x8_t *)v52.i8, *(uint8x8_t *)v20.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v58, v52, v20), 6uLL);
        *(int8x16_t *)&v49[v10] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v59, *(uint8x8_t *)v52.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v32.i8, *(uint8x8_t *)a8.i8), *(uint8x8_t *)v39.i8, *(uint8x8_t *)v20.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v60, v52, v19), v32, a8), v39, v20), 6uLL);
        v49 += v13;
        v47 = (int8x8_t *)((char *)v47 + v13);
        v46 -= 2;
        v44 += v9;
        v43 += v9;
        v42 += v9;
        v41 += v9;
        v32 = v52;
      }
      while (v46 > 2);
      v21 += 2;
      ++_X4;
      v66 = a1 - 16;
      v10 += 16;
      v67 = a1 <= 31;
      a1 -= 16;
    }
    while (!v67);
  }
  if ((v66 & 8) != 0)
  {
    v68 = qword_1C98325D0[v8 - 1];
    _X14 = (uint64_t)_X4 + 4 * a4 - a4;
    _X13 = (uint64_t)_X4 - a4 + 15;
    v71 = *(uint8x8_t *)((char *)_X4 - a4);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    a8.i64[0] = *(_QWORD *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X13 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X14 = (uint64_t)_X4 + a4 + 15;
    v80 = *(uint8x8_t *)((char *)_X4 + a4);
    _X13 = (uint64_t)_X4 + 4 * a4 + a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    v85 = a2 + 2;
    v86 = (uint8x8_t)vdup_lane_s8(v68, 1);
    v87 = (uint8x8_t)vdup_lane_s8(v68, 0);
    v88 = (uint8x8_t)vdup_lane_s8(v68, 2);
    v89 = v21;
    v90 = (char *)_X4;
    v91 = (uint8x8_t)vdup_lane_s8(v68, 3);
    do
    {
      v92 = &v90[a4];
      _X6 = (uint64_t)&v90[v9 + 15];
      v94 = *(uint8x8_t *)&v90[2 * a4];
      __asm { PRFM            #0, [X6] }
      _X6 = &v90[6 * a4];
      __asm
      {
        PRFM            #0, [X6]
        PRFUM           #0, [X6,#7]
      }
      v99 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)a8.i8, v86), v80, v88), v71, v87);
      v100 = vmull_u8(v80, v86);
      v71 = v80;
      _X6 = (uint64_t)&v90[3 * a4 + 15];
      v80 = *(uint8x8_t *)&v90[3 * a4];
      _X0 = &v90[7 * a4];
      __asm
      {
        PRFM            #0, [X6]
        PRFM            #0, [X0]
        PRFUM           #0, [X0,#7]
      }
      *v89 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v99, v94, v91), 6uLL);
      v106 = (int8x8_t *)((char *)v89 + a6);
      *v106 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v100, v94, v88), *(uint8x8_t *)a8.i8, v87), v80, v91), 6uLL);
      v89 = (int8x8_t *)((char *)v106 + a6);
      v85 -= 2;
      v90 = &v92[a4];
      *(uint8x8_t *)a8.i8 = v94;
    }
    while (v85 > 2);
    ++v21;
    _X4 = (_OWORD *)((char *)_X4 + 8);
  }
  if ((v66 & 4) != 0)
  {
    v107 = qword_1C98325D0[v8 - 1];
    _X11 = (uint64_t)_X4 + 4 * a4 - a4;
    _X10 = (uint64_t)_X4 - a4 + 15;
    v110 = *(uint8x8_t *)((char *)_X4 - a4);
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    a8.i64[0] = *(_QWORD *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X10 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X11 = (uint64_t)_X4 + 4 * a4 + a4;
    _X10 = (uint64_t)_X4 + a4 + 15;
    v120 = *(uint8x8_t *)((char *)_X4 + a4);
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    v124 = a2 + 2;
    v125 = (uint8x8_t)vdup_lane_s8(v107, 1);
    v126 = (uint8x8_t)vdup_lane_s8(v107, 0);
    v127 = (uint8x8_t)vdup_lane_s8(v107, 2);
    v128 = (uint8x8_t)vdup_lane_s8(v107, 3);
    do
    {
      _X15 = (uint64_t)_X4 + v9 + 15;
      v130 = *(uint8x8_t *)((char *)_X4 + 2 * a4);
      __asm { PRFM            #0, [X15] }
      _X15 = (char *)_X4 + 6 * a4;
      __asm
      {
        PRFM            #0, [X15]
        PRFUM           #0, [X15,#7]
      }
      _X15 = (_QWORD *)((char *)_X4 + 3 * a4);
      _X16 = (char *)_X4 + 7 * a4;
      _X4 = (_OWORD *)((char *)_X4 + a4 + a4);
      v137 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)a8.i8, v125), v120, v127), v110, v126);
      v138 = vmull_u8(v120, v125);
      v110 = v120;
      v139 = *(uint8x8_t *)_X15;
      _X15 = (_QWORD *)((char *)_X15 + 15);
      v120 = v139;
      __asm
      {
        PRFM            #0, [X15]
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#7]
      }
      v21->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v137, v130, v128), 6uLL).u32[0];
      v143 = (int8x8_t *)((char *)v21 + a6);
      v21 = (int8x8_t *)((char *)v21 + a6 + a6);
      v124 -= 2;
      v143->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v138, v130, v127), *(uint8x8_t *)a8.i8, v126), v139, v128), 6uLL).u32[0];
      *(uint8x8_t *)a8.i8 = v130;
    }
    while (v124 > 2);
  }
  return *(double *)a8.i64;
}

uint64_t sub_1C97626BC(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t _X4, uint64_t a6, int8x8_t *a7)
{
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  unint64_t v10;
  int8x8_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x16_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint64_t v20;
  int8x8_t *v21;
  int8x16_t v24;
  int8x16_t v36;
  int8x16_t v46;
  uint64_t v52;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int8x8_t *v63;
  int16x8_t v64;
  int8x16_t v66;
  int32x4_t v70;
  int32x4_t v71;
  char v76;
  BOOL v77;
  uint64_t v78;
  int8x8_t v79;
  uint8x8_t v80;
  uint8x8_t v81;
  uint8x8_t v82;
  uint8x8_t v83;
  int8x16_t v85;
  int16x4_t v86;
  int8x16_t v92;
  int8x16_t v99;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int v106;
  uint8x8_t v107;
  uint8x8_t v108;
  uint64_t v109;
  int8x8_t *v110;
  int8x16_t v112;
  int32x4_t v117;
  int32x4_t v118;
  int8x8_t v119;
  int16x4_t v120;
  uint8x16_t v122;
  int8x16_t v128;
  int8x16_t v135;
  int8x16_t v136;
  int v140;
  uint8x16_t v141;
  uint8x16_t v142;
  int8x16_t v143;
  uint8x8_t v144;
  int8x16_t v145;
  uint8x8_t v146;
  uint8x16_t v147;
  int16x8_t v153;
  int8x16_t v154;
  int16x8_t v155;

  if ((int)result < 16)
  {
    v21 = a7;
    v76 = result;
  }
  else
  {
    v10 = 0;
    v11 = qword_1C98325D0[(a3 & 7) - 1];
    v12 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1C98325D0[((a3 >> 16) & 7) - 1]).u64[0];
    v13 = -2 - a4;
    v14 = 4 * (a4 - 16);
    v15 = _X4 + 6 * a4 - 50;
    v16 = (uint8x16_t)vdupq_lane_s8(v11, 0);
    v17 = (uint8x8_t)vdup_lane_s8(v11, 1);
    v18 = (uint8x8_t)vdup_lane_s8(v11, 2);
    v19 = (uint8x8_t)vdup_lane_s8(v11, 3);
    v20 = _X4 + 2 * a4;
    v21 = a7;
    do
    {
      _X17 = _X4 + v13;
      _X7 = _X4 + v13 + 79;
      v24 = *(int8x16_t *)(_X4 + v13);
      __asm
      {
        PRFUM           #0, [X17,#0x1F]
        PRFM            #0, [X17,#0x40]
        PRFM            #0, [X7]
      }
      v7.i64[0] = *(_QWORD *)(_X4 + v13 + 16);
      __asm { PRFUM           #0, [X17,#0x1F] }
      _X17 = _X4 + v13 + 16 + v14;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      v36 = *(int8x16_t *)(_X4 - 2);
      __asm
      {
        PRFUM           #0, [X4,#0x1D]
        PRFUM           #0, [X4,#0x3E]
        PRFUM           #0, [X4,#0x4D]
      }
      v8.i64[0] = *(_QWORD *)(_X4 + 14);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X7 = _X4 + 14 + v14;
      __asm
      {
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      _X7 = (int8x16_t *)(_X4 + 14 + a4 - 16);
      _X19 = &_X7[4].i8[15];
      v46 = *_X7;
      __asm
      {
        PRFUM           #0, [X7,#0x1F]
        PRFM            #0, [X7,#0x40]
        PRFM            #0, [X19]
      }
      _X17 = (uint64_t *)(_X4 + 14 + a4);
      _X7 = (char *)_X17 + v14;
      v52 = *_X17;
      _X17 = (uint64_t *)((char *)_X17 + 15);
      v9.i64[0] = v52;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      v56 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v18), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v19);
      v7 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v7, 0xAuLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v7, 0xCuLL), v18), (uint8x16_t)v24, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v7, 0xEuLL), v19);
      v57 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL), v18), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 6uLL), v19);
      v8 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v8, 0xAuLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v8, 0xCuLL), v18), (uint8x16_t)v36, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v8, 0xEuLL), v19);
      v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), v18), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 6uLL), v19);
      v59 = (int32x4_t)vextq_s8(v46, (int8x16_t)v9, 0xCuLL);
      v9 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v9, 0xAuLL), v17), *(uint8x8_t *)v59.i8, v18), (uint8x16_t)v46, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v9, 0xEuLL), v19);
      v60 = v20;
      v61 = v15;
      v62 = a2 + 1;
      v63 = a7;
      do
      {
        v64 = v57;
        v57 = v58;
        _X21 = v60 + v10;
        v66 = *(int8x16_t *)(v60 + v10 - 2);
        __asm
        {
          PRFUM           #0, [X21,#0x1D]
          PRFUM           #0, [X21,#0x3E]
          PRFUM           #0, [X21,#0x4D]
        }
        v59.i64[0] = *(_QWORD *)(v60 + v10 + 14);
        v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 4uLL), v18), *(uint8x8_t *)v66.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 6uLL), v19);
        v70 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, v12, 1), *(int16x4_t *)v9.i8, v12, 2), *(int16x4_t *)v7.i8, v12, 0);
        v71 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v8, v12, 1), v9, v12, 2), v7, v12, 0);
        v7 = v8;
        v8 = v9;
        __asm { PRFUM           #0, [X21,#0x1D] }
        _X21 = v61 + v10;
        __asm
        {
          PRFM            #0, [X21]
          PRFUM           #0, [X21,#7]
        }
        v9 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v66, (int8x16_t)v59, 0xAuLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, (int8x16_t)v59, 0xCuLL), v18), (uint8x16_t)v66, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, (int8x16_t)v59, 0xEuLL), v19);
        v59 = vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v64, v12, 1), v57, v12, 2), v56, v12, 0), v58, v12, 3);
        *(int8x16_t *)v63[v10 / 8].i8 = vqrshrun_high_n_s16(vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v64.i8, v12, 1), *(int16x4_t *)v57.i8, v12, 2), *(int16x4_t *)v56.i8, v12, 0), *(int16x4_t *)v58.i8, v12, 3), 6uLL), v59, 6uLL),
                                            6uLL),
                                          vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v70, *(int16x4_t *)v9.i8, v12, 3), 6uLL), vmlsl_high_lane_s16(v71, v9, v12, 3), 6uLL), 6uLL);
        v63 = (int8x8_t *)((char *)v63 + a6);
        --v62;
        v61 += a4;
        v60 += a4;
        v56 = v64;
      }
      while (v62 > 1);
      v21 += 2;
      _X4 += 16;
      v76 = result - 16;
      v10 += 16;
      v77 = (int)result <= 31;
      result = (result - 16);
    }
    while (!v77);
  }
  v78 = 2 * a4;
  if ((v76 & 8) != 0)
  {
    v79 = qword_1C98325D0[(a3 & 7) - 1];
    v80 = (uint8x8_t)vdup_lane_s8(v79, 0);
    v81 = (uint8x8_t)vdup_lane_s8(v79, 1);
    v82 = (uint8x8_t)vdup_lane_s8(v79, 2);
    v83 = (uint8x8_t)vdup_lane_s8(v79, 3);
    _X12 = (int8x16_t *)(_X4 - a4 - 2);
    v85 = *_X12;
    v86 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1C98325D0[((a3 >> 16) & 7) - 1]).u64[0];
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X12 = &_X12->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X4 - 2;
    v92 = *(int8x16_t *)(_X4 - 2);
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X13 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    _X12 = (_OWORD *)(_X4 - 2 + a4);
    _X13 = (char *)_X12 + 4 * a4;
    v99 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    v103 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 4uLL), v82), *(uint8x8_t *)v85.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 6uLL), v83);
    v104 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 4uLL), v82), *(uint8x8_t *)v92.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 6uLL), v83);
    v105 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 4uLL), v82), *(uint8x8_t *)v99.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 6uLL), v83);
    v106 = a2 + 1;
    v107 = (uint8x8_t)vdup_lane_s8(v79, 1);
    v108 = (uint8x8_t)vdup_lane_s8(v79, 3);
    v109 = _X4;
    v110 = v21;
    do
    {
      _X16 = v109 + v78;
      v112 = *(int8x16_t *)(v109 + v78 - 2);
      __asm { PRFUM           #0, [X16,#0x1D] }
      _X16 = v109 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#0xF]
      }
      v117 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, v86, 1), *(int16x4_t *)v105.i8, v86, 2), *(int16x4_t *)v103.i8, v86, 0);
      v118 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, v86, 1), v105, v86, 2), v103, v86, 0);
      v103 = v104;
      v104 = v105;
      v105 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 2uLL), v107), (uint8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 4uLL), v82), *(uint8x8_t *)v112.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 6uLL), v108);
      *v110 = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v117, *(int16x4_t *)v105.i8, v86, 3), 6uLL), vmlsl_high_lane_s16(v118, v105, v86, 3), 6uLL), 6uLL);
      v110 = (int8x8_t *)((char *)v110 + a6);
      --v106;
      v109 += a4;
    }
    while (v106 > 1);
    ++v21;
    _X4 += 8;
  }
  if ((v76 & 4) != 0)
  {
    v119 = qword_1C98325D0[((a3 >> 16) & 7) - 1];
    v120 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1C98325D0[(a3 & 7) - 1]).u64[0];
    _X9 = (uint8x16_t *)(_X4 - a4 - 2);
    v122 = *_X9;
    __asm { PRFUM           #0, [X9,#0x1F] }
    _X9 = &_X9->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X9]
      PRFUM           #0, [X9,#0xF]
    }
    _X9 = _X4 - 2;
    v128 = *(int8x16_t *)(_X4 - 2);
    __asm { PRFUM           #0, [X9,#0x1F] }
    _X12 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X9 = (_OWORD *)(_X4 - 2 + a4);
    _X12 = (char *)_X9 + 4 * a4;
    v135 = *(int8x16_t *)_X9;
    _X9 = (_OWORD *)((char *)_X9 + 31);
    v136 = v135;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    v140 = a2 + 1;
    v141 = (uint8x16_t)vdupq_lane_s8(v119, 0);
    v142 = (uint8x16_t)vdupq_lane_s8(v119, 1);
    v143 = vdupq_lane_s8(v119, 2);
    v144 = (uint8x8_t)vextq_s8(v143, v143, 8uLL).u64[0];
    v145 = vdupq_lane_s8(v119, 3);
    v146 = (uint8x8_t)vextq_s8(v145, v145, 8uLL).u64[0];
    do
    {
      v147 = (uint8x16_t)v128;
      v128 = v136;
      _X12 = _X4 + v78;
      v136 = *(int8x16_t *)(_X4 + v78 - 2);
      __asm { PRFUM           #0, [X12,#0x1D] }
      _X12 = _X4 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      v153 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v147.i8, *(uint8x8_t *)v142.i8), *(uint8x8_t *)v128.i8, *(uint8x8_t *)v143.i8), *(uint8x8_t *)v122.i8, *(uint8x8_t *)v141.i8), *(uint8x8_t *)v136.i8, *(uint8x8_t *)v145.i8);
      v154 = (int8x16_t)vmlal_u8(vmull_high_u8(v122, v141), (uint8x8_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), v146);
      *(int16x4_t *)v154.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v147, v142), (uint8x8_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), v144), *(int16x4_t *)v154.i8);
      v155 = (int16x8_t)vextq_s8((int8x16_t)v153, v154, 0xCuLL);
      *(int16x4_t *)v155.i8 = vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v153, (int8x16_t)v153, 4uLL), v120, 1), v153, v120, 2), *(int16x4_t *)v153.i8, v120, 0), *(int16x4_t *)v155.i8, v120, 3), 6uLL);
      v21->i32[0] = vqrshrun_n_s16(v155, 6uLL).u32[0];
      v21 = (int8x8_t *)((char *)v21 + a6);
      --v140;
      _X4 += a4;
      v122 = v147;
    }
    while (v140 > 1);
  }
  return result;
}

int16x4_t *sub_1C9762C34(int16x4_t *result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int16x4_t *a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13, double a14, int8x16_t a15)
{
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint8x16_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  int v23;
  uint16x8_t *v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int8x16_t *v32;
  uint16x8_t v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t v38;
  int v39;
  uint8x8_t v40;
  uint8x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  int8x16_t v45;
  int8x16_t v55;
  uint16x8_t v60;
  int8x8_t v61;
  int v62;
  uint64_t v63;
  uint8x8_t v64;
  uint8x8_t v65;
  uint64_t v66;
  uint8x8_t v67;
  uint8x8_t v68;
  int8x16_t v69;
  int8x16_t v75;

  v15 = 2 * a4;
  v16 = 2 * a6;
  if ((int)result < 16)
  {
    v34 = (char)result;
  }
  else
  {
    v17 = qword_1C98325D0[(a3 & 7) - 1];
    v18 = (uint8x16_t)vdupq_lane_s8(v17, 0);
    v19 = (uint8x8_t)vdup_lane_s8(v17, 1);
    v20 = (uint8x8_t)vdup_lane_s8(v17, 2);
    v21 = (uint8x8_t)vdup_lane_s8(v17, 3);
    do
    {
      v22 = -2;
      v23 = a2 + 2;
      v24 = (uint16x8_t *)a7;
      do
      {
        v25 = *(int8x16_t *)(_X4 + v22);
        a13.i64[0] = *(_QWORD *)(_X4 + v22 + 16);
        v26 = (int8x16_t *)(_X4 + v22 + a4);
        v27 = *v26;
        a15.i64[0] = v26[1].i64[0];
        v28 = (uint8x8_t)vextq_s8(*v26, a15, 0xAuLL).u64[0];
        v29 = (uint8x8_t)vextq_s8(*v26, a15, 0xCuLL).u64[0];
        a15 = vextq_s8(*v26, a15, 0xEuLL);
        v30.i64[0] = 0xE000E000E000E000;
        v30.i64[1] = 0xE000E000E000E000;
        v31.i64[0] = 0xE000E000E000E000;
        v31.i64[1] = 0xE000E000E000E000;
        *v24 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v30, (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL), v20), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 6uLL), v21);
        v24[1] = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmlal_u8(v31, (uint8x8_t)*(_OWORD *)&vextq_s8(v25, a13, 0xAuLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, a13, 0xCuLL), v20), (uint8x16_t)v25, v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, a13, 0xEuLL), v21);
        v25.i64[0] = 0xE000E000E000E000;
        v25.i64[1] = 0xE000E000E000E000;
        v32 = (int8x16_t *)&v24->i8[v16];
        v33.i64[0] = 0xE000E000E000E000;
        v33.i64[1] = 0xE000E000E000E000;
        a13 = (int8x16_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmlal_u8(v33, v28, v19), v29, v20), (uint8x16_t)v27, v18), *(uint8x8_t *)a15.i8, v21);
        *(uint16x8_t *)v32 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8((uint16x8_t)v25, (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 4uLL), v20), *(uint8x8_t *)v27.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 6uLL), v21);
        v32[1] = a13;
        v22 += v15;
        v23 -= 2;
        v24 = (uint16x8_t *)&v32->i8[v16];
      }
      while (v23 > 2);
      a7 += 4;
      _X4 += 16;
      v34 = (_BYTE)result - 16;
      v35 = (int)result <= 31;
      result = (int16x4_t *)((_DWORD)result - 16);
    }
    while (!v35);
  }
  v36 = 4 * a4;
  v37 = 4 * a6;
  if ((v34 & 8) != 0)
  {
    v38 = qword_1C98325D0[(a3 & 7) - 1];
    v39 = a2 + 2;
    v40 = (uint8x8_t)vdup_lane_s8(v38, 0);
    v41 = (uint8x8_t)vdup_lane_s8(v38, 1);
    v42 = (uint8x8_t)vdup_lane_s8(v38, 2);
    v43 = (uint8x8_t)vdup_lane_s8(v38, 3);
    _X17 = _X4;
    result = a7;
    do
    {
      v45 = *(int8x16_t *)(_X17 - 2);
      __asm { PRFUM           #0, [X17,#0x1D] }
      _X5 = _X17 + v36 - 2;
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      _X5 = _X17 + a4;
      v55 = *(int8x16_t *)(_X17 + a4 - 2);
      __asm { PRFUM           #0, [X5,#0x1D] }
      _X5 = _X17 + v36 - 2 + a4;
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      *(uint16x8_t *)result->i8 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v60, (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 2uLL), v41), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 4uLL), v42), *(uint8x8_t *)v45.i8, v40), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 6uLL), v43);
      v45.i64[0] = 0xE000E000E000E000;
      v45.i64[1] = 0xE000E000E000E000;
      *(uint16x8_t *)&result->i8[v16] = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8((uint16x8_t)v45, (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 2uLL), v41), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 4uLL), v42), *(uint8x8_t *)v55.i8, v40), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 6uLL), v43);
      result = (int16x4_t *)((char *)result + v37);
      v39 -= 2;
      _X17 += v15;
    }
    while (v39 > 2);
    a7 += 2;
    _X4 += 8;
  }
  if ((v34 & 4) != 0)
  {
    v61 = qword_1C98325D0[(a3 & 7) - 1];
    v62 = a2 + 2;
    v63 = v36 - 2;
    v64 = (uint8x8_t)vdup_lane_s8(v61, 0);
    v65 = (uint8x8_t)vdup_lane_s8(v61, 1);
    v66 = v36 - 2 + a4;
    v67 = (uint8x8_t)vdup_lane_s8(v61, 2);
    v68 = (uint8x8_t)vdup_lane_s8(v61, 3);
    do
    {
      v69 = *(int8x16_t *)(_X4 - 2);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X14 = _X4 + v63;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0xF]
      }
      _X14 = _X4 + a4;
      v75 = *(int8x16_t *)(_X4 + a4 - 2);
      __asm { PRFUM           #0, [X14,#0x1D] }
      _X14 = _X4 + v66;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0xF]
      }
      *a7 = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 2uLL), v65), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 4uLL), v67), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v69.i8, v64), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 6uLL), v68)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + v16) = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 2uLL), v65), (uint8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 4uLL), v67), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v75.i8, v64), (uint8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 6uLL), v68)), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v37);
      v62 -= 2;
      _X4 += v15;
    }
    while (v62 > 2);
  }
  return result;
}

double sub_1C9762EE0(int a1, int a2, unint64_t a3, uint64_t a4, _OWORD *_X4, uint64_t a6, int16x4_t *a7, uint8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  uint64_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t v18;
  uint8x16_t v26;
  uint8x16_t v33;
  int v36;
  uint16x8_t *v37;
  _OWORD *v39;
  uint8x16_t v41;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t *v59;
  char v60;
  BOOL v61;
  uint64_t v62;
  int8x8_t v63;
  uint8x8_t v66;
  uint8x8_t v75;
  int v80;
  uint8x8_t v81;
  uint8x8_t v82;
  uint8x8_t v83;
  uint16x8_t *v84;
  char *v85;
  uint8x8_t v86;
  uint8x8_t v88;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  char *v98;
  uint8x8_t v105;
  int8x8_t v106;
  uint8x8_t v110;
  int v120;
  uint8x8_t v121;
  uint8x8_t v122;
  uint8x8_t v123;
  uint8x8_t v124;
  uint8x8_t v126;
  uint16x8_t v133;
  uint16x8_t v134;
  int16x4_t v135;
  uint8x8_t v136;

  v8 = (a3 >> 16) & 7;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if (a1 < 16)
  {
    v60 = a1;
  }
  else
  {
    v11 = qword_1C98325D0[v8 - 1];
    v12 = 4 * a4;
    a8 = (uint8x16_t)vdupq_lane_s8(v11, 0);
    v13 = (uint8x16_t)vdupq_lane_s8(v11, 1);
    v14 = (uint8x16_t)vdupq_lane_s8(v11, 2);
    v15 = (uint8x16_t)vdupq_lane_s8(v11, 3);
    do
    {
      _X19 = (char *)_X4 + v12 - a4;
      _X7 = (uint64_t)_X4 - a4 + 31;
      v18 = *(uint8x16_t *)((char *)_X4 - a4);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
        PRFUM           #0, [X19,#0xF]
      }
      v26 = *(uint8x16_t *)_X4;
      __asm { PRFUM           #0, [X4,#0x1F] }
      _X7 = (char *)_X4 + v12;
      __asm
      {
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#0xF]
      }
      _X20 = (char *)_X4 + a4 + v12;
      _X7 = (uint64_t)_X4 + a4 + 31;
      v33 = *(uint8x16_t *)((char *)_X4 + a4);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X20]
      }
      v36 = a2 + 2;
      v37 = (uint16x8_t *)a7;
      __asm { PRFUM           #0, [X20,#0xF] }
      v39 = _X4;
      do
      {
        _X21 = (uint64_t)v39 + v9 + 31;
        v41 = *(uint8x16_t *)((char *)v39 + 2 * a4);
        __asm { PRFM            #0, [X21] }
        _X21 = (char *)v39 + 6 * a4;
        __asm
        {
          PRFM            #0, [X21]
          PRFUM           #0, [X21,#0xF]
        }
        v46.i64[0] = 0xE000E000E000E000;
        v46.i64[1] = 0xE000E000E000E000;
        v47 = vmlsl_u8(vmlal_u8(vmlal_u8(v46, *(uint8x8_t *)v26.i8, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v33.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v18.i8, *(uint8x8_t *)a8.i8);
        v48.i64[0] = 0xE000E000E000E000;
        v48.i64[1] = 0xE000E000E000E000;
        v49 = vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v48, v26, v13), v33, v14), v18, a8);
        v50.i64[0] = 0xE000E000E000E000;
        v50.i64[1] = 0xE000E000E000E000;
        v51 = vmlal_u8(v50, *(uint8x8_t *)v33.i8, *(uint8x8_t *)v13.i8);
        v52.i64[0] = 0xE000E000E000E000;
        v52.i64[1] = 0xE000E000E000E000;
        v53 = vmlal_high_u8(v52, v33, v13);
        v18 = v33;
        _X21 = (uint64_t)v39 + 3 * a4 + 31;
        v33 = *(uint8x16_t *)((char *)v39 + 3 * a4);
        __asm { PRFM            #0, [X21] }
        _X21 = (char *)v39 + 7 * a4;
        __asm
        {
          PRFM            #0, [X21]
          PRFUM           #0, [X21,#0xF]
        }
        *v37 = vmlsl_u8(v47, *(uint8x8_t *)v41.i8, *(uint8x8_t *)v15.i8);
        v37[1] = vmlsl_high_u8(v49, v41, v15);
        v39 = (_OWORD *)((char *)v39 + a4 + a4);
        v59 = (uint16x8_t *)((char *)v37 + v10);
        v36 -= 2;
        *v59 = vmlsl_u8(vmlsl_u8(vmlal_u8(v51, *(uint8x8_t *)v41.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)a8.i8), *(uint8x8_t *)v33.i8, *(uint8x8_t *)v15.i8);
        v59[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v53, v41, v14), v26, a8), v33, v15);
        v37 = (uint16x8_t *)((char *)v59 + v10);
        v26 = v41;
      }
      while (v36 > 2);
      a7 += 4;
      ++_X4;
      v60 = a1 - 16;
      v61 = a1 <= 31;
      a1 -= 16;
    }
    while (!v61);
  }
  v62 = 4 * a6;
  if ((v60 & 8) != 0)
  {
    v63 = qword_1C98325D0[v8 - 1];
    _X15 = (uint64_t)_X4 + 4 * a4 - a4;
    _X14 = (uint64_t)_X4 - a4 + 15;
    v66 = *(uint8x8_t *)((char *)_X4 - a4);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    a8.i64[0] = *(_QWORD *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X14 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    _X15 = (uint64_t)_X4 + a4 + 15;
    v75 = *(uint8x8_t *)((char *)_X4 + a4);
    _X14 = (uint64_t)_X4 + 4 * a4 + a4;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    v80 = a2 + 2;
    v81 = (uint8x8_t)vdup_lane_s8(v63, 1);
    v82 = (uint8x8_t)vdup_lane_s8(v63, 0);
    v83 = (uint8x8_t)vdup_lane_s8(v63, 2);
    v84 = (uint16x8_t *)a7;
    v85 = (char *)_X4;
    v86 = (uint8x8_t)vdup_lane_s8(v63, 3);
    do
    {
      _X5 = (uint64_t)&v85[v9 + 15];
      v88 = *(uint8x8_t *)&v85[2 * a4];
      __asm { PRFM            #0, [X5] }
      _X5 = &v85[6 * a4];
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#7]
      }
      v93.i64[0] = 0xE000E000E000E000;
      v93.i64[1] = 0xE000E000E000E000;
      v94 = vmlsl_u8(vmlal_u8(vmlal_u8(v93, *(uint8x8_t *)a8.i8, v81), v75, v83), v66, v82);
      v95.i64[0] = 0xE000E000E000E000;
      v95.i64[1] = 0xE000E000E000E000;
      v96 = vmlal_u8(v95, v75, v81);
      v66 = v75;
      _X5 = (uint64_t)&v85[3 * a4 + 15];
      v75 = *(uint8x8_t *)&v85[3 * a4];
      v98 = &v85[a4];
      __asm { PRFM            #0, [X5] }
      _X2 = &v85[7 * a4];
      __asm
      {
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#7]
      }
      *v84 = vmlsl_u8(v94, v88, v86);
      *(uint16x8_t *)((char *)v84 + v10) = vmlsl_u8(vmlsl_u8(vmlal_u8(v96, v88, v83), *(uint8x8_t *)a8.i8, v82), v75, v86);
      v85 = &v98[a4];
      v84 = (uint16x8_t *)((char *)v84 + v62);
      v80 -= 2;
      *(uint8x8_t *)a8.i8 = v88;
    }
    while (v80 > 2);
    a7 += 2;
    _X4 = (_OWORD *)((char *)_X4 + 8);
  }
  if ((v60 & 4) != 0)
  {
    _X14 = (uint64_t)_X4 + 4 * a4 - a4;
    _X12 = (uint64_t)_X4 - a4 + 15;
    v105 = *(uint8x8_t *)((char *)_X4 - a4);
    v106 = qword_1C98325D0[v8 - 1];
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    v110 = *(uint8x8_t *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X11 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X12 = (uint64_t)_X4 + 4 * a4 + a4;
    _X11 = (uint64_t)_X4 + a4 + 15;
    a8.i64[0] = *(_QWORD *)((char *)_X4 + a4);
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#7]
    }
    v120 = a2 + 2;
    v121 = (uint8x8_t)vdup_lane_s8(v106, 1);
    v122 = (uint8x8_t)vdup_lane_s8(v106, 0);
    v123 = (uint8x8_t)vdup_lane_s8(v106, 2);
    v124 = (uint8x8_t)vdup_lane_s8(v106, 3);
    do
    {
      _X16 = (uint64_t)_X4 + v9 + 15;
      v126 = *(uint8x8_t *)((char *)_X4 + 2 * a4);
      __asm { PRFM            #0, [X16] }
      _X16 = (char *)_X4 + 6 * a4;
      __asm
      {
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#7]
      }
      _X16 = (_QWORD *)((char *)_X4 + 3 * a4);
      _X17 = (char *)_X4 + 7 * a4;
      _X4 = (_OWORD *)((char *)_X4 + a4 + a4);
      v133 = vmull_u8(v105, v122);
      v134 = vmull_u8(*(uint8x8_t *)a8.i8, v121);
      v135 = (int16x4_t)vmlal_u8(vmull_u8(v110, v121), *(uint8x8_t *)a8.i8, v123).u64[0];
      v105 = *(uint8x8_t *)a8.i8;
      v136 = *(uint8x8_t *)_X16;
      _X16 = (_QWORD *)((char *)_X16 + 15);
      *(uint8x8_t *)a8.i8 = v136;
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      *a7 = vadd_s16(vsub_s16(v135, (int16x4_t)*(_OWORD *)&vmlal_u8(v133, v126, v124)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + v10) = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v134, v126, v123), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v110, v122), v136, v124)), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v62);
      v120 -= 2;
      v110 = v126;
    }
    while (v120 > 2);
  }
  return *(double *)a8.i64;
}

int8x16_t sub_1C9763264(int a1, int a2, unint64_t a3, uint64_t a4, uint64_t _X4, uint64_t a6, int16x4_t *a7, int8x16_t result)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  int16x8_t *v16;
  uint8x16_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  int16x8_t v21;
  int8x16_t v24;
  int8x16_t v36;
  int8x16_t v46;
  uint64_t v52;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t v59;
  uint64_t v60;
  int16x8_t *v61;
  int v62;
  int16x8_t v63;
  int8x16_t v65;
  int32x4_t v69;
  int32x4_t v70;
  char v75;
  BOOL v76;
  int8x8_t v77;
  uint8x8_t v78;
  uint8x8_t v79;
  uint8x8_t v80;
  uint8x8_t v81;
  int8x16_t v83;
  int8x16_t v89;
  int8x16_t v96;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int v103;
  uint8x8_t v104;
  uint8x8_t v105;
  int16x8_t v106;
  uint64_t v107;
  int16x8_t *v108;
  int8x16_t v110;
  int32x4_t v115;
  int32x4_t v116;
  int8x8_t v117;
  uint8x16_t v119;
  int8x16_t v131;
  int8x16_t v132;
  int16x4_t v133;
  int v137;
  uint8x16_t v138;
  uint8x16_t v139;
  int8x16_t v140;
  uint8x8_t v141;
  int8x16_t v142;
  uint8x8_t v143;
  uint8x16_t v144;
  int16x8_t v150;
  int8x16_t v151;

  v11 = 2 * a6;
  v12 = 2 * a4;
  if (a1 < 16)
  {
    v75 = a1;
  }
  else
  {
    v13 = qword_1C98325D0[(a3 & 7) - 1];
    result.i64[0] = vmovl_u8((uint8x8_t)qword_1C98325D0[((a3 >> 16) & 7) - 1]).u64[0];
    v14 = -2 - a4;
    v15 = 4 * (a4 - 16);
    v16 = (int16x8_t *)&a7[2];
    v17 = (uint8x16_t)vdupq_lane_s8(v13, 0);
    v18 = (uint8x8_t)vdup_lane_s8(v13, 1);
    v19 = (uint8x8_t)vdup_lane_s8(v13, 2);
    v20 = (uint8x8_t)vdup_lane_s8(v13, 3);
    v21.i64[0] = 0xE000E000E000E000;
    v21.i64[1] = 0xE000E000E000E000;
    do
    {
      _X17 = _X4 + v14;
      _X5 = _X4 + v14 + 79;
      v24 = *(int8x16_t *)(_X4 + v14);
      __asm
      {
        PRFUM           #0, [X17,#0x1F]
        PRFM            #0, [X17,#0x40]
        PRFM            #0, [X5]
      }
      v8.i64[0] = *(_QWORD *)(_X4 + v14 + 16);
      __asm { PRFUM           #0, [X17,#0x1F] }
      _X17 = _X4 + v14 + 16 + v15;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      v36 = *(int8x16_t *)(_X4 - 2);
      __asm
      {
        PRFUM           #0, [X4,#0x1D]
        PRFUM           #0, [X4,#0x3E]
        PRFUM           #0, [X4,#0x4D]
      }
      v9.i64[0] = *(_QWORD *)(_X4 + 14);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X5 = _X4 + 14 + v15;
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#7]
      }
      _X5 = (int8x16_t *)(_X4 + 14 + a4 - 16);
      _X7 = &_X5[4].i8[15];
      v46 = *_X5;
      __asm
      {
        PRFUM           #0, [X5,#0x1F]
        PRFM            #0, [X5,#0x40]
        PRFM            #0, [X7]
      }
      _X17 = (uint64_t *)(_X4 + 14 + a4);
      _X5 = (char *)_X17 + v15;
      v52 = *_X17;
      _X17 = (uint64_t *)((char *)_X17 + 15);
      v10.i64[0] = v52;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#7]
      }
      v56 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v19), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v20);
      v8 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v8, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v8, 0xCuLL), v19), (uint8x16_t)v24, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v8, 0xEuLL), v20);
      v57 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL), v19), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 6uLL), v20);
      v9 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v9, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v9, 0xCuLL), v19), (uint8x16_t)v36, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v9, 0xEuLL), v20);
      v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), v19), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 6uLL), v20);
      v59 = vextq_s8(v46, (int8x16_t)v10, 0xCuLL);
      v10 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v10, 0xAuLL), v18), *(uint8x8_t *)v59.i8, v19), (uint8x16_t)v46, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v10, 0xEuLL), v20);
      v60 = _X4;
      v61 = v16;
      v62 = a2 + 1;
      do
      {
        v63 = v57;
        v57 = v58;
        _X19 = v60 + v12;
        v65 = *(int8x16_t *)(v60 + v12 - 2);
        __asm
        {
          PRFUM           #0, [X19,#0x1D]
          PRFUM           #0, [X19,#0x3E]
          PRFUM           #0, [X19,#0x4D]
        }
        v59.i64[0] = *(_QWORD *)(v60 + v12 + 14);
        v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 4uLL), v19), *(uint8x8_t *)v65.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 6uLL), v20);
        v69 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)result.i8, 1), *(int16x4_t *)v10.i8, *(int16x4_t *)result.i8, 2), *(int16x4_t *)v8.i8, *(int16x4_t *)result.i8, 0);
        v70 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v9, *(int16x4_t *)result.i8, 1), v10, *(int16x4_t *)result.i8, 2), v8, *(int16x4_t *)result.i8, 0);
        v8 = v9;
        v9 = v10;
        __asm { PRFUM           #0, [X19,#0x1D] }
        _X19 = v60 + 6 * a4 - 50;
        __asm
        {
          PRFM            #0, [X19]
          PRFUM           #0, [X19,#7]
        }
        v10 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v65, v59, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v59, 0xCuLL), v19), (uint8x16_t)v65, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v59, 0xEuLL), v20);
        v59 = (int8x16_t)vaddq_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)result.i8, 1), *(int16x4_t *)v57.i8, *(int16x4_t *)result.i8, 2), *(int16x4_t *)v56.i8, *(int16x4_t *)result.i8, 0), *(int16x4_t *)v58.i8, *(int16x4_t *)result.i8, 3), 6uLL), vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmlal_high_lane_s16(
                                   vmull_high_lane_s16(v63, *(int16x4_t *)result.i8, 1),
                                   v57,
                                   *(int16x4_t *)result.i8,
                                   2),
                                 v56,
                                 *(int16x4_t *)result.i8,
                                 0),
                               v58,
                               *(int16x4_t *)result.i8,
                               3),
                             6uLL),
                           v21);
        --v62;
        v61[-1] = (int16x8_t)v59;
        *v61 = vaddq_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v69, *(int16x4_t *)v10.i8, *(int16x4_t *)result.i8, 3), 6uLL), vmlsl_high_lane_s16(v70, v10, *(int16x4_t *)result.i8, 3), 6uLL), v21);
        v61 = (int16x8_t *)((char *)v61 + v11);
        v60 += a4;
        v56 = v63;
      }
      while (v62 > 1);
      a7 += 4;
      _X4 += 16;
      v75 = a1 - 16;
      v16 += 2;
      v76 = a1 <= 31;
      a1 -= 16;
    }
    while (!v76);
  }
  if ((v75 & 8) != 0)
  {
    v77 = qword_1C98325D0[(a3 & 7) - 1];
    v78 = (uint8x8_t)vdup_lane_s8(v77, 0);
    v79 = (uint8x8_t)vdup_lane_s8(v77, 1);
    v80 = (uint8x8_t)vdup_lane_s8(v77, 2);
    v81 = (uint8x8_t)vdup_lane_s8(v77, 3);
    _X12 = (int8x16_t *)(_X4 - a4 - 2);
    v83 = *_X12;
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X12 = &_X12->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X4 - 2;
    v89 = *(int8x16_t *)(_X4 - 2);
    result.i64[0] = vmovl_u8((uint8x8_t)qword_1C98325D0[((a3 >> 16) & 7) - 1]).u64[0];
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X13 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    _X12 = (_OWORD *)(_X4 - 2 + a4);
    _X13 = (char *)_X12 + 4 * a4;
    v96 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    v100 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 2uLL), v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 4uLL), v80), *(uint8x8_t *)v83.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 6uLL), v81);
    v101 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 2uLL), v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL), v80), *(uint8x8_t *)v89.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 6uLL), v81);
    v102 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 2uLL), v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 4uLL), v80), *(uint8x8_t *)v96.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 6uLL), v81);
    v103 = a2 + 1;
    v104 = (uint8x8_t)vdup_lane_s8(v77, 1);
    v105 = (uint8x8_t)vdup_lane_s8(v77, 3);
    v106.i64[0] = 0xE000E000E000E000;
    v106.i64[1] = 0xE000E000E000E000;
    v107 = _X4;
    v108 = (int16x8_t *)a7;
    do
    {
      _X16 = v107 + v12;
      v110 = *(int8x16_t *)(v107 + v12 - 2);
      __asm { PRFUM           #0, [X16,#0x1D] }
      _X16 = v107 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#0xF]
      }
      v115 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)result.i8, 1), *(int16x4_t *)v102.i8, *(int16x4_t *)result.i8, 2), *(int16x4_t *)v100.i8, *(int16x4_t *)result.i8, 0);
      v116 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v101, *(int16x4_t *)result.i8, 1), v102, *(int16x4_t *)result.i8, 2), v100, *(int16x4_t *)result.i8, 0);
      v100 = v101;
      v101 = v102;
      v102 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 2uLL), v104), (uint8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 4uLL), v80), *(uint8x8_t *)v110.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 6uLL), v105);
      *v108 = vaddq_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v115, *(int16x4_t *)v102.i8, *(int16x4_t *)result.i8, 3), 6uLL), vmlsl_high_lane_s16(v116, v102, *(int16x4_t *)result.i8, 3), 6uLL), v106);
      v108 = (int16x8_t *)((char *)v108 + v11);
      --v103;
      v107 += a4;
    }
    while (v103 > 1);
    a7 += 2;
    _X4 += 8;
  }
  if ((v75 & 4) != 0)
  {
    v117 = qword_1C98325D0[((a3 >> 16) & 7) - 1];
    _X10 = (uint8x16_t *)(_X4 - a4 - 2);
    v119 = *_X10;
    __asm { PRFUM           #0, [X10,#0x1F] }
    _X10 = &_X10->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = _X4 - 2;
    result = *(int8x16_t *)(_X4 - 2);
    __asm { PRFUM           #0, [X10,#0x1F] }
    _X12 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X10 = (_OWORD *)(_X4 - 2 + a4);
    _X12 = (char *)_X10 + 4 * a4;
    v131 = *(int8x16_t *)_X10;
    _X10 = (_OWORD *)((char *)_X10 + 31);
    v132 = v131;
    v133 = (int16x4_t)vmovl_u8((uint8x8_t)qword_1C98325D0[(a3 & 7) - 1]).u64[0];
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    v137 = a2 + 1;
    v138 = (uint8x16_t)vdupq_lane_s8(v117, 0);
    v139 = (uint8x16_t)vdupq_lane_s8(v117, 1);
    v140 = vdupq_lane_s8(v117, 2);
    v141 = (uint8x8_t)vextq_s8(v140, v140, 8uLL).u64[0];
    v142 = vdupq_lane_s8(v117, 3);
    v143 = (uint8x8_t)vextq_s8(v142, v142, 8uLL).u64[0];
    do
    {
      v144 = (uint8x16_t)result;
      result = v132;
      _X12 = _X4 + v12;
      v132 = *(int8x16_t *)(_X4 + v12 - 2);
      __asm { PRFUM           #0, [X12,#0x1D] }
      _X12 = _X4 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      v150 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v144.i8, *(uint8x8_t *)v139.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v140.i8), *(uint8x8_t *)v119.i8, *(uint8x8_t *)v138.i8), *(uint8x8_t *)v132.i8, *(uint8x8_t *)v142.i8);
      v151 = (int8x16_t)vmlal_u8(vmull_high_u8(v119, v138), (uint8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL), v143);
      *(int16x4_t *)v151.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v144, v139), (uint8x8_t)*(_OWORD *)&vextq_s8(result, result, 8uLL), v141), *(int16x4_t *)v151.i8);
      *a7 = vadd_s16(vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v150, (int8x16_t)v150, 4uLL), v133, 1), v150, v133, 2), *(int16x4_t *)v150.i8, v133, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v150, v151, 0xCuLL), v133, 3), 6uLL), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v11);
      --v137;
      _X4 += a4;
      v119 = v144;
    }
    while (v137 > 1);
  }
  return result;
}

double sub_1C97637D0(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1)
      return *(double *)v14.i64;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10 = (char *)a5 + 2 * a4;
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = a2 + 2;
    do
    {
      v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 8uLL);
      v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 8uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 8uLL);
      v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 8uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (_QWORD *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1C9763890(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xFF00FF00FF00FFLL);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 8uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 8uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 8uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xFF00FF00FF00FFLL);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C9763A38(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  uint16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  uint16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  uint16x4_t *v150;
  uint16x4_t *v151;
  uint16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 8uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 8uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 8uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 8uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 8uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 8uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 8uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 8uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 8uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 8uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 8uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 8uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 8uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 8uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 8uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 8uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 8uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 8uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v150 = (uint16x4_t *)((char *)v15 + v115);
      *v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v151 = (uint16x4_t *)((char *)v150 + v115);
      *v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v152 = (uint16x4_t *)((char *)v151 + v115);
      *v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v109 -= 4;
      v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C9763EB0(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  uint16x8_t v112;
  int16x8_t v113;
  int8x16_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  _OWORD *v126;
  uint64_t v127;
  int v128;
  int16x8_t v129;
  int16x8_t v131;
  int8x16_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int16x8_t v148;
  int16x8_t v149;
  int v150;
  BOOL v151;
  int16x8_t v152;
  int16x8_t v153;
  uint16x4_t v155;
  int16x4_t v156;
  int16x4_t v157;
  int8x8_t v158;
  int16x4_t v164;
  int16x4_t v165;
  int16x4_t v166;
  int8x8_t v167;
  int16x4_t v173;
  int16x4_t v174;
  int16x4_t v175;
  int8x8_t v176;
  int16x4_t v182;
  int16x4_t v183;
  int16x4_t v184;
  int8x8_t v185;
  int16x4_t v191;
  int16x4_t v192;
  int16x4_t v193;
  int8x8_t v194;
  int16x4_t v200;
  int16x4_t v201;
  int16x4_t v202;
  int8x8_t v203;
  int16x4_t v209;
  int16x4_t v210;
  int16x4_t v211;
  int8x8_t v212;
  int16x4_t v217;
  int v218;
  uint64_t v219;
  int16x4_t v221;
  int16x4_t v222;
  int8x8_t v223;
  int32x4_t v228;
  int32x4_t v229;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8, v12,
                               4),
                             *(int16x4_t *)v31.i8,
                             v12,
                             5),
                           *(int16x4_t *)v33.i8,
                           v12,
                           6),
                         *(int16x4_t *)v34.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                             v31,
                             v12,
                             5),
                           v33,
                           v12,
                           6),
                         v34,
                         v12,
                         7));
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8, v12,
                               4),
                             *(int16x4_t *)v48.i8,
                             v12,
                             5),
                           *(int16x4_t *)v49.i8,
                           v12,
                           6),
                         *(int16x4_t *)v50.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                             v48,
                             v12,
                             5),
                           v49,
                           v12,
                           6),
                         v50,
                         v12,
                         7));
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8, v12,
                               4),
                             *(int16x4_t *)v63.i8,
                             v12,
                             5),
                           *(int16x4_t *)v64.i8,
                           v12,
                           6),
                         *(int16x4_t *)v65.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                             v63,
                             v12,
                             5),
                           v64,
                           v12,
                           6),
                         v65,
                         v12,
                         7));
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8, v12,
                               4),
                             *(int16x4_t *)v78.i8,
                             v12,
                             5),
                           *(int16x4_t *)v79.i8,
                           v12,
                           6),
                         *(int16x4_t *)v80.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                             v78,
                             v12,
                             5),
                           v79,
                           v12,
                           6),
                         v80,
                         v12,
                         7));
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8, v12,
                               4),
                             *(int16x4_t *)v93.i8,
                             v12,
                             5),
                           *(int16x4_t *)v94.i8,
                           v12,
                           6),
                         *(int16x4_t *)v95.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                             v93,
                             v12,
                             5),
                           v94,
                           v12,
                           6),
                         v95,
                         v12,
                         7));
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8, v12,
                                4),
                              *(int16x4_t *)v108.i8,
                              v12,
                              5),
                            *(int16x4_t *)v109.i8,
                            v12,
                            6),
                          *(int16x4_t *)v110.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                              v108,
                              v12,
                              5),
                            v109,
                            v12,
                            6),
                          v110,
                          v12,
                          7));
    v112 = _X19[1];
    v113 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int8x16_t)vshrq_n_u16(v112, 8uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 2uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 4uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 6uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 8uLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xAuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xCuLL);
    v125 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xEuLL);
    v126 = a7;
    v127 = a5;
    v128 = a2 + 1;
    v129 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v113.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v121.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v122.i8, v12,
                                4),
                              *(int16x4_t *)v123.i8,
                              v12,
                              5),
                            *(int16x4_t *)v124.i8,
                            v12,
                            6),
                          *(int16x4_t *)v125.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v119, *(int16x4_t *)v12.i8, 1), v113, *(int16x4_t *)v12.i8, 0), v120, *(int16x4_t *)v12.i8, 2), v121, *(int16x4_t *)v12.i8, 3), v122, v12, 4),
                              v123,
                              v12,
                              5),
                            v124,
                            v12,
                            6),
                          v125,
                          v12,
                          7));
    do
    {
      _X22 = v127 + v15;
      v131 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 - 6), 8uLL);
      v132 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 + 10), 8uLL);
      v133 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 2uLL);
      v134 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 4uLL);
      v135 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 6uLL);
      v136 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 8uLL);
      v137 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xAuLL);
      v138 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xCuLL);
      v139 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xEuLL);
      v140 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v131.i8, *(int16x4_t *)v12.i8, 0);
      v141 = vmlal_high_lane_s16(vmull_high_lane_s16(v133, *(int16x4_t *)v12.i8, 1), v131, *(int16x4_t *)v12.i8, 0);
      v142 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      v143 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      v96 = v111;
      v111 = v129;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v127 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v148 = (int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v140, *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v135.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v136.i8, v12, 4), *(int16x4_t *)v137.i8, v12, 5), *(int16x4_t *)v138.i8, v12, 6), *(int16x4_t *)v139.i8, v12,
                          7);
      v149 = (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v141, v134, *(int16x4_t *)v12.i8, 2), v135, *(int16x4_t *)v12.i8, 3), v136, v12, 4), v137, v12, 5), v138, v12, 6), v139, v12,
                          7);
      *(uint16x4_t *)v135.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v142, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v129.i8,
                                                   v13,
                                                   6),
                                                 vmovn_s32((int32x4_t)v148),
                                                 v13,
                                                 7),
                                               0xCuLL),
                                 (uint16x4_t)0xFF00FF00FF00FFLL);
      v135.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v143, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v129, v13, 6),
                                                        vmovn_s32((int32x4_t)v149),
                                                        v13,
                                                        7),
                                                      0xCuLL),
                                        (uint16x4_t)0xFF00FF00FF00FFLL);
      v129 = vuzp1q_s16(v148, v149);
      *v126 = v135;
      --v128;
      v127 += v9;
      v126 = (_OWORD *)((char *)v126 + v11);
    }
    while (v128 > 1);
    a7 += 2;
    v16 += 16;
    v150 = result - 8;
    v14 += 16;
    v15 += 16;
    v151 = result > 0xF;
    result = (result - 8);
  }
  while (v151);
  if (v150)
  {
LABEL_9:
    v152 = xmmword_1C9832610[(a3 & 3) - 1];
    v153 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v155 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v156 = (int16x4_t)vshr_n_u16(v155, 8uLL);
    v157 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v158 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v164 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v156, (int8x8_t)v157, 2uLL), *(int16x4_t *)v152.i8, 1), v156, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v156, (int8x8_t)v157, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v156, (int8x8_t)v157, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v157,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v157, v158, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v157, v158, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v157, v158, 6uLL),
               v152,
               7));
    v165 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v166 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v167 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v173 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v165, (int8x8_t)v166, 2uLL), *(int16x4_t *)v152.i8, 1), v165, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v165, (int8x8_t)v166, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v165, (int8x8_t)v166, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v166,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v166, v167, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v166, v167, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v166, v167, 6uLL),
               v152,
               7));
    v174 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v175 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v176 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v182 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v174, (int8x8_t)v175, 2uLL), *(int16x4_t *)v152.i8, 1), v174, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v174, (int8x8_t)v175, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v174, (int8x8_t)v175, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v175,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v175, v176, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v175, v176, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v175, v176, 6uLL),
               v152,
               7));
    v183 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v184 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v185 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v191 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v183, (int8x8_t)v184, 2uLL), *(int16x4_t *)v152.i8, 1), v183, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v183, (int8x8_t)v184, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v183, (int8x8_t)v184, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v184,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v184, v185, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v184, v185, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v184, v185, 6uLL),
               v152,
               7));
    v192 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v193 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v194 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v200 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v192, (int8x8_t)v193, 2uLL), *(int16x4_t *)v152.i8, 1), v192, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v192, (int8x8_t)v193, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v192, (int8x8_t)v193, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v193,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v193, v194, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v193, v194, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v193, v194, 6uLL),
               v152,
               7));
    v201 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v202 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v203 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v209 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v201, (int8x8_t)v202, 2uLL), *(int16x4_t *)v152.i8, 1), v201, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v201, (int8x8_t)v202, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v201, (int8x8_t)v202, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v202,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v202, v203, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v202, v203, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v202, v203, 6uLL),
               v152,
               7));
    v210 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v211 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v212 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v217 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v210, (int8x8_t)v211, 2uLL), *(int16x4_t *)v152.i8, 1), v210, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v210, (int8x8_t)v211, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v210, (int8x8_t)v211, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v211,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v211, v212, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v211, v212, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v211, v212, 6uLL),
               v152,
               7));
    v218 = a2 + 1;
    v219 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 8uLL);
      v222 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 8uLL);
      v223 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 8uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v219;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v221, (int8x8_t)v222, 2uLL), *(int16x4_t *)v152.i8, 1), v221, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v221, (int8x8_t)v222, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v221, (int8x8_t)v222, 6uLL), *(int16x4_t *)v152.i8, 3),
                     v222,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v222, v223, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v222, v223, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v222, v223, 6uLL),
               v152,
               7);
      v229 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v173, *(int16x4_t *)v153.i8, 1), v164, *(int16x4_t *)v153.i8, 0), v182, *(int16x4_t *)v153.i8, 2), v191, *(int16x4_t *)v153.i8, 3), v200, v153, 4), v209, v153, 5), v217, v153,
               6);
      v164 = v173;
      v173 = v182;
      v182 = v191;
      v191 = v200;
      v200 = v209;
      v209 = v217;
      v217 = vmovn_s32(v228);
      --v218;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v229, v217, v153, 7), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v218 > 1);
  }
  return result;
}

uint64_t sub_1C976478C(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int16x8_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  v11 = (char *)a5 + 2 * a4;
  do
  {
    v12 = 0;
    v13 = 0;
    v14 = a2 + 2;
    do
    {
      v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    v16 = result - 8;
    v9 += 16;
    v11 += 16;
    v17 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(*a5, 2uLL) & 0xFFC0FFC0FFC0FFC0), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(v19, 2uLL) & 0xFFC0FFC0FFC0FFC0), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1C9764874(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7)),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vmovn_s32(v31), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 8uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 8uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 8uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7)),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C9764A1C(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  int16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  int16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x4_t *v150;
  int16x4_t *v151;
  int16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 8uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 8uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 8uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 8uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 8uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 8uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 8uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 8uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 8uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7)), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 8uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 8uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 8uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 8uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 8uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 8uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 8uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 8uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 8uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vadd_s16(vmovn_s32(vmlal_laneq_s16(v142, v92, v81, 7)), (int16x4_t)0xE000E000E000E000);
      v150 = (int16x4_t *)((char *)v15 + v115);
      *v150 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7)), (int16x4_t)0xE000E000E000E000);
      v151 = (int16x4_t *)((char *)v150 + v115);
      *v151 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7)), (int16x4_t)0xE000E000E000E000);
      v152 = (int16x4_t *)((char *)v151 + v115);
      *v152 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7)), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C9764E94(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  uint16x8_t v112;
  int16x8_t v113;
  int8x16_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t *v126;
  uint64_t v127;
  int v128;
  int16x8_t v129;
  int16x8_t v131;
  int8x16_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int16x8_t v149;
  int16x8_t v150;
  int v151;
  BOOL v152;
  int16x8_t v153;
  int16x8_t v154;
  uint16x4_t v156;
  int16x4_t v157;
  int16x4_t v158;
  int8x8_t v159;
  int16x4_t v165;
  int16x4_t v166;
  int16x4_t v167;
  int8x8_t v168;
  int16x4_t v174;
  int16x4_t v175;
  int16x4_t v176;
  int8x8_t v177;
  int16x4_t v183;
  int16x4_t v184;
  int16x4_t v185;
  int8x8_t v186;
  int16x4_t v192;
  int16x4_t v193;
  int16x4_t v194;
  int8x8_t v195;
  int16x4_t v201;
  int16x4_t v202;
  int16x4_t v203;
  int8x8_t v204;
  int16x4_t v210;
  int16x4_t v211;
  int16x4_t v212;
  int8x8_t v213;
  int16x4_t v218;
  int v219;
  uint64_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int16x4_t v224;
  int16x4_t v225;
  int8x8_t v226;
  int32x4_t v231;
  int32x4_t v232;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8, v12,
                               4),
                             *(int16x4_t *)v31.i8,
                             v12,
                             5),
                           *(int16x4_t *)v33.i8,
                           v12,
                           6),
                         *(int16x4_t *)v34.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                             v31,
                             v12,
                             5),
                           v33,
                           v12,
                           6),
                         v34,
                         v12,
                         7));
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8, v12,
                               4),
                             *(int16x4_t *)v48.i8,
                             v12,
                             5),
                           *(int16x4_t *)v49.i8,
                           v12,
                           6),
                         *(int16x4_t *)v50.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                             v48,
                             v12,
                             5),
                           v49,
                           v12,
                           6),
                         v50,
                         v12,
                         7));
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8, v12,
                               4),
                             *(int16x4_t *)v63.i8,
                             v12,
                             5),
                           *(int16x4_t *)v64.i8,
                           v12,
                           6),
                         *(int16x4_t *)v65.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                             v63,
                             v12,
                             5),
                           v64,
                           v12,
                           6),
                         v65,
                         v12,
                         7));
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8, v12,
                               4),
                             *(int16x4_t *)v78.i8,
                             v12,
                             5),
                           *(int16x4_t *)v79.i8,
                           v12,
                           6),
                         *(int16x4_t *)v80.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                             v78,
                             v12,
                             5),
                           v79,
                           v12,
                           6),
                         v80,
                         v12,
                         7));
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8, v12,
                               4),
                             *(int16x4_t *)v93.i8,
                             v12,
                             5),
                           *(int16x4_t *)v94.i8,
                           v12,
                           6),
                         *(int16x4_t *)v95.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                             v93,
                             v12,
                             5),
                           v94,
                           v12,
                           6),
                         v95,
                         v12,
                         7));
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8, v12,
                                4),
                              *(int16x4_t *)v108.i8,
                              v12,
                              5),
                            *(int16x4_t *)v109.i8,
                            v12,
                            6),
                          *(int16x4_t *)v110.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                              v108,
                              v12,
                              5),
                            v109,
                            v12,
                            6),
                          v110,
                          v12,
                          7));
    v112 = _X19[1];
    v113 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int8x16_t)vshrq_n_u16(v112, 8uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 2uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 4uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 6uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 8uLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xAuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xCuLL);
    v125 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xEuLL);
    v126 = (int16x8_t *)a7;
    v127 = a5;
    v128 = a2 + 1;
    v129 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v113.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v121.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v122.i8, v12,
                                4),
                              *(int16x4_t *)v123.i8,
                              v12,
                              5),
                            *(int16x4_t *)v124.i8,
                            v12,
                            6),
                          *(int16x4_t *)v125.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v119, *(int16x4_t *)v12.i8, 1), v113, *(int16x4_t *)v12.i8, 0), v120, *(int16x4_t *)v12.i8, 2), v121, *(int16x4_t *)v12.i8, 3), v122, v12, 4),
                              v123,
                              v12,
                              5),
                            v124,
                            v12,
                            6),
                          v125,
                          v12,
                          7));
    do
    {
      _X22 = v127 + v15;
      v131 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 - 6), 8uLL);
      v132 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 + 10), 8uLL);
      v133 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 2uLL);
      v134 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 4uLL);
      v135 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 6uLL);
      v136 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 8uLL);
      v137 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xAuLL);
      v138 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xCuLL);
      v139 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xEuLL);
      v140 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v131.i8, *(int16x4_t *)v12.i8, 0);
      v141 = vmlal_high_lane_s16(vmull_high_lane_s16(v133, *(int16x4_t *)v12.i8, 1), v131, *(int16x4_t *)v12.i8, 0);
      v131.i64[0] = 0x38000000380000;
      v131.i64[1] = 0x38000000380000;
      v142.i64[0] = 0x38000000380000;
      v142.i64[1] = 0x38000000380000;
      v143 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v131, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      v144 = vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      v96 = v111;
      v111 = v129;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v127 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v149 = (int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v140, *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v135.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v136.i8, v12, 4), *(int16x4_t *)v137.i8, v12, 5), *(int16x4_t *)v138.i8, v12, 6), *(int16x4_t *)v139.i8, v12,
                          7);
      v150 = (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v141, v134, *(int16x4_t *)v12.i8, 2), v135, *(int16x4_t *)v12.i8, 3), v136, v12, 4), v137, v12, 5), v138, v12, 6), v139, v12,
                          7);
      v129 = vuzp1q_s16(v149, v150);
      *v126 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v143, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6),
                    vmovn_s32((int32x4_t)v149),
                    v13,
                    7),
                  6uLL),
                vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v144, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6), vmovn_s32((int32x4_t)v150), v13,
                  7),
                6uLL);
      --v128;
      v127 += v9;
      v126 = (int16x8_t *)((char *)v126 + v11);
    }
    while (v128 > 1);
    a7 += 2;
    v16 += 16;
    v151 = result - 8;
    v14 += 16;
    v15 += 16;
    v152 = result > 0xF;
    result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    v153 = xmmword_1C9832610[(a3 & 3) - 1];
    v154 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v157 = (int16x4_t)vshr_n_u16(v156, 8uLL);
    v158 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v159 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v165 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7));
    v166 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v167 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v168 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v174 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7));
    v175 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v176 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v177 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v183 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7));
    v184 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v185 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v186 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v192 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7));
    v193 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v194 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v195 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v201 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7));
    v202 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v203 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v204 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v210 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7));
    v211 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    v212 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    v213 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v218 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7));
    v219 = a2 + 1;
    v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 8uLL);
      v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 8uLL);
      v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 8uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      v165 = v174;
      v174 = v183;
      v183 = v192;
      v192 = v201;
      v201 = v210;
      v210 = v218;
      v218 = vmovn_s32(v231);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

uint64_t sub_1C9765764(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int16x8_t v13;
  int16x8_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;

  v8 = 4 * a5;
  v9 = 4 * a3;
  v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v11 = (char *)a6 + 2 * a5;
  v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  v15 = (char *)a8 + 2 * a7;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 5uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 5uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    v21 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xFF00FF00FF00FFLL;
    v24.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 5uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(_QWORD *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (_QWORD *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1C97658AC(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, _QWORD *a8)
{
  const float *v8;
  int16x8_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint16x8_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint16x8_t v22;
  int v23;
  BOOL v24;
  int16x4_t v25;
  int v26;
  uint16x8_t v27;
  uint16x8_t v28;

  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v8 = a4 + 1;
  v10 = (int16x4_t)vld1_dup_f32(v8);
  v11 = vdupq_n_s32(a3);
  v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  v13 = vnegq_s32(v11);
  v14 = 4 * a5;
  v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xFF00FF00FF00FFLL;
  v17.i64[1] = 0xFF00FF00FF00FFLL;
  v18 = (char *)a8 + 2 * a7;
  do
  {
    v19 = 0;
    v20 = 0;
    v21 = a2 + 2;
    do
    {
      v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    v23 = result - 8;
    v16 += 16;
    v18 += 16;
    v24 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v26 = a2 + 2;
    v27.i64[0] = 0xFF00FF00FF00FFLL;
    v27.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(_QWORD *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (_QWORD *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1C97659F8(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, _QWORD *a11)
{
  const float *v11;
  int16x8_t v12;
  _QWORD *v13;
  const float *v14;
  int16x8_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t *v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int16x8_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int16x8_t v32;
  int v33;
  BOOL v34;
  int16x4_t v35;
  int16x4_t v36;
  int v37;
  int16x8_t v38;
  int16x8_t v39;

  v12 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = a4 + 1;
  v13 = a11;
  v15 = (int16x8_t)vld1q_dup_f32(a7);
  v14 = a7 + 1;
  v16 = (int16x4_t)vld1_dup_f32(v11);
  v17 = (int16x4_t)vld1_dup_f32(v14);
  v18 = a9;
  v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  v20 = 4 * a8;
  v21 = vdupq_n_s32(~a3);
  v22 = 4 * a5;
  v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v24 = (char *)a9 + 2 * a8;
  v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  v27 = (char *)a11 + 2 * a10;
  do
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = a2 + 2;
    do
    {
      v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    v34 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v37 = a2 + 2;
    v38.i64[0] = 0xFF00FF00FF00FFLL;
    v38.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *v13 = v39.i64[0];
      v37 -= 2;
      *(_QWORD *)((char *)v13 + 2 * a10) = v39.i64[1];
      v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      v13 = (_QWORD *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

double sub_1C9765BC4(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1)
      return *(double *)v14.i64;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10 = (char *)a5 + 2 * a4;
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = a2 + 2;
    do
    {
      v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 7uLL);
      v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 7uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 7uLL);
      v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 7uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (_QWORD *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1C9765C84(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xFE00FE00FE00FE00);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 7uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 7uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 7uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xFE00FE00FE00FE00);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C9765E2C(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  uint16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  uint16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  uint16x4_t *v150;
  uint16x4_t *v151;
  uint16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 7uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 7uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 7uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 7uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 7uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 7uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 7uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 7uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 7uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 7uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 7uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 7uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 7uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 7uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 7uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 7uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 7uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 7uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v150 = (uint16x4_t *)((char *)v15 + v115);
      *v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v151 = (uint16x4_t *)((char *)v150 + v115);
      *v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v152 = (uint16x4_t *)((char *)v151 + v115);
      *v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v109 -= 4;
      v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C97662A4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int8x16_t v113;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  _OWORD *v125;
  uint64_t v126;
  int v127;
  int16x8_t v128;
  int16x8_t v130;
  int8x16_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v147;
  int16x4_t v148;
  int v149;
  BOOL v150;
  int16x8_t v151;
  int16x8_t v152;
  uint16x4_t v154;
  int16x4_t v155;
  int16x4_t v156;
  int8x8_t v157;
  int16x4_t v163;
  int16x4_t v164;
  int16x4_t v165;
  int8x8_t v166;
  int16x4_t v172;
  int16x4_t v173;
  int16x4_t v174;
  int8x8_t v175;
  int16x4_t v181;
  int16x4_t v182;
  int16x4_t v183;
  int8x8_t v184;
  int16x4_t v190;
  int16x4_t v191;
  int16x4_t v192;
  int8x8_t v193;
  int16x4_t v199;
  int16x4_t v200;
  int16x4_t v201;
  int8x8_t v202;
  int16x4_t v208;
  int16x4_t v209;
  int16x4_t v210;
  int8x8_t v211;
  int16x4_t v216;
  int v217;
  uint64_t v218;
  int16x4_t v220;
  int16x4_t v221;
  int8x8_t v222;
  int32x4_t v227;
  int32x4_t v228;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            1uLL);
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            1uLL);
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            1uLL);
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            1uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            1uLL);
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             1uLL);
    v112 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v113 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    v125 = a7;
    v126 = a5;
    v127 = a2 + 1;
    v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             1uLL);
    do
    {
      _X22 = v126 + v15;
      v130 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 7uLL);
      v131 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 7uLL);
      v132 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 2uLL);
      v133 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 4uLL);
      v134 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 6uLL);
      v135 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 8uLL);
      v136 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xAuLL);
      v137 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xCuLL);
      v138 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xEuLL);
      v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v130.i8, *(int16x4_t *)v12.i8, 0);
      v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v132, *(int16x4_t *)v12.i8, 1), v130, *(int16x4_t *)v12.i8, 0);
      v141 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      v142 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      v96 = v111;
      v111 = v128;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v147 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v133, *(int16x4_t *)v12.i8, 2), v134, *(int16x4_t *)v12.i8, 3), v135, v12, 4), v136, v12, 5), v137, v12, 6), v138, v12,
               7);
      v148 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v135.i8, v12, 4), *(int16x4_t *)v136.i8, v12, 5), *(int16x4_t *)v137.i8, v12, 6), *(int16x4_t *)v138.i8,
                 v12,
                 7),
               1uLL);
      *(uint16x4_t *)v133.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v141, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v111.i8,
                                                   v13,
                                                   6),
                                                 v148,
                                                 v13,
                                                 7),
                                               0xBuLL),
                                 (uint16x4_t)0xFE00FE00FE00FE00);
      v133.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                                                        vshrn_n_s32(v147, 1uLL),
                                                        v13,
                                                        7),
                                                      0xBuLL),
                                        (uint16x4_t)0xFE00FE00FE00FE00);
      v128 = vshrn_high_n_s32(v148, v147, 1uLL);
      *v125 = v133;
      --v127;
      v126 += v9;
      v125 = (_OWORD *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    v149 = result - 8;
    v14 += 16;
    v15 += 16;
    v150 = result > 0xF;
    result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    v151 = xmmword_1C9832610[(a3 & 3) - 1];
    v152 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v155 = (int16x4_t)vshr_n_u16(v154, 7uLL);
    v156 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v157 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             1uLL);
    v164 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v165 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v166 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             1uLL);
    v173 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v174 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v175 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             1uLL);
    v182 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v183 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v184 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             1uLL);
    v191 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v192 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v193 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             1uLL);
    v200 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v201 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v202 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             1uLL);
    v209 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v210 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v211 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             1uLL);
    v217 = a2 + 1;
    v218 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      v220 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 7uLL);
      v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 7uLL);
      v222 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 7uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 2uLL), *(int16x4_t *)v151.i8, 1), v220, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v221,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v221, v222, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v221, v222, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v221, v222, 6uLL),
               v151,
               7);
      v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v172, *(int16x4_t *)v152.i8, 1), v163, *(int16x4_t *)v152.i8, 0), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      v163 = v172;
      v172 = v181;
      v181 = v190;
      v190 = v199;
      v199 = v208;
      v208 = v216;
      v216 = vshrn_n_s32(v227, 1uLL);
      --v217;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v228, v216, v152, 7), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

uint64_t sub_1C9766B9C(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int16x8_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  v11 = (char *)a5 + 2 * a4;
  do
  {
    v12 = 0;
    v13 = 0;
    v14 = a2 + 2;
    do
    {
      v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    v16 = result - 8;
    v9 += 16;
    v11 += 16;
    v17 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(*a5, 2uLL) & 0xFFE0FFE0FFE0FFE0), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(v19, 2uLL) & 0xFFE0FFE0FFE0FFE0), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1C9766C84(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7),
                                 1uLL),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v31, 1uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 7uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 7uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 7uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7),
                1uLL),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C9766E2C(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  int16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  int16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x4_t *v150;
  int16x4_t *v151;
  int16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 7uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 7uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 7uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 7uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 7uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 7uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 7uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 7uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 7uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 1uLL),
                               (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 1uLL),
                                       (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 7uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 7uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 7uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 7uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 7uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 7uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 7uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 7uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 7uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      v150 = (int16x4_t *)((char *)v15 + v115);
      *v150 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      v151 = (int16x4_t *)((char *)v150 + v115);
      *v151 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      v152 = (int16x4_t *)((char *)v151 + v115);
      *v152 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C97672A4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int8x16_t v113;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t *v125;
  uint64_t v126;
  int v127;
  int16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int16x8_t v134;
  int8x16_t v135;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x8_t v146;
  int32x4_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int32x4_t v150;
  int v151;
  BOOL v152;
  int16x8_t v153;
  int16x8_t v154;
  uint16x4_t v156;
  int16x4_t v157;
  int16x4_t v158;
  int8x8_t v159;
  int16x4_t v165;
  int16x4_t v166;
  int16x4_t v167;
  int8x8_t v168;
  int16x4_t v174;
  int16x4_t v175;
  int16x4_t v176;
  int8x8_t v177;
  int16x4_t v183;
  int16x4_t v184;
  int16x4_t v185;
  int8x8_t v186;
  int16x4_t v192;
  int16x4_t v193;
  int16x4_t v194;
  int8x8_t v195;
  int16x4_t v201;
  int16x4_t v202;
  int16x4_t v203;
  int8x8_t v204;
  int16x4_t v210;
  int16x4_t v211;
  int16x4_t v212;
  int8x8_t v213;
  int16x4_t v218;
  int v219;
  uint64_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int16x4_t v224;
  int16x4_t v225;
  int8x8_t v226;
  int32x4_t v231;
  int32x4_t v232;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            1uLL);
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            1uLL);
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            1uLL);
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            1uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            1uLL);
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             1uLL);
    v112 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    v113 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    v125 = (int16x8_t *)a7;
    v126 = a5;
    v127 = a2 + 1;
    v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             1uLL);
    do
    {
      v129.i64[0] = 0x38000000380000;
      v129.i64[1] = 0x38000000380000;
      v130.i64[0] = 0x38000000380000;
      v130.i64[1] = 0x38000000380000;
      v131 = vmlal_lane_s16(vmlal_lane_s16(v129, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      v132 = vmlal_high_lane_s16(vmlal_high_lane_s16(v130, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      _X22 = v126 + v15;
      v96 = v111;
      v134 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 7uLL);
      v135 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 7uLL);
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      v111 = v128;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v140 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 2uLL);
      v141 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 4uLL);
      v142 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 6uLL);
      v143 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 8uLL);
      v144 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v12.i8, 1), v134, *(int16x4_t *)v12.i8, 0);
      v145 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v141.i8, *(int16x4_t *)v12.i8, 2);
      v146 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xAuLL);
      v147 = vmlal_high_lane_s16(v144, v141, *(int16x4_t *)v12.i8, 2);
      v148 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xCuLL);
      v149 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xEuLL);
      v150 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v147, v142, *(int16x4_t *)v12.i8, 3), v143, v12, 4), v146, v12, 5), v148, v12, 6), v149, v12, 7);
      *(int16x4_t *)v146.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v145, *(int16x4_t *)v142.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v143.i8, v12, 4), *(int16x4_t *)v146.i8, v12, 5), *(int16x4_t *)v148.i8, v12, 6), *(int16x4_t *)v149.i8, v12, 7), 1uLL);
      *(int16x4_t *)v131.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v131, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6), *(int16x4_t *)v146.i8,
                                  v13,
                                  7),
                                6uLL);
      v128 = vshrn_high_n_s32(*(int16x4_t *)v146.i8, v150, 1uLL);
      *v125 = vshrn_high_n_s32(*(int16x4_t *)v131.i8, vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v132, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                  vshrn_n_s32(v150, 1uLL),
                  v13,
                  7),
                6uLL);
      --v127;
      v126 += v9;
      v125 = (int16x8_t *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    v151 = result - 8;
    v14 += 16;
    v15 += 16;
    v152 = result > 0xF;
    result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    v153 = xmmword_1C9832610[(a3 & 3) - 1];
    v154 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v157 = (int16x4_t)vshr_n_u16(v156, 7uLL);
    v158 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v159 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7),
             1uLL);
    v166 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v167 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v168 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7),
             1uLL);
    v175 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v176 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v177 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7),
             1uLL);
    v184 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v185 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v186 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7),
             1uLL);
    v193 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v194 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v195 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7),
             1uLL);
    v202 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v203 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v204 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7),
             1uLL);
    v211 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    v212 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    v213 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7),
             1uLL);
    v219 = a2 + 1;
    v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 7uLL);
      v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 7uLL);
      v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 7uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      v165 = v174;
      v174 = v183;
      v183 = v192;
      v192 = v201;
      v201 = v210;
      v210 = v218;
      v218 = vshrn_n_s32(v231, 1uLL);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

uint64_t sub_1C9767B90(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int16x8_t v13;
  int16x8_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;

  v8 = 4 * a5;
  v9 = 4 * a3;
  v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v11 = (char *)a6 + 2 * a5;
  v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  v15 = (char *)a8 + 2 * a7;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 4uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 4uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    v21 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xFE00FE00FE00FE00;
    v24.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 4uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(_QWORD *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (_QWORD *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1C9767CD8(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, _QWORD *a8)
{
  const float *v8;
  int16x8_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint16x8_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint16x8_t v22;
  int v23;
  BOOL v24;
  int16x4_t v25;
  int v26;
  uint16x8_t v27;
  uint16x8_t v28;

  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v8 = a4 + 1;
  v10 = (int16x4_t)vld1_dup_f32(v8);
  v11 = vdupq_n_s32(a3);
  v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  v13 = vnegq_s32(v11);
  v14 = 4 * a5;
  v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xFE00FE00FE00FE00;
  v17.i64[1] = 0xFE00FE00FE00FE00;
  v18 = (char *)a8 + 2 * a7;
  do
  {
    v19 = 0;
    v20 = 0;
    v21 = a2 + 2;
    do
    {
      v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    v23 = result - 8;
    v16 += 16;
    v18 += 16;
    v24 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v26 = a2 + 2;
    v27.i64[0] = 0xFE00FE00FE00FE00;
    v27.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(_QWORD *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (_QWORD *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1C9767E24(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, _QWORD *a11)
{
  const float *v11;
  int16x8_t v12;
  _QWORD *v13;
  const float *v14;
  int16x8_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t *v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int16x8_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int16x8_t v32;
  int v33;
  BOOL v34;
  int16x4_t v35;
  int16x4_t v36;
  int v37;
  int16x8_t v38;
  int16x8_t v39;

  v12 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = a4 + 1;
  v13 = a11;
  v15 = (int16x8_t)vld1q_dup_f32(a7);
  v14 = a7 + 1;
  v16 = (int16x4_t)vld1_dup_f32(v11);
  v17 = (int16x4_t)vld1_dup_f32(v14);
  v18 = a9;
  v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  v20 = 4 * a8;
  v21 = vdupq_n_s32(~a3);
  v22 = 4 * a5;
  v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v24 = (char *)a9 + 2 * a8;
  v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  v27 = (char *)a11 + 2 * a10;
  do
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = a2 + 2;
    do
    {
      v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    v34 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v37 = a2 + 2;
    v38.i64[0] = 0xFE00FE00FE00FE00;
    v38.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *v13 = v39.i64[0];
      v37 -= 2;
      *(_QWORD *)((char *)v13 + 2 * a10) = v39.i64[1];
      v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      v13 = (_QWORD *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

double sub_1C9767FF0(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1)
      return *(double *)v14.i64;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10 = (char *)a5 + 2 * a4;
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = a2 + 2;
    do
    {
      v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 6uLL);
      v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 6uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 6uLL);
      v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 6uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (_QWORD *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1C97680B0(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  uint16x8_t *v19;
  _OWORD *v20;
  int v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint16x8_t v39;
  int16x8_t v40;
  uint16x8_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int v46;
  BOOL v47;
  int16x8_t v48;
  int v50;
  int16x4_t v51;
  int16x4_t v52;
  int8x8_t v54;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  v14 = vdupq_laneq_s16(v10, 5);
  v15 = vdupq_laneq_s16(v10, 6);
  v16 = vdupq_laneq_s16(v10, 7);
  v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  v18 = vdupq_laneq_s16(v10, 4);
  v19 = (uint16x8_t *)(a5 - 6);
  do
  {
    v20 = a7;
    _X15 = v19;
    v22 = a2 + 1;
    do
    {
      v23 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      v24 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v31 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 2uLL);
      v32 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 4uLL);
      v33 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 6uLL);
      v34 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 8uLL);
      v35 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xAuLL);
      v36 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xCuLL);
      v37 = vmulq_s16(v23, v11);
      v38 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xEuLL);
      v39 = (uint16x8_t)vmulq_s16(v33, v17);
      v40 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v37, v31, v12), v32, v13), v35, v14), v36, v15), v38, v16);
      v41 = (uint16x8_t)vmulq_s16(v34, v18);
      v42 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v39.i8);
      v43 = (int32x4_t)vaddl_high_u16(v39, v41);
      *(uint16x4_t *)v39.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16(v42, *(int16x4_t *)v40.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v39.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v43, v40), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v20 = v39;
      --v22;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    v46 = result - 8;
    ++v19;
    v47 = result > 0xF;
    result = (result - 8);
  }
  while (v47);
  if (v46)
  {
LABEL_9:
    v48 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v50 = a2 + 1;
    do
    {
      v51 = (int16x4_t)vshr_n_u16(*_X11, 6uLL);
      v52 = (int16x4_t)vshr_n_u16(_X11[1], 6uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v54 = (int8x8_t)vshr_n_u16(_X11[2], 6uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 2uLL), *(int16x4_t *)v48.i8, 1), v51, *(int16x4_t *)v48.i8, 0), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 4uLL), *(int16x4_t *)v48.i8, 2), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 6uLL),
                                      *(int16x4_t *)v48.i8,
                                      3),
                                    v52,
                                    v48,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v52, v54, 2uLL),
                                  v48,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v52, v54, 4uLL),
                                v48,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v52, v54, 6uLL),
                              v48,
                              7),
                            6uLL),
              (uint16x4_t)0xFC00FC00FC00FC00);
      --v50;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v50 > 1);
  }
  return result;
}

unint64_t sub_1C9768268(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t v18;
  int v19;
  __int8 *v20;
  __int8 *v21;
  __int8 *v22;
  __int8 *v23;
  uint16x4_t *v24;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v43;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v55;
  __int8 *v58;
  __int8 *v59;
  __int8 *v60;
  __int8 *v63;
  int v64;
  uint16x4_t *v65;
  char *v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v79;
  int16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int v93;
  BOOL v94;
  int16x8_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  uint16x4_t v103;
  int16x4_t v104;
  int16x4_t v106;
  uint16x4_t v108;
  int16x4_t v109;
  uint16x4_t v111;
  int16x4_t v112;
  uint16x4_t v114;
  int16x4_t v115;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint16x4_t v137;
  uint16x4_t v138;
  uint16x4_t v140;
  uint16x4_t v141;
  uint16x4_t v143;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  uint16x4_t *v164;
  uint16x4_t *v165;
  uint16x4_t *v166;
  uint64_t v167;

  v167 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v24 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  v13 = vdupq_laneq_s16(v8, 5);
  v14 = vdupq_laneq_s16(v8, 6);
  v15 = vdupq_laneq_s16(v8, 7);
  v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  v17 = vdupq_laneq_s16(v8, 4);
  v18 = 4 * a6;
  v19 = a2 + 2;
  v20 = &a5->i8[20 * a4];
  v21 = &a5->i8[8 * a4];
  v22 = &a5->i8[18 * a4];
  v23 = &a5->i8[10 * a4];
  v24 = a7;
  do
  {
    _X2 = &a5->i8[-6 * a4];
    v26 = *(uint16x8_t *)_X2;
    _X2 += 30;
    v27 = v26;
    _X24 = &a5->i8[-4 * a4];
    v29 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v30 = (int16x8_t)vshrq_n_u16(v27, 6uLL);
    v31 = (int16x8_t)vshrq_n_u16(v29, 6uLL);
    _X25 = &a5->i8[-2 * a4];
    v33 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v34 = v33;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v37 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v38 = v37;
    _X28 = &a5->i8[4 * a4];
    v40 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v41 = v40;
    _X30 = &a5->i8[6 * a4];
    v43 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X2] }
    v49 = (int16x8_t)vshrq_n_u16(v34, 6uLL);
    v50 = (int16x8_t)vshrq_n_u16(*a5, 6uLL);
    v51 = (int16x8_t)vshrq_n_u16(v38, 6uLL);
    v52 = (int16x8_t)vshrq_n_u16(v41, 6uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v55 = (int16x8_t)vshrq_n_u16(v43, 6uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v58 = v23;
    v59 = v22;
    v60 = v21;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v63 = v20;
    v64 = v19;
    v65 = a7;
    v66 = (char *)a7 + 2 * a6;
    do
    {
      v67 = v49;
      v68 = v50;
      v49 = v51;
      v50 = v52;
      _X9 = (uint64_t)&v60[v7 + 30];
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v58[v7 + 30];
      v51 = v55;
      __asm { PRFM            #0, [X9] }
      _X9 = &v59[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v63[v7];
      v52 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v60[v7], 6uLL);
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      v79 = vmlaq_s16(vmulq_s16(v55, v14), v50, v13);
      v55 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v58[v7], 6uLL);
      v80 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v79, v67, v12), v31, v11), v30, v10);
      v81 = (uint16x8_t)vmulq_s16(v68, v16);
      v82 = (uint16x8_t)vmulq_s16(v49, v17);
      v83 = vmlaq_s16(v80, v52, v15);
      v84 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v81.i8, *(uint16x4_t *)v82.i8);
      v85 = (int32x4_t)vaddl_high_u16(v81, v82);
      v86 = vaddw_s16(v84, *(int16x4_t *)v83.i8);
      v87 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v51, v13), v68, v12), v67, v11), v31, v10), v52, v14), v55, v15);
      v88 = (uint16x8_t)vmulq_s16(v49, v16);
      v89 = (uint16x8_t)vmulq_s16(v50, v17);
      v90 = vaddw_high_s16(v85, v83);
      v91 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v88.i8, *(uint16x4_t *)v89.i8), *(int16x4_t *)v87.i8);
      v92 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v88, v89), v87);
      *(uint16x4_t *)v87.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v86, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v87.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v90, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)v90.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v91, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v90.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v92, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int16x8_t *)v65[v7 / 8].i8 = v87;
      *(int32x4_t *)&v66[v7] = v90;
      v66 += v18;
      v64 -= 2;
      v63 += v9;
      v65 = (uint16x4_t *)((char *)v65 + v18);
      v60 += v9;
      v59 += v9;
      v58 += v9;
      v31 = v68;
      v30 = v67;
    }
    while (v64 > 2);
    v24 += 2;
    ++a5;
    v93 = result - 8;
    v7 += 16;
    v94 = result > 0xF;
    result = (result - 8);
  }
  while (v94);
  if (v93)
  {
LABEL_9:
    v95 = xmmword_1C9832610[v167 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v97 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 6uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v100 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 6uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v103 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v104 = (int16x4_t)vshr_n_u16(v103, 6uLL);
    _X12 = &a5->i8[14];
    v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v108 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v109 = (int16x4_t)vshr_n_u16(v108, 6uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v111 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v112 = (int16x4_t)vshr_n_u16(v111, 6uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v114 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v115 = (int16x4_t)vshr_n_u16(v114, 6uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v123 = a2 + 4;
    v124 = 3 * a4;
    v125 = 8 * a4;
    v126 = 22 * a4;
    v127 = 12 * a4;
    v128 = 10 * a4;
    v129 = 2 * a6;
    v130 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v128);
      _X3 = (uint64_t *)((char *)a5->i64 + v127);
      _X5 = (uint64_t *)((char *)a5->i64 + v130);
      _X17 = &a5->i8[v126];
      result = (unint64_t)&a5->u64[v124];
      a5 = (uint16x8_t *)((char *)a5 + v125);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v137 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v138 = v137;
      __asm { PRFM            #0, [X2] }
      v140 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v141 = v140;
      __asm { PRFM            #0, [X3] }
      v143 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v145 = vmlal_lane_s16(vmull_lane_s16(v106, *(int16x4_t *)v95.i8, 1), v104, *(int16x4_t *)v95.i8, 0);
      v146 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, *(int16x4_t *)v95.i8, 1), v98, *(int16x4_t *)v95.i8, 0), v104, *(int16x4_t *)v95.i8, 2), v106, *(int16x4_t *)v95.i8, 3);
      v147 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v95.i8, 1), v101, *(int16x4_t *)v95.i8, 0), v106, *(int16x4_t *)v95.i8, 2);
      v148 = vmlal_lane_s16(vmull_lane_s16(v109, *(int16x4_t *)v95.i8, 1), v106, *(int16x4_t *)v95.i8, 0);
      v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
      v149 = vmlal_laneq_s16(v146, v109, v95, 4);
      v150 = vmlal_lane_s16(v147, v109, *(int16x4_t *)v95.i8, 3);
      v151 = vmlal_lane_s16(v145, v109, *(int16x4_t *)v95.i8, 2);
      v98 = v109;
      v109 = (int16x4_t)vshr_n_u16(v138, 6uLL);
      v152 = vmlal_laneq_s16(v149, v112, v95, 5);
      v153 = vmlal_laneq_s16(v150, v112, v95, 4);
      v154 = vmlal_lane_s16(v151, v112, *(int16x4_t *)v95.i8, 3);
      v155 = vmlal_lane_s16(v148, v112, *(int16x4_t *)v95.i8, 2);
      v101 = v112;
      v112 = (int16x4_t)vshr_n_u16(v141, 6uLL);
      v156 = vmlal_laneq_s16(v152, v115, v95, 6);
      v157 = vmlal_laneq_s16(v153, v115, v95, 5);
      v158 = vmlal_laneq_s16(v154, v115, v95, 4);
      v159 = vmlal_lane_s16(v155, v115, *(int16x4_t *)v95.i8, 3);
      v104 = v115;
      v115 = (int16x4_t)vshr_n_u16(v143, 6uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v24 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v156, v106, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v164 = (uint16x4_t *)((char *)v24 + v129);
      *v164 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v157, v106, v95, 6), v109, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v165 = (uint16x4_t *)((char *)v164 + v129);
      *v165 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v158, v106, v95, 5), v109, v95, 6), v112, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v166 = (uint16x4_t *)((char *)v165 + v129);
      *v166 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v159, v106, v95, 4), v109, v95, 5), v112, v95, 6), v115, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v123 -= 4;
      v24 = (uint16x4_t *)((char *)v166 + v129);
    }
    while (v123 > 4);
  }
  return result;
}

uint64_t sub_1C97686E8(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v26;
  int8x16_t v27;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int8x16_t v70;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int8x16_t v96;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int8x16_t v109;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  _OWORD *v119;
  uint64_t v120;
  int v121;
  int16x8_t v122;
  int16x8_t v124;
  int8x16_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int16x8_t v140;
  uint16x8_t v141;
  uint16x8_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int v147;
  BOOL v148;
  int16x8_t v149;
  int16x8_t v150;
  uint16x4_t v152;
  int16x4_t v153;
  int16x4_t v154;
  int8x8_t v155;
  int16x4_t v161;
  int16x4_t v162;
  int16x4_t v163;
  int8x8_t v164;
  int16x4_t v170;
  int16x4_t v171;
  int16x4_t v172;
  int8x8_t v173;
  int16x4_t v179;
  int16x4_t v180;
  int16x4_t v181;
  int8x8_t v182;
  int16x4_t v188;
  int16x4_t v189;
  int16x4_t v190;
  int8x8_t v191;
  int16x4_t v197;
  int16x4_t v198;
  int16x4_t v199;
  int8x8_t v200;
  int16x4_t v206;
  int16x4_t v207;
  int16x4_t v208;
  int8x8_t v209;
  int16x4_t v214;
  int v215;
  uint64_t v216;
  int16x4_t v218;
  int16x4_t v219;
  int8x8_t v220;
  int32x4_t v225;
  int32x4_t v226;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v24 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  v17 = vdupq_laneq_s16(v12, 5);
  v18 = vdupq_laneq_s16(v12, 6);
  v19 = vdupq_laneq_s16(v12, 7);
  v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  v21 = vdupq_laneq_s16(v12, 4);
  v22 = v8 - 6;
  v23 = 8 * a4;
  v24 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v24 + 2 * (-3 * a4 - 3));
    v26 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v27 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 6uLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v39 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v26, v14), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xEuLL), v19);
    v40 = (uint16x8_t)vmulq_s16(v33, v20);
    v41 = (uint16x8_t)vmulq_s16(v34, v21);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v40.i8), *(int16x4_t *)v39.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v40, v41), v39), 2uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 6uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v52 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v43, v14), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xEuLL), v19);
    v53 = (uint16x8_t)vmulq_s16(v50, v20);
    v54 = (uint16x8_t)vmulq_s16(v51, v21);
    v55 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v54.i8, *(uint16x4_t *)v53.i8), *(int16x4_t *)v52.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v53, v54), v52), 2uLL);
    v56 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v57 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 6uLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 8uLL);
    v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v56, v14), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xEuLL), v19);
    v66 = (uint16x8_t)vmulq_s16(v63, v20);
    v67 = (uint16x8_t)vmulq_s16(v64, v21);
    v68 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v66.i8), *(int16x4_t *)v65.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v66, v67), v65), 2uLL);
    v69 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v70 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
    v78 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v69, v14), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xEuLL), v19);
    v79 = (uint16x8_t)vmulq_s16(v76, v20);
    v80 = (uint16x8_t)vmulq_s16(v77, v21);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8), *(int16x4_t *)v78.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78), 2uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v91 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v82, v14), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL), v19);
    v92 = (uint16x8_t)vmulq_s16(v89, v20);
    v93 = (uint16x8_t)vmulq_s16(v90, v21);
    v94 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v92.i8), *(int16x4_t *)v91.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v92, v93), v91), 2uLL);
    v95 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v96 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v102 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 6uLL);
    v103 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 8uLL);
    v104 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v95, v14), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xEuLL), v19);
    v105 = (uint16x8_t)vmulq_s16(v102, v20);
    v106 = (uint16x8_t)vmulq_s16(v103, v21);
    v107 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v105.i8), *(int16x4_t *)v104.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v105, v106), v104), 2uLL);
    v108 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v109 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v114 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 6uLL);
    v115 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 8uLL);
    v116 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v108, v14), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xEuLL), v19);
    v117 = (uint16x8_t)vmulq_s16(v114, v20);
    v118 = (uint16x8_t)vmulq_s16(v115, v21);
    v119 = a7;
    v120 = a5;
    v121 = a2 + 1;
    v122 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v118.i8, *(uint16x4_t *)v117.i8), *(int16x4_t *)v116.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v117, v118), v116), 2uLL);
    do
    {
      _X22 = v120 + v23;
      v124 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 - 6), 6uLL);
      v125 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 + 10), 6uLL);
      v126 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 2uLL);
      v127 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 4uLL);
      v128 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 6uLL);
      v129 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 8uLL);
      v130 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xAuLL);
      v131 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xCuLL);
      v132 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xEuLL);
      v133 = vmlaq_s16(vmulq_s16(v124, v14), v126, v15);
      v134 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v42.i8, *(int16x4_t *)v13.i8, 0);
      v135 = vmlal_high_lane_s16(vmull_high_lane_s16(v55, *(int16x4_t *)v13.i8, 1), v42, *(int16x4_t *)v13.i8, 0);
      v42 = v55;
      v55 = v68;
      v68 = v81;
      v81 = v94;
      v94 = v107;
      v107 = v122;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v120 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v140 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v133, v127, v16), v130, v17), v131, v18), v132, v19);
      v141 = (uint16x8_t)vmulq_s16(v128, v20);
      v142 = (uint16x8_t)vmulq_s16(v129, v21);
      v143 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v142.i8, *(uint16x4_t *)v141.i8);
      v144 = (int32x4_t)vaddl_high_u16(v141, v142);
      v145 = vaddw_s16(v143, *(int16x4_t *)v140.i8);
      v146 = vaddw_high_s16(v144, v140);
      *(int16x4_t *)v144.i8 = vshrn_n_s32(v145, 2uLL);
      *(uint16x4_t *)v145.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v134, *(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v68.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v94.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v107.i8,
                                                   v13,
                                                   6),
                                                 *(int16x4_t *)v144.i8,
                                                 v13,
                                                 7),
                                               0xAuLL),
                                 (uint16x4_t)0xFC00FC00FC00FC00);
      v145.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v135, v55, *(int16x4_t *)v13.i8, 2), v68, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v94, v13, 5), v107, v13, 6),
                                                        vshrn_n_s32(v146, 2uLL),
                                                        v13,
                                                        7),
                                                      0xAuLL),
                                        (uint16x4_t)0xFC00FC00FC00FC00);
      v122 = vshrn_high_n_s32(*(int16x4_t *)v144.i8, v146, 2uLL);
      *v119 = v145;
      --v121;
      v120 += v9;
      v119 = (_OWORD *)((char *)v119 + v11);
    }
    while (v121 > 1);
    a7 += 2;
    v24 += 16;
    v147 = result - 8;
    v22 += 16;
    v23 += 16;
    v148 = result > 0xF;
    result = (result - 8);
  }
  while (v148);
  if (v147)
  {
LABEL_9:
    v149 = xmmword_1C9832610[(a3 & 3) - 1];
    v150 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v24 - 6 * a4);
    v152 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v153 = (int16x4_t)vshr_n_u16(v152, 6uLL);
    v154 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v155 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v161 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v153, (int8x8_t)v154, 2uLL), *(int16x4_t *)v149.i8, 1), v153, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v153, (int8x8_t)v154, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v153, (int8x8_t)v154, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v154,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v154, v155, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v154, v155, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v154, v155, 6uLL),
               v149,
               7),
             2uLL);
    v162 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v163 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v164 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v170 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v162, (int8x8_t)v163, 2uLL), *(int16x4_t *)v149.i8, 1), v162, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v162, (int8x8_t)v163, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v162, (int8x8_t)v163, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v163,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v163, v164, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v163, v164, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v163, v164, 6uLL),
               v149,
               7),
             2uLL);
    v171 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v172 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v173 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v179 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v171, (int8x8_t)v172, 2uLL), *(int16x4_t *)v149.i8, 1), v171, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v171, (int8x8_t)v172, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v171, (int8x8_t)v172, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v172,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v172, v173, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v172, v173, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v172, v173, 6uLL),
               v149,
               7),
             2uLL);
    v180 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v181 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v182 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v188 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v180, (int8x8_t)v181, 2uLL), *(int16x4_t *)v149.i8, 1), v180, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v180, (int8x8_t)v181, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v180, (int8x8_t)v181, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v181,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v181, v182, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v181, v182, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v181, v182, 6uLL),
               v149,
               7),
             2uLL);
    v189 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v190 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v191 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v197 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v189, (int8x8_t)v190, 2uLL), *(int16x4_t *)v149.i8, 1), v189, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v189, (int8x8_t)v190, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v189, (int8x8_t)v190, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v190,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v190, v191, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v190, v191, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v190, v191, 6uLL),
               v149,
               7),
             2uLL);
    v198 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v199 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v200 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v206 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v198, (int8x8_t)v199, 2uLL), *(int16x4_t *)v149.i8, 1), v198, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v198, (int8x8_t)v199, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v198, (int8x8_t)v199, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v199,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v199, v200, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v199, v200, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v199, v200, 6uLL),
               v149,
               7),
             2uLL);
    v207 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v208 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v209 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v214 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v207, (int8x8_t)v208, 2uLL), *(int16x4_t *)v149.i8, 1), v207, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v207, (int8x8_t)v208, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v207, (int8x8_t)v208, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v208,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v208, v209, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v208, v209, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v208, v209, 6uLL),
               v149,
               7),
             2uLL);
    v215 = a2 + 1;
    v216 = v8 - 6;
    do
    {
      _X14 = v24 + v10;
      v218 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 - 6), 6uLL);
      v219 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 2), 6uLL);
      v220 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 10), 6uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v216;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v225 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v218, (int8x8_t)v219, 2uLL), *(int16x4_t *)v149.i8, 1), v218, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v218, (int8x8_t)v219, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v218, (int8x8_t)v219, 6uLL), *(int16x4_t *)v149.i8, 3),
                     v219,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v219, v220, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v219, v220, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v219, v220, 6uLL),
               v149,
               7);
      v226 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v170, *(int16x4_t *)v150.i8, 1), v161, *(int16x4_t *)v150.i8, 0), v179, *(int16x4_t *)v150.i8, 2), v188, *(int16x4_t *)v150.i8, 3), v197, v150, 4), v206, v150, 5), v214, v150,
               6);
      v161 = v170;
      v170 = v179;
      v179 = v188;
      v188 = v197;
      v197 = v206;
      v206 = v214;
      v214 = vshrn_n_s32(v225, 2uLL);
      --v215;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v226, v214, v150, 7), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v24 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v215 > 1);
  }
  return result;
}

uint64_t sub_1C9768F88(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int16x8_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  v11 = (char *)a5 + 2 * a4;
  do
  {
    v12 = 0;
    v13 = 0;
    v14 = a2 + 2;
    do
    {
      v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFF0FFF0FFF0FFF0, 0xFFF0FFF0FFF0FFF0)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFF0FFF0FFF0FFF0, 0xFFF0FFF0FFF0FFF0)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    v16 = result - 8;
    v9 += 16;
    v11 += 16;
    v17 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(*a5, 2uLL) & 0xFFF0FFF0FFF0FFF0), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(v19, 2uLL) & 0xFFF0FFF0FFF0FFF0), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1C9769070(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  uint16x8_t *v19;
  _OWORD *v20;
  int v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint16x8_t v39;
  int16x8_t v40;
  uint16x8_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int v46;
  BOOL v47;
  int16x8_t v48;
  int v50;
  int16x4_t v51;
  int16x4_t v52;
  int8x8_t v54;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  v14 = vdupq_laneq_s16(v10, 5);
  v15 = vdupq_laneq_s16(v10, 6);
  v16 = vdupq_laneq_s16(v10, 7);
  v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  v18 = vdupq_laneq_s16(v10, 4);
  v19 = (uint16x8_t *)(a5 - 6);
  do
  {
    v20 = a7;
    _X15 = v19;
    v22 = a2 + 1;
    do
    {
      v23 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      v24 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v31 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 2uLL);
      v32 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 4uLL);
      v33 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 6uLL);
      v34 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 8uLL);
      v35 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xAuLL);
      v36 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xCuLL);
      v37 = vmulq_s16(v23, v11);
      v38 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xEuLL);
      v39 = (uint16x8_t)vmulq_s16(v33, v17);
      v40 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v37, v31, v12), v32, v13), v35, v14), v36, v15), v38, v16);
      v41 = (uint16x8_t)vmulq_s16(v34, v18);
      v42 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v39.i8);
      v43 = (int32x4_t)vaddl_high_u16(v39, v41);
      *(int16x4_t *)v39.i8 = vadd_s16(vshrn_n_s32(vaddw_s16(v42, *(int16x4_t *)v40.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
      v39.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v43, v40), 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v20 = v39;
      --v22;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    v46 = result - 8;
    ++v19;
    v47 = result > 0xF;
    result = (result - 8);
  }
  while (v47);
  if (v46)
  {
LABEL_9:
    v48 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v50 = a2 + 1;
    do
    {
      v51 = (int16x4_t)vshr_n_u16(*_X11, 6uLL);
      v52 = (int16x4_t)vshr_n_u16(_X11[1], 6uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v54 = (int8x8_t)vshr_n_u16(_X11[2], 6uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 2uLL), *(int16x4_t *)v48.i8, 1), v51, *(int16x4_t *)v48.i8, 0), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 4uLL), *(int16x4_t *)v48.i8, 2), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 6uLL),
                          *(int16x4_t *)v48.i8,
                          3),
                        v52,
                        v48,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v52, v54, 2uLL),
                      v48,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v52, v54, 4uLL),
                    v48,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v52, v54, 6uLL),
                  v48,
                  7),
                2uLL),
              (int16x4_t)0xE000E000E000E000);
      --v50;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v50 > 1);
  }
  return result;
}

unint64_t sub_1C9769228(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t v18;
  int v19;
  __int8 *v20;
  __int8 *v21;
  __int8 *v22;
  __int8 *v23;
  int16x4_t *v24;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v43;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v55;
  __int8 *v58;
  __int8 *v59;
  __int8 *v60;
  __int8 *v63;
  int v64;
  int16x4_t *v65;
  char *v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v79;
  int16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int v93;
  BOOL v94;
  int16x8_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  uint16x4_t v103;
  int16x4_t v104;
  int16x4_t v106;
  uint16x4_t v108;
  int16x4_t v109;
  uint16x4_t v111;
  int16x4_t v112;
  uint16x4_t v114;
  int16x4_t v115;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint16x4_t v137;
  uint16x4_t v138;
  uint16x4_t v140;
  uint16x4_t v141;
  uint16x4_t v143;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int16x4_t *v164;
  int16x4_t *v165;
  int16x4_t *v166;
  uint64_t v167;

  v167 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v24 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  v13 = vdupq_laneq_s16(v8, 5);
  v14 = vdupq_laneq_s16(v8, 6);
  v15 = vdupq_laneq_s16(v8, 7);
  v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  v17 = vdupq_laneq_s16(v8, 4);
  v18 = 4 * a6;
  v19 = a2 + 2;
  v20 = &a5->i8[20 * a4];
  v21 = &a5->i8[8 * a4];
  v22 = &a5->i8[18 * a4];
  v23 = &a5->i8[10 * a4];
  v24 = a7;
  do
  {
    _X2 = &a5->i8[-6 * a4];
    v26 = *(uint16x8_t *)_X2;
    _X2 += 30;
    v27 = v26;
    _X24 = &a5->i8[-4 * a4];
    v29 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v30 = (int16x8_t)vshrq_n_u16(v27, 6uLL);
    v31 = (int16x8_t)vshrq_n_u16(v29, 6uLL);
    _X25 = &a5->i8[-2 * a4];
    v33 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v34 = v33;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v37 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v38 = v37;
    _X28 = &a5->i8[4 * a4];
    v40 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v41 = v40;
    _X30 = &a5->i8[6 * a4];
    v43 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X2] }
    v49 = (int16x8_t)vshrq_n_u16(v34, 6uLL);
    v50 = (int16x8_t)vshrq_n_u16(*a5, 6uLL);
    v51 = (int16x8_t)vshrq_n_u16(v38, 6uLL);
    v52 = (int16x8_t)vshrq_n_u16(v41, 6uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v55 = (int16x8_t)vshrq_n_u16(v43, 6uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v58 = v23;
    v59 = v22;
    v60 = v21;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v63 = v20;
    v64 = v19;
    v65 = a7;
    v66 = (char *)a7 + 2 * a6;
    do
    {
      v67 = v49;
      v68 = v50;
      v49 = v51;
      v50 = v52;
      _X9 = (uint64_t)&v60[v7 + 30];
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v58[v7 + 30];
      v51 = v55;
      __asm { PRFM            #0, [X9] }
      _X9 = &v59[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v63[v7];
      v52 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v60[v7], 6uLL);
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      v79 = vmlaq_s16(vmulq_s16(v55, v14), v50, v13);
      v55 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v58[v7], 6uLL);
      v80 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v79, v67, v12), v31, v11), v30, v10);
      v81 = (uint16x8_t)vmulq_s16(v68, v16);
      v82 = (uint16x8_t)vmulq_s16(v49, v17);
      v83 = vmlaq_s16(v80, v52, v15);
      v84 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v81.i8, *(uint16x4_t *)v82.i8);
      v85 = (int32x4_t)vaddl_high_u16(v81, v82);
      v86 = vaddw_s16(v84, *(int16x4_t *)v83.i8);
      v87 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v51, v13), v68, v12), v67, v11), v31, v10), v52, v14), v55, v15);
      v88 = (uint16x8_t)vmulq_s16(v49, v16);
      v89 = (uint16x8_t)vmulq_s16(v50, v17);
      v90 = vaddw_high_s16(v85, v83);
      v91 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v88.i8, *(uint16x4_t *)v89.i8), *(int16x4_t *)v87.i8);
      v92 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v88, v89), v87);
      *(int16x4_t *)v87.i8 = vadd_s16(vshrn_n_s32(v86, 2uLL), (int16x4_t)0xE000E000E000E000);
      v87.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v90, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v90.i8 = vadd_s16(vshrn_n_s32(v91, 2uLL), (int16x4_t)0xE000E000E000E000);
      v90.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v92, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x8_t *)v65[v7 / 8].i8 = v87;
      *(int32x4_t *)&v66[v7] = v90;
      v66 += v18;
      v64 -= 2;
      v63 += v9;
      v65 = (int16x4_t *)((char *)v65 + v18);
      v60 += v9;
      v59 += v9;
      v58 += v9;
      v31 = v68;
      v30 = v67;
    }
    while (v64 > 2);
    v24 += 2;
    ++a5;
    v93 = result - 8;
    v7 += 16;
    v94 = result > 0xF;
    result = (result - 8);
  }
  while (v94);
  if (v93)
  {
LABEL_9:
    v95 = xmmword_1C9832610[v167 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v97 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 6uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v100 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 6uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v103 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v104 = (int16x4_t)vshr_n_u16(v103, 6uLL);
    _X12 = &a5->i8[14];
    v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v108 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v109 = (int16x4_t)vshr_n_u16(v108, 6uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v111 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v112 = (int16x4_t)vshr_n_u16(v111, 6uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v114 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v115 = (int16x4_t)vshr_n_u16(v114, 6uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v123 = a2 + 4;
    v124 = 3 * a4;
    v125 = 8 * a4;
    v126 = 22 * a4;
    v127 = 12 * a4;
    v128 = 10 * a4;
    v129 = 2 * a6;
    v130 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v128);
      _X3 = (uint64_t *)((char *)a5->i64 + v127);
      _X5 = (uint64_t *)((char *)a5->i64 + v130);
      _X17 = &a5->i8[v126];
      result = (unint64_t)&a5->u64[v124];
      a5 = (uint16x8_t *)((char *)a5 + v125);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v137 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v138 = v137;
      __asm { PRFM            #0, [X2] }
      v140 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v141 = v140;
      __asm { PRFM            #0, [X3] }
      v143 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v145 = vmlal_lane_s16(vmull_lane_s16(v106, *(int16x4_t *)v95.i8, 1), v104, *(int16x4_t *)v95.i8, 0);
      v146 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, *(int16x4_t *)v95.i8, 1), v98, *(int16x4_t *)v95.i8, 0), v104, *(int16x4_t *)v95.i8, 2), v106, *(int16x4_t *)v95.i8, 3);
      v147 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v95.i8, 1), v101, *(int16x4_t *)v95.i8, 0), v106, *(int16x4_t *)v95.i8, 2);
      v148 = vmlal_lane_s16(vmull_lane_s16(v109, *(int16x4_t *)v95.i8, 1), v106, *(int16x4_t *)v95.i8, 0);
      v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
      v149 = vmlal_laneq_s16(v146, v109, v95, 4);
      v150 = vmlal_lane_s16(v147, v109, *(int16x4_t *)v95.i8, 3);
      v151 = vmlal_lane_s16(v145, v109, *(int16x4_t *)v95.i8, 2);
      v98 = v109;
      v109 = (int16x4_t)vshr_n_u16(v138, 6uLL);
      v152 = vmlal_laneq_s16(v149, v112, v95, 5);
      v153 = vmlal_laneq_s16(v150, v112, v95, 4);
      v154 = vmlal_lane_s16(v151, v112, *(int16x4_t *)v95.i8, 3);
      v155 = vmlal_lane_s16(v148, v112, *(int16x4_t *)v95.i8, 2);
      v101 = v112;
      v112 = (int16x4_t)vshr_n_u16(v141, 6uLL);
      v156 = vmlal_laneq_s16(v152, v115, v95, 6);
      v157 = vmlal_laneq_s16(v153, v115, v95, 5);
      v158 = vmlal_laneq_s16(v154, v115, v95, 4);
      v159 = vmlal_lane_s16(v155, v115, *(int16x4_t *)v95.i8, 3);
      v104 = v115;
      v115 = (int16x4_t)vshr_n_u16(v143, 6uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v24 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v156, v106, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      v164 = (int16x4_t *)((char *)v24 + v129);
      *v164 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v157, v106, v95, 6), v109, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      v165 = (int16x4_t *)((char *)v164 + v129);
      *v165 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v158, v106, v95, 5), v109, v95, 6), v112, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      v166 = (int16x4_t *)((char *)v165 + v129);
      *v166 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v159, v106, v95, 4), v109, v95, 5), v112, v95, 6), v115, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      v123 -= 4;
      v24 = (int16x4_t *)((char *)v166 + v129);
    }
    while (v123 > 4);
  }
  return result;
}

uint64_t sub_1C97696A8(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int16x8_t v26;
  int8x16_t v27;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int8x16_t v70;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int8x16_t v96;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int8x16_t v109;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  int16x8_t *v119;
  uint64_t v120;
  int v121;
  int16x8_t v122;
  int16x8_t v124;
  int8x16_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int16x8_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int v149;
  BOOL v150;
  int16x8_t v151;
  int16x8_t v152;
  uint16x4_t v154;
  int16x4_t v155;
  int16x4_t v156;
  int8x8_t v157;
  int16x4_t v163;
  int16x4_t v164;
  int16x4_t v165;
  int8x8_t v166;
  int16x4_t v172;
  int16x4_t v173;
  int16x4_t v174;
  int8x8_t v175;
  int16x4_t v181;
  int16x4_t v182;
  int16x4_t v183;
  int8x8_t v184;
  int16x4_t v190;
  int16x4_t v191;
  int16x4_t v192;
  int8x8_t v193;
  int16x4_t v199;
  int16x4_t v200;
  int16x4_t v201;
  int8x8_t v202;
  int16x4_t v208;
  int16x4_t v209;
  int16x4_t v210;
  int8x8_t v211;
  int16x4_t v216;
  int v217;
  uint64_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int16x4_t v222;
  int16x4_t v223;
  int8x8_t v224;
  int32x4_t v229;
  int32x4_t v230;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v24 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  v17 = vdupq_laneq_s16(v12, 5);
  v18 = vdupq_laneq_s16(v12, 6);
  v19 = vdupq_laneq_s16(v12, 7);
  v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  v21 = vdupq_laneq_s16(v12, 4);
  v22 = v8 - 6;
  v23 = 8 * a4;
  v24 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v24 + 2 * (-3 * a4 - 3));
    v26 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v27 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 6uLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v39 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v26, v14), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xEuLL), v19);
    v40 = (uint16x8_t)vmulq_s16(v33, v20);
    v41 = (uint16x8_t)vmulq_s16(v34, v21);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v40.i8), *(int16x4_t *)v39.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v40, v41), v39), 2uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 6uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v52 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v43, v14), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xEuLL), v19);
    v53 = (uint16x8_t)vmulq_s16(v50, v20);
    v54 = (uint16x8_t)vmulq_s16(v51, v21);
    v55 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v54.i8, *(uint16x4_t *)v53.i8), *(int16x4_t *)v52.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v53, v54), v52), 2uLL);
    v56 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v57 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 6uLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 8uLL);
    v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v56, v14), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xEuLL), v19);
    v66 = (uint16x8_t)vmulq_s16(v63, v20);
    v67 = (uint16x8_t)vmulq_s16(v64, v21);
    v68 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v66.i8), *(int16x4_t *)v65.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v66, v67), v65), 2uLL);
    v69 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v70 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
    v78 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v69, v14), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xEuLL), v19);
    v79 = (uint16x8_t)vmulq_s16(v76, v20);
    v80 = (uint16x8_t)vmulq_s16(v77, v21);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8), *(int16x4_t *)v78.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78), 2uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v91 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v82, v14), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL), v19);
    v92 = (uint16x8_t)vmulq_s16(v89, v20);
    v93 = (uint16x8_t)vmulq_s16(v90, v21);
    v94 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v92.i8), *(int16x4_t *)v91.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v92, v93), v91), 2uLL);
    v95 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v96 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v102 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 6uLL);
    v103 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 8uLL);
    v104 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v95, v14), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xEuLL), v19);
    v105 = (uint16x8_t)vmulq_s16(v102, v20);
    v106 = (uint16x8_t)vmulq_s16(v103, v21);
    v107 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v105.i8), *(int16x4_t *)v104.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v105, v106), v104), 2uLL);
    v108 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    v109 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v114 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 6uLL);
    v115 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 8uLL);
    v116 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v108, v14), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xEuLL), v19);
    v117 = (uint16x8_t)vmulq_s16(v114, v20);
    v118 = (uint16x8_t)vmulq_s16(v115, v21);
    v119 = (int16x8_t *)a7;
    v120 = a5;
    v121 = a2 + 1;
    v122 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v118.i8, *(uint16x4_t *)v117.i8), *(int16x4_t *)v116.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v117, v118), v116), 2uLL);
    do
    {
      _X22 = v120 + v23;
      v124 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 - 6), 6uLL);
      v125 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 + 10), 6uLL);
      v126 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 2uLL);
      v127 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 4uLL);
      v128 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 6uLL);
      v129 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 8uLL);
      v130 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xAuLL);
      v131 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xCuLL);
      v132 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xEuLL);
      v133 = vmlaq_s16(vmulq_s16(v124, v14), v126, v15);
      v126.i64[0] = 0x38000000380000;
      v126.i64[1] = 0x38000000380000;
      v134.i64[0] = 0x38000000380000;
      v134.i64[1] = 0x38000000380000;
      v135 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v126, *(int16x4_t *)v42.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 1);
      v136 = vmlal_high_lane_s16(vmlal_high_lane_s16(v134, v42, *(int16x4_t *)v13.i8, 0), v55, *(int16x4_t *)v13.i8, 1);
      v42 = v55;
      v55 = v68;
      v68 = v81;
      v81 = v94;
      v94 = v107;
      v107 = v122;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v120 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v141 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v133, v127, v16), v130, v17), v131, v18), v132, v19);
      v142 = (uint16x8_t)vmulq_s16(v128, v20);
      v143 = (uint16x8_t)vmulq_s16(v129, v21);
      v144 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v143.i8, *(uint16x4_t *)v142.i8);
      v145 = (int32x4_t)vaddl_high_u16(v142, v143);
      v146 = vaddw_s16(v144, *(int16x4_t *)v141.i8);
      v147 = vaddw_high_s16(v145, v141);
      *(int16x4_t *)v145.i8 = vshrn_n_s32(v146, 2uLL);
      v148 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v135, *(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v68.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v94.i8, v13, 5), *(int16x4_t *)v107.i8, v13, 6), *(int16x4_t *)v145.i8, v13,
               7);
      v122 = vshrn_high_n_s32(*(int16x4_t *)v145.i8, v147, 2uLL);
      *v119 = vshrn_high_n_s32(vshrn_n_s32(v148, 6uLL), vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v136, v55, *(int16x4_t *)v13.i8, 2), v68, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v94, v13, 5), v107, v13, 6),
                  vshrn_n_s32(v147, 2uLL),
                  v13,
                  7),
                6uLL);
      --v121;
      v120 += v9;
      v119 = (int16x8_t *)((char *)v119 + v11);
    }
    while (v121 > 1);
    a7 += 2;
    v24 += 16;
    v149 = result - 8;
    v22 += 16;
    v23 += 16;
    v150 = result > 0xF;
    result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    v151 = xmmword_1C9832610[(a3 & 3) - 1];
    v152 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v24 - 6 * a4);
    v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v155 = (int16x4_t)vshr_n_u16(v154, 6uLL);
    v156 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v157 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             2uLL);
    v164 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v165 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v166 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             2uLL);
    v173 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v174 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v175 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             2uLL);
    v182 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v183 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v184 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             2uLL);
    v191 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v192 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v193 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             2uLL);
    v200 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v201 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v202 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             2uLL);
    v209 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    v210 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    v211 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             2uLL);
    v217 = a2 + 1;
    v218 = v8 - 6;
    do
    {
      v219.i64[0] = 0x38000000380000;
      v219.i64[1] = 0x38000000380000;
      v220 = vmlal_lane_s16(v219, v163, *(int16x4_t *)v152.i8, 0);
      _X14 = v24 + v10;
      v222 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 - 6), 6uLL);
      v223 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 2), 6uLL);
      v224 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 10), 6uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v229 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v222, (int8x8_t)v223, 2uLL), *(int16x4_t *)v151.i8, 1), v222, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v222, (int8x8_t)v223, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v222, (int8x8_t)v223, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v223,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v223, v224, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v223, v224, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v223, v224, 6uLL),
               v151,
               7);
      v230 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v220, v172, *(int16x4_t *)v152.i8, 1), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      v163 = v172;
      v172 = v181;
      v181 = v190;
      v190 = v199;
      v199 = v208;
      v208 = v216;
      v216 = vshrn_n_s32(v229, 2uLL);
      --v217;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v230, v216, v152, 7), 6uLL);
      v24 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

uint64_t sub_1C9769F3C(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int16x8_t v13;
  int16x8_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;

  v8 = 4 * a5;
  v9 = 4 * a3;
  v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v11 = (char *)a6 + 2 * a5;
  v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  v15 = (char *)a8 + 2 * a7;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 3uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 3uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    v21 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xFC00FC00FC00FC00;
    v24.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 3uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(_QWORD *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (_QWORD *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1C976A084(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, _QWORD *a8)
{
  const float *v8;
  int16x8_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint16x8_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint16x8_t v22;
  int v23;
  BOOL v24;
  int16x4_t v25;
  int v26;
  uint16x8_t v27;
  uint16x8_t v28;

  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v8 = a4 + 1;
  v10 = (int16x4_t)vld1_dup_f32(v8);
  v11 = vdupq_n_s32(a3);
  v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  v13 = vnegq_s32(v11);
  v14 = 4 * a5;
  v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xFC00FC00FC00FC00;
  v17.i64[1] = 0xFC00FC00FC00FC00;
  v18 = (char *)a8 + 2 * a7;
  do
  {
    v19 = 0;
    v20 = 0;
    v21 = a2 + 2;
    do
    {
      v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    v23 = result - 8;
    v16 += 16;
    v18 += 16;
    v24 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v26 = a2 + 2;
    v27.i64[0] = 0xFC00FC00FC00FC00;
    v27.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(_QWORD *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (_QWORD *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1C976A1D0(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, _QWORD *a11)
{
  const float *v11;
  int16x8_t v12;
  _QWORD *v13;
  const float *v14;
  int16x8_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t *v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int16x8_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int16x8_t v32;
  int v33;
  BOOL v34;
  int16x4_t v35;
  int16x4_t v36;
  int v37;
  int16x8_t v38;
  int16x8_t v39;

  v12 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = a4 + 1;
  v13 = a11;
  v15 = (int16x8_t)vld1q_dup_f32(a7);
  v14 = a7 + 1;
  v16 = (int16x4_t)vld1_dup_f32(v11);
  v17 = (int16x4_t)vld1_dup_f32(v14);
  v18 = a9;
  v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  v20 = 4 * a8;
  v21 = vdupq_n_s32(~a3);
  v22 = 4 * a5;
  v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v24 = (char *)a9 + 2 * a8;
  v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  v27 = (char *)a11 + 2 * a10;
  do
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = a2 + 2;
    do
    {
      v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    v34 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v37 = a2 + 2;
    v38.i64[0] = 0xFC00FC00FC00FC00;
    v38.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *v13 = v39.i64[0];
      v37 -= 2;
      *(_QWORD *)((char *)v13 + 2 * a10) = v39.i64[1];
      v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      v13 = (_QWORD *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

double sub_1C976A39C(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1)
      return *(double *)v14.i64;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10 = (char *)a5 + 2 * a4;
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = a2 + 2;
    do
    {
      v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 5uLL);
      v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 5uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 5uLL);
      v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 5uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (_QWORD *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1C976A45C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xF800F800F800F800);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xF800F800F800F800);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 5uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 5uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 5uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xF800F800F800F800);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C976A604(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  uint16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  uint16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  uint16x4_t *v150;
  uint16x4_t *v151;
  uint16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 5uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 5uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 5uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 5uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 5uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 5uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 5uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 5uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 5uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 5uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 5uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 5uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 5uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 5uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 5uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 5uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 5uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 5uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v150 = (uint16x4_t *)((char *)v15 + v115);
      *v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v151 = (uint16x4_t *)((char *)v150 + v115);
      *v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v152 = (uint16x4_t *)((char *)v151 + v115);
      *v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v109 -= 4;
      v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C976AA7C(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int8x16_t v113;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  _OWORD *v125;
  uint64_t v126;
  int v127;
  int16x8_t v128;
  int16x8_t v130;
  int8x16_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v147;
  int16x4_t v148;
  int v149;
  BOOL v150;
  int16x8_t v151;
  int16x8_t v152;
  uint16x4_t v154;
  int16x4_t v155;
  int16x4_t v156;
  int8x8_t v157;
  int16x4_t v163;
  int16x4_t v164;
  int16x4_t v165;
  int8x8_t v166;
  int16x4_t v172;
  int16x4_t v173;
  int16x4_t v174;
  int8x8_t v175;
  int16x4_t v181;
  int16x4_t v182;
  int16x4_t v183;
  int8x8_t v184;
  int16x4_t v190;
  int16x4_t v191;
  int16x4_t v192;
  int8x8_t v193;
  int16x4_t v199;
  int16x4_t v200;
  int16x4_t v201;
  int8x8_t v202;
  int16x4_t v208;
  int16x4_t v209;
  int16x4_t v210;
  int8x8_t v211;
  int16x4_t v216;
  int v217;
  uint64_t v218;
  int16x4_t v220;
  int16x4_t v221;
  int8x8_t v222;
  int32x4_t v227;
  int32x4_t v228;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            3uLL);
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            3uLL);
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            3uLL);
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            3uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            3uLL);
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             3uLL);
    v112 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v113 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    v125 = a7;
    v126 = a5;
    v127 = a2 + 1;
    v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             3uLL);
    do
    {
      _X22 = v126 + v15;
      v130 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 5uLL);
      v131 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 5uLL);
      v132 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 2uLL);
      v133 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 4uLL);
      v134 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 6uLL);
      v135 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 8uLL);
      v136 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xAuLL);
      v137 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xCuLL);
      v138 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xEuLL);
      v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v130.i8, *(int16x4_t *)v12.i8, 0);
      v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v132, *(int16x4_t *)v12.i8, 1), v130, *(int16x4_t *)v12.i8, 0);
      v141 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      v142 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      v96 = v111;
      v111 = v128;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v147 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v133, *(int16x4_t *)v12.i8, 2), v134, *(int16x4_t *)v12.i8, 3), v135, v12, 4), v136, v12, 5), v137, v12, 6), v138, v12,
               7);
      v148 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v135.i8, v12, 4), *(int16x4_t *)v136.i8, v12, 5), *(int16x4_t *)v137.i8, v12, 6), *(int16x4_t *)v138.i8,
                 v12,
                 7),
               3uLL);
      *(uint16x4_t *)v133.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v141, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v111.i8,
                                                   v13,
                                                   6),
                                                 v148,
                                                 v13,
                                                 7),
                                               9uLL),
                                 (uint16x4_t)0xF800F800F800F800);
      v133.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                                                        vshrn_n_s32(v147, 3uLL),
                                                        v13,
                                                        7),
                                                      9uLL),
                                        (uint16x4_t)0xF800F800F800F800);
      v128 = vshrn_high_n_s32(v148, v147, 3uLL);
      *v125 = v133;
      --v127;
      v126 += v9;
      v125 = (_OWORD *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    v149 = result - 8;
    v14 += 16;
    v15 += 16;
    v150 = result > 0xF;
    result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    v151 = xmmword_1C9832610[(a3 & 3) - 1];
    v152 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v155 = (int16x4_t)vshr_n_u16(v154, 5uLL);
    v156 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v157 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             3uLL);
    v164 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v165 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v166 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             3uLL);
    v173 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v174 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v175 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             3uLL);
    v182 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v183 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v184 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             3uLL);
    v191 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v192 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v193 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             3uLL);
    v200 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v201 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v202 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             3uLL);
    v209 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v210 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v211 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             3uLL);
    v217 = a2 + 1;
    v218 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      v220 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 5uLL);
      v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 5uLL);
      v222 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 5uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 2uLL), *(int16x4_t *)v151.i8, 1), v220, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v221,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v221, v222, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v221, v222, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v221, v222, 6uLL),
               v151,
               7);
      v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v172, *(int16x4_t *)v152.i8, 1), v163, *(int16x4_t *)v152.i8, 0), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      v163 = v172;
      v172 = v181;
      v181 = v190;
      v190 = v199;
      v199 = v208;
      v208 = v216;
      v216 = vshrn_n_s32(v227, 3uLL);
      --v217;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v228, v216, v152, 7), 9uLL), (uint16x4_t)0xF800F800F800F800);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

uint64_t sub_1C976B374(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int16x8_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  v11 = (char *)a5 + 2 * a4;
  do
  {
    v12 = 0;
    v13 = 0;
    v14 = a2 + 2;
    do
    {
      v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFF8FFF8FFF8FFF8, 0xFFF8FFF8FFF8FFF8)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFF8FFF8FFF8FFF8, 0xFFF8FFF8FFF8FFF8)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    v16 = result - 8;
    v9 += 16;
    v11 += 16;
    v17 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(*a5, 2uLL) & 0xFFF8FFF8FFF8FFF8), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(v19, 2uLL) & 0xFFF8FFF8FFF8FFF8), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1C976B45C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7),
                                 3uLL),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v31, 3uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 5uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 5uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 5uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7),
                3uLL),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C976B604(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  int16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  int16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x4_t *v150;
  int16x4_t *v151;
  int16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 5uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 5uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 5uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 5uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 5uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 5uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 5uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 5uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 5uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 3uLL),
                               (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 3uLL),
                                       (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 5uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 5uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 5uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 5uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 5uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 5uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 5uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 5uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 5uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      v150 = (int16x4_t *)((char *)v15 + v115);
      *v150 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      v151 = (int16x4_t *)((char *)v150 + v115);
      *v151 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      v152 = (int16x4_t *)((char *)v151 + v115);
      *v152 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C976BA7C(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int8x16_t v113;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t *v125;
  uint64_t v126;
  int v127;
  int16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int16x8_t v134;
  int8x16_t v135;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x8_t v146;
  int32x4_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int32x4_t v150;
  int v151;
  BOOL v152;
  int16x8_t v153;
  int16x8_t v154;
  uint16x4_t v156;
  int16x4_t v157;
  int16x4_t v158;
  int8x8_t v159;
  int16x4_t v165;
  int16x4_t v166;
  int16x4_t v167;
  int8x8_t v168;
  int16x4_t v174;
  int16x4_t v175;
  int16x4_t v176;
  int8x8_t v177;
  int16x4_t v183;
  int16x4_t v184;
  int16x4_t v185;
  int8x8_t v186;
  int16x4_t v192;
  int16x4_t v193;
  int16x4_t v194;
  int8x8_t v195;
  int16x4_t v201;
  int16x4_t v202;
  int16x4_t v203;
  int8x8_t v204;
  int16x4_t v210;
  int16x4_t v211;
  int16x4_t v212;
  int8x8_t v213;
  int16x4_t v218;
  int v219;
  uint64_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int16x4_t v224;
  int16x4_t v225;
  int8x8_t v226;
  int32x4_t v231;
  int32x4_t v232;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            3uLL);
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            3uLL);
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            3uLL);
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            3uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            3uLL);
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             3uLL);
    v112 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    v113 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    v125 = (int16x8_t *)a7;
    v126 = a5;
    v127 = a2 + 1;
    v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             3uLL);
    do
    {
      v129.i64[0] = 0x38000000380000;
      v129.i64[1] = 0x38000000380000;
      v130.i64[0] = 0x38000000380000;
      v130.i64[1] = 0x38000000380000;
      v131 = vmlal_lane_s16(vmlal_lane_s16(v129, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      v132 = vmlal_high_lane_s16(vmlal_high_lane_s16(v130, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      _X22 = v126 + v15;
      v96 = v111;
      v134 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 5uLL);
      v135 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 5uLL);
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      v111 = v128;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v140 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 2uLL);
      v141 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 4uLL);
      v142 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 6uLL);
      v143 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 8uLL);
      v144 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v12.i8, 1), v134, *(int16x4_t *)v12.i8, 0);
      v145 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v141.i8, *(int16x4_t *)v12.i8, 2);
      v146 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xAuLL);
      v147 = vmlal_high_lane_s16(v144, v141, *(int16x4_t *)v12.i8, 2);
      v148 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xCuLL);
      v149 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xEuLL);
      v150 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v147, v142, *(int16x4_t *)v12.i8, 3), v143, v12, 4), v146, v12, 5), v148, v12, 6), v149, v12, 7);
      *(int16x4_t *)v146.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v145, *(int16x4_t *)v142.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v143.i8, v12, 4), *(int16x4_t *)v146.i8, v12, 5), *(int16x4_t *)v148.i8, v12, 6), *(int16x4_t *)v149.i8, v12, 7), 3uLL);
      *(int16x4_t *)v131.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v131, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6), *(int16x4_t *)v146.i8,
                                  v13,
                                  7),
                                6uLL);
      v128 = vshrn_high_n_s32(*(int16x4_t *)v146.i8, v150, 3uLL);
      *v125 = vshrn_high_n_s32(*(int16x4_t *)v131.i8, vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v132, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                  vshrn_n_s32(v150, 3uLL),
                  v13,
                  7),
                6uLL);
      --v127;
      v126 += v9;
      v125 = (int16x8_t *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    v151 = result - 8;
    v14 += 16;
    v15 += 16;
    v152 = result > 0xF;
    result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    v153 = xmmword_1C9832610[(a3 & 3) - 1];
    v154 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v157 = (int16x4_t)vshr_n_u16(v156, 5uLL);
    v158 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v159 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7),
             3uLL);
    v166 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v167 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v168 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7),
             3uLL);
    v175 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v176 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v177 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7),
             3uLL);
    v184 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v185 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v186 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7),
             3uLL);
    v193 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v194 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v195 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7),
             3uLL);
    v202 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v203 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v204 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7),
             3uLL);
    v211 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    v212 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    v213 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7),
             3uLL);
    v219 = a2 + 1;
    v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 5uLL);
      v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 5uLL);
      v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 5uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      v165 = v174;
      v174 = v183;
      v183 = v192;
      v192 = v201;
      v201 = v210;
      v210 = v218;
      v218 = vshrn_n_s32(v231, 3uLL);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

uint64_t sub_1C976C368(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int16x8_t v13;
  int16x8_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;

  v8 = 4 * a5;
  v9 = 4 * a3;
  v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v11 = (char *)a6 + 2 * a5;
  v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  v15 = (char *)a8 + 2 * a7;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 2uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 2uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    v21 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xF800F800F800F800;
    v24.i64[1] = 0xF800F800F800F800;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 2uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(_QWORD *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (_QWORD *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1C976C4B0(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, _QWORD *a8)
{
  const float *v8;
  int16x8_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint16x8_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint16x8_t v22;
  int v23;
  BOOL v24;
  int16x4_t v25;
  int v26;
  uint16x8_t v27;
  uint16x8_t v28;

  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v8 = a4 + 1;
  v10 = (int16x4_t)vld1_dup_f32(v8);
  v11 = vdupq_n_s32(a3);
  v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  v13 = vnegq_s32(v11);
  v14 = 4 * a5;
  v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xF800F800F800F800;
  v17.i64[1] = 0xF800F800F800F800;
  v18 = (char *)a8 + 2 * a7;
  do
  {
    v19 = 0;
    v20 = 0;
    v21 = a2 + 2;
    do
    {
      v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    v23 = result - 8;
    v16 += 16;
    v18 += 16;
    v24 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v26 = a2 + 2;
    v27.i64[0] = 0xF800F800F800F800;
    v27.i64[1] = 0xF800F800F800F800;
    do
    {
      v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(_QWORD *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (_QWORD *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1C976C5FC(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, _QWORD *a11)
{
  const float *v11;
  int16x8_t v12;
  _QWORD *v13;
  const float *v14;
  int16x8_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t *v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int16x8_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int16x8_t v32;
  int v33;
  BOOL v34;
  int16x4_t v35;
  int16x4_t v36;
  int v37;
  int16x8_t v38;
  int16x8_t v39;

  v12 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = a4 + 1;
  v13 = a11;
  v15 = (int16x8_t)vld1q_dup_f32(a7);
  v14 = a7 + 1;
  v16 = (int16x4_t)vld1_dup_f32(v11);
  v17 = (int16x4_t)vld1_dup_f32(v14);
  v18 = a9;
  v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  v20 = 4 * a8;
  v21 = vdupq_n_s32(~a3);
  v22 = 4 * a5;
  v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v24 = (char *)a9 + 2 * a8;
  v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  v27 = (char *)a11 + 2 * a10;
  do
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = a2 + 2;
    do
    {
      v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    v34 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v37 = a2 + 2;
    v38.i64[0] = 0xF800F800F800F800;
    v38.i64[1] = 0xF800F800F800F800;
    do
    {
      v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *v13 = v39.i64[0];
      v37 -= 2;
      *(_QWORD *)((char *)v13 + 2 * a10) = v39.i64[1];
      v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      v13 = (_QWORD *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

double sub_1C976C7C8(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1)
      return *(double *)v14.i64;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10 = (char *)a5 + 2 * a4;
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = a2 + 2;
    do
    {
      v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 4uLL);
      v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 4uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 4uLL);
      v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 4uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (_QWORD *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1C976C888(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xF000F000F000F000);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xF000F000F000F000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 4uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 4uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 4uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xF000F000F000F000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C976CA30(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  uint16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  uint16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  uint16x4_t *v150;
  uint16x4_t *v151;
  uint16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 4uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 4uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 4uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 4uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 4uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 4uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 4uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 4uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 4uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 4uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 4uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 4uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 4uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 4uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 4uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 4uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 4uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 4uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v150 = (uint16x4_t *)((char *)v15 + v115);
      *v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v151 = (uint16x4_t *)((char *)v150 + v115);
      *v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v152 = (uint16x4_t *)((char *)v151 + v115);
      *v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v109 -= 4;
      v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C976CEA8(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int8x16_t v113;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  _OWORD *v125;
  uint64_t v126;
  int v127;
  int16x8_t v128;
  int16x8_t v130;
  int8x16_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v147;
  int16x4_t v148;
  int v149;
  BOOL v150;
  int16x8_t v151;
  int16x8_t v152;
  uint16x4_t v154;
  int16x4_t v155;
  int16x4_t v156;
  int8x8_t v157;
  int16x4_t v163;
  int16x4_t v164;
  int16x4_t v165;
  int8x8_t v166;
  int16x4_t v172;
  int16x4_t v173;
  int16x4_t v174;
  int8x8_t v175;
  int16x4_t v181;
  int16x4_t v182;
  int16x4_t v183;
  int8x8_t v184;
  int16x4_t v190;
  int16x4_t v191;
  int16x4_t v192;
  int8x8_t v193;
  int16x4_t v199;
  int16x4_t v200;
  int16x4_t v201;
  int8x8_t v202;
  int16x4_t v208;
  int16x4_t v209;
  int16x4_t v210;
  int8x8_t v211;
  int16x4_t v216;
  int v217;
  uint64_t v218;
  int16x4_t v220;
  int16x4_t v221;
  int8x8_t v222;
  int32x4_t v227;
  int32x4_t v228;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            4uLL);
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            4uLL);
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            4uLL);
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            4uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            4uLL);
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             4uLL);
    v112 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v113 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    v125 = a7;
    v126 = a5;
    v127 = a2 + 1;
    v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             4uLL);
    do
    {
      _X22 = v126 + v15;
      v130 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 4uLL);
      v131 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 4uLL);
      v132 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 2uLL);
      v133 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 4uLL);
      v134 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 6uLL);
      v135 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 8uLL);
      v136 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xAuLL);
      v137 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xCuLL);
      v138 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xEuLL);
      v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v130.i8, *(int16x4_t *)v12.i8, 0);
      v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v132, *(int16x4_t *)v12.i8, 1), v130, *(int16x4_t *)v12.i8, 0);
      v141 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      v142 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      v96 = v111;
      v111 = v128;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v147 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v133, *(int16x4_t *)v12.i8, 2), v134, *(int16x4_t *)v12.i8, 3), v135, v12, 4), v136, v12, 5), v137, v12, 6), v138, v12,
               7);
      v148 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v135.i8, v12, 4), *(int16x4_t *)v136.i8, v12, 5), *(int16x4_t *)v137.i8, v12, 6), *(int16x4_t *)v138.i8,
                 v12,
                 7),
               4uLL);
      *(uint16x4_t *)v133.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v141, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v111.i8,
                                                   v13,
                                                   6),
                                                 v148,
                                                 v13,
                                                 7),
                                               8uLL),
                                 (uint16x4_t)0xF000F000F000F000);
      v133.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                                                        vshrn_n_s32(v147, 4uLL),
                                                        v13,
                                                        7),
                                                      8uLL),
                                        (uint16x4_t)0xF000F000F000F000);
      v128 = vshrn_high_n_s32(v148, v147, 4uLL);
      *v125 = v133;
      --v127;
      v126 += v9;
      v125 = (_OWORD *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    v149 = result - 8;
    v14 += 16;
    v15 += 16;
    v150 = result > 0xF;
    result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    v151 = xmmword_1C9832610[(a3 & 3) - 1];
    v152 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v155 = (int16x4_t)vshr_n_u16(v154, 4uLL);
    v156 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v157 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             4uLL);
    v164 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v165 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v166 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             4uLL);
    v173 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v174 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v175 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             4uLL);
    v182 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v183 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v184 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             4uLL);
    v191 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v192 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v193 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             4uLL);
    v200 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v201 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v202 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             4uLL);
    v209 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v210 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v211 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             4uLL);
    v217 = a2 + 1;
    v218 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      v220 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 4uLL);
      v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 4uLL);
      v222 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 4uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 2uLL), *(int16x4_t *)v151.i8, 1), v220, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v221,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v221, v222, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v221, v222, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v221, v222, 6uLL),
               v151,
               7);
      v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v172, *(int16x4_t *)v152.i8, 1), v163, *(int16x4_t *)v152.i8, 0), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      v163 = v172;
      v172 = v181;
      v181 = v190;
      v190 = v199;
      v199 = v208;
      v208 = v216;
      v216 = vshrn_n_s32(v227, 4uLL);
      --v217;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v228, v216, v152, 7), 8uLL), (uint16x4_t)0xF000F000F000F000);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

uint64_t sub_1C976D7A0(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int16x8_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  v11 = (char *)a5 + 2 * a4;
  do
  {
    v12 = 0;
    v13 = 0;
    v14 = a2 + 2;
    do
    {
      v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFFCFFFCFFFCFFFCLL, 0xFFFCFFFCFFFCFFFCLL)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFFCFFFCFFFCFFFCLL, 0xFFFCFFFCFFFCFFFCLL)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    v16 = result - 8;
    v9 += 16;
    v11 += 16;
    v17 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(*a5, 2uLL) & 0xFFFCFFFCFFFCFFFCLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(_QWORD *)&vshr_n_u16(v19, 2uLL) & 0xFFFCFFFCFFFCFFFCLL), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1C976D888(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int v34;
  BOOL v35;
  int16x8_t v36;
  int v38;
  int16x4_t v39;
  int16x4_t v40;
  int8x8_t v42;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7),
                                 4uLL),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v31, 4uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    v34 = result - 8;
    ++v11;
    v35 = result > 0xF;
    result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    v36 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    v38 = a2 + 1;
    do
    {
      v39 = (int16x4_t)vshr_n_u16(*_X11, 4uLL);
      v40 = (int16x4_t)vshr_n_u16(_X11[1], 4uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      v42 = (int8x8_t)vshr_n_u16(_X11[2], 4uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7),
                4uLL),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

unint64_t sub_1C976DA30(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  int16x4_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v35;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v47;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  __int8 *v55;
  int v56;
  int16x4_t *v57;
  char *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int v79;
  BOOL v80;
  int16x8_t v81;
  uint16x4_t v83;
  int16x4_t v84;
  uint16x4_t v86;
  int16x4_t v87;
  uint16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  uint16x4_t v94;
  int16x4_t v95;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v100;
  int16x4_t v101;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint16x4_t v123;
  uint16x4_t v124;
  uint16x4_t v126;
  uint16x4_t v127;
  uint16x4_t v129;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x4_t *v150;
  int16x4_t *v151;
  int16x4_t *v152;
  uint64_t v153;

  v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v15 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = a2 + 2;
  v11 = 4 * a6;
  v12 = &a5->i8[20 * a4];
  v13 = &a5->i8[18 * a4];
  v14 = &a5->i8[10 * a4];
  v15 = a7;
  v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    v22 = (int16x8_t)vshrq_n_u16(v19, 4uLL);
    v23 = (int16x8_t)vshrq_n_u16(v21, 4uLL);
    _X25 = &a5->i8[-2 * a4];
    v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    v30 = v29;
    _X28 = &a5->i8[4 * a4];
    v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    v33 = v32;
    _X30 = &a5->i8[6 * a4];
    v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    v41 = (int16x8_t)vshrq_n_u16(v26, 4uLL);
    v42 = (int16x8_t)vshrq_n_u16(*a5, 4uLL);
    v43 = (int16x8_t)vshrq_n_u16(v30, 4uLL);
    v44 = (int16x8_t)vshrq_n_u16(v33, 4uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    v47 = (int16x8_t)vshrq_n_u16(v35, 4uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v50 = v14;
    v51 = v13;
    v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    v55 = v12;
    v56 = v10;
    v57 = a7;
    v58 = (char *)a7 + 2 * a6;
    do
    {
      v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      v22 = v41;
      v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      v43 = v47;
      v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      v23 = v42;
      v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 4uLL);
      __asm { PRFM            #0, [X9] }
      v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 4uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 4uLL),
                               (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 4uLL),
                                       (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    v79 = result - 8;
    v7 += 16;
    v80 = result > 0xF;
    result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    v81 = xmmword_1C9832610[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    v83 = *(uint16x4_t *)_X9;
    _X9 = (_QWORD *)((char *)_X9 + 14);
    v84 = (int16x4_t)vshr_n_u16(v83, 4uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    v86 = *(uint16x4_t *)_X10;
    _X10 = (_QWORD *)((char *)_X10 + 14);
    v87 = (int16x4_t)vshr_n_u16(v86, 4uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    v89 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v90 = (int16x4_t)vshr_n_u16(v89, 4uLL);
    _X12 = &a5->i8[14];
    v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    v94 = *(uint16x4_t *)_X14;
    _X14 = (_QWORD *)((char *)_X14 + 14);
    v95 = (int16x4_t)vshr_n_u16(v94, 4uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    v97 = *(uint16x4_t *)_X15;
    _X15 = (_QWORD *)((char *)_X15 + 14);
    v98 = (int16x4_t)vshr_n_u16(v97, 4uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    v100 = *(uint16x4_t *)_X16;
    _X16 = (_QWORD *)((char *)_X16 + 14);
    v101 = (int16x4_t)vshr_n_u16(v100, 4uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v109 = a2 + 4;
    v110 = 3 * a4;
    v111 = 8 * a4;
    v112 = 22 * a4;
    v113 = 12 * a4;
    v114 = 10 * a4;
    v115 = 2 * a6;
    v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      v123 = *(uint16x4_t *)_X2;
      _X2 = (_QWORD *)((char *)_X2 + 14);
      v124 = v123;
      __asm { PRFM            #0, [X2] }
      v126 = *(uint16x4_t *)_X3;
      _X3 = (_QWORD *)((char *)_X3 + 14);
      v127 = v126;
      __asm { PRFM            #0, [X3] }
      v129 = *(uint16x4_t *)_X5;
      _X5 = (_QWORD *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
      v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      v84 = v95;
      v95 = (int16x4_t)vshr_n_u16(v124, 4uLL);
      v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      v87 = v98;
      v98 = (int16x4_t)vshr_n_u16(v127, 4uLL);
      v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      v90 = v101;
      v101 = (int16x4_t)vshr_n_u16(v129, 4uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *v15 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      v150 = (int16x4_t *)((char *)v15 + v115);
      *v150 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      v151 = (int16x4_t *)((char *)v150 + v115);
      *v151 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      v152 = (int16x4_t *)((char *)v151 + v115);
      *v152 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1C976DEA8(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v31;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int8x16_t v113;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t *v125;
  uint64_t v126;
  int v127;
  int16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int16x8_t v134;
  int8x16_t v135;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x8_t v146;
  int32x4_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int32x4_t v150;
  int v151;
  BOOL v152;
  int16x8_t v153;
  int16x8_t v154;
  uint16x4_t v156;
  int16x4_t v157;
  int16x4_t v158;
  int8x8_t v159;
  int16x4_t v165;
  int16x4_t v166;
  int16x4_t v167;
  int8x8_t v168;
  int16x4_t v174;
  int16x4_t v175;
  int16x4_t v176;
  int8x8_t v177;
  int16x4_t v183;
  int16x4_t v184;
  int16x4_t v185;
  int8x8_t v186;
  int16x4_t v192;
  int16x4_t v193;
  int16x4_t v194;
  int8x8_t v195;
  int16x4_t v201;
  int16x4_t v202;
  int16x4_t v203;
  int8x8_t v204;
  int16x4_t v210;
  int16x4_t v211;
  int16x4_t v212;
  int8x8_t v213;
  int16x4_t v218;
  int v219;
  uint64_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int16x4_t v224;
  int16x4_t v225;
  int8x8_t v226;
  int32x4_t v231;
  int32x4_t v232;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v16 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = v8 - 6;
  v15 = 8 * a4;
  v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    v18 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v19 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            4uLL);
    v37 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v38 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            4uLL);
    v52 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v53 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            4uLL);
    v67 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v68 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            4uLL);
    v82 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v83 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            4uLL);
    v97 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v98 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             4uLL);
    v112 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    v113 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    v125 = (int16x8_t *)a7;
    v126 = a5;
    v127 = a2 + 1;
    v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             4uLL);
    do
    {
      v129.i64[0] = 0x38000000380000;
      v129.i64[1] = 0x38000000380000;
      v130.i64[0] = 0x38000000380000;
      v130.i64[1] = 0x38000000380000;
      v131 = vmlal_lane_s16(vmlal_lane_s16(v129, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      v132 = vmlal_high_lane_s16(vmlal_high_lane_s16(v130, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      v36 = v51;
      v51 = v66;
      v66 = v81;
      v81 = v96;
      _X22 = v126 + v15;
      v96 = v111;
      v134 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 4uLL);
      v135 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 4uLL);
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      v111 = v128;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v140 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 2uLL);
      v141 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 4uLL);
      v142 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 6uLL);
      v143 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 8uLL);
      v144 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v12.i8, 1), v134, *(int16x4_t *)v12.i8, 0);
      v145 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v141.i8, *(int16x4_t *)v12.i8, 2);
      v146 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xAuLL);
      v147 = vmlal_high_lane_s16(v144, v141, *(int16x4_t *)v12.i8, 2);
      v148 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xCuLL);
      v149 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xEuLL);
      v150 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v147, v142, *(int16x4_t *)v12.i8, 3), v143, v12, 4), v146, v12, 5), v148, v12, 6), v149, v12, 7);
      *(int16x4_t *)v146.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v145, *(int16x4_t *)v142.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v143.i8, v12, 4), *(int16x4_t *)v146.i8, v12, 5), *(int16x4_t *)v148.i8, v12, 6), *(int16x4_t *)v149.i8, v12, 7), 4uLL);
      *(int16x4_t *)v131.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v131, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6), *(int16x4_t *)v146.i8,
                                  v13,
                                  7),
                                6uLL);
      v128 = vshrn_high_n_s32(*(int16x4_t *)v146.i8, v150, 4uLL);
      *v125 = vshrn_high_n_s32(*(int16x4_t *)v131.i8, vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v132, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                  vshrn_n_s32(v150, 4uLL),
                  v13,
                  7),
                6uLL);
      --v127;
      v126 += v9;
      v125 = (int16x8_t *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    v151 = result - 8;
    v14 += 16;
    v15 += 16;
    v152 = result > 0xF;
    result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    v153 = xmmword_1C9832610[(a3 & 3) - 1];
    v154 = xmmword_1C9832610[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    v157 = (int16x4_t)vshr_n_u16(v156, 4uLL);
    v158 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v159 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7),
             4uLL);
    v166 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v167 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v168 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7),
             4uLL);
    v175 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v176 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v177 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7),
             4uLL);
    v184 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v185 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v186 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7),
             4uLL);
    v193 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v194 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v195 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7),
             4uLL);
    v202 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v203 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v204 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7),
             4uLL);
    v211 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    v212 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    v213 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7),
             4uLL);
    v219 = a2 + 1;
    v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 4uLL);
      v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 4uLL);
      v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 4uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      v165 = v174;
      v174 = v183;
      v183 = v192;
      v192 = v201;
      v201 = v210;
      v210 = v218;
      v218 = vshrn_n_s32(v231, 4uLL);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

uint64_t sub_1C976E794(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int16x8_t v13;
  int16x8_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;

  v8 = 4 * a5;
  v9 = 4 * a3;
  v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v11 = (char *)a6 + 2 * a5;
  v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  v15 = (char *)a8 + 2 * a7;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 1uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 1uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    v21 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xF000F000F000F000;
    v24.i64[1] = 0xF000F000F000F000;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 1uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(_QWORD *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (_QWORD *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1C976E8DC(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, _QWORD *a8)
{
  const float *v8;
  int16x8_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint16x8_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint16x8_t v22;
  int v23;
  BOOL v24;
  int16x4_t v25;
  int v26;
  uint16x8_t v27;
  uint16x8_t v28;

  v9 = (int16x8_t)vld1q_dup_f32(a4);
  v8 = a4 + 1;
  v10 = (int16x4_t)vld1_dup_f32(v8);
  v11 = vdupq_n_s32(a3);
  v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  v13 = vnegq_s32(v11);
  v14 = 4 * a5;
  v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xF000F000F000F000;
  v17.i64[1] = 0xF000F000F000F000;
  v18 = (char *)a8 + 2 * a7;
  do
  {
    v19 = 0;
    v20 = 0;
    v21 = a2 + 2;
    do
    {
      v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    v23 = result - 8;
    v16 += 16;
    v18 += 16;
    v24 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v26 = a2 + 2;
    v27.i64[0] = 0xF000F000F000F000;
    v27.i64[1] = 0xF000F000F000F000;
    do
    {
      v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(_QWORD *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (_QWORD *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1C976EA28(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, _QWORD *a11)
{
  const float *v11;
  int16x8_t v12;
  _QWORD *v13;
  const float *v14;
  int16x8_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t *v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int16x8_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int16x8_t v32;
  int v33;
  BOOL v34;
  int16x4_t v35;
  int16x4_t v36;
  int v37;
  int16x8_t v38;
  int16x8_t v39;

  v12 = (int16x8_t)vld1q_dup_f32(a4);
  v11 = a4 + 1;
  v13 = a11;
  v15 = (int16x8_t)vld1q_dup_f32(a7);
  v14 = a7 + 1;
  v16 = (int16x4_t)vld1_dup_f32(v11);
  v17 = (int16x4_t)vld1_dup_f32(v14);
  v18 = a9;
  v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  v20 = 4 * a8;
  v21 = vdupq_n_s32(~a3);
  v22 = 4 * a5;
  v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v24 = (char *)a9 + 2 * a8;
  v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  v27 = (char *)a11 + 2 * a10;
  do
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = a2 + 2;
    do
    {
      v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    v34 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v37 = a2 + 2;
    v38.i64[0] = 0xF000F000F000F000;
    v38.i64[1] = 0xF000F000F000F000;
    do
    {
      v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *v13 = v39.i64[0];
      v37 -= 2;
      *(_QWORD *)((char *)v13 + 2 * a10) = v39.i64[1];
      v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      v13 = (_QWORD *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

uint64_t sub_1C976EBF4(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 8uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C976ED44(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  uint16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  uint16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 8uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 8uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 8uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 8uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 8uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C976EFE4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  _OWORD *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v70;
  int16x8_t v71;
  int v72;
  BOOL v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v77;
  int16x8_t v78;
  int16x4_t v83;
  int16x8_t v84;
  int16x4_t v90;
  int16x8_t v91;
  int16x4_t v96;
  int v97;
  int16x8_t v99;
  int32x4_t v104;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3));
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 8uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3));
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3));
    v53 = a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 8uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 8uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v70 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3);
      v71 = (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v52.i8, v12, 2), vmovn_s32((int32x4_t)v70), v12, 3), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v52, v12, 2), vmovn_s32((int32x4_t)v71), v12, 3), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v52 = vuzp1q_s16(v70, v71);
      *v53 = v60;
      --v55;
      v54 += v9;
      v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v72 = result - 8;
    v13 += 16;
    v14 += 16;
    v73 = result > 0xF;
    result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    v74 = qword_1C9832640[2 * (a3 & 7) - 2];
    v75 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 8uLL);
    v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v83 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3));
    v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 8uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v90 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 8uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3));
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 8uLL);
    v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v96 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3));
    v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 8uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      v83 = v90;
      v90 = v96;
      v96 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 8uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3));
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

uint64_t sub_1C976F388(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v27 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v24.i8, v10, 1), *(int16x4_t *)v15.i8, v10, 0);
      v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v24, v10, 1), v15, v10, 0), v25, v10, 2), v26, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vmovn_s32(vmlal_lane_s16(vmlal_lane_s16(v27, *(int16x4_t *)v25.i8, v10, 2), *(int16x4_t *)v26.i8, v10, 3)), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vmovn_s32(v28), (int16x4_t)0xE000E000E000E000);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 8uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3)), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C976F4D8(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  int16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  int16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 8uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 8uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vmovn_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3)), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_lane_s16(v46, v25, v11, 3)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vmovn_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3)), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 8uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 8uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 8uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vadd_s16(vmovn_s32(vmlal_lane_s16(v76, v61, v58, 3)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vmovn_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3)), (int16x4_t)0xE000E000E000E000);
      v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C976F778(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int16x8_t v71;
  int16x8_t v72;
  int v73;
  BOOL v74;
  int16x4_t v75;
  int16x4_t v76;
  int16x4_t v78;
  int16x8_t v79;
  int16x4_t v84;
  int16x8_t v85;
  int16x4_t v91;
  int16x8_t v92;
  int16x4_t v97;
  int v98;
  int32x4_t v99;
  int16x8_t v101;
  int32x4_t v106;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3));
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 8uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3));
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3));
    v53 = (int16x8_t *)a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 8uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 8uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v71 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3);
      v72 = (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      v52 = vuzp1q_s16(v71, v72);
      *v53 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), vmovn_s32((int32x4_t)v71), v12, 3), 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vmovn_s32((int32x4_t)v72), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v73 = result - 8;
    v13 += 16;
    v14 += 16;
    v74 = result > 0xF;
    result = (result - 8);
  }
  while (v74);
  if (v73)
  {
LABEL_9:
    v75 = qword_1C9832640[2 * (a3 & 7) - 2];
    v76 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v78 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 8uLL);
    v79 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v84 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v79.i8, v75, 1), v78, v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 4uLL), v75, 2), v79, v75, 3));
    v85 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 8uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v91 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v85.i8, v75, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 8uLL), v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 4uLL), v75, 2), v85, v75, 3));
    *(uint16x4_t *)v85.i8 = vshr_n_u16(*_X13, 8uLL);
    v92 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v97 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, v75, 1), *(int16x4_t *)v85.i8, v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v75, 2), v92, v75, 3));
    v98 = a2 + 1;
    do
    {
      v99.i64[0] = 0x38000000380000;
      v99.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      v101 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 8uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v106 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v99, v84, v76, 0), v91, v76, 1), v97, v76, 2);
      v84 = v91;
      v91 = v97;
      v97 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, v75, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 8uLL), v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL), v75, 2), v101, v75, 3));
      --v98;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v106, v97, v76, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v98 > 1);
  }
  return result;
}

uint64_t sub_1C976FB10(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 7uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C976FC60(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  uint16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  uint16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 7uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 7uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 7uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 7uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 7uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C976FF00(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  _OWORD *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v70;
  int16x4_t v71;
  int v72;
  BOOL v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v77;
  int16x8_t v78;
  int16x4_t v83;
  int16x8_t v84;
  int16x4_t v90;
  int16x8_t v91;
  int16x4_t v96;
  int v97;
  int16x8_t v99;
  int32x4_t v104;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 1uLL);
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 7uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 1uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 1uLL);
    v53 = a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 7uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 7uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v70 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      v71 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 1uLL);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v42.i8, v12, 2), v71, v12, 3), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v42, v12, 2), vshrn_n_s32(v70, 1uLL), v12, 3), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v52 = vshrn_high_n_s32(v71, v70, 1uLL);
      *v53 = v60;
      --v55;
      v54 += v9;
      v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v72 = result - 8;
    v13 += 16;
    v14 += 16;
    v73 = result > 0xF;
    result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    v74 = qword_1C9832640[2 * (a3 & 7) - 2];
    v75 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 7uLL);
    v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v83 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3), 1uLL);
    v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 7uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v90 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 7uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3), 1uLL);
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 7uLL);
    v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3), 1uLL);
    v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 7uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      v83 = v90;
      v90 = v96;
      v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 7uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3), 1uLL);
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

uint64_t sub_1C97702B0(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v27, 1uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 7uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C9770400(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  int16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  int16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 7uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 7uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 7uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 7uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 7uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C97706A0(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v71;
  int16x4_t v72;
  int32x4_t v73;
  int v74;
  BOOL v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x4_t v79;
  int16x8_t v80;
  int16x4_t v85;
  int16x8_t v86;
  int16x4_t v92;
  int16x8_t v93;
  int16x4_t v98;
  int v99;
  int32x4_t v100;
  int16x8_t v102;
  int32x4_t v107;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 1uLL);
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 7uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 1uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 1uLL);
    v53 = (int16x8_t *)a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 7uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 7uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v71 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      v72 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 1uLL);
      v73 = vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), v72, v12, 3);
      v52 = vshrn_high_n_s32(v72, v71, 1uLL);
      *v53 = vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vshrn_n_s32(v71, 1uLL), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v74 = result - 8;
    v13 += 16;
    v14 += 16;
    v75 = result > 0xF;
    result = (result - 8);
  }
  while (v75);
  if (v74)
  {
LABEL_9:
    v76 = qword_1C9832640[2 * (a3 & 7) - 2];
    v77 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v79 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 7uLL);
    v80 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v85 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, v76, 1), v79, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), v76, 2), v80, v76, 3), 1uLL);
    v86 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 7uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v92 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v86.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 7uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL), v76, 2), v86, v76, 3), 1uLL);
    *(uint16x4_t *)v86.i8 = vshr_n_u16(*_X13, 7uLL);
    v93 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v76, 1), *(int16x4_t *)v86.i8, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76, 2), v93, v76, 3), 1uLL);
    v99 = a2 + 1;
    do
    {
      v100.i64[0] = 0x38000000380000;
      v100.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      v102 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 7uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v107 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v100, v85, v77, 0), v92, v77, 1), v98, v77, 2);
      v85 = v92;
      v92 = v98;
      v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v102.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 7uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), v76, 2), v102, v76, 3), 1uLL);
      --v99;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v107, v98, v77, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v99 > 1);
  }
  return result;
}

uint64_t sub_1C9770A44(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t *v15;
  _OWORD *v16;
  int v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int v38;
  BOOL v39;
  int16x4_t v40;
  int v41;
  uint64_t v42;
  int16x8_t v43;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = vdupq_lane_s16(v10, 0);
  v12 = vdupq_lane_s16(v10, 3);
  v13 = vdupq_lane_s16(v10, 1);
  v14 = vdupq_lane_s16(v10, 2);
  v15 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v16 = a7;
    _X15 = v15;
    v18 = a2 + 1;
    do
    {
      v19 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      v20 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      v28 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 8uLL);
      v30 = vmlaq_s16(vmulq_s16(v19, v11), (int16x8_t)vextq_s8((int8x16_t)v19, v20, 0xCuLL), v12);
      v31 = (uint16x8_t)vmulq_s16(v28, v13);
      v32 = (uint16x8_t)vmulq_s16(v29, v14);
      v33 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v31.i8);
      v34 = (int32x4_t)vaddl_high_u16(v31, v32);
      v35 = vaddw_s16(v33, *(int16x4_t *)v30.i8);
      v36 = vaddw_high_s16(v34, v30);
      *(uint16x4_t *)v34.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v35, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v34.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v36, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *v16 = v34;
      --v18;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    ++_X4;
    v38 = result - 8;
    ++v15;
    v39 = result > 0xF;
    result = (result - 8);
  }
  while (v39);
  if (v38)
  {
LABEL_9:
    v40 = qword_1C9832640[2 * (a3 & 7) - 2];
    v41 = a2 + 1;
    v42 = v7 - 4;
    do
    {
      v43 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v42];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v43.i8, v40, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 6uLL), v40, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL), v40, 2), v43, v40, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      --v41;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v41 > 1);
  }
  return result;
}

unint64_t sub_1C9770BA4(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint16x8_t *v16;
  __int8 *v17;
  __int8 *v18;
  __int8 *v19;
  uint16x4_t *v20;
  uint16x8_t v22;
  int16x8_t v23;
  int16x8_t v29;
  uint16x8_t v32;
  __int8 *v33;
  __int8 *v34;
  __int8 *v35;
  int16x8_t v36;
  uint16x8_t *v38;
  int v39;
  uint16x4_t *v40;
  char *v41;
  int16x8_t v42;
  uint16x8_t v46;
  int16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int v62;
  BOOL v63;
  uint16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v69;
  uint16x4_t v72;
  int16x4_t v73;
  int v75;
  uint16x4_t v80;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v20 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = vdupq_lane_s16(v11, 0);
  v13 = vdupq_lane_s16(v11, 3);
  v14 = vdupq_lane_s16(v11, 1);
  v15 = vdupq_lane_s16(v11, 2);
  v16 = &_X4[a4];
  v17 = &_X4->i8[4 * a4];
  v18 = &_X4->i8[14 * a4];
  v19 = &_X4->i8[6 * a4];
  v20 = a7;
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v22 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v23 = (int16x8_t)vshrq_n_u16(v22, 6uLL);
    __asm { PRFM            #0, [X20] }
    v29 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v32 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v33 = v19;
    v34 = v18;
    v35 = v17;
    v36 = (int16x8_t)vshrq_n_u16(v32, 6uLL);
    __asm { PRFM            #0, [X23] }
    v38 = v16;
    v39 = a2 + 2;
    v40 = a7;
    v41 = (char *)a7 + 2 * a6;
    do
    {
      v42 = vmulq_s16(v23, v12);
      v23 = v36;
      _X27 = (uint64_t)&v35[v10 + 30];
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v33[v10 + 30];
      v46 = (uint16x8_t)vmulq_s16(v29, v14);
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v35[v10], 6uLL);
      v48 = (uint16x8_t)vmulq_s16(v36, v15);
      v49 = (uint16x8_t)vmulq_s16(v36, v14);
      v36 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v33[v10], 6uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v34[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      v57 = vmlaq_s16(v42, v47, v13);
      v58 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v57.i8);
      v59 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v46, v48), v57);
      v60 = vmlaq_s16(vmulq_s16(v29, v12), v36, v13);
      v61 = (uint16x8_t)vmulq_s16(v47, v15);
      *(uint16x4_t *)v58.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v58, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v58.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v59, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)v40[v10 / 8].i8 = v58;
      *(uint16x4_t *)v59.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v60.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v59.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v49), v60), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)&v41[v10] = v59;
      v41 += v9;
      v40 = (uint16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      v38 = (uint16x8_t *)((char *)v38 + v8);
      v35 += v8;
      v34 += v8;
      v33 += v8;
      v29 = v47;
    }
    while (v39 > 2);
    v20 += 2;
    ++_X4;
    v62 = result - 8;
    v10 += 16;
    v63 = result > 0xF;
    result = (result - 8);
  }
  while (v63);
  if (v62)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v65 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v66 = qword_1C9832640[2 * v7 - 2];
    v67 = (int16x4_t)vshr_n_u16(v65, 6uLL);
    __asm { PRFM            #0, [X12] }
    v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v72 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v73 = (int16x4_t)vshr_n_u16(v72, 6uLL);
    __asm { PRFM            #0, [X11] }
    v75 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v80 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v82 = vmlal_lane_s16(vmull_lane_s16(v69, v66, 1), v67, v66, 0);
      v83 = vmlal_lane_s16(vmull_lane_s16(v73, v66, 1), v69, v66, 0);
      v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
      v84 = vmlal_lane_s16(v82, v73, v66, 2);
      v67 = v73;
      v73 = (int16x4_t)vshr_n_u16(v80, 6uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v20 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v84, v69, v66, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)((char *)v20 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v83, v69, v66, 2), v73, v66, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v20 = (uint16x4_t *)((char *)v20 + v9);
      v75 -= 2;
    }
    while (v75 > 2);
  }
  return result;
}

uint64_t sub_1C9770E58(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  int16x8_t v21;
  int8x16_t v22;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int16x8_t v36;
  int16x8_t v38;
  int8x16_t v39;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  _OWORD *v63;
  uint64_t v64;
  int v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t v69;
  int8x16_t v70;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int v82;
  BOOL v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v87;
  int16x8_t v88;
  int16x4_t v93;
  int16x8_t v94;
  int16x4_t v100;
  int16x8_t v101;
  int16x4_t v106;
  int v107;
  int16x8_t v109;
  int32x4_t v114;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = vdupq_lane_s16(v11, 0);
  v14 = vdupq_lane_s16(v11, 3);
  v15 = vdupq_lane_s16(v11, 1);
  v16 = vdupq_lane_s16(v11, 2);
  v17 = 12 * a4 - 4;
  v18 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v21 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    v22 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 4uLL);
    v32 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 8uLL);
    v33 = vmlaq_s16(vmulq_s16(v21, v13), (int16x8_t)vextq_s8((int8x16_t)v21, v22, 0xCuLL), v14);
    v34 = (uint16x8_t)vmulq_s16(v31, v15);
    v35 = (uint16x8_t)vmulq_s16(v32, v16);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8), *(int16x4_t *)v33.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v34, v35), v33), 2uLL);
    _X7 = _X11 - 4;
    v38 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 6uLL);
    v39 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 8uLL);
    v47 = vmlaq_s16(vmulq_s16(v38, v13), (int16x8_t)vextq_s8((int8x16_t)v38, v39, 0xCuLL), v14);
    v48 = (uint16x8_t)vmulq_s16(v45, v15);
    v49 = (uint16x8_t)vmulq_s16(v46, v16);
    v50 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v47.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v48, v49), v47), 2uLL);
    v51 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    v52 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v57 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 4uLL);
    v58 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 8uLL);
    v59 = vmlaq_s16(vmulq_s16(v51, v13), (int16x8_t)vextq_s8((int8x16_t)v51, v52, 0xCuLL), v14);
    v60 = (uint16x8_t)vmulq_s16(v57, v15);
    v61 = (uint16x8_t)vmulq_s16(v58, v16);
    v62 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v60.i8), *(int16x4_t *)v59.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v60, v61), v59), 2uLL);
    v63 = a7;
    v64 = a5;
    v65 = a2 + 1;
    do
    {
      v66 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v50.i8, v12, 1), *(int16x4_t *)v36.i8, v12, 0);
      v67 = vmlal_high_lane_s16(vmull_high_lane_s16(v50, v12, 1), v36, v12, 0);
      v36 = v50;
      v50 = v62;
      _X21 = v64 + v18;
      v69 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 - 4), 6uLL);
      v70 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 + 12), 6uLL);
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v64 + v17;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v75 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL);
      v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
      v77 = vmlaq_s16(vmulq_s16(v69, v13), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v14);
      v78 = (uint16x8_t)vmulq_s16(v75, v15);
      v79 = (uint16x8_t)vmulq_s16(v76, v16);
      v80 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v79.i8, *(uint16x4_t *)v78.i8);
      v81 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v78, v79), v77);
      *(int16x4_t *)v77.i8 = vshrn_n_s32(vaddw_s16(v80, *(int16x4_t *)v77.i8), 2uLL);
      *(uint16x4_t *)v66.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v66, *(int16x4_t *)v50.i8, v12, 2), *(int16x4_t *)v77.i8, v12, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v66.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v67, v50, v12, 2), vshrn_n_s32(v81, 2uLL), v12, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v62 = vshrn_high_n_s32(*(int16x4_t *)v77.i8, v81, 2uLL);
      *v63 = v66;
      --v65;
      v64 += v9;
      v63 = (_OWORD *)((char *)v63 + v10);
    }
    while (v65 > 1);
    a7 += 2;
    _X11 += 16;
    v82 = result - 8;
    v17 += 16;
    v18 += 16;
    v83 = result > 0xF;
    result = (result - 8);
  }
  while (v83);
  if (v82)
  {
LABEL_9:
    v84 = qword_1C9832640[2 * (a3 & 7) - 2];
    v85 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v87 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 6uLL);
    v88 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v93 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v88.i8, v84, 1), v87, v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 4uLL), v84, 2), v88, v84, 3), 2uLL);
    v94 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 6uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v100 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v94.i8, v84, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 6uLL), v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 4uLL), v84, 2), v94, v84, 3), 2uLL);
    *(uint16x4_t *)v88.i8 = vshr_n_u16(*_X13, 6uLL);
    v101 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v106 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, v84, 1), *(int16x4_t *)v88.i8, v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL), v84, 2), v101, v84, 3), 2uLL);
    v107 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      v109 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 6uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v114 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v100, v85, 1), v93, v85, 0), v106, v85, 2);
      v93 = v100;
      v100 = v106;
      v106 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v109.i8, v84, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 6uLL), v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL), v84, 2), v109, v84, 3), 2uLL);
      --v107;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v114, v106, v85, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v107 > 1);
  }
  return result;
}

uint64_t sub_1C9771218(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t *v15;
  _OWORD *v16;
  int v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int v38;
  BOOL v39;
  int16x4_t v40;
  int v41;
  uint64_t v42;
  int16x8_t v43;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = vdupq_lane_s16(v10, 0);
  v12 = vdupq_lane_s16(v10, 3);
  v13 = vdupq_lane_s16(v10, 1);
  v14 = vdupq_lane_s16(v10, 2);
  v15 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v16 = a7;
    _X15 = v15;
    v18 = a2 + 1;
    do
    {
      v19 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      v20 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      v28 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      v29 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 8uLL);
      v30 = vmlaq_s16(vmulq_s16(v19, v11), (int16x8_t)vextq_s8((int8x16_t)v19, v20, 0xCuLL), v12);
      v31 = (uint16x8_t)vmulq_s16(v28, v13);
      v32 = (uint16x8_t)vmulq_s16(v29, v14);
      v33 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v31.i8);
      v34 = (int32x4_t)vaddl_high_u16(v31, v32);
      v35 = vaddw_s16(v33, *(int16x4_t *)v30.i8);
      v36 = vaddw_high_s16(v34, v30);
      *(int16x4_t *)v34.i8 = vadd_s16(vshrn_n_s32(v35, 2uLL), (int16x4_t)0xE000E000E000E000);
      v34.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v36, 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *v16 = v34;
      --v18;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    ++_X4;
    v38 = result - 8;
    ++v15;
    v39 = result > 0xF;
    result = (result - 8);
  }
  while (v39);
  if (v38)
  {
LABEL_9:
    v40 = qword_1C9832640[2 * (a3 & 7) - 2];
    v41 = a2 + 1;
    v42 = v7 - 4;
    do
    {
      v43 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v42];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v43.i8, v40, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 6uLL), v40, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL), v40, 2), v43, v40, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      --v41;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v41 > 1);
  }
  return result;
}

unint64_t sub_1C9771378(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint16x8_t *v16;
  __int8 *v17;
  __int8 *v18;
  __int8 *v19;
  int16x4_t *v20;
  uint16x8_t v22;
  int16x8_t v23;
  int16x8_t v29;
  uint16x8_t v32;
  __int8 *v33;
  __int8 *v34;
  __int8 *v35;
  int16x8_t v36;
  uint16x8_t *v38;
  int v39;
  int16x4_t *v40;
  char *v41;
  int16x8_t v42;
  uint16x8_t v46;
  int16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int v62;
  BOOL v63;
  uint16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v69;
  uint16x4_t v72;
  int16x4_t v73;
  int v75;
  uint16x4_t v80;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v20 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = vdupq_lane_s16(v11, 0);
  v13 = vdupq_lane_s16(v11, 3);
  v14 = vdupq_lane_s16(v11, 1);
  v15 = vdupq_lane_s16(v11, 2);
  v16 = &_X4[a4];
  v17 = &_X4->i8[4 * a4];
  v18 = &_X4->i8[14 * a4];
  v19 = &_X4->i8[6 * a4];
  v20 = a7;
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v22 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v23 = (int16x8_t)vshrq_n_u16(v22, 6uLL);
    __asm { PRFM            #0, [X20] }
    v29 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v32 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v33 = v19;
    v34 = v18;
    v35 = v17;
    v36 = (int16x8_t)vshrq_n_u16(v32, 6uLL);
    __asm { PRFM            #0, [X23] }
    v38 = v16;
    v39 = a2 + 2;
    v40 = a7;
    v41 = (char *)a7 + 2 * a6;
    do
    {
      v42 = vmulq_s16(v23, v12);
      v23 = v36;
      _X27 = (uint64_t)&v35[v10 + 30];
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v33[v10 + 30];
      v46 = (uint16x8_t)vmulq_s16(v29, v14);
      v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v35[v10], 6uLL);
      v48 = (uint16x8_t)vmulq_s16(v36, v15);
      v49 = (uint16x8_t)vmulq_s16(v36, v14);
      v36 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v33[v10], 6uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v34[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      v57 = vmlaq_s16(v42, v47, v13);
      v58 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v57.i8);
      v59 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v46, v48), v57);
      v60 = vmlaq_s16(vmulq_s16(v29, v12), v36, v13);
      v61 = (uint16x8_t)vmulq_s16(v47, v15);
      *(int16x4_t *)v58.i8 = vadd_s16(vshrn_n_s32(v58, 2uLL), (int16x4_t)0xE000E000E000E000);
      v58.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v59, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v40[v10 / 8].i8 = v58;
      *(int16x4_t *)v59.i8 = vadd_s16(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v60.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
      v59.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v49), v60), 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v41[v10] = v59;
      v41 += v9;
      v40 = (int16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      v38 = (uint16x8_t *)((char *)v38 + v8);
      v35 += v8;
      v34 += v8;
      v33 += v8;
      v29 = v47;
    }
    while (v39 > 2);
    v20 += 2;
    ++_X4;
    v62 = result - 8;
    v10 += 16;
    v63 = result > 0xF;
    result = (result - 8);
  }
  while (v63);
  if (v62)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v65 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v66 = qword_1C9832640[2 * v7 - 2];
    v67 = (int16x4_t)vshr_n_u16(v65, 6uLL);
    __asm { PRFM            #0, [X12] }
    v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v72 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v73 = (int16x4_t)vshr_n_u16(v72, 6uLL);
    __asm { PRFM            #0, [X11] }
    v75 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v80 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v82 = vmlal_lane_s16(vmull_lane_s16(v69, v66, 1), v67, v66, 0);
      v83 = vmlal_lane_s16(vmull_lane_s16(v73, v66, 1), v69, v66, 0);
      v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
      v84 = vmlal_lane_s16(v82, v73, v66, 2);
      v67 = v73;
      v73 = (int16x4_t)vshr_n_u16(v80, 6uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v20 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v84, v69, v66, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v20 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v83, v69, v66, 2), v73, v66, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      v20 = (int16x4_t *)((char *)v20 + v9);
      v75 -= 2;
    }
    while (v75 > 2);
  }
  return result;
}

uint64_t sub_1C977162C(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  int16x8_t v21;
  int8x16_t v22;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int16x8_t v36;
  int16x8_t v38;
  int8x16_t v39;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  int16x8_t *v63;
  uint64_t v64;
  int v65;
  int16x8_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  uint16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int v86;
  BOOL v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v91;
  int16x8_t v92;
  int16x4_t v97;
  int16x8_t v98;
  int16x4_t v104;
  int16x8_t v105;
  int16x4_t v110;
  int v111;
  int32x4_t v112;
  int16x8_t v114;
  int32x4_t v119;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = vdupq_lane_s16(v11, 0);
  v14 = vdupq_lane_s16(v11, 3);
  v15 = vdupq_lane_s16(v11, 1);
  v16 = vdupq_lane_s16(v11, 2);
  v17 = 12 * a4 - 4;
  v18 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v21 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    v22 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v31 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 4uLL);
    v32 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 8uLL);
    v33 = vmlaq_s16(vmulq_s16(v21, v13), (int16x8_t)vextq_s8((int8x16_t)v21, v22, 0xCuLL), v14);
    v34 = (uint16x8_t)vmulq_s16(v31, v15);
    v35 = (uint16x8_t)vmulq_s16(v32, v16);
    v36 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8), *(int16x4_t *)v33.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v34, v35), v33), 2uLL);
    _X7 = _X11 - 4;
    v38 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 6uLL);
    v39 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v45 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 4uLL);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 8uLL);
    v47 = vmlaq_s16(vmulq_s16(v38, v13), (int16x8_t)vextq_s8((int8x16_t)v38, v39, 0xCuLL), v14);
    v48 = (uint16x8_t)vmulq_s16(v45, v15);
    v49 = (uint16x8_t)vmulq_s16(v46, v16);
    v50 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v47.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v48, v49), v47), 2uLL);
    v51 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    v52 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v57 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 4uLL);
    v58 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 8uLL);
    v59 = vmlaq_s16(vmulq_s16(v51, v13), (int16x8_t)vextq_s8((int8x16_t)v51, v52, 0xCuLL), v14);
    v60 = (uint16x8_t)vmulq_s16(v57, v15);
    v61 = (uint16x8_t)vmulq_s16(v58, v16);
    v62 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v60.i8), *(int16x4_t *)v59.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v60, v61), v59), 2uLL);
    v63 = (int16x8_t *)a7;
    v64 = a5;
    v65 = a2 + 1;
    do
    {
      _X21 = v64 + v18;
      v67 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 - 4), 6uLL);
      v68 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 + 12), 6uLL);
      v69 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
      v70 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
      v71 = vmlaq_s16(vmulq_s16(v67, v13), (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL), v14);
      v72 = (uint16x8_t)vmulq_s16(v69, v15);
      v73 = (int32x4_t)vmulq_s16(v70, v16);
      v74 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v72.i8);
      v75 = (int32x4_t)vaddl_high_u16(v72, (uint16x8_t)v73);
      v73.i64[0] = 0x38000000380000;
      v73.i64[1] = 0x38000000380000;
      v76.i64[0] = 0x38000000380000;
      v76.i64[1] = 0x38000000380000;
      v77 = vmlal_lane_s16(vmlal_lane_s16(v73, *(int16x4_t *)v36.i8, v12, 0), *(int16x4_t *)v50.i8, v12, 1);
      v78 = vmlal_high_lane_s16(vmlal_high_lane_s16(v76, v36, v12, 0), v50, v12, 1);
      v36 = v50;
      v50 = v62;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v64 + v17;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v83 = vaddw_s16(v74, *(int16x4_t *)v71.i8);
      v84 = vaddw_high_s16(v75, v71);
      *(int16x4_t *)v83.i8 = vshrn_n_s32(v83, 2uLL);
      v85 = vmlal_lane_s16(vmlal_lane_s16(v77, *(int16x4_t *)v50.i8, v12, 2), *(int16x4_t *)v83.i8, v12, 3);
      v62 = vshrn_high_n_s32(*(int16x4_t *)v83.i8, v84, 2uLL);
      *v63 = vshrn_high_n_s32(vshrn_n_s32(v85, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v78, v50, v12, 2), vshrn_n_s32(v84, 2uLL), v12, 3), 6uLL);
      --v65;
      v64 += v9;
      v63 = (int16x8_t *)((char *)v63 + v10);
    }
    while (v65 > 1);
    a7 += 2;
    _X11 += 16;
    v86 = result - 8;
    v17 += 16;
    v18 += 16;
    v87 = result > 0xF;
    result = (result - 8);
  }
  while (v87);
  if (v86)
  {
LABEL_9:
    v88 = qword_1C9832640[2 * (a3 & 7) - 2];
    v89 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v91 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 6uLL);
    v92 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v97 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, v88, 1), v91, v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v88, 2), v92, v88, 3), 2uLL);
    v98 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 6uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v104 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v98.i8, v88, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 6uLL), v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v98, (int8x16_t)v98, 4uLL), v88, 2), v98, v88, 3), 2uLL);
    *(uint16x4_t *)v98.i8 = vshr_n_u16(*_X13, 6uLL);
    v105 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, v88, 1), *(int16x4_t *)v98.i8, v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 4uLL), v88, 2), v105, v88, 3), 2uLL);
    v111 = a2 + 1;
    do
    {
      v112.i64[0] = 0x38000000380000;
      v112.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      v114 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 6uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v119 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v112, v97, v89, 0), v104, v89, 1), v110, v89, 2);
      v97 = v104;
      v104 = v110;
      v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v114.i8, v88, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 6uLL), v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 4uLL), v88, 2), v114, v88, 3), 2uLL);
      --v111;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v119, v110, v89, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v111 > 1);
  }
  return result;
}

uint64_t sub_1C97719E0(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xF800F800F800F800);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 5uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C9771B30(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  uint16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  uint16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 5uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 5uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 5uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 5uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 5uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C9771DD0(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  _OWORD *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v70;
  int16x4_t v71;
  int v72;
  BOOL v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v77;
  int16x8_t v78;
  int16x4_t v83;
  int16x8_t v84;
  int16x4_t v90;
  int16x8_t v91;
  int16x4_t v96;
  int v97;
  int16x8_t v99;
  int32x4_t v104;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 3uLL);
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 5uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 3uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 3uLL);
    v53 = a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 5uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 5uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v70 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      v71 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 3uLL);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v42.i8, v12, 2), v71, v12, 3), 9uLL), (uint16x4_t)0xF800F800F800F800);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v42, v12, 2), vshrn_n_s32(v70, 3uLL), v12, 3), 9uLL), (uint16x4_t)0xF800F800F800F800);
      v52 = vshrn_high_n_s32(v71, v70, 3uLL);
      *v53 = v60;
      --v55;
      v54 += v9;
      v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v72 = result - 8;
    v13 += 16;
    v14 += 16;
    v73 = result > 0xF;
    result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    v74 = qword_1C9832640[2 * (a3 & 7) - 2];
    v75 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 5uLL);
    v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v83 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3), 3uLL);
    v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 5uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v90 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 5uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3), 3uLL);
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 5uLL);
    v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3), 3uLL);
    v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 5uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      v83 = v90;
      v90 = v96;
      v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 5uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3), 3uLL);
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 9uLL), (uint16x4_t)0xF800F800F800F800);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

uint64_t sub_1C9772180(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v27, 3uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 5uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C97722D0(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  int16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  int16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 5uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 5uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 5uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 5uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 5uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C9772570(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v71;
  int16x4_t v72;
  int32x4_t v73;
  int v74;
  BOOL v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x4_t v79;
  int16x8_t v80;
  int16x4_t v85;
  int16x8_t v86;
  int16x4_t v92;
  int16x8_t v93;
  int16x4_t v98;
  int v99;
  int32x4_t v100;
  int16x8_t v102;
  int32x4_t v107;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 3uLL);
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 5uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 3uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 3uLL);
    v53 = (int16x8_t *)a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 5uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 5uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v71 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      v72 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 3uLL);
      v73 = vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), v72, v12, 3);
      v52 = vshrn_high_n_s32(v72, v71, 3uLL);
      *v53 = vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vshrn_n_s32(v71, 3uLL), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v74 = result - 8;
    v13 += 16;
    v14 += 16;
    v75 = result > 0xF;
    result = (result - 8);
  }
  while (v75);
  if (v74)
  {
LABEL_9:
    v76 = qword_1C9832640[2 * (a3 & 7) - 2];
    v77 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v79 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 5uLL);
    v80 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v85 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, v76, 1), v79, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), v76, 2), v80, v76, 3), 3uLL);
    v86 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 5uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v92 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v86.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 5uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL), v76, 2), v86, v76, 3), 3uLL);
    *(uint16x4_t *)v86.i8 = vshr_n_u16(*_X13, 5uLL);
    v93 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v76, 1), *(int16x4_t *)v86.i8, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76, 2), v93, v76, 3), 3uLL);
    v99 = a2 + 1;
    do
    {
      v100.i64[0] = 0x38000000380000;
      v100.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      v102 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 5uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v107 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v100, v85, v77, 0), v92, v77, 1), v98, v77, 2);
      v85 = v92;
      v92 = v98;
      v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v102.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 5uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), v76, 2), v102, v76, 3), 3uLL);
      --v99;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v107, v98, v77, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v99 > 1);
  }
  return result;
}

uint64_t sub_1C9772914(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xF000F000F000F000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 4uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C9772A64(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  uint16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  uint16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 4uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 4uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 4uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 4uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 4uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C9772D04(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  _OWORD *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v70;
  int16x4_t v71;
  int v72;
  BOOL v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v77;
  int16x8_t v78;
  int16x4_t v83;
  int16x8_t v84;
  int16x4_t v90;
  int16x8_t v91;
  int16x4_t v96;
  int v97;
  int16x8_t v99;
  int32x4_t v104;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 4uLL);
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 4uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 4uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 4uLL);
    v53 = a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 4uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 4uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v70 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      v71 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 4uLL);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v42.i8, v12, 2), v71, v12, 3), 8uLL), (uint16x4_t)0xF000F000F000F000);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v42, v12, 2), vshrn_n_s32(v70, 4uLL), v12, 3), 8uLL), (uint16x4_t)0xF000F000F000F000);
      v52 = vshrn_high_n_s32(v71, v70, 4uLL);
      *v53 = v60;
      --v55;
      v54 += v9;
      v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v72 = result - 8;
    v13 += 16;
    v14 += 16;
    v73 = result > 0xF;
    result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    v74 = qword_1C9832640[2 * (a3 & 7) - 2];
    v75 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 4uLL);
    v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v83 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3), 4uLL);
    v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 4uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v90 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 4uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3), 4uLL);
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 4uLL);
    v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3), 4uLL);
    v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 4uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      v83 = v90;
      v90 = v96;
      v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 4uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3), 4uLL);
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 8uLL), (uint16x4_t)0xF000F000F000F000);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

uint64_t sub_1C97730B4(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  uint16x8_t *v11;
  _OWORD *v12;
  int v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v30;
  BOOL v31;
  int16x4_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    v12 = a7;
    _X15 = v11;
    v14 = a2 + 1;
    do
    {
      v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v27, 4uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    v30 = result - 8;
    ++v11;
    v31 = result > 0xF;
    result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    v32 = qword_1C9832640[2 * (a3 & 7) - 2];
    v33 = a2 + 1;
    v34 = v7 - 4;
    do
    {
      v35 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 4uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

unint64_t sub_1C9773204(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  __int8 *v12;
  __int8 *v13;
  int16x4_t *v14;
  uint16x8_t *v15;
  __int8 *v16;
  uint16x8_t v18;
  int16x8_t v19;
  int16x8_t v25;
  uint16x8_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int16x8_t v32;
  uint16x8_t *v34;
  int v35;
  int16x4_t *v36;
  char *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v45;
  int32x4_t v46;
  int v54;
  BOOL v55;
  uint16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v61;
  uint16x4_t v64;
  int16x4_t v65;
  int v67;
  uint16x4_t v72;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v14 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = &_X4->i8[14 * a4];
  v13 = &_X4->i8[6 * a4];
  v14 = a7;
  v15 = &_X4[a4];
  v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    v19 = (int16x8_t)vshrq_n_u16(v18, 4uLL);
    __asm { PRFM            #0, [X20] }
    v25 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    v29 = v13;
    v30 = v12;
    v31 = v16;
    v32 = (int16x8_t)vshrq_n_u16(v28, 4uLL);
    __asm { PRFM            #0, [X23] }
    v34 = v15;
    v35 = a2 + 2;
    v36 = a7;
    v37 = (char *)a7 + 2 * a6;
    do
    {
      v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    v54 = result - 8;
    v10 += 16;
    v55 = result > 0xF;
    result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    v57 = *(uint16x4_t *)_X12;
    _X12 = (_QWORD *)((char *)_X12 + 14);
    v58 = qword_1C9832640[2 * v7 - 2];
    v59 = (int16x4_t)vshr_n_u16(v57, 4uLL);
    __asm { PRFM            #0, [X12] }
    v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    v64 = *(uint16x4_t *)_X11;
    _X11 = (_QWORD *)((char *)_X11 + 14);
    v65 = (int16x4_t)vshr_n_u16(v64, 4uLL);
    __asm { PRFM            #0, [X11] }
    v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      v72 = *(uint16x4_t *)_X17;
      _X17 = (_QWORD *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
      v76 = vmlal_lane_s16(v74, v65, v58, 2);
      v59 = v65;
      v65 = (int16x4_t)vshr_n_u16(v72, 4uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *v14 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1C97734A4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t *v53;
  uint64_t v54;
  int v55;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v71;
  int16x4_t v72;
  int32x4_t v73;
  int v74;
  BOOL v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x4_t v79;
  int16x8_t v80;
  int16x4_t v85;
  int16x8_t v86;
  int16x4_t v92;
  int16x8_t v93;
  int16x4_t v98;
  int v99;
  int32x4_t v100;
  int16x8_t v102;
  int32x4_t v107;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 2 * a4;
  v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v11 = qword_1C9832640[2 * (a3 & 7) - 2];
  v12 = qword_1C9832640[2 * v7 - 2];
  v13 = 12 * a4 - 4;
  v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    v17 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    v18 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 4uLL);
    _X7 = _X11 - 4;
    v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 4uLL);
    v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 4uLL);
    v43 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    v44 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 4uLL);
    v53 = (int16x8_t *)a7;
    v54 = a5;
    v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 4uLL);
      v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 4uLL);
      v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      v30 = v42;
      v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v71 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      v72 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 4uLL);
      v73 = vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), v72, v12, 3);
      v52 = vshrn_high_n_s32(v72, v71, 4uLL);
      *v53 = vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vshrn_n_s32(v71, 4uLL), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    v74 = result - 8;
    v13 += 16;
    v14 += 16;
    v75 = result > 0xF;
    result = (result - 8);
  }
  while (v75);
  if (v74)
  {
LABEL_9:
    v76 = qword_1C9832640[2 * (a3 & 7) - 2];
    v77 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v79 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 4uLL);
    v80 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v85 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, v76, 1), v79, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), v76, 2), v80, v76, 3), 4uLL);
    v86 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 4uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    v92 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v86.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 4uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL), v76, 2), v86, v76, 3), 4uLL);
    *(uint16x4_t *)v86.i8 = vshr_n_u16(*_X13, 4uLL);
    v93 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v76, 1), *(int16x4_t *)v86.i8, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76, 2), v93, v76, 3), 4uLL);
    v99 = a2 + 1;
    do
    {
      v100.i64[0] = 0x38000000380000;
      v100.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      v102 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 4uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v107 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v100, v85, v77, 0), v92, v77, 1), v98, v77, 2);
      v85 = v92;
      v92 = v98;
      v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v102.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 4uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), v76, 2), v102, v76, 3), 4uLL);
      --v99;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v107, v98, v77, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v99 > 1);
  }
  return result;
}

double sub_1C9773848(int a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1)
      return *(double *)&v14;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10 = (char *)a5 + 2 * a4;
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = a2 + 2;
    do
    {
      v14 = *(_OWORD *)((char *)a5 + v11);
      v15 = *(_OWORD *)&v10[v11];
      *(_OWORD *)((char *)a7 + v12) = v14;
      *(_OWORD *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      *(_QWORD *)&v14 = *a5;
      v19 = *(_QWORD *)((char *)a5 + 2 * a4);
      *a7 = *a5;
      *(_QWORD *)((char *)a7 + 2 * a6) = v19;
      a7 = (_QWORD *)((char *)a7 + v7);
      a5 = (_QWORD *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)&v14;
}

uint64_t sub_1C97738F8(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t *v19;
  _OWORD *v20;
  int v22;
  int8x16_t v23;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint16x8_t v33;
  int16x8_t v34;
  uint16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int v40;
  BOOL v41;
  int16x8_t v42;
  int v44;
  int16x4_t v45;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  v14 = vdupq_laneq_s16(v10, 5);
  v15 = vdupq_laneq_s16(v10, 6);
  v16 = vdupq_laneq_s16(v10, 7);
  v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  v18 = vdupq_laneq_s16(v10, 4);
  v19 = (int8x16_t *)(a5 - 6);
  do
  {
    v20 = a7;
    _X15 = v19;
    v22 = a2 + 1;
    do
    {
      v23 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v30 = (int16x8_t)vextq_s8(*_X15, v23, 8uLL);
      v31 = (int16x8_t)vextq_s8(*_X15, v23, 0xEuLL);
      v32 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v23, 2uLL), v12), (int16x8_t)vextq_s8(*_X15, v23, 4uLL), v13), (int16x8_t)vextq_s8(*_X15, v23, 0xAuLL), v14), (int16x8_t)vextq_s8(*_X15, v23, 0xCuLL), v15);
      v33 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v23, 6uLL), v17);
      v34 = vmlaq_s16(v32, v31, v16);
      v35 = (uint16x8_t)vmulq_s16(v30, v18);
      v36 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v33.i8);
      v37 = (int32x4_t)vaddl_high_u16(v33, v35);
      *(uint16x4_t *)v33.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16(v36, *(int16x4_t *)v34.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v33.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v37, v34), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v20 = v33;
      --v22;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    v40 = result - 8;
    ++v19;
    v41 = result > 0xF;
    result = (result - 8);
  }
  while (v41);
  if (v40)
  {
LABEL_9:
    v42 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (int8x8_t *)(a5 - 6);
    v44 = a2 + 1;
    do
    {
      v45 = (int16x4_t)_X11[1];
      __asm { PRFUM           #0, [X11,#0x1E] }
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 2uLL), *(int16x4_t *)v42.i8, 1), (int16x4_t)*_X11, *(int16x4_t *)v42.i8, 0), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 4uLL), *(int16x4_t *)v42.i8, 2), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 6uLL),
                                      *(int16x4_t *)v42.i8,
                                      3),
                                    v45,
                                    v42,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 2uLL),
                                  v42,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 4uLL),
                                v42,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 6uLL),
                              v42,
                              7),
                            6uLL),
              (uint16x4_t)0xFC00FC00FC00FC00);
      --v44;
      _X11 = (int8x8_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v44 > 1);
  }
  return result;
}

int16x4_t *sub_1C9773A9C(int16x4_t *result, int a2, unint64_t a3, uint64_t a4, int16x4_t *a5, uint64_t a6, uint16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  int16x4_t *v21;
  char *v22;
  char *v23;
  uint16x4_t *v24;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v35;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v43;
  int16x8_t v44;
  char *v54;
  char *v55;
  int16x4_t *v56;
  char *v57;
  int v59;
  uint16x4_t *v60;
  char *v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int v88;
  BOOL v89;
  int16x8_t v90;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v98;
  int16x4_t v99;
  int16x4_t v101;
  int16x4_t v103;
  int16x4_t v104;
  int16x4_t v106;
  int16x4_t v107;
  int16x4_t v109;
  int16x4_t v110;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int16x4_t v139;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int16x4_t v145;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int16x4_t v151;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  uint16x4_t *v160;
  uint16x4_t *v161;
  uint16x4_t *v162;
  uint64_t v163;

  v163 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v24 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  v13 = vdupq_laneq_s16(v8, 5);
  v14 = vdupq_laneq_s16(v8, 6);
  v15 = vdupq_laneq_s16(v8, 7);
  v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  v17 = vdupq_laneq_s16(v8, 4);
  v18 = 4 * a6;
  v19 = a2 + 2;
  v20 = (char *)a5 + 20 * a4;
  v21 = &a5[a4];
  v22 = (char *)a5 + 18 * a4;
  v23 = (char *)a5 + 10 * a4;
  v24 = a7;
  do
  {
    _X2 = (_OWORD *)((char *)a5 - 6 * a4);
    v26 = *(int16x8_t *)_X2;
    _X2 = (_OWORD *)((char *)_X2 + 30);
    v27 = v26;
    _X24 = (_OWORD *)((char *)a5 - 4 * a4);
    v29 = *(int16x8_t *)_X24;
    _X24 = (_OWORD *)((char *)_X24 + 30);
    v30 = v29;
    _X25 = (_OWORD *)((char *)a5 - 2 * a4);
    v32 = *(int16x8_t *)_X25;
    _X25 = (_OWORD *)((char *)_X25 + 30);
    v33 = v32;
    _X26 = (char *)&a5[3] + 6;
    v35 = *(int16x8_t *)a5->i8;
    _X27 = (_OWORD *)((char *)a5 + 2 * a4);
    v37 = *(int16x8_t *)_X27;
    _X27 = (_OWORD *)((char *)_X27 + 30);
    v38 = v37;
    _X28 = (_OWORD *)((char *)a5 + 4 * a4);
    v40 = *(int16x8_t *)_X28;
    _X28 = (_OWORD *)((char *)_X28 + 30);
    v41 = v40;
    _X9 = (_OWORD *)((char *)a5 + 6 * a4);
    v43 = *(int16x8_t *)_X9;
    _X9 = (_OWORD *)((char *)_X9 + 30);
    v44 = v43;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X24]
      PRFM            #0, [X25]
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v54 = v23;
    v55 = v22;
    v56 = v21;
    v57 = v20;
    __asm { PRFM            #0, [X28] }
    v59 = v19;
    v60 = a7;
    __asm { PRFM            #0, [X9] }
    v62 = (char *)a7 + 2 * a6;
    do
    {
      v63 = v33;
      v64 = v35;
      v33 = v38;
      v35 = v41;
      v38 = v44;
      _X9 = (uint64_t)&v56[v7 / 8 + 3] + 6;
      v41 = *(int16x8_t *)v56[v7 / 8].i8;
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v54[v7 + 30];
      v44 = *(int16x8_t *)&v54[v7];
      __asm { PRFM            #0, [X9] }
      _X9 = &v55[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v57[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      v75 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v14), v35, v13), v63, v12), v30, v11), v27, v10);
      v76 = (uint16x8_t)vmulq_s16(v64, v16);
      v77 = (uint16x8_t)vmulq_s16(v33, v17);
      v78 = vmlaq_s16(v75, v41, v15);
      v79 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v76.i8, *(uint16x4_t *)v77.i8);
      v80 = (int32x4_t)vaddl_high_u16(v76, v77);
      v81 = vaddw_s16(v79, *(int16x4_t *)v78.i8);
      v82 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v13), v64, v12), v63, v11), v30, v10), v41, v14), v44, v15);
      v83 = (uint16x8_t)vmulq_s16(v33, v16);
      v84 = (uint16x8_t)vmulq_s16(v35, v17);
      v85 = vaddw_high_s16(v80, v78);
      v86 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v83.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v82.i8);
      v87 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v83, v84), v82);
      *(uint16x4_t *)v82.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v81, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v82.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v85, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)v85.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v86, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v85.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v87, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int16x8_t *)v60[v7 / 8].i8 = v82;
      *(int32x4_t *)&v62[v7] = v85;
      v62 += v18;
      v59 -= 2;
      v57 += v9;
      v60 = (uint16x4_t *)((char *)v60 + v18);
      v56 = (int16x4_t *)((char *)v56 + v9);
      v55 += v9;
      v54 += v9;
      v30 = v64;
      v27 = v63;
    }
    while (v59 > 2);
    v24 += 2;
    a5 += 2;
    v88 = (_DWORD)result - 8;
    v7 += 16;
    v89 = result > 0xF;
    result = (int16x4_t *)((_DWORD)result - 8);
  }
  while (v89);
  if (v88)
  {
LABEL_9:
    v90 = xmmword_1C9832610[v163 - 1];
    _X9 = (int16x4_t *)((char *)a5 - 6 * a4);
    v92 = *_X9;
    _X9 = (int16x4_t *)((char *)_X9 + 14);
    v93 = v92;
    _X10 = (int16x4_t *)((char *)a5 - 4 * a4);
    v95 = *_X10;
    _X10 = (int16x4_t *)((char *)_X10 + 14);
    v96 = v95;
    _X11 = (int16x4_t *)((char *)a5 - 2 * a4);
    v98 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    v99 = v98;
    _X12 = (char *)&a5[1] + 6;
    v101 = *a5;
    _X14 = (int16x4_t *)((char *)a5 + 2 * a4);
    v103 = *_X14;
    _X14 = (int16x4_t *)((char *)_X14 + 14);
    v104 = v103;
    _X15 = (int16x4_t *)((char *)a5 + 4 * a4);
    v106 = *_X15;
    _X15 = (int16x4_t *)((char *)_X15 + 14);
    v107 = v106;
    _X16 = (int16x4_t *)((char *)a5 + 6 * a4);
    v109 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    v110 = v109;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v118 = a2 + 4;
    v119 = 3 * a4;
    v120 = 8 * a4;
    v121 = 22 * a4;
    v122 = 12 * a4;
    v123 = 10 * a4;
    v124 = 2 * a6;
    v125 = 14 * a4;
    do
    {
      _X3 = (int16x4_t *)((char *)a5 + v123);
      _X2 = (int16x4_t *)((char *)a5 + v122);
      _X1 = (int16x4_t *)((char *)a5 + v125);
      _X17 = (char *)a5 + v121;
      result = &a5[v119];
      a5 = (int16x4_t *)((char *)a5 + v120);
      v130 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v96, *(int16x4_t *)v90.i8, 1), v93, *(int16x4_t *)v90.i8, 0), v99, *(int16x4_t *)v90.i8, 2), v101, *(int16x4_t *)v90.i8, 3);
      v131 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v99, *(int16x4_t *)v90.i8, 1), v96, *(int16x4_t *)v90.i8, 0), v101, *(int16x4_t *)v90.i8, 2);
      v132 = vmull_lane_s16(v101, *(int16x4_t *)v90.i8, 1);
      v133 = vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v90.i8, 1), v101, *(int16x4_t *)v90.i8, 0);
      _X5 = (char *)&a5[1] + 6;
      v101 = *a5;
      __asm { PRFM            #0, [X5] }
      v136 = vmlal_laneq_s16(v130, v104, v90, 4);
      v137 = vmlal_lane_s16(v131, v104, *(int16x4_t *)v90.i8, 3);
      v138 = vmlal_lane_s16(vmlal_lane_s16(v132, v99, *(int16x4_t *)v90.i8, 0), v104, *(int16x4_t *)v90.i8, 2);
      v93 = v104;
      v139 = *_X3;
      _X3 = (int16x4_t *)((char *)_X3 + 14);
      v104 = v139;
      __asm { PRFM            #0, [X3] }
      v141 = vmlal_laneq_s16(v136, v107, v90, 5);
      v142 = vmlal_laneq_s16(v137, v107, v90, 4);
      v143 = vmlal_lane_s16(v138, v107, *(int16x4_t *)v90.i8, 3);
      v144 = vmlal_lane_s16(v133, v107, *(int16x4_t *)v90.i8, 2);
      v96 = v107;
      v145 = *_X2;
      _X2 = (int16x4_t *)((char *)_X2 + 14);
      v107 = v145;
      __asm { PRFM            #0, [X2] }
      v147 = vmlal_laneq_s16(v141, v110, v90, 6);
      v148 = vmlal_laneq_s16(v142, v110, v90, 5);
      v149 = vmlal_laneq_s16(v143, v110, v90, 4);
      v150 = vmlal_lane_s16(v144, v110, *(int16x4_t *)v90.i8, 3);
      v99 = v110;
      v151 = *_X1;
      _X1 = (int16x4_t *)((char *)_X1 + 14);
      v110 = v151;
      __asm
      {
        PRFM            #0, [X1]
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      v157 = vmlal_laneq_s16(vmlal_laneq_s16(v148, *a5, v90, 6), v104, v90, 7);
      v158 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v149, *a5, v90, 5), v104, v90, 6), v107, v90, 7);
      v159 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v150, *a5, v90, 4), v104, v90, 5), v107, v90, 6), v151, v90, 7);
      *v24 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v147, *a5, v90, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v160 = (uint16x4_t *)((char *)v24 + v124);
      *v160 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v157, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v161 = (uint16x4_t *)((char *)v160 + v124);
      *v161 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v158, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v162 = (uint16x4_t *)((char *)v161 + v124);
      *v162 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v159, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v118 -= 4;
      v24 = (uint16x4_t *)((char *)v162 + v124);
    }
    while (v118 > 4);
  }
  return result;
}

uint64_t sub_1C9773ECC(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v40;
  int16x8_t v42;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int8x16_t v62;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int8x16_t v88;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int8x16_t v101;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int8x16_t v114;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  _OWORD *v124;
  uint64_t v125;
  int v126;
  int16x8_t v127;
  int16x8_t v129;
  int8x16_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int16x8_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int v152;
  BOOL v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x4_t v157;
  int16x4_t v158;
  int8x8_t v159;
  int16x4_t v165;
  int16x4_t v166;
  int16x4_t v167;
  int8x8_t v168;
  int16x4_t v174;
  int16x4_t v175;
  int16x4_t v176;
  int8x8_t v177;
  int16x4_t v183;
  int16x4_t v184;
  int16x4_t v185;
  int8x8_t v186;
  int16x4_t v192;
  int16x4_t v193;
  int16x4_t v194;
  int8x8_t v195;
  int16x4_t v201;
  int16x4_t v202;
  int16x4_t v203;
  int8x8_t v204;
  int16x4_t v210;
  int16x4_t v211;
  int16x4_t v212;
  int8x8_t v213;
  int16x4_t v218;
  int v219;
  uint64_t v220;
  int16x4_t v222;
  int32x4_t v227;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v24 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  v17 = vdupq_laneq_s16(v12, 5);
  v18 = vdupq_laneq_s16(v12, 6);
  v19 = vdupq_laneq_s16(v12, 7);
  v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  v21 = vdupq_laneq_s16(v12, 4);
  v22 = v8 - 6;
  v23 = 8 * a4;
  v24 = a5;
  do
  {
    _X19 = (int8x16_t *)(v24 + 2 * (-3 * a4 - 3));
    v26 = _X19[1];
    v27 = (int16x8_t)vextq_s8(*_X19, v26, 2uLL);
    v28 = (int16x8_t)vextq_s8(*_X19, v26, 4uLL);
    v29 = (int16x8_t)vextq_s8(*_X19, v26, 6uLL);
    v30 = (int16x8_t)vextq_s8(*_X19, v26, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v36 = (int16x8_t)vextq_s8(*_X19, v26, 0xAuLL);
    v37 = (int16x8_t)vextq_s8(*_X19, v26, 0xCuLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v40 = (int16x8_t)vextq_s8(*_X19, v26, 0xEuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v42 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X19, v14), v27, v15);
    _X19 = &_X19->i8[2 * a4];
    v44 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v42, v28, v16), v36, v17), v37, v18), v40, v19);
    v45 = (uint16x8_t)vmulq_s16(v29, v20);
    v46 = (uint16x8_t)vmulq_s16(v30, v21);
    v47 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8), *(int16x4_t *)v44.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v45, v46), v44), 2uLL);
    v48 = *(int16x8_t *)_X19;
    v49 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v55 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 6uLL);
    v56 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 8uLL);
    v57 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v48, v14), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xEuLL), v19);
    v58 = (uint16x8_t)vmulq_s16(v55, v20);
    v59 = (uint16x8_t)vmulq_s16(v56, v21);
    v60 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), *(int16x4_t *)v57.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v58, v59), v57), 2uLL);
    v61 = *(int16x8_t *)_X19;
    v62 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v68 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 6uLL);
    v69 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 8uLL);
    v70 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v61, v14), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xEuLL), v19);
    v71 = (uint16x8_t)vmulq_s16(v68, v20);
    v72 = (uint16x8_t)vmulq_s16(v69, v21);
    v73 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v71.i8), *(int16x4_t *)v70.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v71, v72), v70), 2uLL);
    v74 = *(int16x8_t *)_X19;
    v75 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v81 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 6uLL);
    v82 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 8uLL);
    v83 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v14), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xEuLL), v19);
    v84 = (uint16x8_t)vmulq_s16(v81, v20);
    v85 = (uint16x8_t)vmulq_s16(v82, v21);
    v86 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v85.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v83.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v84, v85), v83), 2uLL);
    v87 = *(int16x8_t *)_X19;
    v88 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v94 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 6uLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 8uLL);
    v96 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v87, v14), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xEuLL), v19);
    v97 = (uint16x8_t)vmulq_s16(v94, v20);
    v98 = (uint16x8_t)vmulq_s16(v95, v21);
    v99 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v98.i8, *(uint16x4_t *)v97.i8), *(int16x4_t *)v96.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v97, v98), v96), 2uLL);
    v100 = *(int16x8_t *)_X19;
    v101 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v107 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 6uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 8uLL);
    v109 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v14), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xEuLL), v19);
    v110 = (uint16x8_t)vmulq_s16(v107, v20);
    v111 = (uint16x8_t)vmulq_s16(v108, v21);
    v112 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v111.i8, *(uint16x4_t *)v110.i8), *(int16x4_t *)v109.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v110, v111), v109), 2uLL);
    v113 = *(int16x8_t *)_X19;
    v114 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 6uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 8uLL);
    v121 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v113, v14), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xEuLL), v19);
    v122 = (uint16x8_t)vmulq_s16(v119, v20);
    v123 = (uint16x8_t)vmulq_s16(v120, v21);
    v124 = a7;
    v125 = a5;
    v126 = a2 + 1;
    v127 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v123.i8, *(uint16x4_t *)v122.i8), *(int16x4_t *)v121.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v122, v123), v121), 2uLL);
    do
    {
      _X22 = v125 + v23;
      v129 = *(int16x8_t *)(v125 + v23 - 6);
      v130 = *(int8x16_t *)(v125 + v23 + 10);
      v131 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 2uLL);
      v132 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 4uLL);
      v133 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 6uLL);
      v134 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 8uLL);
      v135 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xAuLL);
      v136 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xCuLL);
      v137 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xEuLL);
      v138 = vmlaq_s16(vmulq_s16(v129, v14), v131, v15);
      v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v47.i8, *(int16x4_t *)v13.i8, 0);
      v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v60, *(int16x4_t *)v13.i8, 1), v47, *(int16x4_t *)v13.i8, 0);
      v47 = v60;
      v60 = v73;
      v73 = v86;
      v86 = v99;
      v99 = v112;
      v112 = v127;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v125 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v145 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v138, v132, v16), v135, v17), v136, v18), v137, v19);
      v146 = (uint16x8_t)vmulq_s16(v133, v20);
      v147 = (uint16x8_t)vmulq_s16(v134, v21);
      v148 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v147.i8, *(uint16x4_t *)v146.i8);
      v149 = (int32x4_t)vaddl_high_u16(v146, v147);
      v150 = vaddw_s16(v148, *(int16x4_t *)v145.i8);
      v151 = vaddw_high_s16(v149, v145);
      *(int16x4_t *)v149.i8 = vshrn_n_s32(v150, 2uLL);
      *(uint16x4_t *)v150.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v73.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v86.i8, v13, 4), *(int16x4_t *)v99.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v112.i8,
                                                   v13,
                                                   6),
                                                 *(int16x4_t *)v149.i8,
                                                 v13,
                                                 7),
                                               0xAuLL),
                                 (uint16x4_t)0xFC00FC00FC00FC00);
      v150.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v60, *(int16x4_t *)v13.i8, 2), v73, *(int16x4_t *)v13.i8, 3), v86, v13, 4), v99, v13, 5), v112, v13, 6),
                                                        vshrn_n_s32(v151, 2uLL),
                                                        v13,
                                                        7),
                                                      0xAuLL),
                                        (uint16x4_t)0xFC00FC00FC00FC00);
      v127 = vshrn_high_n_s32(*(int16x4_t *)v149.i8, v151, 2uLL);
      *v124 = v150;
      --v126;
      v125 += v9;
      v124 = (_OWORD *)((char *)v124 + v11);
    }
    while (v126 > 1);
    a7 += 2;
    v24 += 16;
    v152 = result - 8;
    v22 += 16;
    v23 += 16;
    v153 = result > 0xF;
    result = (result - 8);
  }
  while (v153);
  if (v152)
  {
LABEL_9:
    v154 = xmmword_1C9832610[(a3 & 3) - 1];
    v155 = xmmword_1C9832610[v7 - 1];
    _X13 = v24 - 6 * a4;
    v157 = *(int16x4_t *)(_X13 - 6);
    _X13 -= 6;
    v158 = *(int16x4_t *)(_X13 + 8);
    v159 = *(int8x8_t *)(_X13 + 16);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)(_X13 + 2 * a4);
    v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v154.i8, 1), v157, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v158,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v154,
               7),
             2uLL);
    v166 = *_X13;
    v167 = _X13[1];
    v168 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v154.i8, 1), v166, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v167,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v154,
               7),
             2uLL);
    v175 = *_X13;
    v176 = _X13[1];
    v177 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v154.i8, 1), v175, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v176,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v154,
               7),
             2uLL);
    v184 = *_X13;
    v185 = _X13[1];
    v186 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v154.i8, 1), v184, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v185,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v154,
               7),
             2uLL);
    v193 = *_X13;
    v194 = _X13[1];
    v195 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v154.i8, 1), v193, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v194,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v154,
               7),
             2uLL);
    v202 = *_X13;
    v203 = _X13[1];
    v204 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v154.i8, 1), v202, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v203,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v154,
               7),
             2uLL);
    v211 = *_X13;
    v212 = _X13[1];
    v213 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v154.i8, 1), v211, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v212,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v154,
               7),
             2uLL);
    v219 = a2 + 1;
    v220 = v8 - 6;
    do
    {
      _X14 = v24 + v10;
      v222 = *(int16x4_t *)(v24 + v10 + 2);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v174, *(int16x4_t *)v155.i8, 1), v165, *(int16x4_t *)v155.i8, 0), v183, *(int16x4_t *)v155.i8, 2), v192, *(int16x4_t *)v155.i8, 3), v201, v155, 4), v210, v155, 5), v218, v155,
               6);
      v165 = v174;
      v174 = v183;
      v183 = v192;
      v192 = v201;
      v201 = v210;
      v210 = v218;
      v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v222, 2uLL), *(int16x4_t *)v154.i8, 1), *(int16x4_t *)(v24 + v10 - 6), *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v222, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v222, 6uLL), *(int16x4_t *)v154.i8,
                         3),
                       v222,
                       v154,
                       4),
                     (int16x4_t)vext_s8((int8x8_t)v222, *(int8x8_t *)(v24 + v10 + 10), 2uLL),
                     v154,
                     5),
                   (int16x4_t)vext_s8((int8x8_t)v222, *(int8x8_t *)(v24 + v10 + 10), 4uLL),
                   v154,
                   6),
                 (int16x4_t)vext_s8((int8x8_t)v222, *(int8x8_t *)(v24 + v10 + 10), 6uLL),
                 v154,
                 7),
               2uLL);
      --v219;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v227, v218, v155, 7), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v24 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

uint64_t sub_1C97746CC(uint64_t result, int a2, uint64_t a3, uint64_t a4, int16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int16x8_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int16x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  int16x4_t v19;

  v7 = 4 * a6;
  v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  v11 = (char *)a5 + 2 * a4;
  do
  {
    v12 = 0;
    v13 = 0;
    v14 = a2 + 2;
    do
    {
      v15 = *(int16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16(vshlq_n_s16(*(int16x8_t *)&a5->i8[v12], 4uLL), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16(vshlq_n_s16(v15, 4uLL), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    v16 = result - 8;
    v9 += 16;
    v11 += 16;
    v17 = (int)result <= 15;
    result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    v18 = a2 + 2;
    do
    {
      v19 = *(int16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16(vshl_n_s16(*a5, 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16(vshl_n_s16(v19, 4uLL), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (int16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1C97747A4(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t *v19;
  _OWORD *v20;
  int v22;
  int8x16_t v23;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint16x8_t v33;
  int16x8_t v34;
  uint16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int v40;
  BOOL v41;
  int16x8_t v42;
  int v44;
  int16x4_t v45;

  v7 = a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = xmmword_1C9832610[(a3 & 3) - 1];
  v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  v14 = vdupq_laneq_s16(v10, 5);
  v15 = vdupq_laneq_s16(v10, 6);
  v16 = vdupq_laneq_s16(v10, 7);
  v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  v18 = vdupq_laneq_s16(v10, 4);
  v19 = (int8x16_t *)(a5 - 6);
  do
  {
    v20 = a7;
    _X15 = v19;
    v22 = a2 + 1;
    do
    {
      v23 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      v30 = (int16x8_t)vextq_s8(*_X15, v23, 8uLL);
      v31 = (int16x8_t)vextq_s8(*_X15, v23, 0xEuLL);
      v32 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v23, 2uLL), v12), (int16x8_t)vextq_s8(*_X15, v23, 4uLL), v13), (int16x8_t)vextq_s8(*_X15, v23, 0xAuLL), v14), (int16x8_t)vextq_s8(*_X15, v23, 0xCuLL), v15);
      v33 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v23, 6uLL), v17);
      v34 = vmlaq_s16(v32, v31, v16);
      v35 = (uint16x8_t)vmulq_s16(v30, v18);
      v36 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v33.i8);
      v37 = (int32x4_t)vaddl_high_u16(v33, v35);
      *(int16x4_t *)v33.i8 = vadd_s16(vshrn_n_s32(vaddw_s16(v36, *(int16x4_t *)v34.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
      v33.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v37, v34), 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *v20 = v33;
      --v22;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    v40 = result - 8;
    ++v19;
    v41 = result > 0xF;
    result = (result - 8);
  }
  while (v41);
  if (v40)
  {
LABEL_9:
    v42 = xmmword_1C9832610[(a3 & 3) - 1];
    _X11 = (int8x8_t *)(a5 - 6);
    v44 = a2 + 1;
    do
    {
      v45 = (int16x4_t)_X11[1];
      __asm { PRFUM           #0, [X11,#0x1E] }
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 2uLL), *(int16x4_t *)v42.i8, 1), (int16x4_t)*_X11, *(int16x4_t *)v42.i8, 0), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 4uLL), *(int16x4_t *)v42.i8, 2), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 6uLL), *(int16x4_t *)v42.i8, 3), v45,
                        v42,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 2uLL),
                      v42,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 4uLL),
                    v42,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 6uLL),
                  v42,
                  7),
                2uLL),
              (int16x4_t)0xE000E000E000E000);
      --v44;
      _X11 = (int8x8_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v44 > 1);
  }
  return result;
}

int16x4_t *sub_1C9774948(int16x4_t *result, int a2, unint64_t a3, uint64_t a4, int16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  unint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  int16x4_t *v21;
  char *v22;
  char *v23;
  int16x4_t *v24;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v35;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v43;
  int16x8_t v44;
  char *v54;
  char *v55;
  int16x4_t *v56;
  char *v57;
  int v59;
  int16x4_t *v60;
  char *v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int v88;
  BOOL v89;
  int16x8_t v90;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v98;
  int16x4_t v99;
  int16x4_t v101;
  int16x4_t v103;
  int16x4_t v104;
  int16x4_t v106;
  int16x4_t v107;
  int16x4_t v109;
  int16x4_t v110;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int16x4_t v139;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int16x4_t v145;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int16x4_t v151;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int16x4_t *v160;
  int16x4_t *v161;
  int16x4_t *v162;
  uint64_t v163;

  v163 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    v24 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = xmmword_1C9832610[((a3 >> 16) & 3) - 1];
  v9 = 4 * a4;
  v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  v13 = vdupq_laneq_s16(v8, 5);
  v14 = vdupq_laneq_s16(v8, 6);
  v15 = vdupq_laneq_s16(v8, 7);
  v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  v17 = vdupq_laneq_s16(v8, 4);
  v18 = 4 * a6;
  v19 = a2 + 2;
  v20 = (char *)a5 + 20 * a4;
  v21 = &a5[a4];
  v22 = (char *)a5 + 18 * a4;
  v23 = (char *)a5 + 10 * a4;
  v24 = a7;
  do
  {
    _X2 = (_OWORD *)((char *)a5 - 6 * a4);
    v26 = *(int16x8_t *)_X2;
    _X2 = (_OWORD *)((char *)_X2 + 30);
    v27 = v26;
    _X24 = (_OWORD *)((char *)a5 - 4 * a4);
    v29 = *(int16x8_t *)_X24;
    _X24 = (_OWORD *)((char *)_X24 + 30);
    v30 = v29;
    _X25 = (_OWORD *)((char *)a5 - 2 * a4);
    v32 = *(int16x8_t *)_X25;
    _X25 = (_OWORD *)((char *)_X25 + 30);
    v33 = v32;
    _X26 = (char *)&a5[3] + 6;
    v35 = *(int16x8_t *)a5->i8;
    _X27 = (_OWORD *)((char *)a5 + 2 * a4);
    v37 = *(int16x8_t *)_X27;
    _X27 = (_OWORD *)((char *)_X27 + 30);
    v38 = v37;
    _X28 = (_OWORD *)((char *)a5 + 4 * a4);
    v40 = *(int16x8_t *)_X28;
    _X28 = (_OWORD *)((char *)_X28 + 30);
    v41 = v40;
    _X9 = (_OWORD *)((char *)a5 + 6 * a4);
    v43 = *(int16x8_t *)_X9;
    _X9 = (_OWORD *)((char *)_X9 + 30);
    v44 = v43;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X24]
      PRFM            #0, [X25]
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    v54 = v23;
    v55 = v22;
    v56 = v21;
    v57 = v20;
    __asm { PRFM            #0, [X28] }
    v59 = v19;
    v60 = a7;
    __asm { PRFM            #0, [X9] }
    v62 = (char *)a7 + 2 * a6;
    do
    {
      v63 = v33;
      v64 = v35;
      v33 = v38;
      v35 = v41;
      v38 = v44;
      _X9 = (uint64_t)&v56[v7 / 8 + 3] + 6;
      v41 = *(int16x8_t *)v56[v7 / 8].i8;
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v54[v7 + 30];
      v44 = *(int16x8_t *)&v54[v7];
      __asm { PRFM            #0, [X9] }
      _X9 = &v55[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v57[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      v75 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v14), v35, v13), v63, v12), v30, v11), v27, v10);
      v76 = (uint16x8_t)vmulq_s16(v64, v16);
      v77 = (uint16x8_t)vmulq_s16(v33, v17);
      v78 = vmlaq_s16(v75, v41, v15);
      v79 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v76.i8, *(uint16x4_t *)v77.i8);
      v80 = (int32x4_t)vaddl_high_u16(v76, v77);
      v81 = vaddw_s16(v79, *(int16x4_t *)v78.i8);
      v82 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v13), v64, v12), v63, v11), v30, v10), v41, v14), v44, v15);
      v83 = (uint16x8_t)vmulq_s16(v33, v16);
      v84 = (uint16x8_t)vmulq_s16(v35, v17);
      v85 = vaddw_high_s16(v80, v78);
      v86 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v83.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v82.i8);
      v87 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v83, v84), v82);
      *(int16x4_t *)v82.i8 = vadd_s16(vshrn_n_s32(v81, 2uLL), (int16x4_t)0xE000E000E000E000);
      v82.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v85, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v85.i8 = vadd_s16(vshrn_n_s32(v86, 2uLL), (int16x4_t)0xE000E000E000E000);
      v85.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v87, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x8_t *)v60[v7 / 8].i8 = v82;
      *(int32x4_t *)&v62[v7] = v85;
      v62 += v18;
      v59 -= 2;
      v57 += v9;
      v60 = (int16x4_t *)((char *)v60 + v18);
      v56 = (int16x4_t *)((char *)v56 + v9);
      v55 += v9;
      v54 += v9;
      v30 = v64;
      v27 = v63;
    }
    while (v59 > 2);
    v24 += 2;
    a5 += 2;
    v88 = (_DWORD)result - 8;
    v7 += 16;
    v89 = result > 0xF;
    result = (int16x4_t *)((_DWORD)result - 8);
  }
  while (v89);
  if (v88)
  {
LABEL_9:
    v90 = xmmword_1C9832610[v163 - 1];
    _X9 = (int16x4_t *)((char *)a5 - 6 * a4);
    v92 = *_X9;
    _X9 = (int16x4_t *)((char *)_X9 + 14);
    v93 = v92;
    _X10 = (int16x4_t *)((char *)a5 - 4 * a4);
    v95 = *_X10;
    _X10 = (int16x4_t *)((char *)_X10 + 14);
    v96 = v95;
    _X11 = (int16x4_t *)((char *)a5 - 2 * a4);
    v98 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    v99 = v98;
    _X12 = (char *)&a5[1] + 6;
    v101 = *a5;
    _X14 = (int16x4_t *)((char *)a5 + 2 * a4);
    v103 = *_X14;
    _X14 = (int16x4_t *)((char *)_X14 + 14);
    v104 = v103;
    _X15 = (int16x4_t *)((char *)a5 + 4 * a4);
    v106 = *_X15;
    _X15 = (int16x4_t *)((char *)_X15 + 14);
    v107 = v106;
    _X16 = (int16x4_t *)((char *)a5 + 6 * a4);
    v109 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    v110 = v109;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    v118 = a2 + 4;
    v119 = 3 * a4;
    v120 = 8 * a4;
    v121 = 22 * a4;
    v122 = 12 * a4;
    v123 = 10 * a4;
    v124 = 2 * a6;
    v125 = 14 * a4;
    do
    {
      _X3 = (int16x4_t *)((char *)a5 + v123);
      _X2 = (int16x4_t *)((char *)a5 + v122);
      _X1 = (int16x4_t *)((char *)a5 + v125);
      _X17 = (char *)a5 + v121;
      result = &a5[v119];
      a5 = (int16x4_t *)((char *)a5 + v120);
      v130 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v96, *(int16x4_t *)v90.i8, 1), v93, *(int16x4_t *)v90.i8, 0), v99, *(int16x4_t *)v90.i8, 2), v101, *(int16x4_t *)v90.i8, 3);
      v131 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v99, *(int16x4_t *)v90.i8, 1), v96, *(int16x4_t *)v90.i8, 0), v101, *(int16x4_t *)v90.i8, 2);
      v132 = vmull_lane_s16(v101, *(int16x4_t *)v90.i8, 1);
      v133 = vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v90.i8, 1), v101, *(int16x4_t *)v90.i8, 0);
      _X5 = (char *)&a5[1] + 6;
      v101 = *a5;
      __asm { PRFM            #0, [X5] }
      v136 = vmlal_laneq_s16(v130, v104, v90, 4);
      v137 = vmlal_lane_s16(v131, v104, *(int16x4_t *)v90.i8, 3);
      v138 = vmlal_lane_s16(vmlal_lane_s16(v132, v99, *(int16x4_t *)v90.i8, 0), v104, *(int16x4_t *)v90.i8, 2);
      v93 = v104;
      v139 = *_X3;
      _X3 = (int16x4_t *)((char *)_X3 + 14);
      v104 = v139;
      __asm { PRFM            #0, [X3] }
      v141 = vmlal_laneq_s16(v136, v107, v90, 5);
      v142 = vmlal_laneq_s16(v137, v107, v90, 4);
      v143 = vmlal_lane_s16(v138, v107, *(int16x4_t *)v90.i8, 3);
      v144 = vmlal_lane_s16(v133, v107, *(int16x4_t *)v90.i8, 2);
      v96 = v107;
      v145 = *_X2;
      _X2 = (int16x4_t *)((char *)_X2 + 14);
      v107 = v145;
      __asm { PRFM            #0, [X2] }
      v147 = vmlal_laneq_s16(v141, v110, v90, 6);
      v148 = vmlal_laneq_s16(v142, v110, v90, 5);
      v149 = vmlal_laneq_s16(v143, v110, v90, 4);
      v150 = vmlal_lane_s16(v144, v110, *(int16x4_t *)v90.i8, 3);
      v99 = v110;
      v151 = *_X1;
      _X1 = (int16x4_t *)((char *)_X1 + 14);
      v110 = v151;
      __asm
      {
        PRFM            #0, [X1]
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      v157 = vmlal_laneq_s16(vmlal_laneq_s16(v148, *a5, v90, 6), v104, v90, 7);
      v158 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v149, *a5, v90, 5), v104, v90, 6), v107, v90, 7);
      v159 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v150, *a5, v90, 4), v104, v90, 5), v107, v90, 6), v151, v90, 7);
      *v24 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v147, *a5, v90, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      v160 = (int16x4_t *)((char *)v24 + v124);
      *v160 = vadd_s16(vshrn_n_s32(v157, 2uLL), (int16x4_t)0xE000E000E000E000);
      v161 = (int16x4_t *)((char *)v160 + v124);
      *v161 = vadd_s16(vshrn_n_s32(v158, 2uLL), (int16x4_t)0xE000E000E000E000);
      v162 = (int16x4_t *)((char *)v161 + v124);
      *v162 = vadd_s16(vshrn_n_s32(v159, 2uLL), (int16x4_t)0xE000E000E000E000);
      v118 -= 4;
      v24 = (int16x4_t *)((char *)v162 + v124);
    }
    while (v118 > 4);
  }
  return result;
}

uint64_t sub_1C9774D78(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v40;
  int16x8_t v42;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int8x16_t v62;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int8x16_t v88;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int8x16_t v101;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int8x16_t v114;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  int16x8_t *v124;
  uint64_t v125;
  int v126;
  int16x8_t v127;
  int16x8_t v129;
  int8x16_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int16x8_t v146;
  uint16x8_t v147;
  uint16x8_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int v154;
  BOOL v155;
  int16x8_t v156;
  int16x4_t v158;
  int16x8_t v159;
  int16x4_t v160;
  int16x4_t v166;
  int16x4_t v167;
  int16x4_t v168;
  int8x8_t v169;
  int16x4_t v175;
  int16x4_t v176;
  int16x4_t v177;
  int8x8_t v178;
  int16x4_t v184;
  int16x4_t v185;
  int16x4_t v186;
  int8x8_t v187;
  int16x4_t v193;
  int16x4_t v194;
  int16x4_t v195;
  int8x8_t v196;
  int16x4_t v202;
  int16x4_t v203;
  int16x4_t v204;
  int8x8_t v205;
  int16x4_t v211;
  int16x4_t v212;
  int16x4_t v213;
  int8x8_t v214;
  int16x4_t v219;
  int v220;
  uint64_t v221;
  int32x4_t v222;
  int16x4_t v224;
  int32x4_t v229;

  v7 = (a3 >> 16) & 3;
  v8 = 16 * a4;
  v9 = 2 * a4;
  v10 = 8 * a4;
  v11 = 2 * a6;
  if ((int)result < 8)
  {
    v24 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v12 = xmmword_1C9832610[(a3 & 3) - 1];
  v13 = xmmword_1C9832610[v7 - 1];
  v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  v17 = vdupq_laneq_s16(v12, 5);
  v18 = vdupq_laneq_s16(v12, 6);
  v19 = vdupq_laneq_s16(v12, 7);
  v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  v21 = vdupq_laneq_s16(v12, 4);
  v22 = v8 - 6;
  v23 = 8 * a4;
  v24 = a5;
  do
  {
    _X19 = (int8x16_t *)(v24 + 2 * (-3 * a4 - 3));
    v26 = _X19[1];
    v27 = (int16x8_t)vextq_s8(*_X19, v26, 2uLL);
    v28 = (int16x8_t)vextq_s8(*_X19, v26, 4uLL);
    v29 = (int16x8_t)vextq_s8(*_X19, v26, 6uLL);
    v30 = (int16x8_t)vextq_s8(*_X19, v26, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    v36 = (int16x8_t)vextq_s8(*_X19, v26, 0xAuLL);
    v37 = (int16x8_t)vextq_s8(*_X19, v26, 0xCuLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    v40 = (int16x8_t)vextq_s8(*_X19, v26, 0xEuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    v42 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X19, v14), v27, v15);
    _X19 = &_X19->i8[2 * a4];
    v44 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v42, v28, v16), v36, v17), v37, v18), v40, v19);
    v45 = (uint16x8_t)vmulq_s16(v29, v20);
    v46 = (uint16x8_t)vmulq_s16(v30, v21);
    v47 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8), *(int16x4_t *)v44.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v45, v46), v44), 2uLL);
    v48 = *(int16x8_t *)_X19;
    v49 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v55 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 6uLL);
    v56 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 8uLL);
    v57 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v48, v14), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xEuLL), v19);
    v58 = (uint16x8_t)vmulq_s16(v55, v20);
    v59 = (uint16x8_t)vmulq_s16(v56, v21);
    v60 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), *(int16x4_t *)v57.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v58, v59), v57), 2uLL);
    v61 = *(int16x8_t *)_X19;
    v62 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v68 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 6uLL);
    v69 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 8uLL);
    v70 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v61, v14), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xEuLL), v19);
    v71 = (uint16x8_t)vmulq_s16(v68, v20);
    v72 = (uint16x8_t)vmulq_s16(v69, v21);
    v73 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v71.i8), *(int16x4_t *)v70.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v71, v72), v70), 2uLL);
    v74 = *(int16x8_t *)_X19;
    v75 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v81 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 6uLL);
    v82 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 8uLL);
    v83 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v14), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xEuLL), v19);
    v84 = (uint16x8_t)vmulq_s16(v81, v20);
    v85 = (uint16x8_t)vmulq_s16(v82, v21);
    v86 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v85.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v83.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v84, v85), v83), 2uLL);
    v87 = *(int16x8_t *)_X19;
    v88 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v94 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 6uLL);
    v95 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 8uLL);
    v96 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v87, v14), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xEuLL), v19);
    v97 = (uint16x8_t)vmulq_s16(v94, v20);
    v98 = (uint16x8_t)vmulq_s16(v95, v21);
    v99 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v98.i8, *(uint16x4_t *)v97.i8), *(int16x4_t *)v96.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v97, v98), v96), 2uLL);
    v100 = *(int16x8_t *)_X19;
    v101 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    v107 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 6uLL);
    v108 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 8uLL);
    v109 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v14), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xEuLL), v19);
    v110 = (uint16x8_t)vmulq_s16(v107, v20);
    v111 = (uint16x8_t)vmulq_s16(v108, v21);
    v112 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v111.i8, *(uint16x4_t *)v110.i8), *(int16x4_t *)v109.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v110, v111), v109), 2uLL);
    v113 = *(int16x8_t *)_X19;
    v114 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 6uLL);
    v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 8uLL);
    v121 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v113, v14), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xEuLL), v19);
    v122 = (uint16x8_t)vmulq_s16(v119, v20);
    v123 = (uint16x8_t)vmulq_s16(v120, v21);
    v124 = (int16x8_t *)a7;
    v125 = a5;
    v126 = a2 + 1;
    v127 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v123.i8, *(uint16x4_t *)v122.i8), *(int16x4_t *)v121.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v122, v123), v121), 2uLL);
    do
    {
      _X22 = v125 + v23;
      v129 = *(int16x8_t *)(v125 + v23 - 6);
      v130 = *(int8x16_t *)(v125 + v23 + 10);
      v131 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 2uLL);
      v132 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 4uLL);
      v133 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 6uLL);
      v134 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 8uLL);
      v135 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xAuLL);
      v136 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xCuLL);
      v137 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xEuLL);
      v138 = vmlaq_s16(vmulq_s16(v129, v14), v131, v15);
      v131.i64[0] = 0x38000000380000;
      v131.i64[1] = 0x38000000380000;
      v139.i64[0] = 0x38000000380000;
      v139.i64[1] = 0x38000000380000;
      v140 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v131, *(int16x4_t *)v47.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 1);
      v141 = vmlal_high_lane_s16(vmlal_high_lane_s16(v139, v47, *(int16x4_t *)v13.i8, 0), v60, *(int16x4_t *)v13.i8, 1);
      v47 = v60;
      v60 = v73;
      v73 = v86;
      v86 = v99;
      v99 = v112;
      v112 = v127;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v125 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      v146 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v138, v132, v16), v135, v17), v136, v18), v137, v19);
      v147 = (uint16x8_t)vmulq_s16(v133, v20);
      v148 = (uint16x8_t)vmulq_s16(v134, v21);
      v149 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v147.i8);
      v150 = (int32x4_t)vaddl_high_u16(v147, v148);
      v151 = vaddw_s16(v149, *(int16x4_t *)v146.i8);
      v152 = vaddw_high_s16(v150, v146);
      *(int16x4_t *)v150.i8 = vshrn_n_s32(v151, 2uLL);
      v153 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v140, *(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v73.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v86.i8, v13, 4), *(int16x4_t *)v99.i8, v13, 5), *(int16x4_t *)v112.i8, v13, 6), *(int16x4_t *)v150.i8, v13,
               7);
      v127 = vshrn_high_n_s32(*(int16x4_t *)v150.i8, v152, 2uLL);
      *v124 = vshrn_high_n_s32(vshrn_n_s32(v153, 6uLL), vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v141, v60, *(int16x4_t *)v13.i8, 2), v73, *(int16x4_t *)v13.i8, 3), v86, v13, 4), v99, v13, 5), v112, v13, 6),
                  vshrn_n_s32(v152, 2uLL),
                  v13,
                  7),
                6uLL);
      --v126;
      v125 += v9;
      v124 = (int16x8_t *)((char *)v124 + v11);
    }
    while (v126 > 1);
    a7 += 2;
    v24 += 16;
    v154 = result - 8;
    v22 += 16;
    v23 += 16;
    v155 = result > 0xF;
    result = (result - 8);
  }
  while (v155);
  if (v154)
  {
LABEL_9:
    v156 = xmmword_1C9832610[(a3 & 3) - 1];
    _X14 = (int8x8_t *)(v24 - 6 * a4);
    v158 = *(int16x4_t *)((char *)&_X14[-1] + 2);
    _X14 = (int8x8_t *)((char *)_X14 - 6);
    v159 = xmmword_1C9832610[v7 - 1];
    v160 = (int16x4_t)_X14[1];
    __asm { PRFUM           #0, [X14,#0x1E] }
    _X13 = &_X14[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X14 + 2 * a4);
    v166 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v158, (int8x8_t)v160, 2uLL), *(int16x4_t *)v156.i8, 1), v158, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v158, (int8x8_t)v160, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v158, (int8x8_t)v160, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v160,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v160, _X14[2], 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v160, _X14[2], 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v160, _X14[2], 6uLL),
               v156,
               7),
             2uLL);
    v167 = *_X13;
    v168 = _X13[1];
    v169 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v175 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v167, (int8x8_t)v168, 2uLL), *(int16x4_t *)v156.i8, 1), v167, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v167, (int8x8_t)v168, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v167, (int8x8_t)v168, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v168,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v168, v169, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v168, v169, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v168, v169, 6uLL),
               v156,
               7),
             2uLL);
    v176 = *_X13;
    v177 = _X13[1];
    v178 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v184 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v176, (int8x8_t)v177, 2uLL), *(int16x4_t *)v156.i8, 1), v176, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v176, (int8x8_t)v177, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v176, (int8x8_t)v177, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v177,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v177, v178, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v177, v178, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v177, v178, 6uLL),
               v156,
               7),
             2uLL);
    v185 = *_X13;
    v186 = _X13[1];
    v187 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v193 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v185, (int8x8_t)v186, 2uLL), *(int16x4_t *)v156.i8, 1), v185, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v185, (int8x8_t)v186, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v185, (int8x8_t)v186, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v186,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v186, v187, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v186, v187, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v186, v187, 6uLL),
               v156,
               7),
             2uLL);
    v194 = *_X13;
    v195 = _X13[1];
    v196 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v202 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v194, (int8x8_t)v195, 2uLL), *(int16x4_t *)v156.i8, 1), v194, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v194, (int8x8_t)v195, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v194, (int8x8_t)v195, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v195,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v195, v196, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v195, v196, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v195, v196, 6uLL),
               v156,
               7),
             2uLL);
    v203 = *_X13;
    v204 = _X13[1];
    v205 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    v211 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v203, (int8x8_t)v204, 2uLL), *(int16x4_t *)v156.i8, 1), v203, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v203, (int8x8_t)v204, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v203, (int8x8_t)v204, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v204,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v204, v205, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v204, v205, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v204, v205, 6uLL),
               v156,
               7),
             2uLL);
    v212 = *_X13;
    v213 = _X13[1];
    v214 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    v219 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v212, (int8x8_t)v213, 2uLL), *(int16x4_t *)v156.i8, 1), v212, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v212, (int8x8_t)v213, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v212, (int8x8_t)v213, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v213,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v213, v214, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v213, v214, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v213, v214, 6uLL),
               v156,
               7),
             2uLL);
    v220 = a2 + 1;
    v221 = v8 - 6;
    do
    {
      v222.i64[0] = 0x38000000380000;
      v222.i64[1] = 0x38000000380000;
      _X14 = v24 + v10;
      v224 = *(int16x4_t *)(v24 + v10 + 2);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v221;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      v229 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v166, *(int16x4_t *)v159.i8, 0), v175, *(int16x4_t *)v159.i8, 1), v184, *(int16x4_t *)v159.i8, 2), v193, *(int16x4_t *)v159.i8, 3), v202, v159, 4), v211,
                 v159,
                 5),
               v219,
               v159,
               6);
      v166 = v175;
      v175 = v184;
      v184 = v193;
      v193 = v202;
      v202 = v211;
      v211 = v219;
      v219 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v224, 2uLL), *(int16x4_t *)v156.i8, 1), *(int16x4_t *)(v24 + v10 - 6), *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v224, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v224, 6uLL), *(int16x4_t *)v156.i8,
                         3),
                       v224,
                       v156,
                       4),
                     (int16x4_t)vext_s8((int8x8_t)v224, *(int8x8_t *)(v24 + v10 + 10), 2uLL),
                     v156,
                     5),
                   (int16x4_t)vext_s8((int8x8_t)v224, *(int8x8_t *)(v24 + v10 + 10), 4uLL),
                   v156,
                   6),
                 (int16x4_t)vext_s8((int8x8_t)v224, *(int8x8_t *)(v24 + v10 + 10), 6uLL),
                 v156,
                 7),
               2uLL);
      --v220;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v229, v219, v159, 7), 6uLL);
      v24 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v220 > 1);
  }
  return result;
}

uint64_t sub_1C977556C(uint64_t result, int a2, char a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int8x16_t *v15;
  _OWORD *v16;
  int v18;
  int8x16_t v19;
  int16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int v36;
  BOOL v37;
  int16x4_t v38;
  int v39;
  uint64_t v40;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = vdupq_lane_s16(v10, 0);
  v12 = vdupq_lane_s16(v10, 3);
  v13 = vdupq_lane_s16(v10, 1);
  v14 = vdupq_lane_s16(v10, 2);
  v15 = (int8x16_t *)((char *)&_X4[-1] + 4);
  do
  {
    v16 = a7;
    _X15 = v15;
    v18 = a2 + 1;
    do
    {
      v19 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      v27 = (int16x8_t)vextq_s8(*_X15, v19, 8uLL);
      v28 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v19, 0xCuLL), v12);
      v29 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v19, 4uLL), v13);
      v30 = (uint16x8_t)vmulq_s16(v27, v14);
      v31 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v29.i8);
      v32 = (int32x4_t)vaddl_high_u16(v29, v30);
      v33 = vaddw_s16(v31, *(int16x4_t *)v28.i8);
      v34 = vaddw_high_s16(v32, v28);
      *(uint16x4_t *)v32.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v33, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v32.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v34, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *v16 = v32;
      --v18;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    _X4 += 2;
    v36 = result - 8;
    ++v15;
    v37 = result > 0xF;
    result = (result - 8);
  }
  while (v37);
  if (v36)
  {
LABEL_9:
    v38 = qword_1C9832640[2 * (a3 & 7) - 2];
    v39 = a2 + 1;
    v40 = v7 - 4;
    do
    {
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = (char *)_X4 + v40;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X4, v38, 1), *(int16x4_t *)((char *)_X4 - 4), v38, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X4->i8, *(int8x16_t *)_X4->i8, 4uLL), v38, 2), *(int16x8_t *)_X4->i8, v38, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      --v39;
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v39 > 1);
  }
  return result;
}

unint64_t sub_1C97756BC(unint64_t result, int a2, unint64_t a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x4_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint16x4_t *v20;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v30;
  int16x8_t v32;
  int16x8_t v33;
  char *v34;
  char *v35;
  char *v36;
  int16x4_t *v38;
  int v39;
  uint16x4_t *v40;
  char *v41;
  int16x8_t v42;
  uint16x8_t v43;
  int16x8_t v45;
  uint16x8_t v47;
  uint16x8_t v48;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int v68;
  BOOL v69;
  int16x4_t v70;
  int16x4_t v72;
  int16x4_t v73;
  int16x4_t v75;
  int16x4_t v78;
  int16x4_t v79;
  int v81;
  int32x4_t v82;
  int32x4_t v85;
  int32x4_t v88;
  int16x4_t v89;
  int32x4_t v95;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v20 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = vdupq_lane_s16(v11, 0);
  v13 = vdupq_lane_s16(v11, 3);
  v14 = vdupq_lane_s16(v11, 1);
  v15 = vdupq_lane_s16(v11, 2);
  v16 = &_X4[2 * a4];
  v17 = (char *)_X4 + 4 * a4;
  v18 = (char *)_X4 + 14 * a4;
  v19 = (char *)_X4 + 6 * a4;
  v20 = a7;
  do
  {
    _X20 = (_OWORD *)((char *)_X4 - 2 * a4);
    v22 = *(int16x8_t *)_X20;
    _X20 = (_OWORD *)((char *)_X20 + 30);
    v23 = v22;
    __asm { PRFM            #0, [X20] }
    _X23 = (_OWORD *)((char *)_X4 + 2 * a4);
    v30 = *(int16x8_t *)_X4->i8;
    __asm { PRFUM           #0, [X4,#0x1E] }
    v32 = *(int16x8_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 30);
    v33 = v32;
    v34 = v19;
    v35 = v18;
    v36 = v17;
    __asm { PRFM            #0, [X23] }
    v38 = v16;
    v39 = a2 + 2;
    v40 = a7;
    v41 = (char *)a7 + 2 * a6;
    do
    {
      v42 = vmulq_s16(v23, v12);
      v23 = v33;
      v43 = (uint16x8_t)vmulq_s16(v30, v14);
      _X27 = (uint64_t)&v36[v10 + 30];
      v45 = *(int16x8_t *)&v36[v10];
      __asm { PRFM            #0, [X27] }
      v47 = (uint16x8_t)vmulq_s16(v33, v15);
      v48 = (uint16x8_t)vmulq_s16(v33, v14);
      _X27 = (uint64_t)&v34[v10 + 30];
      v33 = *(int16x8_t *)&v34[v10];
      __asm { PRFM            #0, [X27] }
      _X27 = &v35[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 8];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      v57 = vmlaq_s16(v42, v45, v13);
      v58 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8);
      v59 = (int32x4_t)vaddl_high_u16(v43, v47);
      v60 = vaddw_s16(v58, *(int16x4_t *)v57.i8);
      v61 = vaddw_high_s16(v59, v57);
      v62 = vmlaq_s16(vmulq_s16(v30, v12), v33, v13);
      v63 = (uint16x8_t)vmulq_s16(v45, v15);
      v64 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v48.i8);
      v65 = (int32x4_t)vaddl_high_u16(v63, v48);
      v66 = vaddw_s16(v64, *(int16x4_t *)v62.i8);
      v67 = vaddw_high_s16(v65, v62);
      *(uint16x4_t *)v65.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v60, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v65.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v61, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)v40[v10 / 8].i8 = v65;
      *(uint16x4_t *)v61.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v66, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v61.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v67, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)&v41[v10] = v61;
      v41 += v9;
      v40 = (uint16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      v38 = (int16x4_t *)((char *)v38 + v8);
      v36 += v8;
      v35 += v8;
      v34 += v8;
      v30 = v45;
    }
    while (v39 > 2);
    v20 += 2;
    _X4 += 2;
    v68 = result - 8;
    v10 += 16;
    v69 = result > 0xF;
    result = (result - 8);
  }
  while (v69);
  if (v68)
  {
LABEL_9:
    v70 = qword_1C9832640[2 * v7 - 2];
    _X11 = (int16x4_t *)((char *)_X4 - 2 * a4);
    v72 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    v73 = v72;
    __asm { PRFM            #0, [X11] }
    v75 = *_X4;
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (int16x4_t *)((char *)_X4 + 2 * a4);
    v78 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    v79 = v78;
    __asm { PRFM            #0, [X11] }
    v81 = a2 + 2;
    do
    {
      v82 = vmlal_lane_s16(vmull_lane_s16(v75, v70, 1), v73, v70, 0);
      _X17 = (int16x4_t *)((char *)_X4 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[2 * a4];
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      v85 = vmlal_lane_s16(vmull_lane_s16(v79, v70, 1), v75, v70, 0);
      _X16 = (char *)&_X4[1] + 6;
      v75 = *_X4;
      __asm { PRFM            #0, [X16] }
      v88 = vmlal_lane_s16(v82, v79, v70, 2);
      v73 = v79;
      v89 = *_X17;
      _X17 = (int16x4_t *)((char *)_X17 + 14);
      v79 = v89;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      v95 = vmlal_lane_s16(vmlal_lane_s16(v85, *_X4, v70, 2), v89, v70, 3);
      *v20 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v88, *_X4, v70, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)((char *)v20 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(v95, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v20 = (uint16x4_t *)((char *)v20 + v9);
      v81 -= 2;
    }
    while (v81 > 2);
  }
  return result;
}

uint64_t sub_1C9775948(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  uint64_t v17;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int16x8_t v63;
  _OWORD *v64;
  uint64_t v65;
  int v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x8_t v70;
  int8x16_t v71;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int v83;
  BOOL v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v88;
  int16x8_t v89;
  int16x4_t v94;
  int16x4_t v100;
  int16x4_t v105;
  int v106;
  int32x4_t v112;

  v7 = (a3 >> 16) & 7;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = vdupq_lane_s16(v10, 0);
  v13 = vdupq_lane_s16(v10, 3);
  v14 = vdupq_lane_s16(v10, 1);
  v15 = vdupq_lane_s16(v10, 2);
  v16 = 12 * a4 - 4;
  v17 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (_OWORD *)(_X11 + 2 * (-2 - a4));
    v20 = *(int16x8_t *)_X7;
    v21 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v30 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 4uLL);
    v31 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 8uLL);
    v32 = vmlaq_s16(vmulq_s16(v20, v12), (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xCuLL), v13);
    v33 = (uint16x8_t)vmulq_s16(v30, v14);
    v34 = (uint16x8_t)vmulq_s16(v31, v15);
    v35 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v33.i8);
    v36 = (int32x4_t)vaddl_high_u16(v33, v34);
    _X7 = _X11 - 4;
    v38 = *(int16x8_t *)(_X11 - 4);
    v39 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16(v35, *(int16x4_t *)v32.i8), 2uLL), vaddw_high_s16(v36, v32), 2uLL);
    v40 = *(int8x16_t *)(_X11 + 12);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (_OWORD *)(_X11 - 4 + 2 * a4);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 4uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 8uLL);
    v48 = vmlaq_s16(vmulq_s16(v38, v12), (int16x8_t)vextq_s8((int8x16_t)v38, v40, 0xCuLL), v13);
    v49 = (uint16x8_t)vmulq_s16(v46, v14);
    v50 = (uint16x8_t)vmulq_s16(v47, v15);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v48.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v49, v50), v48), 2uLL);
    v52 = *(int16x8_t *)_X7;
    v53 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v58 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v60 = vmlaq_s16(vmulq_s16(v52, v12), (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL), v13);
    v61 = (uint16x8_t)vmulq_s16(v58, v14);
    v62 = (uint16x8_t)vmulq_s16(v59, v15);
    v63 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v62.i8, *(uint16x4_t *)v61.i8), *(int16x4_t *)v60.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v62), v60), 2uLL);
    v64 = a7;
    v65 = a5;
    v66 = a2 + 1;
    do
    {
      v67 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, v11, 1), *(int16x4_t *)v39.i8, v11, 0);
      v68 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, v11, 1), v39, v11, 0);
      v39 = v51;
      v51 = v63;
      _X21 = v65 + v17;
      v70 = *(int16x8_t *)(v65 + v17 - 4);
      v71 = *(int8x16_t *)(v65 + v17 + 12);
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v65 + v16;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v76 = (int16x8_t)vextq_s8((int8x16_t)v70, v71, 4uLL);
      v77 = (int16x8_t)vextq_s8((int8x16_t)v70, v71, 8uLL);
      v78 = vmlaq_s16(vmulq_s16(v70, v12), (int16x8_t)vextq_s8((int8x16_t)v70, v71, 0xCuLL), v13);
      v79 = (uint16x8_t)vmulq_s16(v76, v14);
      v80 = (uint16x8_t)vmulq_s16(v77, v15);
      v81 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8);
      v82 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78);
      *(int16x4_t *)v78.i8 = vshrn_n_s32(vaddw_s16(v81, *(int16x4_t *)v78.i8), 2uLL);
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v67, *(int16x4_t *)v51.i8, v11, 2), *(int16x4_t *)v78.i8, v11, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v68, v51, v11, 2), vshrn_n_s32(v82, 2uLL), v11, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v63 = vshrn_high_n_s32(*(int16x4_t *)v78.i8, v82, 2uLL);
      *v64 = v67;
      --v66;
      v65 += v8;
      v64 = (_OWORD *)((char *)v64 + v9);
    }
    while (v66 > 1);
    a7 += 2;
    _X11 += 16;
    v83 = result - 8;
    v16 += 16;
    v17 += 16;
    v84 = result > 0xF;
    result = (result - 8);
  }
  while (v84);
  if (v83)
  {
LABEL_9:
    v85 = qword_1C9832640[2 * (a3 & 7) - 2];
    v86 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v88 = *(int16x4_t *)_X13;
    v89 = *(int16x8_t *)(_X13 + 4);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v94 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, v85, 1), v88, v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL), v85, 2), v89, v85, 3), 2uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint64_t *)(_X11 - 4 + 2 * a4);
    v100 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)_X11, v85, 1), *(int16x4_t *)(_X11 - 4), v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X11, *(int8x16_t *)_X11, 4uLL), v85, 2), *(int16x8_t *)_X11, v85, 3), 2uLL);
    v89.i64[0] = *_X13;
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v105 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 2 * a4), v85, 1), *(int16x4_t *)v89.i8, v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 2 * a4), *(int8x16_t *)(_X11 + 2 * a4), 4uLL), v85, 2), *(int16x8_t *)(_X11 + 2 * a4), v85, 3), 2uLL);
    v106 = a2 + 1;
    do
    {
      _X14 = _X11 + 4 * a4;
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v112 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v100, v86, 1), v94, v86, 0), v105, v86, 2);
      v94 = v100;
      v100 = v105;
      v105 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 4 * a4), v85, 1), *(int16x4_t *)(_X11 + 4 * a4 - 4), v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 4 * a4), *(int8x16_t *)(_X11 + 4 * a4), 4uLL), v85, 2), *(int16x8_t *)(_X11 + 4 * a4), v85, 3), 2uLL);
      --v106;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v112, v105, v86, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      _X11 += v8;
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v106 > 1);
  }
  return result;
}

uint64_t sub_1C9775CC8(uint64_t result, int a2, char a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int8x16_t *v15;
  _OWORD *v16;
  int v18;
  int8x16_t v19;
  int16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int v36;
  BOOL v37;
  int16x4_t v38;
  int v39;
  uint64_t v40;

  v7 = 8 * a4;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = vdupq_lane_s16(v10, 0);
  v12 = vdupq_lane_s16(v10, 3);
  v13 = vdupq_lane_s16(v10, 1);
  v14 = vdupq_lane_s16(v10, 2);
  v15 = (int8x16_t *)((char *)&_X4[-1] + 4);
  do
  {
    v16 = a7;
    _X15 = v15;
    v18 = a2 + 1;
    do
    {
      v19 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      v27 = (int16x8_t)vextq_s8(*_X15, v19, 8uLL);
      v28 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v19, 0xCuLL), v12);
      v29 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v19, 4uLL), v13);
      v30 = (uint16x8_t)vmulq_s16(v27, v14);
      v31 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v29.i8);
      v32 = (int32x4_t)vaddl_high_u16(v29, v30);
      v33 = vaddw_s16(v31, *(int16x4_t *)v28.i8);
      v34 = vaddw_high_s16(v32, v28);
      *(int16x4_t *)v32.i8 = vadd_s16(vshrn_n_s32(v33, 2uLL), (int16x4_t)0xE000E000E000E000);
      v32.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v34, 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *v16 = v32;
      --v18;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    _X4 += 2;
    v36 = result - 8;
    ++v15;
    v37 = result > 0xF;
    result = (result - 8);
  }
  while (v37);
  if (v36)
  {
LABEL_9:
    v38 = qword_1C9832640[2 * (a3 & 7) - 2];
    v39 = a2 + 1;
    v40 = v7 - 4;
    do
    {
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = (char *)_X4 + v40;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X4, v38, 1), *(int16x4_t *)((char *)_X4 - 4), v38, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X4->i8, *(int8x16_t *)_X4->i8, 4uLL), v38, 2), *(int16x8_t *)_X4->i8, v38, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      --v39;
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v39 > 1);
  }
  return result;
}

unint64_t sub_1C9775E18(unint64_t result, int a2, unint64_t a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x4_t *v16;
  char *v17;
  char *v18;
  char *v19;
  int16x4_t *v20;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v30;
  int16x8_t v32;
  int16x8_t v33;
  char *v34;
  char *v35;
  char *v36;
  int16x4_t *v38;
  int v39;
  int16x4_t *v40;
  char *v41;
  int16x8_t v42;
  uint16x8_t v43;
  int16x8_t v45;
  uint16x8_t v47;
  uint16x8_t v48;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int v68;
  BOOL v69;
  int16x4_t v70;
  int16x4_t v72;
  int16x4_t v73;
  int16x4_t v75;
  int16x4_t v78;
  int16x4_t v79;
  int v81;
  int32x4_t v82;
  int32x4_t v85;
  int32x4_t v88;
  int16x4_t v89;
  int32x4_t v95;

  v7 = (a3 >> 16) & 7;
  v8 = 4 * a4;
  v9 = 4 * a6;
  if ((int)result < 8)
  {
    v20 = a7;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = vdupq_lane_s16(v11, 0);
  v13 = vdupq_lane_s16(v11, 3);
  v14 = vdupq_lane_s16(v11, 1);
  v15 = vdupq_lane_s16(v11, 2);
  v16 = &_X4[2 * a4];
  v17 = (char *)_X4 + 4 * a4;
  v18 = (char *)_X4 + 14 * a4;
  v19 = (char *)_X4 + 6 * a4;
  v20 = a7;
  do
  {
    _X20 = (_OWORD *)((char *)_X4 - 2 * a4);
    v22 = *(int16x8_t *)_X20;
    _X20 = (_OWORD *)((char *)_X20 + 30);
    v23 = v22;
    __asm { PRFM            #0, [X20] }
    _X23 = (_OWORD *)((char *)_X4 + 2 * a4);
    v30 = *(int16x8_t *)_X4->i8;
    __asm { PRFUM           #0, [X4,#0x1E] }
    v32 = *(int16x8_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 30);
    v33 = v32;
    v34 = v19;
    v35 = v18;
    v36 = v17;
    __asm { PRFM            #0, [X23] }
    v38 = v16;
    v39 = a2 + 2;
    v40 = a7;
    v41 = (char *)a7 + 2 * a6;
    do
    {
      v42 = vmulq_s16(v23, v12);
      v23 = v33;
      v43 = (uint16x8_t)vmulq_s16(v30, v14);
      _X27 = (uint64_t)&v36[v10 + 30];
      v45 = *(int16x8_t *)&v36[v10];
      __asm { PRFM            #0, [X27] }
      v47 = (uint16x8_t)vmulq_s16(v33, v15);
      v48 = (uint16x8_t)vmulq_s16(v33, v14);
      _X27 = (uint64_t)&v34[v10 + 30];
      v33 = *(int16x8_t *)&v34[v10];
      __asm { PRFM            #0, [X27] }
      _X27 = &v35[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 8];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      v57 = vmlaq_s16(v42, v45, v13);
      v58 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8);
      v59 = (int32x4_t)vaddl_high_u16(v43, v47);
      v60 = vaddw_s16(v58, *(int16x4_t *)v57.i8);
      v61 = vaddw_high_s16(v59, v57);
      v62 = vmlaq_s16(vmulq_s16(v30, v12), v33, v13);
      v63 = (uint16x8_t)vmulq_s16(v45, v15);
      v64 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v48.i8);
      v65 = (int32x4_t)vaddl_high_u16(v63, v48);
      v66 = vaddw_s16(v64, *(int16x4_t *)v62.i8);
      v67 = vaddw_high_s16(v65, v62);
      *(int16x4_t *)v65.i8 = vadd_s16(vshrn_n_s32(v60, 2uLL), (int16x4_t)0xE000E000E000E000);
      v65.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v61, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v40[v10 / 8].i8 = v65;
      *(int16x4_t *)v61.i8 = vadd_s16(vshrn_n_s32(v66, 2uLL), (int16x4_t)0xE000E000E000E000);
      v61.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v67, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v41[v10] = v61;
      v41 += v9;
      v40 = (int16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      v38 = (int16x4_t *)((char *)v38 + v8);
      v36 += v8;
      v35 += v8;
      v34 += v8;
      v30 = v45;
    }
    while (v39 > 2);
    v20 += 2;
    _X4 += 2;
    v68 = result - 8;
    v10 += 16;
    v69 = result > 0xF;
    result = (result - 8);
  }
  while (v69);
  if (v68)
  {
LABEL_9:
    v70 = qword_1C9832640[2 * v7 - 2];
    _X11 = (int16x4_t *)((char *)_X4 - 2 * a4);
    v72 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    v73 = v72;
    __asm { PRFM            #0, [X11] }
    v75 = *_X4;
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (int16x4_t *)((char *)_X4 + 2 * a4);
    v78 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    v79 = v78;
    __asm { PRFM            #0, [X11] }
    v81 = a2 + 2;
    do
    {
      v82 = vmlal_lane_s16(vmull_lane_s16(v75, v70, 1), v73, v70, 0);
      _X17 = (int16x4_t *)((char *)_X4 + 6 * a4);
      result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[2 * a4];
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      v85 = vmlal_lane_s16(vmull_lane_s16(v79, v70, 1), v75, v70, 0);
      _X16 = (char *)&_X4[1] + 6;
      v75 = *_X4;
      __asm { PRFM            #0, [X16] }
      v88 = vmlal_lane_s16(v82, v79, v70, 2);
      v73 = v79;
      v89 = *_X17;
      _X17 = (int16x4_t *)((char *)_X17 + 14);
      v79 = v89;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      v95 = vmlal_lane_s16(vmlal_lane_s16(v85, *_X4, v70, 2), v89, v70, 3);
      *v20 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v88, *_X4, v70, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v20 + 2 * a6) = vadd_s16(vshrn_n_s32(v95, 2uLL), (int16x4_t)0xE000E000E000E000);
      v20 = (int16x4_t *)((char *)v20 + v9);
      v81 -= 2;
    }
    while (v81 > 2);
  }
  return result;
}

uint64_t sub_1C97760A4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  uint64_t v17;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int16x8_t v63;
  int16x8_t *v64;
  uint64_t v65;
  int v66;
  int16x8_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  uint16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int v87;
  BOOL v88;
  int16x4_t v89;
  int16x4_t v90;
  int16x4_t v92;
  int16x8_t v93;
  int16x4_t v98;
  int16x4_t v104;
  int16x4_t v105;
  int16x4_t v110;
  int v111;
  int32x4_t v112;
  int32x4_t v118;

  v7 = (a3 >> 16) & 7;
  v8 = 2 * a4;
  v9 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  v10 = qword_1C9832640[2 * (a3 & 7) - 2];
  v11 = qword_1C9832640[2 * v7 - 2];
  v12 = vdupq_lane_s16(v10, 0);
  v13 = vdupq_lane_s16(v10, 3);
  v14 = vdupq_lane_s16(v10, 1);
  v15 = vdupq_lane_s16(v10, 2);
  v16 = 12 * a4 - 4;
  v17 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (_OWORD *)(_X11 + 2 * (-2 - a4));
    v20 = *(int16x8_t *)_X7;
    v21 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v30 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 4uLL);
    v31 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 8uLL);
    v32 = vmlaq_s16(vmulq_s16(v20, v12), (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xCuLL), v13);
    v33 = (uint16x8_t)vmulq_s16(v30, v14);
    v34 = (uint16x8_t)vmulq_s16(v31, v15);
    v35 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v33.i8);
    v36 = (int32x4_t)vaddl_high_u16(v33, v34);
    _X7 = _X11 - 4;
    v38 = *(int16x8_t *)(_X11 - 4);
    v39 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16(v35, *(int16x4_t *)v32.i8), 2uLL), vaddw_high_s16(v36, v32), 2uLL);
    v40 = *(int8x16_t *)(_X11 + 12);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (_OWORD *)(_X11 - 4 + 2 * a4);
    v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 4uLL);
    v47 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 8uLL);
    v48 = vmlaq_s16(vmulq_s16(v38, v12), (int16x8_t)vextq_s8((int8x16_t)v38, v40, 0xCuLL), v13);
    v49 = (uint16x8_t)vmulq_s16(v46, v14);
    v50 = (uint16x8_t)vmulq_s16(v47, v15);
    v51 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v48.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v49, v50), v48), 2uLL);
    v52 = *(int16x8_t *)_X7;
    v53 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    v58 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    v60 = vmlaq_s16(vmulq_s16(v52, v12), (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL), v13);
    v61 = (uint16x8_t)vmulq_s16(v58, v14);
    v62 = (uint16x8_t)vmulq_s16(v59, v15);
    v63 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v62.i8, *(uint16x4_t *)v61.i8), *(int16x4_t *)v60.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v62), v60), 2uLL);
    v64 = (int16x8_t *)a7;
    v65 = a5;
    v66 = a2 + 1;
    do
    {
      _X21 = v65 + v17;
      v68 = *(int16x8_t *)(v65 + v17 - 4);
      v69 = *(int8x16_t *)(v65 + v17 + 12);
      v70 = (int16x8_t)vextq_s8((int8x16_t)v68, v69, 4uLL);
      v71 = (int16x8_t)vextq_s8((int8x16_t)v68, v69, 8uLL);
      v72 = vmlaq_s16(vmulq_s16(v68, v12), (int16x8_t)vextq_s8((int8x16_t)v68, v69, 0xCuLL), v13);
      v73 = (uint16x8_t)vmulq_s16(v70, v14);
      v74 = (int32x4_t)vmulq_s16(v71, v15);
      v75 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v74.i8, *(uint16x4_t *)v73.i8);
      v76 = (int32x4_t)vaddl_high_u16(v73, (uint16x8_t)v74);
      v74.i64[0] = 0x38000000380000;
      v74.i64[1] = 0x38000000380000;
      v77.i64[0] = 0x38000000380000;
      v77.i64[1] = 0x38000000380000;
      v78 = vmlal_lane_s16(vmlal_lane_s16(v74, *(int16x4_t *)v39.i8, v11, 0), *(int16x4_t *)v51.i8, v11, 1);
      v79 = vmlal_high_lane_s16(vmlal_high_lane_s16(v77, v39, v11, 0), v51, v11, 1);
      v39 = v51;
      v51 = v63;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v65 + v16;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      v84 = vaddw_s16(v75, *(int16x4_t *)v72.i8);
      v85 = vaddw_high_s16(v76, v72);
      *(int16x4_t *)v84.i8 = vshrn_n_s32(v84, 2uLL);
      v86 = vmlal_lane_s16(vmlal_lane_s16(v78, *(int16x4_t *)v51.i8, v11, 2), *(int16x4_t *)v84.i8, v11, 3);
      v63 = vshrn_high_n_s32(*(int16x4_t *)v84.i8, v85, 2uLL);
      *v64 = vshrn_high_n_s32(vshrn_n_s32(v86, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v79, v51, v11, 2), vshrn_n_s32(v85, 2uLL), v11, 3), 6uLL);
      --v66;
      v65 += v8;
      v64 = (int16x8_t *)((char *)v64 + v9);
    }
    while (v66 > 1);
    a7 += 2;
    _X11 += 16;
    v87 = result - 8;
    v16 += 16;
    v17 += 16;
    v88 = result > 0xF;
    result = (result - 8);
  }
  while (v88);
  if (v87)
  {
LABEL_9:
    v89 = qword_1C9832640[2 * (a3 & 7) - 2];
    v90 = qword_1C9832640[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    v92 = *(int16x4_t *)_X13;
    v93 = *(int16x8_t *)(_X13 + 4);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v89, 1), v92, v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v89, 2), v93, v89, 3), 2uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (int16x4_t *)(_X11 - 4 + 2 * a4);
    v104 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)_X11, v89, 1), *(int16x4_t *)(_X11 - 4), v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X11, *(int8x16_t *)_X11, 4uLL), v89, 2), *(int16x8_t *)_X11, v89, 3), 2uLL);
    v105 = *_X13;
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 2 * a4), v89, 1), v105, v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 2 * a4), *(int8x16_t *)(_X11 + 2 * a4), 4uLL), v89, 2), *(int16x8_t *)(_X11 + 2 * a4), v89, 3), 2uLL);
    v111 = a2 + 1;
    do
    {
      v112.i64[0] = 0x38000000380000;
      v112.i64[1] = 0x38000000380000;
      _X14 = _X11 + 4 * a4;
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      v118 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v112, v98, v90, 0), v104, v90, 1), v110, v90, 2);
      v98 = v104;
      v104 = v110;
      v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 4 * a4), v89, 1), *(int16x4_t *)(_X11 + 4 * a4 - 4), v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 4 * a4), *(int8x16_t *)(_X11 + 4 * a4), 4uLL), v89, 2), *(int16x8_t *)(_X11 + 4 * a4), v89, 3), 2uLL);
      --v111;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v118, v110, v90, 3), 6uLL);
      _X11 += v8;
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v111 > 1);
  }
  return result;
}

uint64_t sub_1C9776418(uint64_t result, FILE *__stream)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;

  v3 = (unsigned __int8 *)result;
  v4 = dword_1ED1ACCC0;
  if (dword_1ED1ACCC0 >= 6)
  {
    result = fprintf(__stream, "=========== Picture Parameter Set ID: %d ===========\n", *(unsigned __int8 *)result);
    v4 = dword_1ED1ACCC0;
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "pps_pic_parameter_set_id", *v3);
      v4 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "pps_seq_parameter_set_id", v3[1]);
        v4 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "  %-44s : %lld\n", "dependent_slice_segments_enabled_flag", v3[2]);
          v4 = dword_1ED1ACCC0;
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, "  %-44s : %lld\n", "output_flag_present_flag", v3[3]);
            v4 = dword_1ED1ACCC0;
            if (dword_1ED1ACCC0 >= 6)
            {
              result = fprintf(__stream, "  %-44s : %lld\n", "num_extra_slice_header_bits", v3[4]);
              v4 = dword_1ED1ACCC0;
              if (dword_1ED1ACCC0 >= 6)
              {
                result = fprintf(__stream, "  %-44s : %lld\n", "sign_data_hiding_flag", v3[5]);
                v4 = dword_1ED1ACCC0;
                if (dword_1ED1ACCC0 >= 6)
                {
                  result = fprintf(__stream, "  %-44s : %lld\n", "cabac_init_present_flag", v3[6]);
                  v4 = dword_1ED1ACCC0;
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_l0_default_active_minus1", v3[7]);
                    v4 = dword_1ED1ACCC0;
                    if (dword_1ED1ACCC0 >= 6)
                    {
                      result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_l1_default_active_minus1", v3[8]);
                      v4 = dword_1ED1ACCC0;
                      if (dword_1ED1ACCC0 >= 6)
                      {
                        result = fprintf(__stream, "  %-44s : %lld\n", "init_qp_minus26", (char)v3[9]);
                        v4 = dword_1ED1ACCC0;
                        if (dword_1ED1ACCC0 >= 6)
                        {
                          result = fprintf(__stream, "  %-44s : %lld\n", "constrained_intra_pred_flag", v3[10]);
                          v4 = dword_1ED1ACCC0;
                          if (dword_1ED1ACCC0 >= 6)
                          {
                            result = fprintf(__stream, "  %-44s : %lld\n", "transform_skip_enabled_flag", v3[11]);
                            v4 = dword_1ED1ACCC0;
                            if (dword_1ED1ACCC0 >= 6)
                            {
                              result = fprintf(__stream, "  %-44s : %lld\n", "cu_qp_delta_enabled_flag", v3[12]);
                              v4 = dword_1ED1ACCC0;
                              if (v3[12] && dword_1ED1ACCC0 >= 6)
                              {
                                result = fprintf(__stream, "  %-44s : %lld\n", "diff_cu_qp_delta_depth", v3[13]);
                                v4 = dword_1ED1ACCC0;
                              }
                              if (v4 >= 6)
                              {
                                result = fprintf(__stream, "  %-44s : %lld\n", "pps_cb_qp_offset", (char)v3[14]);
                                v4 = dword_1ED1ACCC0;
                                if (dword_1ED1ACCC0 >= 6)
                                {
                                  result = fprintf(__stream, "  %-44s : %lld\n", "pps_cr_qp_offset", (char)v3[15]);
                                  v4 = dword_1ED1ACCC0;
                                  if (dword_1ED1ACCC0 >= 6)
                                  {
                                    result = fprintf(__stream, "  %-44s : %lld\n", "pps_slice_chroma_qp_offsets_present_flag", v3[16]);
                                    v4 = dword_1ED1ACCC0;
                                    if (dword_1ED1ACCC0 >= 6)
                                    {
                                      result = fprintf(__stream, "  %-44s : %lld\n", "weighted_pred_flag", v3[17]);
                                      v4 = dword_1ED1ACCC0;
                                      if (dword_1ED1ACCC0 >= 6)
                                      {
                                        result = fprintf(__stream, "  %-44s : %lld\n", "weighted_bipred_flag", v3[18]);
                                        v4 = dword_1ED1ACCC0;
                                        if (dword_1ED1ACCC0 >= 6)
                                        {
                                          result = fprintf(__stream, "  %-44s : %lld\n", "transquant_bypass_enabled_flag", v3[19]);
                                          v4 = dword_1ED1ACCC0;
                                          if (dword_1ED1ACCC0 >= 6)
                                          {
                                            result = fprintf(__stream, "  %-44s : %lld\n", "tiles_enabled_flag", v3[20]);
                                            v4 = dword_1ED1ACCC0;
                                            if (dword_1ED1ACCC0 >= 6)
                                            {
                                              result = fprintf(__stream, "  %-44s : %lld\n", "entropy_coding_sync_enabled_flag", v3[21]);
                                              v4 = dword_1ED1ACCC0;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!v3[20])
    goto LABEL_46;
  if (v4 >= 6)
  {
    result = fprintf(__stream, "  %-44s : %lld\n", "num_tile_columns_minus1", *((unsigned __int16 *)v3 + 11));
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "num_tile_rows_minus1", *((unsigned __int16 *)v3 + 12));
      if (dword_1ED1ACCC0 >= 6)
        result = fprintf(__stream, "  %-44s : %lld\n", "uniform_spacing_flag", v3[26]);
    }
  }
  if (v3[26])
  {
    v4 = dword_1ED1ACCC0;
  }
  else
  {
    v5 = *((unsigned __int16 *)v3 + 11);
    v4 = dword_1ED1ACCC0;
    if (*((_WORD *)v3 + 11))
    {
      v6 = 0;
      do
      {
        if (v4 >= 6)
        {
          result = fprintf(__stream, "      %-40s : %lld\n", "tiles_.column_width_minus1", *(unsigned __int16 *)(*((_QWORD *)v3 + 206) + 2 * v6));
          v4 = dword_1ED1ACCC0;
          v5 = *((unsigned __int16 *)v3 + 11);
        }
        ++v6;
      }
      while (v6 < v5);
    }
    v7 = *((unsigned __int16 *)v3 + 12);
    if (*((_WORD *)v3 + 12))
    {
      v8 = 0;
      do
      {
        if (v4 >= 6)
        {
          result = fprintf(__stream, "      %-40s : %lld\n", "tiles_.row_height_minus1", *(unsigned __int16 *)(*((_QWORD *)v3 + 209) + 2 * v8));
          v4 = dword_1ED1ACCC0;
          v7 = *((unsigned __int16 *)v3 + 12);
        }
        ++v8;
      }
      while (v8 < v7);
    }
  }
  if (v4 >= 6)
  {
    result = fprintf(__stream, "  %-44s : %lld\n", "loop_filter_across_tiles_enabled_flag", v3[27]);
    v4 = dword_1ED1ACCC0;
LABEL_46:
    if (v4 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "loop_filter_across_slices_enabled_flag", v3[28]);
      v4 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "deblocking_filter_control_present_flag", v3[29]);
        v4 = dword_1ED1ACCC0;
      }
    }
  }
  if (v3[29])
  {
    if (v4 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "deblocking_filter_override_enabled_flag", v3[30]);
      v4 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "pps_deblocking_filter_disabled_flag", v3[31]);
        v4 = dword_1ED1ACCC0;
      }
    }
    if (!v3[31])
    {
      if (v4 < 6)
        goto LABEL_59;
      result = fprintf(__stream, "  %-44s : %lld\n", "pps_beta_offset_div2", (char)v3[32]);
      if (dword_1ED1ACCC0 < 6)
        goto LABEL_59;
      result = fprintf(__stream, "  %-44s : %lld\n", "pps_tc_offset_div2", (char)v3[33]);
      v4 = dword_1ED1ACCC0;
    }
  }
  if (v4 >= 6)
    result = fprintf(__stream, "  %-44s : %lld\n", "pps_scaling_list_data_present_flag", v3[34]);
LABEL_59:
  if (v3[34])
    result = sub_1C9751A54((uint64_t)(v3 + 40), __stream);
  if (dword_1ED1ACCC0 >= 6)
  {
    result = fprintf(__stream, "  %-44s : %lld\n", "lists_modification_present_flag", v3[1608]);
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "log2_parallel_merge_level_minus2", *((unsigned __int16 *)v3 + 805));
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "slice_header_extension_present_flag", v3[1612]);
        if (dword_1ED1ACCC0 >= 6)
          result = fprintf(__stream, "  %-44s : %lld\n", "pps_extension_present_flag", v3[1613]);
      }
    }
  }
  if (v3[1613])
  {
    v9 = dword_1ED1ACCC0;
    if (v3[11] && dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "rext.log2_max_transform_skip_block_size_minus2", v3[1615]);
      v9 = dword_1ED1ACCC0;
    }
    if (v9 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "rext.cross_component_prediction_enabled_flag", v3[1616]);
      if (dword_1ED1ACCC0 >= 6)
        result = fprintf(__stream, "  %-44s : %lld\n", "rext.chroma_qp_offset_list_enabled_flag", v3[1617]);
    }
    if (v3[1617])
    {
      v10 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "rext.diff_cu_chroma_qp_offset_depth", v3[1618]);
        v10 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "  %-44s : %lld\n", "rext.chroma_qp_offset_list_len_minus1", v3[1619]);
          v10 = dword_1ED1ACCC0;
        }
      }
      v11 = 1626;
      do
      {
        if (v10 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "rext.cb_qp_offset_list", (char)v3[v11 - 6]);
          v10 = dword_1ED1ACCC0;
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, "    %-42s : %lld\n", "rext.cr_qp_offset_list", (char)v3[v11]);
            v10 = dword_1ED1ACCC0;
          }
        }
        v12 = v11 - 1626;
        ++v11;
      }
      while (v12 < v3[1619]);
      if (v10 > 5)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "rext.log2_sao_offset_scale_luma", v3[1632]);
        if (dword_1ED1ACCC0 >= 6)
          return fprintf(__stream, "  %-44s : %lld\n", "rext.log2_sao_offset_scale_chroma", v3[1633]);
      }
    }
  }
  return result;
}

BOOL sub_1C9776D88(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 < 0)
    v2 = -v2;
  v3 = *(_DWORD *)(a2 + 36);
  if (v3 < 0)
    v3 = -v3;
  return v2 < v3;
}

void *sub_1C9776DAC(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x2AAAAAAAAAAAAAALL)
    v1 = 0x2AAAAAAAAAAAAAALL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(48 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

__n128 sub_1C9776E14(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  uint64_t v9;
  __n128 *v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 *v16;
  uint64_t v17;
  __n128 *v18;
  __n128 *v19;
  __n128 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  __n128 v25;
  __n128 *v27;
  unint64_t v28;
  __n128 *v29;
  unint64_t v30;
  __n128 v31;
  __n128 *v32;
  __n128 *v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;

  if (a4 >= 2)
  {
    v9 = (uint64_t)a1;
    if (a4 == 2)
    {
      v10 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        result = *(__n128 *)v9;
        v11 = *(__n128 *)(v9 + 16);
        v12 = *(__n128 *)(v9 + 32);
        v14 = a2[-2];
        v13 = a2[-1];
        *(__n128 *)v9 = *v10;
        *(__n128 *)(v9 + 16) = v14;
        *(__n128 *)(v9 + 32) = v13;
        a2[-2] = v11;
        a2[-1] = v12;
        *v10 = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v27 = a5;
      v28 = a4 >> 1;
      v29 = &a1[3 * (a4 >> 1)];
      v30 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v31 = sub_1C97770E0(a1, v29, a3, v30, a5, result);
        v32 = &v27[3 * v28];
        result = sub_1C97770E0((__n128 *)(v9 + 48 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v32, v31);
        v33 = &v27[3 * a4];
        v34 = v32;
        while (v34 != v33)
        {
          if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a3)(v34, v27, result))
          {
            result = *v34;
            v35 = v34[2];
            *(__n128 *)(v9 + 16) = v34[1];
            *(__n128 *)(v9 + 32) = v35;
            *(__n128 *)v9 = result;
            v34 += 3;
          }
          else
          {
            result = *v27;
            v36 = v27[2];
            *(__n128 *)(v9 + 16) = v27[1];
            *(__n128 *)(v9 + 32) = v36;
            *(__n128 *)v9 = result;
            v27 += 3;
          }
          v9 += 48;
          if (v27 == v32)
          {
            if (v34 != v33)
            {
              v37 = 0;
              do
              {
                v38 = v9 + v37 * 16;
                result = v34[v37];
                v39 = v34[v37 + 2];
                *(__n128 *)(v38 + 16) = v34[v37 + 1];
                *(__n128 *)(v38 + 32) = v39;
                *(__n128 *)v38 = result;
                v37 += 3;
              }
              while (&v34[v37] != v33);
            }
            return result;
          }
        }
        if (v27 != v32)
        {
          v40 = 0;
          do
          {
            v41 = v9 + v40 * 16;
            result = v27[v40];
            v42 = v27[v40 + 2];
            *(__n128 *)(v41 + 16) = v27[v40 + 1];
            *(__n128 *)(v41 + 32) = v42;
            *(__n128 *)v41 = result;
            v40 += 3;
          }
          while (&v27[v40] != v32);
        }
      }
      else
      {
        sub_1C9776E14(a1, v29, a3, v30, a5, a6);
        sub_1C9776E14(v9 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v27, a6);
        sub_1C9777388(v9, (_OWORD *)(v9 + 48 * (a4 >> 1)), a2, (uint64_t (**)(_QWORD, _QWORD))a3, a4 >> 1, a4 - (a4 >> 1), (char *)v27, a6);
      }
    }
    else if (a1 != a2)
    {
      v16 = a1 + 3;
      if (&a1[3] != a2)
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 = v16;
          if ((*a3)(v16, v19))
          {
            v20 = v18[1];
            v43 = *v18;
            v44 = v20;
            v45 = v18[2];
            v21 = v17;
            while (1)
            {
              v22 = (_OWORD *)(v9 + v21);
              v23 = *(_OWORD *)(v9 + v21 + 16);
              v22[3] = *(_OWORD *)(v9 + v21);
              v22[4] = v23;
              v22[5] = *(_OWORD *)(v9 + v21 + 32);
              if (!v21)
                break;
              v21 -= 48;
              if ((((uint64_t (*)(__n128 *, uint64_t))*a3)(&v43, v21 + v9) & 1) == 0)
              {
                v24 = (_OWORD *)(v9 + v21 + 48);
                goto LABEL_15;
              }
            }
            v24 = (_OWORD *)v9;
LABEL_15:
            v25 = v44;
            *v24 = v43;
            v24[1] = v25;
            result = v45;
            v24[2] = v45;
          }
          v16 = v18 + 3;
          v17 += 48;
        }
        while (&v18[3] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1C97770E0(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, __n128 result)
{
  __n128 *v6;
  __n128 *v10;
  __n128 v11;
  __n128 *v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 *v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  __n128 v32;
  unint64_t v33;
  __n128 *v34;
  __n128 v35;
  unint64_t v36;
  __n128 *v37;
  __n128 v38;

  if (a4)
  {
    v6 = a5;
    v10 = a1;
    if (a4 == 2)
    {
      v12 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        v13 = *v12;
        v14 = v12[2];
        v6[1] = v12[1];
        v6[2] = v14;
        *v6 = v13;
        result = *v10;
        v15 = v10[1];
        v16 = v10[2];
      }
      else
      {
        v27 = *v10;
        v28 = v10[2];
        v6[1] = v10[1];
        v6[2] = v28;
        *v6 = v27;
        result = *v12;
        v15 = v12[1];
        v16 = v12[2];
      }
      v6[4] = v15;
      v6[5] = v16;
      v6[3] = result;
    }
    else if (a4 == 1)
    {
      result = *a1;
      v11 = a1[2];
      a5[1] = a1[1];
      a5[2] = v11;
      *a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      v29 = &a1[3 * (a4 >> 1)];
      sub_1C9776E14(a1, v29, a3, a4 >> 1, a5, a4 >> 1);
      sub_1C9776E14(&v10[3 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v6[3 * (a4 >> 1)], a4 - (a4 >> 1));
      v30 = &v10[3 * (a4 >> 1)];
      while (v30 != a2)
      {
        if ((*a3)(v30, v10))
        {
          result = *v30;
          v31 = v30[2];
          v6[1] = v30[1];
          v6[2] = v31;
          *v6 = result;
          v30 += 3;
        }
        else
        {
          result = *v10;
          v32 = v10[2];
          v6[1] = v10[1];
          v6[2] = v32;
          *v6 = result;
          v10 += 3;
        }
        v6 += 3;
        if (v10 == v29)
        {
          if (v30 != a2)
          {
            v33 = 0;
            do
            {
              v34 = &v6[v33];
              result = v30[v33];
              v35 = v30[v33 + 2];
              v34[1] = v30[v33 + 1];
              v34[2] = v35;
              *v34 = result;
              v33 += 3;
            }
            while (&v30[v33] != a2);
          }
          return result;
        }
      }
      if (v10 != v29)
      {
        v36 = 0;
        do
        {
          v37 = &v6[v36];
          result = v10[v36];
          v38 = v10[v36 + 2];
          v37[1] = v10[v36 + 1];
          v37[2] = v38;
          *v37 = result;
          v36 += 3;
        }
        while (&v10[v36] != v29);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      v17 = a1[2];
      a5[1] = a1[1];
      a5[2] = v17;
      *a5 = result;
      v18 = a1 + 3;
      if (&a1[3] != a2)
      {
        v19 = 0;
        v20 = a5;
        do
        {
          v21 = v20;
          v20 += 3;
          v22 = v20;
          if ((*a3)(v18, v21))
          {
            v23 = v21[1];
            *v20 = *v21;
            v20[1] = v23;
            v20[2] = v21[2];
            v22 = v6;
            if (v21 != v6)
            {
              v24 = v19;
              while (1)
              {
                v22 = (__n128 *)((char *)v6 + v24);
                if (!(*a3)(v18, (__n128 *)((char *)v6 + v24 - 48)))
                  break;
                v25 = *(__n128 *)((char *)v6 + v24 - 32);
                *v22 = *(__n128 *)((char *)v6 + v24 - 48);
                v22[1] = v25;
                v22[2] = *(__n128 *)((char *)v6 + v24 - 16);
                v24 -= 48;
                if (!v24)
                {
                  v22 = v6;
                  break;
                }
              }
            }
          }
          result = *v18;
          v26 = v18[2];
          v22[1] = v18[1];
          v22[2] = v26;
          *v22 = result;
          v18 += 3;
          v19 += 48;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C9777388(uint64_t result, _OWORD *a2, _OWORD *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unsigned int (**v20)(_OWORD *, uint64_t);
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD);
  unint64_t v26;
  _OWORD *v27;
  int v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  int64_t v36;
  const void *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t (**v89)(_QWORD, _QWORD);
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;

  if (a6)
  {
    v10 = a6;
    v15 = (_OWORD *)result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      while (1)
      {
        result = (*a4)(a2, v15);
        if ((result & 1) != 0)
          break;
        v15 += 3;
        if (!--a5)
          return result;
      }
      v89 = a4;
      v90 = a7;
      v87 = v10;
      v88 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          v99 = v15[1];
          v104 = v15[2];
          v95 = *v15;
          v78 = *a2;
          v79 = a2[2];
          v15[1] = a2[1];
          v15[2] = v79;
          *v15 = v78;
          a2[1] = v99;
          a2[2] = v104;
          *a2 = v95;
          return result;
        }
        if (a5 >= 0)
          v23 = a5;
        else
          v23 = a5 + 1;
        v24 = v23 >> 1;
        v21 = &v15[3 * (v23 >> 1)];
        if (a3 == a2)
        {
          v18 = a3;
          v29 = a3;
        }
        else
        {
          v85 = v23 >> 1;
          v86 = a8;
          v25 = *v89;
          v26 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          v18 = a2;
          do
          {
            v27 = &v18[3 * (v26 >> 1)];
            v28 = v25(v27, v21);
            if (v28)
              v26 += ~(v26 >> 1);
            else
              v26 >>= 1;
            if (v28)
              v18 = v27 + 3;
          }
          while (v26);
          v29 = a2;
          v24 = v85;
          a8 = v86;
        }
        v17 = 0xAAAAAAAAAAAAAAABLL * (v18 - v29);
      }
      else
      {
        if (v10 >= 0)
          v16 = v10;
        else
          v16 = v10 + 1;
        v17 = v16 >> 1;
        v18 = &a2[3 * (v16 >> 1)];
        if (a2 == v15)
        {
          v21 = a2;
          v22 = a2;
        }
        else
        {
          v84 = v16 >> 1;
          v19 = 0xAAAAAAAAAAAAAAABLL * (a2 - v15);
          v20 = (unsigned int (**)(_OWORD *, uint64_t))a4;
          v21 = v15;
          do
          {
            if ((*v20)(v18, (uint64_t)&v21[3 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v21 += 3 * (v19 >> 1) + 3;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          v22 = v15;
          v17 = v84;
        }
        v24 = 0xAAAAAAAAAAAAAAABLL * (v21 - v22);
      }
      a3 = v18;
      if (v21 != a2)
      {
        a3 = v21;
        if (a2 != v18)
        {
          if (v21 + 3 == a2)
          {
            v97 = v21[1];
            v101 = v21[2];
            v92 = *v21;
            v36 = (char *)v18 - (char *)a2;
            v37 = a2;
            v38 = (char *)v18 - (char *)a2;
            v39 = v17;
            memmove(v21, v37, v38);
            v17 = v39;
            a3 = (_OWORD *)((char *)v21 + v36);
            *a3 = v92;
            a3[1] = v97;
            a3[2] = v101;
          }
          else if (a2 + 3 == v18)
          {
            a3 = v21 + 3;
            v98 = *(v18 - 2);
            v102 = *(v18 - 1);
            v93 = *(v18 - 3);
            if (v18 - 3 != v21)
            {
              v40 = v17;
              memmove(v21 + 3, v21, (char *)(v18 - 3) - (char *)v21);
              v17 = v40;
            }
            v21[1] = v98;
            v21[2] = v102;
            *v21 = v93;
          }
          else
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
            if (v30 == 0xAAAAAAAAAAAAAAABLL * (v18 - a2))
            {
              v31 = 0;
              do
              {
                v32 = &a2[v31];
                v33 = &v21[v31];
                v96 = v21[v31 + 1];
                v100 = v21[v31 + 2];
                v91 = v21[v31];
                v34 = a2[v31];
                v35 = a2[v31 + 2];
                v33[1] = a2[v31 + 1];
                v33[2] = v35;
                *v33 = v34;
                v32[1] = v96;
                v32[2] = v100;
                *v32 = v91;
                if (&v21[v31 + 3] == a2)
                  break;
                v31 += 3;
              }
              while (v32 + 3 != v18);
              a3 = a2;
            }
            else
            {
              v41 = 0xAAAAAAAAAAAAAAABLL * (v18 - a2);
              v42 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &v21[3 * v42];
                do
                {
                  v45 = *(v44 - 3);
                  v46 = *(v44 - 2);
                  v47 = *(v44 - 1);
                  v44 -= 3;
                  v103 = v47;
                  v94 = v45;
                  v48 = &v44[a2 - v21];
                  v49 = v44;
                  do
                  {
                    v50 = v49;
                    v49 = v48;
                    v51 = *v48;
                    v52 = v48[2];
                    v50[1] = v48[1];
                    v50[2] = v52;
                    *v50 = v51;
                    v53 = 0xAAAAAAAAAAAAAAABLL * (v18 - v48);
                    v54 = __OFSUB__(v30, v53);
                    v56 = v30 - v53;
                    v55 = (v56 < 0) ^ v54;
                    v48 = &v21[3 * v56];
                    if (v55)
                      v48 = &v49[a2 - v21];
                  }
                  while (v48 != v44);
                  v49[1] = v46;
                  v49[2] = v103;
                  *v49 = v94;
                }
                while (v44 != v21);
              }
              a3 = &v21[v18 - a2];
            }
          }
        }
      }
      a5 -= v24;
      v10 = v87 - v17;
      if (v24 + v17 >= a5 + v87 - v17)
      {
        v58 = a5;
        v59 = v17;
        result = sub_1C9777388(a3, v18, v88, v89, v58, v87 - v17, v90, a8);
        v18 = v21;
        a4 = v89;
        v10 = v59;
        a5 = v24;
      }
      else
      {
        v57 = v21;
        a4 = v89;
        result = sub_1C9777388(v15, v57, a3, v89, v24, v17, v90, a8);
        v15 = a3;
        a3 = v88;
      }
      a2 = v18;
      a7 = v90;
      if (!v10)
        return result;
    }
    if (a5 <= v10)
    {
      if (v15 != a2)
      {
        v69 = 0;
        do
        {
          v70 = &a7[v69 * 16];
          v71 = v15[v69];
          v72 = v15[v69 + 2];
          *((_OWORD *)v70 + 1) = v15[v69 + 1];
          *((_OWORD *)v70 + 2) = v72;
          *(_OWORD *)v70 = v71;
          v69 += 3;
        }
        while (&v15[v69] != a2);
        v73 = &a7[v69 * 16];
        if (&a7[v69 * 16] != a7)
        {
          while (a2 != a3)
          {
            result = (*a4)(a2, a7);
            if ((_DWORD)result)
            {
              v74 = *a2;
              v75 = a2[2];
              v15[1] = a2[1];
              v15[2] = v75;
              *v15 = v74;
              a2 += 3;
            }
            else
            {
              v76 = *(_OWORD *)a7;
              v77 = *((_OWORD *)a7 + 2);
              v15[1] = *((_OWORD *)a7 + 1);
              v15[2] = v77;
              *v15 = v76;
              a7 += 48;
            }
            v15 += 3;
            if (a7 == v73)
              return result;
          }
          return (uint64_t)memmove(v15, a7, v73 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      v60 = 0;
      do
      {
        v61 = &a7[v60 * 16];
        v62 = a2[v60];
        v63 = a2[v60 + 2];
        *((_OWORD *)v61 + 1) = a2[v60 + 1];
        *((_OWORD *)v61 + 2) = v63;
        *(_OWORD *)v61 = v62;
        v60 += 3;
      }
      while (&a2[v60] != a3);
      v64 = &a7[v60 * 16];
      if (&a7[v60 * 16] != a7)
      {
        v65 = a3 - 3;
        while (a2 != v15)
        {
          result = (*a4)(v64 - 48, a2 - 3);
          if ((_DWORD)result)
            v66 = (char *)(a2 - 3);
          else
            v66 = v64 - 48;
          if ((_DWORD)result)
            a2 -= 3;
          else
            v64 -= 48;
          v68 = *((_OWORD *)v66 + 1);
          v67 = *((_OWORD *)v66 + 2);
          *v65 = *(_OWORD *)v66;
          v65[1] = v68;
          v65[2] = v67;
          v65 -= 3;
          if (v64 == a7)
            return result;
        }
        v80 = 0;
        do
        {
          v81 = &v65[v80 / 0x10];
          v82 = *(_OWORD *)&v64[v80 - 48];
          v83 = *(_OWORD *)&v64[v80 - 16];
          v81[1] = *(_OWORD *)&v64[v80 - 32];
          v81[2] = v83;
          *v81 = v82;
          v80 -= 48;
        }
        while (&v64[v80] != a7);
      }
    }
  }
  return result;
}

BOOL sub_1C9777998(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24);
}

BOOL sub_1C97779AC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) > *(_DWORD *)(a2 + 28);
}

uint64_t sub_1C97779C0(uint64_t a1, uint64_t a2, int8x8_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  _BYTE *v52;
  char v53;
  _BOOL4 v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint8x8_t v90;
  int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  BOOL v97;
  uint64_t v98;
  char v99;
  int v100;
  unsigned int v101;
  _BOOL4 v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  char v109;
  int v110;
  int v111;
  unsigned int v112;
  char v113;
  int v114;
  unsigned int v115;
  int v116;
  char v117;
  _BOOL4 v118;
  unint64_t v119;
  int v120;
  _BOOL4 v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  char v136;
  char v137;
  unsigned int v138;
  int v139;
  _BOOL4 v140;
  BOOL v141;
  int v142;
  _BOOL4 v143;
  BOOL v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  _BOOL4 v156;
  unint64_t v157;
  unsigned int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unint64_t v165;
  _BYTE *v166;
  char v167;
  int v168;
  uint64_t v169;
  _BOOL4 v170;
  uint64_t v171;
  _BOOL8 v172;
  uint64_t result;
  int v174;
  int v175;
  _BOOL4 v176;
  unint64_t *v177;
  char v178;
  unint64_t v179;
  unsigned int v180;
  char v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v186;

  v8 = 0;
  v9 = 0;
  v10 = (unsigned __int8 *)(a1 + 6426);
  v11 = *(unint64_t **)(a1 + 40);
  v12 = *v11;
  v13 = v11[1];
  v15 = (unsigned int *)v11[3];
  v14 = (unsigned int *)v11[4];
  v16 = v11[2];
  v17 = (char *)&unk_1C985A11D + 36 * (a6 > 0);
  v177 = v11;
  v18 = (char *)v11 + 83;
  do
  {
    v19 = v17[v8];
    v20 = v18[v19];
    v21 = byte_1C98326D3[(v13 & 0xC0) + (v20 >> 1)];
    LODWORD(v22) = v13 - v21;
    v23 = v12 >= (v13 - v21) << 55;
    if (v12 < (v13 - v21) << 55)
      v22 = v22;
    else
      v22 = byte_1C98326D3[(v13 & 0xC0) + (v20 >> 1)];
    if (v12 < (v13 - v21) << 55)
    {
      v24 = 0;
    }
    else
    {
      v12 -= (v13 - v21) << 55;
      v24 = 1;
    }
    if (v23)
      v25 = v20 + 1;
    else
      v25 = v18[v19];
    v26 = __clz(v22) - 55;
    v13 = v22 << v26;
    v12 <<= v26;
    v9 += v26;
    v18[v19] = byte_1C98326D3[2 * v20 + 256 + v24];
    if ((v25 & 1) == 0)
      break;
    ++v8;
  }
  while (v8 != 3);
  v27 = v16 + v9;
  if (v27 >= 0)
  {
    v28 = *v15++;
    v12 += (unint64_t)bswap32(v28) << v27;
    v27 -= 32;
    if (v15 >= v14)
      v15 = v14;
  }
  v29 = 0;
  v30 = 0;
  v31 = *(_QWORD *)(a1 + 40) + 101;
  do
  {
    v32 = v17[v29];
    v33 = *(unsigned __int8 *)(v31 + v32);
    v34 = byte_1C98326D3[(v13 & 0xC0) + (v33 >> 1)];
    LODWORD(v35) = v13 - v34;
    v36 = v12 >= (v13 - v34) << 55;
    if (v12 < (v13 - v34) << 55)
      v35 = v35;
    else
      v35 = byte_1C98326D3[(v13 & 0xC0) + (v33 >> 1)];
    if (v12 < (v13 - v34) << 55)
    {
      v37 = 0;
    }
    else
    {
      v12 -= (v13 - v34) << 55;
      v37 = 1;
    }
    if (v36)
      v38 = v33 + 1;
    else
      v38 = *(_BYTE *)(v31 + v32);
    v39 = __clz(v35) - 55;
    v13 = v35 << v39;
    v12 <<= v39;
    v30 += v39;
    *(_BYTE *)(v31 + v32) = byte_1C98326D3[2 * v33 + 256 + v37];
    if ((v38 & 1) == 0)
      break;
    ++v29;
  }
  while (v29 != 3);
  v40 = v27 + v30;
  if (v40 >= 0)
  {
    v41 = *v15++;
    v12 += (unint64_t)bswap32(v41) << v40;
    v40 -= 32;
    if (v15 >= v14)
      v15 = v14;
  }
  if (a5 == 2)
    v42 = v29;
  else
    v42 = v8;
  if (a5 == 2)
    v43 = v8;
  else
    v43 = v29;
  v44 = **(_WORD **)(a1 + 48);
  v45 = v44 >> 9;
  v46 = *(_QWORD *)(a1 + 32);
  if (a6)
  {
    v45 += *(char *)(v46 + a6 + 656) + *(char *)(*(_QWORD *)(a1 + 24) + a6 + 2);
    v47 = *(unsigned __int8 **)(v46 + 16);
    v48 = v47[2099];
    if (v45 <= -v48)
      v45 = -v48;
    if (v47[2148] == 1)
    {
      if (v45 >= 57)
        v49 = 57;
      else
        v49 = v45;
      v50 = __OFSUB__(v49, 30);
      v51 = v49 - 30;
      if (v51 < 0 == v50)
        v45 = byte_1C9861020[v51];
    }
    else if (v45 >= 51)
    {
      v45 = 51;
    }
    v52 = v47 + 223;
  }
  else
  {
    v47 = *(unsigned __int8 **)(v46 + 16);
    LOWORD(v48) = v47[2097];
    v52 = v47 + 222;
  }
  if (v45 < 0)
  {
    LOWORD(v45) = v45 + v48;
    v53 = *v52 + 5;
  }
  else
  {
    v53 = 5;
  }
  v54 = 0;
  v55 = a5;
  v56 = v42 + 4 * v43;
  v57 = &byte_1C9862680[16 * a5];
  v58 = v44 & 0x100;
  v59 = *v10 | v58;
  v176 = v59 != 0;
  if (v59)
    v60 = v47[402] != 0;
  else
    v60 = 0;
  v61 = *(_QWORD *)(v46 + 32);
  if (*(_BYTE *)(v61 + 5) && !v58)
    v54 = v10[1] == 0;
  v62 = *(_QWORD *)(a1 + 40);
  v63 = v57[v56];
  v64 = v47[274];
  v65 = (char *)&unk_1C9861A40 + 64 * v55;
  if (v64)
  {
    if (*(_DWORD *)(a1 + 4) == 1)
      v66 = 0;
    else
      v66 = 3;
    v67 = v61 + 65 * (v66 + a6) + 40;
  }
  else
  {
    v67 = 0;
    v53 -= 4;
  }
  v184 = v67;
  v186 = a1;
  v68 = ((10923 * (__int16)v45) >> 16) + ((10923 * (__int16)v45) >> 31);
  v69 = a39H[(__int16)v45 % 6];
  v70 = a6 < 1 || v60;
  v141 = v70 == 0;
  v71 = 27;
  if (!v141)
    v71 = 0;
  v72 = 1;
  v175 = v63;
  if ((v63 & 0xF) != 0)
  {
    v73 = v62 + v71 + 123;
    LODWORD(v72) = 1 << (v63 & 0xF);
    if (a6)
      v74 = 43;
    else
      v74 = 42;
    v75 = (v63 & 0xF) - 1;
    do
    {
      if (!v60)
        v74 = byte_1C98626F0[v65[v75] + 64];
      v76 = *(unsigned __int8 *)(v73 + v74);
      v77 = byte_1C98326D3[(v13 & 0xC0) + (v76 >> 1)];
      LODWORD(v78) = v13 - v77;
      v79 = v12 >= (v13 - v77) << 55;
      if (v12 < (v13 - v77) << 55)
        v78 = v78;
      else
        v78 = byte_1C98326D3[(v13 & 0xC0) + (v76 >> 1)];
      if (v12 < (v13 - v77) << 55)
      {
        v80 = 0;
      }
      else
      {
        v12 -= (v13 - v77) << 55;
        v80 = 1;
      }
      if (v79)
        v81 = v76 + 1;
      else
        v81 = *(_BYTE *)(v73 + v74);
      v82 = __clz(v78) - 55;
      v12 <<= v82;
      *(_BYTE *)(v73 + v74) = byte_1C98326D3[2 * v76 + 256 + v80];
      v40 += v82;
      if (v40 >= 0)
      {
        v83 = *v15++;
        v12 += (unint64_t)bswap32(v83) << v40;
        v40 -= 32;
        if (v15 >= v14)
          v15 = v14;
      }
      v13 = v78 << v82;
      v72 = ((v81 & 1) << v75) | v72;
      v84 = v75-- + 1;
    }
    while (v84 > 1);
  }
  v85 = 0;
  v86 = 0;
  v87 = v62 + 16 * (a6 > 0) + 167;
  v88 = v62 + 191;
  v89 = v69 << v68;
  a3.i32[0] = v72;
  v90 = (uint8x8_t)vcnt_s8(a3);
  v90.i16[0] = vaddlv_u8(v90);
  v91 = v90.i32[0];
  if (v90.i32[0] >= 8u)
    v92 = 8;
  else
    v92 = v90.i32[0];
  if (v92 <= 1)
    v92 = 1;
  v93 = 1;
  do
  {
    while (1)
    {
      v94 = *(unsigned __int8 *)(v87 + v93);
      v95 = byte_1C98326D3[(v13 & 0xC0) + (v94 >> 1)];
      LODWORD(v96) = v13 - v95;
      v97 = v12 >= (v13 - v95) << 55;
      if (v12 < (v13 - v95) << 55)
        v96 = v96;
      else
        v96 = byte_1C98326D3[(v13 & 0xC0) + (v94 >> 1)];
      if (v12 < (v13 - v95) << 55)
      {
        v98 = 0;
      }
      else
      {
        v12 -= (v13 - v95) << 55;
        v98 = 1;
      }
      if (v97)
        v99 = v94 + 1;
      else
        v99 = *(_BYTE *)(v87 + v93);
      v100 = __clz(v96) - 55;
      v12 <<= v100;
      *(_BYTE *)(v87 + v93) = byte_1C98326D3[2 * v94 + 256 + v98];
      v40 += v100;
      if (v40 >= 0)
      {
        v101 = *v15++;
        v12 += (unint64_t)bswap32(v101) << v40;
        v40 -= 32;
        if (v15 >= v14)
          v15 = v14;
      }
      v13 = v96 << v100;
      v85 |= (v99 & 1) << v86;
      if ((v99 & 1) == 0)
        break;
      v93 = 0;
      if (++v86 == v92)
        goto LABEL_117;
    }
    if ((v93 - 1) < 2)
      ++v93;
    ++v86;
  }
  while (v86 != v92);
  v102 = v90.i32[0] > 8u;
  if (v93)
  {
    v103 = 0;
    goto LABEL_130;
  }
LABEL_117:
  v104 = *(unsigned __int8 *)(v88 + 4 * (a6 > 0));
  v105 = byte_1C98326D3[((v96 << v100) & 0xC0) + (v104 >> 1)];
  LODWORD(v106) = v13 - v105;
  v107 = v12 >= (v13 - v105) << 55;
  if (v12 < (v13 - v105) << 55)
    v106 = v106;
  else
    v106 = byte_1C98326D3[((v96 << v100) & 0xC0) + (v104 >> 1)];
  if (v12 < (v13 - v105) << 55)
  {
    v108 = 0;
  }
  else
  {
    v12 -= (v13 - v105) << 55;
    v108 = 1;
  }
  if (v107)
    v109 = v104 + 1;
  else
    v109 = *(_BYTE *)(v88 + 4 * (a6 > 0));
  v110 = __clz(v106);
  v111 = v110 - 55;
  v13 = v106 << (v110 - 55);
  v12 <<= v110 - 55;
  v103 = v109 & 1;
  *(_BYTE *)(v88 + 4 * (a6 > 0)) = byte_1C98326D3[2 * v104 + 256 + v108];
  v40 += v111;
  if (v40 >= 0)
  {
    v112 = *v15++;
    v12 += (unint64_t)bswap32(v112) << v40;
    v40 -= 32;
    if (v15 >= v14)
      v15 = v14;
  }
  v102 = 1;
LABEL_130:
  v113 = v53;
  v114 = 0;
  v115 = __clz(v72);
  v116 = v115 ^ 0x1F;
  v117 = v115 + 1;
  v118 = (int)(v116 - __clz(__rbit32(v72))) > 3 && v54;
  v119 = v13 << 54;
  v120 = v90.i32[0] - v118 + 1;
  do
  {
    v121 = v12 >= v119;
    if (v12 < v119)
      v122 = 0;
    else
      v122 = v13 << 54;
    v12 = 2 * (v12 - v122);
    v114 = v121 | (2 * v114);
    --v120;
  }
  while (v120 > 1);
  v123 = v40 + v90.i32[0] - v118;
  if (v123 >= 0)
  {
    v124 = *v15++;
    v12 += (unint64_t)bswap32(v124) << v123;
    v123 -= 32;
    if (v15 >= v14)
      v15 = v14;
  }
  v125 = v72 << v117;
  v126 = v114 << (v118 - v90.i8[0]);
  v127 = __rbit32(v85);
  v128 = 2 * (a6 == 0);
  v174 = a6;
  if (*v10)
    v129 = 1;
  else
    v129 = ((unint64_t)**(unsigned __int16 **)(v186 + 48) >> 8) & 1;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v183 = __clz(v127);
  v179 = v128 | v129;
  v133 = *(unsigned __int8 *)(*(_QWORD *)(v186 + 40) + (v128 | v129) + 213) >> 2;
  v180 = 3 << (*(_BYTE *)(*(_QWORD *)(v186 + 40) + (v128 | v129) + 213) >> 2);
  v134 = v89;
  v181 = v113;
  v182 = 1 << (v113 - 1);
  if (v90.i32[0] <= 1u)
    v91 = 1;
  v135 = v91 - 1;
  v136 = !v118;
  v178 = *(_BYTE *)(*(_QWORD *)(v186 + 40) + (v128 | v129) + 213) >> 2;
  v137 = 1;
  v138 = v85;
  while (1)
  {
    if ((v138 & 1) != 0)
      v139 = v103 + 2;
    else
      v139 = 1;
    if ((v138 & 1) != 0)
      v103 = 0;
    if (!v102)
      goto LABEL_167;
    v140 = (v138 & 1) == 0;
    v141 = v183 != v131 || v85 == 0;
    if (v141)
      v142 = 2;
    else
      v142 = 3;
    v143 = v142 == v139;
    if (v131 < 8)
      v140 = v143;
    if (!v140)
    {
LABEL_167:
      v145 = v133;
      goto LABEL_196;
    }
    v144 = v130 > 3 << v133;
    if (v144)
      v145 = (v133 + 1);
    else
      v145 = v133;
    if (v12 >= v119)
    {
      v147 = 0;
      do
      {
        v146 = v147 + 1;
        v12 = 2 * (v12 - v119);
      }
      while (v12 >= v119 && v147++ < 0x11);
    }
    else
    {
      v146 = 0;
    }
    v12 *= 2;
    v123 += v146 + 1;
    if (v123 >= 0)
    {
      v149 = *v15++;
      v12 += (unint64_t)bswap32(v149) << v123;
      v123 -= 32;
      if (v15 >= v14)
        v15 = v14;
    }
    v150 = v146 - 3;
    if (v146 <= 2)
    {
      v151 = 0;
    }
    else
    {
      v146 = (1 << (v146 - 3)) + 2;
      v151 = v150;
    }
    v152 = v146 << v145;
    v153 = v151 + v145;
    if (v151 + (_DWORD)v145)
    {
      v154 = 0;
      v155 = v151 + v133 + v144 + 1;
      do
      {
        v156 = v12 >= v119;
        if (v12 < v119)
          v157 = 0;
        else
          v157 = v13 << 54;
        v12 = 2 * (v12 - v157);
        v154 = v156 | (2 * v154);
        --v155;
      }
      while (v155 > 1);
      v123 += v153;
      if (v123 >= 0)
      {
        v158 = *v15++;
        v12 += (unint64_t)bswap32(v158) << v123;
        v123 -= 32;
        if (v15 >= v14)
          v15 = v14;
      }
      v152 += v154;
    }
    v130 = v152 + v139;
    if ((v137 & 1) != 0)
    {
      if (v152 >= v180)
      {
        v137 = 0;
        ++*(_BYTE *)(*(_QWORD *)(v186 + 40) + v179 + 213);
        goto LABEL_195;
      }
      if (!((2 * v152) >> v178))
      {
        v165 = *(_QWORD *)(v186 + 40) + v179;
        v168 = *(unsigned __int8 *)(v165 + 213);
        v166 = (_BYTE *)(v165 + 213);
        v167 = v168;
        if (v168)
        {
          v137 = 0;
          *v166 = v167 - 1;
          goto LABEL_195;
        }
      }
    }
    v137 = 0;
LABEL_195:
    v139 += v152;
LABEL_196:
    v132 += v139;
    if (v131 == v90.i32[0] - 1)
      v159 = v136;
    else
      v159 = 1;
    LODWORD(v160) = (v139 ^ (v126 >> 31)) - (v126 >> 31);
    if ((v132 & 1) != 0)
      v139 = -v139;
    if ((v159 & 1) != 0)
      v126 *= 2;
    else
      LODWORD(v160) = v139;
    v161 = v65[v116];
    if ((**(_WORD **)(v186 + 48) & 0x100) == 0)
    {
      v162 = v134;
      if (v184)
      {
        if (v65[v116])
          v163 = v161 + 1;
        else
          v163 = v65[v116];
        v162 = *(unsigned __int8 *)(v184 + v163) * (uint64_t)(int)v134;
      }
      v160 = (v182 + v162 * (int)v160) >> v181;
      if (v160 >= 0x7FFF)
        v160 = 0x7FFFLL;
      if (v160 <= -32768)
        LOWORD(v160) = 0x8000;
    }
    *(_WORD *)(a2 + 2 * v161) = v160;
    if (v131 == v135)
      break;
    ++v131;
    v138 >>= 1;
    v164 = __clz(v125) + 1;
    LODWORD(v125) = (_DWORD)v125 << v164;
    v116 -= v164;
    v133 = v145;
  }
  v169 = *(_QWORD *)(v186 + 32);
  v170 = v176;
  if (!*(_BYTE *)(*(_QWORD *)(v169 + 16) + 401))
    v170 = 0;
  if (v170 && *(_DWORD *)(v186 + 4) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v169 + 2280) + 792))(a2);
  if (*v10)
  {
    v171 = *(_QWORD *)(v169 + 2280) + 552;
    v172 = v174 != 0;
    if (v10[1])
      (*(void (**)(uint64_t, uint64_t))(v171 + 8 * v172 + 384))(a2, 2);
    else
      (*(void (**)(uint64_t))(v171 + 32 * v172 + 176))(a2);
  }
  else if (v10[1])
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v169 + 2280) + 8 * (v10[1] - 1) + 920))(a2, 2);
  }
  result = (v175 + 1);
  *v177 = v12;
  v177[1] = v13;
  v177[2] = v123;
  v177[3] = (unint64_t)v15;
  return result;
}

void sub_1C97783D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a13 = v14;
  a13[1] = v15;
  a13[2] = v16;
  a13[3] = v13;
  _Unwind_Resume(a1);
}

uint64_t sub_1C97783E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int8x8_t a6)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  signed int v40;
  _BOOL4 v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  signed int v46;
  _BOOL4 v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  __int16 v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  BOOL v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  unsigned int *v95;
  unsigned int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  char v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  char *v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  BOOL v122;
  uint64_t v123;
  char v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  BOOL v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  BOOL v139;
  uint64_t v140;
  char v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  _BOOL4 v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  BOOL v150;
  uint64_t v151;
  char v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  char v160;
  _BOOL4 v161;
  unint64_t v162;
  int v163;
  _BOOL4 v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  char v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  _BOOL4 v180;
  int v182;
  _BOOL4 v183;
  BOOL v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  int v195;
  _BOOL4 v196;
  unint64_t v197;
  unsigned int v198;
  char v199;
  char v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  signed int v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  _BYTE *v211;
  char v212;
  int v213;
  int v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  BOOL v219;
  uint64_t v220;
  char v221;
  int v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  _BOOL8 v227;
  uint64_t result;
  unint64_t *v229;
  int v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  _BOOL4 v237;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  int v249;
  _BYTE *v250;
  char v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  char v256;
  uint64_t v257;
  int v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  char v264;
  unsigned int v265;
  int v266;
  char *v267;

  v6 = *(unint64_t **)(a1 + 40);
  v7 = *v6;
  v8 = v6[1];
  v10 = (unsigned int *)v6[3];
  v9 = (unsigned int *)v6[4];
  v11 = v6[2];
  v12 = (int)a3 - 2;
  if (2 * (int)a3 < 2)
  {
    LODWORD(v13) = 0;
    LODWORD(v16) = 0;
  }
  else
  {
    v13 = 0;
    v14 = (char *)&unk_1C985A11D + 36 * (a5 > 0) + 9 * v12;
    v15 = (char *)v6 + 83;
    v16 = (2 * a3 - 1);
    while (1)
    {
      v17 = v14[v13];
      v18 = v15[v17];
      v19 = byte_1C98326D3[(v8 & 0xC0) + (v18 >> 1)];
      LODWORD(v20) = v8 - v19;
      v21 = v7 >= (v8 - v19) << 55;
      if (v7 < (v8 - v19) << 55)
        v20 = v20;
      else
        v20 = byte_1C98326D3[(v8 & 0xC0) + (v18 >> 1)];
      if (v7 < (v8 - v19) << 55)
      {
        v22 = 0;
      }
      else
      {
        v7 -= (v8 - v19) << 55;
        v22 = 1;
      }
      if (v21)
        v23 = v18 + 1;
      else
        v23 = v15[v17];
      v24 = __clz(v20) - 55;
      v7 <<= v24;
      v15[v17] = byte_1C98326D3[2 * v18 + 256 + v22];
      v11 += v24;
      if (v11 >= 0)
      {
        v25 = *v10++;
        v7 += (unint64_t)bswap32(v25) << v11;
        v11 -= 32;
        if (v10 >= v9)
          v10 = v9;
      }
      v8 = v20 << v24;
      if ((v23 & 1) == 0)
        break;
      if (v16 == ++v13)
      {
        LODWORD(v13) = 2 * a3 - 1;
        break;
      }
    }
    v26 = 0;
    v27 = *(_QWORD *)(a1 + 40) + 101;
    while (1)
    {
      v28 = v14[v26];
      v29 = *(unsigned __int8 *)(v27 + v28);
      v30 = byte_1C98326D3[(v8 & 0xC0) + (v29 >> 1)];
      LODWORD(v31) = v8 - v30;
      v32 = v7 >= (v8 - v30) << 55;
      if (v7 < (v8 - v30) << 55)
        v31 = v31;
      else
        v31 = byte_1C98326D3[(v8 & 0xC0) + (v29 >> 1)];
      if (v7 < (v8 - v30) << 55)
      {
        v33 = 0;
      }
      else
      {
        v7 -= (v8 - v30) << 55;
        v33 = 1;
      }
      if (v32)
        v34 = v29 + 1;
      else
        v34 = *(_BYTE *)(v27 + v28);
      v35 = __clz(v31) - 55;
      v7 <<= v35;
      *(_BYTE *)(v27 + v28) = byte_1C98326D3[2 * v29 + 256 + v33];
      v11 += v35;
      if (v11 >= 0)
      {
        v36 = *v10++;
        v7 += (unint64_t)bswap32(v36) << v11;
        v11 -= 32;
        if (v10 >= v9)
          v10 = v9;
      }
      v8 = v31 << v35;
      if ((v34 & 1) == 0)
        break;
      if (v16 == ++v26)
        goto LABEL_36;
    }
    LODWORD(v16) = v26;
LABEL_36:
    v37 = v8 << 54;
    if (v13 >= 4)
    {
      v38 = 0;
      v39 = v13 >> 1;
      v40 = (v13 >> 1) - 1;
      do
      {
        v41 = v7 >= v37;
        if (v7 < v37)
          v42 = 0;
        else
          v42 = v8 << 54;
        v7 = 2 * (v7 - v42);
        v38 = v41 | (2 * v38);
        --v39;
      }
      while (v39 > 1);
      v11 += v40;
      if (v11 >= 0)
      {
        v43 = *v10++;
        v7 += (unint64_t)bswap32(v43) << v11;
        v11 -= 32;
        if (v10 >= v9)
          v10 = v9;
      }
      LODWORD(v13) = v38 + ((v13 & 1 | 2) << v40);
    }
    if (v16 >= 4)
    {
      v44 = 0;
      v45 = v16 >> 1;
      v46 = (v16 >> 1) - 1;
      do
      {
        v47 = v7 >= v37;
        if (v7 < v37)
          v48 = 0;
        else
          v48 = v8 << 54;
        v7 = 2 * (v7 - v48);
        v44 = v47 | (2 * v44);
        --v45;
      }
      while (v45 > 1);
      v11 += v46;
      if (v11 >= 0)
      {
        v49 = *v10++;
        v7 += (unint64_t)bswap32(v49) << v11;
        v11 -= 32;
        if (v10 >= v9)
          v10 = v9;
      }
      LODWORD(v16) = v44 + ((v16 & 1 | 2) << v46);
    }
  }
  v242 = (int)a3 - 2;
  v243 = (unsigned __int8 *)(a1 + 6426);
  if (a4 == 2)
    v50 = v16;
  else
    v50 = v13;
  if (a4 == 2)
    v51 = v13;
  else
    v51 = v16;
  if ((_DWORD)a3 == 3)
    v52 = 4 * a4;
  else
    v52 = 0;
  v53 = **(_WORD **)(a1 + 48);
  v54 = v53 >> 9;
  v55 = *(_QWORD *)(a1 + 32);
  v229 = v6;
  if (a5)
  {
    v54 += *(char *)(v55 + a5 + 656) + *(char *)(*(_QWORD *)(a1 + 24) + a5 + 2);
    v56 = *(unsigned __int8 **)(v55 + 16);
    v57 = v56[2099];
    if (v54 <= -v57)
      v54 = -v57;
    if (v56[2148] == 1)
    {
      if (v54 >= 57)
        v58 = 57;
      else
        v58 = v54;
      v59 = __OFSUB__(v58, 30);
      v60 = v58 - 30;
      if (v60 < 0 == v59)
        v54 = byte_1C9861020[v60];
    }
    else if (v54 >= 51)
    {
      v54 = 51;
    }
    v61 = v56 + 223;
  }
  else
  {
    v56 = *(unsigned __int8 **)(v55 + 16);
    LOWORD(v57) = v56[2097];
    v61 = v56 + 222;
  }
  v62 = (v51 >> 2 << v12) + (v50 >> 2);
  v63 = v50 & 3;
  v64 = a3 + 3;
  if (v54 < 0)
  {
    LOWORD(v54) = v54 + v57;
    v64 += *v61;
  }
  v263 = v9;
  v237 = 0;
  v65 = *(_QWORD *)(a1 + 40) + 40;
  v66 = (int)a3 - 2;
  v67 = v63 & 0xFFFFFFF3 | (4 * (v51 & 3));
  v241 = *((unsigned __int8 *)*(&off_1E82923A0 + v12) + v52 + v62);
  v68 = *v243;
  v69 = v53 & 0x100;
  if (v56[402])
    v70 = (v68 | v53 & 0x100) == 0;
  else
    v70 = 1;
  v71 = !v70;
  v240 = v71;
  v72 = *(_QWORD *)(v55 + 32);
  if (*(_BYTE *)(v72 + 5))
  {
    v73 = a3;
    v74 = a1;
    if (!v69)
      v237 = *(_BYTE *)(a1 + 6427) == 0;
  }
  else
  {
    v73 = a3;
    v74 = a1;
  }
  v267 = (char *)&unk_1C9861A40 + 64 * (uint64_t)a4 + 16 * v242;
  v230 = byte_1C9862680[16 * a4 + v67];
  v75 = v56[274];
  v77 = (int)v73 > 2 && v68 != 0;
  v250 = (char *)*(&off_1E82928A8 + v242) + v52;
  v78 = v71;
  if (!v75 || v77)
  {
    v79 = v74;
    v81 = 0;
    v64 -= 4;
  }
  else
  {
    v79 = v74;
    if (*(_DWORD *)(v74 + 4) == 1)
      v80 = 0;
    else
      v80 = 3;
    v81 = v72 + 390 * v242 + 65 * (v80 + a5) + 40;
  }
  v82 = v241;
  v262 = v81;
  v239 = v65 + 2 * (a5 > 0) + 79;
  v235 = v65 + 16 * (a5 > 0) + 127;
  v231 = v65 + 4 * (a5 > 0) + 151;
  v249 = (1 << v242) - 1;
  if (a5 < 1)
    v83 = 1;
  else
    v83 = v71;
  v70 = v83 == 0;
  v84 = 27;
  if (!v70)
    v84 = 0;
  v247 = v84;
  v85 = a39H[(__int16)v54 % 6] << ((__int16)v54 / 6);
  v86 = (1 << v250[v241]) | (1 << *v250);
  v87 = v230 & 0xF;
  v88 = (1 << v87);
  if (a5)
    v89 = 43;
  else
    v89 = 42;
  v245 = v89;
  v246 = 4 << v73;
  if (a4)
    v90 = 15;
  else
    v90 = 9;
  v256 = v73 - 3;
  if ((_DWORD)v73 == 3)
    v91 = 9;
  else
    v91 = 12;
  v259 = ~(-1 << v73);
  if ((_DWORD)v73 == 3)
    v92 = v90;
  else
    v92 = 21;
  v244 = v92;
  v233 = 2 * (a5 == 0);
  v257 = v85;
  v260 = v64;
  v261 = 1 << (v64 - 1);
  v232 = (char *)&unk_1C9861A40 + 64 * (uint64_t)a4 + 16 * v242;
  v93 = v241;
  v94 = 1;
  v236 = a5;
  v234 = v91;
  v95 = v263;
  do
  {
    v254 = v93;
    v96 = v250[v93];
    v97 = v96 >> v66;
    if ((int)(v249 & v96) >= v249)
      v98 = 0;
    else
      v98 = (v86 >> v96) & 2;
    v99 = (v86 >> ((1 << v242) + v96)) & 1;
    if (v97 >= v249)
      LODWORD(v99) = 0;
    v100 = v99 | v98;
    v101 = v93 == v82 || v93 == 0;
    v102 = v101;
    if (!v101)
    {
      v103 = (char *)v239;
      if ((_DWORD)v100)
        v103 = (char *)(v239 + 1);
      v104 = *v103;
      v105 = byte_1C98326D3[(v8 & 0xC0) + (v104 >> 1)];
      LODWORD(v106) = v8 - v105;
      v107 = v7 >= (v8 - v105) << 55;
      if (v7 < (v8 - v105) << 55)
        v106 = v106;
      else
        v106 = byte_1C98326D3[(v8 & 0xC0) + (v104 >> 1)];
      if (v7 < (v8 - v105) << 55)
      {
        v108 = 0;
      }
      else
      {
        v7 -= (v8 - v105) << 55;
        v108 = 1;
      }
      if (v107)
        v109 = v104 + 1;
      else
        v109 = *v103;
      v110 = __clz(v106) - 55;
      v7 <<= v110;
      *v103 = byte_1C98326D3[2 * v104 + 256 + v108];
      v11 += v110;
      if (v11 >= 0)
      {
        v111 = *v10++;
        v7 += (unint64_t)bswap32(v111) << v11;
        v11 -= 32;
        if (v10 >= v95)
          v10 = v95;
      }
      v8 = v106 << v110;
      if ((v109 & 1) == 0)
      {
LABEL_323:
        v127 = v254;
        goto LABEL_347;
      }
      v86 |= 1 << v96;
    }
    v266 = v97 * v246 + 4 * (v96 & ~(-1 << v242));
    v112 = *(_QWORD *)(v79 + 40) + v247 + 123;
    if (v87 <= (v102 ^ 1))
    {
      v114 = v245;
      if ((v102 & 1) == 0)
        goto LABEL_210;
    }
    else
    {
      v113 = &v232[v87 - 1];
      v114 = v245;
      do
      {
        if ((v78 & 1) == 0)
        {
          v115 = *v113;
          v116 = v115 + v266;
          if ((_DWORD)v73 == 2)
          {
            v114 = byte_1C98626F0[v116 + 64];
          }
          else if ((int)v116 < 1)
          {
            v114 = 0;
          }
          else
          {
            v117 = byte_1C98626F0[16 * v100 + (v115 & 3 | (4 * ((v116 >> v73) & 3)))];
            if (a5)
            {
              v114 = v91 + v117;
            }
            else
            {
              if ((v116 >> v73 >> 2) + ((v116 & v259) >> 2))
                v118 = v117 + 3;
              else
                v118 = v117;
              v114 = v118 + v244;
            }
          }
        }
        v119 = *(unsigned __int8 *)(v112 + v114);
        v120 = byte_1C98326D3[(v8 & 0xC0) + (v119 >> 1)];
        LODWORD(v121) = v8 - v120;
        v122 = v7 >= (v8 - v120) << 55;
        if (v7 < (v8 - v120) << 55)
          v121 = v121;
        else
          v121 = byte_1C98326D3[(v8 & 0xC0) + (v119 >> 1)];
        if (v7 < (v8 - v120) << 55)
        {
          v123 = 0;
        }
        else
        {
          v7 -= (v8 - v120) << 55;
          v123 = 1;
        }
        if (v122)
          v124 = v119 + 1;
        else
          v124 = *(_BYTE *)(v112 + v114);
        v125 = __clz(v121) - 55;
        v7 <<= v125;
        *(_BYTE *)(v112 + v114) = byte_1C98326D3[2 * v119 + 256 + v123];
        v11 += v125;
        if (v11 >= 0)
        {
          v126 = *v10++;
          v7 += (unint64_t)bswap32(v126) << v11;
          v11 -= 32;
          if (v10 >= v95)
            v10 = v95;
        }
        --v87;
        v8 = v121 << v125;
        v88 = ((v124 & 1) << v87) | v88;
        --v113;
      }
      while (v87 > (v102 ^ 1));
      if ((v102 & 1) == 0)
      {
LABEL_210:
        v127 = v254;
        if ((_DWORD)v88)
        {
          if ((v78 & 1) == 0)
          {
            if ((_DWORD)v73 == 2)
            {
              v114 = byte_1C98626F0[v266 + 64];
            }
            else if (v266 < 1)
            {
              v114 = 0;
            }
            else
            {
              v215 = byte_1C98626F0[16 * v100 + 4 * ((v266 >> v73) & 3)];
              if (a5)
              {
                v114 = v91 + v215;
              }
              else
              {
                if ((v266 >> v73 >> 2) + ((v266 & v259) >> 2))
                  v215 += 3;
                v114 = v215 + v244;
              }
            }
          }
          v216 = *(unsigned __int8 *)(v112 + v114);
          v217 = byte_1C98326D3[(v8 & 0xC0) + (v216 >> 1)];
          LODWORD(v218) = v8 - v217;
          v219 = v7 >= (v8 - v217) << 55;
          if (v7 < (v8 - v217) << 55)
            v218 = v218;
          else
            v218 = byte_1C98326D3[(v8 & 0xC0) + (v216 >> 1)];
          if (v7 < (v8 - v217) << 55)
          {
            v220 = 0;
          }
          else
          {
            v7 -= (v8 - v217) << 55;
            v220 = 1;
          }
          if (v219)
            v221 = v216 + 1;
          else
            v221 = *(_BYTE *)(v112 + v114);
          v222 = __clz(v218);
          v223 = v222 - 55;
          v8 = v218 << (v222 - 55);
          v7 <<= v222 - 55;
          v214 = v221 & 1;
          *(_BYTE *)(v112 + v114) = byte_1C98326D3[2 * v216 + 256 + v220];
          v11 += v223;
          if (v11 >= 0)
          {
            v224 = *v10++;
            v7 += (unint64_t)bswap32(v224) << v11;
            v11 -= 32;
            if (v10 >= v95)
              v10 = v95;
          }
          v127 = v254;
        }
        else
        {
          v214 = 1;
        }
        v88 = v214 | v88;
        if ((_DWORD)v88)
        {
LABEL_177:
          v128 = 0;
          v129 = 0;
          if (v127)
            v130 = a5 <= 0;
          else
            v130 = 0;
          if (v130)
            v131 = 2;
          else
            v131 = 0;
          v132 = v131 | (v94 == 0);
          v133 = v235 + 4 * v132;
          a6.i32[0] = v88;
          a6 = vcnt_s8(a6);
          a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
          if (a6.i32[0] >= 8u)
            v134 = 8;
          else
            v134 = a6.i32[0];
          if (v134 <= 1)
            v135 = 1;
          else
            v135 = v134;
          v94 = 1;
          v248 = v86;
          do
          {
            while (1)
            {
              v136 = *(unsigned __int8 *)(v133 + v94);
              v137 = byte_1C98326D3[(v8 & 0xC0) + (v136 >> 1)];
              LODWORD(v138) = v8 - v137;
              v139 = v7 >= (v8 - v137) << 55;
              if (v7 < (v8 - v137) << 55)
                v138 = v138;
              else
                v138 = byte_1C98326D3[(v8 & 0xC0) + (v136 >> 1)];
              if (v7 < (v8 - v137) << 55)
              {
                v140 = 0;
              }
              else
              {
                v7 -= (v8 - v137) << 55;
                v140 = 1;
              }
              if (v139)
                v141 = v136 + 1;
              else
                v141 = *(_BYTE *)(v133 + v94);
              v142 = __clz(v138) - 55;
              v7 <<= v142;
              *(_BYTE *)(v133 + v94) = byte_1C98326D3[2 * v136 + 256 + v140];
              v11 += v142;
              if (v11 >= 0)
              {
                v143 = *v10++;
                v7 += (unint64_t)bswap32(v143) << v11;
                v11 -= 32;
                if (v10 >= v95)
                  v10 = v95;
              }
              v8 = v138 << v142;
              v128 |= (v141 & 1) << v129;
              if ((v141 & 1) == 0)
                break;
              v94 = 0;
              if (++v129 == v135)
              {
                v144 = a2 + 2 * v266;
                goto LABEL_216;
              }
            }
            if ((v94 - 1) < 2)
              ++v94;
            ++v129;
          }
          while (v129 != v135);
          v144 = a2 + 2 * v266;
          v145 = a6.i32[0] > 8u;
          if (v94)
          {
            v146 = 0;
            goto LABEL_229;
          }
LABEL_216:
          v147 = *(unsigned __int8 *)(v231 + v132);
          v148 = byte_1C98326D3[((v138 << v142) & 0xC0) + (v147 >> 1)];
          LODWORD(v149) = v8 - v148;
          v150 = v7 >= (v8 - v148) << 55;
          if (v7 < (v8 - v148) << 55)
            v149 = v149;
          else
            v149 = byte_1C98326D3[((v138 << v142) & 0xC0) + (v147 >> 1)];
          if (v7 < (v8 - v148) << 55)
          {
            v151 = 0;
          }
          else
          {
            v7 -= (v8 - v148) << 55;
            v151 = 1;
          }
          if (v150)
            v152 = v147 + 1;
          else
            v152 = *(_BYTE *)(v231 + v132);
          v153 = __clz(v149) - 55;
          v8 = v149 << v153;
          v7 <<= v153;
          v146 = v152 & 1;
          *(_BYTE *)(v231 + v132) = byte_1C98326D3[2 * v147 + 256 + v151];
          v94 = 0;
          v11 += v153;
          if (v11 >= 0)
          {
            v154 = *v10++;
            v7 += (unint64_t)bswap32(v154) << v11;
            v11 -= 32;
            if (v10 >= v95)
              v10 = v95;
          }
          v145 = 1;
LABEL_229:
          v155 = v257;
          v156 = v79;
          v157 = 0;
          v158 = __clz(v88);
          v159 = v158 ^ 0x1F;
          v160 = v158 + 1;
          v161 = (int)((v158 ^ 0x1F) - __clz(__rbit32(v88))) > 3 && v237;
          v162 = v8 << 54;
          v163 = a6.i32[0] - v161 + 1;
          do
          {
            v164 = v7 >= v162;
            if (v7 < v162)
              v165 = 0;
            else
              v165 = v8 << 54;
            v7 = 2 * (v7 - v165);
            v157 = v164 | (2 * v157);
            --v163;
          }
          while (v163 > 1);
          v11 += a6.i32[0] - v161;
          if (v11 >= 0)
          {
            v166 = *v10++;
            v7 += (unint64_t)bswap32(v166) << v11;
            v11 -= 32;
            if (v10 >= v95)
              v10 = v95;
          }
          if (*v243)
            v167 = 1;
          else
            v167 = HIBYTE(**(unsigned __int16 **)(v79 + 48)) & 1;
          v168 = 0;
          v169 = 0;
          v170 = 0;
          v171 = v88 << v160;
          v172 = v157 << (v161 - a6.i8[0]);
          v265 = __clz(__rbit32(v128));
          v173 = v233 | v167;
          v174 = *(_QWORD *)(v79 + 40);
          v252 = v173;
          v175 = *(unsigned __int8 *)(v174 + v173 + 213) >> 2;
          v253 = 3 << (*(_BYTE *)(v174 + v173 + 213) >> 2);
          if (a6.i32[0] <= 1u)
            v176 = 1;
          else
            v176 = a6.i32[0];
          v177 = v176 - 1;
          v264 = 1;
          v251 = v175;
          v178 = v128;
          while (2)
          {
            if ((v178 & 1) != 0)
              v179 = v146 + 2;
            else
              v179 = 1;
            if ((v178 & 1) != 0)
              v146 = 0;
            if (!v145)
              goto LABEL_267;
            v180 = (v178 & 1) == 0;
            if (v265 != v169 || v128 == 0)
              v182 = 2;
            else
              v182 = 3;
            v183 = v182 == v179;
            if (v169 < 8)
              v180 = v183;
            if (v180)
            {
              v184 = v168 > 3 << v175;
              if (v184)
                v185 = (v175 + 1);
              else
                v185 = v175;
              if (v7 >= v162)
              {
                v187 = 0;
                do
                {
                  v186 = v187 + 1;
                  v7 = 2 * (v7 - v162);
                }
                while (v7 >= v162 && v187++ < 0x11);
              }
              else
              {
                v186 = 0;
              }
              v7 *= 2;
              v11 += v186 + 1;
              if (v11 >= 0)
              {
                v189 = *v10++;
                v7 += (unint64_t)bswap32(v189) << v11;
                v11 -= 32;
                if (v10 >= v95)
                  v10 = v95;
              }
              v190 = v186 - 3;
              if (v186 <= 2)
              {
                v191 = 0;
              }
              else
              {
                v186 = (1 << (v186 - 3)) + 2;
                v191 = v190;
              }
              v192 = v186 << v185;
              v193 = v191 + v185;
              if (v191 + (_DWORD)v185)
              {
                v194 = 0;
                v195 = v191 + v175 + v184 + 1;
                do
                {
                  v196 = v7 >= v162;
                  if (v7 < v162)
                    v197 = 0;
                  else
                    v197 = v8 << 54;
                  v7 = 2 * (v7 - v197);
                  v194 = v196 | (2 * v194);
                  --v195;
                }
                while (v195 > 1);
                v11 += v193;
                if (v11 >= 0)
                {
                  v198 = *v10++;
                  v7 += (unint64_t)bswap32(v198) << v11;
                  v11 -= 32;
                  if (v10 >= v95)
                    v10 = v95;
                }
                v199 = v264;
                v192 += v194;
              }
              else
              {
                v199 = v264;
              }
              v168 = v192 + v179;
              v156 = a1;
              if ((v199 & 1) == 0)
                goto LABEL_294;
              if (v192 >= v253)
              {
                v264 = 0;
                ++*(_BYTE *)(*(_QWORD *)(a1 + 40) + v252 + 213);
                goto LABEL_296;
              }
              if ((2 * v192) >> v251
                || (v210 = *(_QWORD *)(a1 + 40) + v252,
                    v213 = *(unsigned __int8 *)(v210 + 213),
                    v211 = (_BYTE *)(v210 + 213),
                    v212 = v213,
                    !v213))
              {
LABEL_294:
                v264 = 0;
                goto LABEL_296;
              }
              v264 = 0;
              *v211 = v212 - 1;
LABEL_296:
              v179 += v192;
            }
            else
            {
LABEL_267:
              v185 = v175;
            }
            v170 += v179;
            v200 = !v161;
            if (v169 != a6.i32[0] - 1)
              v200 = 1;
            v201 = (v179 ^ (v172 >> 31)) - (v172 >> 31);
            if ((v170 & 1) != 0)
              v202 = -v179;
            else
              v202 = v179;
            if ((v200 & 1) != 0)
            {
              v172 *= 2;
              v202 = v201;
            }
            v203 = v267[v159];
            if ((**(_WORD **)(v156 + 48) & 0x100) == 0)
            {
              v204 = v155;
              if (v262)
              {
                v205 = v266 + v203;
                v155 = v257;
                v206 = ((v205 & v259) >> v256) + 8 * (v205 >> a3 >> v256);
                if ((int)a3 < 4)
                  v206 = v266 + v203;
                if (v205)
                  v207 = v206 + 1;
                else
                  v207 = v206;
                v204 = *(unsigned __int8 *)(v262 + v207) * (uint64_t)(int)v257;
              }
              v208 = (v261 + v204 * v202) >> v260;
              if (v208 >= 0x7FFF)
                v208 = 0x7FFFLL;
              if (v208 <= -32768)
                LOWORD(v202) = 0x8000;
              else
                LOWORD(v202) = v208;
              v95 = v263;
            }
            *(_WORD *)(v144 + 2 * v267[v159]) = v202;
            if (v169 == v177)
            {
              v79 = v156;
              v88 = 0;
              v87 = 16;
              a5 = v236;
              v82 = v241;
              v66 = v242;
              v78 = v240;
              v73 = a3;
              v86 = v248;
              v91 = v234;
              goto LABEL_323;
            }
            ++v169;
            v178 >>= 1;
            v209 = __clz(v171) + 1;
            LODWORD(v171) = (_DWORD)v171 << v209;
            v159 -= v209;
            v175 = v185;
            continue;
          }
        }
        goto LABEL_346;
      }
    }
    v127 = v254;
    if ((_DWORD)v88)
      goto LABEL_177;
LABEL_346:
    v87 = 16;
LABEL_347:
    v93 = v127 - 1;
  }
  while (v127 > 0);
  v225 = *(_QWORD *)(v79 + 32);
  if (*v243)
  {
    v226 = *(_QWORD *)(v225 + 2280) + 552;
    v227 = a5 != 0;
    if (v243[1])
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v226 + 8 * v227 + 384))(a2, v73, v243[1]);
    else
      (*(void (**)(uint64_t, uint64_t))(v226 + 32 * v227 + 8 * v66 + 176))(a2, v73);
  }
  else if (v243[1])
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v225 + 2280) + 8 * (v243[1] - 1) + 920))(a2, v73);
  }
  *v229 = v7;
  v229[1] = v8;
  result = (v230 + 16 * v82 + 1);
  v229[2] = v11;
  v229[3] = (unint64_t)v10;
  return result;
}

void sub_1C9779384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a10 = v12;
  a10[1] = v13;
  a10[2] = v10;
  a10[3] = v11;
  _Unwind_Resume(a1);
}

int8x8_t sub_1C9779394(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, int *a7, int32x2_t a8)
{
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned __int8 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned __int8 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  _BOOL8 v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int8x8_t result;
  unsigned int v71;
  BOOL v72;
  _QWORD *v73;
  int8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x8_t v85;
  int8x8_t v86;
  uint64_t v87;
  int v88;
  int v89;
  char v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned __int8 v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t (*v107)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int8x8_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int8x8_t v122;
  uint64_t v123;
  uint64_t v124;
  int8x8_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129[3];

  v13 = *(_QWORD **)(a1 + 32);
  v14 = a7[1];
  v15 = *a7;
  if (v14 == 1)
  {
    v17 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v14)
  {
    v17 = 0;
  }
  else
  {
    v16 = *(_DWORD *)(a1 + 8);
    v17 = v16 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(_BYTE *)(v13[2] + 272))
        v18 = 1;
      else
        v18 = v16 == 0;
      v17 = !v18;
    }
  }
  v19 = v13[2];
  if ((int)v15 > *(unsigned __int8 *)(v19 + 2114))
  {
    if ((int)v15 > *(unsigned __int8 *)(v19 + 2115))
      v17 = 1;
    if (v17)
      goto LABEL_54;
    if (v14 >= *(_DWORD *)(a1 + 12))
      goto LABEL_32;
    v20 = *(uint64_t **)(a1 + 40);
    v21 = ((unsigned __int8 *)v20 - v15)[76];
    v23 = *v20;
    v22 = v20[1];
    v24 = byte_1C98326D3[(v22 & 0xC0) + (v21 >> 1)];
    LODWORD(v25) = v22 - v24;
    if (*v20 < (unint64_t)((v22 - v24) << 55))
      v25 = v25;
    else
      v25 = byte_1C98326D3[(v22 & 0xC0) + (v21 >> 1)];
    if (*v20 < (unint64_t)((v22 - v24) << 55))
    {
      v26 = 0;
    }
    else
    {
      v23 = *v20 - ((v22 - v24) << 55);
      v26 = 1;
    }
    if (*v20 < (unint64_t)((v22 - v24) << 55))
      v27 = ((_BYTE *)v20 - v15)[76];
    else
      v27 = v21 + 1;
    v28 = byte_1C98326D3[2 * v21 + 256 + v26];
    v29 = __clz(v25) - 55;
    v30 = v23 << v29;
    v20[1] = v25 << v29;
    ((_BYTE *)v20 - v15)[76] = v28;
    v31 = v20[2] + v29;
    if (v31 >= 0)
    {
      v32 = (unsigned int *)v20[3];
      v34 = *v32;
      v33 = v32 + 1;
      v30 += (unint64_t)bswap32(v34) << v31;
      v31 -= 32;
      if ((unint64_t)v33 >= v20[4])
        v33 = (unsigned int *)v20[4];
      v20[3] = (uint64_t)v33;
    }
    v20[2] = v31;
    *v20 = v30;
    if ((v27 & 1) != 0)
    {
LABEL_54:
      v62 = v15 - 1;
      v63 = ((1 << v62) + a2);
      v64 = ((1 << v62) + a3);
      v129[0] = v62;
      v129[1] = v14 + 1;
      v129[2] = a5;
      v65 = (a5 & 0xF0) != 0;
      if ((a5 & 0xF0) != 0)
        v66 = 15;
      else
        v66 = 0;
      v67 = v66 | a5 & 0x1FF0;
      v68 = (a5 & 0x1E00) != 0;
      if ((a5 & 0x1E00) != 0)
        v69 = 122880;
      else
        v69 = 0;
      sub_1C9779394(a1, a2, a3, 0, v67 | v69, a6, v129);
      sub_1C9779394(a1, v63, a3, 1, a5 & 0x1FE00 | (v68 << 8) | 0xF0, a6, v129);
      sub_1C9779394(a1, a2, v64, 2, a5 | (v65 << 8) | 0x1FE00u, a6, v129);
      sub_1C9779394(a1, v63, v64, 3, 8176, a6, v129);
      return result;
    }
    v13 = *(_QWORD **)(a1 + 32);
  }
LABEL_32:
  v35 = (unsigned __int8 *)(a1 + 6424);
  v129[0] = a5;
  v36 = v13[1];
  v37 = *(_QWORD *)(v36 + 416);
  v127 = *(_QWORD *)(v36 + 400) + ((v37 * (int)a3 + (int)a2) << *(_BYTE *)(v36 + 531));
  v38 = a7[1];
  v39 = *a7;
  v40 = 1;
  v41 = 1 << v39;
  v128 = v13[285];
  if (*(_DWORD *)(a1 + 4) != 1 && !(v38 | a6))
    goto LABEL_53;
  v18 = v38 == 0;
  v42 = *(uint64_t **)(a1 + 40);
  if (v18)
    v43 = (char *)v42 + 1;
  else
    v43 = *(char **)(a1 + 40);
  v44 = v43[74];
  v46 = *v42;
  v45 = v42[1];
  v47 = byte_1C98326D3[(v45 & 0xC0) + (v44 >> 1)];
  LODWORD(v48) = v45 - v47;
  if (*v42 < (unint64_t)((v45 - v47) << 55))
    v48 = v48;
  else
    v48 = byte_1C98326D3[(v45 & 0xC0) + (v44 >> 1)];
  if (*v42 < (unint64_t)((v45 - v47) << 55))
  {
    v49 = 0;
  }
  else
  {
    v46 = *v42 - ((v45 - v47) << 55);
    v49 = 1;
  }
  if (*v42 < (unint64_t)((v45 - v47) << 55))
    v50 = v43[74];
  else
    v50 = v44 + 1;
  v51 = byte_1C98326D3[2 * v44 + 256 + v49];
  v52 = __clz(v48) - 55;
  v53 = v46 << v52;
  v42[1] = v48 << v52;
  v43[74] = v51;
  v54 = v42[2] + v52;
  if (v54 >= 0)
  {
    v55 = (unsigned int *)v42[3];
    v57 = *v55;
    v56 = v55 + 1;
    v53 += (unint64_t)bswap32(v57) << v54;
    v54 -= 32;
    if ((unint64_t)v56 >= v42[4])
      v56 = (unsigned int *)v42[4];
    v42[3] = (uint64_t)v56;
  }
  v42[2] = v54;
  *v42 = v53;
  v40 = v50 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    v58 = *(_QWORD *)(a1 + 32);
    v59 = sub_1C9706788(v58, a2, a3, 1 << v39, 1 << v39, v129, a8);
    v60 = *v35;
    if ((int)v39 > 3)
      v126 = 0;
    else
      v126 = byte_1C9859C98[v60];
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(v58 + 16) + 403))
        v72 = (v60 & 0xFFFFFFEF) == 10;
      else
        v72 = 0;
      v71 = v72;
    }
    else
    {
      v71 = 0;
    }
    sub_1C9706C38(v128 + 8, v60, v39, v129[0], v59, v71, v37, v127);
    v73 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v74 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(_QWORD *)&vdup_n_s32((2 << v39) - 64));
    v75 = v73[117];
    v76 = (uint64_t)(int)a3 >> 2;
    v77 = v73[121];
    v78 = v73[116];
    v79 = (uint64_t)(int)a2 >> 2;
    v80 = v73[118];
    if (v41 >= 5)
    {
      v81 = v79 + v78 * ((uint64_t)(int)a3 >> 3);
      v82 = vmax_s8(*(int8x8_t *)(v80 + v81), v74);
      *(int8x8_t *)(v77 + v76 + v75 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v77+ v76+ v75 * ((uint64_t)(int)a2 >> 3)), v74);
      *(int8x8_t *)(v80 + v81) = v82;
    }
    v61 = (_DWORD)v39 == 2;
    v83 = v79 + v78 * ((uint64_t)(v41 + (int)a3) >> 3);
    v84 = v76 + v75 * ((uint64_t)(v41 + (int)a2) >> 3);
    v85 = vmax_s8(*(int8x8_t *)(v77 + v84), v74);
    v86 = vmax_s8(*(int8x8_t *)(v80 + v83), v74);
    *(int8x8_t *)(v77 + v84) = v85;
    *(int8x8_t *)(v80 + v83) = v86;
  }
  else
  {
LABEL_53:
    v126 = 0;
    v61 = 0;
  }
  sub_1C9706DCC((_QWORD *)a1, a2, a3, v40, a6);
  v87 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  if (*(_BYTE *)(v87 + 11))
  {
    v88 = HIBYTE(**(unsigned __int16 **)(a1 + 48)) & 1;
    if (!v40)
      return result;
  }
  else
  {
    LOBYTE(v88) = 1;
    if (!v40)
      return result;
  }
  v89 = *(unsigned __int8 *)(v87 + 1615) + 2;
  *(_BYTE *)(a1 + 6426) = 0;
  if ((int)v39 > v89)
    v90 = 1;
  else
    v90 = v88;
  if ((v90 & 1) == 0)
  {
    v91 = *(uint64_t **)(a1 + 40);
    v92 = *((unsigned __int8 *)v91 + 81);
    v94 = *v91;
    v93 = v91[1];
    v95 = byte_1C98326D3[(v93 & 0xC0) + (v92 >> 1)];
    LODWORD(v96) = v93 - v95;
    if (*v91 < (unint64_t)((v93 - v95) << 55))
      v96 = v96;
    else
      v96 = byte_1C98326D3[(v93 & 0xC0) + (v92 >> 1)];
    if (*v91 < (unint64_t)((v93 - v95) << 55))
    {
      v97 = 0;
    }
    else
    {
      v94 = *v91 - ((v93 - v95) << 55);
      v97 = 1;
    }
    if (*v91 < (unint64_t)((v93 - v95) << 55))
      v98 = *((_BYTE *)v91 + 81);
    else
      v98 = v92 + 1;
    v99 = byte_1C98326D3[2 * v92 + 256 + v97];
    v100 = __clz(v96) - 55;
    v101 = v94 << v100;
    v91[1] = v96 << v100;
    *((_BYTE *)v91 + 81) = v99;
    v102 = v91[2] + v100;
    if (v102 >= 0)
    {
      v103 = (unsigned int *)v91[3];
      v105 = *v103;
      v104 = v103 + 1;
      v101 += (unint64_t)bswap32(v105) << v102;
      v102 -= 32;
      if ((unint64_t)v104 >= v91[4])
        v104 = (unsigned int *)v91[4];
      v91[3] = (uint64_t)v104;
    }
    v91[2] = v102;
    *v91 = v101;
    *(_BYTE *)(a1 + 6426) = v98 & 1;
  }
  *(_BYTE *)(a1 + 6427) = sub_1C9707624(a1, 0, *v35);
  v106 = a1 + 16 * ((int)v39 > 2);
  v107 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(v106 + 6368);
  v108 = *(_QWORD *)(v106 + 6376);
  v109 = (_QWORD *)(a1 + (v108 >> 1));
  if ((v108 & 1) != 0)
    v107 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*v109 + v107);
  v110 = v107(v109, a1 + 64, v39, v126, 0);
  v111 = v128 + 552;
  if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
  {
    v112 = v39 - 2;
  }
  else
  {
    v112 = v39 - 2;
    if (!*(_BYTE *)(a1 + 6426))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v111 + 16 * v112 + 8 * v61))(v127, v37, a1 + 64, 0, v110);
      goto LABEL_102;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v111 + 8 * v112 + 248))(v127, v37, a1 + 64, 0);
LABEL_102:
  if (*(_DWORD *)(a1 + 4) != 1)
  {
    v113 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v114 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(_QWORD *)&vdup_n_s32((2 << v39) - 64));
    v115 = v113[117];
    v116 = (uint64_t)(int)a3 >> 2;
    v117 = v113[121];
    v118 = v113[116];
    v119 = (uint64_t)(int)a2 >> 2;
    v120 = v113[118];
    if (v41 >= 5)
    {
      v121 = v119 + v118 * ((uint64_t)(int)a3 >> 3);
      v122 = vmax_s8(*(int8x8_t *)(v120 + v121), v114);
      *(int8x8_t *)(v117 + v116 + v115 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v117+ v116+ v115 * ((uint64_t)(int)a2 >> 3)), v114);
      *(int8x8_t *)(v120 + v121) = v122;
    }
    v123 = v119 + v118 * ((uint64_t)(v41 + (int)a3) >> 3);
    v124 = v116 + v115 * ((uint64_t)(v41 + (int)a2) >> 3);
    v125 = vmax_s8(*(int8x8_t *)(v117 + v124), v114);
    result = vmax_s8(*(int8x8_t *)(v120 + v123), v114);
    *(int8x8_t *)(v117 + v124) = v125;
    *(int8x8_t *)(v120 + v123) = result;
  }
  return result;
}

_QWORD *sub_1C9779A9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, unsigned int *a7, int32x2_t a8)
{
  int v10;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned __int8 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  char v59;
  char v60;
  char v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned __int8 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  _QWORD *result;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  unsigned __int8 v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  _QWORD *v128;
  int8x8_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int8x8_t v137;
  uint64_t v138;
  uint64_t v139;
  int8x8_t v140;
  int8x8_t v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  int v145;
  _BOOL4 v146;
  uint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char v155;
  unsigned __int8 v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t (*v164)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  int8x8_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int8x8_t v179;
  uint64_t v180;
  uint64_t v181;
  int8x8_t v182;
  int8x8_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t (**v190)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char v200;
  unsigned __int8 v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int *v205;
  unsigned int *v206;
  unsigned int v207;
  uint64_t (*v208)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int8x8_t v214;
  uint64_t v215;
  int8x8_t v216;
  uint64_t v217;
  int32x2_t v218;
  char v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  uint64_t (**v232)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _WORD *);
  uint64_t v233;
  uint64_t (**v234)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  _BOOL8 v235;
  int v236;
  uint64_t v237;
  unsigned int v238;
  _BOOL4 v239;
  unsigned int v240;
  uint64_t v241;
  int v242;
  int v243;
  unsigned __int8 *v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _WORD v250[2];
  unsigned int v251;
  int32x2_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;

  v10 = a4;
  v255 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 32);
  v15 = a7[1];
  v16 = (int)*a7;
  if (v15 == 1)
  {
    v18 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v15)
  {
    v18 = 0;
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 8);
    v18 = v17 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(_BYTE *)(*(_QWORD *)(v14 + 16) + 272))
        v19 = 1;
      else
        v19 = v17 == 0;
      v18 = !v19;
    }
  }
  v20 = *(_QWORD *)(v14 + 16);
  if ((int)v16 <= *(unsigned __int8 *)(v20 + 2114))
    goto LABEL_33;
  v21 = (int)v16 > *(unsigned __int8 *)(v20 + 2115) || v18;
  if ((v21 & 1) != 0)
  {
    v22 = 1;
    goto LABEL_34;
  }
  if (v15 >= *(_DWORD *)(a1 + 12))
  {
LABEL_33:
    v22 = 0;
  }
  else
  {
    v23 = *(uint64_t **)(a1 + 40);
    v24 = ((unsigned __int8 *)v23 - v16)[76];
    v26 = *v23;
    v25 = v23[1];
    v27 = byte_1C98326D3[(v25 & 0xC0) + (v24 >> 1)];
    LODWORD(v28) = v25 - v27;
    if (*v23 < (unint64_t)((v25 - v27) << 55))
      v28 = v28;
    else
      v28 = byte_1C98326D3[(v25 & 0xC0) + (v24 >> 1)];
    if (*v23 < (unint64_t)((v25 - v27) << 55))
    {
      v29 = 0;
    }
    else
    {
      v26 = *v23 - ((v25 - v27) << 55);
      v29 = 1;
    }
    if (*v23 < (unint64_t)((v25 - v27) << 55))
      v30 = ((_BYTE *)v23 - v16)[76];
    else
      v30 = v24 + 1;
    v31 = byte_1C98326D3[2 * v24 + 256 + v29];
    v32 = __clz(v28) - 55;
    v33 = v26 << v32;
    v23[1] = v28 << v32;
    ((_BYTE *)v23 - v16)[76] = v31;
    v34 = v23[2] + v32;
    if (v34 >= 0)
    {
      v35 = (unsigned int *)v23[3];
      v37 = *v35;
      v36 = v35 + 1;
      v33 += (unint64_t)bswap32(v37) << v34;
      v34 -= 32;
      if ((unint64_t)v36 >= v23[4])
        v36 = (unsigned int *)v23[4];
      v23[3] = (uint64_t)v36;
    }
    v23[2] = v34;
    *v23 = v33;
    v22 = v30 & 1;
  }
LABEL_34:
  if ((int)v16 < 3)
  {
    v41 = a6;
  }
  else
  {
    v38 = *(_QWORD *)(a1 + 40) + 76;
    if ((_DWORD)v16 == 3)
      v39 = 0;
    else
      v39 = v22;
    if ((v39 & 1) != 0)
    {
      v40 = 0;
      v41 = 0;
      v42 = 1;
      do
      {
        v43 = v42;
        if (((a6 >> v40) & 1) != 0)
        {
          v44 = *(uint64_t **)(a1 + 40);
          v45 = *(unsigned __int8 *)(v38 + v15);
          v47 = *v44;
          v46 = v44[1];
          v48 = byte_1C98326D3[(v46 & 0xC0) + (v45 >> 1)];
          LODWORD(v49) = v46 - v48;
          if (*v44 < (unint64_t)((v46 - v48) << 55))
            v49 = v49;
          else
            v49 = byte_1C98326D3[(v46 & 0xC0) + (v45 >> 1)];
          if (*v44 < (unint64_t)((v46 - v48) << 55))
          {
            v50 = 0;
          }
          else
          {
            v47 = *v44 - ((v46 - v48) << 55);
            v50 = 1;
          }
          if (*v44 < (unint64_t)((v46 - v48) << 55))
            v51 = *(_BYTE *)(v38 + v15);
          else
            v51 = v45 + 1;
          v52 = byte_1C98326D3[2 * v45 + 256 + v50];
          v53 = __clz(v49) - 55;
          v54 = v47 << v53;
          v44[1] = v49 << v53;
          *(_BYTE *)(v38 + v15) = v52;
          v55 = v44[2] + v53;
          if (v55 >= 0)
          {
            v56 = (unsigned int *)v44[3];
            v58 = *v56;
            v57 = v56 + 1;
            v54 += (unint64_t)bswap32(v58) << v55;
            v55 -= 32;
            if ((unint64_t)v57 >= v44[4])
              v57 = (unsigned int *)v44[4];
            v44[3] = (uint64_t)v57;
          }
          v44[2] = v55;
          *v44 = v54;
          v41 = ((v51 & 1) << v40) | v41;
        }
        v42 = 0;
        v40 = 1;
      }
      while ((v43 & 1) != 0);
    }
    else
    {
      v59 = 0;
      v41 = 0;
      v60 = 1;
      do
      {
        v61 = v60;
        if (((a6 >> v59) & 1) != 0)
        {
          v62 = *(uint64_t **)(a1 + 40);
          v63 = *(unsigned __int8 *)(v38 + v15);
          v65 = *v62;
          v64 = v62[1];
          v66 = byte_1C98326D3[(v64 & 0xC0) + (v63 >> 1)];
          LODWORD(v67) = v64 - v66;
          if (*v62 < (unint64_t)((v64 - v66) << 55))
            v67 = v67;
          else
            v67 = byte_1C98326D3[(v64 & 0xC0) + (v63 >> 1)];
          if (*v62 < (unint64_t)((v64 - v66) << 55))
          {
            v68 = 0;
          }
          else
          {
            v65 = *v62 - ((v64 - v66) << 55);
            v68 = 1;
          }
          if (*v62 < (unint64_t)((v64 - v66) << 55))
            v69 = *(_BYTE *)(v38 + v15);
          else
            v69 = v63 + 1;
          v70 = byte_1C98326D3[2 * v63 + 256 + v68];
          v71 = __clz(v67) - 55;
          v72 = v65 << v71;
          v62[1] = v67 << v71;
          *(_BYTE *)(v38 + v15) = v70;
          v73 = v62[2] + v71;
          if (v73 >= 0)
          {
            v74 = (unsigned int *)v62[3];
            v76 = *v74;
            v75 = v74 + 1;
            v72 += (unint64_t)bswap32(v76) << v73;
            v73 -= 32;
            if ((unint64_t)v75 >= v62[4])
              v75 = (unsigned int *)v62[4];
            v62[3] = (uint64_t)v75;
          }
          v62[2] = v73;
          *v62 = v72;
          v77 = *(uint64_t **)(a1 + 40);
          v78 = *(unsigned __int8 *)(v38 + v15);
          v79 = *v77;
          v80 = v77[1];
          v81 = byte_1C98326D3[(v80 & 0xC0) + (v78 >> 1)];
          LODWORD(v82) = v80 - v81;
          if (*v77 < (unint64_t)((v80 - v81) << 55))
            v82 = v82;
          else
            v82 = byte_1C98326D3[(v80 & 0xC0) + (v78 >> 1)];
          if (*v77 < (unint64_t)((v80 - v81) << 55))
          {
            v83 = 0;
          }
          else
          {
            v79 = *v77 - ((v80 - v81) << 55);
            v83 = 1;
          }
          if (*v77 < (unint64_t)((v80 - v81) << 55))
            v84 = *(_BYTE *)(v38 + v15);
          else
            v84 = v78 + 1;
          v85 = byte_1C98326D3[2 * v78 + 256 + v83];
          v86 = __clz(v82) - 55;
          v87 = v79 << v86;
          v77[1] = v82 << v86;
          *(_BYTE *)(v38 + v15) = v85;
          v88 = v77[2] + v86;
          if (v88 >= 0)
          {
            v89 = (unsigned int *)v77[3];
            v91 = *v89;
            v90 = v89 + 1;
            v87 += (unint64_t)bswap32(v91) << v88;
            v88 -= 32;
            if ((unint64_t)v90 >= v77[4])
              v90 = (unsigned int *)v77[4];
            v77[3] = (uint64_t)v90;
          }
          v77[2] = v88;
          *v77 = v87;
          v41 = ((v84 & 1) << ((2 * v59) | 1)) | ((v69 & 1) << (2 * v59)) | v41;
        }
        v60 = 0;
        v59 = 1;
      }
      while ((v61 & 1) != 0);
    }
  }
  if (v22)
  {
    v92 = v16 - 1;
    v93 = ((1 << v92) + a2);
    v94 = ((1 << v92) + a3);
    LODWORD(v253) = v92;
    HIDWORD(v253) = v15 + 1;
    LODWORD(v254) = a5;
    if ((a5 & 0xF0) != 0)
      v95 = 15;
    else
      v95 = 0;
    v96 = v95 | a5 & 0x1FF0;
    if ((a5 & 0x1E00) != 0)
      v97 = 122880;
    else
      v97 = 0;
    sub_1C9779A9C(a1, a2, a3, 0, v96 | v97, v41, &v253);
    sub_1C9779A9C(a1, v93, a3, 1, a5 & 0x1FE00 | (((a5 & 0x1E00) != 0) << 8) | 0xF0, v41, &v253);
    sub_1C9779A9C(a1, a2, v94, 2, a5 | (((a5 & 0xF0) != 0) << 8) | 0x1FE00u, v41, &v253);
    return (_QWORD *)sub_1C9779A9C(a1, v93, v94, 3, 8176, v41, &v253);
  }
  v99 = (unsigned __int8 *)(a1 + 6416);
  v251 = a5;
  v100 = *(_QWORD *)(a1 + 32);
  v101 = *(_QWORD *)(v100 + 8);
  v248 = *(_QWORD *)(v101 + 416);
  v246 = *(_QWORD *)(v101 + 400) + ((v248 * (int)a3 + (int)a2) << *(_BYTE *)(v101 + 531));
  v102 = a7[1];
  v103 = 1;
  v104 = *a7;
  v242 = 1 << v104;
  v244 = (unsigned __int8 *)(a1 + 6416);
  v233 = *(_QWORD *)(v100 + 2280);
  if (*(_DWORD *)(a1 + 4) != 1 && !(v102 | v41))
    goto LABEL_119;
  v19 = v102 == 0;
  v105 = *(uint64_t **)(a1 + 40);
  if (v19)
    v106 = (char *)v105 + 1;
  else
    v106 = *(char **)(a1 + 40);
  v107 = v106[74];
  v109 = *v105;
  v108 = v105[1];
  v110 = byte_1C98326D3[(v108 & 0xC0) + (v107 >> 1)];
  LODWORD(v111) = v108 - v110;
  if (*v105 < (unint64_t)((v108 - v110) << 55))
    v111 = v111;
  else
    v111 = byte_1C98326D3[(v108 & 0xC0) + (v107 >> 1)];
  if (*v105 < (unint64_t)((v108 - v110) << 55))
  {
    v112 = 0;
  }
  else
  {
    v109 = *v105 - ((v108 - v110) << 55);
    v112 = 1;
  }
  if (*v105 < (unint64_t)((v108 - v110) << 55))
    v113 = v106[74];
  else
    v113 = v107 + 1;
  v114 = byte_1C98326D3[2 * v107 + 256 + v112];
  v115 = __clz(v111) - 55;
  v116 = v109 << v115;
  v105[1] = v111 << v115;
  v106[74] = v114;
  v117 = v105[2] + v115;
  if (v117 >= 0)
  {
    v118 = (unsigned int *)v105[3];
    v120 = *v118;
    v119 = v118 + 1;
    v116 += (unint64_t)bswap32(v120) << v117;
    v117 -= 32;
    if ((unint64_t)v119 >= v105[4])
      v119 = (unsigned int *)v105[4];
    v105[3] = (uint64_t)v119;
  }
  v105[2] = v117;
  *v105 = v116;
  v103 = v113 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    v121 = v10;
    v122 = *(_QWORD *)(a1 + 32);
    v123 = sub_1C9706788(v122, a2, a3, v242, v242, &v251, a8);
    v124 = *(unsigned __int8 *)(a1 + 6425);
    if (v124 == 35)
      v124 = *(unsigned __int8 *)(a1 + 6416);
    v125 = *(unsigned __int8 *)(a1 + 6424);
    if ((int)v104 > 3)
    {
      v238 = 0;
      v240 = 0;
    }
    else
    {
      v238 = byte_1C9859C98[v125];
      v240 = byte_1C9859C98[byte_1C98326B0[v124]];
    }
    v235 = (_DWORD)v104 == 2;
    v245 = byte_1C98326B0[v124];
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(v122 + 16) + 403))
        v127 = (v125 & 0xFFFFFFEF) == 10;
      else
        v127 = 0;
      v126 = v127;
    }
    else
    {
      v126 = 0;
    }
    v10 = v121;
    a5 = v251;
    sub_1C9706C38(v233 + 8, v125, v104, v251, v123, v126, v248, v246);
    v128 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v129 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(_QWORD *)&vdup_n_s32((2 << v104) - 64));
    v130 = v128[117];
    v131 = (uint64_t)(int)a3 >> 2;
    v132 = v128[121];
    v133 = v128[116];
    v134 = (uint64_t)(int)a2 >> 2;
    v135 = v128[118];
    if (v242 >= 5)
    {
      v136 = v134 + v133 * ((uint64_t)(int)a3 >> 3);
      v137 = vmax_s8(*(int8x8_t *)(v135 + v136), v129);
      *(int8x8_t *)(v132 + v131 + v130 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v132+ v131+ v130 * ((uint64_t)(int)a2 >> 3)), v129);
      *(int8x8_t *)(v135 + v136) = v137;
    }
    v99 = (unsigned __int8 *)(a1 + 6416);
    v138 = v134 + v133 * ((uint64_t)(v242 + (int)a3) >> 3);
    v139 = v131 + v130 * ((uint64_t)(v242 + (int)a2) >> 3);
    v140 = vmax_s8(*(int8x8_t *)(v132 + v139), v129);
    v141 = vmax_s8(*(int8x8_t *)(v135 + v138), v129);
    *(int8x8_t *)(v132 + v139) = v140;
    *(int8x8_t *)(v135 + v138) = v141;
  }
  else
  {
LABEL_119:
    v238 = 0;
    v240 = 0;
    v235 = 0;
    v245 = 0;
  }
  result = sub_1C9706DCC((_QWORD *)a1, a2, a3, v103, v41);
  v142 = *(_QWORD *)(a1 + 32);
  v143 = *(_QWORD *)(v142 + 32);
  if (*(_BYTE *)(v143 + 11))
    v144 = (**(_WORD **)(a1 + 48) & 0x100) == 0;
  else
    v144 = 0;
  v145 = *(unsigned __int8 *)(v143 + 1615) + 2;
  if (v103)
  {
    v230 = v10;
    v99[10] = 0;
    v228 = v145;
    v146 = v144;
    if ((int)v104 <= v145 && v144)
    {
      v148 = *(uint64_t **)(a1 + 40);
      v149 = *((unsigned __int8 *)v148 + 81);
      v151 = *v148;
      v150 = v148[1];
      v152 = byte_1C98326D3[(v150 & 0xC0) + (v149 >> 1)];
      LODWORD(v153) = v150 - v152;
      if (*v148 < (unint64_t)((v150 - v152) << 55))
        v153 = v153;
      else
        v153 = byte_1C98326D3[(v150 & 0xC0) + (v149 >> 1)];
      if (*v148 < (unint64_t)((v150 - v152) << 55))
      {
        v154 = 0;
      }
      else
      {
        v151 = *v148 - ((v150 - v152) << 55);
        v154 = 1;
      }
      if (*v148 < (unint64_t)((v150 - v152) << 55))
        v155 = *((_BYTE *)v148 + 81);
      else
        v155 = v149 + 1;
      v156 = byte_1C98326D3[2 * v149 + 256 + v154];
      v157 = __clz(v153) - 55;
      v158 = v151 << v157;
      v148[1] = v153 << v157;
      *((_BYTE *)v148 + 81) = v156;
      v159 = v148[2] + v157;
      if (v159 >= 0)
      {
        v160 = (unsigned int *)v148[3];
        v162 = *v160;
        v161 = v160 + 1;
        v158 += (unint64_t)bswap32(v162) << v159;
        v159 -= 32;
        if ((unint64_t)v161 >= v148[4])
          v161 = (unsigned int *)v148[4];
        v148[3] = (uint64_t)v161;
      }
      v148[2] = v159;
      *v148 = v158;
      v99[10] = v155 & 1;
    }
    v99[11] = sub_1C9707624(a1, 0, v99[8]);
    v163 = a1 + 16 * ((int)v104 > 2);
    v164 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(v163 + 6368);
    v165 = *(_QWORD *)(v163 + 6376);
    v166 = (_QWORD *)(a1 + (v165 >> 1));
    if ((v165 & 1) != 0)
      v164 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*v166 + v164);
    v167 = v164(v166, a1 + 64, v104, v238, 0);
    v168 = v233 + 552;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      v169 = (int)v104 - 2;
    }
    else
    {
      v169 = (int)v104 - 2;
      if (!*(_BYTE *)(a1 + 6426))
      {
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v168
                                                                                                 + 16 * v169
                                                                                                 + 8 * v235))(v246, v248, a1 + 64, 0, v167);
LABEL_161:
        v142 = *(_QWORD *)(a1 + 32);
        v99 = (unsigned __int8 *)(a1 + 6416);
        if (*(_DWORD *)(a1 + 4) != 1)
        {
          v170 = *(_QWORD **)(v142 + 8);
          v171 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(_QWORD *)&vdup_n_s32((2 << v104) - 64));
          v172 = v170[117];
          v173 = (uint64_t)(int)a3 >> 2;
          v174 = v170[121];
          v175 = v170[116];
          v176 = (uint64_t)(int)a2 >> 2;
          v177 = v170[118];
          if (v242 >= 5)
          {
            v178 = v176 + v175 * ((uint64_t)(int)a3 >> 3);
            v179 = vmax_s8(*(int8x8_t *)(v177 + v178), v171);
            *(int8x8_t *)(v174 + v173 + v172 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v174+ v173+ v172 * ((uint64_t)(int)a2 >> 3)), v171);
            *(int8x8_t *)(v177 + v178) = v179;
          }
          v180 = v176 + v175 * ((uint64_t)(v242 + (int)a3) >> 3);
          v181 = v173 + v172 * ((uint64_t)(v242 + (int)a2) >> 3);
          v182 = vmax_s8(*(int8x8_t *)(v174 + v181), v171);
          v183 = vmax_s8(*(int8x8_t *)(v177 + v180), v171);
          *(int8x8_t *)(v174 + v181) = v182;
          *(int8x8_t *)(v177 + v180) = v183;
          v142 = *(_QWORD *)(a1 + 32);
        }
        v144 = v146;
        v10 = v230;
        v145 = v228;
        goto LABEL_166;
      }
    }
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v168 + 8 * v169 + 248))(v246, v248, a1 + 64, 0);
    goto LABEL_161;
  }
LABEL_166:
  v249 = *(_QWORD *)(*(_QWORD *)(v142 + 8) + 424);
  v184 = v104;
  if ((int)v104 < 3)
  {
    if (v10 != 3)
      return result;
    v231 = a7[2];
    v251 = v231;
    v185 = 1 << v104;
    v236 = a2 - v242;
    v229 = a3 - v242;
  }
  else
  {
    v231 = a5;
    v236 = a2;
    v229 = a3;
    v184 = (v104 - 1);
    v185 = v242 >> 1;
  }
  v186 = 0;
  v253 = 0;
  v254 = 0;
  v187 = a1 + 64;
  v188 = (int)v184 <= v145 && v144;
  v239 = v188;
  v247 = a1;
  v189 = a1 + 16 * ((int)v184 > 2);
  v190 = (uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(v189 + 6368);
  v191 = (uint64_t *)(v189 + 6376);
  v243 = v185;
  v227 = (v185 * v185);
  v192 = v187;
  do
  {
    if ((v41 & 1) != 0)
    {
      v99[10] = 0;
      if (v239)
      {
        v193 = *(uint64_t **)(v247 + 40);
        v194 = *((unsigned __int8 *)v193 + 82);
        v196 = *v193;
        v195 = v193[1];
        v197 = byte_1C98326D3[(v195 & 0xC0) + (v194 >> 1)];
        LODWORD(v198) = v195 - v197;
        if (*v193 < (unint64_t)((v195 - v197) << 55))
          v198 = v198;
        else
          v198 = byte_1C98326D3[(v195 & 0xC0) + (v194 >> 1)];
        if (*v193 < (unint64_t)((v195 - v197) << 55))
        {
          v199 = 0;
        }
        else
        {
          v196 = *v193 - ((v195 - v197) << 55);
          v199 = 1;
        }
        if (*v193 < (unint64_t)((v195 - v197) << 55))
          v200 = *((_BYTE *)v193 + 82);
        else
          v200 = v194 + 1;
        v201 = byte_1C98326D3[2 * v194 + 256 + v199];
        v202 = __clz(v198) - 55;
        v203 = v196 << v202;
        v193[1] = v198 << v202;
        *((_BYTE *)v193 + 82) = v201;
        v204 = v193[2] + v202;
        if (v204 >= 0)
        {
          v205 = (unsigned int *)v193[3];
          v207 = *v205;
          v206 = v205 + 1;
          v203 += (unint64_t)bswap32(v207) << v204;
          v204 -= 32;
          if ((unint64_t)v206 >= v193[4])
            v206 = (unsigned int *)v193[4];
          v193[3] = (uint64_t)v206;
        }
        v193[2] = v204;
        *v193 = v203;
        v99[10] = v200 & 1;
      }
      v99[11] = sub_1C9707624(v247, 1u, v245);
      v208 = *v190;
      v209 = (_QWORD *)(v247 + (*v191 >> 1));
      if ((*v191 & 1) != 0)
        v208 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*v209 + v208);
      v210 = v208(v209, v192, v184, v240, (v186 >> 1) + 1);
      v99 = v244;
      if (v244[10])
        v211 = -1;
      else
        v211 = v210;
      *((_DWORD *)&v253 + v186) = v211;
    }
    ++v186;
    LODWORD(v41) = v41 >> 1;
    v192 += 2 * v227;
  }
  while (v186 != 4);
  v212 = v184;
  v213 = 0;
  v214 = vand_s8((int8x8_t)vdup_n_s32(v231), (int8x8_t)0xFFFE00FFFFFFFFF0);
  v215 = (int)(v236 & 0xFFFFFFFE);
  v237 = v233 + 8;
  v216 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v231 & 0xF0) == 0), 0x1FuLL)), (int8x8_t)0x1E0000000000, (int8x8_t)0x1F000000000FLL);
  v241 = v212;
  v217 = v233 + 8 * (int)v212;
  v232 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _WORD *))(v217 + 664);
  v234 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v217 + 816);
  v218 = (int32x2_t)vorr_s8(v216, v214);
  v252 = v218;
  v219 = 1;
  v220 = v247;
  do
  {
    v221 = v219;
    v222 = *(_QWORD *)(v220 + 32);
    v223 = v229 + v213 * v243;
    v224 = *(_QWORD *)(*(_QWORD *)(v222 + 8) + 408)
         + ((v215 + *(_QWORD *)(*(_QWORD *)(v222 + 8) + 424) * v223) << *(_BYTE *)(*(_QWORD *)(v222 + 8) + 531));
    if (*(_DWORD *)(v220 + 4) == 1)
    {
      v225 = sub_1C9706788(v222, v215, v223, 2 * v243, v243, (unsigned int *)&v252 + v213, v218);
      v220 = v247;
      sub_1C9708548(v237, v245, v241, v252.u32[v213], v225, v249, v224);
    }
    v250[0] = *((_DWORD *)&v253 + v213);
    v250[1] = *(_DWORD *)((char *)&v253 + ((4 * v213) | 8));
    v226 = v187 + 4 * (_DWORD)v227;
    if ((*(_BYTE *)(*(_QWORD *)(v220 + 48) + 1) & 1) != 0)
      result = (_QWORD *)(*v234)(v224, v249, v187, v226, 0);
    else
      result = (_QWORD *)(*v232)(v224, v249, v187, v226, 0, v250);
    v219 = 0;
    v187 += 2 * v227;
    v213 = 1;
  }
  while ((v221 & 1) != 0);
  return result;
}

uint64_t sub_1C977A828(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int *a7, int32x2_t a8)
{
  uint64_t v8;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned __int8 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BOOL8 v70;
  int v71;
  uint64_t *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned __int8 v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  _QWORD *v94;
  int8x8_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x8_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x8_t v106;
  int8x8_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned __int8 v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t (*v129)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  int8x8_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int8x8_t v144;
  uint64_t v145;
  uint64_t v146;
  int8x8_t v147;
  int8x8_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unint64_t v166;
  unint64_t v167;
  BOOL v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  unsigned __int8 v172;
  int v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  BOOL v184;
  uint64_t v185;
  char v186;
  unsigned __int8 v187;
  int v188;
  unint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned __int8 v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int *v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t (*v209)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t);
  _QWORD *v210;
  __int16 v211;
  __int16 v212;
  uint64_t v213;
  _BOOL8 v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t (**v226)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  int v235;
  int v236;
  int v237;
  uint64_t v238;

  v8 = a5;
  v238 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 32);
  v13 = a7[1];
  v14 = *a7;
  if (v13 == 1)
  {
    v16 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v13)
  {
    v16 = 0;
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 8);
    v16 = v15 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(_BYTE *)(*(_QWORD *)(v12 + 16) + 272))
        v17 = 1;
      else
        v17 = v15 == 0;
      v16 = !v17;
    }
  }
  v18 = (unsigned __int8 *)(a1 + 6424);
  v19 = v13;
  v20 = *(_QWORD *)(v12 + 16);
  if ((int)v14 <= *(unsigned __int8 *)(v20 + 2114))
    goto LABEL_33;
  v21 = (int)v14 > *(unsigned __int8 *)(v20 + 2115) || v16;
  if ((v21 & 1) != 0)
  {
    v22 = 1;
    goto LABEL_34;
  }
  if (v13 >= *(_DWORD *)(a1 + 12))
  {
LABEL_33:
    v22 = 0;
    goto LABEL_34;
  }
  v23 = *(uint64_t **)(a1 + 40);
  v24 = ((unsigned __int8 *)v23 - v14)[76];
  v26 = *v23;
  v25 = v23[1];
  v27 = byte_1C98326D3[(v25 & 0xC0) + (v24 >> 1)];
  LODWORD(v28) = v25 - v27;
  if (*v23 < (unint64_t)((v25 - v27) << 55))
    v28 = v28;
  else
    v28 = byte_1C98326D3[(v25 & 0xC0) + (v24 >> 1)];
  if (*v23 < (unint64_t)((v25 - v27) << 55))
  {
    v29 = 0;
  }
  else
  {
    v26 = *v23 - ((v25 - v27) << 55);
    v29 = 1;
  }
  if (*v23 < (unint64_t)((v25 - v27) << 55))
    v30 = ((_BYTE *)v23 - v14)[76];
  else
    v30 = v24 + 1;
  v31 = byte_1C98326D3[2 * v24 + 256 + v29];
  v32 = __clz(v28) - 55;
  v33 = v26 << v32;
  v23[1] = v28 << v32;
  ((_BYTE *)v23 - v14)[76] = v31;
  v34 = v23[2] + v32;
  if (v34 >= 0)
  {
    v35 = (unsigned int *)v23[3];
    v37 = *v35;
    v36 = v35 + 1;
    v33 += (unint64_t)bswap32(v37) << v34;
    v34 -= 32;
    if ((unint64_t)v36 >= v23[4])
      v36 = (unsigned int *)v23[4];
    v23[3] = (uint64_t)v36;
  }
  v23[2] = v34;
  *v23 = v33;
  v22 = v30 & 1;
LABEL_34:
  v38 = 0;
  v39 = 0;
  v40 = *(_QWORD *)(a1 + 40) + 76;
  v41 = 1;
  do
  {
    v42 = v41;
    if (((a6 >> v38) & 1) != 0)
    {
      v43 = *(uint64_t **)(a1 + 40);
      v44 = *(unsigned __int8 *)(v40 + v19);
      v46 = *v43;
      v45 = v43[1];
      v47 = byte_1C98326D3[(v45 & 0xC0) + (v44 >> 1)];
      LODWORD(v48) = v45 - v47;
      if (*v43 < (unint64_t)((v45 - v47) << 55))
        v48 = v48;
      else
        v48 = byte_1C98326D3[(v45 & 0xC0) + (v44 >> 1)];
      if (*v43 < (unint64_t)((v45 - v47) << 55))
      {
        v49 = 0;
      }
      else
      {
        v46 = *v43 - ((v45 - v47) << 55);
        v49 = 1;
      }
      if (*v43 < (unint64_t)((v45 - v47) << 55))
        v50 = *(_BYTE *)(v40 + v19);
      else
        v50 = v44 + 1;
      v51 = byte_1C98326D3[2 * v44 + 256 + v49];
      v52 = __clz(v48) - 55;
      v53 = v46 << v52;
      v43[1] = v48 << v52;
      *(_BYTE *)(v40 + v19) = v51;
      v54 = v43[2] + v52;
      if (v54 >= 0)
      {
        v55 = (unsigned int *)v43[3];
        v57 = *v55;
        v56 = v55 + 1;
        v53 += (unint64_t)bswap32(v57) << v54;
        v54 -= 32;
        if ((unint64_t)v56 >= v43[4])
          v56 = (unsigned int *)v43[4];
        v43[3] = (uint64_t)v56;
      }
      v43[2] = v54;
      *v43 = v53;
      v39 = ((v50 & 1) << v38) | v39;
    }
    v41 = 0;
    v38 = 1;
  }
  while ((v42 & 1) != 0);
  if ((v22 & 1) != 0)
  {
    v58 = v14 - 1;
    v59 = ((1 << v58) + a2);
    v60 = ((1 << v58) + a3);
    v235 = v58;
    v236 = v19 + 1;
    v237 = a5;
    v61 = (a5 & 0xF0) != 0;
    if ((a5 & 0xF0) != 0)
      v62 = 15;
    else
      v62 = 0;
    v63 = v62 | a5 & 0x1FF0;
    v64 = (a5 & 0x1E00) != 0;
    if ((a5 & 0x1E00) != 0)
      v65 = 122880;
    else
      v65 = 0;
    sub_1C977A828(a1, a2, a3, 0, v63 | v65, v39, &v235);
    sub_1C977A828(a1, v59, a3, 1, v8 & 0x1FE00 | (v64 << 8) | 0xF0, v39, &v235);
    sub_1C977A828(a1, a2, v60, 2, v8 | (v61 << 8) | 0x1FE00u, v39, &v235);
    return sub_1C977A828(a1, v59, v60, 3, 8176, v39, &v235);
  }
  v234 = a5;
  v67 = *(_QWORD *)(a1 + 32);
  v68 = *(_QWORD *)(v67 + 8);
  v227 = *(_QWORD *)(v68 + 416);
  v229 = (int)a3;
  v225 = *(_QWORD *)(v68 + 400) + ((v227 * (int)a3 + (int)a2) << *(_BYTE *)(v68 + 531));
  v69 = a7[1];
  LODWORD(v70) = 1;
  v232 = *a7;
  v71 = 1 << v232;
  v222 = *(_QWORD *)(v67 + 2280);
  if (*(_DWORD *)(a1 + 4) != 1 && !(v69 | v39))
    goto LABEL_83;
  v17 = v69 == 0;
  v72 = *(uint64_t **)(a1 + 40);
  if (v17)
    v73 = (char *)v72 + 1;
  else
    v73 = *(char **)(a1 + 40);
  v74 = v73[74];
  v76 = *v72;
  v75 = v72[1];
  v77 = byte_1C98326D3[(v75 & 0xC0) + (v74 >> 1)];
  LODWORD(v78) = v75 - v77;
  if (*v72 < (unint64_t)((v75 - v77) << 55))
    v78 = v78;
  else
    v78 = byte_1C98326D3[(v75 & 0xC0) + (v74 >> 1)];
  if (*v72 < (unint64_t)((v75 - v77) << 55))
  {
    v79 = 0;
  }
  else
  {
    v76 = *v72 - ((v75 - v77) << 55);
    v79 = 1;
  }
  if (*v72 < (unint64_t)((v75 - v77) << 55))
    v80 = v73[74];
  else
    v80 = v74 + 1;
  v81 = byte_1C98326D3[2 * v74 + 256 + v79];
  v82 = __clz(v78) - 55;
  v83 = v76 << v82;
  v72[1] = v78 << v82;
  v73[74] = v81;
  v84 = v72[2] + v82;
  if (v84 >= 0)
  {
    v85 = (unsigned int *)v72[3];
    v87 = *v85;
    v86 = v85 + 1;
    v83 += (unint64_t)bswap32(v87) << v84;
    v84 -= 32;
    if ((unint64_t)v86 >= v72[4])
      v86 = (unsigned int *)v72[4];
    v72[3] = (uint64_t)v86;
  }
  v72[2] = v84;
  *v72 = v83;
  LODWORD(v70) = v80 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    v88 = *(_QWORD *)(a1 + 32);
    v89 = sub_1C9706788(v88, a2, a3, v71, v71, &v234, a8);
    v90 = *v18;
    if (v18[1] == 35)
      v91 = *v18;
    else
      v91 = v18[1];
    if ((int)v232 > 3)
    {
      v215 = 0;
      v231 = 0;
    }
    else
    {
      v215 = byte_1C9859C98[v90];
      v231 = byte_1C9859C98[v91];
    }
    v214 = (_DWORD)v232 == 2;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(v88 + 16) + 403))
        v93 = (v90 & 0xFFFFFFEF) == 10;
      else
        v93 = 0;
      v92 = v93;
    }
    else
    {
      v92 = 0;
    }
    v8 = v234;
    v217 = v89;
    sub_1C9706C38(v222 + 8, v90, v232, v234, v89, v92, v227, v225);
    v94 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v95 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(_QWORD *)&vdup_n_s32((2 << v232) - 64));
    v96 = v94[117];
    v97 = (uint64_t)(int)a3 >> 2;
    v98 = v94[121];
    v99 = v94[116];
    v100 = (uint64_t)(int)a2 >> 2;
    v101 = v94[118];
    if (v71 >= 5)
    {
      v102 = v100 + v99 * ((uint64_t)(int)a3 >> 3);
      v103 = vmax_s8(*(int8x8_t *)(v101 + v102), v95);
      *(int8x8_t *)(v98 + v97 + v96 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v98+ v97+ v96 * ((uint64_t)(int)a2 >> 3)), v95);
      *(int8x8_t *)(v101 + v102) = v103;
    }
    v104 = v100 + v99 * ((uint64_t)(v71 + (int)a3) >> 3);
    v105 = v97 + v96 * ((uint64_t)(v71 + (int)a2) >> 3);
    v106 = vmax_s8(*(int8x8_t *)(v98 + v105), v95);
    v107 = vmax_s8(*(int8x8_t *)(v101 + v104), v95);
    *(int8x8_t *)(v98 + v105) = v106;
    *(int8x8_t *)(v101 + v104) = v107;
  }
  else
  {
LABEL_83:
    v215 = 0;
    v231 = 0;
    v217 = 0;
    v214 = 0;
    v91 = 0;
  }
  result = (uint64_t)sub_1C9706DCC((_QWORD *)a1, a2, a3, v70, v39);
  v108 = *(_QWORD *)(a1 + 32);
  v109 = *(_QWORD *)(v108 + 32);
  v110 = *(unsigned __int8 *)(v109 + 11);
  if (*(_BYTE *)(v109 + 11))
    v110 = (**(_WORD **)(a1 + 48) & 0x100) == 0;
  v111 = *(unsigned __int8 *)(v109 + 1615) + 2;
  v219 = v111;
  v220 = v110;
  if (v70)
  {
    v18[2] = 0;
    if ((int)v232 <= v111)
      v112 = v110;
    else
      v112 = 0;
    if (v112 == 1)
    {
      v113 = *(uint64_t **)(a1 + 40);
      v114 = *((unsigned __int8 *)v113 + 81);
      v116 = *v113;
      v115 = v113[1];
      v117 = byte_1C98326D3[(v115 & 0xC0) + (v114 >> 1)];
      LODWORD(v118) = v115 - v117;
      if (*v113 < (unint64_t)((v115 - v117) << 55))
        v118 = v118;
      else
        v118 = byte_1C98326D3[(v115 & 0xC0) + (v114 >> 1)];
      if (*v113 < (unint64_t)((v115 - v117) << 55))
      {
        v119 = 0;
      }
      else
      {
        v116 = *v113 - ((v115 - v117) << 55);
        v119 = 1;
      }
      if (*v113 < (unint64_t)((v115 - v117) << 55))
        v120 = *((_BYTE *)v113 + 81);
      else
        v120 = v114 + 1;
      v121 = byte_1C98326D3[2 * v114 + 256 + v119];
      v122 = __clz(v118) - 55;
      v123 = v116 << v122;
      v113[1] = v118 << v122;
      *((_BYTE *)v113 + 81) = v121;
      v124 = v113[2] + v122;
      if (v124 >= 0)
      {
        v125 = (unsigned int *)v113[3];
        v127 = *v125;
        v126 = v125 + 1;
        v123 += (unint64_t)bswap32(v127) << v124;
        v124 -= 32;
        if ((unint64_t)v126 >= v113[4])
          v126 = (unsigned int *)v113[4];
        v113[3] = (uint64_t)v126;
      }
      v113[2] = v124;
      *v113 = v123;
      v18[2] = v120 & 1;
    }
    v223 = 1 << v232;
    v18[3] = sub_1C9707624(a1, 0, *v18);
    v128 = a1 + 16 * ((int)v232 > 2);
    v129 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(v128 + 6368);
    v130 = *(_QWORD *)(v128 + 6376);
    v131 = (_QWORD *)(a1 + (v130 >> 1));
    if ((v130 & 1) != 0)
      v129 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*v131 + v129);
    v132 = v129(v131, a1 + 64, v232, v215, 0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 1616))
      v70 = *(_DWORD *)(a1 + 4) == 3 || v18[1] == 35;
    else
      v70 = 0;
    v133 = v222 + 552;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      v134 = v232 - 2;
    }
    else
    {
      v134 = v232 - 2;
      if (!v18[2])
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, uint64_t))(v133 + 16 * v134 + 8 * v214))(v225, v227, a1 + 64, v70, v132);
        goto LABEL_129;
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, uint64_t))(v133 + 8 * v134 + 248))(v225, v227, a1 + 64, v70, v132);
LABEL_129:
    v108 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 4) != 1)
    {
      v135 = *(_QWORD **)(v108 + 8);
      v136 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(_QWORD *)&vdup_n_s32((2 << v232) - 64));
      v137 = v135[117];
      v138 = (uint64_t)(int)a3 >> 2;
      v139 = v135[121];
      v140 = v135[116];
      v141 = (uint64_t)(int)a2 >> 2;
      v142 = v135[118];
      if (v71 >= 5)
      {
        v143 = v141 + v140 * ((uint64_t)(int)a3 >> 3);
        v144 = vmax_s8(*(int8x8_t *)(v142 + v143), v136);
        *(int8x8_t *)(v139 + v138 + v137 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v139+ v138+ v137 * ((uint64_t)(int)a2 >> 3)), v136);
        *(int8x8_t *)(v142 + v143) = v144;
      }
      v145 = v141 + v140 * ((uint64_t)(v223 + (int)a3) >> 3);
      v146 = v138 + v137 * ((uint64_t)(v223 + (int)a2) >> 3);
      v147 = vmax_s8(*(int8x8_t *)(v139 + v146), v136);
      v148 = vmax_s8(*(int8x8_t *)(v142 + v145), v136);
      *(int8x8_t *)(v139 + v146) = v147;
      *(int8x8_t *)(v142 + v145) = v148;
      v108 = *(_QWORD *)(a1 + 32);
    }
  }
  v149 = *(_QWORD *)(v108 + 8);
  v150 = *(_QWORD *)(v149 + 424);
  v151 = *(_QWORD *)(v149 + 408) + ((v150 * v229 + 2 * (int)a2) << *(_BYTE *)(v149 + 531));
  if (*(_DWORD *)(a1 + 4) == 1)
    result = sub_1C9708548(v222 + 8, v91, v232, v8, v217, v150, v151);
  if ((_DWORD)v39)
    v152 = 1;
  else
    v152 = v70;
  if (v152 == 1)
  {
    v216 = v151;
    v218 = v150;
    v230 = v91;
    v153 = 0;
    v154 = 0;
    v155 = v71 << v232;
    if (!v70)
      v155 = 0;
    v156 = a1 + 2 * v155 + 64;
    v157 = v156 + 2 * (v71 << v232);
    v233 = 0;
    v158 = v220;
    if ((int)v232 > v219)
      v158 = 0;
    v228 = v158;
    v159 = a1 + 16 * ((int)v232 > 2);
    v226 = (uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))(v159 + 6368);
    v224 = (uint64_t *)(v159 + 6376);
    v221 = a1 + 2 * v155 + 64;
    do
    {
      v160 = v153;
      if (v70)
      {
        v161 = *(unint64_t **)(a1 + 40);
        v162 = *v161;
        v163 = 4 * v153 + 203;
        v164 = -1;
        do
        {
          v165 = v164;
          v166 = *((unsigned __int8 *)v161 + v163);
          v167 = v161[1] - byte_1C98326D3[(v161[1] & 0xC0) + (v166 >> 1)];
          v168 = v162 >= v167 << 55;
          v169 = v162 - (v167 << 55);
          if (v162 < v167 << 55)
            v167 = v167;
          else
            v167 = byte_1C98326D3[(v161[1] & 0xC0) + (v166 >> 1)];
          if (v168)
          {
            v162 = v169;
            v170 = 1;
          }
          else
          {
            v170 = 0;
          }
          if (v168)
            v171 = v166 + 1;
          else
            v171 = *((_BYTE *)v161 + v163);
          v172 = byte_1C98326D3[2 * v166 + 256 + v170];
          v173 = __clz(v167) - 55;
          v162 <<= v173;
          v161[1] = v167 << v173;
          *((_BYTE *)v161 + v163) = v172;
          v174 = v161[2] + v173;
          if (v174 >= 0)
          {
            v175 = (unsigned int *)v161[3];
            v177 = *v175;
            v176 = v175 + 1;
            v162 += (unint64_t)bswap32(v177) << v174;
            v174 -= 32;
            if ((unint64_t)v176 >= v161[4])
              v176 = (unsigned int *)v161[4];
            v161[3] = (unint64_t)v176;
          }
          v164 = v165 + 1;
          v161[2] = v174;
          *v161 = v162;
          if ((v171 & 1) == 0)
            break;
          ++v163;
        }
        while (v164 < 3);
        v178 = (v171 & 1) == 0;
        if (v165 + 2 == v178)
        {
          LOWORD(v179) = 0;
        }
        else
        {
          v180 = *((unsigned __int8 *)v161 + v153 + 211);
          v181 = v161[1];
          v182 = byte_1C98326D3[(v181 & 0xC0) + (v180 >> 1)];
          LODWORD(v183) = v181 - v182;
          v184 = v162 >= (v181 - v182) << 55;
          if (v162 < (v181 - v182) << 55)
            v183 = v183;
          else
            v183 = byte_1C98326D3[(v181 & 0xC0) + (v180 >> 1)];
          if (v162 < (v181 - v182) << 55)
          {
            v185 = 0;
          }
          else
          {
            v162 -= (v181 - v182) << 55;
            v185 = 1;
          }
          if (v184)
            v186 = v180 + 1;
          else
            v186 = *((_BYTE *)v161 + v153 + 211);
          v187 = byte_1C98326D3[2 * v180 + 256 + v185];
          v188 = __clz(v183) - 55;
          v189 = v162 << v188;
          v161[1] = v183 << v188;
          *((_BYTE *)v161 + v153 + 211) = v187;
          v190 = v174 + v188;
          if (v190 >= 0)
          {
            v191 = (unsigned int *)v161[3];
            v193 = *v191;
            v192 = v191 + 1;
            v189 += (unint64_t)bswap32(v193) << v190;
            v190 -= 32;
            if ((unint64_t)v192 >= v161[4])
              v192 = (unsigned int *)v161[4];
            v161[3] = (unint64_t)v192;
          }
          v161[2] = v190;
          *v161 = v189;
          v179 = 1 << (v164 + (v178 << 31 >> 31));
          if ((v186 & 1) != 0)
            v179 = -v179;
        }
        v154 = &v235;
        *((_WORD *)&v235 + v153) = v179;
        LOWORD(v236) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 2096);
      }
      if ((v39 & 1) != 0)
      {
        v18[2] = 0;
        if (v228)
        {
          v194 = *(uint64_t **)(a1 + 40);
          v195 = *((unsigned __int8 *)v194 + 82);
          v197 = *v194;
          v196 = v194[1];
          v198 = byte_1C98326D3[(v196 & 0xC0) + (v195 >> 1)];
          LODWORD(v199) = v196 - v198;
          if (*v194 < (unint64_t)((v196 - v198) << 55))
            v199 = v199;
          else
            v199 = byte_1C98326D3[(v196 & 0xC0) + (v195 >> 1)];
          if (*v194 < (unint64_t)((v196 - v198) << 55))
          {
            v200 = 0;
          }
          else
          {
            v197 = *v194 - ((v196 - v198) << 55);
            v200 = 1;
          }
          if (*v194 < (unint64_t)((v196 - v198) << 55))
            v201 = *((_BYTE *)v194 + 82);
          else
            v201 = v195 + 1;
          v202 = byte_1C98326D3[2 * v195 + 256 + v200];
          v203 = __clz(v199) - 55;
          v204 = v197 << v203;
          v194[1] = v199 << v203;
          *((_BYTE *)v194 + 82) = v202;
          v205 = v194[2] + v203;
          if (v205 >= 0)
          {
            v206 = (unsigned int *)v194[3];
            v208 = *v206;
            v207 = v206 + 1;
            v204 += (unint64_t)bswap32(v208) << v205;
            v205 -= 32;
            if ((unint64_t)v207 >= v194[4])
              v207 = (unsigned int *)v194[4];
            v194[3] = (uint64_t)v207;
          }
          v194[2] = v205;
          *v194 = v204;
          v18[2] = v201 & 1;
        }
        v18[3] = sub_1C9707624(a1, 1u, v230);
        v209 = *v226;
        v210 = (_QWORD *)(a1 + (*v224 >> 1));
        if ((*v224 & 1) != 0)
          v209 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))(*v210 + v209);
        ++v153;
        v211 = v209(v210, v156, v232, v231, v160 + 1);
        if (v18[2])
          v212 = -1;
        else
          v212 = v211;
        *((_WORD *)&v233 + v160) = v212;
      }
      else
      {
        ++v153;
      }
      LODWORD(v39) = v39 >> 1;
      v156 = v157;
    }
    while (!v160);
    v213 = v222 + 552 + 8 * (v232 - 2);
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(v213 + 280))(v216, v218, v221, v157, v154);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, int *))(v213 + 128))(v216, v218, v221, v157, v154, &v233);
  }
  return result;
}

uint64_t sub_1C977B4A8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 2280);
  return *(_QWORD *)(*(_QWORD *)(v3 + 2064) + 8 * (int)sub_1C980D404(v3, a2, a3));
}

_QWORD *sub_1C977B4D4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E8291920;
  v2 = (void *)a1[294];
  if (v2)
  {
    a1[295] = v2;
    operator delete(v2);
  }
  return sub_1C974D3A4(a1);
}

void sub_1C977B510(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E8291920;
  v2 = (void *)a1[294];
  if (v2)
  {
    a1[295] = v2;
    operator delete(v2);
  }
  sub_1C974D3A4(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C977B560(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _WORD *v13;
  int v14;
  unsigned int v15;
  int v16;
  __int16 v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  _WORD *v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  signed int v31;
  uint64_t v32;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v40;
  uint64_t v41;

  v2 = *(char *)(a1 + a2 + 516);
  if ((int)v2 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = a1 + 1608;
  v41 = a2;
  do
    v5 |= sub_1C971C898(v7, 1) << v6++;
  while ((_DWORD)v2 != v6);
  v40 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 201))
  {
    v8 = 0;
    v9 = 0;
    do
      v9 |= sub_1C971C898(v7, 1) << v8++;
    while ((_DWORD)v2 != v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  while (1)
  {
    v11 = 1 << *(_BYTE *)(a1 + 556);
    v12 = a1 + (v41 << 8) + 16 * v10;
    v13 = (_WORD *)(v12 + 672);
    if ((v5 & 1) != 0)
    {
      v14 = sub_1C971B8B0(v7);
      v15 = (-((v14 + 1) & 1) ^ ((v14 + 1) >> 1)) + ((v14 + 1) & 1);
      v16 = sub_1C971B8B0(v7);
      v17 = v15;
      if (v15 != (char)v15)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "delta_luma_weight_l%d[%d] %d not in [-128, 127]!\n", v40, v10, v15);
          syslog(27, "delta_luma_weight_l%d[%d] %d not in [-128, 127]!\n");
        }
        return 4294954387;
      }
      v18 = (-((v16 + 1) & 1) ^ ((v16 + 1) >> 1)) + ((v16 + 1) & 1);
      v19 = *(_QWORD *)(a1 + 16);
      v20 = *(__int16 *)(v19 + 2102);
      if (v20 <= v18 || v18 < -v20)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "luma_offset_l%d[%d] %d not in range! (%d)\n", v40, v10, v18, v20);
          syslog(27, "luma_offset_l%d[%d] %d not in range! (%d)\n");
        }
        return 4294954387;
      }
      LOWORD(v11) = v17 + v11;
      v21 = v18 << *(_BYTE *)(v19 + 2100);
      *(_WORD *)(v12 + 678) = v21;
      *(_WORD *)(v12 + 676) = v21;
    }
    else
    {
      *(_DWORD *)(v12 + 676) = 0;
    }
    v22 = (_WORD *)(v12 + 680);
    v13[1] = v11;
    *v13 = v11;
    v23 = 1 << *(_BYTE *)(a1 + 662);
    v22[1] = v23;
    *v22 = v23;
    if ((v9 & 1) != 0)
      break;
    *(_DWORD *)(a1 + (v41 << 8) + 16 * v10 + 684) = 0;
LABEL_31:
    ++v10;
    v5 >>= 1;
    v9 >>= 1;
    if (v10 == v2)
      return 0;
  }
  v24 = 0;
  v25 = 1;
  while (1)
  {
    v26 = v25;
    v27 = sub_1C971B8B0(v7);
    v28 = (-((v27 + 1) & 1) ^ ((v27 + 1) >> 1)) + ((v27 + 1) & 1);
    v29 = sub_1C971B8B0(v7);
    if (v28 != (char)v28)
      break;
    v30 = v10;
    v31 = (-((v29 + 1) & 1) ^ ((v29 + 1) >> 1)) + ((v29 + 1) & 1);
    v32 = *(_QWORD *)(a1 + 16);
    if (v31 >= 4 * *(__int16 *)(v32 + 2104) || -4 * *(__int16 *)(v32 + 2104) > v31)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "delta_chroma_offset_l%d %d not in range!\n", v40, v31);
        syslog(27, "delta_chroma_offset_l%d %d not in range!\n");
      }
      return 4294954387;
    }
    v25 = 0;
    v34 = v22[v24] + v28;
    v22[v24] = v34;
    v35 = *(__int16 *)(v32 + 2104);
    v36 = v31 + v35 - ((v35 * v34) >> *(_BYTE *)(a1 + 662));
    v37 = v35 - 1;
    if (v36 < v35 - 1)
      v37 = v36;
    if (v36 <= -v35)
      v38 = -v35;
    else
      v38 = v37;
    v10 = v30;
    *(_WORD *)(a1 + (v41 << 8) + 16 * v30 + 2 * v24 + 684) = v38 << *(_BYTE *)(v32 + 2101);
    v24 = 1;
    if ((v26 & 1) == 0)
      goto LABEL_31;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "delta_chroma_weight_l%d %d not in [-128, 127]!\n", v40, v28);
    syslog(27, "delta_chroma_weight_l%d %d not in [-128, 127]!\n");
  }
  return 4294954387;
}

void sub_1C977B928(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1C971BA44(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t sub_1C977B950(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v12 = *((unsigned __int8 *)a2 + 8);
  if (v12 > 0xEF || (v13 = *((unsigned __int8 *)a2 + 9), v13 > 0xEF))
  {
    v19 = v12 > 0xEF;
    if (v12 <= 0xEF)
      v20 = a2;
    else
      v20 = (int *)((char *)a2 + 1);
    v21 = *(_QWORD *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    v25 = 0;
    sub_1C977D784(v21, a2[v19], a3, a4, a5, a6, &v25, &v23);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 2280)
                                                       + ((8 * ((a2[v19] & 3) != 0)) | (16 * ((a2[v19] & 0x30000) != 0)))
                                                       + 952))(a5, a6);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(v14 + 416);
    v22 = *(_QWORD *)(v14 + 400) + ((v15 * a4 + a3) << *(_BYTE *)(v14 + 531));
    v16 = *(_QWORD *)(a1 + 1672 + (v12 & 0xF0));
    v17 = *(_QWORD *)(a1 + 1672 + (v13 & 0xF0) + 256);
    v25 = 0;
    v26[0] = 0;
    sub_1C977D784(v16, *a2, a3, a4, a5, a6, &v25, &v23);
    sub_1C977D784(v17, a2[1], a3, a4, a5, a6, v26, &v24);
    return sub_1C975E530(*(_QWORD *)(a1 + 2280) + 952, a5, a6, *a2, *(_QWORD *)(v16 + 416), v25, a2[1], *(_QWORD *)(v17 + 416), v26[0], v15, v22);
  }
}

uint64_t sub_1C977BB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t vars0;
  uint64_t vars8;

  v10 = MEMORY[0x1E0C80A78](a1);
  v16 = v15;
  v17 = v14;
  v18 = v13;
  v19 = v12;
  v20 = (unsigned int *)v11;
  v21 = v10;
  STACK[0x2078] = *MEMORY[0x1E0C80C00];
  v22 = *((unsigned __int8 *)v11 + 8);
  if (v22 > 0xEF || (v23 = *((unsigned __int8 *)v11 + 9), v23 > 0xEF))
  {
    v29 = v22 > 0xEF;
    v30 = v22 > 0xEF;
    v31 = *(_QWORD *)(v10 + 8);
    v32 = *(_QWORD *)(v31 + 416);
    v41 = *(_QWORD *)(v31 + 400) + ((v32 * v13 + v12) << *(_BYTE *)(v31 + 531));
    if (v29)
      v33 = (int *)((char *)v11 + 1);
    else
      v33 = v11;
    v34 = v10 + (v30 << 8) + ((_BYTE)v33[2] & 0xF0);
    v35 = *(_QWORD *)(v34 + 1672);
    v36 = v34 + 672;
    vars8 = 0;
    sub_1C977D784(v35, v11[v30], v12, v13, v14, v15, &vars8, (int *)&vars0 + 1);
    v37 = *(_QWORD *)(v21 + 2280);
    v38 = *(unsigned int *)(v21 + 664);
    (*(void (**)(uint64_t, uint64_t))(v37
                                             + ((8 * ((v20[v30] & 3) != 0)) | (16
                                                                                               * ((v20[v30] & 0x30000) != 0)))
                                             + 1016))(v17, v16);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v37 + 1080))(v17, v16, v38, v36, (int)v17, &a9, v32, v41);
  }
  else
  {
    v24 = v22 & 0xF0;
    v25 = *(_QWORD *)(v10 + 1672 + v24);
    v26 = v23 & 0xF0;
    v27 = *(_QWORD *)(v10 + 1672 + v26 + 256);
    v40 = v10 + 672 + v24;
    v39 = v10 + 672 + v26 + 256;
    a9 = 0;
    a10 = 0;
    sub_1C977D784(v25, *v11, v12, v13, v14, v15, &a9, (int *)&vars8);
    sub_1C977D784(v27, v20[1], v19, v18, v17, v16, &a10, (int *)&vars8 + 1);
    return sub_1C975E7D8(*(_QWORD *)(v21 + 2280) + 952, v17, v16, *(unsigned int *)(v21 + 664), v40, *v20, *(_QWORD *)(v25 + 416), a9, v39, v20[1], *(_QWORD *)(v27 + 416), a10);
  }
}

uint64_t sub_1C977BE00(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v11 = *((unsigned __int8 *)a2 + 8);
  if (v11 > 0xEF || (v12 = *((unsigned __int8 *)a2 + 9), v12 > 0xEF))
  {
    v19 = v11 > 0xEF;
    if (v11 <= 0xEF)
      v20 = a2;
    else
      v20 = (int *)((char *)a2 + 1);
    v21 = *(_QWORD *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    v31 = 0;
    v29 = 0;
    sub_1C977D5A0(v21, a2[v19], a3, a4, a5, a6, &v31, &v29, (int *)&v27);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 2280)
                                             + ((8 * ((a2[v19] & 3) != 0)) | (16
                                                                                              * ((a2[v19] & 0x30000) != 0)))
                                             + 952))(a5, a6);
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 2280)
                                                     + ((8 * ((v27 & 7) != 0)) | (16 * ((v27 & 0x70000) != 0)))
                                                     + 984))(a5 & 0xFFFFFFFE, ((int)a6 >> 1));
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 8);
    v24 = *(_QWORD *)(v13 + 416);
    v14 = *(_BYTE *)(v13 + 531);
    v23 = *(_QWORD *)(v13 + 400) + ((v24 * a4 + a3) << v14);
    v25 = *(_QWORD *)(v13 + 408) + ((*(_QWORD *)(v13 + 424) * ((uint64_t)a4 >> 1) + (int)(a3 & 0xFFFFFFFE)) << v14);
    v26 = *(_QWORD *)(v13 + 424);
    v15 = *(_QWORD *)(a1 + 1672 + (v11 & 0xF0));
    v16 = *(_QWORD *)(a1 + 1672 + (v12 & 0xF0) + 256);
    v31 = 0;
    v32[0] = 0;
    v29 = 0;
    v30 = 0;
    sub_1C977D5A0(v15, *a2, a3, a4, a5, a6, &v31, &v29, (int *)&v27);
    sub_1C977D5A0(v16, a2[1], a3, a4, a5, a6, v32, &v30, (int *)&v28);
    sub_1C975E530(*(_QWORD *)(a1 + 2280) + 952, a5, a6, *a2, *(_QWORD *)(v15 + 416), v31, a2[1], *(_QWORD *)(v16 + 416), v32[0], v24, v23);
    return sub_1C975E680(*(_QWORD *)(a1 + 2280) + 952, ((int)a5 >> 1), ((int)a6 >> 1), v27, *(_QWORD *)(v15 + 424), v29, v28, *(_QWORD *)(v16 + 424), v30, v26, v25);
  }
}

uint64_t sub_1C977C0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v19 = MEMORY[0x1E0C80A78](a1);
  v25 = v24;
  v26 = v23;
  v27 = v22;
  v28 = v21;
  v29 = (unsigned int *)v20;
  v30 = v19;
  STACK[0x40B8] = *MEMORY[0x1E0C80C00];
  v31 = *((unsigned __int8 *)v20 + 8);
  if (v31 > 0xEF || (v32 = *((unsigned __int8 *)v20 + 9), v32 > 0xEF))
  {
    v38 = v31 > 0xEF;
    v39 = v31 > 0xEF;
    v40 = *(_QWORD *)(v19 + 8);
    v41 = *(_QWORD *)(v40 + 416);
    v42 = *(_BYTE *)(v40 + 531);
    v56 = *(_QWORD *)(v40 + 400) + ((v41 * v22 + v21) << v42);
    v57 = *(_QWORD *)(v40 + 408) + ((*(_QWORD *)(v40 + 424) * ((uint64_t)v22 >> 1) + (int)(v21 & 0xFFFFFFFE)) << v42);
    v58 = *(_QWORD *)(v40 + 424);
    if (v38)
      v43 = (int *)((char *)v20 + 1);
    else
      v43 = v20;
    v44 = v19 + (v39 << 8) + ((_BYTE)v43[2] & 0xF0);
    v45 = *(_QWORD *)(v44 + 1672);
    a15 = 0;
    a17 = 0;
    sub_1C977D5A0(v45, v20[v39], v21, v22, v23, v24, &a15, &a17, &a14);
    v46 = *(_QWORD *)(v30 + 2280);
    v47 = v29[v39];
    v48 = *(unsigned int *)(v30 + 664);
    (*(void (**)(uint64_t, uint64_t))(v46
                                             + ((8 * ((v47 & 3) != 0)) | (16 * ((*(_QWORD *)&v47 & 0x30000) != 0)))
                                             + 1016))(v26, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v46 + 1080))(v26, v25, v48, v44 + 672, (int)v26, &a18, v41, v56);
    v49 = *(_QWORD *)(v30 + 2280);
    v50 = ((int)v25 >> 1);
    v51 = *(unsigned int *)(v30 + 668);
    v52 = v26 & 0xFFFFFFFE;
    (*(void (**)(uint64_t, uint64_t))(v49
                                             + ((8 * ((a14 & 7) != 0)) | (16 * ((a14 & 0x70000) != 0)))
                                             + 1048))(v52, v50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v49 + 1088))(v52, v50, v51, v44 + 680, (int)v52, &a18, v58, v57);
  }
  else
  {
    vars0 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 400)
          + ((*(_QWORD *)(*(_QWORD *)(v19 + 8) + 416) * v22 + v21) << *(_BYTE *)(*(_QWORD *)(v19 + 8) + 531));
    v33 = v31 & 0xF0;
    v34 = *(_QWORD *)(v19 + 1672 + v33);
    v35 = v32 & 0xF0;
    v36 = *(_QWORD *)(v19 + 1672 + v35 + 256);
    vars8 = v19 + 672 + v33;
    v55 = v19 + 672 + v35;
    a18 = 0;
    a19 = 0;
    a15 = 0;
    a16 = 0;
    sub_1C977D5A0(v34, *v20, v21, v22, v23, v24, &a18, &a15, (int *)&a17);
    sub_1C977D5A0(v36, v29[1], v28, v27, v26, v25, &a19, &a16, (int *)&a17 + 1);
    sub_1C975E7D8(*(_QWORD *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 664), vars8, *v29, *(_QWORD *)(v34 + 416), a18, v55 + 256, v29[1], *(_QWORD *)(v36 + 416), a19);
    return sub_1C975E948(*(_QWORD *)(v30 + 2280) + 952, ((int)v26 >> 1), ((int)v25 >> 1), *(unsigned int *)(v30 + 668), vars8 + 8, a17, *(_QWORD *)(v34 + 424), a15, v55 + 264, HIDWORD(a17), *(_QWORD *)(v36 + 424), a16);
  }
}

uint64_t sub_1C977C4B8(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v11 = *((unsigned __int8 *)a2 + 8);
  if (v11 > 0xEF || (v12 = *((unsigned __int8 *)a2 + 9), v12 > 0xEF))
  {
    v19 = v11 > 0xEF;
    if (v11 <= 0xEF)
      v20 = a2;
    else
      v20 = (int *)((char *)a2 + 1);
    v21 = *(_QWORD *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    v31 = 0;
    v29 = 0;
    sub_1C977D3C8(v21, a2[v19], a3, a4, a5, a6, &v31, &v29, &v27);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 2280)
                                             + ((8 * ((a2[v19] & 3) != 0)) | (16
                                                                                              * ((a2[v19] & 0x30000) != 0)))
                                             + 952))(a5, a6);
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 2280)
                                                      + ((8 * ((v27 & 7) != 0)) | (16 * ((v27 & 0x70000) != 0)))
                                                      + 984))(a5 & 0xFFFFFFFE, a6);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 8);
    v24 = *(_QWORD *)(v13 + 416);
    v14 = *(_BYTE *)(v13 + 531);
    v23 = *(_QWORD *)(v13 + 400) + ((v24 * a4 + a3) << v14);
    v25 = *(_QWORD *)(v13 + 408) + ((*(_QWORD *)(v13 + 424) * a4 + (int)(a3 & 0xFFFFFFFE)) << v14);
    v26 = *(_QWORD *)(v13 + 424);
    v15 = *(_QWORD *)(a1 + 1672 + (v11 & 0xF0));
    v16 = *(_QWORD *)(a1 + 1672 + (v12 & 0xF0) + 256);
    v31 = 0;
    v32[0] = 0;
    v29 = 0;
    v30 = 0;
    sub_1C977D3C8(v15, *a2, a3, a4, a5, a6, &v31, &v29, &v27);
    sub_1C977D3C8(v16, a2[1], a3, a4, a5, a6, v32, &v30, &v28);
    sub_1C975E530(*(_QWORD *)(a1 + 2280) + 952, a5, a6, *a2, *(_QWORD *)(v15 + 416), v31, a2[1], *(_QWORD *)(v16 + 416), v32[0], v24, v23);
    return sub_1C975E680(*(_QWORD *)(a1 + 2280) + 952, ((int)a5 >> 1), a6, v27, *(_QWORD *)(v15 + 424), v29, v28, *(_QWORD *)(v16 + 424), v30, v26, v25);
  }
}

uint64_t sub_1C977C7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v19 = MEMORY[0x1E0C80A78](a1);
  v25 = v24;
  v26 = v23;
  v27 = v22;
  v28 = v21;
  v29 = (unsigned int *)v20;
  v30 = v19;
  STACK[0x40B8] = *MEMORY[0x1E0C80C00];
  v31 = *((unsigned __int8 *)v20 + 8);
  if (v31 > 0xEF || (v32 = *((unsigned __int8 *)v20 + 9), v32 > 0xEF))
  {
    v38 = v31 > 0xEF;
    v39 = v31 > 0xEF;
    v40 = *(_QWORD *)(v19 + 8);
    v41 = *(_QWORD *)(v40 + 416);
    v42 = *(_BYTE *)(v40 + 531);
    v55 = *(_QWORD *)(v40 + 400) + ((v41 * v22 + v21) << v42);
    v56 = *(_QWORD *)(v40 + 408) + ((*(_QWORD *)(v40 + 424) * v22 + (int)(v21 & 0xFFFFFFFE)) << v42);
    v57 = *(_QWORD *)(v40 + 424);
    if (v38)
      v43 = (int *)((char *)v20 + 1);
    else
      v43 = v20;
    v44 = v19 + (v39 << 8) + ((_BYTE)v43[2] & 0xF0);
    v45 = *(_QWORD *)(v44 + 1672);
    a15 = 0;
    a17 = 0;
    sub_1C977D3C8(v45, v20[v39], v21, v22, v23, v24, &a15, &a17, &a14);
    v46 = *(_QWORD *)(v30 + 2280);
    v47 = v29[v39];
    v48 = *(unsigned int *)(v30 + 664);
    (*(void (**)(uint64_t, uint64_t))(v46
                                             + ((8 * ((v47 & 3) != 0)) | (16 * ((*(_QWORD *)&v47 & 0x30000) != 0)))
                                             + 1016))(v26, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v46 + 1080))(v26, v25, v48, v44 + 672, (int)v26, &a18, v41, v55);
    v49 = *(_QWORD *)(v30 + 2280);
    v50 = *(unsigned int *)(v30 + 668);
    v51 = v26 & 0xFFFFFFFE;
    (*(void (**)(uint64_t, uint64_t))(v49
                                             + ((8 * ((a14 & 7) != 0)) | (16 * ((a14 & 0x70000) != 0)))
                                             + 1048))(v51, v25);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v49 + 1088))(v51, v25, v50, v44 + 680, (int)v51, &a18, v57, v56);
  }
  else
  {
    vars0 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 400)
          + ((*(_QWORD *)(*(_QWORD *)(v19 + 8) + 416) * v22 + v21) << *(_BYTE *)(*(_QWORD *)(v19 + 8) + 531));
    v33 = v31 & 0xF0;
    v34 = *(_QWORD *)(v19 + 1672 + v33);
    v35 = v32 & 0xF0;
    v36 = *(_QWORD *)(v19 + 1672 + v35 + 256);
    vars8 = v19 + 672 + v33;
    v54 = v19 + 672 + v35;
    a18 = 0;
    a19 = 0;
    a15 = 0;
    a16 = 0;
    sub_1C977D3C8(v34, *v20, v21, v22, v23, v24, &a18, &a15, &a17);
    sub_1C977D3C8(v36, v29[1], v28, v27, v26, v25, &a19, &a16, (_WORD *)&a17 + 2);
    sub_1C975E7D8(*(_QWORD *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 664), vars8, *v29, *(_QWORD *)(v34 + 416), a18, v54 + 256, v29[1], *(_QWORD *)(v36 + 416), a19);
    return sub_1C975E948(*(_QWORD *)(v30 + 2280) + 952, ((int)v26 >> 1), v25, *(unsigned int *)(v30 + 668), vars8 + 8, a17, *(_QWORD *)(v34 + 424), a15, v54 + 264, HIDWORD(a17), *(_QWORD *)(v36 + 424), a16);
  }
}

uint64_t sub_1C977CB5C(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v11 = *((unsigned __int8 *)a2 + 8);
  if (v11 > 0xEF || (v12 = *((unsigned __int8 *)a2 + 9), v12 > 0xEF))
  {
    v19 = v11 > 0xEF;
    if (v11 <= 0xEF)
      v20 = a2;
    else
      v20 = (int *)((char *)a2 + 1);
    v21 = *(_QWORD *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    v31 = 0;
    v29 = 0;
    sub_1C977D200(v21, a2[v19], a3, a4, a5, a6, &v31, &v29, &v27);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 2280)
                                             + ((8 * ((a2[v19] & 3) != 0)) | (16
                                                                                              * ((a2[v19] & 0x30000) != 0)))
                                             + 952))(a5, a6);
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 2280)
                                                      + ((8 * ((v27 & 7) != 0)) | (16 * ((v27 & 0x70000) != 0)))
                                                      + 984))((2 * a5), a6);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 8);
    v24 = *(_QWORD *)(v13 + 416);
    v14 = *(_BYTE *)(v13 + 531);
    v23 = *(_QWORD *)(v13 + 400) + ((v24 * a4 + a3) << v14);
    v25 = *(_QWORD *)(v13 + 408) + ((*(_QWORD *)(v13 + 424) * a4 + 2 * a3) << v14);
    v26 = *(_QWORD *)(v13 + 424);
    v15 = *(_QWORD *)(a1 + 1672 + (v11 & 0xF0));
    v16 = *(_QWORD *)(a1 + 1672 + (v12 & 0xF0) + 256);
    v31 = 0;
    v32[0] = 0;
    v29 = 0;
    v30 = 0;
    sub_1C977D200(v15, *a2, a3, a4, a5, a6, &v31, &v29, &v27);
    sub_1C977D200(v16, a2[1], a3, a4, a5, a6, v32, &v30, &v28);
    sub_1C975E530(*(_QWORD *)(a1 + 2280) + 952, a5, a6, *a2, *(_QWORD *)(v15 + 416), v31, a2[1], *(_QWORD *)(v16 + 416), v32[0], v24, v23);
    return sub_1C975E680(*(_QWORD *)(a1 + 2280) + 952, a5, a6, v27, *(_QWORD *)(v15 + 424), v29, v28, *(_QWORD *)(v16 + 424), v30, v26, v25);
  }
}

uint64_t sub_1C977CE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v19 = MEMORY[0x1E0C80A78](a1);
  v25 = v24;
  v26 = v23;
  v27 = v22;
  v28 = v21;
  v29 = (unsigned int *)v20;
  v30 = v19;
  STACK[0x40B8] = *MEMORY[0x1E0C80C00];
  v31 = *((unsigned __int8 *)v20 + 8);
  if (v31 > 0xEF || (v32 = *((unsigned __int8 *)v20 + 9), v32 > 0xEF))
  {
    v38 = v31 > 0xEF;
    v39 = v31 > 0xEF;
    v40 = *(_QWORD *)(v19 + 8);
    v41 = *(_QWORD *)(v40 + 416);
    v42 = *(_BYTE *)(v40 + 531);
    v55 = *(_QWORD *)(v40 + 400) + ((v41 * v22 + v21) << v42);
    v56 = *(_QWORD *)(v40 + 408) + ((*(_QWORD *)(v40 + 424) * v22 + 2 * v21) << v42);
    v57 = *(_QWORD *)(v40 + 424);
    if (v38)
      v43 = (int *)((char *)v20 + 1);
    else
      v43 = v20;
    v44 = v19 + (v39 << 8) + ((_BYTE)v43[2] & 0xF0);
    v45 = *(_QWORD *)(v44 + 1672);
    a15 = 0;
    a17 = 0;
    sub_1C977D200(v45, v20[v39], v21, v22, v23, v24, &a15, &a17, &a14);
    v46 = *(_QWORD *)(v30 + 2280);
    v47 = v29[v39];
    v48 = *(unsigned int *)(v30 + 664);
    (*(void (**)(uint64_t, uint64_t))(v46
                                             + ((8 * ((v47 & 3) != 0)) | (16 * ((*(_QWORD *)&v47 & 0x30000) != 0)))
                                             + 1016))(v26, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v46 + 1080))(v26, v25, v48, v44 + 672, (int)v26, &a18, v41, v55);
    v49 = *(_QWORD *)(v30 + 2280);
    v50 = *(unsigned int *)(v30 + 668);
    v51 = (2 * v26);
    (*(void (**)(uint64_t, uint64_t))(v49
                                             + ((8 * ((a14 & 7) != 0)) | (16 * ((a14 & 0x70000) != 0)))
                                             + 1048))(v51, v25);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v49 + 1088))(v51, v25, v50, v44 + 680, (int)v51, &a18, v57, v56);
  }
  else
  {
    vars0 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 400)
          + ((*(_QWORD *)(*(_QWORD *)(v19 + 8) + 416) * v22 + v21) << *(_BYTE *)(*(_QWORD *)(v19 + 8) + 531));
    v33 = v31 & 0xF0;
    v34 = *(_QWORD *)(v19 + 1672 + v33);
    v35 = v32 & 0xF0;
    v36 = *(_QWORD *)(v19 + 1672 + v35 + 256);
    vars8 = v19 + 672 + v33;
    v54 = v19 + 672 + v35;
    a18 = 0;
    a19 = 0;
    a15 = 0;
    a16 = 0;
    sub_1C977D200(v34, *v20, v21, v22, v23, v24, &a18, &a15, &a17);
    sub_1C977D200(v36, v29[1], v28, v27, v26, v25, &a19, &a16, (_WORD *)&a17 + 2);
    sub_1C975E7D8(*(_QWORD *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 664), vars8, *v29, *(_QWORD *)(v34 + 416), a18, v54 + 256, v29[1], *(_QWORD *)(v36 + 416), a19);
    return sub_1C975E948(*(_QWORD *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 668), vars8 + 8, a17, *(_QWORD *)(v34 + 424), a15, v54 + 264, HIDWORD(a17), *(_QWORD *)(v36 + 424), a16);
  }
}

uint64_t sub_1C977D200(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _WORD *a9)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  signed int v24;
  unsigned int *v25;
  signed int v26;
  signed int v27;
  signed int v28;
  std::unique_lock<std::mutex> v30;

  v12 = -3 - a5;
  v13 = *(_DWORD *)(a1 + 520) + 2;
  v14 = a3 + ((__int16)a2 >> 2);
  if (v14 < v13)
    v13 = a3 + ((__int16)a2 >> 2);
  if (v14 <= v12)
    v15 = v12;
  else
    v15 = v13;
  v16 = -3 - a6;
  v17 = *(_DWORD *)(a1 + 524) + 2;
  v18 = a4 + (a2 >> 18);
  if (v18 < v17)
    v17 = a4 + (a2 >> 18);
  if (v18 <= v16)
    v19 = v16;
  else
    v19 = v17;
  *a7 = *(_QWORD *)(a1 + 400) + ((*(_QWORD *)(a1 + 416) * (int)v19 + (int)v15) << *(_BYTE *)(a1 + 531));
  *a9 = 2 * a2;
  a9[1] = (a2 >> 15) & 0xFFFE;
  v20 = *(_DWORD *)(a1 + 520);
  if (v14 < v20)
    v20 = a3 + ((__int16)a2 >> 2);
  if (v14 <= ~(_DWORD)a5)
    v21 = ~(_DWORD)a5;
  else
    v21 = v20;
  v22 = *(_DWORD *)(a1 + 524);
  if (v18 < v22)
    v22 = a4 + (a2 >> 18);
  if (v18 <= ~(_DWORD)a6)
    v23 = ~(_DWORD)a6;
  else
    v23 = v22;
  *a8 = *(_QWORD *)(a1 + 408) + ((*(_QWORD *)(a1 + 424) * (int)v23 + 2 * (int)v21) << *(_BYTE *)(a1 + 531));
  v24 = a6 + v19 + 4;
  v25 = (unsigned int *)(a1 + 1032);
  v26 = atomic_load((unsigned int *)(a1 + 1032));
  if (v26 < v24)
  {
    v30.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v30.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    v27 = atomic_load(v25);
    if (v27 < v24)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v30);
        v28 = atomic_load((unsigned int *)(a1 + 1032));
      }
      while (v28 < v24);
    }
    if (v30.__owns_)
      std::mutex::unlock(v30.__m_);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1E8292028[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v15, v19, v21, v23, a5, a6, a1);
}

uint64_t sub_1C977D3C8(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _WORD *a9)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  signed int v25;
  unsigned int *v26;
  signed int v27;
  signed int v28;
  signed int v29;
  std::unique_lock<std::mutex> v31;

  v12 = -3 - a5;
  v13 = *(_DWORD *)(a1 + 520) + 2;
  v14 = a3 + ((__int16)a2 >> 2);
  if (v14 < v13)
    v13 = a3 + ((__int16)a2 >> 2);
  if (v14 <= v12)
    v15 = v12;
  else
    v15 = v13;
  v16 = -3 - a6;
  v17 = *(_DWORD *)(a1 + 524) + 2;
  v18 = a4 + (a2 >> 18);
  if (v18 < v17)
    v17 = a4 + (a2 >> 18);
  if (v18 <= v16)
    v19 = v16;
  else
    v19 = v17;
  *a7 = *(_QWORD *)(a1 + 400) + ((*(_QWORD *)(a1 + 416) * (int)v19 + (int)v15) << *(_BYTE *)(a1 + 531));
  *a9 = a2;
  a9[1] = (a2 >> 15) & 0xFFFE;
  v20 = ((__int16)a2 >> 3) + (a3 >> 1);
  if (v20 >= *(int *)(a1 + 520) >> 1)
    v21 = *(int *)(a1 + 520) >> 1;
  else
    v21 = ((__int16)a2 >> 3) + (a3 >> 1);
  if (v20 <= ~((int)a5 >> 1))
    v22 = ~((int)a5 >> 1);
  else
    v22 = v21;
  v23 = *(_DWORD *)(a1 + 524);
  if (v18 < v23)
    v23 = a4 + (a2 >> 18);
  if (v18 <= ~(_DWORD)a6)
    v24 = ~(_DWORD)a6;
  else
    v24 = v23;
  *a8 = *(_QWORD *)(a1 + 408) + ((*(_QWORD *)(a1 + 424) * (int)v24 + 2 * (int)v22) << *(_BYTE *)(a1 + 531));
  v25 = a6 + v19 + 4;
  v26 = (unsigned int *)(a1 + 1032);
  v27 = atomic_load((unsigned int *)(a1 + 1032));
  if (v27 < v25)
  {
    v31.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v31.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    v28 = atomic_load(v26);
    if (v28 < v25)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v31);
        v29 = atomic_load((unsigned int *)(a1 + 1032));
      }
      while (v29 < v25);
    }
    if (v31.__owns_)
      std::mutex::unlock(v31.__m_);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1E8292028[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v15, v19, v22, v24, a5, a6, a1);
}

uint64_t sub_1C977D5A0(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, int *a9)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  signed int v26;
  unsigned int *v27;
  signed int v28;
  signed int v29;
  signed int v30;
  std::unique_lock<std::mutex> v32;

  v12 = -3 - a5;
  v13 = *(_DWORD *)(a1 + 520) + 2;
  v14 = a3 + ((__int16)a2 >> 2);
  if (v14 < v13)
    v13 = a3 + ((__int16)a2 >> 2);
  if (v14 <= v12)
    v15 = v12;
  else
    v15 = v13;
  v16 = -3 - a6;
  v17 = *(_DWORD *)(a1 + 524) + 2;
  v18 = a4 + (a2 >> 18);
  if (v18 < v17)
    v17 = a4 + (a2 >> 18);
  if (v18 <= v16)
    v19 = v16;
  else
    v19 = v17;
  *a7 = *(_QWORD *)(a1 + 400) + ((*(_QWORD *)(a1 + 416) * (int)v19 + (int)v15) << *(_BYTE *)(a1 + 531));
  *a9 = a2;
  v20 = ((__int16)a2 >> 3) + (a3 >> 1);
  if (v20 >= *(int *)(a1 + 520) >> 1)
    v21 = *(int *)(a1 + 520) >> 1;
  else
    v21 = ((__int16)a2 >> 3) + (a3 >> 1);
  if (v20 <= ~((int)a5 >> 1))
    v22 = ~((int)a5 >> 1);
  else
    v22 = v21;
  v23 = (a4 >> 1) + (a2 >> 19);
  if (v23 >= *(int *)(a1 + 524) >> 1)
    v24 = *(int *)(a1 + 524) >> 1;
  else
    v24 = (a4 >> 1) + (a2 >> 19);
  if (v23 <= ~((int)a6 >> 1))
    v25 = ~((int)a6 >> 1);
  else
    v25 = v24;
  *a8 = *(_QWORD *)(a1 + 408) + ((*(_QWORD *)(a1 + 424) * (int)v25 + 2 * (int)v22) << *(_BYTE *)(a1 + 531));
  v26 = a6 + v19 + 4;
  v27 = (unsigned int *)(a1 + 1032);
  v28 = atomic_load((unsigned int *)(a1 + 1032));
  if (v28 < v26)
  {
    v32.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v32.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    v29 = atomic_load(v27);
    if (v29 < v26)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v32);
        v30 = atomic_load((unsigned int *)(a1 + 1032));
      }
      while (v30 < v26);
    }
    if (v32.__owns_)
      std::mutex::unlock(v32.__m_);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1E8292028[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v15, v19, v22, v25, a5, a6, a1);
}

uint64_t sub_1C977D784(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8)
{
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  signed int v24;
  signed int v25;
  signed int v26;
  signed int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v35;
  int v36;
  unsigned int v37;
  std::unique_lock<std::mutex> __lk;

  v13 = -3 - a5;
  v14 = *(_DWORD *)(a1 + 520) + 2;
  v15 = a2 << 16;
  v16 = a3 + ((__int16)a2 >> 2);
  if (v16 < v14)
    v14 = a3 + ((__int16)a2 >> 2);
  if (v16 <= v13)
    v17 = v13;
  else
    v17 = v14;
  v18 = -3 - a6;
  v19 = *(_DWORD *)(a1 + 524) + 2;
  v20 = a4 + (a2 >> 18);
  if (v20 < v19)
    v19 = a4 + (a2 >> 18);
  if (v20 <= v18)
    v21 = v18;
  else
    v21 = v19;
  *a7 = *(_QWORD *)(a1 + 400) + ((*(_QWORD *)(a1 + 416) * (int)v21 + (int)v17) << *(_BYTE *)(a1 + 531));
  *a8 = a2;
  v22 = *(_DWORD *)(a1 + 520);
  v23 = *(_DWORD *)(a1 + 524);
  v24 = a6 + v21 + 4;
  v25 = atomic_load((unsigned int *)(a1 + 1032));
  if (v25 < v24)
  {
    v35 = a2 << 16;
    v36 = a3;
    v37 = v17;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    v26 = atomic_load((unsigned int *)(a1 + 1032));
    if (v26 < v24)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &__lk);
        v27 = atomic_load((unsigned int *)(a1 + 1032));
      }
      while (v27 < v24);
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    a3 = v36;
    v17 = v37;
    v15 = v35;
  }
  v28 = (a4 >> 1) + (a2 >> 19);
  v29 = v23 >> 1;
  if (v28 < v23 >> 1)
    v29 = (a4 >> 1) + (a2 >> 19);
  if (v28 <= ~((int)a6 >> 1))
    v30 = ~((int)a6 >> 1);
  else
    v30 = v29;
  v31 = (v15 >> 19) + (a3 >> 1);
  v32 = v22 >> 1;
  if (v31 < v22 >> 1)
    v32 = (v15 >> 19) + (a3 >> 1);
  if (v31 <= ~((int)a5 >> 1))
    v33 = ~((int)a5 >> 1);
  else
    v33 = v32;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1E8292028[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v17, v21, v33, v30, a5, a6, a1);
}

uint64_t sub_1C977D968(uint64_t a1, uint64_t a2, __int128 *a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, int a9, int a10, char a11)
{
  __int128 *v11;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int8 v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  unsigned __int8 v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned __int8 v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  __int32 *v82;
  char v83;
  char v84;
  unsigned __int8 v85;
  uint64_t v86;
  BOOL v87;
  _BOOL8 v88;
  int v89;
  signed int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  BOOL v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  signed int v109;
  uint64_t v110;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int *v120;
  unsigned int *v121;
  uint64_t v122;
  char v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  char v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  BOOL v139;
  unint64_t v140;
  uint64_t v141;
  char v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  char v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  unint64_t v162;
  _BOOL4 v163;
  unint64_t v164;
  unsigned int v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  BOOL v170;
  unint64_t v171;
  uint64_t v172;
  char v173;
  unsigned __int8 v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int *v179;
  unsigned int v180;
  uint64_t v181;
  BOOL v182;
  int v183;
  __int32 *v184;
  _WORD *v185;
  BOOL v186;
  int v187;
  __int128 v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  __int128 *v192;
  uint64_t v193;
  void (*v194)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v195;
  _QWORD *v196;
  void (*v197)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v198;
  _QWORD *v199;
  int v201;
  char v208;
  BOOL v209;
  _BOOL8 v210;
  __int32 v211[16];
  uint64_t v212[3];
  uint64_t v213[4];

  v11 = a3;
  v201 = a10;
  v213[2] = *MEMORY[0x1E0C80C00];
  if (a11)
    v14 = 2;
  else
    v14 = 3;
  *((_BYTE *)a3 + 10) = v14;
  if ((a11 & 1) != 0)
    goto LABEL_49;
  v15 = *(unsigned __int8 *)(a2 + 58);
  v17 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v18 = byte_1C98326D3[(v16 & 0xC0) + (v15 >> 1)];
  LODWORD(v19) = v16 - v18;
  if (*(_QWORD *)a2 < (unint64_t)((v16 - v18) << 55))
    v19 = v19;
  else
    v19 = byte_1C98326D3[(v16 & 0xC0) + (v15 >> 1)];
  if (*(_QWORD *)a2 < (unint64_t)((v16 - v18) << 55))
  {
    v20 = 0;
  }
  else
  {
    v17 = *(_QWORD *)a2 - ((v16 - v18) << 55);
    v20 = 1;
  }
  if (*(_QWORD *)a2 < (unint64_t)((v16 - v18) << 55))
    v21 = *(_BYTE *)(a2 + 58);
  else
    v21 = v15 + 1;
  v22 = byte_1C98326D3[2 * v15 + 256 + v20];
  v23 = __clz(v19) - 55;
  v24 = v17 << v23;
  *(_QWORD *)(a2 + 8) = v19 << v23;
  *(_BYTE *)(a2 + 58) = v22;
  v25 = *(_QWORD *)(a2 + 16) + v23;
  if (v25 >= 0)
  {
    v26 = *(unsigned int **)(a2 + 24);
    v28 = *v26;
    v27 = v26 + 1;
    v24 += (unint64_t)bswap32(v28) << v25;
    v25 -= 32;
    if ((unint64_t)v27 >= *(_QWORD *)(a2 + 32))
      v27 = *(unsigned int **)(a2 + 32);
    *(_QWORD *)(a2 + 24) = v27;
  }
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)a2 = v24;
  if ((v21 & 1) != 0)
  {
LABEL_49:
    v58 = *(unsigned __int8 *)(a1 + 652);
    v59 = v58 - 2;
    if (v58 < 2)
    {
      v75 = 0;
    }
    else
    {
      v60 = *(_QWORD *)a2;
      v61 = *(unsigned int **)(a2 + 24);
      v62 = *(unsigned int **)(a2 + 32);
      v63 = *(_QWORD *)(a2 + 16);
      v64 = *(unsigned __int8 *)(a2 + 59);
      v65 = *(_QWORD *)(a2 + 8) - byte_1C98326D3[(*(_QWORD *)(a2 + 8) & 0xC0) + (v64 >> 1)];
      v66 = *(_QWORD *)a2 >= v65 << 55;
      v67 = *(_QWORD *)a2 - (v65 << 55);
      if (*(_QWORD *)a2 < v65 << 55)
        v65 = v65;
      else
        v65 = byte_1C98326D3[(*(_QWORD *)(a2 + 8) & 0xC0) + (v64 >> 1)];
      if (v66)
      {
        v60 = v67;
        v68 = 1;
      }
      else
      {
        v68 = 0;
      }
      if (v66)
        v69 = v64 + 1;
      else
        v69 = *(_BYTE *)(a2 + 59);
      v70 = byte_1C98326D3[2 * v64 + 256 + v68];
      v71 = __clz(v65);
      v72 = v71 - 55;
      v73 = v65 << (v71 - 55);
      v74 = v60 << (v71 - 55);
      *(_BYTE *)(a2 + 59) = v70;
      if ((v69 & 1) != 0)
      {
        if (v58 < 3)
        {
          v75 = 1;
        }
        else
        {
          v76 = 0;
          v75 = v58 - 1;
          v77 = v73 << 54;
          v78 = v58 + v71 - 57;
          while (1)
          {
            v79 = v76 + 1;
            if (v74 < v77)
              break;
            v74 = 2 * (v74 - v77);
            ++v76;
            if (v59 == v79)
            {
              v72 = v78;
              goto LABEL_69;
            }
          }
          v74 *= 2;
          v72 += v76 + 1;
          v75 = v76 + 1;
        }
      }
      else
      {
        v75 = 0;
      }
LABEL_69:
      v80 = v63 + v72;
      if (v80 >= 0)
      {
        v81 = *v61++;
        v74 += (unint64_t)bswap32(v81) << v80;
        v80 -= 32;
        if (v61 >= v62)
          v61 = v62;
      }
      *(_QWORD *)a2 = v74;
      *(_QWORD *)(a2 + 8) = v73;
      *(_QWORD *)(a2 + 16) = v80;
      *(_QWORD *)(a2 + 24) = v61;
    }
    if (*(_WORD *)(*(_QWORD *)(a1 + 32) + 1610) && *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2113) - a10 == 3)
      sub_1C974F980(a1, a4 & 0xFFFFFFF8, a5 & 0xFFFFFFF8, 8, 8, a9, (uint64_t)v211, v75 + 1);
    else
      sub_1C974F980(a1, a4, a5, a6, a7, a8, (uint64_t)v211, v75 + 1);
    v82 = &v211[3 * v75];
    v83 = *(_BYTE *)v82;
    *((_BYTE *)v11 + 8) = 16 * *(_BYTE *)v82;
    v84 = *((_BYTE *)v82 + 1);
    *((_BYTE *)v11 + 9) = 16 * v84;
    v85 = *(_BYTE *)(a1 + 520 + (v83 & 0xF)) + 16 * v83;
    *((_BYTE *)v11 + 8) = v85;
    *((_BYTE *)v11 + 9) = *(_BYTE *)(a1 + 520 + (v84 & 0xF) + 16) + 16 * v84;
    *(_QWORD *)v11 = *(_QWORD *)(v82 + 1);
    v86 = 1;
  }
  else
  {
    *((_WORD *)a3 + 4) = -1;
    *(_QWORD *)a3 = 0;
    v29 = 1;
    if (!*(_BYTE *)(a1 + 58))
    {
      v30 = *(_QWORD *)a2;
      if (a7 + a6 == 12)
        goto LABEL_35;
      v31 = a2 + a10;
      v32 = *(unsigned __int8 *)(v31 + 60);
      v33 = *(_QWORD *)(a2 + 8);
      v34 = byte_1C98326D3[(v33 & 0xC0) + (v32 >> 1)];
      LODWORD(v35) = v33 - v34;
      v36 = v30 >= (v33 - v34) << 55;
      if (v30 < (v33 - v34) << 55)
        v35 = v35;
      else
        v35 = byte_1C98326D3[(v33 & 0xC0) + (v32 >> 1)];
      if (v30 < (v33 - v34) << 55)
      {
        v37 = 0;
      }
      else
      {
        v30 -= (v33 - v34) << 55;
        v37 = 1;
      }
      if (v36)
        v38 = v32 + 1;
      else
        v38 = *(_BYTE *)(v31 + 60);
      v39 = byte_1C98326D3[2 * v32 + 256 + v37];
      v40 = __clz(v35) - 55;
      v30 <<= v40;
      *(_QWORD *)(a2 + 8) = v35 << v40;
      *(_BYTE *)(v31 + 60) = v39;
      v41 = *(_QWORD *)(a2 + 16) + v40;
      if (v41 >= 0)
      {
        v42 = *(unsigned int **)(a2 + 24);
        v44 = *v42;
        v43 = v42 + 1;
        v30 += (unint64_t)bswap32(v44) << v41;
        v41 -= 32;
        if ((unint64_t)v43 >= *(_QWORD *)(a2 + 32))
          v43 = *(unsigned int **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v43;
      }
      *(_QWORD *)(a2 + 16) = v41;
      *(_QWORD *)a2 = v30;
      if ((v38 & 1) != 0)
      {
        v29 = 3;
      }
      else
      {
LABEL_35:
        v45 = *(unsigned __int8 *)(a2 + 64);
        v46 = *(_QWORD *)(a2 + 8) - byte_1C98326D3[(*(_QWORD *)(a2 + 8) & 0xC0) + (v45 >> 1)];
        v47 = v30 >= v46 << 55;
        v48 = v30 - (v46 << 55);
        if (v30 < v46 << 55)
          v46 = v46;
        else
          v46 = byte_1C98326D3[(*(_QWORD *)(a2 + 8) & 0xC0) + (v45 >> 1)];
        if (v47)
        {
          v30 = v48;
          v49 = 1;
        }
        else
        {
          v49 = 0;
        }
        if (v47)
          v50 = v45 + 1;
        else
          v50 = *(_BYTE *)(a2 + 64);
        v51 = byte_1C98326D3[2 * v45 + 256 + v49];
        v52 = __clz(v46) - 55;
        v53 = v30 << v52;
        *(_QWORD *)(a2 + 8) = v46 << v52;
        *(_BYTE *)(a2 + 64) = v51;
        v54 = *(_QWORD *)(a2 + 16) + v52;
        if (v54 >= 0)
        {
          v55 = *(unsigned int **)(a2 + 24);
          v57 = *v55;
          v56 = v55 + 1;
          v53 += (unint64_t)bswap32(v57) << v54;
          v54 -= 32;
          if ((unint64_t)v56 >= *(_QWORD *)(a2 + 32))
            v56 = *(unsigned int **)(a2 + 32);
          *(_QWORD *)(a2 + 24) = v56;
        }
        *(_QWORD *)(a2 + 16) = v54;
        *(_QWORD *)a2 = v53;
        v29 = (v50 & 1u) + 1;
      }
    }
    v87 = 0;
    v88 = (_DWORD)v29 == 2;
    do
    {
      if (*(char *)(a1 + v88 + 516) < 2)
      {
        v90 = 0;
      }
      else
      {
        v89 = 0;
        v90 = 0;
        v91 = *(unsigned __int8 *)(a1 + v88 + 516);
        v92 = *(_QWORD *)a2;
        v93 = *(_QWORD *)(a2 + 8);
        v94 = *(unsigned int **)(a2 + 24);
        v95 = *(unsigned int **)(a2 + 32);
        v96 = *(_QWORD *)(a2 + 16);
        if (v91 == 2)
          v97 = 1;
        else
          v97 = 2;
        v98 = 65;
        do
        {
          v99 = *(unsigned __int8 *)(a2 + v98);
          v100 = byte_1C98326D3[(v93 & 0xC0) + (v99 >> 1)];
          v101 = v93 - v100;
          v102 = v92 >= v101 << 55;
          v103 = v92 - (v101 << 55);
          if (v92 < v101 << 55)
            v101 = v101;
          else
            v101 = v100;
          if (v102)
          {
            v92 = v103;
            v104 = 1;
          }
          else
          {
            v104 = 0;
          }
          if (v102)
            v105 = v99 + 1;
          else
            v105 = *(_BYTE *)(a2 + v98);
          v106 = __clz(v101) - 55;
          v93 = v101 << v106;
          v92 <<= v106;
          v89 += v106;
          v90 += v105 & 1;
          *(_BYTE *)(a2 + v98) = byte_1C98326D3[2 * v99 + 256 + v104];
          if ((v105 & 1) == 0)
            break;
          ++v98;
        }
        while (v90 < v97);
        v107 = v96 + v89;
        if (v107 >= 0)
        {
          v108 = *v94++;
          v92 += (unint64_t)bswap32(v108) << v107;
          v107 -= 32;
          if (v94 >= v95)
            v94 = v95;
        }
        v109 = v91 - 1;
        v110 = 0;
        if ((v105 & 1) != 0 && v90 < v109)
        {
          v112 = v93 << 54;
          do
          {
            if (v92 < v112)
              v113 = 0;
            else
              v113 = v93 << 54;
            ++v110;
            v36 = v92 >= v112;
            v92 = 2 * (v92 - v113);
            if (!v36)
              break;
            ++v90;
          }
          while (v90 < v109);
        }
        v114 = v107 + v110;
        if (v114 >= 0)
        {
          v115 = *v94++;
          v92 += (unint64_t)bswap32(v115) << v114;
          v114 -= 32;
          if (v94 >= v95)
            v94 = v95;
        }
        *(_QWORD *)a2 = v92;
        *(_QWORD *)(a2 + 8) = v93;
        *(_QWORD *)(a2 + 16) = v114;
        *(_QWORD *)(a2 + 24) = v94;
      }
      *((_BYTE *)v11 + v88 + 8) = *(_BYTE *)(a1 + 16 * v88 + v90 + 520) + 16 * v90;
      v116 = *(_QWORD *)a2;
      v117 = *(_QWORD *)(a2 + 8);
      if (!v87)
      {
        v118 = 0;
        v119 = 0;
        v120 = *(unsigned int **)(a2 + 24);
        v121 = *(unsigned int **)(a2 + 32);
        v122 = *(_QWORD *)(a2 + 16);
        v123 = 1;
        v124 = *(unsigned __int8 *)(a2 + 67);
        do
        {
          v125 = v123;
          v126 = byte_1C98326D3[(v117 & 0xC0) + (v124 >> 1)];
          v127 = v117 - v126;
          v128 = v116 >= v127 << 55;
          v129 = v116 - (v127 << 55);
          if (v116 < v127 << 55)
            v127 = v127;
          else
            v127 = v126;
          if (v128)
          {
            v116 = v129;
            v130 = 1;
          }
          else
          {
            v130 = 0;
          }
          if (v128)
            v131 = v124 + 1;
          else
            v131 = v124;
          v124 = byte_1C98326D3[2 * v124 + 256 + v130];
          v132 = __clz(v127) - 55;
          v117 = v127 << v132;
          v116 <<= v132;
          v119 += v132;
          *((_BYTE *)v211 + v118) = v131 & 1;
          v118 = 1;
          v123 = 0;
        }
        while ((v125 & 1) != 0);
        v133 = 0;
        *(_BYTE *)(a2 + 67) = v124;
        v134 = *(unsigned __int8 *)(a2 + 68);
        v135 = 1;
        do
        {
          v136 = v135;
          if (*((_BYTE *)v211 + v133))
          {
            v137 = byte_1C98326D3[(v117 & 0xC0) + (v134 >> 1)];
            v138 = v117 - v137;
            v139 = v116 >= v138 << 55;
            v140 = v116 - (v138 << 55);
            if (v116 < v138 << 55)
              v138 = v138;
            else
              v138 = v137;
            if (v139)
            {
              v116 = v140;
              v141 = 1;
            }
            else
            {
              v141 = 0;
            }
            if (v139)
              v142 = v134 + 1;
            else
              v142 = v134;
            v134 = byte_1C98326D3[2 * v134 + 256 + v141];
            v143 = __clz(v138) - 55;
            v117 = v138 << v143;
            v116 <<= v143;
            v119 += v143;
            *((_BYTE *)v212 + v133) = v142 & 1;
          }
          v135 = 0;
          v133 = 1;
        }
        while ((v136 & 1) != 0);
        *(_BYTE *)(a2 + 68) = v134;
        v144 = v122 + v119;
        if (v144 >= 0)
        {
          v145 = *v120++;
          v116 += (unint64_t)bswap32(v145) << v144;
          v144 -= 32;
          if (v120 >= v121)
            v120 = v121;
        }
        v146 = 0;
        v147 = v117 << 54;
        v148 = 1;
        do
        {
          v149 = v148;
          if (*((_BYTE *)v211 + v146))
          {
            if (*((_BYTE *)v212 + v146))
            {
              v150 = 0;
              v151 = 0;
              do
              {
                v152 = v150;
                if (v116 < v147)
                  v153 = 0;
                else
                  v153 = v117 << 54;
                v154 = v116 - v153;
                v150 = v152 + 1;
                v36 = v116 >= v147;
                v155 = v116 >= v147;
                v116 = 2 * v154;
                v151 += v155 << (v152 + 1);
              }
              while (v36 && v150 < 0x18);
              v144 += v150;
              if (v144 >= 0)
              {
                v156 = *v120++;
                v116 += (unint64_t)bswap32(v156) << v144;
                v144 -= 32;
                if (v120 >= v121)
                  v120 = v121;
              }
              v157 = v152 + 2;
              v158 = v151 + *((unsigned __int8 *)v212 + v146) + 1;
            }
            else
            {
              v158 = 1;
              v157 = 1;
            }
            v159 = 0;
            v160 = v157 + 1;
            do
            {
              v161 = v159;
              v162 = v116;
              v163 = v116 >= v147;
              if (v116 < v147)
                v164 = 0;
              else
                v164 = v117 << 54;
              v116 = 2 * (v162 - v164);
              v159 = v163 | (2 * v161);
              --v160;
            }
            while (v160 > 1);
            v144 += v157;
            if (v144 >= 0)
            {
              v165 = *v120++;
              v116 += (unint64_t)bswap32(v165) << v144;
              v144 -= 32;
              if (v120 >= v121)
                v120 = v121;
            }
            v166 = (v161 & 0x7FFFFFFF) + v158;
            if (v162 >= v147)
              v166 = -v166;
            *((_WORD *)v11 + 2 * v88 + v146) = v166;
          }
          v148 = 0;
          v146 = 1;
        }
        while ((v149 & 1) != 0);
        *(_QWORD *)a2 = v116;
        *(_QWORD *)(a2 + 16) = v144;
        *(_QWORD *)(a2 + 24) = v120;
      }
      v167 = *(unsigned __int8 *)(a2 + 69);
      v168 = byte_1C98326D3[(v117 & 0xC0) + (v167 >> 1)];
      v169 = v117 - v168;
      v170 = v116 >= v169 << 55;
      v171 = v116 - (v169 << 55);
      if (v116 < v169 << 55)
        v169 = v169;
      else
        v169 = v168;
      if (v170)
      {
        v116 = v171;
        v172 = 1;
      }
      else
      {
        v172 = 0;
      }
      if (v170)
        v173 = v167 + 1;
      else
        v173 = *(_BYTE *)(a2 + 69);
      v174 = byte_1C98326D3[2 * v167 + 256 + v172];
      v208 = v173;
      v209 = *(_BYTE *)(a1 + 552) != 0;
      v175 = __clz(v169) - 55;
      v176 = v116 << v175;
      *(_QWORD *)(a2 + 8) = v169 << v175;
      *(_BYTE *)(a2 + 69) = v174;
      v177 = *(_QWORD *)(a2 + 16) + v175;
      v210 = v88;
      if (v177 >= 0)
      {
        v178 = *(unsigned int **)(a2 + 24);
        v180 = *v178;
        v179 = v178 + 1;
        v176 += (unint64_t)bswap32(v180) << v177;
        v177 -= 32;
        if ((unint64_t)v179 >= *(_QWORD *)(a2 + 32))
          v179 = *(unsigned int **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v179;
      }
      v181 = v29;
      v182 = v29 > 1;
      *(_QWORD *)(a2 + 16) = v177;
      *(_QWORD *)a2 = v176;
      v183 = *((unsigned __int8 *)v11 + v88 + 8) >> 4;
      v213[0] = 0;
      v213[1] = 0;
      memset(v212, 0, sizeof(v212));
      sub_1C974E7B0(a1, a4, a5, a6, a7, a8, v213, v212);
      sub_1C974ECB8(a1, a4, a5, v210, v183, a6, a7, v211, v213, (uint64_t)v212, 0);
      v11 = a3;
      v87 = v209;
      v184 = &v211[v208 & 1];
      v185 = (_WORD *)a3 + 2 * v210;
      *v185 += *(_WORD *)v184;
      v185[1] += *((_WORD *)v184 + 1);
      v186 = !v210 && v182;
      v88 = 1;
      v29 = v181;
    }
    while (v186);
    v86 = 0;
    v85 = *((_BYTE *)a3 + 8);
  }
  if (v85 > 0xEFu || *((unsigned __int8 *)v11 + 9) > 0xEFu)
  {
LABEL_195:
    if (a7 < 4)
      goto LABEL_203;
    goto LABEL_196;
  }
  if (a6 < 8 || a7 <= 7)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2113) - v201 == 3)
    {
      *((_BYTE *)v11 + 9) = -1;
      *((_DWORD *)v11 + 1) = 0;
    }
    goto LABEL_195;
  }
LABEL_196:
  v187 = 0;
  v188 = *v11;
  v189 = a6 >> 2;
  if (a6 >> 2 <= 1)
    v189 = 1;
  v190 = 12 * v189;
  v191 = 12 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 848);
  v192 = v11;
  do
  {
    if (a6 >= 4)
    {
      v193 = 0;
      do
      {
        *(__int128 *)((char *)v192 + v193) = v188;
        v193 += 12;
      }
      while (v190 != v193);
    }
    ++v187;
    v192 = (__int128 *)((char *)v192 + v191);
  }
  while (v187 != a7 >> 2);
LABEL_203:
  v194 = *(void (**)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 2264);
  v195 = *(_QWORD *)(a1 + 2272);
  v196 = (_QWORD *)(a1 + (v195 >> 1));
  if ((v195 & 1) != 0)
    v194 = *(void (**)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(*v196 + v194);
  v194(v196, v11, a4, a5, a6, a7);
  v197 = *(void (**)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 2288);
  v198 = *(_QWORD *)(a1 + 2296);
  v199 = (_QWORD *)(a1 + (v198 >> 1));
  if ((v198 & 1) != 0)
    v197 = *(void (**)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(*v199 + v197);
  v197(v199, v11, a4, a5, a6, a7);
  return v86;
}

uint64_t sub_1C977E400(uint64_t a1, uint64_t a2, _QWORD *a3, int *a4, int *a5)
{
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 2332))
    return sub_1C9702C74(a1, a3, a4, a5);
  if (*a4 + *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2120) * *a5 == *(_DWORD *)(a1 + 52))
  {
    sub_1C971071C(a1, a2);
    if (!v10)
      return sub_1C9702C74(a1, a3, a4, a5);
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Error starting decode\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Error starting decode\n");
    }
    return 0;
  }
  else
  {
    v11 = 1;
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("First TB decoded in slice is not start of slice!\n", 0x31uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "First TB decoded in slice is not start of slice!\n");
    }
  }
  return v11;
}

void sub_1C977E51C(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_1C977E590(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C977E590(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = atomic_load((unsigned __int8 *)(v2 + 3440));
    if ((v3 & 1) != 0 && dword_1ED1ACCC0 >= 3)
    {
      fwrite("Deallocating a non-idle FrameDec!!\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Deallocating a non-idle FrameDec!!\n");
    }
    for (i = 3424; i != 3168; i -= 16)
      sub_1C972CFE0(v2 + i);
    do
    {
      sub_1C972CFE0(v2 + i);
      i -= 16;
    }
    while (i != 2912);
    do
    {
      sub_1C972CFE0(v2 + i);
      i -= 16;
    }
    while (i != 2656);
    do
    {
      sub_1C972CFE0(v2 + i);
      i -= 16;
    }
    while (i != 2400);
    do
    {
      sub_1C972CFE0(v2 + i);
      i -= 16;
    }
    while (i != 2144);
    sub_1C972CFE0(v2 + 2120);
    v5 = *(_QWORD *)(v2 + 2088);
    if (v5)
    {
      *(_QWORD *)(v2 + 2096) = v5;
      MEMORY[0x1CAA43B90]();
    }
    v6 = *(_QWORD **)(v2 + 2064);
    if (v6)
    {
      v7 = *(_QWORD **)(v2 + 2072);
      v8 = *(void **)(v2 + 2064);
      if (v7 != v6)
      {
        do
        {
          v10 = *--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
        while (v7 != v6);
        v8 = *(void **)(v2 + 2064);
      }
      *(_QWORD *)(v2 + 2072) = v6;
      operator delete(v8);
    }
    sub_1C974ABC8(v2 + 1728);
    v11 = *(void **)(v2 + 1328);
    *(_QWORD *)(v2 + 1328) = 0;
    if (v11)
      free(v11);
    JUMPOUT(0x1CAA43B90);
  }
  return result;
}

void sub_1C977E708()
{
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C977E71C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E82919A0;
  result[1] = v3;
  return result;
}

void sub_1C977E754(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_queue_t v7;
  NSObject *v8;
  uint64_t *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v5 + 2584) = 1;
  if (!*(_QWORD *)(v5 + 184))
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if (!*(_QWORD *)(v5 + 2576))
  {
    v6 = dispatch_queue_attr_make_with_qos_class(0, (dispatch_qos_class_t)*(_DWORD *)(v5 + 324), 0);
    v7 = dispatch_queue_create("com.apple.vcphevc.missingref", v6);
    v8 = *(NSObject **)(v5 + 2576);
    if (v8)
      dispatch_release(v8);
    *(_QWORD *)(v5 + 2576) = v7;
  }
  v9 = (uint64_t *)(v5 + 2560);
  v10 = *(_DWORD **)(v5 + 2560);
  if (v10)
  {
    if (v10[256] == (_DWORD)v4)
    {
      v11 = *(_QWORD *)(v5 + 2568);
      *a3 = v10;
      a3[1] = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      return;
    }
    v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
    v14 = *(_QWORD *)(v5 + 184);
    if (v15)
    {
      v16 = *v9;
      *a3 = 0;
      a3[1] = 0;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v14 + 32))(v14, v4, v17, 0, a3);
      if (*a3)
      {
        v18 = (_QWORD *)operator new();
        v19 = a3[1];
        *v18 = *a3;
        v18[1] = v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        dispatch_async_f(*(dispatch_queue_t *)(v5 + 2576), v18, (dispatch_function_t)sub_1C977EAC8);
      }
      return;
    }
  }
  else
  {
    v14 = *(_QWORD *)(v5 + 184);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v4, v5 + 2560);
  if (*v9)
  {
    v22 = (_QWORD *)operator new();
    v23 = *(_QWORD *)(v5 + 2568);
    *v22 = *(_QWORD *)(v5 + 2560);
    v22[1] = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    dispatch_async_f(*(dispatch_queue_t *)(v5 + 2576), v22, (dispatch_function_t)sub_1C977E980);
    v26 = *(_QWORD *)(v5 + 2560);
  }
  else
  {
    v26 = 0;
  }
  v27 = *(_QWORD *)(v5 + 2568);
  *a3 = v26;
  a3[1] = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
}

void sub_1C977E968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1C972CFE0(v1);
  _Unwind_Resume(a1);
}

void sub_1C977E980(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  char v14;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 531))
  {
    v3 = 1 << (*(_BYTE *)(v2 + 528) - 1);
    if (*(_BYTE *)(v2 + 534))
      LOWORD(v3) = 0x8000;
    v4 = *(_DWORD *)(v2 + 524);
    if (v4 >= 1)
    {
      v5 = 0;
      v6 = *(_QWORD *)(v2 + 400);
      v7 = *(_QWORD *)(v2 + 416);
      v8 = 2 * v7;
      v9 = *(unsigned int *)(v2 + 520);
      v10 = 4 * v7;
      do
      {
        if ((int)v9 >= 1)
        {
          v11 = 0;
          do
          {
            *(_WORD *)(v6 + v8 + v11) = v3;
            *(_WORD *)(v6 + v11) = v3;
            v11 += 2;
          }
          while (2 * v9 != v11);
        }
        v5 += 2;
        v6 += v10;
      }
      while (v5 < v4);
    }
  }
  else
  {
    memset(*(void **)(v2 + 400), 128, *(_QWORD *)(v2 + 416) * *(int *)(v2 + 524));
  }
  sub_1C9747864((unsigned int *)v2);
  v12 = *(_QWORD *)a1;
  v13 = (std::mutex *)(*(_QWORD *)a1 + 1040);
  v14 = 1;
  std::mutex::lock(v13);
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v12 + 1032));
  sub_1C971138C((uint64_t)&v13);
  std::condition_variable::notify_all((std::condition_variable *)(v12 + 1104));
  if (v14)
    std::mutex::unlock(v13);
  sub_1C972CFE0(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C977EAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_1C977EAC8(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  char v4;

  v2 = *(_QWORD *)a1;
  v3 = (std::mutex *)(*(_QWORD *)a1 + 1040);
  v4 = 1;
  std::mutex::lock(v3);
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v2 + 1032));
  sub_1C971138C((uint64_t)&v3);
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 1104));
  if (v4)
    std::mutex::unlock(v3);
  sub_1C972CFE0(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C977EB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C977EB64(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  FILE *v5;
  FILE *v6;
  NSObject *v7;
  NSObject *v8;
  void **v9;
  void **v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  _QWORD *v25;
  uint64_t v26;
  uint64_t j;
  std::mutex *v29;
  char v30;

  if (!*(_BYTE *)(a1 + 200))
  {
    if (*(int *)(a1 + 2392) >= 1)
    {
      v2 = 0;
      do
      {
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 2400), 0xFFFFFFFFFFFFFFFFLL);
        ++v2;
      }
      while (v2 < *(_DWORD *)(a1 + 2392));
    }
    v29 = (std::mutex *)(a1 + 2472);
    v30 = 1;
    std::mutex::lock((std::mutex *)(a1 + 2472));
    sub_1C97113CC(a1);
    sub_1C971138C((uint64_t)&v29);
    if (*(int *)(a1 + 2392) >= 1)
    {
      v3 = 0;
      do
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 2400));
        ++v3;
      }
      while (v3 < *(_DWORD *)(a1 + 2392));
    }
    if (v30)
      std::mutex::unlock(v29);
    sub_1C9715A8C(a1);
  }
  v4 = *(_QWORD *)(a1 + 184);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(FILE **)(a1 + 208);
  if (v5 && fclose(v5) && dword_1ED1ACCC0 >= 3)
  {
    fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Unable to close file\n");
  }
  v6 = *(FILE **)(a1 + 216);
  if (v6 && fclose(v6) && dword_1ED1ACCC0 >= 3)
  {
    fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Unable to close file\n");
  }
  v7 = *(NSObject **)(a1 + 2400);
  if (v7)
    dispatch_release(v7);
  v8 = *(NSObject **)(a1 + 2576);
  if (v8)
    dispatch_release(v8);
  sub_1C972CFE0(a1 + 2560);
  std::mutex::~mutex((std::mutex *)(a1 + 2472));
  v9 = *(void ***)(a1 + 2432);
  v10 = *(void ***)(a1 + 2440);
  if (v10 == v9)
  {
    v14 = (_QWORD *)(a1 + 2464);
    v10 = *(void ***)(a1 + 2432);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 2456);
    v12 = &v9[v11 >> 8];
    v13 = (uint64_t)*v12 + 16 * v11;
    v14 = (_QWORD *)(a1 + 2464);
    v15 = *(uint64_t *)((char *)v9 + (((*(_QWORD *)(a1 + 2464) + v11) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 2464) + v11);
    if (v13 != v15)
    {
      do
      {
        v13 = sub_1C972CFE0(v13) + 16;
        if (v13 - (_QWORD)*v12 == 4096)
        {
          v16 = (uint64_t)v12[1];
          ++v12;
          v13 = v16;
        }
      }
      while (v13 != v15);
      v10 = *(void ***)(a1 + 2440);
      v9 = *(void ***)(a1 + 2432);
    }
  }
  *v14 = 0;
  v17 = (char *)v10 - (char *)v9;
  if ((unint64_t)((char *)v10 - (char *)v9) >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v9 = (void **)(*(_QWORD *)(a1 + 2432) + 8);
      *(_QWORD *)(a1 + 2432) = v9;
      v10 = *(void ***)(a1 + 2440);
      v17 = (char *)v10 - (char *)v9;
    }
    while ((unint64_t)((char *)v10 - (char *)v9) > 0x10);
  }
  v18 = v17 >> 3;
  if (v18 == 1)
  {
    v19 = 128;
    goto LABEL_38;
  }
  if (v18 == 2)
  {
    v19 = 256;
LABEL_38:
    *(_QWORD *)(a1 + 2456) = v19;
  }
  if (v9 != v10)
  {
    do
    {
      v20 = *v9++;
      operator delete(v20);
    }
    while (v9 != v10);
    v21 = *(_QWORD *)(a1 + 2432);
    v22 = *(_QWORD *)(a1 + 2440);
    if (v22 != v21)
      *(_QWORD *)(a1 + 2440) = v22 + ((v21 - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v23 = *(void **)(a1 + 2424);
  if (v23)
    operator delete(v23);
  for (i = 2264; i != 1992; i -= 16)
    sub_1C972CFE0(a1 + i);
  v25 = *(_QWORD **)(a1 + 2000);
  if (v25 == (_QWORD *)(a1 + 1976))
  {
    v26 = 4;
    v25 = (_QWORD *)(a1 + 1976);
    goto LABEL_51;
  }
  if (v25)
  {
    v26 = 5;
LABEL_51:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v29 = (std::mutex *)(a1 + 1952);
  sub_1C977E51C((void ***)&v29);
  sub_1C972CFE0(a1 + 1936);
  sub_1C972CFE0(a1 + 1920);
  sub_1C972CFE0(a1 + 1904);
  for (j = 1888; j != 864; j -= 16)
    sub_1C972CFE0(a1 + j);
  do
  {
    sub_1C972CFE0(a1 + j);
    j -= 16;
  }
  while (j != 608);
  do
  {
    sub_1C972CFE0(a1 + j);
    j -= 16;
  }
  while (j != 352);
  sub_1C977F548((_QWORD *)(a1 + 248));
  sub_1C972CFE0(a1 + 224);
  sub_1C972CFE0(a1 + 168);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C977EF04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  sub_1C972D5A8(a1);
}

_QWORD *sub_1C977EF28(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1E8291C28;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1C977EFD4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C977EFF8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C977F014(uint64_t a1, int a2)
{
  char v4;
  char __str[16];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x10uLL, "%d", a2);
  v4 = 0;
  return sub_1C971D338(a1 + 248, 0xC0AB56BF45863635, "max-threads", __str, 0xFFFFFFFFLL, (uint64_t)&v4);
}

void sub_1C977F0B0(_QWORD *a1)
{
  sub_1C977F548(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C977F0D4(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (const void *)a1[20];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[23];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[11];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[15];
  if (v5)
    CFRelease(v5);
  v6 = (_QWORD *)a1[19];
  if (v6 == a1 + 16)
  {
    v7 = 4;
    v6 = a1 + 16;
    goto LABEL_13;
  }
  if (v6)
  {
    v7 = 5;
LABEL_13:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *sub_1C977F158(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1C977F2C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1C972D5A8(a1);
}

void sub_1C977F2D0()
{
  JUMPOUT(0x1CAA43B9CLL);
}

_DWORD *sub_1C977F2E4(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E8291A30;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C977F31C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E8291A30;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C977F33C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1C977F348()
{
  JUMPOUT(0x1CAA43B9CLL);
}

__n128 sub_1C977F35C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E82919E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C977F394(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E82919E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C977F3B4(uint64_t a1, int *a2, int *a3, _DWORD *a4)
{
  uint64_t v4;

  LODWORD(v4) = *a4;
  if ((int)*a4 >= 6)
    LODWORD(v4) = 6;
  if ((int)v4 <= 3)
    v4 = 3;
  else
    v4 = v4;
  return *(char *)(*(_QWORD *)(a1 + 8)
                               + 88 * (*(_DWORD *)(a1 + 16) * (*a3 >> 6) + (*a2 >> 6))
                               + byte_1C9857D28[6 - v4]
                               + ((*a3 & 0x3Fu) >> v4 << (6 - v4))
                               + (unint64_t)((*a2 & 0x3Fu) >> v4));
}

uint64_t sub_1C977F428()
{
  BOOL v0;
  uint64_t result;
  uint64_t v2;
  size_t v3;
  int v4;

  v4 = 0;
  v2 = 0;
  v3 = 8;
  if (sysctlbyname("hw.cachelinesize", &v2, &v3, 0, 0))
    v0 = 0;
  else
    v0 = v3 == 8;
  if (v0)
    qword_1ED1ACCA8 = v2;
  v3 = 4;
  if (!sysctlbyname("hw.physicalcpu", &v4, &v3, 0, 0) && v3 == 4)
    dword_1ED1ACCA4 = v4;
  v3 = 4;
  result = sysctlbyname("hw.logicalcpu", &v4, &v3, 0, 0);
  if (!(_DWORD)result && v3 == 4)
    dword_1ED1ACCA0 = v4;
  dword_1ED1ACCD8 |= 2u;
  return result;
}

uint64_t sub_1C977F514(uint64_t (***a1)(void))
{
  return (**a1)();
}

void sub_1C977F524(_QWORD *a1)
{
  sub_1C977F548(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C977F548(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *a1 = &off_1E8291690;
  v2 = (_QWORD *)a1[1];
  v3 = a1 + 2;
  if (v2 != a1 + 2)
  {
    do
    {
      v4 = v2[6];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  sub_1C977F5E0((_QWORD *)a1[2]);
  return a1;
}

void sub_1C977F5E0(_QWORD *a1)
{
  if (a1)
  {
    sub_1C977F5E0(*a1);
    sub_1C977F5E0(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_1C977F618(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  const char *v4;
  BOOL v5;
  BOOL v6;

  v4 = (const char *)(result + 32);
  if (*(char *)(result + 55) < 0)
  {
    if (*(_QWORD *)(result + 40))
      v6 = dword_1ED1ACCC0 <= 5;
    else
      v6 = 1;
    if (!v6)
    {
      v4 = *(const char **)v4;
      return fprintf(a2, "-%s %s\n", a4, v4);
    }
  }
  else
  {
    if (*(_BYTE *)(result + 55))
      v5 = dword_1ED1ACCC0 <= 5;
    else
      v5 = 1;
    if (!v5)
      return fprintf(a2, "-%s %s\n", a4, v4);
  }
  return result;
}

uint64_t sub_1C977F688(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t result;

  *a4 = 1;
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a1 + 64))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
    if ((_DWORD)result)
      return result;
    MEMORY[0x1CAA439BC](a1 + 32, a2);
  }
  return 0;
}

uint64_t sub_1C977F6E0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8291760;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_1C977F71C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8291760;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C977F768(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  const char *v6;

  if (dword_1ED1ACCC0 >= 6)
  {
    v6 = (const char *)sub_1C977F7DC(*(_QWORD *)(result + 16), **(_DWORD **)(result + 24));
    return fprintf(a2, "-%s %s\n", a4, v6);
  }
  return result;
}

void sub_1C977F7C8()
{
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C977F7DC(uint64_t a1, int a2)
{
  uint64_t v2;

  if (*(_QWORD *)a1)
  {
    while (*(_DWORD *)(a1 + 16) != a2)
    {
      v2 = *(_QWORD *)(a1 + 24);
      a1 += 24;
      if (!v2)
        goto LABEL_4;
    }
    return *(_QWORD *)(a1 + 8);
  }
  else
  {
LABEL_4:
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("enum_val not found\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "enum_val not found\n");
    }
    return 0;
  }
}

uint64_t sub_1C977F85C(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  int v6;

  if (**(_QWORD **)(result + 16))
  {
    v5 = result;
    v6 = dword_1ED1ACCC0;
    if (a3 && dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(a2, "-%s ", a4);
      v6 = dword_1ED1ACCC0;
    }
    if (v6 >= 6)
      return fprintf(a2, "%s\n", **(const char ***)(v5 + 16));
  }
  return result;
}

uint64_t sub_1C977F8E8(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 8) == a3
    && (free(**(void ***)(a1 + 16)), **(_QWORD **)(a1 + 16) = 0, a2)
    && (**(_QWORD **)(a1 + 16) = strdup(a2)) == 0)
  {
    return 4294954392;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C977F95C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E82914E0;
  free(**(void ***)(a1 + 16));
  **(_QWORD **)(a1 + 16) = 0;
  return a1;
}

void sub_1C977F99C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E82914E0;
  free(**(void ***)(a1 + 16));
  **(_QWORD **)(a1 + 16) = 0;
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t *sub_1C977F9EC(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

size_t sub_1C977FB84(const char *a1)
{
  size_t result;
  const char *i;
  int v4;

  result = strlen(a1);
  for (i = &a1[result - 1]; i > a1; --i)
  {
    v4 = *(unsigned __int8 *)i;
    if (v4 != 32 && v4 != 9)
      break;
    *i = 0;
  }
  return result;
}

uint64_t sub_1C977FBCC(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %lld\n", a4, **(int **)(result + 16));
  return result;
}

uint64_t sub_1C977FC14(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 8) != a3)
    return 0;
  __endptr = 0;
  *__error() = 0;
  v6 = strtoll(a2, &__endptr, 10);
  if (*__error())
    return 4294954394;
  v7 = *__endptr || v6 < (uint64_t)0xFFFFFFFF80000000;
  if (v7 || v6 >= 0x80000000)
    return 4294954394;
  result = 0;
  **(_DWORD **)(a1 + 16) = v6;
  return result;
}

void sub_1C977FCC0()
{
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C977FCD4(uint64_t a1, unint64_t a2, const char *a3, _WORD *a4, __int16 a5)
{
  _QWORD *v8;
  unint64_t v10;
  _DWORD *v11;
  __int128 v12;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  *a4 = a5;
  v8 = *(_QWORD **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    v11 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v11)
    {
      v11[2] = 0;
      *(_QWORD *)v11 = &off_1E8291630;
      *((_QWORD *)v11 + 2) = a4;
      sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    v10 = v8[4];
    if (a2 >= v10)
      break;
LABEL_5:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_6;
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

uint64_t sub_1C977FDC0(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %lld\n", a4, **(__int16 **)(result + 16));
  return result;
}

uint64_t sub_1C977FE08(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -32768 && v6 < 0x8000)
    {
      result = 0;
      **(_WORD **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1C977FEB0()
{
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C977FEC4(uint64_t a1, unint64_t a2, const char *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  unint64_t v10;
  _DWORD *v11;
  __int128 v12;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  *a4 = a5;
  v8 = *(_QWORD **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    v11 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v11)
    {
      v11[2] = 0;
      *(_QWORD *)v11 = &off_1E8291510;
      *((_QWORD *)v11 + 2) = a4;
      sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    v10 = v8[4];
    if (a2 >= v10)
      break;
LABEL_5:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_6;
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

uint64_t sub_1C977FFB0(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %lld\n", a4, **(char **)(result + 16));
  return result;
}

uint64_t sub_1C977FFF8(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -128 && v6 < 128)
    {
      result = 0;
      **(_BYTE **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1C97800A0()
{
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C97800B4(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %lld\n", a4, **(unsigned __int8 **)(result + 16));
  return result;
}

void sub_1C9780100()
{
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C9780114(uint64_t a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  _QWORD *v7;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;

  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a3;
  *a4 = 0;
  v7 = *(_QWORD **)(a1 + 16);
  if (!v7)
  {
LABEL_6:
    v10 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v10)
    {
      v10[2] = 0;
      *(_QWORD *)v10 = &off_1E8291600;
      *((_QWORD *)v10 + 2) = a4;
      sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v11)[6] = (uint64_t *)v10;
    }
    return;
  }
  while (1)
  {
    v9 = v7[4];
    if (a2 >= v9)
      break;
LABEL_5:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_6;
  }
  if (v9 < a2)
  {
    ++v7;
    goto LABEL_5;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

uint64_t sub_1C9780200(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %lld\n", a4, **(unsigned int **)(result + 16));
  return result;
}

uint64_t sub_1C9780248(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  unint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && !HIDWORD(v6))
    {
      result = 0;
      **(_DWORD **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1C97802EC()
{
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C9780300(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %lld\n", a4, **(unsigned __int16 **)(result + 16));
  return result;
}

uint64_t sub_1C9780348(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  unint64_t v6;
  uint64_t result;
  char *__endptr;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && v6 < 0x10000)
    {
      result = 0;
      **(_WORD **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

void sub_1C97803EC()
{
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C9780400(uint64_t a1, unint64_t a2, const char *a3, float *a4, float a5)
{
  _QWORD *v8;
  unint64_t v10;
  _DWORD *v11;
  __int128 v12;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  *a4 = a5;
  v8 = *(_QWORD **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    v11 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v11)
    {
      v11[2] = 0;
      *(_QWORD *)v11 = &off_1E82915A0;
      *((_QWORD *)v11 + 2) = a4;
      sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    v10 = v8[4];
    if (a2 >= v10)
      break;
LABEL_5:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_6;
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

uint64_t sub_1C97804EC(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %f\n", a4, **(float **)(result + 16));
  return result;
}

uint64_t sub_1C978053C(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  double v6;
  uint64_t result;
  BOOL v8;
  float v9;
  char *v10;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 8) != a3)
    return 0;
  v10 = 0;
  *__error() = 0;
  v6 = strtod(a2, &v10);
  if (*__error())
    return 4294954394;
  v8 = *v10 || v6 < 1.17549435e-38;
  if (v8 || v6 > 3.40282347e38)
    return 4294954394;
  result = 0;
  v9 = v6;
  **(float **)(a1 + 16) = v9;
  return result;
}

void sub_1C97805FC()
{
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C9780610(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1ED1ACCC0 >= 6)
    return fprintf(a2, "-%s %f\n", a4, **(double **)(result + 16));
  return result;
}

uint64_t sub_1C978065C(uint64_t a1, const char *a2, int a3, _BYTE *a4)
{
  double v6;
  BOOL v7;
  uint64_t result;
  char *v10;

  *a4 = 1;
  if (!a2)
    return 4294954394;
  if (*(_DWORD *)(a1 + 8) != a3)
    return 0;
  v10 = 0;
  *__error() = 0;
  v6 = strtod(a2, &v10);
  if (*__error())
    return 4294954394;
  v7 = *v10 || v6 < 2.22507386e-308;
  if (v7 || v6 > 1.79769313e308)
    return 4294954394;
  result = 0;
  **(double **)(a1 + 16) = v6;
  return result;
}

void sub_1C9780714()
{
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C9780728(uint64_t result)
{
  *(_QWORD *)(result + 72) = sub_1C980DFF0;
  *(_QWORD *)(result + 80) = sub_1C980DB7C;
  return result;
}

uint64_t sub_1C9780740(uint64_t result)
{
  void *v1;
  unsigned int v2;
  void *v3;
  uint64_t (*v4)(uint64_t, int, int, uint64_t, int, uint64_t);
  uint64_t (*v5)(uint64_t, int, int, uint64_t, int, uint64_t);

  v1 = sub_1C9812780;
  v2 = *(unsigned __int8 *)(result + 128);
  *(_QWORD *)(result + 104) = sub_1C97822B8;
  *(_QWORD *)(result + 112) = sub_1C9782230;
  v3 = sub_1C9812818;
  v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1C970DC44;
  if (v2 >= 2)
    v3 = sub_1C98128F8;
  if (v2 == 2)
    v4 = sub_1C9810D50;
  if (v2 < 3)
    v1 = sub_1C98126EC;
  *(_QWORD *)(result + 88) = v3;
  *(_QWORD *)(result + 96) = v1;
  v5 = sub_1C9811248;
  if (v2 != 3)
    v5 = v4;
  *(_QWORD *)(result + 48) = v5;
  return result;
}

uint64_t sub_1C97807B4(uint64_t result)
{
  *(_QWORD *)(result + 72) = sub_1C980E974;
  *(_QWORD *)(result + 80) = sub_1C980E4F8;
  return result;
}

uint64_t sub_1C97807CC(uint64_t result)
{
  void *v1;
  unsigned int v2;
  void *v3;
  uint64_t (*v4)(uint64_t, int, int, uint64_t, int, uint64_t);
  uint64_t (*v5)(uint64_t, int, int, uint64_t, int, uint64_t);

  v1 = sub_1C9812A74;
  v2 = *(unsigned __int8 *)(result + 128);
  *(_QWORD *)(result + 104) = sub_1C9781CA4;
  *(_QWORD *)(result + 112) = sub_1C9781C1C;
  v3 = sub_1C9812B10;
  v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1C970DC44;
  if (v2 >= 2)
    v3 = sub_1C9812BF4;
  if (v2 == 2)
    v4 = sub_1C9810D50;
  if (v2 < 3)
    v1 = sub_1C98129DC;
  *(_QWORD *)(result + 88) = v3;
  *(_QWORD *)(result + 96) = v1;
  v5 = sub_1C9811248;
  if (v2 != 3)
    v5 = v4;
  *(_QWORD *)(result + 48) = v5;
  return result;
}

uint64_t sub_1C9780840(uint64_t result)
{
  *(_QWORD *)(result + 72) = sub_1C980F300;
  *(_QWORD *)(result + 80) = sub_1C980EE84;
  return result;
}

uint64_t sub_1C9780858(uint64_t result)
{
  void *v1;
  unsigned int v2;
  void *v3;
  uint64_t (*v4)(uint64_t, int, int, uint64_t, int, uint64_t);
  uint64_t (*v5)(uint64_t, int, int, uint64_t, int, uint64_t);

  v1 = sub_1C9812D74;
  v2 = *(unsigned __int8 *)(result + 128);
  *(_QWORD *)(result + 104) = sub_1C9781694;
  *(_QWORD *)(result + 112) = sub_1C978160C;
  v3 = sub_1C9812E10;
  v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1C970DC44;
  if (v2 >= 2)
    v3 = sub_1C9812EF4;
  if (v2 == 2)
    v4 = sub_1C9810D50;
  if (v2 < 3)
    v1 = sub_1C9812CDC;
  *(_QWORD *)(result + 88) = v3;
  *(_QWORD *)(result + 96) = v1;
  v5 = sub_1C9811248;
  if (v2 != 3)
    v5 = v4;
  *(_QWORD *)(result + 48) = v5;
  return result;
}

uint64_t sub_1C97808CC(uint64_t result)
{
  *(_QWORD *)(result + 72) = sub_1C980FC8C;
  *(_QWORD *)(result + 80) = sub_1C980F810;
  return result;
}

uint64_t sub_1C97808E4(uint64_t result)
{
  void *v1;
  unsigned int v2;
  void *v3;
  uint64_t (*v4)(uint64_t, int, int, uint64_t, int, uint64_t);
  uint64_t (*v5)(uint64_t, int, int, uint64_t, int, uint64_t);

  v1 = sub_1C9813074;
  v2 = *(unsigned __int8 *)(result + 128);
  *(_QWORD *)(result + 104) = sub_1C978107C;
  *(_QWORD *)(result + 112) = sub_1C9780FF4;
  v3 = sub_1C9813110;
  v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1C970DC44;
  if (v2 >= 2)
    v3 = sub_1C98131F4;
  if (v2 == 2)
    v4 = sub_1C9810D50;
  if (v2 < 3)
    v1 = sub_1C9812FDC;
  *(_QWORD *)(result + 88) = v3;
  *(_QWORD *)(result + 96) = v1;
  v5 = sub_1C9811248;
  if (v2 != 3)
    v5 = v4;
  *(_QWORD *)(result + 48) = v5;
  return result;
}

uint64_t sub_1C9780958(uint64_t result)
{
  *(_QWORD *)(result + 72) = sub_1C981063C;
  *(_QWORD *)(result + 80) = sub_1C981019C;
  return result;
}

uint64_t sub_1C9780970(uint64_t result)
{
  void *v1;
  unsigned int v2;
  void *v3;
  uint64_t (*v4)(uint64_t, int, int, uint64_t, int, uint64_t);
  uint64_t (*v5)(uint64_t, int, int, uint64_t, int, uint64_t);

  v1 = sub_1C9813374;
  v2 = *(unsigned __int8 *)(result + 128);
  *(_QWORD *)(result + 104) = sub_1C9780A6C;
  *(_QWORD *)(result + 112) = sub_1C97809E4;
  v3 = sub_1C9813410;
  v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1C970DC44;
  if (v2 >= 2)
    v3 = sub_1C98134F4;
  if (v2 == 2)
    v4 = sub_1C9810D50;
  if (v2 < 3)
    v1 = sub_1C98132DC;
  *(_QWORD *)(result + 88) = v3;
  *(_QWORD *)(result + 96) = v1;
  v5 = sub_1C9811248;
  if (v2 != 3)
    v5 = v4;
  *(_QWORD *)(result + 48) = v5;
  return result;
}

_WORD *sub_1C97809E4(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int i;

  if (a5 >= 1)
  {
    v9 = result;
    for (i = 0; i < a5; i += 4)
    {
      sub_1C9780B00(v9, 2, a2, a3, a4);
      result = sub_1C9780B00(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

_WORD *sub_1C9780A6C(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int v10;
  uint64_t v11;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 * a2;
    do
    {
      sub_1C9780B00(v9, a2, 2, a3, a4);
      result = sub_1C9780B00(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1C9780B00(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  signed int v76;
  __int16 v77;
  signed int v78;
  unsigned int v79;
  signed int v80;
  signed int v81;
  signed int v82;
  __int16 v83;
  signed int v84;
  unsigned int v85;
  signed int v86;
  signed int v87;
  unsigned int v88;
  int v89;
  signed int v90;
  signed int v91;
  signed int v92;
  signed int v93;
  __int16 v94;
  __int16 v95;

  v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    v11 = (unsigned __int16)*result;
    v6 = (unsigned __int16)result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (unsigned __int16)result[-a3];
    v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    v11 = (unsigned __int16)*result;
  }
  v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = 2 * v16 - (v19 + v15);
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < 16 * a4)
  {
    v22 = 16 * a4;
    if (v22 >> 2 <= 2 * (v13 + v8))
      goto LABEL_37;
    v23 = (unsigned __int16)result[-4 * a3] - v6;
    if (v23 < 0)
      v23 = v6 - (unsigned __int16)result[-4 * a3];
    v24 = (unsigned __int16)result[3 * a3] - v11;
    if (v24 < 0)
      v24 = v11 - (unsigned __int16)result[3 * a3];
    if (v23 + v24 >= v22 >> 3)
    {
LABEL_37:
      v26 = 1;
    }
    else
    {
      v25 = v6 - v11;
      if (v25 < 0)
        v25 = -v25;
      v26 = v25 >= (80 * a5) >> 1;
    }
    if (v22 >> 2 <= 2 * (v21 + v17))
      goto LABEL_49;
    v27 = v14[3 * a3];
    v28 = v14[-4 * a3] - v16;
    if (v28 < 0)
      v28 = -v28;
    v29 = v27 - v19;
    if (v29 < 0)
      v29 = -v29;
    if (v28 + v29 >= v22 >> 3)
      goto LABEL_49;
    v30 = v16 - v19;
    if (v16 - v19 < 0)
      v30 = v19 - v16;
    if (v30 >= (80 * a5) >> 1)
      v26 = 1;
    if (v26)
    {
LABEL_49:
      v31 = 16 * a5;
      v32 = v17 + v8;
      v33 = v21 + v13;
      v34 = (int)(v22 + (v22 >> 1)) >> 3;
      v35 = 160 * a5;
      v36 = -16 * a5;
      v37 = (16 * a5) >> 1;
      v38 = -v37;
      v39 = 2 * a2;
      v40 = 4;
      do
      {
        v41 = (unsigned __int16)result[-2 * a3];
        v42 = (unsigned __int16)result[-a3];
        v43 = (unsigned __int16)*result;
        v44 = (unsigned __int16)result[a3];
        v45 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        if (v45 >= 0)
          v46 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        else
          v46 = -v45;
        if (v46 < v35)
        {
          if (v45 >= v31)
            v48 = v31;
          else
            v48 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
          if (v45 <= v36)
            v49 = v36;
          else
            v49 = v48;
          v50 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          if (v50 >= v37)
            v51 = v37;
          else
            v51 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          if (v50 <= v38)
            v52 = -v37;
          else
            v52 = v51;
          v53 = v52 + v41;
          if (v53 >= 4095)
            v53 = 4095;
          v54 = v53 & ~(v53 >> 31);
          if (v32 < v34)
            LOWORD(v41) = v54;
          v47 = (unsigned __int16)result[v9];
          v55 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          if (v55 >= v37)
            v56 = v37;
          else
            v56 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          if (v55 <= v38)
            v57 = -v37;
          else
            v57 = v56;
          v58 = v57 + v44;
          if (v58 >= 4095)
            v58 = 4095;
          v59 = v58 & ~(v58 >> 31);
          if (v33 < v34)
            LOWORD(v44) = v59;
          v60 = v49 + v42;
          if (v60 >= 4095)
            v60 = 4095;
          v61 = v60 & ~(v60 >> 31);
          v62 = v43 - v49;
          if (v62 >= 4095)
            v62 = 4095;
          result[-2 * a3] = v41;
          result[-a3] = v61;
          *result = v62 & ~(unsigned __int16)(v62 >> 31);
          result[a3] = v44;
        }
        result = (_WORD *)((char *)result + v39);
        --v40;
      }
      while (v40);
    }
    else
    {
      v63 = 32 * a5;
      v64 = 2 * a2;
      v65 = 4;
      do
      {
        v66 = (unsigned __int16)result[-3 * a3];
        v67 = (unsigned __int16)result[-2 * a3];
        v68 = (unsigned __int16)result[-a3];
        v69 = (unsigned __int16)result[a3];
        v70 = (unsigned __int16)result[v9];
        v71 = (unsigned __int16)result[3 * a3];
        LOWORD(v72) = v63 + v66;
        v73 = (unsigned __int16)*result;
        v74 = v73 + v68;
        v75 = v67 + 4;
        v76 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        if (v76 < v63 + v66)
          v72 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        if (v76 <= v66 - v63)
          v77 = v66 - v63;
        else
          v77 = v72;
        result[-3 * a3] = v77;
        v78 = v67 - v63;
        LOWORD(v79) = v63 + v67;
        v80 = (v74 + v67 + v66 + 2) >> 2;
        if (v80 < v63 + v67)
          v79 = (v74 + v67 + v66 + 2) >> 2;
        if (v80 > v78)
          LOWORD(v78) = v79;
        result[-2 * a3] = v78;
        v81 = v68 - v63;
        v82 = (v66 + 2 * v68 + 2 * v67 + 2 * v73 + v69 + 4) >> 3;
        if (v82 >= v63 + v68)
          v83 = v63 + v68;
        else
          v83 = v82;
        if (v82 > v81)
          LOWORD(v81) = v83;
        result[-a3] = v81;
        v84 = v73 - v63;
        LOWORD(v85) = v63 + v73;
        v86 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        if (v86 < v63 + v73)
          v85 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        if (v86 > v84)
          LOWORD(v84) = v85;
        *result = v84;
        v87 = v69 - v63;
        LOWORD(v88) = v63 + v69;
        v89 = v70 + v69 + v74;
        v90 = (v89 + 2) >> 2;
        if (v90 < v63 + v69)
          v88 = (v89 + 2) >> 2;
        if (v90 > v87)
          LOWORD(v87) = v88;
        result[a3] = v87;
        v91 = v70 - v63;
        v92 = v63 + v70;
        v93 = (v89 + 2 * v70 + 2 * v71 + 4) >> 3;
        if (v93 >= v92)
          v94 = v92;
        else
          v94 = v93;
        if (v93 <= v91)
          v95 = v91;
        else
          v95 = v94;
        result[v9] = v95;
        result = (_WORD *)((char *)result + v64);
        --v65;
      }
      while (v65);
    }
  }
  return result;
}

_WORD *sub_1C9780FF4(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int i;

  if (a5 >= 1)
  {
    v9 = result;
    for (i = 0; i < a5; i += 4)
    {
      sub_1C9781110(v9, 2, a2, a3, a4);
      result = sub_1C9781110(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

_WORD *sub_1C978107C(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int v10;
  uint64_t v11;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 * a2;
    do
    {
      sub_1C9781110(v9, a2, 2, a3, a4);
      result = sub_1C9781110(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1C9781110(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  signed int v76;
  __int16 v77;
  signed int v78;
  unsigned int v79;
  signed int v80;
  signed int v81;
  signed int v82;
  __int16 v83;
  signed int v84;
  unsigned int v85;
  signed int v86;
  signed int v87;
  unsigned int v88;
  int v89;
  signed int v90;
  signed int v91;
  signed int v92;
  signed int v93;
  __int16 v94;
  __int16 v95;

  v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    v11 = (unsigned __int16)*result;
    v6 = (unsigned __int16)result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (unsigned __int16)result[-a3];
    v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    v11 = (unsigned __int16)*result;
  }
  v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = 2 * v16 - (v19 + v15);
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < 8 * a4)
  {
    v22 = (8 * a4) >> 2;
    if (v22 <= 2 * (v13 + v8))
      goto LABEL_37;
    v23 = (unsigned __int16)result[-4 * a3] - v6;
    if (v23 < 0)
      v23 = v6 - (unsigned __int16)result[-4 * a3];
    v24 = (unsigned __int16)result[3 * a3] - v11;
    if (v24 < 0)
      v24 = v11 - (unsigned __int16)result[3 * a3];
    if (v23 + v24 >= (a4 & 0x1FFFFFFFu))
    {
LABEL_37:
      v26 = 1;
    }
    else
    {
      v25 = v6 - v11;
      if (v25 < 0)
        v25 = -v25;
      v26 = v25 >= (40 * a5) >> 1;
    }
    if (v22 <= 2 * (v21 + v17))
      goto LABEL_49;
    v27 = v14[3 * a3];
    v28 = v14[-4 * a3] - v16;
    if (v28 < 0)
      v28 = -v28;
    v29 = v27 - v19;
    if (v29 < 0)
      v29 = -v29;
    if (v28 + v29 >= (a4 & 0x1FFFFFFFu))
      goto LABEL_49;
    v30 = v16 - v19;
    if (v16 - v19 < 0)
      v30 = v19 - v16;
    if (v30 >= (40 * a5) >> 1)
      v26 = 1;
    if (v26)
    {
LABEL_49:
      v31 = 8 * a5;
      v32 = v17 + v8;
      v33 = v21 + v13;
      v34 = (int)(8 * a4 + ((8 * a4) >> 1)) >> 3;
      v35 = 80 * a5;
      v36 = -8 * a5;
      v37 = (8 * a5) >> 1;
      v38 = -v37;
      v39 = 2 * a2;
      v40 = 4;
      do
      {
        v41 = (unsigned __int16)result[-2 * a3];
        v42 = (unsigned __int16)result[-a3];
        v43 = (unsigned __int16)*result;
        v44 = (unsigned __int16)result[a3];
        v45 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        if (v45 >= 0)
          v46 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        else
          v46 = -v45;
        if (v46 < v35)
        {
          if (v45 >= v31)
            v48 = v31;
          else
            v48 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
          if (v45 <= v36)
            v49 = v36;
          else
            v49 = v48;
          v50 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          if (v50 >= v37)
            v51 = v37;
          else
            v51 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          if (v50 <= v38)
            v52 = -v37;
          else
            v52 = v51;
          v53 = v52 + v41;
          if (v53 >= 2047)
            v53 = 2047;
          v54 = v53 & ~(v53 >> 31);
          if (v32 < v34)
            LOWORD(v41) = v54;
          v47 = (unsigned __int16)result[v9];
          v55 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          if (v55 >= v37)
            v56 = v37;
          else
            v56 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          if (v55 <= v38)
            v57 = -v37;
          else
            v57 = v56;
          v58 = v57 + v44;
          if (v58 >= 2047)
            v58 = 2047;
          v59 = v58 & ~(v58 >> 31);
          if (v33 < v34)
            LOWORD(v44) = v59;
          v60 = v49 + v42;
          if (v60 >= 2047)
            v60 = 2047;
          v61 = v60 & ~(v60 >> 31);
          v62 = v43 - v49;
          if (v62 >= 2047)
            v62 = 2047;
          result[-2 * a3] = v41;
          result[-a3] = v61;
          *result = v62 & ~(unsigned __int16)(v62 >> 31);
          result[a3] = v44;
        }
        result = (_WORD *)((char *)result + v39);
        --v40;
      }
      while (v40);
    }
    else
    {
      v63 = 16 * a5;
      v64 = 2 * a2;
      v65 = 4;
      do
      {
        v66 = (unsigned __int16)result[-3 * a3];
        v67 = (unsigned __int16)result[-2 * a3];
        v68 = (unsigned __int16)result[-a3];
        v69 = (unsigned __int16)result[a3];
        v70 = (unsigned __int16)result[v9];
        v71 = (unsigned __int16)result[3 * a3];
        LOWORD(v72) = v63 + v66;
        v73 = (unsigned __int16)*result;
        v74 = v73 + v68;
        v75 = v67 + 4;
        v76 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        if (v76 < v63 + v66)
          v72 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        if (v76 <= v66 - v63)
          v77 = v66 - v63;
        else
          v77 = v72;
        result[-3 * a3] = v77;
        v78 = v67 - v63;
        LOWORD(v79) = v63 + v67;
        v80 = (v74 + v67 + v66 + 2) >> 2;
        if (v80 < v63 + v67)
          v79 = (v74 + v67 + v66 + 2) >> 2;
        if (v80 > v78)
          LOWORD(v78) = v79;
        result[-2 * a3] = v78;
        v81 = v68 - v63;
        v82 = (v66 + 2 * v68 + 2 * v67 + 2 * v73 + v69 + 4) >> 3;
        if (v82 >= v63 + v68)
          v83 = v63 + v68;
        else
          v83 = v82;
        if (v82 > v81)
          LOWORD(v81) = v83;
        result[-a3] = v81;
        v84 = v73 - v63;
        LOWORD(v85) = v63 + v73;
        v86 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        if (v86 < v63 + v73)
          v85 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        if (v86 > v84)
          LOWORD(v84) = v85;
        *result = v84;
        v87 = v69 - v63;
        LOWORD(v88) = v63 + v69;
        v89 = v70 + v69 + v74;
        v90 = (v89 + 2) >> 2;
        if (v90 < v63 + v69)
          v88 = (v89 + 2) >> 2;
        if (v90 > v87)
          LOWORD(v87) = v88;
        result[a3] = v87;
        v91 = v70 - v63;
        v92 = v63 + v70;
        v93 = (v89 + 2 * v70 + 2 * v71 + 4) >> 3;
        if (v93 >= v92)
          v94 = v92;
        else
          v94 = v93;
        if (v93 <= v91)
          v95 = v91;
        else
          v95 = v94;
        result[v9] = v95;
        result = (_WORD *)((char *)result + v64);
        --v65;
      }
      while (v65);
    }
  }
  return result;
}

_WORD *sub_1C978160C(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int i;

  if (a5 >= 1)
  {
    v9 = result;
    for (i = 0; i < a5; i += 4)
    {
      sub_1C9781728(v9, 2, a2, a3, a4);
      result = sub_1C9781728(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

_WORD *sub_1C9781694(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int v10;
  uint64_t v11;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 * a2;
    do
    {
      sub_1C9781728(v9, a2, 2, a3, a4);
      result = sub_1C9781728(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1C9781728(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  signed int v77;
  __int16 v78;
  signed int v79;
  unsigned int v80;
  signed int v81;
  signed int v82;
  signed int v83;
  __int16 v84;
  signed int v85;
  unsigned int v86;
  signed int v87;
  signed int v88;
  unsigned int v89;
  int v90;
  signed int v91;
  signed int v92;
  signed int v93;
  signed int v94;
  __int16 v95;
  __int16 v96;

  v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    v11 = (unsigned __int16)*result;
    v6 = (unsigned __int16)result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (unsigned __int16)result[-a3];
    v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    v11 = (unsigned __int16)*result;
  }
  v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = 2 * v16 - (v19 + v15);
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < 4 * a4)
  {
    v22 = 4 * a4;
    v23 = a4 & 0x3FFFFFFF;
    if (v23 <= 2 * (v13 + v8))
      goto LABEL_37;
    v24 = (unsigned __int16)result[-4 * a3] - v6;
    if (v24 < 0)
      v24 = v6 - (unsigned __int16)result[-4 * a3];
    v25 = (unsigned __int16)result[3 * a3] - v11;
    if (v25 < 0)
      v25 = v11 - (unsigned __int16)result[3 * a3];
    if (v24 + v25 >= v22 >> 3)
    {
LABEL_37:
      v27 = 1;
    }
    else
    {
      v26 = v6 - v11;
      if (v26 < 0)
        v26 = -v26;
      v27 = v26 >= (20 * a5) >> 1;
    }
    if (v23 <= 2 * (v21 + v17))
      goto LABEL_49;
    v28 = v14[3 * a3];
    v29 = v14[-4 * a3] - v16;
    if (v29 < 0)
      v29 = -v29;
    v30 = v28 - v19;
    if (v30 < 0)
      v30 = -v30;
    if (v29 + v30 >= v22 >> 3)
      goto LABEL_49;
    v31 = v16 - v19;
    if (v16 - v19 < 0)
      v31 = v19 - v16;
    if (v31 >= (20 * a5) >> 1)
      v27 = 1;
    if (v27)
    {
LABEL_49:
      v32 = 4 * a5;
      v33 = v17 + v8;
      v34 = v21 + v13;
      v35 = (int)(v22 + (v22 >> 1)) >> 3;
      v36 = 40 * a5;
      v37 = -4 * a5;
      v38 = (4 * a5) >> 1;
      v39 = -v38;
      v40 = 2 * a2;
      v41 = 4;
      do
      {
        v42 = (unsigned __int16)result[-2 * a3];
        v43 = (unsigned __int16)result[-a3];
        v44 = (unsigned __int16)*result;
        v45 = (unsigned __int16)result[a3];
        v46 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        if (v46 >= 0)
          v47 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        else
          v47 = -v46;
        if (v47 < v36)
        {
          if (v46 >= v32)
            v49 = v32;
          else
            v49 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
          if (v46 <= v37)
            v50 = v37;
          else
            v50 = v49;
          v51 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          if (v51 >= v38)
            v52 = v38;
          else
            v52 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          if (v51 <= v39)
            v53 = -v38;
          else
            v53 = v52;
          v54 = v53 + v42;
          if (v54 >= 1023)
            v54 = 1023;
          v55 = v54 & ~(v54 >> 31);
          if (v33 < v35)
            LOWORD(v42) = v55;
          v48 = (unsigned __int16)result[v9];
          v56 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          if (v56 >= v38)
            v57 = v38;
          else
            v57 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          if (v56 <= v39)
            v58 = -v38;
          else
            v58 = v57;
          v59 = v58 + v45;
          if (v59 >= 1023)
            v59 = 1023;
          v60 = v59 & ~(v59 >> 31);
          if (v34 < v35)
            LOWORD(v45) = v60;
          v61 = v50 + v43;
          if (v61 >= 1023)
            v61 = 1023;
          v62 = v61 & ~(v61 >> 31);
          v63 = v44 - v50;
          if (v63 >= 1023)
            v63 = 1023;
          result[-2 * a3] = v42;
          result[-a3] = v62;
          *result = v63 & ~(unsigned __int16)(v63 >> 31);
          result[a3] = v45;
        }
        result = (_WORD *)((char *)result + v40);
        --v41;
      }
      while (v41);
    }
    else
    {
      v64 = 8 * a5;
      v65 = 2 * a2;
      v66 = 4;
      do
      {
        v67 = (unsigned __int16)result[-3 * a3];
        v68 = (unsigned __int16)result[-2 * a3];
        v69 = (unsigned __int16)result[-a3];
        v70 = (unsigned __int16)result[a3];
        v71 = (unsigned __int16)result[v9];
        v72 = (unsigned __int16)result[3 * a3];
        LOWORD(v73) = v64 + v67;
        v74 = (unsigned __int16)*result;
        v75 = v74 + v69;
        v76 = v68 + 4;
        v77 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        if (v77 < v64 + v67)
          v73 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        if (v77 <= v67 - v64)
          v78 = v67 - v64;
        else
          v78 = v73;
        result[-3 * a3] = v78;
        v79 = v68 - v64;
        LOWORD(v80) = v64 + v68;
        v81 = (v75 + v68 + v67 + 2) >> 2;
        if (v81 < v64 + v68)
          v80 = (v75 + v68 + v67 + 2) >> 2;
        if (v81 > v79)
          LOWORD(v79) = v80;
        result[-2 * a3] = v79;
        v82 = v69 - v64;
        v83 = (v67 + 2 * v69 + 2 * v68 + 2 * v74 + v70 + 4) >> 3;
        if (v83 >= v64 + v69)
          v84 = v64 + v69;
        else
          v84 = v83;
        if (v83 > v82)
          LOWORD(v82) = v84;
        result[-a3] = v82;
        v85 = v74 - v64;
        LOWORD(v86) = v64 + v74;
        v87 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        if (v87 < v64 + v74)
          v86 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        if (v87 > v85)
          LOWORD(v85) = v86;
        *result = v85;
        v88 = v70 - v64;
        LOWORD(v89) = v64 + v70;
        v90 = v71 + v70 + v75;
        v91 = (v90 + 2) >> 2;
        if (v91 < v64 + v70)
          v89 = (v90 + 2) >> 2;
        if (v91 > v88)
          LOWORD(v88) = v89;
        result[a3] = v88;
        v92 = v71 - v64;
        v93 = v64 + v71;
        v94 = (v90 + 2 * v71 + 2 * v72 + 4) >> 3;
        if (v94 >= v93)
          v95 = v93;
        else
          v95 = v94;
        if (v94 <= v92)
          v96 = v92;
        else
          v96 = v95;
        result[v9] = v96;
        result = (_WORD *)((char *)result + v65);
        --v66;
      }
      while (v66);
    }
  }
  return result;
}

_WORD *sub_1C9781C1C(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int i;

  if (a5 >= 1)
  {
    v9 = result;
    for (i = 0; i < a5; i += 4)
    {
      sub_1C9781D38(v9, 2, a2, a3, a4);
      result = sub_1C9781D38(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

_WORD *sub_1C9781CA4(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  _WORD *v9;
  int v10;
  uint64_t v11;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 * a2;
    do
    {
      sub_1C9781D38(v9, a2, 2, a3, a4);
      result = sub_1C9781D38(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1C9781D38(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  signed int v77;
  __int16 v78;
  signed int v79;
  unsigned int v80;
  signed int v81;
  signed int v82;
  signed int v83;
  __int16 v84;
  signed int v85;
  unsigned int v86;
  signed int v87;
  signed int v88;
  unsigned int v89;
  int v90;
  signed int v91;
  signed int v92;
  signed int v93;
  signed int v94;
  __int16 v95;
  __int16 v96;

  v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    v11 = (unsigned __int16)*result;
    v6 = (unsigned __int16)result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (unsigned __int16)result[-a3];
    v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    v11 = (unsigned __int16)*result;
  }
  v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = 2 * v16 - (v19 + v15);
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < 2 * a4)
  {
    v22 = 2 * a4;
    v23 = (2 * a4) >> 2;
    if (v23 <= 2 * (v13 + v8))
      goto LABEL_37;
    v24 = (unsigned __int16)result[-4 * a3] - v6;
    if (v24 < 0)
      v24 = v6 - (unsigned __int16)result[-4 * a3];
    v25 = (unsigned __int16)result[3 * a3] - v11;
    if (v25 < 0)
      v25 = v11 - (unsigned __int16)result[3 * a3];
    if (v24 + v25 >= v22 >> 3)
    {
LABEL_37:
      v27 = 1;
    }
    else
    {
      v26 = v6 - v11;
      if (v26 < 0)
        v26 = -v26;
      v27 = v26 >= (10 * a5) >> 1;
    }
    if (v23 <= 2 * (v21 + v17))
      goto LABEL_49;
    v28 = v14[3 * a3];
    v29 = v14[-4 * a3] - v16;
    if (v29 < 0)
      v29 = -v29;
    v30 = v28 - v19;
    if (v30 < 0)
      v30 = -v30;
    if (v29 + v30 >= v22 >> 3)
      goto LABEL_49;
    v31 = v16 - v19;
    if (v16 - v19 < 0)
      v31 = v19 - v16;
    if (v31 >= (10 * a5) >> 1)
      v27 = 1;
    if (v27)
    {
LABEL_49:
      v32 = 2 * a5;
      v33 = (int)((a4 & 0x7FFFFFFE) + v22) >> 3;
      v34 = v17 + v8;
      v35 = v21 + v13;
      v36 = 20 * a5;
      v37 = -2 * a5;
      v38 = (2 * a5) >> 1;
      v39 = -v38;
      v40 = 2 * a2;
      v41 = 4;
      do
      {
        v42 = (unsigned __int16)result[-2 * a3];
        v43 = (unsigned __int16)result[-a3];
        v44 = (unsigned __int16)*result;
        v45 = (unsigned __int16)result[a3];
        v46 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        if (v46 >= 0)
          v47 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        else
          v47 = -v46;
        if (v47 < v36)
        {
          if (v46 >= v32)
            v49 = v32;
          else
            v49 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
          if (v46 <= v37)
            v50 = v37;
          else
            v50 = v49;
          v51 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          if (v51 >= v38)
            v52 = v38;
          else
            v52 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          if (v51 <= v39)
            v53 = -v38;
          else
            v53 = v52;
          v54 = v53 + v42;
          if (v54 >= 511)
            v54 = 511;
          v55 = v54 & ~(v54 >> 31);
          if (v34 < v33)
            LOWORD(v42) = v55;
          v48 = (unsigned __int16)result[v9];
          v56 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          if (v56 >= v38)
            v57 = v38;
          else
            v57 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          if (v56 <= v39)
            v58 = -v38;
          else
            v58 = v57;
          v59 = v58 + v45;
          if (v59 >= 511)
            v59 = 511;
          v60 = v59 & ~(v59 >> 31);
          if (v35 < v33)
            LOWORD(v45) = v60;
          v61 = v50 + v43;
          if (v61 >= 511)
            v61 = 511;
          v62 = v61 & ~(v61 >> 31);
          v63 = v44 - v50;
          if (v63 >= 511)
            v63 = 511;
          result[-2 * a3] = v42;
          result[-a3] = v62;
          *result = v63 & ~(unsigned __int16)(v63 >> 31);
          result[a3] = v45;
        }
        result = (_WORD *)((char *)result + v40);
        --v41;
      }
      while (v41);
    }
    else
    {
      v64 = 4 * a5;
      v65 = 2 * a2;
      v66 = 4;
      do
      {
        v67 = (unsigned __int16)result[-3 * a3];
        v68 = (unsigned __int16)result[-2 * a3];
        v69 = (unsigned __int16)result[-a3];
        v70 = (unsigned __int16)result[a3];
        v71 = (unsigned __int16)result[v9];
        v72 = (unsigned __int16)result[3 * a3];
        LOWORD(v73) = v64 + v67;
        v74 = (unsigned __int16)*result;
        v75 = v74 + v69;
        v76 = v68 + 4;
        v77 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        if (v77 < v64 + v67)
          v73 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        if (v77 <= v67 - v64)
          v78 = v67 - v64;
        else
          v78 = v73;
        result[-3 * a3] = v78;
        v79 = v68 - v64;
        LOWORD(v80) = v64 + v68;
        v81 = (v75 + v68 + v67 + 2) >> 2;
        if (v81 < v64 + v68)
          v80 = (v75 + v68 + v67 + 2) >> 2;
        if (v81 > v79)
          LOWORD(v79) = v80;
        result[-2 * a3] = v79;
        v82 = v69 - v64;
        v83 = (v67 + 2 * v69 + 2 * v68 + 2 * v74 + v70 + 4) >> 3;
        if (v83 >= v64 + v69)
          v84 = v64 + v69;
        else
          v84 = v83;
        if (v83 > v82)
          LOWORD(v82) = v84;
        result[-a3] = v82;
        v85 = v74 - v64;
        LOWORD(v86) = v64 + v74;
        v87 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        if (v87 < v64 + v74)
          v86 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        if (v87 > v85)
          LOWORD(v85) = v86;
        *result = v85;
        v88 = v70 - v64;
        LOWORD(v89) = v64 + v70;
        v90 = v71 + v70 + v75;
        v91 = (v90 + 2) >> 2;
        if (v91 < v64 + v70)
          v89 = (v90 + 2) >> 2;
        if (v91 > v88)
          LOWORD(v88) = v89;
        result[a3] = v88;
        v92 = v71 - v64;
        v93 = v64 + v71;
        v94 = (v90 + 2 * v71 + 2 * v72 + 4) >> 3;
        if (v94 >= v93)
          v95 = v93;
        else
          v95 = v94;
        if (v94 <= v92)
          v96 = v92;
        else
          v96 = v95;
        result[v9] = v96;
        result = (_WORD *)((char *)result + v65);
        --v66;
      }
      while (v66);
    }
  }
  return result;
}

_WORD *sub_1C9782230(_WORD *result, uint64_t a2, unsigned int a3, int a4, int a5)
{
  _WORD *v9;
  int i;

  if (a5 >= 1)
  {
    v9 = result;
    for (i = 0; i < a5; i += 4)
    {
      sub_1C978234C(v9, 2, a2, a3, a4);
      result = sub_1C978234C(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

_WORD *sub_1C97822B8(_WORD *result, uint64_t a2, unsigned int a3, int a4, int a5)
{
  _WORD *v9;
  int v10;
  uint64_t v11;

  if (a5 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = 8 * a2;
    do
    {
      sub_1C978234C(v9, a2, 2, a3, a4);
      result = sub_1C978234C(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1C978234C(_WORD *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  signed int v70;
  __int16 v71;
  signed int v72;
  unsigned int v73;
  signed int v74;
  signed int v75;
  signed int v76;
  __int16 v77;
  signed int v78;
  unsigned int v79;
  signed int v80;
  signed int v81;
  unsigned int v82;
  int v83;
  signed int v84;
  signed int v85;
  signed int v86;
  signed int v87;
  __int16 v88;
  __int16 v89;

  v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    v11 = (unsigned __int16)*result;
    v6 = (unsigned __int16)result[-a3];
    v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = -v12;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0)
        v13 = -v13;
      v14 = &result[3 * a2];
      v15 = v14[-2 * a3];
      v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (unsigned __int16)result[-a3];
    v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0)
      v8 = v7;
    else
      v8 = -v7;
    v9 = 2 * a3;
    v10 = (unsigned __int16)result[2 * a3];
    v11 = (unsigned __int16)*result;
  }
  v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0)
    v13 = -v13;
  v14 = &result[3 * a2];
  v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    v16 = v14[-a3];
    v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0)
      v17 = -v17;
    v18 = v14[v9];
    v19 = *v14;
    goto LABEL_24;
  }
  v20 = 0;
LABEL_20:
  v19 = *v14;
  v16 = v14[-a3];
  v17 = v19 + v15 - 2 * v16;
  if (v17 < 0)
    v17 = -v17;
  v18 = v14[v9];
  if ((v20 & 1) != 0)
  {
    v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0)
    v21 = -v21;
  if (v21 + v17 + v13 + v8 < (int)a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8))
      goto LABEL_37;
    v22 = (unsigned __int16)result[-4 * a3] - v6;
    if (v22 < 0)
      v22 = v6 - (unsigned __int16)result[-4 * a3];
    v23 = (unsigned __int16)result[3 * a3] - v11;
    if (v23 < 0)
      v23 = v11 - (unsigned __int16)result[3 * a3];
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      v25 = 1;
    }
    else
    {
      v24 = v6 - v11;
      if (v24 < 0)
        v24 = -v24;
      v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17))
      goto LABEL_49;
    v26 = v14[3 * a3];
    v27 = v14[-4 * a3] - v16;
    if (v27 < 0)
      v27 = -v27;
    v28 = v26 - v19;
    if (v28 < 0)
      v28 = -v28;
    if (v27 + v28 >= a4 >> 3)
      goto LABEL_49;
    v29 = v16 - v19;
    if (v16 - v19 < 0)
      v29 = v19 - v16;
    if (v29 >= (5 * a5 + 1) >> 1)
      v25 = 1;
    if (v25)
    {
LABEL_49:
      v30 = v17 + v8;
      v31 = (int)(a4 + (a4 >> 1)) >> 3;
      v32 = a5 >> 1;
      v33 = -(a5 >> 1);
      v34 = 4;
      do
      {
        v35 = (unsigned __int16)result[-2 * a3];
        v36 = (unsigned __int16)result[-a3];
        v37 = (unsigned __int16)*result;
        v38 = (unsigned __int16)result[a3];
        v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0)
          v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        else
          v40 = -v39;
        if (v40 < 10 * a5)
        {
          if (v39 >= a5)
            v42 = a5;
          else
            v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          if (v39 <= -a5)
            v43 = -a5;
          else
            v43 = v42;
          v44 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32)
            v45 = a5 >> 1;
          else
            v45 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 <= v33)
            v46 = -(a5 >> 1);
          else
            v46 = v45;
          v47 = v46 + v35;
          if (v47 >= 255)
            v47 = 255;
          v48 = v47 & ~(v47 >> 31);
          if (v30 < v31)
            LOWORD(v35) = v48;
          v41 = (unsigned __int16)result[v9];
          v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32)
            v50 = a5 >> 1;
          else
            v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 <= v33)
            v51 = -(a5 >> 1);
          else
            v51 = v50;
          v52 = v51 + v38;
          if (v52 >= 255)
            v52 = 255;
          v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31)
            LOWORD(v38) = v53;
          v54 = v43 + v36;
          if (v54 >= 255)
            v54 = 255;
          v55 = v54 & ~(v54 >> 31);
          v56 = v37 - v43;
          if (v56 >= 255)
            v56 = 255;
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *result = v56 & ~(unsigned __int16)(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v34;
      }
      while (v34);
    }
    else
    {
      v57 = 2 * a5;
      v58 = 2 * a2;
      v59 = 4;
      do
      {
        v60 = (unsigned __int16)result[-3 * a3];
        v61 = (unsigned __int16)result[-2 * a3];
        v62 = (unsigned __int16)result[-a3];
        v63 = (unsigned __int16)result[a3];
        v64 = (unsigned __int16)result[v9];
        v65 = (unsigned __int16)result[3 * a3];
        LOWORD(v66) = v57 + v60;
        v67 = (unsigned __int16)*result;
        v68 = v67 + v62;
        v69 = v61 + 4;
        v70 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 < v57 + v60)
          v66 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 <= v60 - v57)
          v71 = v60 - v57;
        else
          v71 = v66;
        result[-3 * a3] = v71;
        v72 = v61 - v57;
        LOWORD(v73) = v57 + v61;
        v74 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 < v57 + v61)
          v73 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 > v72)
          LOWORD(v72) = v73;
        result[-2 * a3] = v72;
        v75 = v62 - v57;
        v76 = (v60 + 2 * v62 + 2 * v61 + 2 * v67 + v63 + 4) >> 3;
        if (v76 >= v57 + v62)
          v77 = v57 + v62;
        else
          v77 = v76;
        if (v76 > v75)
          LOWORD(v75) = v77;
        result[-a3] = v75;
        v78 = v67 - v57;
        LOWORD(v79) = v57 + v67;
        v80 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 < v57 + v67)
          v79 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 > v78)
          LOWORD(v78) = v79;
        *result = v78;
        v81 = v63 - v57;
        LOWORD(v82) = v57 + v63;
        v83 = v64 + v63 + v68;
        v84 = (v83 + 2) >> 2;
        if (v84 < v57 + v63)
          v82 = (v83 + 2) >> 2;
        if (v84 > v81)
          LOWORD(v81) = v82;
        result[a3] = v81;
        v85 = v64 - v57;
        v86 = v57 + v64;
        v87 = (v83 + 2 * v64 + 2 * v65 + 4) >> 3;
        if (v87 >= v86)
          v88 = v86;
        else
          v88 = v87;
        if (v87 <= v85)
          v89 = v85;
        else
          v89 = v88;
        result[v9] = v89;
        result = (_WORD *)((char *)result + v58);
        --v59;
      }
      while (v59);
    }
  }
  return result;
}

_QWORD *sub_1C9782838(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C978F4DC;
    v3 = sub_1C978EDC4;
  }
  else
  {
    v3 = sub_1C978EDC4;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C978F4DC;
    }
    else
    {
      v3 = sub_1C978EAB0;
      v2 = sub_1C978F1A8;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C978F8B4;
  result[5] = 0;
  result[6] = sub_1C978E36C;
  result[7] = sub_1C978E36C;
  result[8] = sub_1C9784130;
  return result;
}

_QWORD *sub_1C97828BC(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C978DE00;
    v3 = sub_1C978D70C;
  }
  else
  {
    v3 = sub_1C978D70C;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C978DE00;
    }
    else
    {
      v3 = sub_1C978D3F8;
      v2 = sub_1C978DACC;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C978E1A0;
  result[5] = 0;
  result[6] = sub_1C978E36C;
  result[7] = sub_1C978E36C;
  result[8] = sub_1C9784130;
  return result;
}

_QWORD *sub_1C9782940(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C978AE2C;
    v3 = sub_1C978A3DC;
  }
  else
  {
    v3 = sub_1C978A3DC;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C978AE2C;
    }
    else
    {
      v3 = sub_1C9789F18;
      v2 = sub_1C978A994;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C978B34C;
  result[5] = 0;
  result[6] = sub_1C978B660;
  result[7] = sub_1C978B660;
  result[8] = sub_1C9784130;
  return result;
}

_QWORD *sub_1C97829C4(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C9789664;
    v3 = sub_1C9788C44;
  }
  else
  {
    v3 = sub_1C9788C44;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C9789664;
    }
    else
    {
      v3 = sub_1C9788794;
      v2 = sub_1C9789210;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C9789B7C;
  result[5] = 0;
  result[6] = sub_1C9787EE4;
  result[7] = sub_1C9787EE4;
  result[8] = sub_1C9784130;
  return result;
}

_QWORD *sub_1C9782A48(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C9787838;
    v3 = sub_1C9786E40;
  }
  else
  {
    v3 = sub_1C9786E40;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C9787838;
    }
    else
    {
      v3 = sub_1C9786990;
      v2 = sub_1C97873E4;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C9787D18;
  result[5] = 0;
  result[6] = sub_1C9787EE4;
  result[7] = sub_1C9787EE4;
  result[8] = sub_1C9784130;
  return result;
}

_QWORD *sub_1C9782ACC(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C9786060;
    v3 = sub_1C9785634;
  }
  else
  {
    v3 = sub_1C9785634;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C9786060;
    }
    else
    {
      v3 = sub_1C978517C;
      v2 = sub_1C9785C18;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C9786578;
  result[5] = 0;
  result[6] = sub_1C978486C;
  result[7] = sub_1C978486C;
  result[8] = sub_1C9784130;
  return result;
}

_QWORD *sub_1C9782B50(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C9783A88;
    v3 = sub_1C9783088;
  }
  else
  {
    v3 = sub_1C9783088;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C9783A88;
    }
    else
    {
      v3 = sub_1C9782BD4;
      v2 = sub_1C9783640;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C9783F64;
  result[5] = 0;
  result[6] = sub_1C978486C;
  result[7] = sub_1C978486C;
  result[8] = sub_1C9784130;
  return result;
}

uint64_t sub_1C9782BD4(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t i;
  int v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _BOOL8 v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t *v82;
  int v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  int v98;
  int v99;
  int *v100;
  int v101;
  uint64_t v102;
  uint64_t *vars0;
  uint64_t vars8;
  uint64_t v105;
  signed int v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v49 = a3;
  v50 = result;
  v51 = *(_QWORD *)(a2 + 8);
  v101 = *(_DWORD *)(v51 + 520);
  v52 = *(_QWORD *)(v51 + 416);
  v53 = *(_QWORD *)(v51 + 424);
  v54 = *a3;
  v102 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    v107 = (v101 - 1) & 0xFFFFFFC0;
    vars0 = &a33;
    vars8 = v53;
    v108 = 16 * v52;
    v105 = 16 * v53;
    v100 = v49;
    do
    {
      v56 = *(_BYTE *)(v102 + 531);
      v57 = *(_QWORD *)(v102 + 400) + ((*(_QWORD *)(v102 + 416) * v55) << v56);
      v58 = *(_QWORD *)(v102 + 408) + ((*(_QWORD *)(v102 + 424) * v55) << v56);
      v59 = v54 - v55;
      if (v59 >= 64)
        v60 = 64;
      else
        v60 = v59;
      v61 = (int)v60 >> 3;
      v111 = ((int)v60 >> 3);
      v62 = 0;
      if (v107 >= 1)
      {
        do
        {
          v112 = v58;
          v109 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          v63 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v57 + i, v52, (char *)&STACK[0x7C0] + v63, (char *)&STACK[0x7C0] + i - 784, v60);
            v63 += 8;
          }
          v65 = *(_DWORD *)(v50 + 120);
          if (v61 > (v65 == 0))
          {
            v66 = v65 == 0;
            v67 = v111 - v66;
            v68 = &a33 + 2 * v66;
            v69 = &STACK[0x800] + v66;
            v70 = v57 + v108 * v66;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v70, v52, v69, v68, 64);
              v68 += 2;
              ++v69;
              v70 += v108;
              --v67;
            }
            while (v67);
          }
          v71 = 0;
          v53 = vars8;
          do
          {
            v72 = v71 + 32;
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v50 + 88))(v71 + 32 + v112, vars8, (char *)&a49 + v71, v60);
            v71 = v72;
          }
          while (v72 != 256);
          v73 = *(_DWORD *)(v50 + 120);
          if ((int)v111 > (v73 == 0))
          {
            v74 = v73 == 0;
            v75 = v111 - v74;
            v76 = &STACK[0x6C0] + 4 * v74;
            v77 = v112 + v105 * v74;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v77, vars8, v76, 64);
              v76 += 4;
              v77 += v105;
              --v75;
            }
            while (v75);
          }
          v57 += 128;
          v61 = (int)v60 >> 3;
          v58 = v112 + 256;
          v62 = v109 + 64;
        }
        while (v109 + 64 < v107);
        v55 = *(_DWORD *)(v50 + 120);
      }
      v78 = v101 - v62;
      if (v101 != v62)
      {
        v113 = v58;
        result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        v99 = (v78 >> 3) - 1;
        v110 = v78;
        if (v78 >= 16)
        {
          v79 = v57 + 16;
          if (v99 <= 1)
            v80 = 1;
          else
            v80 = v99;
          v81 = &a17;
          v82 = &STACK[0x7C0];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v79, v52, v82, v81, v60);
            v81 += 16;
            ++v82;
            v79 += 16;
            --v80;
          }
          while (v80);
        }
        v83 = *(_DWORD *)(v50 + 120);
        v84 = v110;
        if ((int)v111 > (v83 == 0))
        {
          v85 = v83 == 0;
          v86 = v111 - v85;
          v87 = &a33 + 2 * v85;
          v88 = &STACK[0x800] + v85;
          v89 = v57 + v108 * v85;
          do
          {
            v90 = v84;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v89, v52, v88, v87, v84);
            v84 = v90;
            v87 += 2;
            ++v88;
            v89 += v108;
            --v86;
          }
          while (v86);
        }
        v91 = &a49;
        if ((int)v84 >= 16)
        {
          v92 = v113 + 32;
          if (v99 <= 1)
            v93 = 1;
          else
            v93 = v99;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v92, v53, v91, v60);
            v91 += 4;
            v92 += 32;
            --v93;
          }
          while (v93);
        }
        v55 = *(_DWORD *)(v50 + 120);
        if ((int)v111 > (v55 == 0))
        {
          v94 = v55 == 0;
          v95 = v111 - v94;
          v96 = &STACK[0x6C0] + 4 * v94;
          v97 = v113 + v105 * v94;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, _QWORD))(v50 + 96))(v97, v53, v96, v110);
            v96 += 4;
            v97 += v105;
            --v95;
          }
          while (v95);
          v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v60;
      *(_DWORD *)(v50 + 120) = v55;
      v49 = v100;
      v54 = *v100;
    }
    while (v55 < *v100);
  }
  v98 = *(_DWORD *)(v102 + 524);
  if (v98 >= v55)
    v98 = v55;
  *v49 = v98;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v102 + 524))
  {
    if (v98 <= 4)
      v98 = 4;
    *v49 = v98 - 4;
  }
  return result;
}

_DWORD *sub_1C9783088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  _DWORD *result;
  uint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  int v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _BOOL8 v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t *v87;
  int v88;
  _BOOL8 v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _BOOL8 v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  int v102;
  int v103;
  int *v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t vars0;
  uint64_t vars8;
  signed int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  result = (_DWORD *)MEMORY[0x1E0C80A78](a1);
  v52 = v51;
  v53 = v50;
  v54 = result;
  v55 = *(_QWORD *)(v50 + 8);
  v105 = *(_DWORD *)(v55 + 520);
  v56 = *(_QWORD *)(v55 + 416);
  v57 = *(_QWORD *)(v55 + 424);
  v58 = *v51;
  v106 = v55;
  if (*v51 < *(_DWORD *)(v55 + 524))
  {
    v58 &= 0xFFFFFFF0;
    *v51 = v58;
  }
  v59 = result[30];
  if ((int)v59 < v58)
  {
    v110 = (v105 - 1) & 0xFFFFFFC0;
    vars0 = v57;
    vars8 = 16 * v57;
    v111 = 16 * v56;
    v112 = v50;
    v104 = v52;
    do
    {
      v60 = *(_BYTE *)(v106 + 531);
      v61 = *(_QWORD *)(v106 + 400) + ((*(_QWORD *)(v106 + 416) * (int)v59) << v60);
      v62 = *(_QWORD *)(v106 + 408) + ((*(_QWORD *)(v106 + 424) * (int)v59) << v60);
      v63 = v58 - v59;
      if (v63 >= 64)
        v64 = 64;
      else
        v64 = v63;
      if ((_DWORD)v59)
        v65 = v59 - 8;
      else
        v65 = 0;
      v66 = v64 + 8;
      if (!(_DWORD)v59)
        v66 = v64;
      v113 = v66;
      v114 = v65;
      v117 = ((int)v64 >> 3);
      if (v110 < 1)
      {
        v67 = 0;
      }
      else
      {
        v67 = 0;
        do
        {
          v118 = v62;
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v54 + 6))(v53, v67, v54[30], 64, v64, &a17);
          v115 = v67;
          sub_1C9784F24(&STACK[0x420], v53, v67, v114, 72, v113, 0);
          v68 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v54 + 9))(v61 + i, v56, (char *)&STACK[0x3A0] + v68, (char *)&STACK[0x3A0] + i - 784, v64);
            v68 += 8;
          }
          sub_1C9784FD4(&STACK[0x420]);
          v70 = v54[30];
          if ((int)v117 > (v70 == 0))
          {
            v71 = v70 == 0;
            v72 = v117 - v71;
            v73 = &a33 + 2 * v71;
            v74 = &STACK[0x3E0] + v71;
            v75 = v61 + v111 * v71;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v54 + 10))(v75, v56, v74, v73, 64);
              v73 += 2;
              ++v74;
              v75 += v111;
              --v72;
            }
            while (v72);
          }
          sub_1C9784FD4(&STACK[0x420]);
          sub_1C9784F24(&STACK[0x420], v112, v115, v114, 72, v113, 1u);
          v76 = 0;
          v57 = vars0;
          do
          {
            v77 = v76 + 32;
            (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v54 + 11))(v76 + 32 + v118, vars0, (char *)&a49 + v76, v64);
            v76 = v77;
          }
          while (v77 != 256);
          sub_1C9784FD4(&STACK[0x420]);
          v78 = v54[30];
          if ((int)v117 > (v78 == 0))
          {
            v79 = v78 == 0;
            v80 = v117 - v79;
            v81 = &STACK[0x2A0] + 4 * v79;
            v82 = v118 + vars8 * v79;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v54 + 12))(v82, vars0, v81, 64);
              v81 += 4;
              v82 += vars8;
              --v80;
            }
            while (v80);
          }
          result = sub_1C9784FD4(&STACK[0x420]);
          v61 += 128;
          v62 = v118 + 256;
          v67 = (v115 + 64);
          v53 = v112;
        }
        while ((int)v67 < v110);
        v59 = v54[30];
      }
      v83 = v105 - v67;
      if (v105 == (_DWORD)v67)
      {
        v52 = v104;
      }
      else
      {
        v119 = v62;
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v54 + 6))(v53, v67, v59, (v105 - v67), v64, &a17);
        v116 = v67;
        sub_1C9784F24(&STACK[0x420], v53, v67, v114, v83, v113, 0);
        v103 = (v83 >> 3) - 1;
        v107 = v105 - v67;
        if (v83 >= 16)
        {
          v84 = v61 + 16;
          if (v103 <= 1)
            v85 = 1;
          else
            v85 = v103;
          v86 = &a17;
          v87 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v54 + 9))(v84, v56, v87, v86, v64);
            v86 += 16;
            ++v87;
            v84 += 16;
            --v85;
          }
          while (v85);
        }
        sub_1C9784FD4(&STACK[0x420]);
        v88 = v54[30];
        if ((int)v117 > (v88 == 0))
        {
          v89 = v88 == 0;
          v90 = v117 - v89;
          v91 = &a33 + 2 * v89;
          v92 = &STACK[0x3E0] + v89;
          v93 = v61 + v111 * v89;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))v54 + 10))(v93, v56, v92, v91, v107);
            v91 += 2;
            ++v92;
            v93 += v111;
            --v90;
          }
          while (v90);
        }
        sub_1C9784FD4(&STACK[0x420]);
        sub_1C9784F24(&STACK[0x420], v112, v116, v114, v107, v113, 1u);
        v94 = &a49;
        if (v107 >= 16)
        {
          v95 = v119 + 32;
          if (v103 <= 1)
            v96 = 1;
          else
            v96 = v103;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v54 + 11))(v95, v57, v94, v64);
            v94 += 4;
            v95 += 32;
            --v96;
          }
          while (v96);
        }
        sub_1C9784FD4(&STACK[0x420]);
        v97 = v54[30];
        if ((int)v117 > (v97 == 0))
        {
          v98 = v97 == 0;
          v99 = v117 - v98;
          v100 = &STACK[0x2A0] + 4 * v98;
          v101 = v119 + vars8 * v98;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, _QWORD))v54 + 12))(v101, v57, v100, v107);
            v100 += 4;
            v101 += vars8;
            --v99;
          }
          while (v99);
        }
        result = sub_1C9784FD4(&STACK[0x420]);
        LODWORD(v59) = v54[30];
        v52 = v104;
        v53 = v112;
      }
      v59 = (v59 + v64);
      v54[30] = v59;
      v58 = *v52;
    }
    while ((int)v59 < *v52);
  }
  v102 = *(_DWORD *)(v106 + 524);
  if (v102 >= (int)v59)
    v102 = v59;
  *v52 = v102;
  if (v54[30] < *(_DWORD *)(v106 + 524))
  {
    if (v102 <= 4)
      v102 = 4;
    *v52 = v102 - 4;
  }
  return result;
}

uint64_t sub_1C9783640(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t vars0;
  unint64_t *vars8;
  uint64_t v114;
  unint64_t *v115;
  uint64_t *v116;
  int v117;
  uint64_t v118;
  signed int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;

  v61 = result;
  v62 = *(_QWORD *)(a2 + 8);
  v63 = *(_QWORD *)(a2 + 16);
  v64 = *(_DWORD *)(v62 + 520);
  v65 = *(_DWORD *)(v62 + 524);
  v66 = *(_QWORD *)(v62 + 416);
  v67 = *(_QWORD *)(v62 + 424);
  v127 = v62;
  v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(_BYTE *)(v63 + 2113);
  v69 = a3 << v62;
  v70 = a4 << v62;
  v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    v72 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (v72)
      v74 = v71;
    else
      v74 = 0;
    v75 = v74 + v68;
    if (v69 <= 63)
      v76 = 0;
    else
      v76 = (v69 - 1) & 0xFFFFFFC0;
    v119 = v76;
    v122 = v64 - v76;
    v77 = v75 + v73 - 8;
    if (v75 + v73 < 8)
      v77 = 0;
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0)
      return result;
    v78 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (!v78)
      v71 = 0;
    v75 = v71 + v68;
    if (v69 >= 64)
      v79 = v69 - 64;
    else
      v79 = 0;
    v119 = v79;
    if (v69 >= 64)
      v69 = 64;
    v122 = v69;
    v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4)
      v75 = v80;
  }
  if (v75 >= 1)
  {
    v81 = 0;
    v108 = v73;
    v121 = 16 * v66;
    v82 = 16 * v67;
    v109 = v75;
    v118 = a2;
    v117 = v64;
    v110 = v75;
    do
    {
      v111 = v81;
      if (v75 - (int)v81 >= 64)
        v83 = 64;
      else
        v83 = (v75 - v81);
      if (v122 >= 1)
      {
        v84 = 0;
        v130 = v81 + v108;
        v85 = (_DWORD)v81 + (_DWORD)v108 == 0;
        v128 = ((int)v83 >> 3);
        v129 = (_DWORD)v81 + (_DWORD)v108 == 0;
        v120 = v128 - v85;
        v115 = &STACK[0x8C0] + v85;
        v116 = &a45 + 2 * v85;
        vars8 = &STACK[0x780] + 4 * v85;
        v114 = v121 * v85;
        vars0 = v82 * v85;
        do
        {
          if (v122 - (int)v84 >= 64)
            v86 = 64;
          else
            v86 = (v122 - v84);
          v87 = v84 + v119;
          v126 = v84;
          v131 = v86 + v119 + v84;
          v88 = *(_QWORD *)(v127 + 416);
          v123 = *(_QWORD *)(v127 + 400);
          v89 = *(_BYTE *)(v127 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v130, v86, v83, &a29);
          v124 = v87;
          v90 = (v87 + v88 * v130) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v131 >= v64)
            v91 = v91;
          else
            v91 = (v91 + 1);
          v132 = v91;
          if ((int)v91 >= 2)
          {
            v92 = v91 - 1;
            v93 = v123 + v90 + 16;
            v94 = &a29;
            v95 = &STACK[0x880];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 16;
              --v92;
            }
            while (v92);
          }
          if ((int)v128 > v129)
          {
            v96 = v115;
            v97 = v123 + v114 + v90;
            v98 = v116;
            v99 = v120;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v121;
              --v99;
            }
            while (v99);
          }
          v100 = *(_QWORD *)(v127 + 424) * v130 + 2 * v124;
          v125 = *(_QWORD *)(v127 + 408);
          v101 = v100 << *(_BYTE *)(v127 + 531);
          v82 = 16 * v67;
          if ((int)v132 >= 2)
          {
            v102 = v132 - 1;
            v103 = v125 + v101 + 32;
            v104 = &a61;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v103, v67, v104, v83);
              v104 += 4;
              v103 += 32;
              --v102;
            }
            while (v102);
          }
          if ((int)v128 > v129)
          {
            v105 = vars8;
            v106 = v125 + vars0 + v101;
            v107 = v120;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v106, v67, v105, v86);
              v105 += 4;
              v106 += 16 * v67;
              --v107;
            }
            while (v107);
          }
          v84 = v126 + 64;
          a2 = v118;
          v64 = v117;
        }
        while (v126 + 64 < v122);
      }
      v81 = v111 + 64;
      v75 = v110;
    }
    while (v111 + 64 < v109);
  }
  return result;
}

void (**sub_1C9783A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63))(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *)
{
  uint64_t a65;
  void (**result)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v66;
  int v67;
  int v68;
  void (**v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  BOOL v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  BOOL v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t *vars0;
  unint64_t *vars8;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  signed int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;

  result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))MEMORY[0x1E0C80A78](a1);
  v69 = result;
  v70 = *(_QWORD *)(v66 + 8);
  v71 = *(_QWORD *)(v66 + 16);
  v72 = *(_DWORD *)(v70 + 520);
  v73 = *(_DWORD *)(v70 + 524);
  v74 = *(_QWORD *)(v70 + 416);
  v75 = *(_QWORD *)(v70 + 424);
  v138 = v70;
  v139 = v66;
  v76 = *(unsigned __int8 *)(v71 + 2117);
  LOBYTE(v70) = *(_BYTE *)(v71 + 2113);
  v77 = v67 << v70;
  v78 = v68 << v70;
  v79 = v78 - 16;
  v128 = v72;
  if (*(_DWORD *)(v71 + 2120) - 1 == v67)
  {
    v80 = v78 < 16;
    if (v78 >= 16)
      v81 = v78 - 16;
    else
      v81 = 0;
    if (v80)
      v82 = v79;
    else
      v82 = 0;
    v83 = v82 + v76;
    if (v77 <= 63)
      v84 = 0;
    else
      v84 = (v77 - 1) & 0xFFFFFFC0;
    v129 = v84;
    v132 = v72 - v84;
    v85 = v83 + v81 - 8;
    if (v83 + v81 < 8)
      v85 = 0;
    *((_DWORD *)result + 30) = v85;
    if (*(_DWORD *)(*(_QWORD *)(v66 + 16) + 2124) - 1 == v68)
    {
      v83 = v73 - v81;
      *((_DWORD *)result + 30) = v73;
    }
  }
  else
  {
    if (!v67 || (v77 & 0x3F) != 0)
      return result;
    v86 = v78 < 16;
    if (v78 >= 16)
      v81 = v78 - 16;
    else
      v81 = 0;
    if (!v86)
      v79 = 0;
    v83 = v79 + v76;
    if (v77 >= 64)
      v87 = v77 - 64;
    else
      v87 = 0;
    v129 = v87;
    if (v77 >= 64)
      v77 = 64;
    v132 = v77;
    v88 = v73 - v81;
    if (*(_DWORD *)(v71 + 2124) - 1 == v68)
      v83 = v88;
  }
  if (v83 >= 1)
  {
    v89 = 0;
    vars8 = &STACK[0x420];
    v120 = v81;
    vars0 = &a65;
    v131 = 16 * v74;
    v90 = 16 * v75;
    v119 = v83;
    v121 = v83;
    do
    {
      if (v83 - (int)v89 >= 64)
        v91 = 64;
      else
        v91 = (v83 - v89);
      v122 = v89;
      v92 = v89 + v120 - 8;
      v144 = v89 + v120;
      if (!((_DWORD)v89 + (_DWORD)v120))
        v92 = 0;
      v143 = v92;
      v93 = v91 + 8;
      if (!((_DWORD)v89 + (_DWORD)v120))
        v93 = v91;
      v142 = v93;
      if (v132 >= 1)
      {
        v94 = 0;
        v95 = (_DWORD)v144 == 0;
        v140 = ((int)v91 >> 3);
        v141 = v144 == 0;
        v130 = v140 - v95;
        v126 = v90 * v95;
        v127 = v131 * v95;
        v125 = &STACK[0x320] + 4 * v95;
        do
        {
          if (v132 - (int)v94 >= 64)
            v96 = 64;
          else
            v96 = (v132 - v94);
          v97 = v94 + v129;
          v137 = v94;
          v145 = v96 + v129 + v94;
          v98 = *(_QWORD *)(v138 + 416);
          v133 = *(_QWORD *)(v138 + 400);
          v99 = *(_BYTE *)(v138 + 531);
          v69[6](v139, v97, v144, v96, v91, &a33);
          if (v145 >= v128)
            v100 = v96;
          else
            v100 = v96 + 8;
          v101 = (v97 + v98 * v144) << v99;
          v102 = (int)v96 >> 3;
          if (v145 >= v128)
            v103 = v102;
          else
            v103 = v102 + 1;
          v136 = v97;
          v135 = v100;
          sub_1C9784F24(&STACK[0x4A0], v139, v97, v143, v100, v142, 0);
          v146 = v103;
          if ((int)v103 >= 2)
          {
            v104 = v103 - 1;
            v105 = v133 + v101 + 16;
            v106 = &a33;
            v107 = &STACK[0x420];
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v69[9])(v105, v74, v107, v106, v91);
              v106 += 16;
              ++v107;
              v105 += 16;
              --v104;
            }
            while (v104);
          }
          sub_1C9784FD4(&STACK[0x4A0]);
          if ((int)v140 > v141)
          {
            v108 = &STACK[0x460] + ((_DWORD)v144 == 0);
            v109 = v133 + v127 + v101;
            v110 = &a49 + 2 * ((_DWORD)v144 == 0);
            v111 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v69[10])(v109, v74, v108, v110, v96);
              v110 += 2;
              ++v108;
              v109 += v131;
              --v111;
            }
            while (v111);
          }
          sub_1C9784FD4(&STACK[0x4A0]);
          v134 = *(_QWORD *)(v138 + 408);
          v112 = (*(_QWORD *)(v138 + 424) * v144 + 2 * v136) << *(_BYTE *)(v138 + 531);
          sub_1C9784F24(&STACK[0x4A0], v139, v136, v143, v135, v142, 1u);
          v90 = 16 * v75;
          if ((int)v146 >= 2)
          {
            v113 = v146 - 1;
            v114 = v134 + v112 + 32;
            v115 = &a65;
            do
            {
              ((void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))v69[11])(v114, v75, v115, v91);
              v115 += 4;
              v114 += 32;
              --v113;
            }
            while (v113);
          }
          sub_1C9784FD4(&STACK[0x4A0]);
          if ((int)v140 > v141)
          {
            v116 = v125;
            v117 = v134 + v126 + v112;
            v118 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t))v69[12])(v117, v75, v116, v96);
              v116 += 4;
              v117 += 16 * v75;
              --v118;
            }
            while (v118);
          }
          result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1C9784FD4(&STACK[0x4A0]);
          v94 = v137 + 64;
        }
        while (v137 + 64 < v132);
      }
      v89 = v122 + 64;
      v83 = v121;
    }
    while (v122 + 64 < v119);
  }
  return result;
}

uint64_t sub_1C9783F64(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD v30[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7)
    v12 = (v7 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v8)
    v13 = (v8 - v11);
  else
    v13 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  v15 = *(_QWORD *)(v6 + 416);
  v28 = (v15 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v29 = *(_QWORD *)(v6 + 400);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v30[10 * ((_DWORD)v10 == 0)];
    v19 = &v30[5 * ((_DWORD)v10 == 0) + 296];
    v20 = v29 + v28 + 16 * ((_DWORD)v10 == 0) - 16 * v15;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v30[10 * v22 + 80];
    v26 = &v30[5 * v22 + 336];
    v27 = v28 + 16 * v15 * v22 + v29 - 16;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

void sub_1C9784130(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  char *v62;
  int v63;
  unsigned __int8 v64;
  int v65;
  unsigned __int8 v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  char *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  int v90;
  unsigned __int8 v91;
  int v92;
  unsigned __int8 v93;
  char *v94;
  _BOOL4 v95;
  int v96;
  _BOOL4 v97;
  char v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  _OWORD v106[9];
  _OWORD v107[9];
  _OWORD v108[4];
  uint64_t v109;
  _OWORD v110[4];
  uint64_t v111;
  _DWORD v112[2];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 8);
  v98 = *(_BYTE *)(a1 + 661);
  v13 = v98 + 2;
  v14 = *(char *)(a1 + 660);
  bzero(a6, 0x2F0uLL);
  v15 = *(_QWORD *)(v12 + 768);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(char *)(v16 + 14);
  LODWORD(v16) = *(char *)(v16 + 15);
  v112[0] = v17;
  v112[1] = v16;
  v111 = 0;
  memset(v110, 0, sizeof(v110));
  v109 = 0;
  memset(v108, 0, sizeof(v108));
  memset(v107, 0, sizeof(v107));
  memset(&v106[6], 0, 48);
  if (a2)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = 0;
  v105 = v18;
  if (a3)
    v19 = 0xFFFFFFFFLL;
  else
    v19 = 0;
  v102 = a3;
  v103 = a2;
  v96 = a5;
  v97 = a4 + a2 < *(_DWORD *)(v12 + 520);
  v95 = a5 + a3 < *(_DWORD *)(v12 + 524);
  v20 = (a5 >> 3);
  v100 = a4;
  v21 = (a4 >> 3);
  memset(v106, 0, 96);
  v104 = v19;
  if ((int)v20 > (int)v19)
  {
    v22 = a2 == 0;
    v101 = (uint64_t)a2 >> 3;
    v23 = v19 << 63 >> 63;
    do
    {
      v24 = v23 + 1;
      if ((int)v21 > v22)
      {
        v25 = *(_QWORD *)(v12 + 800) + 2 * (v101 + *(_QWORD *)(v12 + 768) * ((uint64_t)(v102 + 8 * (int)v23) >> 3));
        v26 = v22;
        do
        {
          v27 = (*(__int16 *)(v25 + 2 * v26) >> 9) + (*(__int16 *)(v25 + 2 * v26 - 2) >> 9);
          *((_BYTE *)v110 + 9 * v26 + v24) = v98 - 2 + ((v27 + 1) >> 1);
          v28 = v14 + ((v27 + 1) >> 1);
          if (v28 >= 51)
            v28 = 51;
          if (v28 <= 15)
            v28 = 15;
          a6[10 * v26 + 592 + v24] = byte_1C9860FB3[v28 - 15];
          if ((v26 & 1) == 0)
          {
            v29 = 0;
            v30 = 1;
            do
            {
              v31 = v30;
              v32 = v27 + 2 * v112[v29];
              v33 = (v32 + 1) >> 1;
              if (v32 >= 59)
              {
                if ((v32 + 1) < 0x74)
                  LOBYTE(v33) = byte_1C9861020[v33 - 30];
                else
                  LOBYTE(v33) = v33 - 6;
              }
              v30 = 0;
              *((_BYTE *)v107 + 72 * v29 + 9 * (v26 >> 1) + v24) = v33 + v13;
              v29 = 1;
            }
            while ((v31 & 1) != 0);
          }
          ++v26;
        }
        while (v26 != v21);
      }
      v23 = v24;
    }
    while (v24 != v20);
  }
  v99 = v102 == 0;
  if ((int)v20 > v99)
  {
    v34 = v102 == 0;
    do
    {
      if ((int)v21 > (int)v105)
      {
        v35 = *(_QWORD *)(v12 + 800)
            + 2 * (((uint64_t)v103 >> 3) + *(_QWORD *)(v12 + 768) * ((uint64_t)(v102 + 8 * (int)v34) >> 3));
        v36 = v105 << 63 >> 63;
        do
        {
          v37 = (*(__int16 *)(v35 + 2 * v36) >> 9) + (*(__int16 *)(v35 + 2 * (v36 - v15)) >> 9);
          ++v36;
          *((_BYTE *)v108 + 9 * v34 + v36) = v98 - 2 + ((v37 + 1) >> 1);
          v38 = v14 + ((v37 + 1) >> 1);
          if (v38 >= 51)
            v38 = 51;
          if (v38 <= 15)
            v38 = 15;
          a6[10 * v34 + 672 + v36] = byte_1C9860FB3[v38 - 15];
          if ((v34 & 1) == 0)
          {
            v39 = 0;
            v40 = 1;
            do
            {
              v41 = v40;
              v42 = v37 + 2 * v112[v39];
              v43 = (v42 + 1) >> 1;
              if (v42 >= 59)
              {
                if ((v42 + 1) < 0x74)
                  LOBYTE(v43) = byte_1C9861020[v43 - 30];
                else
                  LOBYTE(v43) = v43 - 6;
              }
              v40 = 0;
              *((_BYTE *)v106 + 72 * v39 + 9 * (v34 >> 1) + v36) = v43 + v13;
              v39 = 1;
            }
            while ((v41 & 1) != 0);
          }
        }
        while (v36 != (uint64_t)v100 >> 3);
      }
      ++v34;
    }
    while (v34 != v20);
  }
  if ((int)v21 > (v103 == 0))
  {
    v44 = (v96 >> 2) - v95;
    v45 = v103 == 0;
    v46 = &a6[20 * v45];
    v47 = ((uint64_t)v102 >> 2) - (v104 & 1);
    do
    {
      v48 = *(_QWORD *)(v12 + 936) * ((uint64_t)(v103 + 8 * (int)v45) >> 3);
      v49 = *(_QWORD *)(v12 + 968);
      if (v44 > v104)
      {
        v50 = (unsigned __int8 *)(v49 + v47 + v48);
        v51 = 2 - (v104 & 1);
        v52 = (v104 & 1) + (uint64_t)v44;
        do
        {
          v54 = *v50++;
          v53 = v54;
          if (v54)
          {
            v55 = *((char *)v110 + 9 * v45 + ((int)v51 >> 1)) + 2 * v53;
            if (v55 >= 53)
              v55 = 53;
            if (v55 <= 17)
              v55 = 17;
            v46[v51] = byte_1C9860FE4[v55 - 17];
          }
          ++v51;
          --v52;
        }
        while (v52);
      }
      if ((v45 & 1) == 0 && v44 > v104)
      {
        v56 = v45 >> 1;
        v57 = (unsigned __int8 *)(v49 + v47 + v48);
        v58 = v104 + 2;
        v59 = 2 * v104 + 3;
        v60 = (v104 & 1) + (uint64_t)v44;
        do
        {
          v61 = *v57++;
          if (v61 >= 2)
          {
            v62 = (char *)v107 + 9 * v56 + (v58 >> 1);
            v63 = *v62;
            if (v63 >= 53)
              v63 = 53;
            if (v63 <= 17)
              v63 = 17;
            v64 = byte_1C9860FE4[v63 - 17];
            v65 = v62[72];
            if (v65 >= 53)
              v65 = 53;
            if (v65 <= 17)
              v65 = 17;
            v66 = byte_1C9860FE4[v65 - 17];
            v67 = &a6[34 * v56 + 320];
            v67[v59 - 1] = v64;
            v67[v59] = v66;
          }
          v59 += 2;
          ++v58;
          --v60;
        }
        while (v60);
      }
      ++v45;
      v46 += 20;
    }
    while (v45 != v21);
  }
  if ((int)v20 > v99)
  {
    v68 = (v100 >> 2) - v97;
    v69 = v102 == 0;
    v70 = v105 & 1;
    v71 = v70 + v68;
    v72 = &a6[20 * v69 - v70 + 162];
    v73 = ((uint64_t)v103 >> 2) - v70;
    do
    {
      v74 = *(_QWORD *)(v12 + 928) * ((uint64_t)(v102 + 8 * (int)v69) >> 3);
      v75 = *(_QWORD *)(v12 + 944);
      if (v68 > (int)v105)
      {
        v76 = (unsigned __int8 *)(v75 + v73 + v74);
        v77 = v105 + 2;
        v78 = v72;
        v79 = v71;
        do
        {
          v81 = *v76++;
          v80 = v81;
          if (v81)
          {
            v82 = *((char *)v108 + 9 * v69 + (v77 >> 1)) + 2 * v80;
            if (v82 >= 53)
              v82 = 53;
            if (v82 <= 17)
              v82 = 17;
            *v78 = byte_1C9860FE4[v82 - 17];
          }
          ++v78;
          ++v77;
          --v79;
        }
        while (v79);
      }
      if ((v69 & 1) == 0 && v68 > (int)v105)
      {
        v83 = v69 >> 1;
        v84 = (unsigned __int8 *)(v75 + v73 + v74);
        v85 = v105 + 2;
        v86 = 2 * v105 + 3;
        v87 = v71;
        do
        {
          v88 = *v84++;
          if (v88 >= 2)
          {
            v89 = (char *)v106 + 9 * v83 + (v85 >> 1);
            v90 = *v89;
            if (v90 >= 53)
              v90 = 53;
            if (v90 <= 17)
              v90 = 17;
            v91 = byte_1C9860FE4[v90 - 17];
            v92 = v89[72];
            if (v92 >= 53)
              v92 = 53;
            if (v92 <= 17)
              v92 = 17;
            v93 = byte_1C9860FE4[v92 - 17];
            v94 = &a6[34 * v83 + 456];
            v94[v86 - 1] = v91;
            v94[v86] = v93;
          }
          v86 += 2;
          ++v85;
          --v87;
        }
        while (v87);
      }
      ++v69;
      v72 += 20;
    }
    while (v69 != v20);
  }
}

void sub_1C978486C(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  char v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  char *v58;
  int v59;
  unsigned __int8 v60;
  int v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  char *v72;
  int v73;
  unsigned __int8 v74;
  int v75;
  unsigned __int8 v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v86;
  int v87;
  _OWORD *v88;
  _OWORD *v89;
  uint64_t v90;
  char *v91;
  int v92;
  int v93;
  int v94;
  _OWORD v95[8];
  _OWORD v96[4];
  _OWORD v97[4];
  _OWORD v98[4];
  _OWORD v99[4];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 8);
  bzero(a6, 0x380uLL);
  v86 = v9;
  v77 = v9[96];
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  memset(v97, 0, sizeof(v97));
  memset(v96, 0, sizeof(v96));
  v84 = (a5 >> 3);
  v78 = a5;
  v79 = a4 >> 3;
  v93 = 2 * v10;
  v94 = 2 * v11;
  memset(v95, 0, sizeof(v95));
  v87 = a4;
  if (a5 >= 8)
  {
    v12 = 0;
    if (v79 <= 1)
      v13 = 1;
    else
      v13 = v79;
    v81 = v13;
    if ((int)v84 <= 1)
      v14 = 1;
    else
      v14 = v84;
    v83 = v14;
    v89 = v98;
    v91 = a6 + 768;
    v88 = v99;
    do
    {
      if (a4 >= 8)
      {
        v15 = a3 + 8 * v12;
        v16 = v81;
        v17 = (__int16 *)(v86[97] + 2 * (((uint64_t)a2 >> 3) + v86[96] * ((uint64_t)v15 >> 3)) + 2);
        v18 = v88;
        v19 = v89;
        v20 = v91;
        v21 = a2 + 8;
        do
        {
          v22 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (v21 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v15 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v23 = (*(v17 - 1) >> 9) + (*v17 >> 9) + 1;
          *v18 = *(_BYTE *)(v22 + 661) + (v23 >> 1) - 2;
          v18 += 8;
          v24 = *(char *)(v22 + 660) + (v23 >> 1);
          if (v24 >= 51)
            v24 = 51;
          if (v24 <= 15)
            v24 = 15;
          *v20 = byte_1C9860FB3[v24 - 15];
          v20 += 8;
          v25 = *(_BYTE *)(v22 + 661) + 2;
          v26 = (v23 + v94) >> 1;
          if (v26 >= 51)
            LOBYTE(v26) = 51;
          *(v19 - 64) = v25 + v26;
          v27 = (v23 + v93) >> 1;
          if (v27 >= 51)
            LOBYTE(v27) = 51;
          *v19 = v25 + v27;
          v19 += 8;
          v21 += 8;
          ++v17;
          --v16;
        }
        while (v16);
      }
      v89 = (_OWORD *)((char *)v89 + 1);
      ++v91;
      v88 = (_OWORD *)((char *)v88 + 1);
      ++v12;
      a4 = v87;
    }
    while (v12 != v83);
  }
  v29 = v84;
  v28 = a3;
  v30 = a3 == 0;
  if ((int)v84 > v30)
  {
    if (v79 <= 1)
      v31 = 1;
    else
      v31 = v79;
    v32 = (unint64_t)v95 | (8 * (a3 == 0));
    v33 = &a6[8 * (a3 == 0) + 832];
    v90 = a3 == 0;
    v34 = (unint64_t)v96 & 0xFFFFFFFFFFFFFFF7 | (8 * v90);
    do
    {
      if (a4 >= 8)
      {
        v35 = 0;
        v92 = a3 + 8 * v90;
        v36 = ((uint64_t)a2 >> 3) + v86[96] * ((uint64_t)v92 >> 3);
        v37 = v86[97];
        v38 = v37 + 2 * v36;
        v39 = v37 - 2 * v77 + 2 * v36;
        v40 = a2;
        do
        {
          v41 = v34;
          v42 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (v40 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v92 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v34 = v41;
          v43 = (*(__int16 *)(v39 + 2 * v35) >> 9) + (*(__int16 *)(v38 + 2 * v35) >> 9) + 1;
          *(_BYTE *)(v41 + v35) = *(_BYTE *)(v42 + 661) + (v43 >> 1) - 2;
          v44 = *(char *)(v42 + 660) + (v43 >> 1);
          if (v44 >= 51)
            v44 = 51;
          if (v44 <= 15)
            v44 = 15;
          v33[v35] = byte_1C9860FB3[v44 - 15];
          v45 = *(_BYTE *)(v42 + 661) + 2;
          v46 = (v43 + v94) >> 1;
          if (v46 >= 51)
            LOBYTE(v46) = 51;
          *(_BYTE *)(v32 + v35) = v45 + v46;
          v47 = (v43 + v93) >> 1;
          if (v47 >= 51)
            LOBYTE(v47) = 51;
          *(_BYTE *)(v32 + v35++ + 64) = v45 + v47;
          v40 += 8;
        }
        while (v31 != v35);
      }
      v32 += 8;
      v33 += 8;
      v34 += 8;
      v29 = v84;
      ++v90;
      a4 = v87;
    }
    while (v90 != v84);
    v28 = a3;
    v30 = a3 == 0;
  }
  if (a4 >= 8)
  {
    v48 = 0;
    LODWORD(v49) = v78 >> 2;
    if (v78 >> 2 <= 1)
      v49 = 1;
    else
      v49 = v49;
    if (v79 <= 1)
      v50 = 1;
    else
      v50 = v79;
    v51 = a6;
    v52 = (unsigned __int8 *)(a6 + 257);
    do
    {
      if (v78 >= 4)
      {
        v53 = 0;
        v54 = v86[121] + ((uint64_t)v28 >> 2) + v86[117] * ((uint64_t)(a2 + 8 + 8 * (int)v48) >> 3);
        do
        {
          if (*(_BYTE *)(v54 + v53))
          {
            v55 = *((char *)v99 + 8 * v48 + (v53 >> 1)) + 2 * *(unsigned __int8 *)(v54 + v53);
            if (v55 >= 53)
              v55 = 53;
            if (v55 <= 17)
              v55 = 17;
            v51[v53] = byte_1C9860FE4[v55 - 17];
          }
          ++v53;
        }
        while (v49 != v53);
        v56 = 0;
        v57 = v52;
        do
        {
          if (*(unsigned __int8 *)(v54 + v56) >= 2u)
          {
            v58 = (char *)v97 + 8 * v48 + (v56 >> 1);
            v59 = *v58;
            if (v59 >= 53)
              v59 = 53;
            if (v59 <= 17)
              v59 = 17;
            v60 = byte_1C9860FE4[v59 - 17];
            v61 = v58[64];
            if (v61 >= 53)
              v61 = 53;
            if (v61 <= 17)
              v61 = 17;
            v62 = byte_1C9860FE4[v61 - 17];
            *(v57 - 1) = v60;
            *v57 = v62;
          }
          ++v56;
          v57 += 2;
        }
        while (v49 != v56);
      }
      ++v48;
      v51 += 16;
      v52 += 32;
    }
    while (v48 != v50);
  }
  if ((int)v29 > v30)
  {
    v63 = v28 == 0;
    LODWORD(v64) = a4 >> 2;
    if (a4 >> 2 <= 1)
      v64 = 1;
    else
      v64 = v64;
    v65 = &a6[16 * (v28 == 0) + 128];
    v66 = &a6[32 * v63 + 513];
    do
    {
      if (a4 >= 4)
      {
        v67 = 0;
        v68 = v86[118] + ((uint64_t)a2 >> 2) + v86[116] * ((uint64_t)(v28 + 8 * (int)v63) >> 3);
        do
        {
          if (*(_BYTE *)(v68 + v67))
          {
            v69 = *((char *)v96 + 8 * v63 + (v67 >> 1)) + 2 * *(unsigned __int8 *)(v68 + v67);
            if (v69 >= 53)
              v69 = 53;
            if (v69 <= 17)
              v69 = 17;
            v65[v67] = byte_1C9860FE4[v69 - 17];
          }
          ++v67;
        }
        while (v64 != v67);
        v70 = 0;
        v71 = (unsigned __int8 *)v66;
        do
        {
          if (*(unsigned __int8 *)(v68 + v70) >= 2u)
          {
            v72 = (char *)v95 + 8 * v63 + (v70 >> 1);
            v73 = *v72;
            if (v73 >= 53)
              v73 = 53;
            if (v73 <= 17)
              v73 = 17;
            v74 = byte_1C9860FE4[v73 - 17];
            v75 = v72[64];
            if (v75 >= 53)
              v75 = 53;
            if (v75 <= 17)
              v75 = 17;
            v76 = byte_1C9860FE4[v75 - 17];
            *(v71 - 1) = v74;
            *v71 = v76;
          }
          ++v70;
          v71 += 2;
        }
        while (v64 != v70);
      }
      ++v63;
      v65 += 16;
      v66 += 32;
    }
    while (v63 != v29);
  }
}

_QWORD *sub_1C9784F24(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  __dst[18432] = a2;
  *((_DWORD *)__dst + 36866) = a3;
  *((_DWORD *)__dst + 36867) = a4;
  *((_DWORD *)__dst + 36868) = a5;
  *((_DWORD *)__dst + 36869) = a6;
  *((_DWORD *)__dst + 36870) = a7;
  if (a6 >= 1)
  {
    v7 = (char *)__dst;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 + 8 * a7;
    v10 = *(_QWORD *)(v9 + 416);
    v11 = (char *)(*(_QWORD *)(v9 + 400) + ((v10 * a4 + (a3 << a7)) << *(_BYTE *)(v8 + 531)));
    v12 = 2 * (a5 << (a7 != 0));
    v13 = a6;
    v14 = 2 * v10;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v14;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

_DWORD *sub_1C9784FD4(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  int v24;

  v1 = result + 36864;
  v2 = result[36869];
  v3 = (int)result[36870];
  v21 = result[36870] != 0;
  if (v2 >= 1)
  {
    v4 = result;
    v5 = *(_QWORD *)(*(_QWORD *)v1 + 8);
    v6 = v5 + 8 * v3;
    v7 = *(_QWORD *)(v6 + 416);
    v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 19);
    v24 = 0;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 283);
    v8 = result[36868];
    v20 = 16 * (v8 << v21);
    v9 = 2 * (v8 << v21);
    v10 = *(_QWORD *)(v6 + 400) + ((v7 * (int)result[36867] + (int)(result[36866] << v3)) << *(_BYTE *)(v5 + 531));
    v19 = 16 * v7;
    v11 = 2 * v7;
    do
    {
      if (v8 >= 1)
      {
        for (i = 0; i < v8; i += 8)
        {
          v13 = *(_QWORD *)(*(_QWORD *)v1 + 8);
          v14 = *(_QWORD *)(v13 + 768) * ((uint64_t)(v1[3] + v24) >> 3) + ((v1[2] + i) >> 3);
          v15 = *(_QWORD *)(v13 + 776);
          if (v23 && (*(_WORD *)(v15 + 2 * v14) & 0x100) != 0 || v22 && (*(_WORD *)(v15 + 2 * v14) & 0xC) != 0)
          {
            v16 = 2 * (i << v21);
            v17 = v16;
            v18 = 8;
            do
            {
              result = memcpy((void *)(v10 + v16), (char *)v4 + v17, (16 << v21));
              v17 += v9;
              v16 += v11;
              --v18;
            }
            while (v18);
            v8 = v1[4];
          }
        }
        v2 = v1[5];
      }
      v4 = (_DWORD *)((char *)v4 + v20);
      v10 += v19;
      v24 += 8;
    }
    while (v24 < v2);
  }
  return result;
}

uint64_t sub_1C978517C(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t i;
  int v74;
  _BOOL8 v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t *v83;
  int v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  _BOOL8 v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  int v100;
  int v101;
  int *v102;
  int v103;
  uint64_t v104;
  uint64_t *vars0;
  uint64_t vars8;
  signed int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;

  v49 = a3;
  v50 = result;
  v51 = *(_QWORD *)(a2 + 8);
  v103 = *(_DWORD *)(v51 + 520);
  v52 = *(_QWORD *)(v51 + 416);
  v53 = *(_QWORD *)(v51 + 424);
  v54 = *a3;
  v104 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    v108 = (v103 - 1) & 0xFFFFFFC0;
    vars0 = &a33;
    v109 = 8 * v52;
    v56 = 8 * v53;
    v102 = v49;
    vars8 = 8 * v53;
    do
    {
      v57 = *(_BYTE *)(v104 + 531);
      v58 = *(_QWORD *)(v104 + 400) + ((*(_QWORD *)(v104 + 416) * v55) << v57);
      v112 = *(_QWORD *)(v104 + 408) + ((*(_QWORD *)(v104 + 424) * v55) << v57);
      v59 = v54 - v55;
      if (v59 >= 64)
        v60 = 64;
      else
        v60 = v59;
      v61 = (int)v60 >> 3;
      v113 = ((int)v60 >> 3);
      v62 = 0;
      if (v108 >= 1)
      {
        do
        {
          v63 = &a17;
          v110 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          v64 = 0;
          do
          {
            v65 = v64 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v64 + 8 + v58, v52, (char *)&STACK[0x7C0] + v64, v63, v60);
            v63 += 16;
            v64 = v65;
          }
          while (v65 != 64);
          v66 = *(_DWORD *)(v50 + 120);
          if (v61 > (v66 == 0))
          {
            v67 = v66 == 0;
            v68 = v113 - v67;
            v69 = &a33 + 2 * v67;
            v70 = &STACK[0x800] + v67;
            v71 = v58 + v109 * v67;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v71, v52, v70, v69, 64);
              v69 += 2;
              ++v70;
              v71 += v109;
              --v68;
            }
            while (v68);
          }
          v72 = &a49;
          for (i = 16; i != 144; i += 16)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v112 + i, v53, v72, v60);
            v72 += 4;
          }
          v74 = *(_DWORD *)(v50 + 120);
          v56 = 8 * v53;
          if ((int)v113 > (v74 == 0))
          {
            v75 = v74 == 0;
            v76 = v113 - v75;
            v77 = &STACK[0x6C0] + 4 * v75;
            v78 = v112 + vars8 * v75;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v78, v53, v77, 64);
              v77 += 4;
              v78 += vars8;
              --v76;
            }
            while (v76);
          }
          v58 += 64;
          v112 += 128;
          v62 = v110 + 64;
          v61 = (int)v60 >> 3;
        }
        while (v110 + 64 < v108);
        v55 = *(_DWORD *)(v50 + 120);
      }
      v79 = v103 - v62;
      if (v103 != v62)
      {
        result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        v101 = (v79 >> 3) - 1;
        v111 = v79;
        if (v79 >= 16)
        {
          v80 = v58 + 8;
          if (v101 <= 1)
            v81 = 1;
          else
            v81 = v101;
          v82 = &a17;
          v83 = &STACK[0x7C0];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v80, v52, v83, v82, v60);
            v82 += 16;
            ++v83;
            v80 += 8;
            --v81;
          }
          while (v81);
        }
        v84 = *(_DWORD *)(v50 + 120);
        v85 = v111;
        if ((int)v113 > (v84 == 0))
        {
          v86 = v84 == 0;
          v87 = v113 - v86;
          v88 = &a33 + 2 * v86;
          v89 = &STACK[0x800] + v86;
          v90 = v58 + v109 * v86;
          do
          {
            v91 = v85;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v90, v52, v89, v88, v85);
            v85 = v91;
            v88 += 2;
            ++v89;
            v90 += v109;
            --v87;
          }
          while (v87);
        }
        v92 = v85;
        if ((int)v85 >= 16)
        {
          v93 = v112 + 16;
          if (v101 <= 1)
            v94 = 1;
          else
            v94 = v101;
          v95 = &a49;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v93, v53, v95, v60);
            v95 += 4;
            v93 += 16;
            --v94;
          }
          while (v94);
        }
        v55 = *(_DWORD *)(v50 + 120);
        if ((int)v113 > (v55 == 0))
        {
          v96 = v55 == 0;
          v97 = v113 - v96;
          v98 = &STACK[0x6C0] + 4 * v96;
          v99 = v112 + v56 * v96;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v99, v53, v98, v92);
            v98 += 4;
            v99 += v56;
            --v97;
          }
          while (v97);
          v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v60;
      *(_DWORD *)(v50 + 120) = v55;
      v49 = v102;
      v54 = *v102;
    }
    while (v55 < *v102);
  }
  v100 = *(_DWORD *)(v104 + 524);
  if (v100 >= v55)
    v100 = v55;
  *v49 = v100;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v104 + 524))
  {
    if (v100 <= 4)
      v100 = 4;
    *v49 = v100 - 4;
  }
  return result;
}

_DWORD *sub_1C9785634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  _DWORD *result;
  int *v50;
  int *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t i;
  int v81;
  _BOOL8 v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t *v91;
  int v92;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  _BOOL8 v102;
  uint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  int v106;
  int v107;
  int *v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t vars0;
  uint64_t *vars8;
  signed int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;

  result = (_DWORD *)MEMORY[0x1E0C80A78](a1);
  v51 = v50;
  v52 = result;
  STACK[0x12458] = *MEMORY[0x1E0C80C00];
  v118 = v53;
  v54 = *(_QWORD *)(v53 + 8);
  v109 = *(_DWORD *)(v54 + 520);
  v55 = *(_QWORD *)(v54 + 416);
  v56 = *(_QWORD *)(v54 + 424);
  v57 = *v50;
  v110 = v54;
  if (*v50 < *(_DWORD *)(v54 + 524))
  {
    v57 &= 0xFFFFFFF0;
    *v50 = v57;
  }
  v58 = result[30];
  if ((int)v58 < v57)
  {
    v114 = (v109 - 1) & 0xFFFFFFC0;
    vars8 = &a49;
    v59 = 8 * v56;
    v108 = v51;
    v115 = 8 * v55;
    vars0 = 8 * v56;
    do
    {
      v60 = *(_BYTE *)(v110 + 531);
      v61 = *(_QWORD *)(v110 + 400) + ((*(_QWORD *)(v110 + 416) * (int)v58) << v60);
      v62 = *(_QWORD *)(v110 + 408) + ((*(_QWORD *)(v110 + 424) * (int)v58) << v60);
      v63 = v57 - v58;
      if (v63 >= 64)
        v64 = 64;
      else
        v64 = v63;
      if ((_DWORD)v58)
        v65 = v58 - 8;
      else
        v65 = 0;
      v66 = v64 + 8;
      if (!(_DWORD)v58)
        v66 = v64;
      v119 = v66;
      v120 = v65;
      v67 = (int)v64 >> 3;
      v123 = ((int)v64 >> 3);
      v68 = 0;
      if (v114 >= 1)
      {
        do
        {
          v116 = v62;
          v69 = &a17;
          v70 = v68;
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v52 + 6))(v118, v68, v52[30], 64, v64, &a17);
          v121 = v70;
          sub_1C9786744(&STACK[0x430], v118, v70, v120, 72, v119, 0);
          v71 = 0;
          do
          {
            v72 = v71 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v52 + 9))(v71 + 8 + v61, v55, (char *)&STACK[0x3A0] + v71, v69, v64);
            v69 += 16;
            v71 = v72;
          }
          while (v72 != 64);
          sub_1C97867EC(&STACK[0x430]);
          v73 = v52[30];
          if (v67 > (v73 == 0))
          {
            v74 = v73 == 0;
            v75 = v123 - v74;
            v76 = &a33 + 2 * v74;
            v77 = &STACK[0x3E0] + v74;
            v78 = v61 + v115 * v74;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v78, v55, v77, v76, 64);
              v76 += 2;
              ++v77;
              v78 += v115;
              --v75;
            }
            while (v75);
          }
          sub_1C97867EC(&STACK[0x430]);
          sub_1C9786744(&STACK[0x430], v118, v70, v120, 72, v119, 1u);
          v79 = &a49;
          for (i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v116 + i, v56, v79, v64);
            v79 += 4;
          }
          sub_1C97867EC(&STACK[0x430]);
          v81 = v52[30];
          v59 = 8 * v56;
          if ((int)v123 > (v81 == 0))
          {
            v82 = v81 == 0;
            v83 = v123 - v82;
            v84 = &STACK[0x2A0] + 4 * v82;
            v85 = v116 + vars0 * v82;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v85, v56, v84, 64);
              v84 += 4;
              v85 += vars0;
              --v83;
            }
            while (v83);
          }
          result = sub_1C97867EC(&STACK[0x430]);
          v61 += 64;
          v62 = v116 + 128;
          v68 = (v121 + 64);
          v67 = (int)v64 >> 3;
        }
        while ((int)v68 < v114);
        v58 = v52[30];
      }
      v86 = v109 - v68;
      if (v109 == (_DWORD)v68)
      {
        v51 = v108;
      }
      else
      {
        v117 = v62;
        v87 = v68;
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v52 + 6))(v118, v68, v58, (v109 - v68), v64, &a17);
        v122 = v87;
        sub_1C9786744(&STACK[0x430], v118, v87, v120, v86, v119, 0);
        v107 = (v86 >> 3) - 1;
        v111 = v86;
        if (v86 >= 16)
        {
          v88 = v61 + 8;
          if (v107 <= 1)
            v89 = 1;
          else
            v89 = v107;
          v90 = &a17;
          v91 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v52 + 9))(v88, v55, v91, v90, v64);
            v90 += 16;
            ++v91;
            v88 += 8;
            --v89;
          }
          while (v89);
        }
        sub_1C97867EC(&STACK[0x430]);
        v92 = v52[30];
        if ((int)v123 > (v92 == 0))
        {
          v93 = v92 == 0;
          v94 = v123 - v93;
          v95 = &a33 + 2 * v93;
          v96 = &STACK[0x3E0] + v93;
          v97 = v61 + v115 * v93;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))v52 + 10))(v97, v55, v96, v95, v111);
            v95 += 2;
            ++v96;
            v97 += v115;
            --v94;
          }
          while (v94);
        }
        sub_1C97867EC(&STACK[0x430]);
        sub_1C9786744(&STACK[0x430], v118, v122, v120, v111, v119, 1u);
        if (v111 >= 16)
        {
          v98 = v117 + 16;
          if (v107 <= 1)
            v99 = 1;
          else
            v99 = v107;
          v100 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v98, v56, v100, v64);
            v100 += 4;
            v98 += 16;
            --v99;
          }
          while (v99);
        }
        sub_1C97867EC(&STACK[0x430]);
        v101 = v52[30];
        if ((int)v123 > (v101 == 0))
        {
          v102 = v101 == 0;
          v103 = v123 - v102;
          v104 = &STACK[0x2A0] + 4 * v102;
          v105 = v117 + v59 * v102;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, _QWORD))v52 + 12))(v105, v56, v104, v111);
            v104 += 4;
            v105 += v59;
            --v103;
          }
          while (v103);
        }
        result = sub_1C97867EC(&STACK[0x430]);
        LODWORD(v58) = v52[30];
        v51 = v108;
      }
      v58 = (v58 + v64);
      v52[30] = v58;
      v57 = *v51;
    }
    while ((int)v58 < *v51);
  }
  v106 = *(_DWORD *)(v110 + 524);
  if (v106 >= (int)v58)
    v106 = v58;
  *v51 = v106;
  if (v52[30] < *(_DWORD *)(v110 + 524))
  {
    if (v106 <= 4)
      v106 = 4;
    *v51 = v106 - 4;
  }
  return result;
}

uint64_t sub_1C9785C18(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t vars0;
  unint64_t *vars8;
  uint64_t v114;
  unint64_t *v115;
  uint64_t *v116;
  int v117;
  uint64_t v118;
  signed int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;

  v61 = result;
  v62 = *(_QWORD *)(a2 + 8);
  v63 = *(_QWORD *)(a2 + 16);
  v64 = *(_DWORD *)(v62 + 520);
  v65 = *(_DWORD *)(v62 + 524);
  v66 = *(_QWORD *)(v62 + 416);
  v67 = *(_QWORD *)(v62 + 424);
  v127 = v62;
  v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(_BYTE *)(v63 + 2113);
  v69 = a3 << v62;
  v70 = a4 << v62;
  v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    v72 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (v72)
      v74 = v71;
    else
      v74 = 0;
    v75 = v74 + v68;
    if (v69 <= 63)
      v76 = 0;
    else
      v76 = (v69 - 1) & 0xFFFFFFC0;
    v119 = v76;
    v122 = v64 - v76;
    v77 = v75 + v73 - 8;
    if (v75 + v73 < 8)
      v77 = 0;
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0)
      return result;
    v78 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (!v78)
      v71 = 0;
    v75 = v71 + v68;
    if (v69 >= 64)
      v79 = v69 - 64;
    else
      v79 = 0;
    v119 = v79;
    if (v69 >= 64)
      v69 = 64;
    v122 = v69;
    v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4)
      v75 = v80;
  }
  if (v75 >= 1)
  {
    v81 = 0;
    v108 = v73;
    v121 = 8 * v66;
    v82 = 8 * v67;
    v109 = v75;
    v118 = a2;
    v117 = v64;
    v110 = v75;
    do
    {
      v111 = v81;
      if (v75 - (int)v81 >= 64)
        v83 = 64;
      else
        v83 = (v75 - v81);
      if (v122 >= 1)
      {
        v84 = 0;
        v130 = v81 + v108;
        v85 = (_DWORD)v81 + (_DWORD)v108 == 0;
        v128 = ((int)v83 >> 3);
        v129 = (_DWORD)v81 + (_DWORD)v108 == 0;
        v120 = v128 - v85;
        v115 = &STACK[0x8C0] + v85;
        v116 = &a45 + 2 * v85;
        vars8 = &STACK[0x780] + 4 * v85;
        v114 = v121 * v85;
        vars0 = v82 * v85;
        do
        {
          if (v122 - (int)v84 >= 64)
            v86 = 64;
          else
            v86 = (v122 - v84);
          v87 = v84 + v119;
          v126 = v84;
          v131 = v86 + v119 + v84;
          v88 = *(_QWORD *)(v127 + 416);
          v123 = *(_QWORD *)(v127 + 400);
          v89 = *(_BYTE *)(v127 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v130, v86, v83, &a29);
          v124 = v87;
          v90 = (v87 + v88 * v130) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v131 >= v64)
            v91 = v91;
          else
            v91 = (v91 + 1);
          v132 = v91;
          if ((int)v91 >= 2)
          {
            v92 = v91 - 1;
            v93 = v123 + v90 + 8;
            v94 = &a29;
            v95 = &STACK[0x880];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 8;
              --v92;
            }
            while (v92);
          }
          if ((int)v128 > v129)
          {
            v96 = v115;
            v97 = v123 + v114 + v90;
            v98 = v116;
            v99 = v120;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v121;
              --v99;
            }
            while (v99);
          }
          v100 = *(_QWORD *)(v127 + 424) * v130 + 2 * v124;
          v125 = *(_QWORD *)(v127 + 408);
          v101 = v100 << *(_BYTE *)(v127 + 531);
          v82 = 8 * v67;
          if ((int)v132 >= 2)
          {
            v102 = v132 - 1;
            v103 = v125 + v101 + 16;
            v104 = &a61;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v103, v67, v104, v83);
              v104 += 4;
              v103 += 16;
              --v102;
            }
            while (v102);
          }
          if ((int)v128 > v129)
          {
            v105 = vars8;
            v106 = v125 + vars0 + v101;
            v107 = v120;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v106, v67, v105, v86);
              v105 += 4;
              v106 += 8 * v67;
              --v107;
            }
            while (v107);
          }
          v84 = v126 + 64;
          a2 = v118;
          v64 = v117;
        }
        while (v126 + 64 < v122);
      }
      v81 = v111 + 64;
      v75 = v110;
    }
    while (v111 + 64 < v109);
  }
  return result;
}

void (**sub_1C9786060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63))(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *)
{
  uint64_t a65;
  void (**result)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v66;
  int v67;
  int v68;
  void (**v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  BOOL v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  BOOL v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t *vars0;
  unint64_t *vars8;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  signed int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;

  result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))MEMORY[0x1E0C80A78](a1);
  v69 = result;
  STACK[0x124D8] = *MEMORY[0x1E0C80C00];
  v70 = *(_QWORD *)(v66 + 8);
  v71 = *(_QWORD *)(v66 + 16);
  v72 = *(_DWORD *)(v70 + 520);
  v73 = *(_DWORD *)(v70 + 524);
  v74 = *(_QWORD *)(v70 + 416);
  v75 = *(_QWORD *)(v70 + 424);
  v138 = v70;
  v139 = v66;
  v76 = *(unsigned __int8 *)(v71 + 2117);
  LOBYTE(v70) = *(_BYTE *)(v71 + 2113);
  v77 = v67 << v70;
  v78 = v68 << v70;
  v79 = v78 - 16;
  v128 = v72;
  if (*(_DWORD *)(v71 + 2120) - 1 == v67)
  {
    v80 = v78 < 16;
    if (v78 >= 16)
      v81 = v78 - 16;
    else
      v81 = 0;
    if (v80)
      v82 = v79;
    else
      v82 = 0;
    v83 = v82 + v76;
    if (v77 <= 63)
      v84 = 0;
    else
      v84 = (v77 - 1) & 0xFFFFFFC0;
    v129 = v84;
    v132 = v72 - v84;
    v85 = v83 + v81 - 8;
    if (v83 + v81 < 8)
      v85 = 0;
    *((_DWORD *)result + 30) = v85;
    if (*(_DWORD *)(*(_QWORD *)(v66 + 16) + 2124) - 1 == v68)
    {
      v83 = v73 - v81;
      *((_DWORD *)result + 30) = v73;
    }
  }
  else
  {
    if (!v67 || (v77 & 0x3F) != 0)
      return result;
    v86 = v78 < 16;
    if (v78 >= 16)
      v81 = v78 - 16;
    else
      v81 = 0;
    if (!v86)
      v79 = 0;
    v83 = v79 + v76;
    if (v77 >= 64)
      v87 = v77 - 64;
    else
      v87 = 0;
    v129 = v87;
    if (v77 >= 64)
      v77 = 64;
    v132 = v77;
    v88 = v73 - v81;
    if (*(_DWORD *)(v71 + 2124) - 1 == v68)
      v83 = v88;
  }
  if (v83 >= 1)
  {
    v89 = 0;
    vars8 = &STACK[0x420];
    v120 = v81;
    vars0 = &a65;
    v131 = 8 * v74;
    v90 = 8 * v75;
    v119 = v83;
    v121 = v83;
    do
    {
      if (v83 - (int)v89 >= 64)
        v91 = 64;
      else
        v91 = (v83 - v89);
      v122 = v89;
      v92 = v89 + v120 - 8;
      v144 = v89 + v120;
      if (!((_DWORD)v89 + (_DWORD)v120))
        v92 = 0;
      v143 = v92;
      v93 = v91 + 8;
      if (!((_DWORD)v89 + (_DWORD)v120))
        v93 = v91;
      v142 = v93;
      if (v132 >= 1)
      {
        v94 = 0;
        v95 = (_DWORD)v144 == 0;
        v140 = ((int)v91 >> 3);
        v141 = v144 == 0;
        v130 = v140 - v95;
        v126 = v90 * v95;
        v127 = v131 * v95;
        v125 = &STACK[0x320] + 4 * v95;
        do
        {
          if (v132 - (int)v94 >= 64)
            v96 = 64;
          else
            v96 = (v132 - v94);
          v97 = v94 + v129;
          v137 = v94;
          v145 = v96 + v129 + v94;
          v98 = *(_QWORD *)(v138 + 416);
          v133 = *(_QWORD *)(v138 + 400);
          v99 = *(_BYTE *)(v138 + 531);
          v69[6](v139, v97, v144, v96, v91, &a33);
          if (v145 >= v128)
            v100 = v96;
          else
            v100 = v96 + 8;
          v101 = (v97 + v98 * v144) << v99;
          v102 = (int)v96 >> 3;
          if (v145 >= v128)
            v103 = v102;
          else
            v103 = v102 + 1;
          v136 = v97;
          v135 = v100;
          sub_1C9786744(&STACK[0x4B0], v139, v97, v143, v100, v142, 0);
          v146 = v103;
          if ((int)v103 >= 2)
          {
            v104 = v103 - 1;
            v105 = v133 + v101 + 8;
            v106 = &a33;
            v107 = &STACK[0x420];
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v69[9])(v105, v74, v107, v106, v91);
              v106 += 16;
              ++v107;
              v105 += 8;
              --v104;
            }
            while (v104);
          }
          sub_1C97867EC(&STACK[0x4B0]);
          if ((int)v140 > v141)
          {
            v108 = &STACK[0x460] + ((_DWORD)v144 == 0);
            v109 = v133 + v127 + v101;
            v110 = &a49 + 2 * ((_DWORD)v144 == 0);
            v111 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v69[10])(v109, v74, v108, v110, v96);
              v110 += 2;
              ++v108;
              v109 += v131;
              --v111;
            }
            while (v111);
          }
          sub_1C97867EC(&STACK[0x4B0]);
          v134 = *(_QWORD *)(v138 + 408);
          v112 = (*(_QWORD *)(v138 + 424) * v144 + 2 * v136) << *(_BYTE *)(v138 + 531);
          sub_1C9786744(&STACK[0x4B0], v139, v136, v143, v135, v142, 1u);
          v90 = 8 * v75;
          if ((int)v146 >= 2)
          {
            v113 = v146 - 1;
            v114 = v134 + v112 + 16;
            v115 = &a65;
            do
            {
              ((void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))v69[11])(v114, v75, v115, v91);
              v115 += 4;
              v114 += 16;
              --v113;
            }
            while (v113);
          }
          sub_1C97867EC(&STACK[0x4B0]);
          if ((int)v140 > v141)
          {
            v116 = v125;
            v117 = v134 + v126 + v112;
            v118 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t))v69[12])(v117, v75, v116, v96);
              v116 += 4;
              v117 += 8 * v75;
              --v118;
            }
            while (v118);
          }
          result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1C97867EC(&STACK[0x4B0]);
          v94 = v137 + 64;
        }
        while (v137 + 64 < v132);
      }
      v89 = v122 + 64;
      v83 = v121;
    }
    while (v122 + 64 < v119);
  }
  return result;
}

uint64_t sub_1C9786578(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD v30[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7)
    v12 = (v7 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v8)
    v13 = (v8 - v11);
  else
    v13 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  v15 = *(_QWORD *)(v6 + 416);
  v28 = (v15 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v29 = *(_QWORD *)(v6 + 400);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v30[10 * ((_DWORD)v10 == 0)];
    v19 = &v30[5 * ((_DWORD)v10 == 0) + 296];
    v20 = v29 + v28 + 8 * ((_DWORD)v10 == 0) - 8 * v15;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v30[10 * v22 + 80];
    v26 = &v30[5 * v22 + 336];
    v27 = v28 + 8 * v15 * v22 + v29 - 8;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

_QWORD *sub_1C9786744(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;

  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = a7;
  if (a6 >= 1)
  {
    v7 = (char *)__dst;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 + 8 * a7;
    v10 = *(_QWORD *)(v9 + 416);
    v11 = (char *)(*(_QWORD *)(v9 + 400) + ((v10 * a4 + (a3 << a7)) << *(_BYTE *)(v8 + 531)));
    v12 = a5 << (a7 != 0);
    v13 = a6;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v10;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

_DWORD *sub_1C97867EC(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;

  v1 = result + 18432;
  v2 = result[18437];
  v3 = (int)result[18438];
  v19 = result[18438] != 0;
  if (v2 >= 1)
  {
    v4 = result;
    v5 = *(_QWORD *)(*(_QWORD *)v1 + 8);
    v6 = v5 + 8 * v3;
    v7 = *(_QWORD *)(v6 + 416);
    v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 19);
    v22 = 0;
    v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 283);
    v8 = result[18436];
    v9 = *(_QWORD *)(v6 + 400) + ((v7 * (int)result[18435] + (int)(result[18434] << v3)) << *(_BYTE *)(v5 + 531));
    v18 = 8 * (v8 << v19);
    v10 = v8 << v19;
    do
    {
      if (v8 >= 1)
      {
        for (i = 0; i < v8; i += 8)
        {
          v12 = *(_QWORD *)(*(_QWORD *)v1 + 8);
          v13 = *(_QWORD *)(v12 + 768) * ((uint64_t)(v1[3] + v22) >> 3) + ((v1[2] + i) >> 3);
          v14 = *(_QWORD *)(v12 + 776);
          if (v21 && (*(_WORD *)(v14 + 2 * v13) & 0x100) != 0 || v20 && (*(_WORD *)(v14 + 2 * v13) & 0xC) != 0)
          {
            v15 = i << v19;
            v16 = v15;
            v17 = 8;
            do
            {
              result = memcpy((void *)(v9 + v15), (char *)v4 + v16, (8 << v19));
              v16 += v10;
              v15 += v7;
              --v17;
            }
            while (v17);
            v8 = v1[4];
          }
        }
        v2 = v1[5];
      }
      v9 += 8 * v7;
      v4 = (_DWORD *)((char *)v4 + v18);
      v22 += 8;
    }
    while (v22 < v2);
  }
  return result;
}

uint64_t sub_1C9786990(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t i;
  int v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BOOL8 v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t *v78;
  int v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  int v96;
  int *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  signed int vars8_4;
  uint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v45 = a3;
  v46 = result;
  v47 = *(_QWORD *)(a2 + 8);
  v98 = *(_DWORD *)(v47 + 520);
  v48 = *(_QWORD *)(v47 + 416);
  v49 = *(_QWORD *)(v47 + 424);
  v50 = *a3;
  v99 = v47;
  if (*a3 < *(_DWORD *)(v47 + 524))
  {
    v50 &= 0xFFFFFFF0;
    *a3 = v50;
  }
  v51 = *(_DWORD *)(result + 120);
  if (v51 < v50)
  {
    vars8_4 = (v98 - 1) & 0xFFFFFFC0;
    v100 = v49;
    v104 = 16 * v48;
    v101 = 16 * v49;
    v97 = v45;
    do
    {
      v52 = *(_BYTE *)(v99 + 531);
      v53 = *(_QWORD *)(v99 + 400) + ((*(_QWORD *)(v99 + 416) * v51) << v52);
      v54 = *(_QWORD *)(v99 + 408) + ((*(_QWORD *)(v99 + 424) * v51) << v52);
      v55 = v50 - v51;
      if (v55 >= 64)
        v56 = 64;
      else
        v56 = v55;
      v57 = (int)v56 >> 3;
      v107 = ((int)v56 >> 3);
      v58 = 0;
      if (vars8_4 >= 1)
      {
        do
        {
          v108 = v54;
          v105 = v58;
          (*(void (**)(uint64_t))(v46 + 48))(a2);
          v59 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v46 + 72))(v53 + i, v48, (char *)&STACK[0x780] + v59, (char *)&STACK[0x780] + i - 784, v56);
            v59 += 8;
          }
          v61 = *(_DWORD *)(v46 + 120);
          if (v57 > (v61 == 0))
          {
            v62 = v61 == 0;
            v63 = v107 - v62;
            v64 = &a29 + 2 * v62;
            v65 = &STACK[0x7C0] + v62;
            v66 = v53 + v104 * v62;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v66, v48, v65, v64, 64);
              v64 += 2;
              ++v65;
              v66 += v104;
              --v63;
            }
            while (v63);
          }
          v67 = 0;
          v49 = v100;
          do
          {
            v68 = v67 + 32;
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v46 + 88))(v67 + 32 + v108, v100, (char *)&a45 + v67, v56);
            v67 = v68;
          }
          while (v68 != 128);
          v69 = *(_DWORD *)(v46 + 120);
          if ((int)v107 > (v69 == 0))
          {
            v70 = v69 == 0;
            v71 = v107 - v70;
            v72 = &STACK[0x680] + 4 * v70;
            v73 = v108 + v101 * v70;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v73, v100, v72, 32);
              v72 += 4;
              v73 += v101;
              --v71;
            }
            while (v71);
          }
          v53 += 128;
          v57 = (int)v56 >> 3;
          v54 = v108 + 128;
          v58 = v105 + 64;
        }
        while (v105 + 64 < vars8_4);
        v51 = *(_DWORD *)(v46 + 120);
      }
      v74 = v98 - v58;
      if (v98 != v58)
      {
        v109 = v54;
        result = (*(uint64_t (**)(uint64_t))(v46 + 48))(a2);
        v106 = v74;
        if (v74 >= 16)
        {
          v75 = v53 + 16;
          v76 = (v74 >> 3) - 1;
          v77 = &a13;
          v78 = &STACK[0x780];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v46 + 72))(v75, v48, v78, v77, v56);
            v77 += 16;
            ++v78;
            v75 += 16;
            --v76;
          }
          while (v76);
        }
        v79 = *(_DWORD *)(v46 + 120);
        v80 = v106;
        if ((int)v107 > (v79 == 0))
        {
          v81 = v79 == 0;
          v82 = v107 - v81;
          v83 = &a29 + 2 * v81;
          v84 = &STACK[0x7C0] + v81;
          v85 = v53 + v104 * v81;
          do
          {
            v86 = v80;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v85, v48, v84, v83, v80);
            v80 = v86;
            v83 += 2;
            ++v84;
            v85 += v104;
            --v82;
          }
          while (v82);
        }
        v87 = &a45;
        v88 = v80;
        if ((int)v80 >= 24)
        {
          v89 = v109 + 32;
          v90 = ((v80 + 8) >> 4) - 1;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v46 + 88))(v89, v49, v87, v56);
            v87 += 4;
            v89 += 32;
            --v90;
          }
          while (v90);
        }
        v51 = *(_DWORD *)(v46 + 120);
        if ((int)v107 > (v51 == 0))
        {
          v91 = v51 == 0;
          v92 = (v88 >> 1);
          v93 = v107 - v91;
          v94 = &STACK[0x680] + 4 * v91;
          v95 = v109 + v101 * v91;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v95, v49, v94, v92);
            v94 += 4;
            v95 += v101;
            --v93;
          }
          while (v93);
          v51 = *(_DWORD *)(v46 + 120);
        }
      }
      v51 += v56;
      *(_DWORD *)(v46 + 120) = v51;
      v45 = v97;
      v50 = *v97;
    }
    while (v51 < *v97);
  }
  v96 = *(_DWORD *)(v99 + 524);
  if (v96 >= v51)
    v96 = v51;
  *v45 = v96;
  if (*(_DWORD *)(v46 + 120) < *(_DWORD *)(v99 + 524))
  {
    if (v96 <= 4)
      v96 = 4;
    *v45 = v96 - 4;
  }
  return result;
}

int *sub_1C9786E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *result;
  uint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  int v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _BOOL8 v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t *v88;
  int v89;
  _BOOL8 v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  _BOOL8 v99;
  uint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  int v103;
  int *v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t vars0;
  uint64_t *vars8;
  signed int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v52 = v51;
  v53 = v50;
  v54 = result;
  v55 = *(_QWORD *)(v50 + 8);
  v105 = *(_DWORD *)(v55 + 520);
  v56 = *(_QWORD *)(v55 + 416);
  v57 = *(_QWORD *)(v55 + 424);
  v58 = *v51;
  v106 = v55;
  if (*v51 < *(_DWORD *)(v55 + 524))
  {
    v58 &= 0xFFFFFFF0;
    *v51 = v58;
  }
  v59 = result[30];
  if ((int)v59 < v58)
  {
    v110 = (v105 - 1) & 0xFFFFFFC0;
    vars0 = v57;
    vars8 = &a49;
    v112 = 16 * v56;
    v113 = v50;
    v104 = v52;
    v111 = 16 * v57;
    do
    {
      v60 = *(_BYTE *)(v106 + 531);
      v61 = *(_QWORD *)(v106 + 400) + ((*(_QWORD *)(v106 + 416) * (int)v59) << v60);
      v62 = *(_QWORD *)(v106 + 408) + ((*(_QWORD *)(v106 + 424) * (int)v59) << v60);
      v63 = v58 - v59;
      if (v63 >= 64)
        v64 = 64;
      else
        v64 = v63;
      if ((_DWORD)v59)
        v65 = v59 - 8;
      else
        v65 = 0;
      v66 = v64 + 8;
      if (!(_DWORD)v59)
        v66 = v64;
      v114 = v66;
      v115 = v65;
      v67 = (int)v64 >> 3;
      v118 = ((int)v64 >> 3);
      v68 = 0;
      if (v110 >= 1)
      {
        do
        {
          v119 = v62;
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v54 + 6))(v53, v68, v54[30], 64, v64, &a17);
          v116 = v68;
          sub_1C97885B8(&STACK[0x420], v53, v68, v115, 72, v114, 0);
          v69 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v54 + 9))(v61 + i, v56, (char *)&STACK[0x3A0] + v69, (char *)&STACK[0x3A0] + i - 784, v64);
            v69 += 8;
          }
          sub_1C9788668((int *)&STACK[0x420]);
          v71 = v54[30];
          if (v67 > (v71 == 0))
          {
            v72 = v71 == 0;
            v73 = v118 - v72;
            v74 = &a33 + 2 * v72;
            v75 = &STACK[0x3E0] + v72;
            v76 = v61 + v112 * v72;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v54 + 10))(v76, v56, v75, v74, 64);
              v74 += 2;
              ++v75;
              v76 += v112;
              --v73;
            }
            while (v73);
          }
          sub_1C9788668((int *)&STACK[0x420]);
          sub_1C97885B8(&STACK[0x420], v113, v116, v115, 72, v114, 1u);
          v77 = 0;
          v57 = vars0;
          do
          {
            v78 = v77 + 32;
            (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v54 + 11))(v77 + 32 + v119, vars0, (char *)&a49 + v77, v64);
            v77 = v78;
          }
          while (v78 != 128);
          sub_1C9788668((int *)&STACK[0x420]);
          v79 = v54[30];
          if ((int)v118 > (v79 == 0))
          {
            v80 = v79 == 0;
            v81 = v118 - v80;
            v82 = &STACK[0x2A0] + 4 * v80;
            v83 = v119 + v111 * v80;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v54 + 12))(v83, vars0, v82, 32);
              v82 += 4;
              v83 += v111;
              --v81;
            }
            while (v81);
          }
          result = sub_1C9788668((int *)&STACK[0x420]);
          v61 += 128;
          v67 = (int)v64 >> 3;
          v62 = v119 + 128;
          v68 = (v116 + 64);
          v53 = v113;
        }
        while ((int)v68 < v110);
        v59 = v54[30];
      }
      v84 = v105 - v68;
      if (v105 == (_DWORD)v68)
      {
        v52 = v104;
      }
      else
      {
        v120 = v62;
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v54 + 6))(v53, v68, v59, (v105 - v68), v64, &a17);
        v117 = v68;
        sub_1C97885B8(&STACK[0x420], v53, v68, v115, v84, v114, 0);
        v107 = v105 - v68;
        if (v84 >= 16)
        {
          v85 = v61 + 16;
          v86 = (v84 >> 3) - 1;
          v87 = &a17;
          v88 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v54 + 9))(v85, v56, v88, v87, v64);
            v87 += 16;
            ++v88;
            v85 += 16;
            --v86;
          }
          while (v86);
        }
        sub_1C9788668((int *)&STACK[0x420]);
        v89 = v54[30];
        if ((int)v118 > (v89 == 0))
        {
          v90 = v89 == 0;
          v91 = v118 - v90;
          v92 = &a33 + 2 * v90;
          v93 = &STACK[0x3E0] + v90;
          v94 = v61 + v112 * v90;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))v54 + 10))(v94, v56, v93, v92, v107);
            v92 += 2;
            ++v93;
            v94 += v112;
            --v91;
          }
          while (v91);
        }
        sub_1C9788668((int *)&STACK[0x420]);
        sub_1C97885B8(&STACK[0x420], v113, v117, v115, v107, v114, 1u);
        if (v107 >= 24)
        {
          v95 = v120 + 32;
          v96 = ((v107 + 8) >> 4) - 1;
          v97 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v54 + 11))(v95, v57, v97, v64);
            v97 += 4;
            v95 += 32;
            --v96;
          }
          while (v96);
        }
        sub_1C9788668((int *)&STACK[0x420]);
        v98 = v54[30];
        if ((int)v118 > (v98 == 0))
        {
          v99 = v98 == 0;
          v100 = v118 - v99;
          v101 = &STACK[0x2A0] + 4 * v99;
          v102 = v120 + v111 * v99;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, _QWORD))v54 + 12))(v102, v57, v101, (v107 >> 1));
            v101 += 4;
            v102 += v111;
            --v100;
          }
          while (v100);
        }
        result = sub_1C9788668((int *)&STACK[0x420]);
        LODWORD(v59) = v54[30];
        v52 = v104;
        v53 = v113;
      }
      v59 = (v59 + v64);
      v54[30] = v59;
      v58 = *v52;
    }
    while ((int)v59 < *v52);
  }
  v103 = *(_DWORD *)(v106 + 524);
  if (v103 >= (int)v59)
    v103 = v59;
  *v52 = v103;
  if (v54[30] < *(_DWORD *)(v106 + 524))
  {
    if (v103 <= 4)
      v103 = 4;
    *v52 = v103 - 4;
  }
  return result;
}

uint64_t sub_1C97873E4(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t vars0;
  unint64_t *vars8;
  uint64_t v116;
  unint64_t *v117;
  uint64_t *v118;
  int v119;
  uint64_t v120;
  signed int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _BOOL4 v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;

  v61 = result;
  v62 = *(_QWORD *)(a2 + 8);
  v63 = *(_QWORD *)(a2 + 16);
  v64 = *(_DWORD *)(v62 + 520);
  v65 = *(_DWORD *)(v62 + 524);
  v66 = *(_QWORD *)(v62 + 416);
  v67 = *(_QWORD *)(v62 + 424);
  v131 = v62;
  v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(_BYTE *)(v63 + 2113);
  v69 = a3 << v62;
  v70 = a4 << v62;
  v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    v72 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (v72)
      v74 = v71;
    else
      v74 = 0;
    v75 = v74 + v68;
    if (v69 <= 63)
      v76 = 0;
    else
      v76 = (v69 - 1) & 0xFFFFFFC0;
    v121 = v76;
    v124 = v64 - v76;
    v77 = v75 + v73 - 8;
    if (v75 + v73 < 8)
      v77 = 0;
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0)
      return result;
    v78 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (!v78)
      v71 = 0;
    v75 = v71 + v68;
    if (v69 >= 64)
      v79 = v69 - 64;
    else
      v79 = 0;
    v121 = v79;
    if (v69 >= 64)
      v69 = 64;
    v124 = v69;
    v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4)
      v75 = v80;
  }
  if (v75 >= 1)
  {
    v81 = 0;
    v110 = v73;
    v123 = 16 * v66;
    v82 = 16 * v67;
    v111 = v75;
    v120 = a2;
    v119 = v64;
    v112 = v75;
    do
    {
      v113 = v81;
      if (v75 - (int)v81 >= 64)
        v83 = 64;
      else
        v83 = (v75 - v81);
      if (v124 >= 1)
      {
        v84 = 0;
        v134 = v81 + v110;
        v85 = (_DWORD)v81 + (_DWORD)v110 == 0;
        v132 = ((int)v83 >> 3);
        v133 = (_DWORD)v81 + (_DWORD)v110 == 0;
        v122 = v132 - v85;
        v117 = &STACK[0x8C0] + v85;
        v118 = &a45 + 2 * v85;
        vars8 = &STACK[0x780] + 4 * v85;
        v116 = v123 * v85;
        vars0 = v82 * v85;
        do
        {
          if (v124 - (int)v84 >= 64)
            v86 = 64;
          else
            v86 = (v124 - v84);
          v87 = v84 + v121;
          v130 = v84;
          v127 = v86 + v121 + v84;
          v88 = *(_QWORD *)(v131 + 416);
          v125 = *(_QWORD *)(v131 + 400);
          v89 = *(_BYTE *)(v131 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v134, v86, v83, &a29);
          v72 = v127 < v64;
          v126 = v127 < v64;
          v128 = v87;
          v90 = (v87 + v88 * v134) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v72)
            v91 = (v91 + 1);
          else
            v91 = v91;
          if ((int)v91 >= 2)
          {
            v92 = v91 - 1;
            v93 = v125 + v90 + 16;
            v94 = &a29;
            v95 = &STACK[0x880];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 16;
              --v92;
            }
            while (v92);
          }
          if ((int)v132 > v133)
          {
            v96 = v117;
            v97 = v125 + v116 + v90;
            v98 = v118;
            v99 = v122;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v123;
              --v99;
            }
            while (v99);
          }
          v100 = (v128 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v131 + 424) * v134;
          v129 = *(_QWORD *)(v131 + 408);
          v101 = v100 << *(_BYTE *)(v131 + 531);
          v102 = (v126 + (((int)v86 + 8) >> 4));
          v82 = 16 * v67;
          if ((int)v102 >= 2)
          {
            v103 = v102 - 1;
            v104 = v129 + v101 + 32;
            v105 = &a61;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v104, v67, v105, v83);
              v105 += 4;
              v104 += 32;
              --v103;
            }
            while (v103);
          }
          if ((int)v132 > v133)
          {
            v106 = ((int)v86 >> 1);
            v107 = vars8;
            v108 = v129 + vars0 + v101;
            v109 = v122;
            do
            {
              result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v108, v67, v107, v106);
              v107 += 4;
              v108 += 16 * v67;
              --v109;
            }
            while (v109);
          }
          v84 = v130 + 64;
          a2 = v120;
          v64 = v119;
        }
        while (v130 + 64 < v124);
      }
      v81 = v113 + 64;
      v75 = v112;
    }
    while (v113 + 64 < v111);
  }
  return result;
}

int *sub_1C9787838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int *result;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t *v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t *vars0;
  unint64_t *vars8;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  signed int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _BOOL4 v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v69 = v66;
  v70 = result;
  v71 = *(_QWORD *)(v66 + 8);
  v72 = *(_QWORD *)(v66 + 16);
  v73 = *(_DWORD *)(v71 + 520);
  v74 = *(_DWORD *)(v71 + 524);
  v75 = *(_QWORD *)(v71 + 416);
  v76 = *(_QWORD *)(v71 + 424);
  v143 = v71;
  v77 = *(unsigned __int8 *)(v72 + 2117);
  LOBYTE(v71) = *(_BYTE *)(v72 + 2113);
  v78 = v67 << v71;
  v79 = v68 << v71;
  v80 = v79 - 16;
  v130 = v73;
  if (*(_DWORD *)(v72 + 2120) - 1 == v67)
  {
    v81 = v79 < 16;
    if (v79 >= 16)
      v82 = v79 - 16;
    else
      v82 = 0;
    if (v81)
      v83 = v80;
    else
      v83 = 0;
    v84 = v83 + v77;
    if (v78 <= 63)
      v85 = 0;
    else
      v85 = (v78 - 1) & 0xFFFFFFC0;
    v131 = v85;
    v134 = v73 - v85;
    v86 = v84 + v82 - 8;
    if (v84 + v82 < 8)
      v86 = 0;
    result[30] = v86;
    if (*(_DWORD *)(*(_QWORD *)(v66 + 16) + 2124) - 1 == v68)
    {
      v84 = v74 - v82;
      result[30] = v74;
    }
  }
  else
  {
    if (!v67 || (v78 & 0x3F) != 0)
      return result;
    v87 = v79 < 16;
    if (v79 >= 16)
      v82 = v79 - 16;
    else
      v82 = 0;
    if (!v87)
      v80 = 0;
    v84 = v80 + v77;
    if (v78 >= 64)
      v88 = v78 - 64;
    else
      v88 = 0;
    v131 = v88;
    if (v78 >= 64)
      v78 = 64;
    v134 = v78;
    v89 = v74 - v82;
    if (*(_DWORD *)(v72 + 2124) - 1 == v68)
      v84 = v89;
  }
  if (v84 >= 1)
  {
    v90 = 0;
    vars8 = &STACK[0x420];
    v122 = v82;
    vars0 = &a65;
    v133 = 16 * v75;
    v91 = 16 * v76;
    v121 = v84;
    v142 = v66;
    v123 = v84;
    do
    {
      if (v84 - (int)v90 >= 64)
        v92 = 64;
      else
        v92 = (v84 - v90);
      v124 = v90;
      v93 = v90 + v122 - 8;
      v148 = v90 + v122;
      if (!((_DWORD)v90 + (_DWORD)v122))
        v93 = 0;
      v147 = v93;
      v94 = v92 + 8;
      if (!((_DWORD)v90 + (_DWORD)v122))
        v94 = v92;
      v146 = v94;
      if (v134 >= 1)
      {
        v95 = 0;
        v96 = (_DWORD)v148 == 0;
        v144 = ((int)v92 >> 3);
        v145 = v148 == 0;
        v132 = v144 - v96;
        v128 = v91 * v96;
        v129 = v133 * v96;
        v127 = &STACK[0x320] + 4 * v96;
        do
        {
          if (v134 - (int)v95 >= 64)
            v97 = 64;
          else
            v97 = (v134 - v95);
          v98 = v95 + v131;
          v99 = v97 + v131 + v95;
          v139 = *(_QWORD *)(v143 + 416);
          v141 = v95;
          v135 = *(_QWORD *)(v143 + 400);
          v100 = *(_BYTE *)(v143 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v70 + 6))(v69, v98, v148, v97, v92, &a33);
          v138 = v99 < v130;
          if (v99 >= v130)
            v101 = v97;
          else
            v101 = v97 + 8;
          v102 = (v98 + v139 * v148) << v100;
          v103 = (int)v97 >> 3;
          if (v99 >= v130)
            v104 = v103;
          else
            v104 = v103 + 1;
          v140 = v98;
          v137 = v101;
          sub_1C97885B8(&STACK[0x4A0], v69, v98, v147, v101, v146, 0);
          if ((int)v104 >= 2)
          {
            v105 = v104 - 1;
            v106 = v135 + v102 + 16;
            v107 = &a33;
            v108 = &STACK[0x420];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v70 + 9))(v106, v75, v108, v107, v92);
              v107 += 16;
              ++v108;
              v106 += 16;
              --v105;
            }
            while (v105);
          }
          sub_1C9788668((int *)&STACK[0x4A0]);
          if ((int)v144 > v145)
          {
            v109 = &STACK[0x460] + ((_DWORD)v148 == 0);
            v110 = v135 + v129 + v102;
            v111 = &a49 + 2 * ((_DWORD)v148 == 0);
            v112 = v132;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v70 + 10))(v110, v75, v109, v111, v97);
              v111 += 2;
              ++v109;
              v110 += v133;
              --v112;
            }
            while (v112);
          }
          sub_1C9788668((int *)&STACK[0x4A0]);
          v136 = *(_QWORD *)(v143 + 408);
          v113 = ((v140 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v143 + 424) * v148) << *(_BYTE *)(v143 + 531);
          sub_1C97885B8(&STACK[0x4A0], v142, v140, v147, v137, v146, 1u);
          v114 = (v138 + (((int)v97 + 8) >> 4));
          v91 = 16 * v76;
          if ((int)v114 >= 2)
          {
            v115 = v114 - 1;
            v116 = v136 + v113 + 32;
            v117 = &a65;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v70 + 11))(v116, v76, v117, v92);
              v117 += 4;
              v116 += 32;
              --v115;
            }
            while (v115);
          }
          sub_1C9788668((int *)&STACK[0x4A0]);
          if ((int)v144 > v145)
          {
            v118 = v127;
            v119 = v136 + v128 + v113;
            v120 = v132;
            do
            {
              (*((void (**)(unint64_t, uint64_t, unint64_t *, _QWORD))v70 + 12))(v119, v76, v118, ((int)v97 >> 1));
              v118 += 4;
              v119 += 16 * v76;
              --v120;
            }
            while (v120);
          }
          result = sub_1C9788668((int *)&STACK[0x4A0]);
          v69 = v142;
          v95 = v141 + 64;
        }
        while (v141 + 64 < v134);
      }
      v90 = v124 + 64;
      v84 = v123;
    }
    while (v124 + 64 < v121);
  }
  return result;
}

uint64_t sub_1C9787D18(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD v30[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7)
    v12 = (v7 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v8)
    v13 = (v8 - v11);
  else
    v13 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  v15 = *(_QWORD *)(v6 + 416);
  v28 = (v15 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v29 = *(_QWORD *)(v6 + 400);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v30[10 * ((_DWORD)v10 == 0)];
    v19 = &v30[5 * ((_DWORD)v10 == 0) + 296];
    v20 = v29 + v28 + 16 * ((_DWORD)v10 == 0) - 16 * v15;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v30[10 * v22 + 80];
    v26 = &v30[5 * v22 + 336];
    v27 = v28 + 16 * v15 * v22 + v29 - 16;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

void sub_1C9787EE4(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 *v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  int v57;
  unsigned __int8 v58;
  int v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  char *v70;
  int v71;
  unsigned __int8 v72;
  int v73;
  unsigned __int8 v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v80;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _OWORD *v86;
  uint64_t v87;
  char *v88;
  int v89;
  int v90;
  int v91;
  _OWORD v92[8];
  _OWORD v93[4];
  _OWORD v94[8];
  _OWORD v95[4];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 8);
  bzero(a6, 0x380uLL);
  v82 = v9;
  v75 = v9[96];
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  memset(v95, 0, sizeof(v95));
  memset(v94, 0, sizeof(v94));
  memset(v93, 0, sizeof(v93));
  v80 = (a5 >> 3);
  v85 = a4;
  v76 = a5;
  v77 = a4 >> 3;
  v90 = 2 * v10;
  v91 = 2 * v11;
  memset(v92, 0, sizeof(v92));
  if (a5 >= 8)
  {
    v12 = 0;
    if (v77 <= 1)
      v13 = 1;
    else
      v13 = v77;
    if ((int)v80 <= 1)
      v14 = 1;
    else
      v14 = v80;
    v83 = v14;
    v86 = v95;
    v88 = a6 + 768;
    do
    {
      if (v85 >= 8)
      {
        v15 = 0;
        v16 = a3 + 8 * v12;
        v17 = (__int16 *)(v82[97] + 2 * (((uint64_t)a2 >> 3) + v82[96] * ((uint64_t)v16 >> 3)) + 2);
        v18 = a2 + 8;
        v20 = v86;
        v19 = v88;
        do
        {
          v21 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (v18 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v16 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v22 = (*(v17 - 1) >> 9) + (*v17 >> 9) + 1;
          *v20 = *(_BYTE *)(v21 + 661) + (v22 >> 1) - 2;
          v23 = *(char *)(v21 + 660) + (v22 >> 1);
          if (v23 >= 51)
            v23 = 51;
          if (v23 <= 15)
            v23 = 15;
          *v19 = byte_1C9860FB3[v23 - 15];
          if ((v15 & 1) != 0)
          {
            v24 = *(_BYTE *)(v21 + 661) + 2;
            v25 = (v22 + v91) >> 1;
            if (v25 >= 51)
              LOBYTE(v25) = 51;
            v26 = (char *)v94 + 8 * (v15 >> 1) + v12;
            *v26 = v24 + v25;
            v27 = (v22 + v90) >> 1;
            if (v27 >= 51)
              LOBYTE(v27) = 51;
            v26[64] = v24 + v27;
          }
          ++v15;
          ++v17;
          v19 += 8;
          v20 += 8;
          v18 += 8;
        }
        while (v13 != v15);
      }
      ++v12;
      v86 = (_OWORD *)((char *)v86 + 1);
      ++v88;
    }
    while (v12 != v83);
  }
  v29 = v80;
  v28 = a3;
  v30 = a3 == 0;
  if ((int)v80 <= v30)
  {
    v46 = v76;
  }
  else
  {
    if (v77 <= 1)
      v31 = 1;
    else
      v31 = v77;
    v32 = (unint64_t)v92 | (8 * (a3 == 0));
    v33 = &a6[8 * (a3 == 0) + 832];
    v84 = a3 == 0;
    v34 = (unint64_t)v93 & 0xFFFFFFFFFFFFFFF7 | (8 * v84);
    do
    {
      if (v85 >= 8)
      {
        v35 = 0;
        v89 = a3 + 8 * v84;
        v36 = ((uint64_t)a2 >> 3) + v82[96] * ((uint64_t)v89 >> 3);
        v37 = v82[97];
        v87 = v37 + 2 * v36;
        v38 = v37 - 2 * v75 + 2 * v36;
        v39 = a2;
        do
        {
          v40 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (v39 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v89 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v41 = (*(__int16 *)(v38 + 2 * v35) >> 9) + (*(__int16 *)(v87 + 2 * v35) >> 9) + 1;
          *(_BYTE *)(v34 + v35) = *(_BYTE *)(v40 + 661) + (v41 >> 1) - 2;
          v42 = *(char *)(v40 + 660) + (v41 >> 1);
          if (v42 >= 51)
            v42 = 51;
          if (v42 <= 15)
            v42 = 15;
          v33[v35] = byte_1C9860FB3[v42 - 15];
          v43 = *(_BYTE *)(v40 + 661) + 2;
          v44 = (v41 + v91) >> 1;
          if (v44 >= 51)
            LOBYTE(v44) = 51;
          *(_BYTE *)(v32 + v35) = v43 + v44;
          v45 = (v41 + v90) >> 1;
          if (v45 >= 51)
            LOBYTE(v45) = 51;
          *(_BYTE *)(v32 + v35++ + 64) = v43 + v45;
          v39 += 8;
        }
        while (v31 != v35);
      }
      v32 += 8;
      v33 += 8;
      v34 += 8;
      v29 = v80;
      ++v84;
    }
    while (v84 != v80);
    v28 = a3;
    v46 = v76;
    v30 = a3 == 0;
  }
  if (v85 >= 8)
  {
    v47 = 0;
    LODWORD(v48) = v46 >> 2;
    if (v46 >> 2 <= 1)
      v48 = 1;
    else
      v48 = v48;
    if (v77 <= 1)
      v49 = 1;
    else
      v49 = v77;
    v50 = a6;
    do
    {
      if (v46 >= 4)
      {
        v51 = 0;
        v52 = (unsigned __int8 *)&a6[32 * (v47 >> 1) + 257];
        v53 = v82[121] + ((uint64_t)v28 >> 2) + v82[117] * ((uint64_t)(a2 + 8 + 8 * (int)v47) >> 3);
        do
        {
          if (*(_BYTE *)(v53 + v51))
          {
            v54 = *((char *)v95 + 8 * v47 + (v51 >> 1)) + 2 * *(unsigned __int8 *)(v53 + v51);
            if (v54 >= 53)
              v54 = 53;
            if (v54 <= 17)
              v54 = 17;
            v50[v51] = byte_1C9860FE4[v54 - 17];
          }
          ++v51;
        }
        while (v48 != v51);
        if ((v47 & 1) != 0)
        {
          v55 = 0;
          do
          {
            if (*(unsigned __int8 *)(v53 + v55) >= 2u)
            {
              v56 = (char *)v94 + 8 * (v47 >> 1) + (v55 >> 1);
              v57 = *v56;
              if (v57 >= 53)
                v57 = 53;
              if (v57 <= 17)
                v57 = 17;
              v58 = byte_1C9860FE4[v57 - 17];
              v59 = v56[64];
              if (v59 >= 53)
                v59 = 53;
              if (v59 <= 17)
                v59 = 17;
              v60 = byte_1C9860FE4[v59 - 17];
              *(v52 - 1) = v58;
              *v52 = v60;
            }
            ++v55;
            v52 += 2;
          }
          while (v48 != v55);
        }
      }
      ++v47;
      v50 += 16;
    }
    while (v47 != v49);
  }
  if ((int)v29 > v30)
  {
    v61 = v28 == 0;
    LODWORD(v62) = v85 >> 2;
    if (v85 >> 2 <= 1)
      v62 = 1;
    else
      v62 = v62;
    v63 = &a6[16 * (v28 == 0) + 128];
    v64 = &a6[32 * v61 + 513];
    do
    {
      if (v85 >= 4)
      {
        v65 = 0;
        v66 = v82[118] + ((uint64_t)a2 >> 2) + v82[116] * ((uint64_t)(v28 + 8 * (int)v61) >> 3);
        do
        {
          if (*(_BYTE *)(v66 + v65))
          {
            v67 = *((char *)v93 + 8 * v61 + (v65 >> 1)) + 2 * *(unsigned __int8 *)(v66 + v65);
            if (v67 >= 53)
              v67 = 53;
            if (v67 <= 17)
              v67 = 17;
            v63[v65] = byte_1C9860FE4[v67 - 17];
          }
          ++v65;
        }
        while (v62 != v65);
        v68 = 0;
        v69 = (unsigned __int8 *)v64;
        do
        {
          if (*(unsigned __int8 *)(v66 + v68) >= 2u)
          {
            v70 = (char *)v92 + 8 * v61 + (v68 >> 1);
            v71 = *v70;
            if (v71 >= 53)
              v71 = 53;
            if (v71 <= 17)
              v71 = 17;
            v72 = byte_1C9860FE4[v71 - 17];
            v73 = v70[64];
            if (v73 >= 53)
              v73 = 53;
            if (v73 <= 17)
              v73 = 17;
            v74 = byte_1C9860FE4[v73 - 17];
            *(v69 - 1) = v72;
            *v69 = v74;
          }
          ++v68;
          v69 += 2;
        }
        while (v62 != v68);
      }
      ++v61;
      v63 += 16;
      v64 += 32;
    }
    while (v61 != v29);
  }
}

_QWORD *sub_1C97885B8(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = a7;
  if (a6 >= 1)
  {
    v7 = (char *)__dst;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 + 8 * a7;
    v10 = *(_QWORD *)(v9 + 416);
    v11 = (char *)(*(_QWORD *)(v9 + 400) + ((v10 * a4 + (a3 >> (a7 != 0) << a7)) << *(_BYTE *)(v8 + 531)));
    v12 = 2 * a5;
    v13 = a6;
    v14 = 2 * v10;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v14;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

int *sub_1C9788668(int *result)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  int *v24;
  uint64_t v25;

  v1 = result + 18432;
  v2 = result[18437];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[18438];
    v5 = *(_QWORD *)(*(_QWORD *)v1 + 8);
    v6 = v5 + 8 * v4;
    v7 = *(_QWORD *)(v6 + 416);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 19);
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 283);
    v10 = result[18436];
    v11 = (v7 * result[18435] + (result[18434] >> ((_DWORD)v4 != 0) << v4)) << *(_BYTE *)(v5 + 531);
    v12 = 16 * v10;
    v13 = 2 * v10;
    v14 = (_OWORD *)(*(_QWORD *)(v6 + 400) + v11);
    v15 = 16 * v7;
    v16 = 2 * v7;
    do
    {
      if ((int)v10 >= 1)
      {
        v17 = 0;
        v18 = v14;
        v19 = result;
        do
        {
          v20 = *(_QWORD *)(*(_QWORD *)v1 + 8);
          v21 = *(_QWORD *)(v20 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v17) >> 3);
          v22 = *(_QWORD *)(v20 + 776);
          if (v8 && (*(_WORD *)(v22 + 2 * v21) & 0x100) != 0 || v9 && (*(_WORD *)(v22 + 2 * v21) & 0xC) != 0)
          {
            v23 = v18;
            v24 = v19;
            v25 = 8;
            do
            {
              *v23 = *(_OWORD *)v24;
              v24 = (int *)((char *)v24 + v13);
              v23 = (_OWORD *)((char *)v23 + v16);
              --v25;
            }
            while (v25);
            LODWORD(v10) = v1[4];
          }
          v17 += 8;
          v19 += 4;
          ++v18;
        }
        while (v17 < (int)v10);
        v2 = v1[5];
      }
      v3 += 8;
      result = (int *)((char *)result + v12);
      v14 = (_OWORD *)((char *)v14 + v15);
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_1C9788794(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t i;
  int v70;
  _BOOL8 v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t *v79;
  int v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  int v97;
  int *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *vars0;
  signed int vars8_4;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;

  v45 = a3;
  v46 = result;
  v47 = *(_QWORD *)(a2 + 8);
  v99 = *(_DWORD *)(v47 + 520);
  v48 = *(_QWORD *)(v47 + 416);
  v49 = *(_QWORD *)(v47 + 424);
  v50 = *a3;
  v100 = v47;
  if (*a3 < *(_DWORD *)(v47 + 524))
  {
    v50 &= 0xFFFFFFF0;
    *a3 = v50;
  }
  v51 = *(_DWORD *)(result + 120);
  if (v51 < v50)
  {
    vars8_4 = (v99 - 1) & 0xFFFFFFC0;
    v52 = 8 * v49;
    vars0 = &STACK[0x780];
    v98 = v45;
    v105 = 8 * v48;
    v101 = 8 * v49;
    do
    {
      v53 = *(_BYTE *)(v100 + 531);
      v54 = *(_QWORD *)(v100 + 400) + ((*(_QWORD *)(v100 + 416) * v51) << v53);
      v108 = *(_QWORD *)(v100 + 408) + ((*(_QWORD *)(v100 + 424) * v51) << v53);
      v55 = v50 - v51;
      if (v55 >= 64)
        v56 = 64;
      else
        v56 = v55;
      v57 = (int)v56 >> 3;
      v109 = ((int)v56 >> 3);
      v58 = 0;
      if (vars8_4 >= 1)
      {
        do
        {
          v59 = &a13;
          v106 = v58;
          (*(void (**)(uint64_t))(v46 + 48))(a2);
          v60 = 0;
          do
          {
            v61 = v60 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v46 + 72))(v60 + 8 + v54, v48, (char *)&STACK[0x780] + v60, v59, v56);
            v59 += 16;
            v60 = v61;
          }
          while (v61 != 64);
          v62 = *(_DWORD *)(v46 + 120);
          if (v57 > (v62 == 0))
          {
            v63 = v62 == 0;
            v64 = v109 - v63;
            v65 = &a29 + 2 * v63;
            v66 = &STACK[0x7C0] + v63;
            v67 = v54 + v105 * v63;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v67, v48, v66, v65, 64);
              v65 += 2;
              ++v66;
              v67 += v105;
              --v64;
            }
            while (v64);
          }
          v68 = &a45;
          for (i = 16; i != 80; i += 16)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v46 + 88))(v108 + i, v49, v68, v56);
            v68 += 4;
          }
          v70 = *(_DWORD *)(v46 + 120);
          v52 = 8 * v49;
          if ((int)v109 > (v70 == 0))
          {
            v71 = v70 == 0;
            v72 = v109 - v71;
            v73 = &STACK[0x680] + 4 * v71;
            v74 = v108 + v101 * v71;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v74, v49, v73, 32);
              v73 += 4;
              v74 += v101;
              --v72;
            }
            while (v72);
          }
          v54 += 64;
          v108 += 64;
          v58 = v106 + 64;
          v57 = (int)v56 >> 3;
        }
        while (v106 + 64 < vars8_4);
        v51 = *(_DWORD *)(v46 + 120);
      }
      v75 = v99 - v58;
      if (v99 != v58)
      {
        result = (*(uint64_t (**)(uint64_t))(v46 + 48))(a2);
        v107 = v75;
        if (v75 >= 16)
        {
          v76 = v54 + 8;
          v77 = (v75 >> 3) - 1;
          v78 = &a13;
          v79 = &STACK[0x780];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v46 + 72))(v76, v48, v79, v78, v56);
            v78 += 16;
            ++v79;
            v76 += 8;
            --v77;
          }
          while (v77);
        }
        v80 = *(_DWORD *)(v46 + 120);
        v81 = v107;
        if ((int)v109 > (v80 == 0))
        {
          v82 = v80 == 0;
          v83 = v109 - v82;
          v84 = &a29 + 2 * v82;
          v85 = &STACK[0x7C0] + v82;
          v86 = v54 + v105 * v82;
          do
          {
            v87 = v81;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v86, v48, v85, v84, v81);
            v81 = v87;
            v84 += 2;
            ++v85;
            v86 += v105;
            --v83;
          }
          while (v83);
        }
        v88 = v81;
        if ((int)v81 >= 24)
        {
          v89 = v108 + 16;
          v90 = ((v81 + 8) >> 4) - 1;
          v91 = &a45;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v46 + 88))(v89, v49, v91, v56);
            v91 += 4;
            v89 += 16;
            --v90;
          }
          while (v90);
        }
        v51 = *(_DWORD *)(v46 + 120);
        if ((int)v109 > (v51 == 0))
        {
          v92 = v51 == 0;
          v93 = (v88 >> 1);
          v94 = v109 - v92;
          v95 = &STACK[0x680] + 4 * v92;
          v96 = v108 + v52 * v92;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v96, v49, v95, v93);
            v95 += 4;
            v96 += v52;
            --v94;
          }
          while (v94);
          v51 = *(_DWORD *)(v46 + 120);
        }
      }
      v51 += v56;
      *(_DWORD *)(v46 + 120) = v51;
      v45 = v98;
      v50 = *v98;
    }
    while (v51 < *v98);
  }
  v97 = *(_DWORD *)(v100 + 524);
  if (v97 >= v51)
    v97 = v51;
  *v45 = v97;
  if (*(_DWORD *)(v46 + 120) < *(_DWORD *)(v100 + 524))
  {
    if (v97 <= 4)
      v97 = 4;
    *v45 = v97 - 4;
  }
  return result;
}

int *sub_1C9788C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *result;
  int *v50;
  int *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t i;
  int v79;
  _BOOL8 v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t *v89;
  int v90;
  _BOOL8 v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  _BOOL8 v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  int v105;
  int *v106;
  int v107;
  uint64_t v108;
  uint64_t *vars0;
  uint64_t vars8;
  signed int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v51 = v50;
  v52 = result;
  STACK[0x9458] = *MEMORY[0x1E0C80C00];
  v115 = v53;
  v54 = *(_QWORD *)(v53 + 8);
  v107 = *(_DWORD *)(v54 + 520);
  v55 = *(_QWORD *)(v54 + 416);
  v56 = *(_QWORD *)(v54 + 424);
  v57 = *v50;
  v108 = v54;
  if (*v50 < *(_DWORD *)(v54 + 524))
  {
    v57 &= 0xFFFFFFF0;
    *v50 = v57;
  }
  v58 = result[30];
  if ((int)v58 < v57)
  {
    v111 = (v107 - 1) & 0xFFFFFFC0;
    vars0 = &a49;
    vars8 = 8 * v56;
    v106 = v51;
    v112 = 8 * v55;
    do
    {
      v59 = *(_BYTE *)(v108 + 531);
      v60 = *(_QWORD *)(v108 + 400) + ((*(_QWORD *)(v108 + 416) * (int)v58) << v59);
      v61 = *(_QWORD *)(v108 + 408) + ((*(_QWORD *)(v108 + 424) * (int)v58) << v59);
      v62 = v57 - v58;
      if (v62 >= 64)
        v63 = 64;
      else
        v63 = v62;
      if ((_DWORD)v58)
        v64 = v58 - 8;
      else
        v64 = 0;
      v65 = v63 + 8;
      if (!(_DWORD)v58)
        v65 = v63;
      v116 = v65;
      v117 = v64;
      v66 = (int)v63 >> 3;
      v120 = ((int)v63 >> 3);
      v67 = 0;
      if (v111 >= 1)
      {
        do
        {
          v113 = v61;
          v68 = &a17;
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v52 + 6))(v115, v67, v52[30], 64, v63, &a17);
          v118 = v67;
          sub_1C9789D48(&STACK[0x430], v115, v67, v117, 72, v116, 0);
          v69 = 0;
          do
          {
            v70 = v69 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v52 + 9))(v69 + 8 + v60, v55, (char *)&STACK[0x3A0] + v69, v68, v63);
            v68 += 16;
            v69 = v70;
          }
          while (v70 != 64);
          sub_1C9789DF0((int *)&STACK[0x430]);
          v71 = v52[30];
          if (v66 > (v71 == 0))
          {
            v72 = v71 == 0;
            v73 = v120 - v72;
            v74 = &a33 + 2 * v72;
            v75 = &STACK[0x3E0] + v72;
            v76 = v60 + v112 * v72;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v76, v55, v75, v74, 64);
              v74 += 2;
              ++v75;
              v76 += v112;
              --v73;
            }
            while (v73);
          }
          sub_1C9789DF0((int *)&STACK[0x430]);
          sub_1C9789D48(&STACK[0x430], v115, v118, v117, 72, v116, 1u);
          v77 = &a49;
          for (i = 16; i != 80; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v113 + i, v56, v77, v63);
            v77 += 4;
          }
          sub_1C9789DF0((int *)&STACK[0x430]);
          v79 = v52[30];
          if ((int)v120 > (v79 == 0))
          {
            v80 = v79 == 0;
            v81 = v120 - v80;
            v82 = &STACK[0x2A0] + 4 * v80;
            v83 = v113 + vars8 * v80;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v83, v56, v82, 32);
              v82 += 4;
              v83 += vars8;
              --v81;
            }
            while (v81);
          }
          result = sub_1C9789DF0((int *)&STACK[0x430]);
          v60 += 64;
          v61 = v113 + 64;
          v67 = (v118 + 64);
          v66 = (int)v63 >> 3;
        }
        while ((int)v67 < v111);
        v58 = v52[30];
      }
      v84 = v107 - v67;
      if (v107 == (_DWORD)v67)
      {
        v51 = v106;
      }
      else
      {
        v114 = v61;
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v52 + 6))(v115, v67, v58, (v107 - v67), v63, &a17);
        v119 = v67;
        sub_1C9789D48(&STACK[0x430], v115, v67, v117, v84, v116, 0);
        v85 = (v107 - v67);
        if (v84 >= 16)
        {
          v86 = v60 + 8;
          v87 = (v85 >> 3) - 1;
          v88 = &a17;
          v89 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v52 + 9))(v86, v55, v89, v88, v63);
            v88 += 16;
            ++v89;
            v86 += 8;
            --v87;
          }
          while (v87);
        }
        sub_1C9789DF0((int *)&STACK[0x430]);
        v90 = v52[30];
        if ((int)v120 > (v90 == 0))
        {
          v91 = v90 == 0;
          v92 = v120 - v91;
          v93 = &a33 + 2 * v91;
          v94 = &STACK[0x3E0] + v91;
          v95 = v60 + v112 * v91;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v95, v55, v94, v93, v85);
            v93 += 2;
            ++v94;
            v95 += v112;
            --v92;
          }
          while (v92);
        }
        sub_1C9789DF0((int *)&STACK[0x430]);
        sub_1C9789D48(&STACK[0x430], v115, v119, v117, v85, v116, 1u);
        if ((int)v85 >= 24)
        {
          v96 = v114 + 16;
          v97 = ((v85 + 8) >> 4) - 1;
          v98 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v96, v56, v98, v63);
            v98 += 4;
            v96 += 16;
            --v97;
          }
          while (v97);
        }
        sub_1C9789DF0((int *)&STACK[0x430]);
        v99 = v52[30];
        if ((int)v120 > (v99 == 0))
        {
          v100 = v99 == 0;
          v101 = ((int)v85 >> 1);
          v102 = v120 - v100;
          v103 = &STACK[0x2A0] + 4 * v100;
          v104 = v114 + vars8 * v100;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v104, v56, v103, v101);
            v103 += 4;
            v104 += vars8;
            --v102;
          }
          while (v102);
        }
        result = sub_1C9789DF0((int *)&STACK[0x430]);
        LODWORD(v58) = v52[30];
        v51 = v106;
      }
      v58 = (v58 + v63);
      v52[30] = v58;
      v57 = *v51;
    }
    while ((int)v58 < *v51);
  }
  v105 = *(_DWORD *)(v108 + 524);
  if (v105 >= (int)v58)
    v105 = v58;
  *v51 = v105;
  if (v52[30] < *(_DWORD *)(v108 + 524))
  {
    if (v105 <= 4)
      v105 = 4;
    *v51 = v105 - 4;
  }
  return result;
}

uint64_t sub_1C9789210(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t vars0;
  unint64_t *vars8;
  uint64_t v116;
  unint64_t *v117;
  uint64_t *v118;
  int v119;
  uint64_t v120;
  signed int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _BOOL4 v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;

  v61 = result;
  v62 = *(_QWORD *)(a2 + 8);
  v63 = *(_QWORD *)(a2 + 16);
  v64 = *(_DWORD *)(v62 + 520);
  v65 = *(_DWORD *)(v62 + 524);
  v66 = *(_QWORD *)(v62 + 416);
  v67 = *(_QWORD *)(v62 + 424);
  v131 = v62;
  v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(_BYTE *)(v63 + 2113);
  v69 = a3 << v62;
  v70 = a4 << v62;
  v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    v72 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (v72)
      v74 = v71;
    else
      v74 = 0;
    v75 = v74 + v68;
    if (v69 <= 63)
      v76 = 0;
    else
      v76 = (v69 - 1) & 0xFFFFFFC0;
    v121 = v76;
    v124 = v64 - v76;
    v77 = v75 + v73 - 8;
    if (v75 + v73 < 8)
      v77 = 0;
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0)
      return result;
    v78 = v70 < 16;
    if (v70 >= 16)
      v73 = v70 - 16;
    else
      v73 = 0;
    if (!v78)
      v71 = 0;
    v75 = v71 + v68;
    if (v69 >= 64)
      v79 = v69 - 64;
    else
      v79 = 0;
    v121 = v79;
    if (v69 >= 64)
      v69 = 64;
    v124 = v69;
    v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4)
      v75 = v80;
  }
  if (v75 >= 1)
  {
    v81 = 0;
    v110 = v73;
    v123 = 8 * v66;
    v82 = 8 * v67;
    v111 = v75;
    v120 = a2;
    v119 = v64;
    v112 = v75;
    do
    {
      v113 = v81;
      if (v75 - (int)v81 >= 64)
        v83 = 64;
      else
        v83 = (v75 - v81);
      if (v124 >= 1)
      {
        v84 = 0;
        v134 = v81 + v110;
        v85 = (_DWORD)v81 + (_DWORD)v110 == 0;
        v132 = ((int)v83 >> 3);
        v133 = (_DWORD)v81 + (_DWORD)v110 == 0;
        v122 = v132 - v85;
        v117 = &STACK[0x8C0] + v85;
        v118 = &a45 + 2 * v85;
        vars8 = &STACK[0x780] + 4 * v85;
        v116 = v123 * v85;
        vars0 = v82 * v85;
        do
        {
          if (v124 - (int)v84 >= 64)
            v86 = 64;
          else
            v86 = (v124 - v84);
          v87 = v84 + v121;
          v130 = v84;
          v127 = v86 + v121 + v84;
          v88 = *(_QWORD *)(v131 + 416);
          v125 = *(_QWORD *)(v131 + 400);
          v89 = *(_BYTE *)(v131 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v134, v86, v83, &a29);
          v72 = v127 < v64;
          v126 = v127 < v64;
          v128 = v87;
          v90 = (v87 + v88 * v134) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v72)
            v91 = (v91 + 1);
          else
            v91 = v91;
          if ((int)v91 >= 2)
          {
            v92 = v91 - 1;
            v93 = v125 + v90 + 8;
            v94 = &a29;
            v95 = &STACK[0x880];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 8;
              --v92;
            }
            while (v92);
          }
          if ((int)v132 > v133)
          {
            v96 = v117;
            v97 = v125 + v116 + v90;
            v98 = v118;
            v99 = v122;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v123;
              --v99;
            }
            while (v99);
          }
          v100 = (v128 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v131 + 424) * v134;
          v129 = *(_QWORD *)(v131 + 408);
          v101 = v100 << *(_BYTE *)(v131 + 531);
          v102 = (v126 + (((int)v86 + 8) >> 4));
          v82 = 8 * v67;
          if ((int)v102 >= 2)
          {
            v103 = v102 - 1;
            v104 = v129 + v101 + 16;
            v105 = &a61;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v104, v67, v105, v83);
              v105 += 4;
              v104 += 16;
              --v103;
            }
            while (v103);
          }
          if ((int)v132 > v133)
          {
            v106 = ((int)v86 >> 1);
            v107 = vars8;
            v108 = v129 + vars0 + v101;
            v109 = v122;
            do
            {
              result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v108, v67, v107, v106);
              v107 += 4;
              v108 += 8 * v67;
              --v109;
            }
            while (v109);
          }
          v84 = v130 + 64;
          a2 = v120;
          v64 = v119;
        }
        while (v130 + 64 < v124);
      }
      v81 = v113 + 64;
      v75 = v112;
    }
    while (v113 + 64 < v111);
  }
  return result;
}

int *sub_1C9789664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  int *result;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t *v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t *vars0;
  unint64_t *vars8;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  signed int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _BOOL4 v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v69 = v66;
  v70 = result;
  STACK[0x94D8] = *MEMORY[0x1E0C80C00];
  v71 = *(_QWORD *)(v66 + 8);
  v72 = *(_QWORD *)(v66 + 16);
  v73 = *(_DWORD *)(v71 + 520);
  v74 = *(_DWORD *)(v71 + 524);
  v75 = *(_QWORD *)(v71 + 416);
  v76 = *(_QWORD *)(v71 + 424);
  v143 = v71;
  v77 = *(unsigned __int8 *)(v72 + 2117);
  LOBYTE(v71) = *(_BYTE *)(v72 + 2113);
  v78 = v67 << v71;
  v79 = v68 << v71;
  v80 = v79 - 16;
  v130 = v73;
  if (*(_DWORD *)(v72 + 2120) - 1 == v67)
  {
    v81 = v79 < 16;
    if (v79 >= 16)
      v82 = v79 - 16;
    else
      v82 = 0;
    if (v81)
      v83 = v80;
    else
      v83 = 0;
    v84 = v83 + v77;
    if (v78 <= 63)
      v85 = 0;
    else
      v85 = (v78 - 1) & 0xFFFFFFC0;
    v131 = v85;
    v134 = v73 - v85;
    v86 = v84 + v82 - 8;
    if (v84 + v82 < 8)
      v86 = 0;
    result[30] = v86;
    if (*(_DWORD *)(*(_QWORD *)(v66 + 16) + 2124) - 1 == v68)
    {
      v84 = v74 - v82;
      result[30] = v74;
    }
  }
  else
  {
    if (!v67 || (v78 & 0x3F) != 0)
      return result;
    v87 = v79 < 16;
    if (v79 >= 16)
      v82 = v79 - 16;
    else
      v82 = 0;
    if (!v87)
      v80 = 0;
    v84 = v80 + v77;
    if (v78 >= 64)
      v88 = v78 - 64;
    else
      v88 = 0;
    v131 = v88;
    if (v78 >= 64)
      v78 = 64;
    v134 = v78;
    v89 = v74 - v82;
    if (*(_DWORD *)(v72 + 2124) - 1 == v68)
      v84 = v89;
  }
  if (v84 >= 1)
  {
    v90 = 0;
    vars8 = &STACK[0x420];
    v122 = v82;
    vars0 = &a65;
    v133 = 8 * v75;
    v91 = 8 * v76;
    v121 = v84;
    v142 = v66;
    v123 = v84;
    do
    {
      if (v84 - (int)v90 >= 64)
        v92 = 64;
      else
        v92 = (v84 - v90);
      v124 = v90;
      v93 = v90 + v122 - 8;
      v148 = v90 + v122;
      if (!((_DWORD)v90 + (_DWORD)v122))
        v93 = 0;
      v147 = v93;
      v94 = v92 + 8;
      if (!((_DWORD)v90 + (_DWORD)v122))
        v94 = v92;
      v146 = v94;
      if (v134 >= 1)
      {
        v95 = 0;
        v96 = (_DWORD)v148 == 0;
        v144 = ((int)v92 >> 3);
        v145 = v148 == 0;
        v132 = v144 - v96;
        v128 = v91 * v96;
        v129 = v133 * v96;
        v127 = &STACK[0x320] + 4 * v96;
        do
        {
          if (v134 - (int)v95 >= 64)
            v97 = 64;
          else
            v97 = (v134 - v95);
          v98 = v95 + v131;
          v99 = v97 + v131 + v95;
          v139 = *(_QWORD *)(v143 + 416);
          v141 = v95;
          v135 = *(_QWORD *)(v143 + 400);
          v100 = *(_BYTE *)(v143 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v70 + 6))(v69, v98, v148, v97, v92, &a33);
          v138 = v99 < v130;
          if (v99 >= v130)
            v101 = v97;
          else
            v101 = v97 + 8;
          v102 = (v98 + v139 * v148) << v100;
          v103 = (int)v97 >> 3;
          if (v99 >= v130)
            v104 = v103;
          else
            v104 = v103 + 1;
          v140 = v98;
          v137 = v101;
          sub_1C9789D48(&STACK[0x4B0], v69, v98, v147, v101, v146, 0);
          if ((int)v104 >= 2)
          {
            v105 = v104 - 1;
            v106 = v135 + v102 + 8;
            v107 = &a33;
            v108 = &STACK[0x420];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v70 + 9))(v106, v75, v108, v107, v92);
              v107 += 16;
              ++v108;
              v106 += 8;
              --v105;
            }
            while (v105);
          }
          sub_1C9789DF0((int *)&STACK[0x4B0]);
          if ((int)v144 > v145)
          {
            v109 = &STACK[0x460] + ((_DWORD)v148 == 0);
            v110 = v135 + v129 + v102;
            v111 = &a49 + 2 * ((_DWORD)v148 == 0);
            v112 = v132;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v70 + 10))(v110, v75, v109, v111, v97);
              v111 += 2;
              ++v109;
              v110 += v133;
              --v112;
            }
            while (v112);
          }
          sub_1C9789DF0((int *)&STACK[0x4B0]);
          v136 = *(_QWORD *)(v143 + 408);
          v113 = ((v140 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v143 + 424) * v148) << *(_BYTE *)(v143 + 531);
          sub_1C9789D48(&STACK[0x4B0], v142, v140, v147, v137, v146, 1u);
          v114 = (v138 + (((int)v97 + 8) >> 4));
          v91 = 8 * v76;
          if ((int)v114 >= 2)
          {
            v115 = v114 - 1;
            v116 = v136 + v113 + 16;
            v117 = &a65;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v70 + 11))(v116, v76, v117, v92);
              v117 += 4;
              v116 += 16;
              --v115;
            }
            while (v115);
          }
          sub_1C9789DF0((int *)&STACK[0x4B0]);
          if ((int)v144 > v145)
          {
            v118 = v127;
            v119 = v136 + v128 + v113;
            v120 = v132;
            do
            {
              (*((void (**)(unint64_t, uint64_t, unint64_t *, _QWORD))v70 + 12))(v119, v76, v118, ((int)v97 >> 1));
              v118 += 4;
              v119 += 8 * v76;
              --v120;
            }
            while (v120);
          }
          result = sub_1C9789DF0((int *)&STACK[0x4B0]);
          v69 = v142;
          v95 = v141 + 64;
        }
        while (v141 + 64 < v134);
      }
      v90 = v124 + 64;
      v84 = v123;
    }
    while (v124 + 64 < v121);
  }
  return result;
}

uint64_t sub_1C9789B7C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD v30[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7)
    v12 = (v7 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v8)
    v13 = (v8 - v11);
  else
    v13 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  v15 = *(_QWORD *)(v6 + 416);
  v28 = (v15 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v29 = *(_QWORD *)(v6 + 400);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v30[10 * ((_DWORD)v10 == 0)];
    v19 = &v30[5 * ((_DWORD)v10 == 0) + 296];
    v20 = v29 + v28 + 8 * ((_DWORD)v10 == 0) - 8 * v15;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v30[10 * v22 + 80];
    v26 = &v30[5 * v22 + 336];
    v27 = v28 + 8 * v15 * v22 + v29 - 8;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

_QWORD *sub_1C9789D48(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;

  __dst[4608] = a2;
  *((_DWORD *)__dst + 9218) = a3;
  *((_DWORD *)__dst + 9219) = a4;
  *((_DWORD *)__dst + 9220) = a5;
  *((_DWORD *)__dst + 9221) = a6;
  *((_DWORD *)__dst + 9222) = a7;
  if (a6 >= 1)
  {
    v7 = (char *)__dst;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 + 8 * a7;
    v10 = *(_QWORD *)(v9 + 416);
    v11 = (char *)(*(_QWORD *)(v9 + 400) + ((v10 * a4 + (a3 >> (a7 != 0) << a7)) << *(_BYTE *)(v8 + 531)));
    v12 = a5;
    v13 = a6;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v10;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

int *sub_1C9789DF0(int *result)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;

  v1 = result + 9216;
  v2 = result[9221];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[9222];
    v5 = *(_QWORD *)(*(_QWORD *)v1 + 8);
    v6 = v5 + 8 * v4;
    v7 = *(_QWORD *)(v6 + 416);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 19);
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 283);
    v10 = result[9220];
    v11 = v10;
    v12 = (_QWORD *)(*(_QWORD *)(v6 + 400)
                   + ((v7 * result[9219] + (result[9218] >> ((_DWORD)v4 != 0) << v4)) << *(_BYTE *)(v5 + 531)));
    v13 = 8 * v10;
    do
    {
      if (v10 >= 1)
      {
        v14 = 0;
        v15 = v12;
        v16 = result;
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)v1 + 8);
          v18 = *(_QWORD *)(v17 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v14) >> 3);
          v19 = *(_QWORD *)(v17 + 776);
          if (v8 && (*(_WORD *)(v19 + 2 * v18) & 0x100) != 0 || v9 && (*(_WORD *)(v19 + 2 * v18) & 0xC) != 0)
          {
            v20 = v15;
            v21 = v16;
            v22 = 8;
            do
            {
              *v20 = *(_QWORD *)v21;
              v21 = (int *)((char *)v21 + v11);
              v20 = (_QWORD *)((char *)v20 + v7);
              --v22;
            }
            while (v22);
            v10 = v1[4];
          }
          v14 += 8;
          v16 += 2;
          ++v15;
        }
        while (v14 < v10);
        v2 = v1[5];
      }
      v12 += v7;
      result = (int *)((char *)result + v13);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_1C9789F18(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  int v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _BOOL8 v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t *v84;
  int v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  _BOOL8 v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  int v98;
  int *v99;
  int v100;
  uint64_t v101;
  uint64_t vars0;
  uint64_t *vars8;
  uint64_t v104;
  signed int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;

  v49 = a3;
  v50 = result;
  v51 = *(_QWORD *)(a2 + 8);
  v100 = *(_DWORD *)(v51 + 520);
  v52 = *(_QWORD *)(v51 + 416);
  v53 = *(_QWORD *)(v51 + 424);
  v54 = *a3;
  v101 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    v106 = (v100 - 1) & 0xFFFFFFC0;
    vars0 = v53;
    vars8 = &a49;
    v108 = 16 * v52;
    v104 = 16 * v53;
    v99 = v49;
    do
    {
      v56 = *(_BYTE *)(v101 + 531);
      v57 = *(_QWORD *)(v101 + 400) + ((*(_QWORD *)(v101 + 416) * v55) << v56);
      v58 = *(_QWORD *)(v101 + 408) + ((*(_QWORD *)(v101 + 424) * ((uint64_t)v55 >> 1)) << v56);
      v59 = v54 - v55;
      if (v59 >= 64)
        v60 = 64;
      else
        v60 = v59;
      v61 = (int)v60 >> 3;
      v109 = ((int)v60 >> 3);
      v110 = (((int)v60 + 8) >> 4);
      v107 = v60;
      v62 = 0;
      if (v106 >= 1)
      {
        v63 = ((int)v60 >> 1);
        do
        {
          v113 = v58;
          v111 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          v64 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v57 + i, v52, (char *)&STACK[0x7C0] + v64, (char *)&STACK[0x7C0] + i - 784, v60);
            v64 += 8;
          }
          v66 = *(_DWORD *)(v50 + 120);
          if (v61 > (v66 == 0))
          {
            v67 = v66 == 0;
            v68 = v109 - v67;
            v69 = &a33 + 2 * v67;
            v70 = &STACK[0x800] + v67;
            v71 = v57 + v108 * v67;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v71, v52, v70, v69, 64);
              v69 += 2;
              ++v70;
              v71 += v108;
              --v68;
            }
            while (v68);
          }
          v72 = 0;
          v53 = vars0;
          do
          {
            v73 = v72 + 32;
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v50 + 88))(v72 + 32 + v113, vars0, (char *)&a49 + v72, v63);
            v72 = v73;
          }
          while (v73 != 128);
          v74 = *(_DWORD *)(v50 + 120);
          if ((int)v110 > (v74 == 0))
          {
            v75 = v74 == 0;
            v76 = v110 - v75;
            v77 = &STACK[0x6C0] + 4 * v75;
            v78 = v113 + v104 * v75;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v78, vars0, v77, 32);
              v77 += 4;
              v78 += v104;
              --v76;
            }
            while (v76);
          }
          v57 += 128;
          v58 = v113 + 128;
          v62 = v111 + 64;
          v60 = v107;
          v61 = v109;
        }
        while (v111 + 64 < v106);
        v55 = *(_DWORD *)(v50 + 120);
      }
      v79 = v100 - v62;
      if (v100 != v62)
      {
        v114 = v58;
        result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        v112 = v79;
        if (v79 >= 16)
        {
          v80 = v60;
          v81 = v57 + 16;
          v82 = (v79 >> 3) - 1;
          v83 = &a17;
          v84 = &STACK[0x7C0];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v81, v52, v84, v83, v80);
            v83 += 16;
            ++v84;
            v81 += 16;
            --v82;
          }
          while (v82);
        }
        v85 = *(_DWORD *)(v50 + 120);
        if ((int)v109 > (v85 == 0))
        {
          v86 = v85 == 0;
          v87 = v109 - v86;
          v88 = &a33 + 2 * v86;
          v89 = &STACK[0x800] + v86;
          v90 = v57 + v108 * v86;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v50 + 80))(v90, v52, v89, v88, v112);
            v88 += 2;
            ++v89;
            v90 += v108;
            --v87;
          }
          while (v87);
        }
        if (v112 >= 24)
        {
          v91 = v114 + 32;
          v92 = ((v112 + 8) >> 4) - 1;
          v93 = &a49;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v50 + 88))(v91, v53, v93, (v107 >> 1));
            v93 += 4;
            v91 += 32;
            --v92;
          }
          while (v92);
        }
        v55 = *(_DWORD *)(v50 + 120);
        LODWORD(v60) = v107;
        if ((int)v110 > (v55 == 0))
        {
          v94 = v55 == 0;
          v95 = v110 - v94;
          v96 = &STACK[0x6C0] + 4 * v94;
          v97 = v114 + v104 * v94;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, _QWORD))(v50 + 96))(v97, v53, v96, (v112 >> 1));
            v96 += 4;
            v97 += v104;
            --v95;
          }
          while (v95);
          v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v60;
      *(_DWORD *)(v50 + 120) = v55;
      v49 = v99;
      v54 = *v99;
    }
    while (v55 < *v99);
  }
  v98 = *(_DWORD *)(v101 + 524);
  if (v98 >= v55)
    v98 = v55;
  *v49 = v98;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v101 + 524))
  {
    if (v98 <= 4)
      v98 = 4;
    *v49 = v98 - 4;
  }
  return result;
}

int *sub_1C978A3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *result;
  uint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  int v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _BOOL8 v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t *v90;
  int v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  int v100;
  _BOOL8 v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  int v105;
  int *v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t *vars0;
  uint64_t vars8;
  uint64_t v113;
  signed int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v52 = v51;
  v53 = v50;
  v54 = result;
  v55 = *(_QWORD *)(v50 + 8);
  v107 = *(_DWORD *)(v55 + 520);
  v56 = *(_QWORD *)(v55 + 416);
  v57 = *(_QWORD *)(v55 + 424);
  v58 = *v51;
  v108 = v55;
  if (*v51 < *(_DWORD *)(v55 + 524))
  {
    v58 &= 0xFFFFFFF0;
    *v51 = v58;
  }
  v59 = result[30];
  if ((int)v59 < v58)
  {
    v114 = (v107 - 1) & 0xFFFFFFC0;
    v110 = v57;
    vars0 = &a49;
    vars8 = 16 * v57;
    v113 = 16 * v56;
    v106 = v52;
    v118 = v50;
    do
    {
      v60 = *(_BYTE *)(v108 + 531);
      v61 = *(_QWORD *)(v108 + 400) + ((*(_QWORD *)(v108 + 416) * (int)v59) << v60);
      v62 = *(_QWORD *)(v108 + 408) + ((*(_QWORD *)(v108 + 424) * ((uint64_t)(int)v59 >> 1)) << v60);
      v63 = v58 - v59;
      if (v63 >= 64)
        v64 = 64;
      else
        v64 = v63;
      if ((_DWORD)v59)
        v65 = v59 - 8;
      else
        v65 = 0;
      if ((_DWORD)v59)
        v66 = v64 + 8;
      else
        v66 = v64;
      v119 = v66;
      v120 = v65;
      v67 = (int)v64 >> 3;
      v116 = ((int)v64 >> 3);
      v117 = (((int)v64 + 8) >> 4);
      v115 = v64;
      v68 = 0;
      if (v114 >= 1)
      {
        v69 = ((int)v64 >> 1);
        do
        {
          v123 = v62;
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v54 + 6))(v53, v68, v54[30], 64, v64, &a17);
          v121 = v68;
          sub_1C978BD08(&STACK[0x420], v53, v68, v120, 72, v119, 0);
          v70 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v54 + 9))(v61 + i, v56, (char *)&STACK[0x3A0] + v70, (char *)&STACK[0x3A0] + i - 784, v64);
            v70 += 8;
          }
          sub_1C978BDBC((int *)&STACK[0x420]);
          v72 = v54[30];
          if (v67 > (v72 == 0))
          {
            v73 = v72 == 0;
            v74 = v116 - v73;
            v75 = &a33 + 2 * v73;
            v76 = &STACK[0x3E0] + v73;
            v77 = v61 + v113 * v73;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v54 + 10))(v77, v56, v76, v75, 64);
              v75 += 2;
              ++v76;
              v77 += v113;
              --v74;
            }
            while (v74);
          }
          sub_1C978BDBC((int *)&STACK[0x420]);
          sub_1C978BD08(&STACK[0x420], v118, v121, v120, 72, v119, 1u);
          v78 = 0;
          v57 = v110;
          do
          {
            v79 = v78 + 32;
            (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v54 + 11))(v78 + 32 + v123, v110, (char *)&a49 + v78, v69);
            v78 = v79;
          }
          while (v79 != 128);
          sub_1C978BDBC((int *)&STACK[0x420]);
          v80 = v54[30];
          if ((int)v117 > (v80 == 0))
          {
            v81 = v80 == 0;
            v82 = v117 - v81;
            v83 = &STACK[0x2A0] + 4 * v81;
            v84 = v123 + vars8 * v81;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v54 + 12))(v84, v110, v83, 32);
              v83 += 4;
              v84 += vars8;
              --v82;
            }
            while (v82);
          }
          result = sub_1C978BDBC((int *)&STACK[0x420]);
          v61 += 128;
          v62 = v123 + 128;
          v68 = (v121 + 64);
          v64 = v115;
          v53 = v118;
          v67 = v116;
        }
        while ((int)v68 < v114);
        v59 = v54[30];
      }
      v85 = v107 - v68;
      if (v107 == (_DWORD)v68)
      {
        v52 = v106;
      }
      else
      {
        v124 = v62;
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v54 + 6))(v53, v68, v59, (v107 - v68), v64, &a17);
        v122 = v68;
        sub_1C978BD08(&STACK[0x420], v53, v68, v120, v85, v119, 0);
        v109 = v107 - v68;
        if (v85 >= 16)
        {
          v86 = v64;
          v87 = v61 + 16;
          v88 = (v109 >> 3) - 1;
          v89 = &a17;
          v90 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v54 + 9))(v87, v56, v90, v89, v86);
            v89 += 16;
            ++v90;
            v87 += 16;
            --v88;
          }
          while (v88);
        }
        sub_1C978BDBC((int *)&STACK[0x420]);
        v91 = v54[30];
        if ((int)v116 > (v91 == 0))
        {
          v92 = v91 == 0;
          v93 = v116 - v92;
          v94 = &a33 + 2 * v92;
          v95 = &STACK[0x3E0] + v92;
          v96 = v61 + v113 * v92;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))v54 + 10))(v96, v56, v95, v94, v109);
            v94 += 2;
            ++v95;
            v96 += v113;
            --v93;
          }
          while (v93);
        }
        sub_1C978BDBC((int *)&STACK[0x420]);
        sub_1C978BD08(&STACK[0x420], v118, v122, v120, v109, v119, 1u);
        LODWORD(v64) = v115;
        if (v109 >= 24)
        {
          v97 = v124 + 32;
          v98 = ((v109 + 8) >> 4) - 1;
          v99 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))v54 + 11))(v97, v57, v99, (v115 >> 1));
            v99 += 4;
            v97 += 32;
            --v98;
          }
          while (v98);
        }
        sub_1C978BDBC((int *)&STACK[0x420]);
        v100 = v54[30];
        if ((int)v117 > (v100 == 0))
        {
          v101 = v100 == 0;
          v102 = v117 - v101;
          v103 = &STACK[0x2A0] + 4 * v101;
          v104 = v124 + vars8 * v101;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, _QWORD))v54 + 12))(v104, v57, v103, (v109 >> 1));
            v103 += 4;
            v104 += vars8;
            --v102;
          }
          while (v102);
        }
        result = sub_1C978BDBC((int *)&STACK[0x420]);
        LODWORD(v59) = v54[30];
        v52 = v106;
        v53 = v118;
      }
      v59 = (v59 + v64);
      v54[30] = v59;
      v58 = *v52;
    }
    while ((int)v59 < *v52);
  }
  v105 = *(_DWORD *)(v108 + 524);
  if (v105 >= (int)v59)
    v105 = v59;
  *v52 = v105;
  if (v54[30] < *(_DWORD *)(v108 + 524))
  {
    if (v105 <= 4)
      v105 = 4;
    *v52 = v105 - 4;
  }
  return result;
}

uint64_t sub_1C978A994(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  BOOL v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  BOOL v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t *vars0;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  signed int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  _BOOL4 v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;

  v65 = result;
  v66 = *(_QWORD *)(a2 + 8);
  v67 = *(_QWORD *)(a2 + 16);
  v68 = *(_DWORD *)(v66 + 520);
  v69 = *(_DWORD *)(v66 + 524);
  v70 = *(_QWORD *)(v66 + 416);
  v71 = *(_QWORD *)(v66 + 424);
  v137 = v66;
  v72 = *(unsigned __int8 *)(v67 + 2117);
  LOBYTE(v66) = *(_BYTE *)(v67 + 2113);
  v73 = a3 << v66;
  v74 = a4 << v66;
  v75 = v74 - 16;
  if (*(_DWORD *)(v67 + 2120) - 1 == a3)
  {
    v76 = v74 < 16;
    if (v74 >= 16)
      v77 = v74 - 16;
    else
      v77 = 0;
    if (v76)
      v78 = v75;
    else
      v78 = 0;
    v79 = v78 + v72;
    if (v73 <= 63)
      v80 = 0;
    else
      v80 = (v73 - 1) & 0xFFFFFFC0;
    v124 = v80;
    v129 = v68 - v80;
    v81 = v79 + v77 - 8;
    if (v79 + v77 < 8)
      v81 = 0;
    *(_DWORD *)(result + 120) = v81;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v79 = v69 - v77;
      *(_DWORD *)(result + 120) = v69;
    }
  }
  else
  {
    if (!a3 || (v73 & 0x3F) != 0)
      return result;
    v82 = v74 < 16;
    if (v74 >= 16)
      v77 = v74 - 16;
    else
      v77 = 0;
    if (!v82)
      v75 = 0;
    v79 = v75 + v72;
    if (v73 >= 64)
      v83 = v73 - 64;
    else
      v83 = 0;
    v124 = v83;
    if (v73 >= 64)
      v73 = 64;
    v129 = v73;
    v84 = v69 - v77;
    if (*(_DWORD *)(v67 + 2124) - 1 == a4)
      v79 = v84;
  }
  if (v79 >= 1)
  {
    v85 = 0;
    v113 = v77;
    v128 = 16 * v70;
    v86 = 16 * v71;
    v114 = v79;
    v123 = a2;
    v122 = v68;
    v115 = v79;
    do
    {
      v116 = v85;
      if (v79 - (int)v85 >= 64)
        v87 = 64;
      else
        v87 = (v79 - v85);
      if (v129 >= 1)
      {
        v88 = 0;
        v127 = v85 + v113;
        v89 = (_DWORD)v85 + (_DWORD)v113 == 0;
        v126 = ((int)v87 >> 3);
        v121 = v126 - v89;
        v120 = v128 * v89;
        v125 = (((int)v87 + 8) >> 4);
        v119 = v125 - v89;
        v118 = v86 * v89;
        v138 = (_DWORD)v116 + (_DWORD)v113 == 0;
        vars0 = &STACK[0x7C0] + 4 * v89;
        do
        {
          if (v129 - (int)v88 >= 64)
            v90 = 64;
          else
            v90 = (v129 - v88);
          v91 = v88 + v124;
          v136 = v88;
          v133 = v90 + v124 + v88;
          v92 = *(_QWORD *)(v137 + 416);
          v130 = *(_QWORD *)(v137 + 400);
          v93 = *(_BYTE *)(v137 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v65 + 48))(a2, v91, v127, v90, v87, &a33);
          v76 = v133 < v68;
          v132 = v133 < v68;
          v134 = v91;
          v94 = (v91 + v92 * v127) << v93;
          LODWORD(v95) = (int)v90 >> 3;
          if (v76)
            v95 = (v95 + 1);
          else
            v95 = v95;
          if ((int)v95 >= 2)
          {
            v96 = v95 - 1;
            v97 = v130 + v94 + 16;
            v98 = &a33;
            v99 = &STACK[0x8C0];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v65 + 72))(v97, v70, v99, v98, v87);
              v98 += 16;
              ++v99;
              v97 += 16;
              --v96;
            }
            while (v96);
          }
          if ((int)v126 > v138)
          {
            v100 = &a49 + 2 * ((_DWORD)v116 + (_DWORD)v113 == 0);
            v101 = v130 + v120 + v94;
            v102 = &STACK[0x900] + ((_DWORD)v116 + (_DWORD)v113 == 0);
            v103 = v121;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v65 + 80))(v101, v70, v102, v100, v90);
              v100 += 2;
              ++v102;
              v101 += v128;
              --v103;
            }
            while (v103);
          }
          v104 = (v134 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v137 + 424) * ((uint64_t)((int)v116 + (int)v113) >> 1);
          v135 = *(_QWORD *)(v137 + 408);
          v131 = v104 << *(_BYTE *)(v137 + 531);
          v105 = (v132 + (((int)v90 + 8) >> 4));
          v86 = 16 * v71;
          if ((int)v105 >= 2)
          {
            v106 = v105 - 1;
            v107 = v135 + v131 + 32;
            v108 = &a65;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v65 + 88))(v107, v71, v108, ((int)v87 >> 1));
              v108 += 4;
              v107 += 32;
              --v106;
            }
            while (v106);
          }
          if ((int)v125 > v138)
          {
            v109 = ((int)v90 >> 1);
            v110 = v119;
            v111 = v135 + v118 + v131;
            v112 = vars0;
            do
            {
              result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v65 + 96))(v111, v71, v112, v109);
              v112 += 4;
              v111 += 16 * v71;
              --v110;
            }
            while (v110);
          }
          v88 = v136 + 64;
          a2 = v123;
          v68 = v122;
        }
        while (v136 + 64 < v129);
      }
      v85 = v116 + 64;
      v79 = v115;
    }
    while (v116 + 64 < v114);
  }
  return result;
}

int *sub_1C978AE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  int *result;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  BOOL v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t *vars0;
  unint64_t *vars8;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  signed int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _BOOL4 v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v73 = v70;
  v74 = result;
  v75 = *(_QWORD *)(v70 + 8);
  v76 = *(_QWORD *)(v70 + 16);
  v77 = *(_DWORD *)(v75 + 520);
  v78 = *(_DWORD *)(v75 + 524);
  v79 = *(_QWORD *)(v75 + 416);
  v80 = *(_QWORD *)(v75 + 424);
  v150 = v75;
  v81 = *(unsigned __int8 *)(v76 + 2117);
  LOBYTE(v75) = *(_BYTE *)(v76 + 2113);
  v82 = v71 << v75;
  v83 = v72 << v75;
  v84 = v83 - 16;
  v134 = v77;
  if (*(_DWORD *)(v76 + 2120) - 1 == v71)
  {
    v85 = v83 < 16;
    if (v83 >= 16)
      v86 = v83 - 16;
    else
      v86 = 0;
    if (v85)
      v87 = v84;
    else
      v87 = 0;
    v88 = v87 + v81;
    if (v82 <= 63)
      v89 = 0;
    else
      v89 = (v82 - 1) & 0xFFFFFFC0;
    v135 = v89;
    v139 = v77 - v89;
    v90 = v88 + v86 - 8;
    if (v88 + v86 < 8)
      v90 = 0;
    result[30] = v90;
    if (*(_DWORD *)(*(_QWORD *)(v70 + 16) + 2124) - 1 == v72)
    {
      v88 = v78 - v86;
      result[30] = v78;
    }
  }
  else
  {
    if (!v71 || (v82 & 0x3F) != 0)
      return result;
    v91 = v83 < 16;
    if (v83 >= 16)
      v86 = v83 - 16;
    else
      v86 = 0;
    if (!v91)
      v84 = 0;
    v88 = v84 + v81;
    if (v82 >= 64)
      v92 = v82 - 64;
    else
      v92 = 0;
    v135 = v92;
    if (v82 >= 64)
      v82 = 64;
    v139 = v82;
    v93 = v78 - v86;
    if (*(_DWORD *)(v76 + 2124) - 1 == v72)
      v88 = v93;
  }
  if (v88 >= 1)
  {
    v94 = 0;
    vars0 = &STACK[0x440];
    v125 = v86;
    v138 = 16 * v79;
    v95 = 16 * v80;
    v124 = v88;
    v149 = v70;
    v126 = v88;
    do
    {
      if (v88 - (int)v94 >= 64)
        v96 = 64;
      else
        v96 = (v88 - v94);
      v127 = v94;
      v97 = v94 + v125 - 8;
      v140 = v94 + v125;
      if (!((_DWORD)v94 + (_DWORD)v125))
        v97 = 0;
      v153 = v97;
      if ((_DWORD)v94 + (_DWORD)v125)
        v98 = v96 + 8;
      else
        v98 = v96;
      v152 = v98;
      if (v139 >= 1)
      {
        v99 = 0;
        v100 = (_DWORD)v140 == 0;
        v137 = ((int)v96 >> 3);
        v133 = v137 - v100;
        v132 = v138 * v100;
        v136 = (((int)v96 + 8) >> 4);
        v131 = v136 - v100;
        v130 = v95 * v100;
        v151 = v140 == 0;
        vars8 = &STACK[0x340] + 4 * v100;
        do
        {
          if (v139 - (int)v99 >= 64)
            v101 = 64;
          else
            v101 = (v139 - v99);
          v102 = v99 + v135;
          v103 = v101 + v135 + v99;
          v146 = *(_QWORD *)(v150 + 416);
          v148 = v99;
          v142 = *(_QWORD *)(v150 + 400);
          v104 = *(_BYTE *)(v150 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v74 + 6))(v73, v102, v140, v101, v96, &a37);
          v145 = v103 < v134;
          if (v103 >= v134)
            v105 = v101;
          else
            v105 = v101 + 8;
          v106 = (v102 + v146 * v140) << v104;
          v107 = (int)v101 >> 3;
          if (v103 >= v134)
            v108 = v107;
          else
            v108 = v107 + 1;
          v147 = v102;
          v144 = v105;
          sub_1C978BD08(&STACK[0x4C0], v73, v102, v153, v105, v152, 0);
          if ((int)v108 >= 2)
          {
            v109 = v108 - 1;
            v110 = v142 + v106 + 16;
            v111 = &a37;
            v112 = &STACK[0x440];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v74 + 9))(v110, v79, v112, v111, v96);
              v111 += 16;
              ++v112;
              v110 += 16;
              --v109;
            }
            while (v109);
          }
          sub_1C978BDBC((int *)&STACK[0x4C0]);
          if ((int)v137 > v151)
          {
            v113 = v142 + v132 + v106;
            v114 = &STACK[0x480] + ((_DWORD)v140 == 0);
            v115 = &a53 + 2 * ((_DWORD)v140 == 0);
            v116 = v133;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v74 + 10))(v113, v79, v114, v115, v101);
              v115 += 2;
              ++v114;
              v113 += v138;
              --v116;
            }
            while (v116);
          }
          sub_1C978BDBC((int *)&STACK[0x4C0]);
          v141 = ((v147 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v150 + 424) * ((uint64_t)(int)v140 >> 1)) << *(_BYTE *)(v150 + 531);
          v143 = *(_QWORD *)(v150 + 408);
          sub_1C978BD08(&STACK[0x4C0], v149, v147, v153, v144, v152, 1u);
          v117 = (v145 + (((int)v101 + 8) >> 4));
          v95 = 16 * v80;
          if ((int)v117 >= 2)
          {
            v118 = v117 - 1;
            v119 = v143 + v141 + 32;
            v120 = &a69;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))v74 + 11))(v119, v80, v120, ((int)v96 >> 1));
              v120 += 4;
              v119 += 32;
              --v118;
            }
            while (v118);
          }
          sub_1C978BDBC((int *)&STACK[0x4C0]);
          if ((int)v136 > v151)
          {
            v121 = v143 + v130 + v141;
            v122 = vars8;
            v123 = v131;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, _QWORD))v74 + 12))(v121, v80, v122, ((int)v101 >> 1));
              v122 += 4;
              v121 += 16 * v80;
              --v123;
            }
            while (v123);
          }
          result = sub_1C978BDBC((int *)&STACK[0x4C0]);
          v73 = v149;
          v99 = v148 + 64;
        }
        while (v148 + 64 < v139);
      }
      v94 = v127 + 64;
      v88 = v126;
    }
    while (v127 + 64 < v124);
  }
  return result;
}

uint64_t sub_1C978B34C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  _WORD v52[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v7)
    v13 = (v7 - v10);
  else
    v13 = v9;
  if ((int)(v10 + v9) >= v7)
    v14 = (((v7 - (int)v10) >> 1) + 2);
  else
    v14 = v12;
  if ((int)(v11 + v9) >= v8)
    v15 = v8 - v11;
  else
    v15 = v9;
  if ((int)(v11 + v9) >= v8)
    v16 = (((v8 - (int)v11) >> 1) + 2);
  else
    v16 = v12;
  v51 = v15;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 64))(a2, v10, v11, v13);
  v18 = *(_QWORD *)(v6 + 416);
  v48 = v6;
  v45 = (v18 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v46 = *(_QWORD *)(v6 + 400);
  v50 = v10;
  v47 = v10 == 0;
  v19 = ((int)v13 >> 3);
  if ((int)v19 > v47)
  {
    v20 = v19 - ((_DWORD)v10 == 0);
    v21 = &v52[10 * ((_DWORD)v10 == 0)];
    v22 = &v52[5 * ((_DWORD)v10 == 0) + 296];
    v23 = v46 + v45 + 16 * (v50 == 0) - 16 * v18;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v23, v18, v22, v21, (v51 + 8));
      v21 += 10;
      v22 += 5;
      v23 += 16;
      --v20;
    }
    while (v20);
  }
  v24 = v11 == 0;
  v25 = (v51 >> 3);
  v49 = v11;
  if ((int)v25 <= v24)
  {
    LODWORD(v27) = v13 + 8;
  }
  else
  {
    v26 = (_DWORD)v11 == 0;
    v27 = (v13 + 8);
    v28 = v25 - v26;
    v29 = &v52[10 * v26 + 80];
    v30 = &v52[5 * v26 + 336];
    v31 = v45 + 16 * v18 * v26 + v46 - 16;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v31, v18, v30, v29, v27);
      v29 += 10;
      v30 += 5;
      v31 += 16 * v18;
      --v28;
    }
    while (v28);
    v24 = v11 == 0;
  }
  v32 = *(_QWORD *)(v48 + 424);
  v33 = *(_QWORD *)(v48 + 408);
  v34 = (v32 * ((uint64_t)(int)v11 >> 1) + (int)(v50 & 0xFFFFFFFE)) << *(_BYTE *)(v48 + 531);
  v35 = ((int)v27 >> 4);
  if ((int)v35 > v47)
  {
    v36 = v50 == 0;
    v37 = v35 - v36;
    v38 = &v52[17 * v36 + 160];
    v39 = v33 + v34 + 32 * v36 - 4 * v32;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 88))(v39, v32, v38, v16);
      v38 += 17;
      v39 += 32;
      --v37;
    }
    while (v37);
  }
  v40 = ((v51 + 8) >> 4);
  if ((int)v40 > v24)
  {
    v41 = v49 == 0;
    v42 = v40 - v41;
    v43 = &v52[17 * v41 + 228];
    v44 = v34 + 16 * v32 * v41 + v33 - 8;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v44, v32, v43, v14);
      v43 += 17;
      v44 += 16 * v32;
      --v42;
    }
    while (v42);
  }
  return result;
}

void sub_1C978B660(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  int v43;
  int v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  unsigned __int8 v56;
  int v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  int v69;
  unsigned __int8 v70;
  int v71;
  unsigned __int8 v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  _OWORD v83[8];
  _OWORD v84[4];
  _OWORD v85[8];
  _OWORD v86[4];
  _DWORD v87[2];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 8);
  bzero(a6, 0x380uLL);
  v78 = v9;
  v80 = v9[96];
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  v87[0] = v11;
  v87[1] = v10;
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  memset(v84, 0, sizeof(v84));
  v76 = (a5 >> 3);
  v79 = a4;
  v73 = a5;
  v74 = a4 >> 3;
  memset(v83, 0, sizeof(v83));
  if (a5 >= 8)
  {
    v12 = 0;
    if (v74 <= 1)
      v13 = 1;
    else
      v13 = v74;
    if ((int)v76 <= 1)
      v14 = 1;
    else
      v14 = v76;
    v75 = v14;
    do
    {
      if (a4 >= 8)
      {
        v15 = 0;
        v16 = a3 + 8 * v12;
        v17 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v16 >> 3));
        do
        {
          v18 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, ((a2 + 8 + 8 * (int)v15) >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v16 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v19 = v15 + 1;
          v20 = (*(__int16 *)(v17 + 2 * (v15 + 1)) >> 9) + (*(__int16 *)(v17 + 2 * v15) >> 9);
          *((_BYTE *)v86 + 8 * v15 + v12) = *(_BYTE *)(v18 + 661) + ((v20 + 1) >> 1) - 2;
          v21 = *(char *)(v18 + 660) + ((v20 + 1) >> 1);
          if (v21 >= 51)
            v21 = 51;
          if (v21 <= 15)
            v21 = 15;
          a6[8 * v15 + 768 + v12] = byte_1C9860FB3[v21 - 15];
          if ((v15 & 1) != 0)
          {
            v22 = 0;
            v23 = *(_BYTE *)(v18 + 661);
            v24 = 1;
            do
            {
              v25 = v24;
              v26 = v20 + 2 * v87[v22];
              v27 = (v26 + 1) >> 1;
              if (v26 >= 59)
              {
                if ((v26 + 1) < 0x74)
                  LOBYTE(v27) = byte_1C9861020[v27 - 30];
                else
                  LOBYTE(v27) = v27 - 6;
              }
              v24 = 0;
              *((_BYTE *)&v85[4 * v22] + 8 * (v15 >> 1) + v12) = v27 + v23 + 2;
              v22 = 1;
            }
            while ((v25 & 1) != 0);
          }
          ++v15;
        }
        while (v19 != v13);
      }
      ++v12;
    }
    while (v12 != v75);
  }
  v29 = (a5 >> 3);
  v28 = a3;
  v30 = a3 == 0;
  if ((int)v76 > v30)
  {
    v31 = a3 == 0;
    if (v74 <= 1)
      v32 = 1;
    else
      v32 = v74;
    do
    {
      if (v79 >= 8)
      {
        v33 = 0;
        v34 = a3 + 8 * v31;
        v35 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v34 >> 3));
        do
        {
          v36 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, ((a2 + 8 * (int)v33) >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v34 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v37 = (*(__int16 *)(v35 + 2 * v33) >> 9) + (*(__int16 *)(v35 + 2 * (v33 - v80)) >> 9);
          *((_BYTE *)v84 + 8 * v31 + v33) = *(_BYTE *)(v36 + 661) + ((v37 + 1) >> 1) - 2;
          v38 = *(char *)(v36 + 660) + ((v37 + 1) >> 1);
          if (v38 >= 51)
            v38 = 51;
          if (v38 <= 15)
            v38 = 15;
          a6[8 * v31 + 832 + v33] = byte_1C9860FB3[v38 - 15];
          if ((v31 & 1) == 0)
          {
            v39 = 0;
            v40 = *(_BYTE *)(v36 + 661);
            v41 = 1;
            do
            {
              v42 = v41;
              v43 = v37 + 2 * v87[v39];
              v44 = (v43 + 1) >> 1;
              if (v43 >= 59)
              {
                if ((v43 + 1) < 0x74)
                  LOBYTE(v44) = byte_1C9861020[v44 - 30];
                else
                  LOBYTE(v44) = v44 - 6;
              }
              v41 = 0;
              *((_BYTE *)&v83[4 * v39] + 8 * (v31 >> 1) + v33) = v44 + v40 + 2;
              v39 = 1;
            }
            while ((v42 & 1) != 0);
          }
          ++v33;
        }
        while (v33 != v32);
      }
      ++v31;
      v29 = v76;
    }
    while (v31 != v76);
    v28 = a3;
    v30 = a3 == 0;
  }
  if (v79 >= 8)
  {
    v45 = 0;
    v46 = a6;
    LODWORD(v47) = v73 >> 2;
    if (v73 >> 2 <= 1)
      v47 = 1;
    else
      v47 = v47;
    if (v74 <= 1)
      v48 = 1;
    else
      v48 = v74;
    do
    {
      if (v73 >= 4)
      {
        v49 = 0;
        v50 = (unsigned __int8 *)&a6[32 * (v45 >> 1) + 257];
        v51 = v78[121] + ((uint64_t)v28 >> 2) + v78[117] * ((uint64_t)(a2 + 8 + 8 * (int)v45) >> 3);
        do
        {
          if (*(_BYTE *)(v51 + v49))
          {
            v52 = *((char *)v86 + 8 * v45 + (v49 >> 1)) + 2 * *(unsigned __int8 *)(v51 + v49);
            if (v52 >= 53)
              v52 = 53;
            if (v52 <= 17)
              v52 = 17;
            v46[v49] = byte_1C9860FE4[v52 - 17];
          }
          ++v49;
        }
        while (v47 != v49);
        if ((v45 & 1) != 0)
        {
          v53 = 0;
          do
          {
            if (*(unsigned __int8 *)(v51 + v53) >= 2u)
            {
              v54 = (char *)v85 + 8 * (v45 >> 1) + (v53 >> 1);
              v55 = *v54;
              if (v55 >= 53)
                v55 = 53;
              if (v55 <= 17)
                v55 = 17;
              v56 = byte_1C9860FE4[v55 - 17];
              v57 = v54[64];
              if (v57 >= 53)
                v57 = 53;
              if (v57 <= 17)
                v57 = 17;
              v58 = byte_1C9860FE4[v57 - 17];
              *(v50 - 1) = v56;
              *v50 = v58;
            }
            ++v53;
            v50 += 2;
          }
          while (v47 != v53);
        }
      }
      ++v45;
      v46 += 16;
    }
    while (v45 != v48);
  }
  if ((int)v29 > v30)
  {
    v59 = v28 == 0;
    LODWORD(v60) = v79 >> 2;
    if (v79 >> 2 <= 1)
      v60 = 1;
    else
      v60 = v60;
    v61 = &a6[16 * (v28 == 0) + 128];
    do
    {
      if (v79 >= 4)
      {
        v62 = 0;
        v63 = v59 >> 1;
        v64 = (unsigned __int8 *)&a6[32 * v63 + 513];
        v65 = v78[118] + ((uint64_t)a2 >> 2) + v78[116] * ((uint64_t)(v28 + 8 * (int)v59) >> 3);
        do
        {
          if (*(_BYTE *)(v65 + v62))
          {
            v66 = *((char *)v84 + 8 * v59 + (v62 >> 1)) + 2 * *(unsigned __int8 *)(v65 + v62);
            if (v66 >= 53)
              v66 = 53;
            if (v66 <= 17)
              v66 = 17;
            v61[v62] = byte_1C9860FE4[v66 - 17];
          }
          ++v62;
        }
        while (v60 != v62);
        if ((v59 & 1) == 0)
        {
          v67 = 0;
          do
          {
            if (*(unsigned __int8 *)(v65 + v67) >= 2u)
            {
              v68 = (char *)v83 + 8 * v63 + (v67 >> 1);
              v69 = *v68;
              if (v69 >= 53)
                v69 = 53;
              if (v69 <= 17)
                v69 = 17;
              v70 = byte_1C9860FE4[v69 - 17];
              v71 = v68[64];
              if (v71 >= 53)
                v71 = 53;
              if (v71 <= 17)
                v71 = 17;
              v72 = byte_1C9860FE4[v71 - 17];
              *(v64 - 1) = v70;
              *v64 = v72;
            }
            ++v67;
            v64 += 2;
          }
          while (v60 != v67);
        }
      }
      ++v59;
      v61 += 16;
    }
    while (v59 != v29);
  }
}

_QWORD *sub_1C978BD08(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;

  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = a7;
  v7 = (a6 >> (a7 != 0));
  if ((int)v7 >= 1)
  {
    v8 = (char *)__dst;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = v9 + 8 * a7;
    v11 = *(_QWORD *)(v10 + 416);
    v12 = (char *)(*(_QWORD *)(v10 + 400) + ((v11 * (a4 >> (a7 != 0)) + (a3 >> (a7 != 0) << a7)) << *(_BYTE *)(v9 + 531)));
    v13 = 2 * a5;
    v14 = 2 * v11;
    do
    {
      __dst = memcpy(v8, v12, v13);
      v12 += v14;
      v8 += v13;
      --v7;
    }
    while (v7);
  }
  return __dst;
}

int *sub_1C978BDBC(int *result)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;

  v1 = result + 18432;
  v2 = result[18437];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[18438];
    v5 = *(_QWORD *)(*(_QWORD *)v1 + 8);
    v6 = v5 + 8 * v4;
    v7 = *(_QWORD *)(v6 + 416);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 19);
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 283);
    v10 = (_DWORD)v4 != 0;
    v11 = result[18436];
    v12 = (_OWORD *)(*(_QWORD *)(v6 + 400)
                   + ((v7 * (result[18435] >> v10) + (result[18434] >> v10 << v4)) << *(_BYTE *)(v5 + 531)));
    v13 = 8u >> v10;
    v14 = 2 * (int)v11 * (int)v13;
    v15 = 2 * v11;
    v16 = 2 * v7 * v13;
    v17 = 2 * v7;
    do
    {
      if ((int)v11 >= 1)
      {
        v18 = 0;
        v19 = v12;
        v20 = result;
        do
        {
          v21 = *(_QWORD *)(*(_QWORD *)v1 + 8);
          v22 = *(_QWORD *)(v21 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v18) >> 3);
          v23 = *(_QWORD *)(v21 + 776);
          if (v8 && (*(_WORD *)(v23 + 2 * v22) & 0x100) != 0 || v9 && (*(_WORD *)(v23 + 2 * v22) & 0xC) != 0)
          {
            v24 = v19;
            v25 = v20;
            v26 = v13;
            do
            {
              *v24 = *(_OWORD *)v25;
              v25 = (int *)((char *)v25 + v15);
              v24 = (_OWORD *)((char *)v24 + v17);
              --v26;
            }
            while (v26);
            LODWORD(v11) = v1[4];
          }
          v18 += 8;
          v20 += 4;
          ++v19;
        }
        while (v18 < (int)v11);
        v2 = v1[5];
      }
      v3 += 8;
      result = (int *)((char *)result + v14);
      v12 = (_OWORD *)((char *)v12 + v16);
    }
    while (v3 < v2);
  }
  return result;
}

int *sub_1C978BF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *result;
  int *v50;
  int *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t i;
  int v80;
  _BOOL8 v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t *v91;
  int v92;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  _BOOL8 v102;
  uint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  int v106;
  int *v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t *vars0;
  uint64_t vars8;
  signed int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;

  result = (int *)MEMORY[0x1E0C80A78]();
  v51 = v50;
  v52 = result;
  STACK[0x9458] = *MEMORY[0x1E0C80C00];
  v118 = v53;
  v54 = *(_QWORD *)(v53 + 8);
  v108 = *(_DWORD *)(v54 + 520);
  v55 = *(_QWORD *)(v54 + 416);
  v56 = *(_QWORD *)(v54 + 424);
  v57 = *v50;
  v109 = v54;
  if (*v50 < *(_DWORD *)(v54 + 524))
  {
    v57 &= 0xFFFFFFF0;
    *v50 = v57;
  }
  v58 = result[30];
  if ((int)v58 < v57)
  {
    v114 = (v108 - 1) & 0xFFFFFFC0;
    vars0 = &a49;
    v59 = 8 * v56;
    vars8 = 8 * v55;
    v107 = v51;
    v111 = 8 * v56;
    do
    {
      v60 = *(_BYTE *)(v109 + 531);
      v61 = *(_QWORD *)(v109 + 400) + ((*(_QWORD *)(v109 + 416) * (int)v58) << v60);
      v123 = *(_QWORD *)(v109 + 408) + ((*(_QWORD *)(v109 + 424) * ((uint64_t)(int)v58 >> 1)) << v60);
      v62 = v57 - v58;
      if (v62 >= 64)
        v63 = 64;
      else
        v63 = v62;
      if ((_DWORD)v58)
        v64 = v58 - 8;
      else
        v64 = 0;
      if ((_DWORD)v58)
        v65 = v63 + 8;
      else
        v65 = v63;
      v119 = v65;
      v120 = v64;
      v116 = ((int)v63 >> 3);
      v117 = (((int)v63 + 8) >> 4);
      v115 = v63;
      v66 = 0;
      if (v114 >= 1)
      {
        v67 = ((int)v63 >> 1);
        do
        {
          v68 = &a17;
          v69 = v66;
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v52 + 6))(v118, v66, v52[30], 64, v63, &a17);
          v121 = v69;
          sub_1C978D20C(&STACK[0x430], v118, v69, v120, 72, v119, 0);
          v70 = 0;
          do
          {
            v71 = v70 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v52 + 9))(v70 + 8 + v61, v55, (char *)&STACK[0x3A0] + v70, v68, v63);
            v68 += 16;
            v70 = v71;
          }
          while (v71 != 64);
          sub_1C978D2B8((int *)&STACK[0x430]);
          v72 = v52[30];
          if ((int)v116 > (v72 == 0))
          {
            v73 = v72 == 0;
            v74 = v116 - v73;
            v75 = &a33 + 2 * v73;
            v76 = &STACK[0x3E0] + v73;
            v77 = v61 + vars8 * v73;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v77, v55, v76, v75, 64);
              v75 += 2;
              ++v76;
              v77 += vars8;
              --v74;
            }
            while (v74);
          }
          sub_1C978D2B8((int *)&STACK[0x430]);
          sub_1C978D20C(&STACK[0x430], v118, v69, v120, 72, v119, 1u);
          v78 = &a49;
          for (i = 16; i != 80; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v123 + i, v56, v78, v67);
            v78 += 4;
          }
          sub_1C978D2B8((int *)&STACK[0x430]);
          v80 = v52[30];
          v59 = 8 * v56;
          v63 = v115;
          if ((int)v117 > (v80 == 0))
          {
            v81 = v80 == 0;
            v82 = v117 - v81;
            v83 = &STACK[0x2A0] + 4 * v81;
            v84 = v123 + v111 * v81;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v84, v56, v83, 32);
              v83 += 4;
              v84 += v111;
              --v82;
            }
            while (v82);
          }
          result = sub_1C978D2B8((int *)&STACK[0x430]);
          v61 += 64;
          v123 += 64;
          v66 = (v121 + 64);
        }
        while ((int)v66 < v114);
        v58 = v52[30];
      }
      v85 = v108 - v66;
      if (v108 == (_DWORD)v66)
      {
        v51 = v107;
      }
      else
      {
        v86 = v66;
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v52 + 6))(v118, v66, v58, (v108 - v66), v63, &a17);
        v122 = v86;
        sub_1C978D20C(&STACK[0x430], v118, v86, v120, v85, v119, 0);
        v110 = v85;
        if (v85 >= 16)
        {
          v87 = v63;
          v88 = v61 + 8;
          v89 = (v110 >> 3) - 1;
          v90 = &a17;
          v91 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v52 + 9))(v88, v55, v91, v90, v87);
            v90 += 16;
            ++v91;
            v88 += 8;
            --v89;
          }
          while (v89);
        }
        sub_1C978D2B8((int *)&STACK[0x430]);
        v92 = v52[30];
        if ((int)v116 > (v92 == 0))
        {
          v93 = v92 == 0;
          v94 = v116 - v93;
          v95 = &a33 + 2 * v93;
          v96 = &STACK[0x3E0] + v93;
          v97 = v61 + vars8 * v93;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))v52 + 10))(v97, v55, v96, v95, v110);
            v95 += 2;
            ++v96;
            v97 += vars8;
            --v94;
          }
          while (v94);
        }
        sub_1C978D2B8((int *)&STACK[0x430]);
        sub_1C978D20C(&STACK[0x430], v118, v122, v120, v110, v119, 1u);
        if (v110 >= 24)
        {
          v98 = v123 + 16;
          v99 = ((v110 + 8) >> 4) - 1;
          v100 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))v52 + 11))(v98, v56, v100, (v115 >> 1));
            v100 += 4;
            v98 += 16;
            --v99;
          }
          while (v99);
        }
        sub_1C978D2B8((int *)&STACK[0x430]);
        v101 = v52[30];
        if ((int)v117 > (v101 == 0))
        {
          v102 = v101 == 0;
          v103 = v117 - v102;
          v104 = &STACK[0x2A0] + 4 * v102;
          v105 = v123 + v59 * v102;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, _QWORD))v52 + 12))(v105, v56, v104, (v110 >> 1));
            v104 += 4;
            v105 += v59;
            --v103;
          }
          while (v103);
        }
        result = sub_1C978D2B8((int *)&STACK[0x430]);
        LODWORD(v58) = v52[30];
        v51 = v107;
        LODWORD(v63) = v115;
      }
      v58 = (v58 + v63);
      v52[30] = v58;
      v57 = *v51;
    }
    while ((int)v58 < *v51);
  }
  v106 = *(_DWORD *)(v109 + 524);
  if (v106 >= (int)v58)
    v106 = v58;
  *v51 = v106;
  if (v52[30] < *(_DWORD *)(v109 + 524))
  {
    if (v106 <= 4)
      v106 = 4;
    *v51 = v106 - 4;
  }
  return result;
}

uint64_t sub_1C978C508(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  BOOL v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  BOOL v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t *vars0;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  signed int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  _BOOL4 v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;

  v65 = result;
  v66 = *(_QWORD *)(a2 + 8);
  v67 = *(_QWORD *)(a2 + 16);
  v68 = *(_DWORD *)(v66 + 520);
  v69 = *(_DWORD *)(v66 + 524);
  v70 = *(_QWORD *)(v66 + 416);
  v71 = *(_QWORD *)(v66 + 424);
  v137 = v66;
  v72 = *(unsigned __int8 *)(v67 + 2117);
  LOBYTE(v66) = *(_BYTE *)(v67 + 2113);
  v73 = a3 << v66;
  v74 = a4 << v66;
  v75 = v74 - 16;
  if (*(_DWORD *)(v67 + 2120) - 1 == a3)
  {
    v76 = v74 < 16;
    if (v74 >= 16)
      v77 = v74 - 16;
    else
      v77 = 0;
    if (v76)
      v78 = v75;
    else
      v78 = 0;
    v79 = v78 + v72;
    if (v73 <= 63)
      v80 = 0;
    else
      v80 = (v73 - 1) & 0xFFFFFFC0;
    v124 = v80;
    v129 = v68 - v80;
    v81 = v79 + v77 - 8;
    if (v79 + v77 < 8)
      v81 = 0;
    *(_DWORD *)(result + 120) = v81;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v79 = v69 - v77;
      *(_DWORD *)(result + 120) = v69;
    }
  }
  else
  {
    if (!a3 || (v73 & 0x3F) != 0)
      return result;
    v82 = v74 < 16;
    if (v74 >= 16)
      v77 = v74 - 16;
    else
      v77 = 0;
    if (!v82)
      v75 = 0;
    v79 = v75 + v72;
    if (v73 >= 64)
      v83 = v73 - 64;
    else
      v83 = 0;
    v124 = v83;
    if (v73 >= 64)
      v73 = 64;
    v129 = v73;
    v84 = v69 - v77;
    if (*(_DWORD *)(v67 + 2124) - 1 == a4)
      v79 = v84;
  }
  if (v79 >= 1)
  {
    v85 = 0;
    v113 = v77;
    v128 = 8 * v70;
    v86 = 8 * v71;
    v114 = v79;
    v123 = a2;
    v122 = v68;
    v115 = v79;
    do
    {
      v116 = v85;
      if (v79 - (int)v85 >= 64)
        v87 = 64;
      else
        v87 = (v79 - v85);
      if (v129 >= 1)
      {
        v88 = 0;
        v127 = v85 + v113;
        v89 = (_DWORD)v85 + (_DWORD)v113 == 0;
        v126 = ((int)v87 >> 3);
        v121 = v126 - v89;
        v120 = v128 * v89;
        v125 = (((int)v87 + 8) >> 4);
        v119 = v125 - v89;
        v118 = v86 * v89;
        v138 = (_DWORD)v116 + (_DWORD)v113 == 0;
        vars0 = &STACK[0x7C0] + 4 * v89;
        do
        {
          if (v129 - (int)v88 >= 64)
            v90 = 64;
          else
            v90 = (v129 - v88);
          v91 = v88 + v124;
          v136 = v88;
          v133 = v90 + v124 + v88;
          v92 = *(_QWORD *)(v137 + 416);
          v130 = *(_QWORD *)(v137 + 400);
          v93 = *(_BYTE *)(v137 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v65 + 48))(a2, v91, v127, v90, v87, &a33);
          v76 = v133 < v68;
          v132 = v133 < v68;
          v134 = v91;
          v94 = (v91 + v92 * v127) << v93;
          LODWORD(v95) = (int)v90 >> 3;
          if (v76)
            v95 = (v95 + 1);
          else
            v95 = v95;
          if ((int)v95 >= 2)
          {
            v96 = v95 - 1;
            v97 = v130 + v94 + 8;
            v98 = &a33;
            v99 = &STACK[0x8C0];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v65 + 72))(v97, v70, v99, v98, v87);
              v98 += 16;
              ++v99;
              v97 += 8;
              --v96;
            }
            while (v96);
          }
          if ((int)v126 > v138)
          {
            v100 = &a49 + 2 * ((_DWORD)v116 + (_DWORD)v113 == 0);
            v101 = v130 + v120 + v94;
            v102 = &STACK[0x900] + ((_DWORD)v116 + (_DWORD)v113 == 0);
            v103 = v121;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v65 + 80))(v101, v70, v102, v100, v90);
              v100 += 2;
              ++v102;
              v101 += v128;
              --v103;
            }
            while (v103);
          }
          v104 = (v134 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v137 + 424) * ((uint64_t)((int)v116 + (int)v113) >> 1);
          v135 = *(_QWORD *)(v137 + 408);
          v131 = v104 << *(_BYTE *)(v137 + 531);
          v105 = (v132 + (((int)v90 + 8) >> 4));
          v86 = 8 * v71;
          if ((int)v105 >= 2)
          {
            v106 = v105 - 1;
            v107 = v135 + v131 + 16;
            v108 = &a65;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v65 + 88))(v107, v71, v108, ((int)v87 >> 1));
              v108 += 4;
              v107 += 16;
              --v106;
            }
            while (v106);
          }
          if ((int)v125 > v138)
          {
            v109 = ((int)v90 >> 1);
            v110 = v119;
            v111 = v135 + v118 + v131;
            v112 = vars0;
            do
            {
              result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v65 + 96))(v111, v71, v112, v109);
              v112 += 4;
              v111 += 8 * v71;
              --v110;
            }
            while (v110);
          }
          v88 = v136 + 64;
          a2 = v123;
          v68 = v122;
        }
        while (v136 + 64 < v129);
      }
      v85 = v116 + 64;
      v79 = v115;
    }
    while (v116 + 64 < v114);
  }
  return result;
}

int *sub_1C978C9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  int *result;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  BOOL v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t *vars0;
  unint64_t *vars8;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  signed int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _BOOL4 v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;

  result = (int *)MEMORY[0x1E0C80A78]();
  v73 = v70;
  v74 = result;
  STACK[0x94F8] = *MEMORY[0x1E0C80C00];
  v75 = *(_QWORD *)(v70 + 8);
  v76 = *(_QWORD *)(v70 + 16);
  v77 = *(_DWORD *)(v75 + 520);
  v78 = *(_DWORD *)(v75 + 524);
  v79 = *(_QWORD *)(v75 + 416);
  v80 = *(_QWORD *)(v75 + 424);
  v150 = v75;
  v81 = *(unsigned __int8 *)(v76 + 2117);
  LOBYTE(v75) = *(_BYTE *)(v76 + 2113);
  v82 = v71 << v75;
  v83 = v72 << v75;
  v84 = v83 - 16;
  v134 = v77;
  if (*(_DWORD *)(v76 + 2120) - 1 == v71)
  {
    v85 = v83 < 16;
    if (v83 >= 16)
      v86 = v83 - 16;
    else
      v86 = 0;
    if (v85)
      v87 = v84;
    else
      v87 = 0;
    v88 = v87 + v81;
    if (v82 <= 63)
      v89 = 0;
    else
      v89 = (v82 - 1) & 0xFFFFFFC0;
    v135 = v89;
    v139 = v77 - v89;
    v90 = v88 + v86 - 8;
    if (v88 + v86 < 8)
      v90 = 0;
    result[30] = v90;
    if (*(_DWORD *)(*(_QWORD *)(v70 + 16) + 2124) - 1 == v72)
    {
      v88 = v78 - v86;
      result[30] = v78;
    }
  }
  else
  {
    if (!v71 || (v82 & 0x3F) != 0)
      return result;
    v91 = v83 < 16;
    if (v83 >= 16)
      v86 = v83 - 16;
    else
      v86 = 0;
    if (!v91)
      v84 = 0;
    v88 = v84 + v81;
    if (v82 >= 64)
      v92 = v82 - 64;
    else
      v92 = 0;
    v135 = v92;
    if (v82 >= 64)
      v82 = 64;
    v139 = v82;
    v93 = v78 - v86;
    if (*(_DWORD *)(v76 + 2124) - 1 == v72)
      v88 = v93;
  }
  if (v88 >= 1)
  {
    v94 = 0;
    vars0 = &STACK[0x440];
    v125 = v86;
    v138 = 8 * v79;
    v95 = 8 * v80;
    v124 = v88;
    v149 = v70;
    v126 = v88;
    do
    {
      if (v88 - (int)v94 >= 64)
        v96 = 64;
      else
        v96 = (v88 - v94);
      v127 = v94;
      v97 = v94 + v125 - 8;
      v140 = v94 + v125;
      if (!((_DWORD)v94 + (_DWORD)v125))
        v97 = 0;
      v153 = v97;
      if ((_DWORD)v94 + (_DWORD)v125)
        v98 = v96 + 8;
      else
        v98 = v96;
      v152 = v98;
      if (v139 >= 1)
      {
        v99 = 0;
        v100 = (_DWORD)v140 == 0;
        v137 = ((int)v96 >> 3);
        v133 = v137 - v100;
        v132 = v138 * v100;
        v136 = (((int)v96 + 8) >> 4);
        v131 = v136 - v100;
        v130 = v95 * v100;
        v151 = v140 == 0;
        vars8 = &STACK[0x340] + 4 * v100;
        do
        {
          if (v139 - (int)v99 >= 64)
            v101 = 64;
          else
            v101 = (v139 - v99);
          v102 = v99 + v135;
          v103 = v101 + v135 + v99;
          v146 = *(_QWORD *)(v150 + 416);
          v148 = v99;
          v142 = *(_QWORD *)(v150 + 400);
          v104 = *(_BYTE *)(v150 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v74 + 6))(v73, v102, v140, v101, v96, &a37);
          v145 = v103 < v134;
          if (v103 >= v134)
            v105 = v101;
          else
            v105 = v101 + 8;
          v106 = (v102 + v146 * v140) << v104;
          v107 = (int)v101 >> 3;
          if (v103 >= v134)
            v108 = v107;
          else
            v108 = v107 + 1;
          v147 = v102;
          v144 = v105;
          sub_1C978D20C(&STACK[0x4D0], v73, v102, v153, v105, v152, 0);
          if ((int)v108 >= 2)
          {
            v109 = v108 - 1;
            v110 = v142 + v106 + 8;
            v111 = &a37;
            v112 = &STACK[0x440];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v74 + 9))(v110, v79, v112, v111, v96);
              v111 += 16;
              ++v112;
              v110 += 8;
              --v109;
            }
            while (v109);
          }
          sub_1C978D2B8((int *)&STACK[0x4D0]);
          if ((int)v137 > v151)
          {
            v113 = v142 + v132 + v106;
            v114 = &STACK[0x480] + ((_DWORD)v140 == 0);
            v115 = &a53 + 2 * ((_DWORD)v140 == 0);
            v116 = v133;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v74 + 10))(v113, v79, v114, v115, v101);
              v115 += 2;
              ++v114;
              v113 += v138;
              --v116;
            }
            while (v116);
          }
          sub_1C978D2B8((int *)&STACK[0x4D0]);
          v141 = ((v147 & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v150 + 424) * ((uint64_t)(int)v140 >> 1)) << *(_BYTE *)(v150 + 531);
          v143 = *(_QWORD *)(v150 + 408);
          sub_1C978D20C(&STACK[0x4D0], v149, v147, v153, v144, v152, 1u);
          v117 = (v145 + (((int)v101 + 8) >> 4));
          v95 = 8 * v80;
          if ((int)v117 >= 2)
          {
            v118 = v117 - 1;
            v119 = v143 + v141 + 16;
            v120 = &a69;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))v74 + 11))(v119, v80, v120, ((int)v96 >> 1));
              v120 += 4;
              v119 += 16;
              --v118;
            }
            while (v118);
          }
          sub_1C978D2B8((int *)&STACK[0x4D0]);
          if ((int)v136 > v151)
          {
            v121 = v143 + v130 + v141;
            v122 = vars8;
            v123 = v131;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, _QWORD))v74 + 12))(v121, v80, v122, ((int)v101 >> 1));
              v122 += 4;
              v121 += 8 * v80;
              --v123;
            }
            while (v123);
          }
          result = sub_1C978D2B8((int *)&STACK[0x4D0]);
          v73 = v149;
          v99 = v148 + 64;
        }
        while (v148 + 64 < v139);
      }
      v94 = v127 + 64;
      v88 = v126;
    }
    while (v127 + 64 < v124);
  }
  return result;
}

uint64_t sub_1C978CEF8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  _WORD v51[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v7)
    v13 = (v7 - v10);
  else
    v13 = v9;
  if ((int)(v10 + v9) >= v7)
    v14 = (((v7 - (int)v10) >> 1) + 2);
  else
    v14 = v12;
  if ((int)(v11 + v9) >= v8)
    v15 = v8 - v11;
  else
    v15 = v9;
  if ((int)(v11 + v9) >= v8)
    v16 = (((v8 - (int)v11) >> 1) + 2);
  else
    v16 = v12;
  v50 = v15;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 64))(a2, v10, v11, v13);
  v18 = *(_QWORD *)(v6 + 416);
  v47 = v6;
  v44 = (v18 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v45 = *(_QWORD *)(v6 + 400);
  v49 = v10;
  v46 = v10 == 0;
  v19 = ((int)v13 >> 3);
  if ((int)v19 > v46)
  {
    v20 = v19 - ((_DWORD)v10 == 0);
    v21 = &v51[10 * ((_DWORD)v10 == 0)];
    v22 = &v51[5 * ((_DWORD)v10 == 0) + 296];
    v23 = v45 + v44 + 8 * (v49 == 0) - 8 * v18;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v23, v18, v22, v21, (v50 + 8));
      v21 += 10;
      v22 += 5;
      v23 += 8;
      --v20;
    }
    while (v20);
  }
  v24 = v11 == 0;
  v25 = (v50 >> 3);
  v48 = v11;
  if ((int)v25 <= v24)
  {
    LODWORD(v27) = v13 + 8;
  }
  else
  {
    v26 = (_DWORD)v11 == 0;
    v27 = (v13 + 8);
    v28 = v25 - v26;
    v29 = &v51[10 * v26 + 80];
    v30 = &v51[5 * v26 + 336];
    v31 = v44 + 8 * v18 * v26 + v45 - 8;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v31, v18, v30, v29, v27);
      v29 += 10;
      v30 += 5;
      v31 += 8 * v18;
      --v28;
    }
    while (v28);
    v24 = v11 == 0;
  }
  v32 = *(_QWORD *)(v47 + 424);
  v33 = *(_QWORD *)(v47 + 408);
  v34 = (v32 * ((uint64_t)(int)v11 >> 1) + (int)(v49 & 0xFFFFFFFE)) << *(_BYTE *)(v47 + 531);
  v35 = ((int)v27 >> 4);
  if ((int)v35 > v46)
  {
    v36 = v35 - (v49 == 0);
    v37 = &v51[17 * (v49 == 0) + 160];
    v38 = v33 + v34 + 16 * (v49 == 0) - 2 * v32;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 88))(v38, v32, v37, v16);
      v37 += 17;
      v38 += 16;
      --v36;
    }
    while (v36);
  }
  v39 = ((v50 + 8) >> 4);
  if ((int)v39 > v24)
  {
    v40 = v48 == 0;
    v41 = v39 - v40;
    v42 = &v51[17 * v40 + 228];
    v43 = v34 + 8 * v32 * v40 + v33 - 4;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v43, v32, v42, v14);
      v42 += 17;
      v43 += 8 * v32;
      --v41;
    }
    while (v41);
  }
  return result;
}

_QWORD *sub_1C978D20C(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;

  __dst[4608] = a2;
  *((_DWORD *)__dst + 9218) = a3;
  *((_DWORD *)__dst + 9219) = a4;
  *((_DWORD *)__dst + 9220) = a5;
  *((_DWORD *)__dst + 9221) = a6;
  *((_DWORD *)__dst + 9222) = a7;
  v7 = (a6 >> (a7 != 0));
  if ((int)v7 >= 1)
  {
    v8 = (char *)__dst;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = v9 + 8 * a7;
    v11 = *(_QWORD *)(v10 + 416);
    v12 = (char *)(*(_QWORD *)(v10 + 400) + ((v11 * (a4 >> (a7 != 0)) + (a3 >> (a7 != 0) << a7)) << *(_BYTE *)(v9 + 531)));
    v13 = a5;
    do
    {
      __dst = memcpy(v8, v12, v13);
      v12 += v11;
      v8 += v13;
      --v7;
    }
    while (v7);
  }
  return __dst;
}

int *sub_1C978D2B8(int *result)
{
  _DWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;

  v1 = result + 9216;
  v2 = result[9221];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[9222];
    v5 = *(_QWORD *)(*(_QWORD *)v1 + 8);
    v6 = v5 + 8 * v4;
    v7 = *(_QWORD *)(v6 + 416);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 19);
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 283);
    v10 = (_DWORD)v4 != 0;
    v11 = result[9220];
    v12 = (_QWORD *)(*(_QWORD *)(v6 + 400)
                   + ((v7 * (result[9219] >> v10) + (result[9218] >> v10 << v4)) << *(_BYTE *)(v5 + 531)));
    v13 = 8u >> v10;
    v14 = v11 * (int)v13;
    v15 = v11;
    do
    {
      if (v11 >= 1)
      {
        v16 = 0;
        v17 = v12;
        v18 = result;
        do
        {
          v19 = *(_QWORD *)(*(_QWORD *)v1 + 8);
          v20 = *(_QWORD *)(v19 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v16) >> 3);
          v21 = *(_QWORD *)(v19 + 776);
          if (v8 && (*(_WORD *)(v21 + 2 * v20) & 0x100) != 0 || v9 && (*(_WORD *)(v21 + 2 * v20) & 0xC) != 0)
          {
            v22 = v17;
            v23 = v18;
            v24 = v13;
            do
            {
              *v22 = *(_QWORD *)v23;
              v23 = (int *)((char *)v23 + v15);
              v22 = (_QWORD *)((char *)v22 + v7);
              --v24;
            }
            while (v24);
            v11 = v1[4];
          }
          v16 += 8;
          v18 += 2;
          ++v17;
        }
        while (v16 < v11);
        v2 = v1[5];
      }
      v12 = (_QWORD *)((char *)v12 + v7 * v13);
      result = (int *)((char *)result + v14);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_1C978D3F8(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t i;
  int v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t *v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  int v55;
  int *v56;
  int v57;
  uint64_t v58;
  signed int v60;
  uint64_t vars0;
  int vars8_4;
  unsigned int vars8_4a;

  v25 = a3;
  v26 = result;
  v27 = *(_QWORD *)(a2 + 8);
  v57 = *(_DWORD *)(v27 + 520);
  v28 = *(_QWORD *)(v27 + 416);
  v29 = *a3;
  v58 = v27;
  if (*a3 < *(_DWORD *)(v27 + 524))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  v30 = *(_DWORD *)(result + 120);
  if (v30 < v29)
  {
    v60 = (v57 - 1) & 0xFFFFFFC0;
    v31 = 16 * v28;
    v56 = v25;
    do
    {
      v32 = *(_QWORD *)(v58 + 400) + ((*(_QWORD *)(v58 + 416) * v30) << *(_BYTE *)(v58 + 531));
      v33 = v29 - v30;
      if (v33 >= 64)
        v34 = 64;
      else
        v34 = v33;
      v35 = (int)v34 >> 3;
      vars0 = ((int)v34 >> 3);
      v36 = 0;
      if (v60 >= 1)
      {
        do
        {
          vars8_4 = v36;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          v37 = 0;
          for (i = 16; i != 144; i += 16)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 72))(v32 + i, v28, (char *)&STACK[0x740] + v37, (char *)&STACK[0x740] + i - 784, v34);
            v37 += 8;
          }
          v39 = *(_DWORD *)(v26 + 120);
          if (v35 > (v39 == 0))
          {
            v40 = v39 == 0;
            v41 = vars0 - v40;
            v42 = &a25 + 2 * v40;
            v43 = &STACK[0x780] + v40;
            v44 = v32 + v31 * v40;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 80))(v44, v28, v43, v42, 64);
              v42 += 2;
              ++v43;
              v44 += v31;
              --v41;
            }
            while (v41);
          }
          v32 += 128;
          v36 = vars8_4 + 64;
          v35 = (int)v34 >> 3;
        }
        while (vars8_4 + 64 < v60);
        v30 = *(_DWORD *)(v26 + 120);
      }
      v45 = v57 - v36;
      if (v57 != v36)
      {
        result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        vars8_4a = v45;
        if (v45 >= 16)
        {
          v46 = v32 + 16;
          v47 = (vars8_4a >> 3) - 1;
          v48 = &a9;
          v49 = &STACK[0x740];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 72))(v46, v28, v49, v48, v34);
            v48 += 16;
            ++v49;
            v46 += 16;
            --v47;
          }
          while (v47);
        }
        v30 = *(_DWORD *)(v26 + 120);
        if ((int)vars0 > (v30 == 0))
        {
          v50 = v30 == 0;
          v51 = vars0 - v50;
          v52 = &a25 + 2 * v50;
          v53 = &STACK[0x780] + v50;
          v54 = v32 + v31 * v50;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v26 + 80))(v54, v28, v53, v52, vars8_4a);
            v52 += 2;
            ++v53;
            v54 += v31;
            --v51;
          }
          while (v51);
          v30 = *(_DWORD *)(v26 + 120);
        }
      }
      v30 += v34;
      *(_DWORD *)(v26 + 120) = v30;
      v25 = v56;
      v29 = *v56;
    }
    while (v30 < *v56);
  }
  v55 = *(_DWORD *)(v58 + 524);
  if (v55 >= v30)
    v55 = v30;
  *v25 = v55;
  if (*(_DWORD *)(v26 + 120) < *(_DWORD *)(v58 + 524))
  {
    if (v55 <= 4)
      v55 = 4;
    *v25 = v55 - 4;
  }
  return result;
}

int *sub_1C978D70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int *result;
  int *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  int v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t *v53;
  int v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  signed int v68;
  int v69;
  int v70;
  int vars8_4;
  unsigned int vars8_4a;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v27 = v26;
  v28 = result;
  v67 = v29;
  v30 = *(_QWORD *)(v29 + 8);
  v64 = *(_DWORD *)(v30 + 520);
  v31 = *(_QWORD *)(v30 + 416);
  v32 = *v26;
  v65 = v30;
  if (*v26 < *(_DWORD *)(v30 + 524))
  {
    v32 &= 0xFFFFFFF0;
    *v26 = v32;
  }
  v33 = result[30];
  if ((int)v33 < v32)
  {
    v68 = (v64 - 1) & 0xFFFFFFC0;
    v66 = 16 * v31;
    v63 = v27;
    do
    {
      v34 = *(_QWORD *)(v65 + 400) + ((*(_QWORD *)(v65 + 416) * (int)v33) << *(_BYTE *)(v65 + 531));
      v35 = v32 - v33;
      if (v35 >= 64)
        v36 = 64;
      else
        v36 = v35;
      if ((_DWORD)v33)
        v37 = v33 - 8;
      else
        v37 = 0;
      v38 = v36 + 8;
      if (!(_DWORD)v33)
        v38 = v36;
      v69 = v38;
      v70 = v37;
      v39 = ((int)v36 >> 3);
      if (v68 < 1)
      {
        v40 = 0;
      }
      else
      {
        v40 = 0;
        do
        {
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v28 + 6))(v67, v40, v28[30], 64, v36, &a9);
          vars8_4 = v40;
          sub_1C978EA14(&STACK[0x3E0], v67, v40, v70, 72, v69);
          v41 = 0;
          for (i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v28 + 9))(v34 + i, v31, (char *)&STACK[0x360] + v41, (char *)&STACK[0x360] + i - 784, v36);
            v41 += 8;
          }
          sub_1C978BDBC((int *)&STACK[0x3E0]);
          v43 = v28[30];
          if ((int)v39 > (v43 == 0))
          {
            v44 = v43 == 0;
            v45 = ((int)v36 >> 3) - v44;
            v46 = &a25 + 2 * v44;
            v47 = &STACK[0x3A0] + v44;
            v48 = v34 + v66 * v44;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v48, v31, v47, v46, 64);
              v46 += 2;
              ++v47;
              v48 += v66;
              --v45;
            }
            while (v45);
          }
          result = sub_1C978BDBC((int *)&STACK[0x3E0]);
          v34 += 128;
          v40 = (vars8_4 + 64);
          v39 = ((int)v36 >> 3);
        }
        while ((int)v40 < v68);
        v33 = v28[30];
      }
      v49 = v64 - v40;
      if (v64 != (_DWORD)v40)
      {
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v28 + 6))(v67, v40, v33, (v64 - v40), v36, &a9);
        sub_1C978EA14(&STACK[0x3E0], v67, v40, v70, v49, v69);
        vars8_4a = v64 - v40;
        if (v49 >= 16)
        {
          v50 = v34 + 16;
          v51 = (vars8_4a >> 3) - 1;
          v52 = &a9;
          v53 = &STACK[0x360];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v28 + 9))(v50, v31, v53, v52, v36);
            v52 += 16;
            ++v53;
            v50 += 16;
            --v51;
          }
          while (v51);
        }
        sub_1C978BDBC((int *)&STACK[0x3E0]);
        v54 = v28[30];
        v55 = vars8_4a;
        if (__SPAIR64__(v39, v54) >= 1 && (_DWORD)v39 != (v54 == 0))
        {
          v56 = v54 == 0;
          v57 = v39 - v56;
          v58 = &a25 + 2 * v56;
          v59 = &STACK[0x3A0] + v56;
          v60 = v34 + v66 * v56;
          do
          {
            v61 = v55;
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v60, v31, v59, v58, v55);
            v55 = v61;
            v58 += 2;
            ++v59;
            v60 += v66;
            --v57;
          }
          while (v57);
        }
        result = sub_1C978BDBC((int *)&STACK[0x3E0]);
        LODWORD(v33) = v28[30];
      }
      v27 = v63;
      v33 = (v33 + v36);
      v28[30] = v33;
      v32 = *v63;
    }
    while ((int)v33 < *v63);
  }
  v62 = *(_DWORD *)(v65 + 524);
  if (v62 >= (int)v33)
    v62 = v33;
  *v27 = v62;
  if (v28[30] < *(_DWORD *)(v65 + 524))
  {
    if (v62 <= 4)
      v62 = 4;
    *v27 = v62 - 4;
  }
  return result;
}

uint64_t sub_1C978DACC(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t *v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t *vars0;
  uint64_t vars8;
  uint64_t v81;
  int v82;
  uint64_t v83;
  signed int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;

  v37 = result;
  v38 = *(_QWORD *)(a2 + 8);
  v39 = *(_QWORD *)(a2 + 16);
  v40 = *(_DWORD *)(v38 + 520);
  v41 = *(_DWORD *)(v38 + 524);
  v83 = v38;
  v42 = *(_QWORD *)(v38 + 416);
  v43 = *(unsigned __int8 *)(v39 + 2117);
  LOBYTE(v38) = *(_BYTE *)(v39 + 2113);
  v44 = a3 << v38;
  v45 = a4 << v38;
  v46 = v45 - 16;
  v82 = v40;
  if (*(_DWORD *)(v39 + 2120) - 1 == a3)
  {
    v47 = v45 < 16;
    if (v45 >= 16)
      v48 = v45 - 16;
    else
      v48 = 0;
    if (v47)
      v49 = v46;
    else
      v49 = 0;
    v50 = v49 + v43;
    if (v44 <= 63)
      v51 = 0;
    else
      v51 = (v44 - 1) & 0xFFFFFFC0;
    v84 = v51;
    v88 = v40 - v51;
    v52 = v50 + v48 - 8;
    if (v50 + v48 < 8)
      v52 = 0;
    *(_DWORD *)(result + 120) = v52;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v50 = v41 - v48;
      *(_DWORD *)(result + 120) = v41;
    }
  }
  else
  {
    if (!a3 || (v44 & 0x3F) != 0)
      return result;
    v53 = v45 < 16;
    if (v45 >= 16)
      v48 = v45 - 16;
    else
      v48 = 0;
    if (!v53)
      v46 = 0;
    v50 = v46 + v43;
    if (v44 >= 64)
      v54 = v44 - 64;
    else
      v54 = 0;
    v84 = v54;
    if (v44 >= 64)
      v44 = 64;
    v88 = v44;
    v55 = v41 - v48;
    if (*(_DWORD *)(v39 + 2124) - 1 == a4)
      v50 = v55;
  }
  if (v50 >= 1)
  {
    v56 = 0;
    v73 = v48;
    v57 = 16 * v42;
    v74 = v50;
    v81 = a2;
    v75 = v50;
    do
    {
      v76 = v56;
      if (v50 - (int)v56 >= 64)
        v58 = 64;
      else
        v58 = (v50 - v56);
      if (v88 >= 1)
      {
        v59 = 0;
        v87 = v56 + v73;
        v60 = (_DWORD)v56 + (_DWORD)v73 == 0;
        v85 = ((int)v58 >> 3);
        v86 = (_DWORD)v56 + (_DWORD)v73 == 0;
        vars8 = v85 - v60;
        v78 = &STACK[0x840] + v60;
        vars0 = &a37 + 2 * v60;
        v77 = v57 * v60;
        do
        {
          if (v88 - (int)v59 >= 64)
            v61 = 64;
          else
            v61 = (v88 - v59);
          v62 = *(_QWORD *)(v83 + 416);
          v90 = *(_QWORD *)(v83 + 400);
          v63 = *(_BYTE *)(v83 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v37 + 48))(a2, v59 + v84, v87, v61, v58, &a21);
          v89 = (v59 + v84 + v62 * v87) << v63;
          LODWORD(v64) = (int)v61 >> 3;
          if ((int)v61 + v84 + (int)v59 >= v82)
            v64 = v64;
          else
            v64 = (v64 + 1);
          if ((int)v64 >= 2)
          {
            v65 = v64 - 1;
            v66 = v90 + v89 + 16;
            v67 = &a21;
            v68 = &STACK[0x800];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v37 + 72))(v66, v42, v68, v67, v58);
              v67 += 16;
              ++v68;
              v66 += 16;
              --v65;
            }
            while (v65);
          }
          if ((int)v85 > v86)
          {
            v69 = v78;
            v70 = v90 + v77 + v89;
            v72 = vars0;
            v71 = vars8;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v37 + 80))(v70, v42, v69, v72, v61);
              v72 += 2;
              ++v69;
              v70 += v57;
              --v71;
            }
            while (v71);
          }
          v59 += 64;
          a2 = v81;
        }
        while (v59 < v88);
      }
      v56 = v76 + 64;
      v50 = v75;
    }
    while (v76 + 64 < v74);
  }
  return result;
}

int *sub_1C978DE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  int *result;
  uint64_t v42;
  int v43;
  int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  int v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  BOOL v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t *v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  signed int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v45 = result;
  v46 = *(_QWORD *)(v42 + 8);
  v47 = *(_QWORD *)(v42 + 16);
  v48 = *(_DWORD *)(v46 + 520);
  v49 = *(_DWORD *)(v46 + 524);
  v94 = v46;
  v95 = v42;
  v50 = *(_QWORD *)(v46 + 416);
  v51 = *(unsigned __int8 *)(v47 + 2117);
  LOBYTE(v46) = *(_BYTE *)(v47 + 2113);
  v52 = v43 << v46;
  v53 = v44 << v46;
  v54 = v53 - 16;
  v93 = v48;
  if (*(_DWORD *)(v47 + 2120) - 1 == v43)
  {
    v55 = v53 < 16;
    if (v53 >= 16)
      v56 = v53 - 16;
    else
      v56 = 0;
    if (v55)
      v57 = v54;
    else
      v57 = 0;
    v58 = v57 + v51;
    if (v52 <= 63)
      v59 = 0;
    else
      v59 = (v52 - 1) & 0xFFFFFFC0;
    v96 = v59;
    v100 = v48 - v59;
    v60 = v58 + v56 - 8;
    if (v58 + v56 < 8)
      v60 = 0;
    result[30] = v60;
    if (*(_DWORD *)(*(_QWORD *)(v42 + 16) + 2124) - 1 == v44)
    {
      v58 = v49 - v56;
      result[30] = v49;
    }
  }
  else
  {
    if (!v43 || (v52 & 0x3F) != 0)
      return result;
    v61 = v53 < 16;
    if (v53 >= 16)
      v56 = v53 - 16;
    else
      v56 = 0;
    if (!v61)
      v54 = 0;
    v58 = v54 + v51;
    if (v52 >= 64)
      v62 = v52 - 64;
    else
      v62 = 0;
    v96 = v62;
    if (v52 >= 64)
      v52 = 64;
    v100 = v52;
    v63 = v49 - v56;
    if (*(_DWORD *)(v47 + 2124) - 1 == v44)
      v58 = v63;
  }
  if (v58 >= 1)
  {
    v64 = 0;
    v65 = 16 * v50;
    v87 = v58;
    v88 = v56;
    v89 = v58;
    do
    {
      if (v58 - (int)v64 >= 64)
        v66 = 64;
      else
        v66 = (v58 - v64);
      v90 = v64;
      v101 = v64 + v88;
      v67 = (_DWORD)v64 + (_DWORD)v88 == 0;
      if ((_DWORD)v64 + (_DWORD)v88)
        v68 = v64 + v88 - 8;
      else
        v68 = 0;
      v69 = v66 + 8;
      if (v67)
        v69 = v66;
      v98 = v69;
      v99 = v68;
      if (v100 >= 1)
      {
        v70 = 0;
        v71 = (_DWORD)v101 == 0;
        v97 = ((int)v66 >> 3);
        v92 = v97 - v71;
        v91 = v65 * v71;
        do
        {
          if (v100 - (int)v70 >= 64)
            v72 = 64;
          else
            v72 = (v100 - v70);
          v73 = v70 + v96;
          v103 = v72 + v96 + v70;
          v102 = *(_QWORD *)(v94 + 416);
          v105 = *(_QWORD *)(v94 + 400);
          v74 = *(_BYTE *)(v94 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v45 + 6))(v95, v73, v101, v72, v66, &a25);
          v75 = v103 < v93;
          if (v103 >= v93)
            v76 = v72;
          else
            v76 = v72 + 8;
          v104 = (v73 + v102 * v101) << v74;
          v77 = (int)v72 >> 3;
          if (v75)
            v78 = v77 + 1;
          else
            v78 = v77;
          sub_1C978EA14(&STACK[0x460], v95, v73, v99, v76, v98);
          if ((int)v78 >= 2)
          {
            v79 = v78 - 1;
            v80 = v105 + v104 + 16;
            v81 = &a25;
            v82 = &STACK[0x3E0];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v45 + 9))(v80, v50, v82, v81, v66);
              v81 += 16;
              ++v82;
              v80 += 16;
              --v79;
            }
            while (v79);
          }
          sub_1C978BDBC((int *)&STACK[0x460]);
          if ((int)v97 > ((_DWORD)v101 == 0))
          {
            v83 = &STACK[0x420] + ((_DWORD)v101 == 0);
            v84 = v105 + v91 + v104;
            v86 = &a41 + 2 * ((_DWORD)v101 == 0);
            v85 = v92;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v45 + 10))(v84, v50, v83, v86, v72);
              v86 += 2;
              ++v83;
              v84 += v65;
              --v85;
            }
            while (v85);
          }
          result = sub_1C978BDBC((int *)&STACK[0x460]);
          v70 += 64;
        }
        while (v70 < v100);
      }
      v64 = v90 + 64;
      v58 = v89;
    }
    while (v90 + 64 < v87);
  }
  return result;
}

uint64_t sub_1C978E1A0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD v30[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7)
    v12 = (v7 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v8)
    v13 = (v8 - v11);
  else
    v13 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  v15 = *(_QWORD *)(v6 + 416);
  v28 = (v15 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v29 = *(_QWORD *)(v6 + 400);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v30[10 * ((_DWORD)v10 == 0)];
    v19 = &v30[5 * ((_DWORD)v10 == 0) + 296];
    v20 = v29 + v28 + 16 * ((_DWORD)v10 == 0) - 16 * v15;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v30[10 * v22 + 80];
    v26 = &v30[5 * v22 + 336];
    v27 = v28 + 16 * v15 * v22 + v29 - 16;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

void sub_1C978E36C(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  int v43;
  int v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  unsigned __int8 v56;
  int v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  int v69;
  unsigned __int8 v70;
  int v71;
  unsigned __int8 v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  _OWORD v83[8];
  _OWORD v84[4];
  _OWORD v85[8];
  _OWORD v86[4];
  _DWORD v87[2];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 8);
  bzero(a6, 0x380uLL);
  v78 = v9;
  v80 = v9[96];
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  v87[0] = v11;
  v87[1] = v10;
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  memset(v84, 0, sizeof(v84));
  v76 = (a5 >> 3);
  v79 = a4;
  v73 = a5;
  v74 = a4 >> 3;
  memset(v83, 0, sizeof(v83));
  if (a5 >= 8)
  {
    v12 = 0;
    if (v74 <= 1)
      v13 = 1;
    else
      v13 = v74;
    if ((int)v76 <= 1)
      v14 = 1;
    else
      v14 = v76;
    v75 = v14;
    do
    {
      if (a4 >= 8)
      {
        v15 = 0;
        v16 = a3 + 8 * v12;
        v17 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v16 >> 3));
        do
        {
          v18 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, ((a2 + 8 + 8 * (int)v15) >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v16 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v19 = v15 + 1;
          v20 = (*(__int16 *)(v17 + 2 * (v15 + 1)) >> 9) + (*(__int16 *)(v17 + 2 * v15) >> 9);
          *((_BYTE *)v86 + 8 * v15 + v12) = *(_BYTE *)(v18 + 661) + ((v20 + 1) >> 1) - 2;
          v21 = *(char *)(v18 + 660) + ((v20 + 1) >> 1);
          if (v21 >= 51)
            v21 = 51;
          if (v21 <= 15)
            v21 = 15;
          a6[8 * v15 + 768 + v12] = byte_1C9860FB3[v21 - 15];
          if ((v15 & 1) != 0)
          {
            v22 = 0;
            v23 = *(_BYTE *)(v18 + 661);
            v24 = 1;
            do
            {
              v25 = v24;
              v26 = v20 + 2 * v87[v22];
              v27 = (v26 + 1) >> 1;
              if (v26 >= 59)
              {
                if ((v26 + 1) < 0x74)
                  LOBYTE(v27) = byte_1C9861020[v27 - 30];
                else
                  LOBYTE(v27) = v27 - 6;
              }
              v24 = 0;
              *((_BYTE *)&v85[4 * v22] + 8 * (v15 >> 1) + v12) = v27 + v23 + 2;
              v22 = 1;
            }
            while ((v25 & 1) != 0);
          }
          ++v15;
        }
        while (v19 != v13);
      }
      ++v12;
    }
    while (v12 != v75);
  }
  v29 = (a5 >> 3);
  v28 = a3;
  v30 = a3 == 0;
  if ((int)v76 > v30)
  {
    v31 = a3 == 0;
    if (v74 <= 1)
      v32 = 1;
    else
      v32 = v74;
    do
    {
      if (v79 >= 8)
      {
        v33 = 0;
        v34 = a3 + 8 * v31;
        v35 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v34 >> 3));
        do
        {
          v36 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, ((a2 + 8 * (int)v33) >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)), (v34 >> *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113)));
          v37 = (*(__int16 *)(v35 + 2 * v33) >> 9) + (*(__int16 *)(v35 + 2 * (v33 - v80)) >> 9);
          *((_BYTE *)v84 + 8 * v31 + v33) = *(_BYTE *)(v36 + 661) + ((v37 + 1) >> 1) - 2;
          v38 = *(char *)(v36 + 660) + ((v37 + 1) >> 1);
          if (v38 >= 51)
            v38 = 51;
          if (v38 <= 15)
            v38 = 15;
          a6[8 * v31 + 832 + v33] = byte_1C9860FB3[v38 - 15];
          if ((v31 & 1) == 0)
          {
            v39 = 0;
            v40 = *(_BYTE *)(v36 + 661);
            v41 = 1;
            do
            {
              v42 = v41;
              v43 = v37 + 2 * v87[v39];
              v44 = (v43 + 1) >> 1;
              if (v43 >= 59)
              {
                if ((v43 + 1) < 0x74)
                  LOBYTE(v44) = byte_1C9861020[v44 - 30];
                else
                  LOBYTE(v44) = v44 - 6;
              }
              v41 = 0;
              *((_BYTE *)&v83[4 * v39] + 8 * (v31 >> 1) + v33) = v44 + v40 + 2;
              v39 = 1;
            }
            while ((v42 & 1) != 0);
          }
          ++v33;
        }
        while (v33 != v32);
      }
      ++v31;
      v29 = v76;
    }
    while (v31 != v76);
    v28 = a3;
    v30 = a3 == 0;
  }
  if (v79 >= 8)
  {
    v45 = 0;
    v46 = a6;
    LODWORD(v47) = v73 >> 2;
    if (v73 >> 2 <= 1)
      v47 = 1;
    else
      v47 = v47;
    if (v74 <= 1)
      v48 = 1;
    else
      v48 = v74;
    do
    {
      if (v73 >= 4)
      {
        v49 = 0;
        v50 = (unsigned __int8 *)&a6[32 * (v45 >> 1) + 257];
        v51 = v78[121] + ((uint64_t)v28 >> 2) + v78[117] * ((uint64_t)(a2 + 8 + 8 * (int)v45) >> 3);
        do
        {
          if (*(_BYTE *)(v51 + v49))
          {
            v52 = *((char *)v86 + 8 * v45 + (v49 >> 1)) + 2 * *(unsigned __int8 *)(v51 + v49);
            if (v52 >= 53)
              v52 = 53;
            if (v52 <= 17)
              v52 = 17;
            v46[v49] = byte_1C9860FE4[v52 - 17];
          }
          ++v49;
        }
        while (v47 != v49);
        if ((v45 & 1) != 0)
        {
          v53 = 0;
          do
          {
            if (*(unsigned __int8 *)(v51 + v53) >= 2u)
            {
              v54 = (char *)v85 + 8 * (v45 >> 1) + (v53 >> 1);
              v55 = *v54;
              if (v55 >= 53)
                v55 = 53;
              if (v55 <= 17)
                v55 = 17;
              v56 = byte_1C9860FE4[v55 - 17];
              v57 = v54[64];
              if (v57 >= 53)
                v57 = 53;
              if (v57 <= 17)
                v57 = 17;
              v58 = byte_1C9860FE4[v57 - 17];
              *(v50 - 1) = v56;
              *v50 = v58;
            }
            ++v53;
            v50 += 2;
          }
          while (v47 != v53);
        }
      }
      ++v45;
      v46 += 16;
    }
    while (v45 != v48);
  }
  if ((int)v29 > v30)
  {
    v59 = v28 == 0;
    LODWORD(v60) = v79 >> 2;
    if (v79 >> 2 <= 1)
      v60 = 1;
    else
      v60 = v60;
    v61 = &a6[16 * (v28 == 0) + 128];
    do
    {
      if (v79 >= 4)
      {
        v62 = 0;
        v63 = v59 >> 1;
        v64 = (unsigned __int8 *)&a6[32 * v63 + 513];
        v65 = v78[118] + ((uint64_t)a2 >> 2) + v78[116] * ((uint64_t)(v28 + 8 * (int)v59) >> 3);
        do
        {
          if (*(_BYTE *)(v65 + v62))
          {
            v66 = *((char *)v84 + 8 * v59 + (v62 >> 1)) + 2 * *(unsigned __int8 *)(v65 + v62);
            if (v66 >= 53)
              v66 = 53;
            if (v66 <= 17)
              v66 = 17;
            v61[v62] = byte_1C9860FE4[v66 - 17];
          }
          ++v62;
        }
        while (v60 != v62);
        if ((v59 & 1) == 0)
        {
          v67 = 0;
          do
          {
            if (*(unsigned __int8 *)(v65 + v67) >= 2u)
            {
              v68 = (char *)v83 + 8 * v63 + (v67 >> 1);
              v69 = *v68;
              if (v69 >= 53)
                v69 = 53;
              if (v69 <= 17)
                v69 = 17;
              v70 = byte_1C9860FE4[v69 - 17];
              v71 = v68[64];
              if (v71 >= 53)
                v71 = 53;
              if (v71 <= 17)
                v71 = 17;
              v72 = byte_1C9860FE4[v71 - 17];
              *(v64 - 1) = v70;
              *v64 = v72;
            }
            ++v67;
            v64 += 2;
          }
          while (v60 != v67);
        }
      }
      ++v59;
      v61 += 16;
    }
    while (v59 != v29);
  }
}

_QWORD *sub_1C978EA14(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = 0;
  if (a6 >= 1)
  {
    v6 = (char *)__dst;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(v7 + 416);
    v9 = (char *)(*(_QWORD *)(v7 + 400) + ((v8 * a4 + a3) << *(_BYTE *)(v7 + 531)));
    v10 = 2 * a5;
    v11 = a6;
    v12 = 2 * v8;
    do
    {
      __dst = memcpy(v6, v9, v10);
      v9 += v12;
      v6 += v10;
      --v11;
    }
    while (v11);
  }
  return __dst;
}

uint64_t sub_1C978EAB0(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t *v50;
  _BOOL8 v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  int v56;
  int *v57;
  int v58;
  uint64_t v59;
  signed int v61;
  uint64_t vars0;
  int vars8_4;
  unsigned int vars8_4a;

  v25 = a3;
  v26 = result;
  v27 = *(_QWORD *)(a2 + 8);
  v58 = *(_DWORD *)(v27 + 520);
  v28 = *(_QWORD *)(v27 + 416);
  v29 = *a3;
  v59 = v27;
  if (*a3 < *(_DWORD *)(v27 + 524))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  v30 = *(_DWORD *)(result + 120);
  if (v30 < v29)
  {
    v61 = (v58 - 1) & 0xFFFFFFC0;
    v31 = 8 * v28;
    v57 = v25;
    do
    {
      v32 = *(_QWORD *)(v59 + 400) + ((*(_QWORD *)(v59 + 416) * v30) << *(_BYTE *)(v59 + 531));
      v33 = v29 - v30;
      if (v33 >= 64)
        v34 = 64;
      else
        v34 = v33;
      v35 = (int)v34 >> 3;
      vars0 = ((int)v34 >> 3);
      v36 = 0;
      if (v61 >= 1)
      {
        do
        {
          v37 = &a9;
          vars8_4 = v36;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          v38 = 0;
          do
          {
            v39 = v38 + 8;
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 72))(v38 + 8 + v32, v28, (char *)&STACK[0x740] + v38, v37, v34);
            v37 += 16;
            v38 = v39;
          }
          while (v39 != 64);
          v40 = *(_DWORD *)(v26 + 120);
          if (v35 > (v40 == 0))
          {
            v41 = v40 == 0;
            v42 = vars0 - v41;
            v43 = &a25 + 2 * v41;
            v44 = &STACK[0x780] + v41;
            v45 = v32 + v31 * v41;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 80))(v45, v28, v44, v43, 64);
              v43 += 2;
              ++v44;
              v45 += v31;
              --v42;
            }
            while (v42);
          }
          v32 += 64;
          v36 = vars8_4 + 64;
          v35 = (int)v34 >> 3;
        }
        while (vars8_4 + 64 < v61);
        v30 = *(_DWORD *)(v26 + 120);
      }
      v46 = v58 - v36;
      if (v58 != v36)
      {
        result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        vars8_4a = v46;
        if (v46 >= 16)
        {
          v47 = v32 + 8;
          v48 = (vars8_4a >> 3) - 1;
          v49 = &a9;
          v50 = &STACK[0x740];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 72))(v47, v28, v50, v49, v34);
            v49 += 16;
            ++v50;
            v47 += 8;
            --v48;
          }
          while (v48);
        }
        v30 = *(_DWORD *)(v26 + 120);
        if ((int)vars0 > (v30 == 0))
        {
          v51 = v30 == 0;
          v52 = vars0 - v51;
          v53 = &a25 + 2 * v51;
          v54 = &STACK[0x780] + v51;
          v55 = v32 + v31 * v51;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v26 + 80))(v55, v28, v54, v53, vars8_4a);
            v53 += 2;
            ++v54;
            v55 += v31;
            --v52;
          }
          while (v52);
          v30 = *(_DWORD *)(v26 + 120);
        }
      }
      v30 += v34;
      *(_DWORD *)(v26 + 120) = v30;
      v25 = v57;
      v29 = *v57;
    }
    while (v30 < *v57);
  }
  v56 = *(_DWORD *)(v59 + 524);
  if (v56 >= v30)
    v56 = v30;
  *v25 = v56;
  if (*(_DWORD *)(v26 + 120) < *(_DWORD *)(v59 + 524))
  {
    if (v56 <= 4)
      v56 = 4;
    *v25 = v56 - 4;
  }
  return result;
}

int *sub_1C978EDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int *result;
  int *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t *v55;
  int v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  int v62;
  int *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  signed int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t vars0;
  int vars8_4;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v27 = v26;
  v28 = result;
  STACK[0x9418] = *MEMORY[0x1E0C80C00];
  v66 = v29;
  v30 = *(_QWORD *)(v29 + 8);
  v64 = *(_DWORD *)(v30 + 520);
  v31 = *(_QWORD *)(v30 + 416);
  v32 = *v26;
  v65 = v30;
  if (*v26 < *(_DWORD *)(v30 + 524))
  {
    v32 &= 0xFFFFFFF0;
    *v26 = v32;
  }
  v33 = result[30];
  if ((int)v33 < v32)
  {
    v67 = (v64 - 1) & 0xFFFFFFC0;
    v63 = v27;
    v70 = 8 * v31;
    do
    {
      v34 = *(_QWORD *)(v65 + 400) + ((*(_QWORD *)(v65 + 416) * (int)v33) << *(_BYTE *)(v65 + 531));
      v35 = v32 - v33;
      if (v35 >= 64)
        v36 = 64;
      else
        v36 = v35;
      if ((_DWORD)v33)
        v37 = v33 - 8;
      else
        v37 = 0;
      v38 = v36 + 8;
      if (!(_DWORD)v33)
        v38 = v36;
      v68 = v38;
      v69 = v37;
      v39 = (int)v36 >> 3;
      vars0 = ((int)v36 >> 3);
      v40 = 0;
      if (v67 >= 1)
      {
        do
        {
          v41 = &a9;
          (*((void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))v28 + 6))(v66, v40, v28[30], 64, v36, &a9);
          vars8_4 = v40;
          sub_1C978FA80(&STACK[0x3F0], v66, v40, v69, 72, v68);
          v42 = 0;
          do
          {
            v43 = v42 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v28 + 9))(v42 + 8 + v34, v31, (char *)&STACK[0x360] + v42, v41, v36);
            v41 += 16;
            v42 = v43;
          }
          while (v43 != 64);
          sub_1C978D2B8((int *)&STACK[0x3F0]);
          v44 = v28[30];
          if (v39 > (v44 == 0))
          {
            v45 = v44 == 0;
            v46 = vars0 - v45;
            v47 = &a25 + 2 * v45;
            v48 = &STACK[0x3A0] + v45;
            v49 = v34 + v70 * v45;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v49, v31, v48, v47, 64);
              v47 += 2;
              ++v48;
              v49 += v70;
              --v46;
            }
            while (v46);
          }
          result = sub_1C978D2B8((int *)&STACK[0x3F0]);
          v34 += 64;
          v40 = (v40 + 64);
          v39 = (int)v36 >> 3;
        }
        while ((int)v40 < v67);
        v33 = v28[30];
      }
      v50 = v64 - v40;
      if (v64 != (_DWORD)v40)
      {
        (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char *))v28 + 6))(v66, v40, v33, (v64 - v40), v36, &a9);
        sub_1C978FA80(&STACK[0x3F0], v66, v40, v69, v50, v68);
        v51 = (v64 - v40);
        if (v50 >= 16)
        {
          v52 = v34 + 8;
          v53 = (v50 >> 3) - 1;
          v54 = &a9;
          v55 = &STACK[0x360];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v28 + 9))(v52, v31, v55, v54, v36);
            v54 += 16;
            ++v55;
            v52 += 8;
            --v53;
          }
          while (v53);
        }
        sub_1C978D2B8((int *)&STACK[0x3F0]);
        v56 = v28[30];
        if ((int)vars0 > (v56 == 0))
        {
          v57 = v56 == 0;
          v58 = vars0 - v57;
          v59 = &a25 + 2 * v57;
          v60 = &STACK[0x3A0] + v57;
          v61 = v34 + v70 * v57;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v61, v31, v60, v59, v51);
            v59 += 2;
            ++v60;
            v61 += v70;
            --v58;
          }
          while (v58);
        }
        result = sub_1C978D2B8((int *)&STACK[0x3F0]);
        LODWORD(v33) = v28[30];
      }
      v27 = v63;
      v33 = (v33 + v36);
      v28[30] = v33;
      v32 = *v63;
    }
    while ((int)v33 < *v63);
  }
  v62 = *(_DWORD *)(v65 + 524);
  if (v62 >= (int)v33)
    v62 = v33;
  *v27 = v62;
  if (v28[30] < *(_DWORD *)(v65 + 524))
  {
    if (v62 <= 4)
      v62 = 4;
    *v27 = v62 - 4;
  }
  return result;
}

uint64_t sub_1C978F1A8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t *v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t *vars0;
  uint64_t vars8;
  uint64_t v81;
  int v82;
  uint64_t v83;
  signed int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;

  v37 = result;
  v38 = *(_QWORD *)(a2 + 8);
  v39 = *(_QWORD *)(a2 + 16);
  v40 = *(_DWORD *)(v38 + 520);
  v41 = *(_DWORD *)(v38 + 524);
  v83 = v38;
  v42 = *(_QWORD *)(v38 + 416);
  v43 = *(unsigned __int8 *)(v39 + 2117);
  LOBYTE(v38) = *(_BYTE *)(v39 + 2113);
  v44 = a3 << v38;
  v45 = a4 << v38;
  v46 = v45 - 16;
  v82 = v40;
  if (*(_DWORD *)(v39 + 2120) - 1 == a3)
  {
    v47 = v45 < 16;
    if (v45 >= 16)
      v48 = v45 - 16;
    else
      v48 = 0;
    if (v47)
      v49 = v46;
    else
      v49 = 0;
    v50 = v49 + v43;
    if (v44 <= 63)
      v51 = 0;
    else
      v51 = (v44 - 1) & 0xFFFFFFC0;
    v84 = v51;
    v88 = v40 - v51;
    v52 = v50 + v48 - 8;
    if (v50 + v48 < 8)
      v52 = 0;
    *(_DWORD *)(result + 120) = v52;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 2124) - 1 == a4)
    {
      v50 = v41 - v48;
      *(_DWORD *)(result + 120) = v41;
    }
  }
  else
  {
    if (!a3 || (v44 & 0x3F) != 0)
      return result;
    v53 = v45 < 16;
    if (v45 >= 16)
      v48 = v45 - 16;
    else
      v48 = 0;
    if (!v53)
      v46 = 0;
    v50 = v46 + v43;
    if (v44 >= 64)
      v54 = v44 - 64;
    else
      v54 = 0;
    v84 = v54;
    if (v44 >= 64)
      v44 = 64;
    v88 = v44;
    v55 = v41 - v48;
    if (*(_DWORD *)(v39 + 2124) - 1 == a4)
      v50 = v55;
  }
  if (v50 >= 1)
  {
    v56 = 0;
    v73 = v48;
    v57 = 8 * v42;
    v74 = v50;
    v81 = a2;
    v75 = v50;
    do
    {
      v76 = v56;
      if (v50 - (int)v56 >= 64)
        v58 = 64;
      else
        v58 = (v50 - v56);
      if (v88 >= 1)
      {
        v59 = 0;
        v87 = v56 + v73;
        v60 = (_DWORD)v56 + (_DWORD)v73 == 0;
        v85 = ((int)v58 >> 3);
        v86 = (_DWORD)v56 + (_DWORD)v73 == 0;
        vars8 = v85 - v60;
        v78 = &STACK[0x840] + v60;
        vars0 = &a37 + 2 * v60;
        v77 = v57 * v60;
        do
        {
          if (v88 - (int)v59 >= 64)
            v61 = 64;
          else
            v61 = (v88 - v59);
          v62 = *(_QWORD *)(v83 + 416);
          v90 = *(_QWORD *)(v83 + 400);
          v63 = *(_BYTE *)(v83 + 531);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v37 + 48))(a2, v59 + v84, v87, v61, v58, &a21);
          v89 = (v59 + v84 + v62 * v87) << v63;
          LODWORD(v64) = (int)v61 >> 3;
          if ((int)v61 + v84 + (int)v59 >= v82)
            v64 = v64;
          else
            v64 = (v64 + 1);
          if ((int)v64 >= 2)
          {
            v65 = v64 - 1;
            v66 = v90 + v89 + 8;
            v67 = &a21;
            v68 = &STACK[0x800];
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v37 + 72))(v66, v42, v68, v67, v58);
              v67 += 16;
              ++v68;
              v66 += 8;
              --v65;
            }
            while (v65);
          }
          if ((int)v85 > v86)
          {
            v69 = v78;
            v70 = v90 + v77 + v89;
            v72 = vars0;
            v71 = vars8;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v37 + 80))(v70, v42, v69, v72, v61);
              v72 += 2;
              ++v69;
              v70 += v57;
              --v71;
            }
            while (v71);
          }
          v59 += 64;
          a2 = v81;
        }
        while (v59 < v88);
      }
      v56 = v76 + 64;
      v50 = v75;
    }
    while (v76 + 64 < v74);
  }
  return result;
}

int *sub_1C978F4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  int *result;
  uint64_t v42;
  int v43;
  int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  int v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  BOOL v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t *v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  signed int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v45 = result;
  STACK[0x9498] = *MEMORY[0x1E0C80C00];
  v46 = *(_QWORD *)(v42 + 8);
  v47 = *(_QWORD *)(v42 + 16);
  v48 = *(_DWORD *)(v46 + 520);
  v49 = *(_DWORD *)(v46 + 524);
  v94 = v46;
  v95 = v42;
  v50 = *(_QWORD *)(v46 + 416);
  v51 = *(unsigned __int8 *)(v47 + 2117);
  LOBYTE(v46) = *(_BYTE *)(v47 + 2113);
  v52 = v43 << v46;
  v53 = v44 << v46;
  v54 = v53 - 16;
  v93 = v48;
  if (*(_DWORD *)(v47 + 2120) - 1 == v43)
  {
    v55 = v53 < 16;
    if (v53 >= 16)
      v56 = v53 - 16;
    else
      v56 = 0;
    if (v55)
      v57 = v54;
    else
      v57 = 0;
    v58 = v57 + v51;
    if (v52 <= 63)
      v59 = 0;
    else
      v59 = (v52 - 1) & 0xFFFFFFC0;
    v96 = v59;
    v100 = v48 - v59;
    v60 = v58 + v56 - 8;
    if (v58 + v56 < 8)
      v60 = 0;
    result[30] = v60;
    if (*(_DWORD *)(*(_QWORD *)(v42 + 16) + 2124) - 1 == v44)
    {
      v58 = v49 - v56;
      result[30] = v49;
    }
  }
  else
  {
    if (!v43 || (v52 & 0x3F) != 0)
      return result;
    v61 = v53 < 16;
    if (v53 >= 16)
      v56 = v53 - 16;
    else
      v56 = 0;
    if (!v61)
      v54 = 0;
    v58 = v54 + v51;
    if (v52 >= 64)
      v62 = v52 - 64;
    else
      v62 = 0;
    v96 = v62;
    if (v52 >= 64)
      v52 = 64;
    v100 = v52;
    v63 = v49 - v56;
    if (*(_DWORD *)(v47 + 2124) - 1 == v44)
      v58 = v63;
  }
  if (v58 >= 1)
  {
    v64 = 0;
    v65 = 8 * v50;
    v87 = v58;
    v88 = v56;
    v89 = v58;
    do
    {
      if (v58 - (int)v64 >= 64)
        v66 = 64;
      else
        v66 = (v58 - v64);
      v90 = v64;
      v101 = v64 + v88;
      v67 = (_DWORD)v64 + (_DWORD)v88 == 0;
      if ((_DWORD)v64 + (_DWORD)v88)
        v68 = v64 + v88 - 8;
      else
        v68 = 0;
      v69 = v66 + 8;
      if (v67)
        v69 = v66;
      v98 = v69;
      v99 = v68;
      if (v100 >= 1)
      {
        v70 = 0;
        v71 = (_DWORD)v101 == 0;
        v97 = ((int)v66 >> 3);
        v92 = v97 - v71;
        v91 = v65 * v71;
        do
        {
          if (v100 - (int)v70 >= 64)
            v72 = 64;
          else
            v72 = (v100 - v70);
          v73 = v70 + v96;
          v103 = v72 + v96 + v70;
          v102 = *(_QWORD *)(v94 + 416);
          v105 = *(_QWORD *)(v94 + 400);
          v74 = *(_BYTE *)(v94 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v45 + 6))(v95, v73, v101, v72, v66, &a25);
          v75 = v103 < v93;
          if (v103 >= v93)
            v76 = v72;
          else
            v76 = v72 + 8;
          v104 = (v73 + v102 * v101) << v74;
          v77 = (int)v72 >> 3;
          if (v75)
            v78 = v77 + 1;
          else
            v78 = v77;
          sub_1C978FA80(&STACK[0x470], v95, v73, v99, v76, v98);
          if ((int)v78 >= 2)
          {
            v79 = v78 - 1;
            v80 = v105 + v104 + 8;
            v81 = &a25;
            v82 = &STACK[0x3E0];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v45 + 9))(v80, v50, v82, v81, v66);
              v81 += 16;
              ++v82;
              v80 += 8;
              --v79;
            }
            while (v79);
          }
          sub_1C978D2B8((int *)&STACK[0x470]);
          if ((int)v97 > ((_DWORD)v101 == 0))
          {
            v83 = &STACK[0x420] + ((_DWORD)v101 == 0);
            v84 = v105 + v91 + v104;
            v86 = &a41 + 2 * ((_DWORD)v101 == 0);
            v85 = v92;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v45 + 10))(v84, v50, v83, v86, v72);
              v86 += 2;
              ++v83;
              v84 += v65;
              --v85;
            }
            while (v85);
          }
          result = sub_1C978D2B8((int *)&STACK[0x470]);
          v70 += 64;
        }
        while (v70 < v100);
      }
      v64 = v90 + 64;
      v58 = v89;
    }
    while (v90 + 64 < v87);
  }
  return result;
}

uint64_t sub_1C978F8B4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD v30[380];

  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(v6 + 520);
  v8 = *(_DWORD *)(v6 + 524);
  v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(_BYTE *)(v5 + 2113);
  v10 = (a3 << v5);
  v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7)
    v12 = (v7 - v10);
  else
    v12 = v9;
  if ((int)(v11 + v9) >= v8)
    v13 = (v8 - v11);
  else
    v13 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  v15 = *(_QWORD *)(v6 + 416);
  v28 = (v15 * (int)v11 + (int)v10) << *(_BYTE *)(v6 + 531);
  v29 = *(_QWORD *)(v6 + 400);
  v16 = ((int)v12 >> 3);
  if ((int)v16 > ((_DWORD)v10 == 0))
  {
    v17 = v16 - ((_DWORD)v10 == 0);
    v18 = &v30[10 * ((_DWORD)v10 == 0)];
    v19 = &v30[5 * ((_DWORD)v10 == 0) + 296];
    v20 = v29 + v28 + 8 * ((_DWORD)v10 == 0) - 8 * v15;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, _QWORD))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  v21 = ((int)v13 >> 3);
  if ((int)v21 > ((_DWORD)v11 == 0))
  {
    v22 = (_DWORD)v11 == 0;
    v23 = (v12 + 8);
    v24 = v21 - v22;
    v25 = &v30[10 * v22 + 80];
    v26 = &v30[5 * v22 + 336];
    v27 = v28 + 8 * v15 * v22 + v29 - 8;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

_QWORD *sub_1C978FA80(_QWORD *__dst, uint64_t a2, int a3, int a4, int a5, int a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;

  __dst[4608] = a2;
  *((_DWORD *)__dst + 9218) = a3;
  *((_DWORD *)__dst + 9219) = a4;
  *((_DWORD *)__dst + 9220) = a5;
  *((_DWORD *)__dst + 9221) = a6;
  *((_DWORD *)__dst + 9222) = 0;
  if (a6 >= 1)
  {
    v6 = (char *)__dst;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(v7 + 416);
    v9 = (char *)(*(_QWORD *)(v7 + 400) + ((v8 * a4 + a3) << *(_BYTE *)(v7 + 531)));
    v10 = a5;
    v11 = a6;
    do
    {
      __dst = memcpy(v6, v9, v10);
      v9 += v8;
      v6 += v10;
      --v11;
    }
    while (v11);
  }
  return __dst;
}

void sub_1C978FB14(uint64_t a1, uint64_t a2, char a3, int *a4)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  signed int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (*(_BYTE *)(a2 + 531))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("unsupported sample type\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "unsupported sample type\n");
    }
  }
  else
  {
    v5 = *(_DWORD *)(a2 + 520);
    v6 = *(_DWORD *)(a2 + 524);
    v7 = v6 >> 1;
    v8 = *(_QWORD *)(a2 + 424);
    v9 = *a4;
    if (v6 >> 1 >= *a4 >> 1)
      v7 = *a4 >> 1;
    v10 = 2 * (v7 & 0xFFFFFFF8);
    if (v10 <= 4)
      v10 = 4;
    v11 = v10 - 4;
    v12 = v9 < v6;
    if (v9 < v6)
      v13 = v11;
    else
      v13 = 2 * v7;
    if (v12)
      v14 = v7 & 0xFFFFFFF8;
    else
      v14 = v7;
    *a4 = v13;
    v29 = *(int *)(a1 + 124);
    v15 = a3;
    if (a3 >= 51)
      v15 = 51;
    if (v15 <= 15)
      v15 = 15;
    v16 = v15 - 15;
    v17 = byte_1C9860FB3[v16];
    v18 = byte_1C9860FE4[v16];
    v19 = *(_QWORD *)(a2 + 408);
    *(_DWORD *)(a1 + 124) = v14;
    if ((_DWORD)v18)
      v20 = v5 < 2;
    else
      v20 = 1;
    if (!v20)
    {
      v21 = 0;
      v22 = v14 - v29;
      v30 = v19 + v8 * v29;
      v23 = v5 >> 1;
      v24 = v19 + v8 * (v29 + 4);
      v28 = v23;
      do
      {
        if ((v21 | 4) < v23)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 104))(v30 + 2 * (v21 | 4), v8, v17, v18, v22);
        v25 = v21 + 8;
        if (v21 + 8 < v23)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 104))(v30 + 2 * v25, v8, v17, v18, v22);
        if ((_DWORD)v29)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 112))(v30 + 2 * v21, v8, v17, v18, 8);
        if ((int)v22 >= 5)
        {
          v26 = 4;
          v27 = v24;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 112))(v27, v8, v17, v18, 8);
            v26 += 4;
            v27 += 4 * v8;
          }
          while ((int)v22 > v26);
        }
        v24 += 16;
        v21 = v25;
        v23 = v28;
      }
      while (v25 < v28);
    }
  }
}

void sub_1C978FD40(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint8x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x8_t *v16;
  BOOL v17;

  v2 = a1[-1].u8[15];
  v3 = a1[3].u8[15];
  v4 = v3 + v2 - 2 * a1[1].u8[15];
  if (v4 < 0)
    v4 = 2 * a1[1].u8[15] - (v3 + v2);
  if (v4 > 7)
    goto LABEL_7;
  v5 = a1[7].u8[15];
  v6 = v5 + v2 - 2 * a1[5].u8[15];
  if (v6 < 0)
    v6 = 2 * a1[5].u8[15] - (v5 + v2);
  if (v6 < 8)
  {
    v7 = 0;
    v8 = (uint8x8_t)vdup_n_s8(v2);
    *(_BYTE *)(a2 - 1) = v2;
    v9 = (int16x8_t)vmovl_u8(v8);
    v10 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v5), v8);
    v11 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v3), v8);
    v12 = vmulq_s16(v10, (int16x8_t)xmmword_1C9862C60);
    v13 = vmulq_s16(v11, (int16x8_t)xmmword_1C9862C60);
    v14 = vshlq_n_s16(v10, 3uLL);
    v15 = vshlq_n_s16(v11, 3uLL);
    do
    {
      v16 = (int8x8_t *)(a2 + v7);
      v16[8] = vqmovun_s16(vrsraq_n_s16(v9, v12, 6uLL));
      *v16 = vqmovun_s16(vrsraq_n_s16(v9, v13, 6uLL));
      v12 = vaddq_s16(v12, v14);
      v13 = vaddq_s16(v13, v15);
      v17 = v7 >= 0x38;
      v7 += 8;
    }
    while (!v17);
  }
  else
  {
LABEL_7:
    sub_1C970EE04(a1, a2);
  }
}

_OWORD *sub_1C978FE00(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  const char *i8;
  uint8x8_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *result;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint8x8_t v37;
  int8x8_t v38;
  int8x16_t v39;
  uint8x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int8x16_t v45;
  uint8x8_t v46;
  int8x16_t v47;
  uint8x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  uint8x8_t v59;
  uint8x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  _OWORD v79[8];
  _OWORD v80[4];
  _OWORD v81[8];
  uint64_t v82;

  v4 = 0;
  v82 = *MEMORY[0x1E0C80C00];
  v81[0] = xmmword_1C9862CB0;
  v81[1] = xmmword_1C9862CC0;
  v81[2] = xmmword_1C9862CD0;
  v81[3] = xmmword_1C9862CE0;
  v81[4] = xmmword_1C9862C70;
  v81[5] = xmmword_1C9862C80;
  v81[6] = xmmword_1C9862C90;
  v81[7] = xmmword_1C9862CA0;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[10];
  v11 = a2[11];
  v80[0] = *a2;
  v80[1] = v5;
  v80[2] = v6;
  v80[3] = v7;
  v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
  i8 = a2[12].i8;
  v13 = (uint8x8_t)vld1_dup_s8(i8);
  v14 = a2[4].i8;
  *(int8x8_t *)v5.i8 = vld1_dup_s8(v14);
  v77 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v13);
  v78 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v13);
  v76 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v13);
  v75 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v13);
  v74 = (int16x8_t)vmull_u8((uint8x8_t)0x2827262524232221, v13);
  v73 = (int16x8_t)vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, v13);
  v71 = (int16x8_t)vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, v13);
  v79[0] = vmull_u8((uint8x8_t)0x807060504030201, *(uint8x8_t *)v5.i8);
  v79[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, *(uint8x8_t *)v5.i8);
  v79[2] = vmull_u8((uint8x8_t)0x1817161514131211, *(uint8x8_t *)v5.i8);
  v79[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, *(uint8x8_t *)v5.i8);
  v79[4] = vmull_u8((uint8x8_t)0x2827262524232221, *(uint8x8_t *)v5.i8);
  v79[5] = vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, *(uint8x8_t *)v5.i8);
  v79[6] = vmull_u8((uint8x8_t)0x3837363534333231, *(uint8x8_t *)v5.i8);
  v79[7] = vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, *(uint8x8_t *)v5.i8);
  v15 = 4 * a3;
  v16 = a3 + 48;
  v17 = 2 * a3 + 48;
  v18 = v17 + a3;
  v19 = 5 * a3;
  v20 = 6 * a3;
  v21 = 7 * a3;
  result = v79;
  v23 = (int16x8_t)vmovl_high_u8(v8);
  v24 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
  v25 = (int16x8_t)vmovl_high_u8(v9);
  v26 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
  v27 = (int16x8_t)vmovl_high_u8(v10);
  v28 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
  v30 = (int16x8_t)vmull_u8((uint8x8_t)0x3837363534333231, v13);
  v29 = (int16x8_t)vmovl_high_u8(v11);
  do
  {
    v31 = (int16x8_t)v79[v4];
    v32 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 0);
    v33 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 1);
    v34 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 2);
    v35 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 3);
    v36 = (int16x8_t)v81[v4];
    v37 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)((char *)v80 + 8 * v4), 0);
    v38 = *(int8x8_t *)((char *)v80 + 8 * v4);
    v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v77), v37, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 0), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v78), v37, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 0), 7uLL);
    v40 = (uint8x8_t)vdup_lane_s8(v38, 1);
    v41 = (int16x8_t)vmovl_u8(v37);
    v42 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v77), v40, (uint8x8_t)0x38393A3B3C3D3E3FLL);
    v43 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v78), v40, (uint8x8_t)0x3031323334353637);
    v44 = (int16x8_t)vmovl_u8(v40);
    v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(v42, v24, *(int16x4_t *)v36.i8, 1), 7uLL), vmlaq_lane_s16(v43, v23, *(int16x4_t *)v36.i8, 1), 7uLL);
    v46 = (uint8x8_t)vdup_lane_s8(v38, 2);
    v47 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v77), v46, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 2), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v78), v46, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 2), 7uLL);
    v48 = (uint8x8_t)vdup_lane_s8(v38, 3);
    v49 = (int16x8_t)vmovl_u8(v46);
    v50 = (int16x8_t)vmovl_u8(v48);
    *a4 = v39;
    v51 = (int8x16_t *)((char *)a4 + v16);
    v51[-3] = v45;
    v52 = (int8x16_t *)((char *)a4 + v17);
    v52[-3] = v47;
    v53 = (int8x16_t *)((char *)a4 + v18);
    v53[-3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v77), v48, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 3), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v78), v48, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 3), 7uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v76), v26, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1C9862CD0, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v75), v25, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1C9862CE0, v41), 7uLL);
    v51[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v76), v26, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1C9862CD0, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v75), v25, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1C9862CE0, v44), 7uLL);
    v52[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v76), v26, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1C9862CD0, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v75), v25, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1C9862CE0, v49), 7uLL);
    v53[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v76), v26, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1C9862CD0, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v75), v25, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1C9862CE0, v50), 7uLL);
    a4[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v74), v28, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1C9862C70, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v73), v27, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1C9862C80, v41), 7uLL);
    v51[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v74), v28, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1C9862C70, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v73), v27, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1C9862C80, v44), 7uLL);
    v52[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v74), v28, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1C9862C70, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v73), v27, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1C9862C80, v49), 7uLL);
    v53[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v74), v28, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1C9862C70, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v73), v27, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1C9862C80, v50), 7uLL);
    a4[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v30), v72, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1C9862C90, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v71), v29, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1C9862CA0, v41), 7uLL);
    *v51 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v30), v72, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1C9862C90, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v71), v29, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1C9862CA0, v44), 7uLL);
    *v52 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v30), v72, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1C9862C90, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v71), v29, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1C9862CA0, v49), 7uLL);
    *v53 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v30), v72, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1C9862C90, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v71), v29, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1C9862CA0, v50), 7uLL);
    v54 = (int8x16_t *)((char *)a4 + v15);
    v55 = vdupq_laneq_s16(v31, 4);
    v56 = vdupq_laneq_s16(v31, 5);
    v57 = vdupq_laneq_s16(v31, 6);
    v58 = vdupq_laneq_s16(v31, 7);
    v59 = (uint8x8_t)vdup_lane_s8(v38, 4);
    v60 = (uint8x8_t)vdup_lane_s8(v38, 5);
    v61 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v77), v59, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 4), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v78), v59, (uint8x8_t)0x3031323334353637), v23, v36, 4), 7uLL);
    *(int8x8_t *)v44.i8 = vdup_lane_s8(v38, 6);
    v62 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v77), *(uint8x8_t *)v44.i8, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 6), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v78), *(uint8x8_t *)v44.i8, (uint8x8_t)0x3031323334353637), v23, v36, 6), 7uLL);
    v63 = (int16x8_t)vmovl_u8(v59);
    v64 = (int16x8_t)vmovl_u8(v60);
    v65 = (uint8x8_t)vdup_lane_s8(v38, 7);
    v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v44.i8);
    v67 = (int16x8_t)vmovl_u8(v65);
    *v54 = v61;
    v68 = (int8x16_t *)((char *)a4 + v19);
    *v68 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v77), v60, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 5), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v78), v60, (uint8x8_t)0x3031323334353637), v23, v36, 5), 7uLL);
    v69 = (int8x16_t *)((char *)a4 + v20);
    *v69 = v62;
    v70 = (int8x16_t *)((char *)a4 + v21);
    *v70 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v77), v65, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 7), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v78), v65, (uint8x8_t)0x3031323334353637), v23, v36, 7), 7uLL);
    v54[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v76), v26, v36, 4), (int16x8_t)xmmword_1C9862CD0, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v75), v25, v36, 4), (int16x8_t)xmmword_1C9862CE0, v63), 7uLL);
    v68[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v76), v26, v36, 5), (int16x8_t)xmmword_1C9862CD0, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v75), v25, v36, 5), (int16x8_t)xmmword_1C9862CE0, v64), 7uLL);
    v69[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v76), v26, v36, 6), (int16x8_t)xmmword_1C9862CD0, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v75), v25, v36, 6), (int16x8_t)xmmword_1C9862CE0, v66), 7uLL);
    v70[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v76), v26, v36, 7), (int16x8_t)xmmword_1C9862CD0, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v75), v25, v36, 7), (int16x8_t)xmmword_1C9862CE0, v67), 7uLL);
    v54[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v74), v28, v36, 4), (int16x8_t)xmmword_1C9862C70, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v73), v27, v36, 4), (int16x8_t)xmmword_1C9862C80, v63), 7uLL);
    v68[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v74), v28, v36, 5), (int16x8_t)xmmword_1C9862C70, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v73), v27, v36, 5), (int16x8_t)xmmword_1C9862C80, v64), 7uLL);
    v69[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v74), v28, v36, 6), (int16x8_t)xmmword_1C9862C70, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v73), v27, v36, 6), (int16x8_t)xmmword_1C9862C80, v66), 7uLL);
    v70[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v74), v28, v36, 7), (int16x8_t)xmmword_1C9862C70, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v73), v27, v36, 7), (int16x8_t)xmmword_1C9862C80, v67), 7uLL);
    v54[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v30), v72, v36, 4), (int16x8_t)xmmword_1C9862C90, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v71), v29, v36, 4), (int16x8_t)xmmword_1C9862CA0, v63), 7uLL);
    v68[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v30), v72, v36, 5), (int16x8_t)xmmword_1C9862C90, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v71), v29, v36, 5), (int16x8_t)xmmword_1C9862CA0, v64), 7uLL);
    v69[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v30), v72, v36, 6), (int16x8_t)xmmword_1C9862C90, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v71), v29, v36, 6), (int16x8_t)xmmword_1C9862CA0, v66), 7uLL);
    v70[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v30), v72, v36, 7), (int16x8_t)xmmword_1C9862C90, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v71), v29, v36, 7), (int16x8_t)xmmword_1C9862CA0, v67), 7uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + v15 + v15);
  }
  while (v4 != 8);
  return result;
}

void sub_1C97905DC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  int v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 64;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

int8x16_t sub_1C9790604(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  __int128 v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t result;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  _OWORD v22[2];
  uint64_t v23;

  v4 = 0;
  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v22[0] = *a2;
  v22[1] = v5;
  do
  {
    v6 = *(int8x8_t *)((char *)v22 + v4);
    v7 = vdupq_lane_s8(v6, 0);
    v8 = vdupq_lane_s8(v6, 1);
    v9 = vdupq_lane_s8(v6, 2);
    v10 = vdupq_lane_s8(v6, 3);
    v11 = vdupq_lane_s8(v6, 4);
    v12 = vdupq_lane_s8(v6, 5);
    v13 = vdupq_lane_s8(v6, 6);
    result = vdupq_lane_s8(v6, 7);
    *a4 = v7;
    a4[1] = v7;
    v15 = (int8x16_t *)((char *)a4 + a3);
    *v15 = v8;
    v15[1] = v8;
    v16 = (int8x16_t *)((char *)a4 + a3 + a3);
    *v16 = v9;
    v16[1] = v9;
    v17 = (int8x16_t *)((char *)v16 + a3);
    *v17 = v10;
    v17[1] = v10;
    v18 = (int8x16_t *)((char *)v17 + a3);
    *v18 = v11;
    v18[1] = v11;
    v19 = (int8x16_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v20 = (int8x16_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v21 = (int8x16_t *)((char *)v20 + a3);
    *v21 = result;
    v21[1] = result;
    a4 = (int8x16_t *)((char *)v21 + a3);
    v4 += 8;
  }
  while (v4 != 32);
  return result;
}

int8x16_t sub_1C97906CC(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int8x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t result;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  _OWORD v24[4];
  uint64_t v25;

  v4 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v24[0] = *a2;
  v24[1] = v5;
  v24[2] = v6;
  v24[3] = v7;
  do
  {
    v8 = *(int8x8_t *)((char *)v24 + v4);
    v9 = vdupq_lane_s8(v8, 0);
    v10 = vdupq_lane_s8(v8, 1);
    v11 = vdupq_lane_s8(v8, 2);
    v12 = vdupq_lane_s8(v8, 3);
    v13 = vdupq_lane_s8(v8, 4);
    v14 = vdupq_lane_s8(v8, 5);
    v15 = vdupq_lane_s8(v8, 6);
    result = vdupq_lane_s8(v8, 7);
    *a4 = v9;
    a4[1] = v9;
    a4[2] = v9;
    a4[3] = v9;
    v17 = (int8x16_t *)((char *)a4 + a3);
    *v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    v18 = (int8x16_t *)((char *)a4 + a3 + a3);
    *v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    v19 = (int8x16_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    v20 = (int8x16_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    v21 = (int8x16_t *)((char *)v20 + a3);
    *v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    v22 = (int8x16_t *)((char *)v21 + a3);
    *v22 = v15;
    v22[1] = v15;
    v22[2] = v15;
    v22[3] = v15;
    v23 = (int8x16_t *)((char *)v22 + a3);
    *v23 = result;
    v23[1] = result;
    v23[2] = result;
    v23[3] = result;
    a4 = (int8x16_t *)((char *)v23 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  return result;
}

void sub_1C97907C0(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4;
  uint16x8_t v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  int v8;

  v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 32)), *(uint8x8_t *)(a2 + 32)), *(uint8x16_t *)(a2 + 48)),
                                    *(uint8x8_t *)(a2 + 48)),
                                  *(uint8x16_t *)(a2 + 128)),
                                *(uint8x8_t *)(a2 + 128)),
                              *(uint8x16_t *)(a2 + 144)),
                            *(uint8x8_t *)(a2 + 144)),
                          *(uint8x16_t *)(a2 + 160)),
                        *(uint8x8_t *)(a2 + 160)),
                      *(uint8x16_t *)(a2 + 176)),
                    *(uint8x8_t *)(a2 + 176));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 7uLL), v5, 7uLL);
  v7 = a4 + 2;
  v8 = 64;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *v7 = v6;
    v7[1] = v6;
    v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

uint64_t sub_1C9790848(unsigned int a1, _OWORD *a2, uint64_t a3, double *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  unsigned int v58;
  int8x8_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  int8x8_t v69;
  int8x8_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int8x8_t v75;
  int8x8_t v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double *v80;
  double *v81;
  double *v82;
  double *v83;
  double *v84;
  uint64_t result;
  uint64_t v86;
  int v87;
  int v88;
  _QWORD *v90;
  int8x8_t v91;
  int8x8_t v92;
  uint64_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  int8x8_t v97;
  int8x8_t v98;
  int8x8_t v99;
  int8x8_t v100;
  uint64_t v101;
  unsigned int v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  double *v107;
  double *v108;
  double *v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[8];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v6 = byte_1C98328DA[a1];
  v7 = (char)v6;
  v125 = 0;
  if (a1 >= 0x12)
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      v15 = a2 + 8;
      v8 = 15;
      v9 = 14;
      v10 = 13;
      v11 = 12;
      v12 = 11;
      v13 = 10;
      v14 = 9;
      goto LABEL_6;
    }
    v29 = word_1C9832A00[a1 - 11];
    v30 = 2 * (char)v6;
    v31 = ((2 * (char)v6) | 1) * v29 + 128;
    do
    {
      v116[v30++] = *((_BYTE *)a2 + (v31 >> 8) - 1);
      v31 += v29;
    }
    while (v30 != -1);
    HIBYTE(v115) = *((_BYTE *)a2 - 1);
    v117 = v112;
    v118 = v113;
    v119 = v114;
    v120 = v115;
    v25 = a2[8];
    v26 = a2[9];
    v27 = a2[10];
    v28 = a2[11];
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      v8 = 7;
      v9 = 6;
      v10 = 5;
      v11 = 4;
      v12 = 3;
      v13 = 2;
      v14 = 1;
      v15 = a2;
LABEL_6:
      v16 = a2[v12];
      v17 = a2[v13];
      v18 = a2[v14];
      v117 = *v15;
      v118 = v18;
      v119 = v17;
      v120 = v16;
      v19 = a2[v10];
      v20 = a2[v9];
      v21 = a2[v8];
      v121 = a2[v11];
      v122 = v19;
      v123 = v20;
      v124 = v21;
      *(_QWORD *)&v112 = 8 * a3;
      *((_QWORD *)&v112 + 1) = 8;
      goto LABEL_15;
    }
    v22 = word_1C9832A00[a1 - 11];
    v23 = 2 * (char)v6;
    v24 = ((2 * (char)v6) | 1) * v22 + 128;
    do
    {
      v116[v23++] = *((_BYTE *)a2 + (v24 >> 8) + 127);
      v24 += v22;
    }
    while (v23 != -1);
    HIBYTE(v115) = *((_BYTE *)a2 - 1);
    v117 = v112;
    v118 = v113;
    v119 = v114;
    v120 = v115;
    v25 = *a2;
    v26 = a2[1];
    v27 = a2[2];
    v28 = a2[3];
  }
  v121 = v25;
  v122 = v26;
  v123 = v27;
  v124 = v28;
  *(_QWORD *)&v112 = 8 * a3;
  *((_QWORD *)&v112 + 1) = 8;
  if ((v6 & 0x80) != 0)
  {
    v86 = *((_QWORD *)&v112 + (a1 > 0x11));
    v111 = 8 * (char)v6;
    v110 = *((_QWORD *)&v112 + (a1 < 0x12)) - 7 * v86;
    v87 = 8;
    v88 = (char)v6;
    while (1)
    {
      v90 = (_QWORD *)&v120 + (v88 >> 8) + 1;
      v92 = (int8x8_t)v90[8];
      v91 = (int8x8_t)v90[9];
      v93 = v88 | 0xFFFFFF00;
      v95 = (int8x8_t)v90[6];
      v94 = (int8x8_t)v90[7];
      v97 = (int8x8_t)v90[4];
      v96 = (int8x8_t)v90[5];
      v99 = (int8x8_t)v90[2];
      v98 = (int8x8_t)v90[3];
      v100 = (int8x8_t)v90[1];
      if (v93 <= 0xFFFFFFBF)
      {
        v101 = *((_QWORD *)&v120 + ((uint64_t)v88 >> 8) + 1);
        if (v93 > 0xFFFFFF7F)
        {
          v102 = v88 | 0xFFFFFF00;
        }
        else
        {
          v91 = vext_s8(v92, v91, 4uLL);
          v92 = vext_s8(v94, v92, 4uLL);
          v94 = vext_s8(v95, v94, 4uLL);
          v95 = vext_s8(v96, v95, 4uLL);
          v96 = vext_s8(v97, v96, 4uLL);
          v97 = vext_s8(v98, v97, 4uLL);
          v98 = vext_s8(v99, v98, 4uLL);
          v99 = vext_s8(v100, v99, 4uLL);
          v102 = v93 + 128;
          v100 = vext_s8((int8x8_t)v101, v100, 4uLL);
          if (v93 > 0xFFFFFF3F)
          {
            v93 = (v93 + 128);
            goto LABEL_58;
          }
          v101 = vshld_n_s64(v101, 0x20uLL);
        }
        v91 = vext_s8(v92, v91, 6uLL);
        v92 = vext_s8(v94, v92, 6uLL);
        v94 = vext_s8(v95, v94, 6uLL);
        v95 = vext_s8(v96, v95, 6uLL);
        v96 = vext_s8(v97, v96, 6uLL);
        v97 = vext_s8(v98, v97, 6uLL);
        v98 = vext_s8(v99, v98, 6uLL);
        v99 = vext_s8(v100, v99, 6uLL);
        v93 = v102 + 64;
        v100 = vext_s8((int8x8_t)v101, v100, 6uLL);
      }
LABEL_58:
      sub_1C970C1E8(v93, v7, a1 < 0x12, a3, a4, v100, v99);
      v103 = (double *)((char *)a4 + v86);
      sub_1C970C1E8(v93, v7, a1 < 0x12, a3, v103, v99, v98);
      v104 = (double *)((char *)v103 + v86);
      sub_1C970C1E8(v93, v7, a1 < 0x12, a3, v104, v98, v97);
      v105 = (double *)((char *)v104 + v86);
      sub_1C970C1E8(v93, v7, a1 < 0x12, a3, v105, v97, v96);
      v106 = (double *)((char *)v105 + v86);
      sub_1C970C1E8(v93, v7, a1 < 0x12, a3, v106, v96, v95);
      v107 = (double *)((char *)v106 + v86);
      sub_1C970C1E8(v93, v7, a1 < 0x12, a3, v107, v95, v94);
      v108 = (double *)((char *)v107 + v86);
      sub_1C970C1E8(v93, v7, a1 < 0x12, a3, v108, v94, v92);
      v109 = (double *)((char *)v108 + v86);
      result = sub_1C970C1E8(v93, v7, a1 < 0x12, a3, v109, v92, v91);
      v88 += v111;
      a4 = (double *)((char *)v109 + v110);
      if (!--v87)
        return result;
    }
  }
  v6 = (char)v6;
LABEL_15:
  v32 = *((_QWORD *)&v112 + (a1 > 0x11));
  v33 = *((_QWORD *)&v112 + (a1 < 0x12)) - 7 * v32;
  v34 = 8;
  v35 = v6;
  do
  {
    v37 = (char *)&v117 + 8 * (v35 >> 8);
    v38 = *(double *)v37;
    v39 = *((double *)v37 + 1);
    v40 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v37, *(int8x8_t *)&v39, 4uLL));
    v41 = *((double *)v37 + 2);
    v42 = *((double *)v37 + 3);
    v43 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v39, *(int8x8_t *)&v41, 4uLL));
    v44 = *((double *)v37 + 4);
    v45 = *((double *)v37 + 5);
    v46 = *((double *)v37 + 6);
    v47 = *((double *)v37 + 7);
    v48 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v42, 4uLL));
    v49 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v42, *(int8x8_t *)&v44, 4uLL));
    v50 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 4uLL));
    v51 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 4uLL));
    v52 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v47, 4uLL));
    v53 = *((double *)v37 + 8);
    v54 = *((unint64_t *)v37 + 9);
    v55 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v47, *(int8x8_t *)&v53, 4uLL));
    v56 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v53, (int8x8_t)v54, 4uLL));
    v57 = COERCE_DOUBLE(vshrd_n_u64(v54, 0x20uLL));
    v58 = v35;
    if (v35 < 0x80u)
    {
      v59 = (int8x8_t)v54;
    }
    else
    {
      v53 = v56;
      v47 = v55;
      v46 = v52;
      v45 = v51;
      v44 = v50;
      v42 = v49;
      v41 = v48;
      v39 = v43;
      v38 = v40;
      *(double *)&v59 = v57;
    }
    if (v35 >= 0x80u)
      v58 = v35 - 128;
    v60 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v38, *(int8x8_t *)&v39, 2uLL));
    v61 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v39, *(int8x8_t *)&v41, 2uLL));
    v62 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v42, 2uLL));
    v63 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v42, *(int8x8_t *)&v44, 2uLL));
    v64 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 2uLL));
    v65 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 2uLL));
    v66 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v47, 2uLL));
    v67 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v47, *(int8x8_t *)&v53, 2uLL));
    v68 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v53, v59, 2uLL));
    if (v58 >= 0x40)
      *(double *)&v69 = v68;
    else
      *(double *)&v69 = v53;
    if (v58 >= 0x40)
      *(double *)&v70 = v67;
    else
      *(double *)&v70 = v47;
    if (v58 >= 0x40)
      *(double *)&v71 = v66;
    else
      *(double *)&v71 = v46;
    if (v58 >= 0x40)
      *(double *)&v72 = v65;
    else
      *(double *)&v72 = v45;
    if (v58 >= 0x40)
      *(double *)&v73 = v64;
    else
      *(double *)&v73 = v44;
    if (v58 >= 0x40)
      *(double *)&v74 = v63;
    else
      *(double *)&v74 = v42;
    if (v58 >= 0x40)
      *(double *)&v75 = v62;
    else
      *(double *)&v75 = v41;
    if (v58 >= 0x40)
      *(double *)&v76 = v61;
    else
      *(double *)&v76 = v39;
    if (v58 < 0x40)
    {
      v77 = v58;
    }
    else
    {
      v38 = v60;
      v77 = v58 - 64;
    }
    sub_1C9708E28(v77, v6, a1 < 0x12, a3, a4, *(int8x8_t *)&v38, v76);
    v78 = (double *)((char *)a4 + v32);
    sub_1C9708E28(v77, v6, a1 < 0x12, a3, v78, v76, v75);
    v79 = (double *)((char *)v78 + v32);
    sub_1C9708E28(v77, v6, a1 < 0x12, a3, v79, v75, v74);
    v80 = (double *)((char *)v79 + v32);
    sub_1C9708E28(v77, v6, a1 < 0x12, a3, v80, v74, v73);
    v81 = (double *)((char *)v80 + v32);
    sub_1C9708E28(v77, v6, a1 < 0x12, a3, v81, v73, v72);
    v82 = (double *)((char *)v81 + v32);
    sub_1C9708E28(v77, v6, a1 < 0x12, a3, v82, v72, v71);
    v83 = (double *)((char *)v82 + v32);
    sub_1C9708E28(v77, v6, a1 < 0x12, a3, v83, v71, v70);
    v84 = (double *)((char *)v83 + v32);
    result = sub_1C9708E28(v77, v6, a1 < 0x12, a3, v84, v70, v69);
    v35 += 8 * v6;
    a4 = (double *)((char *)v84 + v33);
    --v34;
  }
  while (v34);
  return result;
}

int8x16_t *sub_1C9790F0C(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  const __int16 *i16;
  uint8x8_t v13;
  const __int16 *v14;
  uint8x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int8x16_t *v22;
  uint8x8_t v23;
  int32x4_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x4_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  int16x4_t v33;
  uint8x8_t v34;
  uint8x8_t v35;
  uint8x8_t v36;
  uint8x8_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *result;
  int16x8_t v41;
  int16x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  uint8x8_t v45;
  uint8x8_t v46;
  _OWORD v47[8];
  _OWORD v48[4];
  uint8x8_t v49;
  _QWORD v50[9];

  v4 = 0;
  v50[8] = *MEMORY[0x1E0C80C00];
  v50[0] = 0x1C1C1D1D1E1E1F1FLL;
  v50[1] = 0x181819191A1A1B1BLL;
  v50[2] = 0x1414151516161717;
  v50[3] = 0x1010111112121313;
  v50[4] = 0xC0C0D0D0E0E0F0FLL;
  v50[5] = 0x80809090A0A0B0BLL;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[10];
  v11 = a2[11];
  v48[0] = *a2;
  v48[1] = v5;
  v48[2] = v6;
  v48[3] = v7;
  i16 = a2[4].i16;
  v13 = (uint8x8_t)vld1_dup_s16(i16);
  v49 = v13;
  v46 = *(uint8x8_t *)v9.i8;
  v45 = (uint8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
  v44 = (uint8x8_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v43 = (uint8x8_t)vextq_s8(v11, v11, 8uLL).u64[0];
  v14 = a2[12].i16;
  v47[0] = vmull_u8((uint8x8_t)0x404030302020101, v13);
  v47[1] = vmull_u8((uint8x8_t)0x808070706060505, v13);
  v47[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  v47[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  v47[4] = vmull_u8((uint8x8_t)0x1414131312121111, v13);
  v47[5] = vmull_u8((uint8x8_t)0x1818171716161515, v13);
  v15 = (uint8x8_t)vld1_dup_s16(v14);
  v16 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v15);
  v17 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v15);
  v50[6] = 0x404050506060707;
  v50[7] = 0x10102020303;
  v41 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v15);
  v42 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v15);
  v18 = (int16x8_t)vmull_u8((uint8x8_t)0x1414131312121111, v15);
  v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1818171716161515, v15);
  v20 = (int16x8_t)vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v15);
  v21 = (int16x8_t)vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v15);
  v47[6] = vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v13);
  v47[7] = vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v13);
  v22 = a4 + 2;
  v23 = (uint8x8_t)vextq_s8(v8, v8, 8uLL).u64[0];
  do
  {
    v24 = (int32x4_t)v47[v4];
    v25 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
    v26 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
    v27 = (int16x8_t)vdupq_laneq_s32(v24, 2);
    v28 = (int16x8_t)vdupq_laneq_s32(v24, 3);
    v29 = *(int16x4_t *)((char *)v48 + 8 * v4);
    v30 = (uint8x8_t)vdup_lane_s16(v29, 0);
    v31 = (uint8x8_t)vdup_lane_s16(v29, 1);
    v32 = (uint8x8_t)vdup_lane_s16(v29, 2);
    v33 = (int16x4_t)v50[v4];
    v34 = (uint8x8_t)vdup_lane_s16(v33, 0);
    *(int16x4_t *)v24.i8 = vdup_lane_s16(v33, 1);
    v35 = (uint8x8_t)vdup_lane_s16(v33, 2);
    v36 = (uint8x8_t)vdup_lane_s16(v29, 3);
    v37 = (uint8x8_t)vdup_lane_s16(v33, 3);
    v22[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v30), v25), *(uint8x8_t *)v8.i8, v34), 6uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v17, (uint8x8_t)0x181819191A1A1B1BLL, v30), v25), v23, v34), 6uLL);
    v38 = (int8x16_t *)((char *)v22 + a3);
    v38[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v31), v26), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v26), (uint8x8_t)0x181819191A1A1B1BLL, v31), v23, *(uint8x8_t *)v24.i8), 6uLL);
    v39 = (int8x16_t *)((char *)v22 + 2 * a3);
    v39[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v27), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v32), *(uint8x8_t *)v8.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v27), (uint8x8_t)0x181819191A1A1B1BLL, v32), v23, v35), 6uLL);
    result = (int8x16_t *)((char *)v22 + 3 * a3);
    result[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v28), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v36), *(uint8x8_t *)v8.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v28), (uint8x8_t)0x181819191A1A1B1BLL, v36), v23, v37), 6uLL);
    v22[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v25), (uint8x8_t)0x1414151516161717, v30), v46, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v25), (uint8x8_t)0x1010111112121313, v30), v45, v34), 6uLL);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v26), (uint8x8_t)0x1414151516161717, v31), v46, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v26), (uint8x8_t)0x1010111112121313, v31), v45, *(uint8x8_t *)v24.i8), 6uLL);
    v39[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v27), (uint8x8_t)0x1414151516161717, v32), v46, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v27), (uint8x8_t)0x1010111112121313, v32), v45, v35), 6uLL);
    result[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v28), (uint8x8_t)0x1414151516161717, v36), v46, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v28), (uint8x8_t)0x1010111112121313, v36), v45, v37), 6uLL);
    *v22 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v25), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v30), *(uint8x8_t *)v10.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v25), (uint8x8_t)0x80809090A0A0B0BLL, v30), v44, v34), 6uLL);
    *v38 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v26), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v31), *(uint8x8_t *)v10.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v26), (uint8x8_t)0x80809090A0A0B0BLL, v31), v44, *(uint8x8_t *)v24.i8), 6uLL);
    *v39 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v27), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v32), *(uint8x8_t *)v10.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v27), (uint8x8_t)0x80809090A0A0B0BLL, v32), v44, v35), 6uLL);
    *result = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v28), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v36), *(uint8x8_t *)v10.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v28), (uint8x8_t)0x80809090A0A0B0BLL, v36), v44, v37), 6uLL);
    v22[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v25), (uint8x8_t)0x404050506060707, v30), *(uint8x8_t *)v11.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v25), (uint8x8_t)0x10102020303, v30), v43, v34), 6uLL);
    v38[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v26), (uint8x8_t)0x404050506060707, v31), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v26), (uint8x8_t)0x10102020303, v31), v43, *(uint8x8_t *)v24.i8), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v27), (uint8x8_t)0x404050506060707, v32), *(uint8x8_t *)v11.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v27), (uint8x8_t)0x10102020303, v32), v43, v35), 6uLL);
    result[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v28), (uint8x8_t)0x404050506060707, v36), *(uint8x8_t *)v11.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v28), (uint8x8_t)0x10102020303, v36), v43, v37), 6uLL);
    ++v4;
    v22 = (int8x16_t *)((char *)v22 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

void sub_1C97913B8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  int v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

int16x8_t sub_1C97913E0(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t result;
  int16x8_t *v16;
  int16x8_t *v17;
  int16x8_t *v18;
  int16x8_t *v19;
  int16x8_t *v20;
  int16x8_t *v21;
  int16x8_t *v22;
  _OWORD v23[4];
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v23[0] = *a2;
  v23[1] = v5;
  v6 = a2[3];
  v23[2] = a2[2];
  v23[3] = v6;
  do
  {
    v7 = (int16x8_t)v23[v4];
    v8 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    v12 = vdupq_laneq_s16(v7, 4);
    v13 = vdupq_laneq_s16(v7, 5);
    v14 = vdupq_laneq_s16(v7, 6);
    result = vdupq_laneq_s16(v7, 7);
    *a4 = v8;
    a4[1] = v8;
    a4[2] = v8;
    a4[3] = v8;
    v16 = (int16x8_t *)((char *)a4 + a3);
    *v16 = v9;
    v16[1] = v9;
    v16[2] = v9;
    v16[3] = v9;
    v17 = (int16x8_t *)((char *)a4 + a3 + a3);
    *v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    v18 = (int16x8_t *)((char *)v17 + a3);
    *v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    v19 = (int16x8_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    v20 = (int16x8_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    v21 = (int16x8_t *)((char *)v20 + a3);
    *v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    v22 = (int16x8_t *)((char *)v21 + a3);
    *v22 = result;
    v22[1] = result;
    v22[2] = result;
    v22[3] = result;
    a4 = (int16x8_t *)((char *)v22 + a3);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

void sub_1C97914CC(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  const char *v4;
  const char *v5;
  const char *v6;
  int8x16_t v7;
  uint8x16_t v8;
  uint8x16_t *v9;
  int v10;
  int8x16x2_t v11;
  int8x16x2_t v12;
  int8x16x2_t v13;
  int8x16x2_t v14;

  v4 = a2;
  v11 = vld2q_s8(v4);
  v4 += 32;
  v12 = vld2q_s8(v4);
  v5 = a2 + 128;
  v13 = vld2q_s8(v5);
  v6 = a2 + 160;
  v14 = vld2q_s8(v6);
  v7 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[0].i8), (uint8x16_t)v11.val[0]), (uint8x16_t)v12.val[0]), *(uint8x8_t *)v12.val[0].i8), (uint8x16_t)v13.val[0]), *(uint8x8_t *)v13.val[0].i8), (uint8x16_t)v14.val[0]), *(uint8x8_t *)v14.val[0].i8);
  v11.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[1].i8), (uint8x16_t)v11.val[1]), (uint8x16_t)v12.val[1]), *(uint8x8_t *)v12.val[1].i8), (uint8x16_t)v13.val[1]), *(uint8x8_t *)v13.val[1].i8), (uint8x16_t)v14.val[1]), *(uint8x8_t *)v14.val[1].i8);
  *(int16x4_t *)v11.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), vadd_s16(*(int16x4_t *)v11.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v11.val[0], v11.val[0], 8uLL)));
  *(int16x4_t *)v11.val[1].i8 = vpadd_s16(*(int16x4_t *)v11.val[0].i8, *(int16x4_t *)v11.val[0].i8);
  v11.val[1].i64[1] = v11.val[1].i64[0];
  v8 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v11.val[1], 6uLL), (uint16x8_t)v11.val[1], 6uLL);
  v9 = a4 + 2;
  v10 = 32;
  do
  {
    v9[-2] = v8;
    v9[-1] = v8;
    *v9 = v8;
    v9[1] = v8;
    v9 = (uint8x16_t *)((char *)v9 + a3);
    --v10;
  }
  while (v10);
}

uint64_t sub_1C979156C(unsigned int a1, __n128 *a2, uint64_t a3, double *a4, __n128 a5, __n128 a6, __n128 a7)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t *v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  _BOOL4 v52;
  double *v53;
  double *v54;
  double *v55;
  double *v56;
  double *v57;
  double *v58;
  double *v59;
  uint64_t result;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t *v65;
  int8x8_t v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  int8x8_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int8x8_t v75;
  int8x8_t v76;
  _BOOL4 v77;
  double *v78;
  double *v79;
  double *v80;
  double *v81;
  double *v82;
  double *v83;
  double *v84;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  _WORD v90[4];
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v9 = byte_1C98328DA[a1];
  v10 = byte_1C98328DA[a1];
  if (a1 >= 0x12)
  {
    if ((v9 & 0x80000000) == 0)
    {
      v18 = a2 + 8;
      v11 = 15;
      v12 = 14;
      v13 = 13;
      v14 = 12;
      v15 = 11;
      v16 = 10;
      v17 = 9;
      goto LABEL_6;
    }
    if (v10 != 255)
    {
      v29 = word_1C9832A00[a1 - 11];
      v30 = v29 + v29 * v9 + 128;
      v31 = byte_1C98328DA[a1];
      do
      {
        v90[v31] = a2->n128_u16[(v30 >> 8) - 1];
        v30 += v29;
        ++v31;
      }
      while (v31 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    v91 = a7;
    v92 = a6;
    v93 = a5;
    v94 = v89;
    v32 = a2[8];
    v33 = a2[9];
    v34 = a2[10];
    v35 = a2[11];
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
    {
      v11 = 7;
      v12 = 6;
      v13 = 5;
      v14 = 4;
      v15 = 3;
      v16 = 2;
      v17 = 1;
      v18 = a2;
LABEL_6:
      v19 = a2[v15];
      v20 = a2[v16];
      v21 = a2[v17];
      v22 = a2[v14];
      v91 = *v18;
      v92 = v21;
      v23 = a2[v13];
      v24 = a2[v12];
      v93 = v20;
      v94 = v19;
      v25 = a2[v11];
      v95 = v22;
      v96 = v23;
      v97 = v24;
      v98 = v25;
      v9 = v10;
      v86.n128_u64[0] = 4 * a3;
      v86.n128_u64[1] = 8;
      goto LABEL_18;
    }
    if (v9 != -1)
    {
      v26 = word_1C9832A00[a1 - 11];
      v27 = v26 + v26 * v9 + 128;
      v28 = byte_1C98328DA[a1];
      do
      {
        v90[v28] = a2[7].n128_u16[(v27 >> 8) + 7];
        v27 += v26;
        ++v28;
      }
      while (v28 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    v91 = a7;
    v92 = a6;
    v93 = a5;
    v94 = v89;
    v32 = *a2;
    v33 = a2[1];
    v34 = a2[2];
    v35 = a2[3];
  }
  v95 = v32;
  v96 = v33;
  v97 = v34;
  v98 = v35;
  v86.n128_u64[0] = 4 * a3;
  v86.n128_u64[1] = 8;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_18:
    v36 = v86.n128_u64[a1 > 0x11];
    v37 = v86.n128_u64[a1 < 0x12] - 7 * v36;
    v38 = 8;
    v39 = v9;
    do
    {
      v40 = v39 & 0x7F;
      v41 = (uint64_t)v39 >> 7;
      v42 = (int8x8_t *)&v91.n128_u64[v39 >> 7];
      v43 = *v42;
      v44 = v42[1];
      v46 = v42[2];
      v45 = v42[3];
      v48 = v42[4];
      v47 = v42[5];
      v50 = v42[6];
      v49 = v42[7];
      v51 = v42[8];
      if (v40 >= 0x40)
      {
        v43 = vext_s8(v43, v44, 4uLL);
        v44 = vext_s8(v44, v46, 4uLL);
        v46 = vext_s8(v46, v45, 4uLL);
        v45 = vext_s8(v45, v48, 4uLL);
        v48 = vext_s8(v48, v47, 4uLL);
        v47 = vext_s8(v47, v50, 4uLL);
        v50 = vext_s8(v50, v49, 4uLL);
        v49 = vext_s8(v49, v51, 4uLL);
        v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 4uLL);
        v40 = (v40 - 64);
      }
      if (v40 >= 0x20)
      {
        v43 = vext_s8(v43, v44, 2uLL);
        v44 = vext_s8(v44, v46, 2uLL);
        v46 = vext_s8(v46, v45, 2uLL);
        v45 = vext_s8(v45, v48, 2uLL);
        v48 = vext_s8(v48, v47, 2uLL);
        v47 = vext_s8(v47, v50, 2uLL);
        v50 = vext_s8(v50, v49, 2uLL);
        v49 = vext_s8(v49, v51, 2uLL);
        v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 2uLL);
        v40 = (v40 - 32);
      }
      v52 = a1 < 0x12;
      sub_1C9708A20(v40, v9, v52, a3, a4, v43, v44);
      v53 = (double *)((char *)a4 + v36);
      sub_1C9708A20(v40, v9, v52, a3, v53, v44, v46);
      v54 = (double *)((char *)v53 + v36);
      sub_1C9708A20(v40, v9, v52, a3, v54, v46, v45);
      v55 = (double *)((char *)v54 + v36);
      sub_1C9708A20(v40, v9, v52, a3, v55, v45, v48);
      v56 = (double *)((char *)v55 + v36);
      sub_1C9708A20(v40, v9, v52, a3, v56, v48, v47);
      v57 = (double *)((char *)v56 + v36);
      sub_1C9708A20(v40, v9, v52, a3, v57, v47, v50);
      v58 = (double *)((char *)v57 + v36);
      sub_1C9708A20(v40, v9, v52, a3, v58, v50, v49);
      v59 = (double *)((char *)v58 + v36);
      result = sub_1C9708A20(v40, v9, v52, a3, v59, v49, v51);
      v39 += 4 * v9;
      a4 = (double *)((char *)v59 + v37);
      --v38;
    }
    while (v38);
    return result;
  }
  v61 = v86.n128_u64[a1 > 0x11];
  v62 = v86.n128_u64[a1 < 0x12] - 7 * v61;
  v63 = 8;
  v64 = v9;
  do
  {
    v65 = &v94.n128_u64[(v64 >> 7) + 1];
    v67 = (int8x8_t)v65[8];
    v66 = (int8x8_t)v65[9];
    v68 = (uint64_t)v64 >> 7;
    v69 = v64 | 0xFFFFFF80;
    v71 = (int8x8_t)v65[6];
    v70 = (int8x8_t)v65[7];
    v73 = (int8x8_t)v65[4];
    v72 = (int8x8_t)v65[5];
    v75 = (int8x8_t)v65[2];
    v74 = (int8x8_t)v65[3];
    v76 = (int8x8_t)v65[1];
    if (v69 <= 0xFFFFFFBF)
    {
      v66 = vext_s8(v67, v66, 4uLL);
      v67 = vext_s8(v70, v67, 4uLL);
      v70 = vext_s8(v71, v70, 4uLL);
      v71 = vext_s8(v72, v71, 4uLL);
      v72 = vext_s8(v73, v72, 4uLL);
      v73 = vext_s8(v74, v73, 4uLL);
      v74 = vext_s8(v75, v74, 4uLL);
      v75 = vext_s8(v76, v75, 4uLL);
      v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 4uLL);
      v69 = (v69 + 64);
    }
    if (v69 <= 0xFFFFFFDF)
    {
      v66 = vext_s8(v67, v66, 6uLL);
      v67 = vext_s8(v70, v67, 6uLL);
      v70 = vext_s8(v71, v70, 6uLL);
      v71 = vext_s8(v72, v71, 6uLL);
      v72 = vext_s8(v73, v72, 6uLL);
      v73 = vext_s8(v74, v73, 6uLL);
      v74 = vext_s8(v75, v74, 6uLL);
      v75 = vext_s8(v76, v75, 6uLL);
      v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 6uLL);
      v69 = (v69 + 32);
    }
    v77 = a1 < 0x12;
    sub_1C970A974(v69, v9, v77, a3, a4, v76, v75);
    v78 = (double *)((char *)a4 + v61);
    sub_1C970A974(v69, v9, v77, a3, v78, v75, v74);
    v79 = (double *)((char *)v78 + v61);
    sub_1C970A974(v69, v9, v77, a3, v79, v74, v73);
    v80 = (double *)((char *)v79 + v61);
    sub_1C970A974(v69, v9, v77, a3, v80, v73, v72);
    v81 = (double *)((char *)v80 + v61);
    sub_1C970A974(v69, v9, v77, a3, v81, v72, v71);
    v82 = (double *)((char *)v81 + v61);
    sub_1C970A974(v69, v9, v77, a3, v82, v71, v70);
    v83 = (double *)((char *)v82 + v61);
    sub_1C970A974(v69, v9, v77, a3, v83, v70, v67);
    v84 = (double *)((char *)v83 + v61);
    result = sub_1C970A974(v69, v9, v77, a3, v84, v67, v66);
    v64 += 4 * v9;
    a4 = (double *)((char *)v84 + v62);
    --v63;
  }
  while (v63);
  return result;
}

uint16x8_t sub_1C9791BF8(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int8x16_t v3;
  unsigned __int16 v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint16x8_t v8;
  uint16x8_t result;
  uint16x8_t v10;

  v2 = a1[-1].u16[7];
  v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[2].u16[0] + 2) >> 2;
  LOWORD(v2) = a1[1].i16[7];
  v4 = a1[3].u16[7];
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, *a1, 0xEuLL), (uint16x8_t)vextq_s8(*a1, v5, 2uLL)), *(uint16x8_t *)a1);
  result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v7, 2uLL)), (uint16x8_t)v6);
  v10 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(*a1, v5, 0xEuLL), (uint16x8_t)vextq_s8(v5, v5, 2uLL)), (uint16x8_t)v5);
  *a2 = v8;
  a2[1] = v10;
  a2[2] = result;
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v6, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[1].i16[7] = v2;
  a2[3].i16[7] = v4;
  return result;
}

uint16x8_t sub_1C9791C80(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int8x16_t v3;
  __int16 v4;
  __int16 v5;
  int8x16_t v6;
  int8x16_t v7;
  uint16x8_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint16x8_t result;

  v2 = a1[-1].u16[7];
  v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[4].u16[0] + 2) >> 2;
  v4 = a1[3].i16[7];
  v5 = a1[7].i16[7];
  v6 = *a1;
  v7 = a1[4];
  v8 = a2 + 4;
  v9 = a1 + 5;
  v10 = -8;
  v11 = v3;
  do
  {
    v12 = v7;
    v13 = v6;
    v6 = v9[-4];
    v14 = *v9++;
    v7 = v14;
    v8[-4] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    v3 = v13;
    v11 = v12;
  }
  while (v10 < 0x10);
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[7] = result;
  a2[3].i16[7] = v4;
  a2[7].i16[7] = v5;
  return result;
}

uint16x8_t sub_1C9791D44(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int8x16_t v3;
  __int16 v4;
  __int16 v5;
  int8x16_t v6;
  int8x16_t v7;
  uint16x8_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint16x8_t result;

  v2 = a1[-1].u16[7];
  v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[8].u16[0] + 2) >> 2;
  v4 = a1[7].i16[7];
  v5 = a1[15].i16[7];
  v6 = *a1;
  v7 = a1[8];
  v8 = a2 + 8;
  v9 = a1 + 9;
  v10 = -8;
  v11 = v3;
  do
  {
    v12 = v7;
    v13 = v6;
    v6 = v9[-8];
    v14 = *v9++;
    v7 = v14;
    v8[-8] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    v3 = v13;
    v11 = v12;
  }
  while (v10 < 0x30);
  a2[7] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[15] = result;
  a2[7].i16[7] = v4;
  a2[15].i16[7] = v5;
  return result;
}

int32x4_t sub_1C9791E08(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int32x4_t result;
  int16x4_t v8;
  int32x4_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  uint16x8_t *v16;
  unint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;

  v2 = a1[-1].u16[7];
  v3 = a1[7].u16[7];
  v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0)
    v4 = 2 * a1[3].u16[7] - (v3 + v2);
  if (v4 > 7)
    goto LABEL_7;
  v5 = a1[15].u16[7];
  v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0)
    v6 = 2 * a1[11].u16[7] - (v5 + v2);
  if (v6 < 8)
  {
    a2[-1].i16[7] = v2;
    v8 = vdup_n_s16(v5 - v2);
    result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    v10 = vdup_n_s16(v3 - v2);
    v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    v13 = vshll_n_s16(v8, 3uLL);
    v14 = vshll_n_s16(v10, 3uLL);
    v15 = vdup_n_s16(v2);
    v16 = a2 + 8;
    v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *v16 = v18;
      v16[-8] = v19;
      result = vaddq_s32(result, v13);
      v9 = vaddq_s32(v9, v13);
      v11 = vaddq_s32(v11, v14);
      v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1C9791D44(a1, a2).u64[0];
  }
  return result;
}

uint16x8_t sub_1C9791EFC(uint64_t a1, int16x8_t *a2, uint64_t a3, _QWORD *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  uint16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int16x8_t v11;
  uint16x8_t result;
  uint16x8_t v13;

  v4 = a2[1];
  v5 = (int16x8_t)vdupq_lane_s64(vaddq_s16(v4, *a2).i64[0], 0);
  v6 = vpaddq_s16(v5, v5);
  v7 = (uint16x8_t)vpaddq_s16(v6, v6);
  v8 = (int16x8_t)vrshrq_n_u16(v7, 3uLL);
  v9 = vaddq_s16(v8, v8);
  *(int16x4_t *)v4.i8 = vadd_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8);
  v4.i64[1] = v9.i64[0];
  v10 = (int8x16_t)vzip1q_s64((int64x2_t)vrsraq_n_u16(*(uint16x8_t *)a2, v7, 3uLL), (int64x2_t)v9);
  v11 = (int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1C9862CF0);
  result = vrshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1C9862D00), v4), 2uLL);
  v13 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v9, v11), 2uLL);
  *a4 = result.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = result.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = v13.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = v13.i64[1];
  return result;
}

int8x16_t sub_1C9791F74(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t result;

  v4 = a2[2];
  v5 = vaddq_s16(v4, *a2);
  v6 = vpaddq_s16(v5, v5);
  v7 = vpaddq_s16(v6, v6);
  v8 = (uint16x8_t)vpaddq_s16(v7, v7);
  v9 = (int16x8_t)vrshrq_n_u16(v8, 4uLL);
  v10 = vaddq_s16(v9, v9);
  v11 = (int16x8_t)vrsraq_n_u16((uint16x8_t)v4, v8, 4uLL);
  v12 = (int16x8_t)vrsraq_n_u16(*(uint16x8_t *)a2, v8, 4uLL);
  v13 = (uint16x8_t)vaddq_s16(v12, v10);
  v10.i16[0] = v12.i16[0];
  v14 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v11, v10), 2uLL);
  v15 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  v16 = vextq_s8(v15, (int8x16_t)v9, 2uLL);
  *a4 = v14;
  *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1C9862D10);
  *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1C9862D20);
  *(int8x16_t *)((char *)a4 + 6 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1C9862D30);
  *(int8x16_t *)((char *)a4 + 8 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1C9862D40);
  *(int8x16_t *)((char *)a4 + 10 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1C9862D50);
  result = vextq_s8(v15, (int8x16_t)v9, 0xEuLL);
  *(int8x16_t *)((char *)a4 + 12 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1C9862D60);
  *(int8x16_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

uint16x8_t sub_1C9792050(uint64_t a1, int8x16x2_t *a2, uint64_t a3, _QWORD *a4)
{
  int64x2_t v4;
  int16x8_t v5;
  int16x8_t v6;
  uint16x8_t v7;
  uint16x8_t result;
  int8x16x2_t v9;

  v9 = *a2;
  v4 = (int64x2_t)vmulq_s16((int16x8_t)vqtbl2q_s8(*a2, (int8x16_t)xmmword_1C9862D70), (int16x8_t)xmmword_1C9862D80);
  v5 = (int16x8_t)vdupq_laneq_s64(v4, 1);
  v6 = (int16x8_t)vdupq_lane_s64(v9.val[1].i64[0], 0);
  v7 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1C9862D90), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1C9862DB0, (int8x16_t)xmmword_1C9862D90), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1C9862D90), (int16x8_t)xmmword_1C9862DB0), 3uLL);
  result = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1C9862DA0), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1C9862DB0, (int8x16_t)xmmword_1C9862DA0), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1C9862DA0), (int16x8_t)xmmword_1C9862DB0), 3uLL);
  *a4 = v7.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v7.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

void sub_1C97920E8(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4;
  const __int16 *i16;
  int16x8_t v6;
  const __int16 *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  const __int16 *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  BOOL v18;

  v4 = 0;
  i16 = a2[1].i16;
  v6 = vld1q_dup_s16(i16);
  v7 = a2[3].i16;
  v8 = vld1q_dup_s16(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862C60);
  v10 = a2[2];
  v11 = vshlq_n_s16(v10, 3uLL);
  v12 = v6;
  do
  {
    v13 = &a2->i16[v4];
    v14 = vld1q_dup_s16(v13++);
    v15 = vsubq_s16(v11, v10);
    *a4 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v15, v9), v12), v14, (int16x8_t)xmmword_1C9862CA0), 4uLL);
    v16 = vaddq_s16(v12, v6);
    v17 = vld1q_dup_s16(v13);
    v11 = vsubq_s16(v15, v10);
    *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v11, v9), v16), v17, (int16x8_t)xmmword_1C9862CA0), 4uLL);
    v12 = vaddq_s16(v16, v6);
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    v18 = v4 >= 6;
    v4 += 2;
  }
  while (!v18);
}

int8x16_t sub_1C9792180(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFF00FF00FF00FFLL;
  v6.i64[1] = 0xFF00FF00FF00FFLL;
  v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862D00);
  result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862CF0);
  *a4 = v8.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

double sub_1C97921E8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFF00FF00FF00FFLL;
  v7.i64[1] = 0xFF00FF00FF00FFLL;
  v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(_QWORD *)&result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

void sub_1C97922BC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  __int128 v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFF00FF00FF00FFLL;
  v9.i64[1] = 0xFF00FF00FF00FFLL;
  v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  v12 = v6;
  LOWORD(v12) = v10.i16[0];
  v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  v14 = 7;
  do
  {
    v10 = vextq_s8(v10, v10, 2uLL);
    v15 = v6;
    LOWORD(v15) = v10.i16[0];
    v11 = vextq_s8(v11, v11, 2uLL);
    v16 = v6;
    LOWORD(v16) = v11.i16[0];
    v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

void sub_1C979236C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1C9792398(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = a2[16];
  v5 = a2[17];
  v6 = a2[18];
  v7 = a2[19];
  v8 = a2[20];
  v9 = a2[21];
  v10 = (_OWORD *)(a4 + 64);
  v11 = 64;
  v12 = a2[22];
  v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

int16x4_t sub_1C97923D4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int16x4_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFF00FF00FF00FFLL;
  v7.i64[1] = 0xFF00FF00FF00FFLL;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

int16x8_t sub_1C9792430(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t result;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = *a2;
  v7.i64[0] = 0xFF00FF00FF00FFLL;
  v7.i64[1] = 0xFF00FF00FF00FFLL;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x8_t sub_1C97924C8(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  const __int16 *v9;
  unint64_t v10;
  int16x8_t *v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t *v15;
  const __int16 *v16;
  int16x8_t result;
  uint64_t v18;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = vld1q_dup_s16(a2->i16);
  v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xFF00FF00FF00FFLL;
  v8.i64[1] = 0xFF00FF00FF00FFLL;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  v10 = -1;
  v11 = a4;
  do
  {
    v12 = v9 - 1;
    v13 = vld1q_dup_s16(v12);
    v14 = vld1q_dup_s16(v9);
    v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *v15 = v13;
    v15[1] = v13;
    v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  v16 = &a2[1].i16[7];
  result = vld1q_dup_s16(v16);
  v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int16x8_t sub_1C979256C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 2;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

int16x8_t sub_1C979259C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 4;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

uint64_t sub_1C97925D4(uint64_t result, int8x16_t *a2, uint64_t a3, unint64_t *a4)
{
  int v4;
  signed int v5;
  int16x8_t v6;
  unsigned int v7;
  int8x16_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  const double *v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;

  v4 = 18 - result;
  v5 = byte_1C98328DA[result];
  if ((int)result >= 18)
    v4 = result - 18;
  v6 = (int16x8_t)a2[result > 0x11];
  if ((v5 & 0x1F) != 0)
  {
    if (v5 < 0)
    {
      v12 = a2[result < 0x12];
      v12.i64[1] = *(uint64_t *)((char *)&a2[-1].i64[1] + 6);
      v13 = (const double *)((char *)&unk_1C9832CA0 + 64 * (uint64_t)v4 + 56);
      v14 = (int8x16_t)vld1q_dup_f64(v13);
      v6 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(v12, v14), (int64x2_t)v6);
      v7 = ~(v5 >> 4);
    }
    else
    {
      v7 = (v5 >> 4) + 6;
    }
    v15 = *(int8x16_t *)((char *)&unk_1C9832EA0 + 8 * v7);
    v16 = *(int8x16_t *)((char *)&unk_1C9832EA0 + 8 * byte_1C9832EF8[v4 - 1]);
    v17.i64[0] = 0x202020202020202;
    v17.i64[1] = 0x202020202020202;
    v18 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v15, v17));
    v19 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v16, v17));
    v20 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v15);
    v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v16);
    v22.i64[0] = 0x1F001F001F001FLL;
    v22.i64[1] = 0x1F001F001F001FLL;
    v23 = (int32x4_t)vandq_s8((int8x16_t)vmull_s8(vdup_n_s8(v5), (int8x8_t)0x404030302020101), v22);
    v24 = (int16x8_t)vzip2q_s32(v23, v23);
    v25 = (int16x8_t)vzip1q_s32(v23, v23);
    v26.i64[0] = 0x20002000200020;
    v26.i64[1] = 0x20002000200020;
    v27 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v25, v18), vsubq_s16(v26, v25), v20), 5uLL);
    v6 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v24, v19), vsubq_s16(v26, v24), v21), 5uLL);
    if (result <= 0x11)
    {
      v28 = vzip1q_s16(v27, v6);
      v29 = vzip2q_s16(v27, v6);
      v27 = vzip1q_s16(v28, v29);
      v6 = vzip2q_s16(v28, v29);
    }
    *a4 = v27.i64[0];
    *(unint64_t *)((char *)a4 + 2 * a3) = v27.u64[1];
    *(unint64_t *)((char *)a4 + 4 * a3) = v6.i64[0];
  }
  else
  {
    if ((_DWORD)result == 18)
    {
      v8 = a2[1];
      v6 = (int16x8_t)vqtbl1q_s8(*(int8x16_t *)((char *)a2 - 2), (int8x16_t)xmmword_1C9862DC0);
      v9 = vextq_s8((int8x16_t)v6, v8, 0xEuLL).u64[0];
      v10 = vextq_s8((int8x16_t)v6, v8, 0xCuLL).u64[0];
      v11 = vextq_s8((int8x16_t)v6, v8, 0xAuLL).u64[0];
    }
    else
    {
      v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 2uLL).u64[0];
      v10 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      v11 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 6uLL).u64[0];
    }
    *a4 = v9;
    *(unint64_t *)((char *)a4 + 2 * a3) = v10;
    *(unint64_t *)((char *)a4 + 4 * a3) = v11;
  }
  *(unint64_t *)((char *)a4 + 6 * a3) = v6.u64[1];
  return result;
}

uint64_t sub_1C9792764(uint64_t result, int8x16_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4;
  int8x16_t *v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint16x8_t *v11;
  int v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  _OWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 2;
  if (v4 < 0)
  {
    v6 = 18 - result;
    if ((int)result >= 18)
      v6 = result - 18;
    v44 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1C9832CA0[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11)
    v5 = a2;
  v7 = a2[2 * (result > 0x11)];
  v8 = v5[1];
  v45[0] = v7;
  v45[1] = v8;
  v44.i16[7] = a2[-1].i16[7];
  if ((v4 & 0x1F) != 0)
  {
    v9 = 8;
    v10.i64[0] = 0x20002000200020;
    v10.i64[1] = 0x20002000200020;
    v11 = (uint16x8_t *)a4;
    v12 = v4;
    do
    {
      v13 = vdupq_n_s16(v12 & 0x1F);
      *v11 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v45 + 2 * (v12 >> 5)), vsubq_s16(v10, v13)), *(int16x8_t *)((char *)v45 + 2 * (v12 >> 5) + 2), v13), 5uLL);
      v12 += v4;
      v11 = (uint16x8_t *)((char *)v11 + 2 * a3);
      --v9;
    }
    while (v9);
    if (result < 0x12)
    {
      v14 = *(int16x8_t *)((char *)a4 + 2 * a3);
      v15 = *(int16x8_t *)((char *)a4 + 4 * a3);
      v16 = *(int16x8_t *)((char *)a4 + 6 * a3);
      v17 = *(int16x8_t *)((char *)a4 + 8 * a3);
      v18 = *(int16x8_t *)((char *)a4 + 10 * a3);
      v19 = *(int16x8_t *)((char *)a4 + 12 * a3);
      v20 = (int32x4_t)vtrn1q_s16(*a4, v14);
      v21 = (int32x4_t)vtrn2q_s16(*a4, v14);
      v22 = (int32x4_t)vtrn1q_s16(v15, v16);
      v23 = *(int16x8_t *)((char *)a4 + 14 * a3);
      v24 = (int32x4_t)vtrn2q_s16(v15, v16);
      v25 = (int64x2_t)vtrn1q_s32(v20, v22);
      v26 = (int64x2_t)vtrn2q_s32(v20, v22);
      v27 = (int64x2_t)vtrn1q_s32(v21, v24);
      v28 = (int64x2_t)vtrn2q_s32(v21, v24);
      v29 = (int32x4_t)vtrn1q_s16(v17, v18);
      v30 = (int32x4_t)vtrn2q_s16(v17, v18);
      v31 = (int32x4_t)vtrn1q_s16(v19, v23);
      v32 = (int32x4_t)vtrn2q_s16(v19, v23);
      v33 = (int64x2_t)vtrn1q_s32(v29, v31);
      v34 = (int64x2_t)vtrn2q_s32(v29, v31);
      v35 = (int64x2_t)vtrn1q_s32(v30, v32);
      v36 = (int64x2_t)vtrn2q_s32(v30, v32);
      *(int64x2_t *)a4 = vzip1q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 2 * a3) = vzip1q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 4 * a3) = vzip1q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 6 * a3) = vzip1q_s64(v28, v36);
      *(int64x2_t *)((char *)a4 + 8 * a3) = vzip2q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 10 * a3) = vzip2q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 12 * a3) = vzip2q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 14 * a3) = vzip2q_s64(v28, v36);
    }
  }
  else
  {
    if (v4 < 0)
    {
      v8 = v44;
      v37 = vextq_s8(v44, v7, 0xEuLL);
      v38 = vextq_s8(v44, v7, 0xCuLL);
      v39 = vextq_s8(v44, v7, 0xAuLL);
      v40 = vextq_s8(v44, v7, 8uLL);
      v41 = vextq_s8(v44, v7, 6uLL);
      v42 = vextq_s8(v44, v7, 4uLL);
      v43 = vextq_s8(v44, v7, 2uLL);
    }
    else
    {
      v37 = vextq_s8(v7, v8, 2uLL);
      v38 = vextq_s8(v7, v8, 4uLL);
      v39 = vextq_s8(v7, v8, 6uLL);
      v40 = vextq_s8(v7, v8, 8uLL);
      v41 = vextq_s8(v7, v8, 0xAuLL);
      v42 = vextq_s8(v7, v8, 0xCuLL);
      v43 = vextq_s8(v7, v8, 0xEuLL);
    }
    *a4 = (int16x8_t)v37;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v38;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v39;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v40;
    *(int8x16_t *)((char *)a4 + 8 * a3) = v41;
    *(int8x16_t *)((char *)a4 + 10 * a3) = v42;
    *(int8x16_t *)((char *)a4 + 12 * a3) = v43;
    *(int8x16_t *)((char *)a4 + 14 * a3) = v8;
  }
  return result;
}

uint64_t sub_1C97929DC(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint16x8_t *v9;
  uint64_t v10;
  int16x8_t v11;
  int v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  __int128 v25;
  __int128 v26;
  __int8 *v27;
  uint64_t v28;
  char v29;
  int16x8_t v30;
  int v31;
  char v32;
  uint16x8_t *v33;
  uint16x8_t *v34;
  uint64_t v35;
  int16x8_t v36;
  int16x8_t v37;
  uint64_t v38;
  char v39;
  char v40;
  int16x8_t *v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  __int128 v65;
  _OWORD v66[3];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 4;
  if (result <= 0x11)
    v5 = a2;
  v6 = v5[1];
  v7 = v5[2];
  v65 = a2[4 * (unint64_t)(result > 0x11)];
  v66[0] = v6;
  v8 = v5[3];
  v66[1] = v7;
  v66[2] = v8;
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v28 = 0;
      v29 = 1;
      v30.i64[0] = 0x20002000200020;
      v30.i64[1] = 0x20002000200020;
      v31 = v4;
      result = 14 * a3;
      do
      {
        v32 = v29;
        v33 = &a4[v28];
        v34 = v33;
        v35 = 8;
        do
        {
          v36 = vdupq_n_s16(v31 & 0x1F);
          v37 = vsubq_s16(v30, v36);
          *v34 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v34[a3] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)v66 + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v31 += v4;
          v34 = (uint16x8_t *)((char *)v34 + 2 * a3);
          --v35;
        }
        while (v35);
        v38 = 0;
        v39 = 1;
        do
        {
          v40 = v39;
          v41 = (int16x8_t *)((char *)v33 + 2 * v38 * a3);
          v42 = *(int16x8_t *)((char *)v41 + 2 * a3);
          v43 = *(int16x8_t *)((char *)v41 + 4 * a3);
          v44 = *(int16x8_t *)((char *)v41 + 6 * a3);
          v45 = *(int16x8_t *)((char *)v41 + 8 * a3);
          v46 = *(int16x8_t *)((char *)v41 + 10 * a3);
          v47 = *(int16x8_t *)((char *)v41 + 12 * a3);
          v48 = (int32x4_t)vtrn1q_s16(*v41, v42);
          v49 = (int32x4_t)vtrn2q_s16(*v41, v42);
          v50 = (int32x4_t)vtrn1q_s16(v43, v44);
          v51 = *(int16x8_t *)((char *)v41 + 14 * a3);
          v52 = (int32x4_t)vtrn2q_s16(v43, v44);
          v53 = (int64x2_t)vtrn1q_s32(v48, v50);
          v54 = (int64x2_t)vtrn2q_s32(v48, v50);
          v55 = (int64x2_t)vtrn1q_s32(v49, v52);
          v56 = (int64x2_t)vtrn2q_s32(v49, v52);
          v57 = (int32x4_t)vtrn1q_s16(v45, v46);
          v58 = (int32x4_t)vtrn2q_s16(v45, v46);
          v59 = (int32x4_t)vtrn1q_s16(v47, v51);
          v60 = (int32x4_t)vtrn2q_s16(v47, v51);
          v61 = (int64x2_t)vtrn1q_s32(v57, v59);
          v62 = (int64x2_t)vtrn2q_s32(v57, v59);
          v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)v41 = vzip1q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 2 * a3) = vzip1q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 4 * a3) = vzip1q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 6 * a3) = vzip1q_s64(v56, v64);
          *(int64x2_t *)((char *)v41 + 8 * a3) = vzip2q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 10 * a3) = vzip2q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 12 * a3) = vzip2q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 14 * a3) = vzip2q_s64(v56, v64);
          v38 = 8;
          v39 = 0;
        }
        while ((v40 & 1) != 0);
        v29 = 0;
        v28 = 1;
      }
      while ((v32 & 1) != 0);
    }
    else
    {
      v9 = a4 + 1;
      v10 = 16;
      v11.i64[0] = 0x20002000200020;
      v11.i64[1] = 0x20002000200020;
      v12 = v4;
      do
      {
        v13 = vdupq_n_s16(v12 & 0x1F);
        v14 = vsubq_s16(v11, v13);
        v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5) + 2), v13), 5uLL);
        v16 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)v66 + 2 * (v12 >> 5) + 2), v13), 5uLL);
        v9[-1] = v15;
        *v9 = v16;
        v12 += v4;
        v9 = (uint16x8_t *)((char *)v9 + 2 * a3);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v17 = v4 >> 5;
    v18 = 2 * v17;
    v19 = 2 * v17;
    v20 = v66;
    v21 = 2 * v18;
    v22 = -2;
    do
    {
      v23 = *(uint16x8_t *)((char *)v20 + v19 - 16);
      v24 = *(uint16x8_t *)((char *)v20 + v19);
      v20 = (__int128 *)((char *)v20 + v21);
      v25 = *(v20 - 1);
      v26 = *v20;
      *a4 = v23;
      a4[1] = v24;
      v27 = &a4->i8[2 * a3];
      *(_OWORD *)v27 = v25;
      *((_OWORD *)v27 + 1) = v26;
      v22 += 2;
      a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    }
    while (v22 < 0xE);
  }
  return result;
}

uint64_t sub_1C9792D00(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int8x16_t *v14;
  uint64_t v15;
  unint64_t i;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint16x8_t *v20;
  uint64_t v21;
  int16x8_t v22;
  int v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int v29;
  uint16x8_t *v30;
  uint64_t v31;
  uint16x8_t *v32;
  uint64_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int16x8_t v46;
  int v47;
  uint64_t v48;
  uint16x8_t *v49;
  uint64_t v50;
  int16x8_t v51;
  int16x8_t v52;
  unint64_t v53;
  int16x8_t *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  BOOL v78;
  _BYTE v79[78];
  __int16 v80;
  _WORD v81[68];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 8;
  if (result <= 0x11)
    v6 = a2;
  else
    v6 = a2 + 8;
  if (v4 < 0)
  {
    v8 = 0;
    if (result > 0x11)
      v5 = a2;
    v9 = a2[8 * (unint64_t)(result < 0x12)];
    v10 = v5[1];
    v11 = v5[2];
    v12 = v5[3];
    if ((int)result >= 18)
      v13 = result - 18;
    else
      v13 = 18 - result;
    v14 = &xmmword_1C9832CA0[4 * (uint64_t)v13];
    v7 = 32;
    do
    {
      *(int8x16_t *)&v79[v8 * 16 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, v14[v8]);
      ++v8;
    }
    while (v8 != 4);
  }
  else
  {
    v7 = 64;
  }
  v15 = 0;
  for (i = 0; i < v7; i += 32)
  {
    v17 = &v79[v15 * 16];
    v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  v80 = *((_WORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v37 = 0;
      v38 = 4 * a3;
      v39 = 6 * a3;
      v40 = 3 * a3;
      v41 = 2 * a3;
      result = 32 * a3;
      v42 = a3;
      v43 = 12 * a3;
      v44 = 10 * a3;
      v45 = 8 * a3;
      v46.i64[0] = 0x20002000200020;
      v46.i64[1] = 0x20002000200020;
      v47 = v4;
      v48 = 14 * a3;
      do
      {
        v49 = a4;
        v50 = 8;
        do
        {
          v51 = vdupq_n_s16(v47 & 0x1F);
          v52 = vsubq_s16(v46, v51);
          *v49 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v47 >> 5], v52), *(int16x8_t *)&v81[(v47 >> 5) + 1], v51), 5uLL);
          v49[v42] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 8], v52), *(int16x8_t *)&v81[(v47 >> 5) + 9], v51), 5uLL);
          *(uint16x8_t *)((char *)v49 + result) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 16], v52), *(int16x8_t *)&v81[(v47 >> 5) + 17], v51), 5uLL);
          v49[v40] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 24], v52), *(int16x8_t *)&v81[(v47 >> 5) + 25], v51), 5uLL);
          v47 += v4;
          v49 = (uint16x8_t *)((char *)v49 + v41);
          --v50;
        }
        while (v50);
        v53 = -8;
        v54 = (int16x8_t *)a4;
        do
        {
          v55 = *(int16x8_t *)((char *)v54 + v41);
          v56 = *(int16x8_t *)((char *)v54 + v38);
          v57 = *(int16x8_t *)((char *)v54 + v39);
          v58 = *(int16x8_t *)((char *)v54 + v45);
          v59 = *(int16x8_t *)((char *)v54 + v44);
          v60 = *(int16x8_t *)((char *)v54 + v43);
          v61 = (int32x4_t)vtrn1q_s16(*v54, v55);
          v62 = (int32x4_t)vtrn2q_s16(*v54, v55);
          v63 = (int32x4_t)vtrn1q_s16(v56, v57);
          v64 = *(int16x8_t *)((char *)v54 + v48);
          v65 = (int32x4_t)vtrn2q_s16(v56, v57);
          v66 = (int64x2_t)vtrn1q_s32(v61, v63);
          v67 = (int64x2_t)vtrn2q_s32(v61, v63);
          v68 = (int64x2_t)vtrn1q_s32(v62, v65);
          v69 = (int64x2_t)vtrn2q_s32(v62, v65);
          v70 = (int32x4_t)vtrn1q_s16(v58, v59);
          v71 = (int32x4_t)vtrn2q_s16(v58, v59);
          v72 = (int32x4_t)vtrn1q_s16(v60, v64);
          v73 = (int32x4_t)vtrn2q_s16(v60, v64);
          v74 = (int64x2_t)vtrn1q_s32(v70, v72);
          v75 = (int64x2_t)vtrn2q_s32(v70, v72);
          v76 = (int64x2_t)vtrn1q_s32(v71, v73);
          v77 = (int64x2_t)vtrn2q_s32(v71, v73);
          *(int64x2_t *)v54 = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v41) = vzip1q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v38) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v39) = vzip1q_s64(v69, v77);
          *(int64x2_t *)((char *)v54 + v45) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v44) = vzip2q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v43) = vzip2q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v48) = vzip2q_s64(v69, v77);
          v53 += 8;
          v54 = (int16x8_t *)((char *)v54 + v42 * 16);
        }
        while (v53 < 0x18);
        ++a4;
        v78 = v37 >= 0x18;
        v37 += 8;
      }
      while (!v78);
    }
    else
    {
      v20 = a4 + 2;
      v21 = 32;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      v23 = v4;
      do
      {
        v24 = vdupq_n_s16(v23 & 0x1F);
        v25 = vsubq_s16(v22, v24);
        v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 8], v25), *(int16x8_t *)&v81[(v23 >> 5) + 9], v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v23 >> 5], v25), *(int16x8_t *)&v81[(v23 >> 5) + 1], v24), 5uLL);
        v20[-1] = v26;
        result = (uint64_t)&v81[(v23 >> 5) + 16];
        v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 2), v24), 5uLL);
        v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 24], v25), *(int16x8_t *)&v81[(v23 >> 5) + 25], v24), 5uLL);
        *v20 = v27;
        v20[1] = v28;
        v23 += v4;
        v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v29 = v4 >> 5;
    v30 = a4 + 2;
    v31 = v29;
    v32 = (uint16x8_t *)&v81[v31 + 24];
    v33 = 32;
    do
    {
      v34 = v32[-2];
      v35 = v32[-1];
      v36 = *v32;
      v30[-2] = v32[-3];
      v30[-1] = v34;
      *v30 = v35;
      v30[1] = v36;
      v32 = (uint16x8_t *)((char *)v32 + v31 * 2);
      v30 = (uint16x8_t *)((char *)v30 + 2 * a3);
      --v33;
    }
    while (v33);
  }
  return result;
}

int16x8_t *sub_1C97930D4(int16x8_t *result, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  _WORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t i;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int16x8_t v20;
  int v21;
  uint64_t v22;
  int16x8_t v23;
  int16x8_t v24;
  char v25;
  _WORD *v26;
  uint64_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int8 *v39;
  unint64_t v40;
  int16x8_t v41;
  int v42;
  uint64_t v43;
  int16x8_t *v44;
  uint64_t v45;
  int16x8_t v46;
  int16x8_t v47;
  char v48;
  char v49;
  _WORD *v50;
  uint64_t v51;
  unint64_t v52;
  int16x8_t *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  _BYTE v77[142];
  __int16 v78;
  _WORD v79[132];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = v79;
  v5 = byte_1C98328DA[result];
  v6 = a2 + 256;
  if (result <= 0x11)
    v7 = a2;
  else
    v7 = a2 + 256;
  if (result > 0x11)
    v6 = a2;
  if (v5 < 0)
  {
    v9 = byte_1C98328DA[(int)result];
    if (v9 < 0)
    {
      v10 = 2 * byte_1C98328DA[(int)result];
      v11 = word_1C9832A00[(int)result - 11];
      v12 = 2 * v9 * v11 + 128;
      v8 = 64;
      do
      {
        v79[v10 - 1] = *(_WORD *)(v6 + 2 * ((v12 >> 8) - 1));
        v12 += v11;
        v13 = __CFADD__(v10++, 1);
      }
      while (!v13);
    }
    else
    {
      v8 = 64;
    }
  }
  else
  {
    v8 = 128;
  }
  v14 = 0;
  for (i = 0; i < v8; i += 32)
  {
    v16 = &v77[v14];
    v17 = *(_OWORD *)(v7 + v14 + 16);
    v16[9] = *(_OWORD *)(v7 + v14);
    v16[10] = v17;
    v18 = *(_OWORD *)(v7 + v14 + 48);
    v16[11] = *(_OWORD *)(v7 + v14 + 32);
    v16[12] = v18;
    v14 += 64;
  }
  v78 = *(_WORD *)(a2 - 2);
  if ((v5 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v40 = 0;
      v41.i64[0] = 0x20002000200020;
      v41.i64[1] = 0x20002000200020;
      result = a4;
      v42 = v5;
      do
      {
        v43 = 0;
        v44 = &a4[v40];
        do
        {
          v45 = 0;
          v46 = vdupq_n_s16(v42 & 0x1F);
          v47 = vsubq_s16(v41, v46);
          v48 = 1;
          do
          {
            v49 = v48;
            v50 = &v79[v45 + ((uint64_t)v42 >> 5)];
            v51 = v45 + v43;
            *(uint16x8_t *)((char *)v44 + 2 * v51 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v50, v47), *(int16x8_t *)(v50 + 1), v46), 5uLL);
            *(uint16x8_t *)((char *)v44 + 2 * (v51 + 8) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v50 + 1), v47), *(int16x8_t *)(v50 + 9), v46), 5uLL);
            *(uint16x8_t *)((char *)v44 + 2 * (v51 + 16) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v50 + 2), v47), *(int16x8_t *)(v50 + 17), v46), 5uLL);
            *(uint16x8_t *)((char *)v44 + 2 * (v51 + 24) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v50 + 3), v47), *(int16x8_t *)(v50 + 25), v46), 5uLL);
            v45 = 32;
            v48 = 0;
          }
          while ((v49 & 1) != 0);
          ++v43;
          v42 += v5;
        }
        while (v43 != 8);
        v52 = -8;
        v53 = result;
        do
        {
          v54 = *(int16x8_t *)((char *)v53 + 2 * a3);
          v55 = *(int16x8_t *)((char *)v53 + 4 * a3);
          v56 = *(int16x8_t *)((char *)v53 + 6 * a3);
          v57 = *(int16x8_t *)((char *)v53 + 8 * a3);
          v58 = *(int16x8_t *)((char *)v53 + 10 * a3);
          v59 = *(int16x8_t *)((char *)v53 + 12 * a3);
          v60 = (int32x4_t)vtrn1q_s16(*v53, v54);
          v61 = (int32x4_t)vtrn2q_s16(*v53, v54);
          v62 = (int32x4_t)vtrn1q_s16(v55, v56);
          v63 = *(int16x8_t *)((char *)v53 + 14 * a3);
          v64 = (int32x4_t)vtrn2q_s16(v55, v56);
          v65 = (int64x2_t)vtrn1q_s32(v60, v62);
          v66 = (int64x2_t)vtrn2q_s32(v60, v62);
          v67 = (int64x2_t)vtrn1q_s32(v61, v64);
          v68 = (int64x2_t)vtrn2q_s32(v61, v64);
          v69 = (int32x4_t)vtrn1q_s16(v57, v58);
          v70 = (int32x4_t)vtrn2q_s16(v57, v58);
          v71 = (int32x4_t)vtrn1q_s16(v59, v63);
          v72 = (int32x4_t)vtrn2q_s16(v59, v63);
          v73 = (int64x2_t)vtrn1q_s32(v69, v71);
          v74 = (int64x2_t)vtrn2q_s32(v69, v71);
          v75 = (int64x2_t)vtrn1q_s32(v70, v72);
          v76 = (int64x2_t)vtrn2q_s32(v70, v72);
          *(int64x2_t *)v53 = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v53 + 2 * a3) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v53 + 4 * a3) = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v53 + 6 * a3) = vzip1q_s64(v68, v76);
          *(int64x2_t *)((char *)v53 + 8 * a3) = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v53 + 10 * a3) = vzip2q_s64(v67, v75);
          *(int64x2_t *)((char *)v53 + 12 * a3) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v53 + 14 * a3) = vzip2q_s64(v68, v76);
          v52 += 8;
          v53 += a3;
        }
        while (v52 < 0x38);
        ++result;
        v13 = v40++ >= 7;
      }
      while (!v13);
    }
    else
    {
      v19 = 0;
      v20.i64[0] = 0x20002000200020;
      v20.i64[1] = 0x20002000200020;
      v21 = v5;
      do
      {
        v22 = 0;
        v23 = vdupq_n_s16(v21 & 0x1F);
        v24 = vsubq_s16(v20, v23);
        v25 = 1;
        do
        {
          v26 = &v79[v22 * 8 + ((uint64_t)v21 >> 5)];
          v27 = (uint64_t)a4[v22].i64 + 2 * v19 * a3;
          v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v26 + 1), v24), *(int16x8_t *)(v26 + 9), v23), 5uLL);
          *(uint16x8_t *)v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v26, v24), *(int16x8_t *)(v26 + 1), v23), 5uLL);
          *(uint16x8_t *)(v27 + 16) = v28;
          v29 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v26 + 2), v24), *(int16x8_t *)(v26 + 17), v23);
          v30 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v26 + 3), v24), *(int16x8_t *)(v26 + 25), v23);
          LOBYTE(v26) = v25;
          *(uint16x8_t *)(v27 + 32) = vrshrq_n_u16(v29, 5uLL);
          *(uint16x8_t *)(v27 + 48) = vrshrq_n_u16(v30, 5uLL);
          v22 = 4;
          v25 = 0;
        }
        while ((v26 & 1) != 0);
        ++v19;
        v21 += v5;
      }
      while (v19 != 64);
    }
  }
  else
  {
    v31 = 0;
    v32 = (uint64_t)v5 >> 5;
    do
    {
      v33 = 0;
      v34 = 1;
      v4 += v32;
      do
      {
        v35 = &v4[v33 * 8];
        v36 = v35[1];
        v37 = v35[2];
        v38 = v35[3];
        v39 = &a4[v33].i8[2 * v31 * a3];
        *(_OWORD *)v39 = *v35;
        *((_OWORD *)v39 + 1) = v36;
        LOBYTE(v35) = v34;
        *((_OWORD *)v39 + 2) = v37;
        *((_OWORD *)v39 + 3) = v38;
        v33 = 4;
        v34 = 0;
      }
      while ((v35 & 1) != 0);
      ++v31;
    }
    while (v31 != 64);
  }
  return result;
}

void sub_1C97934EC(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  uint16x8_t *v9;
  uint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint16x8_t v13;
  int8x16_t v14;
  int16x8_t v15;
  uint16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;

  v4 = 0;
  v5 = vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  v6 = vpaddq_s16(v5, v5);
  v7 = vpaddq_s16(v6, v6);
  v8 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vpaddq_s16(v7, v7), 5uLL);
  v9 = a4 + 1;
  *(int16x8_t *)((char *)v9 + 2 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 4 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 6 * a3) = v8;
  do
  {
    *(int16x8_t *)((char *)v9 + 8 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 10 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 12 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 14 * a3) = v8;
    v4 += 4;
    v9 = (uint16x8_t *)((char *)v9 + 8 * a3);
  }
  while (v4 < 0xC);
  v10 = 0;
  v11 = vaddq_s16(v8, v8);
  v12 = vaddq_s16(*a2, v8);
  v13 = (uint16x8_t)vaddq_s16(v12, v11);
  v11.i16[0] = v12.i16[0];
  v14 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v15 = vmulq_s16(v8, v12);
  v16 = (uint16x8_t)vaddq_s16(v15, a2[5]);
  v17 = (int8x16_t)vrshrq_n_u16((uint16x8_t)vaddq_s16(v15, a2[1]), 2uLL);
  v18 = v8;
  v18.i16[0] = v17.i16[0];
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vaddq_s16(a2[4], v8), v11), 2uLL);
  a4[1] = vrshrq_n_u16(v16, 2uLL);
  *(int8x16_t *)((char *)a4 + 14 * a3) = vextq_s8(v14, (int8x16_t)v8, 0xEuLL);
  a4[a3] = (uint16x8_t)v18;
  *(int8x16_t *)((char *)a4 + 30 * a3) = vextq_s8(v17, (int8x16_t)v8, 0xEuLL);
  v19 = vextq_s8(v14, (int8x16_t)v8, 2uLL);
  v20 = vextq_s8(v17, (int8x16_t)v8, 2uLL);
  do
  {
    v21 = (int8x16_t *)((char *)&unk_1C9832B20 + 16 * v10);
    v22 = *v21;
    *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v19, *v21);
    *(int8x16_t *)((char *)a4 + 18 * a3) = vqtbl1q_s8(v20, v22);
    v23 = v21[1];
    *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v19, v23);
    *(int8x16_t *)((char *)a4 + 20 * a3) = vqtbl1q_s8(v20, v23);
    v24 = v10 + 1;
    v10 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v24 < 5);
}

void sub_1C9793650(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  uint64_t v9;

  v4 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23])));
  v5 = vpaddq_s32(v4, v4);
  v6 = (int16x8_t)vrshrq_n_u32((uint32x4_t)vpaddq_s32(v5, v5), 7uLL);
  v7 = vtrn1q_s16(v6, v6);
  v8 = a4 + 4;
  v9 = 64;
  do
  {
    v8[-4] = v7;
    v8[-3] = v7;
    v8[-2] = v7;
    v8[-1] = v7;
    *v8 = v7;
    v8[1] = v7;
    v8[2] = v7;
    v8[3] = v7;
    v8 = (int16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1C97936EC(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const __int16 *i16;
  int16x8_t v6;
  const __int16 *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t *v15;
  int16x8_t v16;
  const __int16 *v17;
  int16x8_t v18;

  v4 = 0;
  i16 = a2[2].i16;
  v6 = vld1q_dup_s16(i16);
  v7 = a2[6].i16;
  v8 = vld1q_dup_s16(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862C60);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862DD0);
  v11 = a2[4];
  v12 = a2[5];
  v13 = vshlq_n_s16(v11, 4uLL);
  v14 = vshlq_n_s16(v12, 4uLL);
  v15 = a4 + 1;
  v16 = v6;
  do
  {
    v17 = &a2->i16[v4];
    v18 = vld1q_dup_s16(v17);
    v13 = vsubq_s16(v13, v11);
    v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1C9862C90), 5uLL);
    *v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1C9862CA0), 5uLL);
    v16 = vaddq_s16(v16, v6);
    ++v4;
    v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 16);
}

void sub_1C979378C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  uint16x8_t v7;
  uint16x8_t *v8;
  uint64_t v9;

  v4 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  v5 = vpaddq_s16(v4, v4);
  v6 = vpaddq_s16(v5, v5);
  v7 = vrshrq_n_u16((uint16x8_t)vpaddq_s16(v6, v6), 6uLL);
  v8 = a4 + 2;
  v9 = 32;
  do
  {
    v8[-2] = v7;
    v8[-1] = v7;
    *v8 = v7;
    v8[1] = v7;
    v8 = (uint16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1C97937EC(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const __int16 *i16;
  int16x8_t v6;
  const __int16 *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint16x8_t *v21;
  int16x8_t v22;
  const __int16 *v23;
  int16x8_t v24;

  v4 = 0;
  i16 = a2[4].i16;
  v6 = vld1q_dup_s16(i16);
  v7 = a2[12].i16;
  v8 = vld1q_dup_s16(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862C60);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862DD0);
  v11 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862DE0);
  v12 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862DF0);
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[10];
  v16 = a2[11];
  v17 = vshlq_n_s16(v13, 5uLL);
  v18 = vshlq_n_s16(v14, 5uLL);
  v19 = vshlq_n_s16(v15, 5uLL);
  v20 = vshlq_n_s16(v16, 5uLL);
  v21 = a4 + 2;
  v22 = v6;
  do
  {
    v23 = &a2->i16[v4];
    v24 = vld1q_dup_s16(v23);
    v17 = vsubq_s16(v17, v13);
    v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1C9862C70), 6uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1C9862C80), 6uLL);
    v19 = vsubq_s16(v19, v15);
    v20 = vsubq_s16(v20, v16);
    *v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1C9862C90), 6uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1C9862CA0), 6uLL);
    v22 = vaddq_s16(v22, v6);
    ++v4;
    v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 32);
}

int32x4_t sub_1C97938EC(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int32x4_t result;
  int16x4_t v8;
  int32x4_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  uint16x8_t *v16;
  unint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;

  v2 = a1[-1].u16[7];
  v3 = a1[7].u16[7];
  v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0)
    v4 = 2 * a1[3].u16[7] - (v3 + v2);
  if (v4 > 0xF)
    goto LABEL_7;
  v5 = a1[15].u16[7];
  v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0)
    v6 = 2 * a1[11].u16[7] - (v5 + v2);
  if (v6 < 0x10)
  {
    a2[-1].i16[7] = v2;
    v8 = vdup_n_s16(v5 - v2);
    result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    v10 = vdup_n_s16(v3 - v2);
    v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    v13 = vshll_n_s16(v8, 3uLL);
    v14 = vshll_n_s16(v10, 3uLL);
    v15 = vdup_n_s16(v2);
    v16 = a2 + 8;
    v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *v16 = v18;
      v16[-8] = v19;
      result = vaddq_s32(result, v13);
      v9 = vaddq_s32(v9, v13);
      v11 = vaddq_s32(v11, v14);
      v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1C9791D44(a1, a2).u64[0];
  }
  return result;
}

int8x16_t sub_1C97939E0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFE00FE00FE00FE00;
  v6.i64[1] = 0xFE00FE00FE00FE00;
  v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862D00);
  result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862CF0);
  *a4 = v8.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

double sub_1C9793A48(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFE00FE00FE00FE00;
  v7.i64[1] = 0xFE00FE00FE00FE00;
  v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(_QWORD *)&result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

void sub_1C9793B1C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  __int128 v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFE00FE00FE00FE00;
  v9.i64[1] = 0xFE00FE00FE00FE00;
  v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  v12 = v6;
  LOWORD(v12) = v10.i16[0];
  v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  v14 = 7;
  do
  {
    v10 = vextq_s8(v10, v10, 2uLL);
    v15 = v6;
    LOWORD(v15) = v10.i16[0];
    v11 = vextq_s8(v11, v11, 2uLL);
    v16 = v6;
    LOWORD(v16) = v11.i16[0];
    v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

int16x4_t sub_1C9793BCC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int16x4_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFE00FE00FE00FE00;
  v7.i64[1] = 0xFE00FE00FE00FE00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

int16x8_t sub_1C9793C28(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t result;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = *a2;
  v7.i64[0] = 0xFE00FE00FE00FE00;
  v7.i64[1] = 0xFE00FE00FE00FE00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x8_t sub_1C9793CC0(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  const __int16 *v9;
  unint64_t v10;
  int16x8_t *v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t *v15;
  const __int16 *v16;
  int16x8_t result;
  uint64_t v18;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = vld1q_dup_s16(a2->i16);
  v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xFE00FE00FE00FE00;
  v8.i64[1] = 0xFE00FE00FE00FE00;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  v10 = -1;
  v11 = a4;
  do
  {
    v12 = v9 - 1;
    v13 = vld1q_dup_s16(v12);
    v14 = vld1q_dup_s16(v9);
    v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *v15 = v13;
    v15[1] = v13;
    v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  v16 = &a2[1].i16[7];
  result = vld1q_dup_s16(v16);
  v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int32x4_t sub_1C9793D64(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int32x4_t result;
  int16x4_t v8;
  int32x4_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  uint16x8_t *v16;
  unint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;

  v2 = a1[-1].u16[7];
  v3 = a1[7].u16[7];
  v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0)
    v4 = 2 * a1[3].u16[7] - (v3 + v2);
  if (v4 > 0x1F)
    goto LABEL_7;
  v5 = a1[15].u16[7];
  v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0)
    v6 = 2 * a1[11].u16[7] - (v5 + v2);
  if (v6 < 0x20)
  {
    a2[-1].i16[7] = v2;
    v8 = vdup_n_s16(v5 - v2);
    result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    v10 = vdup_n_s16(v3 - v2);
    v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    v13 = vshll_n_s16(v8, 3uLL);
    v14 = vshll_n_s16(v10, 3uLL);
    v15 = vdup_n_s16(v2);
    v16 = a2 + 8;
    v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *v16 = v18;
      v16[-8] = v19;
      result = vaddq_s32(result, v13);
      v9 = vaddq_s32(v9, v13);
      v11 = vaddq_s32(v11, v14);
      v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1C9791D44(a1, a2).u64[0];
  }
  return result;
}

int8x16_t sub_1C9793E58(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFC00FC00FC00FC00;
  v6.i64[1] = 0xFC00FC00FC00FC00;
  v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862D00);
  result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862CF0);
  *a4 = v8.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

double sub_1C9793EC0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(_QWORD *)&result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

void sub_1C9793F94(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  __int128 v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFC00FC00FC00FC00;
  v9.i64[1] = 0xFC00FC00FC00FC00;
  v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  v12 = v6;
  LOWORD(v12) = v10.i16[0];
  v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  v14 = 7;
  do
  {
    v10 = vextq_s8(v10, v10, 2uLL);
    v15 = v6;
    LOWORD(v15) = v10.i16[0];
    v11 = vextq_s8(v11, v11, 2uLL);
    v16 = v6;
    LOWORD(v16) = v11.i16[0];
    v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

int16x4_t sub_1C9794044(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int16x4_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

int16x8_t sub_1C97940A0(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t result;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = *a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x8_t sub_1C9794138(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  const __int16 *v9;
  unint64_t v10;
  int16x8_t *v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t *v15;
  const __int16 *v16;
  int16x8_t result;
  uint64_t v18;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = vld1q_dup_s16(a2->i16);
  v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xFC00FC00FC00FC00;
  v8.i64[1] = 0xFC00FC00FC00FC00;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  v10 = -1;
  v11 = a4;
  do
  {
    v12 = v9 - 1;
    v13 = vld1q_dup_s16(v12);
    v14 = vld1q_dup_s16(v9);
    v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *v15 = v13;
    v15[1] = v13;
    v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  v16 = &a2[1].i16[7];
  result = vld1q_dup_s16(v16);
  v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int32x4_t sub_1C97941DC(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int32x4_t result;
  int16x4_t v8;
  int32x4_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  uint16x8_t *v16;
  unint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;

  v2 = a1[-1].u16[7];
  v3 = a1[7].u16[7];
  v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0)
    v4 = 2 * a1[3].u16[7] - (v3 + v2);
  if (v4 > 0x3F)
    goto LABEL_7;
  v5 = a1[15].u16[7];
  v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0)
    v6 = 2 * a1[11].u16[7] - (v5 + v2);
  if (v6 < 0x40)
  {
    a2[-1].i16[7] = v2;
    v8 = vdup_n_s16(v5 - v2);
    result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    v10 = vdup_n_s16(v3 - v2);
    v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    v13 = vshll_n_s16(v8, 3uLL);
    v14 = vshll_n_s16(v10, 3uLL);
    v15 = vdup_n_s16(v2);
    v16 = a2 + 8;
    v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *v16 = v18;
      v16[-8] = v19;
      result = vaddq_s32(result, v13);
      v9 = vaddq_s32(v9, v13);
      v11 = vaddq_s32(v11, v14);
      v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1C9791D44(a1, a2).u64[0];
  }
  return result;
}

int8x16_t sub_1C97942D0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xF800F800F800F800;
  v6.i64[1] = 0xF800F800F800F800;
  v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862D00);
  result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862CF0);
  *a4 = v8.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

double sub_1C9794338(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xF800F800F800F800;
  v7.i64[1] = 0xF800F800F800F800;
  v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(_QWORD *)&result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

void sub_1C979440C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  __int128 v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xF800F800F800F800;
  v9.i64[1] = 0xF800F800F800F800;
  v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  v12 = v6;
  LOWORD(v12) = v10.i16[0];
  v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  v14 = 7;
  do
  {
    v10 = vextq_s8(v10, v10, 2uLL);
    v15 = v6;
    LOWORD(v15) = v10.i16[0];
    v11 = vextq_s8(v11, v11, 2uLL);
    v16 = v6;
    LOWORD(v16) = v11.i16[0];
    v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

int16x4_t sub_1C97944BC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int16x4_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xF800F800F800F800;
  v7.i64[1] = 0xF800F800F800F800;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

int16x8_t sub_1C9794518(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t result;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = *a2;
  v7.i64[0] = 0xF800F800F800F800;
  v7.i64[1] = 0xF800F800F800F800;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x8_t sub_1C97945B0(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  const __int16 *v9;
  unint64_t v10;
  int16x8_t *v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t *v15;
  const __int16 *v16;
  int16x8_t result;
  uint64_t v18;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = vld1q_dup_s16(a2->i16);
  v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xF800F800F800F800;
  v8.i64[1] = 0xF800F800F800F800;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  v10 = -1;
  v11 = a4;
  do
  {
    v12 = v9 - 1;
    v13 = vld1q_dup_s16(v12);
    v14 = vld1q_dup_s16(v9);
    v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *v15 = v13;
    v15[1] = v13;
    v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  v16 = &a2[1].i16[7];
  result = vld1q_dup_s16(v16);
  v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int32x4_t sub_1C9794654(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int32x4_t result;
  int16x4_t v8;
  int32x4_t v9;
  int16x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  uint16x8_t *v16;
  unint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;

  v2 = a1[-1].u16[7];
  v3 = a1[7].u16[7];
  v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0)
    v4 = 2 * a1[3].u16[7] - (v3 + v2);
  if (v4 > 0x7F)
    goto LABEL_7;
  v5 = a1[15].u16[7];
  v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0)
    v6 = 2 * a1[11].u16[7] - (v5 + v2);
  if (v6 < 0x80)
  {
    a2[-1].i16[7] = v2;
    v8 = vdup_n_s16(v5 - v2);
    result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    v10 = vdup_n_s16(v3 - v2);
    v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    v13 = vshll_n_s16(v8, 3uLL);
    v14 = vshll_n_s16(v10, 3uLL);
    v15 = vdup_n_s16(v2);
    v16 = a2 + 8;
    v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *v16 = v18;
      v16[-8] = v19;
      result = vaddq_s32(result, v13);
      v9 = vaddq_s32(v9, v13);
      v11 = vaddq_s32(v11, v14);
      v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1C9791D44(a1, a2).u64[0];
  }
  return result;
}

int8x16_t sub_1C9794748(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xF000F000F000F000;
  v6.i64[1] = 0xF000F000F000F000;
  v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862D00);
  result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9862CF0);
  *a4 = v8.i64[0];
  *(_QWORD *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(_QWORD *)((char *)a4 + 4 * a3) = result.i64[0];
  *(_QWORD *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

double sub_1C97947B0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  int16x8_t v7;
  int16x8_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(_QWORD *)&result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

void sub_1C9794884(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  __int128 v6;
  __int128 v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xF000F000F000F000;
  v9.i64[1] = 0xF000F000F000F000;
  v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  v12 = v6;
  LOWORD(v12) = v10.i16[0];
  v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  v14 = 7;
  do
  {
    v10 = vextq_s8(v10, v10, 2uLL);
    v15 = v6;
    LOWORD(v15) = v10.i16[0];
    v11 = vextq_s8(v11, v11, 2uLL);
    v16 = v6;
    LOWORD(v16) = v11.i16[0];
    v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

int16x4_t sub_1C9794934(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int16x4_t result;

  v4 = (const __int16 *)(a2 - 2);
  v5 = vld1q_dup_s16(v4);
  v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

int16x8_t sub_1C9794990(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t result;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = *a2;
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x8_t sub_1C9794A28(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  const __int16 *v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  const __int16 *v9;
  unint64_t v10;
  int16x8_t *v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t *v15;
  const __int16 *v16;
  int16x8_t result;
  uint64_t v18;

  v4 = &a2[-1].i16[7];
  v5 = vld1q_dup_s16(v4);
  v6 = vld1q_dup_s16(a2->i16);
  v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xF000F000F000F000;
  v8.i64[1] = 0xF000F000F000F000;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  v10 = -1;
  v11 = a4;
  do
  {
    v12 = v9 - 1;
    v13 = vld1q_dup_s16(v12);
    v14 = vld1q_dup_s16(v9);
    v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *v15 = v13;
    v15[1] = v13;
    v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  v16 = &a2[1].i16[7];
  result = vld1q_dup_s16(v16);
  v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

uint64_t sub_1C9794ACC(uint64_t result, int8x16_t *a2, uint64_t a3, unint64_t *a4)
{
  int v4;
  signed int v5;
  int16x8_t v6;
  unsigned int v7;
  int8x16_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  const double *v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;

  v4 = 18 - result;
  v5 = byte_1C98328DA[result];
  if ((int)result >= 18)
    v4 = result - 18;
  v6 = (int16x8_t)a2[result > 0x11];
  if ((v5 & 0x1F) != 0)
  {
    if (v5 < 0)
    {
      v12 = a2[result < 0x12];
      v12.i64[1] = *(uint64_t *)((char *)&a2[-1].i64[1] + 6);
      v13 = (const double *)&xmmword_1C9832CA0[4 * (uint64_t)v4 + 3].i64[1];
      v14 = (int8x16_t)vld1q_dup_f64(v13);
      v6 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(v12, v14), (int64x2_t)v6);
      v7 = ~(v5 >> 4);
    }
    else
    {
      v7 = (v5 >> 4) + 6;
    }
    v15 = *(int8x16_t *)((char *)&unk_1C9832EA0 + 8 * v7);
    v16 = *(int8x16_t *)((char *)&unk_1C9832EA0 + 8 * byte_1C9832EF8[v4 - 1]);
    v17.i64[0] = 0x202020202020202;
    v17.i64[1] = 0x202020202020202;
    v18 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v15, v17));
    v19 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v16, v17));
    v20 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, v15);
    v21 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, v16);
    v22.i64[0] = 0x1F001F001F001FLL;
    v22.i64[1] = 0x1F001F001F001FLL;
    v23 = (int32x4_t)vandq_s8((int8x16_t)vmull_s8(vdup_n_s8(v5), (int8x8_t)0x404030302020101), v22);
    v24 = (int16x8_t)vzip2q_s32(v23, v23);
    v25 = (int16x8_t)vzip1q_s32(v23, v23);
    v26.i64[0] = 0x20002000200020;
    v26.i64[1] = 0x20002000200020;
    v27 = (uint16x8_t)vsubq_s16(v26, v25);
    v28 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v18.i8, *(uint16x4_t *)v25.i8), *(uint16x4_t *)v20.i8, *(uint16x4_t *)v27.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v18, (uint16x8_t)v25), v20, v27), 5uLL);
    v29 = (uint16x8_t)vsubq_s16(v26, v24);
    v6 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v19.i8, *(uint16x4_t *)v24.i8), *(uint16x4_t *)v21.i8, *(uint16x4_t *)v29.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v19, (uint16x8_t)v24), v21, v29), 5uLL);
    if (result <= 0x11)
    {
      v30 = vzip1q_s16(v28, v6);
      v31 = vzip2q_s16(v28, v6);
      v28 = vzip1q_s16(v30, v31);
      v6 = vzip2q_s16(v30, v31);
    }
    *a4 = v28.i64[0];
    *(unint64_t *)((char *)a4 + 2 * a3) = v28.u64[1];
    *(unint64_t *)((char *)a4 + 4 * a3) = v6.i64[0];
  }
  else
  {
    if ((_DWORD)result == 18)
    {
      v8 = a2[1];
      v6 = (int16x8_t)vqtbl1q_s8(*(int8x16_t *)((char *)a2 - 2), (int8x16_t)xmmword_1C9862DC0);
      v9 = vextq_s8((int8x16_t)v6, v8, 0xEuLL).u64[0];
      v10 = vextq_s8((int8x16_t)v6, v8, 0xCuLL).u64[0];
      v11 = vextq_s8((int8x16_t)v6, v8, 0xAuLL).u64[0];
    }
    else
    {
      v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 2uLL).u64[0];
      v10 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      v11 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 6uLL).u64[0];
    }
    *a4 = v9;
    *(unint64_t *)((char *)a4 + 2 * a3) = v10;
    *(unint64_t *)((char *)a4 + 4 * a3) = v11;
  }
  *(unint64_t *)((char *)a4 + 6 * a3) = v6.u64[1];
  return result;
}

uint64_t sub_1C9794C74(uint64_t result, int8x16_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4;
  int8x16_t *v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  int16x8_t *v10;
  int v11;
  uint16x8_t v12;
  uint16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  _OWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 2;
  if (v4 < 0)
  {
    v6 = 18 - result;
    if ((int)result >= 18)
      v6 = result - 18;
    v44 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1C9832CA0[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11)
    v5 = a2;
  v7 = a2[2 * (result > 0x11)];
  v8 = v5[1];
  v45[0] = v7;
  v45[1] = v8;
  v44.i16[7] = a2[-1].i16[7];
  if ((v4 & 0x1F) != 0)
  {
    v9 = 8;
    v10 = a4;
    v11 = v4;
    do
    {
      v12 = (uint16x8_t)vdupq_n_s16(32 - (v11 & 0x1Fu));
      v13 = (uint16x8_t)vdupq_n_s16(v11 & 0x1F);
      *v10 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v45 + 2 * (v11 >> 5) + 2), *(uint16x4_t *)v13.i8), *(uint16x4_t *)((char *)v45 + 2 * (v11 >> 5)), *(uint16x4_t *)v12.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v45 + 2 * (v11 >> 5) + 2), v13), *(uint16x8_t *)((char *)v45 + 2 * (v11 >> 5)), v12), 5uLL);
      v11 += v4;
      v10 = (int16x8_t *)((char *)v10 + 2 * a3);
      --v9;
    }
    while (v9);
    if (result < 0x12)
    {
      v14 = *(int16x8_t *)((char *)a4 + 2 * a3);
      v15 = *(int16x8_t *)((char *)a4 + 4 * a3);
      v16 = *(int16x8_t *)((char *)a4 + 6 * a3);
      v17 = *(int16x8_t *)((char *)a4 + 8 * a3);
      v18 = *(int16x8_t *)((char *)a4 + 10 * a3);
      v19 = *(int16x8_t *)((char *)a4 + 12 * a3);
      v20 = (int32x4_t)vtrn1q_s16(*a4, v14);
      v21 = (int32x4_t)vtrn2q_s16(*a4, v14);
      v22 = (int32x4_t)vtrn1q_s16(v15, v16);
      v23 = *(int16x8_t *)((char *)a4 + 14 * a3);
      v24 = (int32x4_t)vtrn2q_s16(v15, v16);
      v25 = (int64x2_t)vtrn1q_s32(v20, v22);
      v26 = (int64x2_t)vtrn2q_s32(v20, v22);
      v27 = (int64x2_t)vtrn1q_s32(v21, v24);
      v28 = (int64x2_t)vtrn2q_s32(v21, v24);
      v29 = (int32x4_t)vtrn1q_s16(v17, v18);
      v30 = (int32x4_t)vtrn2q_s16(v17, v18);
      v31 = (int32x4_t)vtrn1q_s16(v19, v23);
      v32 = (int32x4_t)vtrn2q_s16(v19, v23);
      v33 = (int64x2_t)vtrn1q_s32(v29, v31);
      v34 = (int64x2_t)vtrn2q_s32(v29, v31);
      v35 = (int64x2_t)vtrn1q_s32(v30, v32);
      v36 = (int64x2_t)vtrn2q_s32(v30, v32);
      *(int64x2_t *)a4 = vzip1q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 2 * a3) = vzip1q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 4 * a3) = vzip1q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 6 * a3) = vzip1q_s64(v28, v36);
      *(int64x2_t *)((char *)a4 + 8 * a3) = vzip2q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 10 * a3) = vzip2q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 12 * a3) = vzip2q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 14 * a3) = vzip2q_s64(v28, v36);
    }
  }
  else
  {
    if (v4 < 0)
    {
      v8 = v44;
      v37 = vextq_s8(v44, v7, 0xEuLL);
      v38 = vextq_s8(v44, v7, 0xCuLL);
      v39 = vextq_s8(v44, v7, 0xAuLL);
      v40 = vextq_s8(v44, v7, 8uLL);
      v41 = vextq_s8(v44, v7, 6uLL);
      v42 = vextq_s8(v44, v7, 4uLL);
      v43 = vextq_s8(v44, v7, 2uLL);
    }
    else
    {
      v37 = vextq_s8(v7, v8, 2uLL);
      v38 = vextq_s8(v7, v8, 4uLL);
      v39 = vextq_s8(v7, v8, 6uLL);
      v40 = vextq_s8(v7, v8, 8uLL);
      v41 = vextq_s8(v7, v8, 0xAuLL);
      v42 = vextq_s8(v7, v8, 0xCuLL);
      v43 = vextq_s8(v7, v8, 0xEuLL);
    }
    *a4 = (int16x8_t)v37;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v38;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v39;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v40;
    *(int8x16_t *)((char *)a4 + 8 * a3) = v41;
    *(int8x16_t *)((char *)a4 + 10 * a3) = v42;
    *(int8x16_t *)((char *)a4 + 12 * a3) = v43;
    *(int8x16_t *)((char *)a4 + 14 * a3) = v8;
  }
  return result;
}

uint64_t sub_1C9794EFC(uint64_t result, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int16x8_t *v10;
  uint64_t v11;
  int v12;
  uint16x8_t v13;
  uint16x8_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int16x8_t v20;
  int16x8_t v21;
  __int128 v22;
  __int128 v23;
  __int8 *v24;
  uint64_t v25;
  char v26;
  char v27;
  int16x8_t *v28;
  int16x8_t *v29;
  uint64_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint64_t v33;
  char v34;
  char v35;
  int16x8_t *v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  __int128 v60;
  _OWORD v61[3];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  if (result <= 0x11)
    v5 = a2;
  else
    v5 = a2 + 4;
  v6 = v61;
  v7 = v5[1];
  v8 = v5[2];
  v60 = a2[4 * (unint64_t)(result > 0x11)];
  v61[0] = v7;
  v9 = v5[3];
  v61[1] = v8;
  v61[2] = v9;
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v25 = 0;
      v26 = 1;
      LODWORD(result) = v4;
      do
      {
        v27 = v26;
        v28 = &a4[v25];
        v29 = v28;
        v30 = 8;
        do
        {
          v31 = (uint16x8_t)vdupq_n_s16(32 - (result & 0x1F));
          v32 = (uint16x8_t)vdupq_n_s16(result & 0x1F);
          *v29 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v61[-1] + 2 * ((int)result >> 5) + 2), *(uint16x4_t *)v32.i8), *(uint16x4_t *)((char *)&v61[-1] + 2 * ((int)result >> 5)), *(uint16x4_t *)v31.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v61[-1] + 2 * ((int)result >> 5) + 2), v32), *(uint16x8_t *)((char *)&v61[-1] + 2 * ((int)result >> 5)), v31), 5uLL);
          v29[a3] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v61 + 2 * ((int)result >> 5) + 2), *(uint16x4_t *)v32.i8), *(uint16x4_t *)((char *)v61 + 2 * ((int)result >> 5)), *(uint16x4_t *)v31.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v61 + 2 * ((int)result >> 5) + 2), v32), *(uint16x8_t *)((char *)v61 + 2 * ((int)result >> 5)), v31), 5uLL);
          result = (result + v4);
          v29 = (int16x8_t *)((char *)v29 + 2 * a3);
          --v30;
        }
        while (v30);
        v33 = 0;
        v34 = 1;
        do
        {
          v35 = v34;
          v36 = (int16x8_t *)((char *)v28 + 2 * v33 * a3);
          v37 = *(int16x8_t *)((char *)v36 + 2 * a3);
          v38 = *(int16x8_t *)((char *)v36 + 4 * a3);
          v39 = *(int16x8_t *)((char *)v36 + 6 * a3);
          v40 = *(int16x8_t *)((char *)v36 + 8 * a3);
          v41 = *(int16x8_t *)((char *)v36 + 10 * a3);
          v42 = *(int16x8_t *)((char *)v36 + 12 * a3);
          v43 = (int32x4_t)vtrn1q_s16(*v36, v37);
          v44 = (int32x4_t)vtrn2q_s16(*v36, v37);
          v45 = (int32x4_t)vtrn1q_s16(v38, v39);
          v46 = *(int16x8_t *)((char *)v36 + 14 * a3);
          v47 = (int32x4_t)vtrn2q_s16(v38, v39);
          v48 = (int64x2_t)vtrn1q_s32(v43, v45);
          v49 = (int64x2_t)vtrn2q_s32(v43, v45);
          v50 = (int64x2_t)vtrn1q_s32(v44, v47);
          v51 = (int64x2_t)vtrn2q_s32(v44, v47);
          v52 = (int32x4_t)vtrn1q_s16(v40, v41);
          v53 = (int32x4_t)vtrn2q_s16(v40, v41);
          v54 = (int32x4_t)vtrn1q_s16(v42, v46);
          v55 = (int32x4_t)vtrn2q_s16(v42, v46);
          v56 = (int64x2_t)vtrn1q_s32(v52, v54);
          v57 = (int64x2_t)vtrn2q_s32(v52, v54);
          v58 = (int64x2_t)vtrn1q_s32(v53, v55);
          v59 = (int64x2_t)vtrn2q_s32(v53, v55);
          *(int64x2_t *)v36 = vzip1q_s64(v48, v56);
          *(int64x2_t *)((char *)v36 + 2 * a3) = vzip1q_s64(v50, v58);
          *(int64x2_t *)((char *)v36 + 4 * a3) = vzip1q_s64(v49, v57);
          *(int64x2_t *)((char *)v36 + 6 * a3) = vzip1q_s64(v51, v59);
          *(int64x2_t *)((char *)v36 + 8 * a3) = vzip2q_s64(v48, v56);
          *(int64x2_t *)((char *)v36 + 10 * a3) = vzip2q_s64(v50, v58);
          *(int64x2_t *)((char *)v36 + 12 * a3) = vzip2q_s64(v49, v57);
          *(int64x2_t *)((char *)v36 + 14 * a3) = vzip2q_s64(v51, v59);
          v33 = 8;
          v34 = 0;
        }
        while ((v35 & 1) != 0);
        v26 = 0;
        v25 = 1;
      }
      while ((v27 & 1) != 0);
    }
    else
    {
      v10 = a4 + 1;
      v11 = 16;
      v12 = v4;
      do
      {
        v13 = (uint16x8_t)vdupq_n_s16(32 - (v12 & 0x1Fu));
        v14 = (uint16x8_t)vdupq_n_s16(v12 & 0x1F);
        v10[-1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v61[-1] + 2 * (v12 >> 5) + 2), *(uint16x4_t *)v14.i8), *(uint16x4_t *)((char *)&v61[-1] + 2 * (v12 >> 5)), *(uint16x4_t *)v13.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v61[-1] + 2 * (v12 >> 5) + 2), v14), *(uint16x8_t *)((char *)&v61[-1] + 2 * (v12 >> 5)), v13), 5uLL);
        *v10 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v61 + 2 * (v12 >> 5) + 2), *(uint16x4_t *)v14.i8), *(uint16x4_t *)((char *)v61 + 2 * (v12 >> 5)), *(uint16x4_t *)v13.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v61 + 2 * (v12 >> 5) + 2), v14), *(uint16x8_t *)((char *)v61 + 2 * (v12 >> 5)), v13), 5uLL);
        v12 += v4;
        v10 = (int16x8_t *)((char *)v10 + 2 * a3);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v15 = v4 >> 5;
    v16 = 2 * v15;
    v17 = 2 * v15;
    v18 = 2 * v16;
    v19 = -2;
    do
    {
      v20 = *(int16x8_t *)((char *)v6 + v17 - 16);
      v21 = *(int16x8_t *)((char *)v6 + v17);
      v6 = (__int128 *)((char *)v6 + v18);
      v22 = *(v6 - 1);
      v23 = *v6;
      *a4 = v20;
      a4[1] = v21;
      v24 = &a4->i8[2 * a3];
      *(_OWORD *)v24 = v22;
      *((_OWORD *)v24 + 1) = v23;
      v19 += 2;
      a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    }
    while (v19 < 0xE);
  }
  return result;
}

uint64_t sub_1C979525C(uint64_t result, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int8x16_t *v14;
  uint64_t v15;
  unint64_t i;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int16x8_t *v20;
  uint64_t v21;
  int v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int v28;
  int16x8_t *v29;
  uint64_t v30;
  int16x8_t *v31;
  uint64_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int16x8_t *v47;
  uint64_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  unint64_t v51;
  int16x8_t *v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  BOOL v76;
  _BYTE v77[78];
  __int16 v78;
  _WORD v79[68];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 8;
  if (result <= 0x11)
    v6 = a2;
  else
    v6 = a2 + 8;
  if (v4 < 0)
  {
    v8 = 0;
    if (result > 0x11)
      v5 = a2;
    v9 = a2[8 * (unint64_t)(result < 0x12)];
    v10 = v5[1];
    v11 = v5[2];
    v12 = v5[3];
    if ((int)result >= 18)
      v13 = result - 18;
    else
      v13 = 18 - result;
    v14 = &xmmword_1C9832CA0[4 * (uint64_t)v13];
    v7 = 32;
    do
    {
      *(int8x16_t *)&v77[v8 * 16 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, v14[v8]);
      ++v8;
    }
    while (v8 != 4);
  }
  else
  {
    v7 = 64;
  }
  v15 = 0;
  for (i = 0; i < v7; i += 32)
  {
    v17 = &v77[v15 * 16];
    v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  v78 = *((_WORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v36 = 0;
      v37 = 4 * a3;
      v38 = 6 * a3;
      v39 = 3 * a3;
      v40 = 2 * a3;
      result = 32 * a3;
      v41 = a3;
      v42 = 12 * a3;
      v43 = 10 * a3;
      v44 = 8 * a3;
      v45 = v4;
      v46 = 14 * a3;
      do
      {
        v47 = a4;
        v48 = 8;
        do
        {
          v49 = (uint16x8_t)vdupq_n_s16(32 - (v45 & 0x1Fu));
          v50 = (uint16x8_t)vdupq_n_s16(v45 & 0x1F);
          *v47 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 1], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[v45 >> 5], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 1], v50), *(uint16x8_t *)&v79[v45 >> 5], v49), 5uLL);
          v47[v41] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 9], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[(v45 >> 5) + 8], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 9], v50), *(uint16x8_t *)&v79[(v45 >> 5) + 8], v49), 5uLL);
          *(int16x8_t *)((char *)v47 + result) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 17], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[(v45 >> 5) + 16], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 17], v50), *(uint16x8_t *)&v79[(v45 >> 5) + 16], v49), 5uLL);
          v47[v39] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 25], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[(v45 >> 5) + 24], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 25], v50), *(uint16x8_t *)&v79[(v45 >> 5) + 24], v49), 5uLL);
          v45 += v4;
          v47 = (int16x8_t *)((char *)v47 + v40);
          --v48;
        }
        while (v48);
        v51 = -8;
        v52 = a4;
        do
        {
          v53 = *(int16x8_t *)((char *)v52 + v40);
          v54 = *(int16x8_t *)((char *)v52 + v37);
          v55 = *(int16x8_t *)((char *)v52 + v38);
          v56 = *(int16x8_t *)((char *)v52 + v44);
          v57 = *(int16x8_t *)((char *)v52 + v43);
          v58 = *(int16x8_t *)((char *)v52 + v42);
          v59 = (int32x4_t)vtrn1q_s16(*v52, v53);
          v60 = (int32x4_t)vtrn2q_s16(*v52, v53);
          v61 = (int32x4_t)vtrn1q_s16(v54, v55);
          v62 = *(int16x8_t *)((char *)v52 + v46);
          v63 = (int32x4_t)vtrn2q_s16(v54, v55);
          v64 = (int64x2_t)vtrn1q_s32(v59, v61);
          v65 = (int64x2_t)vtrn2q_s32(v59, v61);
          v66 = (int64x2_t)vtrn1q_s32(v60, v63);
          v67 = (int64x2_t)vtrn2q_s32(v60, v63);
          v68 = (int32x4_t)vtrn1q_s16(v56, v57);
          v69 = (int32x4_t)vtrn2q_s16(v56, v57);
          v70 = (int32x4_t)vtrn1q_s16(v58, v62);
          v71 = (int32x4_t)vtrn2q_s16(v58, v62);
          v72 = (int64x2_t)vtrn1q_s32(v68, v70);
          v73 = (int64x2_t)vtrn2q_s32(v68, v70);
          v74 = (int64x2_t)vtrn1q_s32(v69, v71);
          v75 = (int64x2_t)vtrn2q_s32(v69, v71);
          *(int64x2_t *)v52 = vzip1q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + v40) = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + v37) = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + v38) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v52 + v44) = vzip2q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + v43) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + v42) = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + v46) = vzip2q_s64(v67, v75);
          v51 += 8;
          v52 = (int16x8_t *)((char *)v52 + v41 * 16);
        }
        while (v51 < 0x18);
        ++a4;
        v76 = v36 >= 0x18;
        v36 += 8;
      }
      while (!v76);
    }
    else
    {
      v20 = a4 + 2;
      v21 = 32;
      v22 = v4;
      do
      {
        v23 = (uint16x8_t)vdupq_n_s16(32 - (v22 & 0x1Fu));
        v24 = (uint16x8_t)vdupq_n_s16(v22 & 0x1F);
        v25 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v22 >> 5) + 9], *(uint16x4_t *)v24.i8), *(uint16x4_t *)&v79[(v22 >> 5) + 8], *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v22 >> 5) + 9], v24), *(uint16x8_t *)&v79[(v22 >> 5) + 8], v23), 5uLL);
        v20[-2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v22 >> 5) + 1], *(uint16x4_t *)v24.i8), *(uint16x4_t *)&v79[v22 >> 5], *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v22 >> 5) + 1], v24), *(uint16x8_t *)&v79[v22 >> 5], v23), 5uLL);
        v20[-1] = v25;
        v26 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v22 >> 5) + 17], *(uint16x4_t *)v24.i8), *(uint16x4_t *)&v79[(v22 >> 5) + 16], *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v22 >> 5) + 17], v24), *(uint16x8_t *)&v79[(v22 >> 5) + 16], v23), 5uLL);
        result = (uint64_t)&v79[(v22 >> 5) + 24];
        v27 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)(result + 2), *(uint16x4_t *)v24.i8), *(uint16x4_t *)result, *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)(result + 2), v24), *(uint16x8_t *)result, v23), 5uLL);
        *v20 = v26;
        v20[1] = v27;
        v22 += v4;
        v20 = (int16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v28 = v4 >> 5;
    v29 = a4 + 2;
    v30 = v28;
    v31 = (int16x8_t *)&v79[v30 + 24];
    v32 = 32;
    do
    {
      v33 = v31[-2];
      v34 = v31[-1];
      v35 = *v31;
      v29[-2] = v31[-3];
      v29[-1] = v33;
      *v29 = v34;
      v29[1] = v35;
      v31 = (int16x8_t *)((char *)v31 + v30 * 2);
      v29 = (int16x8_t *)((char *)v29 + 2 * a3);
      --v32;
    }
    while (v32);
  }
  return result;
}

uint64_t sub_1C97956A0(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  _WORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t i;
  _OWORD *v16;
  __int128 v17;
  int64x2_t v18;
  int64x2_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  _WORD *v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int8 *v38;
  unint64_t v39;
  int16x8_t *v40;
  int v41;
  uint64_t v42;
  int16x8_t *v43;
  uint64_t v44;
  char v45;
  _WORD *v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  int16x8_t *v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  _BYTE v79[142];
  __int16 v80;
  _WORD v81[132];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = v81;
  v5 = byte_1C98328DA[result];
  v6 = a2 + 256;
  if (result <= 0x11)
    v7 = a2;
  else
    v7 = a2 + 256;
  if (result > 0x11)
    v6 = a2;
  if (v5 < 0)
  {
    v9 = byte_1C98328DA[(int)result];
    if (v9 < 0)
    {
      v10 = 2 * byte_1C98328DA[(int)result];
      v11 = word_1C9832A00[(int)result - 11];
      v12 = 2 * v9 * v11 + 128;
      v8 = 64;
      do
      {
        v81[v10 - 1] = *(_WORD *)(v6 + 2 * ((v12 >> 8) - 1));
        v12 += v11;
        v13 = __CFADD__(v10++, 1);
      }
      while (!v13);
    }
    else
    {
      v8 = 64;
    }
  }
  else
  {
    v8 = 128;
  }
  v14 = 0;
  for (i = 0; i < v8; i += 32)
  {
    v16 = &v79[v14];
    v17 = *(_OWORD *)(v7 + v14 + 16);
    v16[9] = *(_OWORD *)(v7 + v14);
    v16[10] = v17;
    v18 = *(int64x2_t *)(v7 + v14 + 32);
    v19 = *(int64x2_t *)(v7 + v14 + 48);
    v16[11] = v18;
    v16[12] = v19;
    v14 += 64;
  }
  v80 = *(_WORD *)(a2 - 2);
  if ((v5 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v39 = 0;
      result = 32;
      v40 = a4;
      v41 = v5;
      do
      {
        v42 = 0;
        v43 = &a4[v39];
        do
        {
          v44 = 0;
          v18.i32[0] = v41 & 0x1F;
          v19.i32[0] = 32 - v18.i32[0];
          v45 = 1;
          do
          {
            v46 = &v81[v44 + ((uint64_t)v41 >> 5)];
            v47 = v44 + v42;
            *(int16x8_t *)((char *)v43 + 2 * v47 * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)v46, *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x8_t *)v46, *(uint16x4_t *)v19.i8, 0), 5uLL);
            v48 = v45;
            *(int16x8_t *)((char *)v43 + 2 * (v47 + 8) * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 9), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v46 + 8), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 9), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v46 + 1), *(uint16x4_t *)v19.i8, 0), 5uLL);
            *(int16x8_t *)((char *)v43 + 2 * (v47 + 16) * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 17), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v46 + 16), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 17), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v46 + 2), *(uint16x4_t *)v19.i8, 0), 5uLL);
            *(int16x8_t *)((char *)v43 + 2 * (v47 + 24) * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 25), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v46 + 24), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 25), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v46 + 3), *(uint16x4_t *)v19.i8, 0), 5uLL);
            v44 = 32;
            v45 = 0;
          }
          while ((v48 & 1) != 0);
          ++v42;
          v41 += v5;
        }
        while (v42 != 8);
        v49 = -8;
        v50 = v40;
        do
        {
          v51 = *(int16x8_t *)((char *)v50 + 2 * a3);
          v52 = *(int16x8_t *)((char *)v50 + 4 * a3);
          v53 = *(int16x8_t *)((char *)v50 + 6 * a3);
          v54 = *(int16x8_t *)((char *)v50 + 8 * a3);
          v55 = *(int16x8_t *)((char *)v50 + 10 * a3);
          v56 = *(int16x8_t *)((char *)v50 + 12 * a3);
          v57 = (int32x4_t)vtrn1q_s16(*v50, v51);
          v58 = (int32x4_t)vtrn2q_s16(*v50, v51);
          v59 = (int32x4_t)vtrn1q_s16(v52, v53);
          v60 = *(int16x8_t *)((char *)v50 + 14 * a3);
          v61 = (int32x4_t)vtrn2q_s16(v52, v53);
          v62 = (int64x2_t)vtrn1q_s32(v57, v59);
          v63 = (int64x2_t)vtrn2q_s32(v57, v59);
          v64 = (int64x2_t)vtrn1q_s32(v58, v61);
          v65 = (int64x2_t)vtrn2q_s32(v58, v61);
          v66 = (int32x4_t)vtrn1q_s16(v54, v55);
          v67 = (int32x4_t)vtrn2q_s16(v54, v55);
          v68 = (int32x4_t)vtrn1q_s16(v56, v60);
          v69 = (int32x4_t)vtrn2q_s16(v56, v60);
          v70 = (int64x2_t)vtrn1q_s32(v66, v68);
          v71 = (int64x2_t)vtrn2q_s32(v66, v68);
          v72 = (int64x2_t)vtrn1q_s32(v67, v69);
          v73 = (int64x2_t)vtrn2q_s32(v67, v69);
          v74 = vzip1q_s64(v62, v70);
          v75 = vzip2q_s64(v62, v70);
          v76 = vzip1q_s64(v64, v72);
          v77 = vzip2q_s64(v64, v72);
          v78 = vzip1q_s64(v63, v71);
          *v50 = (int16x8_t)v74;
          *(int64x2_t *)((char *)v50 + 2 * a3) = v76;
          v19 = vzip2q_s64(v63, v71);
          *(int64x2_t *)((char *)v50 + 4 * a3) = v78;
          *(int64x2_t *)((char *)v50 + 6 * a3) = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v50 + 8 * a3) = v75;
          *(int64x2_t *)((char *)v50 + 10 * a3) = v77;
          *(int64x2_t *)((char *)v50 + 12 * a3) = v19;
          v18 = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v50 + 14 * a3) = v18;
          v49 += 8;
          v50 += a3;
        }
        while (v49 < 0x38);
        ++v40;
        v13 = v39++ >= 7;
      }
      while (!v13);
    }
    else
    {
      v20 = 0;
      v21 = v5;
      do
      {
        v22 = 0;
        v18.i32[0] = v21 & 0x1F;
        v19.i32[0] = 32 - v18.i32[0];
        v23 = 1;
        do
        {
          v24 = &v81[v22 * 8 + ((uint64_t)v21 >> 5)];
          v25 = (uint64_t)a4[v22].i64 + 2 * v20 * a3;
          v26 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v24 + 9), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v24 + 8), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v24 + 9), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v24 + 1), *(uint16x4_t *)v19.i8, 0), 5uLL);
          *(int16x8_t *)v25 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v24 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)v24, *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v24 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x8_t *)v24, *(uint16x4_t *)v19.i8, 0), 5uLL);
          *(int16x8_t *)(v25 + 16) = v26;
          v27 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v24 + 17), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v24 + 16), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v24 + 17), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v24 + 2), *(uint16x4_t *)v19.i8, 0), 5uLL);
          v28 = *((uint16x8_t *)v24 + 3);
          v29 = *(uint16x8_t *)(v24 + 25);
          LOBYTE(v24) = v23;
          *(int16x8_t *)(v25 + 32) = v27;
          *(int16x8_t *)(v25 + 48) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)v28.i8, *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v29, *(uint16x4_t *)v18.i8, 0), v28, *(uint16x4_t *)v19.i8, 0), 5uLL);
          v22 = 4;
          v23 = 0;
        }
        while ((v24 & 1) != 0);
        ++v20;
        v21 += v5;
      }
      while (v20 != 64);
    }
  }
  else
  {
    v30 = 0;
    v31 = (uint64_t)v5 >> 5;
    do
    {
      v32 = 0;
      v33 = 1;
      v4 += v31;
      do
      {
        v34 = &v4[v32 * 8];
        v35 = v34[1];
        v36 = v34[2];
        v37 = v34[3];
        v38 = &a4[v32].i8[2 * v30 * a3];
        *(_OWORD *)v38 = *v34;
        *((_OWORD *)v38 + 1) = v35;
        LOBYTE(v34) = v33;
        *((_OWORD *)v38 + 2) = v36;
        *((_OWORD *)v38 + 3) = v37;
        v32 = 4;
        v33 = 0;
      }
      while ((v34 & 1) != 0);
      ++v30;
    }
    while (v30 != 64);
  }
  return result;
}

uint16x8_t sub_1C9795B20(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t result;

  v4 = (int32x4_t)vaddq_s16(a2[2], *a2);
  v5 = vpaddq_s32(v4, v4);
  result = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 3uLL);
  *a4 = result;
  *(uint16x8_t *)((char *)a4 + 2 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 4 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1C9795B5C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t v6;
  unint64_t v7;
  uint16x8_t *v8;

  v4 = (int32x4_t)vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  v5 = vpaddq_s32(v4, v4);
  v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 4uLL);
  v7 = -2;
  do
  {
    *a4 = v6;
    a4[1] = v6;
    v8 = (uint16x8_t *)((char *)a4 + 2 * a3);
    *v8 = v6;
    v8[1] = v6;
    v7 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v7 < 6);
}

uint16x8_t sub_1C9795BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  const float *v4;
  int16x8_t v5;
  int16x8_t v6;
  int32x4_t v7;
  int16x8_t v8;
  int16x8_t v9;
  const float *v10;
  int16x8_t v11;
  uint16x8_t result;

  v4 = (const float *)(a2 + 48);
  v5 = (int16x8_t)vld1q_dup_f32(v4);
  v6 = vmulq_s16(v5, (int16x8_t)xmmword_1C9862E00);
  v7 = *(int32x4_t *)a2;
  v8 = *(int16x8_t *)(a2 + 32);
  v9.i64[0] = 0x3000300030003;
  v9.i64[1] = 0x3000300030003;
  v10 = (const float *)(a2 + 16);
  v11 = (int16x8_t)vld1q_dup_f32(v10);
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vmlaq_s16(v6, v8, v9), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), (int16x8_t)xmmword_1C9862E10), v11), 3uLL);
  *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16(v8, v8), v6), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v7.i8, 1), (int16x8_t)xmmword_1C9862E10), vaddq_s16(v11, v11)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 4 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vaddq_s16(v6, v8), (int16x8_t)vdupq_laneq_s32(v7, 2), (int16x8_t)xmmword_1C9862E10), v11, v9), 3uLL);
  result = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(v6, (int16x8_t)vdupq_laneq_s32(v7, 3), (int16x8_t)xmmword_1C9862E10), vshlq_n_s16(v11, 2uLL)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1C9795C58(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const float *v5;
  int16x8_t v6;
  const float *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint16x8_t *v15;
  int16x8_t v16;
  const float *v17;
  int16x8_t v18;

  v4 = 0;
  v5 = (const float *)(a2 + 32);
  v6 = (int16x8_t)vld1q_dup_f32(v5);
  v7 = (const float *)(a2 + 96);
  v8 = (int16x8_t)vld1q_dup_f32(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862E00);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862E20);
  v11 = *(int16x8_t *)(a2 + 64);
  v12 = *(int16x8_t *)(a2 + 80);
  v13 = vshlq_n_s16(v11, 3uLL);
  v14 = vshlq_n_s16(v12, 3uLL);
  v15 = a4 + 1;
  v16 = v6;
  do
  {
    v17 = (const float *)(a2 + v4);
    v18 = (int16x8_t)vld1q_dup_f32(v17);
    v13 = vsubq_s16(v13, v11);
    v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1C9862E30), 4uLL);
    *v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1C9862E10), 4uLL);
    v16 = vaddq_s16(v16, v6);
    v4 += 4;
    v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 32);
}

__n128 sub_1C9795CF8(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 result;

  result = a2[2];
  *a4 = result;
  *(__n128 *)((char *)a4 + 2 * a3) = result;
  *(__n128 *)((char *)a4 + 4 * a3) = result;
  *(__n128 *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1C9795D20(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  _OWORD *v7;

  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = -2;
  do
  {
    *a4 = v4;
    a4[1] = v5;
    v7 = (_OWORD *)((char *)a4 + 2 * a3);
    *v7 = v4;
    v7[1] = v5;
    v6 += 2;
    a4 = (_OWORD *)((char *)a4 + 4 * a3);
  }
  while (v6 < 6);
}

void sub_1C9795D50(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = (_OWORD *)(a4 + 32);
  v9 = 16;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *v8 = v6;
    v8[1] = v7;
    v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1C9795D7C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = a2[16];
  v5 = a2[17];
  v6 = a2[18];
  v7 = a2[19];
  v8 = a2[20];
  v9 = a2[21];
  v10 = (_OWORD *)(a4 + 64);
  v11 = 32;
  v12 = a2[22];
  v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

float32x4_t sub_1C9795DB8(uint64_t a1, const float *a2, uint64_t a3, float32x4_t *a4)
{
  const float *v4;
  const float *v5;
  float32x4_t v6;
  float32x4_t v7;
  const float *v8;
  float32x4_t v9;
  float32x4_t result;

  v4 = a2 + 2;
  v5 = a2;
  v6 = vld1q_dup_f32(v5++);
  *a4 = v6;
  v7 = vld1q_dup_f32(v5);
  *(float32x4_t *)((char *)a4 + 2 * a3) = v7;
  v8 = a2 + 3;
  v9 = vld1q_dup_f32(v4);
  *(float32x4_t *)((char *)a4 + 4 * a3) = v9;
  result = vld1q_dup_f32(v8);
  *(float32x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

float32x4_t sub_1C9795DF8(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  const float *v4;
  unint64_t v5;
  const float *v6;
  float32x4_t result;
  float32x4_t v8;
  float32x4_t *v9;

  v4 = (const float *)(a2 + 4);
  v5 = -2;
  do
  {
    v6 = v4 - 1;
    result = vld1q_dup_f32(v6);
    v8 = vld1q_dup_f32(v4);
    *a4 = result;
    a4[1] = result;
    v9 = (float32x4_t *)((char *)a4 + 2 * a3);
    *v9 = v8;
    v9[1] = v8;
    v5 += 2;
    v4 += 2;
    a4 = (float32x4_t *)((char *)a4 + 4 * a3);
  }
  while (v5 < 6);
  return result;
}

float32x4_t sub_1C9795E38(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  float32x4_t *v5;
  const float *v6;
  float32x4_t result;

  v4 = 0;
  v5 = a4 + 2;
  do
  {
    v6 = (const float *)(a2 + v4);
    result = vld1q_dup_f32(v6);
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v4 += 4;
    v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

float32x4_t sub_1C9795E68(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  float32x4_t *v5;
  const float *v6;
  float32x4_t result;

  v4 = 0;
  v5 = a4 + 4;
  do
  {
    v6 = (const float *)(a2 + v4);
    result = vld1q_dup_f32(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 4;
    v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

uint64_t sub_1C9795EA0(uint64_t result, int8x16_t *a2, uint64_t a3, _OWORD *a4)
{
  int v4;
  int8x16_t *v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  char *v17;
  int32x4_t v18;
  int32x4_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 2;
  if (v4 < 0)
  {
    v6 = 18 - result;
    if ((int)result >= 18)
      v6 = result - 18;
    v27 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1C9832F20[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11)
    v5 = a2;
  v7 = a2[2 * (result > 0x11)];
  v8 = v5[1];
  v28[0] = v7;
  v28[1] = v8;
  v27.i32[3] = a2[-1].i32[3];
  if ((v4 & 0x1F) != 0)
  {
    v9.i64[0] = 0x20002000200020;
    v9.i64[1] = 0x20002000200020;
    v10 = vdupq_n_s16((2 * v4) & 0x1E);
    v11 = vdupq_n_s16((3 * v4) & 0x1F);
    v12 = v4 >> 3;
    v13 = vdupq_n_s16(4 * (v4 & 7u));
    v14 = vsubq_s16(v9, v13);
    v15 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 5)), vsubq_s16(v9, vdupq_n_s16(v4 & 0x1F))), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 5) + 4), (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v4 & 0x1F))), 5uLL);
    v16 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 4)), vsubq_s16(v9, v10)), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 4) + 4), v10), 5uLL);
    v17 = (char *)v28 + 4 * ((3 * v4) >> 5);
    v18 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v17, vsubq_s16(v9, v11)), *(int16x8_t *)(v17 + 4), v11), 5uLL);
    v19 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * v12), v14), *(int16x8_t *)((char *)v28 + 4 * v12 + 4), v13), 5uLL);
    if (result < 0x12)
    {
      v20 = (int64x2_t)vtrn1q_s32(v15, v16);
      v21 = (int64x2_t)vtrn2q_s32(v15, v16);
      v22 = (int64x2_t)vtrn1q_s32(v18, v19);
      v23 = (int64x2_t)vtrn2q_s32(v18, v19);
      v15 = (int32x4_t)vzip1q_s64(v20, v22);
      v18 = (int32x4_t)vzip2q_s64(v20, v22);
      v16 = (int32x4_t)vzip1q_s64(v21, v23);
      v19 = (int32x4_t)vzip2q_s64(v21, v23);
    }
    *a4 = v15;
    *(int32x4_t *)((char *)a4 + 2 * a3) = v16;
    *(int32x4_t *)((char *)a4 + 4 * a3) = v18;
    *(int32x4_t *)((char *)a4 + 6 * a3) = v19;
  }
  else
  {
    if (v4 < 0)
    {
      v8 = v27;
      v24 = vextq_s8(v27, v7, 0xCuLL);
      v25 = vextq_s8(v27, v7, 8uLL);
      v26 = vextq_s8(v27, v7, 4uLL);
    }
    else
    {
      v24 = vextq_s8(v7, v8, 4uLL);
      v25 = vextq_s8(v7, v8, 8uLL);
      v26 = vextq_s8(v7, v8, 0xCuLL);
    }
    *a4 = v24;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v25;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v26;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v8;
  }
  return result;
}

uint64_t sub_1C97960A8(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint16x8_t *v16;
  uint64_t v17;
  int16x8_t v18;
  int v19;
  int16x8_t v20;
  int16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _OWORD *v31;
  uint16x8_t v32;
  __int128 v33;
  __int8 *v34;
  uint64_t v35;
  int v36;
  char v37;
  int16x8_t v38;
  int v39;
  int v40;
  unint64_t v41;
  char v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  uint16x8_t *v51;
  char v52;
  char v53;
  _OWORD *v54;
  int32x4_t v55;
  char *v56;
  int32x4_t v57;
  int32x4_t v58;
  char *v59;
  int32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  _OWORD v65[2];
  int8x16_t v66;
  __int128 v67;
  _OWORD v68[3];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 4;
  if (v4 < 0)
  {
    if (result <= 0x11)
      v6 = a2 + 4;
    else
      v6 = a2;
    v7 = a2[4 * (unint64_t)(result < 0x12)];
    v8 = v6[1];
    if ((int)result >= 18)
      v9 = result - 18;
    else
      v9 = 18 - result;
    v10 = &xmmword_1C9832F20[4 * (uint64_t)v9];
    v11 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[2]);
    v12 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[3]);
    v65[1] = v11;
    v66 = v12;
  }
  if (result <= 0x11)
    v5 = a2;
  v13 = v5[1];
  v14 = v5[2];
  v67 = a2[4 * (unint64_t)(result > 0x11)];
  v68[0] = v13;
  v15 = v5[3];
  v68[1] = v14;
  v68[2] = v15;
  v66.i32[3] = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v35 = 0;
      v36 = 2 * v4;
      v37 = 1;
      v38.i64[0] = 0x20002000200020;
      v38.i64[1] = 0x20002000200020;
      v39 = v4;
      v40 = 3 * v4;
      do
      {
        v41 = 0;
        v42 = v37;
        v43 = vdupq_n_s16(v39 & 0x1F);
        v44 = vsubq_s16(v38, v43);
        v45 = vdupq_n_s16((v39 + v4) & 0x1F);
        v46 = vsubq_s16(v38, v45);
        result = (uint64_t)(v39 + v36) >> 5;
        v47 = vdupq_n_s16((v39 + v36) & 0x1F);
        v48 = vsubq_s16(v38, v47);
        v49 = vdupq_n_s16((v39 + v40) & 0x1F);
        v50 = vsubq_s16(v38, v49);
        v51 = &a4[v35];
        v52 = 1;
        do
        {
          v53 = v52;
          v54 = &v68[v41 / 4 - 1];
          v55 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5)), v44), *(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5) + 4), v43), 5uLL);
          v56 = (char *)v54 + 4 * ((uint64_t)(v39 + v4) >> 5);
          v57 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v56, v46), *(int16x8_t *)(v56 + 4), v45), 5uLL);
          v58 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * result), v48), *(int16x8_t *)((char *)v54 + 4 * result + 4), v47), 5uLL);
          v59 = (char *)v54 + 4 * ((uint64_t)(v39 + v40) >> 5);
          v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v59, v50), *(int16x8_t *)(v59 + 4), v49), 5uLL);
          v61 = (int64x2_t)vtrn1q_s32(v55, v57);
          v62 = (int64x2_t)vtrn2q_s32(v55, v57);
          v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)((char *)v51 + 2 * v41 * a3) = vzip1q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 1) * a3) = vzip1q_s64(v62, v64);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 2) * a3) = vzip2q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 3) * a3) = vzip2q_s64(v62, v64);
          v41 = 4;
          v52 = 0;
        }
        while ((v53 & 1) != 0);
        v37 = 0;
        v39 += 4 * v4;
        v35 = 1;
      }
      while ((v42 & 1) != 0);
    }
    else
    {
      v16 = a4 + 1;
      v17 = 8;
      v18.i64[0] = 0x20002000200020;
      v18.i64[1] = 0x20002000200020;
      v19 = v4;
      do
      {
        v20 = vdupq_n_s16(v19 & 0x1F);
        v21 = vsubq_s16(v18, v20);
        v22 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5) + 4), v20), 5uLL);
        v23 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v68 + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)v68 + 4 * (v19 >> 5) + 4), v20), 5uLL);
        v16[-1] = v22;
        *v16 = v23;
        v19 += v4;
        v16 = (uint16x8_t *)((char *)v16 + 2 * a3);
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    v24 = v4 >> 5;
    v25 = v4 >> 4;
    v26 = 2 * a3;
    v27 = 4 * v25;
    v28 = v27 + 64;
    v29 = 4 * v24 + 48;
    v30 = -2;
    v31 = v65;
    do
    {
      v32 = *(uint16x8_t *)((char *)v31 + v29 + 16);
      *a4 = *(uint16x8_t *)((char *)v31 + v29);
      a4[1] = v32;
      v33 = *(_OWORD *)((char *)v31 + v28);
      v34 = &a4->i8[v26];
      *(_OWORD *)v34 = *(_OWORD *)((char *)v31 + v28 - 16);
      *((_OWORD *)v34 + 1) = v33;
      v30 += 2;
      v31 = (_OWORD *)((char *)v31 + v27);
      a4 = (uint16x8_t *)((char *)a4 + v26 + v26);
    }
    while (v30 < 6);
  }
  return result;
}

unint64_t sub_1C97963AC(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int8x16_t *v14;
  uint64_t v15;
  unint64_t i;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint16x8_t *v20;
  uint64_t v21;
  int16x8_t v22;
  int v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int16x8_t v42;
  int v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t *v49;
  int16x8_t v50;
  int16x8_t *v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t *v54;
  int16x8_t *v55;
  unint64_t v56;
  int64x2_t *v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  BOOL v74;
  _BYTE v75[76];
  int v76;
  _QWORD v77[18];

  v77[17] = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 8;
  if (result <= 0x11)
    v6 = a2;
  else
    v6 = a2 + 8;
  if (v4 < 0)
  {
    v8 = 0;
    if (result > 0x11)
      v5 = a2;
    v9 = a2[8 * (unint64_t)(result < 0x12)];
    v10 = v5[1];
    v11 = v5[2];
    v12 = v5[3];
    if ((int)result >= 18)
      v13 = result - 18;
    else
      v13 = 18 - result;
    v14 = &xmmword_1C9832F20[4 * (uint64_t)v13];
    v7 = 16;
    do
    {
      *(int8x16_t *)&v75[v8 * 16 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, v14[v8]);
      ++v8;
    }
    while (v8 != 4);
  }
  else
  {
    v7 = 32;
  }
  v15 = 0;
  for (i = 0; i < v7; i += 16)
  {
    v17 = &v75[v15 * 16];
    v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  v76 = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v36 = 0;
      v37 = 2 * v4;
      v38 = 6 * a3;
      v39 = 8 * a3;
      v40 = 4 * a3;
      v41 = 2 * a3;
      v42.i64[0] = 0x20002000200020;
      v42.i64[1] = 0x20002000200020;
      v43 = v4;
      result = (3 * v4);
      do
      {
        v44 = vdupq_n_s16(v43 & 0x1F);
        v45 = vsubq_s16(v42, v44);
        v46 = vdupq_n_s16((v43 + v4) & 0x1F);
        v47 = vsubq_s16(v42, v46);
        v48 = vdupq_n_s16((v43 + v37) & 0x1F);
        v49 = (int16x8_t *)((char *)v77 + 4 * (v43 >> 5) + 4);
        v50 = vdupq_n_s16((v43 + result) & 0x1F);
        v51 = (int16x8_t *)((char *)v77 + 4 * ((v43 + (int)result) >> 5) + 4);
        v52 = vsubq_s16(v42, v48);
        v53 = vsubq_s16(v42, v50);
        v54 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v4) >> 5) + 4);
        v55 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v37) >> 5) + 4);
        v56 = -4;
        v57 = (int64x2_t *)a4;
        do
        {
          v58 = *(int16x8_t *)((char *)v49 - 4);
          v59 = *v49++;
          v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v58, v45), v59, v44), 5uLL);
          v61 = *(int16x8_t *)((char *)v54 - 4);
          v62 = *v54++;
          v63 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v61, v47), v62, v46), 5uLL);
          v64 = *(int16x8_t *)((char *)v55 - 4);
          v65 = *v55++;
          v66 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v64, v52), v65, v48), 5uLL);
          v67 = *(int16x8_t *)((char *)v51 - 4);
          v68 = *v51++;
          v69 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v67, v53), v68, v50), 5uLL);
          v70 = (int64x2_t)vtrn1q_s32(v60, v63);
          v71 = (int64x2_t)vtrn2q_s32(v60, v63);
          v72 = (int64x2_t)vtrn1q_s32(v66, v69);
          v73 = (int64x2_t)vtrn2q_s32(v66, v69);
          *v57 = vzip1q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v41) = vzip1q_s64(v71, v73);
          *(int64x2_t *)((char *)v57 + v40) = vzip2q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v38) = vzip2q_s64(v71, v73);
          v56 += 4;
          v57 = (int64x2_t *)((char *)v57 + v39);
        }
        while (v56 < 0xC);
        v43 += 4 * v4;
        a4 += 16;
        v74 = v36 >= 0xC;
        v36 += 4;
      }
      while (!v74);
    }
    else
    {
      v20 = (uint16x8_t *)(a4 + 32);
      v21 = 16;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      v23 = v4;
      do
      {
        v24 = vdupq_n_s16(v23 & 0x1F);
        v25 = vsubq_s16(v22, v24);
        v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v77 + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)v77 + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-1] = v26;
        result = (unint64_t)&v77[4] + 4 * (v23 >> 5);
        v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 4), v24), 5uLL);
        v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        *v20 = v27;
        v20[1] = v28;
        v23 += v4;
        v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    v29 = v4 >> 5;
    v30 = (_OWORD *)(a4 + 32);
    v31 = 4 * v29;
    v32 = (__int128 *)((char *)&v77[6] + v31);
    v33 = 16;
    do
    {
      v34 = *(v32 - 2);
      *(v30 - 2) = *(v32 - 3);
      *(v30 - 1) = v34;
      v35 = *v32;
      *v30 = *(v32 - 1);
      v30[1] = v35;
      v30 = (_OWORD *)((char *)v30 + 2 * a3);
      v32 = (__int128 *)((char *)v32 + v31);
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t sub_1C97966F8(uint64_t result, uint64_t a2, uint64_t a3, int64x2_t *a4)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t i;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int16x8_t v19;
  int v20;
  uint64_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint64_t v24;
  char v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int64x2_t *v34;
  uint64_t v35;
  int64x2_t v36;
  int64x2_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int16x8_t v44;
  int v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t *v51;
  int16x8_t v52;
  int16x8_t *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t *v56;
  int16x8_t *v57;
  unint64_t v58;
  int64x2_t *v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  _BYTE v76[140];
  _DWORD v77[67];
  _QWORD v78[34];

  v78[33] = *MEMORY[0x1E0C80C00];
  v4 = v78;
  v5 = byte_1C98328DA[result];
  v6 = a2 + 256;
  if (result <= 0x11)
    v7 = a2;
  else
    v7 = a2 + 256;
  if (result > 0x11)
    v6 = a2;
  if (v5 < 0)
  {
    v9 = byte_1C98328DA[(int)result];
    if (v9 < 0)
    {
      v10 = word_1C9832A00[(int)result - 11];
      v11 = v9 * v10 + 128;
      v8 = 32;
      do
      {
        v77[v9] = *(_DWORD *)(v6 + 4 * ((v11 >> 8) - 1));
        v11 += v10;
        v12 = __CFADD__(v9++, 1);
      }
      while (!v12);
    }
    else
    {
      v8 = 32;
    }
  }
  else
  {
    v8 = 64;
  }
  v13 = 0;
  for (i = 0; i < v8; i += 16)
  {
    v15 = &v76[v13];
    v16 = *(_OWORD *)(v7 + v13 + 16);
    v15[9] = *(_OWORD *)(v7 + v13);
    v15[10] = v16;
    v17 = *(_OWORD *)(v7 + v13 + 48);
    v15[11] = *(_OWORD *)(v7 + v13 + 32);
    v15[12] = v17;
    v13 += 64;
  }
  v77[0] = *(_DWORD *)(a2 - 4);
  if ((v5 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v38 = 0;
      v39 = 2 * v5;
      v40 = 6 * a3;
      v41 = 8 * a3;
      v42 = 4 * a3;
      v43 = 2 * a3;
      v44.i64[0] = 0x20002000200020;
      v44.i64[1] = 0x20002000200020;
      v45 = v5;
      result = (3 * v5);
      do
      {
        v46 = vdupq_n_s16(v45 & 0x1F);
        v47 = vsubq_s16(v44, v46);
        v48 = vdupq_n_s16((v45 + v5) & 0x1F);
        v49 = vsubq_s16(v44, v48);
        v50 = vdupq_n_s16((v45 + v39) & 0x1F);
        v51 = (int16x8_t *)((char *)v78 + 4 * (v45 >> 5) + 4);
        v52 = vdupq_n_s16((v45 + result) & 0x1F);
        v53 = (int16x8_t *)((char *)v78 + 4 * ((v45 + (int)result) >> 5) + 4);
        v54 = vsubq_s16(v44, v50);
        v55 = vsubq_s16(v44, v52);
        v56 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v5) >> 5) + 4);
        v57 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v39) >> 5) + 4);
        v58 = -4;
        v59 = a4;
        do
        {
          v60 = *(int16x8_t *)((char *)v51 - 4);
          v61 = *v51++;
          v62 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v60, v47), v61, v46), 5uLL);
          v63 = *(int16x8_t *)((char *)v56 - 4);
          v64 = *v56++;
          v65 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v63, v49), v64, v48), 5uLL);
          v66 = *(int16x8_t *)((char *)v57 - 4);
          v67 = *v57++;
          v68 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v66, v54), v67, v50), 5uLL);
          v69 = *(int16x8_t *)((char *)v53 - 4);
          v70 = *v53++;
          v71 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v69, v55), v70, v52), 5uLL);
          v72 = (int64x2_t)vtrn1q_s32(v62, v65);
          v73 = (int64x2_t)vtrn2q_s32(v62, v65);
          v74 = (int64x2_t)vtrn1q_s32(v68, v71);
          v75 = (int64x2_t)vtrn2q_s32(v68, v71);
          *v59 = vzip1q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v43) = vzip1q_s64(v73, v75);
          *(int64x2_t *)((char *)v59 + v42) = vzip2q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v40) = vzip2q_s64(v73, v75);
          v58 += 4;
          v59 = (int64x2_t *)((char *)v59 + v41);
        }
        while (v58 < 0x1C);
        v45 += 4 * v5;
        ++a4;
        v12 = v38 >= 0x1C;
        v38 += 4;
      }
      while (!v12);
    }
    else
    {
      v18 = 0;
      v19.i64[0] = 0x20002000200020;
      v19.i64[1] = 0x20002000200020;
      v20 = v5;
      do
      {
        v21 = 0;
        v22 = vdupq_n_s16(v20 & 0x1F);
        v23 = vsubq_s16(v19, v22);
        v24 = (uint64_t)a4->i64 + 2 * v18 * a3;
        v25 = 1;
        do
        {
          v26 = v25;
          v27 = &v78[v21];
          v28 = 2 * v21;
          v29 = (char *)v27 + 4 * ((uint64_t)v20 >> 5);
          *(uint16x8_t *)(v24 + v28) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v29, v23), *(int16x8_t *)(v29 + 4), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x10)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 1), v23), *(int16x8_t *)(v29 + 20), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x20)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 2), v23), *(int16x8_t *)(v29 + 36), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x30)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 3), v23), *(int16x8_t *)(v29 + 52), v22), 5uLL);
          v21 = 8;
          v25 = 0;
        }
        while ((v26 & 1) != 0);
        ++v18;
        v20 += v5;
      }
      while (v18 != 32);
    }
  }
  else
  {
    v30 = 0;
    v31 = (uint64_t)v5 >> 5;
    do
    {
      v32 = 0;
      v4 = (_QWORD *)((char *)v4 + 4 * v31);
      v33 = 1;
      do
      {
        v34 = (int64x2_t *)&v4[v32];
        v35 = 2 * v32;
        v36 = v34[1];
        *(int64x2_t *)((char *)a4 + v35) = *v34;
        *(int64x2_t *)((char *)a4 + (v35 | 0x10)) = v36;
        v37 = v34[3];
        *(int64x2_t *)((char *)a4 + (v35 | 0x20)) = v34[2];
        LOBYTE(v34) = v33;
        *(int64x2_t *)((char *)a4 + (v35 | 0x30)) = v37;
        v32 = 8;
        v33 = 0;
      }
      while ((v34 & 1) != 0);
      a4 = (int64x2_t *)((char *)a4 + 2 * a3);
      ++v30;
    }
    while (v30 != 32);
  }
  return result;
}

void sub_1C9796A7C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t v6;
  uint16x8_t *v7;
  uint64_t v8;

  v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  v5 = vpaddq_s32(v4, v4);
  v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 5uLL);
  v7 = a4 + 2;
  v8 = 16;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *v7 = v6;
    v7[1] = v6;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

void sub_1C9796AD8(uint64_t a1, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4;
  const float *v5;
  int16x8_t v6;
  const float *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint16x8_t *v21;
  int16x8_t v22;
  const float *v23;
  int16x8_t v24;

  v4 = 0;
  v5 = (const float *)(a2 + 4);
  v6 = (int16x8_t)vld1q_dup_f32(v5);
  v7 = (const float *)(a2 + 12);
  v8 = (int16x8_t)vld1q_dup_f32(v7);
  v9 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862E00);
  v10 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862E20);
  v11 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862E40);
  v12 = vmulq_s16(v8, (int16x8_t)xmmword_1C9862E50);
  v13 = *((int16x8_t *)a2 + 8);
  v14 = *((int16x8_t *)a2 + 9);
  v15 = *((int16x8_t *)a2 + 10);
  v16 = *((int16x8_t *)a2 + 11);
  v17 = vshlq_n_s16(v13, 4uLL);
  v18 = vshlq_n_s16(v14, 4uLL);
  v19 = vshlq_n_s16(v15, 4uLL);
  v20 = vshlq_n_s16(v16, 4uLL);
  v21 = a4 + 2;
  v22 = v6;
  do
  {
    v23 = (const float *)((char *)a2 + v4);
    v24 = (int16x8_t)vld1q_dup_f32(v23);
    v17 = vsubq_s16(v17, v13);
    v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1C9862E60), 5uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1C9862E70), 5uLL);
    v19 = vsubq_s16(v19, v15);
    v20 = vsubq_s16(v20, v16);
    *v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1C9862E30), 5uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1C9862E10), 5uLL);
    v22 = vaddq_s16(v22, v6);
    v4 += 4;
    v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 64);
}

void sub_1C9796BD8(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  uint16x8_t v6;
  uint16x8_t *v7;
  uint64_t v8;

  v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23]));
  v5 = vpaddq_s32(v4, v4);
  v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 6uLL);
  v7 = a4 + 4;
  v8 = 32;
  do
  {
    v7[-4] = v6;
    v7[-3] = v6;
    v7[-2] = v6;
    v7[-1] = v6;
    *v7 = v6;
    v7[1] = v6;
    v7[2] = v6;
    v7[3] = v6;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

void sub_1C9796C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const float *v5;
  const float *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v12;
  const float *v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  _OWORD v17[8];
  uint64_t v18;

  v4 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  v5 = (const float *)(a2 + 128);
  v6 = (const float *)(a2 + 384);
  v7 = (int16x8_t)vld1q_dup_f32(v6);
  v17[0] = vmulq_s16(v7, (int16x8_t)xmmword_1C9862E00);
  v17[1] = vmulq_s16(v7, (int16x8_t)xmmword_1C9862E20);
  v17[2] = vmulq_s16(v7, (int16x8_t)xmmword_1C9862E40);
  v17[3] = vmulq_s16(v7, (int16x8_t)xmmword_1C9862E50);
  v17[4] = vmulq_s16(v7, (int16x8_t)xmmword_1C9862E80);
  v17[5] = vmulq_s16(v7, (int16x8_t)xmmword_1C9862E90);
  v8 = vmulq_s16(v7, (int16x8_t)xmmword_1C9862EA0);
  v9 = vmulq_s16(v7, (int16x8_t)xmmword_1C9862EB0);
  v10 = (int16x8_t)vld1q_dup_f32(v5);
  v17[6] = v8;
  v17[7] = v9;
  v11 = v10;
  do
  {
    v12 = 0;
    v13 = (const float *)xmmword_1C9832BA0 + v4;
    v14 = (int16x8_t)vld1q_dup_f32(v13);
    v15 = (const float *)(a2 + 4 * v4);
    v16 = (int16x8_t)vld1q_dup_f32(v15);
    do
    {
      *(uint16x8_t *)(a4 + v12 * 16) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16(v11, (int16x8_t)xmmword_1C9832BA0[v12], v16), (int16x8_t)v17[v12]), *(int16x8_t *)(a2 + 256 + v12 * 16), v14), 6uLL);
      ++v12;
    }
    while (v12 != 8);
    v11 = vaddq_s16(v11, v10);
    ++v4;
    a4 += 2 * a3;
  }
  while (v4 != 32);
}

uint64_t sub_1C9796DA4(uint64_t result, int8x16_t *a2, uint64_t a3, _OWORD *a4)
{
  int v4;
  int8x16_t *v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  int v12;
  unsigned int v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int v16;
  unsigned int v17;
  uint16x8_t v18;
  uint16x8_t v19;
  int v20;
  unsigned int v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  _OWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = byte_1C98328DA[result];
  v5 = a2 + 2;
  if (v4 < 0)
  {
    v6 = 18 - result;
    if ((int)result >= 18)
      v6 = result - 18;
    v35 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1C9832F20[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11)
    v5 = a2;
  v7 = a2[2 * (result > 0x11)];
  v8 = v5[1];
  v36[0] = v7;
  v36[1] = v8;
  v35.i32[3] = a2[-1].i32[3];
  if ((v4 & 0x1F) != 0)
  {
    v9 = v4 >> 5;
    v10 = (uint16x8_t)vdupq_n_s16(32 - (v4 & 0x1Fu));
    v11 = (uint16x8_t)vdupq_n_s16(v4 & 0x1F);
    v12 = v4 >> 4;
    v13 = (2 * v4) & 0x1E;
    v14 = (uint16x8_t)vdupq_n_s16(32 - v13);
    v15 = (uint16x8_t)vdupq_n_s16(v13);
    v16 = (3 * v4) >> 5;
    v17 = (3 * v4) & 0x1F;
    v18 = (uint16x8_t)vdupq_n_s16(32 - v17);
    v19 = (uint16x8_t)vdupq_n_s16(v17);
    v20 = v4 >> 3;
    v21 = 4 * (v4 & 7);
    v22 = (uint16x8_t)vdupq_n_s16(32 - v21);
    v23 = (uint16x8_t)vdupq_n_s16(v21);
    v24 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v9 + 4), *(uint16x4_t *)v11.i8), *(uint16x4_t *)((char *)v36 + 4 * v9), *(uint16x4_t *)v10.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v9 + 4), v11), *(uint16x8_t *)((char *)v36 + 4 * v9), v10), 5uLL);
    v25 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v12 + 4), *(uint16x4_t *)v15.i8), *(uint16x4_t *)((char *)v36 + 4 * v12), *(uint16x4_t *)v14.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v12 + 4), v15), *(uint16x8_t *)((char *)v36 + 4 * v12), v14), 5uLL);
    v26 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v16 + 4), *(uint16x4_t *)v19.i8), *(uint16x4_t *)((char *)v36 + 4 * v16), *(uint16x4_t *)v18.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v16 + 4), v19), *(uint16x8_t *)((char *)v36 + 4 * v16), v18), 5uLL);
    v27 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v20 + 4), *(uint16x4_t *)v23.i8), *(uint16x4_t *)((char *)v36 + 4 * v20), *(uint16x4_t *)v22.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v20 + 4), v23), *(uint16x8_t *)((char *)v36 + 4 * v20), v22), 5uLL);
    if (result < 0x12)
    {
      v28 = (int64x2_t)vtrn1q_s32(v24, v25);
      v29 = (int64x2_t)vtrn2q_s32(v24, v25);
      v30 = (int64x2_t)vtrn1q_s32(v26, v27);
      v31 = (int64x2_t)vtrn2q_s32(v26, v27);
      v24 = (int32x4_t)vzip1q_s64(v28, v30);
      v26 = (int32x4_t)vzip2q_s64(v28, v30);
      v25 = (int32x4_t)vzip1q_s64(v29, v31);
      v27 = (int32x4_t)vzip2q_s64(v29, v31);
    }
    *a4 = v24;
    *(int32x4_t *)((char *)a4 + 2 * a3) = v25;
    *(int32x4_t *)((char *)a4 + 4 * a3) = v26;
    *(int32x4_t *)((char *)a4 + 6 * a3) = v27;
  }
  else
  {
    if (v4 < 0)
    {
      v8 = v35;
      v32 = vextq_s8(v35, v7, 0xCuLL);
      v33 = vextq_s8(v35, v7, 8uLL);
      v34 = vextq_s8(v35, v7, 4uLL);
    }
    else
    {
      v32 = vextq_s8(v7, v8, 4uLL);
      v33 = vextq_s8(v7, v8, 8uLL);
      v34 = vextq_s8(v7, v8, 0xCuLL);
    }
    *a4 = v32;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v33;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v34;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v8;
  }
  return result;
}

uint64_t sub_1C9796FE4(uint64_t result, _OWORD *a2, uint64_t a3, int16x8_t *a4, double a5, double a6, double a7, int8x16_t a8, uint16x4_t a9, uint16x4_t a10, uint16x4_t a11, uint16x4_t a12)
{
  int v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int8x16_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int16x8_t *v22;
  uint64_t v23;
  int v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _OWORD *v34;
  int16x8_t v35;
  __int128 v36;
  __int8 *v37;
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  int v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  int16x8_t *v47;
  char v48;
  _OWORD *v49;
  int32x4_t v50;
  int32x4_t v51;
  char *v52;
  int32x4_t v53;
  int32x4_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  _OWORD v59[2];
  int8x16_t v60;
  __int128 v61;
  _OWORD v62[3];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v12 = byte_1C98328DA[result];
  v13 = a2 + 4;
  if (v12 < 0)
  {
    if (result <= 0x11)
      v14 = a2 + 4;
    else
      v14 = a2;
    v15 = a2[4 * (unint64_t)(result < 0x12)];
    v16 = v14[1];
    if ((int)result >= 18)
      v17 = result - 18;
    else
      v17 = 18 - result;
    v18 = &xmmword_1C9832F20[4 * (uint64_t)v17];
    a8 = v18[3];
    v59[1] = vqtbl2q_s8(*(int8x16x2_t *)&v15, v18[2]);
    v60 = vqtbl2q_s8(*(int8x16x2_t *)&v15, a8);
  }
  if (result <= 0x11)
    v13 = a2;
  v19 = v13[1];
  v20 = v13[2];
  v61 = a2[4 * (unint64_t)(result > 0x11)];
  v62[0] = v19;
  v21 = v13[3];
  v62[1] = v20;
  v62[2] = v21;
  v60.i32[3] = *((_DWORD *)a2 - 1);
  if ((v12 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v38 = 0;
      v39 = 2 * v12;
      v40 = 1;
      v41 = v12;
      v42 = 3 * v12;
      do
      {
        v43 = 0;
        result = (uint64_t)(v41 + v12) >> 5;
        v44 = v40;
        v46 = 1;
        v47 = &a4[v38];
        do
        {
          v48 = v46;
          v49 = &v62[v43 / 4 - 1];
          LODWORD(v21) = v41 & 0x1F;
          LODWORD(v19) = 32 - v21;
          v50 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5) + 4), *(uint16x4_t *)&v21, 0), *(uint16x4_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5)), *(uint16x4_t *)&v19, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5) + 4), *(uint16x4_t *)&v21, 0), *(uint16x8_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5)), *(uint16x4_t *)&v19, 0), 5uLL);
          LODWORD(v20) = ((_BYTE)v41 + (_BYTE)v12) & 0x1F;
          a8.i32[0] = 32 - ((v41 + v12) & 0x1F);
          v51 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)((char *)v49 + 4 * result + 4), *(uint16x4_t *)&v20, 0), *(uint16x4_t *)((char *)v49 + 4 * result), *(uint16x4_t *)a8.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)((char *)v49 + 4 * result + 4), *(uint16x4_t *)&v20, 0), *(uint16x8_t *)((char *)v49 + 4 * result), *(uint16x4_t *)a8.i8, 0), 5uLL);
          v52 = (char *)v49 + 4 * ((uint64_t)(v41 + v39) >> 5);
          a9.i32[0] = ((_BYTE)v41 + (_BYTE)v39) & 0x1F;
          a10.i32[0] = 32 - ((v41 + v39) & 0x1F);
          v53 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v52 + 4), a9, 0), *(uint16x4_t *)v52, a10, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v52 + 4), a9, 0), *(uint16x8_t *)v52, a10, 0), 5uLL);
          v45 = (uint64_t)(v41 + v42) >> 5;
          a11.i32[0] = (v41 + v42) & 0x1F;
          a12.i32[0] = 32 - a11.i32[0];
          v54 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)((char *)v49 + 4 * v45 + 4), a11, 0), *(uint16x4_t *)((char *)v49 + 4 * v45), a12, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)((char *)v49 + 4 * v45 + 4), a11, 0), *(uint16x8_t *)((char *)v49 + 4 * v45), a12, 0), 5uLL);
          v55 = (int64x2_t)vtrn1q_s32(v50, v51);
          v56 = (int64x2_t)vtrn2q_s32(v50, v51);
          v57 = (int64x2_t)vtrn1q_s32(v53, v54);
          v58 = (int64x2_t)vtrn2q_s32(v53, v54);
          *(int64x2_t *)((char *)v47 + 2 * v43 * a3) = vzip1q_s64(v55, v57);
          *(int64x2_t *)((char *)v47 + 2 * (v43 | 1) * a3) = vzip1q_s64(v56, v58);
          *(int64x2_t *)((char *)v47 + 2 * (v43 | 2) * a3) = vzip2q_s64(v55, v57);
          *(int64x2_t *)((char *)v47 + 2 * (v43 | 3) * a3) = vzip2q_s64(v56, v58);
          v43 = 4;
          v46 = 0;
        }
        while ((v48 & 1) != 0);
        v40 = 0;
        v41 += 4 * v12;
        v38 = 1;
      }
      while ((v44 & 1) != 0);
    }
    else
    {
      v22 = a4 + 1;
      v23 = 8;
      v24 = v12;
      do
      {
        v25 = (uint16x8_t)vdupq_n_s16(32 - (v24 & 0x1Fu));
        v26 = (uint16x8_t)vdupq_n_s16(v24 & 0x1F);
        v22[-1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v62[-1] + 4 * (v24 >> 5) + 4), *(uint16x4_t *)v26.i8), *(uint16x4_t *)((char *)&v62[-1] + 4 * (v24 >> 5)), *(uint16x4_t *)v25.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v62[-1] + 4 * (v24 >> 5) + 4), v26), *(uint16x8_t *)((char *)&v62[-1] + 4 * (v24 >> 5)), v25), 5uLL);
        *v22 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v62 + 4 * (v24 >> 5) + 4), *(uint16x4_t *)v26.i8), *(uint16x4_t *)((char *)v62 + 4 * (v24 >> 5)), *(uint16x4_t *)v25.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v62 + 4 * (v24 >> 5) + 4), v26), *(uint16x8_t *)((char *)v62 + 4 * (v24 >> 5)), v25), 5uLL);
        v24 += v12;
        v22 = (int16x8_t *)((char *)v22 + 2 * a3);
        --v23;
      }
      while (v23);
    }
  }
  else
  {
    v27 = v12 >> 5;
    v28 = v12 >> 4;
    v29 = 2 * a3;
    v30 = 4 * v28;
    v31 = v30 + 64;
    v32 = 4 * v27 + 48;
    v33 = -2;
    v34 = v59;
    do
    {
      v35 = *(int16x8_t *)((char *)v34 + v32 + 16);
      *a4 = *(int16x8_t *)((char *)v34 + v32);
      a4[1] = v35;
      v36 = *(_OWORD *)((char *)v34 + v31);
      v37 = &a4->i8[v29];
      *(_OWORD *)v37 = *(_OWORD *)((char *)v34 + v31 - 16);
      *((_OWORD *)v37 + 1) = v36;
      v33 += 2;
      v34 = (_OWORD *)((char *)v34 + v30);
      a4 = (int16x8_t *)((char *)a4 + v29 + v29);
    }
    while (v33 < 6);
  }
  return result;
}

unint64_t sub_1C9797350(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, __n128 a7, __n128 a8, __n128 a9, uint16x4_t a10, uint16x4_t a11, uint16x4_t a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int8x16_t *v20;
  uint64_t v21;
  unint64_t i;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int16x8_t *v27;
  uint64_t v28;
  int v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 *v38;
  int v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint16x8_t *v49;
  uint16x8_t *v50;
  unint64_t v51;
  int64x2_t *v52;
  uint16x8_t *v53;
  uint16x8_t *v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int32x4_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int32x4_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int32x4_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  int32x4_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  BOOL v71;
  _BYTE v72[76];
  int v73;
  _QWORD v74[18];

  v74[17] = *MEMORY[0x1E0C80C00];
  v12 = byte_1C98328DA[result];
  v13 = a2 + 128;
  if (result <= 0x11)
    v14 = a2;
  else
    v14 = a2 + 128;
  if (v12 < 0)
  {
    v16 = 0;
    if (result > 0x11)
      v13 = a2;
    v17 = *(_OWORD *)(a2 + ((unint64_t)(result < 0x12) << 7));
    v18 = *(_OWORD *)(v13 + 16);
    a7 = *(__n128 *)(v13 + 32);
    a8 = *(__n128 *)(v13 + 48);
    if ((int)result >= 18)
      v19 = result - 18;
    else
      v19 = 18 - result;
    v20 = &xmmword_1C9832F20[4 * (uint64_t)v19];
    v15 = 16;
    do
    {
      a9 = (__n128)vqtbl4q_s8(*(int8x16x4_t *)(&a7 - 2), v20[v16]);
      *(__n128 *)&v72[v16 * 16 + 16] = a9;
      ++v16;
    }
    while (v16 != 4);
  }
  else
  {
    v15 = 32;
  }
  v21 = 0;
  for (i = 0; i < v15; i += 16)
  {
    v23 = &v72[v21];
    v24 = *(_OWORD *)(v14 + v21 + 16);
    v23[5] = *(_OWORD *)(v14 + v21);
    v23[6] = v24;
    v25 = *(_OWORD *)(v14 + v21 + 32);
    v26 = *(_OWORD *)(v14 + v21 + 48);
    v23[7] = v25;
    v23[8] = v26;
    v21 += 64;
  }
  v73 = *(_DWORD *)(a2 - 4);
  if ((v12 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v42 = 0;
      v43 = 2 * v12;
      v44 = 6 * a3;
      v45 = 8 * a3;
      v46 = 4 * a3;
      v47 = 2 * a3;
      LODWORD(result) = v12;
      v48 = 3 * v12;
      do
      {
        v49 = (uint16x8_t *)((char *)v74 + 4 * ((int)result >> 5) + 4);
        v50 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v48) >> 5) + 4);
        v51 = -4;
        v52 = (int64x2_t *)a4;
        v53 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v12) >> 5) + 4);
        v54 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v43) >> 5) + 4);
        do
        {
          v55 = *(uint16x8_t *)((char *)v49 - 4);
          v56 = *v49++;
          LODWORD(v25) = result & 0x1F;
          LODWORD(v26) = 32 - v25;
          v57 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v56.i8, *(uint16x4_t *)&v25, 0), *(uint16x4_t *)v55.i8, *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v56, *(uint16x4_t *)&v25, 0), v55, *(uint16x4_t *)&v26, 0), 5uLL);
          v58 = *(uint16x8_t *)((char *)v53 - 4);
          v59 = *v53++;
          a7.n128_u32[0] = (result + v12) & 0x1F;
          a8.n128_u32[0] = 32 - a7.n128_u32[0];
          v60 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v59.i8, (uint16x4_t)a7.n128_u64[0], 0), *(uint16x4_t *)v58.i8, (uint16x4_t)a8.n128_u64[0], 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v59, (uint16x4_t)a7.n128_u64[0], 0), v58, (uint16x4_t)a8.n128_u64[0], 0), 5uLL);
          v61 = *(uint16x8_t *)((char *)v54 - 4);
          v62 = *v54++;
          a9.n128_u32[0] = (result + v43) & 0x1F;
          a10.i32[0] = 32 - a9.n128_u32[0];
          v63 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)a9.n128_u64[0], 0), *(uint16x4_t *)v61.i8, a10, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v62, (uint16x4_t)a9.n128_u64[0], 0), v61, a10, 0), 5uLL);
          v64 = *(uint16x8_t *)((char *)v50 - 4);
          v65 = *v50++;
          a11.i32[0] = (result + v48) & 0x1F;
          a12.i32[0] = 32 - a11.i32[0];
          v66 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v65.i8, a11, 0), *(uint16x4_t *)v64.i8, a12, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v65, a11, 0), v64, a12, 0), 5uLL);
          v67 = (int64x2_t)vtrn1q_s32(v57, v60);
          v68 = (int64x2_t)vtrn2q_s32(v57, v60);
          v69 = (int64x2_t)vtrn1q_s32(v63, v66);
          v70 = (int64x2_t)vtrn2q_s32(v63, v66);
          *v52 = vzip1q_s64(v67, v69);
          *(int64x2_t *)((char *)v52 + v47) = vzip1q_s64(v68, v70);
          *(int64x2_t *)((char *)v52 + v46) = vzip2q_s64(v67, v69);
          *(int64x2_t *)((char *)v52 + v44) = vzip2q_s64(v68, v70);
          v51 += 4;
          v52 = (int64x2_t *)((char *)v52 + v45);
        }
        while (v51 < 0xC);
        result = (result + 4 * v12);
        a4 += 16;
        v71 = v42 >= 0xC;
        v42 += 4;
      }
      while (!v71);
    }
    else
    {
      v27 = (int16x8_t *)(a4 + 32);
      v28 = 16;
      v29 = v12;
      do
      {
        v30 = (uint16x8_t)vdupq_n_s16(32 - (v29 & 0x1Fu));
        v31 = (uint16x8_t)vdupq_n_s16(v29 & 0x1F);
        v32 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v74[2] + 4 * (v29 >> 5) + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)((char *)&v74[2] + 4 * (v29 >> 5)), *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v74[2] + 4 * (v29 >> 5) + 4), v31), *(uint16x8_t *)((char *)&v74[2] + 4 * (v29 >> 5)), v30), 5uLL);
        v27[-2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v74 + 4 * (v29 >> 5) + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)((char *)v74 + 4 * (v29 >> 5)), *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v74 + 4 * (v29 >> 5) + 4), v31), *(uint16x8_t *)((char *)v74 + 4 * (v29 >> 5)), v30), 5uLL);
        v27[-1] = v32;
        v33 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v74[4] + 4 * (v29 >> 5) + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)((char *)&v74[4] + 4 * (v29 >> 5)), *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v74[4] + 4 * (v29 >> 5) + 4), v31), *(uint16x8_t *)((char *)&v74[4] + 4 * (v29 >> 5)), v30), 5uLL);
        result = (unint64_t)&v74[6] + 4 * (v29 >> 5);
        v34 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)(result + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)result, *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)(result + 4), v31), *(uint16x8_t *)result, v30), 5uLL);
        *v27 = v33;
        v27[1] = v34;
        v29 += v12;
        v27 = (int16x8_t *)((char *)v27 + 2 * a3);
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    v35 = v12 >> 5;
    v36 = (_OWORD *)(a4 + 32);
    v37 = 4 * v35;
    v38 = (__int128 *)((char *)&v74[6] + v37);
    v39 = 16;
    do
    {
      v40 = *(v38 - 2);
      *(v36 - 2) = *(v38 - 3);
      *(v36 - 1) = v40;
      v41 = *v38;
      *v36 = *(v38 - 1);
      v36[1] = v41;
      v36 = (_OWORD *)((char *)v36 + 2 * a3);
      v38 = (__int128 *)((char *)v38 + v37);
      --v39;
    }
    while (v39);
  }
  return result;
}

uint64_t sub_1C9797718(uint64_t result, uint64_t a2, uint64_t a3, int64x2_t *a4, double a5, double a6, uint16x4_t a7, uint16x4_t a8, uint16x4_t a9, uint16x4_t a10, uint16x4_t a11, uint16x4_t a12)
{
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t i;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int64x2_t *v39;
  uint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint16x8_t *v50;
  uint16x8_t *v51;
  unint64_t v52;
  int64x2_t *v53;
  uint16x8_t *v54;
  uint16x8_t *v55;
  uint16x8_t v56;
  uint16x8_t v57;
  int32x4_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  int32x4_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  int32x4_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  int32x4_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  _BYTE v72[140];
  _DWORD v73[67];
  _QWORD v74[34];

  v74[33] = *MEMORY[0x1E0C80C00];
  v12 = v74;
  v13 = byte_1C98328DA[result];
  v14 = a2 + 256;
  if (result <= 0x11)
    v15 = a2;
  else
    v15 = a2 + 256;
  if (result > 0x11)
    v14 = a2;
  if (v13 < 0)
  {
    v17 = byte_1C98328DA[(int)result];
    if (v17 < 0)
    {
      v18 = word_1C9832A00[(int)result - 11];
      v19 = v17 * v18 + 128;
      v16 = 32;
      do
      {
        v73[v17] = *(_DWORD *)(v14 + 4 * ((v19 >> 8) - 1));
        v19 += v18;
        v20 = __CFADD__(v17++, 1);
      }
      while (!v20);
    }
    else
    {
      v16 = 32;
    }
  }
  else
  {
    v16 = 64;
  }
  v21 = 0;
  for (i = 0; i < v16; i += 16)
  {
    v23 = &v72[v21];
    v24 = *(_OWORD *)(v15 + v21 + 16);
    v23[9] = *(_OWORD *)(v15 + v21);
    v23[10] = v24;
    v25 = *(_OWORD *)(v15 + v21 + 32);
    v26 = *(_OWORD *)(v15 + v21 + 48);
    v23[11] = v25;
    v23[12] = v26;
    v21 += 64;
  }
  v73[0] = *(_DWORD *)(a2 - 4);
  if ((v13 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      v43 = 0;
      v44 = 2 * v13;
      v45 = 6 * a3;
      v46 = 8 * a3;
      v47 = 4 * a3;
      v48 = 2 * a3;
      LODWORD(result) = v13;
      v49 = 3 * v13;
      do
      {
        v50 = (uint16x8_t *)((char *)v74 + 4 * ((int)result >> 5) + 4);
        v51 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v49) >> 5) + 4);
        v52 = -4;
        v53 = a4;
        v54 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v13) >> 5) + 4);
        v55 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v44) >> 5) + 4);
        do
        {
          v56 = *(uint16x8_t *)((char *)v50 - 4);
          v57 = *v50++;
          LODWORD(v25) = result & 0x1F;
          LODWORD(v26) = 32 - v25;
          v58 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v57.i8, *(uint16x4_t *)&v25, 0), *(uint16x4_t *)v56.i8, *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v57, *(uint16x4_t *)&v25, 0), v56, *(uint16x4_t *)&v26, 0), 5uLL);
          v59 = *(uint16x8_t *)((char *)v54 - 4);
          v60 = *v54++;
          a7.i32[0] = (result + v13) & 0x1F;
          a8.i32[0] = 32 - a7.i32[0];
          v61 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v60.i8, a7, 0), *(uint16x4_t *)v59.i8, a8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v60, a7, 0), v59, a8, 0), 5uLL);
          v62 = *(uint16x8_t *)((char *)v55 - 4);
          v63 = *v55++;
          a9.i32[0] = (result + v44) & 0x1F;
          a10.i32[0] = 32 - a9.i32[0];
          v64 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v63.i8, a9, 0), *(uint16x4_t *)v62.i8, a10, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v63, a9, 0), v62, a10, 0), 5uLL);
          v65 = *(uint16x8_t *)((char *)v51 - 4);
          v66 = *v51++;
          a11.i32[0] = (result + v49) & 0x1F;
          a12.i32[0] = 32 - a11.i32[0];
          v67 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v66.i8, a11, 0), *(uint16x4_t *)v65.i8, a12, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v66, a11, 0), v65, a12, 0), 5uLL);
          v68 = (int64x2_t)vtrn1q_s32(v58, v61);
          v69 = (int64x2_t)vtrn2q_s32(v58, v61);
          v70 = (int64x2_t)vtrn1q_s32(v64, v67);
          v71 = (int64x2_t)vtrn2q_s32(v64, v67);
          *v53 = vzip1q_s64(v68, v70);
          *(int64x2_t *)((char *)v53 + v48) = vzip1q_s64(v69, v71);
          *(int64x2_t *)((char *)v53 + v47) = vzip2q_s64(v68, v70);
          *(int64x2_t *)((char *)v53 + v45) = vzip2q_s64(v69, v71);
          v52 += 4;
          v53 = (int64x2_t *)((char *)v53 + v46);
        }
        while (v52 < 0x1C);
        result = (result + 4 * v13);
        ++a4;
        v20 = v43 >= 0x1C;
        v43 += 4;
      }
      while (!v20);
    }
    else
    {
      v27 = 0;
      v28 = v13;
      do
      {
        v29 = 0;
        LODWORD(v25) = v28 & 0x1F;
        LODWORD(v26) = 32 - v25;
        v30 = (uint64_t)a4->i64 + 2 * v27 * a3;
        v31 = 1;
        do
        {
          v32 = &v74[v29];
          v33 = 2 * v29;
          v34 = (char *)v32 + 4 * ((uint64_t)v28 >> 5);
          *(int16x8_t *)(v30 + v33) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 4), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)v34, *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 4), *(uint16x4_t *)&v25, 0), *(uint16x8_t *)v34, *(uint16x4_t *)&v26, 0), 5uLL);
          result = v31;
          *(int16x8_t *)(v30 + (v33 | 0x10)) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 20), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)(v34 + 16), *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 20), *(uint16x4_t *)&v25, 0), *((uint16x8_t *)v34 + 1), *(uint16x4_t *)&v26, 0), 5uLL);
          *(int16x8_t *)(v30 + (v33 | 0x20)) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 36), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)(v34 + 32), *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 36), *(uint16x4_t *)&v25, 0), *((uint16x8_t *)v34 + 2), *(uint16x4_t *)&v26, 0), 5uLL);
          *(int16x8_t *)(v30 + (v33 | 0x30)) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 52), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)(v34 + 48), *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 52), *(uint16x4_t *)&v25, 0), *((uint16x8_t *)v34 + 3), *(uint16x4_t *)&v26, 0), 5uLL);
          v29 = 8;
          v31 = 0;
        }
        while ((result & 1) != 0);
        ++v27;
        v28 += v13;
      }
      while (v27 != 32);
    }
  }
  else
  {
    v35 = 0;
    v36 = (uint64_t)v13 >> 5;
    do
    {
      v37 = 0;
      v12 = (_QWORD *)((char *)v12 + 4 * v36);
      v38 = 1;
      do
      {
        v39 = (int64x2_t *)&v12[v37];
        v40 = 2 * v37;
        v41 = v39[1];
        *(int64x2_t *)((char *)a4 + v40) = *v39;
        *(int64x2_t *)((char *)a4 + (v40 | 0x10)) = v41;
        v42 = v39[3];
        *(int64x2_t *)((char *)a4 + (v40 | 0x20)) = v39[2];
        LOBYTE(v39) = v38;
        *(int64x2_t *)((char *)a4 + (v40 | 0x30)) = v42;
        v37 = 8;
        v38 = 0;
      }
      while ((v39 & 1) != 0);
      a4 = (int64x2_t *)((char *)a4 + 2 * a3);
      ++v35;
    }
    while (v35 != 32);
  }
  return result;
}

uint64_t sub_1C9797B10(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  int v3;
  int v4;
  _BOOL4 v5;
  int v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v3 = *a1;
  if (v3 != *a2)
    return 0;
  v4 = a1[1];
  if (v4 != a2[1])
    return 0;
  if (v3 == 15)
  {
    v5 = 1;
  }
  else
  {
    v7 = *((__int16 *)a1 + 2) - *((__int16 *)a2 + 2);
    if (v7 < 0)
      v7 = *((__int16 *)a2 + 2) - *((__int16 *)a1 + 2);
    if (v7 <= a3)
    {
      v8 = *((__int16 *)a1 + 3) - *((__int16 *)a2 + 3);
      if (v8 < 0)
        v8 = *((__int16 *)a2 + 3) - *((__int16 *)a1 + 3);
      v5 = v8 <= a3;
    }
    else
    {
      v5 = 0;
    }
  }
  if (v4 == 15)
  {
    v9 = 1;
  }
  else
  {
    v10 = *((__int16 *)a1 + 4) - *((__int16 *)a2 + 4);
    if (v10 < 0)
      v10 = *((__int16 *)a2 + 4) - *((__int16 *)a1 + 4);
    if (v10 <= a3)
    {
      v11 = *((__int16 *)a1 + 5) - *((__int16 *)a2 + 5);
      if (v11 < 0)
        v11 = *((__int16 *)a2 + 5) - *((__int16 *)a1 + 5);
      v9 = v11 <= a3;
    }
    else
    {
      v9 = 0;
    }
  }
  return v9 & v5;
}

uint64_t sub_1C9797BD0(unsigned __int8 *a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *((unsigned __int8 *)a2 + 8) >> 4;
  if (v2 != *a1)
    return 0;
  v3 = *((unsigned __int8 *)a2 + 9) >> 4;
  if (v3 != a1[1])
    return 0;
  if (v2 == 15)
    v4 = 1;
  else
    v4 = *a2 == *((unsigned __int16 *)a1 + 2) && a2[1] == *((unsigned __int16 *)a1 + 3);
  if (v3 == 15)
    v6 = 1;
  else
    v6 = a2[2] == *((unsigned __int16 *)a1 + 4) && a2[3] == *((unsigned __int16 *)a1 + 5);
  return v6 & v4;
}

uint64_t sub_1C9797C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v5 = a1 + 96;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = -1;
  *(_WORD *)(a1 + 124) = 1;
  v6 = a1 + 8;
  while (1)
  {
    result = *(_QWORD *)(v6 + v4);
    if (!result)
      break;
    result = sub_1C9797C78(result, a2);
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + v4) + 128);
    v9 = *(_DWORD *)(a1 + 120) + *(_DWORD *)(v8 + 24);
    *(_DWORD *)(a1 + 120) = v9;
    v10 = *(_QWORD *)(a1 + 96) + *(_QWORD *)v8;
    *(_QWORD *)(a1 + 96) = v10;
    v4 += 8;
    if (v4 == 32)
    {
      v11 = v9 + 12;
      *(_DWORD *)(a1 + 120) = v11;
      v12 = ((*(unsigned __int16 *)(a2 + 2 * *(__int16 *)(a1 + 124) + 152) * (unint64_t)v11) >> (8 * (*(_WORD *)(a1 + 124) == 0)))
          + v10;
      *(_QWORD *)(a1 + 112) = v12;
      goto LABEL_6;
    }
  }
  v12 = *(_QWORD *)(a1 + 112);
LABEL_6:
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(v13 + 16) > v12;
  if (v14)
    v13 = v5;
  *(_BYTE *)(a1 + 136) = v14;
  *(_QWORD *)(a1 + 128) = v13;
  return result;
}

uint64_t sub_1C9797D64(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)(result + 200);
  v2 = 85;
  do
  {
    *((_DWORD *)v1 - 14) = 0;
    *((_QWORD *)v1 - 10) = 0;
    *((_QWORD *)v1 - 9) = 0;
    *((_QWORD *)v1 - 8) = -1;
    *((_WORD *)v1 - 26) = 1;
    *((_QWORD *)v1 - 6) = v1 - 80;
    *((_QWORD *)v1 - 1) = 0;
    *v1 = 0;
    v1 += 144;
    --v2;
  }
  while (v2);
  *(_DWORD *)(result + 12656) = 0;
  return result;
}

uint64_t sub_1C9797DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_QWORD *)(a1 + 52) = 0;
  do
  {
    v3 = a1 + v2;
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 192) = 0;
    *(_BYTE *)(v3 + 200) = 0;
    *(_OWORD *)(v3 + 64) = 0uLL;
    *(_OWORD *)(v3 + 80) = 0uLL;
    v2 += 144;
    *(_QWORD *)(v3 + 96) = 0;
  }
  while (v2 != 12240);
  *(_QWORD *)(a1 + 12648) = 0;
  *(_DWORD *)(a1 + 12656) = 0;
  *(_QWORD *)(a1 + 12664) = 0;
  sub_1C9797D64(a1);
  return a1;
}

uint64_t sub_1C9797E1C(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1 + 144 * a2;
  *(_DWORD *)(v5 + 64) = a3;
  *(_DWORD *)(v5 + 68) = a2;
  v6 = (a2 + 1);
  if (a3 == 3)
  {
    v7 = a1 + 144 * a2;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 144 * a2 + 72;
    do
    {
      *(_QWORD *)(v9 + v8) = a1 + 144 * (int)v6 + 64;
      v6 = sub_1C9797E1C(a1);
      v8 += 8;
    }
    while (v8 != 32);
  }
  return v6;
}

uint64_t sub_1C9797EB8(uint64_t a1, int a2, int a3, signed int a4)
{
  uint64_t result;
  signed int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;

  if (!*(_BYTE *)a1 || *(_DWORD *)(a1 + 32) == a2 && *(_DWORD *)(a1 + 36) == a3 && *(_DWORD *)(a1 + 40) == a4)
    return 0;
  if (*(_DWORD *)(a1 + 8) > a4)
    return 4294954394;
  v6 = *(_DWORD *)(a1 + 4);
  if (v6 < a4)
    return 4294954394;
  v7 = *(_DWORD *)(a1 + 24);
  if (v7 > a2)
    return 4294954394;
  if (a4 + a2 > v7 + v6)
    return 4294954394;
  v8 = *(_DWORD *)(a1 + 28);
  if (v8 > a3 || a4 + a3 > v8 + v6)
    return 4294954394;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  v9 = __clz(__rbit32(a4)) & 0x1F;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = v9;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 16) - v9;
  v10 = sub_1C9797FA8(a1, a2, a3, a4, (int *)(a1 + 52));
  result = 0;
  *(_DWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 12648) = a1 + 4 * v10 + 12304;
  return result;
}

uint64_t sub_1C9797FA8(uint64_t result, int a2, int a3, int a4, int *a5)
{
  int v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v5 = 4 - *(_DWORD *)(result + 12);
  v6 = *(int *)(result + 4) >> 1;
  v7 = v6 >= a4 && v5 <= 3;
  if (v7)
  {
    v9 = result;
    LODWORD(result) = 0;
    v10 = *(_DWORD *)(v9 + 24);
    v11 = a3 - *(_DWORD *)(v9 + 28);
    v12 = a2 - v10;
    v13 = v5;
    do
    {
      v8 = dword_1C9833120[v13];
      result = result + v8 * ((v12 >= v6) | (2 * (v11 >= v6))) + 1;
      if (v6 >> 1 < a4)
        break;
      v11 %= v6;
      v12 %= v6;
      v6 >>= 1;
      v7 = v13++ < 3;
    }
    while (v7);
  }
  else
  {
    result = 0;
    v8 = 85;
  }
  if (a5)
    *a5 = v8;
  return result;
}

uint64_t sub_1C9798050(uint64_t result, char *a2, unsigned int *a3)
{
  int v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;

  if (*(_BYTE *)result)
  {
    v3 = *a2;
    if (v3 == 15)
    {
      v4 = 0;
      v5 = *((_DWORD *)a2 + 10);
      v6 = a2[1];
    }
    else
    {
      v6 = a2[1];
      v7 = *((_DWORD *)a2 + 10);
      if (v6 != 15)
        v7 += *(_DWORD *)(result + 12656);
      v4 = v6 != 15;
      if (v3 == 1)
        v8 = 1;
      else
        v8 = v3 + 1;
      v5 = v8 + v7;
    }
    v9 = (char)v6;
    if (v6 != 1)
      v9 = (char)v6 + 1;
    if (v6 == 15)
      v9 = 0;
    v20 = *(_OWORD *)a2;
    v10 = *(unsigned int *)(result + 52);
    if ((int)v10 >= 1)
    {
      v11 = 0;
      v12 = v9 + v5;
      v13 = *((_WORD *)a2 + 23);
      v14 = result + 144 * *(int *)(result + 56);
      v15 = 144 * v10;
      do
      {
        v16 = *a3++;
        v17 = v16 >> v4;
        v18 = v17 + *(unsigned __int16 *)(*(_QWORD *)(result + 12664) + 154) * (unint64_t)v12;
        v19 = v14 + v11;
        if (v18 < *(_QWORD *)(v14 + v11 + 136))
        {
          *(_OWORD *)(v19 + 104) = v20;
          *(_QWORD *)(v19 + 120) = v17;
          *(_QWORD *)(v19 + 128) = 0;
          *(_QWORD *)(v19 + 136) = v18;
          *(_DWORD *)(v19 + 144) = v12;
          *(_WORD *)(v19 + 148) = 1;
          *(_WORD *)(v19 + 150) = v13;
        }
        v11 += 144;
      }
      while (v15 != v11);
    }
  }
  return result;
}

uint64_t sub_1C979817C(uint64_t a1, int a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v8;

  if (!*(_BYTE *)a1)
    return 0;
  if (*(_DWORD *)(a1 + 8) > a4)
    return 0;
  v4 = *(_DWORD *)(a1 + 4);
  if (v4 < a4)
    return 0;
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 > a2)
    return 0;
  if (a4 + a2 > v5 + v4)
    return 0;
  v6 = *(_DWORD *)(a1 + 28);
  if (v6 > a3 || a4 + a3 > v6 + v4)
    return 0;
  v8 = a1 + 144 * (int)sub_1C9797FA8(a1, a2, a3, a4, 0);
  if (*(_QWORD *)(v8 + 192))
    return v8 + 64;
  else
    return 0;
}

void sub_1C979821C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, char a8)
{
  uint64_t (*v11)(uint64_t, uint64_t, int, int, uint64_t, uint64_t, uint64_t, uint64_t, int);
  uint64_t (*v12)(uint64_t, uint64_t, int, int, uint64_t, uint64_t, uint64_t, uint64_t, int);
  _DWORD *v13;
  int v14;
  _QWORD *(*v15)(_QWORD *, unsigned int, unsigned int, unsigned int, unsigned int, int, int, int, uint64_t, uint64_t, unsigned int *);
  uint64_t (*v16)();
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  int v41;

  *(_WORD *)(a1 + 12690) = 0;
  *(_QWORD *)(a1 + 12692) = -1;
  *(_QWORD *)(a1 + 12700) = -1;
  *(_QWORD *)(a1 + 12708) = 0x4000000040;
  *(_DWORD *)(a1 + 12716) = a4;
  *(_QWORD *)(a1 + 12736) = 0x40FFC00040FFC0;
  *(_DWORD *)(a1 + 12720) = a5;
  *(int32x2_t *)(a1 + 12744) = vdup_n_s32(0x40FFC0u);
  *(_BYTE *)(a1 + 12850) = a6;
  *(_BYTE *)(a1 + 12849) = a7;
  *(_BYTE *)(a1 + 12848) = a8;
  *(_QWORD *)a1 = a1 + 12752;
  *(_QWORD *)(a1 + 8) = a1 + 12800;
  *(_OWORD *)(a1 + 12856) = 0u;
  *(_QWORD *)(a1 + 12944) = a2;
  v11 = sub_1C9798924;
  *(_QWORD *)(a1 + 12952) = a3;
  *(_QWORD *)(a1 + 13072) = sub_1C9798924;
  *(_QWORD *)(a1 + 13080) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 4760) + 221))
    v12 = sub_1C9798AC0;
  else
    v12 = sub_1C9798924;
  *(_QWORD *)(a1 + 13056) = v12;
  *(_QWORD *)(a1 + 13064) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 4760) + 222))
    v11 = sub_1C9798C68;
  *(_QWORD *)(a1 + 13040) = v11;
  *(_QWORD *)(a1 + 13048) = 0;
  v13 = *(_DWORD **)(a2 + 4760);
  v14 = v13[19];
  if (v14 == 1)
    goto LABEL_10;
  if (v14 != 3)
  {
    if (v14 != 2)
    {
LABEL_11:
      v15 = sub_1C9798EB4;
      goto LABEL_13;
    }
    *(_WORD *)(a1 + 12848) = 256;
LABEL_10:
    *(_QWORD *)(a1 + 13040) = sub_1C9798C68;
    *(_QWORD *)(a1 + 13048) = 0;
    v13 = *(_DWORD **)(a2 + 4760);
    goto LABEL_11;
  }
  v15 = sub_1C979950C;
LABEL_13:
  *(_QWORD *)(a1 + 13168) = v15;
  *(_QWORD *)(a1 + 13176) = 0;
  v16 = nullsub_23;
  switch(v13[18])
  {
    case 1:
      *(_DWORD *)(a1 + 12724) = 16;
      v17 = 0x300000003;
      goto LABEL_17;
    case 2:
      *(_DWORD *)(a1 + 12724) = 5;
      v17 = 0x2000000003;
LABEL_17:
      *(_QWORD *)(a1 + 12728) = v17;
      v16 = (uint64_t (*)())sub_1C979A388;
      break;
    case 3:
      *(_QWORD *)(a1 + 13168) = sub_1C979950C;
      v16 = (uint64_t (*)())sub_1C9799EFC;
      break;
    case 4:
      break;
    default:
      v16 = (uint64_t (*)())sub_1C97997E0;
      break;
  }
  *(_QWORD *)(a1 + 13184) = v16;
  *(_QWORD *)(a1 + 13192) = 0;
  v18 = v13[20];
  if (v18)
  {
    if (v18 == 2)
    {
      *(_QWORD *)(a1 + 12716) = 0x100000001;
    }
    else if (v18 == 1)
    {
      *(_QWORD *)(a1 + 12716) = 0x800000008;
      v19 = sub_1C979A744;
      goto LABEL_26;
    }
    v19 = sub_1C9799EFC;
  }
  else
  {
    v19 = sub_1C979AA64;
  }
LABEL_26:
  *(_QWORD *)(a1 + 13200) = v19;
  *(_QWORD *)(a1 + 13208) = 0;
  *(_BYTE *)(a1 + 12688) = 0;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(unsigned __int8 *)(v20 + 2096);
  *(_BYTE *)(a1 + 12689) = v21;
  v22 = *(unsigned __int8 *)(v20 + 2117);
  if (v21 == 8)
  {
    *(_QWORD *)(a1 + 12960) = sub_1C979BAC4;
    *(_QWORD *)(a1 + 12968) = sub_1C979BB14;
    *(_QWORD *)(a1 + 12976) = sub_1C979BB64;
    *(_QWORD *)(a1 + 12984) = sub_1C979BBB4;
    *(_QWORD *)(a1 + 12992) = sub_1C979BC04;
    *(_QWORD *)(a1 + 13000) = sub_1C979BC54;
    *(_QWORD *)(a1 + 13008) = sub_1C979BCC0;
    *(_QWORD *)(a1 + 13016) = sub_1C979BD2C;
    *(_QWORD *)(a1 + 13024) = sub_1C979BD98;
    *(_QWORD *)(a1 + 13032) = sub_1C979BE04;
    *(_QWORD *)(a1 + 13088) = sub_1C979BE70;
    *(_QWORD *)(a1 + 13096) = sub_1C979BF14;
    *(_QWORD *)(a1 + 13104) = sub_1C979BFB8;
    *(_QWORD *)(a1 + 13112) = sub_1C979C05C;
    *(_QWORD *)(a1 + 13120) = sub_1C979C100;
    *(_QWORD *)(a1 + 13128) = sub_1C979C1A4;
    *(_QWORD *)(a1 + 13136) = sub_1C979C270;
    *(_QWORD *)(a1 + 13144) = sub_1C979C348;
    *(_QWORD *)(a1 + 13152) = sub_1C979C420;
    *(_QWORD *)(a1 + 13160) = sub_1C979C4F8;
    *(_QWORD *)(a1 + 13216) = sub_1C979C5D0;
    *(_QWORD *)(a1 + 13224) = sub_1C979C62C;
    *(_QWORD *)(a1 + 13232) = sub_1C979C688;
    *(_QWORD *)(a1 + 13240) = sub_1C979C6E4;
    v23 = (v22 * v22);
    v24 = *(_QWORD *)(a1 + 12872);
    v25 = *(_QWORD *)(a1 + 12880) - v24;
    if (v23 <= v25)
    {
      if (v23 < v25)
        *(_QWORD *)(a1 + 12880) = v24 + v23;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 12872), v23 - v25);
    }
    v29 = *(_QWORD *)(a1 + 12896);
    v30 = *(_QWORD *)(a1 + 12904) - v29;
    if (v23 <= v30)
    {
      if (v23 < v30)
        *(_QWORD *)(a1 + 12904) = v29 + v23;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 12896), v23 - v30);
    }
    v33 = *(_QWORD *)(a1 + 12920);
    v34 = *(_QWORD *)(a1 + 12928) - v33;
    if (v23 <= v34)
    {
      if (v23 < v34)
        *(_QWORD *)(a1 + 12928) = v33 + v23;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 12920), v23 - v34);
    }
    *(_QWORD *)(a1 + 12960) = sub_1C982BE14;
    *(_QWORD *)(a1 + 12968) = sub_1C982BE74;
    *(_QWORD *)(a1 + 12976) = sub_1C982BEF8;
    *(_QWORD *)(a1 + 12984) = sub_1C982BF7C;
    *(_QWORD *)(a1 + 12992) = sub_1C982BFD0;
    *(_QWORD *)(a1 + 13216) = sub_1C982C024;
    *(_QWORD *)(a1 + 13224) = sub_1C982C0C8;
    *(_QWORD *)(a1 + 13232) = sub_1C982C190;
    v37 = sub_1C982C2B0;
  }
  else
  {
    *(_QWORD *)(a1 + 12960) = sub_1C979ADA0;
    *(_QWORD *)(a1 + 12968) = sub_1C979ADFC;
    *(_QWORD *)(a1 + 12976) = sub_1C979AE58;
    *(_QWORD *)(a1 + 12984) = sub_1C979AEB4;
    *(_QWORD *)(a1 + 12992) = sub_1C979AF10;
    *(_QWORD *)(a1 + 13000) = sub_1C979AF6C;
    *(_QWORD *)(a1 + 13008) = sub_1C979AFE4;
    *(_QWORD *)(a1 + 13016) = sub_1C979B05C;
    *(_QWORD *)(a1 + 13024) = sub_1C979B0D4;
    *(_QWORD *)(a1 + 13032) = sub_1C979B14C;
    *(_QWORD *)(a1 + 13088) = sub_1C979B1C4;
    *(_QWORD *)(a1 + 13096) = sub_1C979B264;
    *(_QWORD *)(a1 + 13104) = sub_1C979B308;
    *(_QWORD *)(a1 + 13112) = sub_1C979B3AC;
    *(_QWORD *)(a1 + 13120) = sub_1C979B450;
    *(_QWORD *)(a1 + 13128) = sub_1C979B4F4;
    *(_QWORD *)(a1 + 13136) = sub_1C979B5C4;
    *(_QWORD *)(a1 + 13144) = sub_1C979B69C;
    *(_QWORD *)(a1 + 13152) = sub_1C979B774;
    *(_QWORD *)(a1 + 13160) = sub_1C979B84C;
    *(_QWORD *)(a1 + 13216) = sub_1C979B924;
    *(_QWORD *)(a1 + 13224) = sub_1C979B98C;
    *(_QWORD *)(a1 + 13232) = sub_1C979B9F4;
    *(_QWORD *)(a1 + 13240) = sub_1C979BA5C;
    v26 = (2 * v22 * v22);
    v27 = *(_QWORD *)(a1 + 12872);
    v28 = *(_QWORD *)(a1 + 12880) - v27;
    if (v26 <= v28)
    {
      if (v26 < v28)
        *(_QWORD *)(a1 + 12880) = v27 + v26;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 12872), v26 - v28);
    }
    v31 = *(_QWORD *)(a1 + 12896);
    v32 = *(_QWORD *)(a1 + 12904) - v31;
    if (v26 <= v32)
    {
      if (v26 < v32)
        *(_QWORD *)(a1 + 12904) = v31 + v26;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 12896), v26 - v32);
    }
    v35 = *(_QWORD *)(a1 + 12920);
    v36 = *(_QWORD *)(a1 + 12928) - v35;
    if (v26 <= v36)
    {
      if (v26 < v36)
        *(_QWORD *)(a1 + 12928) = v35 + v26;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 12920), v26 - v36);
    }
    *(_QWORD *)(a1 + 12960) = sub_1C982C3D0;
    *(_QWORD *)(a1 + 12968) = sub_1C982C460;
    *(_QWORD *)(a1 + 12976) = sub_1C982C4F0;
    *(_QWORD *)(a1 + 12984) = sub_1C982C550;
    *(_QWORD *)(a1 + 12992) = sub_1C982C5B0;
    *(_QWORD *)(a1 + 13216) = sub_1C982C638;
    *(_QWORD *)(a1 + 13224) = sub_1C982C6CC;
    *(_QWORD *)(a1 + 13232) = sub_1C982C77C;
    v37 = sub_1C982C838;
  }
  *(_QWORD *)(a1 + 13240) = v37;
  v38 = *(unsigned __int8 **)(a2 + 4760);
  if (v38[530] || v38[528] || v38[532] || v38[531])
  {
    *(_QWORD *)(a1 + 12680) = a3;
    v39 = v38[178];
    v40 = v38[177];
    *(_DWORD *)(a1 + 32) = v39;
    *(_DWORD *)(a1 + 36) = v40;
    *(_DWORD *)(a1 + 20) = 1 << v39;
    *(_DWORD *)(a1 + 24) = 1 << v40;
    v41 = v39 - v40;
    *(_DWORD *)(a1 + 28) = v41;
    if (v41 <= 3)
    {
      if (!*(_BYTE *)(a1 + 16))
        sub_1C9797E1C(a1 + 16, 0, 0);
      *(_BYTE *)(a1 + 16) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 12852) = 5;
}

uint64_t sub_1C9798924(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 12944) + ((uint64_t)a9 << 8) + 16 * *(char *)(a2 + a9) + 1672);
  v14 = *(_QWORD *)(v13 + 416);
  v15 = *(_DWORD *)(v13 + 520) + 2;
  v16 = a2 + 4 * a9;
  v18 = *(__int16 *)(v16 + 4);
  v17 = (unsigned int *)(v16 + 4);
  v19 = a3 + (v18 >> 2);
  if (v19 < v15)
    v15 = v19;
  if (v19 <= -3 - (int)a5)
    v20 = -3 - a5;
  else
    v20 = v15;
  v21 = *(_DWORD *)(v13 + 524) + 2;
  v22 = a4 + (*((__int16 *)v17 + 1) >> 2);
  if (v22 < v21)
    v21 = a4 + (*((__int16 *)v17 + 1) >> 2);
  if (v22 <= -3 - (int)a6)
    v23 = -3 - a6;
  else
    v23 = v21;
  sub_1C974E5B8(v13, v23 + a6);
  v24 = *(char *)(a2 + a9);
  v25 = *(_QWORD *)(a1 + 12944);
  if (*(_BYTE *)(v25 + 32 * a9 + 2 * v24 + 5120))
    return sub_1C979DA80(a1, a5, a6, *(unsigned int *)(v25 + 664), *(__int16 *)(v25 + ((uint64_t)a9 << 8) + 16 * v24 + 672), *(__int16 *)(v25 + ((uint64_t)a9 << 8) + 16 * v24 + 676), *v17, v14, *(_QWORD *)(v13 + 400) + ((*(_QWORD *)(v13 + 416) * v23 + v20) << *(_BYTE *)(v13 + 531)), a7, a8);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25
                                                       + ((8 * ((*v17 & 3) != 0)) | (16 * ((*v17 & 0x30000) != 0)))
                                                       + 3224))(a5, a6);
}

uint64_t sub_1C9798AC0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 12944) + ((uint64_t)a9 << 8) + 16 * *(char *)(a2 + a9) + 1672);
  v15 = *(_DWORD *)(v14 + 520) + 2;
  v16 = a2 + 4 * a9;
  v17 = a3 + (*(__int16 *)(v16 + 4) >> 2);
  if (v17 < v15)
    v15 = a3 + (*(__int16 *)(v16 + 4) >> 2);
  if (v17 <= -3 - (int)a5)
    v18 = -3 - a5;
  else
    v18 = v15;
  v19 = *(_DWORD *)(v14 + 524) + 2;
  v20 = a4 + (*(__int16 *)(v16 + 6) >> 2);
  if (v20 < v19)
    v19 = a4 + (*(__int16 *)(v16 + 6) >> 2);
  if (v20 <= -3 - (int)a6)
    v21 = -3 - a6;
  else
    v21 = v19;
  sub_1C974E5B8(v14, v21 + a6);
  v22 = *(_DWORD *)(v16 + 4);
  v23 = v14 + 8 * (HIWORD(v22) & 2 | (v22 >> 1) & 1);
  v24 = *(_QWORD *)(v23 + 120);
  v25 = *(_QWORD *)(v23 + 88) + ((v24 * v21 + v18) << *(_BYTE *)(v14 + 156));
  v26 = 2 * (v22 & 3);
  v27 = (v22 >> 15) & 6;
  v28 = *(char *)(a2 + a9);
  v29 = *(_QWORD *)(a1 + 12944);
  if (*(_BYTE *)(v29 + 32 * a9 + 2 * v28 + 5120))
    return sub_1C979DA80(a1, a5, a6, *(unsigned int *)(v29 + 664), *(__int16 *)(v29 + ((uint64_t)a9 << 8) + 16 * v28 + 672), *(__int16 *)(v29 + ((uint64_t)a9 << 8) + 16 * v28 + 676), v26 | (v27 << 16), v24, v25, a7, a8);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (v27 & 2 | (v26 >> 1) & 1) + 3224))(a5, a6, v26 | (v27 << 16), v24, v25, a7, a8);
}

uint64_t sub_1C9798C68(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  unsigned int v10;
  uint64_t v13;
  int v14;
  int v15;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;

  v10 = a5;
  v13 = a2 + 4 * a9;
  v14 = *(unsigned __int16 *)(v13 + 4);
  v15 = *(unsigned __int16 *)(v13 + 6);
  if (((v14 | v15) & 1) == 0)
    return sub_1C9798AC0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v17 = v15 & 3;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 12944) + ((uint64_t)a9 << 8) + 16 * *(char *)(a2 + a9) + 1672);
  v19 = a4 + ((__int16)v15 >> 2);
  v20 = -3 - a6;
  v21 = *(_DWORD *)(v18 + 524) + 2;
  if (v19 >= v21)
    v22 = *(_DWORD *)(v18 + 524) + 2;
  else
    v22 = v19;
  if (v19 <= v20)
    v23 = -3 - a6;
  else
    v23 = v22;
  if (v17 == 3)
    ++v19;
  if (v19 >= v21)
    v24 = *(_DWORD *)(v18 + 524) + 2;
  else
    v24 = v19;
  if (v19 <= v20)
    v25 = -3 - a6;
  else
    v25 = v24;
  if (v23 <= v25)
    v26 = v25;
  else
    v26 = v23;
  sub_1C974E5B8(v18, v26 + a6);
  v27 = __clz(__rbit32(v10));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 12944) + 32 * a9 + 2 * *(char *)(a2 + a9) + 5120))
    return (*(uint64_t (**)(uint64_t))(a1 + 8 * v27 + 12984))(a6);
  else
    return (*(uint64_t (**)(uint64_t))(a1 + 8 * v27 + 12944))(a6);
}

_QWORD *sub_1C9798EB4(_QWORD *result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  void (*v28)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int32 v80;
  int v81;
  int v83;
  int v84;
  int v85;
  uint64_t *v86;
  void (**v87)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  __int16 v93;
  _BYTE *v94;
  int v95;
  int32x2_t v96;
  uint64_t v97;

  v11 = (int *)result;
  v12 = 0;
  v97 = *MEMORY[0x1E0C80C00];
  v13 = a6;
  v14 = *result + 4 * a6;
  v15 = *(_WORD *)(v14 + 4);
  v16 = *(_WORD *)(v14 + 6);
  v17 = a8 != 1;
  HIDWORD(v79) = *((unsigned __int8 *)result + a8 + 12848);
  LOWORD(v14) = *(_WORD *)(*result + 44);
  *(_BYTE *)(result[1] + a6) = *(_BYTE *)(*result + a6);
  v18 = result[1];
  *(_DWORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = -1;
  v93 = v14;
  *(_WORD *)(v18 + 44) = v14;
  v94 = result + 1586;
  v19 = &result[2 * a8];
  v87 = (void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v19 + 1630);
  v86 = v19 + 1631;
  v84 = a7 >> 16;
  v85 = (__int16)a7;
  v20 = (char *)&unk_1C983324C + 10 * a8 + 2 * v17 + 1;
  do
  {
    *(_WORD *)(*((_QWORD *)v11 + 1) + 4 * v13 + 4) = v15 + *(v20 - 1);
    *(_WORD *)(*((_QWORD *)v11 + 1) + 4 * v13 + 6) = v16 + *v20;
    v21 = *((_QWORD *)v11 + 1);
    if (!v17
      || *v94
      || ((v22 = *(_DWORD *)(v21 + 4 * v13 + 4), v23 = v11[3184], (__int16)v22 <= v23 >> 16)
        ? (v24 = (__int16)v22 < (__int16)v23)
        : (v24 = 1),
          !v24 && ((v25 = v11[3185], v26 = v22 >> 16, v26 >= (__int16)v25) ? (v27 = v26 <= v25 >> 16) : (v27 = 0), v27)))
    {
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = -1;
      *(_WORD *)(v21 + 44) = v93;
      v28 = *v87;
      v29 = (_QWORD *)((char *)v11 + (*v86 >> 1));
      if ((*v86 & 1) != 0)
        v28 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*v29 + v28);
      LODWORD(v79) = a6;
      v28(v29, *((_QWORD *)v11 + 1), a2, a3, a4, a5, a9, a10, v79);
      result = (_QWORD *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a11 + 5))(*a11, a11[1], *((_QWORD *)a11 + 2), *((_QWORD *)a11 + 3), a10, *((_QWORD *)a11 + 4));
      v30 = *((_QWORD *)v11 + 1);
      *(_QWORD *)(v30 + 16) = result;
      v31 = v30 + 4 * v13;
      v33 = *(__int16 *)(v31 + 4);
      v32 = v31 + 4;
      v34 = v33 - v85;
      v35 = v33 - v85 + 64;
      if (v35 >= 0x80)
      {
        if (v34 >= 0)
          v37 = v34;
        else
          v37 = -v34;
        v36 = 63 - 2 * __clz((v34 < 1) | (2 * v37));
      }
      else
      {
        v36 = byte_1C9858728[v35];
      }
      v38 = *(__int16 *)(v32 + 2) - v84;
      if ((v38 + 64) >= 0x80)
      {
        if (v38 >= 0)
          v40 = *(__int16 *)(v32 + 2) - v84;
        else
          v40 = v84 - *(__int16 *)(v32 + 2);
        v39 = 63 - 2 * __clz((v38 < 1) | (2 * v40));
      }
      else
      {
        v39 = byte_1C9858728[v38 + 64];
      }
      v41 = v39 + v36;
      *(_DWORD *)(v30 + 40) = v41;
      v42 = ((*(unsigned __int16 *)(*((_QWORD *)v11 + 1619) + 2 * *(__int16 *)(v30 + 44) + 152) * (unint64_t)v41) >> (8 * (*(_WORD *)(v30 + 44) == 0)))
          + result;
      *(_QWORD *)(v30 + 32) = v42;
      v43 = *(_QWORD *)v11;
      if (v42 < *(_QWORD *)(*(_QWORD *)v11 + 32))
      {
        *(_BYTE *)(v43 + v13) = *(_BYTE *)(v30 + v13);
        *(_DWORD *)(v43 + 4 * v13 + 4) = *(_DWORD *)v32;
        *(_QWORD *)(v43 + 16) = *(_QWORD *)(v30 + 16);
        *(_DWORD *)(v43 + 40) = *(_DWORD *)(v30 + 40);
        *(_QWORD *)(v43 + 32) = *(_QWORD *)(v30 + 32);
        v12 = v17;
      }
    }
    v20 += 2;
    ++v17;
  }
  while (v17 != 5);
  if (v12)
  {
    v44 = 0;
    v45 = *(_QWORD *)v11 + 4 * v13;
    v46 = *(_WORD *)(v45 + 4);
    v47 = *(_WORD *)(v45 + 6);
    do
    {
      *(&v95 + v44) = byte_1C9833260[3 * v12 + v44];
      ++v44;
    }
    while (v44 != 3);
    v48 = *((_QWORD *)v11 + 1);
    *(_DWORD *)(v48 + 40) = 0;
    *(_QWORD *)(v48 + 16) = 0;
    *(_QWORD *)(v48 + 24) = 0;
    *(_QWORD *)(v48 + 32) = -1;
    *(_WORD *)(v48 + 44) = v93;
    if (HIDWORD(v79))
    {
      v81 = 0;
      v49 = 3;
      v50 = (char *)&unk_1C983324C + 10 * a8;
      do
      {
        v51 = 0;
        v80 = v12;
        v52 = 4 * v49;
        v83 = -1;
        do
        {
          v53 = *(int *)((char *)&v95 + v51);
          v54 = &v50[2 * v53];
          *(_WORD *)(*((_QWORD *)v11 + 1) + 4 * v13 + 4) = v46 + *v54;
          *(_WORD *)(*((_QWORD *)v11 + 1) + 4 * v13 + 6) = v47 + v54[1];
          v55 = *((_QWORD *)v11 + 1);
          if (*v94
            || ((v65 = *(_DWORD *)(v55 + 4 * v13 + 4), v66 = v11[3184], (__int16)v65 <= v66 >> 16)
              ? (v67 = (__int16)v65 < (__int16)v66)
              : (v67 = 1),
                !v67
             && ((v68 = v11[3185], v69 = v65 >> 16, v69 >= (__int16)v68) ? (v70 = v69 <= v68 >> 16) : (v70 = 0), v70)))
          {
            *(_DWORD *)(v55 + 40) = 0;
            *(_QWORD *)(v55 + 16) = 0;
            *(_QWORD *)(v55 + 24) = 0;
            *(_QWORD *)(v55 + 32) = -1;
            *(_WORD *)(v55 + 44) = v93;
            v56 = *v87;
            v57 = (_QWORD *)((char *)v11 + (*v86 >> 1));
            if ((*v86 & 1) != 0)
              v56 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*v57 + v56);
            LODWORD(v79) = a6;
            v56(v57, *((_QWORD *)v11 + 1), a2, a3, a4, a5, a9, a10, v79);
            result = (_QWORD *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a11 + 5))(*a11, a11[1], *((_QWORD *)a11 + 2), *((_QWORD *)a11 + 3), a10, *((_QWORD *)a11 + 4));
            v58 = *((_QWORD *)v11 + 1);
            *(_QWORD *)(v58 + 16) = result;
            v59 = v58 + 4 * v13;
            v61 = *(__int16 *)(v59 + 4);
            v60 = v59 + 4;
            v62 = v61 - v85;
            v63 = v61 - v85 + 64;
            if (v63 >= 0x80)
            {
              if (v62 >= 0)
                v71 = v62;
              else
                v71 = -v62;
              v64 = 63 - 2 * __clz((v62 < 1) | (2 * v71));
            }
            else
            {
              v64 = byte_1C9858728[v63];
            }
            v72 = *(__int16 *)(v60 + 2) - v84;
            if ((v72 + 64) >= 0x80)
            {
              if (v72 >= 0)
                v74 = *(__int16 *)(v60 + 2) - v84;
              else
                v74 = v84 - *(__int16 *)(v60 + 2);
              v73 = 63 - 2 * __clz((v72 < 1) | (2 * v74));
            }
            else
            {
              v73 = byte_1C9858728[v72 + 64];
            }
            v75 = v73 + v64;
            *(_DWORD *)(v58 + 40) = v75;
            v76 = ((*(unsigned __int16 *)(*((_QWORD *)v11 + 1619) + 2 * *(__int16 *)(v58 + 44) + 152)
                  * (unint64_t)v75) >> (8 * (*(_WORD *)(v58 + 44) == 0)))
                + result;
            *(_QWORD *)(v58 + 32) = v76;
            v77 = *(_QWORD *)v11;
            if (v76 < *(_QWORD *)(*(_QWORD *)v11 + 32))
            {
              *(_BYTE *)(v77 + v13) = *(_BYTE *)(v58 + v13);
              *(_DWORD *)(v77 + 4 * v13 + 4) = *(_DWORD *)v60;
              *(_QWORD *)(v77 + 16) = *(_QWORD *)(v58 + 16);
              *(_DWORD *)(v77 + 40) = *(_DWORD *)(v58 + 40);
              *(_QWORD *)(v77 + 32) = *(_QWORD *)(v58 + 32);
              v83 = v53;
            }
          }
          v51 += 4;
        }
        while (v52 != v51);
        v12 = v83;
        if (v83 == -1)
          break;
        v95 = v83;
        if (((v83 - 1) ^ (v80 - 1)) > 1)
        {
          v96.i32[0] = v80;
          v49 = 2;
        }
        else
        {
          v96 = vsub_s32((int32x2_t)0x400000003, vdup_n_s32((v83 - 1) & 0xFFFFFFFE));
          v49 = 3;
        }
        v78 = *(_QWORD *)v11 + 4 * v13;
        v46 = *(_WORD *)(v78 + 4);
        v47 = *(_WORD *)(v78 + 6);
        ++v81;
      }
      while (v81 != HIDWORD(v79));
    }
  }
  return result;
}

_QWORD *sub_1C979950C(_QWORD *result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  _BYTE *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void (**v48)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  __int16 v49;

  v11 = (int *)result;
  v12 = a6;
  v13 = result[1];
  v14 = *result + 4 * a6;
  v15 = *(_WORD *)(v14 + 4);
  v16 = *(_WORD *)(v14 + 6);
  *(_DWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = -1;
  if (a8 == 2)
    v17 = 1;
  else
    v17 = 2;
  v49 = v17;
  *(_WORD *)(v13 + 44) = v17;
  v18 = result + 1586;
  v19 = &result[2 * a8];
  v48 = (void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v19 + 1630);
  v47 = v19 + 1631;
  HIDWORD(v46) = (__int16)a7;
  v20 = a7 >> 16;
  v21 = 2 * (a8 != 1);
  v22 = (char *)&unk_1C9833130 + 18 * a8;
  do
  {
    *(_WORD *)(*((_QWORD *)v11 + 1) + 4 * v12 + 4) = v15 + v22[v21];
    *(_WORD *)(*((_QWORD *)v11 + 1) + 4 * v12 + 6) = v16 + v22[v21 + 1];
    v23 = *((_QWORD *)v11 + 1);
    if (*v18
      || ((v33 = *(_DWORD *)(v23 + 4 * v12 + 4), v34 = v11[3184], (__int16)v33 <= v34 >> 16)
        ? (v35 = (__int16)v33 < (__int16)v34)
        : (v35 = 1),
          !v35 && ((v36 = v11[3185], v37 = v33 >> 16, v37 >= (__int16)v36) ? (v38 = v37 <= v36 >> 16) : (v38 = 0), v38)))
    {
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = -1;
      *(_WORD *)(v23 + 44) = v49;
      v24 = *v48;
      v25 = (_QWORD *)((char *)v11 + (*v47 >> 1));
      if ((*v47 & 1) != 0)
        v24 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*v25 + v24);
      LODWORD(v46) = a6;
      v24(v25, *((_QWORD *)v11 + 1), a2, a3, a4, a5, a9, a10, v46);
      result = (_QWORD *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a11 + 5))(*a11, a11[1], *((_QWORD *)a11 + 2), *((_QWORD *)a11 + 3), a10, *((_QWORD *)a11 + 4));
      v26 = *((_QWORD *)v11 + 1);
      *(_QWORD *)(v26 + 16) = result;
      v27 = v26 + 4 * v12;
      v29 = *(__int16 *)(v27 + 4);
      v28 = v27 + 4;
      v30 = v29 - HIDWORD(v46);
      v31 = v29 - HIDWORD(v46) + 64;
      if (v31 >= 0x80)
      {
        if (v30 >= 0)
          v39 = v30;
        else
          v39 = -v30;
        v32 = 63 - 2 * __clz((v30 < 1) | (2 * v39));
      }
      else
      {
        v32 = byte_1C9858728[v31];
      }
      v40 = *(__int16 *)(v28 + 2) - v20;
      if ((v40 + 64) >= 0x80)
      {
        if (v40 >= 0)
          v42 = *(__int16 *)(v28 + 2) - v20;
        else
          v42 = v20 - *(__int16 *)(v28 + 2);
        v41 = 63 - 2 * __clz((v40 < 1) | (2 * v42));
      }
      else
      {
        v41 = byte_1C9858728[v40 + 64];
      }
      v43 = v41 + v32;
      *(_DWORD *)(v26 + 40) = v43;
      v44 = ((*(unsigned __int16 *)(*((_QWORD *)v11 + 1619) + 2 * *(__int16 *)(v26 + 44) + 152) * (unint64_t)v43) >> (8 * (*(_WORD *)(v26 + 44) == 0)))
          + result;
      *(_QWORD *)(v26 + 32) = v44;
      v45 = *(_QWORD *)v11;
      if (v44 < *(_QWORD *)(*(_QWORD *)v11 + 32))
      {
        *(_BYTE *)(v45 + v12) = *(_BYTE *)(v26 + v12);
        *(_DWORD *)(v45 + 4 * v12 + 4) = *(_DWORD *)v28;
        *(_QWORD *)(v45 + 16) = *(_QWORD *)(v26 + 16);
        *(_DWORD *)(v45 + 40) = *(_DWORD *)(v26 + 40);
        *(_QWORD *)(v45 + 32) = *(_QWORD *)(v26 + 32);
      }
    }
    v21 += 2;
  }
  while (v21 != 18);
  return result;
}

uint64_t sub_1C97997E0(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  BOOL v30;
  BOOL v32;
  int v34;
  char *v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  void (*v45)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD);
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(_QWORD *, _QWORD, unsigned int *, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;
  char *v71;
  int v72;
  char *v73;
  uint64_t v74;
  int v75;
  int v76;
  int v78;
  int v79;
  void (*v81)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD);
  uint64_t v82;
  _QWORD *v83;
  void (*v84)(_QWORD *, _QWORD, unsigned int *, uint64_t);
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unint64_t v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  int v104;
  int v105;
  int v106;
  BOOL v107;
  __int16 v108;
  int v109;
  int v110;
  int v111;
  BOOL v112;
  BOOL v113;
  int v114;
  unsigned int v115;
  __int16 v117;
  int v118;
  int v120;
  BOOL *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v129;
  unsigned int v131[4];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v121 = (BOOL *)(a1 + 1586);
  v13 = a1[1619];
  v14 = a1[1607];
  v15 = a1[1608];
  v131[0] = a4;
  v131[1] = a5;
  v131[2] = 1;
  v132 = v14;
  v133 = v15;
  v134 = a8;
  v16 = v13 + 8 * __clz(__rbit32(a4));
  v135 = *(_QWORD *)(v16 + 200);
  v136 = *(_QWORD *)(v16 + 512);
  v17 = (int)a6;
  sub_1C979C740((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(*a1 + 4 * (int)a6 + 4), a10);
  v18 = a1[1];
  v129 = a6;
  v19 = v18 + 4 * (int)a6;
  v20 = *(_WORD *)(v19 + 4);
  v21 = *(_WORD *)(v19 + 6);
  v22 = *((_DWORD *)a1 + 3184);
  v23 = (__int16)v22;
  v24 = v22 >> 16;
  v25 = v24 >= (__int16)(v20 + 8) && v23 <= (__int16)(v20 + 8);
  if (!v25
    || ((v26 = *((_DWORD *)a1 + 3185), v27 = (__int16)v26, v28 = v26 >> 16, v27 <= (__int16)(v21 + 8))
      ? (v29 = v28 < (__int16)(v21 + 8))
      : (v29 = 1),
        v29))
  {
    v30 = 0;
  }
  else
  {
    v32 = v27 <= (__int16)(v21 - 8) && v28 >= (__int16)(v21 - 8);
    v30 = v24 >= (__int16)(v20 - 8) && v23 <= (__int16)(v20 - 8) && v32;
  }
  v34 = 0;
  *(_DWORD *)(v18 + 40) = 0;
  v120 = a7;
  v123 = a7 >> 16;
  v124 = (__int16)a7;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  v35 = &byte_1C9833169;
  v36 = -6;
  *(_QWORD *)(v18 + 32) = -1;
  *(_WORD *)(v18 + 44) = 1;
  v37 = v21;
  do
  {
    *(_WORD *)(a1[1] + 4 * v17 + 4) = v20 + *(v35 - 1);
    *(_WORD *)(a1[1] + 4 * v17 + 6) = v21 + *v35;
    v38 = a1[1];
    if (v30
      || ((v39 = *(_DWORD *)(v38 + 4 * v17 + 4), v40 = *((_DWORD *)a1 + 3184), (__int16)v39 <= v40 >> 16)
        ? (v41 = (__int16)v39 < (__int16)v40)
        : (v41 = 1),
          !v41
       && ((v42 = *((_DWORD *)a1 + 3185), v43 = v39 >> 16, v43 >= (__int16)v42) ? (v44 = v43 <= v42 >> 16) : (v44 = 0),
           v44)))
    {
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 16) = 0;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = -1;
      *(_WORD *)(v38 + 44) = 1;
      v45 = (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD))a1[1634];
      v46 = a1[1635];
      v47 = (_QWORD *)((char *)a1 + (v46 >> 1));
      if ((v46 & 1) != 0)
        v45 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD))(*v47 + v45);
      v45(v47, a1[1], a2, a3, a4, a5, a8, a9, a6);
      v48 = (void (*)(_QWORD *, _QWORD, unsigned int *, uint64_t))a1[1656];
      v49 = a1[1657];
      v50 = (_QWORD *)((char *)a1 + (v49 >> 1));
      if ((v49 & 1) != 0)
        v48 = *(void (**)(_QWORD *, _QWORD, unsigned int *, uint64_t))(*v50 + v48);
      v48(v50, a1[1], v131, a9);
      v51 = a1[1];
      v52 = v51 + 4 * v17;
      v54 = *(__int16 *)(v52 + 4);
      v53 = v52 + 4;
      v55 = v54 - v124;
      v56 = v54 - v124 + 64;
      if (v56 >= 0x80)
      {
        if (v55 >= 0)
          v58 = v55;
        else
          v58 = -v55;
        v57 = 63 - 2 * __clz((v55 < 1) | (2 * v58));
      }
      else
      {
        v57 = byte_1C9858728[v56];
      }
      v21 = v37;
      v59 = *(__int16 *)(v53 + 2) - v123;
      if ((v59 + 64) >= 0x80)
      {
        if (v59 >= 0)
          v61 = *(__int16 *)(v53 + 2) - v123;
        else
          v61 = v123 - *(__int16 *)(v53 + 2);
        v60 = 63 - 2 * __clz((v59 < 1) | (2 * v61));
      }
      else
      {
        v60 = byte_1C9858728[v59 + 64];
      }
      v62 = v60 + v57;
      *(_DWORD *)(v51 + 40) = v62;
      v63 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v51 + 44) + 152) * (unint64_t)v62) >> (8 * (*(_WORD *)(v51 + 44) == 0)))
          + *(_QWORD *)(v51 + 16);
      *(_QWORD *)(v51 + 32) = v63;
      v64 = *a1;
      if (v63 < *(_QWORD *)(*a1 + 32))
      {
        *(_BYTE *)(v64 + v17) = *(_BYTE *)(v51 + v17);
        *(_DWORD *)(v64 + 4 * v17 + 4) = *(_DWORD *)v53;
        *(_QWORD *)(v64 + 16) = *(_QWORD *)(v51 + 16);
        *(_DWORD *)(v64 + 40) = *(_DWORD *)(v51 + 40);
        *(_QWORD *)(v64 + 32) = *(_QWORD *)(v51 + 32);
        v34 = v36 + 7;
      }
    }
    v35 += 2;
  }
  while (!__CFADD__(v36++, 1));
  if (v34 && v121[162])
  {
    v66 = 0;
    do
    {
      v67 = 0;
      v68 = *a1 + 4 * v17;
      v69 = *(_WORD *)(v68 + 6);
      v70 = *(_WORD *)(v68 + 4);
      v122 = v34;
      v71 = &byte_1C9833174[3 * v34];
      v72 = -1;
      do
      {
        v73 = (char *)&unk_1C9833166 + 2 * v71[v67];
        *(_WORD *)(a1[1] + 4 * v17 + 4) = v70 + *v73;
        *(_WORD *)(a1[1] + 4 * v17 + 6) = v69 + v73[1];
        v74 = a1[1];
        v75 = *(_DWORD *)(v74 + 4 * v17 + 4);
        v76 = *((_DWORD *)a1 + 3184);
        if ((__int16)v75 <= v76 >> 16 && (__int16)v75 >= (__int16)v76)
        {
          v78 = *((_DWORD *)a1 + 3185);
          v79 = v75 >> 16;
          if (v79 >= (__int16)v78 && v79 <= v78 >> 16)
          {
            *(_DWORD *)(v74 + 40) = 0;
            *(_QWORD *)(v74 + 16) = 0;
            *(_QWORD *)(v74 + 24) = 0;
            *(_QWORD *)(v74 + 32) = -1;
            *(_WORD *)(v74 + 44) = 1;
            v81 = (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD))a1[1634];
            v82 = a1[1635];
            v83 = (_QWORD *)((char *)a1 + (v82 >> 1));
            if ((v82 & 1) != 0)
              v81 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _DWORD))(*v83 + v81);
            v81(v83, a1[1], a2, a3, a4, a5, a8, a9, v129);
            v84 = (void (*)(_QWORD *, _QWORD, unsigned int *, uint64_t))a1[1656];
            v85 = a1[1657];
            v86 = (_QWORD *)((char *)a1 + (v85 >> 1));
            if ((v85 & 1) != 0)
              v84 = *(void (**)(_QWORD *, _QWORD, unsigned int *, uint64_t))(*v86 + v84);
            v84(v86, a1[1], v131, a9);
            v87 = a1[1];
            v88 = v87 + 4 * v17;
            v90 = *(__int16 *)(v88 + 4);
            v89 = v88 + 4;
            v91 = v90 - v124;
            v92 = v90 - v124 + 64;
            if (v92 >= 0x80)
            {
              if (v91 >= 0)
                v94 = v91;
              else
                v94 = -v91;
              v93 = 63 - 2 * __clz((v91 < 1) | (2 * v94));
            }
            else
            {
              v93 = byte_1C9858728[v92];
            }
            v95 = *(__int16 *)(v89 + 2) - v123;
            if ((v95 + 64) >= 0x80)
            {
              if (v95 >= 0)
                v97 = *(__int16 *)(v89 + 2) - v123;
              else
                v97 = v123 - *(__int16 *)(v89 + 2);
              v96 = 63 - 2 * __clz((v95 < 1) | (2 * v97));
            }
            else
            {
              v96 = byte_1C9858728[v95 + 64];
            }
            v98 = v96 + v93;
            *(_DWORD *)(v87 + 40) = v98;
            v99 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v87 + 44) + 152) * (unint64_t)v98) >> (8 * (*(_WORD *)(v87 + 44) == 0)))
                + *(_QWORD *)(v87 + 16);
            *(_QWORD *)(v87 + 32) = v99;
            v100 = *a1;
            if (v99 < *(_QWORD *)(*a1 + 32))
            {
              *(_BYTE *)(v100 + v17) = *(_BYTE *)(v87 + v17);
              *(_DWORD *)(v100 + 4 * v17 + 4) = *(_DWORD *)v89;
              *(_QWORD *)(v100 + 16) = *(_QWORD *)(v87 + 16);
              *(_DWORD *)(v100 + 40) = *(_DWORD *)(v87 + 40);
              *(_QWORD *)(v100 + 32) = *(_QWORD *)(v87 + 32);
              v72 = v67;
            }
          }
        }
        ++v67;
      }
      while (v67 != 3);
      if (v72 == -1)
        break;
      v34 = byte_1C9833174[3 * v122 + v72];
      ++v66;
    }
    while (v66 < v121[162]);
  }
  v101 = v121[160] + 2 * v121[161] + 7;
  v102 = *a1 + 4 * v17;
  v103 = *(_WORD *)(v102 + 4);
  v104 = *((_DWORD *)a1 + 3184);
  v105 = (__int16)v104;
  v106 = v104 >> 16;
  v107 = v104 >> 16 >= (__int16)(v101 + v103) && (__int16)v104 <= (__int16)(v121[160] + 2 * v121[161] + 7 + v103);
  if (!v107
    || ((v108 = *(_WORD *)(v102 + 6),
         v109 = *((_DWORD *)a1 + 3185),
         v110 = (__int16)v109,
         v111 = v109 >> 16,
         (__int16)v109 <= (__int16)(v108 + v101))
      ? (v112 = v111 < (__int16)(v108 + v101))
      : (v112 = 1),
        v112))
  {
    v113 = 0;
LABEL_100:
    v114 = v120;
    goto LABEL_101;
  }
  v113 = 0;
  v117 = v103 - v101;
  if (v106 < v117)
    goto LABEL_100;
  v25 = v105 <= v117;
  v114 = v120;
  if (v25)
  {
    v118 = (__int16)(v108 - v101);
    v113 = v110 <= v118 && v111 >= v118;
  }
LABEL_101:
  *v121 = v113;
  v115 = v114;
  sub_1C979950C(a1, a2, a3, a4, a5, v129, v114, 2, a8, a9, v131);
  return sub_1C979C8A8(a1, a2, a3, a4, a5, v129, v115, a8, a9, v131, a10);
}

uint64_t sub_1C9799EFC(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, signed int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v12;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  void (*v38)(_QWORD *);
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  __int16 v57;
  int v58;
  int v59;
  int v60;
  __int16 v61;
  uint64_t result;
  uint64_t v64;
  unint64_t v65;
  int v67;
  uint64_t (*v68)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v76[4];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v81)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v12 = a4;
  v14 = (__int16 *)(a1 + 1586);
  v15 = a1[1619];
  v16 = a1[1607];
  v17 = a1[1608];
  v76[0] = a4;
  v76[1] = a5;
  v76[2] = 1;
  v71 = v17;
  v72 = v16;
  v77 = v16;
  v78 = v17;
  v79 = a8;
  v18 = v15 + 8 * __clz(__rbit32(a4));
  v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 200);
  v68 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v18 + 512);
  v69 = v80;
  v81 = v68;
  v19 = (int)a6;
  sub_1C979C740((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(a1[1] + 4 * (int)a6 + 4), a10);
  v20 = v14;
  v21 = a5;
  v22 = a1[1];
  *(_DWORD *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = -1;
  *(_WORD *)(v22 + 44) = 1;
  v23 = v14[26];
  if (v23 <= v14[27])
  {
    v25 = (int)v12 > 4 && (_DWORD)v12 == (_DWORD)a5;
    v70 = v25;
    v26 = a5;
    v27 = v12;
    do
    {
      v67 = v23;
      *(_WORD *)(a1[1] + 4 * v19 + 6) = v23;
      v28 = v20[24];
      if (v28 <= v20[25])
      {
        do
        {
          *(_WORD *)(a1[1] + 4 * v19 + 4) = v28;
          v29 = a1[1];
          *(_DWORD *)(v29 + 40) = 0;
          *(_QWORD *)(v29 + 16) = 0;
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v29 + 32) = -1;
          *(_WORD *)(v29 + 44) = 1;
          v30 = a1[1];
          v31 = v30 + 4 * v19;
          v32 = *(__int16 *)(v31 + 4) - (__int16)a7;
          if ((v32 + 64) >= 0x80)
          {
            if (v32 >= 0)
              v34 = *(__int16 *)(v31 + 4) - (__int16)a7;
            else
              v34 = (__int16)a7 - *(__int16 *)(v31 + 4);
            v33 = 63 - 2 * __clz((v32 < 1) | (2 * v34));
          }
          else
          {
            v33 = byte_1C9858728[v32 + 64];
          }
          v35 = *(__int16 *)(v31 + 6) - (a7 >> 16);
          if ((v35 + 64) >= 0x80)
          {
            if (v35 >= 0)
              v37 = v35;
            else
              v37 = -v35;
            v36 = 63 - 2 * __clz((v35 < 1) | (2 * v37));
          }
          else
          {
            v36 = byte_1C9858728[v35 + 64];
          }
          *(_DWORD *)(v30 + 40) = v36 + v33;
          v38 = (void (*)(_QWORD *))a1[1634];
          v39 = a1[1635];
          v40 = (uint64_t *)((char *)a1 + (v39 >> 1));
          if ((v39 & 1) != 0)
            v38 = *(void (**)(_QWORD *))(*v40 + v38);
          v41 = v12;
          v42 = v21;
          v38(v40);
          if (v70)
          {
            if (a1[1583])
              v43 = (uint64_t *)a1[1583];
            else
              v43 = a1 + 1540;
            v44 = v68(v72, v71, a9, a8, v43);
            v45 = a1[1];
            *(_QWORD *)(v45 + 16) = v44;
            if (a1[1583])
              v46 = (unsigned int *)a1[1583];
            else
              v46 = (unsigned int *)(a1 + 1540);
            sub_1C9798050((uint64_t)(a1 + 2), (char *)v45, v46);
            v47 = a1[1];
            v48 = *(_QWORD *)(v47 + 16);
          }
          else
          {
            v48 = v69(v41, v42, v72, v71, a9, a8);
            v47 = a1[1];
            *(_QWORD *)(v47 + 16) = v48;
          }
          v49 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v47 + 44) + 152)
                * (unint64_t)*(unsigned int *)(v47 + 40)) >> (8 * (*(_WORD *)(v47 + 44) == 0)))
              + v48;
          *(_QWORD *)(v47 + 32) = v49;
          v50 = *a1;
          v20 = v14;
          if (v49 < *(_QWORD *)(*a1 + 32))
          {
            *(_BYTE *)(v50 + v19) = *(_BYTE *)(v47 + v19);
            *(_DWORD *)(v50 + 4 * v19 + 4) = *(_DWORD *)(v47 + 4 * v19 + 4);
            *(_QWORD *)(v50 + 16) = *(_QWORD *)(v47 + 16);
            *(_DWORD *)(v50 + 40) = *(_DWORD *)(v47 + 40);
            *(_QWORD *)(v50 + 32) = *(_QWORD *)(v47 + 32);
          }
          v28 += 4;
          v21 = v26;
          v12 = v27;
        }
        while (v28 <= v14[25]);
      }
      v23 = v67 + 4;
    }
    while (v67 + 4 <= v20[27]);
  }
  v51 = 0;
  v52 = *a1 + 4 * v19;
  v53 = *(_WORD *)(v52 + 4);
  v54 = *((_DWORD *)a1 + 3184);
  v55 = v54 >> 16;
  if (v54 >> 16 >= (__int16)(v53 + 3))
  {
    v56 = (__int16)v54;
    if ((__int16)v54 <= (__int16)(v53 + 3))
    {
      v51 = 0;
      v57 = *(_WORD *)(v52 + 6);
      v58 = *((_DWORD *)v20 + 13);
      v59 = (__int16)v58;
      if ((__int16)v58 <= (__int16)(v57 + 3))
      {
        v60 = v58 >> 16;
        if (v60 >= (__int16)(v57 + 3))
        {
          v51 = 0;
          v61 = v53 - 3;
          if (v55 >= v61 && v56 <= v61)
            v51 = v59 <= (__int16)(v57 - 3) && v60 >= (__int16)(v57 - 3);
        }
      }
    }
  }
  *(_BYTE *)v20 = v51;
  result = sub_1C979C8A8(a1, a2, a3, v12, v21, a6, a7, a8, a9, v76, a10);
  if (a10)
  {
    v64 = *a1;
    v65 = *(_QWORD *)(*a1 + 16) + 1;
    *(_QWORD *)(v64 + 16) = v65 >> 1;
    *(_QWORD *)(v64 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v64 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v64 + 40)) >> (8 * (*(_WORD *)(v64 + 44) == 0)))
                          + (v65 >> 1);
  }
  return result;
}

uint64_t sub_1C979A388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  int v50;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61[4];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67[3];

  v12 = a6;
  v14 = a4;
  v18 = *(_QWORD *)(a1 + 12952);
  v19 = *(_QWORD *)(a1 + 12856);
  v20 = *(_QWORD *)(a1 + 12864);
  v61[0] = a4;
  v61[1] = a5;
  v61[2] = 1;
  v62 = v19;
  v63 = v20;
  v64 = a8;
  v21 = v18 + 8 * __clz(__rbit32(a4));
  v65 = *(_QWORD *)(v21 + 200);
  v66 = *(_QWORD *)(v21 + 512);
  sub_1C979C740(a1, a2, a3, a4, a5, a6, *(_DWORD *)(*(_QWORD *)a1 + 4 * (int)a6 + 4), a10);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(unsigned int *)(v22 + 4 * (int)v12 + 4);
  *(_DWORD *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = -1;
  *(_WORD *)(v22 + 44) = 1;
  v24 = a3;
  v25 = a8;
  v26 = sub_1C979CC08((uint64_t *)a1, a2, v24, v14, a5, v12, a7, a8, a9, (uint64_t)v61, v23, SHIDWORD(v23), *(_DWORD *)(a1 + 12728));
  v27 = v26;
  v57 = a2;
  if (v26 == 1)
  {
    v28 = sub_1C979D6B4((uint64_t *)a1, a2, v24, v14, a5, v12, a7, a8, a9, (uint64_t)v61, v23);
    v27 = 1;
    v29 = a1;
    goto LABEL_13;
  }
  v53 = v23;
  v30 = *(_DWORD *)(a1 + 12724);
  v29 = a1;
  if (v26 <= v30)
  {
    v28 = 1;
LABEL_13:
    v32 = a5;
    v33 = a7;
    v34 = v24;
    if (!v28)
      return sub_1C979C8A8((uint64_t *)v29, v57, v34, v14, v32, v12, v33, v25, a9, v61, a10);
    goto LABEL_14;
  }
  v52 = v26;
  v31 = *(_DWORD *)(a1 + 12708);
  v32 = a5;
  v33 = a7;
  v34 = v24;
  if (v31 >= 1)
  {
    v35 = -v31;
    v36 = *(_DWORD *)(a1 + 12712);
    v59 = v14;
    v60 = v24;
    v58 = v12;
    do
    {
      if (v36 >= 1)
      {
        v54 = v35;
        v37 = -v36;
        v38 = (unsigned __int16)v35 - (v36 << 16);
        do
        {
          v39 = v29;
          sub_1C979D4AC((uint64_t *)v29, v57, v60, v59, a5, v58, a7, v25, a9, (uint64_t)v61, v53, v38, v67);
          v29 = v39;
          v37 += v30;
          v36 = *(_DWORD *)(v39 + 12712);
          v38 += v30 << 16;
        }
        while (v37 < v36);
        v33 = a7;
        v31 = *(_DWORD *)(v39 + 12708);
        v12 = v58;
        v32 = a5;
        v14 = v59;
        v34 = v60;
        v35 = v54;
      }
      v35 += v30;
    }
    while (v35 < v31);
  }
  v27 = v52;
LABEL_14:
  if (v27 >= 1)
  {
    v55 = (int)v12;
    v56 = v25;
    do
    {
      v40 = *(unsigned int *)(*(_QWORD *)v29 + 4 * v55 + 4);
      v41 = v14;
      v42 = v12;
      v43 = v33;
      v44 = v25;
      v45 = v14;
      v46 = v12;
      v47 = v32;
      v48 = (uint64_t *)v29;
      v49 = sub_1C979CC08((uint64_t *)v29, v57, v34, v41, v32, v42, v33, v44, a9, (uint64_t)v61, v40, SHIDWORD(v40), *(_DWORD *)(v29 + 12732));
      if (v49 == 1)
        v50 = sub_1C979D6B4(v48, v57, v34, v45, v47, v46, v43, v56, a9, (uint64_t)v61, v40);
      else
        v50 = 1;
      v29 = (uint64_t)v48;
      v32 = v47;
      v12 = v46;
      v14 = v45;
      v33 = v43;
      v25 = v56;
    }
    while (v50 && v49 > 0);
  }
  return sub_1C979C8A8((uint64_t *)v29, v57, v34, v14, v32, v12, v33, v25, a9, v61, a10);
}

uint64_t sub_1C979A744(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  void (*v35)(_QWORD *);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v46[4];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v17 = (int)a6;
  v18 = *(unsigned int *)(a1[1] + 4 * (int)a6 + 4);
  v19 = a1[1619];
  v20 = a1[1607];
  v21 = a1[1608];
  v46[0] = a4;
  v46[1] = a5;
  v46[2] = 1;
  v47 = v20;
  v48 = v21;
  v49 = a8;
  v22 = v19 + 8 * __clz(__rbit32(a4));
  v50 = *(_QWORD *)(v22 + 200);
  v51 = *(_QWORD *)(v22 + 512);
  v44 = v18;
  sub_1C979C740((uint64_t)a1, a2, a3, a4, a5, a6, v18, a10);
  v23 = a1[1];
  *(_DWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = -1;
  *(_WORD *)(v23 + 44) = 1;
  v24 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))a1[1634];
  v25 = a1[1635];
  v26 = (uint64_t *)((char *)a1 + (v25 >> 1));
  if ((v25 & 1) != 0)
    v24 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(*v26 + v24);
  v24(v26, a1[1], a2, a3, a4, a5, a8, a9, a6);
  v27 = a1[1];
  v28 = v27 + 4 * v17;
  v29 = *(__int16 *)(v28 + 4) - (__int16)a7;
  v30 = *(__int16 *)(v28 + 6) - (a7 >> 16);
  if ((v29 + 64) >= 0x80)
  {
    if (v29 >= 0)
      v32 = v29;
    else
      v32 = -v29;
    v31 = 63 - 2 * __clz((v29 < 1) | (2 * v32));
  }
  else
  {
    v31 = byte_1C9858728[v29 + 64];
  }
  if ((v30 + 64) >= 0x80)
  {
    if (v30 >= 0)
      v34 = v30;
    else
      v34 = -v30;
    v33 = 63 - 2 * __clz((v30 < 1) | (2 * v34));
  }
  else
  {
    v33 = byte_1C9858728[v30 + 64];
  }
  *(_DWORD *)(v27 + 40) = v33 + v31;
  v35 = (void (*)(_QWORD *))a1[1656];
  v36 = a1[1657];
  v37 = (uint64_t *)((char *)a1 + (v36 >> 1));
  if ((v36 & 1) != 0)
    v35 = *(void (**)(_QWORD *))(*v37 + v35);
  v35(v37);
  v38 = a1[1];
  v39 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v38 + 44) + 152)
        * (unint64_t)*(unsigned int *)(v38 + 40)) >> (8 * (*(_WORD *)(v38 + 44) == 0)))
      + *(_QWORD *)(v38 + 16);
  *(_QWORD *)(v38 + 32) = v39;
  v40 = *a1;
  if (v39 < *(_QWORD *)(*a1 + 32))
  {
    *(_BYTE *)(v40 + v17) = *(_BYTE *)(v38 + v17);
    *(_DWORD *)(v40 + 4 * v17 + 4) = *(_DWORD *)(v38 + 4 * v17 + 4);
    *(_QWORD *)(v40 + 16) = *(_QWORD *)(v38 + 16);
    *(_DWORD *)(v40 + 40) = *(_DWORD *)(v38 + 40);
    *(_QWORD *)(v40 + 32) = *(_QWORD *)(v38 + 32);
  }
  sub_1C979CC08(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)v46, v44, SHIDWORD(v44), 1);
  result = sub_1C979C8A8(a1, a2, a3, a4, a5, a6, a7, a8, a9, v46, a10);
  if (a10)
  {
    v42 = *a1;
    v43 = *(_QWORD *)(*a1 + 16) + 1;
    *(_QWORD *)(v42 + 16) = v43 >> 1;
    *(_QWORD *)(v42 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v42 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v42 + 40)) >> (8 * (*(_WORD *)(v42 + 44) == 0)))
                          + (v43 >> 1);
  }
  return result;
}

uint64_t sub_1C979AA64(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, signed int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  uint64_t (*v46)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v50[4];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v55)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v15 = (int)a6;
  v16 = *(_DWORD *)(a1[1] + 4 * (int)a6 + 4);
  v17 = a1[1619];
  v18 = a1[1607];
  v19 = a1[1608];
  v50[0] = a4;
  v50[1] = a5;
  v50[2] = 1;
  v51 = v18;
  v52 = v19;
  v53 = a8;
  v20 = v17 + 8 * __clz(__rbit32(a4));
  v21 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v20 + 200);
  v54 = v21;
  v46 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v20 + 512);
  v55 = v46;
  sub_1C979C740((uint64_t)a1, a2, a3, a4, a5, a6, v16, a10);
  v22 = a1[1];
  *(_DWORD *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = -1;
  *(_WORD *)(v22 + 44) = 1;
  v23 = (void (*)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))a1[1634];
  v24 = a1[1635];
  v25 = (uint64_t *)((char *)a1 + (v24 >> 1));
  if ((v24 & 1) != 0)
    v23 = *(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(*v25 + v23);
  v26 = a3;
  v23(v25, a1[1], a2, a3, a4, a5, a8, a9, a6);
  v27 = a1[1];
  v28 = v27 + 4 * v15;
  v29 = *(__int16 *)(v28 + 4) - (__int16)a7;
  v30 = *(__int16 *)(v28 + 6) - (a7 >> 16);
  if ((v29 + 64) >= 0x80)
  {
    if (v29 >= 0)
      v32 = v29;
    else
      v32 = -v29;
    v31 = 63 - 2 * __clz((v29 < 1) | (2 * v32));
  }
  else
  {
    v31 = byte_1C9858728[v29 + 64];
  }
  if ((v30 + 64) >= 0x80)
  {
    if (v30 >= 0)
      v34 = v30;
    else
      v34 = -v30;
    v33 = 63 - 2 * __clz((v30 < 1) | (2 * v34));
  }
  else
  {
    v33 = byte_1C9858728[v30 + 64];
  }
  *(_DWORD *)(v27 + 40) = v33 + v31;
  if ((int)a4 >= 5 && (_DWORD)a4 == (_DWORD)a5)
  {
    if (a1[1583])
      v35 = (uint64_t *)a1[1583];
    else
      v35 = a1 + 1540;
    v36 = v46(v18, v19, a9, a8, v35);
    v37 = a1[1];
    *(_QWORD *)(v37 + 16) = v36;
    if (a1[1583])
      v38 = (unsigned int *)a1[1583];
    else
      v38 = (unsigned int *)(a1 + 1540);
    v26 = a3;
    sub_1C9798050((uint64_t)(a1 + 2), (char *)v37, v38);
    v39 = a1[1];
    v40 = *(_QWORD *)(v39 + 16);
  }
  else
  {
    v40 = v21(a4, a5, v18, v19, a9, a8);
    v39 = a1[1];
    *(_QWORD *)(v39 + 16) = v40;
  }
  v41 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v39 + 44) + 152)
        * (unint64_t)*(unsigned int *)(v39 + 40)) >> (8 * (*(_WORD *)(v39 + 44) == 0)))
      + v40;
  *(_QWORD *)(v39 + 32) = v41;
  v42 = *a1;
  if (v41 < *(_QWORD *)(*a1 + 32))
  {
    *(_BYTE *)(v42 + v15) = *(_BYTE *)(v39 + v15);
    *(_DWORD *)(v42 + 4 * v15 + 4) = *(_DWORD *)(v39 + 4 * v15 + 4);
    *(_QWORD *)(v42 + 16) = *(_QWORD *)(v39 + 16);
    *(_DWORD *)(v42 + 40) = *(_DWORD *)(v39 + 40);
    *(_QWORD *)(v42 + 32) = *(_QWORD *)(v39 + 32);
  }
  result = sub_1C979C8A8(a1, a2, v26, a4, a5, a6, a7, a8, a9, v50, a10);
  if (a10)
  {
    v44 = *a1;
    v45 = *(_QWORD *)(*a1 + 16) + 1;
    *(_QWORD *)(v44 + 16) = v45 >> 1;
    *(_QWORD *)(v44 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v44 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v44 + 40)) >> (8 * (*(_WORD *)(v44 + 44) == 0)))
                          + (v45 >> 1);
  }
  return result;
}

uint64_t sub_1C979ADA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 8; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979ADFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 16; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979AE58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 32; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979AEB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 64; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979AF10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 128; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979AF6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 8; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979AFE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 16; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B05C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 32; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B0D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 64; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B14C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 128; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B1C4(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 4;
    v9 = 1 << (a2 - 4) >> 1;
    v10 = *a3;
    v11 = a3[1];
    v12 = *a4;
    v13 = a4[1];
    do
    {
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = v15;
        v17 = 2 * v14;
        v18 = ((v9 + v10 * *(unsigned __int16 *)(a5 + 2 * v14)) >> v8) + v12;
        if (v18 >= 1023)
          v18 = 1023;
        *(_WORD *)(a7 + 2 * v14) = v18 & ~(unsigned __int16)(v18 >> 31);
        v19 = v17 | 2;
        v20 = ((v9 + v11 * *(unsigned __int16 *)(a5 + (v17 | 2))) >> v8) + v13;
        if (v20 >= 1023)
          v20 = 1023;
        *(_WORD *)(a7 + v19) = v20 & ~(unsigned __int16)(v20 >> 31);
        v14 = 2;
        v15 = 0;
      }
      while ((v16 & 1) != 0);
      ++v7;
      a5 += 8;
      a7 += 2 * a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B264(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 4;
    v9 = 1 << (a2 - 4) >> 1;
    v10 = *a3;
    v11 = a3[1];
    v12 = *a4;
    v13 = a4[1];
    do
    {
      v14 = 0;
      v15 = -2;
      do
      {
        v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023)
          v16 = 1023;
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023)
          v17 = 1023;
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 6);
      ++v7;
      a5 += 16;
      a7 += 2 * a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B308(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 4;
    v9 = 1 << (a2 - 4) >> 1;
    v10 = *a3;
    v11 = a3[1];
    v12 = *a4;
    v13 = a4[1];
    do
    {
      v14 = 0;
      v15 = -2;
      do
      {
        v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023)
          v16 = 1023;
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023)
          v17 = 1023;
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 0xE);
      ++v7;
      a5 += 32;
      a7 += 2 * a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B3AC(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 4;
    v9 = 1 << (a2 - 4) >> 1;
    v10 = *a3;
    v11 = a3[1];
    v12 = *a4;
    v13 = a4[1];
    do
    {
      v14 = 0;
      v15 = -2;
      do
      {
        v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023)
          v16 = 1023;
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023)
          v17 = 1023;
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 0x1E);
      ++v7;
      a5 += 64;
      a7 += 2 * a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B450(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 4;
    v9 = 1 << (a2 - 4) >> 1;
    v10 = *a3;
    v11 = a3[1];
    v12 = *a4;
    v13 = a4[1];
    do
    {
      v14 = 0;
      v15 = -2;
      do
      {
        v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023)
          v16 = 1023;
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023)
          v17 = 1023;
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 0x3E);
      ++v7;
      a5 += 128;
      a7 += 2 * a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B4F4(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 4);
    v13 = a2 - 3;
    v14 = *a3;
    v15 = a3[1];
    v16 = *a6;
    v17 = a6[1];
    v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      v19 = 0;
      v20 = 1;
      do
      {
        v21 = v20;
        v22 = 2 * v19;
        v23 = (v12 + v14 * *(unsigned __int16 *)(a5 + 2 * v19) + v16 * *(unsigned __int16 *)(a8 + 2 * v19)) >> v13;
        if (v23 >= 1023)
          v23 = 1023;
        *(_WORD *)(a10 + 2 * v19) = v23 & ~(unsigned __int16)(v23 >> 31);
        v24 = (v18 + v15 * *(unsigned __int16 *)(a5 + (v22 | 2)) + v17 * *(unsigned __int16 *)(a8 + (v22 | 2))) >> v13;
        if (v24 >= 1023)
          v24 = 1023;
        *(_WORD *)(a10 + (v22 | 2)) = v24 & ~(unsigned __int16)(v24 >> 31);
        v19 = 2;
        v20 = 0;
      }
      while ((v21 & 1) != 0);
      ++v10;
      a5 += 8;
      a8 += 8;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B5C4(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 4);
    v13 = a2 - 3;
    v14 = *a3;
    v15 = a3[1];
    v16 = *a6;
    v17 = a6[1];
    v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      v19 = 0;
      v20 = -2;
      do
      {
        v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023)
          v21 = 1023;
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023)
          v22 = 1023;
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 6);
      ++v10;
      a5 += 16;
      a8 += 16;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B69C(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 4);
    v13 = a2 - 3;
    v14 = *a3;
    v15 = a3[1];
    v16 = *a6;
    v17 = a6[1];
    v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      v19 = 0;
      v20 = -2;
      do
      {
        v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023)
          v21 = 1023;
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023)
          v22 = 1023;
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 0xE);
      ++v10;
      a5 += 32;
      a8 += 32;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B774(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 4);
    v13 = a2 - 3;
    v14 = *a3;
    v15 = a3[1];
    v16 = *a6;
    v17 = a6[1];
    v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      v19 = 0;
      v20 = -2;
      do
      {
        v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023)
          v21 = 1023;
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023)
          v22 = 1023;
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 0x1E);
      ++v10;
      a5 += 64;
      a8 += 64;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B84C(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 4);
    v13 = a2 - 3;
    v14 = *a3;
    v15 = a3[1];
    v16 = *a6;
    v17 = a6[1];
    v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      v19 = 0;
      v20 = -2;
      do
      {
        v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023)
          v21 = 1023;
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023)
          v22 = 1023;
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 0x3E);
      ++v10;
      a5 += 128;
      a8 += 128;
      a10 += 2 * a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B924(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 16; i += 2)
      {
        v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023)
          v9 = 1023;
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B98C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 32; i += 2)
      {
        v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023)
          v9 = 1023;
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979B9F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 64; i += 2)
      {
        v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023)
          v9 = 1023;
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BA5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 128; i += 2)
      {
        v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023)
          v9 = 1023;
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BAC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 4; ++i)
        *(_BYTE *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BB14(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 8; ++i)
        *(_BYTE *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BB64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 16; ++i)
        *(_BYTE *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BBB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 32; ++i)
        *(_BYTE *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BC04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 64; ++i)
        *(_BYTE *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BC54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 4; ++i)
        *(_BYTE *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BCC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 8; ++i)
        *(_BYTE *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BD2C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 16; ++i)
        *(_BYTE *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BD98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 32; ++i)
        *(_BYTE *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BE04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  int v11;
  uint64_t i;

  if ((int)result >= 1)
  {
    v11 = 0;
    do
    {
      for (i = 0; i != 64; ++i)
        *(_BYTE *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BE70(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 6;
    v9 = 1 << (a2 - 6) >> 1;
    do
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = v11;
        v13 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10)) >> v8) + *a4;
        if (v13 >= 255)
          v13 = 255;
        *(_BYTE *)(a7 + v10) = v13 & ~(v13 >> 31);
        v14 = v10 | 1;
        v15 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v14)) >> v8) + a4[1];
        if (v15 >= 255)
          v15 = 255;
        *(_BYTE *)(a7 + v14) = v15 & ~(v15 >> 31);
        v10 = 2;
        v11 = 0;
      }
      while ((v12 & 1) != 0);
      ++v7;
      a5 += 4;
      a7 += a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BF14(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 6;
    v9 = 1 << (a2 - 6) >> 1;
    do
    {
      v10 = 1;
      do
      {
        v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255)
          v11 = 255;
        *(_BYTE *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a7 + v10) = v12 & ~(v12 >> 31);
        v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 6);
      ++v7;
      a5 += 8;
      a7 += a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979BFB8(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 6;
    v9 = 1 << (a2 - 6) >> 1;
    do
    {
      v10 = 1;
      do
      {
        v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255)
          v11 = 255;
        *(_BYTE *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a7 + v10) = v12 & ~(v12 >> 31);
        v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 0xE);
      ++v7;
      a5 += 16;
      a7 += a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C05C(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 6;
    v9 = 1 << (a2 - 6) >> 1;
    do
    {
      v10 = 1;
      do
      {
        v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255)
          v11 = 255;
        *(_BYTE *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a7 + v10) = v12 & ~(v12 >> 31);
        v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 0x1E);
      ++v7;
      a5 += 32;
      a7 += a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C100(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;

  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = a2 - 6;
    v9 = 1 << (a2 - 6) >> 1;
    do
    {
      v10 = 1;
      do
      {
        v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255)
          v11 = 255;
        *(_BYTE *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255)
          v12 = 255;
        *(_BYTE *)(a7 + v10) = v12 & ~(v12 >> 31);
        v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 0x3E);
      ++v7;
      a5 += 64;
      a7 += a6;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C1A4(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 6);
    v13 = a2 - 5;
    v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15) + *a6 * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v15) = v17 & ~(v17 >> 31);
        v18 = v16;
        v19 = v15 | 1;
        v20 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v19) + a6[1] * *(unsigned __int8 *)(a8 + v19)) >> v13;
        if (v20 >= 255)
          v20 = 255;
        *(_BYTE *)(a10 + v19) = v20 & ~(v20 >> 31);
        v15 = 2;
        v16 = 0;
      }
      while ((v18 & 1) != 0);
      ++v10;
      a5 += 4;
      a8 += 4;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C270(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 6);
    v13 = a2 - 5;
    v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      v15 = 1;
      do
      {
        v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255)
          v16 = 255;
        *(_BYTE *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v15) = v17 & ~(v17 >> 31);
        v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 6);
      ++v10;
      a5 += 8;
      a8 += 8;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C348(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 6);
    v13 = a2 - 5;
    v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      v15 = 1;
      do
      {
        v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255)
          v16 = 255;
        *(_BYTE *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v15) = v17 & ~(v17 >> 31);
        v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 0xE);
      ++v10;
      a5 += 16;
      a8 += 16;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C420(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 6);
    v13 = a2 - 5;
    v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      v15 = 1;
      do
      {
        v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255)
          v16 = 255;
        *(_BYTE *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v15) = v17 & ~(v17 >> 31);
        v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 0x1E);
      ++v10;
      a5 += 32;
      a8 += 32;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C4F8(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;

  if ((int)result >= 1)
  {
    v10 = 0;
    v12 = (*a7 + *a4 + 1) << (a2 - 6);
    v13 = a2 - 5;
    v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      v15 = 1;
      do
      {
        v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255)
          v16 = 255;
        *(_BYTE *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255)
          v17 = 255;
        *(_BYTE *)(a10 + v15) = v17 & ~(v17 >> 31);
        v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 0x3E);
      ++v10;
      a5 += 64;
      a8 += 64;
      a10 += a9;
    }
    while (v10 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C5D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 8; ++i)
      {
        v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255)
          v9 = 255;
        *(_BYTE *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C62C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 16; ++i)
      {
        v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255)
          v9 = 255;
        *(_BYTE *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C688(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 32; ++i)
      {
        v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255)
          v9 = 255;
        *(_BYTE *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C6E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t i;
  int v9;

  if ((int)result >= 1)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 64; ++i)
      {
        v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255)
          v9 = 255;
        *(_BYTE *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C979C740(uint64_t result, __int16 a2, __int16 a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  int v28;
  int v29;
  __int16 v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;

  v8 = (__int16)a7 >> 2;
  if (a7 << 16 <= -65536)
    v8 = -(-(__int16)a7 >> 2);
  v9 = (a7 >> 16) >> 2;
  if (a7 < 0)
    v9 = -(-(a7 >> 16) >> 2);
  v10 = 12708;
  if (a8)
    v10 = 12716;
  v11 = *(_DWORD *)(result + v10);
  v12 = 12712;
  if (a8)
    v12 = 12720;
  v13 = *(_DWORD *)(result + v12);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 12944) + 4760) + 232))
    v14 = 0;
  else
    v14 = -3 - a5;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 12944) + 4760) + 232))
    v15 = 0;
  else
    v15 = -3 - a4;
  v16 = v9 + a3;
  v17 = v16 - v13;
  v18 = v13 + v16;
  v19 = v8 + a2;
  v20 = v19 - v11;
  v21 = v11 + v19;
  v22 = result + 4 * a6;
  v23 = *(_DWORD *)(v22 + 12700) + 2;
  if (v17 >= v23)
    v24 = *(_DWORD *)(v22 + 12700) + 2;
  else
    LOWORD(v24) = v17;
  if (v17 <= v14)
    v25 = v14;
  else
    v25 = v24;
  v26 = 4 * (v25 - a3);
  if (v18 < v23)
    LOWORD(v23) = v18;
  if (v18 > v14)
    LOWORD(v14) = v23;
  v27 = 4 * (v14 - a3);
  v28 = *(_DWORD *)(v22 + 12692) + 2;
  v29 = v20;
  if (v20 >= v28)
    v20 = v28;
  if (v29 <= v15)
    v30 = v15;
  else
    v30 = v20;
  v31 = 4 * (v30 - a2);
  if (v21 < v28)
    LOWORD(v28) = v21;
  if (v21 > v15)
    LOWORD(v15) = v28;
  v32 = v27 - v26;
  v33 = v15 - a2;
  v34 = (__int16)(4 * v33) - v31;
  v33 *= 4;
  *(_WORD *)(result + 12740) = v26;
  *(_WORD *)(result + 12742) = v27;
  *(_WORD *)(result + 12736) = v31;
  *(_WORD *)(result + 12738) = v33;
  *(_WORD *)(result + 12748) = v26 + (v32 >> 3);
  *(_WORD *)(result + 12750) = v27 - (v32 >> 3);
  *(_WORD *)(result + 12744) = v31 + (v34 >> 3);
  *(_WORD *)(result + 12746) = v33 - (v34 >> 3);
  return result;
}

uint64_t sub_1C979C8A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unsigned int *a10, char a11)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v30)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int);
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v49)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int);
  uint64_t v50;
  _QWORD *v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;

  v16 = *(unsigned __int8 *)(*(_QWORD *)(a1[1618] + 4760) + 207);
  v17 = a1[1619];
  v18 = a1[1607];
  v19 = a1[1608];
  *a10 = a4;
  a10[1] = a5;
  *((_QWORD *)a10 + 2) = v18;
  if ((int)a5 >= (int)a4)
    v20 = a4;
  else
    v20 = a5;
  v21 = v17 + 176;
  if ((int)a5 >= 9 && (int)a4 >= 9 && v16 == 1)
  {
    v55 = a6;
    a10[2] = 3;
    *((_QWORD *)a10 + 3) = v19;
    *((_QWORD *)a10 + 4) = a8;
    v22 = __clz(__rbit32(v20)) - 2;
    *((_QWORD *)a10 + 5) = *(_QWORD *)(v21 + 8 * v22 + 120);
    v54 = v22;
    *((_QWORD *)a10 + 6) = *(_QWORD *)(v17 + 8 * v22 + 528);
    v23 = *a1;
    *(_DWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 32) = -1;
    *(_WORD *)(v23 + 44) = 3;
    v24 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[1646];
    v25 = a1[1647];
    v26 = (uint64_t *)((char *)a1 + (v25 >> 1));
    if ((v25 & 1) != 0)
      v24 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v26 + v24);
    v27 = a7;
    v24(v26, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    v30 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))a1[1646];
    v31 = a1[1647];
    v32 = (uint64_t *)((char *)a1 + (v31 >> 1));
    if ((v31 & 1) != 0)
      v30 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))(*v32 + v30);
    LOBYTE(v52) = a11;
    v30(v32, a2, a3, a4, a5, v55, v27, 0, a8, a9, a10, v52);
    v33 = a1[1619];
    v34 = a1[1607];
    v35 = a1[1608];
    *a10 = a4;
    a10[1] = a5;
    a10[2] = 2;
    *((_QWORD *)a10 + 2) = v34;
    *((_QWORD *)a10 + 3) = v35;
    v36 = v33 + 8 * v54;
    v37 = *(_QWORD *)(v36 + 256);
    *((_QWORD *)a10 + 4) = a8;
    *((_QWORD *)a10 + 5) = v37;
    *((_QWORD *)a10 + 6) = *(_QWORD *)(v36 + 528);
    v38 = *a1;
    *(_WORD *)(v38 + 44) = 2;
    sub_1C979CBC8((uint64_t)a1, v38, a2, a3, a4, a5, a8, a9, v55);
    result = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a10 + 5))(*a10, a10[1], *((_QWORD *)a10 + 2), *((_QWORD *)a10 + 3), a9, *((_QWORD *)a10 + 4));
    v40 = *a1;
    *(_QWORD *)(v40 + 16) = result;
    *(_QWORD *)(v40 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v40 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v40 + 40)) >> (8 * (*(_WORD *)(v40 + 44) == 0)))
                          + result;
  }
  else
  {
    a10[2] = 2;
    *((_QWORD *)a10 + 3) = v19;
    *((_QWORD *)a10 + 4) = a8;
    v41 = 8 * __clz(__rbit32(v20)) - 16;
    *((_QWORD *)a10 + 5) = *(_QWORD *)(v21 + v41 + 80);
    *((_QWORD *)a10 + 6) = *(_QWORD *)(v17 + v41 + 528);
    v42 = *a1;
    *(_DWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = -1;
    *(_WORD *)(v42 + 44) = 2;
    v43 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[1646];
    v44 = a1[1647];
    v45 = (uint64_t *)((char *)a1 + (v44 >> 1));
    if ((v44 & 1) != 0)
      v43 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v45 + v43);
    v46 = a7;
    v43(v45, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    v49 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))a1[1646];
    v50 = a1[1647];
    v51 = (uint64_t *)((char *)a1 + (v50 >> 1));
    if ((v50 & 1) != 0)
      v49 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int))(*v51 + v49);
    LOBYTE(v53) = a11;
    return v49(v51, a2, a3, a4, a5, a6, v46, 0, a8, a9, a10, v53);
  }
  return result;
}

uint64_t sub_1C979CBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  _QWORD *v12;

  v9 = a1 + 16 * (((*(_WORD *)(a2 + 4 * a9 + 6) | *(_WORD *)(a2 + 4 * a9 + 4)) & 1) == 0);
  v10 = *(uint64_t (**)(_QWORD *))(v9 + 13040);
  v11 = *(_QWORD *)(v9 + 13048);
  v12 = (_QWORD *)(a1 + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *))(*v12 + v10);
  return v10(v12);
}

uint64_t sub_1C979CC08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13)
{
  BOOL v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int *v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  char v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  int v50;
  BOOL v51;
  _BOOL4 v52;
  _BOOL4 v53;
  int v54;
  unsigned int v55;
  _BOOL4 v56;
  BOOL v57;
  _BOOL4 v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  int v66;
  unsigned int v67;
  _DWORD v68[2];
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  _WORD v72[7];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v68[0] = 0;
  v62 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFF0000uLL, v68);
  v57 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFFuLL, v68);
  v51 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x10000uLL, v68);
  v66 = a6;
  v67 = a5;
  v20 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 1uLL, v68);
  v37 = 0;
  if (!v62 && !v57 && !v51 && !v20)
  {
    if (a13 <= 1)
      return v68[0];
    v37 = 1;
  }
  v21 = 0;
  while (1)
  {
    v47 = v21;
    v22 = (unsigned int *)((char *)&unk_1C983318C + v21);
    v58 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, *(unsigned int *)((char *)&unk_1C983318C + v21 + 16), v68);
    v59 = v58 | sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[5], v68);
    v52 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[6], v68);
    v23 = v59 | v52 | sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[7], v68);
    if (a13 == 1 && (v23 & 1) == 0)
      break;
    v60 = v23;
    v53 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[8], v68);
    v54 = v53 | sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[9], v68);
    v44 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[10], v68);
    if (((v60 | v54 | v44 | sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[11], v68)) & 1) != 0)
    {
      v24 = v47;
    }
    else
    {
      ++v37;
      v24 = v47;
      if (v37 >= a13)
        return v68[0];
    }
    v21 = v24 + 32;
    if (v21 == 96)
    {
      v25 = 0;
      v70 = 0x10000000100;
      v71 = 0;
      memset(v72, 0, sizeof(v72));
      v69 = 257;
      v26 = 4;
      do
      {
        v36 = v25;
        v27 = (int *)((char *)&unk_1C983318C + 32 * v26);
        v61 = *v27;
        v63 = 1 << v26;
        v48 = sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, *v27, v68);
        v55 = v27[1];
        v49 = v48 | sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, v55, v68);
        v45 = v27[2];
        v42 = sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, v45, v68);
        v38 = v27[3];
        v28 = sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, v38, v68);
        *((_BYTE *)&v68[1] + v63 + 3) = 1;
        v29 = v49 | (v42 || v28);
        v30 = v63 >> 2;
        v41 = (__int16)v55 >> 2;
        v40 = v45 >> 18;
        v39 = (__int16)v38 >> 2;
        v31 = -3;
        v32 = v30;
        v43 = v30;
        do
        {
          if (!*((_BYTE *)&v68[1] + v32 + 3))
          {
            v64 = v29;
            v46 = sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unint64_t)(unsigned __int16)((v61 >> 18) * (v31 + 4)) << 16, v68);
            v50 = v46 | sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unsigned __int16)(v41 * (v31 + 4)), v68);
            v56 = sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unint64_t)(unsigned __int16)(v40 * (v31 + 4)) << 16, v68);
            v33 = sub_1C979D4AC(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unsigned __int16)(v39 * (v31 + 4)), v68);
            v30 = v43;
            v29 = v64 | v50 | (v56 || v33);
          }
          v32 += v30;
        }
        while (!__CFADD__(v31++, 1));
        if ((v29 & 1) == 0 && ++v37 >= a13)
          break;
        v25 = 1;
        v26 = 5;
      }
      while ((v36 & 1) == 0);
      return v68[0];
    }
  }
  return v68[0];
}

BOOL sub_1C979D4AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unint64_t a12, _DWORD *a13)
{
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  void (*v27)(_QWORD *);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;

  v15 = a6;
  *(_DWORD *)(a1[1] + 4 * a6 + 4) = ((a11 & 0xFFFF0000) + ((a12 >> 16) << 18)) & 0xFFFF0000 | (unsigned __int16)(a11 + 4 * a12);
  v16 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))a1[1634];
  v17 = a1[1635];
  v18 = (uint64_t *)((char *)a1 + (v17 >> 1));
  if ((v17 & 1) != 0)
    v16 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*v18 + v16);
  v16(v18, a1[1], a2, a3, a4, a5, a8, a9, a6);
  v19 = a1[1];
  v20 = v19 + 4 * v15;
  v21 = *(__int16 *)(v20 + 4) - (__int16)a7;
  v22 = *(__int16 *)(v20 + 6) - (a7 >> 16);
  if ((v21 + 64) >= 0x80)
  {
    if (v21 >= 0)
      v24 = v21;
    else
      v24 = -v21;
    v23 = 63 - 2 * __clz((v21 < 1) | (2 * v24));
  }
  else
  {
    v23 = byte_1C9858728[v21 + 64];
  }
  if ((v22 + 64) >= 0x80)
  {
    if (v22 >= 0)
      v26 = v22;
    else
      v26 = -v22;
    v25 = 63 - 2 * __clz((v22 < 1) | (2 * v26));
  }
  else
  {
    v25 = byte_1C9858728[v22 + 64];
  }
  *(_DWORD *)(v19 + 40) = v25 + v23;
  v27 = (void (*)(_QWORD *))a1[1656];
  v28 = a1[1657];
  v29 = (uint64_t *)((char *)a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *))(*v29 + v27);
  v27(v29);
  v31 = *a1;
  v30 = a1[1];
  v32 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v30 + 44) + 152)
        * (unint64_t)*(unsigned int *)(v30 + 40)) >> (8 * (*(_WORD *)(v30 + 44) == 0)))
      + *(_QWORD *)(v30 + 16);
  *(_QWORD *)(v30 + 32) = v32;
  v33 = *(_QWORD *)(v31 + 32);
  if (v32 < v33)
  {
    *(_BYTE *)(v31 + v15) = *(_BYTE *)(v30 + v15);
    *(_DWORD *)(v31 + 4 * v15 + 4) = *(_DWORD *)(v30 + 4 * v15 + 4);
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v30 + 16);
    *(_DWORD *)(v31 + 40) = *(_DWORD *)(v30 + 40);
    *(_QWORD *)(v31 + 32) = *(_QWORD *)(v30 + 32);
    LOWORD(v30) = a12;
    if ((a12 & 0x8000u) != 0)
      LODWORD(v30) = -(__int16)a12;
    LODWORD(v30) = (unsigned __int16)v30;
    LOWORD(v34) = WORD1(a12);
    if ((a12 & 0x80000000) != 0)
      v34 = -SWORD1(a12);
    if ((unsigned __int16)v30 <= (unsigned __int16)v34)
      LODWORD(v30) = (unsigned __int16)v34;
    *a13 = v30;
  }
  return v32 < v33;
}

uint64_t sub_1C979D6B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unsigned int v12;
  int v13;
  uint64_t result;
  int v15;
  int v22;
  _BOOL4 v23;
  int v24;
  _BOOL4 v25;
  int v27;
  _BOOL4 v33;
  int v34;

  v12 = *(_DWORD *)(*a1 + 4 * a6 + 4);
  v13 = (int)((v12 - (_DWORD)a11) << 16) >> 18;
  result = 1;
  if ((v13 - 2) >= 0xFFFFFFFD)
  {
    v15 = HIWORD(v12) - (a11 >> 16);
    if ((unsigned __int16)(v15 - 8) >= 0xFFF4u)
    {
      result = 0;
      v22 = (unsigned __int16)v13 | ((unsigned __int16)((__int16)v15 >> 2) << 16);
      if (v22 <= 65534)
      {
        if (v22 > -2)
        {
          if (v22 == -1)
          {
            v33 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFEFFFFuLL, &v34);
            v23 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFFFFFEuLL, &v34);
          }
          else
          {
            if (v22 != 1)
              return result;
            v33 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFF0002uLL, &v34);
            v23 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x10002uLL, &v34);
          }
        }
        else if (v22 == -65536)
        {
          v33 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFEFFFFuLL, &v34);
          v23 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFE0001uLL, &v34);
        }
        else
        {
          if (v22 != -65535)
            return result;
          v33 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFE0001uLL, &v34);
          v23 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFF0002uLL, &v34);
        }
        return v33 | v23;
      }
      if (v22 > 0x10000)
      {
        if (v22 != 65537)
        {
          if (v22 != 0x1FFFF)
            return result;
          v33 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x1FFFEuLL, &v34);
          v23 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x2FFFFuLL, &v34);
          return v33 | v23;
        }
        v27 = a7;
        v24 = a11;
        v25 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x10002uLL, &v34);
      }
      else
      {
        if (v22 == 0xFFFF)
        {
          v33 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFFFFFEuLL, &v34);
          v23 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x1FFFEuLL, &v34);
          return v33 | v23;
        }
        v27 = a7;
        v24 = a11;
        v25 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x2FFFFuLL, &v34);
      }
      v33 = v25;
      v23 = sub_1C979D4AC(a1, a2, a3, a4, a5, a6, v27, a8, a9, a10, v24, 0x20001uLL, &v34);
      return v33 | v23;
    }
  }
  return result;
}

uint64_t sub_1C979DA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  signed int v25;
  _DWORD v27[2];
  _DWORD v28[2];
  _BYTE v29[8200];
  uint64_t v30;

  v11 = MEMORY[0x1E0C80A78]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = v11;
  v30 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)(v11 + 12944)
                                                                                      + ((8 * ((v23 & 3) != 0)) | (16 * ((*(_QWORD *)&v23 & 0x30000) != 0)))
                                                                                      + 3224))(v20, v18, v23, v24, a9, (int)v20, v29);
  v28[0] = v15;
  v28[1] = v15;
  v27[0] = v13;
  v27[1] = v13;
  v25 = __clz(__rbit32(v21)) - 2;
  if (!v21)
    v25 = -2;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, _DWORD *, _BYTE *, uint64_t, uint64_t))(v22 + 8 * v25 + 13088))(v19, v17, v28, v27, v29, a10, a11);
}

uint64_t sub_1C979DBAC(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;

  result = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))a3 + 5))(*a3, a3[1], *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), a4, *((_QWORD *)a3 + 4));
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1C979DBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;

  v6 = a1 + 16;
  v7 = (unsigned int *)(a1 + 12320);
  if (*(_QWORD *)(a1 + 12664))
    v8 = *(_QWORD *)(a1 + 12664);
  else
    v8 = a1 + 12320;
  *(_QWORD *)(a2 + 16) = (*(unsigned int (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(a3 + 48))(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4, *(_QWORD *)(a3 + 32), v8);
  if (*(_QWORD *)(a1 + 12664))
    v9 = *(unsigned int **)(a1 + 12664);
  else
    v9 = v7;
  return sub_1C9798050(v6, (char *)a2, v9);
}

uint64_t sub_1C979DC5C(uint64_t result, int a2, int a3, int a4, int a5, unsigned int a6, __int16 *a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v7 = result + 4 * a6;
  v8 = 4 * *(_DWORD *)(v7 + 12700) + 8;
  v9 = a7[1] + 4 * a3;
  if (v9 < v8)
    LOWORD(v8) = a7[1] + 4 * a3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 12944) + 4760) + 232))
    v10 = 0;
  else
    v10 = -12 - 4 * a5;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 12944) + 4760) + 232))
    v11 = 0;
  else
    v11 = -12 - 4 * a4;
  if (v9 > v10)
    LOWORD(v10) = v8;
  a7[1] = v10 - 4 * a3;
  v12 = 4 * *(_DWORD *)(v7 + 12692) + 8;
  v13 = *a7 + 4 * a2;
  if (v13 < v12)
    LOWORD(v12) = *a7 + 4 * a2;
  if (v13 <= v11)
    LOWORD(v12) = v11;
  *a7 = v12 - 4 * a2;
  return result;
}

_QWORD *sub_1C979DCE0(_QWORD *result, unsigned int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  uint64_t i;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *);
  uint64_t (*v51)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int16 *v59;
  unsigned int v60;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  __int16 v69;

  v64[a6] = *(_BYTE *)(a11 + a6);
  v13 = 1 - a6;
  v64[v13] = *(_BYTE *)(a11 + v13);
  *(_DWORD *)&v64[4 * v13 + 4] = *(_DWORD *)(a11 + 4 * v13 + 4);
  v56 = result[1608];
  v57 = result[1607];
  v14 = result[1619] + 8 * __clz(__rbit32(a4));
  v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v14 + 512);
  v51 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 200);
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v67 = -1;
  v69 = 1;
  if (*(_BYTE *)(a7 + 48))
  {
    v16 = a6;
    v17 = (uint64_t)result;
    v18 = 0;
    v59 = (__int16 *)&v64[4 * a6 + 4];
    v20 = a4 > 4 && a4 == a5;
    v53 = v20;
    v47 = (unsigned int *)(result + 1540);
    v48 = (uint64_t)(result + 2);
    v49 = a6;
    v46 = (int *)(a11 + 4 * a6 + 4);
    v54 = result;
    v52 = a7;
    v60 = a4;
    do
    {
      v21 = *(_DWORD *)(a7 + 4 * v18);
      *(_DWORD *)v59 = v21;
      sub_1C979DC5C(v17, a2, a3, a4, a5, v16, v59);
      v22 = (__int16)v21;
      v23 = (__int16)v21 - (__int16)*(_DWORD *)a8;
      if ((v23 + 64) >= 0x80)
      {
        if (v23 >= 0)
          v25 = (__int16)v21 - (__int16)*(_DWORD *)a8;
        else
          v25 = (__int16)*(_DWORD *)a8 - (__int16)v21;
        v24 = 63 - 2 * __clz((v23 < 1) | (2 * v25));
      }
      else
      {
        v24 = byte_1C9858728[v23 + 64];
      }
      v26 = v21 >> 16;
      v27 = (v21 >> 16) - (*(int *)a8 >> 16);
      if ((v27 + 64) >= 0x80)
      {
        if (v27 >= 0)
          v29 = (v21 >> 16) - (*(int *)a8 >> 16);
        else
          v29 = (*(int *)a8 >> 16) - (v21 >> 16);
        v28 = 63 - 2 * __clz((v27 < 1) | (2 * v29));
      }
      else
      {
        v28 = byte_1C9858728[v27 + 64];
      }
      v30 = v28 + v24;
      v68 = v30;
      v31 = *(unsigned __int8 *)(a8 + 48);
      v58 = v21;
      v32 = 0;
      if (v31 >= 2)
      {
        for (i = 1; i != v31; ++i)
        {
          v34 = *(_DWORD *)(a8 + 4 * i);
          v35 = v22 - (__int16)v34;
          if ((v35 + 64) >= 0x80)
          {
            if (v35 >= 0)
              v37 = v22 - (__int16)v34;
            else
              v37 = (__int16)v34 - v22;
            v36 = 63 - 2 * __clz((v35 < 1) | (2 * v37));
          }
          else
          {
            v36 = byte_1C9858728[v35 + 64];
          }
          v38 = v26 - (v34 >> 16);
          if ((v38 + 64) >= 0x80)
          {
            if (v38 >= 0)
              v40 = v38;
            else
              v40 = -v38;
            v39 = 63 - 2 * __clz((v38 < 1) | (2 * v40));
          }
          else
          {
            v39 = byte_1C9858728[v38 + 64];
          }
          v41 = v39 + v36;
          if (v41 < v30)
          {
            v68 = v41;
            v30 = v41;
            v32 = i;
          }
        }
      }
      sub_1C979CBC8(v17, (uint64_t)v64, a2, a3, v60, a5, a9, a10, v16);
      if (v53)
      {
        if (*(_QWORD *)(v17 + 12664))
          v42 = *(unsigned int **)(v17 + 12664);
        else
          v42 = v47;
        v43 = v50(v57, v56, a10, a9, v42);
        v65 = v43;
        if (*(_QWORD *)(v17 + 12664))
          v44 = *(unsigned int **)(v17 + 12664);
        else
          v44 = v47;
        result = (_QWORD *)sub_1C9798050(v48, v64, v44);
      }
      else
      {
        result = (_QWORD *)v51(v60, a5, v57, v56, a10, a9);
        v43 = result;
        v65 = result;
      }
      a7 = v52;
      if (a13)
        *(_QWORD *)(a13 + 8 * v18) = v43;
      v17 = (uint64_t)v54;
      v67 = ((*(unsigned __int16 *)(v54[1619] + 2 * v69 + 152) * (unint64_t)v68) >> (8 * (v69 == 0))) + v43;
      a4 = v60;
      if (v67 < *(_QWORD *)(a11 + 32))
      {
        *(_DWORD *)v59 = v58;
        *(_BYTE *)(a11 + v49) = v64[v49];
        *v46 = v58;
        v45 = v67;
        *(_QWORD *)(a11 + 16) = v65;
        *(_DWORD *)(a11 + 40) = v68;
        *(_QWORD *)(a11 + 32) = v45;
        *a12 = v32;
      }
      ++v18;
      v16 = a6;
    }
    while (v18 < *(unsigned __int8 *)(v52 + 48));
  }
  return result;
}

uint64_t sub_1C979E0C8(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;

  v5 = *(_DWORD *)(a3 + 4 * a5 + 4);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(__int16 *)(a3 + 44);
  v8 = *(_WORD *)(a3 + 44) == 0;
  v9 = *a4;
  v10 = *(_DWORD *)(a3 + 40) + 1;
  *(_DWORD *)(a3 + 40) = v10;
  v11 = 8 * v8;
  v12 = *(unsigned __int16 *)(result + 2 * v7 + 152);
  v13 = ((v12 * (unint64_t)v10) >> v11) + v6;
  *(_QWORD *)(a3 + 32) = v13;
  v14 = *(unsigned __int8 *)(a2 + 48);
  if (*(_BYTE *)(a2 + 48))
  {
    v15 = 0;
    v16 = (__int16)v5;
    v17 = v5 >> 16;
    result = *a4;
    do
    {
      if (v15 != result)
      {
        v18 = *(_DWORD *)(a2 + 4 * v15);
        v19 = v16 - (__int16)v18;
        if ((v19 + 64) >= 0x80)
        {
          if (v19 >= 0)
            v21 = v16 - (__int16)v18;
          else
            v21 = (__int16)v18 - v16;
          v20 = 63 - 2 * __clz((v19 < 1) | (2 * v21));
        }
        else
        {
          v20 = byte_1C9858728[v19 + 64];
        }
        v22 = v17 - (v18 >> 16);
        if ((v22 + 64) >= 0x80)
        {
          if (v22 >= 0)
            v24 = v22;
          else
            v24 = -v22;
          v23 = 63 - 2 * __clz((v22 < 1) | (2 * v24));
        }
        else
        {
          v23 = byte_1C9858728[v22 + 64];
        }
        v25 = v20 + v23 + 1;
        v26 = ((v12 * (unint64_t)v25) >> v11) + v6;
        if (v26 < v13)
        {
          *(_DWORD *)(a3 + 40) = v25;
          *(_QWORD *)(a3 + 32) = v26;
          result = *a4;
          v13 = ((v12 * (unint64_t)v25) >> v11) + v6;
          v9 = v15;
        }
      }
      ++v15;
    }
    while (v14 != v15);
  }
  *a4 = v9;
  return result;
}

uint64_t sub_1C979E1E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;

  v4 = *(_DWORD *)(a2 + 4 * a3 + 4);
  v5 = (__int16)v4;
  v6 = v4 >> 16;
  if ((a4 & 0x80000000) != 0)
  {
    v10 = 0;
    v11 = -1;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 4 * a4);
    v8 = (__int16)v4 - (__int16)v7;
    if ((v8 + 64) >= 0x80)
    {
      if (v8 >= 0)
        v12 = v5 - (__int16)v7;
      else
        v12 = (__int16)v7 - v5;
      v9 = 63 - 2 * __clz((v8 < 1) | (2 * v12));
    }
    else
    {
      v9 = byte_1C9858728[v8 + 64];
    }
    v13 = v6 - (v7 >> 16);
    if ((v13 + 64) >= 0x80)
    {
      if (v13 >= 0)
        v15 = v13;
      else
        v15 = -v13;
      v14 = 63 - 2 * __clz((v13 < 1) | (2 * v15));
    }
    else
    {
      v14 = byte_1C9858728[v13 + 64];
    }
    v11 = v9 + v14 + 1;
    v10 = a4;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v16 = 0;
    v17 = a4;
    do
    {
      if (v17 != v16)
      {
        v18 = *(_DWORD *)(a1 + 4 * v16);
        v19 = v5 - (__int16)v18;
        if ((v19 + 64) >= 0x80)
        {
          if (v19 >= 0)
            v21 = v5 - (__int16)v18;
          else
            v21 = (__int16)v18 - v5;
          v20 = 63 - 2 * __clz((v19 < 1) | (2 * v21));
        }
        else
        {
          v20 = byte_1C9858728[v19 + 64];
        }
        v22 = v6 - (v18 >> 16);
        if ((v22 + 64) >= 0x80)
        {
          if (v22 >= 0)
            v24 = v22;
          else
            v24 = -v22;
          v23 = 63 - 2 * __clz((v22 < 1) | (2 * v24));
        }
        else
        {
          v23 = byte_1C9858728[v22 + 64];
        }
        v25 = v20 + v23;
        if (v25 + 1 >= v11)
          v10 = v10;
        else
          v10 = v16;
        if (v25 + 1 < v11)
          v11 = v25 + 1;
      }
      ++v16;
    }
    while (*(unsigned __int8 *)(a1 + 48) != v16);
  }
  *(_DWORD *)(a2 + 40) += v11;
  return v10;
}

uint64_t sub_1C979E35C(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;

  v16 = a2[1];
  if (v16 == 15)
    return sub_1C979CBC8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  v17 = *a2;
  if (v17 == 15)
    return sub_1C979CBC8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 1);
  if (*(_DWORD *)(*(_QWORD *)(a1[1618] + 1672 + 16 * v17) + 1024) == *(_DWORD *)(*(_QWORD *)(a1[1618]
                                                                                                + 1672
                                                                                                + 16 * v16
                                                                                                + 256)
                                                                                    + 1024)
    && *((_DWORD *)a2 + 1) == *((_DWORD *)a2 + 2))
  {
    return sub_1C979CBC8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  }
  v23 = __clz(__rbit32(a5)) - 2;
  v22 = a1[1615];
  v20 = a1[1612];
  sub_1C979CBC8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v20, 0);
  sub_1C979CBC8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v22, 1);
  if ((_DWORD)a5)
    v21 = v23;
  else
    v21 = -2;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))a1[v21 + 1620])(a6, (int)a5, v20, (int)a5, v22, a7, a8);
}

uint64_t sub_1C979E504(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 152);
  if ((v2 - 7) < 0xFFFFFFFA)
  {
    if (v2 == 8)
    {
      v3 = *(unsigned __int8 *)(a1 + 159);
      if (v3 == 5 || dword_1ED1ACCC0 <= 2)
        return 255;
      goto LABEL_12;
    }
LABEL_10:
    if (dword_1ED1ACCC0 < 3)
      return 255;
    v3 = *(unsigned __int8 *)(a1 + 159);
LABEL_12:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unknown level %d.%d requested, writing level 8.5 instead!\n", v2, v3);
    syslog(27, "Unknown level %d.%d requested, writing level 8.5 instead!\n", *(unsigned __int8 *)(a1 + 152), *(unsigned __int8 *)(a1 + 159));
    return 255;
  }
  v5 = *(unsigned __int8 *)(a1 + 159);
  if (v5 > byte_1C9833418[v2 - 1])
    goto LABEL_10;
  return word_1C9833364[3 * *(unsigned __int8 *)(a1 + 152) - 3 + v5];
}

uint64_t sub_1C979E5E8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  uint64_t result;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  double v34;
  FILE *v35;
  const char *v36;
  const char *v37;
  size_t v38;
  unsigned int v39;
  double v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  int *v44;
  _DWORD *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  int *v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v52;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  FILE *v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned __int16 *v64;
  uint64_t i;
  BOOL v66;
  int v67;

  v4 = *(_DWORD *)(a2 + 96);
  if ((v4 - 33) < 5 || v4 == 1)
  {
    v6 = *(char *)(a2 + 290);
    if (v6 <= *(char *)(a2 + 291))
      LOBYTE(v6) = *(_BYTE *)(a2 + 291);
    v7 = (v6 - 9);
    if (v7 >= 2)
      v8 = 1;
    else
      v8 = 2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = 1 << *(_BYTE *)(a2 + 177);
    *(_DWORD *)(a1 + 168) = v8;
    v10 = ((v9 - 1 + *(__int16 *)(a2 + 106)) & -v9) * ((v9 - 1 + *(__int16 *)(a2 + 108)) & -v9);
    v11 = (*(double *)(a2 + 112) * (double)v10);
    if (v7 >= 2 && v10 <= 0x220000 && v11 <= 0x3FC0000)
    {
      *(_BYTE *)(a1 + 152) = 4;
      *(_BYTE *)(a1 + 159) = 0;
LABEL_18:
      v12 = *(_BYTE *)(a1 + 7) & 0xFE;
LABEL_41:
      *(_BYTE *)(a1 + 7) = v12;
      goto LABEL_42;
    }
    if (v10 <= 0x220000 && v11 <= 0x7F80000)
    {
      *(_BYTE *)(a1 + 152) = 4;
      *(_BYTE *)(a1 + 159) = 1;
      goto LABEL_18;
    }
    if (v10 > 0x880000)
      goto LABEL_22;
    if (v11 <= 0xFF00000)
    {
      *(_BYTE *)(a1 + 152) = 5;
      *(_BYTE *)(a1 + 159) = 0;
      goto LABEL_40;
    }
    if (v11 > 0x1FE00000)
    {
LABEL_22:
      if (dword_1ED1ACCC0 >= 7)
      {
        fwrite("Set to L5.1 high tier, but it is not enough for this encode!\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(31, "Set to L5.1 high tier, but it is not enough for this encode!\n");
      }
    }
    *(_BYTE *)(a1 + 152) = 5;
    *(_BYTE *)(a1 + 159) = 1;
LABEL_40:
    v12 = *(_BYTE *)(a1 + 7) | 1;
    goto LABEL_41;
  }
  if (*(char *)(a2 + 290) <= *(char *)(a2 + 291))
    v13 = *(char *)(a2 + 291);
  else
    v13 = *(char *)(a2 + 290);
  if (v13 >= 11)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "bit depth %d not supported\n", v13);
      syslog(27, "bit depth %d not supported\n");
    }
    return 4294954394;
  }
  v14 = *(char *)(a2 + 169) + *(char *)(a2 + 168);
  *(_DWORD *)(a1 + 168) = 0;
  v15 = *(_DWORD *)(a2 + 296);
  if (v15)
  {
    if (v15 != 1)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v35 = (FILE *)*MEMORY[0x1E0C80C10];
        v36 = "Unable to determine a profile\n";
        v37 = "Unable to determine a profile\n";
        v38 = 30;
        goto LABEL_89;
      }
      return 4294954394;
    }
    if (v14)
      v16 = 1;
    else
      v16 = 3;
    if (v13 == 8)
      v17 = v16;
    else
      v17 = 2;
  }
  else if (v13 == 8)
  {
    v17 = 2020;
  }
  else
  {
    v17 = 1892;
  }
  *(_DWORD *)(a1 + 168) = v17;
  v28 = 1 << *(_BYTE *)(a2 + 177);
  v29 = v28 - 1;
  v30 = -v28;
  v31 = (v28 - 1 + *(__int16 *)(a2 + 106)) & -v28;
  v32 = (v29 + *(__int16 *)(a2 + 108)) & v30;
  if (v31 <= v32)
    v33 = (v29 + *(__int16 *)(a2 + 108)) & v30;
  else
    v33 = v31;
  v34 = *(double *)(a2 + 112);
  if (v34 == 0.0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v35 = (FILE *)*MEMORY[0x1E0C80C10];
      v36 = "fps cannot be 0\n";
      v37 = "fps cannot be 0\n";
      v38 = 16;
LABEL_89:
      fwrite(v37, v38, 1uLL, v35);
      syslog(27, v36);
      return 4294954394;
    }
    return 4294954394;
  }
  v39 = v31 * v32;
  v40 = v34 * (double)(v31 * v32);
  v41 = *(_DWORD *)(a2 + 188);
  if (!v41 && !*(_BYTE *)(a2 + 69) && dword_1ED1ACCC0 >= 7)
  {
    fwrite("requested bitrate is 0, ignoring level bitrate limits\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(31, "requested bitrate is 0, ignoring level bitrate limits\n");
  }
  v42 = 0;
  v43 = dword_1C98332F8;
  v44 = dword_1C9833388;
  *(_BYTE *)(a1 + 152) = 0;
  v45 = &unk_1C98332B0;
  v46 = word_1C9833340;
  while (2)
  {
    v47 = 0;
    v48 = v44;
    do
    {
      v49 = v43[v47];
      if (v49)
        v50 = v49 >= v39;
      else
        v50 = 0;
      if (v50 && v46[v47] && v33 <= v46[v47])
      {
        v52 = v45[v47];
        if (v52 && v52 >= v40)
        {
          v54 = v48[18];
          if (*v48 > v54)
            v54 = *v48;
          if (1000 * v54 >= v41)
          {
            *(_BYTE *)(a1 + 7) |= *v48 < v41;
            *(_BYTE *)(a1 + 152) = v42 + 1;
            v55 = *(_DWORD *)(a1 + 168);
            goto LABEL_120;
          }
        }
      }
      ++v47;
      ++v48;
    }
    while (v47 != 3);
    ++v42;
    v43 += 3;
    v44 += 3;
    v45 += 3;
    v46 += 3;
    if (v42 != 6)
      continue;
    break;
  }
  if (v14)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "luma(picture_size/picture_dim/sample_rate)/bit_rate is too big to fit in any level: (%d/%d/%d)/%d\n", v39, v33, v40, v41);
      syslog(27, "luma(picture_size/picture_dim/sample_rate)/bit_rate is too big to fit in any level: (%d/%d/%d)/%d\n");
    }
    return 4294954394;
  }
  if (*(_DWORD *)(a2 + 296) == 1)
    v67 = 3;
  else
    v67 = 6372;
  if (v13 == 8)
    v55 = v67;
  else
    v55 = 6148;
  *(_DWORD *)(a1 + 168) = v55;
  *(_BYTE *)(a1 + 152) = 8;
  LOBYTE(v47) = 5;
LABEL_120:
  *(_BYTE *)(a1 + 159) = v47;
  *(_BYTE *)(a1 + 8) = v55 & 0x1F;
  v56 = *(_DWORD *)(a2 + 100);
  if (v56 && v56 != v55)
  {
    if (v56 > 3)
    {
      if (!*(_BYTE *)(a2 + 69)
        || *(_DWORD *)(a2 + 296)
        || (v55 != 3044 || v56 != 2020) && (v56 != 1892 || ((v55 - 2916) & 0xFFFFFF7F) != 0))
      {
LABEL_153:
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "input profile %d is not applicable, suggesting %d\n", *(_DWORD *)(a2 + 100), v55);
          syslog(27, "input profile %d is not applicable, suggesting %d\n");
        }
        return 4294954394;
      }
    }
    else if (((dword_1C9833424[v56 - 1] >> v55) & 1) == 0)
    {
      goto LABEL_153;
    }
  }
  if (!*(_WORD *)(a2 + 104))
    goto LABEL_42;
  v57 = *(unsigned __int16 *)(a2 + 104);
  if (v57 < sub_1C979E504(a1))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v58 = (FILE *)*MEMORY[0x1E0C80C10];
      v59 = *(unsigned __int16 *)(a2 + 104);
      v60 = sub_1C979E504(a1);
      fprintf(v58, "input level %d is not applicable, suggesting %d\n", v59, v60);
      sub_1C979E504(a1);
      syslog(27, "input level %d is not applicable, suggesting %d\n");
    }
    return 4294954394;
  }
  v61 = *(unsigned __int16 *)(a2 + 104);
  if (v61 > sub_1C979E504(a1))
  {
    v62 = 0;
    v63 = *(unsigned __int16 *)(a2 + 104);
    *(_BYTE *)(a1 + 159) = 0;
    v64 = word_1C9833364;
    *(_BYTE *)(a1 + 152) = 0;
    while (2)
    {
      for (i = 0; i != 3; ++i)
      {
        if (v64[i])
          v66 = v64[i] == v63;
        else
          v66 = 0;
        if (v66)
        {
          *(_BYTE *)(a1 + 152) = v62 + 1;
          *(_BYTE *)(a1 + 159) = i;
          goto LABEL_42;
        }
      }
      ++v62;
      v64 += 3;
      if (v62 != 6)
        continue;
      break;
    }
  }
LABEL_42:
  v18 = *(unsigned __int8 *)(a1 + 8);
  if ((v18 - 1) >= 3)
    v19 = 1 << v18;
  else
    v19 = dword_1C9833424[(v18 - 1)];
  *(_DWORD *)(a1 + 16) = v19;
  v20 = sub_1C979E504(a1);
  *(_BYTE *)(a1 + 57) = v20;
  if (v20 == 255)
  {
    *(_QWORD *)(a1 + 68) = 0x8000000080000000;
LABEL_57:
    v25 = 16;
    goto LABEL_58;
  }
  v21 = *(unsigned __int8 *)(a1 + 152);
  if ((v21 - 7) <= 0xFFFFFFF9)
  {
    LODWORD(v22) = *(unsigned __int8 *)(a1 + 159);
LABEL_50:
    v23 = 0x7FFFFFFF;
    goto LABEL_52;
  }
  v22 = *(unsigned __int8 *)(a1 + 159);
  if (v22 > byte_1C9833418[v21 - 1])
    goto LABEL_50;
  v23 = dword_1C98332F8[3 * *(unsigned __int8 *)(a1 + 152) - 3 + v22];
LABEL_52:
  *(_DWORD *)(a1 + 68) = v23;
  *(_DWORD *)(a1 + 72) = dword_1C9833388[18 * (*(_BYTE *)(a1 + 7) & 1) - 3 + 3 * v21 + v22];
  v24 = (((1 << *(_BYTE *)(a2 + 177)) - 1 + *(__int16 *)(a2 + 106)) & -(1 << *(_BYTE *)(a2 + 177)))
      * (((1 << *(_BYTE *)(a2 + 177)) - 1 + *(__int16 *)(a2 + 108)) & -(1 << *(_BYTE *)(a2 + 177)));
  if (v24 <= v23 >> 2)
    goto LABEL_57;
  if (v24 <= v23 >> 1)
  {
    v25 = 12;
  }
  else if (v24 <= (3 * v23) >> 2)
  {
    v25 = 8;
  }
  else
  {
    v25 = 6;
  }
LABEL_58:
  *(_BYTE *)(a1 + 76) = v25;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 46) |= 1u;
  *(_BYTE *)(a1 + 47) |= 1u;
  *(_BYTE *)(a1 + 56) |= 1u;
  v26 = *(_DWORD *)(a1 + 168);
  if ((v26 & 0x20) != 0)
  {
    *(_BYTE *)(a1 + 48) |= 1u;
    if ((v26 & 0x40) == 0)
    {
LABEL_60:
      if ((v26 & 0x80) == 0)
        goto LABEL_61;
      goto LABEL_72;
    }
  }
  else if ((v26 & 0x40) == 0)
  {
    goto LABEL_60;
  }
  *(_BYTE *)(a1 + 49) |= 1u;
  if ((v26 & 0x80) == 0)
  {
LABEL_61:
    if ((v26 & 0x100) == 0)
      goto LABEL_62;
    goto LABEL_73;
  }
LABEL_72:
  *(_BYTE *)(a1 + 50) |= 1u;
  if ((v26 & 0x100) == 0)
  {
LABEL_62:
    if ((v26 & 0x200) == 0)
      goto LABEL_63;
    goto LABEL_74;
  }
LABEL_73:
  *(_BYTE *)(a1 + 51) |= 1u;
  if ((v26 & 0x200) == 0)
  {
LABEL_63:
    if ((v26 & 0x400) == 0)
      goto LABEL_64;
    goto LABEL_75;
  }
LABEL_74:
  *(_BYTE *)(a1 + 52) |= 1u;
  if ((v26 & 0x400) == 0)
  {
LABEL_64:
    if ((v26 & 0x800) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_75:
  *(_BYTE *)(a1 + 53) |= 1u;
  if ((v26 & 0x800) != 0)
LABEL_65:
    *(_BYTE *)(a1 + 54) |= 1u;
LABEL_66:
  if (v26 == 6372 || v26 == 6148)
    *(_BYTE *)(a1 + 55) |= 1u;
  result = 0;
  *(_WORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1C979EE74(unsigned __int8 *a1, int a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;

  v6 = &a1[a2];
  sub_1C9750D54(a3, *v6, 2);
  sub_1C9750D54(a3, (a1[7] >> a2) & 1, 1);
  v8 = v6[8];
  v7 = v6 + 8;
  sub_1C9750D54(a3, v8, 5);
  v9 = 0;
  v10 = &a1[4 * a2 + 16];
  do
    sub_1C9750D54(a3, (*(_DWORD *)v10 >> v9++) & 1, 1);
  while (v9 != 32);
  sub_1C9750D54(a3, (a1[44] >> a2) & 1, 1);
  sub_1C9750D54(a3, (a1[45] >> a2) & 1, 1);
  sub_1C9750D54(a3, (a1[46] >> a2) & 1, 1);
  sub_1C9750D54(a3, (a1[47] >> a2) & 1, 1);
  if (*v7 > 3u || (*v10 & 0x10) != 0)
  {
    sub_1C9750D54(a3, (a1[48] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[49] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[50] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[51] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[52] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[53] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[54] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[55] >> a2) & 1, 1);
    sub_1C9750D54(a3, (a1[56] >> a2) & 1, 1);
    v11 = 13;
  }
  else
  {
    v11 = 22;
  }
  sub_1C9750D54(a3, 0, v11);
  return sub_1C9750D54(a3, 0, 22);
}

uint64_t sub_1C979F084(unsigned __int8 *a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (a2)
    sub_1C979EE74(a1, 0, a4);
  result = sub_1C9750D54(a4, a1[57], 8);
  if (a3 >= 1)
  {
    v8 = 0;
    do
    {
      sub_1C9750D54(a4, (a1[64] >> ++v8) & 1, 1);
      result = sub_1C9750D54(a4, (a1[65] >> v8) & 1, 1);
    }
    while (a3 != v8);
    if (a3 <= 7)
    {
      v9 = a3 - 8;
      do
        result = sub_1C9750D54(a4, 0, 2);
      while (!__CFADD__(v9++, 1));
    }
    v11 = 0;
    v12 = (a3 + 1) - 1;
    do
    {
      v13 = 1 << (v11 + 1);
      if ((v13 & a1[64]) != 0)
        result = sub_1C979EE74(a1, (int)v11 + 2, a4);
      if ((v13 & a1[65]) != 0)
        result = sub_1C9750D54(a4, a1[v11 + 58], 8);
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t sub_1C979F1A8(uint64_t result, int a2, FILE *__stream)
{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t i;
  const char *v11;
  uint64_t v12;
  unsigned __int8 *v13;

  v5 = (unsigned __int8 *)result;
  if (dword_1ED1ACCC0 >= 6)
  {
    result = fwrite("  ------ ProfileTierLevel ------\n", 0x21uLL, 1uLL, __stream);
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fwrite("    ----- General -----\n", 0x18uLL, 1uLL, __stream);
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "    %-42s : %lld\n", "profile_space", *v5);
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "tier_flag", v5[7] & 1);
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, "    %-42s : %lld\n", "profile_idc", v5[8]);
            if (dword_1ED1ACCC0 >= 6)
            {
              result = fprintf(__stream, "    %-42s : %lld\n", "profile_compatibility_flag", *((unsigned int *)v5 + 4));
              if (dword_1ED1ACCC0 >= 6)
              {
                result = fprintf(__stream, "    %-42s : %lld\n", "progressive_source_flag", v5[44] & 1);
                if (dword_1ED1ACCC0 >= 6)
                {
                  result = fprintf(__stream, "    %-42s : %lld\n", "interlaced_source_flag", v5[45] & 1);
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    result = fprintf(__stream, "    %-42s : %lld\n", "non_packed_constraint_flag", v5[46] & 1);
                    if (dword_1ED1ACCC0 >= 6)
                      result = fprintf(__stream, "    %-42s : %lld\n", "frame_only_constraint_flag", v5[47] & 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v5[8] > 3u || (v5[16] & 0x10) != 0)
  {
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_max_12bit_constraint_flag", v5[48] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_max_10bit_constraint_flag", v5[49] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_max_8bit_constraint_flag", v5[50] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_max_422chroma_constraint_flag", v5[51] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_max_420chroma_constraint_flag", v5[52] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_max_monochrome_constraint_flag", v5[53] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_intra_constraint_flag", v5[54] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_one_picture_only_constraint_flag", v5[55] & 1);
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_26;
    result = fprintf(__stream, "    %-42s : %lld\n", "general_lower_bit_rate_constraint_flag", v5[56] & 1);
  }
  if (dword_1ED1ACCC0 >= 6)
    result = fprintf(__stream, "    %-42s : %lld\n", "level_idc", v5[57]);
LABEL_26:
  if (a2 >= 1)
  {
    v6 = (a2 + 1);
    v7 = dword_1ED1ACCC0;
    v8 = 1;
    do
    {
      if (v7 >= 6)
      {
        result = fprintf(__stream, "    %-42s : %lld\n", "sub_layer_profile_present_flag", ((unint64_t)v5[64] >> v8) & 1);
        v7 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "sub_layer_level_present_flag", ((unint64_t)v5[65] >> v8) & 1);
          v7 = dword_1ED1ACCC0;
        }
      }
      ++v8;
    }
    while (v6 != v8);
    v9 = "    %-42s : %lld\n";
    for (i = 1; i != v6; ++i)
    {
      if (v7 >= 6)
      {
        result = fprintf(__stream, "    --- Sublayer %d ---\n", i);
        v7 = dword_1ED1ACCC0;
      }
      if (((1 << i) & v5[64]) == 0)
        goto LABEL_64;
      if (v7 >= 6)
      {
        result = fprintf(__stream, v9, "profile_space", v5[i]);
        v7 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, v9, "tier_flag", ((unint64_t)v5[7] >> i) & 1);
          v7 = dword_1ED1ACCC0;
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, v9, "profile_idc", v5[i + 8]);
            v7 = dword_1ED1ACCC0;
          }
        }
      }
      v11 = v9;
      v12 = 0;
      v13 = &v5[4 * i + 16];
      do
      {
        if (v7 >= 6)
        {
          result = fprintf(__stream, "      %-40s : %lld\n", "profile_compatibility_flag", ((unint64_t)*(unsigned int *)v13 >> v12) & 1);
          v7 = dword_1ED1ACCC0;
        }
        ++v12;
      }
      while (v12 != 32);
      v9 = v11;
      if (v7 > 5)
      {
        result = fprintf(__stream, v11, "progressive_source_flag", ((unint64_t)v5[44] >> i) & 1);
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, v11, "interlaced_source_flag", ((unint64_t)v5[45] >> i) & 1);
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, v11, "non_packed_constraint_flag", ((unint64_t)v5[46] >> i) & 1);
            if (dword_1ED1ACCC0 >= 6)
              result = fprintf(__stream, v11, "frame_only_constraint_flag", ((unint64_t)v5[47] >> i) & 1);
          }
        }
      }
      if (v5[i + 8] <= 3u)
      {
        v7 = dword_1ED1ACCC0;
        if ((*v13 & 0x10) == 0)
        {
          v6 = (a2 + 1);
          goto LABEL_64;
        }
        v6 = (a2 + 1);
        if (dword_1ED1ACCC0 <= 5)
          goto LABEL_64;
      }
      else
      {
        v7 = dword_1ED1ACCC0;
        v6 = (a2 + 1);
        if (dword_1ED1ACCC0 < 6)
          continue;
      }
      result = fprintf(__stream, v9, "general_max_12bit_constraint_flag", ((unint64_t)v5[48] >> i) & 1);
      v7 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, v9, "general_max_10bit_constraint_flag", ((unint64_t)v5[49] >> i) & 1);
        v7 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, v9, "general_max_8bit_constraint_flag", ((unint64_t)v5[50] >> i) & 1);
          v7 = dword_1ED1ACCC0;
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, v9, "general_max_422chroma_constraint_flag", ((unint64_t)v5[51] >> i) & 1);
            v7 = dword_1ED1ACCC0;
            if (dword_1ED1ACCC0 >= 6)
            {
              result = fprintf(__stream, v9, "general_max_420chroma_constraint_flag", ((unint64_t)v5[52] >> i) & 1);
              v7 = dword_1ED1ACCC0;
              if (dword_1ED1ACCC0 >= 6)
              {
                result = fprintf(__stream, v9, "general_max_monochrome_constraint_flag", ((unint64_t)v5[53] >> i) & 1);
                v7 = dword_1ED1ACCC0;
                if (dword_1ED1ACCC0 >= 6)
                {
                  result = fprintf(__stream, v9, "general_intra_constraint_flag", ((unint64_t)v5[54] >> i) & 1);
                  v7 = dword_1ED1ACCC0;
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    result = fprintf(__stream, v9, "general_one_picture_only_constraint_flag", ((unint64_t)v5[55] >> i) & 1);
                    v7 = dword_1ED1ACCC0;
                    if (dword_1ED1ACCC0 >= 6)
                    {
                      result = fprintf(__stream, v9, "general_lower_bit_rate_constraint_flag", ((unint64_t)v5[56] >> i) & 1);
                      v7 = dword_1ED1ACCC0;
LABEL_64:
                      if (((1 << i) & v5[65]) != 0 && v7 >= 6)
                      {
                        result = fprintf(__stream, v9, "level_idc", v5[i + 57]);
                        v7 = dword_1ED1ACCC0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C979FA50(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int16 v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  __int128 v25;
  uint64_t v26;

  if (a3)
  {
    LODWORD(v4) = a4;
    *(_BYTE *)a1 = sub_1C971C898(a2, 1) != 0;
    v7 = sub_1C971C898(a2, 1);
    *(_BYTE *)(a1 + 1) = v7 != 0;
    if (*(_BYTE *)a1)
      v8 = 0;
    else
      v8 = v7 == 0;
    if (!v8)
    {
      v9 = sub_1C971C898(a2, 1);
      *(_BYTE *)(a1 + 2) = v9 != 0;
      if (v9)
      {
        *(_BYTE *)(a1 + 3) = sub_1C971C898(a2, 8);
        *(_BYTE *)(a1 + 4) = sub_1C971C898(a2, 5);
        *(_BYTE *)(a1 + 5) = sub_1C971C898(a2, 1) != 0;
        *(_BYTE *)(a1 + 6) = sub_1C971C898(a2, 5);
      }
      *(_BYTE *)(a1 + 7) = sub_1C971C898(a2, 4);
      *(_BYTE *)(a1 + 8) = sub_1C971C898(a2, 4);
      if (*(_BYTE *)(a1 + 2))
        *(_BYTE *)(a1 + 9) = sub_1C971C898(a2, 4);
      *(_BYTE *)(a1 + 10) = sub_1C971C898(a2, 5);
      *(_BYTE *)(a1 + 11) = sub_1C971C898(a2, 5);
      *(_BYTE *)(a1 + 12) = sub_1C971C898(a2, 5);
    }
    v10 = (uint64_t *)(a1 + 16);
    v4 = v4;
    sub_1C979FD8C((char **)(a1 + 16), v4);
    for (i = 48; ; i += 56)
    {
      v12 = *v10;
      v13 = *v10 + i;
      *(_BYTE *)(v13 - 47) = 1;
      *(_BYTE *)(v13 - 44) = 0;
      *(_WORD *)(v13 - 42) = 0;
      v14 = sub_1C971C898(a2, 1);
      *(_BYTE *)(v13 - 48) = v14 != 0;
      if (v14)
      {
        v15 = *(unsigned __int8 *)(v13 - 47);
      }
      else
      {
        v15 = sub_1C971C898(a2, 1) != 0;
        *(_BYTE *)(v13 - 47) = v15;
      }
      if (v15)
      {
        *(_WORD *)(v12 + i - 46) = sub_1C971B8B0(a2);
        if (*(_BYTE *)(v13 - 44))
          goto LABEL_17;
      }
      else
      {
        v17 = sub_1C971C898(a2, 1) != 0;
        *(_BYTE *)(v13 - 44) = v17;
        if (v17)
        {
LABEL_17:
          v16 = *(_WORD *)(v13 - 42);
          goto LABEL_20;
        }
      }
      v16 = sub_1C971B8B0(a2);
      *(_WORD *)(v13 - 42) = v16;
LABEL_20:
      if (v16 >= 0x20u)
      {
        if (dword_1ED1ACCC0 < 3)
          return 4294954387;
        v23 = "Invalid cpb_cnt_minus1\n";
        fwrite("Invalid cpb_cnt_minus1\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        v22 = 4294954387;
LABEL_35:
        syslog(27, v23);
        return v22;
      }
      if (*(_BYTE *)a1)
      {
        sub_1C979FFCC((char **)&v25, v16, a2, a1);
        v18 = v12 + i;
        v19 = *(void **)(v12 + i - 40);
        if (v19)
        {
          *(_QWORD *)(v18 - 32) = v19;
          operator delete(v19);
        }
        *(_OWORD *)(v18 - 40) = v25;
        *(_QWORD *)(v18 - 24) = v26;
      }
      if (*(_BYTE *)(a1 + 1))
      {
        v20 = v12 + i;
        sub_1C979FFCC((char **)&v25, *(_WORD *)(v12 + i - 42), a2, a1);
        v21 = *(void **)(v12 + i - 16);
        if (v21)
        {
          *(_QWORD *)(v20 - 8) = v21;
          operator delete(v21);
        }
        *(_OWORD *)(v20 - 16) = v25;
        *(_QWORD *)(v12 + i) = v26;
      }
      if (!--v4)
        return 0;
    }
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    v23 = "Need to implement inferrence of common HRD info\n";
    fwrite("Need to implement inferrence of common HRD info\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v22 = 4294954386;
    goto LABEL_35;
  }
  return 4294954386;
}

void sub_1C979FD8C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - v5) >> 3) >= v7)
    {
      v24 = &v5[56 * v7];
      do
      {
        v5[4] = 0;
        *(_DWORD *)v5 = 0;
        *(_OWORD *)(v5 + 6) = 0uLL;
        *(_OWORD *)(v5 + 22) = 0uLL;
        *(_OWORD *)(v5 + 38) = 0uLL;
        *((_WORD *)v5 + 27) = 0;
        v5 += 56;
      }
      while (v5 != v24);
      a1[1] = v24;
      return;
    }
    if (a2 > 0x492492492492492)
      sub_1C9747024();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    if (v11 > 0x492492492492492)
      sub_1C9724B4C();
    v12 = (char *)operator new(56 * v11);
    v13 = &v12[56 * v6];
    v14 = &v12[56 * a2];
    v15 = v13;
    do
    {
      v15[4] = 0;
      *(_DWORD *)v15 = 0;
      *(_OWORD *)(v15 + 6) = 0uLL;
      *(_OWORD *)(v15 + 22) = 0uLL;
      *(_OWORD *)(v15 + 38) = 0uLL;
      *((_WORD *)v15 + 27) = 0;
      v15 += 56;
    }
    while (v15 != v14);
    v16 = &v12[56 * v11];
    v17 = *a1;
    v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v16;
      if (!v18)
        return;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v13[v19];
        v21 = &v18[v19];
        *((_QWORD *)v20 - 7) = *(_QWORD *)&v18[v19 - 56];
        *((_QWORD *)v20 - 6) = 0;
        *((_QWORD *)v20 - 5) = 0;
        *((_QWORD *)v20 - 4) = 0;
        *((_OWORD *)v20 - 3) = *(_OWORD *)&v18[v19 - 48];
        *((_QWORD *)v20 - 4) = *(_QWORD *)&v18[v19 - 32];
        *((_QWORD *)v21 - 6) = 0;
        *((_QWORD *)v21 - 5) = 0;
        *((_QWORD *)v21 - 4) = 0;
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *((_QWORD *)v20 - 1) = 0;
        *(_OWORD *)(v20 - 24) = *(_OWORD *)&v18[v19 - 24];
        *((_QWORD *)v20 - 1) = *(_QWORD *)&v18[v19 - 8];
        *((_QWORD *)v21 - 3) = 0;
        *((_QWORD *)v21 - 2) = 0;
        *((_QWORD *)v21 - 1) = 0;
        v19 -= 56;
      }
      while (&v18[v19] != v17);
      v22 = *a1;
      v18 = a1[1];
      *a1 = &v13[v19];
      a1[1] = v14;
      a1[2] = v16;
      if (v18 != v22)
      {
        do
        {
          v18 -= 56;
          sub_1C97471D0(v18);
        }
        while (v18 != v22);
        v18 = v22;
      }
      if (!v18)
        return;
    }
    operator delete(v18);
    return;
  }
  if (a2 < v6)
  {
    v23 = &v4[56 * a2];
    while (v5 != v23)
    {
      v5 -= 56;
      sub_1C97471D0(v5);
    }
    a1[1] = v23;
  }
}

uint64_t sub_1C979FFCC(char **a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t result;

  v7 = a2 + 1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = (char *)sub_1C97A00C4(a2 + 1);
  *a1 = v8;
  a1[2] = &v8[20 * v9];
  v10 = 20 * ((20 * (unint64_t)v7 - 20) / 0x14) + 20;
  bzero(v8, v10);
  v11 = &v8[v10];
  a1[1] = v11;
  v12 = v8 + 12;
  do
  {
    *((_DWORD *)v12 - 3) = sub_1C971BC60(a3);
    v13 = v12 - 12;
    *((_DWORD *)v12 - 2) = sub_1C971BC60(a3);
    if (*(_BYTE *)(a4 + 2))
    {
      *((_DWORD *)v12 - 1) = sub_1C971BC60(a3);
      *(_DWORD *)v12 = sub_1C971BC60(a3);
    }
    result = sub_1C971C898(a3, 1);
    v12[4] = (_DWORD)result != 0;
    v12 += 20;
  }
  while (v13 + 20 != v11);
  return result;
}

void *sub_1C97A00C4(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    sub_1C9724B4C();
  return operator new(20 * a1);
}

uint64_t sub_1C97A0108(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;

  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 2) != *(unsigned __int16 *)(a1 + 6) + 1)
    return 1;
  v8 = 0;
  v9 = -1;
  do
  {
    sub_1C9750E08(a2, *(_DWORD *)(*a4 + v8));
    sub_1C9750E08(a2, *(_DWORD *)(*a4 + v8 + 4));
    if (*(_BYTE *)(a3 + 2))
    {
      sub_1C9750E08(a2, *(_DWORD *)(*a4 + v8 + 8));
      sub_1C9750E08(a2, *(_DWORD *)(*a4 + v8 + 12));
    }
    sub_1C9750D54(a2, *(unsigned __int8 *)(*a4 + v8 + 16), 1);
    ++v9;
    v8 += 20;
  }
  while (v9 < *(unsigned __int16 *)(a1 + 6));
  return 0;
}

void sub_1C97A01FC(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v3[8 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v4[8 * v6];
LABEL_16:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    sub_1C9747024();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    sub_1C9724B4C();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  while (v4 != v3)
  {
    v15 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    *((_QWORD *)v12 - 1) = v15;
    v12 -= 8;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void sub_1C97A0304(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      v26 = &v4[40 * v7];
      v27 = 40 * a2 - 8 * ((v4 - *a1) >> 3);
      v28 = v4 + 16;
      do
      {
        *v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
        *(v28 - 2) = 0;
        *(_QWORD *)((char *)v28 - 11) = 0;
        v28 += 5;
        v27 -= 40;
      }
      while (v27);
      a1[1] = v26;
      return;
    }
    if (a2 > 0x666666666666666)
      sub_1C9747024();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    if (v11 > 0x666666666666666)
      sub_1C9724B4C();
    v12 = (char *)operator new(40 * v11);
    v13 = &v12[40 * v6];
    v14 = &v12[40 * a2];
    v15 = v13 + 16;
    v16 = 40 * a2 - 40 * v6;
    do
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      *(v15 - 2) = 0;
      *(_QWORD *)((char *)v15 - 11) = 0;
      v15 += 5;
      v16 -= 40;
    }
    while (v16);
    v17 = &v12[40 * v11];
    v19 = *a1;
    v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (!v18)
        return;
    }
    else
    {
      do
      {
        v20 = *((_QWORD *)v18 - 5);
        v18 -= 40;
        v21 = *(_QWORD *)(v18 + 5);
        *((_QWORD *)v13 - 5) = v20;
        v13 -= 40;
        *(_QWORD *)(v13 + 5) = v21;
        *((_QWORD *)v13 + 3) = 0;
        *((_QWORD *)v13 + 4) = 0;
        *((_QWORD *)v13 + 2) = 0;
        *((_OWORD *)v13 + 1) = *((_OWORD *)v18 + 1);
        *((_QWORD *)v13 + 4) = *((_QWORD *)v18 + 4);
        *((_QWORD *)v18 + 2) = 0;
        *((_QWORD *)v18 + 3) = 0;
        *((_QWORD *)v18 + 4) = 0;
      }
      while (v18 != v19);
      v22 = *a1;
      v18 = a1[1];
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (v18 != v22)
      {
        do
        {
          v23 = v18 - 40;
          v29 = (void **)(v18 - 24);
          sub_1C9747160(&v29);
          v18 = v23;
        }
        while (v23 != v22);
        v18 = v22;
      }
      if (!v18)
        return;
    }
    operator delete(v18);
    return;
  }
  if (a2 < v6)
  {
    v24 = &v5[40 * a2];
    if (v4 != v24)
    {
      do
      {
        v25 = v4 - 40;
        v29 = (void **)(v4 - 24);
        sub_1C9747160(&v29);
        v4 = v25;
      }
      while (v25 != v24);
    }
    a1[1] = v24;
  }
}

uint64_t sub_1C97A051C(uint64_t a1, FILE *__stream)
{
  uint64_t result;
  int8x8_t v5;
  int v6;
  unsigned __int8 v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  __int32 v14;
  uint8x8_t v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;

  if (dword_1ED1ACCC0 >= 6)
  {
    fprintf(__stream, "=========== Video Parameter Set ID: %d ===========\n", *(unsigned __int8 *)(a1 + 196));
    if (dword_1ED1ACCC0 >= 6)
    {
      fprintf(__stream, "  %-44s : %lld\n", "vps_video_parameter_set_id", *(unsigned __int8 *)(a1 + 196));
      if (dword_1ED1ACCC0 >= 6)
      {
        fprintf(__stream, "  %-44s : %lld\n", "vps_max_sub_layers_minus1", *(unsigned __int8 *)(a1 + 200));
        if (dword_1ED1ACCC0 >= 6)
          fprintf(__stream, "  %-44s : %lld\n", "vps_temporal_id_nesting_flag", *(unsigned __int8 *)(a1 + 201));
      }
    }
  }
  result = sub_1C979F1A8(a1, *(unsigned __int8 *)(a1 + 200), __stream);
  v6 = dword_1ED1ACCC0;
  if (dword_1ED1ACCC0 >= 6)
  {
    result = fprintf(__stream, "  %-44s : %lld\n", "vps_sub_layer_ordering_info_present_flag", *(unsigned __int8 *)(a1 + 202));
    v6 = dword_1ED1ACCC0;
  }
  v7 = *(_BYTE *)(a1 + 200);
  if (*(_BYTE *)(a1 + 202))
    v7 = 0;
  v8 = v7;
  do
  {
    if (v6 >= 6)
    {
      result = fprintf(__stream, "    %-42s : %lld\n", "vps_max_dec_pic_buffering_minus1", *(unsigned __int8 *)(a1 + v8 + 203));
      v6 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "    %-42s : %lld\n", "vps_max_num_reorder_pics", *(unsigned __int8 *)(a1 + v8 + 210));
        v6 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "vps_max_latency_increase_plus1", *(unsigned int *)(a1 + 4 * v8 + 220));
          v6 = dword_1ED1ACCC0;
        }
      }
    }
    v9 = v8++ >= *(unsigned __int8 *)(a1 + 200);
  }
  while (!v9);
  if (v6 >= 6)
  {
    result = fprintf(__stream, "  %-44s : %lld\n", "vps_max_layer_id", *(unsigned __int8 *)(a1 + 248));
    v6 = dword_1ED1ACCC0;
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_layer_sets_minus1", *(unsigned __int16 *)(a1 + 250));
      v6 = dword_1ED1ACCC0;
    }
  }
  if (*(_WORD *)(a1 + 250))
  {
    v10 = 1;
    do
    {
      v11 = -1;
      do
      {
        ++v11;
        if (v6 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "layer_id_included_flag", (*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v10) >> v11) & 1);
          v6 = dword_1ED1ACCC0;
        }
      }
      while (v11 < *(unsigned __int8 *)(a1 + 248));
      v9 = v10++ >= *(unsigned __int16 *)(a1 + 250);
    }
    while (!v9);
  }
  if (!*(_BYTE *)(a1 + 280))
    goto LABEL_37;
  if (v6 >= 6)
  {
    result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_units_in_tick", *(unsigned int *)(a1 + 284));
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "vps_time_scale", *(unsigned int *)(a1 + 288));
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "vps_poc_proportional_to_timing_flag", *(unsigned __int8 *)(a1 + 292));
        v12 = dword_1ED1ACCC0;
        if (*(_BYTE *)(a1 + 292) && dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_ticks_poc_diff_one_minus1", *(unsigned int *)(a1 + 296));
          v12 = dword_1ED1ACCC0;
        }
        if (v12 >= 6)
        {
          result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_hrd_parameters", *(unsigned __int16 *)(a1 + 300));
          v6 = dword_1ED1ACCC0;
LABEL_37:
          if (v6 >= 6)
            result = fprintf(__stream, "  %-44s : %lld\n", "vps_extension_flag", *(unsigned __int8 *)(a1 + 302));
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 302))
  {
    v13 = dword_1ED1ACCC0;
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "splitting_flag", *(unsigned __int8 *)(a1 + 304));
      v13 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "scalability_mask_flag", *(unsigned __int16 *)(a1 + 306));
        v13 = dword_1ED1ACCC0;
      }
    }
    v14 = *(unsigned __int16 *)(a1 + 306);
    v5.i32[0] = v14;
    v15 = (uint8x8_t)vcnt_s8(v5);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.i32[0];
    v17 = *(unsigned __int8 *)(a1 + 304);
    if (v15.i32[0] != v17)
    {
      v18 = 0;
      v19 = a1 + 324;
      do
      {
        if (v13 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "dimension_id", v19);
          v13 = dword_1ED1ACCC0;
          v17 = *(unsigned __int8 *)(a1 + 304);
        }
        ++v18;
        v19 += 16;
      }
      while (v18 < v16 - v17);
    }
    if (v13 > 5)
      result = fprintf(__stream, "  %-44s : %lld\n", "vps_nuh_layer_id_present_flag", *(unsigned __int8 *)(a1 + 356));
    if (*(_BYTE *)(a1 + 199))
    {
      if (v16 <= 1)
        v20 = 1;
      else
        v20 = v16;
      v28 = v20;
      v21 = dword_1ED1ACCC0;
      v22 = (unsigned __int8 *)(a1 + 340);
      v23 = 1;
      do
      {
        if (*(_BYTE *)(a1 + 356))
          v24 = v21 < 6;
        else
          v24 = 1;
        if (!v24)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "layer_id_in_nuh", a1 + 357);
          v21 = dword_1ED1ACCC0;
        }
        if (*(_BYTE *)(a1 + 304))
          v25 = 1;
        else
          v25 = v14 == 0;
        if (!v25)
        {
          v26 = v28;
          v27 = v22;
          do
          {
            if (v21 >= 6)
            {
              result = fprintf(__stream, "      %-40s : %lld\n", "dimension_id", *v27);
              v21 = dword_1ED1ACCC0;
            }
            ++v27;
            --v26;
          }
          while (v26);
        }
        v22 += 16;
        v9 = v23++ >= *(unsigned __int8 *)(a1 + 199);
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_1C97A0A90(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(_QWORD *)(a1 + 40) + v5) & 0x7F);
    if (v7 != v8)
    {
      do
      {
        v7 = sub_1C972CFE0(v7) + 32;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 64;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 128;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C97A0BD8(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_1C97A0E28(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C97A0C4C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E82916D0;
  v2 = a1[972];
  a1[972] = 0;
  if (v2)
    sub_1C97A0D88(v2);
  return sub_1C977F548(a1);
}

void sub_1C97A0C88(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        sub_1C97A0D10(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C97A0D10(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 41) < 0)
          operator delete(*(v4 - 8));
        v4 -= 9;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C97A0D88(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v2)
    MEMORY[0x1CAA43B6C](v2, 0x1000C8052888210);
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C97A0DD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E82916D0;
  v2 = a1[972];
  a1[972] = 0;
  if (v2)
    sub_1C97A0D88(v2);
  sub_1C977F548(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C97A0E28(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t i;
  void *v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t k;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t m;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    sub_1C972CFE0((uint64_t)(v2 + 848));
    v3 = (void *)v2[845];
    if (v3)
    {
      v2[846] = v3;
      operator delete(v3);
    }
    v4 = (_QWORD *)v2[804];
    if (v4)
    {
      v5 = (_QWORD *)v2[805];
      v6 = (void *)v2[804];
      if (v5 != v4)
      {
        do
        {
          v8 = *--v5;
          v7 = v8;
          *v5 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        }
        while (v5 != v4);
        v6 = (void *)v2[804];
      }
      v2[805] = v4;
      operator delete(v6);
    }
    v9 = (void *)v2[789];
    if (v9)
    {
      v2[790] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[779];
    if (v10)
    {
      v2[780] = v10;
      operator delete(v10);
    }
    v11 = (void *)v2[774];
    if (v11)
    {
      v2[775] = v11;
      operator delete(v11);
    }
    v12 = (void *)v2[771];
    if (v12)
    {
      v2[772] = v12;
      operator delete(v12);
    }
    v13 = (void *)v2[764];
    if (v13)
    {
      v2[765] = v13;
      operator delete(v13);
    }
    v14 = (void *)v2[761];
    if (v14)
    {
      v2[762] = v14;
      operator delete(v14);
    }
    v15 = (void *)v2[758];
    if (v15)
    {
      v2[759] = v15;
      operator delete(v15);
    }
    v16 = (void *)v2[755];
    if (v16)
    {
      v2[756] = v16;
      operator delete(v16);
    }
    for (i = 0; i != -6; i -= 3)
    {
      v18 = (void *)v2[i + 752];
      if (v18)
      {
        v2[i + 753] = v18;
        operator delete(v18);
      }
    }
    for (j = 0; j != -9; j -= 3)
    {
      v20 = (void *)v2[j + 746];
      if (v20)
      {
        v2[j + 747] = v20;
        operator delete(v20);
      }
    }
    v21 = (void *)v2[737];
    if (v21)
    {
      v2[738] = v21;
      operator delete(v21);
    }
    v22 = (void *)v2[734];
    if (v22)
    {
      v2[735] = v22;
      operator delete(v22);
    }
    v23 = (void *)v2[731];
    if (v23)
    {
      v2[732] = v23;
      operator delete(v23);
    }
    v24 = (void *)v2[728];
    if (v24)
    {
      v2[729] = v24;
      operator delete(v24);
    }
    v25 = (void *)v2[725];
    if (v25)
    {
      v2[726] = v25;
      operator delete(v25);
    }
    v26 = (void *)v2[722];
    if (v26)
    {
      v2[723] = v26;
      operator delete(v26);
    }
    v27 = (void *)v2[719];
    if (v27)
    {
      v2[720] = v27;
      operator delete(v27);
    }
    v28 = (void *)v2[716];
    if (v28)
    {
      v2[717] = v28;
      operator delete(v28);
    }
    v29 = (void *)v2[712];
    if (v29)
    {
      v2[713] = v29;
      operator delete(v29);
    }
    v30 = (void *)v2[709];
    if (v30)
    {
      v2[710] = v30;
      operator delete(v30);
    }
    v31 = (void *)v2[706];
    if (v31)
    {
      v2[707] = v31;
      operator delete(v31);
    }
    v32 = (void *)v2[697];
    if (v32)
    {
      v2[698] = v32;
      operator delete(v32);
    }
    v33 = (void *)v2[694];
    if (v33)
    {
      v2[695] = v33;
      operator delete(v33);
    }
    v34 = (void *)v2[688];
    if (v34)
    {
      v2[689] = v34;
      operator delete(v34);
    }
    v35 = (void *)v2[685];
    if (v35)
    {
      v2[686] = v35;
      operator delete(v35);
    }
    v36 = (void *)v2[682];
    if (v36)
    {
      v2[683] = v36;
      operator delete(v36);
    }
    v37 = (void *)v2[679];
    if (v37)
    {
      v2[680] = v37;
      operator delete(v37);
    }
    v38 = (void *)v2[676];
    if (v38)
    {
      v2[677] = v38;
      operator delete(v38);
    }
    v53 = v2 + 672;
    sub_1C97A126C(&v53);
    v39 = (void *)v2[615];
    if (v39)
    {
      v2[616] = v39;
      operator delete(v39);
    }
    v40 = (void *)v2[612];
    if (v40)
    {
      v2[613] = v40;
      operator delete(v40);
    }
    v41 = (void *)v2[609];
    if (v41)
    {
      v2[610] = v41;
      operator delete(v41);
    }
    for (k = 543; k != 511; k -= 2)
      sub_1C972CFE0((uint64_t)&v2[k]);
    do
    {
      sub_1C972CFE0((uint64_t)&v2[k]);
      k -= 2;
    }
    while (k != 479);
    do
    {
      sub_1C972CFE0((uint64_t)&v2[k]);
      k -= 2;
    }
    while (k != 447);
    do
    {
      sub_1C972CFE0((uint64_t)&v2[k]);
      k -= 2;
    }
    while (k != 415);
    do
    {
      sub_1C972CFE0((uint64_t)&v2[k]);
      k -= 2;
    }
    while (k != 383);
    v43 = v2[381];
    v2[381] = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
    sub_1C972CFE0((uint64_t)(v2 + 377));
    sub_1C972CFE0((uint64_t)(v2 + 373));
    v44 = (void *)v2[316];
    if (v44)
    {
      v2[317] = v44;
      operator delete(v44);
    }
    v45 = (void *)v2[313];
    if (v45)
    {
      v2[314] = v45;
      operator delete(v45);
    }
    v46 = (void *)v2[310];
    if (v46)
    {
      v2[311] = v46;
      operator delete(v46);
    }
    for (m = 0; m != -48; m -= 3)
    {
      v48 = (void *)v2[m + 198];
      if (v48)
      {
        v2[m + 199] = v48;
        operator delete(v48);
      }
    }
    v49 = (void *)v2[128];
    if (v49)
    {
      v2[129] = v49;
      operator delete(v49);
    }
    v50 = (void *)v2[103];
    if (v50)
    {
      v2[104] = v50;
      operator delete(v50);
    }
    sub_1C972CFE0((uint64_t)(v2 + 79));
    sub_1C972CFE0((uint64_t)(v2 + 77));
    v51 = (_QWORD *)v2[67];
    if (v51 == v2 + 64)
    {
      v52 = 4;
      v51 = v2 + 64;
    }
    else
    {
      if (!v51)
      {
LABEL_105:
        sub_1C972CFE0((uint64_t)(v2 + 7));
        sub_1C972CFE0((uint64_t)(v2 + 5));
        sub_1C972CFE0((uint64_t)(v2 + 3));
        JUMPOUT(0x1CAA43B9CLL);
      }
      v52 = 5;
    }
    (*(void (**)(void))(*v51 + 8 * v52))();
    goto LABEL_105;
  }
  return result;
}

uint64_t **sub_1C97A126C(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t i;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    for (i = v1[1]; i != v2; sub_1C97A12F0(i))
      i -= 13312;
    v1[1] = v2;
    JUMPOUT(0x1CAA43B90);
  }
  return result;
}

void sub_1C97A12F0(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void *v4;

  for (i = 0; i != -48; i -= 24)
  {
    v3 = *(void **)(a1 + i + 12920);
    if (v3)
    {
      *(_QWORD *)(a1 + i + 12928) = v3;
      operator delete(v3);
    }
  }
  v4 = *(void **)(a1 + 12872);
  if (v4)
  {
    *(_QWORD *)(a1 + 12880) = v4;
    operator delete(v4);
  }
}

void sub_1C97A1348(uint64_t a1)
{
  char *v2;
  std::mutex *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = (char *)(a1 + 9961);
  v3 = (std::mutex *)(a1 + 10808);
  std::mutex::lock((std::mutex *)(a1 + 10808));
  while (*(_QWORD *)(a1 + 10912))
  {
    if (sub_1C97A1438(a1))
      goto LABEL_16;
  }
  v4 = *v2;
  if (*v2)
  {
    while (v4 >= 1)
    {
      sub_1C97A21B4(a1);
      v4 = *v2;
    }
    *v2 = 0;
    *((_WORD *)v2 + 1) = 0;
  }
  if (*(_QWORD *)(a1 + 9824))
  {
    if (*(int *)(a1 + 9816) >= 1)
    {
      v5 = 0;
      do
      {
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 9824), 0xFFFFFFFFFFFFFFFFLL);
        ++v5;
        v6 = *(_DWORD *)(a1 + 9816);
      }
      while (v5 < v6);
      if (v6 >= 1)
      {
        v7 = 0;
        do
        {
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9824));
          ++v7;
        }
        while (v7 < *(_DWORD *)(a1 + 9816));
      }
    }
  }
LABEL_16:
  std::mutex::unlock(v3);
}

void sub_1C97A1420(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97A1438(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  int64x2_t v11;
  char v12;
  int v13;
  char v14;
  int v15;
  signed int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  FILE *v37;
  FILE *v38;
  _BOOL4 v39;
  int v40;
  int v41;
  float v42;
  int v43;
  float v44;
  float v45;
  int v46;
  BOOL v47;
  int v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  char v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  int v61;
  float v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  double *v70;
  int v71;
  double v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  unsigned int v78;
  float v79;
  __int128 v80;
  int v81;
  __int128 *v82;
  __int128 v83;
  uint64_t v84;
  FILE *v85;
  char v86;
  char v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  int v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  int v107;
  _QWORD v108[3];
  _QWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 9944;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 10880) + ((*(_QWORD *)(a1 + 10904) >> 4) & 0xFFFFFFFFFFFFFF8));
  v4 = *(_QWORD *)(a1 + 10904) & 0x7FLL;
  v5 = v3 + 32 * v4;
  v6 = *(_QWORD *)v5;
  v7 = *(std::__shared_weak_count **)(v5 + 8);
  v105 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v106 = *(_OWORD *)(v3 + 32 * v4 + 16);
    v103 = v6;
    v104 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 10880) + ((*(_QWORD *)(a1 + 10904) >> 4) & 0xFFFFFFFFFFFFFF8));
    v4 = *(_QWORD *)(a1 + 10904) & 0x7FLL;
  }
  else
  {
    v106 = *(_OWORD *)(v5 + 16);
    v103 = *(_QWORD *)v5;
    v104 = 0;
  }
  sub_1C972CFE0(v3 + 32 * v4);
  v11 = vaddq_s64(*(int64x2_t *)(v2 + 960), (int64x2_t)xmmword_1C9862BD0);
  *(int64x2_t *)(v2 + 960) = v11;
  if (v11.i64[0] >= 0x100uLL)
  {
    operator delete(**(void ***)(a1 + 10880));
    *(_QWORD *)(a1 + 10880) += 8;
    *(_QWORD *)(a1 + 10904) -= 128;
  }
  if (!v6)
    goto LABEL_151;
  v12 = *(_BYTE *)(*((_QWORD *)&v106 + 1) + 60);
  if (v12)
  {
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 64);
    *(_DWORD *)(v2 + 4) = 0;
    *(_DWORD *)(v2 + 8) = 0;
    v12 = 1;
    v13 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 9952) = 0;
    v13 = *(_DWORD *)(a1 + 608) << *(_BYTE *)(a1 + 536);
  }
  *(_BYTE *)v2 = v12;
  *(_DWORD *)(a1 + 9956) = v13;
  if (v13 <= *(char *)(v2 + 17))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: Gop-structure errors\n", *(_DWORD *)(v6 + 8));
      syslog(27, "Frame %d: Gop-structure errors\n", *(_DWORD *)(v6 + 8));
    }
    goto LABEL_29;
  }
  if (!*(_BYTE *)(*((_QWORD *)&v106 + 1) + 96) || (v14 = *(_BYTE *)(*((_QWORD *)&v106 + 1) + 97)) != 0)
    v14 = 1;
  *(_BYTE *)(v6 + 40) = v14;
  *(_QWORD *)(v6 + 536) = v106;
  if (!*(_BYTE *)(*((_QWORD *)&v106 + 1) + 708))
  {
    if (!*(_QWORD *)sub_1C97535CC(a1 + 9968, 2u))
    {
      v15 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 340);
      if (v15 >= 0x10000)
      {
        v16 = HIWORD(v15);
        if (v16 <= *(_DWORD *)(a1 + 10424))
          v16 = *(_DWORD *)(a1 + 10424);
        *(_DWORD *)(a1 + 10424) = v16;
      }
    }
    if (!*(_BYTE *)(a1 + 585))
      goto LABEL_57;
    v17 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 272);
    if (v17 < 0x11)
    {
      if (!v17)
      {
LABEL_44:
        v29 = atomic_load((unsigned __int8 *)&qword_1EF920E88);
        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920E88))
        {
          __cxa_atexit((void (*)(void *))sub_1C9752BB8, &unk_1EF920E78, &dword_1C96FA000);
          __cxa_guard_release(&qword_1EF920E88);
        }
        v30 = 0;
        v31 = (uint64_t *)(a1 + 10000);
        v32 = 0x7FFFFFFF;
        v33 = 0x7FFFFFFF;
        do
        {
          v34 = *v31;
          if (*v31 && *(_DWORD *)(v34 + 1024) < v33 && *(_DWORD *)(v34 + 36) == 1)
          {
            v33 = *(_DWORD *)(v34 + 1024);
            v32 = v30;
          }
          ++v30;
          v31 += 2;
        }
        while (v30 != 17);
        if (v32 == 0x7FFFFFFF)
          v35 = (uint64_t *)&unk_1EF920E78;
        else
          v35 = (uint64_t *)(a1 + 16 * v32 + 10000);
        v36 = *v35;
        if (v36
          && (int)(float)((float)((float)((float)*(uint64_t *)(v103 + 16) * 1000.0) / (float)*(int *)(v103 + 32))
                        - (float)((float)((float)*(uint64_t *)(v36 + 16) * 1000.0) / (float)*(int *)(v36 + 32))) > 2 * *(_DWORD *)(a1 + 10424))
        {
          *(_DWORD *)(v36 + 36) = 0;
        }
LABEL_57:
        *(_BYTE *)(*((_QWORD *)&v106 + 1) + 266) |= *(_BYTE *)(v2 + 488);
        *(_DWORD *)(*((_QWORD *)&v106 + 1) + 40) |= *(unsigned __int8 *)(v2 + 489);
        *(int32x2_t *)(*((_QWORD *)&v106 + 1) + 356) = vadd_s32(*(int32x2_t *)(*((_QWORD *)&v106 + 1) + 356), *(int32x2_t *)(v2 + 492));
        goto LABEL_58;
      }
    }
    else
    {
      *(_DWORD *)(*((_QWORD *)&v106 + 1) + 272) = 16;
    }
    v18 = 0;
    v19 = a1 + 10000;
    v20 = 0x1EF920000uLL;
    do
    {
      v21 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 4 * v18 + 276);
      v22 = atomic_load((unsigned __int8 *)&qword_1EF920E58);
      if ((v22 & 1) == 0)
      {
        v26 = v18;
        v27 = v19;
        v102 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 4 * v18 + 276);
        v28 = __cxa_guard_acquire(&qword_1EF920E58);
        v21 = v102;
        v20 = 0x1EF920000;
        v19 = v27;
        v18 = v26;
        if (v28)
        {
          __cxa_atexit((void (*)(void *))sub_1C9752BB8, &qword_1EF920E48, &dword_1C96FA000);
          __cxa_guard_release(&qword_1EF920E58);
          v21 = v102;
          v20 = 0x1EF920000;
          v19 = v27;
          v18 = v26;
        }
      }
      v23 = 0;
      while (1)
      {
        v24 = *(_QWORD *)(v19 + v23);
        if (v24)
        {
          if (*(_DWORD *)(v24 + 8) == v21)
            break;
        }
        v23 += 16;
        if (v23 == 272)
        {
          v24 = *(_QWORD *)(v20 + 3656);
          if (!v24)
            goto LABEL_40;
          break;
        }
      }
      *(_DWORD *)(v24 + 36) = 2;
      v25 = 1717986919
          * (9 * *(_DWORD *)(a1 + 10424)
           + (int)(float)((float)((float)((float)*(uint64_t *)(v103 + 16) * 1000.0) / (float)*(int *)(v103 + 32))
                        - (float)((float)((float)*(uint64_t *)(v24 + 16) * 1000.0) / (float)*(int *)(v24 + 32))));
      *(_DWORD *)(a1 + 10424) = (v25 >> 63) + (SHIDWORD(v25) >> 2);
LABEL_40:
      ++v18;
    }
    while (v18 < *(unsigned int *)(*((_QWORD *)&v106 + 1) + 272));
    goto LABEL_44;
  }
LABEL_58:
  if (*(_QWORD *)(a1 + 720))
  {
    v37 = *(FILE **)(a1 + 184);
    if (v37 || (v37 = fopen(*(const char **)(a1 + 720), "r"), (*(_QWORD *)(a1 + 184) = v37) != 0))
    {
      v107 = 0;
      v108[0] = 0;
      fscanf(v37, "ISP: framenum= %d capture_timestamp= %lf T= %lf AGC= %d sensorDGain= %d ispDGain= %d ", &v107, v108, *((_QWORD *)&v106 + 1) + 632, *((_QWORD *)&v106 + 1) + 640, *((_QWORD *)&v106 + 1) + 644, *((_QWORD *)&v106 + 1) + 648);
      fscanf(*(FILE **)(a1 + 184), "AEAverage= %d AWBRGain= %d AWBGGain= %d AWBBGain= %d normalSNR= %lf\n", *((_QWORD *)&v106 + 1) + 652, *((_QWORD *)&v106 + 1) + 656, *((_QWORD *)&v106 + 1) + 660, *((_QWORD *)&v106 + 1) + 664, *((_QWORD *)&v106 + 1) + 672);
    }
  }
  if (*(_QWORD *)(a1 + 728))
  {
    v38 = *(FILE **)(a1 + 184);
    if (v38 || (v38 = fopen(*(const char **)(a1 + 728), "r"), (*(_QWORD *)(a1 + 184) = v38) != 0))
    {
      v107 = 0;
      v108[0] = 0;
      fscanf(v38, "Face: framenum= %d capture_timestamp= %lf x= %f y= %f w= %f h= %f, ", &v107, v108, *((_QWORD *)&v106 + 1) + 416, *((_QWORD *)&v106 + 1) + 420, *((_QWORD *)&v106 + 1) + 424, *((_QWORD *)&v106 + 1) + 428);
      fscanf(*(FILE **)(a1 + 184), "face_roll= %d, face_yaw= %d\n", *((_QWORD *)&v106 + 1) + 432, *((_QWORD *)&v106 + 1) + 436);
      v39 = *(float *)(*((_QWORD *)&v106 + 1) + 424) != 0.0 && *(float *)(*((_QWORD *)&v106 + 1) + 428) != 0.0;
      *(_DWORD *)(*((_QWORD *)&v106 + 1) + 552) = v39;
    }
  }
  v40 = *(_DWORD *)(v103 + 8);
  if (!v40)
    *(_BYTE *)(v103 + 1172) = 1;
  v41 = *(_DWORD *)(a1 + 876);
  if (v41 >= 1)
    --*(_DWORD *)(a1 + 232);
  v42 = *(float *)(a1 + 880);
  if (v42 <= 0.0)
  {
    v44 = 0.0;
    v45 = -0.0;
    if (!v40)
      goto LABEL_87;
    goto LABEL_79;
  }
  v43 = *(_DWORD *)(v103 + 32);
  if (!v43)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Invalid timescale\n", 0x12uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Invalid timescale\n");
    }
LABEL_29:
    v6 = 4294954394;
LABEL_30:
    sub_1C97A5478(a1, v6, 0, v106);
    goto LABEL_151;
  }
  v44 = (float)*(uint64_t *)(v103 + 24) / (float)v43;
  *(float *)(a1 + 236) = *(float *)(a1 + 236) - v44;
  v45 = v44 * -0.0001;
  if (!v40)
    goto LABEL_87;
LABEL_79:
  if ((v41 < 1 || (*(_DWORD *)(a1 + 232) & 0x80000000) == 0) && (v42 <= 0.0 || *(float *)(a1 + 236) >= v45))
  {
    if (!*(_BYTE *)(a1 + 884) || !*(_BYTE *)(v103 + 1172))
      goto LABEL_88;
    if (dword_1ED1ACCC0 >= 7)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "\nscene change IDR inserted, frame %3d\n", v40);
      syslog(31, "\nscene change IDR inserted, frame %3d\n", *(_DWORD *)(v103 + 8));
    }
  }
LABEL_87:
  *(_DWORD *)(*((_QWORD *)&v106 + 1) + 40) = 1;
LABEL_88:
  if (*(_DWORD *)(*((_QWORD *)&v106 + 1) + 40))
  {
    v46 = *(_DWORD *)(a1 + 876);
    v47 = __OFSUB__(v46, 1);
    v48 = v46 - 1;
    if (v48 < 0 == v47)
      *(_DWORD *)(a1 + 232) = v48;
    v49 = *(float *)(a1 + 880);
    if (v49 > 0.0)
      *(float *)(a1 + 236) = v49 - v44;
    if (*(_BYTE *)(v2 + 17))
    {
      if (!*(_BYTE *)(a1 + 536))
      {
        v71 = sub_1C97A21B4(a1);
        v6 = 0;
        *(_BYTE *)(v2 + 17) = 0;
        if (v71)
          goto LABEL_30;
      }
    }
  }
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 9920) + 8 * *(char *)(v2 + 20));
  v51 = *(_QWORD *)(v50 + 576);
  v52 = 1;
  atomic_store(1u, (unsigned int *)(v50 + 588));
  *(_DWORD *)(v50 + 652) = *(_DWORD *)(v103 + 8);
  sub_1C9746DB4((_QWORD *)(v50 + 616), v103, (uint64_t)v104);
  *(_BYTE *)v50 = 0;
  *(_QWORD *)(v50 + 128) = 0;
  *(_QWORD *)(v50 + 136) = *(int *)(*((_QWORD *)&v106 + 1) + 364);
  *(_QWORD *)(v50 + 144) = *(int *)(*((_QWORD *)&v106 + 1) + 56);
  *(_BYTE *)(v50 + 6457) = 0;
  if (!*(_BYTE *)(*((_QWORD *)&v106 + 1) + 98))
    v52 = *(_BYTE *)(v51 + 451) != 0;
  *(_BYTE *)(v50 + 216) = v52;
  *(_WORD *)(v50 + 660) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 196);
  *(_BYTE *)(v50 + 464) = *(_BYTE *)(*((_QWORD *)&v106 + 1) + 99);
  *(_DWORD *)(v50 + 668) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 200);
  if (*(_BYTE *)(*((_QWORD *)&v106 + 1) + 708))
  {
    v53 = 0;
    v54 = 0;
  }
  else
  {
    v53 = *(_BYTE *)(*((_QWORD *)&v106 + 1) + 266);
    v54 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 40) != 0;
  }
  *(_BYTE *)(v50 + 6752) = v53;
  *(_BYTE *)(v50 + 6753) = v54;
  if (!*(_BYTE *)(*(_QWORD *)(v50 + 40) + *(unsigned __int8 *)(*(_QWORD *)(v50 + 40) + 1) + 226))
    *(_BYTE *)(v50 + 6753) = 1;
  *(_BYTE *)(v50 + 6472) = *(_BYTE *)(*((_QWORD *)&v106 + 1) + 48);
  *(float *)(v50 + 6476) = (float)*(int *)(*((_QWORD *)&v106 + 1) + 52);
  *(_QWORD *)(v50 + 496) = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 168);
  *(_DWORD *)(v50 + 504) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 176);
  *(_DWORD *)(v50 + 508) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 192);
  v55 = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 152);
  if (!v55)
    goto LABEL_105;
  if (v55 != *((_QWORD *)&v106 + 1) + 128)
  {
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
LABEL_105:
    v109 = (_QWORD *)v55;
    goto LABEL_109;
  }
  v109 = v108;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v55 + 24))(v55, v108);
LABEL_109:
  sub_1C977F158(v108, (_QWORD *)(v50 + 512));
  v56 = v109;
  if (v109 == v108)
  {
    v57 = 4;
    v56 = v108;
  }
  else
  {
    if (!v109)
      goto LABEL_114;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_114:
  v58 = *(_QWORD *)(v50 + 576);
  if (*(_BYTE *)(v58 + 753))
    v59 = *(_BYTE *)(*((_QWORD *)&v106 + 1) + 100) != 0;
  else
    v59 = 0;
  v60 = 0;
  v61 = 0;
  *(_BYTE *)(v50 + 465) = v59;
  *(_QWORD *)(v50 + 468) = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 104);
  *(_QWORD *)(v50 + 480) = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 112);
  *(_BYTE *)(v50 + 6456) = 0;
  *(_QWORD *)(v50 + 6492) = 0x2000000000000000;
  if (!*(_BYTE *)(*((_QWORD *)&v106 + 1) + 708))
  {
    v60 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 356);
    v61 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 360);
    *(_DWORD *)(v50 + 6480) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 4);
    v62 = *(double *)(*((_QWORD *)&v106 + 1) + 32);
    *(float *)(v50 + 6488) = v62;
  }
  *(_DWORD *)(v50 + 6500) = v60;
  *(_DWORD *)(v50 + 6504) = v61;
  *(_DWORD *)(v50 + 6508) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 552);
  v63 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 492);
  v64 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 508);
  v65 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 524);
  *(_OWORD *)(v50 + 6636) = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 536);
  v66 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 428);
  v67 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 444);
  v68 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 460);
  *(_OWORD *)(v50 + 6576) = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 476);
  *(_OWORD *)(v50 + 6560) = v68;
  *(_OWORD *)(v50 + 6544) = v67;
  *(_OWORD *)(v50 + 6528) = v66;
  *(_OWORD *)(v50 + 6624) = v65;
  *(_OWORD *)(v50 + 6608) = v64;
  *(_OWORD *)(v50 + 6592) = v63;
  *(_OWORD *)(v50 + 6512) = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 412);
  *(_DWORD *)(v50 + 6652) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 608);
  if (!*(_DWORD *)(v103 + 32))
  {
    v69 = *(_QWORD *)(v50 + 6464);
    if (v69 && !*(_BYTE *)(v69 + 1776))
      v70 = (double *)(v69 + 520);
    else
      v70 = (double *)(v58 + 472);
    v72 = 3000.0 / *v70;
    v73 = (int)(*v70 * (double)(uint64_t)(v72 + 0.5) + 0.5);
    v74 = *(_DWORD *)(v103 + 8);
    v75 = (uint64_t)(v72 * (double)v74);
    *(_QWORD *)(v103 + 16) = v75;
    *(_QWORD *)(v103 + 24) = (uint64_t)(v72 * (double)(v74 + 1)) - v75;
    *(_DWORD *)(v103 + 32) = v73;
  }
  v76 = *(_QWORD *)(v50 + 616);
  v77 = *(double *)(*((_QWORD *)&v106 + 1) + 632);
  *(float *)(v76 + 192) = v77;
  v78 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 640);
  *(_DWORD *)(v76 + 200) = v78;
  *(_QWORD *)(v76 + 220) = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 660);
  v79 = *(double *)(*((_QWORD *)&v106 + 1) + 672);
  *(float *)(v76 + 196) = v79;
  v80 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 644);
  *(_OWORD *)(v76 + 204) = v80;
  *(float *)(v76 + 228) = (float)((float)(v77 * (float)v78) * (float)DWORD1(v80)) * (float)v80;
  *(_OWORD *)(*(_QWORD *)(v50 + 16) + 20) = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 368);
  if (*(_BYTE *)(*((_QWORD *)&v106 + 1) + 68))
    *(_DWORD *)(v50 + 656) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 72);
  v81 = *(unsigned __int8 *)(*((_QWORD *)&v106 + 1) + 76);
  *(_BYTE *)(v50 + 246) = v81;
  if (v81)
  {
    v82 = *(__int128 **)(*((_QWORD *)&v106 + 1) + 80);
    if (v82)
    {
      v83 = *v82;
      *(_QWORD *)(v50 + 238) = *(_QWORD *)((char *)v82 + 14);
      *(_OWORD *)(v50 + 224) = v83;
    }
  }
  *(_QWORD *)(v50 + 456) = 0;
  if (!*(_DWORD *)(a1 + 456) && dword_1ED1ACCC0 >= 7)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "=== hooked up frame %d at index %d ===\n", *(_DWORD *)(v103 + 8), *(char *)(v2 + 17));
    syslog(31, "=== hooked up frame %d at index %d ===\n", *(_DWORD *)(v103 + 8), *(char *)(v2 + 17));
  }
  v84 = *(_QWORD *)(*(_QWORD *)(a1 + 9920) + 8 * *(char *)(v2 + 20));
  v85 = *(FILE **)(*(_QWORD *)(v84 + 576) + 256);
  if (v85)
    sub_1C9747A5C(*(_QWORD *)(v84 + 616), v85, 0, 0);
  v86 = *(_BYTE *)(v2 + 20);
  v87 = *(_BYTE *)(v2 + 17) + 1;
  *(_BYTE *)(v2 + 17) = v87;
  v88 = *(_DWORD *)(a1 + 9956);
  *(_BYTE *)(v2 + 20) = (v86 + 1) % v88;
  v89 = *(_DWORD *)(v103 + 8);
  v90 = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 40);
  if (v89)
  {
    if (!v90)
    {
      if (v88 != v87 && (!*(_BYTE *)(*((_QWORD *)&v106 + 1) + 708) || v89 != *(_DWORD *)(a1 + 512) - 1))
      {
        v6 = 0;
        goto LABEL_151;
      }
      goto LABEL_145;
    }
    goto LABEL_144;
  }
  if (v90)
LABEL_144:
    *(_DWORD *)(a1 + 9948) = v89;
LABEL_145:
  v91 = v87;
  v92 = *(_DWORD *)(a1 + 4 * *(int *)(a1 + 9952) + 608);
  v93 = v91 - v92;
  if (v93 < 1 || (v94 = v93 & ~(v93 >> 31), v94 >= v92))
  {
LABEL_150:
    v6 = sub_1C97A21B4(a1);
  }
  else
  {
    LOBYTE(v95) = *(_BYTE *)(v2 + 19);
    v96 = v94 + 1;
    while (1)
    {
      *(_BYTE *)(v2 + 18) = v95;
      v6 = sub_1C97A2318(a1, 0, 0, 1);
      v95 = (*(char *)(v2 + 19) + 1) % *(_DWORD *)(a1 + 9956);
      *(_BYTE *)(v2 + 19) = v95;
      --*(_BYTE *)(v2 + 17);
      if ((_DWORD)v6)
        break;
      if (--v96 < 2)
        goto LABEL_150;
    }
  }
LABEL_151:
  if (v104)
  {
    v97 = (unint64_t *)&v104->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (v105)
  {
    v99 = (unint64_t *)&v105->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  return v6;
}

void sub_1C97A2184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_1C972CFE0((uint64_t)va);
  sub_1C972CFE0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97A21B4(uint64_t a1)
{
  char *v2;
  int v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;

  v2 = (char *)(a1 + 9961);
  v3 = *(_DWORD *)(a1 + 9952);
  if (v3 < 1)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(v4) = 0;
    v5 = (int *)(a1 + 608);
    v6 = *(unsigned int *)(a1 + 9952);
    do
    {
      v7 = *v5++;
      v4 = v7 + (int)v4;
      --v6;
    }
    while (v6);
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 4 * v3 + 608);
  v9 = (int)log2((double)(int)v8);
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  if ((int)v8 < 1)
  {
    result = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 108 * v4 + 959;
    do
    {
      v14 = *(unsigned __int8 *)(a1 + v13);
      if (v14 <= *v2)
      {
        if (*v2 == 1)
          LOBYTE(v15) = v2[2];
        else
          v15 = ((v14 - 1) % (int)v8 + v2[2]) % *(_DWORD *)(a1 + 9956);
        v2[1] = v15;
        ++v12;
        result = sub_1C97A2318(a1, (int)v4 + (int)v11, v3, v10);
        if ((_DWORD)result)
          goto LABEL_20;
        v3 = *(_DWORD *)(a1 + 9952);
      }
      ++v11;
      v8 = *(int *)(a1 + 4 * v3 + 608);
      v13 += 108;
    }
    while (v11 < v8);
    result = 0;
  }
LABEL_20:
  *v2 -= v12;
  v2[2] = (v12 + v2[2]) % *(_DWORD *)(a1 + 9956);
  return result;
}

uint64_t sub_1C97A2318(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  _BYTE *v42;
  int v43;
  unsigned int v44;
  int v45;
  int v47;
  int v48;
  int v49;
  unint64_t v51;
  uint64_t *v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  double v59;
  double v60;
  uint8x8_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int16 *v73;
  __int16 *v74;
  BOOL v75;
  __int16 *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  BOOL v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unsigned __int16 *v111;
  unsigned __int16 *v112;
  BOOL v113;
  unsigned __int16 *v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  uint64_t v122;
  char *v123;
  unsigned int v124;
  size_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  unsigned __int8 *v140;
  unsigned int v141;
  int v142;
  char *v143;
  char v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  BOOL v148;
  uint64_t v149;
  int v150;
  int v151;
  BOOL v152;
  int v153;
  uint64_t *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *p_shared_owners;
  unint64_t v158;
  double *v159;
  int v160;
  unint64_t *v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  BOOL v165;
  unsigned int *v166;
  _BYTE *v167;
  char *v168;
  int v169;
  int v170;
  unsigned int *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  float v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  double v183;
  double v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  int v201;
  double v202;
  double v203;
  int v204;
  _DWORD *v205;
  int v206;
  int v207;
  int v208;
  float v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned int *v213;
  int v214;
  _BYTE *v215;
  _BOOL4 v216;
  double v217;
  int v218;
  long double v219;
  long double v220;
  int v221;
  FILE **v222;
  int v223;
  _QWORD *v224;
  uint64_t v225;
  int v226;
  float v227;
  char *v228;
  int v229;
  double v230;
  int v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  unsigned int v237;
  int v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  int v244;
  double v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  _BOOL4 v255;
  double v256;
  double v257;
  _BOOL4 v258;
  int v259;
  double v260;
  double v261;
  int v262;
  BOOL v263;
  int v264;
  FILE *v265;
  const char *v266;
  const char *v267;
  size_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  unsigned int v275;
  char v276;
  unint64_t v277;
  uint64_t v278;
  double v279;
  double v280;
  uint64_t v281;
  double v282;
  _BOOL4 v283;
  uint64_t v284;
  double v287;
  int v288;
  double v289;
  double v290;
  double v291;
  long double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  float v297;
  double v298;
  int v299;
  float v300;
  int v301;
  BOOL v303;
  float v304;
  int v305;
  int v306;
  int v307;
  float v308;
  int v309;
  int v310;
  int v311;
  float v312;
  float v314;
  int v315;
  int v316;
  int v317;
  float v318;
  int v319;
  __int16 *v320;
  _DWORD *v321;
  int v322;
  int v323;
  int v324;
  uint64_t v325;
  signed int v326;
  uint64_t v327;
  unsigned int v328;
  const char *v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  BOOL v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  __int16 *v345;
  __int16 *v346;
  BOOL v347;
  __int16 *v348;
  int v349;
  int v350;
  int v351;
  int v352;
  unsigned int v353;
  unsigned int v354;
  double v355;
  int v356;
  int v357;
  int v358;
  double v359;
  double v360;
  float v361;
  double v362;
  float v363;
  float v364;
  int v365;
  int v366;
  float v367;
  double v368;
  double v369;
  float v370;
  int v371;
  int v372;
  int v373;
  int v374;
  float v375;
  int v376;
  unsigned int v377;
  int v378;
  unsigned int v379;
  signed int v380;
  int v381;
  int v382;
  int v383;
  unsigned int v384;
  int v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  double v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  int v394;
  float v395;
  float v396;
  int v397;
  int v398;
  uint64_t v399;
  int v400;
  int v401;
  int v402;
  int *v403;
  uint64_t v404;
  uint64_t v405;
  signed int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  uint64_t v411;
  int v412;
  int v413;
  int v414;
  int v415;
  char v416;
  int v417;
  int v418;
  char v419;
  uint64_t v420;
  char v421;
  int v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  char v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v438;
  unsigned __int8 *v439;
  uint64_t v440;
  unsigned int v441;
  uint64_t v442;
  __int128 *v443;
  uint64_t v444;
  _DWORD *v445;
  int v446;
  uint64_t v447;
  int v448;
  int v449;
  int v450;
  __int16 *v451;
  _BYTE *v452;
  _BYTE *v453;
  int v454;
  char v455;
  uint64_t v456;
  _BYTE *v457;
  uint64_t v458;
  unsigned int *v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  int v463;
  uint64_t v464;
  int v465;
  int v466;
  _BYTE *v467;
  _BYTE *v468;
  int v469;
  unsigned __int8 *context;
  __int128 v471;
  _DWORD v472[5];
  uint64_t v473;
  __int128 v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  char v478;
  _BYTE __lk[23];
  uint64_t v480;

  v7 = a1;
  v480 = *MEMORY[0x1E0C80C00];
  v8 = (_BYTE *)(a1 + 9944);
  v9 = *(char *)(a1 + 9962);
  v10 = *(_BYTE *)(a1 + 9962);
  v11 = *(_QWORD *)(a1 + 9920);
  v12 = *(_QWORD *)(a1 + 10400);
  if (!v12)
    goto LABEL_26;
  v13 = *(_QWORD *)(v11 + 8 * v9);
  if (!v13)
    goto LABEL_26;
  if (*(_DWORD *)(v12 + 1752) != 1)
    goto LABEL_20;
  v14 = *(_DWORD *)(v13 + 6652);
  if (*(int *)(v13 + 6508) <= 0)
    v15 = *(_DWORD *)(v12 + 1680) + 1;
  else
    v15 = 0;
  *(_DWORD *)(v12 + 1680) = v15;
  if (v14 != *(_DWORD *)(v12 + 40))
  {
    v18 = *(_DWORD *)(v12 + 1660);
    v19 = v18 & 0xFFFFFFFE;
    if (v14)
    {
      if (v19 != 2)
        goto LABEL_19;
    }
    else
    {
      if (v19 != 4)
      {
LABEL_19:
        *(_DWORD *)(v12 + 40) = v14;
        goto LABEL_20;
      }
      v19 = -2;
    }
    sub_1C97EF5E0(v12, v18 + v19);
    goto LABEL_19;
  }
  if (v14)
    goto LABEL_20;
  if (v15)
  {
    if (v15 < 16)
      goto LABEL_20;
    v16 = *(_DWORD *)(v12 + 1660);
    if ((v16 & 0xFFFFFFFE) != 2)
      goto LABEL_20;
    v17 = v16 + 2;
  }
  else
  {
    v163 = *(_DWORD *)(v12 + 1660);
    if ((v163 & 0xFFFFFFFE) != 4)
      goto LABEL_20;
    v17 = v163 - 2;
  }
  sub_1C97EF5E0(v12, v17);
LABEL_20:
  v20 = *(int *)(v12 + 1608);
  v21 = *(_DWORD *)(v12 + 1648);
  if ((int)v20 >= 1)
  {
    if (*(_BYTE *)(v12 + 1749))
    {
      if (v21 % *((__int16 *)&unk_1C9857EA8 + 2 * v20 + 1) < *((__int16 *)&unk_1C9857EA8 + 2 * v20 + 1)
                                                            - *((__int16 *)&unk_1C9857EA8 + 2 * v20))
      {
        **(_BYTE **)(v11 + 8 * v9) = 1;
        if (dword_1ED1ACCC0 >= 7)
        {
          fwrite("Dropped before encoding.\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(31, "Dropped before encoding.\n");
          v21 = *(_DWORD *)(v12 + 1648);
        }
      }
    }
  }
  *(_DWORD *)(v12 + 1648) = v21 + 1;
  v9 = (char)v8[18];
  v10 = v8[18];
  v11 = *(_QWORD *)(v7 + 9920);
LABEL_26:
  v457 = v8;
  v22 = *(_QWORD *)(v11 + 8 * v9);
  v23 = (_BYTE *)(v22 + 6472);
  if (*v8)
  {
    v24 = *(_QWORD *)(v22 + 576);
    if (*(_DWORD *)(v22 + 652) && !*(_BYTE *)(v22 + 6753))
    {
      *(_BYTE *)(v22 + 648) = 5;
      *(_QWORD *)(v22 + 684) = 0x400000004;
      if (*v23)
      {
LABEL_51:
        *(_DWORD *)(v22 + 692) = -1;
        *(_BYTE *)(v22 + 756) = 1;
        v42 = (_BYTE *)(v22 + 676);
LABEL_91:
        *v42 = 0;
        sub_1C97B09E8(v22);
        goto LABEL_92;
      }
      v29 = (char *)(v24 + 489);
    }
    else
    {
      *(_BYTE *)(v22 + 648) = 0;
      *(_QWORD *)(v22 + 684) = 0;
      if (*(_BYTE *)(v24 + 584))
      {
        v25 = 0;
        v26 = (uint64_t *)(v24 + 10000);
        v27 = 1;
        do
        {
          v28 = *v26;
          if (*v26 && *(int *)(v28 + 1024) >= 1 && *(int *)(v28 + 12) < 1)
            break;
          v27 = v25 < 0x10;
          v26 += 2;
          ++v25;
        }
        while (v25 != 17);
        if (v27 && !*(_BYTE *)(v22 + 464))
          *(_QWORD *)(v22 + 684) = 0x400000004;
      }
      if (*v23)
        goto LABEL_51;
      v29 = (char *)(v24 + 488);
    }
    *(float *)(v22 + 6476) = (float)*v29;
    goto LABEL_51;
  }
  v30 = *(_DWORD *)(v7 + 9948);
  *(_BYTE *)(v22 + 676) = 0;
  *(_DWORD *)(v22 + 672) = a2;
  v31 = *(_QWORD *)(v22 + 576);
  v32 = *(_DWORD *)(v31 + 7872);
  if (a3 >= 1)
  {
    v33 = a3;
    v34 = (int *)(v31 + 7876);
    do
    {
      v35 = *v34++;
      v32 += v35;
      --v33;
    }
    while (v33);
  }
  v36 = *(_DWORD *)(v31 + 4 * a3 + 7876);
  if (v36 >= 1)
  {
    v37 = v36 + v32;
    v38 = *(_DWORD *)(v22 + 652) - v30;
    v39 = v32;
    v40 = (unsigned __int8 *)(v31 + 108 * v32 + 959);
    while (1)
    {
      v41 = *v40;
      v40 += 108;
      if (v38 == v41)
        break;
      if (++v39 >= v37)
        goto LABEL_53;
    }
    *(_DWORD *)(v22 + 672) = v39;
    a2 = v39;
  }
LABEL_53:
  v43 = *(__int16 *)(v31 + 874);
  if (v43 <= 0)
    *(_DWORD *)(v31 + 228) = -9999;
  if (*(_BYTE *)(v31 + 429))
  {
    *(_BYTE *)(v22 + 648) = 0;
    if (!*v23)
      *(float *)(v22 + 6476) = (float)*(char *)(v31 + 488);
    v44 = 0;
    a4 = 0;
    *(_DWORD *)(v31 + 228) = 0;
LABEL_59:
    v45 = *(_DWORD *)(v31 + 456);
    if (v45 == 40 || v45 == 0)
    {
      v47 = v44 >= 3 ? *(char *)(v31 + 108 * a2 + 958) : 0;
      *(_DWORD *)(v22 + 656) = v47;
      if (v47 == a4)
        *(_BYTE *)(*(_QWORD *)(v22 + 616) + 40) = 0;
    }
    v42 = (_BYTE *)(v22 + 756);
    goto LABEL_91;
  }
  v48 = (unsigned __int16)v43;
  v49 = *(_DWORD *)(v22 + 652);
  if (!v49 || *(_BYTE *)(v22 + 6753))
  {
    v44 = v49 > 0 && *(_BYTE *)(v31 + 536) != 0;
    *(_BYTE *)(v22 + 648) = v44;
    if ((__int16)v48 >= 1)
      *(_DWORD *)(v31 + 228) = v48 - 1;
    if (!*v23)
      *(float *)(v22 + 6476) = (float)*(char *)(v31 + 488);
    if ((v44 & 1) == 0 && *(_BYTE *)(v31 + 584))
    {
      v51 = 0;
      v52 = (uint64_t *)(v31 + 10000);
      v53 = 1;
      do
      {
        v54 = *v52;
        if (*v52 && *(int *)(v54 + 1024) >= 1 && *(int *)(v54 + 12) < 1)
          break;
        v53 = v51 < 0x10;
        v52 += 2;
        ++v51;
      }
      while (v51 != 17);
      if (v53)
        *(_DWORD *)(v22 + 684) = *(unsigned __int8 *)(v31 + 962);
    }
    goto LABEL_59;
  }
  v153 = *(char *)(v31 + 108 * a2 + 957);
  switch(v153)
  {
    case 'R':
      v44 = 5;
      *(_BYTE *)(v22 + 648) = 5;
      v205 = (_DWORD *)(v31 + 228);
      v206 = *(_DWORD *)(v31 + 228);
      goto LABEL_285;
    case 'P':
      v44 = 3;
LABEL_284:
      *(_BYTE *)(v22 + 648) = v44;
      v205 = (_DWORD *)(v31 + 228);
      v206 = *(_DWORD *)(v31 + 228);
      if (!v206)
      {
        v44 = 2;
        *(_BYTE *)(v22 + 648) = 2;
        v206 = (__int16)v48;
        *v205 = (__int16)v48;
        if (!*v23)
          *(float *)(v22 + 6476) = (float)*(char *)(v31 + 488);
        goto LABEL_304;
      }
LABEL_285:
      if (*v23)
      {
        v207 = *(char *)(v31 + 108 * a2 + 960);
      }
      else
      {
        v207 = *(char *)(v31 + 108 * a2 + 960);
        *(float *)(v22 + 6476) = (float)(v207 + *(char *)(v31 + 488));
      }
      *(_DWORD *)(v22 + 680) = v207;
      *(_DWORD *)(v22 + 684) = *(unsigned __int8 *)(v31 + 108 * a2 + 962);
LABEL_304:
      if (v206 >= 1)
        *v205 = v206 - 1;
      goto LABEL_59;
    case 'L':
      v44 = 4;
      goto LABEL_284;
  }
LABEL_92:
  if (!*(_QWORD *)(v11 + 8 * v9))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("No frame to encode.\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "No frame to encode.\n");
    }
    return 4294954385;
  }
  v55 = v10;
  v56 = *(_QWORD *)(*(_QWORD *)(v7 + 9920) + 8 * v9);
  v456 = v56 + 6680;
  v57 = *(_DWORD *)(v7 + 544);
  v58 = *(_DWORD *)(v7 + 11016);
  *(_DWORD *)(v7 + 11016) = v58 + 1;
  *(_DWORD *)(v56 + 584) = v58;
  v471 = *(_OWORD *)(v7 + 10384);
  *(_OWORD *)(v7 + 10384) = 0u;
  sub_1C9746DB4((_QWORD *)(v7 + 10384), *(_QWORD *)(v56 + 616), *(_QWORD *)(v56 + 624));
  if ((v57 & 2) != 0)
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v7 + 9824), 0xFFFFFFFFFFFFFFFFLL);
  v458 = v7;
  context = (unsigned __int8 *)v56;
  if (*(_BYTE *)v56)
    goto LABEL_96;
  if (*(_BYTE *)(*(_QWORD *)(v56 + 8) + 33))
  {
    v64 = *(_QWORD *)(v56 + 16);
    *(_BYTE *)(v64 + 4) = -1;
    *(_DWORD *)v64 = -1;
    *(_BYTE *)(v64 + 52) = 0;
    v65 = *(_QWORD *)(v56 + 16);
    *(_OWORD *)(v65 + 104) = 0u;
    *(_OWORD *)(v65 + 88) = 0u;
    *(_OWORD *)(v65 + 72) = 0u;
    *(_OWORD *)(v65 + 56) = 0u;
    v67 = *(unsigned __int8 **)(v56 + 8);
    v66 = *(_QWORD *)(v56 + 16);
    v68 = v67[34];
    *(_BYTE *)v66 = v68;
    v69 = v67[39];
    *(_BYTE *)(v66 + 4) = v69;
    *(_BYTE *)(v66 + 2) = v67[36];
    if (v68 != 255)
    {
      v70 = *(_QWORD *)(v56 + 6464);
      v71 = *(unsigned __int8 *)(v70 + 504);
      v72 = v70 + 8 * *(int *)(v70 + 44);
      v73 = (__int16 *)(v72 + 54);
      v74 = (__int16 *)(v72 + 52);
      v75 = v71 == 0;
      if (v71)
        v76 = v73;
      else
        v76 = v74;
      *(_DWORD *)(v66 + 8) = *v76;
      if (v75)
        v74 = v73;
      *(_DWORD *)(v66 + 12) = *v74;
    }
    v77 = v67[38];
    *(_BYTE *)(v66 + 3) = v77;
    v78 = *(_QWORD *)(v56 + 616);
    v79 = *(_DWORD *)(v78 + 520);
    v80 = *(_DWORD *)(v78 + 524);
    *(_DWORD *)(v66 + 36) = 0;
    *(_DWORD *)(v66 + 44) = 0;
    if (v68 == 255)
    {
      *(_DWORD *)(v66 + 40) = v79 - 1;
      v84 = v80 - 1;
    }
    else
    {
      v82 = *(_DWORD *)(v66 + 8);
      v81 = *(_DWORD *)(v66 + 12);
      v83 = v82 - 1;
      *(_DWORD *)(v66 + 40) = v82 - 1;
      v84 = v81 - 1;
      *(_DWORD *)(v66 + 48) = v81 - 1;
      if (v77 == 255)
        goto LABEL_145;
      v85 = *(_DWORD *)(v66 + 20);
      if (v85 < 1)
        goto LABEL_145;
      v86 = *(_DWORD *)(v66 + 24);
      if (v86 < 1 || *(_DWORD *)(v66 + 28) || *(_DWORD *)(v66 + 32))
        goto LABEL_145;
      v87 = (v79 + v82 * v85 - 1) / v79;
      v88 = (v80 + v81 * v86 - 1) / v80;
      v89 = __OFSUB__(v82, v87);
      v90 = v82 - v87;
      if (v90 < 0 != v89)
        ++v90;
      v91 = v90 >> 1;
      v92 = (v83 + v87) / 2;
      v89 = __OFSUB__(v81, v88);
      v93 = v81 - v88;
      if (v93 < 0 != v89)
        ++v93;
      v94 = v93 >> 1;
      v95 = (v84 + v88) / 2;
      if (v91 <= 4)
        v91 = 4;
      v96 = v91 - 4;
      v97 = v92 + 4;
      if (v97 < v83)
        v83 = v97;
      *(_DWORD *)(v66 + 36) = v96;
      *(_DWORD *)(v66 + 40) = v83;
      if (v94 <= 4)
        v98 = 4;
      else
        v98 = v94;
      v99 = v98 - 4;
      v100 = v95 + 4;
      if (v100 < v84)
        v84 = v100;
      *(_DWORD *)(v66 + 44) = v99;
    }
    *(_DWORD *)(v66 + 48) = v84;
LABEL_145:
    if (v69 != 255)
      *(_BYTE *)(v66 + 52) = 1;
    sub_1C97EF704((char *)v66);
  }
  v454 = v10;
  v455 = v57;
  v105 = *(_QWORD *)(v56 + 576);
  if (*(_BYTE *)(v105 + 448))
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(v56 + 8) + 34) != 255)
    {
      v106 = *(_QWORD *)(v56 + 6464);
      if (v106)
      {
        v107 = *(_QWORD *)(v56 + 616);
        v108 = *(_QWORD *)(v107 + 520);
        *(_QWORD *)(v107 + 504) = v108;
        v109 = *(unsigned __int8 *)(v106 + 504);
        v110 = v106 + 8 * *(int *)(v106 + 44);
        v111 = (unsigned __int16 *)(v110 + 54);
        v112 = (unsigned __int16 *)(v110 + 52);
        v113 = v109 == 0;
        if (v109)
          v114 = (unsigned __int16 *)(v110 + 54);
        else
          v114 = (unsigned __int16 *)(v110 + 52);
        v115 = *v114;
        *(_DWORD *)(v107 + 512) = (__int16)v115;
        if (!v113)
          v111 = v112;
        v116 = *v111;
        *(_DWORD *)(v107 + 516) = (__int16)v116;
        if (!*(_BYTE *)(v107 + 432)
          || (v115 ? (v117 = v116 == 0) : (v117 = 1),
              v117 || ((_DWORD)v108 == (__int16)v115 ? (v118 = HIDWORD(v108) == (__int16)v116) : (v118 = 0), v118)))
        {
          *(_QWORD *)(v107 + 512) = 0;
        }
        else
        {
          v119 = *(_QWORD *)(v105 + 10408);
          if (HIDWORD(v108))
          {
            v120 = *(_QWORD *)(v107 + 488);
            v121 = (int)v108;
            v122 = SHIDWORD(v108);
            v123 = *(char **)(v107 + 472);
            do
            {
              --v122;
              memset(v123, 128, v121);
              v123 += v120;
            }
            while (v122);
            v107 = *((_QWORD *)context + 77);
            v124 = *(_DWORD *)(v107 + 524);
            if (v124 >= 2)
            {
              v125 = *(int *)(v107 + 520);
              v126 = *(_QWORD *)(v107 + 496);
              v127 = (uint64_t)(int)v124 >> 1;
              v128 = *(char **)(v107 + 480);
              do
              {
                --v127;
                memset(v128, 128, v125);
                v128 += v126;
              }
              while (v127);
              v107 = *((_QWORD *)context + 77);
            }
          }
          v129 = *(_QWORD *)(v119 + 24);
          v130 = *(unsigned int *)(v107 + 504);
          v131 = *(unsigned int *)(v107 + 508);
          v132 = *(unsigned int *)(v107 + 512);
          v133 = *(unsigned int *)(v107 + 516);
          v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107);
          v135 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)context + 77) + 32))(*((_QWORD *)context + 77));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129 + 32))(v129, v130, v131, v132, v133, v134, v135);
          v136 = 0;
          v56 = (uint64_t)context;
          v137 = *((_QWORD *)context + 77);
          v138 = 1;
          do
          {
            v139 = v138;
            *(_QWORD *)(v137 + 8 * v136 + 400) = *(_QWORD *)(v137 + 8 * v136 + 472);
            v137 = *((_QWORD *)context + 77);
            *(_QWORD *)(v137 + 8 * v136 + 416) = *(_QWORD *)(v137 + 8 * v136 + 488);
            v136 = 1;
            v138 = 0;
          }
          while ((v139 & 1) != 0);
        }
      }
    }
  }
  v63 = sub_1C97B0A5C(v56);
  if ((_DWORD)v63)
  {
    v56 = (uint64_t)context;
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: Precompress failed\n", *((_DWORD *)context + 163));
      syslog(27, "Frame %d: Precompress failed\n", *((_DWORD *)context + 163));
    }
    goto LABEL_681;
  }
  v140 = context;
  v141 = context[648];
  if (v141 == 1)
  {
    v142 = *((_DWORD *)context + 163);
    *(_DWORD *)(v7 + 324) = v142;
  }
  else
  {
    v142 = *(_DWORD *)(v7 + 324);
  }
  v143 = (char *)(context + 6292);
  *((_DWORD *)context + 152) = v142;
  v144 = v455;
  if (*(_BYTE *)(v7 + 584))
  {
    v145 = 0;
    v146 = *((_QWORD *)context + 72);
    v147 = (uint64_t *)(v146 + 10000);
    v148 = 1;
    do
    {
      v149 = *v147;
      if (*v147 && *(int *)(v149 + 1024) >= 1 && *(int *)(v149 + 12) < 1)
        break;
      v148 = v145 < 0x10;
      v147 += 2;
      ++v145;
    }
    while (v145 != 17);
    if (v148)
    {
      v150 = *(_DWORD *)(v146 + 456);
      if (v150 == 34)
      {
        v151 = context[464];
        goto LABEL_220;
      }
      if (!v150)
      {
        v151 = *(unsigned __int8 *)(*((_QWORD *)context + 77) + 1172);
LABEL_220:
        v152 = v151 == 0;
        goto LABEL_221;
      }
    }
    v152 = 0;
LABEL_221:
    context[757] = v152;
  }
  v164 = *(_QWORD *)(v7 + 10400);
  v453 = context + 6292;
  if (v164 && *(_BYTE *)(v164 + 1776) && !*((_DWORD *)context + 163))
  {
    v465 = 0;
    v452 = context + 596;
    context[596] = 0;
    v166 = (unsigned int *)(context + 652);
    v168 = (char *)(context + 632);
    v463 = *(_DWORD *)(*((_QWORD *)context + 79) + 1024);
    v167 = (_BYTE *)(v164 + 1776);
  }
  else
  {
    if (v141)
      v165 = 1;
    else
      v165 = context[757] == 0;
    v452 = context + 596;
    context[596] = v165;
    if (!v164)
      goto LABEL_571;
    v166 = (unsigned int *)(context + 652);
    v465 = *((_DWORD *)context + 163);
    v167 = (_BYTE *)(v164 + 1776);
    v168 = (char *)(context + 632);
    v463 = *(_DWORD *)(*((_QWORD *)context + 79) + 1024);
    if (!*(_BYTE *)(v164 + 1776))
      goto LABEL_244;
  }
  v169 = *(_DWORD *)(v164 + 1784);
  if (v141 >= 5)
  {
    *((_DWORD *)context + 150) = v169;
    v175 = *(_DWORD *)(v164 + 1788) + 1;
    *(_DWORD *)(v164 + 1788) = v175;
  }
  else
  {
    v467 = v167;
    v170 = v169 + 1;
    *(_DWORD *)(v164 + 1784) = v169 + 1;
    if (v169 < -1
      || (v171 = *(unsigned int **)(*(_QWORD *)(v164 + 1800) + 8 * (v170 % *(_DWORD *)(v164 + 1780)))) == 0)
    {
      if (dword_1ED1ACCC0 < 3)
        goto LABEL_549;
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Failed to find gop stats buffer for gop_id %d\n", v170);
      syslog(27, "mpt_rc: Failed to find gop stats buffer for gop_id %d\n", *(_DWORD *)(v164 + 1784));
      goto LABEL_279;
    }
    *(_QWORD *)__lk = v171 + 10;
    __lk[8] = 1;
    std::mutex::lock((std::mutex *)(v171 + 10));
    if (!v171[8])
      goto LABEL_238;
    do
      std::condition_variable::wait((std::condition_variable *)(v171 + 26), (std::unique_lock<std::mutex> *)__lk);
    while (v171[8]);
    if (__lk[8])
LABEL_238:
      std::mutex::unlock(*(std::mutex **)__lk);
    v172 = *(_DWORD *)(v164 + 1784);
    v173 = *(_DWORD *)(v164 + 1780);
    v89 = __OFSUB__(v172, v173);
    v174 = v172 - v173;
    v143 = (char *)(context + 6292);
    if (v174 < 0 == v89)
    {
      v246 = *v171;
      if ((int)v246 >= 1 && v246 <= *(_DWORD *)(v164 + 496))
      {
        v459 = v166;
        v269 = 0;
        v270 = 0;
        v271 = 56 * v246;
        while (1)
        {
          v272 = *((_QWORD *)v171 + 1);
          v273 = *(_DWORD *)(v272 + v269);
          if (v273 != 2)
            break;
          v274 = v272 + v269;
          v275 = *(unsigned __int8 *)(v272 + v269 + 32);
          v276 = *(_BYTE *)(v272 + v269 + 32);
          if (v275 <= 4)
          {
            *(_QWORD *)(v164 + 400) = 0;
            *(_OWORD *)(v164 + 368) = 0u;
            *(_OWORD *)(v164 + 384) = 0u;
            *(_OWORD *)(v164 + 336) = 0u;
            *(_OWORD *)(v164 + 352) = 0u;
            v276 = *(_BYTE *)(v274 + 32);
          }
          v277 = *(_QWORD *)(v274 + 40);
          *(_QWORD *)(v164 + 328 + 8 * v276 + 8) += (int)(v277 >> 3);
          ++*(_DWORD *)(v164 + 328 + 4 * v276 + 56);
          v278 = *(_QWORD *)(v274 + 48);
          *(_QWORD *)(v164 + 640) += (int)v277 - (int)*(double *)(v274 + 16);
          ++*(_DWORD *)(v164 + 656);
          if (*(_BYTE *)(v164 + 654))
          {
            v279 = *(double *)(v164 + 544) * 0.95 + 1.0;
            *(double *)(v164 + 544) = v279;
            v280 = *(double *)(v164 + 552) * 0.95 + (double)(v277 - v278);
            *(double *)(v164 + 552) = v280;
            *(double *)(v164 + 560) = v280 / v279;
            v277 = v278;
          }
          v281 = v272 + v269;
          v282 = exp2((*(float *)(v281 + 4) + -12.0) / 6.0) * 0.850000024;
          if (v275 >= 5)
            v282 = v282 / *(float *)(*(_QWORD *)(v164 + 608) + 4 * *(int *)(v281 + 24));
          v143 = (char *)(context + 6292);
          sub_1C97ED8B0(v164 + 720, v277, v282, *(double *)(v281 + 8));
          ++v270;
          v269 += 56;
          if (v271 == v269)
          {
            v172 = *(_DWORD *)(v164 + 1784);
            v166 = v459;
            goto LABEL_241;
          }
        }
        if (dword_1ED1ACCC0 < 3)
        {
          v166 = v459;
          goto LABEL_549;
        }
        v284 = v272 + 56 * v270;
        v247 = "mpt_rc: frame %d Invalid state %d\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: frame %d Invalid state %d\n", *(_DWORD *)(v284 + 28), v273);
        v248 = *(unsigned int *)(v284 + 28);
        v246 = *(unsigned int *)(v272 + v269);
        v166 = v459;
      }
      else
      {
        if (dword_1ED1ACCC0 < 3)
          goto LABEL_549;
        v247 = "mpt_rc: gop %d Invalid size %d\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: gop %d Invalid size %d\n", v174, v246);
        v248 = (*(_DWORD *)(v164 + 1784) - *(_DWORD *)(v164 + 1780));
      }
      syslog(27, v247, v248, v246);
LABEL_279:
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: Failed in MptRcAquireGopStatsUpdateModel\n", v465);
        syslog(27, "Frame %d: Failed in MptRcAquireGopStatsUpdateModel\n", v465);
      }
      goto LABEL_549;
    }
LABEL_241:
    v175 = 0;
    *v171 = 0;
    v167 = v467;
    v140 = context;
    *((_DWORD *)context + 150) = v172;
    *(_DWORD *)(v164 + 1788) = 0;
    v7 = v458;
    v144 = v455;
  }
  *((_DWORD *)v140 + 151) = v175;
LABEL_244:
  v176 = *(unsigned __int8 *)(v164 + 1696);
  if (*(_BYTE *)(v164 + 1696)
    || *v167 && *(_DWORD *)(v164 + 1784) < *(_DWORD *)(v164 + 1780)
    || v140[648] > 4u
    || (int)*v166 < 1)
  {
    goto LABEL_245;
  }
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  do
  {
    v196 = *(_QWORD *)(v164 + 8 * v192 + 336);
    v197 = *(_DWORD *)(v164 + 384 + 4 * v192);
    if (v192 != 5)
    {
      if (v196)
      {
        if (v193 || (v193 = *(_QWORD *)(v164 + 8 * v192 + 336), v197 != 1))
        {
          if (dword_1ED1ACCC0 < 3)
            goto LABEL_549;
          v265 = (FILE *)*MEMORY[0x1E0C80C10];
          v266 = "more than 1 RC frame in prev GOP\n";
          v267 = "more than 1 RC frame in prev GOP\n";
          v268 = 33;
LABEL_417:
          fwrite(v267, v268, 1uLL, v265);
          syslog(27, v266);
          goto LABEL_549;
        }
      }
    }
    v195 += v196;
    v194 += v197;
    ++v192;
  }
  while (v192 != 6);
  if (!v193)
  {
    if (dword_1ED1ACCC0 < 3)
      goto LABEL_549;
    v265 = (FILE *)*MEMORY[0x1E0C80C10];
    v266 = "no RC frame found in prev GOP\n";
    v267 = "no RC frame found in prev GOP\n";
    v268 = 30;
    goto LABEL_417;
  }
  v198 = *(_DWORD *)(v164 + 328);
  if (v194 > v198)
    goto LABEL_549;
  v7 = v458;
  if (v194 >= v198)
  {
    v199 = 0;
    v200 = (*(_DWORD *)(v164 + 432) + 1) % 3;
    *(_DWORD *)(v164 + 432) = v200;
    *(double *)(v164 + 8 * v200 + 408) = (double)v193 / (double)v195;
    v201 = v200 + 3;
    v202 = 0.0;
    while (1)
    {
      v203 = *(double *)(v164 + 8 * (v201 % 3) + 408);
      if (v203 == -1.0)
        break;
      v202 = v202 + v203 * *(double *)&qword_1C9857E30[v199++];
      --v201;
      if (v199 == 3)
      {
        *(double *)(v164 + 440) = v202;
        break;
      }
    }
  }
LABEL_245:
  v468 = v167;
  v177 = *((unsigned int *)v140 + 1620);
  v178 = *((_DWORD *)v140 + 1621);
  v179 = *((float *)v140 + 1622);
  v180 = *((_DWORD *)v140 + 1623);
  v181 = *((_DWORD *)v140 + 1624);
  v182 = *((_QWORD *)v143 + 26);
  v183 = (double)v177;
  *(double *)(v164 + 512) = (double)v177;
  if (!*(_BYTE *)(*(_QWORD *)(v164 + 1688) + 447))
  {
    *(double *)(v164 + 520) = v179;
    *(double *)(v164 + 760) = v183 / v179;
  }
  if (v176 == 1)
  {
    v184 = *(double *)(v164 + 520);
    v185 = 250;
    if (*(_BYTE *)(v164 + 1749))
    {
      if ((int)(3000.0 / v184) <= 250)
        v185 = 250;
      else
        v185 = (int)(3000.0 / v184);
    }
    v186 = *(_QWORD *)(v164 + 1760);
    v187 = *(_QWORD *)(*(_QWORD *)v168 + 16);
    if (*(_DWORD *)(v186 + 48) == 2)
    {
      if (v187 < 1
        || (v188 = *(int *)(*(_QWORD *)v168 + 32), (int)v188 < 1)
        || (v189 = *(_QWORD *)(v186 + 40), v189 < 1)
        || (v190 = v187 - v189, v190 >= 20 * v188))
      {
        v191 = *(_DWORD *)(v186 + 12) - (int)(v183 / v184);
      }
      else
      {
        v191 = *(_DWORD *)(v186 + 12) - v190 * v177 / *(unsigned int *)(*(_QWORD *)v168 + 32);
      }
      v204 = v191 & ~(v191 >> 31);
      *(_DWORD *)(v186 + 12) = v204;
    }
    else
    {
      v204 = *(_DWORD *)(v186 + 12);
    }
    *(_QWORD *)(v186 + 40) = v187;
    v208 = (int)(v183 * (double)v185 / 1000.0) - v204;
    v181 = v208 & ~(v208 >> 31);
    *(_DWORD *)(v186 + 16) = v181;
    *(_DWORD *)(v186 + 20) = v185;
LABEL_290:
    v180 = *(_DWORD *)(v186 + 12);
  }
  else
  {
    v186 = *(_QWORD *)(v164 + 1760);
    if (v186)
    {
      v181 = *(_DWORD *)(v186 + 16);
      goto LABEL_290;
    }
  }
  *(_QWORD *)&v474 = __PAIR64__(v178, v177);
  *((_QWORD *)&v474 + 1) = __PAIR64__(v180, LODWORD(v179));
  v475 = v181;
  v461 = v182;
  v476 = v182;
  sub_1C97EE7E0(v164, (uint64_t)&v474);
  v210 = (char)context[648];
  v211 = context[648];
  v212 = *(unsigned __int8 *)(v164 + 1776);
  if (!*(_BYTE *)(v164 + 1776))
  {
    v218 = *(_DWORD *)(v164 + 656);
    if (context[6456])
    {
      if (v218)
      {
LABEL_310:
        if (*(_BYTE *)(v164 + 1696))
        {
          v219 = exp2((*(double *)(v164 + 576) + -12.0) / 6.0);
          v60 = 0.850000024;
          v220 = v219 * 0.850000024;
          *(long double *)(v164 + 632) = v220;
          LOWORD(v220) = word_1C9857F04[v210];
          v59 = (double)*(unint64_t *)&v220;
          *(double *)(v164 + 576) = v59;
        }
        else
        {
          sub_1C97EEEE8((double *)v164, *((double *)context + 787));
          v59 = *(double *)(v164 + 576);
        }
        context[6456] = 1;
        goto LABEL_489;
      }
LABEL_309:
      *(_BYTE *)(v164 + 652) = v211;
      *(_BYTE *)(v164 + 650) = 1;
      goto LABEL_310;
    }
    if (!v218)
      goto LABEL_309;
LABEL_293:
    v213 = v166;
    *(_BYTE *)(v164 + 652) = v211;
    v214 = *v453;
    *(_BYTE *)(v164 + 653) = v214;
    if (v211 <= 2)
    {
      v215 = (_BYTE *)(v164 + 650);
      v216 = 1;
      *(_BYTE *)(v164 + 650) = 1;
      v217 = *((double *)context + 787);
LABEL_321:
      v226 = *(_DWORD *)(v164 + 712);
      *v215 = v216;
      if (v212 && *(_DWORD *)(v164 + 1784) < *(_DWORD *)(v164 + 1780))
      {
        if (v211 > 4)
        {
          v63 = sub_1C97EEF84(v164, (uint64_t)context);
          v166 = v213;
          if ((_DWORD)v63)
            goto LABEL_550;
          v230 = *(double *)(v164 + 576);
          v7 = v458;
          v144 = v455;
          v228 = (char *)(context + 6292);
        }
        else
        {
          v227 = *(float *)(v164 + 1792);
          v228 = (char *)(context + 6292);
          v166 = v213;
          if (v211 > 2)
          {
            v229 = *((_DWORD *)context + 170);
            if (v229 <= 3)
              v229 = 3;
            v227 = v227 + (float)v229;
          }
          v230 = v227;
          v7 = v458;
        }
LABEL_483:
        v60 = 51.0;
        if (v230 < 51.0)
          v60 = v230;
        v61 = COERCE_UINT8X8_T(12.0);
        if (v230 <= 12.0)
          v59 = 12.0;
        else
          v59 = v60;
        *(double *)(v164 + 576) = v59;
        v228[164] = 1;
        goto LABEL_489;
      }
      if (v226 == 1)
      {
        v216 = 0;
        *v215 = 0;
      }
      v231 = *(_DWORD *)(v164 + 656);
      v232 = *(double *)(v164 + 536);
      v233 = v232 * (double)(v231 + 1);
      v234 = (double)*(uint64_t *)(v164 + 640);
      if (v211 > 4)
      {
        *((double *)context + 71) = v234 / v233;
      }
      else
      {
        v235 = *(double *)(v164 + 1768);
        if (v235 > v232)
        {
          v234 = v232 - v235 + v234;
          *(double *)(v164 + 1768) = v235 + v232 * -0.5;
        }
        v236 = v234 / v233;
        *((double *)context + 71) = v234 / v233;
        v237 = *(_DWORD *)(v164 + 496);
        if (v237 <= *(char *)(*(_QWORD *)(v164 + 1688) + 9961) || *(_BYTE *)(v456 + 73))
        {
          if (v226 != 1)
            v232 = v233 / (double)v231;
          if (v237)
          {
            v238 = *(_DWORD *)(v164 + 328);
            v239 = -1.0;
            if (v238 >= 2)
            {
              v240 = *(double *)(v164 + 440);
              if (v240 != -1.0)
                v239 = v240 / ((1.0 - v240) / (double)(v238 - 1));
            }
            if (v239 == -1.0)
              v239 = 3.0;
            v241 = 0.9;
            if (context[757])
              v241 = 1.0;
            v232 = sub_1C97EF258(v164, v216, 0, v232, v241, v239);
          }
          if (*(_BYTE *)(v164 + 654))
          {
            v242 = *(double *)(v164 + 560);
            v243 = 10.0;
            if (v232 > v242)
              v243 = v232 - v242;
          }
          else
          {
            v243 = v232;
          }
          if (*(_DWORD *)(v164 + 712))
          {
            if (*v453)
              v255 = 1;
            else
              v255 = context[6293] != 0;
            v166 = v213;
            v259 = *(_DWORD *)(v164 + 676);
            if (v259 >= 1)
            {
              v260 = (double)v259 / 10.0;
              if (v243 * 0.25 < v260)
                v260 = v243 * 0.25;
              v261 = v243 - v260;
              v262 = *(_DWORD *)(v164 + 680);
              if (v261 <= (double)v262)
                v243 = v261;
              else
                v243 = (double)v262;
            }
            v263 = v211 < 3 || *(_BYTE *)(v164 + 649) == 0;
            v258 = v263;
            if (v263)
              v256 = sub_1C97ED588(v164 + 720, v255, v226 == 1, v217, v236, v243);
            else
              v256 = exp2((*(double *)(v164 + 584) + 3.0 + -12.0) / 6.0) * 0.850000024;
            if (!v255 || *(_BYTE *)(v164 + 1600))
              goto LABEL_450;
            *(_QWORD *)(v164 + 744) = 0;
            *(_QWORD *)(v164 + 728) = 0;
            v264 = *(_DWORD *)(v164 + 780);
            if (v264 < 1)
              goto LABEL_449;
            goto LABEL_448;
          }
          if (*v215)
          {
            v166 = v213;
            if (dword_1ED1ACCC0 >= 7)
            {
              fwrite("mode: intra\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(31, "mode: intra\n");
            }
            v256 = sub_1C97ED588(v164 + 720, 0, 0, v217, v236, v243);
            if (*(_DWORD *)(v164 + 616) >= 2u)
            {
              v257 = 1.39999998;
              if (context[757])
                v257 = 1.0;
              v256 = v256 / v257;
            }
            if (*(_BYTE *)(v456 + 73))
            {
              v258 = 0;
LABEL_450:
              if (v256 >= 0.850000024)
                v245 = v256;
              else
                v245 = 0.850000024;
              v244 = *(_DWORD *)(v164 + 712);
              v287 = 1.0;
              if (!v244)
              {
                v288 = *(_DWORD *)(v164 + 656);
                if (v288 >= 5)
                {
                  v289 = (double)*(uint64_t *)(v164 + 640)
                       / (fmax(sqrt((double)(v288 / 0x19u)), 1.0)
                        * (*(double *)(v164 + 512) + *(double *)(v164 + 512)))
                       + 1.0;
                  v290 = 2.0;
                  if (v289 < 2.0)
                    v290 = v289;
                  if (v289 <= 0.5)
                    v287 = 0.5;
                  else
                    v287 = v290;
                  v245 = v245 * v287;
                }
              }
              if (v258)
              {
                v291 = *(double *)(v164 + 584);
                if (*(_BYTE *)(v164 + 649))
                  v291 = v291 + 2.91256094;
                v292 = exp2((v291 + -12.0) / 6.0) * 0.850000024;
                v293 = v292 * 1.51452804;
                v294 = v292 / 1.51452804;
                if (v287 <= 1.05)
                {
                  if (v287 < 0.95)
                    v294 = v294 / 1.51452804;
                }
                else
                {
                  v293 = v293 * 1.51452804;
                }
                if (v293 > v245)
                  v293 = v245;
                if (v294 >= v245)
                  v245 = v294;
                else
                  v245 = v293;
              }
              v230 = log(v245 / 0.850000024) * 6.0 / 0.693147181 + 12.0;
              *(double *)(v164 + 576) = v230;
LABEL_474:
              if (v244 == 1)
              {
                v295 = *(double *)(v164 + 624);
                v7 = v458;
                v144 = v455;
                v228 = (char *)(context + 6292);
                if (v230 < v295)
                {
                  v296 = v295 + -6.0;
                  if (v230 < v296)
                    v230 = v296;
                  if (v230 < 22.0)
                    v230 = 22.0;
                }
              }
              else
              {
                v7 = v458;
                v144 = v455;
                v228 = (char *)(context + 6292);
              }
              *(double *)(v164 + 632) = v245;
              goto LABEL_483;
            }
            v258 = 0;
          }
          else
          {
            v166 = v213;
            if ((v210 - 3) > 2)
            {
              v258 = 0;
              v256 = 0.0;
              goto LABEL_450;
            }
            if (*v453)
            {
              v283 = 1;
            }
            else if (context[6293])
            {
              v283 = *(_DWORD *)(*(_QWORD *)(v164 + 1688) + 456) != 0;
            }
            else
            {
              v283 = 0;
            }
            v258 = (v210 & 0xFFFFFFFD) == 0 || v211 == 1 || *(_BYTE *)(v164 + 649) == 0;
            if (*(_BYTE *)(v164 + 649) && v211 >= 3)
            {
              if (dword_1ED1ACCC0 >= 7)
              {
                fwrite("mode: inter, prev_frame_as_intra_rc_\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                syslog(31, "mode: inter, prev_frame_as_intra_rc_\n");
              }
              v256 = exp2((*(double *)(v164 + 584) + 2.0 + -12.0) / 6.0) * 0.850000024;
            }
            else
            {
              if (dword_1ED1ACCC0 >= 7)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "mode: inter, other, force_long_term_stats=%d\n", v283);
                syslog(31, "mode: inter, other, force_long_term_stats=%d\n", v283);
              }
              v256 = sub_1C97ED588(v164 + 720, v283, v226 == 1, v217, v236, v243);
            }
            if (!v283)
              goto LABEL_450;
          }
          *(_QWORD *)(v164 + 744) = 0;
          *(_QWORD *)(v164 + 728) = 0;
          v264 = *(_DWORD *)(v164 + 780);
          if (v264 <= 0)
          {
LABEL_449:
            *(_DWORD *)(v164 + 780) = -1;
            *(_QWORD *)(v164 + 784) = 0;
            goto LABEL_450;
          }
LABEL_448:
          *(double *)(v164 + 792) = (double)*(int *)(v164 + 788) / (double)v264;
          goto LABEL_449;
        }
      }
      v63 = sub_1C97EEF84(v164, (uint64_t)context);
      v166 = v213;
      if ((_DWORD)v63)
        goto LABEL_550;
      v244 = *(_DWORD *)(v164 + 712);
      v230 = *(double *)(v164 + 576);
      v245 = 0.0;
      goto LABEL_474;
    }
    v215 = (_BYTE *)(v164 + 650);
    if (v211 - 3 >= 3)
    {
      *v215 = 0;
      v217 = *((double *)context + 787);
    }
    else
    {
      *v215 = v214;
      v217 = *((double *)context + 787);
      if (v214)
      {
        v216 = 1;
        goto LABEL_321;
      }
    }
    v216 = v214 != 0;
    goto LABEL_321;
  }
  if (*v166)
    goto LABEL_293;
  *(_BYTE *)(v164 + 652) = v211;
  *(_BYTE *)(v164 + 650) = 1;
  sub_1C97EEEE8((double *)v164, *((double *)context + 787));
  context[6456] = 1;
  v59 = *(double *)(v164 + 576);
LABEL_489:
  v297 = v59;
  if (*(_BYTE *)(*(_QWORD *)(v164 + 1688) + 447))
  {
    v298 = v179;
    if (vabdd_f64(*(double *)(v164 + 1616), v179) > 0.5)
      *(double *)(v164 + 1616) = v298;
    v299 = *(_DWORD *)(v164 + 1668);
    v300 = (float)v299;
    v301 = *(_DWORD *)(v164 + 44);
    if (v297 > (float)v299 && v301 <= 30)
    {
      v303 = roundf(v297) > v300;
      v304 = (float)v299;
    }
    else
    {
      v303 = 0;
      v304 = v59;
    }
    if (v301 >= *(_DWORD *)(v164 + 1624))
      v305 = 2;
    else
      v305 = 4;
    *(_DWORD *)(v164 + 1656) = 0;
    if (v465 >= 1)
    {
      v306 = *(_DWORD *)(v164 + 1644);
      if (v306 >= 5)
        v307 = 5;
      else
        v307 = *(_DWORD *)(v164 + 1644);
      v308 = 0.0;
      if (v307 >= 2)
      {
        v309 = v307 - 1;
        v310 = v463 - 1;
        do
        {
          LOBYTE(v209) = *(_BYTE *)(v164 + v310 % 5 + 1601);
          v209 = (float)LODWORD(v209);
          v308 = v308 + v209;
          --v310;
          --v309;
        }
        while (v309);
      }
      if (*(__int16 *)(v164 + 1640) < 2)
      {
        v312 = (float)(v308 + v297) / (float)v307;
        if (v306 >= v305 && *(_BYTE *)(v164 + 1628) && *(_BYTE *)(v164 + 1652) && v312 >= (float)(v299 - 1))
        {
          if (v301 >= 31)
          {
            v304 = (float)v299;
            goto LABEL_522;
          }
          v311 = 1;
          v304 = v300;
        }
        else
        {
          if (v306 < 2)
            goto LABEL_522;
          if (v312 > (float)((float)*(int *)(v164 + 1664) + 0.4999) || v301 < 1)
            goto LABEL_522;
          v311 = -1;
        }
LABEL_521:
        *(_DWORD *)(v164 + 1644) = 0;
        *(_DWORD *)(v164 + 1624) = v301;
        v301 += v311;
        *(_DWORD *)(v164 + 44) = v301;
        *(_DWORD *)(v164 + 1656) = v311;
        goto LABEL_522;
      }
      if (v301 < 31)
      {
        v311 = 1;
        goto LABEL_521;
      }
    }
LABEL_522:
    if (*(_BYTE *)(v164 + 1748))
    {
      v314 = *(float *)(v164 + 8 * v301 + 48);
      if (v314 <= 10.1)
      {
        if (v314 <= 5.1)
        {
          *(_DWORD *)(v164 + 1664) = 34;
          v315 = 36;
        }
        else
        {
          *(_DWORD *)(v164 + 1664) = 33;
          v315 = 35;
        }
      }
      else
      {
        *(_DWORD *)(v164 + 1664) = 32;
        v315 = 34;
      }
      *(_DWORD *)(v164 + 1668) = v315;
    }
    v316 = *(_DWORD *)(v164 + 1672);
    if (v316 != -1)
    {
      *(_DWORD *)(v164 + 44) = v316;
      v301 = v316;
    }
    v317 = *(_DWORD *)(v164 + 1676);
    if (v317 == -1)
      v318 = v304;
    else
      v318 = (float)v317;
    v319 = sub_1C97EEE80(v164, v301);
    *(_DWORD *)(v164 + 1608) = v319;
    *(_BYTE *)(v164 + 1628) = v303;
    *(_BYTE *)(v164 + 1652) = 0;
    v320 = (__int16 *)((char *)&unk_1C9857EA8 + 4 * v319);
    v60 = (double)v320[1];
    v59 = v298 * (double)*v320 / v60;
    *(double *)(v164 + 520) = v59;
    if (v318 != v297)
    {
      v472[0] = v177;
      v472[1] = v178;
      *(float *)&v472[2] = v179;
      v472[3] = v180;
      v472[4] = v181;
      v473 = v461;
      v59 = sub_1C97EE7E0(v164, (uint64_t)v472);
      v297 = v318;
    }
  }
  v140 = context;
  *((float *)context + 1619) = v297;
  if (*(_BYTE *)(v164 + 1696) == 1)
  {
    v321 = *(_DWORD **)(v164 + 1760);
    v59 = *(double *)(v164 + 536);
    v322 = 3 * (int)v59;
    v323 = v321[4];
    if (v323 >= v322)
      v323 = 3 * (int)v59;
    v324 = v321[8] + v323;
    v321[6] = v322;
    v321[7] = v324;
  }
  if (!*v468)
    goto LABEL_571;
  v325 = *(_QWORD *)(*(_QWORD *)(v164 + 1800)
                   + 8 * (*((_DWORD *)context + 150) % *(_DWORD *)(v164 + 1780)));
  v326 = *((_DWORD *)context + 151);
  v327 = *(_QWORD *)(v325 + 8);
  if (v326 >= (int)(-1227133513 * ((unint64_t)(*(_QWORD *)(v325 + 16) - v327) >> 3)))
  {
    if (dword_1ED1ACCC0 < 3)
      goto LABEL_549;
    v329 = "mpt_rc: frame_stats_array size exceeding gop_size for frame %d\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: frame_stats_array size exceeding gop_size for frame %d\n");
    goto LABEL_548;
  }
  v328 = context[648];
  if (v328 > 4)
  {
    if (v326)
      goto LABEL_553;
    if (dword_1ED1ACCC0 <= 2)
      goto LABEL_549;
    v329 = "mpt_rc: Empty frame_stats_array for non-RC frame %d\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Empty frame_stats_array for non-RC frame %d\n");
LABEL_548:
    syslog(27, v329, *v166);
    goto LABEL_549;
  }
  if (v326)
  {
    if (dword_1ED1ACCC0 > 2)
    {
      v329 = "mpt_rc: Non-empty frame_stats_array for RC frame %d\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Non-empty frame_stats_array for RC frame %d\n");
      goto LABEL_548;
    }
LABEL_549:
    v63 = 4294954385;
LABEL_550:
    v56 = (uint64_t)context;
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: RateControlBeforeEncoding failed\n", *v166);
      syslog(27, "Frame %d: RateControlBeforeEncoding failed\n", *v166);
    }
    goto LABEL_681;
  }
LABEL_553:
  *(_QWORD *)&__lk[15] = 0;
  *(_QWORD *)&__lk[7] = 0;
  v330 = *((_DWORD *)context + 163);
  v331 = *((_DWORD *)context + 164);
  v332 = *((_QWORD *)context + 787);
  v333 = *(_QWORD *)(v164 + 536);
  v334 = v327 + 56 * v326;
  *(_DWORD *)v334 = 1;
  *(float *)(v334 + 4) = v297;
  *(_QWORD *)(v334 + 8) = v332;
  *(_QWORD *)(v334 + 16) = v333;
  *(_DWORD *)(v334 + 24) = v331;
  *(_DWORD *)(v334 + 28) = v330;
  *(_BYTE *)(v334 + 32) = v328;
  *(_OWORD *)(v334 + 33) = *(_OWORD *)__lk;
  *(_QWORD *)(v334 + 48) = 0;
  ++*(_DWORD *)v325;
  std::mutex::lock((std::mutex *)(v325 + 40));
  ++*(_DWORD *)(v325 + 32);
  std::mutex::unlock((std::mutex *)(v325 + 40));
  if (v328 <= 4)
  {
    v335 = v328 < 3 || *(_BYTE *)(v164 + 653) != 0;
    *(_BYTE *)(v164 + 649) = v335;
    v336 = *(char *)(*((_QWORD *)context + 7) + 9);
    v337 = *(unsigned __int8 *)(*((_QWORD *)context + 5) + 2097);
    v338 = v336 + (char)((int)(*((float *)context + 1619) + 0.5) - v336 - 26) + 26;
    if (v338 >= 51)
      v339 = 51;
    else
      v339 = v336 + (char)((int)(*((float *)context + 1619) + 0.5) - v336 - 26) + 26;
    if (v338 <= -v337)
      v340 = -v337;
    else
      v340 = v339;
    *(double *)(v164 + 584) = (double)v340;
    if (!v330)
      *(float *)(v164 + 1792) = (float)v340;
    *(float *)&v477 = (float)v340;
    HIDWORD(v477) = v330;
    v478 = v328;
    if (*(_QWORD *)(v164 + 488) == 2)
    {
      ++*(_QWORD *)(v164 + 480);
      *(_QWORD *)(v164 + 488) = 1;
      sub_1C97EE87C(v164 + 448);
    }
    sub_1C97EE8C8((_QWORD *)(v164 + 448), &v477);
  }
  v7 = v458;
  v140 = context;
  v144 = v455;
LABEL_571:
  if (!v140[817])
    goto LABEL_641;
  v341 = *((_QWORD *)context + 379);
  v342 = *((_QWORD *)context + 380);
  v343 = *(unsigned __int8 *)(v342 + 504);
  v344 = v342 + 8 * *(int *)(v342 + 44);
  v345 = (__int16 *)(v344 + 54);
  v346 = (__int16 *)(v344 + 52);
  v347 = v343 == 0;
  if (v343)
    v348 = v345;
  else
    v348 = v346;
  v349 = *v348;
  if (v347)
    v346 = v345;
  v350 = *v346;
  v351 = *(_DWORD *)(v341 + 6508);
  v352 = *((_DWORD *)context + 1586) >= 0x14u ? 40 : 38;
  v353 = *((_DWORD *)context + 1584);
  if (v353 && (v354 = *((_DWORD *)context + 1585)) != 0)
  {
    v355 = 0.5;
    v356 = (int)(*(float *)(v341 + 6476) + 0.5);
    v357 = v352 - v356;
    if (v357 >= 5)
      v357 = 5;
    v358 = v357 & ~(v357 >> 31);
    *((_DWORD *)context + 1577) = v358;
    v359 = (double)v354;
    v360 = (double)v353;
    v361 = (double)-v358 / 6.0;
    v362 = (double)v354 / (double)v353 * (float)(1.0 - exp2f(v361));
    if (v362 > 0.0)
      v355 = -0.5;
    v363 = v362 + 1.0;
    v364 = log2f(v363);
    v365 = (int)(v355 + (float)(v364 * -6.0)) & ((int)(v355 + (float)(v364 * -6.0)) >> 31);
    if (v365 <= -5)
      v365 = -5;
    *((_DWORD *)context + 1576) = v365;
    v144 = v455;
    if (v365 + v356 <= 21)
    {
      if (v356 < 23)
      {
        *((_QWORD *)context + 788) = 0;
      }
      else
      {
        v366 = 22 - v356;
        if (v356 == 27 || (22 - v356) < 0xFFFFFFFB)
          v366 = -5;
        *((_DWORD *)context + 1576) = v366;
        v367 = (double)-v366 / 6.0;
        v368 = v360 / v359 * (float)(1.0 - exp2f(v367));
        if (v368 <= 0.0)
          v369 = 0.5;
        else
          v369 = -0.5;
        v370 = v368 + 1.0;
        v371 = (int)(v369 + (float)(log2f(v370) * -6.0));
        if (v371 >= 5)
          v371 = 5;
        *((_DWORD *)context + 1577) = v371 & ~(v371 >> 31);
      }
    }
  }
  else
  {
    *((_QWORD *)context + 788) = 0;
    v144 = v455;
  }
  if (v351 < 1 || v350 < 1)
    goto LABEL_641;
  v372 = 0;
  v373 = 0;
  v374 = (int)(float)(*(float *)(v341 + 6528) * (float)v350);
  v375 = (float)(int)(float)(*(float *)(v341 + 6524) * (float)v349);
  v376 = (int)(float)(*(float *)(v341 + 6516) * (float)v349) - (int)(float)((float)(v375 * 0.4) * 0.5);
  v377 = v376 & ~(v376 >> 31);
  v378 = (int)(float)(*(float *)(v341 + 6520) * (float)v350) - (int)(float)((float)((float)v374 * 0.0) * 0.5);
  v379 = v378 & ~(v378 >> 31);
  v380 = v377 + (int)(float)(v375 * 1.4);
  v381 = v379 + v374;
  while (2)
  {
    if (v349 < 1)
      goto LABEL_640;
    v382 = v372 | 4;
    v383 = (v372 | 4u) > v379;
    if ((int)((v372 | 4) - v379) >= 0)
      v384 = (v372 | 4) - v379;
    else
      v384 = v379 - (v372 | 4);
    v385 = (v372 | 4) - v379 - v374;
    if (v385 < 0)
      v385 = v374 - ((v372 | 4) - v379);
    if (v385 >= v384)
      v385 = v384;
    if (v382 > v381)
      ++v383;
    v386 = 3 * v383;
    v387 = *((_QWORD *)context + 789);
    v388 = v373;
    v389 = 4;
    while (2)
    {
      v390 = 1.0;
      if (v389 <= v377 || v389 >= v380 || v382 <= v379 || v382 >= v381)
      {
        v391 = v389 - v377;
        if ((int)(v389 - v377) < 0)
          v391 = v377 - v389;
        v392 = v389 - v380;
        if (v389 - v380 < 0)
          v392 = v380 - v389;
        if (v392 < v391)
          v391 = v392;
        if (v389 <= v377)
          v393 = v386;
        else
          v393 = v386 + 1;
        if (v389 > v380)
          ++v393;
        if (v393 <= 8)
        {
          v394 = 1 << v393;
          if ((v394 & 0x145) != 0)
          {
            v391 = (int)sqrt((double)(v385 * v385 + v391 * v391));
          }
          else if ((v394 & 0x28) == 0)
          {
            v391 = v385;
            if ((v394 & 0x82) == 0)
              goto LABEL_636;
          }
          v390 = (double)(16 - v391) * 0.0625;
          if (v391 > 16)
            v390 = 0.0;
        }
      }
LABEL_636:
      v395 = v390;
      v396 = (float)*((int *)context + 1576);
      if (v395 < 1.0)
        v396 = (float)(v395 * v396) + (float)((float)(1.0 - v395) * (float)*((int *)context + 1577));
      *(_DWORD *)(v387 + 4 * v388) = (int)v396;
      v397 = v388 + 1;
      v398 = v389 + 4;
      v389 += 8;
      ++v388;
      if (v398 < v349)
        continue;
      break;
    }
    v373 = v397;
    v144 = v455;
LABEL_640:
    v372 += 8;
    if (v372 < v350)
      continue;
    break;
  }
LABEL_641:
  v399 = (uint64_t)context;
  if (*(char *)(v7 + 492) >= 1)
  {
    v469 = *((_DWORD *)context + 1410);
    if (v469)
    {
      v400 = *((_DWORD *)context + 1383);
      if (v400 < 1)
        goto LABEL_663;
      v401 = 0;
      v402 = 0;
      v403 = (int *)(context + 800);
      v404 = *((_QWORD *)context + 379);
      v405 = *(_QWORD *)(v404 + 576);
      v464 = v405 + 360;
      v466 = *(char *)(v405 + 493);
      v462 = (int)(*(float *)(v404 + 6476) + 0.5);
      v406 = -6 * *(char *)(v405 + 650) + 48;
      v407 = *(unsigned __int8 *)(v405 + 484);
      v460 = v405;
      v408 = *((_DWORD *)context + 201);
      v409 = *(unsigned __int8 *)(v405 + 538) - v408;
      v410 = 1 << v408;
      v411 = *((_QWORD *)context + 737);
      v412 = *((_DWORD *)context + 1382);
      do
      {
        if (v412 >= 1)
        {
          v413 = 0;
          do
          {
            v414 = sub_1C97DAE74(v403, v413, v401, *(_DWORD *)(v399 + 804), v412, *(_DWORD *)(v399 + 5532), v466);
            if (context[817])
              v402 = sub_1C97DB504((uint64_t)v403, v413, v401, *((_DWORD *)context + 201));
            v415 = sub_1C97DB5D0(v413, v401, v409, (v402 + v462), v414, v469, v464, (uint64_t)v403);
            v416 = v415;
            if (v407)
            {
              v399 = (uint64_t)context;
              v417 = *((_DWORD *)context + 201);
              v418 = v415
                   + *(char *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)context + 379) + 576) + 10784)
                             + *(int *)(*(_QWORD *)&context[8 * v417 + 6112]
                                      + 4
                                      * ((*((_DWORD *)context + 1382) + (1 << v417) - 1) >> v417)
                                      * (uint64_t)(v401 >> v417)
                                      + 4 * (v413 >> v417)));
              if (v418 >= 51)
                v419 = 51;
              else
                v419 = v415
                     + *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)context + 379) + 576) + 10784)
                                + *(int *)(*(_QWORD *)&context[8 * v417 + 6112]
                                         + 4
                                         * ((*((_DWORD *)context + 1382) + (1 << v417) - 1) >> v417)
                                         * (uint64_t)(v401 >> v417)
                                         + 4 * (v413 >> v417)));
              if (v418 <= v406)
                v416 = v406;
              else
                v416 = v419;
            }
            else
            {
              v399 = (uint64_t)context;
              v417 = *((_DWORD *)context + 201);
              if (*(_BYTE *)(v460 + 487) && v417 == 4)
              {
                v416 = sub_1C97DB26C((uint64_t)v403, v413, v401, v415, *((_DWORD *)context + 1382), *(_BYTE *)(*(_QWORD *)(*((_QWORD *)context + 379) + 40) + 2096), *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)context + 379) + 40) + 2097), v406);
                LOBYTE(v417) = 4;
              }
            }
            *(_BYTE *)(v411 + (v413 >> v417)) = v416;
            v413 += v410;
            v412 = *(_DWORD *)(v399 + 5528);
          }
          while (v413 < v412);
          v400 = *(_DWORD *)(v399 + 5532);
        }
        v411 += *(_QWORD *)(v399 + 808);
        v401 += v410;
      }
      while (v401 < v400);
      v7 = v458;
      v144 = v455;
      if (*(_DWORD *)(v399 + 5640))
      {
LABEL_663:
        v420 = 0;
        v421 = *(_DWORD *)(v399 + 804);
        v422 = ~(-1 << v421);
        v423 = ((*(_DWORD *)(v399 + 5528) + v422) >> v421);
        v424 = (*(_DWORD *)(v399 + 5532) + v422) >> v421;
        v425 = *(_QWORD *)(v399 + 808);
        v426 = *(_QWORD *)(v399 + 5896);
        v427 = 1;
        do
        {
          v428 = v427;
          if (v420 < v424)
          {
            v429 = *(_QWORD *)(v399 + 24 * v420 + 5992) + 2 * v425 * v420;
            v430 = v426 + v425 * v420;
            if ((v427 & 1) != 0)
              v431 = -1;
            else
              v431 = -v425;
            v432 = v431 + (v427 & 1);
            do
            {
              v433 = v432;
              v434 = v427 & 1;
              if ((int)v423 > v427)
              {
                do
                {
                  *(_WORD *)(v429 + 2 * v434) = *(unsigned __int8 *)(v430 + v434) - *(unsigned __int8 *)(v430 + v433);
                  ++v434;
                  ++v433;
                }
                while (v423 != v434);
              }
              v430 += v425;
              LODWORD(v420) = v420 + 1;
              v429 += 2 * v425;
            }
            while ((_DWORD)v420 != v424);
          }
          v427 = 0;
          v420 = 1;
        }
        while ((v428 & 1) != 0);
      }
    }
  }
  if ((v144 & 2) == 0 || !*v452)
  {
    v63 = sub_1C97B4C80((unsigned __int8 *)v399);
    if ((_DWORD)v63)
    {
      v56 = (uint64_t)context;
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: Compress failed\n", *((_DWORD *)context + 163));
        syslog(27, "Frame %d: Compress failed\n", *((_DWORD *)context + 163));
      }
      goto LABEL_681;
    }
    v7 = v458;
    v438 = *(_QWORD *)(v458 + 10400);
    v56 = (uint64_t)context;
    v55 = v454;
    LOBYTE(v57) = v455;
    if (!v438 || *(_BYTE *)(v438 + 1776))
      goto LABEL_96;
    v439 = context;
    v440 = *(_QWORD *)(v438 + 1688);
    v441 = context[648];
    if (v441 <= 4)
    {
      *(_QWORD *)(v438 + 400) = 0;
      *(_OWORD *)(v438 + 368) = 0u;
      *(_OWORD *)(v438 + 384) = 0u;
      *(_OWORD *)(v438 + 336) = 0u;
      *(_OWORD *)(v438 + 352) = 0u;
      LODWORD(v474) = *((_DWORD *)context + 1619);
      DWORD1(v474) = *((_DWORD *)context + 163);
      BYTE8(v474) = context[648];
      if (*(_QWORD *)(v438 + 488) == 2)
      {
        ++*(_QWORD *)(v438 + 480);
        *(_QWORD *)(v438 + 488) = 1;
        sub_1C97EE87C(v438 + 448);
      }
      sub_1C97EE8C8((_QWORD *)(v438 + 448), (uint64_t *)&v474);
      v439 = context;
      LOBYTE(v441) = context[648];
      v7 = v458;
      v55 = v454;
      LOBYTE(v57) = v455;
    }
    *(_QWORD *)(v438 + 328 + 8 * (char)v441 + 8) += *((_QWORD *)v439 + 16);
    ++*(_DWORD *)(v438 + 328 + 4 * (char)v441 + 56);
    if (*(_BYTE *)v438 == 1)
    {
      if (*(_BYTE *)(v438 + 1696) == 1 && context[6457] >= 2u)
      {
        v474 = *(_OWORD *)v456;
        v442 = (uint64_t)context;
        v475 = *((_DWORD *)context + 1674);
        v443 = &v474;
        v444 = v438;
      }
      else
      {
        v444 = v438;
        v442 = (uint64_t)context;
        v443 = 0;
      }
      sub_1C97EF358(v444, v442, (uint64_t)v443);
    }
    if (*(_BYTE *)(v438 + 1696) == 1)
    {
      v445 = *(_DWORD **)(v438 + 1760);
      if (v445)
      {
        if (*context)
        {
          v60 = *(double *)(v438 + 512);
          v59 = v60 / *(double *)(v438 + 520);
          v445[8] += (int)v59;
        }
        else
        {
          if (v445[12] == 2)
            v445[3] += *((_DWORD *)context + 1626) + *((_QWORD *)context + 833) + *((_DWORD *)context + 1625);
          v445[8] = 0;
        }
      }
    }
    v446 = *(unsigned __int8 *)(v440 + 447);
    v56 = (uint64_t)context;
    if (!v446)
      goto LABEL_96;
    if (*context)
    {
      *(_BYTE *)(v438 + 1628) = *(_BYTE *)(v438 + 1629);
      v447 = *(_QWORD *)(v438 + 1760);
      v61 = (uint8x8_t)0x408F400000000000;
      v59 = *(double *)(v438 + 512) * (double)*(int *)(v447 + 20) / 1000.0;
      *(float *)&v59 = v59;
      *(float *)&v59 = (float)*(int *)(v447 + 12) / *(float *)&v59;
      LODWORD(v60) = 2.0;
      if (*(float *)&v59 > 2.0 || *(_BYTE *)(v438 + 1653))
        ++*(_WORD *)(v438 + 1640);
      if (*(_DWORD *)(v438 + 1656))
      {
        v448 = *((__int16 *)&unk_1C9857EA8 + 2 * *(int *)(v438 + 1608) + 1);
      }
      else
      {
        v448 = *(_DWORD *)(v438 + 1648);
        if (v448 <= 1)
          v448 = 1;
      }
      v450 = v448 - 1;
    }
    else
    {
      LODWORD(v59) = *((_DWORD *)context + 1619);
      *(_BYTE *)(v438 + *(_DWORD *)(*((_QWORD *)context + 79) + 1024) % 5 + 1601) = (int)*(float *)&v59;
      ++*(_DWORD *)(v438 + 1644);
      *(_WORD *)(v438 + 1640) = 0;
      v449 = *(_DWORD *)(v438 + 1656);
      if (v449 >= 1)
      {
        *(_DWORD *)(v438 + 1648) = 0;
        goto LABEL_96;
      }
      if ((v449 & 0x80000000) == 0)
      {
LABEL_96:
        if ((v57 & 2) != 0)
        {
          if (!*(_BYTE *)(v56 + 596))
          {
            v63 = sub_1C97A5244(v7, v56);
            if ((_DWORD)v63)
            {
              if (dword_1ED1ACCC0 < 3)
                goto LABEL_677;
              goto LABEL_142;
            }
            v63 = sub_1C97A5350(v458, v55);
            if (!(_DWORD)v63)
              goto LABEL_677;
            v56 = (uint64_t)context;
            if (dword_1ED1ACCC0 >= 3)
            {
LABEL_213:
              fwrite("Unable to find free FrameEnc for MPT encode!!\n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(27, "Unable to find free FrameEnc for MPT encode!!\n");
            }
LABEL_681:
            sub_1C97B7468(v56, v63, v59, v60, v61);
            goto LABEL_682;
          }
LABEL_133:
          v63 = 0;
          goto LABEL_681;
        }
        if (*(_BYTE *)v56)
        {
          ++*(_DWORD *)(v7 + 10380);
          *((_WORD *)v457 + 244) = *(_WORD *)(v456 + 72);
          *(_DWORD *)(v7 + 10436) = *(_DWORD *)(v56 + 6500);
          v62 = *(_DWORD *)(v56 + 6504);
          goto LABEL_99;
        }
        v101 = *(_QWORD *)(v56 + 632);
        v102 = *(_QWORD *)(v56 + 616);
        v103 = *(_OWORD *)(v102 + 192);
        v104 = *(_OWORD *)(v102 + 208);
        *(_QWORD *)(v101 + 224) = *(_QWORD *)(v102 + 224);
        *(_OWORD *)(v101 + 192) = v103;
        *(_OWORD *)(v101 + 208) = v104;
        if (*(char *)(v7 + 529) >= 1 && !*(_BYTE *)(v56 + 648))
          *(_BYTE *)(*(_QWORD *)(v56 + 632) + 40) = 2;
        v63 = sub_1C97A5244(v7, v56);
        if ((_DWORD)v63)
        {
          v56 = (uint64_t)context;
          if (dword_1ED1ACCC0 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
            syslog(27, "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
          }
          goto LABEL_681;
        }
        v7 = v458;
        v56 = (uint64_t)context;
        if (!*(_BYTE *)(v458 + 585))
        {
          *(_DWORD *)(*((_QWORD *)context + 79) + 36) = 0;
LABEL_218:
          v62 = 0;
          *((_WORD *)v457 + 244) = 0;
          *(_DWORD *)(v458 + 10436) = 0;
LABEL_99:
          *(_DWORD *)(v7 + 10440) = v62;
          if (*(unsigned __int8 *)(v56 + 648) <= 2u)
          {
            v63 = 0;
            *(_DWORD *)(v56 + 848) = *(_DWORD *)(v56 + 652);
            goto LABEL_681;
          }
          goto LABEL_133;
        }
        v154 = (uint64_t *)sub_1C97535CC(v458 + 9968, 1u);
        v155 = *v154;
        v156 = (std::__shared_weak_count *)v154[1];
        if (v156)
        {
          p_shared_owners = (unint64_t *)&v156->__shared_owners_;
          do
            v158 = __ldxr(p_shared_owners);
          while (__stxr(v158 + 1, p_shared_owners));
        }
        if (*(_BYTE *)(v458 + 447)
          || *(_BYTE *)(v458 + 871)
          || (v254 = *(_QWORD *)(v458 + 10400)) == 0
          || !*(_BYTE *)(v254 + 1776))
        {
          v159 = (double *)(v458 + 472);
          if (!v155)
            goto LABEL_205;
        }
        else
        {
          v159 = (double *)(v254 + 520);
          if (!v155)
            goto LABEL_205;
        }
        v59 = *v159;
        *(float *)&v59 = *v159;
        v160 = *(_DWORD *)(v458 + 10424);
        *(float *)&v60 = (float)v160;
        v61.i32[0] = 1169915904;
        *(float *)&v59 = 6000.0 / *(float *)&v59;
        if (*(float *)&v59 <= (float)v160)
        {
          v221 = *(char *)(v458 + 528);
          if (v221 < 5)
          {
            v249 = 5 - v221;
            v56 = (uint64_t)context;
            v250 = *((_QWORD *)context + 79);
            v251 = 1000 * *(_QWORD *)(v250 + 16) / *(int *)(v250 + 32)
                 - 1000 * *(_QWORD *)(v155 + 16) / *(int *)(v155 + 32);
            v252 = *(int *)(v458 + 10428);
            v253 = v160 / v249;
            if (v251 + v252 <= v253)
            {
              *(_DWORD *)(v250 + 36) = 0;
            }
            else
            {
              *(_DWORD *)(v250 + 36) = 1;
              *(_DWORD *)(v458 + 10428) = v252 - v253 + v251;
            }
          }
          else
          {
            if (dword_1ED1ACCC0 >= 4)
            {
              v222 = (FILE **)MEMORY[0x1E0C80C10];
              fwrite("Warning, frame acknowledgement not working properly!!!\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(28, "Warning, frame acknowledgement not working properly!!!\n");
              if (dword_1ED1ACCC0 >= 4)
              {
                fprintf(*v222, "Max # of references: %d, # of most recent STRs for prediction: %d.\n", 6, *(char *)(v458 + 528));
                syslog(28, "Max # of references: %d, # of most recent STRs for prediction: %d.\n", 6, *(char *)(v458 + 528));
                if (dword_1ED1ACCC0 >= 4)
                {
                  v223 = 6 - v221;
                  fprintf(*v222, "Only %d extra refs left for acknowledgement, too few (minimal 2 are needed)\n", v223);
                  syslog(28, "Only %d extra refs left for acknowledgement, too few (minimal 2 are needed)\n", v223);
                }
              }
            }
            v224 = sub_1C97535CC(v458 + 9968, 1u);
            v56 = (uint64_t)context;
            v225 = *((_QWORD *)context + 79);
            if (*v224)
              *(_DWORD *)(v225 + 36) = 0;
            else
              *(_DWORD *)(v225 + 36) = 1;
          }
          goto LABEL_206;
        }
LABEL_205:
        *(_DWORD *)(*((_QWORD *)context + 79) + 36) = 1;
LABEL_206:
        if (v156)
        {
          v161 = (unint64_t *)&v156->__shared_owners_;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        goto LABEL_218;
      }
      v451 = (__int16 *)((char *)&unk_1C9857EA8 + 4 * *(int *)(v438 + 1608));
      v450 = v451[1] - *v451;
    }
    *(_DWORD *)(v438 + 1648) = v450;
    goto LABEL_96;
  }
  v63 = sub_1C97A5244(v7, v399);
  if ((_DWORD)v63)
  {
    if (dword_1ED1ACCC0 < 3)
    {
LABEL_677:
      v56 = (uint64_t)context;
      goto LABEL_681;
    }
LABEL_142:
    v56 = (uint64_t)context;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
    syslog(27, "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
    goto LABEL_681;
  }
  v63 = sub_1C97A5350(v458, v454);
  if ((_DWORD)v63)
  {
    v56 = (uint64_t)context;
    if (dword_1ED1ACCC0 >= 3)
      goto LABEL_213;
    goto LABEL_681;
  }
  dispatch_group_async_f(*(dispatch_group_t *)(v458 + 9912), *(dispatch_queue_t *)(v458 + 9840), context, (dispatch_function_t)sub_1C97A53F0);
LABEL_682:
  if (*((_QWORD *)&v471 + 1))
  {
    v435 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
    do
      v436 = __ldaxr(v435);
    while (__stlxr(v436 - 1, v435));
    if (!v436)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v471 + 1) + 16))(*((_QWORD *)&v471 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v471 + 1));
    }
  }
  if (!(_DWORD)v63)
    *(_BYTE *)(v458 + 224) = 0;
  return v63;
}

void sub_1C97A5198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C97A5244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t j;

  v4 = a1 + 9968;
  if (*(_BYTE *)(a2 + 648))
  {
    sub_1C97536B0(a1 + 9968, (_DWORD *)(a2 + 3056));
    sub_1C9713918(v4);
  }
  else
  {
    for (i = 0; i != 272; i += 16)
      sub_1C974E55C((_QWORD *)(a1 + 10000 + i));
    *(_QWORD *)(a1 + 10376) = *(unsigned int *)(a2 + 652);
    *(_DWORD *)(a1 + 10428) = 0;
  }
  v6 = *(_QWORD *)(a2 + 632);
  *(_BYTE *)(v6 + 43) = 1;
  if (!*(_BYTE *)(v6 + 40))
    return 0;
  result = sub_1C9714DF8(v4, *(_QWORD *)(a2 + 632), *(_QWORD *)(a2 + 640));
  if ((_DWORD)result)
    return result;
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 632);
  v10 = *(_DWORD *)(v9 + 1024);
  v11 = *(_BYTE *)(v9 + 40);
  for (j = a1 + 10000; !*(_QWORD *)j || *(_DWORD *)(*(_QWORD *)j + 1024) != v10; j += 16)
  {
    if (++v8 == 17)
      return 0;
  }
  if ((v8 & 0x80000000) != 0)
    return 0;
  result = 0;
  *(_BYTE *)(a1 + v8 + 10272) = v11;
  return result;
}

uint64_t sub_1C97A5350(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 9920);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 9832), 0xFFFFFFFFFFFFFFFFLL);
  std::mutex::lock((std::mutex *)(a1 + 9848));
  v5 = *(_QWORD *)(a1 + 9792);
  v6 = *(_QWORD *)(a1 + 9800);
  if (v5 == v6)
  {
LABEL_5:
    v9 = 4294954385;
  }
  else
  {
    v7 = a2;
    while (atomic_load((unsigned int *)(*(_QWORD *)v5 + 588)))
    {
      v5 += 8;
      if (v5 == v6)
        goto LABEL_5;
    }
    v9 = 0;
    v10 = *(_QWORD *)(v4 + 8 * v7);
    *(_QWORD *)(v4 + 8 * v7) = *(_QWORD *)v5;
    *(_QWORD *)v5 = v10;
  }
  std::mutex::unlock((std::mutex *)(a1 + 9848));
  return v9;
}

void sub_1C97A53F0(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  uint8x8_t v5;

  v2 = sub_1C97B4C80((unsigned __int8 *)a1);
  if ((_DWORD)v2 && dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: Compress failed\n", *(_DWORD *)(a1 + 652));
    syslog(27, "Frame %d: Compress failed\n", *(_DWORD *)(a1 + 652));
  }
  sub_1C97B7468(a1, v2, v3, v4, v5);
}

void sub_1C97A5478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 **i;
  unsigned int v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t *);
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v8 = (std::mutex *)(a1 + 9848);
  std::mutex::lock((std::mutex *)(a1 + 9848));
  if (a3)
  {
    atomic_store(3u, (unsigned int *)(a3 + 588));
    *(_DWORD *)(a3 + 592) = a2;
    if (*(_QWORD *)(a1 + 9824))
    {
      v9 = *(_QWORD *)(a1 + 9792);
      v10 = *(_QWORD *)(a1 + 9800);
      if (v9 != v10)
      {
        v11 = 0x7FFFFFFF;
        do
        {
          v12 = atomic_load((unsigned int *)(*(_QWORD *)v9 + 588));
          if (v12 >= 2 && *(_DWORD *)(*(_QWORD *)v9 + 584) < v11)
            v11 = *(_DWORD *)(*(_QWORD *)v9 + 584);
          v9 += 8;
        }
        while (v9 != v10);
LABEL_9:
        for (i = *(unsigned __int8 ***)(a1 + 9792); i != *(unsigned __int8 ***)(a1 + 9800); ++i)
        {
          v14 = atomic_load((unsigned int *)*i + 147);
          if (v14 == 3 && *((_DWORD *)*i + 146) == v11)
          {
            sub_1C97B7C5C(*i, *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unsigned __int8 *, unsigned __int8 *))(a1 + 10448), *(_QWORD *)(a1 + 10456));
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9832));
            ++v11;
            goto LABEL_9;
          }
        }
      }
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9824));
    }
    else
    {
      sub_1C97B7C5C((unsigned __int8 *)a3, *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unsigned __int8 *, unsigned __int8 *))(a1 + 10448), *(_QWORD *)(a1 + 10456));
    }
  }
  else
  {
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t *))(a1 + 10448);
    v16 = *(_QWORD *)(a1 + 10456);
    v20 = 0;
    v21 = 0;
    v15(v16, a4, a2, 0, 0, 0, &v20);
    v17 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  std::mutex::unlock(v8);
}

void sub_1C97A5608(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97A5630(uint64_t a1, unint64_t a2, const char *a3, int a4)
{
  char v8;
  char __str[16];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x10uLL, "%d", a4);
  v8 = 0;
  return sub_1C971D338(a1 + 360, a2, a3, __str, 0xFFFFFFFFLL, (uint64_t)&v8);
}

uint64_t sub_1C97A56C8(uint64_t a1, unint64_t a2, const char *a3, double a4)
{
  char v8;
  char __str[16];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x10uLL, "%f", a4);
  v8 = 0;
  return sub_1C971D338(a1 + 360, a2, a3, __str, 0xFFFFFFFFLL, (uint64_t)&v8);
}

uint64_t sub_1C97A5760(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  BOOL v20;
  int v21;
  double v22;
  unsigned int v23;
  int32x2_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t *v39;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  __int128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  int v64;
  unsigned __int8 v65;
  unsigned int v66;
  char v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  char v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _WORD *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _WORD *v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  int *v95;
  _WORD *v96;
  uint64_t v97;
  int *v98;
  int v99;
  uint64_t v100;
  int v101;
  __int16 v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  _BOOL4 v115;
  _BOOL4 v116;
  BOOL v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  _OWORD v122[8];
  _OWORD v123[8];

  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 1;
  result = sub_1C979E5E8(a2 + 4, a1 + 360);
  if ((_DWORD)result)
    return result;
  *(_BYTE *)(a2 + 200) = a3;
  v7 = *(unsigned __int8 *)(a1 + 656);
  *(_WORD *)(a2 + 201) = v7;
  *(_BYTE *)(a2 + 222) = *(_BYTE *)(a1 + 650) - 8;
  *(_BYTE *)(a2 + 223) = *(_BYTE *)(a1 + 651) - 8;
  if (*(char *)(a1 + 529) <= 0)
    v8 = 6;
  else
    v8 = 12;
  *(_BYTE *)(a2 + 224) = v8;
  *(_BYTE *)(a2 + 225) = 0;
  v9 = *(unsigned __int8 *)(a2 + 1);
  v10 = a2 + v9;
  *(_BYTE *)(v10 + 226) = *(_BYTE *)(*(_QWORD *)(a1 + 9736) + v9 + 203);
  *(_BYTE *)(v10 + 233) = *(_BYTE *)(*(_QWORD *)(a1 + 9736) + v9 + 210);
  *(_DWORD *)(a2 + 4 * v9 + 240) = 0;
  LOBYTE(v10) = *(_BYTE *)(a1 + 537);
  v11 = v10 - 3;
  *(_BYTE *)(a2 + 268) = v10 - 3;
  *(_BYTE *)(a2 + 269) = *(_BYTE *)(a1 + 538) - v10;
  LOBYTE(v10) = *(_BYTE *)(a1 + 539);
  *(_BYTE *)(a2 + 270) = v10 - 2;
  *(_BYTE *)(a2 + 271) = *(_BYTE *)(a1 + 540) - v10;
  *(_BYTE *)(a2 + 272) = *(_BYTE *)(a1 + 542);
  *(_BYTE *)(a2 + 273) = *(_BYTE *)(a1 + 541);
  *(_BYTE *)(a2 + 274) = *(_QWORD *)(a1 + 8136) != 0;
  *(_BYTE *)(a2 + 276) = 0;
  *(_BYTE *)(a2 + 277) = *(_BYTE *)(a1 + 572) != 0;
  *(_BYTE *)(a2 + 278) = 0;
  if (*(_BYTE *)(a1 + 952))
    v12 = *(_DWORD *)(a1 + 7868) + *(_DWORD *)(a1 + 7872);
  else
    v12 = *(char *)(a1 + 528);
  *(_DWORD *)(a2 + 288) = v12;
  *(_BYTE *)(a2 + 320) = *(char *)(a1 + 529) > 0;
  *(_BYTE *)(a2 + 396) = *(_BYTE *)(a1 + 583);
  *(_BYTE *)(a2 + 397) = 0;
  v13 = *(_WORD *)(a1 + 772);
  *(_WORD *)(a2 + 1984) = v13;
  v14 = *(_WORD *)(a1 + 776);
  *(_WORD *)(a2 + 1986) = v14;
  v15 = *(unsigned __int8 *)(a1 + 760);
  *(_BYTE *)(a2 + 1991) = v15;
  v16 = *(_WORD *)(a1 + 764);
  *(_BYTE *)(a2 + 1992) = v16;
  v17 = *(_WORD *)(a1 + 766);
  *(_BYTE *)(a2 + 1993) = v17;
  v18 = *(_WORD *)(a1 + 768);
  *(_BYTE *)(a2 + 1994) = v18;
  v19 = *(_WORD *)(a1 + 762);
  *(_BYTE *)(a2 + 1995) = v19;
  *(_BYTE *)(a2 + 1996) = v19;
  if (v13 | v14 || *(_BYTE *)(a2 + 1988) || *(_BYTE *)(a2 + 1989))
    goto LABEL_11;
  v20 = 1;
  if (*(_BYTE *)(a2 + 1990) != 5
    || v15
    || v16 != 2
    || v17 != 2
    || v18 != 2
    || (_BYTE)v19)
  {
    goto LABEL_12;
  }
  if (*(_BYTE *)(a2 + 1997)
    || *(_BYTE *)(a2 + 1998)
    || *(_BYTE *)(a2 + 1999)
    || *(_WORD *)(a2 + 2000)
    || *(_WORD *)(a2 + 2002)
    || *(_WORD *)(a2 + 2004)
    || *(_WORD *)(a2 + 2006)
    || *(_BYTE *)(a2 + 2008)
    || *(_DWORD *)(a2 + 2012)
    || *(_DWORD *)(a2 + 2016)
    || *(_BYTE *)(a2 + 2020)
    || *(_DWORD *)(a2 + 2024)
    || *(_BYTE *)(a2 + 2028)
    || *(_BYTE *)(a2 + 2072)
    || *(_BYTE *)(a2 + 2073)
    || *(_BYTE *)(a2 + 2074)
    || *(_BYTE *)(a2 + 2075)
    || *(_DWORD *)(a2 + 2076)
    || *(_DWORD *)(a2 + 2080)
    || *(_DWORD *)(a2 + 2084)
    || *(_DWORD *)(a2 + 2088))
  {
LABEL_11:
    v20 = 1;
  }
  else
  {
    v20 = *(_DWORD *)(a2 + 2092) != 0;
  }
LABEL_12:
  *(_BYTE *)(a2 + 398) = v20;
  *(_BYTE *)(a2 + 399) = 0;
  if (*(unsigned __int8 *)(a1 + 481) > 1u)
    goto LABEL_37;
  v21 = *(_DWORD *)(a1 + 928);
  v22 = *(double *)(a1 + 472) * (double)v21 + 0.5;
  v23 = *(_DWORD *)(a1 + 548);
  *(_BYTE *)(a2 + 2008) = 1;
  *(_BYTE *)(a2 + 2028) = 1;
  *(_DWORD *)(a2 + 2012) = v21;
  *(_DWORD *)(a2 + 2016) = (int)v22;
  *(_BYTE *)(a2 + 2032) = 1;
  *(_WORD *)(a2 + 2039) = 0;
  *(_WORD *)(a2 + 2042) = 5911;
  *(_BYTE *)(a2 + 2044) = 23;
  if ((_DWORD)v9)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "DoVi supports only 1 sublayer. But it requres %d.\n", v9 + 1);
      syslog(27, "DoVi supports only 1 sublayer. But it requres %d.\n", *(unsigned __int8 *)(a2 + 1) + 1);
    }
    return 4294954387;
  }
  v24 = vmul_s32(vdup_n_s32(v23), (int32x2_t)0x2800000004);
  sub_1C979FD8C((char **)(a2 + 2048), 1uLL);
  v25 = 0;
  v26 = *(_QWORD *)(a2 + 2048);
  do
  {
    v27 = v26 + 56 * v25;
    *(_WORD *)v27 = 257;
    *(_WORD *)(v27 + 6) = 0;
    v29 = (void **)(v27 + 8);
    v28 = *(_QWORD *)(v27 + 8);
    v32 = *(_QWORD *)(v27 + 16);
    v31 = (void **)(v27 + 16);
    v30 = v32;
    v33 = v32 - v28;
    if (v32 != v28)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v33 >> 2) < 2)
        goto LABEL_24;
      v34 = (void *)(v28 + 20);
      goto LABEL_23;
    }
    v35 = v26 + 56 * v25;
    v37 = *(_QWORD *)(v35 + 24);
    v36 = (_QWORD *)(v35 + 24);
    v38 = v37 - v30;
    if (v37 != v30)
    {
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_DWORD *)(v30 + 16) = 0;
      v34 = (void *)(v30 + 20);
LABEL_23:
      *v31 = v34;
      goto LABEL_24;
    }
    v41 = 0xCCCCCCCCCCCCCCCDLL * (v38 >> 2);
    v42 = 2 * v41;
    if (2 * v41 <= 1)
      v42 = 1;
    if (v41 >= 0x666666666666666)
      v43 = 0xCCCCCCCCCCCCCCCLL;
    else
      v43 = v42;
    v44 = sub_1C97A00C4(v43);
    *v44 = 0;
    v44[1] = 0;
    *((_DWORD *)v44 + 4) = 0;
    v46 = (char *)*v31;
    v47 = (char *)*v29;
    v48 = v44;
    if (*v31 != *v29)
    {
      do
      {
        v49 = *(_OWORD *)(v46 - 20);
        *((_DWORD *)v48 - 1) = *((_DWORD *)v46 - 1);
        *(_OWORD *)((char *)v48 - 20) = v49;
        v48 = (_QWORD *)((char *)v48 - 20);
        v46 -= 20;
      }
      while (v46 != v47);
      v46 = (char *)*v29;
    }
    *v29 = v48;
    *v31 = (char *)v44 + 20;
    *v36 = (char *)v44 + 20 * v45;
    if (v46)
      operator delete(v46);
LABEL_24:
    v26 = *(_QWORD *)(a2 + 2048);
    v39 = *(int32x2_t **)(v26 + 56 * v25 + 8);
    v24 = vmin_s32(vdup_n_s32(1100 * dword_1C9833388[3 * *(unsigned __int8 *)(a2 + 156) - 3 + *(unsigned __int8 *)(a2 + 163)]), v24);
    *v39 = vadd_s32(vshl_s32(v24, (int32x2_t)0xFFFFFFFCFFFFFFFALL), (int32x2_t)-1);
    v39[1] = 0;
    v39[2].i8[0] = 0;
  }
  while (v25++ < *(unsigned __int8 *)(a2 + 1));
  v11 = *(_BYTE *)(a2 + 268);
  v7 = *(unsigned __int8 *)(a2 + 201);
LABEL_37:
  *(_BYTE *)(a2 + 212) = 0;
  *(_QWORD *)(a2 + 214) = 0;
  v50 = 1 << *(_BYTE *)(a1 + 537);
  v51 = *(__int16 *)(a1 + 466);
  v52 = v50 - 1;
  v53 = -v50;
  v54 = (v50 - 1 + v51) & -v50;
  *(_DWORD *)(a2 + 204) = v54;
  v55 = *(__int16 *)(a1 + 468);
  v56 = (v52 + v55) & v53;
  *(_DWORD *)(a2 + 208) = v56;
  v57 = ((8 << v11) & 0xFFF8) - 1;
  if ((v57 & v51) != 0)
  {
    if ((v7 - 1) >= 2)
      v58 = 1;
    else
      v58 = 2;
    *(_WORD *)(a2 + 216) = (v54 - v51) / v58;
    *(_BYTE *)(a2 + 212) = 1;
  }
  if ((v57 & v55) != 0)
  {
    if (v7 == 1)
      v59 = 2;
    else
      v59 = 1;
    *(_WORD *)(a2 + 220) = (v56 - v55) / v59;
    *(_BYTE *)(a2 + 212) = 1;
  }
  v60 = *(_BYTE *)(a2 + 222);
  *(_BYTE *)(a2 + 2096) = v60 + 8;
  *(_BYTE *)(a2 + 2097) = 6 * v60;
  v61 = *(_BYTE *)(a2 + 223);
  *(_BYTE *)(a2 + 2098) = v61 + 8;
  *(_BYTE *)(a2 + 2099) = 6 * v61;
  *(_DWORD *)(a2 + 2108) = 16 << *(_BYTE *)(a2 + 224);
  v62 = v11 + 3;
  *(_BYTE *)(a2 + 2112) = v62;
  v63 = *(_BYTE *)(a2 + 269) + v62;
  *(_BYTE *)(a2 + 2113) = v63;
  v64 = 1 << v63;
  *(_BYTE *)(a2 + 2117) = 1 << v63;
  v65 = *(_BYTE *)(a2 + 270) + 2;
  *(_BYTE *)(a2 + 2114) = v65;
  *(_BYTE *)(a2 + 2115) = *(_BYTE *)(a2 + 271) + v65;
  v66 = v7 - 1;
  v67 = v65;
  if (v65 <= 3u)
    v67 = 3;
  v68 = v67 - 1;
  if (v66 >= 2)
    v69 = v65;
  else
    v69 = v68;
  *(_BYTE *)(a2 + 2116) = v69;
  *(_DWORD *)(a2 + 2120) = (v54 + v64 - 1) >> v63;
  *(_DWORD *)(a2 + 2124) = (v56 + v64 - 1) >> v63;
  if (*(_BYTE *)(a2 + 278))
  {
    *(_BYTE *)(a2 + 284) = *(_BYTE *)(a2 + 279) + 1;
    *(_BYTE *)(a2 + 285) = *(_BYTE *)(a2 + 280) + 1;
    v70 = *(_BYTE *)(a2 + 281) + 3;
    *(_BYTE *)(a2 + 286) = v70;
    *(_BYTE *)(a2 + 287) = *(_BYTE *)(a2 + 282) + v70;
  }
  v71 = *(unsigned int *)(a2 + 288);
  if ((_DWORD)v71)
  {
    v72 = (uint64_t *)(a2 + 296);
    sub_1C971E334((void **)(a2 + 296), v71);
    if (*(_DWORD *)(a2 + 288))
    {
      v73 = 0;
      v74 = a1 + 964;
      do
      {
        v75 = *v72;
        v76 = *v72 + 248 * v73;
        memset(v123, 0, 41);
        memset(v122, 0, sizeof(v122));
        *(_OWORD *)((char *)&v123[2] + 10) = 0u;
        *(_OWORD *)((char *)&v123[3] + 10) = 0u;
        *(_OWORD *)((char *)&v123[4] + 10) = 0u;
        memset((char *)&v123[5] + 10, 0, 28);
        v77 = *(unsigned __int8 *)(a1 + 108 * (int)v73 + 1044);
        *(_BYTE *)(v76 + 163) = v77;
        if (v77)
        {
          v78 = v75 + 248 * v73;
          *(_DWORD *)(v78 + 172) = 0;
          v79 = (_WORD *)(v78 + 172);
          *((_DWORD *)v79 - 2) = 0;
          v80 = a1 + 108 * (int)v73;
          v81 = *(char *)(v80 + 1045);
          *((_BYTE *)v79 - 4) = v81 < 1;
          if (v81 < 0)
            v81 = -v81;
          *(v79 - 1) = v81 - 1;
          v82 = *(unsigned __int8 *)(v80 + 1046);
          BYTE2(v123[2]) = v82;
          if (v82)
          {
            v83 = 0;
            v84 = 0;
            v85 = 0;
            v86 = a1 + 1047 + 108 * (int)v73;
            do
            {
              v87 = *(_BYTE *)(v86 + v84);
              v85 |= (v87 & 1) << v84;
              *v79 = v85;
              if ((v87 & 1) == 0)
              {
                v83 |= ((*(unsigned __int8 *)(v86 + v84) >> 1) & 1) << v84;
                v79[1] = v83;
              }
              if ((_DWORD)v82 - 1 == v84)
                LOWORD(v88) = 0;
              else
                v88 = *(_DWORD *)(v74 + 108 * (int)(((v73 << 32) - 0x100000000) >> 32) + 4 * v84);
              *((_WORD *)v123 + v84++) = v88;
            }
            while (v82 != v84);
          }
        }
        else
        {
          v89 = v75 + 248 * v73;
          *(_WORD *)(v89 + 176) = 0;
          v90 = v89 + 176;
          *(_DWORD *)(v90 + 66) = 0;
          v91 = (_WORD *)(v90 + 66);
          v92 = *(unsigned __int8 *)(a1 + 108 * (int)v73 + 961);
          if (*(_BYTE *)(a1 + 108 * (int)v73 + 961))
          {
            v93 = 0;
            v94 = 0;
            v95 = (int *)(v74 + 108 * (int)v73);
            v96 = (_WORD *)(v90 + 68);
            v97 = *(unsigned __int8 *)(a1 + 108 * (int)v73 + 961);
            v98 = v95;
            do
            {
              v99 = *v98++;
              if (v99 < 0)
                *(_BYTE *)v90 = ++v93;
              else
                *(_BYTE *)(v90 + 1) = ++v94;
              --v97;
            }
            while (v97);
            if (v93)
            {
              v100 = 0;
              v101 = 0;
              v102 = 0;
              do
              {
                v103 = 0;
                v104 = 0x7FFFFFFF;
                v105 = -1;
                do
                {
                  v106 = v95[v103];
                  if (v106 < 0 && v101 < -v106 && v104 > -v106)
                  {
                    v104 = -v106;
                    v105 = v103;
                  }
                  ++v103;
                }
                while (v92 != v103);
                v107 = a1 + 108 * (int)v73 + 956;
                v108 = *(_DWORD *)(v107 + 4 * v105 + 8);
                *(_WORD *)(v75 + 248 * v73 + 2 * v100 + 178) = v102 + ~(_WORD)v108;
                *v91 |= *(unsigned __int8 *)(v107 + v105 + 72) << v100;
                v101 = -v108;
                ++v100;
                v102 = v108;
              }
              while (v100 != v93);
            }
            if (v94)
            {
              v109 = 0;
              v110 = 0;
              do
              {
                v111 = 0;
                v112 = 0x7FFFFFFF;
                v113 = -1;
                do
                {
                  v114 = v95[v111];
                  v115 = v114 > v110;
                  v116 = v114 < v112;
                  v117 = !v115 || !v116;
                  if (v115 && v116)
                    v118 = v95[v111];
                  else
                    v118 = v112;
                  if (v117)
                    v119 = v113;
                  else
                    v119 = v111;
                  if (v114 >= 1)
                  {
                    v112 = v118;
                    v113 = v119;
                  }
                  ++v111;
                }
                while (v92 != v111);
                v120 = a1 + 108 * (int)v73 + 956;
                v121 = *(_DWORD *)(v120 + 4 * v113 + 8);
                *(_WORD *)(v75 + 248 * v73 + 2 * v109 + 210) = v121 + ~(_WORD)v110;
                *v96 |= *(unsigned __int8 *)(v120 + v113 + 72) << v109++;
                v110 = v121;
              }
              while (v109 != v94);
            }
          }
        }
        sub_1C971ECE4(v76, (uint64_t)v122);
        ++v73;
      }
      while (v73 < *(unsigned int *)(a2 + 288));
    }
  }
  return 0;
}

uint64_t sub_1C97A6140(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  int v13;
  BOOL v14;
  const void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;

  v4 = result;
  *(_BYTE *)a2 = a3;
  *(_BYTE *)(a2 + 1) = *(_BYTE *)(*(_QWORD *)(result + 9752) + 200);
  *(_WORD *)(a2 + 2) = 0;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 5) = *(_BYTE *)(result + 508);
  *(_BYTE *)(a2 + 6) = 0;
  v5 = *(char *)(result + 530);
  if (v5 <= 1)
    LOBYTE(v5) = 1;
  v6 = v5 - 1;
  *(_BYTE *)(a2 + 7) = v6;
  *(_BYTE *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 9) = *(_BYTE *)(result + 488) - 26;
  *(_WORD *)(a2 + 10) = 0;
  v7 = *(char *)(result + 492);
  *(_BYTE *)(a2 + 12) = v7 > 0;
  if (v7 < 1)
    v8 = 0;
  else
    v8 = *(unsigned __int8 *)(result + 496);
  *(_BYTE *)(a2 + 13) = v8;
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 490);
  *(_BYTE *)(a2 + 16) = *(unsigned __int8 *)(result + 481) < 4u;
  v9 = *(unsigned __int8 *)(result + 713);
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(result + 712) | v9;
  if (v9)
    v10 = *(_BYTE *)(result + 594) != 0;
  else
    v10 = 0;
  *(_BYTE *)(a2 + 18) = v10;
  *(_BYTE *)(a2 + 19) = *(_BYTE *)(result + 430);
  v11 = (*(_BYTE *)(result + 544) & 4) != 0;
  *(_BYTE *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 21) = v11;
  *(_WORD *)(a2 + 28) = 256;
  if (*(_BYTE *)(result + 696))
    v12 = 1;
  else
    v12 = *(_BYTE *)(result + 482) != 0;
  *(_BYTE *)(a2 + 30) = v12;
  v13 = *(unsigned __int8 *)(result + 561);
  *(_BYTE *)(a2 + 31) = *(_BYTE *)(result + 561) == 0;
  if (v13)
    *(_WORD *)(a2 + 32) = 0;
  if (*(_BYTE *)(result + 648))
    v14 = 1;
  else
    v14 = *(_BYTE *)(result + 649) != 0;
  *(_BYTE *)(a2 + 1608) = v14;
  v15 = *(const void **)(result + 8136);
  *(_BYTE *)(a2 + 34) = v15 != 0;
  if (v15)
  {
    v16 = a2 + 40;
    memcpy((void *)(a2 + 40), v15, 0x618uLL);
    v17 = (void *)operator new[]();
    bzero(v17, 0x9240uLL);
    v18 = *(_QWORD *)(a2 + 1600);
    *(_QWORD *)(a2 + 1600) = v17;
    if (v18)
      MEMORY[0x1CAA43B6C](v18, 0x1000C8052888210);
    v19 = 0;
    v20 = 0;
    v21 = a2 + 40;
    do
    {
      v22 = 0;
      v23 = v21;
      v24 = v19;
      do
      {
        v25 = v16 + 390 * v20 + 65 * v22;
        v26 = v22 - 3;
        if (v22 < 3)
          v26 = v22;
        if (v20 == 3 && v26)
        {
          v27 = v16 + 65 * v22;
          *(_OWORD *)v25 = *(_OWORD *)(v27 + 780);
          v28 = *(_OWORD *)(v27 + 796);
          v29 = *(_OWORD *)(v27 + 812);
          v30 = *(_OWORD *)(v27 + 828);
          *(_BYTE *)(v25 + 64) = *(_BYTE *)(v27 + 844);
          *(_OWORD *)(v25 + 32) = v29;
          *(_OWORD *)(v25 + 48) = v30;
          *(_OWORD *)(v25 + 16) = v28;
        }
        else if (v20 <= 1)
        {
          *(_BYTE *)v25 = *(_BYTE *)(v25 + 1);
        }
        v31 = 0;
        result = v24;
        do
        {
          v32 = 0;
          v33 = 16 * word_1C985A16C[v31];
          v34 = *(_QWORD *)(a2 + 1600) + result;
          do
          {
            v35 = *(unsigned __int8 *)(v23 + v32);
            if (!*(_BYTE *)(v23 + v32))
            {
              v35 = 16;
              *(_BYTE *)(v23 + v32) = 16;
            }
            *(_DWORD *)(v34 + 4 * v32++) = v33 / v35;
          }
          while (v32 != 65);
          ++v31;
          result += 260;
        }
        while (v31 != 6);
        ++v22;
        v24 += 1560;
        v23 += 65;
      }
      while (v22 != 6);
      ++v20;
      v19 += 9360;
      v21 += 390;
    }
    while (v20 != 4);
    v8 = *(unsigned __int8 *)(a2 + 13);
  }
  *(_DWORD *)(a2 + 1610) = 0;
  *(_DWORD *)(a2 + 1636) = *(unsigned __int8 *)(*(_QWORD *)(v4 + 9752) + 2113) - v8;
  return result;
}

void sub_1C97A6420(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v6 = operator new(0x50uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E8291AA0;
  v8 = (char *)(v6 + 3);
  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  if (a3)
  {
    v9 = (unint64_t *)(a3 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v6[6] = 0;
  v6[7] = 0;
  v6[8] = sub_1C97B95E8;
  v6[9] = nullsub_24;
  *((_BYTE *)v6 + 24) = 0;
  sub_1C974C5FC((uint64_t)(v6 + 6), &v14);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_1C97A64FC(__int128 *a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = *(_QWORD **)a1;
  v3 = (_QWORD *)*((_QWORD *)a1 + 1);
  v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v16 = &v4[a2];
      while (v3 != v16)
        sub_1C97A0E28(--v3, 0);
      *((_QWORD *)a1 + 1) = v16;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = *((_QWORD *)a1 + 2);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*((void **)a1 + 1), 8 * v6);
      *((_QWORD *)a1 + 1) = &v3[v6];
    }
    else
    {
      if (a2 >> 61)
        sub_1C9747024();
      v8 = v7 - (_QWORD)v4;
      v9 = v8 >> 2;
      if (v8 >> 2 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10 >> 61)
        sub_1C9724B4C();
      v11 = (char *)operator new(8 * v10);
      v12 = &v11[8 * v5];
      v13 = &v11[8 * v10];
      bzero(v12, 8 * v6);
      v14 = &v12[8 * v6];
      while (v3 != v4)
      {
        v15 = *--v3;
        *v3 = 0;
        *((_QWORD *)v12 - 1) = v15;
        v12 -= 8;
      }
      v17 = *a1;
      *(_QWORD *)a1 = v12;
      *((_QWORD *)a1 + 1) = v14;
      *((_QWORD *)a1 + 2) = v13;
      v18 = (_QWORD *)*((_QWORD *)&v17 + 1);
      v19 = (_QWORD *)v17;
      while (v18 != v19)
        sub_1C97A0E28(--v18, 0);
      if (v19)
        operator delete(v19);
    }
  }
}

double sub_1C97A6654(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  double v4;
  uint64_t v5;
  double result;

  v2 = operator new();
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)(v2 + 536) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 616) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_QWORD *)(v2 + 824) = 0;
  *(_OWORD *)(v2 + 832) = 0u;
  *(_QWORD *)(v2 + 1024) = 0;
  *(_OWORD *)(v2 + 1032) = 0u;
  *(_OWORD *)(v2 + 1224) = 0u;
  *(_OWORD *)(v2 + 1240) = 0u;
  *(_OWORD *)(v2 + 1256) = 0u;
  *(_OWORD *)(v2 + 1272) = 0u;
  *(_OWORD *)(v2 + 1288) = 0u;
  *(_OWORD *)(v2 + 1304) = 0u;
  *(_OWORD *)(v2 + 1320) = 0u;
  *(_OWORD *)(v2 + 1336) = 0u;
  *(_OWORD *)(v2 + 1352) = 0u;
  *(_OWORD *)(v2 + 1368) = 0u;
  *(_OWORD *)(v2 + 1384) = 0u;
  *(_OWORD *)(v2 + 1400) = 0u;
  *(_OWORD *)(v2 + 1416) = 0u;
  *(_OWORD *)(v2 + 1432) = 0u;
  *(_OWORD *)(v2 + 1448) = 0u;
  *(_OWORD *)(v2 + 1464) = 0u;
  *(_OWORD *)(v2 + 1480) = 0u;
  *(_OWORD *)(v2 + 1496) = 0u;
  *(_OWORD *)(v2 + 1512) = 0u;
  *(_OWORD *)(v2 + 1528) = 0u;
  *(_OWORD *)(v2 + 1544) = 0u;
  *(_OWORD *)(v2 + 1560) = 0u;
  *(_OWORD *)(v2 + 1576) = 0u;
  *(_OWORD *)(v2 + 1592) = 0u;
  *(_WORD *)(v2 + 2581) = 0;
  *(_OWORD *)(v2 + 2480) = 0u;
  *(_OWORD *)(v2 + 2496) = 0u;
  *(_OWORD *)(v2 + 2512) = 0u;
  *(_OWORD *)(v2 + 2528) = 0u;
  *(_QWORD *)(v2 + 2544) = 0;
  *(_OWORD *)(v2 + 2984) = 0u;
  *(_OWORD *)(v2 + 3016) = 0u;
  *(_QWORD *)(v2 + 3048) = 0;
  *(_OWORD *)(v2 + 3056) = 0u;
  *(_OWORD *)(v2 + 4530) = 0u;
  *(_OWORD *)(v2 + 4546) = 0u;
  *(_OWORD *)(v2 + 4562) = 0u;
  *(_OWORD *)(v2 + 4578) = 0u;
  *(_OWORD *)(v2 + 4590) = 0u;
  *(_QWORD *)(v2 + 4608) = 0;
  *(_OWORD *)(v2 + 4872) = 0u;
  *(_WORD *)(v2 + 4973) = 0;
  *(_QWORD *)(v2 + 4936) = 0;
  *(_OWORD *)(v2 + 4904) = 0u;
  *(_OWORD *)(v2 + 4920) = 0u;
  *(_OWORD *)(v2 + 4888) = 0u;
  *(_QWORD *)(v2 + 5392) = 0;
  *(_OWORD *)(v2 + 5376) = 0u;
  *(_QWORD *)(v2 + 6248) = 0;
  *(_OWORD *)(v2 + 6232) = 0u;
  *(_QWORD *)(v2 + 6328) = 0;
  *(_OWORD *)(v2 + 6312) = 0u;
  *(_OWORD *)(v2 + 5408) = 0u;
  *(_OWORD *)(v2 + 5424) = 0u;
  *(_OWORD *)(v2 + 5440) = 0u;
  *(_OWORD *)(v2 + 5456) = 0u;
  *(_OWORD *)(v2 + 5472) = 0u;
  *(_OWORD *)(v2 + 5488) = 0u;
  *(_OWORD *)(v2 + 5504) = 0u;
  *(_QWORD *)(v2 + 5520) = 0;
  *(_OWORD *)(v2 + 5584) = 0u;
  *(_OWORD *)(v2 + 5568) = 0u;
  *(_OWORD *)(v2 + 5552) = 0u;
  *(_OWORD *)(v2 + 5648) = 0u;
  *(_OWORD *)(v2 + 5664) = 0u;
  *(_OWORD *)(v2 + 5680) = 0u;
  *(_OWORD *)(v2 + 5696) = 0u;
  *(_QWORD *)(v2 + 5712) = 0;
  *(_QWORD *)(v2 + 6128) = 0;
  *(_OWORD *)(v2 + 6112) = 0u;
  *(_OWORD *)(v2 + 6096) = 0u;
  *(_OWORD *)(v2 + 6080) = 0u;
  *(_OWORD *)(v2 + 6064) = 0u;
  *(_OWORD *)(v2 + 6048) = 0u;
  *(_OWORD *)(v2 + 6032) = 0u;
  *(_OWORD *)(v2 + 6016) = 0u;
  *(_OWORD *)(v2 + 6000) = 0u;
  *(_OWORD *)(v2 + 5984) = 0u;
  *(_OWORD *)(v2 + 5968) = 0u;
  *(_OWORD *)(v2 + 5952) = 0u;
  *(_OWORD *)(v2 + 5936) = 0u;
  *(_OWORD *)(v2 + 5920) = 0u;
  *(_OWORD *)(v2 + 5904) = 0u;
  *(_OWORD *)(v2 + 5888) = 0u;
  *(_OWORD *)(v2 + 5872) = 0u;
  *(_OWORD *)(v2 + 5856) = 0u;
  *(_OWORD *)(v2 + 5840) = 0u;
  *(_OWORD *)(v2 + 5824) = 0u;
  *(_OWORD *)(v2 + 5808) = 0u;
  *(_OWORD *)(v2 + 5792) = 0u;
  *(_OWORD *)(v2 + 5776) = 0u;
  *(_OWORD *)(v2 + 5760) = 0u;
  *(_OWORD *)(v2 + 5744) = 0u;
  *(_OWORD *)(v2 + 5728) = 0u;
  *(_OWORD *)(v2 + 6184) = 0u;
  *(_OWORD *)(v2 + 6200) = 0u;
  *(_OWORD *)(v2 + 6168) = 0u;
  bzero((void *)(v2 + 3080), 0x5A9uLL);
  *(_QWORD *)(v2 + 4792) = 0;
  v3 = operator new(0x1580uLL, (std::align_val_t)0x40uLL);
  v4 = sub_1C980241C((uint64_t)v3);
  v5 = *(_QWORD *)(v2 + 3048);
  *(_QWORD *)(v2 + 3048) = v3;
  if (v5)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 16))(v5, v4);
  *(_QWORD *)(v2 + 6448) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 6432) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_QWORD *)(v2 + 6792) = 0;
  *(_OWORD *)(v2 + 6760) = 0u;
  *(_OWORD *)(v2 + 6776) = 0u;
  *(_QWORD *)(v2 + 652) = 0xFFFFFFFFLL;
  *(_BYTE *)(v2 + 676) = 0;
  *(_QWORD *)(v2 + 760) = -1;
  *(_BYTE *)(v2 + 768) = 2;
  *(_DWORD *)(v2 + 772) = -1;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_DWORD *)(v2 + 792) = 0x40000000;
  *(_WORD *)(v2 + 660) = -1;
  *(_DWORD *)(v2 + 668) = 0;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_WORD *)(v2 + 664) = 0;
  *(_WORD *)(v2 + 662) = 0;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 496) = 0;
  *(_QWORD *)(v2 + 480) = 0;
  atomic_store(0, (unsigned int *)(v2 + 588));
  *(_DWORD *)(v2 + 592) = 0;
  *(_BYTE *)(v2 + 596) = 0;
  *(_QWORD *)(v2 + 600) = -1;
  *(_DWORD *)(v2 + 608) = 0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 120) = 0;
  *a1 = v2;
  return result;
}

void sub_1C97A6964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t *v24;
  void **v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void **v34;
  void **v35;
  void **v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t i;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t j;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t k;
  void *v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  void **v75;
  void **v76;
  void **v77;
  void **v78;

  MEMORY[0x1CAA43B90](v23, 64);
  v27 = *v22;
  if (*v22)
  {
    v18[790] = v27;
    operator delete(v27);
  }
  v28 = *v21;
  if (*v21)
  {
    v18[780] = v28;
    operator delete(v28);
  }
  v29 = (void *)v18[774];
  if (v29)
  {
    v18[775] = v29;
    operator delete(v29);
  }
  v30 = *v26;
  if (*v26)
  {
    v18[772] = v30;
    operator delete(v30);
  }
  v31 = (void *)v18[764];
  if (v31)
  {
    v18[765] = v31;
    operator delete(v31);
  }
  v32 = (void *)v18[761];
  if (v32)
  {
    v18[762] = v32;
    operator delete(v32);
  }
  v33 = (void *)v18[758];
  if (v33)
  {
    v18[759] = v33;
    operator delete(v33);
  }
  v75 = (void **)(v18 + 676);
  v34 = (void **)(v18 + 694);
  v35 = (void **)(v18 + 706);
  v36 = (void **)(v18 + 716);
  v37 = (void *)v18[755];
  if (v37)
  {
    v18[756] = v37;
    operator delete(v37);
  }
  v38 = 0;
  v77 = (void **)(v18 + 128);
  v78 = (void **)(v18 + 103);
  v76 = (void **)(v18 + 310);
  do
  {
    v39 = (void *)v18[v38 + 752];
    if (v39)
    {
      v18[v38 + 753] = v39;
      operator delete(v39);
    }
    v38 -= 3;
  }
  while (v38 != -6);
  for (i = 0; i != -9; i -= 3)
  {
    v41 = (void *)v18[i + 746];
    if (v41)
    {
      v18[i + 747] = v41;
      operator delete(v41);
    }
  }
  v42 = (void *)v18[737];
  if (v42)
  {
    v18[738] = v42;
    operator delete(v42);
  }
  v43 = (void *)v18[734];
  if (v43)
  {
    v18[735] = v43;
    operator delete(v43);
  }
  v44 = (void *)v18[731];
  if (v44)
  {
    v18[732] = v44;
    operator delete(v44);
  }
  v45 = (void *)v18[728];
  if (v45)
  {
    v18[729] = v45;
    operator delete(v45);
  }
  v46 = (void *)v18[725];
  if (v46)
  {
    v18[726] = v46;
    operator delete(v46);
  }
  v47 = (void *)v18[722];
  if (v47)
  {
    v18[723] = v47;
    operator delete(v47);
  }
  v48 = (void *)v18[719];
  if (v48)
  {
    v18[720] = v48;
    operator delete(v48);
  }
  v49 = *v36;
  if (*v36)
  {
    v18[717] = v49;
    operator delete(v49);
  }
  v50 = (void *)v18[712];
  if (v50)
  {
    v18[713] = v50;
    operator delete(v50);
  }
  v51 = (void *)v18[709];
  if (v51)
  {
    v18[710] = v51;
    operator delete(v51);
  }
  v52 = *v35;
  if (*v35)
  {
    v18[707] = v52;
    operator delete(v52);
  }
  v53 = (void *)v18[697];
  if (v53)
  {
    v18[698] = v53;
    operator delete(v53);
  }
  v54 = *v34;
  if (*v34)
  {
    v18[695] = v54;
    operator delete(v54);
  }
  v55 = (void *)v18[688];
  if (v55)
  {
    v18[689] = v55;
    operator delete(v55);
  }
  v56 = (void *)v18[685];
  if (v56)
  {
    v18[686] = v56;
    operator delete(v56);
  }
  v57 = (void *)v18[682];
  if (v57)
  {
    v18[683] = v57;
    operator delete(v57);
  }
  v58 = (void *)v18[679];
  if (v58)
  {
    v18[680] = v58;
    operator delete(v58);
  }
  v59 = *v75;
  if (*v75)
  {
    v18[677] = v59;
    operator delete(v59);
  }
  a18 = v18 + 672;
  sub_1C97A126C(&a18);
  v60 = (void *)v18[615];
  if (v60)
  {
    v18[616] = v60;
    operator delete(v60);
  }
  v61 = (void *)v18[612];
  if (v61)
  {
    v18[613] = v61;
    operator delete(v61);
  }
  v62 = *v25;
  if (*v25)
  {
    v18[610] = v62;
    operator delete(v62);
  }
  for (j = 543; j != 511; j -= 2)
    sub_1C972CFE0((uint64_t)&v18[j]);
  do
  {
    sub_1C972CFE0((uint64_t)&v18[j]);
    j -= 2;
  }
  while (j != 479);
  do
  {
    sub_1C972CFE0((uint64_t)&v18[j]);
    j -= 2;
  }
  while (j != 447);
  do
  {
    sub_1C972CFE0((uint64_t)&v18[j]);
    j -= 2;
  }
  while (j != 415);
  do
  {
    sub_1C972CFE0((uint64_t)&v18[j]);
    j -= 2;
  }
  while (j != 383);
  v64 = *v24;
  *v24 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64);
  sub_1C972CFE0(a16);
  sub_1C972CFE0(a17);
  v65 = (void *)v18[316];
  if (v65)
  {
    v18[317] = v65;
    operator delete(v65);
  }
  v66 = (void *)v18[313];
  if (v66)
  {
    v18[314] = v66;
    operator delete(v66);
  }
  v67 = *v76;
  if (*v76)
  {
    v18[311] = v67;
    operator delete(v67);
  }
  for (k = 0; k != -48; k -= 3)
  {
    v69 = (void *)v18[k + 198];
    if (v69)
    {
      v18[k + 199] = v69;
      operator delete(v69);
    }
  }
  v70 = *v77;
  if (*v77)
  {
    v18[129] = v70;
    operator delete(v70);
  }
  v71 = *v78;
  if (*v78)
  {
    v18[104] = v71;
    operator delete(v71);
  }
  sub_1C972CFE0((uint64_t)(v18 + 79));
  sub_1C972CFE0(v20);
  v72 = (_QWORD *)v18[67];
  if (v72 == v18 + 64)
  {
    v73 = 4;
    v72 = v18 + 64;
  }
  else
  {
    if (!v72)
      goto LABEL_94;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_94:
  sub_1C972CFE0((uint64_t)(v18 + 7));
  sub_1C972CFE0((uint64_t)(v18 + 5));
  sub_1C972CFE0(v19);
  MEMORY[0x1CAA43B9C](v18, 0x10F0C40ED279F69);
  _Unwind_Resume(a1);
}

void sub_1C97A6D78(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 9752);
  v4 = *(unsigned __int8 *)(v3 + 269) + 1;
  v5 = &byte_1C9854080;
  do
  {
    v6 = *v5++;
    v2 += v6;
    --v4;
  }
  while (v4);
  v7 = (*(_DWORD *)(v3 + 2120) * v2 * *(_DWORD *)(v3 + 2124));
  *(_DWORD *)(a1 + 216) = v2;
  *(_DWORD *)(a1 + 220) = v7;
  v9 = *(_BYTE **)(a1 + 192);
  v8 = *(char **)(a1 + 200);
  v10 = (v8 - v9) >> 5;
  if (v7 <= v10)
  {
    if (v7 >= v10)
      return;
    v20 = &v9[32 * v7];
    goto LABEL_19;
  }
  v11 = v7 - v10;
  v12 = *(_QWORD *)(a1 + 208);
  if (v7 - v10 <= (v12 - (uint64_t)v8) >> 5)
  {
    bzero(*(void **)(a1 + 200), 32 * v11);
    v20 = &v8[32 * v11];
LABEL_19:
    *(_QWORD *)(a1 + 200) = v20;
    return;
  }
  v13 = v12 - (_QWORD)v9;
  if (v13 >> 4 > v7)
    v7 = v13 >> 4;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
    v14 = 0x7FFFFFFFFFFFFFFLL;
  else
    v14 = v7;
  if (v14 >> 59)
    sub_1C9724B4C();
  v15 = (char *)operator new(32 * v14);
  v16 = &v15[32 * v10];
  v17 = &v15[32 * v14];
  bzero(v16, 32 * v11);
  v18 = &v16[32 * v11];
  if (v8 != v9)
  {
    do
    {
      v19 = *((_OWORD *)v8 - 1);
      *((_OWORD *)v16 - 2) = *((_OWORD *)v8 - 2);
      *((_OWORD *)v16 - 1) = v19;
      v16 -= 32;
      v8 -= 32;
    }
    while (v8 != v9);
    v8 = *(char **)(a1 + 192);
  }
  *(_QWORD *)(a1 + 192) = v16;
  *(_QWORD *)(a1 + 200) = v18;
  *(_QWORD *)(a1 + 208) = v17;
  if (v8)
    operator delete(v8);
}

void sub_1C97A6EC0(uint64_t a1)
{
  FILE *v2;
  const char *v3;
  char *v4;
  FILE *v5;
  const char *v6;
  FILE *v7;
  const char *v8;
  FILE *v9;
  char v10;
  time_t v11[64];
  stat v12[3];
  char v13[20];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 756))
  {
    v11[0] = 0;
    setlocale(0, (const char *)&unk_1C986A1CD);
    time(v11);
    localtime_r(v11, (tm *)v12);
    strftime(v13, 0x14uLL, "%m%d%g_%H%M%S", (const tm *)v12);
    strcpy((char *)v11, "/private/var/logs/mediaserverd/VideoProcessing");
    if (stat((const char *)v11, v12))
      mkdir((const char *)v11, 0x1FFu);
    snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_FrameStats.txt", (const char *)v11, v13);
    v10 = 0;
    sub_1C971D338(a1 + 360, 0xFE98FF5FC68FF9F7, "logfile", (char *)v12, 0xFFFFFFFFLL, (uint64_t)&v10);
    snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_Bitstream.hevc", (const char *)v11, v13);
    v10 = 0;
    sub_1C971D338(a1 + 360, 0xAF63E24C8601F6BELL, "o", (char *)v12, 0xFFFFFFFFLL, (uint64_t)&v10);
    if (*(int *)(a1 + 756) >= 2)
    {
      snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_SrcYuv.yuv", (const char *)v11, v13);
      v2 = fopen((const char *)v12, "wb");
      if (!v2 && dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open file '%s'\n", (const char *)v12);
        syslog(27, "Unable to open file '%s'\n", (const char *)v12);
      }
      *(_QWORD *)(a1 + 256) = v2;
      if (*(int *)(a1 + 756) >= 3)
      {
        snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_ReconYuv.yuv", (const char *)v11, v13);
        v10 = 0;
        sub_1C971D338(a1 + 360, 0xAF63EF4C86020CD5, "r", (char *)v12, 0xFFFFFFFFLL, (uint64_t)&v10);
      }
    }
  }
  v3 = *(const char **)(a1 + 408);
  if (v3)
  {
    v4 = strrchr(*(char **)(a1 + 408), 46);
    if (strcmp(v4, ".heic"))
    {
      if (strcmp(v4, ".heif"))
      {
        v5 = fopen(v3, "wb");
        if (!v5 && dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open file '%s'\n", v3);
          syslog(27, "Unable to open file '%s'\n", v3);
        }
        *(_QWORD *)(a1 + 240) = v5;
      }
    }
  }
  v6 = *(const char **)(a1 + 744);
  if (v6)
  {
    v7 = fopen(*(const char **)(a1 + 744), "wt");
    if (!v7 && dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open file '%s'\n", v6);
      syslog(27, "Unable to open file '%s'\n", v6);
    }
    *(_QWORD *)(a1 + 248) = v7;
  }
  v8 = *(const char **)(a1 + 416);
  if (v8)
  {
    v9 = fopen(*(const char **)(a1 + 416), "wb");
    if (!v9 && dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open file '%s'\n", v8);
      syslog(27, "Unable to open file '%s'\n", v8);
    }
    *(_QWORD *)(a1 + 264) = v9;
  }
}

void sub_1C97A7280(unint64_t *a1, unint64_t a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char v17;

  v5 = *a1;
  v4 = (char *)a1[1];
  v6 = &v4[-*a1];
  v7 = a2 - (_QWORD)v6;
  if (a2 <= (unint64_t)v6)
  {
    if (a2 < (unint64_t)v6)
      a1[1] = v5 + a2;
  }
  else
  {
    v8 = (char *)a1[2];
    if (v8 - v4 >= v7)
    {
      bzero((void *)a1[1], a2 - (_QWORD)v6);
      a1[1] = (unint64_t)&v4[v7];
    }
    else
    {
      if ((a2 & 0x8000000000000000) != 0)
        sub_1C9747024();
      v9 = (unint64_t)&v8[-v5];
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v12 = (unint64_t)operator new(v11);
      v13 = &v6[v12];
      v14 = (char *)(v12 + v11);
      v15 = (char *)(v12 + a2);
      bzero(v13, v7);
      if (v4 == (char *)v5)
      {
        v12 = (unint64_t)v13;
      }
      else
      {
        v16 = &v4[~v5];
        do
        {
          v17 = *--v4;
          (v16--)[v12] = v17;
        }
        while (v4 != (char *)v5);
        v4 = (char *)*a1;
      }
      *a1 = v12;
      a1[1] = (unint64_t)v15;
      a1[2] = (unint64_t)v14;
      if (v4)
        operator delete(v4);
    }
  }
}

uint64_t sub_1C97A73A4(uint64_t result, char a2)
{
  uint64_t v2;
  int v3;
  int v4;
  __int16 v5;
  char v6;
  uint64_t v7;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = word_1C9853FF4[v2] >> (10 - a2);
    if (v3 <= v4)
    {
      v5 = word_1C985402C[v2];
      v6 = byte_1C9854064[v2];
      v7 = v3;
      v3 = v4 + 1;
      do
      {
        *(_WORD *)(*(_QWORD *)(result + 10760) + 2 * v7) = v5;
        *(_BYTE *)(*(_QWORD *)(result + 10784) + v7++) = v6;
      }
      while (v3 != v7);
    }
    else
    {
      v3 = v4 + 1;
    }
    ++v2;
  }
  while (v2 != 28);
  return result;
}

uint64_t sub_1C97A7424(int64x2_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::locale *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const std::locale::facet *v16;
  unsigned __int8 v17;
  uint64_t v18;
  int v19;
  std::locale::__imp *v20;
  std::locale::__imp **v21;
  char *v22;
  std::locale::__imp **v23;
  std::locale::__imp **v24;
  BOOL v25;
  int v26;
  int v28;
  const std::locale::facet *v30;
  unsigned __int8 v31;
  char v32;
  std::string::size_type v33;
  int64_t size;
  std::string *v35;
  std::string *v36;
  int64_t v37;
  std::string *v38;
  std::string *v39;
  unint64_t v41;
  uint64_t v42;
  std::string *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t *v55;
  _OWORD *v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  int64x2_t v67;
  unint64_t v68;
  const char *v69;
  std::string *v70;
  uint64_t *v71;
  std::string *v72;
  uint64_t **v73;
  uint64_t **v74;
  uint64_t *v75;
  _BOOL4 v76;
  uint64_t *v77;
  uint64_t *v78;
  char v79;
  char v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  std::string *v90;
  uint64_t v91;
  uint64_t i;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64x2_t *v97;
  unint64_t v98;
  int v99;
  BOOL v100;
  uint64_t v101;
  int v103;
  uint64_t v104;
  std::locale::__imp *v105;
  std::locale::__imp *v106;
  std::string::size_type v107;
  int v108;
  std::string v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  std::string v115;
  __int16 v116;
  _QWORD v117[13];
  char v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  std::string v125;
  uint64_t v126[13];
  char v127;
  uint64_t v128;
  std::locale::__imp *v129;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  _BYTE v133[56];
  void *v134;
  char v135;
  uint64_t v136;
  std::string v137;
  _QWORD v138[13];
  char v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  __int128 __src;
  uint64_t v147;
  char *v148;
  int64x2_t v149;
  _QWORD v150[2];
  std::locale v151;
  std::string v152;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  std::string __p;
  int v157;
  _QWORD v158[3];
  int v159;
  uint64_t v160[3];
  int v161;
  uint64_t v162[3];
  int v163;
  uint64_t v164[3];
  int v165;
  uint64_t v166[3];
  int v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  sub_1C97A85C4(&v151, "FrameType");
  LODWORD(v152.__r_.__value_.__r.__words[2]) = 0;
  sub_1C97A85C4(&v153, "CuDepth");
  DWORD2(v154) = 1;
  sub_1C97A85C4(&v155, "FullQp");
  LODWORD(__p.__r_.__value_.__l.__data_) = 2;
  sub_1C97A85C4(&__p.__r_.__value_.__l.__size_, "MeanSpatial");
  v157 = 3;
  sub_1C97A85C4(v158, "VarSpatial");
  v159 = 4;
  sub_1C97A85C4(v160, "MeanTemporal");
  v161 = 5;
  sub_1C97A85C4(v162, "VarTemporal");
  v163 = 6;
  sub_1C97A85C4(v164, "MeanMv");
  v165 = 7;
  sub_1C97A85C4(v166, "VarMv");
  v1 = 0;
  v2 = 0;
  v167 = 8;
  v111 = 0;
  v112 = 0;
  v110 = &v111;
  while (1)
  {
    v3 = &v151 + 4 * v2;
    v4 = &v111;
    if (v110 == &v111)
      goto LABEL_8;
    v5 = v1;
    v6 = &v111;
    if (v1)
    {
      do
      {
        v4 = (uint64_t **)v5;
        v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      do
      {
        v4 = (uint64_t **)v6[2];
        v25 = *v4 == (uint64_t *)v6;
        v6 = v4;
      }
      while (v25);
    }
    if (sub_1C97A8740(v4 + 4, (_QWORD *)&v151.__locale_ + 4 * v2))
    {
LABEL_8:
      v7 = &v111;
      v8 = &v111;
      if (v1)
      {
        v8 = v4 + 1;
        if (v4[1])
          goto LABEL_24;
        v7 = v4;
      }
LABEL_18:
      v11 = (char *)operator new(0x40uLL);
      v12 = v11 + 32;
      if (SHIBYTE(v3[2].__locale_) < 0)
      {
        sub_1C97A86B8(v12, v3->__locale_, (unint64_t)v3[1].__locale_);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)&v3->__locale_;
        *((std::locale *)v11 + 6) = v3[2];
      }
      *((_DWORD *)v11 + 14) = v152.__r_.__value_.__r.__words[4 * v2 + 2];
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v7;
      *v8 = (uint64_t *)v11;
      if (*v110)
      {
        v110 = (uint64_t **)*v110;
        v11 = (char *)*v8;
      }
      sub_1C977F9EC(v111, (uint64_t *)v11);
      ++v112;
      goto LABEL_24;
    }
    v7 = &v111;
    v8 = &v111;
    if (!v1)
      goto LABEL_18;
    v9 = v1;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v9;
        v10 = v9 + 4;
        if (!sub_1C97A8740((_QWORD *)&v151.__locale_ + 4 * v2, v9 + 4))
          break;
        v9 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_18;
      }
      if (!sub_1C97A8740(v10, (_QWORD *)&v151.__locale_ + 4 * v2))
        break;
      v8 = v7 + 1;
      v9 = v7[1];
      if (!v9)
        goto LABEL_18;
    }
LABEL_24:
    if (++v2 == 9)
      break;
    v1 = v111;
  }
  v13 = 36;
  do
  {
    if (SHIBYTE(v150[v13]) < 0)
      operator delete((void *)v149.i64[v13]);
    v13 -= 4;
  }
  while (v13 * 8);
  sub_1C97A85C4(&v109, aBooster00Cudep);
  v145 = -1;
  v143 = 0;
  v142 = 0;
  v144 = 0;
  sub_1C97BA070((uint64_t)v138, &v109);
  v14 = 0;
  v108 = 0;
  v97 = a1 + 21;
  memset(&v137, 0, sizeof(v137));
  v105 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
  v106 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
  v107 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v15 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v138 + *(_QWORD *)(v138[0] - 24)));
    v16 = std::locale::use_facet(&v151, MEMORY[0x1E0DE4A90]);
    v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v151);
    sub_1C97BA1D8(v138, (uint64_t)&v137, v17);
    if ((*((_BYTE *)&v138[4] + *(_QWORD *)(v138[0] - 24)) & 5) != 0)
      break;
    sub_1C97BA070((uint64_t)&v151, &v137);
    v130 = 0;
    v129 = 0;
    v131 = 0;
    sub_1C97BA35C((uint64_t *)&v151, (uint64_t)&v129);
    v18 = HIBYTE(v131);
    v19 = SHIBYTE(v131);
    v20 = v129;
    if (v131 >= 0)
    {
      v21 = &v129;
    }
    else
    {
      v18 = v130;
      v21 = (std::locale::__imp **)v129;
    }
    if (v18 >= 7)
    {
      v22 = (char *)v21 + v18;
      v23 = v21;
      do
      {
        v24 = (std::locale::__imp **)memchr(v23, 98, v18 - 6);
        if (!v24)
          break;
        v25 = *(_DWORD *)v24 == 1936682850 && *(_DWORD *)((char *)v24 + 3) == 1919251571;
        if (v25)
        {
          if (v24 == (std::locale::__imp **)v22 || v24 != v21)
            break;
          v26 = v108;
          if (v14 > v108 && v14 != 0)
            v26 = v14;
          v108 = v26;
          v14 = 0;
          goto LABEL_53;
        }
        v23 = (std::locale::__imp **)((char *)v24 + 1);
        v18 = v22 - (char *)v23;
      }
      while (v22 - (char *)v23 >= 7);
    }
    ++v14;
LABEL_53:
    if (v19 < 0)
      operator delete(v20);
    v151.__locale_ = v106;
    *(std::locale::__imp **)((char *)&v151.__locale_ + *((_QWORD *)v106 - 3)) = v105;
    v152.__r_.__value_.__l.__size_ = v107;
    v152.__r_.__value_.__r.__words[2] = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA43B3C](v158);
  }
  sub_1C97BA070((uint64_t)&v129, &v109);
  v28 = v108;
  if (v14 > v108 && v14 != 0)
    v28 = v14;
  v98 = v28;
  v103 = 0;
  v104 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v129 + *((_QWORD *)v129 - 3)));
    v30 = std::locale::use_facet(&v151, MEMORY[0x1E0DE4A90]);
    v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v151);
    sub_1C97BA1D8(&v129, (uint64_t)&v137, v31);
    if ((v133[*((_QWORD *)v129 - 3)] & 5) != 0)
      break;
    sub_1C97BA070((uint64_t)v126, &v137);
    memset(&v125, 0, sizeof(v125));
    sub_1C97BA35C(v126, (uint64_t)&v125);
    v32 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
    v33 = v125.__r_.__value_.__r.__words[0];
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
    else
      size = v125.__r_.__value_.__l.__size_;
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v125;
    else
      v35 = (std::string *)v125.__r_.__value_.__r.__words[0];
    v36 = (std::string *)((char *)v35 + size);
    if (size >= 7)
    {
      v37 = size;
      v38 = v35;
      do
      {
        v39 = (std::string *)memchr(v38, 98, v37 - 6);
        if (!v39)
          break;
        if (LODWORD(v39->__r_.__value_.__l.__data_) == 1936682850
          && *(_DWORD *)((char *)v39->__r_.__value_.__r.__words + 3) == 1919251571)
        {
          if (v39 == v36 || v39 != v35)
            break;
          if (v103)
          {
            sub_1C97BA588(&v142, v103);
            v41 = a1[21].u64[1];
            if (v41 >= a1[22].i64[0])
            {
              v42 = sub_1C97BA830(v97, (uint64_t)&v141);
            }
            else
            {
              sub_1C97BA7C4((uint64_t)v97, (uint64_t)&v141);
              v42 = v41 + 32;
            }
            a1[21].i64[1] = v42;
            v32 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
            v33 = v125.__r_.__value_.__r.__words[0];
          }
          if (v32 >= 0)
            v90 = &v125;
          else
            v90 = (std::string *)v33;
          sscanf((const char *)v90, "booster[%d", &v145);
          v141 = -1;
          v91 = v142;
          for (i = v143; i != v91; i -= 72)
          {
            if (*(char *)(i - 41) < 0)
              operator delete(*(void **)(i - 64));
          }
          v143 = v91;
          v141 = v145;
          sub_1C97BA588(&v142, v98);
          v103 = 0;
          goto LABEL_150;
        }
        v38 = (std::string *)((char *)&v39->__r_.__value_.__l.__data_ + 1);
        v37 = (char *)v36 - (char *)v38;
      }
      while ((char *)v36 - (char *)v38 >= 7);
    }
    v124 = 0;
    v123 = 0;
    v122 = 0;
    v121 = 0;
    v120 = 0;
    if (size >= 4)
    {
      v43 = v35;
      do
      {
        v44 = (char *)memchr(v43, 108, size - 3);
        if (!v44)
          break;
        if (*(_DWORD *)v44 == 1717658988)
        {
          if (v44 == (char *)v36 || v44 - (char *)v35 == -1)
            break;
          if (!sscanf((const char *)v35, "%d:leaf=%lf", &v124, &v122))
            goto LABEL_151;
          v45 = v122;
          v46 = v124;
          sub_1C97BAB34((uint64_t)&v151);
          *(_QWORD *)&v154 = v45;
          BYTE8(v154) = 1;
          HIDWORD(v155) = v46;
          v47 = v124;
          v48 = v142;
          v49 = v142 + 72 * (int)v124;
          *(_DWORD *)v49 = v151.__locale_;
          std::string::operator=((std::string *)(v49 + 8), &v152);
          v50 = v48 + 72 * (int)v47;
          v51 = v153;
          v52 = v154;
          *(_QWORD *)(v50 + 64) = v155;
          *(_OWORD *)(v50 + 32) = v51;
          *(_OWORD *)(v50 + 48) = v52;
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v152.__r_.__value_.__l.__data_);
          ++v103;
          goto LABEL_150;
        }
        v43 = (std::string *)(v44 + 1);
        size = (char *)v36 - (char *)v43;
      }
      while ((char *)v36 - (char *)v43 >= 4);
    }
    sub_1C97BA070((uint64_t)v117, &v125);
    v116 = 0;
    memset(&v115, 0, sizeof(v115));
    v53 = (_QWORD *)MEMORY[0x1CAA43A28](v117, &v124);
    v54 = sub_1C97BA9BC(v53, (_BYTE *)&v116 + 1);
    v55 = sub_1C97BA9BC(v54, &v116);
    sub_1C97BA35C(v55, (uint64_t)&v115);
    v113 = 0uLL;
    v114 = 0;
    sub_1C972D15C((uint64_t)&v151);
    std::string::operator=(&__p, &v115);
    sub_1C97BABC0((uint64_t)&v152.__r_.__value_.__r.__words[2]);
    __src = 0uLL;
    v147 = 0;
    while (1)
    {
      sub_1C97BA1D8(&v151, (uint64_t)&__src, 0x3Cu);
      if ((*((_BYTE *)&v153 + *((_QWORD *)v151.__locale_ - 3)) & 5) != 0)
        break;
      v56 = (_OWORD *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1) >= v114)
      {
        v58 = v113;
        v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1C9747024();
        if (0x5555555555555556 * ((uint64_t)(v114 - v113) >> 3) > v60)
          v60 = 0x5555555555555556 * ((uint64_t)(v114 - v113) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - v113) >> 3) >= 0x555555555555555)
          v61 = 0xAAAAAAAAAAAAAAALL;
        else
          v61 = v60;
        v150[1] = &v114;
        if (v61)
        {
          if (v61 > 0xAAAAAAAAAAAAAAALL)
            sub_1C9724B4C();
          v62 = (char *)operator new(24 * v61);
        }
        else
        {
          v62 = 0;
        }
        v64 = &v62[24 * v59];
        v148 = v62;
        v149.i64[0] = (uint64_t)v64;
        v149.i64[1] = (uint64_t)v64;
        v150[0] = &v62[24 * v61];
        if (SHIBYTE(v147) < 0)
        {
          sub_1C97A86B8(v64, (void *)__src, *((unint64_t *)&__src + 1));
          v56 = (_OWORD *)*((_QWORD *)&v113 + 1);
          v58 = v113;
          v65 = (char *)v149.i64[1];
          v64 = (char *)v149.i64[0];
        }
        else
        {
          *(_OWORD *)v64 = __src;
          *((_QWORD *)v64 + 2) = v147;
          v65 = &v62[24 * v59];
        }
        v63 = v65 + 24;
        v149.i64[1] = (uint64_t)(v65 + 24);
        if (v56 == (_OWORD *)v58)
        {
          v67 = vdupq_n_s64(v58);
        }
        else
        {
          do
          {
            v66 = *(_OWORD *)((char *)v56 - 24);
            *((_QWORD *)v64 - 1) = *((_QWORD *)v56 - 1);
            *(_OWORD *)(v64 - 24) = v66;
            v64 -= 24;
            *((_QWORD *)v56 - 2) = 0;
            *((_QWORD *)v56 - 1) = 0;
            *((_QWORD *)v56 - 3) = 0;
            v56 = (_OWORD *)((char *)v56 - 24);
          }
          while (v56 != (_OWORD *)v58);
          v67 = (int64x2_t)v113;
          v63 = (char *)v149.i64[1];
        }
        *(_QWORD *)&v113 = v64;
        *((_QWORD *)&v113 + 1) = v63;
        v149 = v67;
        v68 = v114;
        v114 = v150[0];
        v150[0] = v68;
        v148 = (char *)v67.i64[0];
        sub_1C97BACD0((uint64_t)&v148);
      }
      else
      {
        if (SHIBYTE(v147) < 0)
        {
          sub_1C97A86B8(*((_BYTE **)&v113 + 1), (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          v57 = __src;
          *(_QWORD *)(*((_QWORD *)&v113 + 1) + 16) = v147;
          *v56 = v57;
        }
        v63 = (char *)v56 + 24;
      }
      *((_QWORD *)&v113 + 1) = v63;
    }
    if (SHIBYTE(v147) < 0)
      operator delete((void *)__src);
    v151.__locale_ = v106;
    *(std::locale::__imp **)((char *)&v151.__locale_ + *((_QWORD *)v106 - 3)) = v105;
    v152.__r_.__value_.__l.__size_ = v107;
    v152.__r_.__value_.__r.__words[2] = v104;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA43B3C](v158);
    v69 = (const char *)(v113 + 24);
    if (*(char *)(v113 + 47) < 0)
      v69 = *(const char **)v69;
    if (!sscanf(v69, "%lf", &v123))
      goto LABEL_144;
    sub_1C97BA35C(v126, (uint64_t)&v125);
    v70 = (v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v125
        : (std::string *)v125.__r_.__value_.__r.__words[0];
    if (!sscanf((const char *)v70, "yes=%d,no=%d,missing=%d", (char *)&v121 + 4, &v121, &v120))
      goto LABEL_144;
    v71 = v111;
    if (!v111)
      goto LABEL_144;
    v100 = SHIDWORD(v121) >= (int)v121;
    v101 = v121;
    v99 = v120;
    v72 = (std::string *)v113;
    v73 = &v111;
    do
    {
      v74 = v73;
      v75 = v71 + 4;
      v76 = sub_1C97A8740(v71 + 4, v72);
      v77 = v71 + 1;
      if (!v76)
      {
        v77 = v71;
        v73 = (uint64_t **)v71;
      }
      v71 = (uint64_t *)*v77;
    }
    while (*v77);
    if (v73 != &v111 && (!v76 ? (v78 = v75) : (v78 = (uint64_t *)(v74 + 4)), !sub_1C97A8740(v72, v78)))
    {
      v81 = *((_DWORD *)v73 + 14);
      v82 = v123;
      v83 = v124;
      sub_1C97BAB34((uint64_t)&v151);
      std::string::operator=(&v152, v72);
      LODWORD(v151.__locale_) = v81;
      LOBYTE(v153) = SHIDWORD(v101) < (int)v101;
      BYTE1(v153) = v100;
      BYTE2(v153) = v99 == HIDWORD(v101);
      *((_QWORD *)&v153 + 1) = v82;
      BYTE8(v154) = 0;
      HIDWORD(v154) = HIDWORD(v101);
      v155 = __PAIR64__(v83, v101);
      v84 = v124;
      v85 = v142;
      v86 = v142 + 72 * (int)v124;
      *(_DWORD *)v86 = v81;
      std::string::operator=((std::string *)(v86 + 8), &v152);
      v87 = v85 + 72 * (int)v84;
      v88 = v153;
      v89 = v154;
      *(_QWORD *)(v87 + 64) = v155;
      *(_OWORD *)(v87 + 32) = v88;
      *(_OWORD *)(v87 + 48) = v89;
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      ++v103;
      v79 = 1;
    }
    else
    {
LABEL_144:
      v79 = 0;
    }
    v151.__locale_ = (std::locale::__imp *)&v113;
    sub_1C97BAABC((void ***)&v151);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    v117[0] = v106;
    *(_QWORD *)((char *)v117 + *((_QWORD *)v106 - 3)) = v105;
    v117[2] = v107;
    v117[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v118 < 0)
      operator delete((void *)v117[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA43B3C](&v119);
    if ((v79 & 1) != 0)
LABEL_150:
      v80 = 1;
    else
LABEL_151:
      v80 = 0;
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    v126[0] = (uint64_t)v106;
    *(uint64_t *)((char *)v126 + *((_QWORD *)v106 - 3)) = (uint64_t)v105;
    v126[2] = v107;
    v126[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v127 < 0)
      operator delete((void *)v126[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA43B3C](&v128);
    if ((v80 & 1) == 0)
    {
      v95 = 4294954385;
      goto LABEL_178;
    }
  }
  if (v103)
  {
    sub_1C97BA588(&v142, v103);
    v93 = a1[21].u64[1];
    if (v93 >= a1[22].i64[0])
    {
      v94 = sub_1C97BA830(v97, (uint64_t)&v141);
    }
    else
    {
      sub_1C97BA7C4((uint64_t)v97, (uint64_t)&v141);
      v94 = v93 + 32;
    }
    v95 = 0;
    a1[21].i64[1] = v94;
  }
  else
  {
    v95 = 0;
  }
LABEL_178:
  v129 = v106;
  *(std::locale::__imp **)((char *)&v129 + *((_QWORD *)v106 - 3)) = v105;
  v131 = v107;
  v132 = MEMORY[0x1E0DE4FB8] + 16;
  if (v135 < 0)
    operator delete(v134);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA43B3C](&v136);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  v138[0] = v106;
  *(_QWORD *)((char *)v138 + *((_QWORD *)v106 - 3)) = v105;
  v138[2] = v107;
  v138[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v139 < 0)
    operator delete((void *)v138[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA43B3C](&v140);
  v151.__locale_ = (std::locale::__imp *)&v142;
  sub_1C97A0D10((void ***)&v151);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  sub_1C97A8670((char *)v111);
  return v95;
}

void sub_1C97A8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char *a42)
{
  sub_1C972D520((uint64_t)&STACK[0x3A8]);
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  sub_1C972D520((uint64_t)&STACK[0x4D8]);
  STACK[0x4D8] = a18;
  sub_1C97A0D10((void ***)&STACK[0x4D8]);
  if (a40 < 0)
    operator delete(a35);
  sub_1C97A8670(a42);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C97A85C4(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1C972D5B8();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1C97A8670(char *a1)
{
  if (a1)
  {
    sub_1C97A8670(*(_QWORD *)a1);
    sub_1C97A8670(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void *sub_1C97A86B8(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1C972D5B8();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

BOOL sub_1C97A8740(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void sub_1C97A87A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C97A87B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C97A87E8(uint64_t a1)
{
  return sub_1C972CFE0(a1 + 48);
}

uint64_t sub_1C97A87F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  if (*(_BYTE *)(a1 + 570))
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    if (qword_1EF920E90 || !mach_timebase_info((mach_timebase_info_t)&qword_1EF920E90))
    {
      *(_BYTE *)(a1 + 288) = 1;
      *(_QWORD *)(a1 + 280) = mach_absolute_time();
    }
  }
  v12 = *(_QWORD *)(a1 + 9784);
  if (v12)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a3, a4, a5, a6, a2);
  else
    return 4294954385;
}

void sub_1C97A88B4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t i;
  _QWORD *v84;
  char *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  _OWORD *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  v8 = (std::mutex *)(a1 + 10808);
  std::mutex::lock((std::mutex *)(a1 + 10808));
  v9 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v10 = *(char **)(a1 + 10888);
  v11 = *(char **)(a1 + 10880);
  v12 = v10 - v11;
  v120 = v9;
  *(_QWORD *)&v121 = a3;
  *((_QWORD *)&v121 + 1) = a4;
  if (v10 == v11)
    v13 = 0;
  else
    v13 = 16 * (v10 - v11) - 1;
  v14 = *(_QWORD *)(a1 + 10904);
  v15 = *(_QWORD *)(a1 + 10912) + v14;
  if (v13 == v15)
  {
    v16 = (void **)(a1 + 10872);
    if (v14 < 0x80)
    {
      v30 = v12 >> 3;
      v31 = *(char **)(a1 + 10896);
      v32 = *(char **)(a1 + 10872);
      v33 = v31 - v32;
      if (v12 >> 3 >= (unint64_t)((v31 - v32) >> 3))
      {
        if (v31 == v32)
          v34 = 1;
        else
          v34 = v33 >> 2;
        v35 = (char *)sub_1C974B718(v34);
        v37 = v36;
        v38 = &v35[8 * v30];
        *(_QWORD *)&v39 = v35;
        *((_QWORD *)&v39 + 1) = v38;
        v116 = v39;
        v40 = operator new(0x1000uLL);
        *(_QWORD *)&v41 = v38;
        *((_QWORD *)&v41 + 1) = &v35[8 * v37];
        if (v30 == v37)
        {
          v42 = 8 * v30;
          *(_QWORD *)&v43 = v116;
          if (v12 < 1)
          {
            v78 = v40;
            v79 = v42 >> 2;
            if (v10 == v11)
              v80 = 1;
            else
              v80 = v79;
            v81 = (char *)sub_1C974B718(v80);
            v38 = &v81[8 * (v80 >> 2)];
            *(_QWORD *)&v43 = v81;
            *((_QWORD *)&v43 + 1) = v38;
            *(_QWORD *)&v41 = v38;
            *((_QWORD *)&v41 + 1) = &v81[8 * v82];
            if (v35)
            {
              v113 = v41;
              v117 = v43;
              operator delete(v35);
              v41 = v113;
              v43 = v117;
            }
            v40 = v78;
          }
          else
          {
            v44 = v42 >> 3;
            if (v44 >= -1)
              v45 = v44 + 1;
            else
              v45 = v44 + 2;
            v38 -= 8 * (v45 >> 1);
            *(_QWORD *)&v41 = v38;
            *((_QWORD *)&v43 + 1) = v38;
          }
        }
        else
        {
          v43 = v116;
        }
        *(_QWORD *)v38 = v40;
        *(_QWORD *)&v41 = v41 + 8;
        for (i = *(_QWORD *)(a1 + 10888); i != *(_QWORD *)(a1 + 10880); i -= 8)
        {
          v84 = (_QWORD *)*((_QWORD *)&v43 + 1);
          if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
          {
            v86 = (_BYTE *)v41;
            if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
            {
              if (*((_QWORD *)&v41 + 1) == *((_QWORD *)&v43 + 1))
                v91 = 1;
              else
                v91 = (uint64_t)(*((_QWORD *)&v41 + 1) - *((_QWORD *)&v43 + 1)) >> 2;
              v92 = (char *)sub_1C974B718(v91);
              v85 = &v92[(2 * v91 + 6) & 0xFFFFFFFFFFFFFFF8];
              v94 = v85;
              v95 = v86 - (_BYTE *)v84;
              if (v86 != (_BYTE *)v84)
              {
                v94 = &v85[v95 & 0xFFFFFFFFFFFFFFF8];
                v96 = 8 * (v95 >> 3);
                v97 = v85;
                v98 = v84;
                do
                {
                  v99 = *v98++;
                  *(_QWORD *)v97 = v99;
                  v97 += 8;
                  v96 -= 8;
                }
                while (v96);
              }
              *(_QWORD *)&v43 = v92;
              *((_QWORD *)&v43 + 1) = v85;
              *(_QWORD *)&v41 = v94;
              *((_QWORD *)&v41 + 1) = &v92[8 * v93];
              if (v84)
              {
                v114 = v41;
                v119 = v43;
                operator delete(v84);
                v41 = v114;
                v43 = v119;
              }
            }
            else
            {
              v87 = (uint64_t)(*((_QWORD *)&v41 + 1) - v41) >> 3;
              if (v87 >= -1)
                v88 = v87 + 1;
              else
                v88 = v87 + 2;
              v89 = v88 >> 1;
              v90 = v41 + 8 * (v88 >> 1);
              v85 = (char *)(v90 - (v41 - *((_QWORD *)&v43 + 1)));
              if ((_QWORD)v41 == *((_QWORD *)&v43 + 1))
              {
                v86 = (_BYTE *)*((_QWORD *)&v43 + 1);
              }
              else
              {
                v115 = *((_QWORD *)&v41 + 1);
                v118 = v43;
                memmove((void *)(v90 - (v41 - *((_QWORD *)&v43 + 1))), *((const void **)&v43 + 1), v41 - *((_QWORD *)&v43 + 1));
                *((_QWORD *)&v41 + 1) = v115;
                *(_QWORD *)&v43 = v118;
              }
              *((_QWORD *)&v43 + 1) = v85;
              *(_QWORD *)&v41 = &v86[8 * v89];
            }
          }
          else
          {
            v85 = (char *)*((_QWORD *)&v43 + 1);
          }
          v100 = *(_QWORD *)(i - 8);
          *((_QWORD *)v85 - 1) = v100;
          *((_QWORD *)&v43 + 1) -= 8;
        }
        v101 = *v16;
        *(_OWORD *)v16 = v43;
        *(_OWORD *)(a1 + 10888) = v41;
        if (v101)
          operator delete(v101);
        goto LABEL_84;
      }
      if (v31 == v10)
      {
        v56 = operator new(0x1000uLL);
        if (v32 == v11)
        {
          if (v10 == v11)
            v57 = 1;
          else
            v57 = v33 >> 2;
          v58 = (char *)sub_1C974B718(v57);
          v11 = &v58[(2 * v57 + 6) & 0xFFFFFFFFFFFFFFF8];
          v60 = *(uint64_t **)(a1 + 10880);
          v61 = v11;
          v62 = *(_QWORD *)(a1 + 10888) - (_QWORD)v60;
          if (v62)
          {
            v61 = &v11[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = 8 * (v62 >> 3);
            v64 = v11;
            do
            {
              v65 = *v60++;
              *(_QWORD *)v64 = v65;
              v64 += 8;
              v63 -= 8;
            }
            while (v63);
          }
          v66 = *(void **)(a1 + 10872);
          *(_QWORD *)(a1 + 10872) = v58;
          *(_QWORD *)(a1 + 10880) = v11;
          *(_QWORD *)(a1 + 10888) = v61;
          *(_QWORD *)(a1 + 10896) = &v58[8 * v59];
          if (v66)
          {
            operator delete(v66);
            v11 = *(char **)(a1 + 10880);
          }
        }
        *((_QWORD *)v11 - 1) = v56;
        v67 = *(char **)(a1 + 10880);
        *(_QWORD *)(a1 + 10880) = v67 - 8;
        v68 = *((_QWORD *)v67 - 1);
        *(_QWORD *)(a1 + 10880) = v67;
        v69 = *(char **)(a1 + 10888);
        if (v69 == *(char **)(a1 + 10896))
        {
          v70 = v67 - (_BYTE *)*v16;
          if (v67 <= *v16)
          {
            if (v69 == *v16)
              v103 = 1;
            else
              v103 = (v69 - (_BYTE *)*v16) >> 2;
            v104 = (char *)sub_1C974B718(v103);
            v106 = &v104[8 * (v103 >> 2)];
            v107 = *(uint64_t **)(a1 + 10880);
            v69 = v106;
            v108 = *(_QWORD *)(a1 + 10888) - (_QWORD)v107;
            if (v108)
            {
              v69 = &v106[v108 & 0xFFFFFFFFFFFFFFF8];
              v109 = 8 * (v108 >> 3);
              v110 = &v104[8 * (v103 >> 2)];
              do
              {
                v111 = *v107++;
                *(_QWORD *)v110 = v111;
                v110 += 8;
                v109 -= 8;
              }
              while (v109);
            }
            v112 = *(void **)(a1 + 10872);
            *(_QWORD *)(a1 + 10872) = v104;
            *(_QWORD *)(a1 + 10880) = v106;
            *(_QWORD *)(a1 + 10888) = v69;
            *(_QWORD *)(a1 + 10896) = &v104[8 * v105];
            if (v112)
            {
              operator delete(v112);
              v69 = *(char **)(a1 + 10888);
            }
          }
          else
          {
            v71 = v70 >> 3;
            v22 = v70 >> 3 < -1;
            v72 = (v70 >> 3) + 2;
            if (v22)
              v73 = v72;
            else
              v73 = v71 + 1;
            v74 = -(v73 >> 1);
            v75 = v73 >> 1;
            v76 = &v67[-8 * v75];
            v77 = v69 - v67;
            if (v69 != v67)
            {
              memmove(&v67[-8 * v75], v67, v69 - v67);
              v67 = *(char **)(a1 + 10880);
            }
            v69 = &v76[v77];
            *(_QWORD *)(a1 + 10888) = &v76[v77];
            *(_QWORD *)(a1 + 10880) = &v67[8 * v74];
          }
        }
        *(_QWORD *)v69 = v68;
      }
      else
      {
        *(_QWORD *)v10 = operator new(0x1000uLL);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 10904) = v14 - 128;
      v19 = *(_QWORD *)v11;
      v17 = v11 + 8;
      v18 = v19;
      *(_QWORD *)(a1 + 10880) = v17;
      if (*(char **)(a1 + 10896) == v10)
      {
        v20 = v17 - (_BYTE *)*v16;
        if (v17 <= *v16)
        {
          if (v10 == *v16)
            v46 = 1;
          else
            v46 = (v10 - (_BYTE *)*v16) >> 2;
          v47 = (char *)sub_1C974B718(v46);
          v49 = &v47[8 * (v46 >> 2)];
          v50 = *(uint64_t **)(a1 + 10880);
          v10 = v49;
          v51 = *(_QWORD *)(a1 + 10888) - (_QWORD)v50;
          if (v51)
          {
            v10 = &v49[v51 & 0xFFFFFFFFFFFFFFF8];
            v52 = 8 * (v51 >> 3);
            v53 = &v47[8 * (v46 >> 2)];
            do
            {
              v54 = *v50++;
              *(_QWORD *)v53 = v54;
              v53 += 8;
              v52 -= 8;
            }
            while (v52);
          }
          v55 = *(void **)(a1 + 10872);
          *(_QWORD *)(a1 + 10872) = v47;
          *(_QWORD *)(a1 + 10880) = v49;
          *(_QWORD *)(a1 + 10888) = v10;
          *(_QWORD *)(a1 + 10896) = &v47[8 * v48];
          if (v55)
          {
            operator delete(v55);
            v10 = *(char **)(a1 + 10888);
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = -(v24 >> 1);
          v26 = v24 >> 1;
          v27 = &v17[-8 * v26];
          v28 = v10 - v17;
          if (v10 == v17)
          {
            v29 = v10;
          }
          else
          {
            memmove(&v17[-8 * v26], v17, v10 - v17);
            v29 = *(char **)(a1 + 10880);
          }
          v10 = &v27[v28];
          *(_QWORD *)(a1 + 10888) = &v27[v28];
          *(_QWORD *)(a1 + 10880) = &v29[8 * v25];
        }
      }
      *(_QWORD *)v10 = v18;
    }
    *(_QWORD *)(a1 + 10888) += 8;
LABEL_84:
    v11 = *(char **)(a1 + 10880);
    v15 = *(_QWORD *)(a1 + 10912) + *(_QWORD *)(a1 + 10904);
    v9 = v120;
  }
  v102 = (_OWORD *)(*(_QWORD *)&v11[(v15 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v15 & 0x7F));
  *v102 = v9;
  v102[1] = v121;
  ++*(_QWORD *)(a1 + 10912);
  sub_1C97A1438(a1);
  std::mutex::unlock(v8);
}

void sub_1C97A8EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, char a12, uint64_t a13, char a14)
{
  std::mutex *v14;
  void *v15;

  operator delete(v15);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  sub_1C972CFE0((uint64_t)&a14);
  sub_1C972CFE0((uint64_t)&a12);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97A8F38(uint64_t a1, CFDataRef *a2)
{
  const char *v4;
  size_t v5;
  _BYTE *v6;
  unint64_t v7;
  size_t v8;
  int v9;
  size_t v10;
  uint64_t v11;
  FILE *v12;
  const char *v13;
  size_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  _DWORD *v27;
  int v28;
  unint64_t v29;
  int v30;
  _DWORD *v31;
  int v32;
  unint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  int v40;
  unint64_t v41;
  int v42;
  _DWORD *v43;
  int v44;
  unint64_t v45;
  int v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  int v50;
  _DWORD *v51;
  int v52;
  unint64_t v53;
  int v54;
  _DWORD *v55;
  int v56;
  unint64_t v57;
  int v58;
  _DWORD *v59;
  int v60;
  unsigned __int8 v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  _DWORD *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  _DWORD *v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  BOOL v84;
  unint64_t v85;
  int v86;
  _DWORD *v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  _DWORD *v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  _DWORD *v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  _DWORD *v107;
  char v108;
  int v109;
  _DWORD *v110;
  char v111;
  unsigned int v112;
  int v113;
  _DWORD *v114;
  char v115;
  int v116;
  _DWORD *v117;
  char v118;
  unint64_t v119;
  char v120;
  _DWORD *v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  _DWORD *v136;
  int v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  int v141;
  _DWORD *v142;
  int v143;
  uint64_t v144;
  int i;
  int v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  _DWORD *v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  _DWORD *v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  _DWORD *v176;
  uint64_t v177;
  __int128 *v178;
  uint64_t v179;
  unsigned int v180;
  char v181;
  unsigned __int8 *v182;
  __int128 *v183;
  uint64_t v184;
  int *v185;
  unsigned __int8 *v186;
  uint64_t v187;
  int v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char v197;
  uint64_t v198;
  BOOL v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  unsigned int v206;
  unint64_t v207;
  unsigned __int8 *v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unsigned __int8 *v213;
  _DWORD *v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  _DWORD *v222;
  int v223;
  unint64_t v224;
  int v225;
  _DWORD *v226;
  int v227;
  unint64_t v228;
  int v229;
  _DWORD *v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  _DWORD *v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  unint64_t v246;
  int v247;
  _DWORD *v248;
  int v249;
  unint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  unint64_t v255;
  unsigned int v256;
  char v257;
  _DWORD *v258;
  char v259;
  char v260;
  _DWORD *v261;
  char v262;
  unint64_t v263;
  _DWORD *v264;
  int v265;
  int v266;
  unint64_t v267;
  _DWORD *v268;
  int v269;
  unint64_t v270;
  unint64_t v271;
  _DWORD *v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  int v276;
  _DWORD *v277;
  int v278;
  unint64_t v279;
  int v280;
  _DWORD *v281;
  int v282;
  unsigned int v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  unint64_t v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  int v293;
  _DWORD *v294;
  int v295;
  unint64_t v296;
  int v297;
  _DWORD *v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  uint64_t v303;
  unint64_t v304;
  int v305;
  _DWORD *v306;
  int v307;
  unint64_t v308;
  int v309;
  _DWORD *v310;
  int v311;
  unint64_t v312;
  FILE *v313;
  int v314;
  size_t v315;
  size_t v316;
  size_t v317;
  unint64_t v318;
  char *v319;
  unint64_t *v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t *v323;
  unsigned __int8 *v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  int v327;
  int v328;
  uint64_t v329;
  size_t v330;
  uint64_t v331;
  unint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned __int8 **v336;
  unsigned __int8 *v337;
  unint64_t v338;
  int v339;
  _DWORD *v340;
  int v341;
  unint64_t v342;
  unsigned int v343;
  _DWORD *v344;
  unint64_t v345;
  int v346;
  _DWORD *v347;
  int v348;
  unint64_t v349;
  _DWORD *v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  uint64_t v354;
  unint64_t v355;
  int v356;
  _DWORD *v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  _DWORD *v362;
  char v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  unint64_t v368;
  int v369;
  _DWORD *v370;
  int v371;
  unint64_t v372;
  int v373;
  _DWORD *v374;
  int v375;
  unint64_t v376;
  int v377;
  _DWORD *v378;
  int v379;
  unint64_t v380;
  int v381;
  _DWORD *v382;
  int v383;
  unint64_t v384;
  _DWORD *v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  uint64_t v389;
  unint64_t v390;
  int v391;
  _DWORD *v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  int v396;
  _DWORD *v397;
  char v398;
  int v399;
  int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  unint64_t v405;
  int v406;
  _DWORD *v407;
  int v408;
  unint64_t v409;
  int v410;
  _DWORD *v411;
  int v412;
  unint64_t v413;
  int v414;
  _DWORD *v415;
  int v416;
  unint64_t v417;
  char v418;
  _DWORD *v419;
  int v420;
  int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  uint64_t v425;
  unint64_t v426;
  int v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  unint64_t v432;
  int v433;
  _DWORD *v434;
  int v435;
  int v436;
  int v437;
  unsigned int v438;
  unsigned int v439;
  unint64_t v440;
  int v441;
  _DWORD *v442;
  int v443;
  unint64_t v444;
  int v445;
  _DWORD *v446;
  int v447;
  unint64_t v448;
  int v449;
  _DWORD *v450;
  int v451;
  unint64_t v452;
  int v453;
  _DWORD *v454;
  int v455;
  unint64_t v456;
  int v457;
  _DWORD *v458;
  int v459;
  unint64_t v460;
  int v461;
  _DWORD *v462;
  int v463;
  unint64_t v464;
  char v465;
  _DWORD *v466;
  int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  uint64_t v472;
  unint64_t v473;
  int v474;
  _DWORD *v475;
  int v476;
  unsigned int v477;
  unsigned int v478;
  int v479;
  _DWORD *v480;
  char v481;
  unint64_t v482;
  int v483;
  _DWORD *v484;
  int v485;
  unint64_t v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  int v500;
  _DWORD *v501;
  int v502;
  unint64_t v503;
  char v504;
  _DWORD *v505;
  int v506;
  int v507;
  unint64_t v508;
  int v509;
  _DWORD *v510;
  int v511;
  unint64_t v512;
  char v513;
  int v514;
  int v515;
  unsigned int v516;
  unsigned int v517;
  uint64_t v518;
  unint64_t v519;
  int v520;
  _DWORD *v521;
  int v522;
  int v523;
  int v524;
  unsigned int v525;
  unsigned int v526;
  unint64_t v527;
  unint64_t v528;
  int v529;
  _DWORD *v530;
  int v531;
  unint64_t v532;
  int v533;
  _DWORD *v534;
  int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  uint64_t v539;
  unint64_t v540;
  int v541;
  _DWORD *v542;
  int v543;
  unint64_t v544;
  int v545;
  _DWORD *v546;
  int v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *p_shared_owners;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  uint64_t j;
  const char *v559;
  size_t v560;
  void *v561;
  CFDataRef v562;
  const void *v564;
  FILE *v565;
  uint64_t v566;
  unsigned int v567;
  _DWORD *v568;
  unsigned int v569;
  _DWORD *v570;
  int v571;
  unint64_t v572;
  unsigned int v573;
  _DWORD *v574;
  unsigned int v575;
  int v576;
  char v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  const float *v584;
  uint32x4_t v585;
  int32x4_t v586;
  int8x16_t v587;
  int v588;
  int8x16_t v589;
  int32x4_t v590;
  int32x4_t v591;
  int8x8_t v592;
  unsigned int v593;
  uint64_t v594;
  unsigned __int8 *v595;
  _DWORD *v596;
  int v597;
  _DWORD *v598;
  char v599;
  unint64_t v600;
  int v601;
  _DWORD *v602;
  int v603;
  unint64_t v604;
  int v605;
  _DWORD *v606;
  int v607;
  unint64_t v608;
  int v609;
  _DWORD *v610;
  char v611;
  unint64_t v612;
  unsigned int v613;
  _DWORD *v614;
  unint64_t v615;
  int v616;
  _DWORD *v617;
  int v618;
  unint64_t v619;
  unsigned int v620;
  _DWORD *v621;
  unint64_t v622;
  int v623;
  _DWORD *v624;
  int v625;
  unint64_t v626;
  int v627;
  _DWORD *v628;
  int v629;
  unint64_t v630;
  int v631;
  _DWORD *v632;
  int v633;
  unint64_t v634;
  int v635;
  _DWORD *v636;
  int v637;
  unint64_t v638;
  int v639;
  _DWORD *v640;
  int v641;
  unint64_t v642;
  int v643;
  _DWORD *v644;
  int v645;
  unint64_t v646;
  unsigned int v647;
  _DWORD *v648;
  unsigned int v649;
  _DWORD *v650;
  unint64_t v651;
  int v652;
  _DWORD *v653;
  int v654;
  unint64_t v655;
  int v656;
  _DWORD *v657;
  int v658;
  unint64_t v659;
  int v660;
  _DWORD *v661;
  int v662;
  unint64_t v663;
  int v664;
  _DWORD *v665;
  int v666;
  int v667;
  _DWORD *v668;
  char v669;
  uint64_t v670;
  unint64_t v671;
  unsigned int v672;
  _DWORD *v673;
  unint64_t v674;
  _DWORD *v675;
  unint64_t v676;
  _DWORD *v677;
  uint64_t v678;
  int v679;
  unsigned __int8 *v680;
  unint64_t *v681;
  int v682;
  uint64_t v683;
  _DWORD *v684;
  uint64_t v685;
  int v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  unsigned __int8 v692;
  int v693;
  int v694;
  size_t v695;
  CFDataRef *v696;
  __int16 v697;
  unsigned __int8 v698;
  char v699;
  char v700;
  size_t v701;
  size_t v702;
  size_t v703;
  uint64_t v704;
  uint64_t v705;
  char v706;
  _BYTE v707[11];
  char v708;
  unsigned __int8 v709;
  void *__p[2];
  size_t __n[2];
  _BYTE v712[5];
  _BYTE v713[32];
  _BYTE v714[32];
  _WORD v715[8];
  char v716;
  _WORD v717[8];
  char v718;
  _WORD v719[8];
  char v720;
  unint64_t *v721;
  size_t *v722;
  unint64_t *v723;
  unint64_t *v724;
  unint64_t *v725;
  unsigned __int8 *v726;
  unsigned __int8 *v727;
  unsigned __int8 *v728;
  unsigned __int8 *v729;
  unsigned __int8 *v730;
  _BYTE __dst[400];
  _BYTE v732[3];
  char v733;
  char v734[3];
  _BYTE v735[5];
  _BYTE __ptr[3];
  char v737;
  _QWORD v738[4];
  float *v739;
  float *v740;
  uint64_t v741;
  uint64_t v742;
  _DWORD *v743;
  _DWORD *v744;
  uint64_t v745;
  char v746;
  std::__shared_weak_count *v747;
  uint64_t v748;
  std::__shared_weak_count *v749;
  std::__shared_weak_count *v750;
  __int128 v751;
  __int128 v752;
  _DWORD *v753;
  _DWORD *v754;
  uint64_t v755;
  char v756;
  uint64_t v757;

  v757 = *MEMORY[0x1E0C80C00];
  v4 = *(const char **)(a1 + 680);
  if (v4)
    v5 = strnlen(v4, 0x3E9uLL);
  else
    v5 = 0;
  v702 = 0;
  v703 = 0;
  v701 = 0;
  v727 = v735;
  v728 = (unsigned __int8 *)&v733;
  v6 = __dst;
  v729 = __dst;
  v730 = 0;
  v721 = &v703;
  v722 = &v702;
  v723 = &v701;
  v724 = v738;
  v725 = 0;
  v726 = (unsigned __int8 *)&v737;
  v7 = 0x1ED1AC000uLL;
  if (*(_BYTE *)(a1 + 780))
  {
    v752 = 0u;
    v751 = 0u;
    v704 = 32;
    sub_1C9818FAC(a1 + 784, (uint64_t)&v751, &v704);
    v8 = off_1ED1ACCC8(&v739) - 3;
    v738[0] = v8;
    memcpy(__dst, (char *)&v739 + 3, v8);
    v6 = &__dst[v8];
    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (*(_BYTE *)(a1 + 812))
  {
    DWORD2(v751) = 0;
    *(_QWORD *)&v751 = 0;
    v704 = 12;
    sub_1C9818E58(a1 + 816, (uint64_t)&v751, &v704);
    v10 = off_1ED1ACCC8(&v739) - 3;
    v738[v9] = v10;
    memcpy(v6, (char *)&v739 + 3, v10);
    v6 += v10;
    v8 += v10;
    ++v9;
  }
  if (*(_BYTE *)(a1 + 824))
  {
    v751 = 0uLL;
    v740 = 0;
    v739 = 0;
    v741 = 0;
    v743 = 0;
    v745 = 0;
    v744 = 0;
    if (*(_DWORD *)(a1 + 832))
    {
      if (*(unsigned __int16 *)(a1 + 836) <= 0xC350u && *(unsigned __int16 *)(a1 + 838) <= 0xC350u)
      {
        LOWORD(v751) = 334;
        BYTE2(v751) = -108;
        if (!sub_1C971B944((uint64_t)&v739, (unsigned int *)&v751 + 1, 12))
        {
          v566 = SHIDWORD(v745);
          v567 = (*(_DWORD *)(a1 + 832) << -BYTE4(v745)) | v745;
          v568 = v743;
          *v743 = bswap32(v567);
          v569 = v567 << ((v566 + 32) & 0xF8);
          v570 = (_DWORD *)((char *)v568 + ((unint64_t)(v566 + 32) >> 3));
          v571 = v566 & 7;
          v572 = (unint64_t)v744;
          if (v570 >= v744)
          {
            v746 = 1;
            v570 = v744;
          }
          v573 = (*(unsigned __int16 *)(a1 + 836) << (16 - v571)) | v569;
          *v570 = bswap32(v573);
          v574 = (_DWORD *)((char *)v570 + 2);
          v575 = v573 << 16;
          if ((unint64_t)v574 >= v572)
          {
            v746 = 1;
            v574 = (_DWORD *)v572;
          }
          v576 = *(unsigned __int16 *)(a1 + 838) << (16 - v571);
          *v574 = bswap32(v576 | v575);
          LODWORD(v745) = v576 << 16;
          v743 = (_DWORD *)((char *)v574 + 2);
          HIDWORD(v745) = v571;
          if ((unint64_t)v574 + 2 >= v572)
          {
            v746 = 1;
            v743 = (_DWORD *)v572;
          }
          sub_1C9750F5C((uint64_t)&v739);
          BYTE3(v751) = (_BYTE)v743 - v742 - 1;
        }
      }
    }
    if (v739)
      operator delete(v739);
    v11 = off_1ED1ACCC8(&v739);
    v738[v9] = v11 - 3;
    memcpy(v6, (char *)&v739 + 3, v11 - 3);
    v8 += v738[v9];
    LOBYTE(v9) = v9 + 1;
  }
  v697 = 257;
  v698 = 1;
  v699 = v9;
  v700 = 0;
  v12 = *(FILE **)(a1 + 240);
  if (v12)
  {
    v13 = *(const char **)(a1 + 680);
    if (v13)
    {
      if (strncmp(*(const char **)(a1 + 680), "FLS;", 4uLL))
      {
        fwrite("FLS;", 1uLL, 4uLL, v12);
        v13 = *(const char **)(a1 + 680);
      }
      v14 = strnlen(v13, 0x63uLL);
      fwrite(v13, 1uLL, v14 + 1, v12);
    }
  }
  v740 = 0;
  v739 = 0;
  v741 = 0;
  v743 = 0;
  v745 = 0;
  v744 = 0;
  v15 = sub_1C9750CF0((uint64_t)&v739, 0x400u);
  if (v15)
  {
    v16 = v15;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 9736);
    *v743 = bswap32(v745);
    v18 = SHIDWORD(v745) + 1;
    v19 = (_DWORD)v745 << (v18 & 0xF8);
    v20 = (_DWORD *)((char *)v743 + (v18 >> 3));
    v743 = v20;
    v21 = v18 & 7;
    HIDWORD(v745) = v21;
    if (v20 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v20 = v744;
    }
    LODWORD(v745) = (32 << (26 - v21)) | v19;
    *v20 = bswap32(v745);
    v22 = SHIDWORD(v745) + 6;
    v23 = (_DWORD)v745 << (v22 & 0xF8);
    LODWORD(v745) = v23;
    v24 = (_DWORD *)((char *)v743 + (v22 >> 3));
    v743 = v24;
    HIDWORD(v745) = v22 & 7;
    if (v24 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v24 = v744;
    }
    *v24 = bswap32(v23);
    v25 = SHIDWORD(v745) + 6;
    v26 = (_DWORD)v745 << (v25 & 0xF8);
    v27 = (_DWORD *)((char *)v743 + (v25 >> 3));
    v743 = v27;
    v28 = v25 & 7;
    HIDWORD(v745) = v28;
    if (v27 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v27 = v744;
    }
    LODWORD(v745) = (1 << (29 - v28)) | v26;
    *v27 = bswap32(v745);
    v29 = SHIDWORD(v745) + 3;
    v30 = (_DWORD)v745 << (v29 & 0xF8);
    v31 = (_DWORD *)((char *)v743 + (v29 >> 3));
    v743 = v31;
    v32 = v29 & 7;
    HIDWORD(v745) = v32;
    if (v31 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v31 = v744;
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 196) << (28 - v32)) | v30;
    *v31 = bswap32(v745);
    v33 = SHIDWORD(v745) + 4;
    v34 = (_DWORD)v745 << (v33 & 0xF8);
    v35 = (_DWORD *)((char *)v743 + (v33 >> 3));
    v743 = v35;
    v36 = v33 & 7;
    HIDWORD(v745) = v36;
    if (v35 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v35 = v744;
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 197) << (v36 ^ 0x1F)) | v34;
    *v35 = bswap32(v745);
    v37 = SHIDWORD(v745) + 1;
    v38 = (_DWORD)v745 << (v37 & 0xF8);
    v39 = (_DWORD *)((char *)v743 + (v37 >> 3));
    v743 = v39;
    v40 = v37 & 7;
    HIDWORD(v745) = v40;
    if (v39 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v39 = v744;
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 198) << (v40 ^ 0x1F)) | v38;
    *v39 = bswap32(v745);
    v41 = SHIDWORD(v745) + 1;
    v42 = (_DWORD)v745 << (v41 & 0xF8);
    v43 = (_DWORD *)((char *)v743 + (v41 >> 3));
    v743 = v43;
    v44 = v41 & 7;
    HIDWORD(v745) = v44;
    if (v43 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v43 = v744;
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 199) << (26 - v44)) | v42;
    *v43 = bswap32(v745);
    v45 = SHIDWORD(v745) + 6;
    v46 = (_DWORD)v745 << (v45 & 0xF8);
    v47 = (_DWORD *)((char *)v743 + (v45 >> 3));
    v743 = v47;
    v48 = v45 & 7;
    HIDWORD(v745) = v48;
    if (v47 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v47 = v744;
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 200) << (29 - v48)) | v46;
    *v47 = bswap32(v745);
    v49 = SHIDWORD(v745) + 3;
    v50 = (_DWORD)v745 << (v49 & 0xF8);
    v51 = (_DWORD *)((char *)v743 + (v49 >> 3));
    v743 = v51;
    v52 = v49 & 7;
    HIDWORD(v745) = v52;
    if (v51 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v51 = v744;
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 201) << (v52 ^ 0x1F)) | v50;
    *v51 = bswap32(v745);
    v53 = SHIDWORD(v745) + 1;
    v54 = (_DWORD)v745 << (v53 & 0xF8);
    v55 = (_DWORD *)((char *)v743 + (v53 >> 3));
    v743 = v55;
    v56 = v53 & 7;
    HIDWORD(v745) = v56;
    if (v55 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v55 = v744;
    }
    LODWORD(v745) = (0xFFFF << (16 - v56)) | v54;
    *v55 = bswap32(v745);
    LODWORD(v745) = (_DWORD)v745 << ((BYTE4(v745) + 16) & 0xF8);
    v743 = (_DWORD *)((char *)v743 + ((unint64_t)(SHIDWORD(v745) + 16) >> 3));
    HIDWORD(v745) = BYTE4(v745) & 7;
    if (v743 >= v744)
    {
      v746 = 1;
      v743 = v744;
    }
    sub_1C979F084((unsigned __int8 *)v17, 1, *(unsigned __int8 *)(v17 + 200), (uint64_t)&v739);
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 202) << ~BYTE4(v745)) | v745;
    *v743 = bswap32(v745);
    v57 = SHIDWORD(v745) + 1;
    v58 = (_DWORD)v745 << (v57 & 0xF8);
    LODWORD(v745) = v58;
    v59 = (_DWORD *)((char *)v743 + (v57 >> 3));
    v743 = v59;
    LOBYTE(v60) = v57 & 7;
    HIDWORD(v745) = v57 & 7;
    if (v59 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v59 = v744;
    }
    if (*(_BYTE *)(v17 + 202))
      v61 = 0;
    else
      v61 = *(_BYTE *)(v17 + 200);
    v62 = v61;
    do
    {
      v63 = *(unsigned __int8 *)(v17 + v62 + 203) + 1;
      v64 = __clz(v63);
      v65 = 0x80000000 >> v64;
      v66 = (2 * v64) ^ 0x3F;
      LODWORD(v745) = (((v63 - v65) | v65) << (-(char)v60 - v66)) | v58;
      *v59 = bswap32(v745);
      v67 = SHIDWORD(v745) + v66;
      v68 = (_DWORD)v745 << (v67 & 0xF8);
      LODWORD(v745) = v68;
      v69 = (_DWORD *)((char *)v743 + (v67 >> 3));
      v743 = v69;
      v70 = v67 & 7;
      HIDWORD(v745) = v70;
      if (v69 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v69 = v744;
      }
      v71 = *(unsigned __int8 *)(v17 + v62 + 210) + 1;
      v72 = __clz(v71);
      v73 = (v71 - (0x80000000 >> v72)) | (0x80000000 >> v72);
      v74 = (2 * v72) ^ 0x3F;
      LODWORD(v745) = (v73 << (-(char)v74 - v70)) | v68;
      *v69 = bswap32(v745);
      v75 = SHIDWORD(v745) + v74;
      v76 = (_DWORD)v745 << (v75 & 0xF8);
      LODWORD(v745) = v76;
      v77 = (_DWORD *)((char *)v743 + (v75 >> 3));
      v743 = v77;
      v78 = v75 & 7;
      HIDWORD(v745) = v78;
      if (v77 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v77 = v744;
      }
      v79 = *(_DWORD *)(v17 + 220 + 4 * v62) + 1;
      v80 = __clz(v79);
      v81 = (v79 - (0x80000000 >> v80)) | (0x80000000 >> v80);
      v82 = 63 - 2 * v80;
      LODWORD(v745) = (v81 << (-(char)v82 - v78)) | v76;
      *v77 = bswap32(v745);
      v83 = SHIDWORD(v745) + v82;
      v58 = (_DWORD)v745 << (v83 & 0xF8);
      LODWORD(v745) = v58;
      v59 = (_DWORD *)((char *)v743 + (v83 >> 3));
      v743 = v59;
      v60 = v83 & 7;
      HIDWORD(v745) = v60;
      if (v59 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v59 = v744;
      }
      v84 = v62++ >= *(unsigned __int8 *)(v17 + 200);
    }
    while (!v84);
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 248) << (26 - v60)) | v58;
    *v59 = bswap32(v745);
    v85 = SHIDWORD(v745) + 6;
    v86 = (_DWORD)v745 << (v85 & 0xF8);
    v87 = (_DWORD *)((char *)v743 + (v85 >> 3));
    v743 = v87;
    v88 = v85 & 7;
    HIDWORD(v745) = v88;
    if (v87 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v87 = v744;
    }
    v89 = *(unsigned __int16 *)(v17 + 250) + 1;
    v90 = __clz(v89);
    v91 = 0x80000000 >> v90;
    v92 = (2 * v90) ^ 0x3F;
    LODWORD(v745) = (((v89 - v91) | v91) << (-(char)v88 - v92)) | v86;
    *v87 = bswap32(v745);
    v93 = SHIDWORD(v745) + v92;
    v94 = (_DWORD)v745 << (v93 & 0xF8);
    v95 = (_DWORD *)((char *)v743 + (v93 >> 3));
    v743 = v95;
    v96 = v93 & 7;
    HIDWORD(v745) = v96;
    if (v95 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v95 = v744;
    }
    if (*(_WORD *)(v17 + 250))
    {
      v97 = 1;
      do
      {
        v98 = -1;
        do
        {
          LODWORD(v745) = (((*(_QWORD *)(*(_QWORD *)(v17 + 256) + 8 * v97) >> ++v98) & 1) << ~(_BYTE)v96) | v94;
          *v95 = bswap32(v745);
          v99 = SHIDWORD(v745) + 1;
          v94 = (_DWORD)v745 << (v99 & 0xF8);
          LODWORD(v745) = v94;
          v95 = (_DWORD *)((char *)v743 + (v99 >> 3));
          v743 = v95;
          v96 = v99 & 7;
          HIDWORD(v745) = v96;
          if (v95 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v95 = v744;
          }
        }
        while (v98 < *(unsigned __int8 *)(v17 + 248));
        v84 = v97++ >= *(unsigned __int16 *)(v17 + 250);
      }
      while (!v84);
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 280) << (v96 ^ 0x1F)) | v94;
    *v95 = bswap32(v745);
    v100 = SHIDWORD(v745) + 1;
    v101 = v100 & 0xF8;
    v102 = (_DWORD *)((char *)v743 + (v100 >> 3));
    v743 = v102;
    v103 = v100 & 7;
    HIDWORD(v745) = v103;
    if (v102 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v102 = v744;
    }
    v104 = (_DWORD)v745 << v101;
    if (*(_BYTE *)(v17 + 280))
    {
      v105 = *(_DWORD *)(v17 + 284);
      LODWORD(v745) = (HIWORD(v105) << (16 - v103)) | v104;
      *v102 = bswap32(v745);
      v106 = (_DWORD)v745 << ((BYTE4(v745) + 16) & 0xF8);
      v107 = (_DWORD *)((char *)v743 + ((unint64_t)(SHIDWORD(v745) + 16) >> 3));
      v743 = v107;
      v108 = BYTE4(v745) & 7;
      HIDWORD(v745) = BYTE4(v745) & 7;
      if (v107 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v107 = v744;
      }
      LODWORD(v745) = ((unsigned __int16)v105 << (16 - v108)) | v106;
      *v107 = bswap32(v745);
      v109 = (_DWORD)v745 << ((BYTE4(v745) + 16) & 0xF8);
      v110 = (_DWORD *)((char *)v743 + ((unint64_t)(SHIDWORD(v745) + 16) >> 3));
      v743 = v110;
      v111 = BYTE4(v745) & 7;
      HIDWORD(v745) = BYTE4(v745) & 7;
      if (v110 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v110 = v744;
      }
      v112 = *(_DWORD *)(v17 + 288);
      LODWORD(v745) = (HIWORD(v112) << (16 - v111)) | v109;
      *v110 = bswap32(v745);
      v113 = (_DWORD)v745 << ((BYTE4(v745) + 16) & 0xF8);
      v114 = (_DWORD *)((char *)v743 + ((unint64_t)(SHIDWORD(v745) + 16) >> 3));
      v743 = v114;
      v115 = BYTE4(v745) & 7;
      HIDWORD(v745) = BYTE4(v745) & 7;
      if (v114 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v114 = v744;
      }
      LODWORD(v745) = ((unsigned __int16)v112 << (16 - v115)) | v113;
      *v114 = bswap32(v745);
      v116 = (_DWORD)v745 << ((BYTE4(v745) + 16) & 0xF8);
      v117 = (_DWORD *)((char *)v743 + ((unint64_t)(SHIDWORD(v745) + 16) >> 3));
      v743 = v117;
      v118 = BYTE4(v745) & 7;
      HIDWORD(v745) = BYTE4(v745) & 7;
      if (v117 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v117 = v744;
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 292) << (v118 ^ 0x1F)) | v116;
      *v117 = bswap32(v745);
      v119 = SHIDWORD(v745) + 1;
      v120 = v119 & 0xF8;
      v121 = (_DWORD *)((char *)v743 + (v119 >> 3));
      v743 = v121;
      v122 = v119 & 7;
      HIDWORD(v745) = v122;
      if (v121 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v121 = v744;
      }
      v123 = (_DWORD)v745 << v120;
      if (*(_BYTE *)(v17 + 292))
      {
        v124 = *(_DWORD *)(v17 + 296) + 1;
        v125 = __clz(v124);
        v126 = (v124 - (0x80000000 >> v125)) | (0x80000000 >> v125);
        v127 = 63 - 2 * v125;
        LODWORD(v745) = (v126 << (-(char)v122 - v127)) | v123;
        *v121 = bswap32(v745);
        v128 = SHIDWORD(v745) + v127;
        v123 = (_DWORD)v745 << (v128 & 0xF8);
        v121 = (_DWORD *)((char *)v743 + (v128 >> 3));
        v743 = v121;
        v122 = v128 & 7;
        HIDWORD(v745) = v122;
        if (v121 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v121 = v744;
        }
      }
      v129 = *(unsigned __int16 *)(v17 + 300) + 1;
      v130 = __clz(v129);
      v131 = 0x80000000 >> v130;
      v132 = (2 * v130) ^ 0x3F;
      LODWORD(v745) = (((v129 - v131) | v131) << (-(char)v122 - v132)) | v123;
      *v121 = bswap32(v745);
      v133 = SHIDWORD(v745) + v132;
      v104 = (_DWORD)v745 << (v133 & 0xF8);
      v102 = (_DWORD *)((char *)v743 + (v133 >> 3));
      v743 = v102;
      v103 = v133 & 7;
      HIDWORD(v745) = v103;
      if (v102 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v102 = v744;
      }
    }
    LODWORD(v745) = (*(unsigned __int8 *)(v17 + 302) << (v103 ^ 0x1F)) | v104;
    *v102 = bswap32(v745);
    v134 = SHIDWORD(v745) + 1;
    v135 = (_DWORD)v745 << (v134 & 0xF8);
    LODWORD(v745) = v135;
    v136 = (_DWORD *)((char *)v743 + (v134 >> 3));
    v743 = v136;
    v137 = v134 & 7;
    HIDWORD(v745) = v137;
    if (v136 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v136 = v744;
    }
    if (*(_BYTE *)(v17 + 302))
    {
      while (v137)
      {
        LODWORD(v745) = (0x80000000 >> v137) | v135;
        *v136 = bswap32(v745);
        v138 = SHIDWORD(v745) + 1;
        v135 = (_DWORD)v745 << (v138 & 0xF8);
        LODWORD(v745) = v135;
        v136 = (_DWORD *)((char *)v743 + (v138 >> 3));
        v743 = v136;
        v137 = v138 & 7;
        HIDWORD(v745) = v137;
        if (v136 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v136 = v744;
        }
      }
      v139 = *(_BYTE *)(v17 + 199);
      if (v139)
      {
        v139 = *(_BYTE *)(v17 + 197);
        if (v139)
        {
          sub_1C979F084((unsigned __int8 *)v17, 0, *(unsigned __int8 *)(v17 + 200), (uint64_t)&v739);
          v139 = BYTE4(v745);
          v135 = v745;
          v136 = v743;
        }
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 304) << ~v139) | v135;
      *v136 = bswap32(v745);
      v140 = SHIDWORD(v745) + 1;
      v141 = (_DWORD)v745 << (v140 & 0xF8);
      v142 = (_DWORD *)((char *)v743 + (v140 >> 3));
      v743 = v142;
      LOBYTE(v143) = v140 & 7;
      HIDWORD(v745) = v140 & 7;
      if (v142 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v142 = v744;
      }
      LODWORD(v144) = 0;
      for (i = 0; i != 16; ++i)
      {
        v146 = (*(unsigned __int16 *)(v17 + 306) >> i) & 1;
        LODWORD(v745) = (v146 << (v143 ^ 0x1F)) | v141;
        *v142 = bswap32(v745);
        v147 = SHIDWORD(v745) + 1;
        v141 = (_DWORD)v745 << (v147 & 0xF8);
        LODWORD(v745) = v141;
        v142 = (_DWORD *)((char *)v743 + (v147 >> 3));
        v743 = v142;
        v143 = v147 & 7;
        HIDWORD(v745) = v143;
        if (v142 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v142 = v744;
        }
        v144 = (v146 + v144);
      }
      if (v144 > *(unsigned __int8 *)(v17 + 304))
      {
        v148 = 0;
        do
        {
          LODWORD(v745) = (*(unsigned __int8 *)(v17 + 308 + v148) << (29 - v143)) | v141;
          *v142 = bswap32(v745);
          v149 = SHIDWORD(v745) + 3;
          v141 = (_DWORD)v745 << (v149 & 0xF8);
          LODWORD(v745) = v141;
          v142 = (_DWORD *)((char *)v743 + (v149 >> 3));
          v743 = v142;
          v143 = v149 & 7;
          HIDWORD(v745) = v143;
          if (v142 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v142 = v744;
          }
          ++v148;
        }
        while (v148 < (uint64_t)((int)v144 - (unint64_t)*(unsigned __int8 *)(v17 + 304)));
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 356) << (v143 ^ 0x1F)) | v141;
      *v142 = bswap32(v745);
      v150 = SHIDWORD(v745) + 1;
      v151 = (_DWORD)v745 << (v150 & 0xF8);
      LODWORD(v745) = v151;
      v152 = (_DWORD *)((char *)v743 + (v150 >> 3));
      v743 = v152;
      LOBYTE(v153) = v150 & 7;
      HIDWORD(v745) = v150 & 7;
      if (v152 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v152 = v744;
      }
      if (*(_BYTE *)(v17 + 199))
      {
        v154 = 0;
        v155 = 1;
        do
        {
          if (*(_BYTE *)(v17 + 356))
          {
            LODWORD(v745) = (*(unsigned __int8 *)(v17 + v155 + 357) << (26 - v153)) | v151;
            *v152 = bswap32(v745);
            v156 = SHIDWORD(v745) + 6;
            v151 = (_DWORD)v745 << (v156 & 0xF8);
            LODWORD(v745) = v151;
            v152 = (_DWORD *)((char *)v743 + (v156 >> 3));
            v743 = v152;
            v153 = v156 & 7;
            HIDWORD(v745) = v153;
            if (v152 >= v744)
            {
              v746 = 1;
              v743 = v744;
              v152 = v744;
            }
          }
          if (*(_BYTE *)(v17 + 304))
            v157 = 1;
          else
            v157 = (_DWORD)v144 == 0;
          if (!v157)
          {
            v158 = v144;
            v159 = v17 + 340;
            do
            {
              v160 = *(unsigned __int8 *)(v159 - 32) + 1;
              LODWORD(v745) = (*(unsigned __int8 *)(v159 + v154) << (-(char)v153 - v160)) | v151;
              *v152 = bswap32(v745);
              v161 = SHIDWORD(v745) + v160;
              v151 = (_DWORD)v745 << (v161 & 0xF8);
              LODWORD(v745) = v151;
              v152 = (_DWORD *)((char *)v743 + (v161 >> 3));
              v743 = v152;
              v153 = v161 & 7;
              HIDWORD(v745) = v153;
              if (v152 >= v744)
              {
                v746 = 1;
                v743 = v744;
                v152 = v744;
              }
              ++v159;
              --v158;
            }
            while (v158);
          }
          v154 += 16;
          v84 = v155++ >= *(unsigned __int8 *)(v17 + 199);
        }
        while (!v84);
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 359) << (28 - v153)) | v151;
      *v152 = bswap32(v745);
      v162 = SHIDWORD(v745) + 4;
      v163 = (_DWORD)v745 << (v162 & 0xF8);
      LODWORD(v745) = v163;
      v164 = (_DWORD *)((char *)v743 + (v162 >> 3));
      v743 = v164;
      v165 = v162 & 7;
      HIDWORD(v745) = v165;
      if (v164 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v164 = v744;
      }
      if (*(_BYTE *)(v17 + 199))
      {
        v166 = v17 + 362;
        v167 = 1;
        do
        {
          v168 = 0;
          do
          {
            LODWORD(v745) = (*(unsigned __int8 *)(v166 + v168) << ~(_BYTE)v165) | v163;
            *v164 = bswap32(v745);
            v169 = SHIDWORD(v745) + 1;
            v163 = (_DWORD)v745 << (v169 & 0xF8);
            LODWORD(v745) = v163;
            v164 = (_DWORD *)((char *)v743 + (v169 >> 3));
            v743 = v164;
            v165 = v169 & 7;
            HIDWORD(v745) = v165;
            if (v164 >= v744)
            {
              v746 = 1;
              v743 = v744;
              v164 = v744;
            }
            ++v168;
          }
          while (v167 != v168);
          v170 = *(unsigned __int8 *)(v17 + 199);
          v166 += 2;
          v84 = v167++ >= v170;
        }
        while (!v84);
      }
      else
      {
        LODWORD(v170) = 0;
      }
      v171 = 0;
      v715[0] = 0;
      v172 = v17 + 360;
      v751 = 0uLL;
      v173 = v170;
      do
      {
        v174 = 0;
        v175 = &v751;
        do
        {
          v176 = (_DWORD *)&v751 + 2 * v171 + v174;
          *v176 = *(unsigned __int8 *)(v17 + 2 * v171 + v174 + 360);
          if (v171)
          {
            v177 = 0;
            v178 = v175;
            do
            {
              if (*(_BYTE *)(v172 + v177) && *(_DWORD *)v178)
                *v176 = 1;
              ++v177;
              v178 = (__int128 *)((char *)v178 + 8);
            }
            while (v171 != v177);
          }
          v175 = (__int128 *)((char *)v175 + 4);
          v157 = v174++ == v173;
        }
        while (!v157);
        v172 += 2;
        v157 = v171++ == v173;
      }
      while (!v157);
      v179 = 0;
      v180 = 0;
      v181 = 0;
      LODWORD(v704) = 0;
      v719[0] = 0;
      v182 = (unsigned __int8 *)(v17 + 360);
      v183 = &v751;
      do
      {
        v184 = *(unsigned __int8 *)(v17 + v179 + 357);
        v185 = (int *)v183;
        v186 = v182;
        v187 = v173 + 1;
        do
        {
          if (*v186++)
            ++v181;
          v189 = *v185;
          v185 += 2;
          if (v189)
            *((_BYTE *)&v704 + 2 * v184 + v180++) = 0;
          --v187;
        }
        while (v187);
        *((_BYTE *)v715 + v184) = v181;
        *((_BYTE *)v719 + v184) = v180;
        v182 += 2;
        v183 = (__int128 *)((char *)v183 + 4);
        v157 = v179++ == v173;
      }
      while (!v157);
      v190 = 0;
      v191 = 0;
      v192 = 0;
      v717[0] = 0;
      v193 = 1;
      do
      {
        v194 = *(unsigned __int8 *)(v17 + v190 + 357);
        if (!*((_BYTE *)v715 + v194))
        {
          v195 = *((unsigned __int8 *)v719 + v194);
          if (*((_BYTE *)v719 + v194))
          {
            v196 = (char *)&v704 + 2 * v194;
            do
            {
              v197 = *v196++;
              v198 = 1 << v197;
              v199 = (v192 & v198) == 0;
              if ((v192 & v198) != 0)
                v198 = 0;
              v192 |= v198;
              if (v199)
                ++v193;
              --v195;
            }
            while (v195);
          }
          v200 = (int)v191++;
          *((_BYTE *)v717 + v200) = v193;
        }
        v157 = v190++ == v173;
      }
      while (!v157);
      if (v191 > 1)
      {
        v201 = *(unsigned __int8 *)(v17 + 364) + 1;
        v202 = __clz(v201);
        v203 = (v201 - (0x80000000 >> v202)) | (0x80000000 >> v202);
        v204 = (2 * v202) ^ 0x3F;
        LODWORD(v745) = (v203 << (-(char)v165 - v204)) | v163;
        *v164 = bswap32(v745);
        v205 = SHIDWORD(v745) + v204;
        LODWORD(v745) = (_DWORD)v745 << (v205 & 0xF8);
        v743 = (_DWORD *)((char *)v743 + (v205 >> 3));
        HIDWORD(v745) = v205 & 7;
        if (v743 >= v744)
        {
          v746 = 1;
          v743 = v744;
        }
      }
      v206 = *(unsigned __int8 *)(v17 + 364);
      if (*(_BYTE *)(v17 + 364))
      {
        v207 = 0;
        v208 = (unsigned __int8 *)(v17 + 366);
        do
        {
          if (v191 >= 2)
          {
            LOBYTE(v209) = BYTE4(v745);
            v210 = v745;
            v211 = (unsigned __int8 *)v717 + 1;
            v212 = v191 - 1;
            v213 = v208;
            v214 = v743;
            do
            {
              v215 = *v211++;
              v216 = __clz(v215 + 1) ^ 0x1F;
              if (((v215 + 1) & v215) != 0)
                v217 = v216 + 1;
              else
                v217 = v216;
              v218 = *v213++;
              LODWORD(v745) = (v218 << (-(char)v209 - v217)) | v210;
              *v214 = bswap32(v745);
              v219 = SHIDWORD(v745) + v217;
              v210 = (_DWORD)v745 << (v219 & 0xF8);
              LODWORD(v745) = v210;
              v214 = (_DWORD *)((char *)v743 + (v219 >> 3));
              v743 = v214;
              v209 = v219 & 7;
              HIDWORD(v745) = v209;
              if (v214 >= v744)
              {
                v746 = 1;
                v743 = v744;
                v214 = v744;
              }
              --v212;
            }
            while (v212);
            v206 = *(unsigned __int8 *)(v17 + 364);
          }
          ++v207;
          v208 += 2;
        }
        while (v207 < v206);
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 369) << ~BYTE4(v745)) | v745;
      *v743 = bswap32(v745);
      v220 = SHIDWORD(v745) + 1;
      v221 = (_DWORD)v745 << (v220 & 0xF8);
      v222 = (_DWORD *)((char *)v743 + (v220 >> 3));
      v743 = v222;
      v223 = v220 & 7;
      HIDWORD(v745) = v223;
      if (v222 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v222 = v744;
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 370) << (v223 ^ 0x1F)) | v221;
      *v222 = bswap32(v745);
      v224 = SHIDWORD(v745) + 1;
      v225 = (_DWORD)v745 << (v224 & 0xF8);
      v226 = (_DWORD *)((char *)v743 + (v224 >> 3));
      v743 = v226;
      v227 = v224 & 7;
      HIDWORD(v745) = v227;
      if (v226 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v226 = v744;
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 371) << (v227 ^ 0x1F)) | v225;
      *v226 = bswap32(v745);
      v228 = SHIDWORD(v745) + 1;
      v229 = (_DWORD)v745 << (v228 & 0xF8);
      v230 = (_DWORD *)((char *)v743 + (v228 >> 3));
      v743 = v230;
      v231 = v228 & 7;
      HIDWORD(v745) = v231;
      if (v230 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v230 = v744;
      }
      v232 = *(unsigned __int8 *)(v17 + 372) + 1;
      v233 = __clz(v232);
      v234 = 0x80000000 >> v233;
      v235 = (2 * v233) ^ 0x3F;
      LODWORD(v745) = (((v232 - v234) | v234) << (-(char)v231 - v235)) | v229;
      *v230 = bswap32(v745);
      v236 = SHIDWORD(v745) + v235;
      v237 = v236 & 0xF8;
      v238 = (_DWORD *)((char *)v743 + (v236 >> 3));
      v743 = v238;
      v239 = v236 & 7;
      HIDWORD(v745) = v239;
      if (v238 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v238 = v744;
      }
      v240 = (_DWORD)v745 << v237;
      v241 = *(unsigned __int16 *)(v17 + 250) + *(unsigned __int8 *)(v17 + 364) + 1;
      v689 = *(unsigned __int8 *)(v17 + 364);
      v691 = *(unsigned __int16 *)(v17 + 250);
      if (v241 > 1)
      {
        v242 = *(unsigned __int8 *)(v17 + 373) + 1;
        v243 = __clz(v242);
        v244 = (v242 - (0x80000000 >> v243)) | (0x80000000 >> v243);
        v245 = (2 * v243) ^ 0x3F;
        LODWORD(v745) = (v244 << (-(char)v245 - v239)) | v240;
        *v238 = bswap32(v745);
        v246 = SHIDWORD(v745) + v245;
        v247 = (_DWORD)v745 << (v246 & 0xF8);
        v248 = (_DWORD *)((char *)v743 + (v246 >> 3));
        v743 = v248;
        v249 = v246 & 7;
        HIDWORD(v745) = v249;
        if (v248 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v248 = v744;
        }
        LODWORD(v745) = (*(unsigned __int8 *)(v17 + 374) << (30 - v249)) | v247;
        *v248 = bswap32(v745);
        v250 = SHIDWORD(v745) + 2;
        v240 = (_DWORD)v745 << (v250 & 0xF8);
        v238 = (_DWORD *)((char *)v743 + (v250 >> 3));
        v743 = v238;
        v239 = v250 & 7;
        HIDWORD(v745) = v239;
        if (v238 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v238 = v744;
        }
      }
      v693 = *(unsigned __int8 *)(v17 + 373);
      v251 = *(unsigned __int8 *)(v17 + 375) + 1;
      v252 = __clz(v251);
      v253 = (v251 - (0x80000000 >> v252)) | (0x80000000 >> v252);
      v254 = (2 * v252) ^ 0x3F;
      LODWORD(v745) = (v253 << (-(char)v239 - v254)) | v240;
      *v238 = bswap32(v745);
      v255 = SHIDWORD(v745) + v254;
      LODWORD(v745) = (_DWORD)v745 << (v255 & 0xF8);
      v743 = (_DWORD *)((char *)v743 + (v255 >> 3));
      HIDWORD(v745) = v255 & 7;
      if (v743 >= v744)
      {
        v746 = 1;
        v743 = v744;
      }
      v256 = -1;
      do
      {
        LODWORD(v745) = (*(__int16 *)(v17 + 386) << (16 - BYTE4(v745))) | v745;
        *v743 = bswap32(v745);
        v257 = BYTE4(v745) + 16;
        v258 = (_DWORD *)((char *)v743 + ((unint64_t)(SHIDWORD(v745) + 16) >> 3));
        v743 = v258;
        v259 = BYTE4(v745) & 7;
        HIDWORD(v745) = BYTE4(v745) & 7;
        if (v258 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v258 = v744;
        }
        LODWORD(v745) = (*(__int16 *)(v17 + 388) << (16 - v259)) | ((_DWORD)v745 << (v257 & 0xF8));
        *v258 = bswap32(v745);
        v260 = BYTE4(v745) + 16;
        v261 = (_DWORD *)((char *)v743 + ((unint64_t)(SHIDWORD(v745) + 16) >> 3));
        v743 = v261;
        v262 = BYTE4(v745) & 7;
        HIDWORD(v745) = BYTE4(v745) & 7;
        if (v261 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v261 = v744;
        }
        LODWORD(v745) = (*(unsigned __int8 *)(v17 + 390) << (v262 ^ 0x1F)) | ((_DWORD)v745 << (v260 & 0xF8));
        *v261 = bswap32(v745);
        v263 = SHIDWORD(v745) + 1;
        v264 = (_DWORD *)((char *)v743 + (v263 >> 3));
        v743 = v264;
        LOBYTE(v265) = v263 & 7;
        HIDWORD(v745) = v263 & 7;
        if (v264 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v264 = v744;
        }
        v266 = (_DWORD)v745 << (v263 & 0xF8);
        if (*(_BYTE *)(v17 + 390))
        {
          LODWORD(v745) = (*(unsigned __int8 *)(v17 + 391) << (30 - v265)) | v266;
          *v264 = bswap32(v745);
          v267 = SHIDWORD(v745) + 2;
          v268 = (_DWORD *)((char *)v743 + (v267 >> 3));
          v743 = v268;
          LOBYTE(v265) = v267 & 7;
          HIDWORD(v745) = v267 & 7;
          if (v268 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v268 = v744;
          }
          v269 = (_DWORD)v745 << (v267 & 0xF8);
          if (*(_BYTE *)(v17 + 391) == 3)
          {
            LODWORD(v745) = (*(unsigned __int8 *)(v17 + 392) << (v265 ^ 0x1F)) | v269;
            *v268 = bswap32(v745);
            v270 = SHIDWORD(v745) + 1;
            v269 = (_DWORD)v745 << (v270 & 0xF8);
            v268 = (_DWORD *)((char *)v743 + (v270 >> 3));
            v743 = v268;
            v265 = v270 & 7;
            HIDWORD(v745) = v265;
            if (v268 >= v744)
            {
              v746 = 1;
              v743 = v744;
              v268 = v744;
            }
          }
          LODWORD(v745) = (*(unsigned __int8 *)(v17 + 393) << (28 - v265)) | v269;
          *v268 = bswap32(v745);
          v271 = SHIDWORD(v745) + 4;
          v272 = (_DWORD *)((char *)v743 + (v271 >> 3));
          v743 = v272;
          HIDWORD(v745) = v271 & 7;
          if (v272 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v272 = v744;
          }
          LODWORD(v745) = (*(unsigned __int8 *)(v17 + 394) << (28 - (v271 & 7))) | ((_DWORD)v745 << (v271 & 0xF8));
          *v272 = bswap32(v745);
          v273 = SHIDWORD(v745) + 4;
          v266 = (_DWORD)v745 << (v273 & 0xF8);
          v264 = (_DWORD *)((char *)v743 + (v273 >> 3));
          v743 = v264;
          v265 = v273 & 7;
          HIDWORD(v745) = v265;
          if (v264 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v264 = v744;
          }
        }
        LODWORD(v745) = (*(unsigned __int8 *)(v17 + 395) << (v265 ^ 0x1F)) | v266;
        *v264 = bswap32(v745);
        v274 = SHIDWORD(v745) + 1;
        LODWORD(v745) = (_DWORD)v745 << (v274 & 0xF8);
        v743 = (_DWORD *)((char *)v743 + (v274 >> 3));
        HIDWORD(v745) = v274 & 7;
        if (v743 >= v744)
        {
          v746 = 1;
          v743 = v744;
        }
        if (*(_BYTE *)(v17 + 395))
        {
          sub_1C9750E08((uint64_t)&v739, *(unsigned __int16 *)(v17 + 396));
          sub_1C9750E08((uint64_t)&v739, *(unsigned __int16 *)(v17 + 398));
          sub_1C9750E08((uint64_t)&v739, *(unsigned __int16 *)(v17 + 400));
          sub_1C9750E08((uint64_t)&v739, *(unsigned __int16 *)(v17 + 402));
        }
        ++v256;
      }
      while (v256 < *(unsigned __int8 *)(v17 + 375));
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 376) << ~BYTE4(v745)) | v745;
      *v743 = bswap32(v745);
      v275 = SHIDWORD(v745) + 1;
      v276 = (_DWORD)v745 << (v275 & 0xF8);
      v277 = (_DWORD *)((char *)v743 + (v275 >> 3));
      v743 = v277;
      v278 = v275 & 7;
      HIDWORD(v745) = v278;
      if (v277 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v277 = v744;
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 377) << (v278 ^ 0x1F)) | v276;
      *v277 = bswap32(v745);
      v279 = SHIDWORD(v745) + 1;
      v280 = (_DWORD)v745 << (v279 & 0xF8);
      LODWORD(v745) = v280;
      v281 = (_DWORD *)((char *)v743 + (v279 >> 3));
      v743 = v281;
      v282 = v279 & 7;
      HIDWORD(v745) = v282;
      if (v281 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v281 = v744;
      }
      v283 = *(unsigned __int8 *)(v17 + 199);
      if (*(_BYTE *)(v17 + 199))
      {
        v284 = 0;
        do
        {
          if (!*((_BYTE *)v715 + *(unsigned __int8 *)(v17 + v284 + 358)))
          {
            LODWORD(v745) = (*(unsigned __int8 *)(v17 + v284 + 379) << ~(_BYTE)v282) | v280;
            *v281 = bswap32(v745);
            v285 = SHIDWORD(v745) + 1;
            v280 = (_DWORD)v745 << (v285 & 0xF8);
            LODWORD(v745) = v280;
            v281 = (_DWORD *)((char *)v743 + (v285 >> 3));
            v743 = v281;
            v282 = v285 & 7;
            HIDWORD(v745) = v282;
            if (v281 >= v744)
            {
              v746 = 1;
              v743 = v744;
              v281 = v744;
            }
            v283 = *(unsigned __int8 *)(v17 + 199);
          }
          ++v284;
        }
        while (v284 < v283);
      }
      if (v241 + v693 < 2)
      {
        v7 = 0x1ED1AC000uLL;
      }
      else
      {
        v286 = 0;
        v7 = 0x1ED1AC000;
        do
        {
          LODWORD(v745) = (((*(unsigned __int16 *)(v17 + 380) >> ++v286) & 1) << ~(_BYTE)v282) | v280;
          *v281 = bswap32(v745);
          v287 = SHIDWORD(v745) + 1;
          v280 = (_DWORD)v745 << (v287 & 0xF8);
          LODWORD(v745) = v280;
          v281 = (_DWORD *)((char *)v743 + (v287 >> 3));
          v743 = v281;
          v282 = v287 & 7;
          HIDWORD(v745) = v282;
          if (v281 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v281 = v744;
          }
        }
        while (v689 + v693 + v691 != v286);
      }
      v288 = *(unsigned __int8 *)(v17 + 382) + 1;
      v289 = __clz(v288);
      v290 = 0x80000000 >> v289;
      v291 = (2 * v289) ^ 0x3F;
      LODWORD(v745) = (((v288 - v290) | v290) << (-(char)v282 - v291)) | v280;
      *v281 = bswap32(v745);
      v292 = SHIDWORD(v745) + v291;
      v293 = (_DWORD)v745 << (v292 & 0xF8);
      v294 = (_DWORD *)((char *)v743 + (v292 >> 3));
      v743 = v294;
      v295 = v292 & 7;
      HIDWORD(v745) = v295;
      if (v294 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v294 = v744;
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 383) << (v295 ^ 0x1F)) | v293;
      *v294 = bswap32(v745);
      v296 = SHIDWORD(v745) + 1;
      v297 = (_DWORD)v745 << (v296 & 0xF8);
      v298 = (_DWORD *)((char *)v743 + (v296 >> 3));
      v743 = v298;
      v299 = v296 & 7;
      HIDWORD(v745) = v299;
      if (v298 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v298 = v744;
      }
      v300 = *(unsigned __int8 *)(v17 + 384) + 1;
      v301 = __clz(v300);
      v302 = 0x80000000 >> v301;
      v303 = (2 * v301) ^ 0x3F;
      LODWORD(v745) = (((v300 - v302) | v302) << (-(char)v299 - v303)) | v297;
      *v298 = bswap32(v745);
      v304 = SHIDWORD(v745) + v303;
      v305 = (_DWORD)v745 << (v304 & 0xF8);
      v306 = (_DWORD *)((char *)v743 + (v304 >> 3));
      v743 = v306;
      v307 = v304 & 7;
      HIDWORD(v745) = v307;
      if (v306 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v306 = v744;
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 385) << (v307 ^ 0x1F)) | v305;
      *v306 = bswap32(v745);
      v308 = SHIDWORD(v745) + 1;
      v309 = (_DWORD)v745 << (v308 & 0xF8);
      v310 = (_DWORD *)((char *)v743 + (v308 >> 3));
      v743 = v310;
      v311 = v308 & 7;
      HIDWORD(v745) = v311;
      if (v310 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v310 = v744;
      }
      LODWORD(v745) = (*(unsigned __int8 *)(v17 + 404) << (v311 ^ 0x1F)) | v309;
      *v310 = bswap32(v745);
      v312 = SHIDWORD(v745) + 1;
      LODWORD(v745) = (_DWORD)v745 << (v312 & 0xF8);
      v743 = (_DWORD *)((char *)v743 + (v312 >> 3));
      HIDWORD(v745) = v312 & 7;
      if (v743 >= v744)
      {
        v746 = 1;
        v743 = v744;
      }
    }
    sub_1C9750F5C((uint64_t)&v739);
    v16 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, char *, _QWORD))(v7 + 3272))(__ptr, 0, v742, (char *)v743 - v742, 0);
    *(_DWORD *)(a1 + 10664) += v16;
    v313 = *(FILE **)(a1 + 240);
    if (v313)
      fwrite(__ptr, 1uLL, v16, v313);
    if (*(_BYTE *)(a1 + 428))
      sub_1C97A051C(*(_QWORD *)(a1 + 9736), (FILE *)*MEMORY[0x1E0C80C10]);
  }
  if (v739)
  {
    v740 = v739;
    operator delete(v739);
  }
  v703 = v16;
  v702 = sub_1C97AD958(a1, v734);
  v740 = 0;
  v739 = 0;
  v741 = 0;
  v743 = 0;
  v745 = 0;
  v744 = 0;
  v314 = sub_1C9750CF0((uint64_t)&v739, 0x400u);
  if (v314)
  {
    v315 = v314;
  }
  else
  {
    v337 = *(unsigned __int8 **)(a1 + 9768);
    *v743 = bswap32(v745);
    v338 = SHIDWORD(v745) + 1;
    v339 = (_DWORD)v745 << (v338 & 0xF8);
    v340 = (_DWORD *)((char *)v743 + (v338 >> 3));
    v743 = v340;
    v341 = v338 & 7;
    HIDWORD(v745) = v341;
    if (v340 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v340 = v744;
    }
    LODWORD(v745) = (34 << (26 - v341)) | v339;
    *v340 = bswap32(v745);
    v342 = SHIDWORD(v745) + 6;
    v343 = (_DWORD)v745 << (v342 & 0xF8);
    LODWORD(v745) = v343;
    v344 = (_DWORD *)((char *)v743 + (v342 >> 3));
    v743 = v344;
    HIDWORD(v745) = v342 & 7;
    if (v344 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v344 = v744;
    }
    *v344 = bswap32(v343);
    v345 = SHIDWORD(v745) + 6;
    v346 = (_DWORD)v745 << (v345 & 0xF8);
    v347 = (_DWORD *)((char *)v743 + (v345 >> 3));
    v743 = v347;
    v348 = v345 & 7;
    HIDWORD(v745) = v348;
    if (v347 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v347 = v744;
    }
    LODWORD(v745) = (1 << (29 - v348)) | v346;
    *v347 = bswap32(v745);
    v349 = SHIDWORD(v745) + 3;
    v350 = (_DWORD *)((char *)v743 + (v349 >> 3));
    v743 = v350;
    HIDWORD(v745) = v349 & 7;
    if (v350 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v350 = v744;
    }
    v351 = *v337 + 1;
    v352 = __clz(v351);
    v353 = 0x80000000 >> v352;
    v354 = (2 * v352) ^ 0x3F;
    LODWORD(v745) = (((v351 - v353) | v353) << (-(v349 & 7) - v354)) | ((_DWORD)v745 << (v349 & 0xF8));
    *v350 = bswap32(v745);
    v355 = SHIDWORD(v745) + v354;
    v356 = (_DWORD)v745 << (v355 & 0xF8);
    v357 = (_DWORD *)((char *)v743 + (v355 >> 3));
    v743 = v357;
    v358 = v355 & 7;
    HIDWORD(v745) = v358;
    if (v357 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v357 = v744;
    }
    v359 = v337[1] + 1;
    v360 = __clz(v359);
    LODWORD(v745) = (((v359 - (0x80000000 >> v360)) | (0x80000000 >> v360)) << (-((2 * v360) ^ 0x3F) - v358)) | v356;
    *v357 = bswap32(v745);
    v361 = (_DWORD)v745 << ((BYTE4(v745) + ((2 * v360) ^ 0x3F)) & 0xF8);
    LODWORD(v745) = v361;
    v362 = (_DWORD *)((char *)v743 + ((SHIDWORD(v745) + ((2 * v360) ^ 0x3FuLL)) >> 3));
    v743 = v362;
    v363 = (BYTE4(v745) + ((2 * v360) ^ 0x3F)) & 7;
    HIDWORD(v745) = (HIDWORD(v745) + ((2 * v360) ^ 0x3F)) & 7;
    if (v362 >= v744)
    {
      v746 = 1;
      v743 = v744;
      v362 = v744;
    }
    v364 = *((_QWORD *)v337 + 221);
    v365 = v337[1];
    v366 = (_QWORD *)(v364 + 1552);
    v367 = (_QWORD *)(v364 + 16 * v365 + 256);
    if (v365 > 0xF)
      v367 = v366;
    if (*v367)
    {
      LODWORD(v745) = (v337[2] << (v363 ^ 0x1F)) | v361;
      *v362 = bswap32(v745);
      v368 = SHIDWORD(v745) + 1;
      v369 = (_DWORD)v745 << (v368 & 0xF8);
      v370 = (_DWORD *)((char *)v743 + (v368 >> 3));
      v743 = v370;
      v371 = v368 & 7;
      HIDWORD(v745) = v371;
      if (v370 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v370 = v744;
      }
      LODWORD(v745) = (v337[3] << (v371 ^ 0x1F)) | v369;
      *v370 = bswap32(v745);
      v372 = SHIDWORD(v745) + 1;
      v373 = (_DWORD)v745 << (v372 & 0xF8);
      v374 = (_DWORD *)((char *)v743 + (v372 >> 3));
      v743 = v374;
      v375 = v372 & 7;
      HIDWORD(v745) = v375;
      if (v374 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v374 = v744;
      }
      LODWORD(v745) = (v337[4] << (29 - v375)) | v373;
      *v374 = bswap32(v745);
      v376 = SHIDWORD(v745) + 3;
      v377 = (_DWORD)v745 << (v376 & 0xF8);
      v378 = (_DWORD *)((char *)v743 + (v376 >> 3));
      v743 = v378;
      v379 = v376 & 7;
      HIDWORD(v745) = v379;
      if (v378 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v378 = v744;
      }
      LODWORD(v745) = (v337[5] << (v379 ^ 0x1F)) | v377;
      *v378 = bswap32(v745);
      v380 = SHIDWORD(v745) + 1;
      v381 = (_DWORD)v745 << (v380 & 0xF8);
      v382 = (_DWORD *)((char *)v743 + (v380 >> 3));
      v743 = v382;
      v383 = v380 & 7;
      HIDWORD(v745) = v383;
      if (v382 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v382 = v744;
      }
      LODWORD(v745) = (v337[6] << (v383 ^ 0x1F)) | v381;
      *v382 = bswap32(v745);
      v384 = SHIDWORD(v745) + 1;
      v385 = (_DWORD *)((char *)v743 + (v384 >> 3));
      v743 = v385;
      HIDWORD(v745) = v384 & 7;
      if (v385 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v385 = v744;
      }
      v386 = v337[7] + 1;
      v387 = __clz(v386);
      v388 = 0x80000000 >> v387;
      v389 = (2 * v387) ^ 0x3F;
      LODWORD(v745) = (((v386 - v388) | v388) << (-(v384 & 7) - v389)) | ((_DWORD)v745 << (v384 & 0xF8));
      *v385 = bswap32(v745);
      v390 = SHIDWORD(v745) + v389;
      v391 = (_DWORD)v745 << (v390 & 0xF8);
      v392 = (_DWORD *)((char *)v743 + (v390 >> 3));
      v743 = v392;
      v393 = v390 & 7;
      HIDWORD(v745) = v393;
      if (v392 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v392 = v744;
      }
      v394 = v337[8] + 1;
      v395 = __clz(v394);
      LODWORD(v745) = (((v394 - (0x80000000 >> v395)) | (0x80000000 >> v395)) << (-((2 * v395) ^ 0x3F) - v393)) | v391;
      *v392 = bswap32(v745);
      v396 = (_DWORD)v745 << ((BYTE4(v745) + ((2 * v395) ^ 0x3F)) & 0xF8);
      v397 = (_DWORD *)((char *)v743 + ((SHIDWORD(v745) + ((2 * v395) ^ 0x3FuLL)) >> 3));
      v743 = v397;
      v398 = (BYTE4(v745) + ((2 * v395) ^ 0x3F)) & 7;
      HIDWORD(v745) = (HIDWORD(v745) + ((2 * v395) ^ 0x3F)) & 7;
      if (v397 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v397 = v744;
      }
      v399 = (char)v337[9];
      if (v399 <= 0)
        v400 = -2 * v399;
      else
        v400 = 2 * v399 - 1;
      v401 = v400 + 1;
      v402 = __clz(v401);
      v403 = (v401 - (0x80000000 >> v402)) | (0x80000000 >> v402);
      v404 = 63 - 2 * v402;
      LODWORD(v745) = (v403 << (-v398 - v404)) | v396;
      *v397 = bswap32(v745);
      v405 = SHIDWORD(v745) + v404;
      v406 = (_DWORD)v745 << (v405 & 0xF8);
      v407 = (_DWORD *)((char *)v743 + (v405 >> 3));
      v743 = v407;
      v408 = v405 & 7;
      HIDWORD(v745) = v408;
      if (v407 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v407 = v744;
      }
      LODWORD(v745) = (v337[10] << (v408 ^ 0x1F)) | v406;
      *v407 = bswap32(v745);
      v409 = SHIDWORD(v745) + 1;
      v410 = (_DWORD)v745 << (v409 & 0xF8);
      v411 = (_DWORD *)((char *)v743 + (v409 >> 3));
      v743 = v411;
      v412 = v409 & 7;
      HIDWORD(v745) = v412;
      if (v411 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v411 = v744;
      }
      LODWORD(v745) = (v337[11] << (v412 ^ 0x1F)) | v410;
      *v411 = bswap32(v745);
      v413 = SHIDWORD(v745) + 1;
      v414 = (_DWORD)v745 << (v413 & 0xF8);
      v415 = (_DWORD *)((char *)v743 + (v413 >> 3));
      v743 = v415;
      v416 = v413 & 7;
      HIDWORD(v745) = v416;
      if (v415 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v415 = v744;
      }
      LODWORD(v745) = (v337[12] << (v416 ^ 0x1F)) | v414;
      *v415 = bswap32(v745);
      v417 = SHIDWORD(v745) + 1;
      v418 = v417 & 0xF8;
      v419 = (_DWORD *)((char *)v743 + (v417 >> 3));
      v743 = v419;
      v420 = v417 & 7;
      HIDWORD(v745) = v420;
      if (v419 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v419 = v744;
      }
      v421 = (_DWORD)v745 << v418;
      if (v337[12])
      {
        v422 = v337[13] + 1;
        v423 = __clz(v422);
        v424 = 0x80000000 >> v423;
        v425 = (2 * v423) ^ 0x3F;
        LODWORD(v745) = (((v422 - v424) | v424) << (-(char)v420 - v425)) | v421;
        *v419 = bswap32(v745);
        v426 = SHIDWORD(v745) + v425;
        v421 = (_DWORD)v745 << (v426 & 0xF8);
        v419 = (_DWORD *)((char *)v743 + (v426 >> 3));
        v743 = v419;
        v420 = v426 & 7;
        HIDWORD(v745) = v420;
        if (v419 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v419 = v744;
        }
      }
      v427 = (char)v337[14];
      if (v427 <= 0)
        v428 = -2 * v427;
      else
        v428 = 2 * v427 - 1;
      v429 = __clz(v428 + 1);
      v430 = (v428 + 1 - (0x80000000 >> v429)) | (0x80000000 >> v429);
      v431 = 63 - 2 * v429;
      LODWORD(v745) = (v430 << (-(char)v420 - v431)) | v421;
      *v419 = bswap32(v745);
      v432 = SHIDWORD(v745) + v431;
      v433 = (_DWORD)v745 << (v432 & 0xF8);
      v434 = (_DWORD *)((char *)v743 + (v432 >> 3));
      v743 = v434;
      v435 = v432 & 7;
      HIDWORD(v745) = v435;
      if (v434 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v434 = v744;
      }
      v436 = (char)v337[15];
      if (v436 <= 0)
        v437 = -2 * v436;
      else
        v437 = 2 * v436 - 1;
      v438 = v437 + 1;
      v439 = __clz(v438);
      LODWORD(v745) = (((v438 - (0x80000000 >> v439)) | (0x80000000 >> v439)) << (2 * v439 - 63 - v435)) | v433;
      *v434 = bswap32(v745);
      v440 = SHIDWORD(v745) + 63 - 2 * v439;
      v441 = (_DWORD)v745 << (v440 & 0xF8);
      v442 = (_DWORD *)((char *)v743 + (v440 >> 3));
      v743 = v442;
      v443 = v440 & 7;
      HIDWORD(v745) = v443;
      if (v442 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v442 = v744;
      }
      LODWORD(v745) = (v337[16] << (v443 ^ 0x1F)) | v441;
      *v442 = bswap32(v745);
      v444 = SHIDWORD(v745) + 1;
      v445 = (_DWORD)v745 << (v444 & 0xF8);
      v446 = (_DWORD *)((char *)v743 + (v444 >> 3));
      v743 = v446;
      v447 = v444 & 7;
      HIDWORD(v745) = v447;
      if (v446 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v446 = v744;
      }
      LODWORD(v745) = (v337[17] << (v447 ^ 0x1F)) | v445;
      *v446 = bswap32(v745);
      v448 = SHIDWORD(v745) + 1;
      v449 = (_DWORD)v745 << (v448 & 0xF8);
      v450 = (_DWORD *)((char *)v743 + (v448 >> 3));
      v743 = v450;
      v451 = v448 & 7;
      HIDWORD(v745) = v451;
      if (v450 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v450 = v744;
      }
      LODWORD(v745) = (v337[18] << (v451 ^ 0x1F)) | v449;
      *v450 = bswap32(v745);
      v452 = SHIDWORD(v745) + 1;
      v453 = (_DWORD)v745 << (v452 & 0xF8);
      v454 = (_DWORD *)((char *)v743 + (v452 >> 3));
      v743 = v454;
      v455 = v452 & 7;
      HIDWORD(v745) = v455;
      if (v454 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v454 = v744;
      }
      LODWORD(v745) = (v337[19] << (v455 ^ 0x1F)) | v453;
      *v454 = bswap32(v745);
      v456 = SHIDWORD(v745) + 1;
      v457 = (_DWORD)v745 << (v456 & 0xF8);
      v458 = (_DWORD *)((char *)v743 + (v456 >> 3));
      v743 = v458;
      v459 = v456 & 7;
      HIDWORD(v745) = v459;
      if (v458 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v458 = v744;
      }
      LODWORD(v745) = (v337[20] << (v459 ^ 0x1F)) | v457;
      *v458 = bswap32(v745);
      v460 = SHIDWORD(v745) + 1;
      v461 = (_DWORD)v745 << (v460 & 0xF8);
      v462 = (_DWORD *)((char *)v743 + (v460 >> 3));
      v743 = v462;
      v463 = v460 & 7;
      HIDWORD(v745) = v463;
      if (v462 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v462 = v744;
      }
      LODWORD(v745) = (v337[21] << (v463 ^ 0x1F)) | v461;
      *v462 = bswap32(v745);
      v464 = SHIDWORD(v745) + 1;
      v465 = v464 & 0xF8;
      v466 = (_DWORD *)((char *)v743 + (v464 >> 3));
      v743 = v466;
      v467 = v464 & 7;
      HIDWORD(v745) = v467;
      if (v466 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v466 = v744;
      }
      v468 = (_DWORD)v745 << v465;
      if (v337[20])
      {
        v469 = *((unsigned __int16 *)v337 + 11) + 1;
        v470 = __clz(v469);
        v471 = 0x80000000 >> v470;
        v472 = (2 * v470) ^ 0x3F;
        LODWORD(v745) = (((v469 - v471) | v471) << (-(char)v467 - v472)) | v468;
        *v466 = bswap32(v745);
        v473 = SHIDWORD(v745) + v472;
        v474 = (_DWORD)v745 << (v473 & 0xF8);
        v475 = (_DWORD *)((char *)v743 + (v473 >> 3));
        v743 = v475;
        v476 = v473 & 7;
        HIDWORD(v745) = v476;
        if (v475 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v475 = v744;
        }
        v477 = *((unsigned __int16 *)v337 + 12) + 1;
        v478 = __clz(v477);
        LODWORD(v745) = (((v477 - (0x80000000 >> v478)) | (0x80000000 >> v478)) << (-((2 * v478) ^ 0x3F) - v476)) | v474;
        *v475 = bswap32(v745);
        v479 = (_DWORD)v745 << ((BYTE4(v745) + ((2 * v478) ^ 0x3F)) & 0xF8);
        v480 = (_DWORD *)((char *)v743 + ((SHIDWORD(v745) + ((2 * v478) ^ 0x3FuLL)) >> 3));
        v743 = v480;
        v481 = (BYTE4(v745) + ((2 * v478) ^ 0x3F)) & 7;
        HIDWORD(v745) = (HIDWORD(v745) + ((2 * v478) ^ 0x3F)) & 7;
        if (v480 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v480 = v744;
        }
        LODWORD(v745) = (v337[26] << (v481 ^ 0x1F)) | v479;
        *v480 = bswap32(v745);
        v482 = SHIDWORD(v745) + 1;
        v483 = (_DWORD)v745 << (v482 & 0xF8);
        v484 = (_DWORD *)((char *)v743 + (v482 >> 3));
        v743 = v484;
        v485 = v482 & 7;
        HIDWORD(v745) = v485;
        if (v484 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v484 = v744;
        }
        if (!v337[26])
        {
          if (*((_WORD *)v337 + 11))
          {
            v486 = 0;
            do
            {
              v487 = *(unsigned __int16 *)(*((_QWORD *)v337 + 206) + 2 * v486) + 1;
              v488 = __clz(v487);
              v489 = 0x80000000 >> v488;
              v490 = (2 * v488) ^ 0x3F;
              LODWORD(v745) = (((v487 - v489) | v489) << (-(char)v485 - v490)) | v483;
              *v484 = bswap32(v745);
              v491 = SHIDWORD(v745) + v490;
              v483 = (_DWORD)v745 << (v491 & 0xF8);
              LODWORD(v745) = v483;
              v484 = (_DWORD *)((char *)v743 + (v491 >> 3));
              v743 = v484;
              v485 = v491 & 7;
              HIDWORD(v745) = v485;
              if (v484 >= v744)
              {
                v746 = 1;
                v743 = v744;
                v484 = v744;
              }
              ++v486;
            }
            while (v486 < *((unsigned __int16 *)v337 + 11));
          }
          if (*((_WORD *)v337 + 12))
          {
            v492 = 0;
            do
            {
              v493 = *(unsigned __int16 *)(*((_QWORD *)v337 + 209) + 2 * v492) + 1;
              v494 = __clz(v493);
              v495 = 0x80000000 >> v494;
              v496 = (2 * v494) ^ 0x3F;
              LODWORD(v745) = (((v493 - v495) | v495) << (-(char)v485 - v496)) | v483;
              *v484 = bswap32(v745);
              v497 = SHIDWORD(v745) + v496;
              v483 = (_DWORD)v745 << (v497 & 0xF8);
              LODWORD(v745) = v483;
              v484 = (_DWORD *)((char *)v743 + (v497 >> 3));
              v743 = v484;
              v485 = v497 & 7;
              HIDWORD(v745) = v485;
              if (v484 >= v744)
              {
                v746 = 1;
                v743 = v744;
                v484 = v744;
              }
              ++v492;
            }
            while (v492 < *((unsigned __int16 *)v337 + 12));
          }
        }
        LODWORD(v745) = (v337[27] << (v485 ^ 0x1F)) | v483;
        *v484 = bswap32(v745);
        v498 = SHIDWORD(v745) + 1;
        v468 = (_DWORD)v745 << (v498 & 0xF8);
        v466 = (_DWORD *)((char *)v743 + (v498 >> 3));
        v743 = v466;
        v467 = v498 & 7;
        HIDWORD(v745) = v467;
        if (v466 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v466 = v744;
        }
      }
      LODWORD(v745) = (v337[28] << (v467 ^ 0x1F)) | v468;
      *v466 = bswap32(v745);
      v499 = SHIDWORD(v745) + 1;
      v500 = (_DWORD)v745 << (v499 & 0xF8);
      v501 = (_DWORD *)((char *)v743 + (v499 >> 3));
      v743 = v501;
      v502 = v499 & 7;
      HIDWORD(v745) = v502;
      if (v501 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v501 = v744;
      }
      LODWORD(v745) = (v337[29] << (v502 ^ 0x1F)) | v500;
      *v501 = bswap32(v745);
      v503 = SHIDWORD(v745) + 1;
      v504 = v503 & 0xF8;
      v505 = (_DWORD *)((char *)v743 + (v503 >> 3));
      v743 = v505;
      v506 = v503 & 7;
      HIDWORD(v745) = v506;
      if (v505 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v505 = v744;
      }
      v507 = (_DWORD)v745 << v504;
      if (v337[29])
      {
        LODWORD(v745) = (v337[30] << (v506 ^ 0x1F)) | v507;
        *v505 = bswap32(v745);
        v508 = SHIDWORD(v745) + 1;
        v509 = (_DWORD)v745 << (v508 & 0xF8);
        v510 = (_DWORD *)((char *)v743 + (v508 >> 3));
        v743 = v510;
        v511 = v508 & 7;
        HIDWORD(v745) = v511;
        if (v510 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v510 = v744;
        }
        LODWORD(v745) = (v337[31] << (v511 ^ 0x1F)) | v509;
        *v510 = bswap32(v745);
        v512 = SHIDWORD(v745) + 1;
        v513 = v512 & 0xF8;
        v505 = (_DWORD *)((char *)v743 + (v512 >> 3));
        v743 = v505;
        v506 = v512 & 7;
        HIDWORD(v745) = v506;
        if (v505 >= v744)
        {
          v746 = 1;
          v743 = v744;
          v505 = v744;
        }
        v507 = (_DWORD)v745 << v513;
        if (!v337[31])
        {
          v514 = (char)v337[32];
          if (v514 <= 0)
            v515 = -2 * v514;
          else
            v515 = 2 * v514 - 1;
          v516 = __clz(v515 + 1);
          v517 = (v515 + 1 - (0x80000000 >> v516)) | (0x80000000 >> v516);
          v518 = 63 - 2 * v516;
          LODWORD(v745) = (v517 << (-(char)v506 - v518)) | v507;
          *v505 = bswap32(v745);
          v519 = SHIDWORD(v745) + v518;
          v520 = (_DWORD)v745 << (v519 & 0xF8);
          v521 = (_DWORD *)((char *)v743 + (v519 >> 3));
          v743 = v521;
          v522 = v519 & 7;
          HIDWORD(v745) = v522;
          if (v521 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v521 = v744;
          }
          v523 = (char)v337[33];
          if (v523 <= 0)
            v524 = -2 * v523;
          else
            v524 = 2 * v523 - 1;
          v525 = v524 + 1;
          v526 = __clz(v525);
          LODWORD(v745) = (((v525 - (0x80000000 >> v526)) | (0x80000000 >> v526)) << (2 * v526 - 63 - v522)) | v520;
          *v521 = bswap32(v745);
          v527 = SHIDWORD(v745) + 63 - 2 * v526;
          v507 = (_DWORD)v745 << (v527 & 0xF8);
          v505 = (_DWORD *)((char *)v743 + (v527 >> 3));
          v743 = v505;
          v506 = v527 & 7;
          HIDWORD(v745) = v506;
          if (v505 >= v744)
          {
            v746 = 1;
            v743 = v744;
            v505 = v744;
          }
        }
      }
      LODWORD(v745) = (v337[34] << (v506 ^ 0x1F)) | v507;
      *v505 = bswap32(v745);
      v528 = SHIDWORD(v745) + 1;
      v529 = (_DWORD)v745 << (v528 & 0xF8);
      LODWORD(v745) = v529;
      v530 = (_DWORD *)((char *)v743 + (v528 >> 3));
      v743 = v530;
      v531 = v528 & 7;
      HIDWORD(v745) = v531;
      if (v530 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v530 = v744;
      }
      if (v337[34])
      {
        sub_1C9751100((uint64_t)(v337 + 40), (uint64_t)&v739);
        LOBYTE(v531) = BYTE4(v745);
        v529 = v745;
        v530 = v743;
      }
      LODWORD(v745) = (v337[1608] << ~(_BYTE)v531) | v529;
      *v530 = bswap32(v745);
      v532 = SHIDWORD(v745) + 1;
      v533 = (_DWORD)v745 << (v532 & 0xF8);
      v534 = (_DWORD *)((char *)v743 + (v532 >> 3));
      v743 = v534;
      v535 = v532 & 7;
      HIDWORD(v745) = v535;
      if (v534 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v534 = v744;
      }
      if (*((_WORD *)v337 + 805))
        v536 = 2 * *((unsigned __int16 *)v337 + 805);
      else
        v536 = 1;
      v537 = __clz(v536);
      v538 = (v536 - (0x80000000 >> v537)) | (0x80000000 >> v537);
      v539 = 63 - 2 * v537;
      LODWORD(v745) = (v538 << (-(char)v535 - v539)) | v533;
      *v534 = bswap32(v745);
      v540 = SHIDWORD(v745) + v539;
      v541 = (_DWORD)v745 << (v540 & 0xF8);
      v542 = (_DWORD *)((char *)v743 + (v540 >> 3));
      v743 = v542;
      v543 = v540 & 7;
      HIDWORD(v745) = v543;
      if (v542 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v542 = v744;
      }
      LODWORD(v745) = (v337[1612] << (v543 ^ 0x1F)) | v541;
      *v542 = bswap32(v745);
      v544 = SHIDWORD(v745) + 1;
      v545 = (_DWORD)v745 << (v544 & 0xF8);
      v546 = (_DWORD *)((char *)v743 + (v544 >> 3));
      v743 = v546;
      v547 = v544 & 7;
      HIDWORD(v745) = v547;
      if (v546 >= v744)
      {
        v746 = 1;
        v743 = v744;
        v546 = v744;
      }
      LODWORD(v745) = (v337[1613] << (v547 ^ 0x1F)) | v545;
      *v546 = bswap32(v745);
      v548 = SHIDWORD(v745) + 1;
      LODWORD(v745) = (_DWORD)v745 << (v548 & 0xF8);
      v743 = (_DWORD *)((char *)v743 + (v548 >> 3));
      HIDWORD(v745) = v548 & 7;
      if (v743 >= v744)
      {
        v746 = 1;
        v743 = v744;
      }
      if (v337[1613])
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("Implement PPS extension parsing\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "Implement PPS extension parsing\n");
        }
        v315 = -12910;
      }
      else
      {
        sub_1C9750F5C((uint64_t)&v739);
        v315 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, char *, _QWORD))(v7 + 3272))(v732, 0, v742, (char *)v743 - v742, 0);
        *(_DWORD *)(a1 + 10664) += v315;
        v565 = *(FILE **)(a1 + 240);
        if (v565)
          fwrite(v732, 1uLL, v315, v565);
        if (*(_BYTE *)(a1 + 428))
          sub_1C9776418(*(_QWORD *)(a1 + 9768), (FILE *)*MEMORY[0x1E0C80C10]);
      }
    }
    else
    {
      v315 = -12909;
    }
  }
  if (v739)
  {
    v740 = v739;
    operator delete(v739);
  }
  v701 = v315;
  v316 = v703;
  if (!v703 || (v317 = v702) == 0 || !v315)
  {
    if (dword_1ED1ACCC0 < 3)
    {
      v319 = 0;
      v334 = 4294954394;
    }
    else
    {
      fwrite("Parameter sets generation failed\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      v319 = 0;
      v334 = 4294954394;
      syslog(27, "Parameter sets generation failed\n");
    }
    goto LABEL_461;
  }
  v702 -= 3;
  v703 -= 3;
  v701 = v315 - 3;
  v318 = v5 + v316 - 3 + v317 - 3 + v315 - 3 + v8 + 148;
  v319 = (char *)malloc_type_calloc(v318, 1uLL, 0x100004077774924uLL);
  if (!v319)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v559 = "config record buffer allocation failed";
      fwrite("config record buffer allocation failed", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      v319 = 0;
LABEL_451:
      v334 = 4294954392;
LABEL_460:
      syslog(27, v559);
      goto LABEL_461;
    }
    v319 = 0;
LABEL_471:
    v334 = 4294954392;
    goto LABEL_461;
  }
  *(_QWORD *)v707 = 0x1000000;
  v704 = 0;
  v705 = 0;
  v706 = 0;
  *(_DWORD *)&v707[7] = 0;
  v708 = 3;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)__n = 0u;
  sub_1C971CDA8((uint64_t)v719);
  sub_1C971CDA8((uint64_t)v717);
  sub_1C971CDA8((uint64_t)v715);
  sub_1C971CDA8((uint64_t)v714);
  sub_1C971CDA8((uint64_t)v713);
  v751 = 0uLL;
  *(_QWORD *)&v752 = 0;
  v753 = 0;
  v755 = 0;
  v754 = 0;
  bzero(&v739, 0x630uLL);
  v709 = 0;
  __n[1] = 0;
  v695 = v5;
  v696 = a2;
  if (!(HIBYTE(v697) * v697 * v698)
    || (v321 = v721, v320 = v722, v322 = *v721, v323 = v723, !(*v722 * *v721 * *v723))
    || (v324 = v726) == 0
    || (v325 = v727) == 0
    || (v326 = v728) == 0)
  {
    v334 = 4294954394;
    goto LABEL_424;
  }
  LOBYTE(v327) = 0;
  v328 = 0;
  v329 = 0;
  v330 = 23;
  do
  {
    v331 = *((unsigned __int8 *)&v697 + v329);
    if (*((_BYTE *)&v697 + v329))
    {
      v327 = v328 + 1;
      v330 += 3;
      v332 = (&v721)[v329];
      do
      {
        v333 = *v332++;
        v330 += v333 + 2;
        --v331;
      }
      while (v331);
      v328 = v327;
    }
    ++v329;
  }
  while (v329 != 5);
  v709 = v327;
  if (v330)
  {
    sub_1C971BA44((unint64_t *)__p, v330);
    v322 = *v321;
  }
  v334 = sub_1C971CE30((uint64_t)v719, v324, v322);
  if (!(_DWORD)v334)
  {
    v334 = sub_1C971CE30((uint64_t)v717, v325, *v320);
    if (!(_DWORD)v334)
    {
      v334 = sub_1C971CE30((uint64_t)v715, v326, *v323);
      if (!(_DWORD)v334)
      {
        if (!v699 || !v729 || !*v724 || (v334 = sub_1C971CE30((uint64_t)v714, v729, *v724), !(_DWORD)v334))
        {
          if (!v700 || !v730 || !*v725 || (v334 = sub_1C971CE30((uint64_t)v713, v730, *v725), !(_DWORD)v334))
          {
            v712[0] = v720;
            v712[1] = v718;
            v712[2] = v716;
            v712[3] = v714[16];
            v712[4] = v713[16];
            v334 = sub_1C9718BDC((uint64_t)&v739, (uint64_t)v719, 0);
            if (!(_DWORD)v334)
            {
              v334 = sub_1C9718BDC((uint64_t)&v739, (uint64_t)v717, 0);
              if (!(_DWORD)v334)
              {
                v335 = 32;
                while (!(&v739)[v335])
                {
                  v335 += 2;
                  if (v335 == 64)
                  {
                    v336 = (unsigned __int8 **)&v748;
                    goto LABEL_488;
                  }
                }
                v336 = (unsigned __int8 **)&(&v739)[v335];
LABEL_488:
                v577 = 8 * *((_BYTE *)v739 + 44);
                v578 = 4 * (*((_BYTE *)v739 + 45) & 1);
                v579 = 2 * (*((_BYTE *)v739 + 46) & 1);
                v580 = *((_BYTE *)v739 + 47) & 1;
                LOBYTE(v704) = 1;
                v581 = *(unsigned __int8 *)v739;
                BYTE1(v704) = *(_BYTE *)v739;
                v582 = *((_BYTE *)v739 + 7) & 1;
                BYTE2(v704) = *((_BYTE *)v739 + 7) & 1;
                v583 = *((unsigned __int8 *)v739 + 8);
                BYTE3(v704) = *((_BYTE *)v739 + 8);
                v584 = v739 + 4;
                v585 = (uint32x4_t)vld1q_dup_f32(v584);
                v586 = (int32x4_t)xmmword_1C9862C30;
                v587 = 0uLL;
                v588 = 32;
                v589.i64[0] = 0x100000001;
                v589.i64[1] = 0x100000001;
                v590.i64[0] = 0x1F0000001FLL;
                v590.i64[1] = 0x1F0000001FLL;
                v591.i64[0] = 0x400000004;
                v591.i64[1] = 0x400000004;
                do
                {
                  v587 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v585, (uint32x4_t)vnegq_s32(v586)), v589), (uint32x4_t)vsubq_s32(v590, v586)), v587);
                  v586 = vaddq_s32(v586, v591);
                  v588 -= 4;
                }
                while (v588);
                v592 = vorr_s8(*(int8x8_t *)v587.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v587, v587, 8uLL));
                v593 = v592.i32[0] | v592.i32[1];
                HIDWORD(v704) = v592.i32[0] | v592.i32[1];
                v594 = v578 | v579 | v577 & 8 | v580;
                v705 = v594 << 44;
                v686 = *((unsigned __int8 *)v739 + 57);
                v706 = *((_BYTE *)v739 + 57);
                *(_WORD *)v707 = 0;
                v707[2] = 0;
                v595 = *v336;
                v687 = v595[201];
                v707[3] = v595[201];
                v707[4] = v595[222];
                v688 = v707[4];
                v690 = v595[223];
                v707[5] = v595[223];
                *(_WORD *)&v707[6] = 0;
                v707[8] = 0;
                v692 = *((_BYTE *)v739 + 200) + 1;
                v707[9] = v692;
                LODWORD(v595) = *((unsigned __int8 *)v739 + 201);
                v708 = 3;
                v694 = (int)v595;
                v707[10] = (_BYTE)v595;
                v334 = sub_1C971B944((uint64_t)&v751, (unsigned int *)__p[0], (char *)__p[1] - (char *)__p[0]);
                if ((_DWORD)v334)
                  goto LABEL_424;
                v596 = v753;
                if (HIDWORD(v755) && v753 < v754)
                {
                  v596 = (_DWORD *)((char *)v753 + 1);
                  v753 = (_DWORD *)((char *)v753 + 1);
                }
                v755 = 0x1000000;
                *v596 = 1;
                v597 = (_DWORD)v755 << ((BYTE4(v755) + 8) & 0xF8);
                v598 = (_DWORD *)((char *)v753 + ((unint64_t)(SHIDWORD(v755) + 8) >> 3));
                v753 = v598;
                v599 = BYTE4(v755) & 7;
                HIDWORD(v755) = BYTE4(v755) & 7;
                if (v598 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v598 = v754;
                }
                LODWORD(v755) = (v581 << (30 - v599)) | v597;
                *v598 = bswap32(v755);
                v600 = SHIDWORD(v755) + 2;
                v601 = (_DWORD)v755 << (v600 & 0xF8);
                v602 = (_DWORD *)((char *)v753 + (v600 >> 3));
                v753 = v602;
                v603 = v600 & 7;
                HIDWORD(v755) = v603;
                if (v602 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v602 = v754;
                }
                LODWORD(v755) = (v582 << (v603 ^ 0x1F)) | v601;
                *v602 = bswap32(v755);
                v604 = SHIDWORD(v755) + 1;
                v605 = (_DWORD)v755 << (v604 & 0xF8);
                v606 = (_DWORD *)((char *)v753 + (v604 >> 3));
                v753 = v606;
                v607 = v604 & 7;
                HIDWORD(v755) = v607;
                if (v606 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v606 = v754;
                }
                LODWORD(v755) = (v583 << (27 - v607)) | v605;
                *v606 = bswap32(v755);
                v608 = SHIDWORD(v755) + 5;
                LODWORD(v755) = (_DWORD)v755 << (v608 & 0xF8);
                v753 = (_DWORD *)((char *)v753 + (v608 >> 3));
                HIDWORD(v755) = v608 & 7;
                if (v753 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                }
                sub_1C9750DB8((uint64_t)&v751, v593, 32);
                LODWORD(v755) = ((_DWORD)v594 << 12 << (16 - BYTE4(v755))) | v755;
                *v753 = bswap32(v755);
                LODWORD(v755) = (_DWORD)v755 << ((BYTE4(v755) + 16) & 0xF8);
                v753 = (_DWORD *)((char *)v753 + ((unint64_t)(SHIDWORD(v755) + 16) >> 3));
                HIDWORD(v755) = BYTE4(v755) & 7;
                if (v753 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                }
                sub_1C9750DB8((uint64_t)&v751, 0, 32);
                LODWORD(v755) = (v686 << (24 - BYTE4(v755))) | v755;
                *v753 = bswap32(v755);
                v609 = (_DWORD)v755 << ((BYTE4(v755) + 8) & 0xF8);
                v610 = (_DWORD *)((char *)v753 + ((unint64_t)(SHIDWORD(v755) + 8) >> 3));
                v753 = v610;
                v611 = BYTE4(v755) & 7;
                HIDWORD(v755) = BYTE4(v755) & 7;
                if (v610 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v610 = v754;
                }
                LODWORD(v755) = (15 << (28 - v611)) | v609;
                *v610 = bswap32(v755);
                v612 = SHIDWORD(v755) + 4;
                v613 = (_DWORD)v755 << (v612 & 0xF8);
                v614 = (_DWORD *)((char *)v753 + (v612 >> 3));
                v753 = v614;
                HIDWORD(v755) = v612 & 7;
                if (v614 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v614 = v754;
                }
                LODWORD(v755) = (_DWORD)v755 << (v612 & 0xF8);
                *v614 = bswap32(v613);
                v615 = SHIDWORD(v755) + 12;
                v616 = (_DWORD)v755 << (v615 & 0xF8);
                v617 = (_DWORD *)((char *)v753 + (v615 >> 3));
                v753 = v617;
                v618 = v615 & 7;
                HIDWORD(v755) = v618;
                if (v617 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v617 = v754;
                }
                LODWORD(v755) = (63 << (26 - v618)) | v616;
                *v617 = bswap32(v755);
                v619 = SHIDWORD(v755) + 6;
                v620 = (_DWORD)v755 << (v619 & 0xF8);
                v621 = (_DWORD *)((char *)v753 + (v619 >> 3));
                v753 = v621;
                HIDWORD(v755) = v619 & 7;
                if (v621 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v621 = v754;
                }
                LODWORD(v755) = (_DWORD)v755 << (v619 & 0xF8);
                *v621 = bswap32(v620);
                v622 = SHIDWORD(v755) + 2;
                v623 = (_DWORD)v755 << (v622 & 0xF8);
                v624 = (_DWORD *)((char *)v753 + (v622 >> 3));
                v753 = v624;
                v625 = v622 & 7;
                HIDWORD(v755) = v625;
                if (v624 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v624 = v754;
                }
                LODWORD(v755) = (63 << (26 - v625)) | v623;
                *v624 = bswap32(v755);
                v626 = SHIDWORD(v755) + 6;
                v627 = (_DWORD)v755 << (v626 & 0xF8);
                v628 = (_DWORD *)((char *)v753 + (v626 >> 3));
                v753 = v628;
                v629 = v626 & 7;
                HIDWORD(v755) = v629;
                if (v628 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v628 = v754;
                }
                LODWORD(v755) = (v687 << (30 - v629)) | v627;
                *v628 = bswap32(v755);
                v630 = SHIDWORD(v755) + 2;
                v631 = (_DWORD)v755 << (v630 & 0xF8);
                v632 = (_DWORD *)((char *)v753 + (v630 >> 3));
                v753 = v632;
                v633 = v630 & 7;
                HIDWORD(v755) = v633;
                if (v632 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v632 = v754;
                }
                LODWORD(v755) = (31 << (27 - v633)) | v631;
                *v632 = bswap32(v755);
                v634 = SHIDWORD(v755) + 5;
                v635 = (_DWORD)v755 << (v634 & 0xF8);
                v636 = (_DWORD *)((char *)v753 + (v634 >> 3));
                v753 = v636;
                v637 = v634 & 7;
                HIDWORD(v755) = v637;
                if (v636 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v636 = v754;
                }
                LODWORD(v755) = (v688 << (29 - v637)) | v635;
                *v636 = bswap32(v755);
                v638 = SHIDWORD(v755) + 3;
                v639 = (_DWORD)v755 << (v638 & 0xF8);
                v640 = (_DWORD *)((char *)v753 + (v638 >> 3));
                v753 = v640;
                v641 = v638 & 7;
                HIDWORD(v755) = v641;
                if (v640 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v640 = v754;
                }
                LODWORD(v755) = (31 << (27 - v641)) | v639;
                *v640 = bswap32(v755);
                v642 = SHIDWORD(v755) + 5;
                v643 = (_DWORD)v755 << (v642 & 0xF8);
                v644 = (_DWORD *)((char *)v753 + (v642 >> 3));
                v753 = v644;
                v645 = v642 & 7;
                HIDWORD(v755) = v645;
                if (v644 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v644 = v754;
                }
                LODWORD(v755) = (v690 << (29 - v645)) | v643;
                *v644 = bswap32(v755);
                v646 = SHIDWORD(v755) + 3;
                v647 = (_DWORD)v755 << (v646 & 0xF8);
                v648 = (_DWORD *)((char *)v753 + (v646 >> 3));
                v753 = v648;
                HIDWORD(v755) = v646 & 7;
                if (v648 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v648 = v754;
                }
                LODWORD(v755) = (_DWORD)v755 << (v646 & 0xF8);
                *v648 = bswap32(v647);
                v649 = (_DWORD)v755 << ((BYTE4(v755) + 16) & 0xF8);
                v650 = (_DWORD *)((char *)v753 + ((unint64_t)(SHIDWORD(v755) + 16) >> 3));
                v753 = v650;
                HIDWORD(v755) = BYTE4(v755) & 7;
                if (v650 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v650 = v754;
                }
                LODWORD(v755) = v649;
                *v650 = bswap32(v649);
                v651 = SHIDWORD(v755) + 2;
                v652 = (_DWORD)v755 << (v651 & 0xF8);
                v653 = (_DWORD *)((char *)v753 + (v651 >> 3));
                v753 = v653;
                v654 = v651 & 7;
                HIDWORD(v755) = v654;
                if (v653 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v653 = v754;
                }
                LODWORD(v755) = (v692 << (29 - v654)) | v652;
                *v653 = bswap32(v755);
                v655 = SHIDWORD(v755) + 3;
                v656 = (_DWORD)v755 << (v655 & 0xF8);
                v657 = (_DWORD *)((char *)v753 + (v655 >> 3));
                v753 = v657;
                v658 = v655 & 7;
                HIDWORD(v755) = v658;
                if (v657 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v657 = v754;
                }
                LODWORD(v755) = (v694 << (v658 ^ 0x1F)) | v656;
                *v657 = bswap32(v755);
                v659 = SHIDWORD(v755) + 1;
                v660 = (_DWORD)v755 << (v659 & 0xF8);
                v661 = (_DWORD *)((char *)v753 + (v659 >> 3));
                v753 = v661;
                v662 = v659 & 7;
                HIDWORD(v755) = v662;
                if (v661 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v661 = v754;
                }
                LODWORD(v755) = (3 << (30 - v662)) | v660;
                *v661 = bswap32(v755);
                v663 = SHIDWORD(v755) + 2;
                v664 = (_DWORD)v755 << (v663 & 0xF8);
                v665 = (_DWORD *)((char *)v753 + (v663 >> 3));
                v753 = v665;
                v666 = v663 & 7;
                HIDWORD(v755) = v666;
                if (v665 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v665 = v754;
                }
                LODWORD(v755) = (v709 << (24 - v666)) | v664;
                *v665 = bswap32(v755);
                v667 = (_DWORD)v755 << ((BYTE4(v755) + 8) & 0xF8);
                LODWORD(v755) = v667;
                v668 = (_DWORD *)((char *)v753 + ((unint64_t)(SHIDWORD(v755) + 8) >> 3));
                v753 = v668;
                v669 = BYTE4(v755) & 7;
                HIDWORD(v755) = BYTE4(v755) & 7;
                if (v668 >= v754)
                {
                  v756 = 1;
                  v753 = v754;
                  v668 = v754;
                }
                v670 = 0;
                while (1)
                {
                  if (*((_BYTE *)&v697 + v670))
                  {
                    LODWORD(v755) = (0x80000000 >> v669) | v667;
                    *v668 = bswap32(v755);
                    v671 = SHIDWORD(v755) + 1;
                    v672 = (_DWORD)v755 << (v671 & 0xF8);
                    LODWORD(v755) = v672;
                    v673 = (_DWORD *)((char *)v753 + (v671 >> 3));
                    v753 = v673;
                    HIDWORD(v755) = v671 & 7;
                    if (v673 >= v754)
                    {
                      v756 = 1;
                      v753 = v754;
                      v673 = v754;
                    }
                    *v673 = bswap32(v672);
                    v674 = SHIDWORD(v755) + 1;
                    v675 = (_DWORD *)((char *)v753 + (v674 >> 3));
                    v753 = v675;
                    HIDWORD(v755) = v674 & 7;
                    if (v675 >= v754)
                    {
                      v756 = 1;
                      v753 = v754;
                      v675 = v754;
                    }
                    LODWORD(v755) = (v712[v670] << (26 - (v674 & 7))) | ((_DWORD)v755 << (v674 & 0xF8));
                    *v675 = bswap32(v755);
                    v676 = SHIDWORD(v755) + 6;
                    v677 = (_DWORD *)((char *)v753 + (v676 >> 3));
                    v753 = v677;
                    HIDWORD(v755) = v676 & 7;
                    if (v677 >= v754)
                    {
                      v756 = 1;
                      v753 = v754;
                      v677 = v754;
                    }
                    v678 = *((unsigned __int8 *)&v697 + v670);
                    LODWORD(v755) = ((_DWORD)v678 << (16 - (v676 & 7))) | ((_DWORD)v755 << (v676 & 0xF8));
                    *v677 = bswap32(v755);
                    v679 = (_DWORD)v755 << ((BYTE4(v755) + 16) & 0xF8);
                    LODWORD(v755) = v679;
                    v668 = (_DWORD *)((char *)v753 + ((unint64_t)(SHIDWORD(v755) + 16) >> 3));
                    v753 = v668;
                    v669 = BYTE4(v755) & 7;
                    HIDWORD(v755) = BYTE4(v755) & 7;
                    if (v668 >= v754)
                    {
                      v756 = 1;
                      v753 = v754;
                      v668 = v754;
                    }
                    if ((_DWORD)v678)
                    {
                      v680 = (&v726)[v670];
                      v681 = (&v721)[v670];
                      while (1)
                      {
                        v683 = *v681++;
                        v682 = v683;
                        LODWORD(v755) = ((_DWORD)v683 << (16 - v669)) | v679;
                        *v668 = bswap32(v755);
                        LODWORD(v755) = (_DWORD)v755 << ((BYTE4(v755) + 16) & 0xF8);
                        v684 = (_DWORD *)((char *)v753 + ((unint64_t)(SHIDWORD(v755) + 16) >> 3));
                        v753 = v684;
                        HIDWORD(v755) = BYTE4(v755) & 7;
                        if (v684 >= v754)
                        {
                          v756 = 1;
                          v753 = v754;
                          v684 = v754;
                        }
                        if ((char *)v754 - (char *)v684 < (unint64_t)v682)
                          break;
                        v685 = v682;
                        memcpy(v684, v680, v682);
                        v669 = BYTE4(v755);
                        v668 = (_DWORD *)((char *)v753 + v685 + (SHIDWORD(v755) >> 3));
                        v753 = v668;
                        if (v668 >= v754)
                        {
                          v756 = 1;
                          v753 = v754;
                          v668 = v754;
                        }
                        v679 = 0;
                        v667 = 0;
                        LODWORD(v755) = 0;
                        v680 += v685;
                        if (!--v678)
                          goto LABEL_558;
                      }
                      v334 = 4294940770;
                      break;
                    }
                    v667 = v679;
                  }
LABEL_558:
                  if (++v670 == 5)
                  {
                    v334 = 0;
                    __n[1] = (size_t)v668 - *((_QWORD *)&v752 + 1);
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_424:
  v549 = v750;
  if (v750)
  {
    p_shared_owners = (unint64_t *)&v750->__shared_owners_;
    do
      v551 = __ldaxr(p_shared_owners);
    while (__stlxr(v551 - 1, p_shared_owners));
    if (!v551)
    {
      ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
      std::__shared_weak_count::__release_weak(v549);
    }
  }
  v552 = v749;
  if (v749)
  {
    v553 = (unint64_t *)&v749->__shared_owners_;
    do
      v554 = __ldaxr(v553);
    while (__stlxr(v554 - 1, v553));
    if (!v554)
    {
      ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
      std::__shared_weak_count::__release_weak(v552);
    }
  }
  v555 = v747;
  a2 = v696;
  if (v747)
  {
    v556 = (unint64_t *)&v747->__shared_owners_;
    do
      v557 = __ldaxr(v556);
    while (__stlxr(v557 - 1, v556));
    if (!v557)
    {
      ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
      std::__shared_weak_count::__release_weak(v555);
    }
  }
  for (j = 190; j != 62; j -= 2)
    sub_1C972CFE0((uint64_t)&(&v739)[j]);
  do
  {
    sub_1C972CFE0((uint64_t)&(&v739)[j]);
    j -= 2;
  }
  while (j != 30);
  do
  {
    sub_1C972CFE0((uint64_t)&(&v739)[j]);
    j -= 2;
  }
  while (j != -2);
  if ((_QWORD)v751)
  {
    *((_QWORD *)&v751 + 1) = v751;
    operator delete((void *)v751);
  }
  if ((_DWORD)v334)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Configuration record creation from parameter sets failed\n", 0x39uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Configuration record creation from parameter sets failed\n");
    }
LABEL_455:
    v561 = __p[0];
    if (!__p[0])
      goto LABEL_457;
    goto LABEL_456;
  }
  v560 = __n[1];
  if (v318 < __n[1])
  {
    v334 = 4294954394;
    a2 = v696;
    goto LABEL_455;
  }
  v561 = __p[0];
  memcpy(v319, __p[0], __n[1]);
  v334 = 0;
  v318 = v560;
  a2 = v696;
  if (v561)
LABEL_456:
    operator delete(v561);
LABEL_457:
  if (!(_DWORD)v334)
  {
    if (*(_BYTE *)(a1 + 424))
      *(_BYTE *)(a1 + 11012) &= CC_MD5_Update((CC_MD5_CTX *)(a1 + 10920), v319, v318);
    if (*(_DWORD *)(a1 + 456) == 1)
    {
      v564 = *(const void **)(a1 + 680);
      if (v564)
      {
        memcpy(&v319[v318], v564, v695 + 1);
        v318 += v695 + 1;
      }
    }
    v562 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v319, v318);
    if (v562)
    {
      free(v319);
      v334 = 0;
      goto LABEL_462;
    }
    if (dword_1ED1ACCC0 >= 3)
    {
      v559 = "Creating hvcCData failed\n";
      fwrite("Creating hvcCData failed\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      goto LABEL_451;
    }
    goto LABEL_471;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    v559 = "LRPParameterSetsToConfigurationRecord failed";
    fwrite("LRPParameterSetsToConfigurationRecord failed", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    goto LABEL_460;
  }
LABEL_461:
  free(v319);
  v562 = 0;
LABEL_462:
  *a2 = v562;
  return v334;
}

void sub_1C97AD8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  uint64_t v22;
  void *v24;

  sub_1C9751088((uint64_t)&STACK[0x910]);
  v24 = *(void **)(v22 + 3696);
  if (v24)
  {
    *(_QWORD *)(v22 + 3704) = v24;
    operator delete(v24);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

size_t sub_1C97AD958(uint64_t a1, void *a2)
{
  int v4;
  size_t v5;
  char v6;
  unsigned __int8 *v8;
  unint64_t v9;
  int v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  unint64_t v22;
  int v23;
  _DWORD *v24;
  int v25;
  unint64_t v26;
  int v27;
  _DWORD *v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _DWORD *v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  _DWORD *v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  _DWORD *v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  _DWORD *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  _DWORD *v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  _DWORD *v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  _DWORD *v72;
  unsigned int v73;
  unsigned __int8 v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  _DWORD *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  _DWORD *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  _DWORD *v104;
  char v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  _DWORD *v109;
  char v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  _DWORD *v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  _DWORD *v122;
  char v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  _DWORD *v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _DWORD *v135;
  char v136;
  unint64_t v137;
  char v138;
  _DWORD *v139;
  unsigned int v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  _DWORD *v145;
  int v146;
  unint64_t v147;
  int v148;
  _DWORD *v149;
  int v150;
  unint64_t v151;
  char v152;
  _DWORD *v153;
  int v154;
  int v155;
  unint64_t v156;
  int v157;
  _DWORD *v158;
  int v159;
  unint64_t v160;
  int v161;
  _DWORD *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  _DWORD *v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  _DWORD *v175;
  char v176;
  unint64_t v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  _DWORD *v184;
  char v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char v189;
  _DWORD *v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  _DWORD *v204;
  unint64_t v205;
  unint64_t v206;
  int v207;
  _DWORD *v208;
  int v209;
  unint64_t v210;
  int v211;
  _DWORD *v212;
  int v213;
  unint64_t v214;
  _DWORD *v215;
  char v216;
  int v217;
  int v218;
  int v219;
  int v220;
  unsigned __int8 *v221;
  int v222;
  int v223;
  int v224;
  char v225;
  _DWORD *v226;
  unint64_t v227;
  int v228;
  unint64_t v229;
  int v230;
  _DWORD *v231;
  char v232;
  unint64_t v233;
  int v234;
  char v235;
  unint64_t v236;
  unint64_t v237;
  char v238;
  _DWORD *v239;
  int v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  char v244;
  _DWORD *v245;
  int v246;
  int v247;
  unint64_t v248;
  int v249;
  _DWORD *v250;
  int v251;
  unint64_t v252;
  int v253;
  _DWORD *v254;
  int v255;
  unint64_t v256;
  char v257;
  unint64_t v258;
  int v259;
  _DWORD *v260;
  char v261;
  unint64_t v262;
  int v263;
  _DWORD *v264;
  char v265;
  unint64_t v266;
  unint64_t v267;
  char v268;
  _DWORD *v269;
  int v270;
  int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  int v277;
  _DWORD *v278;
  unsigned int v279;
  unsigned int v280;
  unint64_t v281;
  int v282;
  _DWORD *v283;
  int v284;
  unint64_t v285;
  int v286;
  _DWORD *v287;
  int v288;
  unint64_t v289;
  int v290;
  _DWORD *v291;
  int v292;
  unint64_t v293;
  char v294;
  _DWORD *v295;
  int v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  unint64_t v302;
  int v303;
  _DWORD *v304;
  int v305;
  unsigned int v306;
  unsigned int v307;
  int v308;
  _DWORD *v309;
  char v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  unint64_t v315;
  int v316;
  _DWORD *v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  char v321;
  _DWORD *v322;
  int v323;
  int v324;
  unsigned int v325;
  unint64_t v326;
  int v327;
  _DWORD *v328;
  char v329;
  unint64_t v330;
  int v331;
  _DWORD *v332;
  char v333;
  unsigned int v334;
  unint64_t v335;
  int v336;
  _DWORD *v337;
  char v338;
  unint64_t v339;
  int v340;
  _DWORD *v341;
  char v342;
  unint64_t v343;
  char v344;
  _DWORD *v345;
  int v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  char v354;
  uint64_t v355;
  unint64_t v356;
  int v357;
  _DWORD *v358;
  int v359;
  _BYTE *v360;
  unint64_t v361;
  unsigned int v362;
  _DWORD *v363;
  unsigned int v364;
  uint64_t v365;
  unint64_t v366;
  char v367;
  _DWORD *v368;
  int v369;
  int v370;
  unint64_t v371;
  int v372;
  _DWORD *v373;
  char v374;
  unint64_t v375;
  int v376;
  _DWORD *v377;
  int v378;
  unint64_t v379;
  int v380;
  _DWORD *v381;
  int v382;
  unint64_t v383;
  unint64_t v384;
  int v385;
  _DWORD *v386;
  int v387;
  unint64_t v388;
  char v389;
  _DWORD *v390;
  int v391;
  int v392;
  unint64_t v393;
  unint64_t v394;
  int v395;
  _DWORD *v396;
  int v397;
  unint64_t v398;
  int v399;
  _DWORD *v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  _DWORD *v407;
  int v408;
  int v409;
  unint64_t v410;
  uint64_t v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  uint64_t v415;
  int v416;
  unint64_t v417;
  unsigned int v418;
  _DWORD *v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  int v428;
  _DWORD *v429;
  int v430;
  unint64_t v431;
  int v432;
  _DWORD *v433;
  int v434;
  unint64_t v435;
  int v436;
  _DWORD *v437;
  int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  unint64_t v443;
  int v444;
  _DWORD *v445;
  int v446;
  unsigned int v447;
  unsigned int v448;
  unint64_t v449;
  int v450;
  _DWORD *v451;
  int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  uint64_t v456;
  unint64_t v457;
  int v458;
  _DWORD *v459;
  int v460;
  unsigned int v461;
  unsigned int v462;
  unint64_t v463;
  int v464;
  _DWORD *v465;
  int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  FILE *v473;
  void *__p[3];
  _DWORD *v475;
  _DWORD *v476;
  unint64_t v477;
  char v478;

  if (!a2)
    return 0;
  memset(__p, 0, sizeof(__p));
  v475 = 0;
  v476 = 0;
  v477 = 0;
  v4 = sub_1C9750CF0((uint64_t)__p, 0x400u);
  if (v4)
    goto LABEL_3;
  v8 = *(unsigned __int8 **)(a1 + 9752);
  *v475 = bswap32(v477);
  v9 = SHIDWORD(v477) + 1;
  v10 = (_DWORD)v477 << (v9 & 0xF8);
  v11 = (_DWORD *)((char *)v475 + (v9 >> 3));
  v475 = v11;
  v12 = v9 & 7;
  HIDWORD(v477) = v12;
  if (v11 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v11 = v476;
  }
  LODWORD(v477) = (33 << (26 - v12)) | v10;
  *v11 = bswap32(v477);
  v13 = SHIDWORD(v477) + 6;
  v14 = (_DWORD)v477 << (v13 & 0xF8);
  v15 = (_DWORD *)((char *)v475 + (v13 >> 3));
  v475 = v15;
  LODWORD(v477) = v14;
  HIDWORD(v477) = v13 & 7;
  if (v15 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v15 = v476;
  }
  *v15 = bswap32(v14);
  v16 = SHIDWORD(v477) + 6;
  v17 = (_DWORD *)((char *)v475 + (v16 >> 3));
  v475 = v17;
  HIDWORD(v477) = v16 & 7;
  if (v17 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v17 = v476;
  }
  LODWORD(v477) = (1 << (29 - (v16 & 7))) | ((_DWORD)v477 << (v16 & 0xF8));
  *v17 = bswap32(v477);
  v18 = SHIDWORD(v477) + 3;
  v19 = (_DWORD)v477 << (v18 & 0xF8);
  v20 = (_DWORD *)((char *)v475 + (v18 >> 3));
  v475 = v20;
  v21 = v18 & 7;
  HIDWORD(v477) = v21;
  if (v20 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v20 = v476;
  }
  LODWORD(v477) = (*v8 << (28 - v21)) | v19;
  *v20 = bswap32(v477);
  v22 = SHIDWORD(v477) + 4;
  v23 = (_DWORD)v477 << (v22 & 0xF8);
  v24 = (_DWORD *)((char *)v475 + (v22 >> 3));
  v475 = v24;
  v25 = v22 & 7;
  HIDWORD(v477) = v25;
  if (v24 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v24 = v476;
  }
  LODWORD(v477) = (v8[1] << (29 - v25)) | v23;
  *v24 = bswap32(v477);
  v26 = SHIDWORD(v477) + 3;
  v27 = (_DWORD)v477 << (v26 & 0xF8);
  v28 = (_DWORD *)((char *)v475 + (v26 >> 3));
  v475 = v28;
  v29 = v26 & 7;
  HIDWORD(v477) = v29;
  if (v28 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v28 = v476;
  }
  LODWORD(v477) = (v8[2] << (v29 ^ 0x1F)) | v27;
  *v28 = bswap32(v477);
  v30 = SHIDWORD(v477) + 1;
  v475 = (_DWORD *)((char *)v475 + (v30 >> 3));
  LODWORD(v477) = (_DWORD)v477 << (v30 & 0xF8);
  HIDWORD(v477) = v30 & 7;
  if (v475 >= v476)
  {
    v478 = 1;
    v475 = v476;
  }
  sub_1C979F084(v8 + 4, 1, v8[1], (uint64_t)__p);
  v31 = v8[200] + 1;
  v32 = __clz(v31);
  v33 = (v31 - (0x80000000 >> v32)) | (0x80000000 >> v32);
  v34 = (2 * v32) ^ 0x3F;
  LODWORD(v477) = (v33 << (-BYTE4(v477) - v34)) | v477;
  *v475 = bswap32(v477);
  v35 = SHIDWORD(v477) + v34;
  v36 = (_DWORD)v477 << (v35 & 0xF8);
  v37 = (_DWORD *)((char *)v475 + (v35 >> 3));
  v475 = v37;
  v38 = v35 & 7;
  HIDWORD(v477) = v35 & 7;
  if (v37 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v37 = v476;
  }
  v39 = v8[201] + 1;
  v40 = __clz(v39);
  LODWORD(v477) = (((v39 - (0x80000000 >> v40)) | (0x80000000 >> v40)) << (-((2 * v40) ^ 0x3F) - v38)) | v36;
  *v37 = bswap32(v477);
  v41 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v40) ^ 0x3F)) & 0xF8);
  v42 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v40) ^ 0x3FuLL)) >> 3));
  v475 = v42;
  v43 = (BYTE4(v477) + ((2 * v40) ^ 0x3F)) & 7;
  LODWORD(v477) = v41;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v40) ^ 0x3F)) & 7;
  if (v42 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v42 = v476;
  }
  if (v8[201] == 3)
  {
    LODWORD(v477) = (v8[202] << (v43 ^ 0x1F)) | v41;
    *v42 = bswap32(v477);
    v44 = SHIDWORD(v477) + 1;
    v475 = (_DWORD *)((char *)v475 + (v44 >> 3));
    LODWORD(v477) = (_DWORD)v477 << (v44 & 0xF8);
    HIDWORD(v477) = v44 & 7;
    if (v475 >= v476)
    {
      v478 = 1;
      v475 = v476;
    }
  }
  sub_1C9750E08((uint64_t)__p, *((_DWORD *)v8 + 51));
  sub_1C9750E08((uint64_t)__p, *((_DWORD *)v8 + 52));
  LODWORD(v477) = (v8[212] << ~BYTE4(v477)) | v477;
  *v475 = bswap32(v477);
  v45 = SHIDWORD(v477) + 1;
  v46 = (_DWORD)v477 << (v45 & 0xF8);
  v47 = (_DWORD *)((char *)v475 + (v45 >> 3));
  v475 = v47;
  v48 = v45 & 7;
  LODWORD(v477) = v46;
  HIDWORD(v477) = v45 & 7;
  if (v47 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v47 = v476;
  }
  if (v8[212])
  {
    sub_1C9750E08((uint64_t)__p, *((unsigned __int16 *)v8 + 107));
    sub_1C9750E08((uint64_t)__p, *((unsigned __int16 *)v8 + 108));
    sub_1C9750E08((uint64_t)__p, *((unsigned __int16 *)v8 + 109));
    sub_1C9750E08((uint64_t)__p, *((unsigned __int16 *)v8 + 110));
    v46 = v477;
    v48 = BYTE4(v477);
    v47 = v475;
  }
  v49 = v8[222] + 1;
  v50 = __clz(v49);
  v51 = 0x80000000 >> v50;
  v52 = (2 * v50) ^ 0x3F;
  LODWORD(v477) = (((v49 - v51) | v51) << (-v48 - v52)) | v46;
  *v47 = bswap32(v477);
  v53 = SHIDWORD(v477) + v52;
  v54 = (_DWORD)v477 << (v53 & 0xF8);
  v55 = (_DWORD *)((char *)v475 + (v53 >> 3));
  v475 = v55;
  v56 = v53 & 7;
  HIDWORD(v477) = v56;
  if (v55 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v55 = v476;
  }
  v57 = v8[223] + 1;
  v58 = __clz(v57);
  LODWORD(v477) = (((v57 - (0x80000000 >> v58)) | (0x80000000 >> v58)) << (-((2 * v58) ^ 0x3F) - v56)) | v54;
  *v55 = bswap32(v477);
  v59 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v58) ^ 0x3F)) & 0xF8);
  v60 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v58) ^ 0x3FuLL)) >> 3));
  v475 = v60;
  v61 = (BYTE4(v477) + ((2 * v58) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v58) ^ 0x3F)) & 7;
  if (v60 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v60 = v476;
  }
  v62 = v8[224] + 1;
  v63 = __clz(v62);
  v64 = (v62 - (0x80000000 >> v63)) | (0x80000000 >> v63);
  v65 = (2 * v63) ^ 0x3F;
  LODWORD(v477) = (v64 << (-(char)v65 - v61)) | v59;
  *v60 = bswap32(v477);
  v66 = SHIDWORD(v477) + v65;
  v67 = (_DWORD)v477 << (v66 & 0xF8);
  v68 = (_DWORD *)((char *)v475 + (v66 >> 3));
  v475 = v68;
  v69 = v66 & 7;
  HIDWORD(v477) = v69;
  if (v68 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v68 = v476;
  }
  LODWORD(v477) = (v8[225] << (v69 ^ 0x1F)) | v67;
  *v68 = bswap32(v477);
  v70 = SHIDWORD(v477) + 1;
  v71 = (_DWORD)v477 << (v70 & 0xF8);
  v72 = (_DWORD *)((char *)v475 + (v70 >> 3));
  v475 = v72;
  LOBYTE(v73) = v70 & 7;
  LODWORD(v477) = v71;
  HIDWORD(v477) = v70 & 7;
  if (v72 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v72 = v476;
  }
  if (v8[225])
    v74 = 0;
  else
    v74 = v8[1];
  v75 = v74;
  do
  {
    v76 = v8[v75 + 226] + 1;
    v77 = __clz(v76);
    v78 = 0x80000000 >> v77;
    v79 = (2 * v77) ^ 0x3F;
    LODWORD(v477) = (((v76 - v78) | v78) << (-(char)v73 - v79)) | v71;
    *v72 = bswap32(v477);
    v80 = SHIDWORD(v477) + v79;
    v81 = (_DWORD)v477 << (v80 & 0xF8);
    v82 = (_DWORD *)((char *)v475 + (v80 >> 3));
    v475 = v82;
    v83 = v80 & 7;
    v477 = __PAIR64__(v83, v81);
    if (v82 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v82 = v476;
    }
    v84 = v8[v75 + 233] + 1;
    v85 = __clz(v84);
    v86 = (v84 - (0x80000000 >> v85)) | (0x80000000 >> v85);
    v87 = (2 * v85) ^ 0x3F;
    LODWORD(v477) = (v86 << (-(char)v87 - v83)) | v81;
    *v82 = bswap32(v477);
    v88 = SHIDWORD(v477) + v87;
    v89 = (_DWORD)v477 << (v88 & 0xF8);
    v90 = (_DWORD *)((char *)v475 + (v88 >> 3));
    v475 = v90;
    v91 = v88 & 7;
    v477 = __PAIR64__(v91, v89);
    if (v90 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v90 = v476;
    }
    v92 = *(_DWORD *)&v8[4 * v75 + 240] + 1;
    v93 = __clz(v92);
    v94 = (v92 - (0x80000000 >> v93)) | (0x80000000 >> v93);
    v95 = 63 - 2 * v93;
    LODWORD(v477) = (v94 << (-(char)v95 - v91)) | v89;
    *v90 = bswap32(v477);
    v96 = SHIDWORD(v477) + v95;
    v71 = (_DWORD)v477 << (v96 & 0xF8);
    v72 = (_DWORD *)((char *)v475 + (v96 >> 3));
    v475 = v72;
    v73 = v96 & 7;
    v477 = __PAIR64__(v73, v71);
    if (v72 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v72 = v476;
    }
  }
  while (v75++ < v8[1]);
  v98 = v8[268] + 1;
  v99 = __clz(v98);
  v100 = (v98 - (0x80000000 >> v99)) | (0x80000000 >> v99);
  v101 = (2 * v99) ^ 0x3F;
  LODWORD(v477) = (v100 << (-(char)v101 - v73)) | v71;
  *v72 = bswap32(v477);
  v102 = SHIDWORD(v477) + v101;
  v103 = (_DWORD)v477 << (v102 & 0xF8);
  v104 = (_DWORD *)((char *)v475 + (v102 >> 3));
  v475 = v104;
  v105 = v102 & 7;
  HIDWORD(v477) = v102 & 7;
  if (v104 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v104 = v476;
  }
  v106 = v8[269] + 1;
  v107 = __clz(v106);
  LODWORD(v477) = (((v106 - (0x80000000 >> v107)) | (0x80000000 >> v107)) << (-((2 * v107) ^ 0x3F) - v105)) | v103;
  *v104 = bswap32(v477);
  v108 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v107) ^ 0x3F)) & 0xF8);
  v109 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v107) ^ 0x3FuLL)) >> 3));
  v475 = v109;
  v110 = (BYTE4(v477) + ((2 * v107) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v107) ^ 0x3F)) & 7;
  if (v109 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v109 = v476;
  }
  v111 = v8[270] + 1;
  v112 = __clz(v111);
  v113 = (v111 - (0x80000000 >> v112)) | (0x80000000 >> v112);
  v114 = (2 * v112) ^ 0x3F;
  LODWORD(v477) = (v113 << (-(char)v114 - v110)) | v108;
  *v109 = bswap32(v477);
  v115 = SHIDWORD(v477) + v114;
  v116 = (_DWORD)v477 << (v115 & 0xF8);
  v117 = (_DWORD *)((char *)v475 + (v115 >> 3));
  v475 = v117;
  v118 = v115 & 7;
  HIDWORD(v477) = v118;
  if (v117 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v117 = v476;
  }
  v119 = v8[271] + 1;
  v120 = __clz(v119);
  LODWORD(v477) = (((v119 - (0x80000000 >> v120)) | (0x80000000 >> v120)) << (-((2 * v120) ^ 0x3F) - v118)) | v116;
  *v117 = bswap32(v477);
  v121 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v120) ^ 0x3F)) & 0xF8);
  v122 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v120) ^ 0x3FuLL)) >> 3));
  v475 = v122;
  v123 = (BYTE4(v477) + ((2 * v120) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v120) ^ 0x3F)) & 7;
  if (v122 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v122 = v476;
  }
  v124 = v8[272] + 1;
  v125 = __clz(v124);
  v126 = (v124 - (0x80000000 >> v125)) | (0x80000000 >> v125);
  v127 = (2 * v125) ^ 0x3F;
  LODWORD(v477) = (v126 << (-(char)v127 - v123)) | v121;
  *v122 = bswap32(v477);
  v128 = SHIDWORD(v477) + v127;
  v129 = (_DWORD)v477 << (v128 & 0xF8);
  v130 = (_DWORD *)((char *)v475 + (v128 >> 3));
  v475 = v130;
  v131 = v128 & 7;
  HIDWORD(v477) = v131;
  if (v130 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v130 = v476;
  }
  v132 = v8[273] + 1;
  v133 = __clz(v132);
  LODWORD(v477) = (((v132 - (0x80000000 >> v133)) | (0x80000000 >> v133)) << (-((2 * v133) ^ 0x3F) - v131)) | v129;
  *v130 = bswap32(v477);
  v134 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v133) ^ 0x3F)) & 0xF8);
  v135 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v133) ^ 0x3FuLL)) >> 3));
  v475 = v135;
  v136 = (BYTE4(v477) + ((2 * v133) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v133) ^ 0x3F)) & 7;
  if (v135 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v135 = v476;
  }
  LODWORD(v477) = (v8[274] << (v136 ^ 0x1F)) | v134;
  *v135 = bswap32(v477);
  v137 = SHIDWORD(v477) + 1;
  v138 = v137 & 0xF8;
  v139 = (_DWORD *)((char *)v475 + (v137 >> 3));
  v475 = v139;
  v140 = v137 & 7;
  HIDWORD(v477) = v140;
  if (v139 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v139 = v476;
  }
  v141 = (_DWORD)v477 << v138;
  if (v8[274])
  {
    LODWORD(v477) = (v8[275] << (v140 ^ 0x1F)) | v141;
    *v139 = bswap32(v477);
    v142 = SHIDWORD(v477) + 1;
    v141 = (_DWORD)v477 << (v142 & 0xF8);
    v139 = (_DWORD *)((char *)v475 + (v142 >> 3));
    v475 = v139;
    v140 = v142 & 7;
    v477 = __PAIR64__(v140, v141);
    if (v139 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v139 = v476;
    }
    if (v8[275])
    {
      sub_1C9751100((uint64_t)(v8 + 416), (uint64_t)__p);
      v141 = v477;
      LOBYTE(v140) = BYTE4(v477);
      v139 = v475;
    }
  }
  LODWORD(v477) = (v8[276] << ~(_BYTE)v140) | v141;
  *v139 = bswap32(v477);
  v143 = SHIDWORD(v477) + 1;
  v144 = (_DWORD)v477 << (v143 & 0xF8);
  v145 = (_DWORD *)((char *)v475 + (v143 >> 3));
  v475 = v145;
  v146 = v143 & 7;
  HIDWORD(v477) = v146;
  if (v145 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v145 = v476;
  }
  LODWORD(v477) = (v8[277] << (v146 ^ 0x1F)) | v144;
  *v145 = bswap32(v477);
  v147 = SHIDWORD(v477) + 1;
  v148 = (_DWORD)v477 << (v147 & 0xF8);
  v149 = (_DWORD *)((char *)v475 + (v147 >> 3));
  v475 = v149;
  v150 = v147 & 7;
  HIDWORD(v477) = v150;
  if (v149 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v149 = v476;
  }
  LODWORD(v477) = (v8[278] << (v150 ^ 0x1F)) | v148;
  *v149 = bswap32(v477);
  v151 = SHIDWORD(v477) + 1;
  v152 = v151 & 0xF8;
  v153 = (_DWORD *)((char *)v475 + (v151 >> 3));
  v475 = v153;
  v154 = v151 & 7;
  HIDWORD(v477) = v154;
  if (v153 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v153 = v476;
  }
  v155 = (_DWORD)v477 << v152;
  if (v8[278])
  {
    LODWORD(v477) = (v8[279] << (28 - v154)) | v155;
    *v153 = bswap32(v477);
    v156 = SHIDWORD(v477) + 4;
    v157 = (_DWORD)v477 << (v156 & 0xF8);
    v158 = (_DWORD *)((char *)v475 + (v156 >> 3));
    v475 = v158;
    v159 = v156 & 7;
    HIDWORD(v477) = v159;
    if (v158 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v158 = v476;
    }
    LODWORD(v477) = (v8[280] << (28 - v159)) | v157;
    *v158 = bswap32(v477);
    v160 = SHIDWORD(v477) + 4;
    v161 = (_DWORD)v477 << (v160 & 0xF8);
    v162 = (_DWORD *)((char *)v475 + (v160 >> 3));
    v475 = v162;
    v163 = v160 & 7;
    HIDWORD(v477) = v163;
    if (v162 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v162 = v476;
    }
    v164 = v8[281] + 1;
    v165 = __clz(v164);
    v166 = 0x80000000 >> v165;
    v167 = (2 * v165) ^ 0x3F;
    LODWORD(v477) = (((v164 - v166) | v166) << (-(char)v163 - v167)) | v161;
    *v162 = bswap32(v477);
    v168 = SHIDWORD(v477) + v167;
    v169 = (_DWORD)v477 << (v168 & 0xF8);
    v170 = (_DWORD *)((char *)v475 + (v168 >> 3));
    v475 = v170;
    v171 = v168 & 7;
    HIDWORD(v477) = v171;
    if (v170 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v170 = v476;
    }
    v172 = v8[282] + 1;
    v173 = __clz(v172);
    LODWORD(v477) = (((v172 - (0x80000000 >> v173)) | (0x80000000 >> v173)) << (-((2 * v173) ^ 0x3F) - v171)) | v169;
    *v170 = bswap32(v477);
    v174 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v173) ^ 0x3F)) & 0xF8);
    v175 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v173) ^ 0x3FuLL)) >> 3));
    v475 = v175;
    v176 = (BYTE4(v477) + ((2 * v173) ^ 0x3F)) & 7;
    HIDWORD(v477) = (HIDWORD(v477) + ((2 * v173) ^ 0x3F)) & 7;
    if (v175 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v175 = v476;
    }
    LODWORD(v477) = (v8[283] << (v176 ^ 0x1F)) | v174;
    *v175 = bswap32(v477);
    v177 = SHIDWORD(v477) + 1;
    v155 = (_DWORD)v477 << (v177 & 0xF8);
    v153 = (_DWORD *)((char *)v475 + (v177 >> 3));
    v475 = v153;
    v154 = v177 & 7;
    HIDWORD(v477) = v154;
    if (v153 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v153 = v476;
    }
  }
  v178 = *((_DWORD *)v8 + 72) + 1;
  v179 = __clz(v178);
  v180 = (v178 - (0x80000000 >> v179)) | (0x80000000 >> v179);
  v181 = 63 - 2 * v179;
  LODWORD(v477) = (v180 << (-(char)v154 - v181)) | v155;
  *v153 = bswap32(v477);
  v182 = SHIDWORD(v477) + v181;
  v183 = (_DWORD)v477 << (v182 & 0xF8);
  v184 = (_DWORD *)((char *)v475 + (v182 >> 3));
  v475 = v184;
  v185 = v182 & 7;
  LODWORD(v477) = v183;
  HIDWORD(v477) = v182 & 7;
  if (v184 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v184 = v476;
  }
  if (*((_DWORD *)v8 + 72))
  {
    v186 = 0;
    v187 = 0;
    while (1)
    {
      v4 = sub_1C982EF5C(*((_QWORD *)v8 + 37) + v186, (uint64_t)__p, (uint64_t)v8, v187);
      if (v4)
        goto LABEL_3;
      ++v187;
      v186 += 248;
      if (v187 >= *((unsigned int *)v8 + 72))
      {
        v183 = v477;
        v185 = BYTE4(v477);
        v184 = v475;
        break;
      }
    }
  }
  LODWORD(v477) = (v8[320] << ~v185) | v183;
  *v184 = bswap32(v477);
  v188 = SHIDWORD(v477) + 1;
  v189 = v188 & 0xF8;
  v190 = (_DWORD *)((char *)v475 + (v188 >> 3));
  v475 = v190;
  v191 = v188 & 7;
  HIDWORD(v477) = v191;
  if (v190 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v190 = v476;
  }
  v192 = (_DWORD)v477 << v189;
  if (v8[320])
  {
    v193 = *((_DWORD *)v8 + 81) + 1;
    v194 = __clz(v193);
    v195 = (v193 - (0x80000000 >> v194)) | (0x80000000 >> v194);
    v196 = 63 - 2 * v194;
    LODWORD(v477) = (v195 << (-(char)v191 - v196)) | v192;
    *v190 = bswap32(v477);
    v197 = SHIDWORD(v477) + v196;
    v192 = (_DWORD)v477 << (v197 & 0xF8);
    v190 = (_DWORD *)((char *)v475 + (v197 >> 3));
    v475 = v190;
    v191 = v197 & 7;
    HIDWORD(v477) = v191;
    if (v190 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v190 = v476;
    }
    if (*((_DWORD *)v8 + 81))
    {
      v198 = 0;
      do
      {
        v199 = *(unsigned __int16 *)&v8[2 * v198 + 328] + 1;
        v200 = __clz(v199);
        v201 = 0x80000000 >> v200;
        v202 = (2 * v200) ^ 0x3F;
        LODWORD(v477) = (((v199 - v201) | v201) << (-(char)v191 - v202)) | v192;
        *v190 = bswap32(v477);
        v203 = SHIDWORD(v477) + v202;
        v204 = (_DWORD *)((char *)v475 + (v203 >> 3));
        v475 = v204;
        HIDWORD(v477) = v203 & 7;
        if (v204 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v204 = v476;
        }
        LODWORD(v477) = (((*((_DWORD *)v8 + 98) >> v198) & 1) << (v203 & 7 ^ 0x1F)) | ((_DWORD)v477 << (v203 & 0xF8));
        *v204 = bswap32(v477);
        v205 = SHIDWORD(v477) + 1;
        v192 = (_DWORD)v477 << (v205 & 0xF8);
        v190 = (_DWORD *)((char *)v475 + (v205 >> 3));
        v475 = v190;
        v191 = v205 & 7;
        v477 = __PAIR64__(v191, v192);
        if (v190 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v190 = v476;
        }
        ++v198;
      }
      while (v198 < *((unsigned int *)v8 + 81));
    }
  }
  LODWORD(v477) = (v8[396] << (v191 ^ 0x1F)) | v192;
  *v190 = bswap32(v477);
  v206 = SHIDWORD(v477) + 1;
  v207 = (_DWORD)v477 << (v206 & 0xF8);
  v208 = (_DWORD *)((char *)v475 + (v206 >> 3));
  v475 = v208;
  v209 = v206 & 7;
  HIDWORD(v477) = v209;
  if (v208 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v208 = v476;
  }
  LODWORD(v477) = (v8[397] << (v209 ^ 0x1F)) | v207;
  *v208 = bswap32(v477);
  v210 = SHIDWORD(v477) + 1;
  v211 = (_DWORD)v477 << (v210 & 0xF8);
  v212 = (_DWORD *)((char *)v475 + (v210 >> 3));
  v475 = v212;
  v213 = v210 & 7;
  HIDWORD(v477) = v213;
  if (v212 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v212 = v476;
  }
  LODWORD(v477) = (v8[398] << (v213 ^ 0x1F)) | v211;
  *v212 = bswap32(v477);
  v214 = SHIDWORD(v477) + 1;
  v215 = (_DWORD *)((char *)v475 + (v214 >> 3));
  v475 = v215;
  v216 = v214 & 7;
  HIDWORD(v477) = v214 & 7;
  if (v215 >= v476)
  {
    v478 = 1;
    v475 = v476;
    v215 = v476;
  }
  v217 = (_DWORD)v477 << (v214 & 0xF8);
  if (v8[398])
  {
    if (*((_WORD *)v8 + 992))
      v218 = 1;
    else
      v218 = *((_WORD *)v8 + 993) != 0;
    if (v8[1992] == 2 && v8[1993] == 2)
    {
      v219 = v8[1994];
      v220 = v219 != 2;
      v221 = v8 + 1991;
      v222 = 1;
      if (!v8[1991] && v219 == 2)
      {
        v220 = 0;
        v222 = v8[1990] != 5;
      }
    }
    else
    {
      v221 = v8 + 1991;
      v220 = 1;
      v222 = 1;
    }
    if (v8[1995])
      v223 = 1;
    else
      v223 = v8[1996] != 0;
    v224 = *((_WORD *)v8 + 1000) || *((_WORD *)v8 + 1001) || *((_WORD *)v8 + 1002) || *((_WORD *)v8 + 1003) != 0;
    LODWORD(v477) = (v218 << (v216 ^ 0x1F)) | v217;
    *v215 = bswap32(v477);
    v227 = SHIDWORD(v477) + 1;
    v225 = v227 & 0xF8;
    v226 = (_DWORD *)((char *)v475 + (v227 >> 3));
    v475 = v226;
    LODWORD(v227) = v227 & 7;
    HIDWORD(v477) = v227;
    if (v226 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v226 = v476;
    }
    v228 = (_DWORD)v477 << v225;
    if (v218)
    {
      LODWORD(v477) = (255 << (24 - v227)) | v228;
      *v226 = bswap32(v477);
      v229 = SHIDWORD(v477) + 8;
      v230 = (_DWORD)v477 << (v229 & 0xF8);
      v231 = (_DWORD *)((char *)v475 + (v229 >> 3));
      v475 = v231;
      v232 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v231 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v231 = v476;
      }
      LODWORD(v477) = (*((unsigned __int16 *)v8 + 992) << (16 - v232)) | v230;
      *v231 = bswap32(v477);
      v233 = SHIDWORD(v477) + 16;
      v234 = (_DWORD)v477 << (v233 & 0xF8);
      v227 = (unint64_t)v475 + (v233 >> 3);
      v475 = (_DWORD *)v227;
      v235 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v227 >= (unint64_t)v476)
      {
        v478 = 1;
        v475 = v476;
        v227 = (unint64_t)v476;
      }
      LODWORD(v477) = (*((unsigned __int16 *)v8 + 993) << (16 - v235)) | v234;
      *(_DWORD *)v227 = bswap32(v477);
      v236 = SHIDWORD(v477) + 16;
      v228 = (_DWORD)v477 << (v236 & 0xF8);
      v226 = (_DWORD *)((char *)v475 + (v236 >> 3));
      v475 = v226;
      LOBYTE(v227) = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v226 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v226 = v476;
      }
    }
    LODWORD(v477) = (v8[1988] << (v227 ^ 0x1F)) | v228;
    *v226 = bswap32(v477);
    v237 = SHIDWORD(v477) + 1;
    v238 = v237 & 0xF8;
    v239 = (_DWORD *)((char *)v475 + (v237 >> 3));
    v475 = v239;
    v240 = v237 & 7;
    HIDWORD(v477) = v240;
    if (v239 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v239 = v476;
    }
    v241 = (_DWORD)v477 << v238;
    if (v8[1988])
    {
      LODWORD(v477) = (v8[1989] << (v240 ^ 0x1F)) | v241;
      *v239 = bswap32(v477);
      v242 = SHIDWORD(v477) + 1;
      v241 = (_DWORD)v477 << (v242 & 0xF8);
      v239 = (_DWORD *)((char *)v475 + (v242 >> 3));
      v475 = v239;
      v240 = v242 & 7;
      HIDWORD(v477) = v240;
      if (v239 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v239 = v476;
      }
    }
    LODWORD(v477) = (v222 << (v240 ^ 0x1F)) | v241;
    *v239 = bswap32(v477);
    v243 = SHIDWORD(v477) + 1;
    v244 = v243 & 0xF8;
    v245 = (_DWORD *)((char *)v475 + (v243 >> 3));
    v475 = v245;
    v246 = v243 & 7;
    HIDWORD(v477) = v246;
    if (v245 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v245 = v476;
    }
    v247 = (_DWORD)v477 << v244;
    if (v222)
    {
      LODWORD(v477) = (v8[1990] << (29 - v246)) | v247;
      *v245 = bswap32(v477);
      v248 = SHIDWORD(v477) + 3;
      v249 = (_DWORD)v477 << (v248 & 0xF8);
      v250 = (_DWORD *)((char *)v475 + (v248 >> 3));
      v475 = v250;
      v251 = v248 & 7;
      HIDWORD(v477) = v251;
      if (v250 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v250 = v476;
      }
      LODWORD(v477) = (*v221 << (v251 ^ 0x1F)) | v249;
      *v250 = bswap32(v477);
      v252 = SHIDWORD(v477) + 1;
      v253 = (_DWORD)v477 << (v252 & 0xF8);
      v254 = (_DWORD *)((char *)v475 + (v252 >> 3));
      v475 = v254;
      v255 = v252 & 7;
      HIDWORD(v477) = v255;
      if (v254 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v254 = v476;
      }
      LODWORD(v477) = (v220 << (v255 ^ 0x1F)) | v253;
      *v254 = bswap32(v477);
      v256 = SHIDWORD(v477) + 1;
      v257 = v256 & 0xF8;
      v245 = (_DWORD *)((char *)v475 + (v256 >> 3));
      v475 = v245;
      v246 = v256 & 7;
      HIDWORD(v477) = v246;
      if (v245 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v245 = v476;
      }
      v247 = (_DWORD)v477 << v257;
      if (v220)
      {
        LODWORD(v477) = (v8[1992] << (24 - v246)) | v247;
        *v245 = bswap32(v477);
        v258 = SHIDWORD(v477) + 8;
        v259 = (_DWORD)v477 << (v258 & 0xF8);
        v260 = (_DWORD *)((char *)v475 + (v258 >> 3));
        v475 = v260;
        v261 = BYTE4(v477) & 7;
        HIDWORD(v477) = BYTE4(v477) & 7;
        if (v260 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v260 = v476;
        }
        LODWORD(v477) = (v8[1993] << (24 - v261)) | v259;
        *v260 = bswap32(v477);
        v262 = SHIDWORD(v477) + 8;
        v263 = (_DWORD)v477 << (v262 & 0xF8);
        v264 = (_DWORD *)((char *)v475 + (v262 >> 3));
        v475 = v264;
        v265 = BYTE4(v477) & 7;
        HIDWORD(v477) = BYTE4(v477) & 7;
        if (v264 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v264 = v476;
        }
        LODWORD(v477) = (v8[1994] << (24 - v265)) | v263;
        *v264 = bswap32(v477);
        v266 = SHIDWORD(v477) + 8;
        v247 = (_DWORD)v477 << (v266 & 0xF8);
        v245 = (_DWORD *)((char *)v475 + (v266 >> 3));
        v475 = v245;
        LOBYTE(v246) = BYTE4(v477) & 7;
        HIDWORD(v477) = BYTE4(v477) & 7;
        if (v245 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v245 = v476;
        }
      }
    }
    LODWORD(v477) = (v223 << (v246 ^ 0x1F)) | v247;
    *v245 = bswap32(v477);
    v267 = SHIDWORD(v477) + 1;
    v268 = v267 & 0xF8;
    v269 = (_DWORD *)((char *)v475 + (v267 >> 3));
    v475 = v269;
    v270 = v267 & 7;
    HIDWORD(v477) = v270;
    if (v269 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v269 = v476;
    }
    v271 = (_DWORD)v477 << v268;
    if (v223)
    {
      v272 = v8[1995] + 1;
      v273 = __clz(v272);
      v274 = 0x80000000 >> v273;
      v275 = (2 * v273) ^ 0x3F;
      LODWORD(v477) = (((v272 - v274) | v274) << (-(char)v270 - v275)) | v271;
      *v269 = bswap32(v477);
      v276 = SHIDWORD(v477) + v275;
      v277 = (_DWORD)v477 << (v276 & 0xF8);
      v278 = (_DWORD *)((char *)v475 + (v276 >> 3));
      v475 = v278;
      v270 = v276 & 7;
      HIDWORD(v477) = v270;
      if (v278 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v278 = v476;
      }
      v279 = v8[1996] + 1;
      v280 = __clz(v279);
      LODWORD(v477) = (((v279 - (0x80000000 >> v280)) | (0x80000000 >> v280)) << (-((2 * v280) ^ 0x3F) - v270)) | v277;
      *v278 = bswap32(v477);
      v271 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v280) ^ 0x3F)) & 0xF8);
      v269 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v280) ^ 0x3FuLL)) >> 3));
      v475 = v269;
      LOBYTE(v270) = (BYTE4(v477) + ((2 * v280) ^ 0x3F)) & 7;
      HIDWORD(v477) = (HIDWORD(v477) + ((2 * v280) ^ 0x3F)) & 7;
      if (v269 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v269 = v476;
      }
    }
    LODWORD(v477) = (v8[1997] << (v270 ^ 0x1F)) | v271;
    *v269 = bswap32(v477);
    v281 = SHIDWORD(v477) + 1;
    v282 = (_DWORD)v477 << (v281 & 0xF8);
    v283 = (_DWORD *)((char *)v475 + (v281 >> 3));
    v475 = v283;
    v284 = v281 & 7;
    HIDWORD(v477) = v284;
    if (v283 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v283 = v476;
    }
    LODWORD(v477) = (v8[1998] << (v284 ^ 0x1F)) | v282;
    *v283 = bswap32(v477);
    v285 = SHIDWORD(v477) + 1;
    v286 = (_DWORD)v477 << (v285 & 0xF8);
    v287 = (_DWORD *)((char *)v475 + (v285 >> 3));
    v475 = v287;
    v288 = v285 & 7;
    HIDWORD(v477) = v288;
    if (v287 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v287 = v476;
    }
    LODWORD(v477) = (v8[1999] << (v288 ^ 0x1F)) | v286;
    *v287 = bswap32(v477);
    v289 = SHIDWORD(v477) + 1;
    v290 = (_DWORD)v477 << (v289 & 0xF8);
    v291 = (_DWORD *)((char *)v475 + (v289 >> 3));
    v475 = v291;
    v292 = v289 & 7;
    HIDWORD(v477) = v292;
    if (v291 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v291 = v476;
    }
    LODWORD(v477) = (v224 << (v292 ^ 0x1F)) | v290;
    *v291 = bswap32(v477);
    v293 = SHIDWORD(v477) + 1;
    v294 = v293 & 0xF8;
    v295 = (_DWORD *)((char *)v475 + (v293 >> 3));
    v475 = v295;
    v296 = v293 & 7;
    HIDWORD(v477) = v296;
    if (v295 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v295 = v476;
    }
    v297 = (_DWORD)v477 << v294;
    if (v224)
    {
      v298 = *((unsigned __int16 *)v8 + 1000) + 1;
      v299 = __clz(v298);
      v300 = 0x80000000 >> v299;
      v301 = (2 * v299) ^ 0x3F;
      LODWORD(v477) = (((v298 - v300) | v300) << (-(char)v296 - v301)) | v297;
      *v295 = bswap32(v477);
      v302 = SHIDWORD(v477) + v301;
      v303 = (_DWORD)v477 << (v302 & 0xF8);
      v304 = (_DWORD *)((char *)v475 + (v302 >> 3));
      v475 = v304;
      v305 = v302 & 7;
      HIDWORD(v477) = v305;
      if (v304 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v304 = v476;
      }
      v306 = *((unsigned __int16 *)v8 + 1001) + 1;
      v307 = __clz(v306);
      LODWORD(v477) = (((v306 - (0x80000000 >> v307)) | (0x80000000 >> v307)) << (-((2 * v307) ^ 0x3F) - v305)) | v303;
      *v304 = bswap32(v477);
      v308 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v307) ^ 0x3F)) & 0xF8);
      v309 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v307) ^ 0x3FuLL)) >> 3));
      v475 = v309;
      v310 = (BYTE4(v477) + ((2 * v307) ^ 0x3F)) & 7;
      HIDWORD(v477) = (HIDWORD(v477) + ((2 * v307) ^ 0x3F)) & 7;
      if (v309 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v309 = v476;
      }
      v311 = *((unsigned __int16 *)v8 + 1002) + 1;
      v312 = __clz(v311);
      v313 = (v311 - (0x80000000 >> v312)) | (0x80000000 >> v312);
      v314 = (2 * v312) ^ 0x3F;
      LODWORD(v477) = (v313 << (-(char)v314 - v310)) | v308;
      *v309 = bswap32(v477);
      v315 = SHIDWORD(v477) + v314;
      v316 = (_DWORD)v477 << (v315 & 0xF8);
      v317 = (_DWORD *)((char *)v475 + (v315 >> 3));
      v475 = v317;
      v296 = v315 & 7;
      HIDWORD(v477) = v296;
      if (v317 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v317 = v476;
      }
      v318 = *((unsigned __int16 *)v8 + 1003) + 1;
      v319 = __clz(v318);
      LODWORD(v477) = (((v318 - (0x80000000 >> v319)) | (0x80000000 >> v319)) << (-((2 * v319) ^ 0x3F) - v296)) | v316;
      *v317 = bswap32(v477);
      v297 = (_DWORD)v477 << ((BYTE4(v477) + ((2 * v319) ^ 0x3F)) & 0xF8);
      v295 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v319) ^ 0x3FuLL)) >> 3));
      v475 = v295;
      LOBYTE(v296) = (BYTE4(v477) + ((2 * v319) ^ 0x3F)) & 7;
      HIDWORD(v477) = (HIDWORD(v477) + ((2 * v319) ^ 0x3F)) & 7;
      if (v295 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v295 = v476;
      }
    }
    LODWORD(v477) = (v8[2008] << (v296 ^ 0x1F)) | v297;
    *v295 = bswap32(v477);
    v320 = SHIDWORD(v477) + 1;
    v321 = v320 & 0xF8;
    v322 = (_DWORD *)((char *)v475 + (v320 >> 3));
    v475 = v322;
    v323 = v320 & 7;
    HIDWORD(v477) = v323;
    if (v322 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v322 = v476;
    }
    v324 = (_DWORD)v477 << v321;
    if (v8[2008])
    {
      v325 = *((_DWORD *)v8 + 503);
      LODWORD(v477) = (HIWORD(v325) << (16 - v323)) | v324;
      *v322 = bswap32(v477);
      v326 = SHIDWORD(v477) + 16;
      v327 = (_DWORD)v477 << (v326 & 0xF8);
      v328 = (_DWORD *)((char *)v475 + (v326 >> 3));
      v475 = v328;
      v329 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v328 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v328 = v476;
      }
      LODWORD(v477) = ((unsigned __int16)v325 << (16 - v329)) | v327;
      *v328 = bswap32(v477);
      v330 = SHIDWORD(v477) + 16;
      v331 = (_DWORD)v477 << (v330 & 0xF8);
      v332 = (_DWORD *)((char *)v475 + (v330 >> 3));
      v475 = v332;
      v333 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v332 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v332 = v476;
      }
      v334 = *((_DWORD *)v8 + 504);
      LODWORD(v477) = (HIWORD(v334) << (16 - v333)) | v331;
      *v332 = bswap32(v477);
      v335 = SHIDWORD(v477) + 16;
      v336 = (_DWORD)v477 << (v335 & 0xF8);
      v337 = (_DWORD *)((char *)v475 + (v335 >> 3));
      v475 = v337;
      v338 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v337 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v337 = v476;
      }
      LODWORD(v477) = ((unsigned __int16)v334 << (16 - v338)) | v336;
      *v337 = bswap32(v477);
      v339 = SHIDWORD(v477) + 16;
      v340 = (_DWORD)v477 << (v339 & 0xF8);
      v341 = (_DWORD *)((char *)v475 + (v339 >> 3));
      v475 = v341;
      v342 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v341 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v341 = v476;
      }
      LODWORD(v477) = (v8[2020] << (v342 ^ 0x1F)) | v340;
      *v341 = bswap32(v477);
      v343 = SHIDWORD(v477) + 1;
      v344 = v343 & 0xF8;
      v345 = (_DWORD *)((char *)v475 + (v343 >> 3));
      v475 = v345;
      v346 = v343 & 7;
      HIDWORD(v477) = v346;
      if (v345 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v345 = v476;
      }
      v347 = (_DWORD)v477 << v344;
      if (v8[2020])
      {
        v348 = *((_DWORD *)v8 + 506) + 1;
        v349 = __clz(v348);
        v350 = (v348 - (0x80000000 >> v349)) | (0x80000000 >> v349);
        v351 = 63 - 2 * v349;
        LODWORD(v477) = (v350 << (-(char)v346 - v351)) | v347;
        *v345 = bswap32(v477);
        v352 = SHIDWORD(v477) + v351;
        v347 = (_DWORD)v477 << (v352 & 0xF8);
        v345 = (_DWORD *)((char *)v475 + (v352 >> 3));
        v475 = v345;
        v346 = v352 & 7;
        HIDWORD(v477) = v346;
        if (v345 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v345 = v476;
        }
      }
      LODWORD(v477) = (v8[2028] << (v346 ^ 0x1F)) | v347;
      *v345 = bswap32(v477);
      v353 = SHIDWORD(v477) + 1;
      v354 = v353 & 0xF8;
      v322 = (_DWORD *)((char *)v475 + (v353 >> 3));
      v475 = v322;
      v323 = v353 & 7;
      HIDWORD(v477) = v323;
      if (v322 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v322 = v476;
      }
      v324 = (_DWORD)v477 << v354;
      if (v8[2028])
      {
        v355 = v8[1];
        LODWORD(v477) = (v8[2032] << (v323 ^ 0x1F)) | v324;
        *v322 = bswap32(v477);
        v356 = SHIDWORD(v477) + 1;
        v357 = (_DWORD)v477 << (v356 & 0xF8);
        v358 = (_DWORD *)((char *)v475 + (v356 >> 3));
        v475 = v358;
        v359 = v356 & 7;
        HIDWORD(v477) = v359;
        if (v358 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v358 = v476;
        }
        v360 = v8 + 2032;
        LODWORD(v477) = (v8[2033] << (v359 ^ 0x1F)) | v357;
        *v358 = bswap32(v477);
        v361 = SHIDWORD(v477) + 1;
        v362 = (_DWORD)v477 << (v361 & 0xF8);
        v363 = (_DWORD *)((char *)v475 + (v361 >> 3));
        v475 = v363;
        v364 = v361 & 7;
        v477 = __PAIR64__(v364, v362);
        if (v363 >= v476)
        {
          v478 = 1;
          v475 = v476;
          v363 = v476;
        }
        v365 = v355 + 1;
        if (*v360 || v8[2033])
        {
          LODWORD(v477) = (v8[2034] << (v364 ^ 0x1F)) | v362;
          *v363 = bswap32(v477);
          v366 = SHIDWORD(v477) + 1;
          v367 = v366 & 0xF8;
          v368 = (_DWORD *)((char *)v475 + (v366 >> 3));
          v475 = v368;
          v369 = v366 & 7;
          HIDWORD(v477) = v369;
          if (v368 >= v476)
          {
            v478 = 1;
            v475 = v476;
            v368 = v476;
          }
          v370 = (_DWORD)v477 << v367;
          if (v8[2034])
          {
            LODWORD(v477) = (v8[2035] << (24 - v369)) | v370;
            *v368 = bswap32(v477);
            v371 = SHIDWORD(v477) + 8;
            v372 = (_DWORD)v477 << (v371 & 0xF8);
            v373 = (_DWORD *)((char *)v475 + (v371 >> 3));
            v475 = v373;
            v374 = BYTE4(v477) & 7;
            HIDWORD(v477) = BYTE4(v477) & 7;
            if (v373 >= v476)
            {
              v478 = 1;
              v475 = v476;
              v373 = v476;
            }
            LODWORD(v477) = (v8[2036] << (27 - v374)) | v372;
            *v373 = bswap32(v477);
            v375 = SHIDWORD(v477) + 5;
            v376 = (_DWORD)v477 << (v375 & 0xF8);
            v377 = (_DWORD *)((char *)v475 + (v375 >> 3));
            v475 = v377;
            v378 = v375 & 7;
            HIDWORD(v477) = v378;
            if (v377 >= v476)
            {
              v478 = 1;
              v475 = v476;
              v377 = v476;
            }
            LODWORD(v477) = (v8[2037] << (v378 ^ 0x1F)) | v376;
            *v377 = bswap32(v477);
            v379 = SHIDWORD(v477) + 1;
            v380 = (_DWORD)v477 << (v379 & 0xF8);
            v381 = (_DWORD *)((char *)v475 + (v379 >> 3));
            v475 = v381;
            v382 = v379 & 7;
            HIDWORD(v477) = v382;
            if (v381 >= v476)
            {
              v478 = 1;
              v475 = v476;
              v381 = v476;
            }
            LODWORD(v477) = (v8[2038] << (27 - v382)) | v380;
            *v381 = bswap32(v477);
            v383 = SHIDWORD(v477) + 5;
            v370 = (_DWORD)v477 << (v383 & 0xF8);
            v368 = (_DWORD *)((char *)v475 + (v383 >> 3));
            v475 = v368;
            v369 = v383 & 7;
            HIDWORD(v477) = v369;
            if (v368 >= v476)
            {
              v478 = 1;
              v475 = v476;
              v368 = v476;
            }
          }
          LODWORD(v477) = (v8[2039] << (28 - v369)) | v370;
          *v368 = bswap32(v477);
          v384 = SHIDWORD(v477) + 4;
          v385 = (_DWORD)v477 << (v384 & 0xF8);
          v386 = (_DWORD *)((char *)v475 + (v384 >> 3));
          v475 = v386;
          v387 = v384 & 7;
          HIDWORD(v477) = v387;
          if (v386 >= v476)
          {
            v478 = 1;
            v475 = v476;
            v386 = v476;
          }
          LODWORD(v477) = (v8[2040] << (28 - v387)) | v385;
          *v386 = bswap32(v477);
          v388 = SHIDWORD(v477) + 4;
          v389 = v388 & 0xF8;
          v390 = (_DWORD *)((char *)v475 + (v388 >> 3));
          v475 = v390;
          v391 = v388 & 7;
          HIDWORD(v477) = v391;
          if (v390 >= v476)
          {
            v478 = 1;
            v475 = v476;
            v390 = v476;
          }
          v392 = (_DWORD)v477 << v389;
          if (v8[2034])
          {
            LODWORD(v477) = (v8[2041] << (28 - v391)) | v392;
            *v390 = bswap32(v477);
            v393 = SHIDWORD(v477) + 4;
            v392 = (_DWORD)v477 << (v393 & 0xF8);
            v390 = (_DWORD *)((char *)v475 + (v393 >> 3));
            v475 = v390;
            v391 = v393 & 7;
            HIDWORD(v477) = v391;
            if (v390 >= v476)
            {
              v478 = 1;
              v475 = v476;
              v390 = v476;
            }
          }
          LODWORD(v477) = (v8[2042] << (27 - v391)) | v392;
          *v390 = bswap32(v477);
          v394 = SHIDWORD(v477) + 5;
          v395 = (_DWORD)v477 << (v394 & 0xF8);
          v396 = (_DWORD *)((char *)v475 + (v394 >> 3));
          v475 = v396;
          v397 = v394 & 7;
          HIDWORD(v477) = v397;
          if (v396 >= v476)
          {
            v478 = 1;
            v475 = v476;
            v396 = v476;
          }
          LODWORD(v477) = (v8[2043] << (27 - v397)) | v395;
          *v396 = bswap32(v477);
          v398 = SHIDWORD(v477) + 5;
          v399 = (_DWORD)v477 << (v398 & 0xF8);
          v400 = (_DWORD *)((char *)v475 + (v398 >> 3));
          v475 = v400;
          v401 = v398 & 7;
          HIDWORD(v477) = v401;
          if (v400 >= v476)
          {
            v478 = 1;
            v475 = v476;
            v400 = v476;
          }
          LODWORD(v477) = (v8[2044] << (27 - v401)) | v399;
          *v400 = bswap32(v477);
          v402 = SHIDWORD(v477) + 5;
          v475 = (_DWORD *)((char *)v475 + (v402 >> 3));
          LODWORD(v477) = (_DWORD)v477 << (v402 & 0xF8);
          HIDWORD(v477) = v402 & 7;
          if (v475 >= v476)
          {
            v478 = 1;
            v475 = v476;
          }
        }
        v403 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v8 + 257) - *((_QWORD *)v8 + 256)) >> 3);
        if (v403 == v365)
        {
          v404 = 0;
          while (1)
          {
            v405 = *((_QWORD *)v8 + 256);
            LODWORD(v477) = (*(unsigned __int8 *)(v405 + v404) << ~BYTE4(v477)) | v477;
            *v475 = bswap32(v477);
            v406 = SHIDWORD(v477) + 1;
            v407 = (_DWORD *)((char *)v475 + (v406 >> 3));
            v475 = v407;
            LOBYTE(v408) = v406 & 7;
            HIDWORD(v477) = v406 & 7;
            if (v407 >= v476)
            {
              v478 = 1;
              v475 = v476;
              v407 = v476;
            }
            v409 = (_DWORD)v477 << (v406 & 0xF8);
            if (!*(_BYTE *)(v405 + v404))
            {
              LODWORD(v477) = (*(unsigned __int8 *)(v405 + v404 + 1) << (v408 ^ 0x1F)) | v409;
              *v407 = bswap32(v477);
              v410 = SHIDWORD(v477) + 1;
              v409 = (_DWORD)v477 << (v410 & 0xF8);
              v407 = (_DWORD *)((char *)v475 + (v410 >> 3));
              v475 = v407;
              v408 = v410 & 7;
              HIDWORD(v477) = v408;
              if (v407 >= v476)
              {
                v478 = 1;
                v475 = v476;
                v407 = v476;
              }
            }
            v411 = v405 + v404;
            if (*(_BYTE *)(v405 + v404 + 1))
            {
              v412 = *(unsigned __int16 *)(v411 + 2) + 1;
              v413 = __clz(v412);
              v414 = (v412 - (0x80000000 >> v413)) | (0x80000000 >> v413);
              v415 = (2 * v413) ^ 0x3F;
              LODWORD(v477) = (v414 << (-(char)v408 - v415)) | v409;
              *v407 = bswap32(v477);
              v416 = v477;
              v417 = SHIDWORD(v477) + v415;
            }
            else
            {
              LODWORD(v477) = (*(unsigned __int8 *)(v411 + 4) << (v408 ^ 0x1F)) | v409;
              *v407 = bswap32(v477);
              v416 = v477;
              v417 = SHIDWORD(v477) + 1;
            }
            v418 = v416 << (v417 & 0xF8);
            v419 = (_DWORD *)((char *)v475 + (v417 >> 3));
            v475 = v419;
            v420 = v417 & 7;
            v477 = __PAIR64__(v420, v418);
            if (v419 >= v476)
            {
              v478 = 1;
              v475 = v476;
              v419 = v476;
            }
            if (!*(_BYTE *)(v405 + v404 + 4))
            {
              v421 = *(unsigned __int16 *)(v405 + v404 + 6) + 1;
              v422 = __clz(v421);
              v423 = 0x80000000 >> v422;
              v424 = (2 * v422) ^ 0x3F;
              LODWORD(v477) = (((v421 - v423) | v423) << (-(char)v420 - v424)) | v418;
              *v419 = bswap32(v477);
              v425 = SHIDWORD(v477) + v424;
              v475 = (_DWORD *)((char *)v475 + (v425 >> 3));
              LODWORD(v477) = (_DWORD)v477 << (v425 & 0xF8);
              HIDWORD(v477) = v425 & 7;
              if (v475 >= v476)
              {
                v478 = 1;
                v475 = v476;
              }
            }
            if (*v360)
            {
              v4 = sub_1C97A0108(v405 + v404, (uint64_t)__p, (uint64_t)(v8 + 2032), (_QWORD *)(v405 + v404 + 8));
              if (v4)
                break;
            }
            if (v8[2033]
              && sub_1C97A0108(v405 + v404, (uint64_t)__p, (uint64_t)(v8 + 2032), (_QWORD *)(v405 + v404 + 32)))
            {
              v4 = 1;
              goto LABEL_3;
            }
            v404 += 56;
            if (!--v403)
            {
              v324 = v477;
              LOBYTE(v323) = BYTE4(v477);
              v322 = v475;
              goto LABEL_258;
            }
          }
        }
        else
        {
          v4 = -12911;
        }
        goto LABEL_3;
      }
    }
LABEL_258:
    LODWORD(v477) = (v8[2072] << ~(_BYTE)v323) | v324;
    *v322 = bswap32(v477);
    v426 = SHIDWORD(v477) + 1;
    v215 = (_DWORD *)((char *)v475 + (v426 >> 3));
    v475 = v215;
    v216 = v426 & 7;
    HIDWORD(v477) = v426 & 7;
    if (v215 >= v476)
    {
      v478 = 1;
      v475 = v476;
      v215 = v476;
    }
    v217 = (_DWORD)v477 << (v426 & 0xF8);
    if (v8[2072])
    {
      LODWORD(v477) = (v8[2073] << (v216 ^ 0x1F)) | v217;
      *v215 = bswap32(v477);
      v427 = SHIDWORD(v477) + 1;
      v428 = (_DWORD)v477 << (v427 & 0xF8);
      v429 = (_DWORD *)((char *)v475 + (v427 >> 3));
      v475 = v429;
      v430 = v427 & 7;
      HIDWORD(v477) = v430;
      if (v429 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v429 = v476;
      }
      LODWORD(v477) = (v8[2074] << (v430 ^ 0x1F)) | v428;
      *v429 = bswap32(v477);
      v431 = SHIDWORD(v477) + 1;
      v432 = (_DWORD)v477 << (v431 & 0xF8);
      v433 = (_DWORD *)((char *)v475 + (v431 >> 3));
      v475 = v433;
      v434 = v431 & 7;
      HIDWORD(v477) = v434;
      if (v433 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v433 = v476;
      }
      LODWORD(v477) = (v8[2075] << (v434 ^ 0x1F)) | v432;
      *v433 = bswap32(v477);
      v435 = SHIDWORD(v477) + 1;
      v436 = (_DWORD)v477 << (v435 & 0xF8);
      v437 = (_DWORD *)((char *)v475 + (v435 >> 3));
      v475 = v437;
      v438 = v435 & 7;
      HIDWORD(v477) = v438;
      if (v437 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v437 = v476;
      }
      v439 = *((_DWORD *)v8 + 519) + 1;
      v440 = __clz(v439);
      v441 = (v439 - (0x80000000 >> v440)) | (0x80000000 >> v440);
      v442 = 63 - 2 * v440;
      LODWORD(v477) = (v441 << (-(char)v438 - v442)) | v436;
      *v437 = bswap32(v477);
      v443 = SHIDWORD(v477) + v442;
      v444 = (_DWORD)v477 << (v443 & 0xF8);
      v445 = (_DWORD *)((char *)v475 + (v443 >> 3));
      v475 = v445;
      v446 = v443 & 7;
      HIDWORD(v477) = v446;
      if (v445 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v445 = v476;
      }
      v447 = *((_DWORD *)v8 + 520) + 1;
      v448 = __clz(v447);
      LODWORD(v477) = (((v447 - (0x80000000 >> v448)) | (0x80000000 >> v448)) << (2 * v448 - 63 - v446)) | v444;
      *v445 = bswap32(v477);
      v449 = SHIDWORD(v477) + 63 - 2 * v448;
      v450 = (_DWORD)v477 << (v449 & 0xF8);
      v451 = (_DWORD *)((char *)v475 + (v449 >> 3));
      v475 = v451;
      v452 = v449 & 7;
      HIDWORD(v477) = v452;
      if (v451 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v451 = v476;
      }
      v453 = *((_DWORD *)v8 + 521) + 1;
      v454 = __clz(v453);
      v455 = (v453 - (0x80000000 >> v454)) | (0x80000000 >> v454);
      v456 = 63 - 2 * v454;
      LODWORD(v477) = (v455 << (-(char)v456 - v452)) | v450;
      *v451 = bswap32(v477);
      v457 = SHIDWORD(v477) + v456;
      v458 = (_DWORD)v477 << (v457 & 0xF8);
      v459 = (_DWORD *)((char *)v475 + (v457 >> 3));
      v475 = v459;
      v460 = v457 & 7;
      HIDWORD(v477) = v460;
      if (v459 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v459 = v476;
      }
      v461 = *((_DWORD *)v8 + 522) + 1;
      v462 = __clz(v461);
      LODWORD(v477) = (((v461 - (0x80000000 >> v462)) | (0x80000000 >> v462)) << (2 * v462 - 63 - v460)) | v458;
      *v459 = bswap32(v477);
      v463 = SHIDWORD(v477) + 63 - 2 * v462;
      v464 = (_DWORD)v477 << (v463 & 0xF8);
      v465 = (_DWORD *)((char *)v475 + (v463 >> 3));
      v475 = v465;
      v466 = v463 & 7;
      HIDWORD(v477) = v466;
      if (v465 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v465 = v476;
      }
      v467 = *((_DWORD *)v8 + 523) + 1;
      v468 = __clz(v467);
      v469 = (v467 - (0x80000000 >> v468)) | (0x80000000 >> v468);
      v470 = 63 - 2 * v468;
      LODWORD(v477) = (v469 << (-(char)v470 - v466)) | v464;
      *v465 = bswap32(v477);
      v471 = SHIDWORD(v477) + v470;
      v217 = (_DWORD)v477 << (v471 & 0xF8);
      v215 = (_DWORD *)((char *)v475 + (v471 >> 3));
      v475 = v215;
      v216 = v471 & 7;
      HIDWORD(v477) = v471 & 7;
      if (v215 >= v476)
      {
        v478 = 1;
        v475 = v476;
        v215 = v476;
      }
    }
  }
  LODWORD(v477) = (v8[399] << (v216 ^ 0x1F)) | v217;
  *v215 = bswap32(v477);
  v472 = SHIDWORD(v477) + 1;
  v475 = (_DWORD *)((char *)v475 + (v472 >> 3));
  LODWORD(v477) = (_DWORD)v477 << (v472 & 0xF8);
  HIDWORD(v477) = v472 & 7;
  if (v475 >= v476)
  {
    v478 = 1;
    v475 = v476;
  }
  if (v8[399])
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("SPS extension encoding not implemented!\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "SPS extension encoding not implemented!\n");
    }
    v4 = -12910;
LABEL_3:
    v5 = 0;
    v6 = 0;
    a1 = v4;
    goto LABEL_4;
  }
  sub_1C9750F5C((uint64_t)__p);
  v5 = off_1ED1ACCC8(a2);
  *(_DWORD *)(a1 + 10664) += v5;
  v473 = *(FILE **)(a1 + 240);
  if (v473)
    fwrite(a2, 1uLL, v5, v473);
  if (*(_BYTE *)(a1 + 428))
    sub_1C982F8F8(*(unsigned __int8 **)(a1 + 9752), (FILE *)*MEMORY[0x1E0C80C10]);
  v6 = 1;
LABEL_4:
  if (__p[0])
    operator delete(__p[0]);
  if ((v6 & 1) != 0)
    return v5;
  return a1;
}

void sub_1C97B06E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1C97B0704(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  _DWORD *v27;
  int v28;

  v8 = *(_DWORD *)(a2 + 548);
  *(_QWORD *)(a1 + 576) = a2;
  *(_QWORD *)(a1 + 6464) = *(_QWORD *)(a2 + 10400);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2 + 48;
  sub_1C9746DB4((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 168), *(_QWORD *)(a2 + 176));
  sub_1C9746DB4((_QWORD *)(a1 + 40), *a3, a3[1]);
  sub_1C9746DB4((_QWORD *)(a1 + 56), *a4, a4[1]);
  v9 = *(_QWORD *)(a1 + 6464);
  if (!v9
    || (*(_DWORD *)(a1 + 6480) = *(_DWORD *)(v9 + 1712),
        result = *(double *)(v9 + 1704),
        *(float *)&result = result,
        *(_DWORD *)(a1 + 6488) = LODWORD(result),
        *(_DWORD *)(a1 + 6484) = LODWORD(result),
        *(float *)&result > 0.0))
  {
    *(_QWORD *)(a1 + 1008) = a2 + 360;
    LODWORD(v11) = *(char *)(a2 + 530);
    *(_DWORD *)(a1 + 3000) = v11;
    *(_DWORD *)(a1 + 3008) = -1;
    if ((int)v11 < 0)
      LODWORD(v11) = -1;
    v11 = (int)v11;
    v12 = *(char **)(a1 + 1032);
    v13 = *(_BYTE **)(a1 + 1024);
    v14 = (v12 - v13) >> 4;
    if ((int)v11 <= v14)
    {
      if ((int)v11 >= v14)
        goto LABEL_26;
      v23 = &v13[16 * (int)v11];
    }
    else
    {
      v15 = (int)v11 - v14;
      v16 = *(_QWORD *)(a1 + 1040);
      if (v15 > (v16 - (uint64_t)v12) >> 4)
      {
        if ((v11 & 0x80) != 0)
          sub_1C9747024();
        v17 = v16 - (_QWORD)v13;
        if (v17 >> 3 > (unint64_t)(int)v11)
          v11 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v11;
        if (v18 >> 60)
          sub_1C9724B4C();
        v19 = (char *)operator new(16 * v18);
        v20 = &v19[16 * v14];
        v21 = &v19[16 * v18];
        bzero(v20, 16 * v15);
        v22 = &v20[16 * v15];
        if (v12 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
            v20 -= 16;
            v12 -= 16;
          }
          while (v12 != v13);
          v12 = *(char **)(a1 + 1024);
        }
        *(_QWORD *)(a1 + 1024) = v20;
        *(_QWORD *)(a1 + 1032) = v22;
        *(_QWORD *)(a1 + 1040) = v21;
        if (v12)
          operator delete(v12);
LABEL_26:
        *(_DWORD *)(a1 + 2400) = 0;
        *(_OWORD *)(a1 + 2384) = 0u;
        *(_QWORD *)(a1 + 3040) = *(_QWORD *)(a2 + 10400);
        sub_1C9710DCC((char **)(a1 + 6312), (uint64_t)(*(_DWORD *)(*(_QWORD *)(a2 + 9752) + 208) * *(_DWORD *)(*(_QWORD *)(a2 + 9752) + 204)) >> 6);
        *(_DWORD *)(a1 + 848) = 0;
        if (*(unsigned __int8 *)(a2 + 481) <= 1u && (v24 = *a3, *(_BYTE *)(*a3 + 2028)) && *(_BYTE *)(v24 + 2032))
        {
          v25 = *(_BYTE *)(v24 + 2039) + 6;
          v26 = *(_BYTE *)(v24 + 2040) + 4;
          v27 = *(_DWORD **)(*(_QWORD *)(v24 + 2048) + 8);
          v8 = (*v27 + 1) << v25;
          v28 = (v27[1] + 1) << v26;
          *(_DWORD *)(a1 + 792) = 1092616192;
          if (v28)
          {
LABEL_33:
            *(_DWORD *)(a1 + 776) = v28;
            *(_DWORD *)(a1 + 780) = v28;
            *(_DWORD *)(a1 + 788) = (int)((double)v8 / *(double *)(a2 + 472));
            result = 0.0;
            *(_OWORD *)(a1 + 200) = 0u;
            *(_OWORD *)(a1 + 184) = 0u;
            *(_OWORD *)(a1 + 168) = 0u;
            *(_OWORD *)(a1 + 152) = 0u;
            *(_BYTE *)(a1 + 757) = 0;
            return result;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 792) = 1092616192;
        }
        v28 = (int)(float)((float)v8 * 10.0);
        goto LABEL_33;
      }
      bzero(*(void **)(a1 + 1032), 16 * v15);
      v23 = &v12[16 * v15];
    }
    *(_QWORD *)(a1 + 1032) = v23;
    goto LABEL_26;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("fps MUST be positive\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "fps MUST be positive\n");
  }
  return result;
}

uint64_t sub_1C97B09E8(uint64_t result)
{
  int v1;
  int *v2;
  int v3;

  if (!*(_WORD *)(*(_QWORD *)(result + 576) + 454))
  {
    *(_WORD *)(result + 660) = 0;
    goto LABEL_11;
  }
  v1 = *(unsigned __int16 *)(result + 660);
  if (v1 == 0xFFFF)
  {
    if (*(_BYTE *)(result + 648) == 5)
      LOWORD(v1) = 2;
    else
      LOWORD(v1) = 1;
    *(_WORD *)(result + 660) = v1;
  }
  if ((unsigned __int16)v1 == 2)
  {
    v2 = (int *)(result + 662);
    v3 = 1;
    goto LABEL_13;
  }
  if ((__int16)v1 != 1)
  {
LABEL_11:
    *(_DWORD *)(result + 662) = 0;
    return result;
  }
  v2 = (int *)(result + 662);
  v3 = 65537;
LABEL_13:
  *v2 = v3;
  return result;
}

uint64_t sub_1C97B0A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t **v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  int32x2_t *v18;
  int v19;
  __int32 *v20;
  __int32 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  void *v37;
  int v38;
  void *v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v42;
  void *v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v45)(uint64_t, uint64_t);
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t (*v53)(uint64_t, uint64_t, int, int, uint64_t, _DWORD *, uint64_t);
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  int v64;
  int v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  char **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t i;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  BOOL v103;
  int32x2_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  __int16 *v111;
  __int16 *v112;
  BOOL v113;
  __int16 *v114;
  float32x4_t v115;
  int32x4_t *v116;
  _OWORD *v117;
  float32x4_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  char *v122;
  int v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  BOOL v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  __int16 *v140;
  __int16 *v141;
  BOOL v142;
  __int16 *v143;
  __int16 *v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  char v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  int v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  __int16 v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  _BOOL4 v178;
  _BOOL4 v179;
  BOOL v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  __n128 v187;
  uint64_t v188;
  int v189;
  unsigned int (**v190)(__n128 *, __n128 *);
  unsigned int (*v191)(__n128 *, __n128 *);
  unsigned int (*v192)(__n128 *, __n128 *);
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  __n128 *v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  size_t v204;
  char *v205;
  unsigned int v206;
  size_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  char v214;
  _QWORD *v215;
  uint64_t v216;
  __n128 v217;
  _QWORD *v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  __int16 *v226;
  __int16 *v227;
  BOOL v228;
  __int16 *v229;
  __int16 *v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  unsigned int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  _QWORD *v243;
  uint64_t v244;
  int v245;
  unsigned int v246;
  unint64_t *p_shared_owners;
  unint64_t v248;
  uint64_t v249;
  _DWORD *v250;
  int v251;
  int v252;
  int v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  int v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t (*v264)(uint64_t, int, int, int);
  int v265;
  char *v266;
  int v267;
  unint64_t v268;
  uint64_t v269;
  unsigned __int8 *v270;
  uint64_t v271;
  int v272;
  void *v273;
  int v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  __int16 *v288;
  __int16 *v289;
  __int16 *v290;
  __int16 *v291;
  unsigned int v292;
  char *v293;
  unsigned __int8 *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t v300;
  unsigned int (**v301)(__n128 *, __n128 *);
  int v302;
  uint64_t v303;
  unint64_t v304;
  __int16 v305;
  uint64_t v306;
  int v307;
  unint64_t v308;
  unint64_t v309;
  __int16 v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  __int16 *v317;
  int v318;
  void *v319;
  uint64_t v320;
  unsigned __int8 *v321;
  int v322;
  uint64_t v323;
  __int16 *v324;
  int v325;
  void *v326;
  uint64_t v327;
  unint64_t j;
  unint64_t k;
  uint64_t v330;
  int v331;
  unsigned int v332;
  uint64_t *v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  int v339;
  int v340;
  __n128 *v341;
  __n128 *v342;
  uint64_t v343;
  uint64_t v344;
  __n128 v345;
  double v346;
  uint64_t v347;
  unsigned int v348;
  unsigned int v349;
  int *v350;
  int v351;
  int v352;
  int v353;
  _DWORD *v354;
  unint64_t v355;
  int v356;
  double v357;
  __n128 *v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  unsigned int *v362;
  uint64_t m;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  _DWORD *v367;
  unint64_t v368;
  _BOOL4 *v369;
  unint64_t v370;
  _BOOL4 v371;
  __n128 *v372;
  __n128 *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  int v378;
  int *v379;
  unint64_t v380;
  uint64_t v381;
  char v382;
  _DWORD *v383;
  int v384;
  int *v385;
  int v386;
  unint64_t v387;
  _DWORD *v388;
  int v389;
  uint64_t v390;
  _DWORD *v391;
  int v392;
  uint64_t v393;
  int v394;
  _DWORD *v395;
  unint64_t v396;
  int v397;
  int *v398;
  int v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  int v404;
  int v405;
  uint64_t v406;
  int v407;
  int v408;
  int v409;
  uint64_t v410;
  unint64_t v411;
  int v412;
  int v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  unsigned __int16 *v417;
  unint64_t v418;
  unsigned __int16 *v419;
  const std::nothrow_t *v420;
  unint64_t v421;
  unsigned __int16 *v422;
  unsigned __int16 *v423;
  unsigned int v424;
  unsigned int v425;
  const char *v426;
  uint64_t v427;
  _BYTE *v428;
  uint64_t v429;
  _BYTE *v430;
  uint64_t *v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t *v437;
  uint64_t *v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  _DWORD *v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  _DWORD *v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  _DWORD *v456;
  uint64_t *v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  BOOL v464;
  uint64_t v465;
  char v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  double v470;
  unsigned int v471;
  int v472;
  float v473;
  double v474;
  double v475;
  double v476;
  unint64_t v477;
  double v478;
  double v479;
  _QWORD *v480;
  _BYTE *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  char v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  int v493;
  unsigned int v494;
  int v495;
  int v496;
  int v497;
  unsigned int *v498;
  _QWORD *v499;
  int n;
  int ii;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  unsigned int (**v507)(__n128 *, __n128 *);
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _BYTE *v511;
  int v512;
  int v513;
  int v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  BOOL v518;
  int v519;
  int v520;
  unsigned int v521;
  int v522;
  int v523;
  int jj;
  int kk;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  unsigned int (**v531)(__n128 *, __n128 *);
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  int v536;
  int v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  unsigned int v543;
  int v544;
  int v545;
  uint64_t v546;
  uint8x16_t *v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  int v554;
  int v555;
  uint64_t v556;
  uint16x4_t *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint8x16_t *v561;
  uint16x4_t *v562;
  int v563;
  int v565;
  uint64_t v566;
  int v567;
  int v568;
  uint16x4_t *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint8x16_t *v573;
  uint64_t v574;
  int64x2_t v575;
  int64x2_t v576;
  int64x2_t v577;
  int64x2_t v578;
  uint16x8_t v579;
  uint32x4_t v580;
  uint32x4_t v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  uint8x16_t *v586;
  int v587;
  int v589;
  uint64_t v590;
  int v591;
  unsigned int v592;
  uint8x16_t *v593;
  uint64_t v594;
  uint16x8_t v595;
  uint16x8_t v596;
  uint64_t v597;
  int v598;
  uint8x16_t *v599;
  uint64_t v600;
  uint16x8_t v601;
  uint16x8_t v602;
  uint32x4_t v603;
  uint32x4_t v604;
  uint32x4_t v605;
  uint32x4_t v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  int v613;
  uint64_t v614;
  int mm;
  uint64_t v616;
  int v617;
  int v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  unsigned int v622;
  int v623;
  int v624;
  uint64_t v625;
  int v626;
  int *v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int *v632;
  int v633;
  uint64_t v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  unint64_t v640;
  int v641;
  int *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  uint64_t v651;
  int v652;
  BOOL v653;
  int v654;
  int v655;
  int *v657;
  int v658;
  int v659;
  int *v660;
  uint64_t v661;
  int v662;
  int v663;
  int *v664;
  int v665;
  int v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  BOOL v673;
  int v674;
  int v675;
  int *v676;
  char *v677;
  void *v678;
  int v679;
  int v680;
  uint64_t v681;
  int v682;
  int v683;
  uint64_t v684;
  int v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  int *v689;
  int v690;
  uint64_t v691;
  int v692;
  int v693;
  int v694;
  uint64_t v695;
  int v696;
  int v697;
  int v698;
  _DWORD *v699;
  size_t v700;
  uint64_t v701;
  unsigned int v702;
  unint64_t v703;
  unint64_t v704;
  char v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  int v713;
  char v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  int v723;
  int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  int v728;
  _BYTE *v729;
  char *v730;
  int v731;
  unint64_t v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  int v739;
  int v740;
  uint64_t *v741;
  int v742;
  uint64_t v743;
  std::__shared_weak_count *v744;
  uint64_t v745;
  int *v746;
  uint64_t v747;
  int v748;
  uint64_t v749;
  unsigned __int8 *v750;
  int v751;
  unsigned int v752;
  uint64_t v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  _BOOL4 v758;
  int v759;
  unsigned int (*v760)(__n128 *, __n128 *);
  int v761;
  unint64_t v762;
  int v763;
  int v764;
  char *v765;
  void *v766;
  uint64_t v767;
  uint64_t *v768;
  int v769;
  int v770;
  int v771;
  _BYTE v772[6464];
  unsigned int (*v773[810])(__n128 *, __n128 *);

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  v773[808] = *(unsigned int (**)(__n128 *, __n128 *))MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 *)(v1 + 4536);
  v6 = *(_QWORD *)(v1 + 576);
  atomic_store(2u, (unsigned int *)(v1 + 588));
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 648);
  if (*(_BYTE *)(v1 + 648) && *(_BYTE *)(v1 + 6752))
  {
    v7 = *(_QWORD *)sub_1C97535CC(v6 + 9968, 2u);
    if (v7)
      LODWORD(v7) = *(unsigned __int8 *)(v4 + 648);
    else
      *(_BYTE *)(v4 + 648) = 0;
  }
  v8 = *(_QWORD *)(v4 + 576);
  if ((*(_BYTE *)(v6 + 544) & 2) != 0)
  {
    *(_DWORD *)(v4 + 848) = *(_DWORD *)(v8 + 328);
    if (v7 > 2)
    {
LABEL_10:
      v9 = (*(_DWORD *)(v4 + 652) - (*(_DWORD *)(v8 + 10376) + *(_DWORD *)(v8 + 10380)));
      goto LABEL_12;
    }
    *(_DWORD *)(v8 + 328) = *(_DWORD *)(v4 + 652);
  }
  if ((_DWORD)v7)
    goto LABEL_10;
  v9 = 0;
LABEL_12:
  v10 = (int32x2_t **)(v4 + 632);
  sub_1C974E55C((_QWORD *)(v4 + 632));
  v11 = *(_QWORD *)(v8 + 9784);
  if (!v11)
  {
    v12 = 4294954385;
LABEL_17:
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Recon frame creation failed\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Recon frame creation failed\n");
    }
    return v12;
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, v9, v4 + 632);
  if ((_DWORD)v12)
    goto LABEL_17;
  v13 = *(int32x2_t **)(v4 + 632);
  v13[1] = *(int32x2_t *)(v4 + 652);
  v14 = *(_QWORD *)(v4 + 616);
  *(_OWORD *)v13[2].i8 = *(_OWORD *)(v14 + 16);
  v13[4].i32[0] = *(_DWORD *)(v14 + 32);
  v13[5].i8[0] = *(_BYTE *)(v14 + 40);
  if (*(_BYTE *)(v4 + 648))
    v15 = v5[2216] != 0;
  else
    v15 = 1;
  v13[5].i8[1] = v15;
  if (*(_BYTE *)(v6 + 870))
  {
    *(_OWORD *)v13[144].i8 = 0u;
    v13 = *v10;
  }
  v13[146].i32[0] = -1;
  v17 = *(_QWORD *)(v4 + 616);
  v18 = *(int32x2_t **)(v4 + 632);
  v18[54].i8[0] = *(_BYTE *)(v17 + 432);
  v750 = v5;
  if (*(_BYTE *)(v17 + 432))
  {
    v19 = *(_DWORD *)(v17 + 512);
    if (v19 < 1)
    {
      v19 = *(_DWORD *)(v17 + 504);
      v20 = (__int32 *)(v17 + 508);
    }
    else
    {
      v20 = (__int32 *)(v17 + 516);
    }
    v21 = *v20;
    v18[63].i32[0] = v19;
    v18[63].i32[1] = v21;
    v18[64] = 0;
    v18 = *v10;
  }
  v22 = *(_QWORD *)(v4 + 40);
  v23 = *(unsigned __int8 *)(v22 + 2096);
  v24 = *(_DWORD *)(v22 + 204);
  *(_DWORD *)(v4 + 5528) = v24;
  v25 = *(_DWORD *)(v22 + 208);
  *(_DWORD *)(v4 + 5532) = v25;
  *(int32x2_t *)(v4 + 5536) = vshl_s32(vadd_s32(v18[65], vdup_n_s32(~(-1 << *(_BYTE *)(v22 + 2113)))), vneg_s32(vdup_n_s32(*(unsigned __int8 *)(v22 + 2113))));
  v26 = *(_QWORD *)(v4 + 576);
  v768 = v3;
  v27 = *(char *)(v26 + 444) > 1 || *(char *)(v26 + 492) >= 1 && *(char *)(v26 + 493) > 1;
  *(_BYTE *)(v4 + 816) = v27;
  if (*(_BYTE *)(v26 + 483))
    v28 = 640;
  else
    v28 = 400;
  *(_DWORD *)(v4 + 5600) = v28;
  v29 = (v25 * v24) >> 13;
  if (v29 <= 256)
    v29 = 256;
  *(_DWORD *)(v4 + 5604) = v29;
  *(_DWORD *)(v4 + 5608) = v29 - 1;
  if (*(_WORD *)(v26 + 454) || *(_BYTE *)(v26 + 910) || !*(_DWORD *)(v26 + 456) || *(_BYTE *)(v26 + 912))
    *(_BYTE *)(v4 + 816) = 1;
  v746 = (int *)(v4 + 800);
  v30 = *(unsigned __int8 *)(v22 + 2112);
  *(_DWORD *)(v4 + 800) = v30;
  v31 = *(_DWORD *)(*(_QWORD *)(v4 + 56) + 1636);
  *(_DWORD *)(v4 + 804) = v31;
  v32 = 1 << v30;
  v33 = v24 - 1;
  *(_QWORD *)(v4 + 5632) = ((v24 - 1 + (1 << v30)) >> v30);
  v34 = 1 << v31;
  *(_QWORD *)(v4 + 808) = ((v24 - 1 + (1 << v31)) >> v31);
  *(_DWORD *)(v4 + 6256) = 3;
  v35 = ((v24 + 7) >> 3);
  v36 = (v25 + 7) >> 3;
  *(_QWORD *)(v4 + 6216) = v35;
  *(_DWORD *)(v4 + 6224) = v35;
  *(_DWORD *)(v4 + 6228) = v36;
  *(_DWORD *)(v4 + 5544) = *(_DWORD *)(v4 + 468);
  if ((v30 - 5) <= 0xFFFFFFFC)
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954386;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unsupported log2_unit_size_ %d (update SpatialSumSad)\n", v30);
    syslog(27, "Unsupported log2_unit_size_ %d (update SpatialSumSad)\n", *v746);
    goto LABEL_62;
  }
  v767 = v4;
  if (v23 == 8)
  {
    v754 = (v33 + v32) >> v30;
    v762 = *(int *)(v4 + 472);
    v747 = v4 + 652;
    v37 = sub_1C97D69D0;
    v38 = *(unsigned __int8 *)(v26 + 484);
    if (!*(_BYTE *)(v26 + 484))
      v37 = sub_1C97D6898;
    *(_QWORD *)(v4 + 864) = v37;
    if (v38)
      v39 = sub_1C97D6C18;
    else
      v39 = sub_1C97D6B34;
    v40 = sub_1C97D849C;
    v41 = sub_1C97D829C;
    v42 = sub_1C97D8114;
    v43 = sub_1C97D7FF0;
    v44 = sub_1C97D7F0C;
    v45 = sub_1C97D7D7C;
    v46 = sub_1C97D7B8C;
    v47 = sub_1C97D7A00;
    v48 = sub_1C97D78C4;
    v49 = sub_1C97D77C0;
    v50 = sub_1C97D75A8;
    v51 = sub_1C97D72C4;
  }
  else
  {
    if (v23 > 0xF)
    {
LABEL_62:
      v12 = 4294954386;
LABEL_142:
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Pre-comp init failed\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Pre-comp init failed\n");
      }
      return v12;
    }
    v754 = (v33 + v32) >> v30;
    v762 = *(int *)(v4 + 472);
    v747 = v4 + 652;
    v52 = sub_1C97D6E4C;
    v38 = *(unsigned __int8 *)(v26 + 484);
    if (!*(_BYTE *)(v26 + 484))
      v52 = sub_1C97D6D14;
    *(_QWORD *)(v4 + 864) = v52;
    if (v38)
      v39 = sub_1C97D7090;
    else
      v39 = sub_1C97D6FAC;
    v40 = sub_1C97D83D0;
    v41 = sub_1C97D81D0;
    v42 = sub_1C97D8048;
    v43 = sub_1C97D7F64;
    v44 = sub_1C97D7EAC;
    v45 = sub_1C97D7CA8;
    v46 = sub_1C97D7AB8;
    v47 = sub_1C97D7940;
    v48 = sub_1C97D7838;
    v49 = sub_1C97D7748;
    v50 = sub_1C97D73F8;
    v51 = sub_1C97D7188;
  }
  *(_QWORD *)(v4 + 872) = v39;
  *(_QWORD *)(v4 + 880) = v51;
  *(_QWORD *)(v4 + 888) = v50;
  *(_QWORD *)(v4 + 896) = v49;
  *(_QWORD *)(v4 + 904) = v48;
  *(_QWORD *)(v4 + 912) = v47;
  *(_QWORD *)(v4 + 920) = v46;
  *(_QWORD *)(v4 + 928) = v45;
  *(_QWORD *)(v4 + 936) = v44;
  *(_QWORD *)(v4 + 944) = v43;
  *(_QWORD *)(v4 + 952) = v42;
  *(_QWORD *)(v4 + 960) = v41;
  *(_QWORD *)(v4 + 968) = v40;
  *(_QWORD *)(v4 + 992) = sub_1C97D85D0;
  *(_QWORD *)(v4 + 1000) = sub_1C97D87B0;
  *(_QWORD *)(v4 + 984) = sub_1C97D8940;
  *(_QWORD *)(v4 + 976) = sub_1C97D899C;
  if (v23 == 10)
  {
    v53 = sub_1C982B668;
    v54 = sub_1C982B20C;
    if (!v38)
    {
      v55 = sub_1C982AF90;
      goto LABEL_69;
    }
  }
  else
  {
    if (v23 != 8)
      goto LABEL_71;
    v53 = sub_1C982B384;
    v54 = sub_1C982B0A0;
    if (!v38)
    {
      v55 = sub_1C982AE68;
LABEL_69:
      v56 = v4;
      *(_QWORD *)(v4 + 864) = v55;
      goto LABEL_70;
    }
  }
  v56 = v4;
LABEL_70:
  *(_QWORD *)(v56 + 880) = v54;
  *(_QWORD *)(v56 + 888) = v53;
LABEL_71:
  v743 = v4 + 632;
  v57 = v4;
  *(_QWORD *)(v4 + 1000) = sub_1C982B94C;
  *(_QWORD *)(v4 + 984) = sub_1C982BBD8;
  *(_QWORD *)(v4 + 976) = sub_1C982BD10;
  *(_QWORD *)(v4 + 3032) = v4;
  *(_DWORD *)(v4 + 5612) = 0;
  *(_QWORD *)(v4 + 5616) = 0;
  *(_QWORD *)(v4 + 6296) = 0;
  *(_QWORD *)(v4 + 6264) = 0;
  *(_QWORD *)(v4 + 6280) = 0;
  *(_QWORD *)(v4 + 6272) = 0;
  *(_QWORD *)(v4 + 6286) = 0;
  v750[1758] = *(_DWORD *)(v26 + 456) == 1;
  *(_DWORD *)(v4 + 860) = 0;
  v58 = *(unsigned __int8 *)(v22 + 2113);
  v59 = *(unsigned __int8 *)(v26 + 590);
  *(_BYTE *)(v4 + 817) = 0;
  *(_QWORD *)(v4 + 6336) = 0;
  *(_DWORD *)(v4 + 6344) = 0;
  v60 = v58 - v59 - 3;
  *(_DWORD *)(v4 + 6260) = v60;
  v759 = (v24 - 1 + (1 << v31)) >> v31;
  if (v60 < 0)
  {
    if (!v59 || v60 != -1)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954394;
      fwrite("Motion block size is larger than LCU size!\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Motion block size is larger than LCU size!\n");
      v12 = 4294954394;
      goto LABEL_142;
    }
    v57 = v4;
    *(_DWORD *)(v4 + 6260) = 0;
    if (dword_1ED1ACCC0 >= 4)
    {
      fwrite("Cannot do fast pre-comp since motion block size is equal to LCU size!\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(28, "Cannot do fast pre-comp since motion block size is equal to LCU size!\n");
      v57 = v4;
      v34 = 1 << v31;
    }
  }
  v751 = v34;
  v764 = v24 + 15;
  v61 = (((v25 * v24) >> 6) + 7);
  v62 = (v36 * v35 + 7);
  sub_1C9710DCC((char **)(v57 + 5648), v61);
  bzero(*(void **)(v57 + 5648), 4 * v61);
  v63 = (_QWORD *)(v57 + 5672);
  sub_1C9710DCC((char **)(v57 + 5672), v61);
  bzero(*(void **)(v57 + 5672), 4 * v61);
  sub_1C9710DCC((char **)(v57 + 6168), v62);
  bzero(*(void **)(v57 + 6168), 4 * v62);
  if (*(_BYTE *)(v26 + 752) || *(_BYTE *)(v26 + 937))
    sub_1C9710DCC((char **)(v57 + 6232), v62);
  v64 = v764 >> 4;
  v65 = (v25 + 15) >> 4;
  if (*(_BYTE *)(v26 + 913))
    sub_1C9710DCC((char **)(v57 + 6192), v62);
  v66 = (v65 * v64);
  if (*(_BYTE *)(v26 + 484) || *(_BYTE *)(v26 + 487))
  {
    sub_1C9710DCC((char **)(v767 + 5696), v61);
    sub_1C9710DCC((char **)(v767 + 6040), v61);
    sub_1C9710DCC((char **)(v767 + 6064), (v65 * v64));
    sub_1C9710DCC((char **)(v767 + 6088), (((*(_DWORD *)(v767 + 5532) + 31) >> 5) * ((*(_DWORD *)(v767 + 5528) + 31) >> 5)));
    sub_1C9710DCC((char **)(v767 + 6112), (((*(_DWORD *)(v767 + 5532) + 63) >> 6) * ((*(_DWORD *)(v767 + 5528) + 63) >> 6)));
    *(_QWORD *)(v767 + 6136) = *(_QWORD *)(v767 + 6040);
    *(_QWORD *)(v767 + 6144) = *(_QWORD *)(v767 + 6064);
    *(_QWORD *)(v767 + 6152) = *(_QWORD *)(v767 + 6088);
    *(_QWORD *)(v767 + 6160) = *(_QWORD *)(v767 + 6112);
    if (*(_BYTE *)(v26 + 484))
      v63 = (_QWORD *)(v767 + 5696);
    v57 = v767;
  }
  v67 = v25 - 1;
  *(_QWORD *)(v57 + 5720) = *v63;
  sub_1C9710DCC((char **)(v57 + 5728), v61);
  if (*(_BYTE *)(v57 + 816))
  {
    sub_1C9710DCC((char **)(v57 + 5776), (v754 * ((v67 + v32) >> v30) + 7));
    sub_1C97A01FC((char **)(v57 + 5800), (v754 * ((v67 + v32) >> v30) + 7));
  }
  v68 = *(_QWORD *)(v57 + 576);
  if (*(_BYTE *)(v68 + 482) || *(_BYTE *)(v68 + 450) || *(_BYTE *)(v26 + 912))
  {
    sub_1C9710DCC((char **)(v57 + 5752), v61);
    sub_1C9710DCC((char **)(v57 + 5824), v66);
    sub_1C97A01FC((char **)(v57 + 5848), v66);
  }
  if (*(char *)(v26 + 492) >= 1)
  {
    v69 = (v759 * ((v67 + v751) >> v31));
    v70 = *(_QWORD *)(v57 + 5896);
    v71 = *(_QWORD *)(v57 + 5904) - v70;
    if (v69 <= v71)
    {
      if (v69 < v71)
        *(_QWORD *)(v57 + 5904) = v70 + v69;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(v57 + 5896), v69 - v71);
    }
    sub_1C97BEFB0((char **)(v57 + 5992), v69);
    sub_1C97BEFB0((char **)(v57 + 6016), v69);
    v72 = 2 * v69;
    bzero(*(void **)(v57 + 5992), v72);
    bzero(*(void **)(v57 + 6016), v72);
  }
  if (*(_BYTE *)(v26 + 452))
  {
    sub_1C9710DCC((char **)(v57 + 824), v66);
    sub_1C9710DCC((char **)(v57 + 5408), v66);
    sub_1C9710DCC((char **)(v57 + 5432), v66);
    sub_1C9710DCC((char **)(v57 + 5456), v66);
    sub_1C9710DCC((char **)(v57 + 5480), v66);
    sub_1C9710DCC((char **)(v57 + 5504), v66);
    sub_1C9710DCC((char **)(v57 + 5552), *(int *)(v57 + 5604));
    sub_1C9710DCC((char **)(v57 + 5576), *(int *)(v57 + 5604));
  }
  if (*(_BYTE *)(v57 + 465))
  {
    sub_1C97480EC((char **)(v57 + 5872), v762);
    memcpy(*(void **)(v57 + 5872), *(const void **)(v57 + 480), 2 * v762);
  }
  if (*(char *)(v26 + 444) >= 2)
  {
    LODWORD(v73) = *(unsigned __int8 *)(v26 + 538) - *v746;
    if ((_DWORD)v73)
    {
      v74 = 0;
      if (v73 <= 1)
        v73 = 1;
      else
        v73 = v73;
      v75 = (char **)(v57 + 5920);
      v76 = -v73;
      do
      {
        sub_1C9710DCC(v75, (((*(_DWORD *)(v57 + 5528) + ~(-1 << (v74 + *(_BYTE *)(v26 + 538)))) >> (v74+ *(_BYTE *)(v26 + 538)))* ((*(_DWORD *)(v57 + 5532) + ~(-1 << (v74 + *(_BYTE *)(v26 + 538)))) >> (v74+ *(_BYTE *)(v26 + 538)))));
        v75 += 3;
        --v74;
      }
      while (v76 != v74);
    }
  }
  LOWORD(v773[0]) = 0;
  v77 = *(_QWORD *)(v57 + 1032);
  v78 = *(_QWORD *)(v57 + 1024);
  v79 = v77 - v78;
  if (v77 != v78)
  {
    v80 = 0;
    v81 = v79 >> 4;
    if (v81 <= 1)
      v81 = 1;
    v82 = (_QWORD *)(v78 + 8);
    do
    {
      *((_DWORD *)v82 - 1) = v80;
      *v82 = -1;
      v82 += 2;
      ++v80;
    }
    while (v81 != v80);
  }
  *(_QWORD *)(v57 + 1016) = v57;
  v741 = (uint64_t *)(v57 + 2984);
  sub_1C9746DB4((_QWORD *)(v57 + 2984), *(_QWORD *)(v57 + 24), *(_QWORD *)(v57 + 32));
  v83 = *(_QWORD *)(v57 + 1016);
  if (*(_BYTE *)(*(_QWORD *)(v57 + 1008) + 510))
  {
    v84 = *(_QWORD *)(v83 + 40);
    v85 = *(_DWORD *)(v84 + 204);
    v86 = *(_DWORD *)(v84 + 208) * v85;
    sub_1C9714864((_QWORD *)(v57 + 1048), *(unsigned __int8 *)(v84 + 2096), *(unsigned __int8 *)(v84 + 2098), 0);
    bzero((void *)(v57 + 1616), 0x300uLL);
    v87 = 0;
    for (i = (uint64_t)v86 >> 6; ; sub_1C9710DCC((char **)(v57 + 24 * v87++ + 1224), i))
    {
      v89 = 0;
      v90 = 0;
      v83 = *(_QWORD *)(v57 + 1016);
      v91 = *(_QWORD *)(v83 + 576);
      do
      {
        if (*(_QWORD *)(v91 + 10000 + v89))
          ++v90;
        v89 += 16;
      }
      while (v89 != 272);
      if (v87 >= v90)
        break;
    }
    *(_QWORD *)(v57 + 1608) = (uint64_t)v85 >> 3;
    *(_DWORD *)(v57 + 2404) = 0;
  }
  else
  {
    v91 = *(_QWORD *)(v83 + 576);
  }
  v92 = sub_1C97EF824(v57 + 2408, *(_DWORD *)(v91 + 576), *(_BYTE *)(v91 + 580), *(unsigned __int8 *)(*(_QWORD *)(v83 + 40) + 2096), *(_DWORD *)(v91 + 456), *(unsigned __int8 *)(*(_QWORD *)(v83 + 40) + 2099), *(char *)(v83 + 648), 0, (uint64_t)v773);
  v12 = v92;
  v93 = dword_1ED1ACCC0;
  if ((_DWORD)v92)
    v94 = dword_1ED1ACCC0 < 3;
  else
    v94 = 1;
  if (!v94)
  {
    fwrite("Initialize rdcost_ failed\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Initialize rdcost_ failed\n");
    v93 = dword_1ED1ACCC0;
LABEL_138:
    if (v93 < 3)
      return v12;
    fwrite("Reference selector init failed\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Reference selector init failed\n");
    goto LABEL_142;
  }
  if ((_DWORD)v92)
    goto LABEL_138;
  v95 = v767;
  v96 = *(_QWORD *)(*(_QWORD *)(v767 + 3032) + 576);
  *(_DWORD *)(v767 + 852) = *(_DWORD *)(v96 + 316);
  if (*(_BYTE *)(v26 + 937))
  {
    v97 = 0;
    v98 = (uint64_t *)(v96 + 10000);
    v99 = 1;
    v100 = v768;
    do
    {
      v101 = *v98;
      if (*v98 && *(int *)(v101 + 1024) >= 1 && *(int *)(v101 + 12) < 1)
        break;
      v99 = v97 < 0x10;
      v98 += 2;
      ++v97;
    }
    while (v97 != 17);
    v102 = v750;
    v103 = v99 && *(float *)(v96 + 312) > 1.0;
  }
  else
  {
    v103 = 0;
    v102 = v750;
    v100 = v768;
  }
  *(_BYTE *)(v767 + 856) = v103;
  sub_1C9746DB4((_QWORD *)(v767 + 3016), *v100, v100[1]);
  v105 = *(_QWORD *)(v767 + 3032);
  v106 = *(_BYTE **)(v105 + 576);
  v107 = *(_QWORD *)(v767 + 3040);
  if (v107)
  {
    if (v106[714])
    {
      v108 = *(unsigned int *)(v105 + 6508);
      *(_DWORD *)(v767 + 6348) = v108;
      *(_BYTE *)(v767 + 817) = (int)v108 > 0;
      if ((int)v108 >= 1)
      {
        v109 = *(unsigned __int8 *)(v107 + 504);
        v110 = v107 + 8 * *(int *)(v107 + 44);
        v111 = (__int16 *)(v110 + 54);
        v112 = (__int16 *)(v110 + 52);
        v113 = v109 == 0;
        if (v109)
          v114 = v111;
        else
          v114 = v112;
        if (v113)
          v112 = v111;
        v104.i16[2] = *v112;
        v104.i16[0] = *v114;
        *(float32x2_t *)v115.f32 = vcvt_f32_s32(vshr_n_s32(vshl_n_s32(v104, 0x10uLL), 0x10uLL));
        v115.i64[1] = v115.i64[0];
        v116 = (int32x4_t *)(v767 + 6352);
        v117 = (_OWORD *)(v105 + 6516);
        do
        {
          v118 = *(float32x4_t *)v117;
          v117 = (_OWORD *)((char *)v117 + 28);
          *v116++ = vcvtq_s32_f32(vmulq_f32(v118, v115));
          --v108;
        }
        while (v108);
      }
    }
  }
  sub_1C97173C8((_QWORD *)(v767 + 3056));
  v729 = v106;
  if (v106[870])
    sub_1C97D8A50(v746, *(_QWORD *)(v767 + 3032) + 616);
  v120 = *(_QWORD *)(v767 + 3032);
  v121 = *(unsigned __int8 *)(v120 + 648);
  v122 = *(char **)(v120 + 576);
  v730 = v122;
  if (!*(_BYTE *)(v120 + 648))
  {
    v127 = 0;
    v128 = (uint64_t *)(v122 + 10000);
    v129 = 1;
    do
    {
      v130 = *v128;
      if (*v128 && *(int *)(v130 + 1024) >= 1 && *(int *)(v130 + 12) < 1)
        break;
      v129 = v127 < 0x10;
      v128 += 2;
      ++v127;
    }
    while (v127 != 17);
    if (!v129 || (v122 = *(char **)(v120 + 576), !v106[936]) && !v106[584])
    {
      v131 = 0;
      goto LABEL_593;
    }
  }
  v742 = *(_DWORD *)(*(_QWORD *)(v120 + 632) + 1024);
  v738 = v767 + 4360;
  if (!v122[585])
  {
    if (v122[870])
    {
      v132 = 0;
      LODWORD(v133) = 0;
      *(_BYTE *)(v747 + 3871) = 0;
      *(_WORD *)v102 = 0;
      v134 = *(_QWORD **)(v767 + 1016);
      v135 = v134[72];
      v735 = v135 + 9968;
      v736 = v135;
      v136 = v134[79];
      v737 = *(_DWORD *)(v136 + 1024);
      do
      {
        if (*(_QWORD *)(v135 + 10000 + v132))
          v133 = (v133 + 1);
        else
          v133 = v133;
        v132 += 16;
      }
      while (v132 != 272);
      v733 = (uint64_t)(v134 + 545);
      if (*(_BYTE *)(v136 + 432))
      {
        v137 = v134[808];
        if (v137)
        {
          v138 = *(unsigned __int8 *)(v137 + 504);
          v139 = v137 + 8 * *(int *)(v137 + 44);
          v140 = (__int16 *)(v139 + 54);
          v141 = (__int16 *)(v139 + 52);
          v142 = v138 == 0;
          if (v138)
            v143 = v140;
          else
            v143 = v141;
          v731 = *v143;
          if (v142)
            v144 = v140;
          else
            v144 = v141;
          v145 = *v144;
        }
        else
        {
          v186 = v134[77];
          v731 = *(_DWORD *)(v186 + 520);
          v145 = *(_DWORD *)(v186 + 524);
        }
      }
      else
      {
        v184 = v134[5];
        v185 = *(_DWORD *)(v184 + 204);
        v145 = *(_DWORD *)(v184 + 208);
        v731 = v185;
      }
      v734 = v145;
      v740 = *(char *)(v135 + 530);
      v728 = *(char *)(v135 + 528);
      sub_1C9753948(v735);
      v732 = v133;
      if ((_DWORD)v133)
      {
        v188 = 0;
        do
        {
          v189 = *(_DWORD *)(v736 + 4 * v188 + 10292);
          v190 = (unsigned int (**)(__n128 *, __n128 *))sub_1C9752908(v735, v189);
          v192 = *v190;
          v191 = v190[1];
          v773[0] = *v190;
          v773[1] = v191;
          v744 = (std::__shared_weak_count *)v191;
          if (v191)
          {
            v193 = (unint64_t *)((char *)v191 + 8);
            do
              v194 = __ldxr(v193);
            while (__stxr(v194 + 1, v193));
          }
          v195 = v95 + 1008 + 48 * v188;
          *(_DWORD *)(v195 + 640) = v189;
          v196 = v189 - v737;
          *(_DWORD *)(v195 + 644) = v196;
          *(_DWORD *)(v195 + 652) = *((_DWORD *)v192 + 3);
          *(_DWORD *)(v195 + 648) = 1;
          *(_QWORD *)(v195 + 632) = 0;
          v745 = v188;
          *(_QWORD *)(v195 + 624) = *(_QWORD *)(v95 + 1008 + 24 * v188 + 216);
          v187 = *((__n128 *)v192 + 72);
          *(__n128 *)(v195 + 608) = v187;
          v760 = v192;
          if ((int)v133 <= v740)
          {
            sub_1C982E838(v733, v196);
            v192 = v760;
            v197 = v196 >= 0 ? v196 : -v196;
            if (v197 != 1)
              goto LABEL_301;
          }
          v198 = v188;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v95 + 1016) + 632) + 432))
          {
            v199 = (__n128 *)((char *)v192 + 440);
            if (*((_DWORD *)v192 + 128) == v731 && *((_DWORD *)v192 + 129) == v734)
            {
              if (*((_QWORD *)v192 + 50) != *((_QWORD *)v192 + 59))
                *((_BYTE *)v192 + 48) = 1;
              v187 = *(__n128 *)((char *)v192 + 472);
              v200 = *(_OWORD *)((char *)v192 + 488);
            }
            else
            {
              if (*((_DWORD *)v192 + 126) != v731 || *((_DWORD *)v192 + 127) != v734)
              {
                v201 = *((_DWORD *)v192 + 256) - v737;
                if (v201 < 0)
                  v201 = v737 - *((_DWORD *)v192 + 256);
                if (v201 <= 2)
                {
                  v202 = *((int *)v192 + 131);
                  if ((_DWORD)v202)
                  {
                    v203 = *((_QWORD *)v760 + 61);
                    v204 = *((int *)v760 + 130);
                    v205 = (char *)*((_QWORD *)v760 + 59);
                    do
                    {
                      --v202;
                      memset(v205, 128, v204);
                      v205 += v203;
                    }
                    while (v202);
                    v206 = *((_DWORD *)v760 + 131);
                    if (v206 >= 2)
                    {
                      v207 = *((int *)v760 + 130);
                      v208 = *((_QWORD *)v760 + 62);
                      v209 = (uint64_t)(int)v206 >> 1;
                      v210 = (char *)*((_QWORD *)v760 + 60);
                      do
                      {
                        --v209;
                        memset(v210, 128, v207);
                        v210 += v208;
                      }
                      while (v209);
                    }
                  }
                  v211 = 0;
                  v212 = *v741;
                  v213 = 1;
                  do
                  {
                    v214 = v213;
                    v215 = (_QWORD *)((char *)v760 + 8 * v211);
                    *(_QWORD *)(v212 + 8 * v211 + 8) = v215[55];
                    *(_QWORD *)(*v741 + 8 * v211 + 24) = v215[59];
                    v212 = *v741;
                    v216 = *v741 + 8 * v211;
                    *(_QWORD *)(v216 + 40) = v215[57];
                    *(_QWORD *)(v216 + 56) = v215[61];
                    v211 = 1;
                    v213 = 0;
                  }
                  while ((v214 & 1) != 0);
                  *(_QWORD *)(v212 + 72) = *((_QWORD *)v760 + 63);
                  *(_DWORD *)(v212 + 80) = v731;
                  *(_DWORD *)(v212 + 84) = v734;
                  (*(void (**)(uint64_t))(*(_QWORD *)v212 + 24))(v212);
                  v217 = v199[3];
                  *((__n128 *)v760 + 25) = v199[2];
                  *((__n128 *)v760 + 26) = v217;
                  *((_DWORD *)v760 + 128) = v731;
                  *((_DWORD *)v760 + 129) = v734;
                  (*(void (**)(unsigned int (*)(__n128 *, __n128 *), _QWORD, _QWORD, _QWORD))(*(_QWORD *)v760 + 16))(v760, 0, *((unsigned int *)v760 + 131), 0);
                  *((_BYTE *)v760 + 48) = 1;
                  v198 = v745;
                  v192 = v760;
                }
                goto LABEL_277;
              }
              if (*((_QWORD *)v192 + 50) != *((_QWORD *)v192 + 55))
                *((_BYTE *)v192 + 48) = 1;
              v187 = *v199;
              v200 = *(_OWORD *)((char *)v192 + 456);
            }
            *((__n128 *)v192 + 25) = v187;
            *((_OWORD *)v192 + 26) = v200;
          }
LABEL_277:
          v218 = *(_QWORD **)(v95 + 1016);
          v219 = v218[79];
          v220 = *((_DWORD *)v192 + 256) - *(_DWORD *)(v219 + 1024);
          if (v220 < 0)
            v220 = *(_DWORD *)(v219 + 1024) - *((_DWORD *)v192 + 256);
          v739 = v220;
          v221 = v218[77];
          v755 = *(_QWORD *)(v221 + 416);
          v757 = *((_QWORD *)v192 + 52);
          v222 = *(_QWORD *)(v219 + 416);
          v765 = *(char **)(v95 + 24 * v198 + 1224);
          if (*(_BYTE *)(v219 + 432))
          {
            v223 = v218[808];
            if (v223)
            {
              v224 = *(unsigned __int8 *)(v223 + 504);
              v225 = v223 + 8 * *(int *)(v223 + 44);
              v226 = (__int16 *)(v225 + 54);
              v227 = (__int16 *)(v225 + 52);
              v228 = v224 == 0;
              if (v224)
                v229 = v226;
              else
                v229 = v227;
              v763 = *v229;
              if (v228)
                v230 = v226;
              else
                v230 = v227;
              v231 = *v230;
            }
            else
            {
              v763 = *(_DWORD *)(v221 + 520);
              v231 = *(_DWORD *)(v221 + 524);
            }
          }
          else
          {
            v232 = v218[5];
            v233 = *(_DWORD *)(v232 + 204);
            v231 = *(_DWORD *)(v232 + 208);
            v763 = v233;
          }
          if (v231 < 1)
          {
            v236 = 0;
            v235 = 0;
          }
          else
          {
            v234 = 0;
            v235 = 0;
            v236 = 0;
            v749 = 4 * *(_QWORD *)(v95 + 1608);
            v748 = v231;
            do
            {
              if (v763 >= 1)
              {
                v752 = v235;
                v237 = 0;
                v238 = 0;
                do
                {
                  v769 = v236;
                  v239 = v218[77];
                  v240 = *(_QWORD *)(v239 + 416);
                  v241 = *(_QWORD *)(v239 + 400);
                  v242 = *(_BYTE *)(v239 + 531);
                  v243 = v218;
                  v244 = *(_QWORD *)(v218[79] + 400)
                       + ((v238 + v234 * *(_QWORD *)(v218[79] + 416)) << *(_BYTE *)(v218[79] + 531));
                  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v767 + 1048))(8, 8, 0, v757, *((_QWORD *)v192 + 50) + ((v238 + v234 * *((_QWORD *)v192 + 52)) << *((_BYTE *)v192 + 531)), v222, v244);
                  v245 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v767 + 2632))(8, 8, v241 + ((v238 + v234 * v240) << v242), v755, v244, v222);
                  *(_DWORD *)&v765[4 * v237] = v245;
                  v236 = v245 + v769;
                  v238 += 8;
                  ++v237;
                  v192 = v760;
                  v218 = v243;
                }
                while (v763 > (int)v238);
                v235 = v752 + v237;
                v95 = v767;
                v102 = v750;
                v231 = v748;
              }
              v234 += 8;
              v765 += v749;
            }
            while (v231 > (int)v234);
          }
          v133 = v732;
          if (v739 == 1)
          {
            v246 = (v236 + (v235 >> 1)) / v235;
            *(_DWORD *)(v95 + 2404) = v246;
            *(_DWORD *)(v218[79] + 1156) = v246;
          }
LABEL_301:
          if (v744)
          {
            p_shared_owners = (unint64_t *)&v744->__shared_owners_;
            do
              v248 = __ldaxr(p_shared_owners);
            while (__stlxr(v248 - 1, p_shared_owners));
            if (!v248)
            {
              ((void (*)(std::__shared_weak_count *))v744->__on_zero_shared)(v744);
              std::__shared_weak_count::__release_weak(v744);
            }
          }
          v188 = v745 + 1;
        }
        while (v745 + 1 != v133);
      }
      v249 = *(_QWORD *)(v95 + 1016);
      if (*(_BYTE *)(v249 + 648))
      {
        v250 = *(_DWORD **)(v249 + 632);
        v251 = v250[288];
        v252 = *(_DWORD *)(v95 + 2384);
        if (25 * v251 >= (22 * v252))
          v253 = 0;
        else
          v253 = 2 * (20 * v250[289] > (23 * *(_DWORD *)(v95 + 2396)));
        v254 = *(_DWORD *)(v95 + 2400);
        if (v254 - 2 < 2)
        {
          if (50 * v251 > (47 * v252))
            v255 = 1;
          else
            v255 = 3;
          v250[290] = v255;
        }
        else if (v254 <= 1)
        {
          v250[290] = v253;
        }
      }
      else
      {
        v187 = 0uLL;
        *(_OWORD *)(v95 + 2384) = 0u;
      }
      if ((int)v133 <= v740)
        goto LABEL_524;
      v256 = *(_QWORD *)(v95 + 1016);
      if ((*(_DWORD *)(v256 + 656) & 0x80000000) != 0)
      {
        v277 = 0;
        LODWORD(v278) = 0;
        v279 = *(_QWORD *)(v256 + 40);
        v280 = *(_DWORD *)(v279 + 204);
        v281 = *(_DWORD *)(v279 + 208);
        v282 = *(_QWORD *)(v95 + 1608);
        v283 = *(_QWORD *)(v256 + 576);
        do
        {
          if (*(_QWORD *)(v283 + 10000 + v277))
            v278 = (v278 + 1);
          else
            v278 = v278;
          v277 += 16;
        }
        while (v277 != 272);
        v284 = *(_QWORD *)(v256 + 632);
        if (*(_BYTE *)(v284 + 432))
        {
          v285 = *(_QWORD *)(v256 + 6464);
          if (v285)
          {
            v286 = *(unsigned __int8 *)(v285 + 504);
            v287 = v285 + 8 * *(int *)(v285 + 44);
            v288 = (__int16 *)(v287 + 54);
            v289 = (__int16 *)(v287 + 52);
            if (v286)
              v290 = (__int16 *)(v287 + 54);
            else
              v290 = (__int16 *)(v287 + 52);
            v280 = *v290;
            if (v286)
              v291 = v289;
            else
              v291 = v288;
            v281 = *v291;
          }
          else
          {
            v327 = *(_QWORD *)(v256 + 616);
            v280 = *(_DWORD *)(v327 + 520);
            v281 = *(_DWORD *)(v327 + 524);
          }
        }
        if (v281 > 0)
        {
          for (j = 0; j < v281; j += 8)
          {
            if (v280 >= 1)
            {
              for (k = 0; (uint64_t)k < v280; k += 8)
              {
                if ((_DWORD)v278)
                {
                  v330 = 0;
                  v331 = 0;
                  v332 = -1;
                  v333 = (uint64_t *)(v95 + 1632);
                  do
                  {
                    v334 = *v333;
                    v333 += 6;
                    v335 = *(_DWORD *)(v334 + 4 * ((j >> 3) * (int)v282 + (k >> 3)));
                    if (v335 < v332)
                    {
                      v332 = v335;
                      v331 = v330;
                    }
                    ++v330;
                  }
                  while (v278 != v330);
                }
                else
                {
                  v331 = 0;
                }
                ++*(_DWORD *)(v95 + 48 * v331 + 1640);
              }
            }
          }
        }
        v336 = 0;
        LODWORD(v337) = 0;
        v338 = v283 + 10000;
        do
        {
          if (*(_QWORD *)(v338 + v336))
            v337 = (v337 + 1);
          else
            v337 = v337;
          v336 += 16;
        }
        while (v336 != 272);
        v339 = *(char *)(*(_QWORD *)(v95 + 1008) + 168);
        v340 = *(_DWORD *)(v284 + 1024);
        v341 = (__n128 *)(v95 + 1616);
        v773[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1C9777998;
        if (v337 < 0x81)
        {
          v342 = 0;
          v344 = 0;
        }
        else
        {
          v342 = (__n128 *)sub_1C9776DAC(v337);
          v344 = v343;
        }
        v345 = sub_1C9776E14((__n128 *)(v95 + 1616), (__n128 *)(v95 + 1616 + 48 * v337), v773, v337, v342, v344, v187);
        if (v342)
          operator delete(v342);
        if ((_DWORD)v337)
        {
          v347 = 0;
          v348 = 0;
          v349 = 0;
          v350 = (int *)(v95 + 1640);
          do
          {
            v352 = *v350;
            v350 += 12;
            v351 = v352;
            if (v347 >= (uint64_t)(v339 + 3) >> 2)
              v353 = 0;
            else
              v353 = v351;
            v349 += v353;
            v348 += v351;
            ++v347;
          }
          while (v337 != v347);
          v345.n128_f64[0] = (double)v349 / (double)v348;
          v354 = (_DWORD *)(v95 + 1648);
          v355 = v337;
          do
          {
            v356 = *v354 - v340;
            LODWORD(v346) = *(v354 - 2);
            v357 = v345.n128_f64[0] * (double)*(unint64_t *)&v346;
            if (v356 < 0)
              v356 = v340 - *v354;
            v346 = v357 + (1.0 - v345.n128_f64[0]) * 32.0 / (double)v356 + 0.5;
            *(v354 - 1) = (int)v346;
            v354 += 12;
            --v355;
          }
          while (v355);
          v773[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1C97779AC;
          v257 = v732;
          if (v337 < 0x81)
          {
            v358 = 0;
            v360 = 0;
          }
          else
          {
            v358 = (__n128 *)sub_1C9776DAC(v337);
            v360 = v359;
          }
        }
        else
        {
          v358 = 0;
          v360 = 0;
          v773[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1C97779AC;
          v257 = v732;
        }
        v187 = sub_1C9776E14((__n128 *)(v95 + 1616), (__n128 *)(v95 + 1616 + 48 * v337), v773, v337, v358, v360, v345);
        if (v358)
          operator delete(v358);
        *(_DWORD *)(v95 + 1656) = 2;
        v361 = 1;
        if (v257 >= 2 && v740 >= 2)
        {
          v362 = (unsigned int *)(v95 + 1672);
          for (m = 1; m != v257; ++m)
          {
            v365 = *v362;
            v362 += 12;
            v364 = v365;
            if (*(int *)(*(_QWORD *)(*(_QWORD *)(v95 + 1016) + 632) + 1160) > 1)
            {
              if (v364 > 1)
              {
LABEL_451:
                v366 = v95 + 48 * m;
                v361 = 2;
                *(_DWORD *)(v366 + 1656) = 2;
                goto LABEL_452;
              }
            }
            else if (v364 < 2)
            {
              goto LABEL_451;
            }
          }
          v361 = 1;
        }
LABEL_452:
        if (v257 >= 2 && v361 < v740)
        {
          v367 = (_DWORD *)(v95 + 1704);
          v368 = 2;
          do
          {
            if (*v367 != 2)
            {
              *v367 = 2;
              ++v361;
            }
            if (v368 >= v257)
              break;
            v367 += 12;
            ++v368;
          }
          while (v361 < v740);
        }
        if (v257 < 2)
        {
          v373 = 0;
          v375 = 0;
          v372 = &v341[3 * v257];
          v773[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1C9776D88;
          goto LABEL_468;
        }
        v369 = (_BOOL4 *)(v95 + 1704);
        v370 = v257 - 1;
        do
        {
          if (*v369 != 2)
          {
            v371 = v361++ < v728;
            *v369 = v371;
          }
          v369 += 12;
          --v370;
        }
        while (v370);
      }
      else
      {
        v257 = v732;
      }
      v341 = (__n128 *)(v95 + 1616);
      v372 = (__n128 *)(v95 + 1616 + 48 * v257);
      v773[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1C9776D88;
      if (v257 < 0x81)
      {
        v373 = 0;
        v375 = 0;
      }
      else
      {
        v373 = (__n128 *)sub_1C9776DAC(v257);
        v375 = v374;
      }
LABEL_468:
      sub_1C9776E14(v341, v372, v773, v257, v373, v375, v187);
      if (v373)
        operator delete(v373);
      v376 = *(_QWORD *)(v95 + 1016);
      v377 = *(_DWORD *)(v376 + 656);
      if (v377 < 0)
        goto LABEL_517;
      v378 = 0;
      if ((_DWORD)v257 && v740 >= 1)
      {
        v378 = 0;
        v379 = (int *)(v95 + 1660);
        v380 = 1;
        do
        {
          if (*v379 <= v377)
          {
            *(v379 - 1) = 2;
            ++v378;
          }
          if (v380 >= v257)
            break;
          v379 += 12;
          ++v380;
        }
        while (v378 < v740);
      }
      if (!(_DWORD)v257)
      {
        if (v377 > 0)
        {
          LODWORD(v390) = 0;
          goto LABEL_511;
        }
        goto LABEL_524;
      }
      v381 = 0;
      v382 = 0;
LABEL_480:
      v383 = (_DWORD *)(v95 + 1656 + 48 * v381);
      while (1)
      {
        if (*v383 != 2)
        {
          if (v378 >= v728)
          {
            ++v378;
            ++v381;
            v382 = 1;
            if (v381 == v257)
              goto LABEL_489;
            goto LABEL_480;
          }
          *v383 = 1;
          ++v378;
        }
        ++v381;
        v383 += 12;
        if (v257 == v381)
        {
          if ((v382 & 1) != 0)
          {
LABEL_489:
            v384 = 0;
            v385 = (int *)(v95 + 1660);
            v386 = -1;
            v387 = v257;
            do
            {
              if (*(v385 - 1) != 2)
              {
                if (*v385 > v386)
                  v386 = *v385;
                if (*(v385 - 3) > v384)
                  v384 = *(v385 - 3);
              }
              v385 += 12;
              --v387;
            }
            while (v387);
            v388 = (_DWORD *)(v95 + 1660);
            v389 = -1;
            do
            {
              if (*(v388 - 1) != 2 && *v388 == v386 && v384 > *(v388 - 3))
                v389 = v387;
              ++v387;
              v388 += 12;
            }
            while (v257 != v387);
            *(_DWORD *)(v95 + 48 * v389 + 1656) = 0;
          }
          if (v377 >= 1)
          {
            v390 = 0;
            v391 = (_DWORD *)(v95 + 1660);
            do
            {
              if ((*(v391 - 2) & 0x80000000) != 0 && !*v391)
                goto LABEL_511;
              ++v390;
              v391 += 12;
            }
            while (v257 != v390);
            LODWORD(v390) = v257;
LABEL_511:
            v392 = v390 + 1;
            if ((int)v390 + 1 < (int)v257)
            {
              v393 = v95 + 48 * v390;
              v394 = *(_DWORD *)(v393 + 1648);
              v395 = (_DWORD *)(v393 + 1704);
              do
              {
                if (*(v395 - 2) < v394 && *v395 == 1)
                  *v395 = 0;
                v395 += 12;
                ++v392;
              }
              while ((int)v257 > v392);
            }
          }
LABEL_517:
          if ((_DWORD)v257)
          {
            v396 = v257;
            v397 = *(_DWORD *)(*(_QWORD *)(v376 + 632) + 1024);
            v398 = (int *)(v95 + 1656);
            do
            {
              v399 = *(v398 - 2);
              if (*v398 < 2)
              {
                if (*v398 == 1)
                  sub_1C982E770(v733, v399 - v397);
              }
              else
              {
                sub_1C982E838(v733, v399 - v397);
              }
              v398 += 12;
              --v396;
            }
            while (v396);
          }
LABEL_524:
          v276 = v767 + 4360;
          goto LABEL_525;
        }
      }
    }
    if (*(_BYTE *)(v120 + 756))
    {
      v157 = *(unsigned int *)(v120 + 688);
      *(_BYTE *)(v747 + 3871) = 0;
      *(_DWORD *)(v767 + 4602) = 0;
      *(_WORD *)v102 = 0;
      if ((int)v157 >= 1)
      {
        v158 = v120 + 692;
        v159 = (_DWORD *)(v120 + 692);
        v160 = v157;
        do
        {
          v161 = *v159 + v742;
          if (v161 >= 0)
          {
            if (*(_QWORD *)sub_1C9752908((uint64_t)(v730 + 9968), v161))
            {
              if ((*v159 & 0x80000000) != 0)
                ++*v102;
              else
                ++v102[1];
            }
            else
            {
              *v159 = 0x7FFFFFFF;
            }
          }
          ++v159;
          --v160;
        }
        while (v160);
        v162 = *v102;
        if (*v102)
        {
          v163 = 0;
          v164 = 0;
          v165 = 0;
          do
          {
            v166 = 0;
            v167 = 0x7FFFFFFF;
            v168 = -1;
            do
            {
              v169 = *(_DWORD *)(v158 + 4 * v166);
              if (v169 < 0 && v165 < -v169 && v167 > -v169)
              {
                v167 = -v169;
                v168 = v166;
              }
              ++v166;
            }
            while (v157 != v166);
            v170 = *(_DWORD *)(v158 + 4 * v168);
            *(_WORD *)(v767 + 2 * v163 + 4538) = v164 + ~(_WORD)v170;
            *(_WORD *)(v767 + 4602) |= 1 << v163;
            v165 = -v170;
            ++v163;
            v164 = v170;
          }
          while (v163 != v162);
        }
        v171 = v102[1];
        if (v102[1])
        {
          v172 = 0;
          v173 = 0;
          do
          {
            v174 = 0;
            v175 = 0x7FFFFFFF;
            v176 = -1;
            do
            {
              v177 = *(_DWORD *)(v158 + 4 * v174);
              v178 = v177 > v173;
              v179 = v177 < v175;
              v180 = !v178 || !v179;
              if (v178 && v179)
                v181 = *(_DWORD *)(v158 + 4 * v174);
              else
                v181 = v175;
              if (v180)
                v182 = v176;
              else
                v182 = v174;
              if (v177 >= 1)
              {
                v175 = v181;
                v176 = v182;
              }
              ++v174;
            }
            while (v157 != v174);
            v183 = *(_DWORD *)(v158 + 4 * v176);
            *(_WORD *)(v767 + 2 * v172 + 4570) = v183 + ~(_WORD)v173;
            *(_WORD *)(v767 + 4604) |= 1 << v172++;
            v173 = v183;
          }
          while (v172 != v171);
        }
      }
      sub_1C971ECE4(v738, 0);
LABEL_390:
      *(_BYTE *)(*(_QWORD *)(v95 + 3032) + 676) = 1;
      goto LABEL_526;
    }
    if (v122[936] && v121 < 3 || v122[584] && !*(_BYTE *)(v120 + 648))
    {
      v258 = 0;
      *(_DWORD *)(v767 + 4796) = 0;
      v259 = v742;
      v260 = v122;
      v261 = v767;
    }
    else
    {
      v311 = *(_DWORD *)(v120 + 672);
      *(_DWORD *)(v767 + 4796) = v311;
      v312 = *(_QWORD *)(*(_QWORD *)(v120 + 40) + 296);
      v313 = v312 + 248 * v311;
      v314 = (uint64_t)(v122 + 9968);
      v315 = *(_DWORD *)(v120 + 656);
      if (*(_BYTE *)(v313 + 160))
      {
        v316 = 0;
        v317 = (__int16 *)(v312 + 248 * v311);
        while (1)
        {
          v318 = *v317;
          v317 += 2;
          v319 = sub_1C9752908(v314, v742 + v318);
          if (!*(_QWORD *)v319 || *(_DWORD *)(*(_QWORD *)v319 + 12) > v315)
            break;
          if (++v316 >= (unint64_t)*(unsigned __int8 *)(v313 + 160))
            goto LABEL_396;
        }
      }
      else
      {
LABEL_396:
        v320 = v312 + 248 * v311;
        v322 = *(unsigned __int8 *)(v320 + 161);
        v321 = (unsigned __int8 *)(v320 + 161);
        if (!v322)
        {
LABEL_401:
          v738 = v313;
          v95 = v767;
          goto LABEL_526;
        }
        v323 = 0;
        v324 = (__int16 *)(v312 + 248 * v311 + 64);
        while (1)
        {
          v325 = *v324;
          v324 += 2;
          v326 = sub_1C9752908(v314, v742 + v325);
          if (!*(_QWORD *)v326 || *(_DWORD *)(*(_QWORD *)v326 + 12) > v315)
            break;
          if (++v323 >= (unint64_t)*v321)
            goto LABEL_401;
        }
      }
      v261 = v767;
      v120 = *(_QWORD *)(v767 + 3032);
      v122 = *(char **)(v120 + 576);
      v259 = *(_DWORD *)(*(_QWORD *)(v120 + 632) + 1024);
      v258 = *(_DWORD *)(v767 + 4796);
      v121 = *(unsigned __int8 *)(v120 + 648);
      v260 = v730;
    }
    v262 = (uint64_t)(v122 + 9968);
    v263 = *(_DWORD *)(v120 + 656);
    *(_DWORD *)(v261 + 4602) = 0;
    *(_BYTE *)(v747 + 3871) = 0;
    *(_WORD *)v102 = 0;
    if (v121)
      v264 = sub_1C982F250;
    else
      v264 = sub_1C982F1BC;
    v265 = v258;
    v266 = &v260[108 * v258];
    v267 = v266[961];
    if (v266[961])
    {
      v268 = 0;
      v269 = 0;
      v270 = (unsigned __int8 *)(v266 + 961);
      v770 = v265;
      v271 = (uint64_t)&v260[108 * v265 + 964];
      do
      {
        v272 = *(_DWORD *)(v271 + 4 * v268) + v259;
        if (v259 < 0 || (v272 & 0x80000000) == 0)
        {
          v273 = sub_1C9752908(v262, v272);
          if (*(_QWORD *)v273)
          {
            if (*(_DWORD *)(*(_QWORD *)v273 + 12) <= v263)
            {
              v274 = *(_DWORD *)(v271 + 4 * v268);
              if (v274 < 0)
                ++*v750;
              else
                ++v750[1];
              *((_DWORD *)v773 + (int)v269) = v274;
              v269 = (v269 + 1);
            }
          }
        }
        ++v268;
      }
      while (v268 < *v270);
      v102 = v750;
      LODWORD(v275) = *v750;
      v267 = v750[1];
      v265 = v770;
    }
    else
    {
      LODWORD(v275) = 0;
      v269 = 0;
    }
    v292 = v267 + v275;
    v293 = &v730[108 * v265];
    if (v292 >= v293[962])
    {
LABEL_377:
      if (v121)
        v303 = 0;
      else
        v303 = 0x7FFFFFFFLL;
      if ((_DWORD)v275)
      {
        v304 = 0;
        v305 = 0;
        v306 = v303;
        v102 = v750;
        do
        {
          v307 = *((_DWORD *)v773 + (int)v264((uint64_t)v773, v269, v306, 1));
          *(_WORD *)(v767 + 4538 + 2 * v304) = v305 + ~(_WORD)v307;
          *(_WORD *)(v767 + 4602) |= 1 << v304;
          v306 = -v307;
          ++v304;
          v275 = *v750;
          v305 = v307;
        }
        while (v304 < v275);
      }
      LODWORD(v308) = v102[1];
      if (v102[1])
      {
        v309 = 0;
        v310 = 0;
        v102 = v750;
        do
        {
          LODWORD(v303) = *((_DWORD *)v773 + (int)v264((uint64_t)v773, v269, v303, 0));
          *(_WORD *)(v767 + 4570 + 2 * v309) = v303 + ~v310;
          *(_WORD *)(v767 + 4604) |= 1 << v309++;
          v308 = v750[1];
          v310 = v303;
        }
        while (v309 < v308);
        LODWORD(v275) = *v750;
      }
      if ((_DWORD)v275 + (_DWORD)v308)
      {
        sub_1C971ECE4(v738, 0);
        v102 = v750;
      }
      v95 = v767;
      goto LABEL_390;
    }
    v294 = (unsigned __int8 *)(v293 + 962);
    v295 = sub_1C9753948(v262);
    v296 = 0;
    while (1)
    {
      v297 = *(_QWORD *)sub_1C9752908(v262, *(_DWORD *)(v295 + 4 * v296));
      if (!v297)
        goto LABEL_375;
      v298 = *(_DWORD *)(v297 + 1024);
      if (v298 < 0 || *(_DWORD *)(v297 + 12) > v263)
        goto LABEL_375;
      v299 = v298 - v259;
      if ((int)v269 < 1)
      {
LABEL_369:
        if (v299 < 0)
        {
          ++*v750;
        }
        else
        {
          if (v298 == v259)
            goto LABEL_375;
          ++v750[1];
        }
        *((_DWORD *)v773 + (int)v269) = v299;
        v269 = (v269 + 1);
      }
      else
      {
        v300 = v269;
        v301 = v773;
        while (1)
        {
          v302 = *(_DWORD *)v301;
          v301 = (unsigned int (**)(__n128 *, __n128 *))((char *)v301 + 4);
          if (v299 == v302)
            break;
          if (!--v300)
            goto LABEL_369;
        }
      }
      LODWORD(v275) = *v750;
      if (v750[1] + v275 >= *v294)
      {
        v102 = v750;
        goto LABEL_377;
      }
LABEL_375:
      if (++v296 == 17)
      {
        v102 = v750;
        LODWORD(v275) = *v750;
        goto LABEL_377;
      }
    }
  }
  v123 = v122[528];
  *(_BYTE *)(v747 + 3871) = 0;
  *(_WORD *)v102 = 0;
  v124 = (uint64_t)(v122 + 9968);
  if (*(_BYTE *)(v120 + 6752))
  {
    v125 = sub_1C97535CC(v124, 2u);
    v126 = v767 + 4360;
    sub_1C982E838(v738, *(_DWORD *)(*(_QWORD *)v125 + 1024) - v742);
    goto LABEL_344;
  }
  v146 = sub_1C9753948(v124);
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v150 = -1;
  while (1)
  {
    v151 = 0;
    v152 = 0;
    v153 = *(_QWORD *)(*(_QWORD *)(v767 + 3032) + 576);
    do
    {
      if (*(_QWORD *)(v153 + 10000 + v151))
        ++v152;
      v151 += 16;
    }
    while (v151 != 272);
    if (v147 >= v152)
      break;
    v154 = *(_DWORD *)(*(_QWORD *)sub_1C9752908(v153 + 9968, *(_DWORD *)(v146 + 4 * v147)) + 36);
    if (v148 < v123)
    {
      sub_1C982E838(v738, *(_DWORD *)(v146 + 4 * v147) - v742);
      v149 |= v154 == 2;
LABEL_195:
      ++v148;
      goto LABEL_205;
    }
    if ((v149 & 1) != 0)
      break;
    if ((v154 - 1) <= 1)
    {
      v149 = v154 == 2;
      sub_1C982E770(v738, *(_DWORD *)(v146 + 4 * v147) - v742);
      if (v154 == 1 && v150 == -1)
        v150 = *(_DWORD *)(v146 + 4 * v147);
      goto LABEL_195;
    }
    v149 = 0;
LABEL_205:
    ++v147;
  }
  v95 = v767;
  v126 = v767 + 4360;
  if (v148 == 7)
  {
    if (v150 == -1)
      v156 = *(_DWORD *)(v146 + ((uint64_t)((v147 << 32) - 0x100000000) >> 30)) - v742;
    else
      v156 = v150 - v742;
    sub_1C982E900(v738, v156);
  }
LABEL_344:
  v276 = v126;
LABEL_525:
  sub_1C971ECE4(v276, 0);
LABEL_526:
  v400 = *(_QWORD **)(v95 + 3032);
  v401 = v400[5];
  if (*(_BYTE *)(v401 + 320))
  {
    v402 = 0;
    v403 = 0;
    v404 = *(unsigned __int8 *)(v401 + 224);
    v405 = v404 + 4;
    v406 = v400[72];
    v407 = -16 << v404;
    v408 = ~(-16 << v404);
    v409 = v407 & v742;
    do
    {
      v410 = *(_QWORD *)(v406 + 16 * v402 + 10000);
      if (v410 && (*(_BYTE *)(v406 + v402 + 10272) & 2) != 0)
      {
        v411 = 0;
        v412 = *(_DWORD *)(v410 + 1024);
        v413 = v412 & v408;
        v414 = (uint64_t *)(v406 + 10000);
        do
        {
          if (v402 == v411)
          {
            LOBYTE(v415) = 0;
          }
          else
          {
            v415 = *v414;
            if (*v414)
              LOBYTE(v415) = (*(_DWORD *)(v415 + 1024) & v408) == v413;
          }
          if (v411 > 0xF)
            break;
          ++v411;
          v414 += 2;
        }
        while ((v415 & 1) == 0);
        v416 = v95 + 2 * v403;
        *(_WORD *)(v416 + 4632) = v413;
        *(_WORD *)(v95 + 4792) |= 1 << v403;
        if ((v415 & 1) != 0)
        {
          *(_WORD *)(v95 + 4794) |= 1 << v403;
          *(_DWORD *)(v95 + 4 * v403 + 4728) = (v409 - v412 + *(unsigned __int16 *)(v416 + 4632)) / v405;
        }
        ++v403;
      }
      ++v402;
    }
    while (v402 != 17);
    *(_DWORD *)(v95 + 4612) = v403;
    v417 = (unsigned __int16 *)(v95 + 4632);
    v418 = v403;
    v419 = (unsigned __int16 *)(v95 + 4632 + 2 * v403);
    if (v403 < 129)
    {
LABEL_545:
      sub_1C9752D8C((unsigned __int16 *)(v95 + 4632), v419, v418, 0, 0);
    }
    else
    {
      v420 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v421 = v403;
      while (1)
      {
        v422 = (unsigned __int16 *)operator new(2 * v421, v420);
        if (v422)
          break;
        v94 = v421 > 1;
        v421 >>= 1;
        if (!v94)
          goto LABEL_545;
      }
      v423 = v422;
      sub_1C9752D8C(v417, v419, v418, v422, v421);
      operator delete(v423);
    }
    v95 = v767;
    v424 = *(_DWORD *)(v767 + 4612);
    v425 = v730[529];
    if (v424 > v425)
    {
      if (dword_1ED1ACCC0 >= 4)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Number of LTRs in DPB is %d, more than specified (%d)!\n", *(_DWORD *)(v767 + 4612), v425);
        syslog(28, "Number of LTRs in DPB is %d, more than specified (%d)!\n", *(_DWORD *)(v767 + 4612), v730[529]);
        v425 = v730[529];
        v95 = v767;
      }
      *(_DWORD *)(v95 + 4612) = v425;
      v424 = v425;
    }
    if (v424)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v426 = "LTR encoding is broken\n";
        fwrite("LTR encoding is broken\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        v12 = 4294954386;
        goto LABEL_614;
      }
      return 4294954386;
    }
    v400 = *(_QWORD **)(v95 + 3032);
    v102 = v750;
  }
  else
  {
    *(_DWORD *)(v95 + 4612) = 0;
  }
  v12 = sub_1C9752480((_DWORD *)(v767 + 3056), v400[72] + 9968, (uint64_t)(v400 + 5), (_BYTE *)v738, v95 + 4608, *(_DWORD *)(v400[79] + 1024));
  if ((_DWORD)v12)
    goto LABEL_616;
  v120 = *(_QWORD *)(v95 + 3032);
  v131 = *(unsigned __int8 *)(v120 + 648);
  if (v131 == 5)
  {
    if (*(_DWORD *)(v95 + 3064) || *(_DWORD *)(v95 + 3068))
    {
      v131 = 5;
    }
    else
    {
      v131 = 4;
      *(_BYTE *)(v120 + 648) = 4;
    }
  }
  else if (v131 == 1)
  {
    *(_WORD *)(v738 + 172) = 0;
    *(_DWORD *)(v738 + 242) = 0;
    v427 = *(unsigned __int8 *)(v738 + 160);
    if (*(_BYTE *)(v738 + 160))
    {
      v428 = (_BYTE *)(v738 + 2);
      do
      {
        *v428 = 0;
        v428 += 4;
        --v427;
      }
      while (v427);
    }
    v429 = *(unsigned __int8 *)(v738 + 161);
    if (*(_BYTE *)(v738 + 161))
    {
      v430 = (_BYTE *)(v738 + 66);
      do
      {
        *v430 = 0;
        v430 += 4;
        --v429;
      }
      while (v429);
    }
    *(_BYTE *)(v120 + 676) = 1;
  }
  v431 = *(uint64_t **)(v95 + 1016);
  LODWORD(v432) = *((_DWORD *)v431 + 171);
  v433 = *((_DWORD *)v431 + 764);
  if ((int)v432 >= v433)
    v432 = v433;
  else
    v432 = v432;
  *(_DWORD *)(v95 + 3004) = v432;
  if ((int)v432 >= 1)
  {
    LODWORD(v434) = 0;
    v435 = *((int *)v431 + 765);
    v436 = *((int *)v431 + 766);
    v437 = v431 + 385;
    v438 = v431 + 417;
    v439 = v431 + 449;
    v440 = *((int *)v431 + 767);
    do
    {
      if ((int)v435 >= 1)
      {
        v441 = 0;
        v442 = (int)v434;
        v443 = v434;
        v444 = (_DWORD *)(*(_QWORD *)(v95 + 1024) + 16 * (int)v434 + 4);
        v445 = v437;
        do
        {
          v446 = *v445;
          v445 += 2;
          *(v444 - 1) = *(_DWORD *)(v446 + 1024);
          *v444 = v443 + v441++;
          v434 = v442 + v441;
          if (v441 >= v435)
            break;
          v444 += 4;
        }
        while (v434 < v432);
      }
      if ((int)v436 >= 1 && (int)v434 < (int)v432)
      {
        v447 = 0;
        v448 = (int)v434;
        v449 = v434;
        v450 = (_DWORD *)(*(_QWORD *)(v95 + 1024) + 16 * (int)v434 + 4);
        v451 = v438;
        do
        {
          v452 = *v451;
          v451 += 2;
          *(v450 - 1) = *(_DWORD *)(v452 + 1024);
          *v450 = v449 + v447++;
          if (v447 >= v436)
            break;
          v450 += 4;
        }
        while (v448 + v447 < v432);
        LODWORD(v434) = v448 + v447;
      }
      if ((int)v440 >= 1 && (int)v434 < (int)v432)
      {
        v453 = 0;
        v454 = (int)v434;
        v455 = v434;
        v456 = (_DWORD *)(*(_QWORD *)(v95 + 1024) + 16 * (int)v434 + 4);
        v457 = v439;
        do
        {
          v458 = *v457;
          v457 += 2;
          *(v456 - 1) = *(_DWORD *)(v458 + 1024);
          *v456 = v455 + v453++;
          if (v453 >= v440)
            break;
          v456 += 4;
        }
        while (v454 + v453 < v432);
        LODWORD(v434) = v454 + v453;
      }
      LODWORD(v434) = v434 + 1;
    }
    while ((int)v434 < (int)v432);
  }
LABEL_593:
  if (v729[552]
    || v729[562] == 1
    || *(_BYTE *)(*(_QWORD *)(v120 + 56) + 12)
    || (char)v729[444] > 1
    || v729[894]
    || v729[752])
  {
    v459 = *((_DWORD *)v729 + 114);
    v460 = *(_QWORD *)(v120 + 576);
    if (!*(_BYTE *)(v460 + 870))
      sub_1C97D8A50(v746, v120 + 616);
    if (v131 > 2)
    {
      sub_1C98025A0(*(_QWORD **)(v95 + 3048), *(_QWORD *)(v95 + 3032), 0, 1);
      if ((_DWORD)v467)
        goto LABEL_612;
LABEL_615:
      v12 = sub_1C97D93F4((uint64_t)v746);
      if ((_DWORD)v12)
      {
LABEL_616:
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("Precompress failed\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "Precompress failed\n");
        }
        return v12;
      }
    }
    else
    {
      LODWORD(v119) = *(_DWORD *)(v95 + 5612);
      *(_DWORD *)(v95 + 6272) = fabs(sqrt((double)v119));
      if (*(_BYTE *)(v460 + 936))
      {
        v461 = 0;
        v462 = *(_QWORD *)(v95 + 3032);
        v463 = (uint64_t *)(*(_QWORD *)(v462 + 576) + 10000);
        v464 = 1;
        do
        {
          v465 = *v463;
          if (*v463 && *(int *)(v465 + 1024) >= 1 && *(int *)(v465 + 12) < 1)
            break;
          v464 = v461 < 0x10;
          v463 += 2;
          ++v461;
        }
        while (v461 != 17);
        if (v464)
        {
          v466 = *(_BYTE *)(v462 + 648);
          *(_BYTE *)(v462 + 648) = 4;
          sub_1C98025A0(*(_QWORD **)(v95 + 3048), v462, 0, 1);
          if (!(_DWORD)v467)
          {
            *(_BYTE *)(*(_QWORD *)(v95 + 3032) + 648) = v466;
            goto LABEL_615;
          }
LABEL_612:
          v12 = v467;
          if (dword_1ED1ACCC0 < 3)
            return v12;
          v426 = "SliceEnc initialization failed\n";
          fwrite("SliceEnc initialization failed\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
LABEL_614:
          syslog(27, v426);
          goto LABEL_616;
        }
      }
    }
    if (*(_BYTE *)(v460 + 552))
    {
      v468 = *(_QWORD *)(v95 + 3040);
      if (v468)
      {
        *((_WORD *)v102 + 878) = 0;
        v469 = *(_QWORD *)(v95 + 3032);
        v470 = 0.0;
        if (*(_BYTE *)(v469 + 648) != 5)
        {
          v471 = *(_DWORD *)(v95 + 6272);
          if (v131 > 2)
          {
            if (v471 < 0xB || (float)((float)v471 * 3.1623) >= (float)*(unsigned int *)(v95 + 6276))
            {
              v471 = *(_DWORD *)(v95 + 6268);
              if (v471 <= 0xA)
                v471 = 10;
            }
            else
            {
              v102[1756] = 1;
            }
            *(_DWORD *)(v95 + 6268) = v471;
            v472 = *(_DWORD *)(v469 + 652) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 3048) + 1672) + 8);
            if (v472 < 0)
              v472 = -v472;
            v470 = (double)(v472 - 1) * 0.1;
          }
          else
          {
            v102[1756] = 1;
            if (v471 <= 0xA)
              v471 = 10;
            *(_DWORD *)(v95 + 6268) = v471;
          }
          if (!*(_DWORD *)(v460 + 456))
          {
            v473 = 1.0 - v470;
            v471 = (float)((float)v471 * v473);
          }
          v474 = *(double *)(v468 + 32);
          if (v474 <= 0.0)
          {
            v470 = (double)v471;
          }
          else
          {
            v475 = (double)v471;
            if (v474 * 0.85 <= (double)v471)
            {
              v470 = (v474 * 7.0 + v475) * 0.125;
            }
            else
            {
              v470 = (v474 + v475) * 0.5;
              v102[1757] = 1;
            }
          }
          *(double *)(v468 + 32) = v470;
        }
        v476 = v470;
        if (v102[1758])
        {
          LODWORD(v476) = *(_DWORD *)(v95 + 6268);
          v476 = (double)*(unint64_t *)&v476;
        }
        *(double *)(v95 + 6296) = v476;
        if (v459 == 1)
        {
          v477 = 0.75;
          v478 = v470 * 0.75;
          LODWORD(v477) = *(_DWORD *)(v95 + 6268);
          v479 = (double)v477;
          if (v470 * 0.75 > v479)
            goto LABEL_647;
          if (v470 * 1.25 < v479)
          {
            v478 = (v470 * 1.25 + v479) * 0.5;
LABEL_647:
            *(double *)(v95 + 6296) = v478;
          }
        }
        *(double *)(v468 + 24) = v470;
      }
    }
  }
  else
  {
    v727 = *(_QWORD *)(v120 + 576);
    if (*(_BYTE *)(v727 + 482) || *(_BYTE *)(v727 + 450) || *(_BYTE *)(v95 + 816))
      sub_1C97D8C6C(v746, v120 + 616);
  }
  v480 = *(_QWORD **)(v95 + 3032);
  v481 = (_BYTE *)v480[72];
  if (v481[482] || v481[450])
  {
    v482 = v480[77];
    v483 = *(_QWORD *)(v482 + 400);
    v484 = *(_QWORD *)(v482 + 416);
    v485 = *(_QWORD *)(v95 + 5648);
    v486 = *(unsigned int *)(v95 + 5532);
    if (*(_BYTE *)(v480[5] + 2096) == 10)
      v487 = 8;
    else
      v487 = 6;
    v488 = *(unsigned int *)(v95 + 5528);
    if ((int)v486 >= 8)
    {
      v489 = 0;
      LODWORD(v490) = 0;
      v491 = *(_QWORD *)(v95 + 5752);
      v492 = (int)v488 >> 3;
      if ((int)v488 >> 3 <= 1)
        v492 = 1;
      do
      {
        if ((int)v488 >= 8)
        {
          v490 = (int)v490;
          v493 = v492;
          do
          {
            *(_DWORD *)(v491 + 4 * v490) = (*(_DWORD *)(v485 + 4 * v490) + (1 << (v487 - 1))) >> v487 >> 4;
            ++v490;
            --v493;
          }
          while (v493);
        }
        ++v489;
      }
      while (v489 != v486 >> 3);
      v488 = *(unsigned int *)(v95 + 5528);
      v486 = *(unsigned int *)(v95 + 5532);
    }
    v494 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v95 + 888))(v483, v484, v488, v486, v485, *(_QWORD *)(v95 + 5824), *(_QWORD *)(v95 + 5848));
    *(_DWORD *)(v95 + 5616) = v494;
    v495 = *(unsigned __int8 *)(v480[77] + 531);
    v496 = *(_DWORD *)(v95 + 5528);
    v497 = *(_DWORD *)(v95 + 5532);
    v498 = *(unsigned int **)(v95 + 5824);
    v499 = *(_QWORD **)(v95 + 5848);
    if (v495)
    {
      bzero(v773, 0x1940uLL);
      bzero(v772, 0x1940uLL);
      if (v497 >= 1)
      {
        for (n = 0; n < v497; n += 16)
        {
          if (v496 >= 1)
          {
            for (ii = 0; ii < v496; ii += 16)
            {
              v502 = *v498;
              v503 = *v499 - ((v502 * (unint64_t)v502) >> 8) + 128;
              if (v503 < 0x3E300)
              {
                v504 = v503 >> 8;
                v505 = ((v504 + 5) * (unsigned __int128)0x199999999999999AuLL) >> 64;
                v506 = (unint64_t)(v502 + 512) >> 14;
                if (v504 <= v494)
                  v507 = (unsigned int (**)(__n128 *, __n128 *))v772;
                else
                  v507 = v773;
                v508 = (uint64_t)v507 + 404 * v506 + 4 * v505;
                ++*(_DWORD *)(v508 + 4);
              }
              ++v498;
              ++v499;
            }
          }
        }
      }
      v509 = 0;
      v480 = *(_QWORD **)(v767 + 3032);
      v510 = 4;
      v511 = v729;
      do
      {
        v512 = 0;
        v513 = 0;
        v514 = 0;
        v515 = 0;
        v516 = -100;
        v517 = v510;
        do
        {
          if (*(_DWORD *)((char *)v773 + v517) > v515)
          {
            v515 = *(_DWORD *)((char *)v773 + v517);
            v514 = v516 + 101;
          }
          if (*(_DWORD *)&v772[v517] > v513)
          {
            v513 = *(_DWORD *)&v772[v517];
            v512 = v516 + 101;
          }
          v517 += 4;
          v518 = __CFADD__(v516++, 1);
        }
        while (!v518);
        if (v514 >= 2)
          v519 = v514 - 1;
        else
          v519 = 0;
        if (v512 >= 2)
          v520 = v512 - 1;
        else
          v520 = 0;
        v521 = v519 - v520;
        if (v519 - v520 < 0)
          v521 = v520 - v519;
        v522 = 10 * v520;
        v523 = 5 * (v520 + v519);
        if (v521 >= 2)
          v523 = v522;
        *((_DWORD *)v480 + v509++ + 38) = (int)sqrt((double)v523);
        v510 += 404;
      }
      while (v509 != 16);
    }
    else
    {
      bzero(v773, 0x1940uLL);
      bzero(v772, 0x1940uLL);
      if (v497 >= 1)
      {
        for (jj = 0; jj < v497; jj += 16)
        {
          if (v496 >= 1)
          {
            for (kk = 0; kk < v496; kk += 16)
            {
              v526 = *v498;
              v527 = *v499 - ((v526 * (unint64_t)v526) >> 8) + 128;
              if (v527 < 0x3E300)
              {
                v528 = v527 >> 8;
                v529 = ((v528 + 5) * (unsigned __int128)0x199999999999999AuLL) >> 64;
                v530 = (unint64_t)(v526 + 128) >> 12;
                if (v528 <= v494)
                  v531 = (unsigned int (**)(__n128 *, __n128 *))v772;
                else
                  v531 = v773;
                v532 = (uint64_t)v531 + 404 * v530 + 4 * v529;
                ++*(_DWORD *)(v532 + 4);
              }
              ++v498;
              ++v499;
            }
          }
        }
      }
      v533 = 0;
      v480 = *(_QWORD **)(v767 + 3032);
      v534 = 4;
      v511 = v729;
      do
      {
        v535 = 0;
        v536 = 0;
        v537 = 0;
        v538 = 0;
        v539 = -100;
        v540 = v534;
        do
        {
          if (*(_DWORD *)((char *)v773 + v540) > v538)
          {
            v538 = *(_DWORD *)((char *)v773 + v540);
            v537 = v539 + 101;
          }
          if (*(_DWORD *)&v772[v540] > v536)
          {
            v536 = *(_DWORD *)&v772[v540];
            v535 = v539 + 101;
          }
          v540 += 4;
          v518 = __CFADD__(v539++, 1);
        }
        while (!v518);
        if (v537 >= 2)
          v541 = v537 - 1;
        else
          v541 = 0;
        if (v535 >= 2)
          v542 = v535 - 1;
        else
          v542 = 0;
        v543 = v541 - v542;
        if (v541 - v542 < 0)
          v543 = v542 - v541;
        v544 = 10 * v542;
        v545 = 5 * (v542 + v541);
        if (v543 >= 2)
          v545 = v544;
        *((_DWORD *)v480 + v533++ + 38) = (int)sqrt((double)v545);
        v534 += 404;
      }
      while (v533 != 16);
    }
    v481 = (_BYTE *)v480[72];
    v95 = v767;
  }
  else
  {
    v511 = v729;
  }
  if (!v481[452])
    goto LABEL_918;
  v546 = v480[77];
  v547 = *(uint8x16_t **)(v546 + 400);
  v548 = *(_QWORD *)(v546 + 416);
  v549 = *(_DWORD *)(v95 + 5528);
  v753 = 4 * ((*(_DWORD *)(v95 + 5532) + 15) >> 4) * ((v549 + 15) >> 4);
  v756 = ((v549 + 15) >> 4);
  bzero(*(void **)(v95 + 824), v753);
  v550 = *(_QWORD *)(v95 + 5408);
  v551 = *(_QWORD *)(v95 + 5432);
  LODWORD(v552) = *(_DWORD *)(v95 + 5528);
  v553 = ((int)v552 + 15) >> 4;
  v554 = *(_DWORD *)(v95 + 5532);
  if (*(_BYTE *)(v480[77] + 528) != 10)
  {
    if (v554 < 1)
      goto LABEL_776;
    v583 = 0;
    LODWORD(v584) = 0;
    while (1)
    {
      v583 += 16;
      if ((int)v552 >= 1)
        break;
LABEL_775:
      v547 += v548;
      if (v583 >= v554)
        goto LABEL_776;
    }
    v585 = 0;
    v584 = (int)v584;
    v586 = v547;
    while (1)
    {
      v585 += 16;
      v587 = *(_DWORD *)(v95 + 5532);
      if (v585 <= (int)v552 && v583 <= v587)
      {
        v592 = 0;
        v593 = v586;
        v594 = 16;
        do
        {
          v595 = vmovl_high_u8(*v593);
          v596 = vmovl_u8(*(uint8x8_t *)v593->i8);
          v592 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v592, *(uint16x4_t *)v596.i8), *(uint16x4_t *)v595.i8), (int32x4_t)vaddl_high_u16(v596, v595)));
          v593 = (uint8x16_t *)((char *)v593 + v548);
          --v594;
        }
        while (v594);
        v597 = 0;
        v598 = 4 * v592;
        *(_DWORD *)(v550 + 4 * v584) = 4 * v592;
        v599 = v586;
        v600 = 16;
        do
        {
          v601 = vmovl_high_u8(*v599);
          v602 = vmovl_u8(*(uint8x8_t *)v599->i8);
          v603 = vmull_u16(*(uint16x4_t *)v602.i8, *(uint16x4_t *)v602.i8);
          v604 = vmull_high_u16(v602, v602);
          v605 = vmull_high_u16(v601, v601);
          v606 = vmull_u16(*(uint16x4_t *)v601.i8, *(uint16x4_t *)v601.i8);
          v607 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v597, *(uint32x2_t *)v603.i8), *(uint32x2_t *)v606.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v604.i8, *(uint32x2_t *)v605.i8)), vaddq_s64((int64x2_t)vaddl_high_u32(v603, v606), (int64x2_t)vaddl_high_u32(v604, v605))));
          v597 = v607;
          v599 = (uint8x16_t *)((char *)v599 + v548);
          --v600;
        }
        while (v600);
        *(_DWORD *)(v551 + 4 * v584) = (16 * v607 - ((unint64_t)(v598 * (uint64_t)v598) >> 8) + 128) >> 8;
        v591 = (*(_DWORD *)(v550 + 4 * v584) + 128) >> 8;
      }
      else
      {
        if (v583 <= v587)
          v589 = 1;
        else
          v589 = v553;
        if (v584 <= v589)
        {
          *(_DWORD *)(v551 + 4 * v584) = 0;
          *(_DWORD *)(v550 + 4 * v584) = 0;
          goto LABEL_773;
        }
        v590 = v584 - v589;
        *(_DWORD *)(v551 + 4 * v584) = *(_DWORD *)(v551 + 4 * v590);
        v591 = *(_DWORD *)(v550 + 4 * v590);
      }
      *(_DWORD *)(v550 + 4 * v584) = v591;
LABEL_773:
      ++v584;
      v552 = *(int *)(v95 + 5528);
      ++v586;
      if (v585 >= v552)
      {
        v554 = *(_DWORD *)(v95 + 5532);
        goto LABEL_775;
      }
    }
  }
  if (v554 < 1)
    goto LABEL_776;
  v555 = 0;
  LODWORD(v556) = 0;
  v557 = (uint16x4_t *)&v547[1];
  v558 = 32 * v548;
  v559 = 2 * v548;
  while (2)
  {
    v555 += 16;
    if ((int)v552 < 1)
      goto LABEL_751;
    v560 = 0;
    v556 = (int)v556;
    v561 = v547;
    v562 = v557;
    while (2)
    {
      v560 += 16;
      v563 = *(_DWORD *)(v95 + 5532);
      if (v560 <= (int)v552 && v555 <= v563)
      {
        v568 = 0;
        v569 = v562;
        v570 = 16;
        do
        {
          v568 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v568, v569[-2]), *v569), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)v569[-2].i8, *(uint16x8_t *)v569->i8)));
          v569 = (uint16x4_t *)((char *)v569 + v559);
          --v570;
        }
        while (v570);
        v571 = 0;
        v572 = 0;
        *(_DWORD *)(v550 + 4 * v556) = v568;
        v573 = v561;
        do
        {
          v574 = 0;
          v575 = 0uLL;
          v576 = (int64x2_t)(unint64_t)v572;
          v577 = 0uLL;
          v578 = 0uLL;
          do
          {
            v579 = (uint16x8_t)v573[v574];
            v580 = vmull_high_u16(v579, v579);
            v581 = vmull_u16(*(uint16x4_t *)v579.i8, *(uint16x4_t *)v579.i8);
            v578 = (int64x2_t)vaddw_high_u32((uint64x2_t)v578, v580);
            v577 = (int64x2_t)vaddw_u32((uint64x2_t)v577, *(uint32x2_t *)v580.i8);
            v575 = (int64x2_t)vaddw_high_u32((uint64x2_t)v575, v581);
            v576 = (int64x2_t)vaddw_u32((uint64x2_t)v576, *(uint32x2_t *)v581.i8);
            ++v574;
          }
          while (v574 != 2);
          v582 = vaddvq_s64(vaddq_s64(vaddq_s64(v576, v577), vaddq_s64(v575, v578)));
          v572 = v582;
          ++v571;
          v573 = (uint8x16_t *)((char *)v573 + v559);
        }
        while (v571 != 16);
        *(_DWORD *)(v551 + 4 * v556) = (v582 - ((unint64_t)(v568 * (uint64_t)v568) >> 8) + 128) >> 8;
        v567 = (*(_DWORD *)(v550 + 4 * v556) + 128) >> 8;
LABEL_747:
        *(_DWORD *)(v550 + 4 * v556) = v567;
      }
      else
      {
        if (v555 <= v563)
          v565 = 1;
        else
          v565 = v553;
        if (v556 > v565)
        {
          v566 = v556 - v565;
          *(_DWORD *)(v551 + 4 * v556) = *(_DWORD *)(v551 + 4 * v566);
          v567 = *(_DWORD *)(v550 + 4 * v566);
          goto LABEL_747;
        }
        *(_DWORD *)(v551 + 4 * v556) = 0;
        *(_DWORD *)(v550 + 4 * v556) = 0;
      }
      ++v556;
      v552 = *(int *)(v95 + 5528);
      v562 += 4;
      v561 += 2;
      if (v560 < v552)
        continue;
      break;
    }
    v554 = *(_DWORD *)(v95 + 5532);
LABEL_751:
    v557 = (uint16x4_t *)((char *)v557 + v558);
    v547 = (uint8x16_t *)((char *)v547 + v558);
    if (v555 < v554)
      continue;
    break;
  }
LABEL_776:
  bzero(*(void **)(v95 + 5552), 4 * *(int *)(v95 + 5604));
  bzero(*(void **)(v95 + 5576), 4 * *(int *)(v95 + 5604));
  v608 = *(_DWORD *)(v95 + 5532);
  if (v608 < 17)
    goto LABEL_836;
  v609 = *(_QWORD *)(v95 + 5408);
  v610 = *(_QWORD *)(v95 + 5456);
  v611 = *(_QWORD *)(v95 + 5480);
  v612 = *(_DWORD *)(v95 + 5528);
  v613 = (v549 + 15) >> 4;
  v614 = v609 - 4 * (int)v756;
  for (mm = 16; mm < v608; mm += 16)
  {
    LODWORD(v616) = v613 + 1;
    if (v612 >= 17)
    {
      v616 = (int)v616;
      v617 = 16;
      do
      {
        *(_DWORD *)(v610 + 4 * v616) = *(_DWORD *)(v609 + 4 * v616) - *(_DWORD *)(v609 + 4 * v613);
        *(_DWORD *)(v611 + 4 * v616) = *(_DWORD *)(v609 + 4 * v616) - *(_DWORD *)(v614 + 4 * v616);
        v617 += 16;
        ++v616;
        v612 = *(_DWORD *)(v95 + 5528);
        ++v613;
      }
      while (v617 < v612);
      v608 = *(_DWORD *)(v95 + 5532);
    }
    v613 = v616;
  }
  if (v608 < 33)
  {
LABEL_836:
    v632 = *(int **)(v95 + 824);
  }
  else
  {
    v618 = (v549 + 15) >> 4;
    v619 = *(_DWORD *)(v95 + 5528);
    v620 = v614 + 4;
    v621 = *(_QWORD *)(v95 + 5504) + 4;
    v622 = 16;
    do
    {
      if (v619 <= 32)
      {
        v624 = v622 + 16;
      }
      else
      {
        v623 = v619 - 16;
        v624 = v622 + 16;
        v625 = v618;
        v626 = 32;
        v627 = (int *)(v609 + 4 + 4 * v618);
        do
        {
          if ((v626 - 16) < 0x11)
          {
            v628 = 0;
            v629 = 0;
          }
          else
          {
            v628 = *(v627 - 1);
            v629 = 1;
          }
          if (v626 < v623)
          {
            ++v629;
            v628 += v627[1];
          }
          if (v624 < *(_DWORD *)(v95 + 5532) - 16)
          {
            ++v629;
            v628 += *(_DWORD *)(v609 + 4 + 4 * (int)v756 + 4 * v625);
          }
          if (v622 >= 0x11)
          {
            ++v629;
            v628 += *(_DWORD *)(v620 + 4 * v625);
          }
          v630 = *v627++;
          v631 = v630 * v629 - v628;
          if (v631 < 0)
            v631 = -v631;
          *(_DWORD *)(v621 + 4 * v625) = v631;
          v619 = *(_DWORD *)(v95 + 5528);
          v623 = v619 - 16;
          ++v625;
          v94 = v626 < v619 - 16;
          v626 += 16;
        }
        while (v94);
        v608 = *(_DWORD *)(v95 + 5532);
        v618 = v625;
      }
      v618 += 2;
      v622 = v624;
    }
    while (v624 < v608 - 16);
    v632 = *(int **)(v95 + 824);
    if (v608 >= 33)
    {
      v633 = (v549 + 15) >> 4;
      v634 = v609 + 4;
      v635 = *(_DWORD *)(v95 + 5528);
      v636 = v611 + 4;
      v637 = v610 + 4;
      v638 = *(_QWORD *)(v95 + 5432) + 4;
      v639 = 16;
      do
      {
        if (v635 >= 33)
        {
          v640 = 0;
          v641 = v633;
          v642 = &v632[v633];
          v643 = v634 + 4 * v633;
          v644 = (uint64_t)&v632[v633 + 1 - (int)v756];
          v645 = (int)v756 + (uint64_t)v633;
          v646 = (uint64_t)&v632[v645 + 1];
          v647 = v636 + 4 * v645;
          v648 = v636 + 4 * v633;
          v649 = v637 + 4 * v633;
          v650 = 16;
          v651 = v638 + 4 * v633;
          do
          {
            v652 = *(_DWORD *)(v643 + v640);
            v653 = v652 >= 65 && v652 < *(_DWORD *)(v95 + 5600);
            if (v653 && (*(_DWORD *)(v651 + v640) - 1) <= 0xA)
            {
              v655 = *(_DWORD *)(v649 + v640);
              v654 = *(_DWORD *)(v649 + v640 + 4);
              if ((v654 * v655) < 0x5B)
                goto LABEL_822;
              if ((v654 * v655) >= 0xFFFFFFA6)
              {
                if (v655 < 0)
                  v655 = -v655;
                if (v654 < 0)
                  v654 = -v654;
                if (v655 < 0x14 || v654 <= 0x13)
                {
LABEL_822:
                  v657 = &v642[v640 / 4];
                  *(_QWORD *)v657 = 0x100000001;
                  v657[2] = 1;
                }
              }
              v658 = *(_DWORD *)(v648 + v640);
              v659 = *(_DWORD *)(v647 + v640);
              if ((v659 * v658) < 0x5B)
                goto LABEL_824;
              if ((v659 * v658) >= 0xFFFFFFA6)
              {
                if (v658 < 0)
                  v658 = -v658;
                if (v659 < 0)
                  v659 = -v659;
                if (v658 < 0x14 || v659 <= 0x13)
                {
LABEL_824:
                  v642[v640 / 4 + 1] = 1;
                  *(_DWORD *)(v644 + v640) = 1;
                  *(_DWORD *)(v646 + v640) = 1;
                }
              }
            }
            v650 += 16;
            v635 = *(_DWORD *)(v95 + 5528);
            v640 += 4;
            ++v641;
          }
          while (v650 < v635 - 16);
          v608 = *(_DWORD *)(v95 + 5532);
          v633 = v641;
        }
        v633 += 2;
        v639 += 16;
      }
      while (v639 < v608 - 16);
    }
  }
  v766 = *(void **)(v95 + 5552);
  if (*v632 < 1)
  {
    v771 = 0;
  }
  else
  {
    v771 = 1;
    *v632 = 1;
  }
  if (v549 < 17)
  {
LABEL_847:
    v758 = v549 > 16;
    if (*(int *)(v95 + 5532) < 33)
      goto LABEL_880;
    v663 = (v549 + 15) >> 4;
    v664 = &v632[-(int)v756];
    v665 = 16;
    while (1)
    {
      v761 = v665;
      if (v632[v663] >= 1)
      {
        v666 = v632[v663 - (int)v756];
        if (v666 < 1)
        {
          v632[v663] = ++v771;
          if (v771 == *(_DWORD *)(v95 + 5608))
            goto LABEL_879;
        }
        else
        {
          v632[v663] = v666;
        }
      }
      LODWORD(v667) = v663 + 1;
      if (*(int *)(v95 + 5528) >= 33)
        break;
LABEL_877:
      v663 = v667 + v758;
      v665 = v761 + 16;
      if (v761 + 16 >= *(_DWORD *)(v95 + 5532) - 16)
        goto LABEL_880;
    }
    v667 = (int)v667;
    v668 = 16;
    while (1)
    {
      if (v632[v667] >= 1)
      {
        v669 = v632[v663];
        v670 = v664[v667];
        if ((int)v669 < 1 || (int)v670 < 1)
        {
          if ((int)v669 < 1 || (_DWORD)v670 != 0)
          {
            v673 = (_DWORD)v669 || (int)v670 <= 0;
            LODWORD(v669) = v664[v667];
            if (v673)
            {
              v632[v667] = ++v771;
              if (v771 == *(_DWORD *)(v95 + 5608))
                goto LABEL_879;
              goto LABEL_876;
            }
          }
        }
        else
        {
          v674 = sub_1C97D9248((uint64_t)v746, (uint64_t)v766, v669);
          v675 = sub_1C97D9248((uint64_t)v746, (uint64_t)v766, v670);
          if (v675 < v674)
            v674 = v675;
          sub_1C97D92D0((uint64_t)v746, (uint64_t)v766, v771, v674, v669);
          sub_1C97D92D0((uint64_t)v746, (uint64_t)v766, v771, v674, v670);
          v664 = &v632[-(int)v756];
          LODWORD(v669) = v674;
          v95 = v767;
        }
        v632[v667] = v669;
      }
LABEL_876:
      v668 += 16;
      ++v667;
      ++v663;
      if (v668 >= *(_DWORD *)(v95 + 5528) - 16)
        goto LABEL_877;
    }
  }
  v660 = v632 + 1;
  v661 = v756 - 1;
  while (*v660 < 1)
  {
LABEL_846:
    ++v660;
    if (!--v661)
      goto LABEL_847;
  }
  v662 = *(v660 - 1);
  if (v662 >= 1)
  {
    *v660 = v662;
    goto LABEL_846;
  }
  *v660 = ++v771;
  if (v771 != *(_DWORD *)(v95 + 5608))
    goto LABEL_846;
LABEL_879:
  bzero(v766, 4 * *(int *)(v95 + 5604));
  v771 = *(_DWORD *)(v95 + 5608);
LABEL_880:
  v676 = *(int **)(v95 + 824);
  v677 = *(char **)(v95 + 5552);
  if (v771 < 0)
  {
    v511 = v729;
    goto LABEL_905;
  }
  v511 = v729;
  if (*(_DWORD *)(v95 + 5608) <= v771)
    goto LABEL_905;
  v678 = *(void **)(v95 + 5576);
  bzero(v678, 4 * *(int *)(v95 + 5604));
  v679 = *(_DWORD *)(v95 + 5532);
  if (v679 < 1)
  {
LABEL_892:
    v676 = *(int **)(v95 + 824);
    v677 = *(char **)(v95 + 5552);
    if (v771 < 1)
      goto LABEL_905;
    v686 = *(_QWORD *)(v95 + 5576);
    v687 = (v771 + 1);
    v688 = v687 - 1;
    v689 = (int *)(v686 + 4);
    do
    {
      if (*v689 <= 3)
        *v689 = 0;
      ++v689;
      --v688;
    }
    while (v688);
    bzero(v677, 4 * *(int *)(v95 + 5604));
    v690 = 1;
    v691 = 4;
    do
    {
      v692 = *(_DWORD *)(v686 + v691);
      if (v692 >= 1)
      {
        *(_DWORD *)(v686 + 4 * v690) = v692;
        *(_DWORD *)&v677[v691] = v690++;
      }
      v691 += 4;
    }
    while (4 * v687 != v691);
    v511 = v729;
  }
  else
  {
    v680 = 0;
    LODWORD(v681) = 0;
    v682 = *(_DWORD *)(v95 + 5528);
    while (v682 < 1)
    {
LABEL_891:
      v680 += 16;
      if (v680 >= v679)
        goto LABEL_892;
    }
    v683 = 0;
    v681 = (int)v681;
    while (1)
    {
      v684 = v676[v681];
      v685 = *(_DWORD *)&v677[4 * v684];
      if (v685 >= 1)
      {
        v676[v681] = v685;
        LODWORD(v684) = v685;
      }
      if ((int)v684 > v771)
        break;
      ++*((_DWORD *)v678 + (int)v684);
      ++v681;
      v683 += 16;
      v682 = *(_DWORD *)(v95 + 5528);
      if (v683 >= v682)
      {
        v679 = *(_DWORD *)(v95 + 5532);
        goto LABEL_891;
      }
    }
    bzero(v678, 4 * *(int *)(v95 + 5604));
    bzero(v677, 4 * *(int *)(v95 + 5604));
    v676 = *(int **)(v95 + 824);
    v677 = *(char **)(v95 + 5552);
LABEL_905:
    bzero(v677, 4 * *(int *)(v95 + 5604));
    v690 = 1;
  }
  v693 = *(_DWORD *)(v95 + 5532);
  if (v693 < 1)
  {
LABEL_914:
    v699 = *(_DWORD **)(v95 + 824);
    if (v690 <= 1)
    {
      v700 = v753;
      goto LABEL_917;
    }
    if (v693 >= 1)
    {
      v719 = 0;
      LODWORD(v720) = 0;
      v721 = *(_QWORD *)(v95 + 5408);
      v722 = *(_DWORD *)(v95 + 5528);
      do
      {
        if (v722 >= 1)
        {
          v723 = 0;
          v720 = (int)v720;
          do
          {
            if ((int)v699[v720] >= 1)
            {
              v724 = *(_DWORD *)(v721 + 4 * v720);
              if (v724 >= *(_DWORD *)(v95 + 5600))
              {
LABEL_944:
                LODWORD(v726) = 4;
              }
              else
              {
                v725 = 0;
                while (1)
                {
                  v726 = v725 + 1;
                  if (v724 < dword_1C9857DD4[v725])
                    break;
                  ++v725;
                  if (v726 == 3)
                    goto LABEL_944;
                }
              }
              v699[v720] = v726;
              v722 = *(_DWORD *)(v95 + 5528);
            }
            ++v720;
            v723 += 16;
          }
          while (v723 < v722);
          v693 = *(_DWORD *)(v95 + 5532);
        }
        v719 += 16;
      }
      while (v719 < v693);
    }
  }
  else
  {
    v694 = 0;
    LODWORD(v695) = 0;
    v696 = *(_DWORD *)(v95 + 5528);
    while (v696 < 1)
    {
LABEL_913:
      v694 += 16;
      if (v694 >= v693)
        goto LABEL_914;
    }
    v697 = 0;
    v695 = (int)v695;
    while (1)
    {
      v698 = *(_DWORD *)&v677[4 * v676[v695]];
      v676[v695] = v698;
      if (v698 >= v690)
        break;
      ++v695;
      v697 += 16;
      v696 = *(_DWORD *)(v95 + 5528);
      if (v697 >= v696)
      {
        v693 = *(_DWORD *)(v95 + 5532);
        goto LABEL_913;
      }
    }
    bzero(v677, 4 * *(int *)(v95 + 5604));
    v700 = v753;
    bzero(v676, v753);
    v699 = *(_DWORD **)(v95 + 824);
LABEL_917:
    bzero(v699, v700);
  }
LABEL_918:
  sub_1C97D8F6C((uint64_t)v746);
  v701 = *(_QWORD *)(v95 + 3032);
  if (*(_BYTE *)(v701 + 465))
  {
    v702 = *(unsigned __int8 *)(*(_QWORD *)(v701 + 40) + 2096);
    if (v511[484])
    {
      v703 = *(unsigned int *)(v95 + 5532);
      if ((int)v703 >= 1)
      {
        v704 = 0;
        v705 = v702 - 8;
        v706 = *(_QWORD *)(*(_QWORD *)(v701 + 576) + 10760);
        v707 = *(unsigned int *)(v95 + 5544);
        v708 = *(_QWORD *)(v95 + 5872);
        do
        {
          if ((int)v707 >= 1)
          {
            v709 = 0;
            v710 = 0;
            v711 = *(_QWORD *)(v95 + 6136) + 4 * (v704 >> 3) * ((uint64_t)(*(_DWORD *)(v95 + 5528) + 7) >> 3);
            do
            {
              *(_WORD *)(v708 + v710) = ((*(unsigned __int16 *)(v708 + v710) << v705)
                                       * *(unsigned __int16 *)(v706
                                                                           + 2
                                                                           * *(unsigned int *)(v711 + (v709 >> 33)))) >> 8;
              v710 += 2;
              v709 += 0x800000000;
            }
            while (2 * v707 != v710);
          }
          v704 += 8;
          v708 += 2 * (int)v707;
        }
        while (v704 < v703);
      }
    }
    else if (v702 >= 9)
    {
      v712 = *(_DWORD *)(v95 + 5532);
      if (v712 >= 1)
      {
        v713 = 0;
        v714 = v702 - 8;
        v715 = *(unsigned int *)(v95 + 5544);
        v716 = *(_QWORD *)(v95 + 5872);
        do
        {
          if ((int)v715 >= 1)
          {
            v717 = 0;
            do
            {
              *(_WORD *)(v716 + v717) = *(unsigned __int16 *)(v716 + v717) << v714;
              v717 += 2;
            }
            while (2 * v715 != v717);
          }
          v713 += 8;
          v716 += 2 * (int)v715;
        }
        while (v713 < v712);
      }
    }
  }
  sub_1C974E55C((_QWORD *)(v767 + 3016));
  v718 = *(_QWORD *)v743;
  bzero(*(void **)(*(_QWORD *)v743 + 944), *(_QWORD *)(*(_QWORD *)v743 + 928) * *(_QWORD *)(*(_QWORD *)v743 + 760));
  bzero(*(void **)(v718 + 968), *(_QWORD *)(v718 + 936) * *(_QWORD *)(v718 + 752));
  bzero(*(void **)(v718 + 800), 2 * *(_QWORD *)(v718 + 760) * *(_QWORD *)(v718 + 768));
  bzero(*(void **)(v718 + 880), 16 * *(_QWORD *)(v718 + 840) * *(_QWORD *)(v718 + 848));
  return 0;
}

