uint64_t sub_1C96FB64C(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  FILE *v28;
  const char *v29;
  const char *v30;
  size_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v2 = *((_QWORD *)a1 + 269);
  v3 = *a1;
  v4 = (uint64_t *)(v2 + 1536);
  v5 = (uint64_t *)(v2 + 16 * v3);
  if (v3 > 0xF)
    v5 = v4;
  v7 = *v5;
  v6 = (std::__shared_weak_count *)v5[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v7)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "No VPS found for ID %d\n", *a1);
      syslog(27, "No VPS found for ID %d\n", *a1);
    }
    goto LABEL_24;
  }
  v10 = 0;
  v11 = a1[1];
  v12 = v7 + 203;
  v13 = a1 + 226;
  do
  {
    v14 = *(unsigned __int8 *)(v12 + v10);
    if (v13[v10] > v14)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_dec_pic_buffering[%d] (%d) out of range [0, %d]\n", v10, v13[v10], v14);
        syslog(27, "sps_max_dec_pic_buffering[%d] (%d) out of range [0, %d]\n", v10, v13[v10], *(unsigned __int8 *)(v12 + v10));
      }
      goto LABEL_24;
    }
    ++v10;
  }
  while (v11 + 1 != v10);
  if (*(_BYTE *)(v7 + 280) && !a1[2008])
  {
    *((_DWORD *)a1 + 503) = *(_DWORD *)(v7 + 284);
    *((_DWORD *)a1 + 504) = *(_DWORD *)(v7 + 288);
    a1[2020] = *(_BYTE *)(v7 + 292);
  }
  if (v11 >= 7)
  {
    if (dword_1ED1ACCC0 < 3)
      goto LABEL_24;
    v16 = 6;
    v17 = "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n", v11, 0, 6);
    v18 = 0;
    v19 = a1[1];
    goto LABEL_23;
  }
  v15 = *(unsigned __int8 *)(v7 + 200);
  if (v11 > v15)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n", v11, 0, v15);
      syslog(27, "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n");
    }
    goto LABEL_24;
  }
  v24 = a1[201];
  if (v24 >= 4)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "chroma_format_idc_ of %lld is out of range (%lld, %lld)\n", v24, 0, 3);
      syslog(27, "chroma_format_idc_ of %lld is out of range (%lld, %lld)\n");
    }
  }
  else
  {
    v25 = *((int *)a1 + 51);
    if ((int)v25 <= 0)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "pic_width_in_luma_samples_ of %lld is out of range (%lld, %lld)\n", v25, 1, 0x7FFFFFFFLL);
        syslog(27, "pic_width_in_luma_samples_ of %lld is out of range (%lld, %lld)\n");
      }
    }
    else
    {
      v26 = *((int *)a1 + 52);
      if ((int)v26 <= 0)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "pic_height_in_luma_samples_ of %lld is out of range (%lld, %lld)\n", v26, 1, 0x7FFFFFFFLL);
          syslog(27, "pic_height_in_luma_samples_ of %lld is out of range (%lld, %lld)\n");
        }
      }
      else
      {
        if ((unint64_t)((int)v26 * (uint64_t)(int)v25) >> 31)
        {
          if (dword_1ED1ACCC0 < 3)
            goto LABEL_24;
          v28 = (FILE *)*MEMORY[0x1E0C80C10];
          v29 = "static_cast<size_t>(pic_width_in_luma_samples_)*pic_height_in_luma_samples_ <= INT32_MAX failed!\n";
          v30 = "static_cast<size_t>(pic_width_in_luma_samples_)*pic_height_in_luma_samples_ <= INT32_MAX failed!\n";
          v31 = 97;
          goto LABEL_45;
        }
        v27 = a1[2112];
        if (((v26 | v25) & ~(-1 << v27)) != 0)
        {
          if (dword_1ED1ACCC0 < 3)
            goto LABEL_24;
          v28 = (FILE *)*MEMORY[0x1E0C80C10];
          v29 = "width_remainder == 0 && height_remainder == 0 failed!\n";
          v30 = "width_remainder == 0 && height_remainder == 0 failed!\n";
          v31 = 54;
          goto LABEL_45;
        }
        if (a1[212])
        {
          v32 = (unsigned __int8 *)&unk_1C9861970 + 2 * v24;
          v33 = *v32;
          v34 = *((unsigned __int16 *)a1 + 107);
          v35 = v25 / v33;
          v36 = *((unsigned __int16 *)a1 + 108);
          if (v34 > (int)(v35 + ~(_DWORD)v36))
          {
            if (dword_1ED1ACCC0 < 3)
              goto LABEL_24;
            v17 = "conf_win_left_offset_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "conf_win_left_offset_ of %lld is out of range (%lld, %lld)\n", v34, 0, ~v36 + v35);
            v18 = 0;
            v19 = *((unsigned __int16 *)a1 + 107);
            v37 = *((_DWORD *)a1 + 51) / v33;
            v38 = *((unsigned __int16 *)a1 + 108);
LABEL_53:
            v16 = ~v38 + v37;
LABEL_23:
            syslog(27, v17, v19, v18, v16);
            goto LABEL_24;
          }
          v39 = v32[1];
          v40 = *((unsigned __int16 *)a1 + 109);
          v41 = v26 / v39;
          v42 = *((unsigned __int16 *)a1 + 110);
          if (v40 > (int)(v41 + ~(_DWORD)v42))
          {
            if (dword_1ED1ACCC0 < 3)
              goto LABEL_24;
            v17 = "conf_win_top_offset_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "conf_win_top_offset_ of %lld is out of range (%lld, %lld)\n", v40, 0, ~v42 + v41);
            v18 = 0;
            v19 = *((unsigned __int16 *)a1 + 109);
            v37 = *((_DWORD *)a1 + 52) / v39;
            v38 = *((unsigned __int16 *)a1 + 110);
            goto LABEL_53;
          }
        }
        v43 = a1[222];
        if (v43 >= 7)
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "bit_depth_luma_minus8_ of %lld is out of range (%lld, %lld)\n", v43, 0, 6);
            syslog(27, "bit_depth_luma_minus8_ of %lld is out of range (%lld, %lld)\n");
          }
        }
        else
        {
          v44 = a1[223];
          if (v44 >= 7)
          {
            if (dword_1ED1ACCC0 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "bit_depth_chroma_minus8_ of %lld is out of range (%lld, %lld)\n", v44, 0, 6);
              syslog(27, "bit_depth_chroma_minus8_ of %lld is out of range (%lld, %lld)\n");
            }
          }
          else
          {
            v45 = a1[224];
            if (v45 <= 0xC)
            {
              v46 = 0;
              v47 = 0;
              v48 = v11 + 1;
              do
              {
                v49 = a1[v47 + 233];
                v50 = a1[v47 + 226];
                if (v49 > v50)
                {
                  if (dword_1ED1ACCC0 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n", v49, 0, v50);
                    syslog(27, "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_24;
                }
                v51 = *(unsigned int *)&a1[4 * v47 + 240];
                if (v51 >= 0xFFFFFFFE)
                {
                  if (dword_1ED1ACCC0 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n", v51, 0, 4294967293);
                    syslog(27, "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_24;
                }
                if (v47)
                {
                  v52 = &a1[(v47 - 1)];
                  v53 = v52[226];
                  v54 = v52[233];
                }
                else
                {
                  v53 = 0;
                  v54 = 0;
                }
                v55 = *(unsigned __int8 *)(v7 + v47 + 203);
                if (v50 < v53 || v50 > v55)
                {
                  if (dword_1ED1ACCC0 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n", v50, v53, v55);
                    syslog(27, "sps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_24;
                }
                v56 = *(unsigned __int8 *)(v7 + v47 + 210);
                if (v49 < v54 || v49 > v56)
                {
                  if (dword_1ED1ACCC0 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n", v49, v54, v56);
                    syslog(27, "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_24;
                }
                v57 = *(unsigned int *)(v7 + 220 + 4 * v47);
                if ((int)v57 - 1 < (v51 - 1))
                {
                  if (dword_1ED1ACCC0 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n", v51, 1, v57);
                    syslog(27, "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_24;
                }
                ++v47;
                v46 += 4;
              }
              while (v48 != v47);
              if (a1[320])
              {
                v58 = *((unsigned int *)a1 + 81);
                if ((_DWORD)v58)
                {
                  v59 = 16 << v45;
                  v60 = (16 << v45) - 1;
                  v61 = (unsigned __int16 *)(a1 + 328);
                  while (1)
                  {
                    v62 = *v61;
                    if (v62 > v60)
                      break;
                    ++v61;
                    if (!--v58)
                      goto LABEL_74;
                  }
                  if (dword_1ED1ACCC0 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "lt_ref_pic_poc_lsb_sps_[idx] of %lld is out of range (%lld, %lld)\n", v62, 0, v59 - 1);
                    syslog(27, "lt_ref_pic_poc_lsb_sps_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_24;
                }
              }
LABEL_74:
              if ((v27 - 3) >= 4u)
              {
                if (dword_1ED1ACCC0 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2MinCbSize_ of %lld is out of range (%lld, %lld)\n", v27, 3, 6);
                  syslog(27, "log2MinCbSize_ of %lld is out of range (%lld, %lld)\n");
                }
                goto LABEL_24;
              }
              v63 = a1[2113];
              if ((v63 - 3) >= 4u)
              {
                if (dword_1ED1ACCC0 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2CtbSize_ of %lld is out of range (%lld, %lld)\n", v63, 3, 6);
                  syslog(27, "log2CtbSize_ of %lld is out of range (%lld, %lld)\n");
                }
                goto LABEL_24;
              }
              v64 = a1[2115];
              if (v63 >= 5)
                v65 = 5;
              else
                v65 = a1[2113];
              if (v64 > v65 || v64 <= 1)
              {
                if (dword_1ED1ACCC0 < 3)
                  goto LABEL_24;
                v18 = 2;
                v17 = "log2MaxTrafoSize_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2MaxTrafoSize_ of %lld is out of range (%lld, %lld)\n", v64, 2, v65);
                v19 = a1[2115];
                if (a1[2113] >= 5u)
                  v16 = 5;
                else
                  v16 = a1[2113];
                goto LABEL_23;
              }
              v66 = a1[2114];
              if (v66 > v64 || v66 <= 1)
              {
                if (dword_1ED1ACCC0 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2MinTrafoSize_ of %lld is out of range (%lld, %lld)\n", v66, 2, v64);
                  syslog(27, "log2MinTrafoSize_ of %lld is out of range (%lld, %lld)\n");
                }
                goto LABEL_24;
              }
              if (!a1[278])
                goto LABEL_93;
              if (v27 >= 5)
                v67 = 5;
              else
                v67 = a1[2112];
              if (a1[279] >= a1[2096])
              {
                if (dword_1ED1ACCC0 < 3)
                  goto LABEL_24;
                v28 = (FILE *)*MEMORY[0x1E0C80C10];
                v29 = "pcm.pcm_sample_bit_depth_luma_minus1_ + 1 <= bitDepth_y_ failed!\n";
                v30 = "pcm.pcm_sample_bit_depth_luma_minus1_ + 1 <= bitDepth_y_ failed!\n";
                v31 = 65;
              }
              else
              {
                if (a1[280] < a1[2098])
                {
                  v68 = a1[286];
                  if (v68 > v65 || v68 < v67)
                  {
                    if (dword_1ED1ACCC0 >= 3)
                    {
                      fprintf((FILE *)*MEMORY[0x1E0C80C10], "pcm.log2MinIPCMCUSize_ of %lld is out of range (%lld, %lld)\n", v68, v67, v65);
                      syslog(27, "pcm.log2MinIPCMCUSize_ of %lld is out of range (%lld, %lld)\n");
                    }
                    goto LABEL_24;
                  }
                  v69 = a1[287];
                  if (v69 > v65 || v69 < v67)
                  {
                    if (dword_1ED1ACCC0 >= 3)
                    {
                      fprintf((FILE *)*MEMORY[0x1E0C80C10], "pcm.log2MaxIPCMCUSize_ of %lld is out of range (%lld, %lld)\n", v69, v67, v65);
                      syslog(27, "pcm.log2MaxIPCMCUSize_ of %lld is out of range (%lld, %lld)\n");
                    }
                    goto LABEL_24;
                  }
LABEL_93:
                  if (!a1[405] && !a1[409])
                  {
                    v20 = 0;
                    if (v6)
                      goto LABEL_25;
                    return v20;
                  }
                  if (dword_1ED1ACCC0 < 3)
                    goto LABEL_24;
                  v28 = (FILE *)*MEMORY[0x1E0C80C10];
                  v29 = "Range Extension feature not supported\n";
                  v30 = "Range Extension feature not supported\n";
                  v31 = 38;
                  goto LABEL_45;
                }
                if (dword_1ED1ACCC0 < 3)
                  goto LABEL_24;
                v28 = (FILE *)*MEMORY[0x1E0C80C10];
                v29 = "pcm.pcm_sample_bit_depth_chroma_minus1_ + 1 <= bitDepth_c_ failed!\n";
                v30 = "pcm.pcm_sample_bit_depth_chroma_minus1_ + 1 <= bitDepth_c_ failed!\n";
                v31 = 67;
              }
LABEL_45:
              fwrite(v30, v31, 1uLL, v28);
              syslog(27, v29);
              goto LABEL_24;
            }
            if (dword_1ED1ACCC0 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2_max_pic_order_cnt_lsb_minus4_ of %lld is out of range (%lld, %lld)\n", v45, 0, 12);
              syslog(27, "log2_max_pic_order_cnt_lsb_minus4_ of %lld is out of range (%lld, %lld)\n");
            }
          }
        }
      }
    }
  }
LABEL_24:
  v20 = 4294954387;
  if (v6)
  {
LABEL_25:
    v21 = (unint64_t *)&v6->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v20;
}

void sub_1C96FC1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1C972CFE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C96FC1D0(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFString *v8;
  const __CFString *ValueAtIndex;
  const __CFString *v10;
  const char *CStringPtr;
  CFTypeID v12;
  char *v13;
  const char *v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  __int16 v21;

  CFPreferencesAppSynchronize(CFSTR("com.apple.VideoProcessing"));
  v1 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v2 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v3 = CFPreferencesCopyKeyList(CFSTR("com.apple.VideoProcessing"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v3)
  {
    if (dword_1ED1ACCC0 >= 7)
    {
      fwrite("No preferences set\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(31, "No preferences set\n");
    }
    return;
  }
  v4 = v3;
  Count = CFArrayGetCount(v3);
  if (Count < 1)
    goto LABEL_30;
  v6 = Count;
  v7 = 0;
  v8 = 0;
  do
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, v7);
    if (v8)
      CFRelease(v8);
    v10 = (const __CFString *)CFPreferencesCopyValue(ValueAtIndex, CFSTR("com.apple.VideoProcessing"), v1, v2);
    v8 = v10;
    if (!ValueAtIndex || !v10)
      goto LABEL_27;
    CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
    v12 = CFGetTypeID(v8);
    if (v12 != CFStringGetTypeID())
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Got some other type than CFString for %s, ignoring\n", CStringPtr);
        syslog(27, "Got some other type than CFString for %s, ignoring\n");
      }
      goto LABEL_27;
    }
    v13 = (char *)CFStringGetCStringPtr(v8, 0x8000100u);
    if (!CStringPtr || (v14 = v13) == 0)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Preference couldn't be easily converted to C string, ignoring\n", 0x3EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Preference couldn't be easily converted to C string, ignoring\n");
      }
      goto LABEL_27;
    }
    v21 = 0;
    v15 = *CStringPtr;
    v16 = 0xCBF29CE484222325;
    if (*CStringPtr)
    {
      v17 = (unsigned __int8 *)(CStringPtr + 1);
      do
      {
        v16 = 0x100000001B3 * (v16 ^ v15);
        v18 = *v17++;
        v15 = v18;
      }
      while (v18);
    }
    v19 = v16 <= 1 ? 1 : v16;
    if (sub_1C971D440(a1, v19, CStringPtr, v13, 0xFFFFFFFFLL, (uint64_t)&v21 + 1, &v21))
      break;
    if ((_BYTE)v21)
    {
      if (dword_1ED1ACCC0 >= 4)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Read preference (%s, %s)\n", CStringPtr, v14);
        syslog(28, "Read preference (%s, %s)\n");
      }
    }
    else if (dword_1ED1ACCC0 >= 7)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Ignoring preference (%s, %s)\n", CStringPtr, v14);
      syslog(31, "Ignoring preference (%s, %s)\n");
    }
LABEL_27:
    ++v7;
  }
  while (v7 != v6);
  if (v8)
    CFRelease(v8);
LABEL_30:
  CFRelease(v4);
}

void sub_1C96FC4C0(__CFDictionary *a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFDictionaryAddValue(a1, (const void *)*MEMORY[0x1E0CA8FF0], Mutable);
    CFRelease(v3);
  }
}

uint64_t sub_1C96FC528(uint64_t a1, char a2)
{
  *(_DWORD *)(a1 + 4240) = 6;
  *(_QWORD *)(a1 + 88) = sub_1C97DC1C8;
  *(_QWORD *)(a1 + 96) = sub_1C97DC1FC;
  *(_QWORD *)(a1 + 104) = sub_1C97DC244;
  *(_QWORD *)(a1 + 112) = sub_1C97FF190;
  *(_QWORD *)(a1 + 120) = sub_1C97202DC;
  *(_QWORD *)(a1 + 128) = sub_1C9720510;
  *(_QWORD *)(a1 + 136) = sub_1C9720644;
  sub_1C9701E00(4u, 6, (_WORD *)(a1 + 144));
  sub_1C9701E00(8u, *(_DWORD *)(a1 + 4240), (_WORD *)(a1 + 2192));
  *(_BYTE *)(a1 + 4244) = a2;
  return 0;
}

uint64_t sub_1C96FC5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((int)a4 < 65)
  {
    if ((int)a4 < 1)
    {
      *(_BYTE *)(a1 + 163) = 0;
    }
    else
    {
      v9 = sub_1C971C898(a2, 1);
      *(_BYTE *)(a1 + 163) = v9 != 0;
      if (v9)
      {
        if (*(_DWORD *)(a3 + 288) == (_DWORD)a4)
          v10 = sub_1C971B8B0(a2);
        else
          v10 = 0;
        *(_DWORD *)(a1 + 164) = v10;
        *(_BYTE *)(a1 + 168) = sub_1C971C898(a2, 1) != 0;
        *(_WORD *)(a1 + 170) = sub_1C971BC60(a2);
        v18 = ~*(_DWORD *)(a1 + 164) + a4;
        if (v18 < 0 || v18 >= (int)a4)
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "delta_idx_minus1_ (%d) must be between 0-%d\n", *(_DWORD *)(a1 + 164), a4 - 1);
            syslog(27, "delta_idx_minus1_ (%d) must be between 0-%d\n");
          }
          return 4294954387;
        }
        v19 = *(_QWORD *)(a3 + 296);
        *(_DWORD *)(a1 + 172) = 0;
        v20 = -1;
        do
        {
          ++v20;
          v21 = sub_1C971C898(a2, 1);
          *(_WORD *)(a1 + 172) |= (v21 != 0) << v20;
          if (!v21)
            *(_WORD *)(a1 + 174) |= (sub_1C971C898(a2, 1) != 0) << v20;
        }
        while (v20 < *(unsigned __int8 *)(v19 + 248 * v18 + 162));
        v17 = v19 + 248 * v18;
LABEL_29:
        sub_1C971ECE4(a1, v17);
        if (*(_BYTE *)(a1 + 163))
          return 0;
        v23 = *(unsigned __int8 *)(a1 + 176);
        if (*(_BYTE *)(a1 + 176))
        {
          v24 = (unsigned __int16 *)(a1 + 178);
          while (((__int16)*v24 & 0x80000000) == 0)
          {
            ++v24;
            if (!--v23)
              goto LABEL_38;
          }
          if (dword_1ED1ACCC0 <= 2)
            return 4294954387;
          v5 = "delta_poc_s0_minus1_[i] of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "delta_poc_s0_minus1_[i] of %lld is out of range (%lld, %lld)\n");
        }
        else
        {
LABEL_38:
          v25 = *(unsigned __int8 *)(a1 + 177);
          if (!*(_BYTE *)(a1 + 177))
            return 0;
          v24 = (unsigned __int16 *)(a1 + 210);
          result = 0;
          while (((__int16)*v24 & 0x80000000) == 0)
          {
            ++v24;
            if (!--v25)
              return result;
          }
          if (dword_1ED1ACCC0 < 3)
            return 4294954387;
          v5 = "delta_poc_s1_minus1_[i] of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "delta_poc_s1_minus1_[i] of %lld is out of range (%lld, %lld)\n");
        }
        v27 = 0;
        v28 = 0x7FFFLL;
        v26 = *v24;
        goto LABEL_4;
      }
    }
    *(_BYTE *)(a1 + 176) = sub_1C971B8B0(a2);
    v11 = sub_1C971B8B0(a2);
    v12 = v11;
    *(_BYTE *)(a1 + 177) = v11;
    v13 = *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(a3 + 1) + 226);
    v14 = *(unsigned __int8 *)(a1 + 176);
    if (v14 + v11 > v13)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Number of ref pics exceeds limit: %d + %d > %d\n", v14, v11, v13);
        syslog(27, "Number of ref pics exceeds limit: %d + %d > %d\n");
      }
      return 4294954387;
    }
    *(_WORD *)(a1 + 242) = 0;
    if (v14)
    {
      v15 = 0;
      do
      {
        *(_WORD *)(a1 + 178 + 2 * v15) = sub_1C971BC60(a2);
        *(_WORD *)(a1 + 242) |= (sub_1C971C898(a2, 1) != 0) << v15++;
      }
      while (v15 < *(unsigned __int8 *)(a1 + 176));
      v12 = *(unsigned __int8 *)(a1 + 177);
    }
    *(_WORD *)(a1 + 244) = 0;
    if (v12)
    {
      v16 = 0;
      do
      {
        *(_WORD *)(a1 + 210 + 2 * v16) = sub_1C971BC60(a2);
        *(_WORD *)(a1 + 244) |= (sub_1C971C898(a2, 1) != 0) << v16++;
      }
      while (v16 < *(unsigned __int8 *)(a1 + 177));
    }
    v17 = 0;
    goto LABEL_29;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    v5 = "idx %d > kMaxID %d\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "idx %d > kMaxID %d\n", a4, 64);
    v26 = a4;
    v27 = 64;
LABEL_4:
    syslog(27, v5, v26, v27, v28);
  }
  return 4294954387;
}

uint64_t sub_1C96FC98C(uint64_t *a1, char a2, CFDictionaryRef theDict, _QWORD *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  const __CFNumber *Value;
  const __CFNumber *v18;
  CFTypeID v19;
  int v20;
  int v21;
  CFTypeRef v22;
  const __CFArray *v23;
  const __CFArray *v24;
  const __CFDictionary *v25;
  uint64_t v26;
  CFTypeRef v28;
  CFTypeRef cf;
  CVPixelBufferPoolRef poolOut;
  const void *valuePtr[3];

  valuePtr[2] = *(const void **)MEMORY[0x1E0C80C00];
  cf = 0;
  poolOut = 0;
  v28 = 0;
  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 204);
  v9 = *(_DWORD *)(*a1 + 208);
  v10 = *(unsigned __int8 *)(*a1 + 2096);
  if (v10 <= *(unsigned __int8 *)(*a1 + 2098))
    v10 = *(unsigned __int8 *)(*a1 + 2098);
  v11 = *(unsigned __int8 *)(v7 + 201);
  if (v10 <= 0xA)
    v12 = v10 > 8;
  else
    v12 = (v10 > 8) + 1;
  v13 = *(unsigned __int8 *)(v7 + 1991);
  v14 = &a800l800l010l01[24 * v11 + 8 * v12];
  v15 = *(_DWORD *)&v14[4 * v13];
  if (!theDict)
  {
    sub_1C96FDD98(*(_DWORD *)(*a1 + 204), v9, 71, *(_DWORD *)&v14[4 * v13], (__CFDictionary **)&cf);
    v22 = cf;
LABEL_15:
    v28 = v22;
    cf = 0;
    v25 = (const __CFDictionary *)v22;
    goto LABEL_16;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA9040]);
  if (Value)
  {
    v18 = Value;
    v19 = CFGetTypeID(Value);
    if (v19 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr[0]) = 0;
      CFNumberGetValue(v18, kCFNumberSInt32Type, valuePtr);
      v20 = sub_1C9717840(v15);
      v21 = (int)valuePtr[0];
      if (v20 == sub_1C9717840((int)valuePtr[0]))
        v15 = v21;
    }
  }
  sub_1C96FDD98(v8, v9, 71, v15, (__CFDictionary **)&cf);
  v22 = cf;
  valuePtr[0] = cf;
  valuePtr[1] = theDict;
  v23 = CFArrayCreate(0, valuePtr, 2, 0);
  if (!v23)
    goto LABEL_15;
  v24 = v23;
  CVPixelBufferCreateResolvedAttributesDictionary(0, v23, (CFDictionaryRef *)&v28);
  CFRelease(v24);
  v25 = (const __CFDictionary *)v28;
  if (!v28)
    goto LABEL_15;
LABEL_16:
  v26 = CVPixelBufferPoolCreate(0, 0, v25, &poolOut);
  if (!(_DWORD)v26)
    v26 = sub_1C96FD2F4(a1, a2, poolOut, a4);
  if (cf)
    CFRelease(cf);
  if (v28)
    CFRelease(v28);
  CVPixelBufferPoolRelease(poolOut);
  return v26;
}

uint64_t sub_1C96FCB98(uint64_t a1, char *__s1, int a3, _BYTE *a4)
{
  int v8;
  char v9;

  *a4 = 0;
  if (__s1)
  {
    if (!strcmp(__s1, "0") || !strcmp(__s1, "false"))
    {
      v9 = 0;
    }
    else if (!strcmp(__s1, "1"))
    {
      v9 = 1;
    }
    else
    {
      v8 = strcmp(__s1, "true");
      v9 = 1;
      if (v8)
        goto LABEL_11;
    }
    *a4 = 1;
  }
  else
  {
    v9 = 1;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 8) == a3)
    **(_BYTE **)(a1 + 16) = v9;
  return 0;
}

uint64_t sub_1C96FCC5C(uint64_t a1, char *__s1)
{
  size_t v4;
  uint64_t result;
  size_t v6;
  const char *v7;
  char *v8;
  char *v9;
  const char *v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  char *v17;
  char *v18;
  const char *v19;
  char *v20;
  unsigned int v21;
  __int16 v22;
  BOOL v23;
  char *__lasts;
  char __str[2000];
  char __dst[100];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!__s1)
  {
    result = 0;
    *(_BYTE *)(a1 + 32) = 0;
    return result;
  }
  *(_BYTE *)(a1 + 32) = 1;
  v4 = strnlen(__s1, 0x63uLL) + 1;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4 >= 0x64)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Negotiation detail string too long (%lu > %u)\n!", v4, 100);
LABEL_9:
      syslog(27, "Negotiation detail string too long (%lu > %u)\n!", *(_QWORD *)(a1 + 24), 100);
      return 4294954386;
    }
    return 4294954386;
  }
  MEMORY[0x1CAA439BC](a1, __s1);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >= 0x65)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Negotiation detail string too long (%lu > %u)\n!", *(_QWORD *)(a1 + 24), 100);
      goto LABEL_9;
    }
    return 4294954386;
  }
  __lasts = 0;
  v7 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v7 = *(const char **)a1;
  v8 = strncpy(__dst, v7, v6);
  v9 = strtok_r(v8, ";", &__lasts);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = __str;
    do
    {
      v13 = strlen(v10);
      if (v13 > 0x13)
        return 4294954387;
      v14 = v11 + 1;
      memcpy(v12, v10, v13 + 1);
      v15 = strtok_r(0, ";", &__lasts);
      if (!v15)
        break;
      v10 = v15;
      v12 += 20;
    }
    while (v11++ < 0x63);
    v17 = __str;
    do
    {
      v18 = strtok_r(v17, ":", &__lasts);
      if (v18)
      {
        v19 = v18;
        if (!strcmp(v18, "LF"))
        {
          *(_BYTE *)(a1 + 40) = 1;
        }
        else
        {
          v20 = strtok_r(0, ":", &__lasts);
          if (v20)
          {
            v21 = atoi(v20);
            if (v21 <= 0x63)
            {
              v22 = v21;
              if (!strcmp(v19, "RVRA1"))
              {
                *(_BYTE *)(a1 + 34) = v22;
              }
              else if (!strcmp(v19, "QS"))
              {
                *(_BYTE *)(a1 + 35) = v22;
              }
              else if (!strcmp(v19, "CR"))
              {
                *(_BYTE *)(a1 + 38) = v22;
              }
              else if (!strcmp(v19, "CH"))
              {
                *(_WORD *)(a1 + 36) = v22;
              }
              else if (!strcmp(v19, "CF"))
              {
                *(_BYTE *)(a1 + 39) = v22;
              }
              else if (dword_1ED1ACCC0 >= 3)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unknown negotiation string option: %s\n", v19);
                syslog(27, "Unknown negotiation string option: %s\n", v19);
              }
            }
          }
        }
      }
      v17 += 20;
      --v14;
    }
    while (v14);
  }
  v23 = *(unsigned __int8 *)(a1 + 34) != 255
     || *(unsigned __int8 *)(a1 + 35) != 255
     || *(__int16 *)(a1 + 36) != -1
     || *(unsigned __int8 *)(a1 + 38) != 255
     || *(unsigned __int8 *)(a1 + 39) != 255;
  result = 0;
  *(_BYTE *)(a1 + 33) = v23;
  return result;
}

uint64_t sub_1C96FCFC4(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t DerivedStorage;
  std::mutex *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;

  VTVideoDecoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v6);
  v7 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if ((v7 & 1) != 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Session was invalidated");
    }
    v8 = 4294954393;
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 8) = a2;
    v8 = sub_1C971C8F0(DerivedStorage, a3);
    if ((_DWORD)v8)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Invalid/unsupported format\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Invalid/unsupported format\n");
      }
    }
    else
    {
      v9 = *(_QWORD *)(DerivedStorage + 32);
      *(_DWORD *)(v9 + 192) = *(unsigned __int8 *)(*(_QWORD *)(DerivedStorage + 24) + 29) + 1;
      sub_1C971FC0C(v9, (uint64_t)sub_1C9717428, DerivedStorage);
      v8 = 0;
    }
  }
  std::mutex::unlock(v6);
  return v8;
}

void sub_1C96FD0E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C96FD0FC(__CFDictionary *a1)
{
  CFNumberRef v2;
  CFNumberRef v3;
  CFArrayRef v4;
  CFArrayRef v5;
  int valuePtr;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = 0;
  v2 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v2)
  {
    v3 = v2;
    values[0] = v2;
    v4 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    if (v4)
    {
      v5 = v4;
      CFDictionaryAddValue(a1, (const void *)*MEMORY[0x1E0CA8F80], v4);
      CFRelease(v5);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1C96FD1BC(unsigned __int8 *a1, __CFDictionary *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  uint64_t v13;
  int valuePtr;
  int v16;

  v3 = a1[1991];
  v4 = a1[201];
  v5 = a1[2096];
  if (v5 <= a1[2098])
    v5 = a1[2098];
  if (v5 <= 8)
    v6 = v5 > 0xA;
  else
    v6 = (v5 > 0xA) + 1;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v8 = Mutable;
    if (!v4)
    {
      valuePtr = *(_DWORD *)&a800l800l010l01[8 * v6 + 4 * v3];
      v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (!v9)
        goto LABEL_13;
      v10 = v9;
      CFArrayAppendValue(v8, v9);
      CFRelease(v10);
      v4 = 1;
    }
    v16 = *(_DWORD *)&a800l800l010l01[24 * v4 + 8 * v6 + 4 * v3];
    v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v16);
    if (v11)
    {
      v12 = v11;
      CFArrayAppendValue(v8, v11);
      CFRelease(v12);
      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0CA9040], v8);
      v13 = 0;
LABEL_14:
      CFRelease(v8);
      return v13;
    }
LABEL_13:
    v13 = 4294954392;
    goto LABEL_14;
  }
  return 4294954392;
}

uint64_t sub_1C96FD2F4(uint64_t *a1, char a2, __CVPixelBufferPool *a3, _QWORD *a4)
{
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const CFDictionaryKeyCallBacks *v17;
  const CFDictionaryValueCallBacks *v18;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  CFStringRef StringForIntegerCodePoint;
  CFStringRef v23;
  CFStringRef v24;
  const void *v25;
  const void *v26;
  CFMutableDictionaryRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  uint64_t result;
  int valuePtr;
  int v37;
  int v38;

  v8 = (char *)operator new(0xC0uLL, MEMORY[0x1E0DE4E10]);
  if (!v8)
    return 4294954392;
  v9 = v8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *((_QWORD *)v8 + 7) = 850045863;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *(_QWORD *)v8 = &off_1E82914B0;
  *((_DWORD *)v8 + 44) = 0;
  *((_QWORD *)v8 + 23) = sub_1C97FEB88;
  *((_QWORD *)v8 + 20) = sub_1C97DD724;
  *((_QWORD *)v8 + 21) = sub_1C97DD768;
  *((_QWORD *)v8 + 16) = sub_1C97DD694;
  *((_QWORD *)v8 + 17) = sub_1C97FE224;
  *((_QWORD *)v8 + 18) = sub_1C97DD6DC;
  *((_QWORD *)v8 + 19) = sub_1C97FE2C8;
  *((_QWORD *)v8 + 14) = 0;
  *((_QWORD *)v8 + 15) = a3;
  CVPixelBufferPoolRetain(a3);
  v10 = operator new(0x48uLL, MEMORY[0x1E0DE4E10]);
  if (!v10)
  {
    *a4 = 0;
LABEL_37:
    (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    return 4294954392;
  }
  v11 = v10;
  v10[1] = 0;
  v12 = v10 + 1;
  v10[2] = 0;
  *((_WORD *)v10 + 12) = 0;
  *v10 = &off_1E82917D0;
  v10[6] = v9;
  v13 = (_QWORD *)operator new();
  *v13 = &off_1E8291BB8;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v9;
  v11[7] = v13;
  *((_BYTE *)v11 + 64) = 0;
  v11[4] = 0;
  v11[5] = 0;
  *a4 = v11;
  *((_BYTE *)v11 + 24) = a2;
  sub_1C9746DB4(v12, *a1, a1[1]);
  v14 = *a1;
  v15 = (const void *)v11[4];
  if (v15)
    CFRelease(v15);
  v16 = (const void *)v11[5];
  if (v16)
    CFRelease(v16);
  v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v20 = CFDictionaryCreateMutable(0, 0, v17, v18);
  if (!Mutable)
    goto LABEL_37;
  v21 = v20;
  if (!v20)
    goto LABEL_37;
  StringForIntegerCodePoint = CVColorPrimariesGetStringForIntegerCodePoint(*(unsigned __int8 *)(v14 + 1992));
  v23 = CVTransferFunctionGetStringForIntegerCodePoint(*(unsigned __int8 *)(v14 + 1993));
  v24 = CVYCbCrMatrixGetStringForIntegerCodePoint(*(unsigned __int8 *)(v14 + 1994));
  v25 = (const void *)sub_1C96FD758(*(unsigned __int8 *)(v14 + 1995));
  v26 = (const void *)sub_1C96FD758(*(unsigned __int8 *)(v14 + 1996));
  if (StringForIntegerCodePoint)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], StringForIntegerCodePoint);
  if (v23)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8E98], v23);
  if (v24)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], v24);
  if (v25)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8CE8], v25);
  if (v26)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8CE0], v26);
  if (*(_WORD *)(v14 + 1984))
  {
    if (*(_WORD *)(v14 + 1986))
    {
      v27 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v27)
      {
        v28 = v27;
        valuePtr = *(unsigned __int16 *)(v14 + 1984);
        v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v29)
        {
          v30 = v29;
          CFDictionaryAddValue(v28, (const void *)*MEMORY[0x1E0CA8E60], v29);
          CFRelease(v30);
        }
        v37 = *(unsigned __int16 *)(v14 + 1986);
        v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v37);
        if (v31)
        {
          v32 = v31;
          CFDictionaryAddValue(v28, (const void *)*MEMORY[0x1E0CA8E70], v31);
          CFRelease(v32);
        }
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8E68], v28);
        CFRelease(v28);
      }
    }
  }
  if (*(unsigned __int8 *)(v14 + 2096) >= 9u)
  {
    if (*((_BYTE *)v11 + 24))
    {
      v38 = *(unsigned __int8 *)(v14 + 2096);
      v33 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
      if (v33)
      {
        v34 = v33;
        CFDictionaryAddValue(v21, CFSTR("VPImageBufferLSBAligned"), v33);
        CFRelease(v34);
      }
    }
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  if (!CFDictionaryGetCount(v21))
  {
    CFRelease(v21);
    v21 = 0;
  }
  result = 0;
  v11[4] = Mutable;
  v11[5] = v21;
  return result;
}

void sub_1C96FD704(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *v1 = off_1E82913F8;
  sub_1C972CFE0(v3);
  MEMORY[0x1CAA43B84](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t sub_1C96FD758(int a1)
{
  uint64_t *v1;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v1 = (uint64_t *)MEMORY[0x1E0CA8D10];
      goto LABEL_9;
    case 1:
      v1 = (uint64_t *)MEMORY[0x1E0CA8D00];
      goto LABEL_9;
    case 2:
      v1 = (uint64_t *)MEMORY[0x1E0CA8D20];
      goto LABEL_9;
    case 3:
      v1 = (uint64_t *)MEMORY[0x1E0CA8D18];
      goto LABEL_9;
    case 4:
      v1 = (uint64_t *)MEMORY[0x1E0CA8CF8];
      goto LABEL_9;
    case 5:
      v1 = (uint64_t *)MEMORY[0x1E0CA8CF0];
LABEL_9:
      result = *v1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C96FD7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL *v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  *(_WORD *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 6) = 33685509;
  *(_BYTE *)(a1 + 10) = 2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v6 = (BOOL *)(a1 + 88);
  *(_QWORD *)(a1 + 11) = 0;
  *(_QWORD *)(a1 + 17) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (sub_1C971C898(a2, 1))
  {
    v7 = sub_1C971C898(a2, 8);
    if (v7 == 255)
    {
      *(_WORD *)a1 = sub_1C971C898(a2, 16);
      *(_WORD *)(a1 + 2) = sub_1C971C898(a2, 16);
    }
    else
    {
      v8 = v7;
      if (v7 > 16)
      {
        if (dword_1ED1ACCC0 >= 4)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Reserved aspect_ratio_idc %d\n", v7);
          syslog(28, "Reserved aspect_ratio_idc %d\n", v8);
        }
      }
      else
      {
        v9 = (unsigned __int8 *)&unk_1C9832542 + 2 * v7;
        *(_WORD *)a1 = *v9;
        *(_WORD *)(a1 + 2) = v9[1];
      }
    }
  }
  v10 = sub_1C971C898(a2, 1);
  *(_BYTE *)(a1 + 4) = v10 != 0;
  if (v10)
    *(_BYTE *)(a1 + 5) = sub_1C971C898(a2, 1) != 0;
  if (sub_1C971C898(a2, 1))
  {
    *(_BYTE *)(a1 + 6) = sub_1C971C898(a2, 3);
    *(_BYTE *)(a1 + 7) = sub_1C971C898(a2, 1) != 0;
    if (sub_1C971C898(a2, 1))
    {
      *(_BYTE *)(a1 + 8) = sub_1C971C898(a2, 8);
      *(_BYTE *)(a1 + 9) = sub_1C971C898(a2, 8);
      *(_BYTE *)(a1 + 10) = sub_1C971C898(a2, 8);
    }
  }
  if (sub_1C971C898(a2, 1))
  {
    *(_BYTE *)(a1 + 11) = sub_1C971B8B0(a2);
    *(_BYTE *)(a1 + 12) = sub_1C971B8B0(a2);
  }
  *(_BYTE *)(a1 + 13) = sub_1C971C898(a2, 1) != 0;
  *(_BYTE *)(a1 + 14) = sub_1C971C898(a2, 1) != 0;
  *(_BYTE *)(a1 + 15) = sub_1C971C898(a2, 1) != 0;
  if (sub_1C971C898(a2, 1))
  {
    *(_WORD *)(a1 + 16) = sub_1C971B8B0(a2);
    *(_WORD *)(a1 + 18) = sub_1C971B8B0(a2);
    *(_WORD *)(a1 + 20) = sub_1C971B8B0(a2);
    *(_WORD *)(a1 + 22) = sub_1C971B8B0(a2);
  }
  v11 = sub_1C971C898(a2, 1);
  *(_BYTE *)(a1 + 24) = v11 != 0;
  if (!v11)
    goto LABEL_24;
  v12 = sub_1C971C898(a2, 16);
  *(_DWORD *)(a1 + 28) = sub_1C971C898(a2, 16) + (v12 << 16);
  v13 = sub_1C971C898(a2, 16);
  *(_DWORD *)(a1 + 32) = sub_1C971C898(a2, 16) + (v13 << 16);
  v14 = sub_1C971C898(a2, 1);
  *(_BYTE *)(a1 + 36) = v14 != 0;
  if (v14)
    *(_DWORD *)(a1 + 40) = sub_1C971BC60(a2);
  v15 = sub_1C971C898(a2, 1);
  *(_BYTE *)(a1 + 44) = v15 != 0;
  if (v15 && (v16 = sub_1C979FA50(a1 + 48, a2, 1, *(unsigned __int8 *)(a3 + 1) + 1), (_DWORD)v16))
  {
    v17 = v16;
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Error parsing VUI HRD\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Error parsing VUI HRD\n");
    }
  }
  else
  {
LABEL_24:
    v18 = sub_1C971C898(a2, 1);
    *v6 = v18 != 0;
    if (v18)
    {
      *(_BYTE *)(a1 + 89) = sub_1C971C898(a2, 1) != 0;
      *(_BYTE *)(a1 + 90) = sub_1C971C898(a2, 1) != 0;
      *(_BYTE *)(a1 + 91) = sub_1C971C898(a2, 1) != 0;
      *(_DWORD *)(a1 + 92) = sub_1C971B8B0(a2);
      *(_DWORD *)(a1 + 96) = sub_1C971B8B0(a2);
      *(_DWORD *)(a1 + 100) = sub_1C971B8B0(a2);
      *(_DWORD *)(a1 + 104) = sub_1C971B8B0(a2);
      v17 = 0;
      *(_DWORD *)(a1 + 108) = sub_1C971B8B0(a2);
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_1C96FDC18(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;
  uint64_t result;

  MEMORY[0x1CAA43854](&unk_1ED1ACCB0, sub_1C9720C18);
  if (!qword_1ED1ACCE0)
    return 4294954392;
  if (!a2)
    return 0;
  v3 = CFRetain((CFTypeRef)qword_1ED1ACCE0);
  result = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1C96FDC78(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;

  v5 = 0;
  *(_BYTE *)a1 = a3;
  *(_BYTE *)(a1 + 1) = a4;
  *(_OWORD *)(a1 + 2) = 0u;
  *(_OWORD *)(a1 + 18) = 0u;
  *(_BYTE *)(a1 + 34) = 0;
  *(_QWORD *)(a1 + 1600) = 0;
  v6 = 40;
  do
  {
    v7 = 0;
    if (v5)
      v8 = 65;
    else
      v8 = 17;
    v9 = v6;
    do
    {
      if (v5)
        v10 = (char *)&unk_1C98324C0 + ((v7 > 2) | ((unint64_t)(v7 > 2) << 6));
      else
        v10 = (char *)&unk_1C98324AF;
      memcpy((void *)(a1 + v9), v10, v8);
      ++v7;
      v9 += 65;
    }
    while (v7 != 6);
    ++v5;
    v6 += 390;
  }
  while (v5 != 4);
  *(_BYTE *)(a1 + 1608) = 0;
  *(_DWORD *)(a1 + 1636) = 0;
  *(_QWORD *)(a1 + 1618) = 0;
  *(_QWORD *)(a1 + 1626) = 0;
  *(_QWORD *)(a1 + 1610) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1737) = 0u;
  *(_WORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1768) = a2;
  return a1;
}

void sub_1C96FDD98(int a1, int a2, int a3, int a4, __CFDictionary **a5)
{
  uint64_t v10;
  __CFDictionary *Mutable;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  uint64_t valuePtr;

  *a5 = 0;
  sub_1C971FF04();
  v10 = qword_1ED1ACCA8;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    LODWORD(valuePtr) = a1;
    v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v12)
    {
      v13 = v12;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA90E0], v12);
      CFRelease(v13);
    }
    LODWORD(valuePtr) = a2;
    v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v14)
    {
      v15 = v14;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FD8], v14);
      CFRelease(v15);
    }
    if (a4)
    {
      LODWORD(valuePtr) = a4;
      v16 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v16)
      {
        v17 = v16;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v16);
        CFRelease(v17);
      }
    }
    valuePtr = v10;
    v18 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v18)
    {
      v19 = v18;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8F68], v18);
      CFRelease(v19);
    }
    valuePtr = v10;
    v20 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v20)
    {
      v21 = v20;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9048], v20);
      CFRelease(v21);
    }
    if (a3)
    {
      v22 = ((v10 + 2 * a3 - 1) & -(int)v10) + a1;
      v23 = a3;
      if (v22 >= 0x400)
      {
        v23 = a3;
        if ((v22 & 0x3FF) == 0)
        {
          if (v10 >= 0)
            v24 = v10;
          else
            v24 = v10 + 1;
          v23 = (v24 >> 1) + a3;
        }
      }
      LODWORD(valuePtr) = v23;
      v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v25)
      {
        v26 = v25;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FB0], v25);
        CFRelease(v26);
      }
      LODWORD(valuePtr) = a3;
      v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v27)
      {
        v28 = v27;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FC0], v27);
        CFRelease(v28);
      }
      LODWORD(valuePtr) = v23;
      v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v29)
      {
        v30 = v29;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FB8], v29);
        CFRelease(v30);
      }
      LODWORD(valuePtr) = a3;
      v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v31)
      {
        v32 = v31;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FA0], v31);
        CFRelease(v32);
      }
    }
    sub_1C96FC4C0(Mutable);
    sub_1C96FD0FC(Mutable);
  }
  *a5 = Mutable;
}

uint64_t sub_1C96FE08C(unsigned __int8 **a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  __CFDictionary *Mutable;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  const CFDictionaryKeyCallBacks *v48;
  const CFDictionaryValueCallBacks *v49;
  CFMutableDictionaryRef v50;
  CFMutableDictionaryRef v51;
  __CFDictionary *v52;
  CFMutableDictionaryRef v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  __CFDictionary *v60;
  CFNumberRef v61;
  CFNumberRef v62;
  int v63;
  int v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  CFNumberRef v82;
  CFNumberRef v83;
  CFNumberRef v84;
  CFNumberRef v85;
  CFNumberRef v86;
  CFNumberRef v87;
  CFNumberRef v88;
  CFNumberRef v89;
  CFNumberRef v90;
  __CVPixelBufferPool *PixelBufferPool;
  __CVPixelBufferPool *v92;
  const __CFDictionary *PixelBufferAttributes;
  const void *Value;
  CFTypeID v95;
  CFTypeID v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t valuePtr;

  v6 = sub_1C96FB64C(*a1);
  v7 = v6;
  v8 = 0x1ED1AC000uLL;
  if ((_DWORD)v6)
    v9 = dword_1ED1ACCC0 < 3;
  else
    v9 = 1;
  if (!v9)
  {
    fwrite("Couldn't activate SPS (unsupported?)\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Couldn't activate SPS (unsupported?)\n");
    return v7;
  }
  if ((_DWORD)v6)
    return v7;
  v10 = *a2;
  v11 = 0x1ED1AC000uLL;
  v103 = *a2;
  if (!*a2)
  {
    Mutable = 0;
    goto LABEL_45;
  }
  v12 = *a1;
  if ((*a1)[2098] == 8)
  {
    if (v12[2096] == 8)
      v13 = 1;
    else
      v13 = 2;
  }
  else
  {
    v13 = 2;
  }
  v16 = *((_DWORD *)v12 + 534);
  v17 = *((_DWORD *)v12 + 52);
  v18 = *((_DWORD *)v12 + 51) - v16;
  v19 = *((_DWORD *)v12 + 536);
  v20 = v16 + 71;
  sub_1C971FF04();
  v21 = qword_1ED1ACCA8;
  v22 = (v21 + (uint64_t)(int)((v18 + v20 + 71) * v13) - 1) & -(uint64_t)v21;
  if (v22 >= 0x400 && (v22 & 0x3FF) == 0)
    v20 += qword_1ED1ACCA8 / v13;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v24 = v17 - v19;
    LODWORD(valuePtr) = v18;
    v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v25)
    {
      v26 = v25;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA90E0], v25);
      CFRelease(v26);
    }
    LODWORD(valuePtr) = v24;
    v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v27)
    {
      v28 = v27;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FD8], v27);
      CFRelease(v28);
    }
    valuePtr = v21;
    v29 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v29)
    {
      v30 = v29;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8F68], v29);
      CFRelease(v30);
    }
    valuePtr = v21;
    v31 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v31)
    {
      v32 = v31;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9048], v31);
      CFRelease(v32);
    }
    v11 = 0x1ED1AC000;
    if (sub_1C96FD1BC(*a1, Mutable))
    {
      CFRelease(Mutable);
      Mutable = 0;
      v10 = v103;
      goto LABEL_44;
    }
    LODWORD(valuePtr) = 71;
    v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v33)
    {
      v34 = v33;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FB0], v33);
      CFRelease(v34);
    }
    if (v20)
    {
      LODWORD(valuePtr) = v20;
      v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v35)
      {
        v36 = v35;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FB8], v35);
        CFRelease(v36);
      }
    }
    LODWORD(valuePtr) = 71;
    v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v37)
    {
      v38 = v37;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FC0], v37);
      CFRelease(v38);
    }
    if (v19 != -71)
    {
      LODWORD(valuePtr) = v19 + 71;
      v39 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v39)
      {
        v40 = v39;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FA0], v39);
        CFRelease(v40);
      }
    }
    sub_1C96FC4C0(Mutable);
    sub_1C96FD0FC(Mutable);
  }
  v10 = v103;
  v11 = 0x1ED1AC000uLL;
LABEL_44:
  v7 = VTDecoderSessionSetPixelBufferAttributes();
  if ((_DWORD)v7)
    goto LABEL_112;
LABEL_45:
  if (a2[1])
  {
    sub_1C971FF04();
    v41 = *a1;
    v42 = a3;
    v43 = (*a1)[2096] > 8u || v41[2098] > 8u;
    v44 = v41[2117] << v43;
    if (*(_QWORD *)(v11 + 3240) >= v44)
      v45 = v44;
    else
      v45 = *(_QWORD *)(v11 + 3240);
    v47 = *((_DWORD *)v41 + 51);
    v46 = *((_DWORD *)v41 + 52);
    v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v49 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v50 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v51 = CFDictionaryCreateMutable(0, 0, v48, v49);
    v52 = v51;
    v53 = v50;
    if (v50 && v51)
    {
      v54 = (v47 + 15) & 0xFFFFFFF0;
      v55 = (v46 + 15) & 0xFFFFFFF0;
      v56 = *((_DWORD *)a2 + 4);
      v57 = __OFSUB__(v54, v56);
      v58 = v54 - v56;
      v59 = v45;
      v60 = v50;
      a3 = v42;
      v8 = 0x1ED1AC000;
      if (!((v58 < 0) ^ v57 | (v58 == 0)))
      {
        LODWORD(valuePtr) = v58;
        v61 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v61)
        {
          v62 = v61;
          CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E0CA8FB8], v61);
          CFRelease(v62);
        }
      }
      v63 = *((_DWORD *)a2 + 5);
      v57 = __OFSUB__(v55, v63);
      v64 = v55 - v63;
      if (!((v64 < 0) ^ v57 | (v64 == 0)))
      {
        LODWORD(valuePtr) = v64;
        v65 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v65)
        {
          v66 = v65;
          CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E0CA8FA0], v65);
          CFRelease(v66);
        }
      }
      valuePtr = v59;
      v67 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v67)
      {
        v68 = v67;
        CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E0CA8F68], v67);
        CFRelease(v68);
      }
      valuePtr = v59;
      v69 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v69)
      {
        v70 = v69;
        CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E0CA9048], v69);
        CFRelease(v70);
      }
      v7 = sub_1C96FD1BC(*a1, v60);
      if (!(_DWORD)v7)
      {
        LODWORD(valuePtr) = 0xFFFFFFF;
        v71 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v71)
        {
          v72 = v71;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBD0], v71);
          CFRelease(v72);
        }
        LODWORD(valuePtr) = 0xFFFFFFF;
        v73 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v73)
        {
          v74 = v73;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBD8], v73);
          CFRelease(v74);
        }
        LODWORD(valuePtr) = 1;
        v75 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v75)
        {
          v76 = v75;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBF0], v75);
          CFRelease(v76);
        }
        LODWORD(valuePtr) = 1;
        v77 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v77)
        {
          v78 = v77;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBF8], v77);
          CFRelease(v78);
        }
        LODWORD(valuePtr) = 1;
        v79 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v79)
        {
          v80 = v79;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDC10], v79);
          CFRelease(v80);
        }
        LODWORD(valuePtr) = 1;
        v81 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v81)
        {
          v82 = v81;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDC08], v81);
          CFRelease(v82);
        }
        LODWORD(valuePtr) = 0x7FFFFFFF;
        v83 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v83)
        {
          v84 = v83;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBC8], v83);
          CFRelease(v84);
        }
        LODWORD(valuePtr) = 0x7FFFFFFF;
        v85 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v85)
        {
          v86 = v85;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBB8], v85);
          CFRelease(v86);
        }
        valuePtr = 0x7FFFFFFFFFFFFFFFLL;
        v87 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        if (v87)
        {
          v88 = v87;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBC0], v87);
          CFRelease(v88);
        }
        valuePtr = v59;
        v89 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        if (v89)
        {
          v90 = v89;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDC00], v89);
          CFRelease(v90);
        }
        CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E0CEDBB0], (const void *)*MEMORY[0x1E0C9AE40]);
        v7 = VTTileDecoderSessionSetTileDecodeRequirements();
      }
    }
    else
    {
      v7 = 4294954392;
      v60 = v50;
      a3 = v42;
      v8 = 0x1ED1AC000uLL;
      if (!v53)
        goto LABEL_88;
    }
    CFRelease(v60);
LABEL_88:
    if (v52)
      CFRelease(v52);
    v10 = v103;
    if ((_DWORD)v7)
      goto LABEL_112;
  }
  if (!v10)
    goto LABEL_105;
  PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
  if (!PixelBufferPool)
  {
    if (*(int *)(v8 + 3264) >= 3)
    {
      fwrite("Unable to get CVPixelBufferPool from VideoToolbox\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Unable to get CVPixelBufferPool from VideoToolbox\n");
    }
    v7 = 4294954392;
    goto LABEL_112;
  }
  v92 = PixelBufferPool;
  PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(PixelBufferPool);
  Value = CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E0CA9040]);
  LODWORD(valuePtr) = 0;
  v95 = CFGetTypeID(Value);
  if (v95 == CFArrayGetTypeID())
    Value = CFArrayGetValueAtIndex((CFArrayRef)Value, 0);
  v96 = CFGetTypeID(Value);
  if (v96 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr))
    goto LABEL_105;
  v97 = (*a1)[2096];
  if (v97 <= (*a1)[2098])
    v97 = (*a1)[2098];
  v98 = v97 <= 0xA ? v97 > 8 : (v97 > 8) + 1;
  v99 = *(_DWORD *)&a800l800l010l01[24 * (*a1)[201] + 8 * v98 + 4 * (*a1)[1991]];
  v100 = sub_1C9717840(valuePtr);
  if (v100 != sub_1C9717840(v99))
  {
LABEL_105:
    v101 = sub_1C96FC98C((uint64_t *)a1, 0, 0, a3);
    if (!(_DWORD)v101)
    {
      v102 = 0;
      goto LABEL_108;
    }
LABEL_106:
    v7 = v101;
    goto LABEL_112;
  }
  v101 = sub_1C96FD2F4((uint64_t *)a1, 0, v92, a3);
  if ((_DWORD)v101)
    goto LABEL_106;
  v102 = 1;
LABEL_108:
  v7 = 0;
  *(_BYTE *)(*a3 + 64) = v102;
LABEL_112:
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

_QWORD *sub_1C96FEA64(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t), uint64_t a5, int a6)
{
  _QWORD *result;
  _QWORD *v12;
  int v13;
  __int128 v14;

  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  a4(a1, a2);
  result = operator new(0x48uLL, MEMORY[0x1E0DE4E10]);
  if (result)
  {
    v12 = result;
    *result = &off_1E8291760;
    result[2] = a2;
    result[3] = a3;
    result[4] = 0;
    result[5] = 0;
    result[6] = 0;
    result[7] = a1;
    result[8] = a4;
    *((_DWORD *)result + 2) = a6;
    v13 = *(_DWORD *)(a1 + 32);
    if (v13 <= a6)
      v13 = a6;
    *(_DWORD *)(a1 + 32) = v13;
    result = sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v14);
    result[6] = v12;
  }
  return result;
}

void sub_1C96FEB10(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  __int128 v19;

  v7 = a5;
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v11 = *a5;
  if (!*a5)
  {
LABEL_7:
    v17 = operator new(0x20uLL, MEMORY[0x1E0DE4E10]);
    if (!v17)
      return;
    v17[2] = 0;
    *(_QWORD *)v17 = off_1E8291730;
    *((_QWORD *)v17 + 2) = v7;
    *((_QWORD *)v17 + 3) = a4;
    if (v11)
    {
      while (!a6 || v11 != a6)
      {
        v18 = v7[3];
        v7 += 3;
        v11 = v18;
        if (!v18)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if (a6)
      {
LABEL_14:
        sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v19)[6] = (uint64_t *)v17;
        return;
      }
    }
    *a4 = *((_DWORD *)v7 + 4);
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *a5;
  v14 = a5;
  while (1)
  {
    v15 = v12;
    v16 = a5;
    if (v12)
      break;
LABEL_6:
    ++v12;
    v14 = &a5[3 * v12];
    v13 = *v14;
    if (!*v14)
      goto LABEL_7;
  }
  while (v13 != *v16)
  {
    v16 += 3;
    if (!--v15)
      goto LABEL_6;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of named enum '%s' and '%s' collide (%llx)! Change one of the names!\n", (const char *)v14[1], (const char *)v16[1], v13);
    syslog(27, "Hash of named enum '%s' and '%s' collide (%llx)! Change one of the names!\n", (const char *)v14[1], (const char *)v16[1], *v14);
  }
}

void sub_1C96FEC6C(uint64_t a1, unint64_t a2, const char *a3, _DWORD *a4, int a5)
{
  _QWORD *v8;
  unint64_t v10;
  _DWORD *v11;
  __int128 v12;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  *a4 = a5;
  v8 = *(_QWORD **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    v11 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v11)
    {
      v11[2] = 0;
      *(_QWORD *)v11 = &off_1E82915D0;
      *((_QWORD *)v11 + 2) = a4;
      sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    v10 = v8[4];
    if (a2 >= v10)
      break;
LABEL_5:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_6;
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

void sub_1C96FED58(uint64_t a1, unint64_t a2, const char *a3, _BYTE *a4, char a5)
{
  _QWORD *v8;
  unint64_t v10;
  _DWORD *v11;
  __int128 v12;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  *a4 = a5;
  v8 = *(_QWORD **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    v11 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v11)
    {
      v11[2] = 0;
      *(_QWORD *)v11 = &off_1E8291540;
      *((_QWORD *)v11 + 2) = a4;
      sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    v10 = v8[4];
    if (a2 >= v10)
      break;
LABEL_5:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_6;
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

uint64_t **sub_1C96FEE44(uint64_t **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v7 + 2) = *a3;
    v7[6] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C977F9EC(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1C96FEF10(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, __CVBuffer *a6, uint64_t a7, char a8, _DWORD *a9)
{
  uint64_t DerivedStorage;
  std::mutex *v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;

  VTVideoDecoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  v15 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v15);
  v16 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if ((v16 & 1) != 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Session was invalidated");
    }
    v18 = 4294954393;
  }
  else
  {
    if (CVPixelBufferGetWidth(a6) >= (int)a7 && CVPixelBufferGetHeight(a6) >= a7 >> 32)
    {
      v17 = malloc_type_calloc(1uLL, 0x30uLL, 0x1020040089D864DuLL);
      v17[3] = a2;
      v17[4] = CVPixelBufferRetain(a6);
      v17[5] = a7;
      sub_1C96FF0EC(DerivedStorage, (uint64_t)v17, a3, a8, a9, &v20);
    }
    else
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Offset is outside the buffer we got\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Offset is outside the buffer we got\n");
      }
      v17 = 0;
    }
    if (!v20)
    {
      sub_1C97176A8((uint64_t)v17);
      VTTileDecoderSessionEmitDecodedTile();
    }
    v18 = 0;
  }
  std::mutex::unlock(v15);
  return v18;
}

void sub_1C96FF0D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C96FF0EC(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf, char a4, _DWORD *a5, _BYTE *a6)
{
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v13;
  uint64_t DataPointer;
  const __CFBoolean *v15;
  const __CFBoolean *v16;
  CFTypeID v17;
  const opaqueCMFormatDescription *FormatDescription;
  int v20;
  uint64_t v21;
  uint64_t v22;
  FILE *v23;
  const char *v24;
  const char *v25;
  size_t v26;
  uint64_t v27;
  _BYTE v28[9];
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;

  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (DataBuffer)
  {
    totalLengthOut = 0;
    lengthAtOffsetOut = 0;
    v28[8] = 0;
    *(_QWORD *)v28 = a4 & 1;
    *(_DWORD *)(a2 + 8) = a4 & 1;
    if (*(_QWORD *)(a1 + 32))
    {
      v13 = DataBuffer;
      DataPointer = CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, (char **)&v28[1]);
      if ((_DWORD)DataPointer)
        return DataPointer;
      v15 = (const __CFBoolean *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26D8], 0);
      if (v15)
      {
        v16 = v15;
        v17 = CFGetTypeID(v15);
        if (v17 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v16))
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 203) = 1;
        }
      }
      FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
      if (CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(a1 + 16), FormatDescription)
        || (v27 = sub_1C971C8F0(a1, FormatDescription), !(_DWORD)v27))
      {
        if (lengthAtOffsetOut >= totalLengthOut)
        {
          CFRetain(v13);
          *(_QWORD *)(a2 + 16) = v13;
        }
        else
        {
          DataPointer = CMBlockBufferCreateContiguous(0, v13, 0, 0, 0, totalLengthOut, 2u, (CMBlockBufferRef *)(a2 + 16));
          if ((_DWORD)DataPointer)
            return DataPointer;
          DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a2 + 16), 0, &lengthAtOffsetOut, &totalLengthOut, (char **)&v28[1]);
          if ((_DWORD)DataPointer)
            return DataPointer;
          if (lengthAtOffsetOut < totalLengthOut)
            return 4294954392;
        }
        *a6 = 1;
        v20 = *(_DWORD *)(a1 + 1044);
        v21 = *(_QWORD *)(a1 + 32);
        if (v20 != -1)
        {
          *(_BYTE *)(v21 + 48) = v20;
          *(_QWORD *)(v21 + 56) = *(_QWORD *)(a1 + 1048);
        }
        v22 = sub_1C96FF3DC(v21, *(unsigned __int16 **)&v28[1], totalLengthOut, a2, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), v28);
        if ((_DWORD)v22)
        {
          DataPointer = v22;
          if (dword_1ED1ACCC0 >= 3)
          {
            v23 = (FILE *)*MEMORY[0x1E0C80C10];
            v24 = "Error decoding picture\n";
            v25 = "Error decoding picture\n";
            v26 = 23;
LABEL_30:
            fwrite(v25, v26, 1uLL, v23);
            syslog(27, v24);
          }
        }
        else
        {
          DataPointer = 0;
          if (v28[0])
            *a5 = 1;
        }
      }
      else
      {
        DataPointer = v27;
        if (dword_1ED1ACCC0 >= 3)
        {
          v23 = (FILE *)*MEMORY[0x1E0C80C10];
          v24 = "Invalid/unsupported format\n";
          v25 = "Invalid/unsupported format\n";
          v26 = 27;
          goto LABEL_30;
        }
      }
    }
    else
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "No decoder, session was invalidated?\n");
      }
      return 4294954393;
    }
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("No data buffer in sample buffer!\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "No data buffer in sample buffer!\n");
    }
    return 4294954394;
  }
  return DataPointer;
}

uint64_t sub_1C96FF3DC(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t *j;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  int v30;
  unsigned __int8 *v31;
  unsigned __int16 v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  const void *v41;
  uint64_t v42;
  void *v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  FILE *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  int v51;
  void *v52;
  size_t v53;
  int v54;
  unint64_t v55;
  FILE *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  _DWORD *v77;
  _DWORD *v78;
  int v79;
  _DWORD *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  _DWORD *v86;
  unsigned int v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int *v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  uint64_t v100;
  FILE *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  _DWORD *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  FILE *v115;
  int v116;
  uint64_t k;
  uint64_t v118;
  _OWORD *v119;
  __int128 v120;
  unsigned int v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  int v128;
  unint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  int v146;
  unint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  char v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  _DWORD *v178;
  unint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unint64_t v184;
  unsigned int v185;
  unsigned int v186;
  unint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unint64_t v202;
  char v203;
  unsigned int *v204;
  int v205;
  int v206;
  unsigned int v207;
  FILE *v208;
  FILE *v209;
  int v210;
  int v211;
  dispatch_semaphore_t v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t *v230;
  __int128 v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t *i;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  unsigned __int8 v238;
  BOOL v239;
  uint64_t *v240;
  uint64_t v241;
  char v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  _DWORD *v256;
  _DWORD *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int v266;
  _BYTE *v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  unint64_t v276;
  BOOL v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int16 v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  char *v324;
  int v326;
  uint64_t v328;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned __int8 v333;
  unsigned __int8 v334;
  size_t v335;
  __int128 __p;
  uint64_t v337;
  uint64_t v338;
  unsigned int *v339;
  unsigned int *v340;
  unint64_t v341;
  unint64_t v342;
  unsigned int *v343;
  void *v344[131];
  unsigned __int16 *v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;

  v349 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 200))
    sub_1C96FC1D0(a1 + 248);
  if (!*(_QWORD *)(a1 + 224))
  {
    sub_1C9701D54(v344, *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 324));
    sub_1C974C5FC(a1 + 224, (__int128 *)v344);
    v15 = (std::__shared_weak_count *)v344[1];
    if (v344[1])
    {
      v16 = (unint64_t *)((char *)v344[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (*(_QWORD *)(a1 + 1960) != *(_QWORD *)(a1 + 1952))
    goto LABEL_5;
  if ((*(_BYTE *)(a1 + 308) & 2) != 0)
  {
    v210 = *(_DWORD *)(a1 + 316);
    *(_DWORD *)(a1 + 2392) = v210;
    v211 = *(_DWORD *)(a1 + 312);
    if (v210 < v211)
      v211 = v210;
    if (v210 <= 1)
      v18 = 1;
    else
      v18 = v211;
  }
  else
  {
    v18 = 1;
    *(_DWORD *)(a1 + 2392) = 1;
  }
  *(_DWORD *)(a1 + 2392) = v18;
  v212 = dispatch_semaphore_create(v18);
  *(_QWORD *)(a1 + 2400) = v212;
  if (!v212)
    goto LABEL_10;
  v213 = *(int *)(a1 + 2392);
  v214 = *(uint64_t **)(a1 + 1960);
  v215 = *(uint64_t **)(a1 + 1952);
  v216 = v214 - v215;
  if (v213 > v216)
  {
    v217 = v213 - v216;
    v218 = *(_QWORD *)(a1 + 1968);
    if (v213 - v216 > (v218 - (uint64_t)v214) >> 3)
    {
      if ((v213 & 0x80000000) != 0)
        sub_1C9747024();
      v219 = v218 - (_QWORD)v215;
      if (v219 >> 2 > v213)
        v213 = v219 >> 2;
      if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
        v220 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v220 = v213;
      if (v220 >> 61)
        sub_1C9724B4C();
      v221 = (char *)operator new(8 * v220);
      v222 = &v221[8 * v216];
      v223 = &v221[8 * v220];
      bzero(v222, 8 * v217);
      v224 = &v222[8 * v217];
      while (v214 != v215)
      {
        v225 = *--v214;
        *v214 = 0;
        *((_QWORD *)v222 - 1) = v225;
        v222 -= 8;
      }
      v231 = *(_OWORD *)(a1 + 1952);
      *(_QWORD *)(a1 + 1952) = v222;
      *(_QWORD *)(a1 + 1960) = v224;
      *(_QWORD *)(a1 + 1968) = v223;
      v232 = (uint64_t *)*((_QWORD *)&v231 + 1);
      v233 = (uint64_t *)v231;
      while (v232 != v233)
        sub_1C977E590(--v232, 0);
      if (v233)
        operator delete(v233);
      v230 = *(uint64_t **)(a1 + 1960);
      goto LABEL_446;
    }
    bzero(*(void **)(a1 + 1960), 8 * v217);
    v230 = &v214[v217];
    goto LABEL_438;
  }
  if (v213 < v216)
  {
    v230 = &v215[v213];
    while (v214 != v230)
      sub_1C977E590(--v214, 0);
LABEL_438:
    *(_QWORD *)(a1 + 1960) = v230;
    goto LABEL_446;
  }
  v230 = *(uint64_t **)(a1 + 1960);
LABEL_446:
  for (i = *(uint64_t **)(a1 + 1952); i != v230; ++i)
  {
    v235 = (char *)operator new(0xD80uLL, (std::align_val_t)0x40uLL);
    *((_WORD *)v235 + 272) = 0;
    v235[546] = 1;
    *(_OWORD *)(v235 + 552) = 0u;
    *(_OWORD *)(v235 + 568) = 0u;
    *(_OWORD *)(v235 + 584) = 0u;
    *(_OWORD *)(v235 + 600) = 0u;
    *(_OWORD *)(v235 + 616) = 0u;
    *(_OWORD *)(v235 + 632) = 0u;
    *(_OWORD *)(v235 + 648) = 0u;
    *(_OWORD *)(v235 + 664) = 0u;
    *(_OWORD *)(v235 + 680) = 0u;
    *(_OWORD *)(v235 + 696) = 0u;
    *(_OWORD *)(v235 + 712) = 0u;
    *(_OWORD *)(v235 + 728) = 0u;
    *(_OWORD *)(v235 + 744) = 0u;
    *(_OWORD *)(v235 + 760) = 0u;
    *(_OWORD *)(v235 + 776) = 0u;
    *(_OWORD *)(v235 + 792) = 0u;
    *(_OWORD *)(v235 + 808) = 0u;
    *(_OWORD *)(v235 + 824) = 0u;
    *(_OWORD *)(v235 + 840) = 0u;
    *(_OWORD *)(v235 + 856) = 0u;
    *(_OWORD *)(v235 + 872) = 0u;
    *(_OWORD *)(v235 + 888) = 0u;
    *(_OWORD *)(v235 + 904) = 0u;
    *(_OWORD *)(v235 + 920) = 0u;
    *(_OWORD *)(v235 + 936) = 0u;
    *((_QWORD *)v235 + 166) = 0;
    *((_WORD *)v235 + 646) = 256;
    *((_QWORD *)v235 + 160) = 0;
    *((_QWORD *)v235 + 159) = 0;
    *((_OWORD *)v235 + 81) = 0u;
    *((_OWORD *)v235 + 82) = 0u;
    *((_QWORD *)v235 + 217) = 0;
    *((_QWORD *)v235 + 219) = 0;
    *((_QWORD *)v235 + 218) = 0;
    *((_QWORD *)v235 + 241) = 850045863;
    *((_OWORD *)v235 + 121) = 0u;
    *((_OWORD *)v235 + 122) = 0u;
    *((_OWORD *)v235 + 123) = 0u;
    *((_QWORD *)v235 + 248) = 0;
    *((_QWORD *)v235 + 249) = 1018212795;
    *((_QWORD *)v235 + 254) = 0;
    *((_OWORD *)v235 + 126) = 0u;
    *((_OWORD *)v235 + 125) = 0u;
    *((_DWORD *)v235 + 481) = 0;
    bzero(v235 + 2160, 0x500uLL);
    *((_OWORD *)v235 + 131) = 0u;
    *((_OWORD *)v235 + 130) = 0u;
    *((_OWORD *)v235 + 129) = 0u;
    *(_OWORD *)(v235 + 2120) = 0u;
    *(_OWORD *)(v235 + 2136) = 0u;
    atomic_store(0, (unsigned __int8 *)v235 + 3440);
    *((_QWORD *)v235 + 257) = a1;
    *((_QWORD *)v235 + 431) = dispatch_get_global_queue(*(int *)(a1 + 324), 0);
    sub_1C977E590(i, (uint64_t)v235);
  }
LABEL_5:
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 2400), 0xFFFFFFFFFFFFFFFFLL);
  for (j = *(uint64_t **)(a1 + 1952); ; ++j)
  {
    if (j == *(uint64_t **)(a1 + 1960))
    {
      *(_BYTE *)(a1 + 200) = 0;
      *(_BYTE *)(a1 + 203) = 0;
LABEL_10:
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("!! Didn't decode frame !!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "!! Didn't decode frame !!\n");
      }
      v344[0] = 0;
      v344[1] = 0;
      sub_1C97112A4(a1, a4, 4294954385, (uint64_t *)v344);
      v11 = (std::__shared_weak_count *)v344[1];
      if (v344[1])
      {
        v12 = (unint64_t *)((char *)v344[1] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return 4294954385;
    }
    v10 = atomic_load((unsigned __int8 *)(*j + 3440));
    if ((v10 & 1) == 0)
      break;
  }
  v19 = *j;
  v20 = *(_QWORD *)(*j + 2056);
  sub_1C971CDA8((uint64_t)&v331);
  if ((*(_BYTE *)(v20 + 308) & 2) == 0 || *(unsigned __int8 *)(*(_QWORD *)(v19 + 2056) + 34) != 255)
    *a7 = 0;
  v21 = atomic_load((unsigned __int8 *)(v19 + 3440));
  if ((v21 & 1) != 0)
  {
    v226 = *(_QWORD *)(v19 + 2056);
    v344[0] = 0;
    v344[1] = 0;
    sub_1C97112A4(v226, a4, 4294954385, (uint64_t *)v344);
    v227 = (std::__shared_weak_count *)v344[1];
    if (v344[1])
    {
      v228 = (unint64_t *)((char *)v344[1] + 8);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Attempting to decode a second frame on the same FrameDec!!\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Attempting to decode a second frame on the same FrameDec!!\n");
    }
    v14 = 4294954385;
    goto LABEL_462;
  }
  atomic_store(1u, (unsigned __int8 *)(v19 + 3440));
  if (a2)
    v22 = (unint64_t)a2 + a3;
  else
    v22 = 0;
  *(_QWORD *)v19 = a4;
  *(_DWORD *)(v19 + 2112) = 0;
  v23 = *(_QWORD *)(v19 + 2056);
  *(_WORD *)(v19 + 2048) = *(_WORD *)(v23 + 201);
  *(_BYTE *)(v23 + 201) = 0;
  while (2)
  {
    v24 = *(unsigned int *)(v23 + 192);
    if ((v24 - 1) < 2 || (_DWORD)v24 == 4)
    {
      v26 = (char *)a2 + v24;
      if ((unint64_t)a2 + v24 + 2 >= v22)
        goto LABEL_450;
      LODWORD(v27) = 0;
      do
      {
        v28 = *(unsigned __int8 *)a2;
        a2 = (unsigned __int16 *)((char *)a2 + 1);
        v27 = v28 | ((_DWORD)v27 << 8);
        --v24;
      }
      while (v24);
      if (v27 < 2 || (uint64_t)(v22 - (_QWORD)v26) < v27)
        goto LABEL_484;
      v14 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v331 + 16))(&v331, v26, v27);
      a2 = (unsigned __int16 *)&v26[v27];
      if ((_DWORD)v14)
        break;
      goto LABEL_46;
    }
    if ((_DWORD)v24)
    {
      if (dword_1ED1ACCC0 < 3)
        goto LABEL_460;
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid naluSizeLength %u - must be 1, 2, 4!\n", v24);
      syslog(27, "Invalid naluSizeLength %u - must be 1, 2, 4!\n", v24);
LABEL_484:
      v14 = 4294954387;
      goto LABEL_485;
    }
    v31 = (unsigned __int8 *)(a2 + 1);
    if ((unint64_t)(a2 + 1) >= v22)
      goto LABEL_450;
    v32 = __rev16(*a2);
    while (1)
    {
      v33 = *v31 | (v32 << 8);
      if (v33 == 1)
        break;
      ++v31;
      v32 = v33;
      if ((unint64_t)v31 >= v22)
        goto LABEL_450;
    }
    v34 = v31 + 1;
    a2 = sub_1C9831118((uint64_t)(v31 + 1), v22);
    v14 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, int64_t))(v331 + 16))(&v331, v34, (char *)a2 - (char *)v34);
    if (!(_DWORD)v14)
    {
LABEL_46:
      if (v334)
      {
        if (dword_1ED1ACCC0 >= 6)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Ignoring NALU from layer %d\n", v334);
          syslog(30, "Ignoring NALU from layer %d\n", v334);
        }
        goto LABEL_53;
      }
      v30 = v333;
      if (v333 <= 0x15u && ((1 << v333) & 0x3F03FF) != 0)
      {
        v14 = sub_1C9711584((int64x2_t *)v19, (uint64_t)&v331, a5, a6);
        if ((_DWORD)v14)
          goto LABEL_461;
        v14 = sub_1C971D2A4(*(_QWORD *)(v19 + 2056), (uint64_t)&v331);
        if ((_DWORD)v14)
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Dump Slice NALU: error %d", v14);
            syslog(27, "Dump Slice NALU: error %d", v14);
          }
          goto LABEL_461;
        }
LABEL_53:
        v23 = *(_QWORD *)(v19 + 2056);
        continue;
      }
      switch(v333)
      {
        case ' ':
        case '!':
        case '"':
          v14 = sub_1C971D0C8(*(char **)(v19 + 2056), (uint64_t)&v331);
          if ((_DWORD)v14)
            goto LABEL_461;
          goto LABEL_389;
        case '#':
        case '&':
          goto LABEL_390;
        case '$':
        case '%':
          *(_BYTE *)(*(_QWORD *)(v19 + 2056) + 201) = 1;
          goto LABEL_389;
        case '\'':
        case '(':
          v35 = v332;
          if (*(unsigned __int8 *)(v332 + 2) == 255)
            v36 = -1;
          else
            v36 = *(unsigned __int8 *)(v332 + 2);
          if (v36 <= 131)
          {
            if (v36)
            {
              if (v36 != 1)
              {
                if (v36 != 5)
                  goto LABEL_102;
                if (v335 <= 0x5B)
                {
                  *(_QWORD *)&__p = 0;
                  v343 = 0;
                  v37 = off_1ED1ACCE8(v344, v332, v335);
                  if (!sub_1C98185D4(&v345, (uint64_t)v344, v37, &__p, (uint64_t *)&v343)
                    && (_DWORD)v345 == 5
                    && (unint64_t)v343 >= 0x10
                    && (unint64_t)v343 <= 0x3D)
                  {
                    v97 = 0;
                    while (*((unsigned __int8 *)&xmmword_1C9861040 + v97) == *(unsigned __int8 *)(__p + v97))
                    {
                      if (++v97 == 16)
                      {
                        v98 = v343 - 4;
                        if (v343 != (unsigned int *)16)
                        {
                          v99 = 0;
                          v100 = __p + 16;
                          do
                          {
                            *((_BYTE *)v99 + (_QWORD)&v345 + 4) = byte_1C9861050[v99 & 7] ^ *((_BYTE *)v99 + v100);
                            v99 = (unsigned int *)((char *)v99 + 1);
                          }
                          while (v98 != v99);
                        }
                        *((_BYTE *)&v345 + (_QWORD)v98 + 4) = 0;
                        if (*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
                        {
                          if (dword_1ED1ACCC0 >= 6)
                          {
                            v101 = (FILE *)*MEMORY[0x1E0C80C10];
                            fwrite("=========== SEI User Data ===========\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                            if (dword_1ED1ACCC0 >= 6)
                              fprintf(v101, "  message: %s\n");
                          }
                        }
                        goto LABEL_388;
                      }
                    }
                  }
                }
                if (dword_1ED1ACCC0 >= 6)
                {
                  fwrite("Ignoring user data SEI of unknown type\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                  syslog(30, "Ignoring user data SEI of unknown type\n");
                }
                goto LABEL_388;
              }
              BYTE12(__p) = 0;
              *(_QWORD *)((char *)&__p + 4) = 0;
              v337 = -1;
              v338 = -1;
              LOBYTE(v339) = 0;
              HIDWORD(v339) = -1;
              v49 = *(_QWORD *)(v19 + 2056);
              v345 = 0;
              v346 = 0uLL;
              v348 = 0uLL;
              *((_QWORD *)&v347 + 1) = 0;
              if (v335 <= 0x51)
              {
                v66 = off_1ED1ACCE8(v344, v332, v335);
                v342 = 0;
                v343 = 0;
                v51 = sub_1C98185D4(&__p, (uint64_t)v344, v66, &v343, (uint64_t *)&v342);
                if (!v51)
                {
                  v51 = -12909;
                  if ((_DWORD)__p == 1)
                  {
                    if (v342)
                    {
                      v51 = sub_1C971B944((uint64_t)&v345, v343, v342);
                      if (!v51)
                      {
                        v67 = *(_BYTE **)(v49 + 624);
                        if (v67)
                        {
                          if (!v67[398] || !v67[2028])
                            goto LABEL_377;
                          if (v67[1999])
                          {
                            v68 = SHIDWORD(v348) + 4;
                            v69 = (unsigned int *)(*((_QWORD *)&v347 + 1) + (v68 >> 3));
                            if ((unint64_t)v69 >= (unint64_t)v348)
                            {
                              if ((unint64_t)v69 > (unint64_t)v348)
                                v69 = (unsigned int *)v348;
                              v70 = DWORD2(v348);
                            }
                            else
                            {
                              v70 = bswap32(*v69);
                            }
                            v124 = v70 << (v68 & 7);
                            DWORD1(__p) = DWORD2(v348) >> 28;
                            v125 = (v68 & 7) + 2;
                            v126 = (unsigned int *)((char *)v69 + (v125 >> 3));
                            if ((unint64_t)v126 >= (unint64_t)v348)
                            {
                              if ((unint64_t)v126 > (unint64_t)v348)
                                v126 = (unsigned int *)v348;
                              v127 = v124;
                            }
                            else
                            {
                              v127 = bswap32(*v126);
                            }
                            v128 = v127 << (v125 & 7);
                            DWORD2(__p) = v124 >> 30;
                            v129 = (v125 & 7) + 1;
                            DWORD2(v348) = v128;
                            HIDWORD(v348) = v129 & 7;
                            v130 = (unsigned int *)((char *)v126 + (v129 >> 3));
                            *((_QWORD *)&v347 + 1) = v130;
                            if ((unint64_t)v130 >= (unint64_t)v348)
                            {
                              if ((unint64_t)v130 > (unint64_t)v348)
                                *((_QWORD *)&v347 + 1) = v348;
                              v131 = v128;
                            }
                            else
                            {
                              v131 = bswap32(*v130);
                            }
                            DWORD2(v348) = v131 << (v129 & 7);
                            BYTE12(__p) = v128 < 0;
                          }
                          if (!v67[2032] && !v67[2033])
                            goto LABEL_377;
                          v132 = v67[2043];
                          v133 = v132 + SHIDWORD(v348) + 1;
                          v134 = (unsigned int *)(*((_QWORD *)&v347 + 1) + (v133 >> 3));
                          if ((unint64_t)v134 >= (unint64_t)v348)
                          {
                            if ((unint64_t)v134 > (unint64_t)v348)
                              v134 = (unsigned int *)v348;
                            v135 = DWORD2(v348);
                          }
                          else
                          {
                            v135 = bswap32(*v134);
                          }
                          v136 = v135 << (v133 & 7);
                          LODWORD(v337) = DWORD2(v348) >> ~(_BYTE)v132;
                          v137 = v67[2044];
                          v138 = v137 + (v133 & 7) + 1;
                          v139 = (unsigned int *)((char *)v134 + (v138 >> 3));
                          if ((unint64_t)v139 >= (unint64_t)v348)
                          {
                            if ((unint64_t)v139 > (unint64_t)v348)
                              v139 = (unsigned int *)v348;
                            v140 = v136;
                          }
                          else
                          {
                            v140 = bswap32(*v139);
                          }
                          v141 = v140 << (v138 & 7);
                          DWORD2(v348) = v141;
                          HIDWORD(v337) = v136 >> ~(_BYTE)v137;
                          if (!v67[2034])
                            goto LABEL_377;
                          v142 = v67[2038];
                          v143 = v142 + (v138 & 7) + 1;
                          HIDWORD(v348) = v143 & 7;
                          v144 = (unsigned int *)((char *)v139 + (v143 >> 3));
                          *((_QWORD *)&v347 + 1) = v144;
                          if ((unint64_t)v144 >= (unint64_t)v348)
                          {
                            if ((unint64_t)v144 > (unint64_t)v348)
                              *((_QWORD *)&v347 + 1) = v348;
                            v145 = v141;
                          }
                          else
                          {
                            v145 = bswap32(*v144);
                          }
                          DWORD2(v348) = v145 << (v143 & 7);
                          LODWORD(v338) = v141 >> ~(_BYTE)v142;
                          if (!v67[2037])
                            goto LABEL_377;
                          v321 = sub_1C971B8B0((uint64_t)&v345);
                          HIDWORD(v338) = v321;
                          v146 = DWORD2(v348);
                          v147 = SHIDWORD(v348) + 1;
                          HIDWORD(v348) = v147 & 7;
                          v148 = (unsigned int *)(*((_QWORD *)&v347 + 1) + (v147 >> 3));
                          *((_QWORD *)&v347 + 1) = v148;
                          if ((unint64_t)v148 >= (unint64_t)v348)
                          {
                            v149 = DWORD2(v348);
                            if ((unint64_t)v148 > (unint64_t)v348)
                            {
                              *((_QWORD *)&v347 + 1) = v348;
                              v148 = (unsigned int *)v348;
                              v149 = DWORD2(v348);
                            }
                          }
                          else
                          {
                            v149 = bswap32(*v148);
                          }
                          v195 = v149 << (v147 & 7);
                          DWORD2(v348) = v195;
                          LOBYTE(v339) = v146 < 0;
                          if (v146 < 0)
                          {
                            v196 = v67[2042];
                            v197 = v196 + (v147 & 7) + 1;
                            HIDWORD(v348) = v197 & 7;
                            v198 = (unsigned int *)((char *)v148 + (v197 >> 3));
                            *((_QWORD *)&v347 + 1) = v198;
                            if ((unint64_t)v198 >= (unint64_t)v348)
                            {
                              if ((unint64_t)v198 > (unint64_t)v348)
                                *((_QWORD *)&v347 + 1) = v348;
                              v199 = v195;
                            }
                            else
                            {
                              v199 = bswap32(*v198);
                            }
                            DWORD2(v348) = v199 << (v197 & 7);
                            HIDWORD(v339) = v195 >> ~(_BYTE)v196;
                          }
                          if ((v321 & 0x80000000) == 0)
                          {
                            v200 = 0;
                            do
                            {
                              sub_1C971B8B0((uint64_t)&v345);
                              if ((v146 & 0x80000000) == 0 && v200 < v321)
                              {
                                v201 = DWORD2(v348);
                                v202 = v67[2036] + (uint64_t)SHIDWORD(v348) + 1;
                                v203 = v202 & 7;
                                HIDWORD(v348) = v202 & 7;
                                v204 = (unsigned int *)(*((_QWORD *)&v347 + 1) + (v202 >> 3));
                                *((_QWORD *)&v347 + 1) = v204;
                                if ((unint64_t)v204 >= (unint64_t)v348)
                                {
                                  if ((unint64_t)v204 > (unint64_t)v348)
                                    *((_QWORD *)&v347 + 1) = v348;
                                }
                                else
                                {
                                  v201 = bswap32(*v204);
                                }
                                DWORD2(v348) = v201 << v203;
                              }
                              v51 = 0;
                              ++v200;
                            }
                            while (v321 + 1 != v200);
                          }
                          else
                          {
LABEL_377:
                            v51 = 0;
                          }
                        }
                        else
                        {
                          if (dword_1ED1ACCC0 >= 4)
                          {
                            fwrite("Our pic timing SEI parsing assumes active SPS is ID 0, but that wasn't found\n", 0x4DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                            syslog(28, "Our pic timing SEI parsing assumes active SPS is ID 0, but that wasn't found\n");
                          }
                          v51 = -12909;
                        }
                      }
                    }
                  }
                }
                v50 = v345;
              }
              else
              {
                v50 = 0;
                v51 = -12909;
              }
              if (v50)
                operator delete(v50);
              if (!v51)
              {
                if (*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
                {
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    v209 = (FILE *)*MEMORY[0x1E0C80C10];
                    fwrite("=========== SEI Pic Timing ===========\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                    if (dword_1ED1ACCC0 >= 6)
                    {
                      fprintf(v209, "    %-42s : %lld\n", "pic_struct", SDWORD1(__p));
                      if (dword_1ED1ACCC0 >= 6)
                      {
                        fprintf(v209, "    %-42s : %lld\n", "source_scan_type", SDWORD2(__p));
                        if (dword_1ED1ACCC0 >= 6)
                        {
                          fprintf(v209, "    %-42s : %lld\n", "duplicate_flag", BYTE12(__p));
                          if (dword_1ED1ACCC0 >= 6)
                          {
                            fprintf(v209, "    %-42s : %lld\n", "au_cpb_removal_delay_minus1", (int)v337);
                            if (dword_1ED1ACCC0 >= 6)
                            {
                              fprintf(v209, "    %-42s : %lld\n", "pic_dpb_output_delay", SHIDWORD(v337));
                              if (dword_1ED1ACCC0 >= 6)
                              {
                                fprintf(v209, "    %-42s : %lld\n", "pic_dpb_output_du_delay", (int)v338);
                                if (dword_1ED1ACCC0 >= 6)
                                {
                                  fprintf(v209, "    %-42s : %lld\n", "num_decoding_units_minus1", SHIDWORD(v338));
                                  if (dword_1ED1ACCC0 >= 6)
                                  {
                                    fprintf(v209, "    %-42s : %lld\n", "du_common_cpb_removal_delay_flag", v339);
                                    if (dword_1ED1ACCC0 >= 6)
                                      fprintf(v209, "    %-42s : %lld\n");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_388;
              }
              goto LABEL_382;
            }
            WORD2(v344[0]) = -1;
            *(void **)((char *)v344 + 6) = 0;
            *(void **)((char *)&v344[1] + 4) = 0;
            memset((char *)&v344[2] + 4, 255, 0x400uLL);
            v42 = *(_QWORD *)(v19 + 2056);
            __p = 0uLL;
            v337 = 0;
            v340 = 0;
            v341 = 0;
            v339 = 0;
            if (v335 > 0x51)
            {
              v43 = 0;
              v44 = -12909;
              goto LABEL_113;
            }
            v55 = off_1ED1ACCE8(&v345, v332, v335);
            v342 = 0;
            v343 = 0;
            v44 = sub_1C98185D4(v344, (uint64_t)&v345, v55, &v343, (uint64_t *)&v342);
            if (!v44)
            {
              v44 = -12909;
              if (!LODWORD(v344[0]))
              {
                if (v342)
                {
                  v44 = sub_1C971B944((uint64_t)&__p, v343, v342);
                  if (!v44)
                  {
                    v88 = sub_1C971B8B0((uint64_t)&__p);
                    WORD2(v344[0]) = v88;
                    if ((v88 << 16) <= 0xF0000)
                      v89 = (uint64_t *)(v42 + 16 * (__int16)v88 + 624);
                    else
                      v89 = (uint64_t *)(v42 + 1920);
                    v90 = *v89;
                    if (v90)
                    {
                      if (*(_BYTE *)(v90 + 398) && *(_BYTE *)(v90 + 2028))
                      {
                        v91 = *(unsigned __int8 *)(v90 + 2034);
                        if (*(_BYTE *)(v90 + 2034))
                        {
                          v92 = BYTE6(v344[0]);
                          v93 = v341;
                          v94 = HIDWORD(v341);
                          v96 = v339;
                          v95 = v340;
                        }
                        else
                        {
                          v121 = v341;
                          v122 = SHIDWORD(v341) + 1;
                          v95 = v340;
                          v96 = (unsigned int *)((char *)v339 + (v122 >> 3));
                          if (v96 >= v340)
                          {
                            if (v96 > v340)
                              v96 = v340;
                            v123 = v341;
                          }
                          else
                          {
                            v123 = bswap32(*v96);
                          }
                          v94 = v122 & 7;
                          v93 = v123 << (v122 & 7);
                          LODWORD(v341) = v93;
                          v92 = v121 >> 31;
                          BYTE6(v344[0]) = v92;
                        }
                        if (v92)
                        {
                          v150 = *(unsigned __int8 *)(v90 + 2043);
                          v151 = v150 + (int)v94 + 1;
                          HIDWORD(v341) = v151 & 7;
                          v152 = (unsigned int *)((char *)v96 + (v151 >> 3));
                          v339 = v152;
                          if (v152 >= v95)
                          {
                            if (v152 > v95)
                              v152 = v95;
                            v153 = v93;
                          }
                          else
                          {
                            v153 = bswap32(*v152);
                          }
                          v154 = v93 >> ~(_BYTE)v150;
                          v155 = v153 << (v151 & 7);
                          HIDWORD(v344[1]) = v154;
                          v156 = *(unsigned __int8 *)(v90 + 2038);
                          v157 = v156 + (v151 & 7) + 1;
                          v94 = v157 & 7;
                          v341 = __PAIR64__(v94, v155);
                          v96 = (unsigned int *)((char *)v152 + (v157 >> 3));
                          v339 = v96;
                          if (v96 >= v95)
                          {
                            if (v96 > v95)
                              v96 = v95;
                            v158 = v155;
                          }
                          else
                          {
                            v158 = bswap32(*v96);
                          }
                          v159 = v155 >> ~(_BYTE)v156;
                          v93 = v158 << v94;
                          LODWORD(v341) = v158 << v94;
                          LODWORD(v344[2]) = v159;
                        }
                        v160 = (int)v94 + 1;
                        HIDWORD(v341) = v160 & 7;
                        v161 = (unsigned int *)((char *)v96 + (v160 >> 3));
                        v339 = v161;
                        if (v161 >= v95)
                        {
                          if (v161 > v95)
                            v161 = v95;
                          v162 = v93;
                        }
                        else
                        {
                          v162 = bswap32(*v161);
                        }
                        v163 = v162 << (v160 & 7);
                        HIBYTE(v344[0]) = v93 < 0;
                        v164 = *(unsigned __int8 *)(v90 + 2043);
                        v165 = v164 + (v160 & 7) + 1;
                        v166 = v165 & 7;
                        v341 = __PAIR64__(v166, v163);
                        v167 = (unsigned int *)((char *)v161 + (v165 >> 3));
                        v339 = v167;
                        if (v167 >= v95)
                        {
                          if (v167 > v95)
                            v167 = v95;
                          v168 = v163;
                        }
                        else
                        {
                          v168 = bswap32(*v167);
                        }
                        v169 = 0;
                        v170 = v168 << v166;
                        LODWORD(v341) = v168 << v166;
                        LODWORD(v344[1]) = v163 >> ~(_BYTE)v164;
                        v171 = v91 | v92;
                        v172 = 1;
                        while (1)
                        {
                          v173 = v172;
                          if ((v172 & 1) == 0)
                            break;
                          if (*(_BYTE *)(v90 + 2032))
                            goto LABEL_329;
LABEL_353:
                          v172 = 0;
                          v44 = 0;
                          v169 = 1;
                          if ((v173 & 1) == 0)
                            goto LABEL_112;
                        }
                        if (!*(_BYTE *)(v90 + 2033))
                          goto LABEL_355;
LABEL_329:
                        v174 = *(unsigned __int8 *)(v90 + 2042);
                        v175 = v174 + 1;
                        v176 = 31 - v174;
                        v177 = *(unsigned __int16 *)(*(_QWORD *)(v90 + 2048) + 6) + 1;
                        v178 = (_DWORD *)v344 + v169;
                        do
                        {
                          v179 = v175 + v166;
                          HIDWORD(v341) = v179 & 7;
                          v180 = (unsigned int *)((char *)v167 + (v179 >> 3));
                          v339 = v180;
                          if (v180 >= v95)
                          {
                            if (v180 > v95)
                              v180 = v95;
                            v181 = v170;
                          }
                          else
                          {
                            v181 = bswap32(*v180);
                          }
                          v182 = v170 >> v176;
                          v183 = v181 << (v179 & 7);
                          v178[5] = v182;
                          v184 = (v179 & 7) + v175;
                          v166 = v184 & 7;
                          v341 = __PAIR64__(v166, v183);
                          v167 = (unsigned int *)((char *)v180 + (v184 >> 3));
                          v339 = v167;
                          if (v167 >= v95)
                          {
                            if (v167 > v95)
                            {
                              v339 = v95;
                              v167 = v95;
                            }
                            v185 = v183;
                          }
                          else
                          {
                            v185 = bswap32(*v167);
                          }
                          v186 = v183 >> v176;
                          v170 = v185 << v166;
                          LODWORD(v341) = v185 << v166;
                          v178[69] = v186;
                          if (v171)
                          {
                            v187 = (v184 & 7) + v175;
                            HIDWORD(v341) = v187 & 7;
                            v188 = (unsigned int *)((char *)v167 + (v187 >> 3));
                            v339 = v188;
                            if (v188 >= v95)
                            {
                              if (v188 > v95)
                                v188 = v95;
                              v189 = v170;
                            }
                            else
                            {
                              v189 = bswap32(*v188);
                            }
                            v190 = v170 >> v176;
                            v191 = v189 << (v187 & 7);
                            v178[133] = v190;
                            v192 = (v187 & 7) + v175;
                            v166 = v192 & 7;
                            v341 = __PAIR64__(v166, v191);
                            v167 = (unsigned int *)((char *)v188 + (v192 >> 3));
                            v339 = v167;
                            if (v167 >= v95)
                            {
                              if (v167 > v95)
                              {
                                v339 = v95;
                                v167 = v95;
                              }
                              v193 = v191;
                            }
                            else
                            {
                              v193 = bswap32(*v167);
                            }
                            v194 = v191 >> v176;
                            v170 = v193 << v166;
                            LODWORD(v341) = v193 << v166;
                            v178[197] = v194;
                          }
                          v178 += 2;
                          --v177;
                        }
                        while (v177);
                        goto LABEL_353;
                      }
LABEL_355:
                      v44 = 0;
                    }
                    else
                    {
                      if (dword_1ED1ACCC0 >= 3)
                      {
                        fwrite("Buffering period SEI refers to nonexistant SPS\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                        syslog(27, "Buffering period SEI refers to nonexistant SPS\n");
                      }
                      v44 = -12909;
                    }
                  }
                }
              }
            }
LABEL_112:
            v43 = (void *)__p;
LABEL_113:
            if (v43)
              operator delete(v43);
            if (!v44)
            {
              if (*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
              {
                v56 = (FILE *)*MEMORY[0x1E0C80C10];
                if (dword_1ED1ACCC0 >= 6)
                {
                  fwrite("=========== SEI Buffering Period ===========\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    fprintf(v56, "    %-42s : %lld\n", "bp_sps_id", SWORD2(v344[0]));
                    if (dword_1ED1ACCC0 >= 6)
                    {
                      fprintf(v56, "    %-42s : %lld\n", "irap_cpb_params_present_flag", BYTE6(v344[0]));
                      if (dword_1ED1ACCC0 >= 6)
                      {
                        fprintf(v56, "    %-42s : %lld\n", "concatenation_flag", HIBYTE(v344[0]));
                        if (dword_1ED1ACCC0 >= 6)
                        {
                          fprintf(v56, "    %-42s : %lld\n", "au_cpb_removal_delay_delta_minus1", SLODWORD(v344[1]));
                          if (dword_1ED1ACCC0 >= 6)
                          {
                            fprintf(v56, "    %-42s : %lld\n", "cpb_delay_offset", SHIDWORD(v344[1]));
                            if (dword_1ED1ACCC0 >= 6)
                              fprintf(v56, "    %-42s : %lld\n", "dpb_delay_offset", SLODWORD(v344[2]));
                          }
                        }
                      }
                    }
                  }
                }
                v57 = 0;
                v58 = 1;
                do
                {
                  v59 = 0;
                  v60 = v58;
                  v61 = (char *)v344 + 4 * v57;
                  do
                  {
                    v62 = &v61[v59];
                    if ((*(_DWORD *)&v61[v59 + 20] & 0x80000000) == 0)
                    {
                      v63 = *((int *)v62 + 69);
                      if ((v63 & 0x80000000) == 0 && dword_1ED1ACCC0 >= 6)
                      {
                        fprintf(v56, "    %-42s : %lld\n", "initial_cpb_removal_delay", *(unsigned int *)&v61[v59 + 20]);
                        if (dword_1ED1ACCC0 >= 6)
                          fprintf(v56, "    %-42s : %lld\n", "initial_cpb_removal_delay_offset", v63);
                      }
                    }
                    v64 = *((unsigned int *)v62 + 133);
                    if ((v64 & 0x80000000) == 0)
                    {
                      v65 = *(int *)&v61[v59 + 788];
                      if ((v65 & 0x80000000) == 0 && dword_1ED1ACCC0 >= 6)
                      {
                        fprintf(v56, "    %-42s : %lld\n", "initial_alt_cpb_removal_delay", v64);
                        if (dword_1ED1ACCC0 >= 6)
                          fprintf(v56, "    %-42s : %lld\n", "initial_alt_cpb_removal_delay_offset", v65);
                      }
                    }
                    v59 += 8;
                  }
                  while (v59 != 256);
                  v58 = 0;
                  v57 = 1;
                }
                while ((v60 & 1) != 0);
              }
              goto LABEL_388;
            }
            goto LABEL_382;
          }
          if (v36 == 144)
          {
            v345 = 0;
            *(_QWORD *)&__p = 0;
            if (v335 <= 0xD)
            {
              v45 = off_1ED1ACCE8(v344, v332, v335);
              if (!sub_1C98185D4(&v343, (uint64_t)v344, v45, &v345, (uint64_t *)&__p)
                && (_DWORD)v343 == 144
                && (unint64_t)__p >= 4)
              {
                if (*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
                {
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    v46 = *v345;
                    v47 = (FILE *)*MEMORY[0x1E0C80C10];
                    fwrite("=========== SEI Content Light Level ===========\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                    if (dword_1ED1ACCC0 >= 6)
                    {
                      fprintf(v47, "  %-44s : %lld\n", "max_content_light_level", bswap32(v46) >> 16);
                      if (dword_1ED1ACCC0 >= 6)
                        fprintf(v47, "  %-44s : %lld\n");
                    }
                  }
                }
                goto LABEL_388;
              }
            }
            goto LABEL_382;
          }
          if (v36 != 137)
          {
            if (v36 == 132)
            {
              if (!*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 304))
                goto LABEL_388;
              if (!*(_QWORD *)(v19 + 2120))
              {
                if (dword_1ED1ACCC0 < 3)
                  goto LABEL_388;
                fwrite("MD5 SEI before frame\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                syslog(27, "MD5 SEI before frame\n");
                goto LABEL_382;
              }
              if (v335 <= 0x51)
              {
                *(_QWORD *)&__p = 0;
                v343 = 0;
                v38 = off_1ED1ACCE8(v344, v332, v335);
                if (!sub_1C98185D4(&v345, (uint64_t)v344, v38, &__p, (uint64_t *)&v343)
                  && (_DWORD)v345 == 132)
                {
                  if (v343)
                  {
                    v39 = *(unsigned __int8 *)__p;
                    if (v39 <= 2)
                    {
                      v40 = byte_1C9861058[v39];
                      HIDWORD(v345) = *(unsigned __int8 *)__p;
                      v346 = 0u;
                      v347 = 0u;
                      v348 = 0u;
                      if (v343 == (unsigned int *)(v40 + 1))
                      {
                        v41 = (const void *)(__p + 1);
                      }
                      else
                      {
                        if (v343 != (unsigned int *)(3 * v40 + 1))
                          goto LABEL_382;
                        v41 = (const void *)(__p + 1);
                        v40 = (3 * v40);
                      }
                      memcpy(&v346, v41, v40);
                      if (*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
                        sub_1C981875C((uint64_t)&v345, (FILE *)*MEMORY[0x1E0C80C10]);
                      if (!(_DWORD)v39)
                      {
                        v118 = *(_QWORD *)(v19 + 2120);
                        if (*(_BYTE *)(v118 + 548) && dword_1ED1ACCC0 >= 4)
                        {
                          fwrite("Got multiple MD5 SEI for one frame\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                          syslog(28, "Got multiple MD5 SEI for one frame\n");
                          v118 = *(_QWORD *)(v19 + 2120);
                        }
                        v119 = (_OWORD *)(v118 + 549);
                        v120 = v347;
                        *v119 = v346;
                        v119[1] = v120;
                        v119[2] = v348;
                        *(_BYTE *)(*(_QWORD *)(v19 + 2120) + 548) = 1;
                      }
                      goto LABEL_388;
                    }
                  }
                }
              }
LABEL_382:
              if (dword_1ED1ACCC0 >= 4)
              {
                v205 = *(unsigned __int8 *)(v332 + 2);
                if (v205 == 255)
                  v205 = -1;
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "Ignoring SEI of type %d (parse fail)\n", v205);
                v206 = *(unsigned __int8 *)(v332 + 2);
                if (v206 == 255)
                  v206 = -1;
                syslog(28, "Ignoring SEI of type %d (parse fail)\n", v206);
              }
LABEL_388:
              v14 = sub_1C971D2A4(*(_QWORD *)(v19 + 2056), (uint64_t)&v331);
              if ((_DWORD)v14)
              {
                if (dword_1ED1ACCC0 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Dump SEI NALU: error %d", v14);
                  syslog(27, "Dump SEI NALU: error %d", v14);
                }
                goto LABEL_461;
              }
LABEL_389:
              v30 = v333;
LABEL_390:
              if (v30 == 35)
              {
                if (*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
                {
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    v207 = *(unsigned __int8 *)(v332 + 2);
                    v208 = (FILE *)*MEMORY[0x1E0C80C10];
                    fwrite("=========== Access Unit Delimiter ===========\n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                    if (dword_1ED1ACCC0 >= 6)
                      fprintf(v208, "  pic_type : %d\n", v207 >> 5);
                  }
                }
              }
              goto LABEL_53;
            }
LABEL_102:
            if (!*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
              goto LABEL_388;
            if (v333 == 39)
            {
              v48 = "=========== SEI Prefix ===========\n";
              if (dword_1ED1ACCC0 <= 5)
                goto LABEL_388;
            }
            else
            {
              v71 = dword_1ED1ACCC0;
              if (v333 != 40 || (v48 = "=========== SEI Suffix ===========\n", dword_1ED1ACCC0 < 6))
              {
LABEL_154:
                if (v71 >= 6)
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "  %-44s : %d\n");
                goto LABEL_388;
              }
            }
            fwrite(v48, 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            v71 = dword_1ED1ACCC0;
            goto LABEL_154;
          }
          __p = 0uLL;
          v337 = 0;
          v342 = 0;
          v343 = 0;
          memset(v344, 0, 24);
          memset(&v344[4], 0, 24);
          if (v335)
          {
            sub_1C971BA44((unint64_t *)&__p, v335);
            v52 = (void *)__p;
            v53 = v335;
            if (v335 > *((_QWORD *)&__p + 1) - (_QWORD)__p)
            {
              v54 = -12909;
              goto LABEL_228;
            }
            v35 = v332;
          }
          else
          {
            v52 = 0;
            v53 = 0;
          }
          v72 = off_1ED1ACCE8(v52, v35, v53);
          v73 = sub_1C98185D4(&v345, (uint64_t)v52, v72, &v343, (uint64_t *)&v342);
          if (v73)
          {
            v54 = v73;
          }
          else
          {
            v54 = -12909;
            if ((_DWORD)v345 == 137 && v342 >= 0x18)
            {
              v54 = sub_1C971B944((uint64_t)v344, v343, v342);
              if (!v54)
              {
                v74 = 0;
                v75 = v344[6];
                v76 = HIDWORD(v344[6]);
                v78 = v344[4];
                v77 = v344[5];
                v79 = BYTE4(v344[6]) & 7;
                do
                {
                  HIDWORD(v344[6]) = v79;
                  v80 = (_DWORD *)((char *)v78 + ((unint64_t)(v76 + 16) >> 3));
                  v344[4] = v80;
                  if (v80 >= v77)
                  {
                    if (v80 > v77)
                      v80 = v77;
                    v81 = v75;
                  }
                  else
                  {
                    v81 = bswap32(*v80);
                  }
                  v82 = HIWORD(v75);
                  v83 = v81 << v79;
                  *(_WORD *)((char *)&v345 + v74 + 4) = v82;
                  LODWORD(v344[6]) = v81 << v79;
                  HIDWORD(v344[6]) = v79;
                  v78 = (_DWORD *)((char *)v80 + 2);
                  v344[4] = v78;
                  if (v78 >= v77)
                  {
                    if (v78 > v77)
                    {
                      v344[4] = v77;
                      v78 = v77;
                    }
                    v84 = v81 << v79;
                  }
                  else
                  {
                    v84 = bswap32(*v78);
                  }
                  v85 = HIWORD(v83);
                  v75 = v84 << v79;
                  LODWORD(v344[6]) = v84 << v79;
                  *(_WORD *)((char *)&v346 + v74 + 2) = v85;
                  v74 += 2;
                  v76 = v79;
                }
                while (v74 != 6);
                HIDWORD(v344[6]) = v79;
                v86 = (_DWORD *)((char *)v78 + 2);
                v344[4] = v86;
                if (v86 >= v77)
                {
                  if (v86 > v77)
                    v86 = v77;
                  v87 = v75;
                }
                else
                {
                  v87 = bswap32(*v86);
                }
                v102 = v87 << v79;
                WORD4(v346) = HIWORD(v75);
                v344[6] = (void *)__PAIR64__(v79, v102);
                v103 = (_DWORD *)((char *)v86 + 2);
                v344[4] = (char *)v86 + 2;
                if ((_DWORD *)((char *)v86 + 2) >= v77)
                {
                  if ((_DWORD *)((char *)v86 + 2) > v77)
                    v103 = v77;
                  v104 = v102;
                }
                else
                {
                  v104 = bswap32(*v103);
                }
                v105 = HIWORD(v102);
                v106 = v104 << v79;
                WORD5(v346) = v105;
                LODWORD(v344[6]) = v104 << v79;
                HIDWORD(v344[6]) = v79;
                v107 = (unsigned int *)((char *)v103 + 2);
                v344[4] = (char *)v103 + 2;
                if ((unsigned int *)((char *)v103 + 2) >= v77)
                {
                  if ((unsigned int *)((char *)v103 + 2) > v77)
                    v107 = v77;
                  v108 = v106;
                }
                else
                {
                  v108 = bswap32(*v107);
                }
                v109 = v108 << v79;
                v344[6] = (void *)__PAIR64__(v79, v109);
                v110 = (unsigned int *)((char *)v107 + 2);
                v344[4] = v110;
                if (v110 >= v77)
                {
                  if (v110 > v77)
                    v110 = v77;
                  v111 = v109;
                }
                else
                {
                  v111 = bswap32(*v110);
                }
                HIDWORD(v346) = v106 & 0xFFFF0000 | HIWORD(v109);
                LODWORD(v344[6]) = v111 << v79;
                HIDWORD(v344[6]) = v79;
                v112 = (_DWORD *)((char *)v110 + 2);
                v344[4] = (char *)v110 + 2;
                if ((_DWORD *)((char *)v110 + 2) >= v77)
                {
                  if ((_DWORD *)((char *)v110 + 2) > v77)
                    v112 = v77;
                  v113 = v111 << v79;
                }
                else
                {
                  v113 = bswap32(*v112);
                }
                v114 = v113 << v79;
                v344[6] = (void *)__PAIR64__(v79, v114);
                if ((unsigned int *)((char *)v112 + 2) > v77)
                  v344[4] = v77;
                v54 = 0;
                LODWORD(v347) = (v111 << v79) & 0xFFFF0000 | HIWORD(v114);
              }
            }
          }
LABEL_228:
          if (v344[0])
            operator delete(v344[0]);
          if (v52)
          {
            *((_QWORD *)&__p + 1) = v52;
            operator delete(v52);
          }
          if (!v54)
          {
            if (*(_BYTE *)(*(_QWORD *)(v19 + 2056) + 306))
            {
              v115 = (FILE *)*MEMORY[0x1E0C80C10];
              v116 = dword_1ED1ACCC0;
              if (dword_1ED1ACCC0 > 5)
              {
                fwrite("=========== SEI Mastering Display Colour Volume ===========\n", 0x3CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                v116 = dword_1ED1ACCC0;
              }
              for (k = 0; k != 6; k += 2)
              {
                if (v116 >= 6)
                {
                  fprintf(v115, "  %-44s : %lld\n", "display_primaries_x", *(unsigned __int16 *)((char *)&v345 + k + 4));
                  v116 = dword_1ED1ACCC0;
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    fprintf(v115, "  %-44s : %lld\n", "display_primaries_y", *(unsigned __int16 *)((char *)&v346 + k + 2));
                    v116 = dword_1ED1ACCC0;
                  }
                }
              }
              if (v116 > 5)
              {
                fprintf(v115, "  %-44s : %lld\n", "white_point_x", WORD4(v346));
                if (dword_1ED1ACCC0 >= 6)
                {
                  fprintf(v115, "  %-44s : %lld\n", "white_point_y", WORD5(v346));
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    fprintf(v115, "  %-44s : %lld\n", "max_display_mastering_luminance", HIDWORD(v346));
                    if (dword_1ED1ACCC0 >= 6)
                      fprintf(v115, "  %-44s : %lld\n");
                  }
                }
              }
            }
            goto LABEL_388;
          }
          goto LABEL_382;
        default:
          if (dword_1ED1ACCC0 >= 4)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Discarding NALU of type %d\n", v333);
            syslog(28, "Discarding NALU of type %d\n", v333);
          }
          goto LABEL_389;
      }
    }
    break;
  }
  if ((_DWORD)v14 != -26526)
  {
LABEL_485:
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("PullNALU failed to get a valid NALU\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "PullNALU failed to get a valid NALU\n");
    }
LABEL_461:
    sub_1C9710F58(v19, v14);
    goto LABEL_462;
  }
LABEL_450:
  v236 = *(_QWORD *)(v19 + 2120);
  if (!v236 || (v237 = *(unsigned int *)(v19 + 2112), !(_DWORD)v237))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("No frame allocated or no slices found!\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "No frame allocated or no slices found!\n");
    }
LABEL_460:
    v14 = 4294954387;
    goto LABEL_461;
  }
  if ((int)v237 < 1)
  {
    v243 = 1;
    goto LABEL_491;
  }
  v238 = 0;
  v239 = (_DWORD)v237 != 1;
  v240 = *(uint64_t **)(v19 + 2064);
  do
  {
    v241 = *v240++;
    *(_BYTE *)(v241 + 1600) = v239;
    v238 |= *(_BYTE *)(v241 + 58) != 2;
    --v237;
  }
  while (v237);
  if (((a5 != 0) & v238) != 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Got inter slice but tile API only supports intra for now!\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Got inter slice but tile API only supports intra for now!\n");
    }
    goto LABEL_460;
  }
  v243 = v238 ^ 1;
  if (((v238 ^ 1) & 1) == 0)
  {
    v244 = *(_QWORD *)(v236 + 848) * (*(_QWORD *)(v236 + 840) + 7);
    v245 = *(_QWORD *)(v236 + 864);
    v246 = *(_QWORD *)(v236 + 856);
    v247 = 0xAAAAAAAAAAAAAAABLL * ((v245 - v246) >> 2);
    v248 = v244 - v247;
    if (v244 <= v247)
    {
      if (v244 >= v247)
        goto LABEL_491;
      v260 = v246 + 12 * v244;
    }
    else
    {
      v249 = *(_QWORD *)(v236 + 872);
      if (0xAAAAAAAAAAAAAAABLL * ((v249 - v245) >> 2) < v248)
      {
        if (v244 > 0x1555555555555555)
          sub_1C9747024();
        v250 = 0xAAAAAAAAAAAAAAABLL * ((v249 - v246) >> 2);
        if (2 * v250 > v244)
          v244 = 2 * v250;
        if (v250 >= 0xAAAAAAAAAAAAAAALL)
          v251 = 0x1555555555555555;
        else
          v251 = v244;
        if (v251 > 0x1555555555555555)
          sub_1C9724B4C();
        v252 = (char *)operator new(12 * v251);
        v253 = &v252[12 * v247];
        v254 = &v252[12 * v251];
        bzero(v253, 12 * ((12 * v248 - 12) / 0xC) + 12);
        v255 = &v253[12 * ((12 * v248 - 12) / 0xC) + 12];
        v256 = *(_DWORD **)(v236 + 864);
        v257 = *(_DWORD **)(v236 + 856);
        if (v256 != v257)
        {
          do
          {
            v258 = *(_QWORD *)(v256 - 3);
            v256 -= 3;
            v259 = v256[2];
            *(_QWORD *)(v253 - 12) = v258;
            v253 -= 12;
            *((_DWORD *)v253 + 2) = v259;
          }
          while (v256 != v257);
          v256 = *(_DWORD **)(v236 + 856);
        }
        *(_QWORD *)(v236 + 856) = v253;
        *(_QWORD *)(v236 + 864) = v255;
        *(_QWORD *)(v236 + 872) = v254;
        if (v256)
          operator delete(v256);
        goto LABEL_491;
      }
      bzero(*(void **)(v236 + 864), 12 * ((12 * v248 - 12) / 0xC) + 12);
      v260 = v245 + 12 * ((12 * v248 - 12) / 0xC) + 12;
    }
    *(_QWORD *)(v236 + 864) = v260;
  }
LABEL_491:
  *(_BYTE *)(v236 + 712) = v243 & 1;
  v261 = *(_QWORD *)(v19 + 2056);
  if (*(_BYTE *)(v261 + 33))
  {
    v262 = *(_QWORD *)(*(_QWORD *)(v19 + 2064) + 8 * *(int *)(v19 + 2112) - 8);
    v263 = *(_QWORD *)(v262 + 1632);
    v264 = *(_QWORD *)(v262 + 1648);
    v265 = ~v263 + v264;
    v266 = *(unsigned __int8 *)(v263 + v265);
    *(_DWORD *)(v261 + 48) = -1;
    v267 = (_BYTE *)(v261 + 48);
    *(_BYTE *)(v261 + 52) = -1;
    *(_BYTE *)(v261 + 100) = 0;
    *(_OWORD *)(v261 + 104) = 0u;
    *(_OWORD *)(v261 + 120) = 0u;
    *(_OWORD *)(v261 + 136) = 0u;
    *(_OWORD *)(v261 + 152) = 0u;
    v268 = *(unsigned __int8 *)(v261 + 34);
    if (v268 != 255 && ((v266 >> v268) & 1) != 0)
      *v267 = v268;
    v269 = *(unsigned __int8 *)(v261 + 38);
    if (v269 != 255 && ((v266 >> v269) & 1) != 0)
      *(_BYTE *)(v261 + 51) = v269;
    v270 = *(unsigned __int16 *)(v261 + 36);
    if (v270 != 0xFFFF && ((v266 >> v270) & 1) != 0)
      *(_BYTE *)(v261 + 50) = v270;
    v271 = *(unsigned __int8 *)(v261 + 35);
    if (v271 != 255 && ((v266 >> v271) & 1) != 0)
      *(_BYTE *)(v261 + 49) = v271;
    v272 = *(unsigned __int8 *)(v261 + 39);
    if (v272 != 255)
      *(_BYTE *)(v261 + 52) = v272;
    if ((v266 & 0x80) != 0)
    {
      v265 = v265 != 0;
      v273 = v264 - v263;
      while (1)
      {
        v274 = v273 - 1;
        if ((unint64_t)(v273 - 1) < 2)
          break;
        v275 = *(char *)(v263 - 2 + v273--);
        if ((v275 & 0x80000000) == 0)
        {
          v265 = v274 - 1;
          break;
        }
      }
    }
    sub_1C97EF704((char *)(v261 + 48));
    v276 = *(unsigned int *)(v261 + 164);
    v277 = v265 >= v276;
    v278 = v265 - v276;
    if (v278 == 0 || !v277)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("No RBSP after control data extraction", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "No RBSP after control data extraction");
      }
      goto LABEL_460;
    }
    v279 = v263 + v278;
    v280 = (char)*v267;
    if (v280 != -1)
    {
      v281 = *(unsigned int *)(v261 + 4 * v280 + 136);
      *(_DWORD *)(v261 + 56) = 8 * *(unsigned __int8 *)(v279 + v281);
      *(_DWORD *)(v261 + 60) = 8 * *(unsigned __int8 *)(v279 + (v281 + 1));
    }
    v282 = *(char *)(v261 + 51);
    if (v282 != -1)
    {
      v283 = *(unsigned int *)(v261 + 4 * v282 + 136);
      *(_DWORD *)(v261 + 68) = 16 * *(unsigned __int8 *)(v279 + v283);
      *(_DWORD *)(v261 + 72) = 16 * *(unsigned __int8 *)(v279 + (v283 + 1));
      *(_DWORD *)(v261 + 76) = 16 * *(char *)(v279 + (v283 + 2));
      *(_DWORD *)(v261 + 80) = 16 * *(char *)(v279 + (v283 + 3));
    }
    v284 = *(char *)(v261 + 50);
    if (v284 != -1)
    {
      v285 = *(unsigned int *)(v261 + 4 * v284 + 136);
      v286 = *(unsigned __int8 *)(v279 + v285);
      *(_WORD *)(v261 + 64) = v286 << 8;
      *(_WORD *)(v261 + 64) = *(unsigned __int8 *)(v279 + (v285 + 1)) | (unsigned __int16)(v286 << 8);
    }
    v287 = *(unsigned __int8 *)(v261 + 52);
    if (v287 != 255)
      *(_BYTE *)(v261 + 100) = (v266 >> v287) & 1;
  }
  v288 = *a7;
  v289 = *(_QWORD *)(v19 + 2056);
  v290 = *(uint64_t **)(v19 + 2064);
  v291 = *v290;
  v292 = *(unsigned int *)(v19 + 2112);
  if ((int)v292 < 1)
  {
LABEL_524:
    if ((*(_BYTE *)(v289 + 308) & 4) == 0)
      goto LABEL_527;
    v293 = *(_QWORD *)(v291 + 32);
    if (!*(_BYTE *)(v293 + 21) || *(_BYTE *)(v293 + 20))
      goto LABEL_527;
    v313 = *(_QWORD *)(v291 + 16);
    v314 = *(_DWORD *)(v313 + 2120);
    if (v314 >= 0)
      v315 = *(_DWORD *)(v313 + 2120);
    else
      v315 = v314 + 1;
    v316 = v315 >> 1;
    v317 = *(_DWORD *)(v313 + 2124);
    if (v316 < v317)
      v317 = v316;
    v318 = *(_DWORD *)(v289 + 320);
    if (v318)
      v319 = *(_DWORD *)(v289 + 320);
    else
      v319 = v317;
    v320 = v314 / 15;
    if (v320 < v317)
      v317 = v320;
    if (!*a7)
      v317 = v319;
    if (v318)
      v317 = v319;
    if (*(_DWORD *)(v289 + 312) < v317)
      v317 = *(_DWORD *)(v289 + 312);
    if (v317 <= 1)
      v294 = 1;
    else
      v294 = v317;
  }
  else
  {
    while (!*(_BYTE *)(*v290 + 56))
    {
      ++v290;
      if (!--v292)
        goto LABEL_524;
    }
LABEL_527:
    v294 = 1;
  }
  v295 = *(_QWORD *)(v19 + 2096);
  v296 = *(_QWORD *)(v19 + 2088);
  v297 = 0x3A4C0A237C32B16DLL * ((v295 - v296) >> 6);
  v298 = v294 - v297;
  if (v294 <= v297)
  {
    if (v294 < v297)
      *(_QWORD *)(v19 + 2096) = v296 + 6464 * v294;
  }
  else
  {
    v328 = *(_QWORD *)(v19 + 2056);
    v330 = v291;
    v299 = *(_QWORD *)(v19 + 2104);
    if (0x3A4C0A237C32B16DLL * ((v299 - v295) >> 6) >= v298)
    {
      v310 = v295 + 6464 * v298;
      v311 = 6464 * v294 - ((v295 - v296) >> 6 << 6);
      do
      {
        bzero((void *)(v295 + 64), 0x1800uLL);
        *(_QWORD *)(v295 + 6416) = 0;
        *(_WORD *)(v295 + 6424) = 0;
        v295 += 6464;
        v311 -= 6464;
      }
      while (v311);
      *(_QWORD *)(v19 + 2096) = v310;
      v289 = v328;
      v291 = v330;
    }
    else
    {
      v300 = 0x3A4C0A237C32B16DLL * ((v299 - v296) >> 6);
      v301 = 2 * v300;
      if (2 * v300 <= v294)
        v301 = v294;
      if (v300 >= 0x511BE1958B67ELL)
        v302 = 0xA237C32B16CFDLL;
      else
        v302 = v301;
      if (v302 > 0xA237C32B16CFDLL)
        sub_1C9724B4C();
      v326 = v288;
      v303 = (char *)operator new(6464 * v302, (std::align_val_t)0x40uLL);
      v304 = &v303[6464 * v297];
      v324 = &v303[6464 * v294];
      v305 = 6464 * v294 - 6464 * v297;
      v306 = v304;
      do
      {
        bzero(v306 + 64, 0x1800uLL);
        *((_QWORD *)v306 + 802) = 0;
        *((_WORD *)v306 + 3212) = 0;
        v306 += 6464;
        v305 -= 6464;
      }
      while (v305);
      v307 = &v303[6464 * v302];
      v308 = *(char **)(v19 + 2096);
      v309 = *(char **)(v19 + 2088);
      if (v308 != v309)
      {
        do
        {
          v308 -= 6464;
          v304 -= 6464;
          memcpy(v304, v308, 0x191CuLL);
        }
        while (v308 != v309);
        v308 = *(char **)(v19 + 2088);
      }
      *(_QWORD *)(v19 + 2088) = v304;
      *(_QWORD *)(v19 + 2096) = v324;
      *(_QWORD *)(v19 + 2104) = v307;
      v288 = v326;
      v289 = v328;
      v291 = v330;
      if (v308)
        MEMORY[0x1CAA43B90](v308, 64);
    }
  }
  v312 = *(_BYTE *)(v19 + 2051);
  if (v312)
  {
    if (v294 > 1 || *(_BYTE *)(v289 + 358))
    {
      if (*(_BYTE *)(*(_QWORD *)(v291 + 32) + 19))
        v312 = 0;
      else
        v312 = *(_BYTE *)(*(_QWORD *)(v291 + 16) + 283) == 0;
      goto LABEL_556;
    }
    *(_BYTE *)(v19 + 2052) = 0;
LABEL_561:
    if (v288)
    {
      dispatch_async_f(*(dispatch_queue_t *)(v19 + 3448), (void *)v19, (dispatch_function_t)sub_1C980D400);
      goto LABEL_563;
    }
    v14 = sub_1C970222C(v19);
  }
  else
  {
LABEL_556:
    *(_BYTE *)(v19 + 2052) = v312;
    if (v294 < 2)
      goto LABEL_561;
    sub_1C974AC70(v19 + 1728, *(_QWORD *)(**(_QWORD **)(v19 + 2064) + 16));
    sub_1C9746DB4((_QWORD *)(v19 + 1744), *(_QWORD *)(*(_QWORD *)(v19 + 2056) + 224), *(_QWORD *)(*(_QWORD *)(v19 + 2056) + 232));
    *(_QWORD *)(v19 + 1760) = v19;
    *(_QWORD *)(v19 + 1768) = sub_1C980D560;
    if (v288)
    {
      *(_DWORD *)(v19 + 1924) = v294;
      *(_QWORD *)(v19 + 1776) = v19;
      *(_QWORD *)(v19 + 1784) = sub_1C980D5BC;
      sub_1C97B9C40(*(_QWORD *)(v19 + 1744), v294, -1, v19 + 1728);
    }
    else
    {
      sub_1C974AFE8(v19 + 1728, v294, -1, v19, (uint64_t)sub_1C980D5BC);
    }
LABEL_563:
    v14 = 0;
  }
LABEL_462:
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 203) = 0;
  return v14;
}

void sub_1C9701CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t v39;
  void *v41;

  v41 = *(void **)(v39 - 184);
  if (v41)
    operator delete(v41);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1C9701D54(_QWORD *a1, int a2, int a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = (char *)operator new(0xC0uLL, (std::align_val_t)0x40uLL, MEMORY[0x1E0DE4E10]);
  if (v6)
  {
    v7 = v6;
    *(_QWORD *)v6 = 850045863;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = v6 + 64;
    *((_QWORD *)v6 + 9) = v6 + 64;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_DWORD *)v6 + 28) = 0;
    *((_DWORD *)v6 + 36) = a2;
    v6[148] = 0;
    *((_QWORD *)v6 + 17) = dispatch_get_global_queue(a3, 0);
    v7[16] = dispatch_group_create();
    v8 = a1;
    v9 = (uint64_t)v7;
  }
  else
  {
    v8 = a1;
    v9 = 0;
  }
  return sub_1C97B9AB0(v8, v9);
}

uint64_t sub_1C9701E00(unsigned int a1, char a2, _WORD *a3)
{
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _WORD *v13;
  double v14;
  uint64_t v15;
  double v16;
  long double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  _WORD *v25;
  double v26;
  double v27;
  uint64_t v28;
  __int16 v29;
  _WORD *v30;
  uint64_t v31;
  unint64_t i;
  double v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _WORD *v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  _WORD *v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  _WORD *v63;
  uint64_t v64;
  double v65;
  _QWORD v66[256];
  uint64_t v67;

  v3 = a3;
  v4 = 0;
  v67 = *MEMORY[0x1E0C80C00];
  v5 = a1 >> 1;
  v6 = (v5 - 1);
  v65 = (double)(int)(16 * a1 - 2) * 0.5;
  v59 = ((16 * a1 - 2) >> 1) + 1;
  v7 = 1 << a2;
  v8 = a1;
  v61 = 16 * a1;
  if ((int)(16 * a1) <= 2)
    v9 = 2;
  else
    v9 = 16 * a1;
  v10 = (v9 - 1);
  v11 = (double)v7;
  v12 = a1 + 1 - 1;
  v13 = a3 + 8;
  v60 = a1 - 1;
  v58 = a1 - 1;
  do
  {
    v63 = v13;
    v64 = v4;
    v14 = (double)dword_1C9860C44[v4] * 0.125;
    bzero(v66, v61);
    v15 = 0;
    do
    {
      v16 = ((double)(int)v15 - v65) * 3.14159265;
      if (v16 == 0.0)
      {
        v18 = 1.0;
      }
      else
      {
        v17 = sin(v14 * (v16 * 0.0625));
        v18 = (v17 / v16 * 16.0 / v14 + v17 / v16 * 16.0 / v14) * (sin(v14 * (v16 * 0.0625 * 0.5)) / v16 * 16.0 / v14);
      }
      *(double *)&v66[++v15] = v18;
    }
    while (v10 != v15);
    v66[v59] = 0x3FF0000000000000;
    v19 = 0.0;
    v20 = 16;
    v21 = v58;
    do
    {
      v19 = v19 + *(double *)&v66[v20];
      v20 += 16;
      --v21;
    }
    while (v21);
    v22 = 16;
    v23 = v3;
    v24 = v58;
    v25 = &a3[128 * v64];
    do
    {
      v26 = *(double *)&v66[v22] * v11 / v19;
      if (v26 <= 0.0)
        v27 = -0.5;
      else
        v27 = 0.5;
      *v23++ = (int)(v26 + v27);
      v22 += 16;
      --v24;
    }
    while (v24);
    v28 = 0;
    v29 = 0;
    v25[v60] = 0;
    do
      v29 += v3[v28++];
    while (v8 != v28);
    v25[v6] += v7 - v29;
    v30 = v63;
    v31 = 120;
    for (i = 1; i != 16; ++i)
    {
      v33 = 0.0;
      v34 = v31;
      v35 = v12;
      do
      {
        v33 = v33 + *(double *)((char *)v66 + v34);
        v34 += 128;
        --v35;
      }
      while (v35);
      v36 = v66;
      v37 = v30;
      v38 = v12;
      do
      {
        v39 = *(double *)&v36[v31] * v11 / v33;
        if (v39 <= 0.0)
          v40 = -0.5;
        else
          v40 = 0.5;
        *v37++ = (int)(v39 + v40);
        v36 += 128;
        --v38;
      }
      while (v38);
      v41 = 0;
      v42 = 0;
      do
      {
        if (v42 <= (__int16)v30[v41])
          v42 = (__int16)v30[v41];
        ++v41;
      }
      while (v8 != v41);
      if (v42 <= 100)
      {
        v52 = 0;
        v49 = 0;
        do
          v49 += (__int16)v30[v52++];
        while (v8 != v52);
        if (i == 8)
        {
          v46 = __OFSUB__(v7, v49);
          v53 = v7 - v49;
          if (v53 < 0 != v46)
            v54 = v53 + 1;
          else
            v54 = v53;
          v49 = v54 >> 1;
          v25[v5 + 64] += v54 >> 1;
          v51 = &v25[v6 + 64];
        }
        else
        {
          LOWORD(v49) = v7 - v49;
          if (i <= 7)
            v51 = &v25[8 * i + v60];
          else
            v51 = &v25[8 * i];
        }
      }
      else
      {
        v43 = 0;
        do
        {
          v30[v43] = (int)(100.0 / (double)v42 * (double)(__int16)v30[v43]);
          ++v43;
        }
        while (v12 != v43);
        v44 = 0;
        v45 = 0;
        do
          v45 += (__int16)v30[v44++];
        while (v8 != v44);
        v46 = __OFSUB__(v7, v45);
        v47 = v7 - v45;
        if (v47 < 0 != v46)
          v48 = v47 + 1;
        else
          v48 = v47;
        v49 = v48 >> 1;
        v50 = &v25[8 * i];
        v50[v5] += v48 >> 1;
        v51 = &v50[v6];
      }
      v55 = 0;
      v56 = 0;
      result = (unsigned __int16)*v51;
      *v51 = result + v49;
      do
        v56 += v30[v55++];
      while (v8 != v55);
      v25[8 * i + v6] += v7 - v56;
      v31 -= 8;
      v30 += 8;
    }
    v4 = v64 + 1;
    v3 += 128;
    v13 = v63 + 128;
  }
  while (v64 != 7);
  return result;
}

uint64_t sub_1C970222C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int i;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;

  v2 = *(_DWORD *)(a1 + 2112);
  if (v2 > 1)
  {
    v3 = *(_QWORD *)(**(_QWORD **)(a1 + 2064) + 16);
    v4 = *(_DWORD *)(v3 + 2124);
    if (v4 >= 1)
    {
      v5 = 0;
      v6 = *(_DWORD *)(v3 + 2120);
      do
      {
        if (v6 >= 1)
        {
          for (i = 0; i != v6; ++i)
          {
            v18 = v5;
            v19 = i;
            v8 = sub_1C980D404(a1, i, v5);
            sub_1C977E400(*(_QWORD *)(*(_QWORD *)(a1 + 2064) + 8 * v8), *(_QWORD *)(a1 + 2120), *(_QWORD **)(a1 + 2088), &v19, &v18);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    goto LABEL_14;
  }
  if (v2 != 1)
  {
LABEL_14:
    sub_1C9710F58(a1, 0);
    return 0;
  }
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 2064) + 8 * v9);
    v11 = *(_QWORD *)(a1 + 2120);
    v12 = *(_QWORD **)(a1 + 2088);
    v13 = *(_DWORD *)(v10 + 52);
    v14 = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 2120);
    v18 = v13 / v14;
    v19 = v13 % v14;
    *(_QWORD *)(v10 + 8) = v11;
    sub_1C971071C(v10, v11);
    if ((_DWORD)v15)
      break;
    while ((sub_1C9702C74(v10, v12, &v19, &v18) & 1) != 0)
      ;
    if (++v9 >= *(int *)(a1 + 2112))
      goto LABEL_14;
  }
  v16 = v15;
  *(_QWORD *)(v10 + 8) = 0;
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("Error starting decode\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Error starting decode\n");
  }
  sub_1C9710F58(a1, v16);
  return v16;
}

void *sub_1C97023B8(int16x4_t *a1, int a2)
{
  int16x4_t *v2;
  unint64_t v4;
  int16x4_t *v5;
  unint64_t v6;
  int16x4_t *v7;
  unint64_t v8;
  void *result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = a1;
  if (a2 <= 16)
  {
    sub_1C970AB50(a1, 0x20u, (uint64_t)&unk_1C9861500);
LABEL_12:
    v8 = -4;
    do
    {
      result = sub_1C970B568(v2, 0x20u, (uint64_t)&unk_1C9861510);
      v8 += 4;
      v2 += 32;
    }
    while (v8 < 0x1C);
    return result;
  }
  if (a2 > 0x30)
  {
    if (a2 >= 0xA1)
    {
      v6 = -4;
      v7 = a1;
      do
      {
        sub_1C970FD18(v7);
        v6 += 4;
        ++v7;
      }
      while (v6 < 0x1C);
    }
    else
    {
      v4 = -4;
      v5 = a1;
      do
      {
        sub_1C970B648(v5, 0x20u, (uint64_t)&unk_1C9861540, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v4 += 4;
        ++v5;
      }
      while (v4 < 0xC);
    }
  }
  else
  {
    sub_1C970AC1C(a1, 0x20u, (uint64_t)&unk_1C9861520, (int16x4_t *)aZzxu);
    sub_1C970AC1C(v2 + 1, 0x20u, (uint64_t)&unk_1C9861520, (int16x4_t *)aZzxu);
  }
  if (a2 <= 32)
    goto LABEL_12;
  if (a2 > 0x50)
  {
    if (a2 >= 0xE1)
    {
      v12 = -4;
      do
      {
        result = sub_1C970FA64(v2);
        v12 += 4;
        v2 += 32;
      }
      while (v12 < 0x1C);
    }
    else
    {
      v11 = -4;
      do
      {
        result = sub_1C970BBBC((int16x8_t *)v2, 0x20u, (uint64_t)&unk_1C9861550, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v11 += 4;
        v2 += 32;
      }
      while (v11 < 0x1C);
    }
  }
  else
  {
    v10 = -4;
    do
    {
      result = sub_1C970A7E0((int16x8_t *)v2, 0x20u, (uint64_t)&unk_1C9861530, (int16x4_t *)aZzxu);
      v10 += 4;
      v2 += 32;
    }
    while (v10 < 0x1C);
  }
  return result;
}

uint64_t sub_1C97025B0(unsigned int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  double *v15;
  unint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  _BOOL4 v21;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t *v32;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t v35;
  _BOOL4 v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = byte_1C98328DA[a1];
  v8 = byte_1C98328DA[a1];
  if (a1 >= 0x12)
  {
    if ((v7 & 0x80000000) == 0)
    {
      v9 = a2[2];
      v10 = a2[3];
      goto LABEL_6;
    }
    v26 = vqtbl1q_s8(*a2, xmmword_1C9832A20[2 * a1 - 35]);
    v24 = vextq_s8(v26, v26, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v26.i64[0];
    v43.i64[1] = v24.i64[0];
    v25 = a2[2];
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      v9 = *a2;
      v10 = a2[1];
LABEL_6:
      v43 = v9;
      v44.i64[0] = v10.i64[0];
      v37 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
      v39 = *(int8x8_t *)v10.i8;
      v11 = v7;
      v12 = a1 > 0x11;
      v13 = a1 < 0x12;
      v44.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      v41 = 4 * a3;
      v42 = 8;
      sub_1C9708A20(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v37);
      v14 = *(&v41 + v12);
      sub_1C9708A20(v8, v8, a1 < 0x12, a3, (double *)((char *)a4 + v14), v37, v39);
      v15 = (double *)((char *)a4 + *(&v41 + v13));
      v16 = (unint64_t)(5 * v11) >> 7;
      v17 = (5 * (_DWORD)v11) & 0x7F;
      v18 = *(int8x8_t *)&v43.i8[8 * v16];
      v19 = *(int8x8_t *)&v43.i8[8 * (v16 + 1)];
      v20 = *(int8x8_t *)&v43.i8[8 * (v16 + 2)];
      if (v17 >= 0x40)
      {
        v18 = vext_s8(v18, v19, 4uLL);
        v19 = vext_s8(v19, v20, 4uLL);
        v20 = vext_s8(v20, *(int8x8_t *)&v43.i8[8 * (v16 + 3)], 4uLL);
        v17 = (v17 - 64);
      }
      v21 = a1 < 0x12;
      sub_1C9708A20(v17, v8, v21, a3, v15, v18, v19);
      return sub_1C9708A20(v17, v8, v21, a3, (double *)((char *)v15 + v14), v19, v20);
    }
    v23 = vqtbl1q_s8(a2[2], xmmword_1C9832A20[2 * (18 - a1) + 1]);
    v24 = vextq_s8(v23, v23, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v23.i64[0];
    v43.i64[1] = v24.i64[0];
    v25 = *a2;
  }
  v44 = v25;
  v38 = (int8x8_t)vextq_s8(v25, v25, 8uLL).u64[0];
  v40 = *(int8x8_t *)v25.i8;
  v27 = a1 > 0x11;
  v28 = a1 < 0x12;
  v41 = 4 * a3;
  v42 = 8;
  sub_1C970A974(v7, v7, v28, a3, a4, *(int8x8_t *)v24.i8, *(int8x8_t *)v25.i8);
  v29 = *(&v41 + v27);
  sub_1C970A974(v7, v7, a1 < 0x12, a3, (double *)((char *)a4 + v29), v40, v38);
  v30 = (double *)((char *)a4 + *(&v41 + v28));
  v31 = (5 * (_DWORD)v7) | 0xFFFFFF80;
  v32 = &v43.i64[((5 * (int)v7) >> 7) + 1];
  v34 = (int8x8_t)v32[2];
  v33 = (int8x8_t)v32[3];
  v35 = (int8x8_t)v32[1];
  if (v31 <= 0xFFFFFFBF)
  {
    v33 = vext_s8(v34, v33, 4uLL);
    v34 = vext_s8(v35, v34, 4uLL);
    v35 = vext_s8((int8x8_t)v43.u64[((uint64_t)(5 * (int)v7) >> 7) + 1], v35, 4uLL);
    v31 = (v31 + 64);
  }
  v36 = a1 < 0x12;
  sub_1C970A974(v31, v7, v36, a3, v30, v35, v34);
  return sub_1C970A974(v31, v7, v36, a3, (double *)((char *)v30 + v29), v34, v33);
}

uint64_t sub_1C97028DC(unsigned int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  double *v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int8x8_t v29;
  int8x8_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  double *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  uint64_t v48;
  unsigned int v49;
  _BOOL4 v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v7 = byte_1C98328DA[a1];
  v8 = byte_1C98328DA[a1];
  v59 = 0;
  if (a1 >= 0x12)
  {
    if ((v7 & 0x80000000) == 0)
    {
      v9 = a2[2];
      v10 = a2[3];
      goto LABEL_6;
    }
    v37 = vqtbl1q_s8(*a2, *(int8x16_t *)qword_1C9832900[4 * a1 - 70].i8);
    v35 = vextq_s8(v37, v37, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v57.i64[0] = v37.i64[0];
    v57.i64[1] = v35.i64[0];
    v36 = a2[2];
LABEL_20:
    v58 = v36;
    v52 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
    v54 = *(int8x8_t *)v36.i8;
    v38 = a1 > 0x11;
    v39 = a1 < 0x12;
    v55 = 8 * a3;
    v56 = 8;
    sub_1C970C1E8(v7, v7, v39, a3, a4, *(int8x8_t *)v35.i8, *(int8x8_t *)v36.i8);
    v40 = *(&v55 + v38);
    sub_1C970C1E8(v7, v7, a1 < 0x12, a3, (double *)((char *)a4 + v40), v54, v52);
    v41 = (double *)((char *)a4 + *(&v55 + v39));
    v42 = 9 * v7;
    v43 = (9 * (_DWORD)v7) | 0xFFFFFF00;
    v44 = &v57.i64[((9 * (int)v7) >> 8) + 1];
    v46 = (int8x8_t)v44[2];
    v45 = (int8x8_t)v44[3];
    v47 = (int8x8_t)v44[1];
    if (v43 <= 0xFFFFFFBF)
    {
      v48 = v57.i64[((uint64_t)v42 >> 8) + 1];
      if (v43 > 0xFFFFFF7F)
      {
        v49 = v42 | 0xFFFFFF00;
      }
      else
      {
        v45 = vext_s8(v46, v45, 4uLL);
        v46 = vext_s8(v47, v46, 4uLL);
        v47 = vext_s8((int8x8_t)v48, v47, 4uLL);
        v49 = v43 + 128;
        if (v43 > 0xFFFFFF3F)
        {
          v43 = (v43 + 128);
          goto LABEL_27;
        }
        v48 = vshld_n_s64(v48, 0x20uLL);
      }
      v45 = vext_s8(v46, v45, 6uLL);
      v46 = vext_s8(v47, v46, 6uLL);
      v47 = vext_s8((int8x8_t)v48, v47, 6uLL);
      v43 = v49 + 64;
    }
LABEL_27:
    v50 = a1 < 0x12;
    sub_1C970C1E8(v43, v7, v50, a3, v41, v47, v46);
    return sub_1C970C1E8(v43, v7, v50, a3, (double *)((char *)v41 + v40), v46, v45);
  }
  if ((v8 & 0x80) != 0)
  {
    v34 = vqtbl1q_s8(a2[2], *(int8x16_t *)qword_1C9832900[4 * (18 - a1) + 2].i8);
    v35 = vextq_s8(v34, v34, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v57.i64[0] = v34.i64[0];
    v57.i64[1] = v35.i64[0];
    v36 = *a2;
    goto LABEL_20;
  }
  v9 = *a2;
  v10 = a2[1];
LABEL_6:
  v57 = v9;
  v58.i64[0] = v10.i64[0];
  v51 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
  v53 = *(int8x8_t *)v10.i8;
  v11 = v7;
  v12 = a1 > 0x11;
  v13 = a1 < 0x12;
  v58.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
  v55 = 8 * a3;
  v56 = 8;
  sub_1C9708E28(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v51);
  v14 = *(&v55 + v12);
  sub_1C9708E28(v8, v8, a1 < 0x12, a3, (double *)((char *)a4 + v14), v51, v53);
  v15 = (double *)((char *)a4 + *(&v55 + v13));
  v16 = (unint64_t)(9 * v11) >> 8;
  v17 = *(double *)&v57.i64[v16];
  v18 = *(double *)&v57.i64[(v16 + 1)];
  v19 = *(double *)&v57.i64[(v16 + 2)];
  v20 = (9 * v11);
  v21 = v57.u64[(v16 + 3)];
  v22 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 4uLL));
  v23 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 4uLL));
  v24 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 4uLL));
  v25 = COERCE_DOUBLE(vshrd_n_u64(v21, 0x20uLL));
  if (v20 >= 0x80)
  {
    v19 = v24;
    v18 = v23;
    v17 = v22;
    *(double *)&v21 = v25;
    v20 -= 128;
  }
  v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 2uLL));
  v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 2uLL));
  v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 2uLL));
  if (v20 >= 0x40)
    *(double *)&v29 = v28;
  else
    *(double *)&v29 = v19;
  if (v20 >= 0x40)
    *(double *)&v30 = v27;
  else
    *(double *)&v30 = v18;
  if (v20 < 0x40)
  {
    v31 = v20;
  }
  else
  {
    v17 = v26;
    v31 = v20 - 64;
  }
  v32 = a1 < 0x12;
  sub_1C9708E28(v31, v8, v32, a3, v15, *(int8x8_t *)&v17, v30);
  return sub_1C9708E28(v31, v8, v32, a3, (double *)((char *)v15 + v14), v30, v29);
}

uint64_t sub_1C9702C74(uint64_t a1, _QWORD *a2, int *a3, int *a4)
{
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t (*v26)(uint64_t, uint64_t, int8x8_t, uint64_t, int, int);
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, int, int, int8x8_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  _DWORD *v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned __int8 v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned __int8 v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned __int8 v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int j;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  __int128 v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int i;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned __int8 v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  char v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int m;
  BOOL v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int *v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  char v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int n;
  BOOL v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int *v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  unsigned int k;
  BOOL v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  uint64_t v248;
  _BYTE *v249;
  int v250;
  uint64_t v251;
  unint64_t v252;
  unsigned int v253;
  _QWORD *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  BOOL v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  void (*v273)(_QWORD *, uint64_t);
  _QWORD *v274;
  int v275;
  int v276;
  uint64_t v277;
  int v278;
  int v279;
  BOOL v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  void (*v284)(_QWORD *, uint64_t, unsigned int *);
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  int v299;
  uint64_t v300;
  unint64_t v302;
  unint64_t v303;
  unsigned int v304;
  unsigned int v305;
  __int16 v306;
  __int16 v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  _BOOL4 v314;
  int v315;
  uint64_t v316;
  int v318;
  _DWORD *v319;
  int v320;
  __int16 v321;
  uint64_t v322;
  int *v323;
  unsigned int v324;
  _DWORD v325[4];

  if (*(_BYTE *)(*(_QWORD *)(a1 + 1576) + 33))
    v7 = *(_BYTE *)(*(_QWORD *)(a1 + 1568) + 52) != 0;
  else
    v7 = 0;
  v8 = *a3;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(v9 + 1744);
  if (v10 <= *a3)
    return 0;
  v11 = *a4;
  v12 = *(_DWORD *)(v9 + 1748);
  if (v12 <= *a4)
    return 0;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_BYTE *)(v13 + 2113);
  v15 = *(unsigned __int8 *)(v9 + 1752);
  if (*(_BYTE *)(v9 + 1752))
  {
    v16 = (int *)(*(_QWORD *)(v9 + 1696) + 12 * v8);
    v15 = *v16;
    v17 = v16[1];
    v10 = v16[2];
    v18 = (int *)(*(_QWORD *)(v9 + 1720) + 12 * v11);
    v20 = *v18;
    v19 = v18[1];
    v12 = v18[2];
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v17 = 0;
  }
  v21 = *(_DWORD *)(a1 + 568);
  if (v21 < 1)
    goto LABEL_16;
  if (*(_BYTE *)(v9 + 20))
  {
    v22 = v15 - *(_DWORD *)(a1 + 2316) + *(_DWORD *)(a1 + 2328);
    if (v22 < 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(v9 + 21))
  {
LABEL_16:
    v22 = 0;
    goto LABEL_17;
  }
  v22 = v11 - *(_DWORD *)(a1 + 52) / *(_DWORD *)(v13 + 2120);
  if (v22 < 0)
  {
LABEL_18:
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Calculated substream index %d for CTB %dx%d is out of bounds (0, %d)\n", v22, v8, *a4, v21 + 1);
      syslog(27, "Calculated substream index %d for CTB %dx%d is out of bounds (0, %d)\n", v22, *a3, *a4, *(_DWORD *)(a1 + 568) + 1);
    }
    return 0;
  }
LABEL_17:
  if (v22 > v21)
    goto LABEL_18;
  v23 = *(_QWORD *)(a1 + 2352) + 224 * v22;
  a2[4] = a1;
  a2[5] = v23;
  a2[800] = *(&off_1E8291DE0 + 2 * *(unsigned __int8 *)(v13 + 2148));
  a2[801] = 0;
  v24 = *(unsigned __int8 *)(v13 + 408);
  v25 = v24 == 0;
  if (v24)
    v26 = sub_1C97779C0;
  else
    v26 = sub_1C97077C0;
  v27 = sub_1C97783E0;
  if (v25)
    v27 = sub_1C9709284;
  a2[796] = v26;
  a2[797] = 0;
  a2[798] = v27;
  a2[799] = 0;
  v28 = *(_QWORD *)(a1 + 1184);
  v29 = *(_QWORD *)(a1 + 32);
  v30 = *(unsigned __int8 *)(v29 + 20);
  v314 = v7;
  v318 = v12;
  v315 = v22;
  if (*(_BYTE *)(v29 + 20))
  {
    v31 = (_DWORD *)(v28 + 4 * (v20 + v20 * *(unsigned __int16 *)(v29 + 22) + v15));
    v32 = *a3;
    if (!*(_BYTE *)(v29 + 21))
    {
      v319 = v31;
LABEL_36:
      v42 = *a4;
      goto LABEL_37;
    }
  }
  else
  {
    if (!*(_BYTE *)(v29 + 21))
    {
      v319 = *(_DWORD **)(a1 + 1184);
      v30 = 0;
LABEL_35:
      v32 = *a3;
      goto LABEL_36;
    }
    v31 = (_DWORD *)(v28 + 4 * *a4);
    v32 = *a3;
  }
  v319 = v31;
  if (v32)
    goto LABEL_36;
  if (*a4)
  {
    if (!*(_BYTE *)(a1 + 1385))
    {
      v32 = 0;
      goto LABEL_36;
    }
    v33 = *(_OWORD *)(a1 + 1208);
    v34 = *(_OWORD *)(a1 + 1224);
    v35 = *(_OWORD *)(a1 + 1240);
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a1 + 1256);
    *(_OWORD *)(v23 + 72) = v35;
    *(_OWORD *)(v23 + 56) = v34;
    *(_OWORD *)(v23 + 40) = v33;
    v36 = *(_OWORD *)(a1 + 1272);
    v37 = *(_OWORD *)(a1 + 1288);
    v38 = *(_OWORD *)(a1 + 1304);
    *(_OWORD *)(v23 + 152) = *(_OWORD *)(a1 + 1320);
    *(_OWORD *)(v23 + 136) = v38;
    *(_OWORD *)(v23 + 120) = v37;
    *(_OWORD *)(v23 + 104) = v36;
    v39 = *(_OWORD *)(a1 + 1336);
    v40 = *(_OWORD *)(a1 + 1352);
    v41 = *(_OWORD *)(a1 + 1368);
    *(_BYTE *)(v23 + 216) = *(_BYTE *)(a1 + 1384);
    *(_OWORD *)(v23 + 200) = v41;
    *(_OWORD *)(v23 + 184) = v40;
    *(_OWORD *)(v23 + 168) = v39;
    v29 = *(_QWORD *)(a1 + 32);
    v30 = *(unsigned __int8 *)(v29 + 20);
    goto LABEL_35;
  }
  v42 = 0;
  v32 = 0;
LABEL_37:
  v316 = (v8 << v14);
  v322 = (v11 << v14);
  v43 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2120);
  v44 = v32 + v43 * (v42 - 1);
  v45 = v44 + 1;
  v46 = *(_DWORD *)(a1 + 648);
  if (v32 != 0 && v32 + v43 * v42 > v46)
    v47 = 240;
  else
    v47 = 0;
  if (v44 >= v46)
    v47 |= 0x1E00u;
  if (v32 != 0 && v44 > v46)
    v47 |= 0x100u;
  v48 = v47 | 0x1E000;
  if (v32 + 1 >= v43)
    v48 = v47;
  if (v45 < v46)
    v48 = v47;
  v323 = a4;
  if (!v30)
  {
    v51 = v319;
    goto LABEL_66;
  }
  v308 = v19;
  v311 = v17;
  v320 = v48;
  v49 = sub_1C9750C28(v29 + 1648, v46 % v43, v46 / v43);
  if (v32)
  {
    if ((int)sub_1C9750C28(*(_QWORD *)(a1 + 32) + 1648, v32 - 1, v42) >= v49)
      v50 = 240;
    else
      v50 = 0;
    if (!v42)
      goto LABEL_65;
LABEL_57:
    if ((int)sub_1C9750C28(*(_QWORD *)(a1 + 32) + 1648, v32, v42 - 1) >= v49)
      v50 |= 0x1E00u;
    if (v32 && (int)sub_1C9750C28(*(_QWORD *)(a1 + 32) + 1648, v32 - 1, v42 - 1) >= v49)
      v50 |= 0x100u;
    if (v32 + 1 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2120)
      && (int)sub_1C9750C28(*(_QWORD *)(a1 + 32) + 1648, v32 + 1, v42 - 1) >= v49)
    {
      v50 |= 0x1E000u;
    }
    goto LABEL_65;
  }
  v50 = 0;
  if (v42)
    goto LABEL_57;
LABEL_65:
  v51 = v319;
  v17 = v311;
  v19 = v308;
  v48 = v50 & v320;
  v32 = *a3;
  v42 = *v323;
  v29 = *(_QWORD *)(a1 + 32);
  v43 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2120);
LABEL_66:
  if (v17 == v32)
    v52 = 130560;
  else
    v52 = 131056;
  if (v19 == v42)
    v52 &= 0xF0u;
  if (v10 - 1 == v32)
    v53 = v52 & 0x1FF0;
  else
    v53 = v52;
  v321 = v48;
  v54 = v53 & v48;
  memset(v325, 0, 5);
  LOBYTE(v325[0]) = *v51;
  BYTE1(v325[0]) = *(_BYTE *)(v29 + 12);
  BYTE2(v325[0]) = *(_BYTE *)(a1 + 562);
  v55 = v32 + v43 * v42;
  v56 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1000);
  v57 = (_QWORD *)(v56 + 16 * v55);
  *v57 = 0;
  v57[1] = 0;
  if (*(_BYTE *)(a1 + 512) || *(_BYTE *)(a1 + 513))
  {
    if ((v53 & v48 & 0xF0) == 0)
      goto LABEL_328;
    v58 = *(unsigned __int8 *)(v23 + 40);
    v60 = *(_QWORD *)v23;
    v59 = *(_QWORD *)(v23 + 8);
    v61 = byte_1C98326D3[(v59 & 0xC0) + (v58 >> 1)];
    LODWORD(v62) = v59 - v61;
    if (*(_QWORD *)v23 < (unint64_t)((v59 - v61) << 55))
      v62 = v62;
    else
      v62 = byte_1C98326D3[(v59 & 0xC0) + (v58 >> 1)];
    if (*(_QWORD *)v23 < (unint64_t)((v59 - v61) << 55))
    {
      v63 = 0;
    }
    else
    {
      v60 = *(_QWORD *)v23 - ((v59 - v61) << 55);
      v63 = 1;
    }
    if (*(_QWORD *)v23 < (unint64_t)((v59 - v61) << 55))
      v64 = *(_BYTE *)(v23 + 40);
    else
      v64 = v58 + 1;
    v65 = byte_1C98326D3[2 * v58 + 256 + v63];
    v66 = __clz(v62) - 55;
    v67 = v60 << v66;
    *(_QWORD *)(v23 + 8) = v62 << v66;
    *(_BYTE *)(v23 + 40) = v65;
    v68 = *(_QWORD *)(v23 + 16) + v66;
    if (v68 >= 0)
    {
      v69 = *(unsigned int **)(v23 + 24);
      v71 = *v69;
      v70 = v69 + 1;
      v67 += (unint64_t)bswap32(v71) << v68;
      v68 -= 32;
      if ((unint64_t)v70 >= *(_QWORD *)(v23 + 32))
        v70 = *(unsigned int **)(v23 + 32);
      *(_QWORD *)(v23 + 24) = v70;
    }
    *(_QWORD *)(v23 + 16) = v68;
    *(_QWORD *)v23 = v67;
    if ((v64 & 1) != 0)
    {
      v140 = *((_OWORD *)v57 - 1);
    }
    else
    {
LABEL_328:
      if ((v54 & 0x1E00) == 0)
        goto LABEL_106;
      v72 = *(unsigned __int8 *)(v23 + 40);
      v74 = *(_QWORD *)v23;
      v73 = *(_QWORD *)(v23 + 8);
      v75 = byte_1C98326D3[(v73 & 0xC0) + (v72 >> 1)];
      LODWORD(v76) = v73 - v75;
      if (*(_QWORD *)v23 < (unint64_t)((v73 - v75) << 55))
        v76 = v76;
      else
        v76 = byte_1C98326D3[(v73 & 0xC0) + (v72 >> 1)];
      if (*(_QWORD *)v23 < (unint64_t)((v73 - v75) << 55))
      {
        v77 = 0;
      }
      else
      {
        v74 = *(_QWORD *)v23 - ((v73 - v75) << 55);
        v77 = 1;
      }
      if (*(_QWORD *)v23 < (unint64_t)((v73 - v75) << 55))
        v78 = *(_BYTE *)(v23 + 40);
      else
        v78 = v72 + 1;
      v79 = byte_1C98326D3[2 * v72 + 256 + v77];
      v80 = __clz(v76) - 55;
      v81 = v74 << v80;
      *(_QWORD *)(v23 + 8) = v76 << v80;
      *(_BYTE *)(v23 + 40) = v79;
      v82 = *(_QWORD *)(v23 + 16) + v80;
      if (v82 >= 0)
      {
        v83 = *(unsigned int **)(v23 + 24);
        v85 = *v83;
        v84 = v83 + 1;
        v81 += (unint64_t)bswap32(v85) << v82;
        v82 -= 32;
        if ((unint64_t)v84 >= *(_QWORD *)(v23 + 32))
          v84 = *(unsigned int **)(v23 + 32);
        *(_QWORD *)(v23 + 24) = v84;
      }
      *(_QWORD *)(v23 + 16) = v82;
      *(_QWORD *)v23 = v81;
      if ((v78 & 1) == 0)
      {
LABEL_106:
        v86 = v55;
        if (*(_BYTE *)(a1 + 512))
        {
          v87 = *(unsigned __int8 *)(v23 + 41);
          v89 = *(_QWORD *)v23;
          v88 = *(_QWORD *)(v23 + 8);
          v90 = byte_1C98326D3[(v88 & 0xC0) + (v87 >> 1)];
          LODWORD(v91) = v88 - v90;
          if (*(_QWORD *)v23 < (unint64_t)((v88 - v90) << 55))
            v91 = v91;
          else
            v91 = byte_1C98326D3[(v88 & 0xC0) + (v87 >> 1)];
          if (*(_QWORD *)v23 < (unint64_t)((v88 - v90) << 55))
          {
            v92 = 0;
          }
          else
          {
            v89 = *(_QWORD *)v23 - ((v88 - v90) << 55);
            v92 = 1;
          }
          if (*(_QWORD *)v23 < (unint64_t)((v88 - v90) << 55))
            v93 = *(_BYTE *)(v23 + 41);
          else
            v93 = v87 + 1;
          v94 = byte_1C98326D3[2 * v87 + 256 + v92];
          v95 = __clz(v91) - 55;
          v96 = v89 << v95;
          *(_QWORD *)(v23 + 8) = v91 << v95;
          *(_BYTE *)(v23 + 41) = v94;
          v97 = *(_QWORD *)(v23 + 16) + v95;
          if (v97 >= 0)
          {
            v98 = *(unsigned int **)(v23 + 24);
            v100 = *v98;
            v99 = v98 + 1;
            v96 += (unint64_t)bswap32(v100) << v97;
            v97 -= 32;
            if ((unint64_t)v99 >= *(_QWORD *)(v23 + 32))
              v99 = *(unsigned int **)(v23 + 32);
            *(_QWORD *)(v23 + 24) = v99;
          }
          *(_QWORD *)(v23 + 16) = v97;
          *(_QWORD *)v23 = v96;
          if ((v93 & 1) != 0)
          {
            v101 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2280) + 1294);
            *(_BYTE *)v57 |= 1u;
            v103 = *(_QWORD *)v23;
            v102 = *(_QWORD *)(v23 + 8);
            v104 = v102 << 54;
            if (*(_QWORD *)v23 >= (unint64_t)(v102 << 54))
              v105 = v102 << 54;
            else
              v105 = 0;
            v106 = 2 * (v103 - v105);
            v107 = *(_QWORD *)(v23 + 16);
            v108 = v107 + 1;
            v304 = v54;
            v306 = v53;
            v302 = v104;
            if (v107 >= -1)
            {
              v109 = *(unsigned int **)(v23 + 24);
              v111 = *v109;
              v110 = v109 + 1;
              v106 += (unint64_t)bswap32(v111) << v108;
              v108 = v107 - 31;
              if ((unint64_t)v110 >= *(_QWORD *)(v23 + 32))
                v112 = *(unsigned int **)(v23 + 32);
              else
                v112 = v110;
              *(_QWORD *)(v23 + 24) = v112;
            }
            v113 = 0;
            *(_QWORD *)(v23 + 16) = v108;
            *(_QWORD *)v23 = v106;
            v114 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1632);
            v309 = v86;
            v312 = v56;
            v115 = v56 + 16 * v86 + 1;
            do
              *(_BYTE *)(v115 + v113++) = sub_1C970A500((unint64_t *)v23, v101) << v114;
            while (v113 != 4);
            if (v103 >= v302)
            {
              v141 = 0;
              v142 = *(_QWORD *)v23;
              v143 = *(_QWORD *)(v23 + 8) << 54;
              for (i = 3; i > 1; --i)
              {
                v145 = v142 >= v143;
                if (v142 < v143)
                  v146 = 0;
                else
                  v146 = *(_QWORD *)(v23 + 8) << 54;
                v142 = 2 * (v142 - v146);
                v141 = v145 | (2 * v141);
              }
              v147 = *(_QWORD *)(v23 + 16);
              v148 = v147 + 2;
              v51 = v319;
              v54 = v304;
              LOWORD(v53) = v306;
              v86 = v309;
              v56 = v312;
              if (v147 >= -2)
              {
                v149 = *(unsigned int **)(v23 + 24);
                v151 = *v149;
                v150 = v149 + 1;
                v142 += (unint64_t)bswap32(v151) << v148;
                v148 = v147 - 30;
                if ((unint64_t)v150 >= *(_QWORD *)(v23 + 32))
                  v152 = *(unsigned int **)(v23 + 32);
                else
                  v152 = v150;
                *(_QWORD *)(v23 + 24) = v152;
              }
              *(_QWORD *)(v23 + 16) = v148;
              *(_QWORD *)v23 = v142;
              *(_BYTE *)v57 = *(_BYTE *)v57 & 0xF1 | (2 * (v141 & 7));
              v153 = v312 + 16 * v309;
              *(_BYTE *)(v153 + 3) = -*(_BYTE *)(v153 + 3);
              *(_BYTE *)(v153 + 4) = -*(_BYTE *)(v153 + 4);
            }
            else
            {
              v116 = 0;
              *(_BYTE *)v57 = *(_BYTE *)v57 & 0xF1 | 8;
              v54 = v304;
              LOWORD(v53) = v306;
              v86 = v309;
              v56 = v312;
              do
              {
                if (*(_BYTE *)(v115 + v116))
                {
                  v117 = *(_QWORD *)v23;
                  v118 = *(_QWORD *)(v23 + 8);
                  v119 = v118 << 54;
                  if (*(_QWORD *)v23 >= (unint64_t)(v118 << 54))
                    v120 = v118 << 54;
                  else
                    v120 = 0;
                  v121 = 2 * (v117 - v120);
                  v122 = *(_QWORD *)(v23 + 16);
                  v123 = v122 + 1;
                  if (v122 >= -1)
                  {
                    v124 = *(unsigned int **)(v23 + 24);
                    v126 = *v124;
                    v125 = v124 + 1;
                    v121 += (unint64_t)bswap32(v126) << v123;
                    v123 = v122 - 31;
                    if ((unint64_t)v125 >= *(_QWORD *)(v23 + 32))
                      v127 = *(unsigned int **)(v23 + 32);
                    else
                      v127 = v125;
                    *(_QWORD *)(v23 + 24) = v127;
                  }
                  *(_QWORD *)(v23 + 16) = v123;
                  *(_QWORD *)v23 = v121;
                  if (v117 >= v119)
                    *(_BYTE *)(v115 + v116) = -*(_BYTE *)(v115 + v116);
                }
                ++v116;
              }
              while (v116 != 4);
              v128 = 0;
              v129 = *(_QWORD *)v23;
              v130 = *(_QWORD *)(v23 + 8) << 54;
              for (j = 6; j > 1; --j)
              {
                v132 = v129 >= v130;
                if (v129 < v130)
                  v133 = 0;
                else
                  v133 = *(_QWORD *)(v23 + 8) << 54;
                v129 = 2 * (v129 - v133);
                v128 = v132 | (2 * v128);
              }
              v134 = *(_QWORD *)(v23 + 16);
              v135 = v134 + 5;
              v51 = v319;
              if (v134 >= -5)
              {
                v136 = *(unsigned int **)(v23 + 24);
                v138 = *v136;
                v137 = v136 + 1;
                v129 += (unint64_t)bswap32(v138) << v135;
                v135 = v134 - 27;
                if ((unint64_t)v137 >= *(_QWORD *)(v23 + 32))
                  v139 = *(unsigned int **)(v23 + 32);
                else
                  v139 = v137;
                *(_QWORD *)(v23 + 24) = v139;
              }
              *(_QWORD *)(v23 + 16) = v135;
              *(_QWORD *)v23 = v129;
              *(_BYTE *)(v312 + 16 * v309 + 13) = v128;
            }
          }
        }
        if (*(_BYTE *)(a1 + 513))
        {
          v154 = *(unsigned __int8 *)(v23 + 41);
          v156 = *(_QWORD *)v23;
          v155 = *(_QWORD *)(v23 + 8);
          v157 = byte_1C98326D3[(v155 & 0xC0) + (v154 >> 1)];
          LODWORD(v158) = v155 - v157;
          if (*(_QWORD *)v23 < (unint64_t)((v155 - v157) << 55))
            v158 = v158;
          else
            v158 = byte_1C98326D3[(v155 & 0xC0) + (v154 >> 1)];
          if (*(_QWORD *)v23 < (unint64_t)((v155 - v157) << 55))
          {
            v159 = 0;
          }
          else
          {
            v156 = *(_QWORD *)v23 - ((v155 - v157) << 55);
            v159 = 1;
          }
          if (*(_QWORD *)v23 < (unint64_t)((v155 - v157) << 55))
            v160 = *(_BYTE *)(v23 + 41);
          else
            v160 = v154 + 1;
          v161 = byte_1C98326D3[2 * v154 + 256 + v159];
          v162 = __clz(v158) - 55;
          v163 = v156 << v162;
          *(_QWORD *)(v23 + 8) = v158 << v162;
          *(_BYTE *)(v23 + 41) = v161;
          v164 = *(_QWORD *)(v23 + 16) + v162;
          if (v164 >= 0)
          {
            v165 = *(unsigned int **)(v23 + 24);
            v167 = *v165;
            v166 = v165 + 1;
            v163 += (unint64_t)bswap32(v167) << v164;
            v164 -= 32;
            if ((unint64_t)v166 >= *(_QWORD *)(v23 + 32))
              v166 = *(unsigned int **)(v23 + 32);
            *(_QWORD *)(v23 + 24) = v166;
          }
          *(_QWORD *)(v23 + 16) = v164;
          *(_QWORD *)v23 = v163;
          if ((v160 & 1) != 0)
          {
            v168 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2280) + 1295);
            *(_BYTE *)v57 |= 0x10u;
            v170 = *(_QWORD *)v23;
            v169 = *(_QWORD *)(v23 + 8);
            v171 = v169 << 54;
            if (*(_QWORD *)v23 >= (unint64_t)(v169 << 54))
              v172 = v169 << 54;
            else
              v172 = 0;
            v173 = 2 * (v170 - v172);
            v174 = *(_QWORD *)(v23 + 16);
            v175 = v174 + 1;
            v305 = v54;
            v307 = v53;
            v303 = v171;
            if (v174 >= -1)
            {
              v176 = *(unsigned int **)(v23 + 24);
              v178 = *v176;
              v177 = v176 + 1;
              v173 += (unint64_t)bswap32(v178) << v175;
              v175 = v174 - 31;
              if ((unint64_t)v177 >= *(_QWORD *)(v23 + 32))
                v179 = *(unsigned int **)(v23 + 32);
              else
                v179 = v177;
              *(_QWORD *)(v23 + 24) = v179;
            }
            v180 = 0;
            *(_QWORD *)(v23 + 16) = v175;
            *(_QWORD *)v23 = v173;
            v181 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1633);
            v310 = v86;
            v313 = v56;
            v182 = v56 + 16 * v86 + 5;
            do
              *(_BYTE *)(v182 + v180++) = sub_1C970A500((unint64_t *)v23, v168) << v181;
            while (v180 != 4);
            if (v170 >= v303)
            {
              v236 = 0;
              v237 = *(_QWORD *)v23;
              v238 = *(_QWORD *)(v23 + 8) << 54;
              for (k = 3; k > 1; --k)
              {
                v240 = v237 >= v238;
                if (v237 < v238)
                  v241 = 0;
                else
                  v241 = *(_QWORD *)(v23 + 8) << 54;
                v237 = 2 * (v237 - v241);
                v236 = v240 | (2 * v236);
              }
              v242 = *(_QWORD *)(v23 + 16);
              v243 = v242 + 2;
              LOWORD(v53) = v307;
              if (v242 >= -2)
              {
                v244 = *(unsigned int **)(v23 + 24);
                v246 = *v244;
                v245 = v244 + 1;
                v237 += (unint64_t)bswap32(v246) << v243;
                v243 = v242 - 30;
                if ((unint64_t)v245 >= *(_QWORD *)(v23 + 32))
                  v247 = *(unsigned int **)(v23 + 32);
                else
                  v247 = v245;
                *(_QWORD *)(v23 + 24) = v247;
              }
              v248 = 0;
              *(_QWORD *)(v23 + 16) = v243;
              *(_QWORD *)v23 = v237;
              *(_BYTE *)v57 = *(_BYTE *)v57 & 0x1F | (32 * v236);
              do
                *(_BYTE *)(v313 + 16 * v310 + 9 + v248++) = sub_1C970A500((unint64_t *)v23, v168) << v181;
              while (v248 != 4);
              v249 = (_BYTE *)(v313 + 16 * v310);
              v249[7] = -v249[7];
              v249[8] = -v249[8];
              v249[11] = -v249[11];
              v249[12] = -v249[12];
              v51 = v319;
              v54 = v305;
            }
            else
            {
              v183 = 0;
              *(_BYTE *)v57 = *(_BYTE *)v57 & 0x1F | 0x80;
              v184 = v313 + 16 * v310 + 5;
              do
              {
                if (*(_BYTE *)(v184 + v183))
                {
                  v185 = *(_QWORD *)v23;
                  v186 = *(_QWORD *)(v23 + 8);
                  v187 = v186 << 54;
                  if (*(_QWORD *)v23 >= (unint64_t)(v186 << 54))
                    v188 = v186 << 54;
                  else
                    v188 = 0;
                  v189 = 2 * (v185 - v188);
                  v190 = *(_QWORD *)(v23 + 16);
                  v191 = v190 + 1;
                  if (v190 >= -1)
                  {
                    v192 = *(unsigned int **)(v23 + 24);
                    v194 = *v192;
                    v193 = v192 + 1;
                    v189 += (unint64_t)bswap32(v194) << v191;
                    v191 = v190 - 31;
                    if ((unint64_t)v193 >= *(_QWORD *)(v23 + 32))
                      v195 = *(unsigned int **)(v23 + 32);
                    else
                      v195 = v193;
                    *(_QWORD *)(v23 + 24) = v195;
                  }
                  *(_QWORD *)(v23 + 16) = v191;
                  *(_QWORD *)v23 = v189;
                  if (v185 >= v187)
                    *(_BYTE *)(v184 + v183) = -*(_BYTE *)(v184 + v183);
                }
                ++v183;
              }
              while (v183 != 4);
              v196 = 0;
              v197 = *(_QWORD *)v23;
              v198 = *(_QWORD *)(v23 + 8) << 54;
              for (m = 6; m > 1; --m)
              {
                v200 = v197 >= v198;
                if (v197 < v198)
                  v201 = 0;
                else
                  v201 = *(_QWORD *)(v23 + 8) << 54;
                v197 = 2 * (v197 - v201);
                v196 = v200 | (2 * v196);
              }
              v202 = v313 + 16 * v310;
              v203 = *(_QWORD *)(v23 + 16);
              v204 = v203 + 5;
              LOWORD(v53) = v307;
              if (v203 >= -5)
              {
                v205 = *(unsigned int **)(v23 + 24);
                v207 = *v205;
                v206 = v205 + 1;
                v197 += (unint64_t)bswap32(v207) << v204;
                v204 = v203 - 27;
                if ((unint64_t)v206 >= *(_QWORD *)(v23 + 32))
                  v208 = *(unsigned int **)(v23 + 32);
                else
                  v208 = v206;
                *(_QWORD *)(v23 + 24) = v208;
              }
              v209 = 0;
              *(_QWORD *)(v23 + 16) = v204;
              *(_QWORD *)v23 = v197;
              v210 = v202 + 9;
              *(_BYTE *)(v202 + 14) = v196;
              do
                *(_BYTE *)(v210 + v209++) = sub_1C970A500((unint64_t *)v23, v168) << v181;
              while (v209 != 4);
              v211 = 0;
              v212 = v313 + 16 * v310 + 9;
              v51 = v319;
              v54 = v305;
              do
              {
                if (*(_BYTE *)(v212 + v211))
                {
                  v213 = *(_QWORD *)v23;
                  v214 = *(_QWORD *)(v23 + 8);
                  v215 = v214 << 54;
                  if (*(_QWORD *)v23 >= (unint64_t)(v214 << 54))
                    v216 = v214 << 54;
                  else
                    v216 = 0;
                  v217 = 2 * (v213 - v216);
                  v218 = *(_QWORD *)(v23 + 16);
                  v219 = v218 + 1;
                  if (v218 >= -1)
                  {
                    v220 = *(unsigned int **)(v23 + 24);
                    v222 = *v220;
                    v221 = v220 + 1;
                    v217 += (unint64_t)bswap32(v222) << v219;
                    v219 = v218 - 31;
                    if ((unint64_t)v221 >= *(_QWORD *)(v23 + 32))
                      v223 = *(unsigned int **)(v23 + 32);
                    else
                      v223 = v221;
                    *(_QWORD *)(v23 + 24) = v223;
                  }
                  *(_QWORD *)(v23 + 16) = v219;
                  *(_QWORD *)v23 = v217;
                  if (v213 >= v215)
                    *(_BYTE *)(v212 + v211) = -*(_BYTE *)(v212 + v211);
                }
                ++v211;
              }
              while (v211 != 4);
              v224 = 0;
              v225 = *(_QWORD *)v23;
              v226 = *(_QWORD *)(v23 + 8) << 54;
              for (n = 6; n > 1; --n)
              {
                v228 = v225 >= v226;
                if (v225 < v226)
                  v229 = 0;
                else
                  v229 = *(_QWORD *)(v23 + 8) << 54;
                v225 = 2 * (v225 - v229);
                v224 = v228 | (2 * v224);
              }
              v230 = *(_QWORD *)(v23 + 16);
              v231 = v230 + 5;
              if (v230 >= -5)
              {
                v232 = *(unsigned int **)(v23 + 24);
                v234 = *v232;
                v233 = v232 + 1;
                v225 += (unint64_t)bswap32(v234) << v231;
                v231 = v230 - 27;
                if ((unint64_t)v233 >= *(_QWORD *)(v23 + 32))
                  v235 = *(unsigned int **)(v23 + 32);
                else
                  v235 = v233;
                *(_QWORD *)(v23 + 24) = v235;
              }
              *(_QWORD *)(v23 + 16) = v231;
              *(_QWORD *)v23 = v225;
              *(_BYTE *)(v313 + 16 * v310 + 15) = v224;
            }
          }
        }
        goto LABEL_259;
      }
      v140 = *(_OWORD *)&v57[-2 * v43];
    }
    *(_OWORD *)v57 = v140;
  }
LABEL_259:
  v250 = sub_1C9703EE4(a1, v23, (uint64_t)a2, v316, v322, *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2113), 0, v54, (unsigned __int8 *)v325);
  *v51 = SLOBYTE(v325[0]);
  if (*(_BYTE *)(a1 + 564))
  {
    v251 = *(_QWORD *)(a1 + 16);
    v252 = *(unsigned __int8 *)(v251 + 2117);
    if (*(_BYTE *)(v251 + 2117))
    {
      v253 = 0;
      v254 = *(_QWORD **)(a1 + 8);
      v255 = (char *)(v254[121] + v254[117] * ((uint64_t)(int)v316 >> 3) + ((int)v322 >> 2));
      v256 = (char *)(v254[118] + v254[116] * ((uint64_t)(int)v322 >> 3) + ((int)v316 >> 2));
      do
      {
        bzero(v256, v252 >> 2);
        bzero(v255, v252 >> 2);
        v257 = *(_QWORD *)(a1 + 8);
        v256 += *(_QWORD *)(v257 + 928);
        v255 += *(_QWORD *)(v257 + 936);
        v253 += 8;
      }
      while (v253 < v252);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 567))
      sub_1C970C0B4(a1, v316, v322, v321);
    v258 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v258 + 20) && !*(_BYTE *)(v258 + 27))
      sub_1C970C0B4(a1, v316, v322, v53);
  }
  v259 = *(_QWORD *)(a1 + 32);
  v260 = *a3;
  if (*(_BYTE *)(v259 + 21))
    v261 = v260 == 1;
  else
    v261 = 0;
  if (v261)
  {
    v262 = *(_OWORD *)(v23 + 40);
    v263 = *(_OWORD *)(v23 + 56);
    v264 = *(_OWORD *)(v23 + 88);
    *(_OWORD *)(a1 + 1240) = *(_OWORD *)(v23 + 72);
    *(_OWORD *)(a1 + 1256) = v264;
    *(_OWORD *)(a1 + 1208) = v262;
    *(_OWORD *)(a1 + 1224) = v263;
    v265 = *(_OWORD *)(v23 + 104);
    v266 = *(_OWORD *)(v23 + 120);
    v267 = *(_OWORD *)(v23 + 152);
    *(_OWORD *)(a1 + 1304) = *(_OWORD *)(v23 + 136);
    *(_OWORD *)(a1 + 1320) = v267;
    *(_OWORD *)(a1 + 1272) = v265;
    *(_OWORD *)(a1 + 1288) = v266;
    v268 = *(_OWORD *)(v23 + 168);
    v269 = *(_OWORD *)(v23 + 184);
    v270 = *(_OWORD *)(v23 + 200);
    *(_BYTE *)(a1 + 1384) = *(_BYTE *)(v23 + 216);
    *(_OWORD *)(a1 + 1352) = v269;
    *(_OWORD *)(a1 + 1368) = v270;
    *(_OWORD *)(a1 + 1336) = v268;
    *(_BYTE *)(a1 + 1385) = 1;
    v260 = *a3;
  }
  v271 = *(_QWORD *)(a1 + 2280);
  if (*(_BYTE *)(v271 + 2052))
  {
    v272 = *(_QWORD *)(v271 + 1152);
    v273 = *(void (**)(_QWORD *, uint64_t))(v271 + 1144);
    v274 = (_QWORD *)(v271 + (v272 >> 1) + 1128);
    if ((v272 & 1) != 0)
      v273 = *(void (**)(_QWORD *, uint64_t))(*v274 + v273);
    v273(v274, a1);
    v260 = *a3;
    v259 = *(_QWORD *)(a1 + 32);
  }
  v275 = v260 + 1;
  *a3 = v260 + 1;
  if (*(_BYTE *)(v259 + 20))
  {
    v276 = *(_DWORD *)(a1 + 2320);
    v277 = *(_QWORD *)(a1 + 16);
    if (v275 >= v10 && v275 < *(_DWORD *)(v277 + 2120) && v315 >= *(_DWORD *)(a1 + 568))
    {
      ++*v323;
      *a3 = v276;
      v275 = v276;
    }
  }
  else
  {
    v276 = 0;
    v277 = *(_QWORD *)(a1 + 16);
  }
  if (v275 >= *(_DWORD *)(v277 + 2120))
  {
    v278 = (*v323 + 1) << *(_BYTE *)(v277 + 2113);
    v279 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 524);
    v280 = v279 <= v278;
    if (v279 < v278)
      v278 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 524);
    v281 = !v280;
    v324 = v278 - v281;
    v282 = *(_QWORD *)(a1 + 2280);
    if (*(_BYTE *)(v282 + 2052))
    {
      v324 = *(_DWORD *)(v282 + 1248);
    }
    else if (*(_BYTE *)(v282 + 2051))
    {
      v283 = v282 + 1128;
      v284 = *(void (**)(_QWORD *, uint64_t, unsigned int *))(v282 + 1128);
      v285 = *(_QWORD *)(v282 + 1136);
      v286 = (_QWORD *)(v283 + (v285 >> 1));
      if ((v285 & 1) != 0)
        v284 = *(void (**)(_QWORD *, uint64_t, unsigned int *))(*v286 + v284);
      v284(v286, a1, &v324);
      v282 = *(_QWORD *)(a1 + 2280);
    }
    sub_1C970E154((int *)(v282 + 1264), a1, *(unsigned __int8 *)(v282 + 2050), (int *)&v324);
    if (v314)
      sub_1C978FB14(*(_QWORD *)(a1 + 2280) + 1128, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 653), (int *)&v324);
    v287 = *(_QWORD *)(a1 + 8);
    atomic_store(v324, (unsigned int *)(v287 + 1032));
    std::condition_variable::notify_all((std::condition_variable *)(v287 + 1104));
    ++*v323;
    *a3 = v276;
  }
  if (*v323 >= v318)
  {
    *a3 = 0;
    if (v315 < *(_DWORD *)(a1 + 568))
    {
      *(_DWORD *)(a1 + 2328) = v315 + 1;
      if (!sub_1C9710ED4(*(_QWORD *)(a1 + 32) + 1648, *a3, *v323, a1 + 2304))
        goto LABEL_310;
      return 0;
    }
    if (dword_1ED1ACCC0 > 3)
      v288 = v250;
    else
      v288 = 0;
    if (v288 == 1)
    {
      fwrite("More data is signalled, but we don't know where to put it\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(28, "More data is signalled, but we don't know where to put it\n");
    }
    v250 = 0;
  }
LABEL_310:
  v289 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v289 + 2) && (v250 & 1) == 0)
  {
    v290 = *(_OWORD *)(v23 + 40);
    v291 = *(_OWORD *)(v23 + 56);
    v292 = *(_OWORD *)(v23 + 88);
    *(_OWORD *)(a1 + 1418) = *(_OWORD *)(v23 + 72);
    *(_OWORD *)(a1 + 1434) = v292;
    *(_OWORD *)(a1 + 1386) = v290;
    *(_OWORD *)(a1 + 1402) = v291;
    v293 = *(_OWORD *)(v23 + 104);
    v294 = *(_OWORD *)(v23 + 120);
    v295 = *(_OWORD *)(v23 + 152);
    *(_OWORD *)(a1 + 1482) = *(_OWORD *)(v23 + 136);
    *(_OWORD *)(a1 + 1498) = v295;
    *(_OWORD *)(a1 + 1450) = v293;
    *(_OWORD *)(a1 + 1466) = v294;
    v296 = *(_OWORD *)(v23 + 168);
    v297 = *(_OWORD *)(v23 + 184);
    v298 = *(_OWORD *)(v23 + 200);
    *(_BYTE *)(a1 + 1562) = *(_BYTE *)(v23 + 216);
    *(_OWORD *)(a1 + 1530) = v297;
    *(_OWORD *)(a1 + 1546) = v298;
    *(_OWORD *)(a1 + 1514) = v296;
  }
  if (*v323 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2124))
    v299 = v250;
  else
    v299 = 0;
  if (v299 != 1)
    return 0;
  if (!*(_BYTE *)(v289 + 21) || *a3)
    return 1;
  v300 = 1;
  if (!sub_1C970AEF8((uint64_t *)v23) && dword_1ED1ACCC0 >= 3)
  {
    v300 = 1;
    fwrite("end_of_sub_stream_one_bit is not 1\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "end_of_sub_stream_one_bit is not 1\n");
  }
  return v300;
}

uint64_t sub_1C9703EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, unsigned __int8 *a9)
{
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v22;
  _BOOL8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned __int8 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t result;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int16 *v54;
  __int16 v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned __int8 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  __int16 v71;
  __int16 v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned __int8 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned __int8 v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unsigned __int8 v118;
  int v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int v122;
  _BYTE *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char v130;
  unsigned __int8 v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int v137;
  int v138;
  int v139;
  _QWORD *v140;
  unsigned int v141;
  BOOL v142;
  BOOL v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  int8x8_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int8x8_t v160;
  uint64_t v161;
  uint64_t v162;
  int8x8_t v163;
  int8x8_t v164;
  uint64_t v165;
  void *v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  BOOL v171;
  uint64_t v172;
  char v173;
  unsigned __int8 v174;
  int v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int *v181;
  unsigned int v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int *v190;
  BOOL v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  BOOL v196;
  uint64_t v197;
  char v198;
  unsigned __int8 v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int *v205;
  unsigned int *v206;
  unsigned int v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int *v215;
  char v216;
  _BYTE *v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unsigned __int8 *v224;
  uint64_t v225;
  char *v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned __int8 *v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int64x2_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  BOOL v248;
  unint64_t v249;
  uint64_t v250;
  char v251;
  int v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int *v255;
  unsigned int v256;
  unsigned __int8 v257;
  char v258;
  unsigned __int8 *v259;
  unsigned __int8 v260;
  unsigned __int8 *v261;
  char v262;
  unsigned __int8 *v263;
  char v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  char v271;
  unsigned __int8 v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int *v279;
  unsigned int v280;
  int v281;
  int v282;
  char v283;
  uint64_t i;
  uint64_t v285;
  _QWORD *v286;
  uint64_t j;
  unsigned __int8 *v288;
  uint64_t v289;
  size_t v290;
  unsigned __int8 *v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  size_t v296;
  __int128 v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  __int32 v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t k;
  _BYTE *v317;
  void (*v318)(_QWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  void (*v322)(_QWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  __int128 *v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  unsigned int v339;
  __int128 *v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  int v346;
  __int128 *v347;
  unsigned int v348;
  __int128 *v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  unsigned int v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  char v364;
  unsigned __int8 v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int *v369;
  unsigned int *v370;
  unsigned int v371;
  uint64_t v372;
  unsigned __int8 *v373;
  unsigned int v374;
  int v375;
  void (*v376)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, void **);
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  int v380;
  int v381;
  uint64_t v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  __int16 v388;
  int v389;
  uint64_t v390;
  int16x8_t v391;
  int v392;
  int v393;
  _BOOL4 v394;
  _BOOL4 v395;
  uint64_t v396;
  int v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  __int128 *v402;
  int v403;
  uint64_t v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  __int128 *v409;
  __int128 *v410;
  unsigned int v411;
  unsigned int v412;
  char v413;
  __int128 *v414;
  __int128 *v415;
  __int128 *v416;
  char *__b;
  int __ba;
  int __bb;
  unsigned int __bc;
  unsigned int __bd;
  uint64_t v422;
  unsigned __int8 v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  __int16 *v427;
  int v429;
  int v430;
  __int32 v431;
  uint64_t v432;
  char v434[4];
  int v435;
  int v436;
  __int32 v437;
  void *__p[2];
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int8x16_t v443;
  int64x2_t v444;
  uint64_t v445;

  v12 = (_QWORD *)a1;
  v445 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_DWORD *)(v13 + 520);
  v15 = *(_DWORD *)(v13 + 524);
  v16 = (1 << a6);
  v17 = v16 + a5;
  v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2112);
  v19 = v18 < a6;
  if ((int)v16 + (int)a4 <= v14 && v17 <= v15 && v18 < a6)
  {
    v22 = (a8 & 0xF0) != 0
       && (*(_WORD *)(*(_QWORD *)(v13 + 776)
                    + 2 * (*(_QWORD *)(v13 + 768) * ((uint64_t)(int)a5 >> 3) + (((int)a4 - (int)v16) >> 3))) & 3) > a7;
    v23 = (a8 & 0x1E00) != 0
       && (*(_WORD *)(*(_QWORD *)(v13 + 776)
                    + 2 * (*(_QWORD *)(v13 + 768) * ((uint64_t)((int)a5 - (int)v16) >> 3) + ((int)a4 >> 3))) & 3) > a7;
    v24 = a2 + v23 + v22;
    v25 = *(unsigned __int8 *)(v24 + 42);
    v27 = *(_QWORD *)a2;
    v26 = *(_QWORD *)(a2 + 8);
    v28 = byte_1C98326D3[(v26 & 0xC0) + (v25 >> 1)];
    LODWORD(v29) = v26 - v28;
    if (*(_QWORD *)a2 < (unint64_t)((v26 - v28) << 55))
      v29 = v29;
    else
      v29 = byte_1C98326D3[(v26 & 0xC0) + (v25 >> 1)];
    if (*(_QWORD *)a2 < (unint64_t)((v26 - v28) << 55))
    {
      v30 = 0;
    }
    else
    {
      v27 = *(_QWORD *)a2 - ((v26 - v28) << 55);
      v30 = 1;
    }
    if (*(_QWORD *)a2 < (unint64_t)((v26 - v28) << 55))
      v31 = *(_BYTE *)(v24 + 42);
    else
      v31 = v25 + 1;
    v32 = byte_1C98326D3[2 * v25 + 256 + v30];
    v33 = __clz(v29) - 55;
    v34 = v27 << v33;
    *(_QWORD *)(a2 + 8) = v29 << v33;
    *(_BYTE *)(v24 + 42) = v32;
    v35 = *(_QWORD *)(a2 + 16) + v33;
    if (v35 >= 0)
    {
      v36 = *(unsigned int **)(a2 + 24);
      v38 = *v36;
      v37 = v36 + 1;
      v34 += (unint64_t)bswap32(v38) << v35;
      v35 -= 32;
      if ((unint64_t)v37 >= *(_QWORD *)(a2 + 32))
        v37 = *(unsigned int **)(a2 + 32);
      *(_QWORD *)(a2 + 24) = v37;
    }
    *(_QWORD *)(a2 + 16) = v35;
    *(_QWORD *)a2 = v34;
    v19 = v31 & 1;
  }
  v39 = (char)*a9;
  v40 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v40 + 12))
  {
    v41 = *(_DWORD *)(v40 + 1636);
    if (v41 <= a6)
    {
      v42 = *(_QWORD *)(a1 + 16);
      if (*(unsigned __int8 *)(v42 + 2113) - a7 > v41)
        LOBYTE(v41) = *(_BYTE *)(v42 + 2113) - a7;
      v43 = -1 << v41;
      v44 = *(unsigned __int8 *)(v42 + 2117) - 1;
      v45 = (-1 << v41) & a4;
      v46 = v43 & a5;
      v47 = (char)*a9;
      if ((v45 & v44) != 0)
        v47 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 776)
                         + 2 * (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 768) * ((uint64_t)v46 >> 3) + ((v45 - 1) >> 3))) >> 9;
      if ((v46 & v44) != 0)
        v39 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 776)
                         + 2 * (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 768) * ((uint64_t)(v46 - 1) >> 3) + (v45 >> 3))) >> 9;
      v39 = (v47 + v39 + 1) >> 1;
      a9[1] = 1;
    }
  }
  if (*(_BYTE *)(a1 + 562) && *(_DWORD *)(v40 + 1640) <= a6)
    a9[2] = 1;
  v432 = a4;
  if (!v19)
  {
    v53 = (uint64_t)(int)a5 >> 3;
    v54 = (__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 776)
                    + 2 * (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 768) * v53 + ((int)a4 >> 3)));
    v55 = a7 & 3 | ((_WORD)v39 << 9);
    *v54 = v55;
    v56 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 19);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 19))
    {
      v57 = *(unsigned __int8 *)(a2 + 45);
      v59 = *(_QWORD *)a2;
      v58 = *(_QWORD *)(a2 + 8);
      v60 = byte_1C98326D3[(v58 & 0xC0) + (v57 >> 1)];
      LODWORD(v61) = v58 - v60;
      if (*(_QWORD *)a2 < (unint64_t)((v58 - v60) << 55))
        v61 = v61;
      else
        v61 = byte_1C98326D3[(v58 & 0xC0) + (v57 >> 1)];
      if (*(_QWORD *)a2 < (unint64_t)((v58 - v60) << 55))
      {
        v62 = 0;
      }
      else
      {
        v59 = *(_QWORD *)a2 - ((v58 - v60) << 55);
        v62 = 1;
      }
      if (*(_QWORD *)a2 < (unint64_t)((v58 - v60) << 55))
        v63 = *(_BYTE *)(a2 + 45);
      else
        v63 = v57 + 1;
      v64 = byte_1C98326D3[2 * v57 + 256 + v62];
      v65 = __clz(v61) - 55;
      v66 = v59 << v65;
      *(_QWORD *)(a2 + 8) = v61 << v65;
      *(_BYTE *)(a2 + 45) = v64;
      v67 = *(_QWORD *)(a2 + 16) + v65;
      if (v67 >= 0)
      {
        v68 = *(unsigned int **)(a2 + 24);
        v70 = *v68;
        v69 = v68 + 1;
        v66 += (unint64_t)bswap32(v70) << v67;
        v67 -= 32;
        if ((unint64_t)v69 >= *(_QWORD *)(a2 + 32))
          v69 = *(unsigned int **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v69;
      }
      *(_QWORD *)(a2 + 16) = v67;
      *(_QWORD *)a2 = v66;
      v56 = (v63 & 1) << 8;
      v55 = *v54;
    }
    v71 = v55 & 0xFEFF | v56;
    *v54 = v71;
    if (*(_BYTE *)(a1 + 58) == 2)
    {
      v72 = v71 & 0xFF7F;
    }
    else
    {
      if ((a8 & 0xF0) != 0)
        v73 = (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 776)
                                   + 2 * (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 768) * v53 + (((int)a4 - 1) >> 3))) >> 7) & 1;
      else
        v73 = 0;
      if ((a8 & 0x1E00) != 0)
        v74 = (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 776)
                                   + 2
                                   * (((uint64_t)(int)a4 >> 3)
                                    + *(_QWORD *)(*(_QWORD *)(a1 + 8) + 768) * ((uint64_t)((int)a5 - 1) >> 3))) >> 7) & 1;
      else
        v74 = 0;
      v75 = a2 + v74 + (unint64_t)v73;
      v76 = *(unsigned __int8 *)(v75 + 46);
      v78 = *(_QWORD *)a2;
      v77 = *(_QWORD *)(a2 + 8);
      v79 = byte_1C98326D3[(v77 & 0xC0) + (v76 >> 1)];
      LODWORD(v80) = v77 - v79;
      if (*(_QWORD *)a2 < (unint64_t)((v77 - v79) << 55))
        v80 = v80;
      else
        v80 = byte_1C98326D3[(v77 & 0xC0) + (v76 >> 1)];
      if (*(_QWORD *)a2 < (unint64_t)((v77 - v79) << 55))
      {
        v81 = 0;
      }
      else
      {
        v78 = *(_QWORD *)a2 - ((v77 - v79) << 55);
        v81 = 1;
      }
      if (*(_QWORD *)a2 < (unint64_t)((v77 - v79) << 55))
        v82 = *(_BYTE *)(v75 + 46);
      else
        v82 = v76 + 1;
      v83 = byte_1C98326D3[2 * v76 + 256 + v81];
      v84 = __clz(v80) - 55;
      v85 = v78 << v84;
      *(_QWORD *)(a2 + 8) = v80 << v84;
      *(_BYTE *)(v75 + 46) = v83;
      v86 = *(_QWORD *)(a2 + 16) + v84;
      if (v86 >= 0)
      {
        v87 = *(unsigned int **)(a2 + 24);
        v89 = *v87;
        v88 = v87 + 1;
        v85 += (unint64_t)bswap32(v89) << v86;
        v86 -= 32;
        if ((unint64_t)v88 >= *(_QWORD *)(a2 + 32))
          v88 = *(unsigned int **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v88;
      }
      *(_QWORD *)(a2 + 16) = v86;
      *(_QWORD *)a2 = v85;
      v72 = *v54 & 0xFF7F | ((v82 & 1) << 7);
    }
    *v54 = v72;
    v430 = v16 + a4;
    v426 = a5;
    v427 = v54;
    if ((v72 & 0x80) != 0)
    {
      sub_1C977D968(a1, a2, (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 856)+ 12 * (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 848) * ((uint64_t)(int)a5 >> 2) + ((int)a4 >> 2))), a4, a5, 1 << a6, v16, a8, a8, a7, 1);
      goto LABEL_359;
    }
    v422 = (uint64_t)(int)a4 >> 3;
    v424 = (uint64_t)(int)a5 >> 3;
    v425 = v16 + a5;
    if (*(_BYTE *)(a1 + 58) != 2)
    {
      v90 = *(unsigned __int8 *)(a2 + 51);
      v91 = *(_QWORD *)a2;
      v92 = *(_QWORD *)(a2 + 8) - byte_1C98326D3[(*(_QWORD *)(a2 + 8) & 0xC0) + (v90 >> 1)];
      v93 = *(_QWORD *)a2 >= v92 << 55;
      v94 = *(_QWORD *)a2 - (v92 << 55);
      if (*(_QWORD *)a2 < v92 << 55)
        v92 = v92;
      else
        v92 = byte_1C98326D3[(*(_QWORD *)(a2 + 8) & 0xC0) + (v90 >> 1)];
      if (v93)
      {
        v91 = v94;
        v95 = 1;
      }
      else
      {
        v95 = 0;
      }
      if (v93)
        v96 = v90 + 1;
      else
        v96 = *(_BYTE *)(a2 + 51);
      v97 = byte_1C98326D3[2 * v90 + 256 + v95];
      v98 = __clz(v92) - 55;
      v99 = v92 << v98;
      v100 = v91 << v98;
      *(_QWORD *)(a2 + 8) = v99;
      *(_BYTE *)(a2 + 51) = v97;
      v101 = *(_QWORD *)(a2 + 16) + v98;
      if (v101 >= 0)
      {
        v102 = *(unsigned int **)(a2 + 24);
        v104 = *v102;
        v103 = v102 + 1;
        v100 += (unint64_t)bswap32(v104) << v101;
        v101 -= 32;
        if ((unint64_t)v103 >= *(_QWORD *)(a2 + 32))
          v103 = *(unsigned int **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v103;
      }
      *(_QWORD *)(a2 + 16) = v101;
      *(_QWORD *)a2 = v100;
      if ((v96 & 1) == 0)
      {
        v105 = 0;
        v106 = *(_QWORD *)(a1 + 16);
        v107 = *(unsigned __int8 *)(v106 + 2112);
        v108 = *(unsigned __int8 *)(v106 + 276);
        if (v107 != a6 || a6 <= 3)
          v110 = 2;
        else
          v110 = 3;
        while (1)
        {
          v111 = *(unsigned __int8 *)(a2 + v105 + 52);
          v112 = byte_1C98326D3[(v99 & 0xC0) + (v111 >> 1)];
          v113 = v99 - v112;
          v114 = v100 >= v113 << 55;
          v115 = v100 - (v113 << 55);
          if (v100 < v113 << 55)
            v113 = v113;
          else
            v113 = v112;
          if (v114)
          {
            v100 = v115;
            v116 = 1;
          }
          else
          {
            v116 = 0;
          }
          if (v114)
            v117 = v111 + 1;
          else
            v117 = *(_BYTE *)(a2 + v105 + 52);
          v118 = byte_1C98326D3[2 * v111 + 256 + v116];
          v119 = __clz(v113) - 55;
          v99 = v113 << v119;
          v100 <<= v119;
          *(_QWORD *)(a2 + 8) = v99;
          *(_BYTE *)(a2 + v105 + 52) = v118;
          v101 += v119;
          if (v101 >= 0)
          {
            v120 = *(unsigned int **)(a2 + 24);
            v122 = *v120;
            v121 = v120 + 1;
            v100 += (unint64_t)bswap32(v122) << v101;
            v101 -= 32;
            if ((unint64_t)v121 >= *(_QWORD *)(a2 + 32))
              v121 = *(unsigned int **)(a2 + 32);
            *(_QWORD *)(a2 + 24) = v121;
          }
          *(_QWORD *)(a2 + 16) = v101;
          *(_QWORD *)a2 = v100;
          if ((v117 & 1) != 0)
            break;
          if (v110 == ++v105)
            goto LABEL_166;
        }
        LODWORD(v110) = v105;
LABEL_166:
        if (v107 >= a6 || !v108)
          goto LABEL_315;
        if ((_DWORD)v110 == 2)
        {
          v193 = *(unsigned __int8 *)(a2 + 55);
          v194 = byte_1C98326D3[(v99 & 0xC0) + (v193 >> 1)];
          LODWORD(v195) = v99 - v194;
          v196 = v100 >= (v99 - v194) << 55;
          if (v100 < (v99 - v194) << 55)
            v195 = v195;
          else
            v195 = byte_1C98326D3[(v99 & 0xC0) + (v193 >> 1)];
          if (v100 < (v99 - v194) << 55)
          {
            v197 = 0;
          }
          else
          {
            v100 -= (v99 - v194) << 55;
            v197 = 1;
          }
          if (v196)
            v198 = v193 + 1;
          else
            v198 = *(_BYTE *)(a2 + 55);
          v199 = byte_1C98326D3[2 * v193 + 256 + v197];
          v200 = __clz(v195);
          v201 = v200 - 55;
          v202 = v195 << (v200 - 55);
          v203 = v100 << v201;
          *(_QWORD *)(a2 + 8) = v202;
          *(_BYTE *)(a2 + 55) = v199;
          v204 = v101 + v201;
          if (v204 >= 0)
          {
            v205 = *(unsigned int **)(a2 + 24);
            v207 = *v205;
            v206 = v205 + 1;
            v203 += (unint64_t)bswap32(v207) << v204;
            v204 -= 32;
            if ((unint64_t)v206 >= *(_QWORD *)(a2 + 32))
              v206 = *(unsigned int **)(a2 + 32);
            *(_QWORD *)(a2 + 24) = v206;
          }
          *(_QWORD *)(a2 + 16) = v204;
          *(_QWORD *)a2 = v203;
          if ((v198 & 1) == 0)
          {
            v208 = v202 << 54;
            if (v203 >= v202 << 54)
              v209 = v202 << 54;
            else
              v209 = 0;
            v210 = 2 * (v203 - v209);
            v211 = v204 + 1;
            if (v204 >= -1)
            {
              v212 = *(unsigned int **)(a2 + 24);
              v214 = *v212;
              v213 = v212 + 1;
              v210 += (unint64_t)bswap32(v214) << v211;
              v211 = v204 - 31;
              if ((unint64_t)v213 >= *(_QWORD *)(a2 + 32))
                v215 = *(unsigned int **)(a2 + 32);
              else
                v215 = v213;
              *(_QWORD *)(a2 + 24) = v215;
            }
            *(_QWORD *)(a2 + 16) = v211;
            *(_QWORD *)a2 = v210;
            v191 = v203 >= v208;
            v192 = 6;
            goto LABEL_216;
          }
          LODWORD(v110) = 2;
        }
        else if ((_DWORD)v110 == 1)
        {
          v168 = *(unsigned __int8 *)(a2 + 55);
          v169 = byte_1C98326D3[(v99 & 0xC0) + (v168 >> 1)];
          LODWORD(v170) = v99 - v169;
          v171 = v100 >= (v99 - v169) << 55;
          if (v100 < (v99 - v169) << 55)
            v170 = v170;
          else
            v170 = byte_1C98326D3[(v99 & 0xC0) + (v168 >> 1)];
          if (v100 < (v99 - v169) << 55)
          {
            v172 = 0;
          }
          else
          {
            v100 -= (v99 - v169) << 55;
            v172 = 1;
          }
          if (v171)
            v173 = v168 + 1;
          else
            v173 = *(_BYTE *)(a2 + 55);
          v174 = byte_1C98326D3[2 * v168 + 256 + v172];
          v175 = __clz(v170);
          v176 = v175 - 55;
          v177 = v170 << (v175 - 55);
          v178 = v100 << v176;
          *(_QWORD *)(a2 + 8) = v177;
          *(_BYTE *)(a2 + 55) = v174;
          v179 = v101 + v176;
          if (v179 >= 0)
          {
            v180 = *(unsigned int **)(a2 + 24);
            v182 = *v180;
            v181 = v180 + 1;
            v178 += (unint64_t)bswap32(v182) << v179;
            v179 -= 32;
            if ((unint64_t)v181 >= *(_QWORD *)(a2 + 32))
              v181 = *(unsigned int **)(a2 + 32);
            *(_QWORD *)(a2 + 24) = v181;
          }
          *(_QWORD *)(a2 + 16) = v179;
          *(_QWORD *)a2 = v178;
          if ((v173 & 1) == 0)
          {
            v183 = v177 << 54;
            if (v178 >= v177 << 54)
              v184 = v177 << 54;
            else
              v184 = 0;
            v185 = 2 * (v178 - v184);
            v186 = v179 + 1;
            if (v179 >= -1)
            {
              v187 = *(unsigned int **)(a2 + 24);
              v189 = *v187;
              v188 = v187 + 1;
              v185 += (unint64_t)bswap32(v189) << v186;
              v186 = v179 - 31;
              if ((unint64_t)v188 >= *(_QWORD *)(a2 + 32))
                v190 = *(unsigned int **)(a2 + 32);
              else
                v190 = v188;
              *(_QWORD *)(a2 + 24) = v190;
            }
            *(_QWORD *)(a2 + 16) = v186;
            *(_QWORD *)a2 = v185;
            v191 = v178 >= v183;
            v192 = 4;
LABEL_216:
            if (v191)
              LODWORD(v110) = v192 + 1;
            else
              LODWORD(v110) = v192;
            goto LABEL_315;
          }
          LODWORD(v110) = 1;
        }
LABEL_315:
        v325 = *(_QWORD *)(a1 + 8);
        v326 = *(_QWORD *)(v325 + 848);
        v327 = (__int128 *)(*(_QWORD *)(v325 + 856) + 12 * (v326 * ((uint64_t)(int)a5 >> 2) + ((int)a4 >> 2)));
        v328 = (int)v16 >> 1;
        v329 = (int)v16 >> 3;
        v330 = a4 + ((int)v16 >> 1);
        v331 = a5 + ((int)v16 >> 1);
        if ((a8 & 0xF0) != 0)
          v332 = 15;
        else
          v332 = 0;
        v333 = a8 | (((a8 & 0xF0) != 0) << 8);
        if ((a8 & 0x1E00) != 0)
          v335 = 122880;
        else
          v335 = 0;
        v334 = (a8 & 0x1E00) != 0;
        v336 = (int)v16 >> 2;
        v337 = (int)v16 >> 4;
        v338 = v332 | a8 & 0x1FFF0;
        switch((int)v110)
        {
          case 0:
            v17 = v16 + a5;
            if ((sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, v16, v16, a8, a8, a7, 0) & 1) == 0)
              goto LABEL_336;
            goto LABEL_350;
          case 1:
            v405 = a5 + ((int)v16 >> 1);
            v414 = v327;
            v339 = a4;
            __ba = v333 | 0x1E00;
            sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, v16, (int)v16 >> 1, v338, a8, a7, 0);
            v340 = (__int128 *)((char *)v414 + 12 * v326 * v329);
            v401 = __PAIR64__(a7, a8);
            v341 = (uint64_t)v12;
            v342 = a2;
            v343 = v339;
            v345 = (int)v16 >> 1;
            v344 = v405;
            v346 = v16;
            goto LABEL_333;
          case 2:
            v407 = a4 + ((int)v16 >> 1);
            v347 = v327;
            v348 = a5;
            __ba = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, (int)v16 >> 1, v16, v335 & 0xFFFFE000 | a8 & 0x1FFF, a8, a7, 0);
            v340 = (__int128 *)((char *)v347 + 12 * v329);
            v401 = __PAIR64__(a7, a8);
            v341 = (uint64_t)v12;
            v342 = a2;
            v343 = v407;
            v344 = v348;
            v346 = (int)v16 >> 1;
            goto LABEL_332;
          case 4:
            __bc = v331 - v336;
            v409 = (__int128 *)((char *)v327 + 12 * v326 * v337);
            v352 = a4;
            v353 = v333 | 0x1E00;
            sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, v16, (int)v16 >> 2, v338, a8, a7, 0);
            v345 = 3 * v336;
            v401 = __PAIR64__(a7, a8);
            v341 = (uint64_t)v12;
            v342 = a2;
            v340 = v409;
            v343 = v352;
            v344 = __bc;
            v346 = v16;
            goto LABEL_329;
          case 5:
            __bd = v331 + v336;
            v410 = (__int128 *)((char *)v327 + 12 * v326 * 3 * v337);
            v354 = a4;
            v353 = v333 | 0x1E00;
            sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, v16, 3 * v336, v338, a8, a7, 0);
            v401 = __PAIR64__(a7, a8);
            v341 = (uint64_t)v12;
            v342 = a2;
            v340 = v410;
            v343 = v354;
            v344 = __bd;
            v346 = v16;
            v345 = (int)v16 >> 2;
LABEL_329:
            v355 = v353;
            goto LABEL_334;
          case 6:
            v411 = v330 - v336;
            v415 = v327;
            v356 = a5;
            __ba = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, (int)v16 >> 2, v16, v335 & 0xFFFFE000 | a8 & 0x1FFF, a8, a7, 0);
            v340 = (__int128 *)((char *)v415 + 12 * v337);
            v346 = 3 * v336;
            v401 = __PAIR64__(a7, a8);
            v341 = (uint64_t)v12;
            v342 = a2;
            v343 = v411;
            v344 = v356;
            goto LABEL_332;
          case 7:
            v412 = v330 + v336;
            v416 = v327;
            v357 = a5;
            __ba = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, 3 * v336, v16, v335 & 0xFFFFE000 | a8 & 0x1FFF, a8, a7, 0);
            v340 = (__int128 *)((char *)v416 + 36 * v337);
            v401 = __PAIR64__(a7, a8);
            v341 = (uint64_t)v12;
            v342 = a2;
            v343 = v412;
            v344 = v357;
            v346 = (int)v16 >> 2;
LABEL_332:
            v345 = v16;
LABEL_333:
            v355 = __ba;
LABEL_334:
            sub_1C977D968(v341, v342, v340, v343, v344, v346, v345, v355, v401, SHIDWORD(v401), 0);
            break;
          default:
            v403 = v333 | 0x1FE00;
            v402 = (__int128 *)((char *)v327 + 12 * v329 * v326);
            v406 = a5 + ((int)v16 >> 1);
            v408 = a4 + ((int)v16 >> 1);
            v349 = v327;
            v350 = a5;
            v351 = (int)v16 >> 1;
            __bb = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            sub_1C977D968((uint64_t)v12, a2, v327, a4, a5, v351, v328, v332 | a8 & 0x1FF0 | v335, a8, a7, 0);
            sub_1C977D968((uint64_t)v12, a2, (__int128 *)((char *)v349 + 12 * v329), v408, v350, v351, v351, __bb, a8, a7, 0);
            sub_1C977D968((uint64_t)v12, a2, v402, v432, v406, v351, v351, v403, a8, a7, 0);
            sub_1C977D968((uint64_t)v12, a2, (__int128 *)((char *)v402 + 12 * v329), v408, v406, v351, v351, 8176, a8, a7, 0);
            break;
        }
        v17 = v425;
LABEL_336:
        v358 = *(unsigned __int8 *)(a2 + 70);
        v360 = *(_QWORD *)a2;
        v359 = *(_QWORD *)(a2 + 8);
        v361 = byte_1C98326D3[(v359 & 0xC0) + (v358 >> 1)];
        LODWORD(v362) = v359 - v361;
        if (*(_QWORD *)a2 < (unint64_t)((v359 - v361) << 55))
          v362 = v362;
        else
          v362 = byte_1C98326D3[(v359 & 0xC0) + (v358 >> 1)];
        if (*(_QWORD *)a2 < (unint64_t)((v359 - v361) << 55))
        {
          v363 = 0;
        }
        else
        {
          v360 = *(_QWORD *)a2 - ((v359 - v361) << 55);
          v363 = 1;
        }
        if (*(_QWORD *)a2 < (unint64_t)((v359 - v361) << 55))
          v364 = *(_BYTE *)(a2 + 70);
        else
          v364 = v358 + 1;
        v365 = byte_1C98326D3[2 * v358 + 256 + v363];
        v366 = __clz(v362) - 55;
        v367 = v360 << v366;
        *(_QWORD *)(a2 + 8) = v362 << v366;
        *(_BYTE *)(a2 + 70) = v365;
        v368 = *(_QWORD *)(a2 + 16) + v366;
        if (v368 >= 0)
        {
          v369 = *(unsigned int **)(a2 + 24);
          v371 = *v369;
          v370 = v369 + 1;
          v367 += (unint64_t)bswap32(v371) << v368;
          v368 -= 32;
          if ((unint64_t)v370 >= *(_QWORD *)(a2 + 32))
            v370 = *(unsigned int **)(a2 + 32);
          *(_QWORD *)(a2 + 24) = v370;
        }
        *(_QWORD *)(a2 + 16) = v368;
        *(_QWORD *)a2 = v367;
        if ((v364 & 1) == 0)
          goto LABEL_359;
LABEL_350:
        v372 = *(_QWORD *)(a3 + 32);
        *(_DWORD *)a3 = a6;
        *(_DWORD *)(a3 + 4) = 3;
        *(_DWORD *)(a3 + 8) = v110;
        v373 = *(unsigned __int8 **)(v372 + 16);
        v374 = (a6 - v373[2114]) & ~((a6 - v373[2114]) >> 31);
        if (v374 >= v373[272])
          v374 = v373[272];
        *(_DWORD *)(a3 + 12) = v374;
        *(_QWORD *)(a3 + 48) = *(_QWORD *)(*(_QWORD *)(v372 + 8) + 776)
                             + 2 * (v422 + *(_QWORD *)(*(_QWORD *)(v372 + 8) + 768) * v424);
        *(_QWORD *)(a3 + 24) = a9;
        v375 = v373[201];
        __p[0] = (void *)a6;
        LODWORD(__p[1]) = a8;
        v376 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, void **))(a3 + 6400);
        v377 = *(_QWORD *)(a3 + 6408);
        v378 = (_QWORD *)(a3 + (v377 >> 1));
        if ((v377 & 1) != 0)
          v376 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, void **))(*v378 + v376);
        if (v375)
          v379 = 3;
        else
          v379 = 0;
        v376(v378, v432, v426, 0, a8, v379, __p);
        goto LABEL_358;
      }
    }
    v123 = *(_BYTE **)(a1 + 16);
    if (v123[2112] == a6)
    {
      v124 = *(unsigned __int8 *)(a2 + 52);
      v126 = *(_QWORD *)a2;
      v125 = *(_QWORD *)(a2 + 8);
      v127 = byte_1C98326D3[(v125 & 0xC0) + (v124 >> 1)];
      LODWORD(v128) = v125 - v127;
      if (*(_QWORD *)a2 < (unint64_t)((v125 - v127) << 55))
        v128 = v128;
      else
        v128 = byte_1C98326D3[(v125 & 0xC0) + (v124 >> 1)];
      if (*(_QWORD *)a2 < (unint64_t)((v125 - v127) << 55))
      {
        v129 = 0;
      }
      else
      {
        v126 = *(_QWORD *)a2 - ((v125 - v127) << 55);
        v129 = 1;
      }
      if (*(_QWORD *)a2 < (unint64_t)((v125 - v127) << 55))
        v130 = *(_BYTE *)(a2 + 52);
      else
        v130 = v124 + 1;
      v131 = byte_1C98326D3[2 * v124 + 256 + v129];
      v132 = __clz(v128) - 55;
      v133 = v126 << v132;
      *(_QWORD *)(a2 + 8) = v128 << v132;
      *(_BYTE *)(a2 + 52) = v131;
      v134 = *(_QWORD *)(a2 + 16) + v132;
      if (v134 >= 0)
      {
        v135 = *(unsigned int **)(a2 + 24);
        v137 = *v135;
        v136 = v135 + 1;
        v133 += (unint64_t)bswap32(v137) << v134;
        v134 -= 32;
        if ((unint64_t)v136 >= *(_QWORD *)(a2 + 32))
          v136 = *(unsigned int **)(a2 + 32);
        *(_QWORD *)(a2 + 24) = v136;
      }
      *(_QWORD *)(a2 + 16) = v134;
      *(_QWORD *)a2 = v133;
      if ((v130 & 1) != 0)
        v138 = 0;
      else
        v138 = 3;
      v123 = *(_BYTE **)(a1 + 16);
    }
    else
    {
      v138 = 0;
    }
    if (v123[278] && !v138 && v123[286] <= a6 && v123[287] >= a6)
    {
      v139 = sub_1C970AEF8((uint64_t *)a2);
      *v54 = *v54 & 0xFFF3 | (4 * (v139 != 0));
      v123 = (_BYTE *)v12[2];
      if (v139)
      {
        v140 = v12;
        __p[0] = 0;
        __p[1] = 0;
        v439 = 0;
        v440 = 0;
        v441 = 0;
        v442 = 0;
        v141 = v123[2148];
        v142 = v141 < 3;
        v143 = v141 < 2;
        v144 = v123[284] << (2 * a6);
        v145 = v123[285] << (2 * a6 - (v141 < 2) - (v141 < 3) + 1);
        if (!v141)
          v145 = 0;
        v146 = v145 + v144 + 7;
        v147 = *(_QWORD *)(a2 + 24);
        v148 = (unsigned int *)(v147 + ((*(_QWORD *)(a2 + 16) - 16) >> 3));
        if (*(_QWORD *)(a2 + 32) - (_QWORD)v148 >= v146 >> 3
          && (v149 = v146 >> 3, sub_1C9710CD0(a2, (unsigned __int8 *)v148 + (v146 >> 3)), v147))
        {
          sub_1C971B944((uint64_t)__p, v148, v149);
          v12 = v140;
          (*(void (**)(void **, uint64_t, _QWORD))(v140[285] + 528))(__p, v16, *(unsigned __int8 *)(v140[2] + 284));
          v150 = v140[2];
          if (*(_BYTE *)(v150 + 2148))
            (*(void (**)(void **, _QWORD, _QWORD, _QWORD))(v140[285] + 536))(__p, (1 << (a6 - v142)), (1 << (a6 - v143)), *(unsigned __int8 *)(v150 + 285));
          v151 = (_QWORD *)v140[1];
          v152 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(_QWORD *)&vdup_n_s32((2 << a6) - 64));
          v153 = v151[117];
          v154 = (uint64_t)(int)v426 >> 2;
          v155 = v151[121];
          v156 = v151[116];
          v157 = (uint64_t)(int)v432 >> 2;
          v158 = v151[118];
          if ((int)v16 >= 5)
          {
            v159 = v157 + v156 * v424;
            v160 = vmax_s8(*(int8x8_t *)(v158 + v159), v152);
            *(int8x8_t *)(v155 + v154 + v153 * v422) = vmax_s8(*(int8x8_t *)(v155 + v154 + v153 * v422), v152);
            *(int8x8_t *)(v158 + v159) = v160;
          }
          v161 = v157 + v156 * ((uint64_t)v425 >> 3);
          v162 = v154 + v153 * ((uint64_t)v430 >> 3);
          v163 = vmax_s8(*(int8x8_t *)(v155 + v162), v152);
          v164 = vmax_s8(*(int8x8_t *)(v158 + v161), v152);
          *(int8x8_t *)(v155 + v162) = v163;
          *(int8x8_t *)(v158 + v161) = v164;
          v165 = v140[1];
          if (*(_BYTE *)(v165 + 712))
          {
            v166 = (void *)(a3 + ((int)((*(unsigned __int8 *)(v140[2] + 2117) - 1) & v432) >> 2) + 6352);
            v167 = 1;
            memset((void *)(*(_QWORD *)(v165 + 688) + v154), 1, (uint64_t)(int)v16 >> 2);
            memset(v166, 1, (uint64_t)(int)v16 >> 2);
LABEL_393:
            v216 = 0;
            goto LABEL_394;
          }
          v396 = *(_QWORD *)(v165 + 856) + 12 * (v157 + *(_QWORD *)(v165 + 848) * v154);
          v167 = 1;
          *(_BYTE *)(v396 + 10) = 1;
          *(_WORD *)(v396 + 8) = -1;
          *(_BYTE *)v396 = 1;
          if ((int)v16 < 4)
            goto LABEL_393;
          v397 = 0;
          v398 = *(_OWORD *)v396;
          v399 = 12 * *(_QWORD *)(v140[1] + 848);
          do
          {
            v400 = 0;
            do
            {
              *(_OWORD *)(v396 + v400) = v398;
              v400 += 12;
            }
            while (12 * (v16 >> 2) != v400);
            ++v397;
            v396 += v399;
          }
          while (v397 != v16 >> 2);
          v216 = 0;
          v167 = 1;
        }
        else if (dword_1ED1ACCC0 < 3)
        {
          v167 = 0;
          v216 = 1;
          v12 = v140;
        }
        else
        {
          v216 = 1;
          fwrite("Ran out of bits for PCM\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "Ran out of bits for PCM\n");
          v12 = v140;
          v167 = 0;
        }
LABEL_394:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v17 = v425;
        if ((v216 & 1) != 0)
        {
          v380 = v430;
          if (!v167)
            return 0;
          goto LABEL_376;
        }
LABEL_359:
        v380 = v430;
        if (a9[1])
        {
          LOWORD(v381) = *a9;
          v382 = v12[2];
          v383 = *(unsigned __int8 *)(v382 + 2113) - a7;
          if (v383 <= *(_DWORD *)(v12[4] + 1636))
            LOBYTE(v383) = *(_DWORD *)(v12[4] + 1636);
          v387 = -1 << v383;
          v384 = *(unsigned __int8 *)(v382 + 2117) - 1;
          v385 = v387 & v432;
          v386 = v387 & v426;
          LOWORD(v387) = *a9;
          if ((v385 & v384) != 0)
            v387 = *(__int16 *)(*(_QWORD *)(v12[1] + 776)
                              + 2 * (*(_QWORD *)(v12[1] + 768) * ((uint64_t)v386 >> 3) + ((v385 - 1) >> 3))) >> 9;
          if ((v386 & v384) != 0)
            v381 = *(__int16 *)(*(_QWORD *)(v12[1] + 776)
                              + 2 * (*(_QWORD *)(v12[1] + 768) * ((uint64_t)(v386 - 1) >> 3) + (v385 >> 3))) >> 9;
          v388 = (((_WORD)v387 + (_WORD)v381) << 8) + 256;
          *v427 = v388 & 0xFE00 | *v427 & 0x1FF;
          v389 = *(_DWORD *)(v12[4] + 1636);
          if ((v430 & ~(-1 << v389)) == 0 && v389 <= a6 && (v17 & ~(-1 << v389)) == 0)
            *a9 = v388 >> 9;
        }
        v390 = *(_QWORD *)(v12[1] + 768);
        v391 = vld1q_dup_s16(v427);
        v392 = *(unsigned __int8 *)(v12[2] + 2113) - a7;
        switch(v392)
        {
          case 6:
            *(int16x8_t *)v427 = v391;
            *(int16x8_t *)&v427[v390] = v391;
            *(int16x8_t *)&v427[2 * v390] = v391;
            *(int16x8_t *)&v427[3 * v390] = v391;
            *(int16x8_t *)&v427[4 * v390] = v391;
            *(int16x8_t *)&v427[5 * v390] = v391;
            *(int16x8_t *)&v427[6 * v390] = v391;
            *(int16x8_t *)&v427[7 * v390] = v391;
            break;
          case 5:
            *(_QWORD *)v427 = v391.i64[0];
            *(_QWORD *)&v427[v390] = v391.i64[0];
            *(_QWORD *)&v427[2 * v390] = v391.i64[0];
            *(_QWORD *)&v427[3 * v390] = v391.i64[0];
            break;
          case 4:
            *(_DWORD *)v427 = v391.i32[0];
            *(_DWORD *)&v427[v390] = v391.i32[0];
            break;
        }
LABEL_376:
        v393 = *(unsigned __int8 *)(v12[2] + 2117) - 1;
        v394 = (v393 & v380) != 0 && v380 != *(_DWORD *)(v12[1] + 520);
        v395 = (v393 & v17) != 0 && v17 != *(_DWORD *)(v12[1] + 524);
        return v394 || v395 || sub_1C970AEF8((uint64_t *)a2) == 0;
      }
      a4 = v432;
      a5 = v426;
    }
    v217 = (_BYTE *)(a3 + 6417);
    v218 = *(_QWORD *)(a3 + 32);
    *(_DWORD *)a3 = a6;
    *(_DWORD *)(a3 + 4) = 1;
    *(_DWORD *)(a3 + 8) = v138;
    v219 = *(unsigned __int8 *)(*(_QWORD *)(v218 + 16) + 273);
    if (v138)
      ++v219;
    *(_DWORD *)(a3 + 12) = v219;
    v220 = v123[2117] - 1;
    v221 = v220 & a4;
    v222 = v220 & a5;
    v223 = 1 << (a6 - 3);
    v224 = (unsigned __int8 *)(a3 + (v221 >> 2) + 6352);
    v225 = v12[1];
    v226 = (char *)(*(_QWORD *)(v225 + 688) + ((int)a5 >> 2));
    v227 = *(unsigned __int8 *)(v225 + 712);
    __b = v226;
    if (*(_BYTE *)(v225 + 712))
    {
      if (v222 < 1)
      {
        v228 = 1;
        v229 = 1;
      }
      else
      {
        v228 = *v224;
        v229 = v224[v223];
      }
      if ((a8 & 0xF0) != 0)
      {
        v233 = 0;
        v238 = *v226;
        v239 = v226[v223];
        goto LABEL_239;
      }
      v233 = 0;
    }
    else
    {
      v230 = *(_QWORD *)(v225 + 848);
      v231 = v230 * ((uint64_t)(int)a5 >> 2);
      v232 = *(_QWORD *)(v225 + 856);
      v233 = (unsigned __int8 *)(v232 + 12 * (v231 + ((int)a4 >> 2)));
      if (v222 >= 1
        && (v234 = ((uint64_t)(int)a4 >> 2) + v230 * ((uint64_t)((int)a5 - 1) >> 2), *(_BYTE *)(v232 + 12 * v234 + 10) == 1))
      {
        v235 = (unsigned __int8 *)(v232 + 12 * v234);
        v228 = *v235;
        v229 = v235[12 * v223];
      }
      else
      {
        v228 = 1;
        v229 = 1;
      }
      if ((a8 & 0xF0) != 0)
      {
        v236 = v231 + (((int)a4 - 1) >> 2);
        if (*(_BYTE *)(v232 + 12 * v236 + 10) == 1)
        {
          v237 = (unsigned __int8 *)(v232 + 12 * v236);
          v238 = *v237;
          v239 = v237[12 * v230 * v223];
          goto LABEL_239;
        }
      }
    }
    v238 = 1;
    v239 = 1;
LABEL_239:
    v431 = a8;
    if (v138 == 3)
    {
      v240 = *(_QWORD *)(v225 + 848);
      v443.i64[0] = (uint64_t)v233;
      v443.i64[1] = (uint64_t)&v233[12 * v223];
      v444.i64[0] = (uint64_t)&v233[12 * v223 * v240];
      v444.i64[1] = v444.i64[0] + 12 * v223;
      if (v227)
      {
        v241 = vdupq_n_s64((unint64_t)__p);
        v443 = vorrq_s8((int8x16_t)v241, (int8x16_t)xmmword_1C9862C40);
        v444 = vaddq_s64(v241, (int64x2_t)xmmword_1C9862C50);
        v233 = (unsigned __int8 *)v443.i64[0];
      }
      v242 = 0;
      v413 = a6 - 1;
      v404 = v223;
      v243 = *(unsigned __int8 *)(a2 + 56);
      v244 = *(_QWORD *)a2;
      v245 = *(_QWORD *)(a2 + 8);
      do
      {
        v246 = byte_1C98326D3[(v245 & 0xC0) + (v243 >> 1)];
        v247 = v245 - v246;
        v248 = v244 >= v247 << 55;
        v249 = v244 - (v247 << 55);
        if (v244 < v247 << 55)
          v247 = v247;
        else
          v247 = v246;
        if (v248)
        {
          v244 = v249;
          v250 = 1;
        }
        else
        {
          v250 = 0;
        }
        if (v248)
          v251 = v243 + 1;
        else
          v251 = v243;
        LOBYTE(v243) = byte_1C98326D3[2 * v243 + 256 + v250];
        v252 = __clz(v247) - 55;
        v245 = v247 << v252;
        v244 <<= v252;
        *(_QWORD *)(a2 + 8) = v245;
        *(_BYTE *)(a2 + 56) = v243;
        v253 = *(_QWORD *)(a2 + 16) + v252;
        if (v253 >= 0)
        {
          v254 = *(unsigned int **)(a2 + 24);
          v256 = *v254;
          v255 = v254 + 1;
          v244 += (unint64_t)bswap32(v256) << v253;
          v253 -= 32;
          if ((unint64_t)v255 >= *(_QWORD *)(a2 + 32))
            v255 = *(unsigned int **)(a2 + 32);
          *(_QWORD *)(a2 + 24) = v255;
        }
        v243 = v243;
        *(_QWORD *)(a2 + 16) = v253;
        *(_QWORD *)a2 = v244;
        v434[v242++] = v251 & 1;
      }
      while (v242 != 4);
      v257 = sub_1C9707404((unint64_t *)a2, v228, v238, v434[0]);
      *v233 = v257;
      v258 = sub_1C9707404((unint64_t *)a2, v229, v257, v434[1]);
      v259 = (unsigned __int8 *)v443.i64[1];
      *(_BYTE *)v443.i64[1] = v258;
      v260 = sub_1C9707404((unint64_t *)a2, *v233, v239, v434[2]);
      v261 = (unsigned __int8 *)v444.i64[0];
      *(_BYTE *)v444.i64[0] = v260;
      v262 = sub_1C9707404((unint64_t *)a2, *v259, v260, v434[3]);
      v263 = (unsigned __int8 *)v444.i64[1];
      *(_BYTE *)v444.i64[1] = v262;
      if (*(_BYTE *)(v12[2] + 2148))
        v264 = sub_1C9708900((uint64_t *)a2, *v233);
      else
        v264 = 0;
      for (i = 0; i != 4; ++i)
      {
        v285 = v443.i64[i];
        *(_BYTE *)(v285 + 10) = 1;
        *(_BYTE *)(v285 + 1) = v264;
        *(_WORD *)(v285 + 8) = -1;
      }
      v286 = v12;
      if (*(_BYTE *)(v12[2] + 2148) == 3)
      {
        for (j = 1; j != 4; ++j)
        {
          v288 = (unsigned __int8 *)v443.i64[j];
          v288[1] = sub_1C9708900((uint64_t *)a2, *v288);
        }
      }
      v289 = v286[1];
      if (*(_BYTE *)(v289 + 712))
      {
        v290 = (uint64_t)(1 << v413) >> 2;
        memset(__b, *v259, v290);
        memset(&__b[v404], *v263, v290);
        memset(v224, *v261, v290);
        memset(&v224[v404], *v263, v290);
        v291 = a9;
        v292 = a6;
        v293 = v432;
        v294 = v426;
      }
      else
      {
        v292 = a6;
        v291 = a9;
        v293 = v432;
        v294 = v426;
        if (a6 >= 4 && 1 << v413 >= 4)
        {
          v304 = 0;
          v305 = *(_QWORD *)(v289 + 848);
          v306 = *(_OWORD *)v233;
          v307 = *(_OWORD *)v259;
          v308 = *(_OWORD *)v261;
          v309 = (1 << v413) >> 2;
          v310 = *(_OWORD *)v263;
          v311 = 12 * v305;
          do
          {
            v312 = 0;
            do
            {
              *(_OWORD *)&v233[v312] = v306;
              *(_OWORD *)&v261[v312] = v308;
              v312 += 12;
            }
            while (12 * v309 != v312);
            ++v304;
            v261 += v311;
            v233 += v311;
          }
          while (v304 != (_DWORD)v309);
          v313 = 0;
          v314 = 12 * v305;
          do
          {
            v315 = 0;
            do
            {
              *(_OWORD *)&v259[v315] = v307;
              *(_OWORD *)&v263[v315] = v310;
              v315 += 12;
            }
            while (12 * v309 != v315);
            ++v313;
            v263 += v314;
            v259 += v314;
          }
          while (v313 != (_DWORD)v309);
        }
      }
      for (k = 0; k != 4; ++k)
      {
        v317 = (_BYTE *)v443.i64[k];
        *(v217 - 1) = *v317;
        *v217 = v317[1];
        v217 += 2;
      }
      *(_WORD *)(a3 + 6424) = *(_WORD *)(a3 + 6416);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 776)
                           + 2 * (v422 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 768) * v424);
      *(_QWORD *)(a3 + 24) = v291;
      v435 = v292;
      v436 = 0;
      v437 = v431;
      v318 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(a3 + 6400);
      v319 = *(_QWORD *)(a3 + 6408);
      v320 = (_QWORD *)(a3 + (v319 >> 1));
      if ((v319 & 1) != 0)
        v318 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v320 + v318);
      v318(v320, v293, v294, 0);
      v12 = v286;
LABEL_358:
      v17 = v425;
      goto LABEL_359;
    }
    BYTE2(__p[1]) = 1;
    LOWORD(__p[1]) = -1;
    v265 = *(unsigned __int8 *)(a2 + 56);
    v267 = *(_QWORD *)a2;
    v266 = *(_QWORD *)(a2 + 8);
    v268 = byte_1C98326D3[(v266 & 0xC0) + (v265 >> 1)];
    LODWORD(v269) = v266 - v268;
    if (*(_QWORD *)a2 < (unint64_t)((v266 - v268) << 55))
      v269 = v269;
    else
      v269 = byte_1C98326D3[(v266 & 0xC0) + (v265 >> 1)];
    if (*(_QWORD *)a2 < (unint64_t)((v266 - v268) << 55))
    {
      v270 = 0;
    }
    else
    {
      v267 = *(_QWORD *)a2 - ((v266 - v268) << 55);
      v270 = 1;
    }
    if (*(_QWORD *)a2 < (unint64_t)((v266 - v268) << 55))
      v271 = *(_BYTE *)(a2 + 56);
    else
      v271 = v265 + 1;
    v272 = byte_1C98326D3[2 * v265 + 256 + v270];
    v273 = __clz(v269) - 55;
    v274 = v267 << v273;
    *(_QWORD *)(a2 + 8) = v269 << v273;
    *(_BYTE *)(a2 + 56) = v272;
    v275 = a5;
    v276 = a4;
    v277 = *(_QWORD *)(a2 + 16) + v273;
    if (v277 >= 0)
    {
      v278 = *(unsigned int **)(a2 + 24);
      v280 = *v278;
      v279 = v278 + 1;
      v274 += (unint64_t)bswap32(v280) << v277;
      v277 -= 32;
      if ((unint64_t)v279 >= *(_QWORD *)(a2 + 32))
        v279 = *(unsigned int **)(a2 + 32);
      *(_QWORD *)(a2 + 24) = v279;
    }
    *(_QWORD *)(a2 + 16) = v277;
    *(_QWORD *)a2 = v274;
    v281 = sub_1C9707404((unint64_t *)a2, v228, v238, v271 & 1);
    v282 = v281;
    LOWORD(__p[0]) = v281;
    if (*(_BYTE *)(v12[2] + 2148))
    {
      v283 = sub_1C9708900((uint64_t *)a2, v281);
      BYTE1(__p[0]) = v283;
    }
    else
    {
      v283 = 0;
    }
    v295 = v12[1];
    if (*(_BYTE *)(v295 + 712))
    {
      v296 = (uint64_t)(int)v16 >> 2;
      memset(__b, v282, v296);
      memset(v224, v282, v296);
    }
    else
    {
      v297 = *(_OWORD *)__p;
      if ((int)v16 >= 4)
      {
        v298 = 0;
        v299 = 12 * *(_QWORD *)(v295 + 848);
        v300 = v276;
        v301 = v275;
        v302 = v431;
        do
        {
          v303 = 0;
          do
          {
            *(_OWORD *)&v233[v303] = v297;
            v303 += 12;
          }
          while (12 * (v16 >> 2) != v303);
          ++v298;
          v233 += v299;
        }
        while (v298 != v16 >> 2);
        v283 = BYTE1(__p[0]);
        goto LABEL_308;
      }
      v283 = BYTE1(__p[0]);
    }
    v300 = v276;
    v301 = v275;
    v302 = v431;
LABEL_308:
    v321 = 0;
    *(_BYTE *)(a3 + 6424) = __p[0];
    *(_BYTE *)(a3 + 6425) = v283;
    do
    {
      *(_WORD *)(a3 + 6416 + v321) = *(_WORD *)(a3 + 6424);
      v321 += 2;
    }
    while (v321 != 8);
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 776)
                         + 2 * (v422 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 768) * v424);
    *(_QWORD *)(a3 + 24) = a9;
    v443.i64[0] = a6;
    v443.i32[2] = v302;
    v322 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(a3 + 6400);
    v323 = *(_QWORD *)(a3 + 6408);
    v324 = (_QWORD *)(a3 + (v323 >> 1));
    if ((v323 & 1) != 0)
      v322 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v324 + v322);
    v322(v324, v300, v301, 0);
    goto LABEL_358;
  }
  v423 = v39;
  v48 = a4 + ((int)v16 >> 1);
  v49 = a5 + ((int)v16 >> 1);
  v429 = v15;
  result = sub_1C9703EE4(a1, a2, a3);
  if (v48 < v14 && (_DWORD)result)
    result = sub_1C9703EE4(v12, a2, a3);
  v51 = v429;
  v52 = a3;
  if (v49 < v429 && (_DWORD)result)
  {
    result = sub_1C9703EE4(v12, a2, a3);
    v51 = v429;
    v52 = a3;
  }
  if (v49 < v51 && v48 < v14 && (_DWORD)result)
    result = sub_1C9703EE4(v12, a2, v52);
  if (a9[1])
  {
    if (*(_DWORD *)(v12[4] + 1636) == a6)
      *a9 = v423;
  }
  return result;
}

void sub_1C9705C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C9705CBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, unsigned int *a7, int32x2_t a8)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned __int8 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned __int8 v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  _QWORD *v92;
  int8x8_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int8x8_t v101;
  uint64_t v102;
  uint64_t v103;
  int8x8_t v104;
  int8x8_t v105;
  int32x2_t v106;
  uint64_t v107;
  _BOOL4 v108;
  int v109;
  uint64_t v110;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  unsigned __int8 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t (*v128)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  int8x8_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int8x8_t v143;
  uint64_t v144;
  uint64_t v145;
  int8x8_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _BOOL4 v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL4 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (**v160)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t *v161;
  uint64_t v162;
  uint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char v170;
  unsigned __int8 v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t (*v178)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t);
  _QWORD *v179;
  __int16 v180;
  __int16 v181;
  uint64_t v182;
  int v183;
  _BOOL4 v184;
  uint64_t v185;
  _BOOL8 v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195[3];
  int v196;

  v14 = *(_QWORD *)(a1 + 32);
  v15 = a7[1];
  v16 = (int)*a7;
  if (v15 == 1)
  {
    v18 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v15)
  {
    v18 = 0;
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 8);
    v18 = v17 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(_BYTE *)(*(_QWORD *)(v14 + 16) + 272))
        v19 = 1;
      else
        v19 = v17 == 0;
      v18 = !v19;
    }
  }
  v20 = *(_QWORD *)(v14 + 16);
  if ((int)v16 <= *(unsigned __int8 *)(v20 + 2114))
    goto LABEL_33;
  v21 = (int)v16 > *(unsigned __int8 *)(v20 + 2115) || v18;
  if ((v21 & 1) != 0)
  {
    v22 = 1;
    goto LABEL_34;
  }
  if (v15 >= *(_DWORD *)(a1 + 12))
  {
LABEL_33:
    v22 = 0;
  }
  else
  {
    v23 = *(uint64_t **)(a1 + 40);
    v24 = ((unsigned __int8 *)v23 - v16)[76];
    v26 = *v23;
    v25 = v23[1];
    v27 = byte_1C98326D3[(v25 & 0xC0) + (v24 >> 1)];
    LODWORD(v28) = v25 - v27;
    if (*v23 < (unint64_t)((v25 - v27) << 55))
      v28 = v28;
    else
      v28 = byte_1C98326D3[(v25 & 0xC0) + (v24 >> 1)];
    if (*v23 < (unint64_t)((v25 - v27) << 55))
    {
      v29 = 0;
    }
    else
    {
      v26 = *v23 - ((v25 - v27) << 55);
      v29 = 1;
    }
    if (*v23 < (unint64_t)((v25 - v27) << 55))
      v30 = ((_BYTE *)v23 - v16)[76];
    else
      v30 = v24 + 1;
    v31 = byte_1C98326D3[2 * v24 + 256 + v29];
    v32 = __clz(v28) - 55;
    v33 = v26 << v32;
    v23[1] = v28 << v32;
    ((_BYTE *)v23 - v16)[76] = v31;
    v34 = v23[2] + v32;
    if (v34 >= 0)
    {
      v35 = (unsigned int *)v23[3];
      v37 = *v35;
      v36 = v35 + 1;
      v33 += (unint64_t)bswap32(v37) << v34;
      v34 -= 32;
      if ((unint64_t)v36 >= v23[4])
        v36 = (unsigned int *)v23[4];
      v23[3] = (uint64_t)v36;
    }
    v23[2] = v34;
    *v23 = v33;
    v22 = v30 & 1;
  }
LABEL_34:
  if ((int)v16 < 3)
  {
    v39 = a6;
    if (v22)
    {
LABEL_53:
      v58 = v16 - 1;
      v59 = ((1 << v58) + a2);
      v60 = ((1 << v58) + a3);
      v195[0] = v58;
      v195[1] = v15 + 1;
      v195[2] = a5;
      if ((a5 & 0xF0) != 0)
        v61 = 15;
      else
        v61 = 0;
      v62 = v61 | a5 & 0x1FF0;
      if ((a5 & 0x1E00) != 0)
        v63 = 122880;
      else
        v63 = 0;
      sub_1C9705CBC(a1, a2, a3, 0, v62 | v63, v39, v195);
      sub_1C9705CBC(a1, v59, a3, 1, a5 & 0x1FE00 | (((a5 & 0x1E00) != 0) << 8) | 0xF0, v39, v195);
      sub_1C9705CBC(a1, a2, v60, 2, a5 | (((a5 & 0xF0) != 0) << 8) | 0x1FE00u, v39, v195);
      return sub_1C9705CBC(a1, v59, v60, 3, 8176, v39, v195);
    }
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v40 = *(_QWORD *)(a1 + 40) + 76;
    v41 = 1;
    do
    {
      v42 = v41;
      if (((a6 >> v38) & 1) != 0)
      {
        v43 = *(uint64_t **)(a1 + 40);
        v44 = *(unsigned __int8 *)(v40 + v15);
        v46 = *v43;
        v45 = v43[1];
        v47 = byte_1C98326D3[(v45 & 0xC0) + (v44 >> 1)];
        LODWORD(v48) = v45 - v47;
        if (*v43 < (unint64_t)((v45 - v47) << 55))
          v48 = v48;
        else
          v48 = byte_1C98326D3[(v45 & 0xC0) + (v44 >> 1)];
        if (*v43 < (unint64_t)((v45 - v47) << 55))
        {
          v49 = 0;
        }
        else
        {
          v46 = *v43 - ((v45 - v47) << 55);
          v49 = 1;
        }
        if (*v43 < (unint64_t)((v45 - v47) << 55))
          v50 = *(_BYTE *)(v40 + v15);
        else
          v50 = v44 + 1;
        v51 = byte_1C98326D3[2 * v44 + 256 + v49];
        v52 = __clz(v48) - 55;
        v53 = v46 << v52;
        v43[1] = v48 << v52;
        *(_BYTE *)(v40 + v15) = v51;
        v54 = v43[2] + v52;
        if (v54 >= 0)
        {
          v55 = (unsigned int *)v43[3];
          v57 = *v55;
          v56 = v55 + 1;
          v53 += (unint64_t)bswap32(v57) << v54;
          v54 -= 32;
          if ((unint64_t)v56 >= v43[4])
            v56 = (unsigned int *)v43[4];
          v43[3] = (uint64_t)v56;
        }
        v43[2] = v54;
        *v43 = v53;
        v39 = ((v50 & 1) << v38) | v39;
      }
      v41 = 0;
      v38 = 1;
    }
    while ((v42 & 1) != 0);
    if (v22)
      goto LABEL_53;
  }
  v195[0] = a5;
  v65 = *(_QWORD *)(a1 + 32);
  v66 = *(_QWORD *)(v65 + 8);
  v192 = *(_QWORD *)(v66 + 416);
  v190 = *(_QWORD *)(v66 + 400) + ((v192 * (int)a3 + (int)a2) << *(_BYTE *)(v66 + 531));
  v68 = *a7;
  v67 = a7[1];
  v69 = 1;
  v70 = 1 << v68;
  v71 = *(_QWORD *)(v65 + 2280);
  if (*(_DWORD *)(a1 + 4) != 1 && !(v67 | v39))
    goto LABEL_84;
  v19 = v67 == 0;
  v72 = *(uint64_t **)(a1 + 40);
  if (v19)
    v73 = (char *)v72 + 1;
  else
    v73 = *(char **)(a1 + 40);
  v74 = v73[74];
  v76 = *v72;
  v75 = v72[1];
  v77 = byte_1C98326D3[(v75 & 0xC0) + (v74 >> 1)];
  LODWORD(v78) = v75 - v77;
  if (*v72 < (unint64_t)((v75 - v77) << 55))
    v78 = v78;
  else
    v78 = byte_1C98326D3[(v75 & 0xC0) + (v74 >> 1)];
  if (*v72 < (unint64_t)((v75 - v77) << 55))
  {
    v79 = 0;
  }
  else
  {
    v76 = *v72 - ((v75 - v77) << 55);
    v79 = 1;
  }
  if (*v72 < (unint64_t)((v75 - v77) << 55))
    v80 = v73[74];
  else
    v80 = v74 + 1;
  v81 = byte_1C98326D3[2 * v74 + 256 + v79];
  v82 = __clz(v78) - 55;
  v83 = v76 << v82;
  v72[1] = v78 << v82;
  v73[74] = v81;
  v84 = v72[2] + v82;
  if (v84 >= 0)
  {
    v85 = (unsigned int *)v72[3];
    v87 = *v85;
    v86 = v85 + 1;
    v83 += (unint64_t)bswap32(v87) << v84;
    v84 -= 32;
    if ((unint64_t)v86 >= v72[4])
      v86 = (unsigned int *)v72[4];
    v72[3] = (uint64_t)v86;
  }
  v72[2] = v84;
  *v72 = v83;
  v69 = v80 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    v185 = *(_QWORD *)(a1 + 32);
    v88 = sub_1C9706788(v185, a2, a3, 1 << v68, 1 << v68, v195, a8);
    HIDWORD(v194) = *(unsigned __int8 *)(a1 + 6425);
    if (HIDWORD(v194) == 35)
      HIDWORD(v194) = *(unsigned __int8 *)(a1 + 6416);
    v89 = *(unsigned __int8 *)(a1 + 6424);
    if ((int)v68 > 3)
    {
      v188 = 0;
      LODWORD(v194) = 0;
    }
    else
    {
      v188 = byte_1C9859C98[v89];
      LODWORD(v194) = byte_1C9859C98[HIDWORD(v194)];
    }
    v186 = (_DWORD)v68 == 2;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(v185 + 16) + 403))
        v91 = (v89 & 0xFFFFFFEF) == 10;
      else
        v91 = 0;
      v90 = v91;
    }
    else
    {
      v90 = 0;
    }
    sub_1C9706C38(v71 + 8, v89, v68, v195[0], v88, v90, v192, v190);
    v92 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v93 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(_QWORD *)&vdup_n_s32((2 << v68) - 64));
    v94 = v92[117];
    v95 = (uint64_t)(int)a3 >> 2;
    v96 = v92[121];
    v97 = v92[116];
    v98 = (uint64_t)(int)a2 >> 2;
    v99 = v92[118];
    if (v70 >= 5)
    {
      v100 = v98 + v97 * ((uint64_t)(int)a3 >> 3);
      v101 = vmax_s8(*(int8x8_t *)(v99 + v100), v93);
      *(int8x8_t *)(v96 + v95 + v94 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v96+ v95+ v94 * ((uint64_t)(int)a2 >> 3)), v93);
      *(int8x8_t *)(v99 + v100) = v101;
    }
    v102 = v98 + v97 * ((uint64_t)(v70 + (int)a3) >> 3);
    v103 = v95 + v94 * ((uint64_t)(v70 + (int)a2) >> 3);
    v104 = vmax_s8(*(int8x8_t *)(v96 + v103), v93);
    v105 = vmax_s8(*(int8x8_t *)(v99 + v102), v93);
    *(int8x8_t *)(v96 + v103) = v104;
    *(int8x8_t *)(v99 + v102) = v105;
  }
  else
  {
LABEL_84:
    v188 = 0;
    v194 = 0;
    v186 = 0;
  }
  sub_1C9706DCC((_QWORD *)a1, a2, a3, v69, v39);
  result = *(_QWORD *)(a1 + 32);
  v107 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v107 + 11))
    v108 = (**(_WORD **)(a1 + 48) & 0x100) == 0;
  else
    v108 = 0;
  v109 = *(unsigned __int8 *)(v107 + 1615) + 2;
  if (v69)
  {
    v110 = a1 + 6416;
    *(_BYTE *)(a1 + 6426) = 0;
    v183 = v109;
    v184 = v108;
    if ((int)v68 <= v109 && v108)
    {
      v112 = *(uint64_t **)(a1 + 40);
      v113 = *((unsigned __int8 *)v112 + 81);
      v115 = *v112;
      v114 = v112[1];
      v116 = byte_1C98326D3[(v114 & 0xC0) + (v113 >> 1)];
      LODWORD(v117) = v114 - v116;
      if (*v112 < (unint64_t)((v114 - v116) << 55))
        v117 = v117;
      else
        v117 = byte_1C98326D3[(v114 & 0xC0) + (v113 >> 1)];
      if (*v112 < (unint64_t)((v114 - v116) << 55))
      {
        v118 = 0;
      }
      else
      {
        v115 = *v112 - ((v114 - v116) << 55);
        v118 = 1;
      }
      if (*v112 < (unint64_t)((v114 - v116) << 55))
        v119 = *((_BYTE *)v112 + 81);
      else
        v119 = v113 + 1;
      v120 = byte_1C98326D3[2 * v113 + 256 + v118];
      v121 = __clz(v117) - 55;
      v122 = v115 << v121;
      v112[1] = v117 << v121;
      *((_BYTE *)v112 + 81) = v120;
      v123 = v112[2] + v121;
      if (v123 >= 0)
      {
        v124 = (unsigned int *)v112[3];
        v126 = *v124;
        v125 = v124 + 1;
        v122 += (unint64_t)bswap32(v126) << v123;
        v123 -= 32;
        if ((unint64_t)v125 >= v112[4])
          v125 = (unsigned int *)v112[4];
        v112[3] = (uint64_t)v125;
      }
      v112[2] = v123;
      *v112 = v122;
      v110 = a1 + 6416;
      *(_BYTE *)(a1 + 6426) = v119 & 1;
    }
    *(_BYTE *)(v110 + 11) = sub_1C9707624(a1, 0, *(unsigned __int8 *)(v110 + 8));
    v127 = a1 + 16 * ((int)v68 > 2);
    v128 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(v127 + 6368);
    v129 = *(_QWORD *)(v127 + 6376);
    v130 = (_QWORD *)(a1 + (v129 >> 1));
    if ((v129 & 1) != 0)
      v128 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*v130 + v128);
    v131 = v128(v130, a1 + 64, v68, v188, 0);
    v132 = v71 + 552;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      v133 = (int)v68 - 2;
    }
    else
    {
      v133 = (int)v68 - 2;
      if (!*(_BYTE *)(a1 + 6426))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v132 + 16 * v133 + 8 * v186))(v190, v192, a1 + 64, 0, v131);
LABEL_126:
        v70 = 1 << v68;
        result = *(_QWORD *)(a1 + 32);
        if (*(_DWORD *)(a1 + 4) != 1)
        {
          v134 = *(_QWORD **)(result + 8);
          v135 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(_QWORD *)&vdup_n_s32((2 << v68) - 64));
          v136 = v134[117];
          v137 = (uint64_t)(int)a3 >> 2;
          v138 = v134[121];
          v139 = v134[116];
          v140 = (uint64_t)(int)a2 >> 2;
          v141 = v134[118];
          if (v70 >= 5)
          {
            v142 = v140 + v139 * ((uint64_t)(int)a3 >> 3);
            v143 = vmax_s8(*(int8x8_t *)(v141 + v142), v135);
            *(int8x8_t *)(v138 + v137 + v136 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v138+ v137+ v136 * ((uint64_t)(int)a2 >> 3)), v135);
            *(int8x8_t *)(v141 + v142) = v143;
          }
          v144 = v140 + v139 * ((uint64_t)(v70 + (int)a3) >> 3);
          v145 = v137 + v136 * ((uint64_t)(v70 + (int)a2) >> 3);
          v146 = vmax_s8(*(int8x8_t *)(v138 + v145), v135);
          v106 = (int32x2_t)vmax_s8(*(int8x8_t *)(v141 + v144), v135);
          *(int8x8_t *)(v138 + v145) = v146;
          *(int32x2_t *)(v141 + v144) = v106;
          result = *(_QWORD *)(a1 + 32);
        }
        v109 = v183;
        v108 = v184;
        goto LABEL_131;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v132 + 8 * v133 + 248))(v190, v192, a1 + 64, 0);
    goto LABEL_126;
  }
LABEL_131:
  v147 = *(_QWORD *)(result + 8);
  v148 = *(_QWORD *)(v147 + 424);
  if ((int)v68 < 3)
  {
    if (a4 != 3)
      return result;
    v195[0] = a7[2];
    LODWORD(a2) = a2 - v70;
    LODWORD(a3) = a3 - v70;
  }
  else
  {
    v68 = (v68 - 1);
    v70 >>= 1;
  }
  v149 = a2 & 0xFFFFFFFE;
  v150 = *(_QWORD *)(v147 + 408) + ((v148 * ((uint64_t)(int)a3 >> 1) + (int)(a2 & 0xFFFFFFFE)) << *(_BYTE *)(v147 + 531));
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    v151 = v108;
    v152 = v109;
    v153 = sub_1C9706788(result, v149, a3 & 0xFFFFFFFE, 2 * v70, 2 * v70, v195, v106);
    result = sub_1C9708548(v71 + 8, HIDWORD(v194), v68, v195[0], v153, v148, v150);
    v109 = v152;
    v108 = v151;
  }
  if ((_DWORD)v39)
  {
    v189 = v150;
    v191 = v148;
    v193 = v71;
    v154 = 0;
    v155 = a1 + 64;
    v156 = a1 + 64 + 2 * (v70 * v70);
    v196 = 0;
    v157 = (int)v68 <= v109 && v108;
    v158 = v68;
    v159 = a1 + 16 * ((int)v68 > 2);
    v160 = (uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))(v159 + 6368);
    v161 = (uint64_t *)(v159 + 6376);
    v187 = a1 + 64;
    do
    {
      v162 = v154;
      if ((v39 & 1) != 0)
      {
        *(_BYTE *)(a1 + 6426) = 0;
        if (v157)
        {
          v163 = *(uint64_t **)(a1 + 40);
          v164 = *((unsigned __int8 *)v163 + 82);
          v166 = *v163;
          v165 = v163[1];
          v167 = byte_1C98326D3[(v165 & 0xC0) + (v164 >> 1)];
          LODWORD(v168) = v165 - v167;
          if (*v163 < (unint64_t)((v165 - v167) << 55))
            v168 = v168;
          else
            v168 = byte_1C98326D3[(v165 & 0xC0) + (v164 >> 1)];
          if (*v163 < (unint64_t)((v165 - v167) << 55))
          {
            v169 = 0;
          }
          else
          {
            v166 = *v163 - ((v165 - v167) << 55);
            v169 = 1;
          }
          if (*v163 < (unint64_t)((v165 - v167) << 55))
            v170 = *((_BYTE *)v163 + 82);
          else
            v170 = v164 + 1;
          v171 = byte_1C98326D3[2 * v164 + 256 + v169];
          v172 = __clz(v168) - 55;
          v173 = v166 << v172;
          v163[1] = v168 << v172;
          *((_BYTE *)v163 + 82) = v171;
          v174 = v163[2] + v172;
          if (v174 >= 0)
          {
            v175 = (unsigned int *)v163[3];
            v177 = *v175;
            v176 = v175 + 1;
            v173 += (unint64_t)bswap32(v177) << v174;
            v174 -= 32;
            if ((unint64_t)v176 >= v163[4])
              v176 = (unsigned int *)v163[4];
            v163[3] = (uint64_t)v176;
          }
          v163[2] = v174;
          *v163 = v173;
          *(_BYTE *)(a1 + 6426) = v170 & 1;
        }
        *(_BYTE *)(a1 + 6427) = sub_1C9707624(a1, 1u, SHIDWORD(v194));
        v178 = *v160;
        v179 = (_QWORD *)(a1 + (*v161 >> 1));
        if ((*v161 & 1) != 0)
          v178 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))(*v179 + v178);
        ++v154;
        v180 = v178(v179, v155, v158, v194, v162 + 1);
        if (*(_BYTE *)(a1 + 6426))
          v181 = -1;
        else
          v181 = v180;
        *((_WORD *)&v196 + v162) = v181;
      }
      else
      {
        ++v154;
      }
      LODWORD(v39) = v39 >> 1;
      v155 = v156;
    }
    while (!v162);
    v182 = v193 + 552 + 8 * ((int)v158 - 2);
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v182 + 280))(v189, v191, v187, v156, 0);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(v182 + 128))(v189, v191, v187, v156, 0, &v196);
  }
  return result;
}

uint64_t sub_1C9706788(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int *a6, int32x2_t a7)
{
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int8x16_t v14;
  int32x4_t v15;
  uint32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  uint32x4_t v19;
  int8x16_t v20;
  uint64_t v21;
  int v23;
  unsigned int v24;
  int v25;
  int8x16_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  uint32x4_t v32;
  int8x16_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;

  v7 = *a6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v8 + 524);
  if ((*a6 & 0x1E000) != 0 && (v10 = *(_DWORD *)(v8 + 520), a2 + 2 * a4 > v10))
  {
    v7 &= 0xFFFE1FFF;
    v11 = v10 - (a4 + a2);
    if (v11 >= 8)
    {
      v12 = v11 >> 3;
      v13 = ((v11 >> 3) + 3) & 0x3FFFFFFC;
      v14 = (int8x16_t)v7;
      v15 = (int32x4_t)xmmword_1C9862C30;
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      do
      {
        v18 = v14;
        v19 = (uint32x4_t)v15;
        v14 = vorrq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)v15), v14);
        v15 = vaddq_s32(v15, v17);
        v13 -= 4;
      }
      while (v13);
      a7.i32[0] = v12 - 1;
      v20 = vbslq_s8((int8x16_t)vcgtq_u32(v19, (uint32x4_t)vdupq_lane_s32(a7, 0)), v18, v14);
      a7 = (int32x2_t)vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      v7 = a7.i32[0] | a7.i32[1];
    }
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  if ((v7 & 0xF) != 0 && a3 + 2 * a5 > v9)
  {
    v7 &= 0xFFFFFFF0;
    v23 = v9 - (a5 + a3);
    if (v23 >= 8)
    {
      v24 = v23 >> 3;
      v25 = ((v23 >> 3) + 3) & 0x3FFFFFFC;
      v26 = (int8x16_t)v7;
      v27 = (int32x4_t)xmmword_1C9862C30;
      v28 = vdupq_n_s32(a5 >> 3);
      v29.i64[0] = 0x100000001;
      v29.i64[1] = 0x100000001;
      v30.i64[0] = 0x400000004;
      v30.i64[1] = 0x400000004;
      do
      {
        v31 = v26;
        v32 = (uint32x4_t)v27;
        v26 = vorrq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)vaddq_s32(v28, (int32x4_t)vmvnq_s8((int8x16_t)v27))), v26);
        v27 = vaddq_s32(v27, v30);
        v25 -= 4;
      }
      while (v25);
      a7.i32[0] = v24 - 1;
      v33 = vbslq_s8((int8x16_t)vcgtq_u32(v32, (uint32x4_t)vdupq_lane_s32(a7, 0)), v31, v26);
      *(int8x8_t *)v33.i8 = vorr_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
      v7 = v33.i32[0] | v33.i32[1];
    }
    v21 = 1;
  }
  *a6 = v7;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) && *(_BYTE *)(a1 + 58) != 2)
  {
    v34 = 0;
    *a6 = 0;
    if ((v7 & 0x100) != 0)
    {
      v35 = *(_QWORD *)(v8 + 856);
      if (v35 && *(_BYTE *)(v35 + 12 * (*(_QWORD *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a2 - 1) >> 2)) + 10) == 1)
      {
        v34 = 256;
        *a6 = 256;
      }
      else
      {
        v34 = 0;
      }
    }
    if (a5 == 4)
    {
      if ((v7 & 0xF) != 0)
      {
        v36 = *(_QWORD *)(v8 + 856);
        if (v36)
        {
          if (*(_BYTE *)(v36 + 12 * (*(_QWORD *)(v8 + 848) * ((uint64_t)(a3 + 4) >> 2) + ((a2 - 1) >> 2)) + 10) == 1)
          {
            v34 |= 0xFu;
            *a6 = v34;
          }
        }
      }
      if ((v7 & 0xF0) != 0)
      {
        v37 = *(_QWORD *)(v8 + 856);
        if (v37)
        {
          if (*(_BYTE *)(v37 + 12 * (*(_QWORD *)(v8 + 848) * ((uint64_t)a3 >> 2) + ((a2 - 1) >> 2)) + 10) == 1)
          {
            v34 |= 0xF0u;
            *a6 = v34;
          }
        }
      }
    }
    else
    {
      v38 = a5 >> 3;
      if ((v7 & 0xF) != 0 && a5 >= 8)
      {
        v39 = 0;
        v40 = *(_QWORD *)(v8 + 856);
        v41 = a3 + 2 * a5 - 8;
        do
        {
          if (v40
            && *(_BYTE *)(v40 + 12 * (((uint64_t)(a2 - 1) >> 2) + *(_QWORD *)(v8 + 848) * ((uint64_t)v41 >> 2)) + 10) == 1)
          {
            v34 |= 1 << v39;
            *a6 = v34;
          }
          ++v39;
          v41 -= 8;
        }
        while (v38 != v39);
      }
      if ((v7 & 0xF0) != 0 && a5 >= 8)
      {
        v42 = 0;
        v43 = *(_QWORD *)(v8 + 856);
        v44 = a5 + a3 - 8;
        do
        {
          if (v43
            && *(_BYTE *)(v43 + 12 * (((uint64_t)(a2 - 1) >> 2) + *(_QWORD *)(v8 + 848) * ((uint64_t)v44 >> 2)) + 10) == 1)
          {
            v34 |= 16 << v42;
            *a6 = v34;
          }
          ++v42;
          v44 -= 8;
        }
        while (v38 != v42);
      }
    }
    if (a4 == 4)
    {
      if ((v7 & 0x1E00) != 0)
      {
        v45 = *(_QWORD *)(v8 + 856);
        if (v45)
        {
          if (*(_BYTE *)(v45 + 12 * (*(_QWORD *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + (a2 >> 2)) + 10) == 1)
          {
            v34 |= 0x1E00u;
            *a6 = v34;
          }
        }
      }
      if ((v7 & 0x1E000) != 0)
      {
        v46 = *(_QWORD *)(v8 + 856);
        if (v46)
        {
          if (*(_BYTE *)(v46 + 12 * (*(_QWORD *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a2 + 4) >> 2)) + 10) == 1)
            *a6 = v34 | 0x1E000;
        }
      }
      return 1;
    }
    v47 = a4 >> 3;
    if ((v7 & 0x1E00) != 0 && a4 >= 8)
    {
      v48 = 0;
      v49 = *(_QWORD *)(v8 + 856);
      v50 = a2;
      do
      {
        if (v49 && *(_BYTE *)(v49 + 12 * (*(_QWORD *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + (v50 >> 2)) + 10) == 1)
        {
          v34 |= 512 << v48;
          *a6 = v34;
        }
        ++v48;
        v50 += 8;
      }
      while (v47 != v48);
    }
    v21 = 1;
    if ((v7 & 0x1E000) != 0 && a4 >= 8)
    {
      v51 = 0;
      v52 = *(_QWORD *)(v8 + 856);
      v53 = a4 + a2;
      do
      {
        if (v52 && *(_BYTE *)(v52 + 12 * (*(_QWORD *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + (v53 >> 2)) + 10) == 1)
        {
          v34 |= 0x2000 << v51;
          *a6 = v34;
        }
        ++v51;
        v53 += 8;
      }
      while (v47 != v51);
      return 1;
    }
  }
  return v21;
}

uint64_t sub_1C9706C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v14;
  int v15;
  uint64_t (**v16)(uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v18;

  v11 = a3;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(a1 + 16 * a5))(a3, a4, a7, a8, &v18);
  if ((a6 & 1) == 0 && (_DWORD)a2 != 1 && !*(_BYTE *)(a1 + 536))
  {
    v14 = 10 - a2;
    if ((int)a2 >= 10)
      v14 = a2 - 10;
    v15 = 26 - a2;
    if ((int)a2 >= 26)
      v15 = a2 - 26;
    if (v14 >= v15)
      v14 = v15;
    if (v14 > byte_1C985A0AA[v11])
      (*(void (**)(uint64_t *, uint64_t *))(a1 + 8 * v11 + 8))(&v18, &v18);
  }
  if ((int)a2 > 9)
  {
    if ((_DWORD)a2 == 10)
    {
      v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 40 * a6 + 8 * v11 + 64);
      return (*v16)(a2, &v18, a7, a8);
    }
    if ((_DWORD)a2 == 26)
    {
      v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 40 * a6 + 8 * v11 + 144);
      return (*v16)(a2, &v18, a7, a8);
    }
LABEL_21:
    v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 8 * v11 + 224);
    return (*v16)(a2, &v18, a7, a8);
  }
  if (!(_DWORD)a2)
  {
    v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 8 * v11 + 264);
    return (*v16)(a2, &v18, a7, a8);
  }
  if ((_DWORD)a2 != 1)
    goto LABEL_21;
  v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 8 * v11 + 304);
  return (*v16)(a2, &v18, a7, a8);
}

_QWORD *sub_1C9706DCC(_QWORD *result, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  _BOOL4 v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  _BYTE *v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  _WORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned __int8 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;

  v5 = result[3];
  if (*(_BYTE *)(v5 + 1))
    v6 = (a4 | a5) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)result[5];
    v10 = *v9;
    v11 = v9[1];
    v12 = (unsigned int *)v9[3];
    v13 = (unsigned int *)v9[4];
    v14 = v9[2];
    v15 = (char *)v9 + 49;
    do
    {
      v16 = *v15;
      v17 = byte_1C98326D3[(v11 & 0xC0) + (v16 >> 1)];
      v18 = v11 - v17;
      v19 = v10 >= v18 << 55;
      v20 = v10 - (v18 << 55);
      if (v10 < v18 << 55)
        v18 = v18;
      else
        v18 = v17;
      if (v19)
      {
        v10 = v20;
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      if (v19)
        v22 = v16 + 1;
      else
        v22 = *v15;
      v23 = __clz(v18) - 55;
      v11 = v18 << v23;
      v10 <<= v23;
      v7 += v23;
      v8 += v22 & 1;
      *v15 = byte_1C98326D3[2 * v16 + 256 + v21];
      if ((v22 & 1) == 0)
        break;
      v15 = (char *)v9 + 50;
    }
    while (v8 < 5);
    v24 = v14 + v7;
    if (v24 >= 0)
    {
      v25 = *v12++;
      v10 += (unint64_t)bswap32(v25) << v24;
      v24 -= 32;
      if (v12 >= v13)
        v12 = v13;
    }
    if (v8)
    {
      v26 = v11 << 54;
      if ((v22 & 1) != 0)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          if (v10 < v26)
            v29 = 0;
          else
            v29 = v11 << 54;
          v30 = v10 - v29;
          v31 = v27 + 1;
          v19 = v10 >= v26;
          v32 = v10 >= v26;
          v10 = 2 * v30;
          v28 += v32 << v27;
          if (!v19)
            break;
          v19 = v27++ >= 0x18;
        }
        while (!v19);
        v24 += v31;
        if (v24 >= 0)
        {
          v33 = *v12++;
          v10 += (unint64_t)bswap32(v33) << v24;
          v24 -= 32;
          if (v12 >= v13)
            v12 = v13;
        }
        v8 += v28;
      }
      else
      {
        v31 = 1;
      }
      v35 = 0;
      v36 = v31 + 1;
      do
      {
        v37 = v35;
        v38 = v10;
        v39 = v10 >= v26;
        if (v10 < v26)
          v40 = 0;
        else
          v40 = v11 << 54;
        v10 = 2 * (v38 - v40);
        v35 = v39 | (2 * v37);
        --v36;
      }
      while (v36 > 1);
      v24 += v31;
      if (v24 >= 0)
      {
        v41 = *v12++;
        v10 += (unint64_t)bswap32(v41) << v24;
        v24 -= 32;
        if (v12 >= v13)
          v12 = v13;
      }
      v42 = (v37 & 0x7FFFFFFF) + v8;
      if (v38 >= v26)
        v42 = -v42;
      v34 = v42 + 52;
    }
    else
    {
      v34 = 52;
    }
    *v9 = v10;
    v9[1] = v11;
    v9[2] = v24;
    v9[3] = (unint64_t)v12;
    v43 = (_BYTE *)result[3];
    v44 = (_QWORD *)result[4];
    v45 = (unsigned __int8 *)v44[2];
    v46 = (_WORD *)result[6];
    v47 = (char)*v43;
    v48 = v45[2113] - (*v46 & 3);
    if (v48 <= *(_DWORD *)(v44[4] + 1636))
      LOBYTE(v48) = *(_DWORD *)(v44[4] + 1636);
    v49 = -1 << v48;
    v50 = v45[2117] - 1;
    v51 = (-1 << v48) & a2;
    v52 = v49 & a3;
    v53 = (char)*v43;
    if ((v51 & v50) != 0)
      v53 = *(__int16 *)(*(_QWORD *)(v44[1] + 776)
                       + 2 * (*(_QWORD *)(v44[1] + 768) * ((uint64_t)v52 >> 3) + ((v51 - 1) >> 3))) >> 9;
    v54 = v45[2097];
    if ((v52 & v50) != 0)
      v47 = *(__int16 *)(*(_QWORD *)(v44[1] + 776)
                       + 2 * (*(_QWORD *)(v44[1] + 768) * ((uint64_t)(v52 - 1) >> 3) + (v51 >> 3))) >> 9;
    v55 = (v34 + 2 * v54 + ((v53 + v47 + 1) >> 1)) % (v54 + 52) - v54;
    *v43 = v55;
    *v46 = *v46 & 0x1FF | ((_WORD)v55 << 9);
    v5 = result[3];
    *(_BYTE *)(v5 + 1) = 0;
  }
  if (a5 && *(_BYTE *)(v5 + 2) && (*(_WORD *)result[6] & 0x100) == 0)
  {
    v56 = (uint64_t *)result[5];
    v57 = *((unsigned __int8 *)v56 + 201);
    v59 = *v56;
    v58 = v56[1];
    v60 = byte_1C98326D3[(v58 & 0xC0) + (v57 >> 1)];
    LODWORD(v61) = v58 - v60;
    if (*v56 < (unint64_t)((v58 - v60) << 55))
      v61 = v61;
    else
      v61 = byte_1C98326D3[(v58 & 0xC0) + (v57 >> 1)];
    if (*v56 < (unint64_t)((v58 - v60) << 55))
    {
      v62 = 0;
    }
    else
    {
      v59 = *v56 - ((v58 - v60) << 55);
      v62 = 1;
    }
    if (*v56 < (unint64_t)((v58 - v60) << 55))
      v63 = *((_BYTE *)v56 + 201);
    else
      v63 = v57 + 1;
    v64 = byte_1C98326D3[2 * v57 + 256 + v62];
    v65 = __clz(v61) - 55;
    v66 = v59 << v65;
    v56[1] = v61 << v65;
    *((_BYTE *)v56 + 201) = v64;
    v67 = v56[2] + v65;
    if (v67 >= 0)
    {
      v68 = (unsigned int *)v56[3];
      v70 = *v68;
      v69 = v68 + 1;
      v66 += (unint64_t)bswap32(v70) << v67;
      v67 -= 32;
      if ((unint64_t)v69 >= v56[4])
        v69 = (unsigned int *)v56[4];
      v56[3] = (uint64_t)v69;
    }
    v56[2] = v67;
    *v56 = v66;
    if ((v63 & 1) != 0)
    {
      v71 = *(_QWORD *)(result[4] + 32);
      v72 = *(unsigned __int8 *)(v71 + 1619);
      if (*(_BYTE *)(v71 + 1619))
      {
        v73 = 0;
        v74 = result[5];
        v75 = *(unsigned __int8 *)(v74 + 202);
        v76 = *(_QWORD *)v74;
        v77 = *(_QWORD *)(v74 + 8);
        do
        {
          v78 = byte_1C98326D3[(v77 & 0xC0) + (v75 >> 1)];
          v79 = v77 - v78;
          v80 = v76 >= v79 << 55;
          v81 = v76 - (v79 << 55);
          if (v76 < v79 << 55)
            v79 = v79;
          else
            v79 = v78;
          if (v80)
          {
            v76 = v81;
            v82 = 1;
          }
          else
          {
            v82 = 0;
          }
          if (v80)
            v83 = v75 + 1;
          else
            v83 = v75;
          LOBYTE(v75) = byte_1C98326D3[2 * v75 + 256 + v82];
          v84 = __clz(v79) - 55;
          v77 = v79 << v84;
          v76 <<= v84;
          *(_QWORD *)(v74 + 8) = v77;
          *(_BYTE *)(v74 + 202) = v75;
          v85 = *(_QWORD *)(v74 + 16) + v84;
          if (v85 >= 0)
          {
            v86 = *(unsigned int **)(v74 + 24);
            v88 = *v86;
            v87 = v86 + 1;
            v76 += (unint64_t)bswap32(v88) << v85;
            v85 -= 32;
            if ((unint64_t)v87 >= *(_QWORD *)(v74 + 32))
              v87 = *(unsigned int **)(v74 + 32);
            *(_QWORD *)(v74 + 24) = v87;
          }
          *(_QWORD *)(v74 + 16) = v85;
          *(_QWORD *)v74 = v76;
          ++v73;
          if ((v83 & 1) == 0)
            break;
          v75 = v75;
        }
        while (v73 < v72);
        v89 = (int)((__PAIR64__(v73, v83 & 1) - 1) >> 32);
        v71 = *(_QWORD *)(result[4] + 32);
      }
      else
      {
        v89 = 0;
      }
      *(_BYTE *)(result[3] + 3) = *(_BYTE *)(v71 + v89 + 1620);
      *(_BYTE *)(result[3] + 4) = *(_BYTE *)(*(_QWORD *)(result[4] + 32) + v89 + 1626);
    }
    else
    {
      *(_WORD *)(result[3] + 3) = 0;
    }
    *(_BYTE *)(result[3] + 2) = 0;
  }
  return result;
}

void *sub_1C9707238(int a1, int a2, uint64_t a3, uint64_t a4, char *__b)
{
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  int v22;

  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &__b[v10];
        v13 = (char *)(a4 + a3 * v10 - 1);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v17 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v17 = -a3;
      if ((a2 & 0x100) != 0)
        v17 = ~a3;
      if ((a2 & 0xF0) != 0)
        v17 = (v10 - 1) * a3 - 1;
      memset(&__b[v10], *(unsigned __int8 *)(a4 + v17), v10);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_BYTE *)(a4 - 1);
        v20 = __b;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      memset(__b, __b[v10], v10);
    }
    v21 = (unsigned __int8 *)(a4 + ~a3);
    if ((a2 & 0x100) == 0)
      v21 = (unsigned __int8 *)__b;
    v22 = *v21;
    *(__b - 1) = v22;
    if ((a2 & 0x1E00) != 0)
      memcpy(&__b[2 << a1], (const void *)(a4 - a3), v10);
    else
      memset(&__b[2 << a1], v22, v10);
    if ((a2 & 0x1E000) != 0)
      return memcpy(&__b[3 << a1], (const void *)(a4 + v10 - a3), v10);
    v14 = v10;
    v15 = &__b[3 << a1];
    v16 = *(v15 - 1);
  }
  else
  {
    v14 = (4 << a1) | 1;
    v15 = __b - 1;
    v16 = 128;
  }
  return memset(v15, v16, v14);
}

uint64_t sub_1C9707404(unint64_t *a1, int a2, uint64_t a3, char a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  unsigned int i;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3 == a2)
  {
    if ((int)a3 < 2)
    {
      a3 = 0;
      v40 = 0x100000000;
      a2 = 1;
      v4 = 26;
    }
    else
    {
      a2 = (((_BYTE)a3 + 29) & 0x1F) + 2;
      v40 = __PAIR64__(a2, a3);
      v4 = (((_BYTE)a3 - 1) & 0x1F) + 2;
    }
  }
  else
  {
    v40 = __PAIR64__(a2, a3);
    if (a2 && (_DWORD)a3)
    {
      v4 = 0;
    }
    else if ((int)a3 + a2 > 1)
    {
      v4 = 1;
    }
    else
    {
      v4 = 26;
    }
  }
  v41 = v4;
  v5 = *a1;
  v6 = a1[1] << 54;
  if ((a4 & 1) != 0)
  {
    v7 = v5 >= v6;
    if (v5 < v6)
      v8 = 0;
    else
      v8 = a1[1] << 54;
    v9 = 2 * (v5 - v8);
    v10 = a1[2];
    v11 = v10 + 1;
    if (v10 >= -1)
    {
      v12 = (unsigned int *)a1[3];
      v14 = *v12;
      v13 = v12 + 1;
      v9 += (unint64_t)bswap32(v14) << v11;
      v11 = v10 - 31;
      if ((unint64_t)v13 >= a1[4])
        v15 = (unsigned int *)a1[4];
      else
        v15 = v13;
      a1[3] = (unint64_t)v15;
    }
    a1[2] = v11;
    *a1 = v9;
    if (v5 >= v6)
    {
      v16 = v9 >= v6;
      if (v9 < v6)
        v6 = 0;
      v17 = 2 * (v9 - v6);
      v18 = v11 + 1;
      if (v11 >= -1)
      {
        v19 = (unsigned int *)a1[3];
        v21 = *v19;
        v20 = v19 + 1;
        v17 += (unint64_t)bswap32(v21) << v18;
        v18 = v11 - 31;
        if ((unint64_t)v20 >= a1[4])
          v22 = (unsigned int *)a1[4];
        else
          v22 = v20;
        a1[3] = (unint64_t)v22;
      }
      a1[2] = v18;
      *a1 = v17;
      return *((unsigned int *)&v40 + v16 + v7);
    }
  }
  else
  {
    v23 = 0;
    for (i = 6; i > 1; --i)
    {
      v25 = v5 >= v6;
      if (v5 < v6)
        v26 = 0;
      else
        v26 = a1[1] << 54;
      v5 = 2 * (v5 - v26);
      v23 = v25 | (2 * v23);
    }
    v27 = a1[2];
    v28 = v27 + 5;
    if (v27 >= -5)
    {
      v29 = (unsigned int *)a1[3];
      v31 = *v29;
      v30 = v29 + 1;
      v5 += (unint64_t)bswap32(v31) << v28;
      v28 = v27 - 27;
      if ((unint64_t)v30 >= a1[4])
        v32 = (unsigned int *)a1[4];
      else
        v32 = v30;
      a1[3] = (unint64_t)v32;
    }
    a1[2] = v28;
    *a1 = v5;
    if ((int)a3 <= a2)
      v33 = a2;
    else
      v33 = a3;
    if ((int)a3 >= a2)
      v34 = a2;
    else
      v34 = a3;
    if (v34 >= v4)
      v35 = v4;
    else
      v35 = v34;
    if (v34 > v4)
      v4 = v34;
    if (v33 <= v4)
      v36 = v4;
    else
      v36 = v33;
    if (v33 >= v4)
      v33 = v4;
    if (v23 < v35)
      v37 = v23;
    else
      v37 = v23 + 1;
    if (v37 < v33)
      v38 = v37;
    else
      v38 = v37 + 1;
    if (v38 < v36)
      return v38;
    else
      return (v38 + 1);
  }
  return a3;
}

uint64_t sub_1C9707624(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned __int8 v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;

  if (!*(_BYTE *)(a1 + 6426) && (**(_WORD **)(a1 + 48) & 0x100) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    if (a3 == 26)
      result = 2;
    else
      result = 1;
    if ((a3 & 0xFFFFFFEF) == 0xA && *(_BYTE *)(v3 + 403))
      return result;
    return 0;
  }
  if (!*(_BYTE *)(v3 + 404))
    return 0;
  v5 = *(uint64_t **)(a1 + 40);
  v6 = (char *)v5 + a2;
  v7 = v6[197];
  v9 = *v5;
  v8 = v5[1];
  v10 = byte_1C98326D3[(v8 & 0xC0) + (v7 >> 1)];
  LODWORD(v11) = v8 - v10;
  if (*v5 < (unint64_t)((v8 - v10) << 55))
    v11 = v11;
  else
    v11 = byte_1C98326D3[(v8 & 0xC0) + (v7 >> 1)];
  if (*v5 < (unint64_t)((v8 - v10) << 55))
  {
    v12 = 0;
  }
  else
  {
    v9 = *v5 - ((v8 - v10) << 55);
    v12 = 1;
  }
  if (*v5 < (unint64_t)((v8 - v10) << 55))
    v13 = v6[197];
  else
    v13 = v7 + 1;
  v14 = byte_1C98326D3[2 * v7 + 256 + v12];
  v15 = __clz(v11) - 55;
  v16 = v9 << v15;
  v5[1] = v11 << v15;
  v6[197] = v14;
  v17 = v5[2] + v15;
  if (v17 >= 0)
  {
    v18 = (unsigned int *)v5[3];
    v20 = *v18;
    v19 = v18 + 1;
    v16 += (unint64_t)bswap32(v20) << v17;
    v17 -= 32;
    if ((unint64_t)v19 >= v5[4])
      v19 = (unsigned int *)v5[4];
    v5[3] = (uint64_t)v19;
  }
  v5[2] = v17;
  *v5 = v16;
  if ((v13 & 1) == 0)
    return 0;
  v21 = *(unint64_t **)(a1 + 40);
  v22 = (char *)v21 + a2;
  v23 = v22[199];
  v24 = *v21;
  v25 = v21[1] - byte_1C98326D3[(v21[1] & 0xC0) + (v23 >> 1)];
  v26 = *v21 >= v25 << 55;
  v27 = *v21 - (v25 << 55);
  if (*v21 < v25 << 55)
    v25 = v25;
  else
    v25 = byte_1C98326D3[(v21[1] & 0xC0) + (v23 >> 1)];
  if (v26)
  {
    v24 = v27;
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  if (v26)
    v29 = v23 + 1;
  else
    v29 = v22[199];
  v30 = byte_1C98326D3[2 * v23 + 256 + v28];
  v31 = __clz(v25);
  v32 = v31 - 55;
  v33 = v25 << (v31 - 55);
  v34 = v24 << (v31 - 55);
  v21[1] = v33;
  v22[199] = v30;
  v35 = v21[2] + v32;
  if (v35 >= 0)
  {
    v36 = (unsigned int *)v21[3];
    v38 = *v36;
    v37 = v36 + 1;
    v34 += (unint64_t)bswap32(v38) << v35;
    v35 -= 32;
    if ((unint64_t)v37 >= v21[4])
      v37 = (unsigned int *)v21[4];
    v21[3] = (unint64_t)v37;
  }
  v21[2] = v35;
  *v21 = v34;
  return (v29 & 1u) + 1;
}

uint64_t sub_1C97077C0(uint64_t a1, uint64_t a2, int8x8_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  _BYTE *v51;
  char v52;
  _BOOL4 v53;
  uint64_t v54;
  int v55;
  char *v56;
  int v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  char v78;
  int v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint8x8_t v88;
  unsigned int v89;
  int v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  int v98;
  unsigned int v99;
  _BOOL4 v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  char v114;
  _BOOL4 v115;
  unint64_t v116;
  int v117;
  _BOOL4 v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  char v126;
  int v127;
  char v128;
  char v129;
  _WORD *v130;
  uint64_t v131;
  int v132;
  int v133;
  char v134;
  unsigned int v135;
  char v136;
  int v137;
  _BOOL4 v138;
  int v140;
  _BOOL4 v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  signed int v149;
  int v150;
  int v151;
  _BOOL4 v152;
  unint64_t v153;
  unsigned int v154;
  char v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  _BOOL4 v164;
  uint64_t v165;
  _BOOL8 v166;
  uint64_t result;
  int v169;
  _BYTE *v170;
  _BOOL4 v171;
  uint64_t v172;
  unint64_t *v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  char *v178;

  v7 = 0;
  v8 = 0;
  v9 = (unsigned __int8 *)(a1 + 6426);
  v10 = *(unint64_t **)(a1 + 40);
  v11 = *v10;
  v12 = v10[1];
  v14 = (unsigned int *)v10[3];
  v13 = (unsigned int *)v10[4];
  v15 = v10[2];
  v16 = (char *)&unk_1C985A11D + 36 * (a6 > 0);
  v173 = v10;
  v17 = (char *)v10 + 83;
  do
  {
    v18 = v16[v7];
    v19 = v17[v18];
    v20 = byte_1C98326D3[(v12 & 0xC0) + (v19 >> 1)];
    LODWORD(v21) = v12 - v20;
    v22 = v11 >= (v12 - v20) << 55;
    if (v11 < (v12 - v20) << 55)
      v21 = v21;
    else
      v21 = byte_1C98326D3[(v12 & 0xC0) + (v19 >> 1)];
    if (v11 < (v12 - v20) << 55)
    {
      v23 = 0;
    }
    else
    {
      v11 -= (v12 - v20) << 55;
      v23 = 1;
    }
    if (v22)
      v24 = v19 + 1;
    else
      v24 = v17[v18];
    v25 = __clz(v21) - 55;
    v12 = v21 << v25;
    v11 <<= v25;
    v8 += v25;
    v17[v18] = byte_1C98326D3[2 * v19 + 256 + v23];
    if ((v24 & 1) == 0)
      break;
    ++v7;
  }
  while (v7 != 3);
  v26 = v15 + v8;
  if (v26 >= 0)
  {
    v27 = *v14++;
    v11 += (unint64_t)bswap32(v27) << v26;
    v26 -= 32;
    if (v14 >= v13)
      v14 = v13;
  }
  v28 = 0;
  v29 = 0;
  v30 = *(_QWORD *)(a1 + 40) + 101;
  do
  {
    v31 = v16[v28];
    v32 = *(unsigned __int8 *)(v30 + v31);
    v33 = byte_1C98326D3[(v12 & 0xC0) + (v32 >> 1)];
    LODWORD(v34) = v12 - v33;
    v35 = v11 >= (v12 - v33) << 55;
    if (v11 < (v12 - v33) << 55)
      v34 = v34;
    else
      v34 = byte_1C98326D3[(v12 & 0xC0) + (v32 >> 1)];
    if (v11 < (v12 - v33) << 55)
    {
      v36 = 0;
    }
    else
    {
      v11 -= (v12 - v33) << 55;
      v36 = 1;
    }
    if (v35)
      v37 = v32 + 1;
    else
      v37 = *(_BYTE *)(v30 + v31);
    v38 = __clz(v34) - 55;
    v12 = v34 << v38;
    v11 <<= v38;
    v29 += v38;
    *(_BYTE *)(v30 + v31) = byte_1C98326D3[2 * v32 + 256 + v36];
    if ((v37 & 1) == 0)
      break;
    ++v28;
  }
  while (v28 != 3);
  v39 = v26 + v29;
  if (v39 >= 0)
  {
    v40 = *v14++;
    v11 += (unint64_t)bswap32(v40) << v39;
    v39 -= 32;
    if (v14 >= v13)
      v14 = v13;
  }
  if (a5 == 2)
    v41 = v28;
  else
    v41 = v7;
  if (a5 == 2)
    v42 = v7;
  else
    v42 = v28;
  v43 = **(_WORD **)(a1 + 48);
  v44 = v43 >> 9;
  v45 = *(_QWORD *)(a1 + 32);
  if (a6)
  {
    v44 += *(char *)(v45 + a6 + 656) + *(char *)(*(_QWORD *)(a1 + 24) + a6 + 2);
    v46 = *(_BYTE **)(v45 + 16);
    v47 = v46[2099];
    if (v44 <= -v47)
      v44 = -v47;
    if (v46[2148] == 1)
    {
      if (v44 >= 57)
        v48 = 57;
      else
        v48 = v44;
      v49 = __OFSUB__(v48, 30);
      v50 = v48 - 30;
      if (v50 < 0 == v49)
        v44 = byte_1C9861020[v50];
    }
    else if (v44 >= 51)
    {
      v44 = 51;
    }
    v51 = v46 + 223;
  }
  else
  {
    v46 = *(_BYTE **)(v45 + 16);
    LOWORD(v47) = v46[2097];
    v51 = v46 + 222;
  }
  if (v44 < 0)
  {
    LOWORD(v44) = v44 + v47;
    v52 = *v51 + 5;
  }
  else
  {
    v52 = 5;
  }
  v53 = 0;
  v54 = a5;
  v55 = v41 + 4 * v42;
  v56 = (char *)&unk_1C9862680 + 16 * a5;
  v57 = v43 & 0x100;
  v58 = *v9 | v57;
  v171 = v58 != 0;
  if (v58)
    v59 = v46[402] != 0;
  else
    v59 = 0;
  v60 = *(_QWORD *)(v45 + 32);
  if (*(_BYTE *)(v60 + 5) && !v57)
    v53 = v9[1] == 0;
  v61 = *(_QWORD *)(a1 + 40);
  v62 = v56[v55];
  v178 = (char *)&unk_1C9861A40 + 64 * v54;
  if (v46[274])
  {
    if (*(_DWORD *)(a1 + 4) == 1)
      v63 = 0;
    else
      v63 = 3;
    v64 = v60 + 65 * (v63 + a6) + 40;
  }
  else
  {
    v64 = 0;
    v52 -= 4;
  }
  v170 = v9;
  v65 = ((10923 * (__int16)v44) >> 16) + ((10923 * (__int16)v44) >> 31);
  v66 = a39H[(__int16)v44 % 6];
  if (a6 < 1 || v59)
    v68 = 0;
  else
    v68 = 27;
  v69 = 1;
  v176 = v64;
  v169 = v62;
  if ((v62 & 0xF) != 0)
  {
    v70 = v61 + v68 + 123;
    LODWORD(v69) = 1 << (v62 & 0xF);
    if (a6)
      v71 = 43;
    else
      v71 = 42;
    v72 = (v62 & 0xF) - 1;
    do
    {
      if (!v59)
        v71 = byte_1C98626F0[v178[v72] + 64];
      v73 = *(unsigned __int8 *)(v70 + v71);
      v74 = byte_1C98326D3[(v12 & 0xC0) + (v73 >> 1)];
      LODWORD(v75) = v12 - v74;
      v76 = v11 >= (v12 - v74) << 55;
      if (v11 < (v12 - v74) << 55)
        v75 = v75;
      else
        v75 = byte_1C98326D3[(v12 & 0xC0) + (v73 >> 1)];
      if (v11 < (v12 - v74) << 55)
      {
        v77 = 0;
      }
      else
      {
        v11 -= (v12 - v74) << 55;
        v77 = 1;
      }
      if (v76)
        v78 = v73 + 1;
      else
        v78 = *(_BYTE *)(v70 + v71);
      v79 = __clz(v75) - 55;
      v11 <<= v79;
      *(_BYTE *)(v70 + v71) = byte_1C98326D3[2 * v73 + 256 + v77];
      v39 += v79;
      if (v39 >= 0)
      {
        v80 = *v14++;
        v11 += (unint64_t)bswap32(v80) << v39;
        v39 -= 32;
        if (v14 >= v13)
          v14 = v13;
      }
      v64 = v176;
      v12 = v75 << v79;
      v69 = ((v78 & 1) << v72) | v69;
      v81 = v72-- + 1;
    }
    while (v81 > 1);
  }
  v82 = 0;
  v83 = 0;
  v84 = v61 + 16 * (a6 > 0) + 167;
  v85 = v61 + 191;
  v86 = 4 * (a6 > 0);
  v87 = v66 << v65;
  a3.i32[0] = v69;
  v88 = (uint8x8_t)vcnt_s8(a3);
  v88.i16[0] = vaddlv_u8(v88);
  if (v88.i32[0] >= 8u)
    v89 = 8;
  else
    v89 = v88.i32[0];
  if (v89 <= 1)
    v90 = 1;
  else
    v90 = v89;
  v91 = 1;
  do
  {
    while (1)
    {
      v92 = *(unsigned __int8 *)(v84 + v91);
      v93 = byte_1C98326D3[(v12 & 0xC0) + (v92 >> 1)];
      LODWORD(v94) = v12 - v93;
      v95 = v11 >= (v12 - v93) << 55;
      if (v11 < (v12 - v93) << 55)
        v94 = v94;
      else
        v94 = byte_1C98326D3[(v12 & 0xC0) + (v92 >> 1)];
      if (v11 < (v12 - v93) << 55)
      {
        v96 = 0;
      }
      else
      {
        v11 -= (v12 - v93) << 55;
        v96 = 1;
      }
      if (v95)
        v97 = v92 + 1;
      else
        v97 = *(_BYTE *)(v84 + v91);
      v98 = __clz(v94) - 55;
      v11 <<= v98;
      *(_BYTE *)(v84 + v91) = byte_1C98326D3[2 * v92 + 256 + v96];
      v39 += v98;
      if (v39 >= 0)
      {
        v99 = *v14++;
        v11 += (unint64_t)bswap32(v99) << v39;
        v39 -= 32;
        if (v14 >= v13)
          v14 = v13;
      }
      v12 = v94 << v98;
      v82 |= (v97 & 1) << v83;
      if ((v97 & 1) == 0)
        break;
      v91 = 0;
      if (++v83 == v90)
        goto LABEL_119;
    }
    if ((v91 - 1) < 2)
      ++v91;
    ++v83;
  }
  while (v83 != v90);
  v100 = v88.i32[0] > 8u;
  if (v91)
  {
    v101 = 0;
    goto LABEL_132;
  }
LABEL_119:
  v102 = *(unsigned __int8 *)(v85 + v86);
  v103 = byte_1C98326D3[(v12 & 0xC0) + (v102 >> 1)];
  LODWORD(v104) = v12 - v103;
  v105 = v11 >= (v12 - v103) << 55;
  if (v11 < (v12 - v103) << 55)
    v104 = v104;
  else
    v104 = byte_1C98326D3[(v12 & 0xC0) + (v102 >> 1)];
  if (v11 < (v12 - v103) << 55)
  {
    v106 = 0;
  }
  else
  {
    v11 -= (v12 - v103) << 55;
    v106 = 1;
  }
  if (v105)
    v107 = v102 + 1;
  else
    v107 = *(_BYTE *)(v85 + v86);
  v108 = __clz(v104);
  v109 = v108 - 55;
  v12 = v104 << (v108 - 55);
  v11 <<= v108 - 55;
  v101 = v107 & 1;
  *(_BYTE *)(v85 + v86) = byte_1C98326D3[2 * v102 + 256 + v106];
  v39 += v109;
  if (v39 >= 0)
  {
    v110 = *v14++;
    v11 += (unint64_t)bswap32(v110) << v39;
    v39 -= 32;
    if (v14 >= v13)
      v14 = v13;
  }
  v100 = 1;
LABEL_132:
  v111 = 0;
  v112 = __clz(v69);
  v113 = v112 ^ 0x1F;
  v114 = v112 + 1;
  v115 = (int)(v113 - __clz(__rbit32(v69))) > 3 && v53;
  v116 = v12 << 54;
  v117 = v88.i32[0] - v115 + 1;
  do
  {
    v118 = v11 >= v116;
    if (v11 < v116)
      v119 = 0;
    else
      v119 = v12 << 54;
    v11 = 2 * (v11 - v119);
    v111 = v118 | (2 * v111);
    --v117;
  }
  while (v117 > 1);
  v120 = v69 << v114;
  v121 = v39 + v88.i32[0] - v115;
  if (v121 >= 0)
  {
    v122 = *v14++;
    v11 += (unint64_t)bswap32(v122) << v121;
    v121 -= 32;
    if (v14 >= v13)
      v14 = v13;
  }
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = v111 << (v115 - v88.i8[0]);
  v175 = __clz(__rbit32(v82));
  v128 = v52 - 1;
  v172 = a1;
  v129 = v52;
  v130 = *(_WORD **)(a1 + 48);
  v131 = v87;
  v174 = 1 << v128;
  if (v88.i32[0] <= 1u)
    v132 = 1;
  else
    v132 = v88.i32[0];
  v133 = v132 - 1;
  v134 = !v115;
  v135 = v82;
  v136 = v129;
  while (1)
  {
    if ((v135 & 1) != 0)
      v137 = v101 + 2;
    else
      v137 = 1;
    if ((v135 & 1) != 0)
      v101 = 0;
    if (v100)
    {
      v138 = (v135 & 1) == 0;
      if (v175 != v125 || v82 == 0)
        v140 = 2;
      else
        v140 = 3;
      v141 = v140 == v137;
      if (v125 < 8)
        v138 = v141;
      if (v138)
      {
        if (v123 <= 3 << v124)
          v142 = v124;
        else
          v142 = v124 + 1;
        if (v142 >= 4)
          v124 = 4;
        else
          v124 = v142;
        if (v11 >= v116)
        {
          v144 = 0;
          do
          {
            v143 = v144 + 1;
            v11 = 2 * (v11 - v116);
          }
          while (v11 >= v116 && v144++ < 0x11);
        }
        else
        {
          v143 = 0;
        }
        v11 *= 2;
        v121 += v143 + 1;
        if (v121 >= 0)
        {
          v146 = *v14++;
          v11 += (unint64_t)bswap32(v146) << v121;
          v121 -= 32;
          if (v14 >= v13)
            v14 = v13;
        }
        v147 = v143 - 3;
        if (v143 <= 2)
          v147 = 0;
        else
          v143 = (1 << (v143 - 3)) + 2;
        v148 = v143 << v124;
        v149 = v147 + v124;
        if (v147 + v124)
        {
          v150 = 0;
          v151 = v147 + v124 + 1;
          do
          {
            v152 = v11 >= v116;
            if (v11 < v116)
              v153 = 0;
            else
              v153 = v12 << 54;
            v11 = 2 * (v11 - v153);
            v150 = v152 | (2 * v150);
            --v151;
          }
          while (v151 > 1);
          v121 += v149;
          if (v121 >= 0)
          {
            v154 = *v14++;
            v11 += (unint64_t)bswap32(v154) << v121;
            v121 -= 32;
            if (v14 >= v13)
              v14 = v13;
          }
          v64 = v176;
          v148 += v150;
        }
        v123 = v148 + v137;
        v137 = v123;
      }
    }
    v126 += v137;
    if (v125 == v88.i32[0] - 1)
      v155 = v134;
    else
      v155 = 1;
    v156 = (v137 ^ (v127 >> 31)) - (v127 >> 31);
    if ((v126 & 1) != 0)
      v157 = -v137;
    else
      v157 = v137;
    if ((v155 & 1) != 0)
    {
      v127 *= 2;
      v157 = v156;
    }
    v158 = v178[v113];
    if ((*v130 & 0x100) == 0)
    {
      v159 = v131;
      if (v64)
      {
        if (v178[v113])
          v160 = v158 + 1;
        else
          v160 = v178[v113];
        v159 = *(unsigned __int8 *)(v64 + v160) * (uint64_t)(int)v131;
      }
      v161 = (v174 + v159 * v157) >> v136;
      if (v161 >= 0x7FFF)
        v161 = 0x7FFFLL;
      if (v161 <= -32768)
        LOWORD(v157) = 0x8000;
      else
        LOWORD(v157) = v161;
    }
    *(_WORD *)(a2 + 2 * v158) = v157;
    if (v125 == v133)
      break;
    ++v125;
    v135 >>= 1;
    v162 = __clz(v120) + 1;
    LODWORD(v120) = (_DWORD)v120 << v162;
    v113 -= v162;
  }
  v163 = *(_QWORD *)(v172 + 32);
  v164 = v171;
  if (!*(_BYTE *)(*(_QWORD *)(v163 + 16) + 401))
    v164 = 0;
  if (v164 && *(_DWORD *)(v172 + 4) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v163 + 2280) + 792))(a2);
  if (*v170)
  {
    v165 = *(_QWORD *)(v163 + 2280) + 552;
    v166 = a6 != 0;
    if (v170[1])
      (*(void (**)(uint64_t, uint64_t))(v165 + 8 * v166 + 384))(a2, 2);
    else
      (*(void (**)(uint64_t))(v165 + 32 * v166 + 176))(a2);
  }
  else if (v170[1])
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v163 + 2280)
                                             + 8 * (v170[1] - 1)
                                             + 920))(a2, 2);
  }
  result = (v169 + 1);
  *v173 = v11;
  v173[1] = v12;
  v173[2] = v121;
  v173[3] = (unint64_t)v14;
  return result;
}

void sub_1C9708108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a15 = v16;
  a15[1] = v17;
  a15[2] = v18;
  a15[3] = v15;
  _Unwind_Resume(a1);
}

int8x8_t sub_1C9708118(__int32 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint8x8_t v8;
  uint8x8_t v9;
  __int32 *v10;
  int8x8_t result;
  int8x8_t v12;

  sub_1C97081A8((int16x4_t *)a3);
  v8.i32[0] = *a1;
  v8.i32[1] = *(__int32 *)((char *)a1 + a2);
  v9.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v10 = (__int32 *)((char *)a1 + 3 * a2);
  v9.i32[1] = *v10;
  result = vqmovun_s16(vqaddq_s16(*(int16x8_t *)a3, (int16x8_t)vmovl_u8(v8)));
  v12 = vqmovun_s16(vqaddq_s16(*(int16x8_t *)(a3 + 16), (int16x8_t)vmovl_u8(v9)));
  *a1 = result.i32[0];
  *(__int32 *)((char *)a1 + a2) = result.i32[1];
  *(__int32 *)((char *)a1 + 2 * a2) = v12.i32[0];
  *v10 = v12.i32[1];
  if ((a4 & 1) == 0)
  {
    result = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

int32x4_t sub_1C97081A8(int16x4_t *a1)
{
  int16x4_t v1;
  int16x4_t v2;
  int16x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int16x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t result;
  int16x4_t v27;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = vaddl_s16(v2, *a1);
  v5 = vaddl_s16(v3, v2);
  v6 = vsubl_s16(*a1, v3);
  v7.i64[0] = 0x1D0000001DLL;
  v7.i64[1] = 0x1D0000001DLL;
  v8.i64[0] = 0x3700000037;
  v8.i64[1] = 0x3700000037;
  v9 = vmlaq_s32(vmlal_s16(vmulq_s32(v4, v7), v1, (int16x4_t)0x4A004A004A004ALL), v5, v8);
  v10 = vmlaq_s32(vmlsl_s16(vmulq_s32(v4, v8), v1, (int16x4_t)0x4A004A004A004ALL), v6, v7);
  v11.i64[0] = 0x1C0000001CLL;
  v11.i64[1] = 0x1C0000001CLL;
  v12 = vmlaq_s32(vmlal_s16(vmulq_s32(v6, v8), v1, (int16x4_t)0x4A004A004A004ALL), v5, v11);
  v13.i64[0] = 0x4A0000004ALL;
  v13.i64[1] = 0x4A0000004ALL;
  v14 = vmulq_s32(vaddw_s16(vsubl_s16(*a1, v2), v3), v13);
  v15 = vqrshrn_n_s32(v9, 7uLL);
  v16 = vqrshrn_n_s32(v12, 7uLL);
  *(int16x4_t *)v14.i8 = vqrshrn_n_s32(v14, 7uLL);
  *(int16x4_t *)v10.i8 = vqrshrn_n_s32(v10, 7uLL);
  *(int16x4_t *)v5.i8 = vtrn1_s16(v15, v16);
  v17 = (int32x2_t)vtrn2_s16(v15, v16);
  v18 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v10.i8);
  *(int16x4_t *)v14.i8 = vtrn2_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v10.i8);
  *(int32x2_t *)v10.i8 = vzip1_s32(*(int32x2_t *)v5.i8, v18);
  v19 = (int16x4_t)vzip2_s32(*(int32x2_t *)v5.i8, v18);
  v20 = vaddl_s16(*(int16x4_t *)v10.i8, v19);
  *(int32x2_t *)v12.i8 = vzip2_s32(v17, *(int32x2_t *)v14.i8);
  v21 = vaddl_s16(v19, *(int16x4_t *)v12.i8);
  v22 = vsubl_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v12.i8);
  *(int32x2_t *)v14.i8 = vzip1_s32(v17, *(int32x2_t *)v14.i8);
  v23 = vmlaq_s32(vmlal_s16(vmulq_s32(v21, v8), *(int16x4_t *)v14.i8, (int16x4_t)0x4A004A004A004ALL), v20, v7);
  v24 = vmlaq_s32(vmlsl_s16(vmulq_s32(v22, v7), *(int16x4_t *)v14.i8, (int16x4_t)0x4A004A004A004ALL), v20, v8);
  v25 = vmlaq_s32(vmlal_s16(vmulq_s32(v22, v8), *(int16x4_t *)v14.i8, (int16x4_t)0x4A004A004A004ALL), v21, v11);
  result = vmulq_s32(vaddw_s16(vsubl_s16(*(int16x4_t *)v10.i8, v19), *(int16x4_t *)v12.i8), v13);
  *(int16x4_t *)v13.i8 = vqrshrn_n_s32(v23, 0xCuLL);
  *(int16x4_t *)v23.i8 = vqrshrn_n_s32(v25, 0xCuLL);
  v27 = vqrshrn_n_s32(result, 0xCuLL);
  *(int16x4_t *)v10.i8 = vqrshrn_n_s32(v24, 0xCuLL);
  vst4_s16((__int16 *)a1, *(int16x4x4_t *)((char *)&v10 - 24));
  return result;
}

uint64_t sub_1C9708284(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, double a5, int8x16_t a6)
{
  int v6;
  unint64_t v7;
  char v8;
  unsigned int v9;
  int8x8_t *v10;
  unint64_t v11;
  int16x8_t v12;
  unsigned int v13;
  int16x8_t v14;
  unint64_t v15;
  unsigned int v16;
  int16x8_t v17;
  unint64_t v18;
  unsigned int v19;
  int16x8_t v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int32 v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned __int32 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = byte_1C98328DA[result];
  v7 = byte_1C98328DA[result];
  v8 = byte_1C98328DA[result];
  v9 = result - 18;
  if (result < 0x12)
  {
    if ((byte_1C98328DA[result] & 0x80) == 0)
      goto LABEL_5;
    v24 = a2 + 1;
    v9 = 18 - result;
    v10 = (int8x8_t *)a2;
LABEL_16:
    a6.i64[0] = *v24;
    v25 = (unint64_t)vext_s8(vqtbl1_s8(a6, qword_1C9832900[4 * v9 + 3]), *v10, 4uLL);
    v26 = vshrd_n_u64(v25, 0x20uLL);
    BYTE3(v25) = *((_BYTE *)a2 - 1);
    v32 = v26;
    v33 = vshrd_n_u64(v25, 0x18uLL);
    v34 = vshrd_n_u64(v25, 0x10uLL);
    v35 = vshrd_n_u64(v25, 8uLL);
    v36 = v25;
    v21 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~(v6 >> 5)), (uint8x8_t)vdup_n_s8(v7 & 0x1F)), (uint8x8_t)*(&v32 + -(v6 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v7 & 0x1F))), 5uLL).u32[0];
    v22 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~(v6 >> 4)), (uint8x8_t)vdup_n_s8(2 * (v7 & 0xF))), (uint8x8_t)*(&v32 + -(v6 >> 4)), (uint8x8_t)vdup_n_s8(32 - 2 * (v7 & 0xF))), 5uLL).u32[0];
    v23 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8((3 * v6) & 0x1F)), (uint8x8_t)*(&v32 + -((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8(32 - ((3 * v6) & 0x1Fu))), 5uLL).u32[0];
    v20 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~(v6 >> 3)), (uint8x8_t)vdup_n_s8(4 * (v7 & 7))), (uint8x8_t)*(&v32 + -(v6 >> 3)), (uint8x8_t)vdup_n_s8(32 - 4 * (v7 & 7)));
    goto LABEL_17;
  }
  v10 = (int8x8_t *)(a2 + 1);
  if (v6 < 0)
  {
    v24 = a2;
    goto LABEL_16;
  }
  ++a2;
LABEL_5:
  v11 = vshrd_n_u64(*a2, 8uLL);
  v32 = *a2;
  v33 = v11;
  v34 = vshrd_n_u64(v32, 0x10uLL);
  v35 = vshrd_n_u64(v32, 0x18uLL);
  v36 = vshrd_n_u64(v32, 0x20uLL);
  v12 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + (v7 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v8 & 0x1Fu)));
  if ((v8 & 0x1F) != 0)
    v12 = (int16x8_t)vmlal_u8((uint16x8_t)v12, (uint8x8_t)*(&v32 + (v7 >> 5) + 1), (uint8x8_t)vdup_n_s8(v8 & 0x1F));
  v13 = 2 * (v8 & 0xF);
  v14 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + (v7 >> 4)), (uint8x8_t)vdup_n_s8(32 - v13));
  if (v13)
    v14 = (int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)*(&v32 + (v7 >> 4) + 1), (uint8x8_t)vdup_n_s8(v13));
  v15 = (3 * v7) >> 5;
  v16 = (3 * v7) & 0x1F;
  v17 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + v15), (uint8x8_t)vdup_n_s8(32 - v16));
  if (v16)
    v17 = (int16x8_t)vmlal_u8((uint16x8_t)v17, (uint8x8_t)*(&v32 + (v15 + 1)), (uint8x8_t)vdup_n_s8(v16));
  v18 = v7 >> 3;
  v19 = 4 * (v8 & 7);
  v20 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + v18), (uint8x8_t)vdup_n_s8(32 - v19));
  if (v19)
    v20 = (int16x8_t)vmlal_u8((uint16x8_t)v20, (uint8x8_t)*(&v32 + (v18 + 1)), (uint8x8_t)vdup_n_s8(v19));
  v21 = vrshrn_n_s16(v12, 5uLL).u32[0];
  v22 = vrshrn_n_s16(v14, 5uLL).u32[0];
  v23 = vrshrn_n_s16(v17, 5uLL).u32[0];
LABEL_17:
  v27 = vrshrn_n_s16(v20, 5uLL).u32[0];
  if (result > 0x11)
  {
    *(_DWORD *)a4 = v21;
    *(_DWORD *)(a4 + a3) = v22;
    v31 = (unsigned __int32 *)(a4 + a3 + a3);
    *v31 = v23;
    *(unsigned __int32 *)((char *)v31 + a3) = v27;
  }
  else
  {
    *(_BYTE *)a4 = v21;
    *(_BYTE *)(a4 + 1) = v22;
    *(_BYTE *)(a4 + 2) = v23;
    *(_BYTE *)(a4 + 3) = v27;
    v28 = (_BYTE *)(a4 + a3);
    *v28 = BYTE1(v21);
    v28[1] = BYTE1(v22);
    v28[2] = BYTE1(v23);
    v28[3] = BYTE1(v27);
    v29 = &v28[a3];
    *v29 = BYTE2(v21);
    v29[1] = BYTE2(v22);
    v29[2] = BYTE2(v23);
    v29[3] = BYTE2(v27);
    v30 = &v29[a3];
    *v30 = HIBYTE(v21);
    v30[1] = HIBYTE(v22);
    v30[2] = HIBYTE(v23);
    v30[3] = HIBYTE(v27);
  }
  return result;
}

uint64_t sub_1C9708548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  int v9;
  int v12;
  int v13;
  uint64_t v15;

  v9 = a3;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(a1 + 16 * a5 + 8))(a3, a4, a6 >> 1, a7, &v15);
  if (*(_BYTE *)(a1 + 538) == 3 && (_DWORD)a2 != 1 && !*(_BYTE *)(a1 + 536))
  {
    v12 = 10 - a2;
    if ((int)a2 >= 10)
      v12 = a2 - 10;
    v13 = 26 - a2;
    if ((int)a2 >= 26)
      v13 = a2 - 26;
    if (v12 >= v13)
      v12 = v13;
    if (v12 > byte_1C985A0AA[v9])
      (*(void (**)(uint64_t *, uint64_t *))(a1 + 8 * v9 + 32))(&v15, &v15);
  }
  return sub_1C9708678(a1, a2, v9, (uint64_t)&v15, a6, a7);
}

uint64_t sub_1C9708678(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (**v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  if ((int)a2 > 9)
  {
    if ((_DWORD)a2 == 10)
    {
      v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 408);
      return (*v6)(a2, a4, a5, a6);
    }
    if ((_DWORD)a2 == 26)
    {
      v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 376);
      return (*v6)(a2, a4, a5, a6);
    }
LABEL_8:
    v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 472);
    return (*v6)(a2, a4, a5, a6);
  }
  if (!(_DWORD)a2)
  {
    v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 344);
    return (*v6)(a2, a4, a5, a6);
  }
  if ((_DWORD)a2 != 1)
    goto LABEL_8;
  v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 440);
  return (*v6)(a2, a4, a5, a6);
}

void *sub_1C97086EC(void *result, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  __int16 v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;

  v6 = (char)result;
  if (!a2)
    return memset(a5 - 1, 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  v10 = 1 << (char)result;
  if ((a2 & 0xF) != 0)
  {
    if (v10 < 2 << (char)result)
    {
      v11 = (2 << (char)result) - (uint64_t)v10;
      v12 = &a5[v10];
      v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
      do
      {
        *v12++ = *v13;
        v13 += a3;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v14 = v10 - a3;
    if ((a2 & 0x1E00) != 0)
      v14 = -a3;
    if ((a2 & 0x100) != 0)
      v14 = ~a3;
    if ((a2 & 0xF0) != 0)
      v14 = (v10 - 1) * a3 - 1;
    v15 = *(_WORD *)(a4 + 2 * v14);
    v16 = v10;
    v17 = &a5[v10];
    do
    {
      *v17++ = v15;
      --v16;
    }
    while (v16);
  }
  if ((a2 & 0xF0) != 0)
  {
    if ((_DWORD)result != 31)
    {
      if (v10 <= 1)
        v18 = 1;
      else
        v18 = v10;
      v19 = (_WORD *)(a4 - 2);
      v20 = a5;
      do
      {
        *v20++ = *v19;
        v19 += a3;
        --v18;
      }
      while (v18);
    }
  }
  else
  {
    v21 = v10;
    v22 = a5[v10];
    v23 = a5;
    do
    {
      *v23++ = v22;
      --v21;
    }
    while (v21);
  }
  v24 = (__int16 *)(a4 + 2 * ~a3);
  if ((a2 & 0x100) == 0)
    v24 = a5;
  v25 = *v24;
  *(a5 - 1) = v25;
  if ((a2 & 0x1E00) != 0)
  {
    result = memcpy(&a5[2 << (char)result], (const void *)(a4 - 2 * a3), 2 * v10);
  }
  else
  {
    v26 = v10;
    v27 = &a5[2 << (char)result];
    do
    {
      *v27++ = v25;
      --v26;
    }
    while (v26);
  }
  if ((a2 & 0x1E000) != 0)
    return memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
  v28 = v10;
  v29 = &a5[3 << v6];
  v30 = *(v29 - 1);
  do
  {
    *v29++ = v30;
    --v28;
  }
  while (v28);
  return result;
}

uint64_t sub_1C9708900(uint64_t *a1, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v19;
  unint64_t v20;
  unsigned int i;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;

  v2 = *((unsigned __int8 *)a1 + 57);
  v3 = *a1;
  v4 = a1[1];
  v5 = byte_1C98326D3[(v4 & 0xC0) + (v2 >> 1)];
  LODWORD(v6) = v4 - v5;
  if (*a1 < (unint64_t)((v4 - v5) << 55))
    v6 = v6;
  else
    v6 = byte_1C98326D3[(v4 & 0xC0) + (v2 >> 1)];
  if (*a1 < (unint64_t)((v4 - v5) << 55))
  {
    v7 = 0;
  }
  else
  {
    v3 = *a1 - ((v4 - v5) << 55);
    v7 = 1;
  }
  if (*a1 < (unint64_t)((v4 - v5) << 55))
    v8 = *((_BYTE *)a1 + 57);
  else
    v8 = v2 + 1;
  v9 = byte_1C98326D3[2 * v2 + 256 + v7];
  v10 = __clz(v6);
  v11 = v10 - 55;
  v12 = v6 << (v10 - 55);
  v13 = v3 << v11;
  a1[1] = v12;
  *((_BYTE *)a1 + 57) = v9;
  v14 = a1[2] + v11;
  if (v14 >= 0)
  {
    v15 = (unsigned int *)a1[3];
    v17 = *v15;
    v16 = v15 + 1;
    v13 += (unint64_t)bswap32(v17) << v14;
    v14 -= 32;
    if ((unint64_t)v16 >= a1[4])
      v16 = (unsigned int *)a1[4];
    a1[3] = (uint64_t)v16;
  }
  a1[2] = v14;
  *a1 = v13;
  if ((v8 & 1) == 0)
    return 35;
  LODWORD(v19) = 0;
  v20 = v12 << 54;
  for (i = 3; i > 1; --i)
  {
    v22 = v13 >= v20;
    if (v13 < v20)
      v23 = 0;
    else
      v23 = v20;
    v13 = 2 * (v13 - v23);
    v19 = v22 | (2 * v19);
  }
  v24 = v14 + 2;
  if (v14 >= -2)
  {
    v25 = (unsigned int *)a1[3];
    v27 = *v25;
    v26 = v25 + 1;
    v13 += (unint64_t)bswap32(v27) << v24;
    v24 = v14 - 30;
    if ((unint64_t)v26 >= a1[4])
      v28 = (unsigned int *)a1[4];
    else
      v28 = v26;
    a1[3] = (uint64_t)v28;
  }
  a1[2] = v24;
  *a1 = v13;
  if (byte_1C98328D3[v19] == a2)
    return 34;
  else
    return byte_1C98328D3[v19];
}

uint64_t sub_1C9708A20(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  int16x8_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int16x8_t v11;
  unsigned int v12;
  unsigned int v13;
  int16x8_t v14;
  double v15;
  double v16;
  unsigned int v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  int16x8_t v21;
  double v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x1E0C80C00];
  v32[0] = a6;
  v32[1] = vext_s8(a6, a7, 2uLL);
  v32[2] = vext_s8(a6, a7, 4uLL);
  v32[3] = vext_s8(a6, a7, 6uLL);
  v32[4] = a7;
  v7 = (int16x8_t)vmull_u8((uint8x8_t)v32[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  if ((result & 0x1F) != 0)
    v7 = (int16x8_t)vmlal_u8((uint16x8_t)v7, (uint8x8_t)v32[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F));
  v8 = a2 + result;
  v9 = (a2 + result) >> 5;
  v10 = (a2 + result) & 0x1F;
  v11 = (int16x8_t)vmull_u8((uint8x8_t)v32[v9], (uint8x8_t)vdup_n_s8(32 - v10));
  if (v10)
    v11 = (int16x8_t)vmlal_u8((uint16x8_t)v11, (uint8x8_t)v32[v9 + 1], (uint8x8_t)vdup_n_s8(v10));
  v12 = (v8 + a2) >> 5;
  v13 = (v8 + a2) & 0x1F;
  v14 = (int16x8_t)vmull_u8((uint8x8_t)v32[v12], (uint8x8_t)vdup_n_s8(32 - v13));
  if (v13)
    v14 = (int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)v32[v12 + 1], (uint8x8_t)vdup_n_s8(v13));
  v15 = COERCE_DOUBLE(vrshrn_n_s16(v7, 5uLL));
  v16 = COERCE_DOUBLE(vrshrn_n_s16(v11, 5uLL));
  v17 = v8 + a2 + a2;
  v18 = v17 >> 5;
  v19 = COERCE_DOUBLE(vrshrn_n_s16(v14, 5uLL));
  v20 = v17 & 0x1F;
  v21 = (int16x8_t)vmull_u8((uint8x8_t)v32[v18], (uint8x8_t)vdup_n_s8(32 - v20));
  if (v20)
    v21 = (int16x8_t)vmlal_u8((uint16x8_t)v21, (uint8x8_t)v32[v18 + 1], (uint8x8_t)vdup_n_s8(v20));
  v22 = COERCE_DOUBLE(vrshrn_n_s16(v21, 5uLL));
  v23 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v15, *(int16x4_t *)&v16);
  v24 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v15, *(int16x4_t *)&v16);
  v25 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v22);
  v26 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v22);
  v27 = COERCE_DOUBLE(vzip1_s32(v23, v25));
  v28 = COERCE_DOUBLE(vzip2_s32(v23, v25));
  v29 = COERCE_DOUBLE(vzip1_s32(v24, v26));
  v30 = COERCE_DOUBLE(vzip2_s32(v24, v26));
  if (a3)
  {
    v22 = v30;
    v19 = v28;
    v16 = v29;
    v15 = v27;
  }
  *a5 = v15;
  *(double *)((char *)a5 + a4) = v16;
  v31 = (double *)((char *)a5 + a4 + a4);
  *v31 = v19;
  *(double *)((char *)v31 + a4) = v22;
  return result;
}

int8x8_t sub_1C9708BAC(uint8x8_t *a1, uint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x4_t *a5, __int16 *a6)
{
  if (*a6 >= 1)
    sub_1C9708C30(a3, (unsigned __int16)*a6);
  if (a6[1] >= 1)
    sub_1C9708C30(a4, (unsigned __int16)a6[1]);
  return sub_1C9708D08(a1, a2, (int16x8_t *)a3, (int16x8_t *)a4, a5);
}

int32x4_t sub_1C9708C30(int32x4_t *a1, int a2)
{
  int32x4_t result;
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int16x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int16x4_t v25;
  int16x4_t v26;

  if (a2 == 1)
  {
    result = (int32x4_t)vdupq_n_s16((a1->i16[0] + 65) >> 7);
    *a1 = result;
    a1[1] = result;
  }
  else
  {
    v3 = (int16x4_t)a1->u64[1];
    v4 = *(int16x4_t *)a1[1].i8;
    v5 = (int16x4_t)a1[1].u64[1];
    v6 = vsubl_s16(*(int16x4_t *)a1->i8, v4);
    v7 = vshlq_n_s32(vaddl_s16(v4, *(int16x4_t *)a1->i8), 6uLL);
    v8 = vshlq_n_s32(v6, 6uLL);
    v9 = vmlal_s16(vmull_s16(v5, (int16x4_t)0x24002400240024), v3, (int16x4_t)0x53005300530053);
    v10 = vmlsl_s16(vmull_s16(v3, (int16x4_t)0x24002400240024), v5, (int16x4_t)0x53005300530053);
    v11 = vqrshrn_n_s32(vaddq_s32(v9, v7), 7uLL);
    *(int16x4_t *)v7.i8 = vqrshrn_n_s32(vsubq_s32(v7, v9), 7uLL);
    v12 = vqrshrn_n_s32(vaddq_s32(v10, v8), 7uLL);
    *(int16x4_t *)v8.i8 = vqrshrn_n_s32(vsubq_s32(v8, v10), 7uLL);
    *(int16x4_t *)v10.i8 = vtrn1_s16(v11, v12);
    v13 = (int32x2_t)vtrn2_s16(v11, v12);
    v14 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v7.i8);
    *(int16x4_t *)v8.i8 = vtrn2_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v7.i8);
    *(int32x2_t *)v7.i8 = vzip1_s32(*(int32x2_t *)v10.i8, v14);
    v15 = (int16x4_t)vzip2_s32(*(int32x2_t *)v10.i8, v14);
    v16 = vaddl_s16(*(int16x4_t *)v7.i8, v15);
    v17 = vsubl_s16(*(int16x4_t *)v7.i8, v15);
    v18 = vshlq_n_s32(v16, 6uLL);
    v19 = vshlq_n_s32(v17, 6uLL);
    *(int32x2_t *)v16.i8 = vzip1_s32(v13, *(int32x2_t *)v8.i8);
    *(int32x2_t *)v8.i8 = vzip2_s32(v13, *(int32x2_t *)v8.i8);
    v20 = vmlal_s16(vmull_s16(*(int16x4_t *)v8.i8, (int16x4_t)0x24002400240024), *(int16x4_t *)v16.i8, (int16x4_t)0x53005300530053);
    v21 = vmlsl_s16(vmull_s16(*(int16x4_t *)v16.i8, (int16x4_t)0x24002400240024), *(int16x4_t *)v8.i8, (int16x4_t)0x53005300530053);
    result = vaddq_s32(v18, v20);
    v22 = vsubq_s32(v18, v20);
    v23 = vaddq_s32(v19, v21);
    v24 = vsubq_s32(v19, v21);
    v25 = vqrshrn_n_s32(result, 0xCuLL);
    *(int16x4_t *)v21.i8 = vqrshrn_n_s32(v22, 0xCuLL);
    v26 = vqrshrn_n_s32(v23, 0xCuLL);
    *(int16x4_t *)v16.i8 = vqrshrn_n_s32(v24, 0xCuLL);
    vst4_s16(a1->i16, *(int16x4x4_t *)(&v16 - 1));
  }
  return result;
}

int8x8_t sub_1C9708D08(uint8x8_t *a1, uint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x4_t *a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x8_t result;

  v6 = *a3;
  v5 = a3[1];
  v8 = *a4;
  v7 = a4[1];
  if (a5)
  {
    v9 = a3[-2];
    v10 = a3[-1];
    v11.i64[0] = 0x800000008;
    v11.i64[1] = 0x800000008;
    v12 = vdupq_laneq_s32(vsubw_s16(v11, *a5), 2);
    v13 = vshlq_s32(vmovl_s16(*(int16x4_t *)v9.i8), v12);
    v14 = vshlq_s32(vmovl_high_s16(v9), v12);
    v15 = vshlq_s32(vmovl_s16(*(int16x4_t *)v10.i8), v12);
    v16 = vshlq_s32(vmovl_high_s16(v10), v12);
    v17 = vmovl_s16(vdup_lane_s16(*a5, 0));
    v18 = vmovl_s16(vdup_lane_s16(*a5, 1));
    v6 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v13, v17), 3uLL), vmulq_s32(v14, v17), 3uLL), v6);
    v5 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v15, v17), 3uLL), vmulq_s32(v16, v17), 3uLL), v5);
    v8 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v13, v18), 3uLL), vmulq_s32(v14, v18), 3uLL), v8);
    v7 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v15, v18), 3uLL), vmulq_s32(v16, v18), 3uLL), v7);
    a3[-2] = 0u;
    a3[-1] = 0u;
  }
  *a3 = 0u;
  a3[1] = 0u;
  v19 = vzip1q_s16(v6, v8);
  *a4 = 0u;
  a4[1] = 0u;
  v20 = vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + a2)), vzip2q_s16(v6, v8));
  v21 = vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2)), vzip1q_s16(v5, v7));
  v22 = vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2)), vzip2q_s16(v5, v7));
  *a1 = (uint8x8_t)vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*a1), v19));
  *(int8x8_t *)((char *)a1 + a2) = vqmovun_s16(v20);
  *(int8x8_t *)((char *)a1 + 2 * a2) = vqmovun_s16(v21);
  result = vqmovun_s16(v22);
  *(int8x8_t *)((char *)a1 + 3 * a2) = result;
  return result;
}

uint64_t sub_1C9708E28(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  int16x8_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int16x8_t v11;
  unsigned int v12;
  unsigned int v13;
  int16x8_t v14;
  unsigned int v15;
  int16x8_t v16;
  unsigned int v17;
  int16x8_t v18;
  unsigned int v19;
  int16x8_t v20;
  unsigned int v21;
  int16x8_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  unsigned int v32;
  int16x8_t v33;
  double v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  int32x2_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double *v59;
  double *v60;
  double *v61;
  double *v62;
  double *v63;
  _QWORD v64[10];

  v64[9] = *MEMORY[0x1E0C80C00];
  v64[0] = a6;
  v64[1] = vext_s8(a6, a7, 1uLL);
  v64[2] = vext_s8(a6, a7, 2uLL);
  v64[3] = vext_s8(a6, a7, 3uLL);
  v64[4] = vext_s8(a6, a7, 4uLL);
  v64[5] = vext_s8(a6, a7, 5uLL);
  v64[6] = vext_s8(a6, a7, 6uLL);
  v64[7] = vext_s8(a6, a7, 7uLL);
  v64[8] = a7;
  v7 = (int16x8_t)vmull_u8((uint8x8_t)v64[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  if ((result & 0x1F) != 0)
    v7 = (int16x8_t)vmlal_u8((uint16x8_t)v7, (uint8x8_t)v64[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F));
  v8 = a2 + result;
  v9 = (a2 + result) >> 5;
  v10 = (a2 + result) & 0x1F;
  v11 = (int16x8_t)vmull_u8((uint8x8_t)v64[v9], (uint8x8_t)vdup_n_s8(32 - v10));
  if (v10)
    v11 = (int16x8_t)vmlal_u8((uint16x8_t)v11, (uint8x8_t)v64[v9 + 1], (uint8x8_t)vdup_n_s8(v10));
  v12 = (v8 + a2) >> 5;
  v13 = (v8 + a2) & 0x1F;
  v14 = (int16x8_t)vmull_u8((uint8x8_t)v64[v12], (uint8x8_t)vdup_n_s8(32 - v13));
  if (v13)
    v14 = (int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)v64[v12 + 1], (uint8x8_t)vdup_n_s8(v13));
  v15 = v8 + a2 + a2;
  v16 = (int16x8_t)vmull_u8((uint8x8_t)v64[v15 >> 5], (uint8x8_t)vdup_n_s8(32 - (v15 & 0x1F)));
  if ((v15 & 0x1F) != 0)
    v16 = (int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)v64[(v15 >> 5) + 1], (uint8x8_t)vdup_n_s8(v15 & 0x1F));
  v17 = v15 + a2;
  v18 = (int16x8_t)vmull_u8((uint8x8_t)v64[v17 >> 5], (uint8x8_t)vdup_n_s8(32 - (v17 & 0x1F)));
  if ((v17 & 0x1F) != 0)
    v18 = (int16x8_t)vmlal_u8((uint16x8_t)v18, (uint8x8_t)v64[(v17 >> 5) + 1], (uint8x8_t)vdup_n_s8(v17 & 0x1F));
  v19 = v17 + a2;
  v20 = (int16x8_t)vmull_u8((uint8x8_t)v64[v19 >> 5], (uint8x8_t)vdup_n_s8(32 - (v19 & 0x1F)));
  if ((v19 & 0x1F) != 0)
    v20 = (int16x8_t)vmlal_u8((uint16x8_t)v20, (uint8x8_t)v64[(v19 >> 5) + 1], (uint8x8_t)vdup_n_s8(v19 & 0x1F));
  v21 = v19 + a2;
  v22 = (int16x8_t)vmull_u8((uint8x8_t)v64[v21 >> 5], (uint8x8_t)vdup_n_s8(32 - (v21 & 0x1F)));
  if ((v21 & 0x1F) != 0)
    v22 = (int16x8_t)vmlal_u8((uint16x8_t)v22, (uint8x8_t)v64[(v21 >> 5) + 1], (uint8x8_t)vdup_n_s8(v21 & 0x1F));
  v23 = COERCE_DOUBLE(vrshrn_n_s16(v7, 5uLL));
  v24 = COERCE_DOUBLE(vrshrn_n_s16(v11, 5uLL));
  v25 = COERCE_DOUBLE(vrshrn_n_s16(v14, 5uLL));
  v26 = COERCE_DOUBLE(vrshrn_n_s16(v16, 5uLL));
  v27 = COERCE_DOUBLE(vrshrn_n_s16(v18, 5uLL));
  v28 = COERCE_DOUBLE(vrshrn_n_s16(v20, 5uLL));
  v29 = v21 + a2;
  v30 = v29 >> 5;
  v31 = COERCE_DOUBLE(vrshrn_n_s16(v22, 5uLL));
  v32 = v29 & 0x1F;
  v33 = (int16x8_t)vmull_u8((uint8x8_t)v64[v30], (uint8x8_t)vdup_n_s8(32 - v32));
  if (v32)
    v33 = (int16x8_t)vmlal_u8((uint16x8_t)v33, (uint8x8_t)v64[v30 + 1], (uint8x8_t)vdup_n_s8(v32));
  v34 = COERCE_DOUBLE(vrshrn_n_s16(v33, 5uLL));
  v35 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v23, *(int8x8_t *)&v24);
  v36 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v23, *(int8x8_t *)&v24);
  v37 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  v38 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  v39 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v27, *(int8x8_t *)&v28);
  v40 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v27, *(int8x8_t *)&v28);
  v41 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v31, *(int8x8_t *)&v34);
  v42 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v31, *(int8x8_t *)&v34);
  v43 = (int32x2_t)vtrn1_s16(v35, v37);
  v44 = (int32x2_t)vtrn2_s16(v35, v37);
  v45 = (int32x2_t)vtrn1_s16(v36, v38);
  v46 = (int32x2_t)vtrn2_s16(v36, v38);
  v47 = (int32x2_t)vtrn1_s16(v39, v41);
  v48 = (int32x2_t)vtrn2_s16(v39, v41);
  v49 = (int32x2_t)vtrn1_s16(v40, v42);
  v50 = (int32x2_t)vtrn2_s16(v40, v42);
  v51 = COERCE_DOUBLE(vzip1_s32(v43, v47));
  v52 = COERCE_DOUBLE(vzip2_s32(v43, v47));
  v53 = COERCE_DOUBLE(vzip1_s32(v45, v49));
  v54 = COERCE_DOUBLE(vzip2_s32(v45, v49));
  v55 = COERCE_DOUBLE(vzip1_s32(v44, v48));
  v56 = COERCE_DOUBLE(vzip2_s32(v44, v48));
  v57 = COERCE_DOUBLE(vzip1_s32(v46, v50));
  v58 = COERCE_DOUBLE(vzip2_s32(v46, v50));
  if (a3)
  {
    v34 = v58;
    v31 = v56;
    v28 = v54;
    v27 = v52;
    v26 = v57;
    v25 = v55;
    v24 = v53;
    v23 = v51;
  }
  *a5 = v23;
  *(double *)((char *)a5 + a4) = v24;
  v59 = (double *)((char *)a5 + a4 + a4);
  *v59 = v25;
  v60 = (double *)((char *)v59 + a4);
  *v60 = v26;
  v61 = (double *)((char *)v60 + a4);
  *v61 = v27;
  v62 = (double *)((char *)v61 + a4);
  *v62 = v28;
  v63 = (double *)((char *)v62 + a4);
  *v63 = v31;
  *(double *)((char *)v63 + a4) = v34;
  return result;
}

uint64_t sub_1C9709128(unsigned int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5;
  int v6;

  v5 = byte_1C98328DA[a1];
  v6 = byte_1C98328DA[a1];
  if (a1 >= 0x12)
  {
    if (v5 < 0)
    {
      *(int8x8_t *)a5.i8 = *a2;
      *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, *(int8x8_t *)((char *)&xmmword_1C9832A20[2 * a1 - 34] - 8));
      a5.i16[3] = a2[-1].i16[3];
      a2 += 2;
      return sub_1C970A974(byte_1C98328DA[a1], v5, a1 < 0x12, a3, a4, *(int8x8_t *)a5.i8, *a2);
    }
    a2 += 2;
    return sub_1C9708A20(byte_1C98328DA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  }
  if ((v6 & 0x80) == 0)
    return sub_1C9708A20(byte_1C98328DA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  *(int8x8_t *)a5.i8 = a2[2];
  *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, (int8x8_t)xmmword_1C9832A20[2 * (18 - a1) + 1].u64[1]);
  a5.i16[3] = a2[-1].i16[3];
  return sub_1C970A974(byte_1C98328DA[a1], v5, a1 < 0x12, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

int8x8_t sub_1C97091D8(uint64_t a1, int8x8_t *a2, uint64_t a3, _DWORD *a4)
{
  uint16x8_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  int16x4_t v9;
  int16x4_t v10;
  uint16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x8_t result;
  _DWORD *v15;

  v7 = a2[1];
  v8 = (uint8x8_t)vdup_lane_s8(v7, 4);
  v9 = (int16x4_t)vmull_u8((uint8x8_t)0x807060504030201, (uint8x8_t)vdup_lane_s8(*a2, 4)).u64[0];
  v10 = (int16x4_t)vmovl_u8((uint8x8_t)v7).u64[0];
  v11 = vmovl_u8((uint8x8_t)*a2);
  *(int16x4_t *)v4.i8 = vmul_n_s16((int16x4_t)0x100020003, v11.i16[0]);
  *(int16x4_t *)v5.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 1);
  *(int16x4_t *)v6.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 2);
  *(int16x4_t *)v11.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 3);
  *(int16x4_t *)v12.i8 = vmla_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v4, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 0)), v10, (int16x4_t)0x3000300030003);
  *(int16x4_t *)v13.i8 = vadd_s16((int16x4_t)*(_OWORD *)&vaddw_u8(vmlal_u8(v6, (uint8x8_t)0x807060504030201, v8), (uint8x8_t)v7), vdup_lane_s16(v9, 2));
  v12.u64[1] = (unint64_t)vadd_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v5, (uint8x8_t)0x807060504030201, v8), vadd_s16(v10, v10)), vdup_lane_s16(v9, 1));
  v13.u64[1] = (unint64_t)vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v11, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 3));
  *(int8x8_t *)v11.i8 = vrshrn_n_s16(v12, 3uLL);
  *a4 = v11.i32[0];
  *(_DWORD *)((char *)a4 + a3) = v11.i32[1];
  result = vrshrn_n_s16(v13, 3uLL);
  v15 = (_DWORD *)((char *)a4 + a3 + a3);
  *v15 = result.i32[0];
  *(_DWORD *)((char *)v15 + a3) = result.i32[1];
  return result;
}

uint64_t sub_1C9709284(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int8x8_t a6)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  signed int v41;
  _BOOL4 v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  signed int v47;
  _BOOL4 v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  int v65;
  char v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  int v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  char v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  char *v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  BOOL v125;
  uint64_t v126;
  char v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  BOOL v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  BOOL v143;
  uint64_t v144;
  char v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  _BOOL4 v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  BOOL v154;
  uint64_t v155;
  char v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  char v163;
  _BOOL4 v164;
  unint64_t v165;
  int v166;
  _BOOL4 v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  char v174;
  uint64_t v175;
  int v176;
  _WORD *v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  _BOOL4 v182;
  int v184;
  _BOOL4 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  _BOOL4 v197;
  unint64_t v198;
  unsigned int v199;
  char v200;
  int v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  signed int v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  BOOL v215;
  uint64_t v216;
  char v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  _BOOL8 v223;
  uint64_t result;
  unint64_t *v225;
  int v226;
  unsigned __int8 *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  _BYTE *v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  _BOOL4 v236;
  char *v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  char v252;
  uint64_t v253;
  int v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  unsigned int v259;
  int v260;
  uint64_t v261;

  v7 = *(unint64_t **)(a1 + 40);
  v8 = *v7;
  v9 = v7[1];
  v11 = (unsigned int *)v7[3];
  v10 = (unsigned int *)v7[4];
  v12 = v7[2];
  v13 = (int)a3 - 2;
  if (2 * (int)a3 < 2)
  {
    LODWORD(v14) = 0;
    LODWORD(v17) = 0;
  }
  else
  {
    v14 = 0;
    v15 = (char *)&unk_1C985A11D + 36 * (a5 > 0) + 9 * v13;
    v16 = (char *)v7 + 83;
    v17 = (2 * a3 - 1);
    while (1)
    {
      v18 = v15[v14];
      v19 = v16[v18];
      v20 = byte_1C98326D3[(v9 & 0xC0) + (v19 >> 1)];
      LODWORD(v21) = v9 - v20;
      v22 = v8 >= (v9 - v20) << 55;
      if (v8 < (v9 - v20) << 55)
        v21 = v21;
      else
        v21 = byte_1C98326D3[(v9 & 0xC0) + (v19 >> 1)];
      if (v8 < (v9 - v20) << 55)
      {
        v23 = 0;
      }
      else
      {
        v8 -= (v9 - v20) << 55;
        v23 = 1;
      }
      if (v22)
        v24 = v19 + 1;
      else
        v24 = v16[v18];
      v25 = __clz(v21) - 55;
      v8 <<= v25;
      v16[v18] = byte_1C98326D3[2 * v19 + 256 + v23];
      v12 += v25;
      if (v12 >= 0)
      {
        v26 = *v11++;
        v8 += (unint64_t)bswap32(v26) << v12;
        v12 -= 32;
        if (v11 >= v10)
          v11 = v10;
      }
      v9 = v21 << v25;
      if ((v24 & 1) == 0)
        break;
      if (v17 == ++v14)
      {
        LODWORD(v14) = 2 * a3 - 1;
        break;
      }
    }
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 40) + 101;
    while (1)
    {
      v29 = v15[v27];
      v30 = *(unsigned __int8 *)(v28 + v29);
      v31 = byte_1C98326D3[(v9 & 0xC0) + (v30 >> 1)];
      LODWORD(v32) = v9 - v31;
      v33 = v8 >= (v9 - v31) << 55;
      if (v8 < (v9 - v31) << 55)
        v32 = v32;
      else
        v32 = byte_1C98326D3[(v9 & 0xC0) + (v30 >> 1)];
      if (v8 < (v9 - v31) << 55)
      {
        v34 = 0;
      }
      else
      {
        v8 -= (v9 - v31) << 55;
        v34 = 1;
      }
      if (v33)
        v35 = v30 + 1;
      else
        v35 = *(_BYTE *)(v28 + v29);
      v36 = __clz(v32) - 55;
      v8 <<= v36;
      *(_BYTE *)(v28 + v29) = byte_1C98326D3[2 * v30 + 256 + v34];
      v12 += v36;
      if (v12 >= 0)
      {
        v37 = *v11++;
        v8 += (unint64_t)bswap32(v37) << v12;
        v12 -= 32;
        if (v11 >= v10)
          v11 = v10;
      }
      v9 = v32 << v36;
      if ((v35 & 1) == 0)
        break;
      if (v17 == ++v27)
        goto LABEL_36;
    }
    LODWORD(v17) = v27;
LABEL_36:
    v38 = v9 << 54;
    if (v14 >= 4)
    {
      v39 = 0;
      v40 = v14 >> 1;
      v41 = (v14 >> 1) - 1;
      do
      {
        v42 = v8 >= v38;
        if (v8 < v38)
          v43 = 0;
        else
          v43 = v9 << 54;
        v8 = 2 * (v8 - v43);
        v39 = v42 | (2 * v39);
        --v40;
      }
      while (v40 > 1);
      v12 += v41;
      if (v12 >= 0)
      {
        v44 = *v11++;
        v8 += (unint64_t)bswap32(v44) << v12;
        v12 -= 32;
        if (v11 >= v10)
          v11 = v10;
      }
      LODWORD(v14) = v39 + ((v14 & 1 | 2) << v41);
    }
    if (v17 >= 4)
    {
      v45 = 0;
      v46 = v17 >> 1;
      v47 = (v17 >> 1) - 1;
      do
      {
        v48 = v8 >= v38;
        if (v8 < v38)
          v49 = 0;
        else
          v49 = v9 << 54;
        v8 = 2 * (v8 - v49);
        v45 = v48 | (2 * v45);
        --v46;
      }
      while (v46 > 1);
      v12 += v47;
      if (v12 >= 0)
      {
        v50 = *v11++;
        v8 += (unint64_t)bswap32(v50) << v12;
        v12 -= 32;
        if (v11 >= v10)
          v11 = v10;
      }
      LODWORD(v17) = v45 + ((v17 & 1 | 2) << v47);
    }
  }
  if (a4 == 2)
    v51 = v17;
  else
    v51 = v14;
  if (a4 == 2)
    v52 = v14;
  else
    v52 = v17;
  if ((_DWORD)a3 == 3)
    v53 = 4 * a4;
  else
    v53 = 0;
  v54 = **(_WORD **)(a1 + 48);
  v55 = v54 >> 9;
  v56 = *(_QWORD *)(a1 + 32);
  v251 = v10;
  v225 = v7;
  v227 = (unsigned __int8 *)(a1 + 6426);
  if (a5)
  {
    v55 += *(char *)(v56 + a5 + 656) + *(char *)(*(_QWORD *)(a1 + 24) + a5 + 2);
    v57 = *(unsigned __int8 **)(v56 + 16);
    v58 = v57[2099];
    if (v55 <= -v58)
      v55 = -v58;
    if (v57[2148] == 1)
    {
      if (v55 >= 57)
        v59 = 57;
      else
        v59 = v55;
      v60 = __OFSUB__(v59, 30);
      v61 = v59 - 30;
      if (v61 < 0 == v60)
        v55 = byte_1C9861020[v61];
    }
    else if (v55 >= 51)
    {
      v55 = 51;
    }
    v62 = a3;
    v63 = v57 + 223;
  }
  else
  {
    v62 = a3;
    v57 = *(unsigned __int8 **)(v56 + 16);
    LOWORD(v58) = v57[2097];
    v63 = v57 + 222;
  }
  v239 = a1;
  v64 = (v52 >> 2 << v13) + (v51 >> 2);
  v65 = v51 & 3;
  v66 = v62 + 3;
  if (v55 < 0)
  {
    LOWORD(v55) = v55 + v58;
    v66 += *v63;
  }
  v236 = 0;
  v67 = *(_QWORD *)(a1 + 40) + 40;
  v68 = v65 & 0xFFFFFFF3 | (4 * (v52 & 3));
  v69 = *((unsigned __int8 *)*(&off_1E82923A0 + v13) + v53 + v64);
  v70 = *v227;
  v71 = v54 & 0x100;
  if (v57[402])
    v72 = (v70 | v71) == 0;
  else
    v72 = 1;
  v73 = !v72;
  v74 = *(_QWORD *)(v56 + 32);
  if (*(_BYTE *)(v74 + 5))
  {
    v75 = v239;
    if (!v71)
      v236 = v227[1] == 0;
  }
  else
  {
    v75 = v239;
  }
  v258 = (char *)&unk_1C9861A40 + 64 * (uint64_t)a4 + 16 * v13;
  v76 = v67 + 2 * (a5 > 0);
  v77 = v67 + 16 * (a5 > 0);
  v226 = byte_1C9862680[16 * a4 + v68];
  v78 = v57[274];
  v79 = v67 + 4 * (a5 > 0);
  v80 = v62;
  v82 = (int)v62 > 2 && v70 != 0;
  v83 = (char *)*(&off_1E82928A8 + v13) + v53;
  if (!v78 || v82)
  {
    v85 = 0;
    v66 -= 4;
  }
  else
  {
    if (*(_DWORD *)(v75 + 4) == 1)
      v84 = 0;
    else
      v84 = 3;
    v85 = v74 + 390 * v13 + 65 * (v84 + a5) + 40;
  }
  v86 = v251;
  v257 = v85;
  v238 = (char *)(v76 + 79);
  v230 = v77 + 127;
  v228 = v79 + 151;
  v87 = a39H[(__int16)v55 % 6] << ((__int16)v55 / 6);
  v248 = (1 << v83[v69]) | (1 << *v83);
  v88 = v226 & 0xF;
  v89 = (1 << v88);
  v244 = ~(-1 << v13);
  v246 = 1 << v13;
  v245 = (1 << v13) - 1;
  v243 = 4 << v62;
  if (a5 < 1)
    v90 = 1;
  else
    v90 = v73;
  if (v90)
    v91 = 0;
  else
    v91 = 27;
  v242 = v91;
  if (a5)
    v92 = 43;
  else
    v92 = 42;
  v241 = v92;
  if (a4)
    v93 = 15;
  else
    v93 = 9;
  v252 = v62 - 3;
  if ((_DWORD)v62 == 3)
    v94 = 9;
  else
    v94 = 12;
  v247 = v94;
  v254 = ~(-1 << v62);
  if ((_DWORD)v62 == 3)
    v95 = v93;
  else
    v95 = 21;
  v240 = v95;
  v253 = v87;
  v255 = v66;
  v256 = 1 << (v66 - 1);
  v229 = (char *)&unk_1C9861A40 + 64 * (uint64_t)a4 + 16 * v13;
  v96 = v69;
  v97 = 1;
  v250 = v62;
  v235 = a5;
  v233 = v69;
  v234 = v13;
  v232 = v73;
  v231 = v83;
  do
  {
    v249 = v96;
    v98 = v83[v96];
    v99 = v98 >> v13;
    if ((int)(v245 & v98) >= v245)
      v100 = 0;
    else
      v100 = (v248 >> v98) & 2;
    v101 = (v248 >> (v246 + v98)) & 1;
    if (v99 >= v245)
      LODWORD(v101) = 0;
    v102 = v101 | v100;
    v103 = v96 == v69 || v96 == 0;
    v104 = v103;
    if (!v103)
    {
      if ((_DWORD)v102)
        v105 = v238 + 1;
      else
        v105 = v238;
      v106 = *v105;
      v107 = byte_1C98326D3[(v9 & 0xC0) + (v106 >> 1)];
      LODWORD(v108) = v9 - v107;
      v109 = v8 >= (v9 - v107) << 55;
      if (v8 < (v9 - v107) << 55)
        v108 = v108;
      else
        v108 = byte_1C98326D3[(v9 & 0xC0) + (v106 >> 1)];
      if (v8 < (v9 - v107) << 55)
      {
        v110 = 0;
      }
      else
      {
        v8 -= (v9 - v107) << 55;
        v110 = 1;
      }
      if (v109)
        v111 = v106 + 1;
      else
        v111 = *v105;
      v112 = __clz(v108) - 55;
      v8 <<= v112;
      *v105 = byte_1C98326D3[2 * v106 + 256 + v110];
      v12 += v112;
      if (v12 >= 0)
      {
        v113 = *v11++;
        v8 += (unint64_t)bswap32(v113) << v12;
        v12 -= 32;
        if (v11 >= v86)
          v11 = v86;
      }
      v9 = v108 << v112;
      if ((v111 & 1) == 0)
        goto LABEL_317;
      v248 |= 1 << v98;
    }
    v260 = v99 * v243 + 4 * (v98 & v244);
    v114 = *(_QWORD *)(v75 + 40) + v242 + 123;
    if (v88 <= (v104 ^ 1))
    {
      v116 = v241;
      if ((v104 & 1) != 0)
        goto LABEL_179;
    }
    else
    {
      v115 = &v229[v88 - 1];
      v116 = v241;
      v117 = v260;
      do
      {
        if ((v73 & 1) == 0)
        {
          v118 = *v115;
          v119 = v118 + v117;
          if ((_DWORD)v80 == 2)
          {
            v117 = v260;
            v116 = byte_1C98626F0[v119 + 64];
          }
          else if ((int)v119 < 1)
          {
            v116 = 0;
          }
          else
          {
            v120 = byte_1C98626F0[16 * v102 + (v118 & 3 | (4 * ((v119 >> v80) & 3)))];
            if (a5)
            {
              v116 = v247 + v120;
            }
            else
            {
              if ((v119 >> v80 >> 2) + ((v119 & v254) >> 2))
                v121 = v120 + 3;
              else
                v121 = v120;
              v116 = v121 + v240;
            }
            v117 = v260;
          }
        }
        v122 = *(unsigned __int8 *)(v114 + v116);
        v123 = byte_1C98326D3[(v9 & 0xC0) + (v122 >> 1)];
        LODWORD(v124) = v9 - v123;
        v125 = v8 >= (v9 - v123) << 55;
        if (v8 < (v9 - v123) << 55)
          v124 = v124;
        else
          v124 = byte_1C98326D3[(v9 & 0xC0) + (v122 >> 1)];
        if (v8 < (v9 - v123) << 55)
        {
          v126 = 0;
        }
        else
        {
          v8 -= (v9 - v123) << 55;
          v126 = 1;
        }
        if (v125)
          v127 = v122 + 1;
        else
          v127 = *(_BYTE *)(v114 + v116);
        v128 = __clz(v124) - 55;
        v8 <<= v128;
        *(_BYTE *)(v114 + v116) = byte_1C98326D3[2 * v122 + 256 + v126];
        v12 += v128;
        if (v12 >= 0)
        {
          v129 = *v11++;
          v8 += (unint64_t)bswap32(v129) << v12;
          v12 -= 32;
          if (v11 >= v86)
            v11 = v86;
        }
        --v88;
        v9 = v124 << v128;
        v89 = ((v127 & 1) << v88) | v89;
        --v115;
      }
      while (v88 > (v104 ^ 1));
      if ((v104 & 1) != 0)
      {
LABEL_179:
        v130 = v249;
        if ((_DWORD)v89)
          goto LABEL_180;
        goto LABEL_340;
      }
    }
    v130 = v249;
    if ((_DWORD)v89)
    {
      if ((v73 & 1) == 0)
      {
        if ((_DWORD)v80 == 2)
        {
          v116 = byte_1C98626F0[v260 + 64];
        }
        else if (v260 < 1)
        {
          v116 = 0;
        }
        else
        {
          v211 = byte_1C98626F0[16 * v102 + 4 * ((v260 >> v80) & 3)];
          if (a5)
          {
            v116 = v247 + v211;
          }
          else
          {
            if ((v260 >> v80 >> 2) + ((v260 & v254) >> 2))
              v211 += 3;
            v116 = v211 + v240;
          }
        }
      }
      v212 = *(unsigned __int8 *)(v114 + v116);
      v213 = byte_1C98326D3[(v9 & 0xC0) + (v212 >> 1)];
      LODWORD(v214) = v9 - v213;
      v215 = v8 >= (v9 - v213) << 55;
      if (v8 < (v9 - v213) << 55)
        v214 = v214;
      else
        v214 = byte_1C98326D3[(v9 & 0xC0) + (v212 >> 1)];
      if (v8 < (v9 - v213) << 55)
      {
        v216 = 0;
      }
      else
      {
        v8 -= (v9 - v213) << 55;
        v216 = 1;
      }
      if (v215)
        v217 = v212 + 1;
      else
        v217 = *(_BYTE *)(v114 + v116);
      v218 = __clz(v214);
      v219 = v218 - 55;
      v9 = v214 << (v218 - 55);
      v8 <<= v218 - 55;
      v210 = v217 & 1;
      *(_BYTE *)(v114 + v116) = byte_1C98326D3[2 * v212 + 256 + v216];
      v12 += v219;
      if (v12 >= 0)
      {
        v220 = *v11++;
        v8 += (unint64_t)bswap32(v220) << v12;
        v12 -= 32;
        if (v11 >= v86)
          v11 = v86;
      }
      v130 = v249;
    }
    else
    {
      v210 = 1;
    }
    v89 = v210 | v89;
    if ((_DWORD)v89)
    {
LABEL_180:
      v131 = 0;
      v132 = 0;
      if (v130)
        v133 = a5 <= 0;
      else
        v133 = 0;
      if (v133)
        v134 = 2;
      else
        v134 = 0;
      v135 = v134 | (v97 == 0);
      v136 = v230 + 4 * v135;
      a6.i32[0] = v89;
      a6 = vcnt_s8(a6);
      a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
      if (a6.i32[0] >= 8u)
        v137 = 8;
      else
        v137 = a6.i32[0];
      if (v137 <= 1)
        v138 = 1;
      else
        v138 = v137;
      v97 = 1;
      v139 = v258;
      do
      {
        while (1)
        {
          v140 = *(unsigned __int8 *)(v136 + v97);
          v141 = byte_1C98326D3[(v9 & 0xC0) + (v140 >> 1)];
          LODWORD(v142) = v9 - v141;
          v143 = v8 >= (v9 - v141) << 55;
          if (v8 < (v9 - v141) << 55)
            v142 = v142;
          else
            v142 = byte_1C98326D3[(v9 & 0xC0) + (v140 >> 1)];
          if (v8 < (v9 - v141) << 55)
          {
            v144 = 0;
          }
          else
          {
            v8 -= (v9 - v141) << 55;
            v144 = 1;
          }
          if (v143)
            v145 = v140 + 1;
          else
            v145 = *(_BYTE *)(v136 + v97);
          v146 = __clz(v142) - 55;
          v8 <<= v146;
          *(_BYTE *)(v136 + v97) = byte_1C98326D3[2 * v140 + 256 + v144];
          v12 += v146;
          if (v12 >= 0)
          {
            v147 = *v11++;
            v8 += (unint64_t)bswap32(v147) << v12;
            v12 -= 32;
            if (v11 >= v86)
              v11 = v86;
          }
          v9 = v142 << v146;
          v131 |= (v145 & 1) << v132;
          if ((v145 & 1) == 0)
            break;
          v97 = 0;
          if (++v132 == v138)
          {
            v261 = a2 + 2 * v260;
            v148 = v253;
            goto LABEL_219;
          }
        }
        if ((v97 - 1) < 2)
          ++v97;
        ++v132;
      }
      while (v132 != v138);
      v261 = a2 + 2 * v260;
      v149 = a6.i32[0] > 8u;
      v148 = v253;
      if (v97)
      {
        v150 = 0;
        goto LABEL_232;
      }
LABEL_219:
      v151 = *(unsigned __int8 *)(v228 + v135);
      v152 = byte_1C98326D3[(v9 & 0xC0) + (v151 >> 1)];
      LODWORD(v153) = v9 - v152;
      v154 = v8 >= (v9 - v152) << 55;
      if (v8 < (v9 - v152) << 55)
        v153 = v153;
      else
        v153 = byte_1C98326D3[(v9 & 0xC0) + (v151 >> 1)];
      if (v8 < (v9 - v152) << 55)
      {
        v155 = 0;
      }
      else
      {
        v8 -= (v9 - v152) << 55;
        v155 = 1;
      }
      if (v154)
        v156 = v151 + 1;
      else
        v156 = *(_BYTE *)(v228 + v135);
      v157 = __clz(v153);
      v158 = v157 - 55;
      v9 = v153 << (v157 - 55);
      v8 <<= v157 - 55;
      v150 = v156 & 1;
      *(_BYTE *)(v228 + v135) = byte_1C98326D3[2 * v151 + 256 + v155];
      v97 = 0;
      v12 += v158;
      if (v12 >= 0)
      {
        v159 = *v11++;
        v8 += (unint64_t)bswap32(v159) << v12;
        v12 -= 32;
        if (v11 >= v86)
          v11 = v86;
      }
      v149 = 1;
LABEL_232:
      v160 = 0;
      v161 = __clz(v89);
      v162 = v161 ^ 0x1F;
      v163 = v161 + 1;
      v164 = (int)((v161 ^ 0x1F) - __clz(__rbit32(v89))) > 3 && v236;
      v165 = v9 << 54;
      v166 = a6.i32[0] - v164 + 1;
      do
      {
        v167 = v8 >= v165;
        if (v8 < v165)
          v168 = 0;
        else
          v168 = v9 << 54;
        v8 = 2 * (v8 - v168);
        v160 = v167 | (2 * v160);
        --v166;
      }
      while (v166 > 1);
      v169 = v80;
      v12 += a6.i32[0] - v164;
      if (v12 >= 0)
      {
        v170 = *v11++;
        v8 += (unint64_t)bswap32(v170) << v12;
        v12 -= 32;
        if (v11 >= v86)
          v11 = v86;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v175 = v89 << v163;
      v176 = v160 << (v164 - a6.i8[0]);
      v259 = __clz(__rbit32(v131));
      v177 = *(_WORD **)(v75 + 48);
      if (a6.i32[0] <= 1u)
        v178 = 1;
      else
        v178 = a6.i32[0];
      v179 = v178 - 1;
      v180 = v131;
      while (1)
      {
        if ((v180 & 1) != 0)
          v181 = v150 + 2;
        else
          v181 = 1;
        if ((v180 & 1) != 0)
          v150 = 0;
        if (v149)
        {
          v182 = (v180 & 1) == 0;
          if (v259 != v173 || v131 == 0)
            v184 = 2;
          else
            v184 = 3;
          v185 = v184 == v181;
          if (v173 < 8)
            v182 = v185;
          if (v182)
          {
            if (v171 <= 3 << v172)
              v186 = v172;
            else
              v186 = v172 + 1;
            if (v186 >= 4)
              v172 = 4;
            else
              v172 = v186;
            if (v8 >= v165)
            {
              v188 = 0;
              do
              {
                v187 = v188 + 1;
                v8 = 2 * (v8 - v165);
              }
              while (v8 >= v165 && v188++ < 0x11);
            }
            else
            {
              v187 = 0;
            }
            v8 *= 2;
            v12 += v187 + 1;
            if (v12 >= 0)
            {
              v190 = *v11++;
              v8 += (unint64_t)bswap32(v190) << v12;
              v12 -= 32;
              if (v11 >= v251)
                v11 = v251;
            }
            v191 = v187 - 3;
            if (v187 <= 2)
            {
              v192 = 0;
            }
            else
            {
              v187 = (1 << (v187 - 3)) + 2;
              v192 = v191;
            }
            v193 = v187 << v172;
            v194 = v192 + v172;
            if (v192 + v172)
            {
              v195 = 0;
              v196 = v192 + v172 + 1;
              do
              {
                v197 = v8 >= v165;
                if (v8 < v165)
                  v198 = 0;
                else
                  v198 = v9 << 54;
                v8 = 2 * (v8 - v198);
                v195 = v197 | (2 * v195);
                --v196;
              }
              while (v196 > 1);
              v12 += (int)v194;
              if (v12 >= 0)
              {
                v199 = *v11++;
                v8 += (unint64_t)bswap32(v199) << v12;
                v12 -= 32;
                if (v11 >= v251)
                  v11 = v251;
              }
              v169 = v250;
              v139 = v258;
              v193 += v195;
            }
            else
            {
              v169 = v250;
            }
            v171 = v193 + v181;
            v181 = v171;
          }
        }
        v174 += v181;
        v200 = !v164;
        if (v173 != a6.i32[0] - 1)
          v200 = 1;
        v201 = (v181 ^ (v176 >> 31)) - (v176 >> 31);
        if ((v174 & 1) != 0)
          v181 = -v181;
        if ((v200 & 1) != 0)
        {
          v176 *= 2;
          v202 = v201;
        }
        else
        {
          v202 = v181;
        }
        v203 = v139[v162];
        if ((*v177 & 0x100) == 0)
        {
          v204 = v148;
          if (v257)
          {
            v205 = v260 + v203;
            v148 = v253;
            v206 = ((v205 & v254) >> v252) + 8 * (v205 >> v169 >> v252);
            v139 = v258;
            if ((int)v169 < 4)
              v206 = v260 + v203;
            if (v205)
              v207 = v206 + 1;
            else
              v207 = v206;
            v204 = *(unsigned __int8 *)(v257 + v207) * (uint64_t)(int)v253;
          }
          v208 = (v256 + v204 * v202) >> v255;
          if (v208 >= 0x7FFF)
            v208 = 0x7FFFLL;
          if (v208 <= -32768)
            LOWORD(v202) = 0x8000;
          else
            LOWORD(v202) = v208;
        }
        *(_WORD *)(v261 + 2 * v203) = v202;
        if (v173 == v179)
          break;
        ++v173;
        v180 >>= 1;
        v209 = __clz(v175) + 1;
        LODWORD(v175) = (_DWORD)v175 << v209;
        v162 -= v209;
      }
      v89 = 0;
      v88 = 16;
      a5 = v235;
      v75 = v239;
      v69 = v233;
      v13 = v234;
      LOBYTE(v73) = v232;
      v83 = v231;
      v80 = v169;
      v86 = v251;
LABEL_317:
      v130 = v249;
      goto LABEL_341;
    }
LABEL_340:
    v88 = 16;
LABEL_341:
    v96 = v130 - 1;
  }
  while (v130 > 0);
  v221 = *(_QWORD *)(v75 + 32);
  if (*v227)
  {
    v222 = *(_QWORD *)(v221 + 2280) + 552;
    v223 = a5 != 0;
    if (v227[1])
      (*(void (**)(uint64_t))(v222 + 8 * v223 + 384))(a2);
    else
      (*(void (**)(uint64_t))(v222 + 32 * v223 + 8 * v13 + 176))(a2);
  }
  else if (v227[1])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v221 + 2280) + 8 * (v227[1] - 1) + 920))(a2);
  }
  *v225 = v8;
  v225[1] = v9;
  result = (v226 + 16 * v69 + 1);
  v225[2] = v12;
  v225[3] = (unint64_t)v11;
  return result;
}

void sub_1C970A170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a9 = v11;
  a9[1] = v12;
  a9[2] = v9;
  a9[3] = v10;
  _Unwind_Resume(a1);
}

int16x8_t sub_1C970A180(uint16x8_t a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, _BYTE *a5)
{
  int8x8_t v5;
  int16x8_t result;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;

  v5 = (int8x8_t)a3[1];
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*a3), vdup_n_s16(a3[-1].u8[7])), 1uLL);
  result.i64[0] = vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(v5, 0)).u64[0];
  result.i64[1] = result.i64[0];
  v7 = vqmovun_s16(result).u32[0];
  v8 = vdup_lane_s8(v5, 1).u32[0];
  v9 = vdup_lane_s8(v5, 2).u32[0];
  v10 = vdup_lane_s8(v5, 3).u32[0];
  *a5 = v7;
  a5[1] = v8;
  a5[2] = v9;
  a5[3] = v10;
  v11 = &a5[a4];
  *v11 = BYTE1(v7);
  v11[1] = BYTE1(v8);
  v11[2] = BYTE1(v9);
  v11[3] = BYTE1(v10);
  v12 = &v11[a4];
  *v12 = BYTE2(v7);
  v12[1] = BYTE2(v8);
  v12[2] = BYTE2(v9);
  v12[3] = BYTE2(v10);
  v13 = &v12[a4];
  *v13 = HIBYTE(v7);
  v13[1] = HIBYTE(v8);
  v13[2] = HIBYTE(v9);
  v13[3] = HIBYTE(v10);
  return result;
}

int16x8_t sub_1C970A1C8(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  int8x8_t v4;
  int16x4_t v5;
  int16x4_t v6;
  uint16x8_t v7;
  uint8x8_t v8;
  int16x8_t result;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;

  v4 = (int8x8_t)a2[1];
  v5 = (int16x4_t)vpaddl_u8((uint8x8_t)vext_s8((int8x8_t)vshld_n_s64(*a2, 0x20uLL), v4, 4uLL));
  v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  v8 = vqrshrn_n_u16(v7, 3uLL);
  result = (int16x8_t)vaddw_u8(vmull_u8(v8, (uint8x8_t)0x303030303030302), *(uint8x8_t *)a2);
  *(int8x8_t *)v7.i8 = vrshrn_n_s16(result, 2uLL);
  *a4 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)*a2, (uint8x8_t)v4), v8, (uint8x8_t)0x303030303030302), 2uLL).u32[0];
  v10 = (char *)a4 + a3;
  *v10 = v7.i8[1];
  v10[1] = v8.i8[1];
  v10[2] = v8.i8[1];
  v10[3] = v8.i8[1];
  v11 = (char *)a4 + a3 + a3;
  *v11 = v7.i8[2];
  v11[1] = v8.i8[2];
  v11[2] = v8.i8[2];
  v11[3] = v8.i8[2];
  v12 = &v11[a3];
  *v12 = v7.i8[3];
  v12[1] = v8.i8[3];
  v12[2] = v8.i8[3];
  v12[3] = v8.i8[3];
  return result;
}

int8x8_t sub_1C970A230(uint16x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int8x8_t v5;
  _DWORD *v6;
  int8x8_t result;

  v5 = *(int8x8_t *)a3;
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(a3 + 8)), vdup_n_s16(*(unsigned __int8 *)(a3 - 1))), 1uLL);
  *a5 = vqmovun_s16((int16x8_t)vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a3, 0))).u32[0];
  *(_DWORD *)((char *)a5 + a4) = vdup_lane_s8(v5, 1).u32[0];
  v6 = (_DWORD *)((char *)a5 + a4 + a4);
  *v6 = vdup_lane_s8(v5, 2).u32[0];
  result = vdup_lane_s8(v5, 3);
  *(_DWORD *)((char *)v6 + a4) = result.i32[0];
  return result;
}

uint64_t sub_1C970A27C(unsigned int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5;
  int v6;

  v5 = byte_1C98328DA[a1];
  v6 = byte_1C98328DA[a1];
  if (a1 < 0x12)
  {
    if ((v6 & 0x80) == 0)
      return sub_1C9708E28(byte_1C98328DA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    *(int8x8_t *)a5.i8 = a2[2];
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1C9832900[4 * (18 - a1) + 3]);
    a5.i8[7] = a2[-1].i8[7];
  }
  else
  {
    if ((v5 & 0x80000000) == 0)
    {
      a2 += 2;
      return sub_1C9708E28(byte_1C98328DA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    }
    *(int8x8_t *)a5.i8 = *a2;
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1C9832900[4 * a1 - 69]);
    a5.i8[7] = a2[-1].i8[7];
    a2 += 2;
  }
  return sub_1C970C1E8(byte_1C98328DA[a1], v5, a1 < 0x12, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

double sub_1C970A330(uint8x8_t *a1, uint64_t a2, int16x4_t *a3, int a4, int a5)
{
  int16x8_t *v6;
  uint8x8_t *v8;
  uint16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t v12;
  int8x8_t v13;
  int8x8_t v14;
  int8x8_t v15;
  int8x8_t v16;
  unsigned int v17;
  char v18;
  char v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  unsigned int v35;
  int8x16_t v36;

  v6 = (int16x8_t *)a3;
  v8 = a1;
  if (a5 == 1)
  {
    v9 = (uint16x8_t)vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    v10 = (int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 6 * a2));
    v11 = (int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)&a1[a2] - a2));
    v12 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + a2)));
    v13 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 2 * a2)));
    v14 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 3 * a2)));
    v15 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 4 * a2)));
    v16 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 5 * a2)));
    *a1 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v9, *a1));
    *(int8x8_t *)((char *)a1 + a2) = v12;
    *(int8x8_t *)((char *)a1 + 2 * a2) = v13;
    *(int8x8_t *)((char *)a1 + 3 * a2) = v14;
    *(int8x8_t *)((char *)a1 + 4 * a2) = v15;
    *(int8x8_t *)((char *)a1 + 5 * a2) = v16;
    *(int8x8_t *)((char *)a1 + 6 * a2) = vqmovun_s16(v10);
    *(int8x8_t *)((char *)&a1[a2] - a2) = vqmovun_s16(v11);
    if (a4)
    {
      v17 = -16;
      do
      {
        *v6 = (int16x8_t)v9;
        v6[1] = (int16x8_t)v9;
        v6 += 2;
        v17 += 16;
      }
      while (v17 < 0x30);
    }
  }
  else
  {
    sub_1C970A6D8(a3, a5);
    v18 = 1;
    do
    {
      v19 = v18;
      v20 = *v8;
      v21 = *(uint8x8_t *)((char *)v8 + a2);
      v22 = *(uint8x8_t *)((char *)v8 + 2 * a2);
      v23 = *(uint8x8_t *)((char *)v8 + 3 * a2);
      v24 = v6[1];
      v25 = v6[2];
      v26 = v6[3];
      v27 = (int32x4_t)vtrn1q_s16(*v6, v24);
      v28 = (int32x4_t)vtrn2q_s16(*v6, v24);
      v29 = (int32x4_t)vtrn1q_s16(v25, v26);
      v30 = (int32x4_t)vtrn2q_s16(v25, v26);
      v31 = (int16x8_t)vtrn1q_s32(v27, v29);
      v32 = (int16x8_t)vtrn2q_s32(v27, v29);
      v33 = (int16x8_t)vtrn1q_s32(v28, v30);
      v34 = (int16x8_t)vtrn2q_s32(v28, v30);
      if (a4)
        v35 = -1;
      else
        v35 = 0;
      v36 = (int8x16_t)vdupq_n_s16(v35);
      *(int8x16_t *)v6 = vandq_s8((int8x16_t)v31, v36);
      v6[1] = (int16x8_t)vandq_s8((int8x16_t)v33, v36);
      v6[2] = (int16x8_t)vandq_s8((int8x16_t)v32, v36);
      v6[3] = (int16x8_t)vandq_s8((int8x16_t)v34, v36);
      *v8 = (uint8x8_t)vqmovun_s16(vqaddq_s16(v31, (int16x8_t)vmovl_u8(v20)));
      *(int8x8_t *)((char *)v8 + a2) = vqmovun_s16(vqaddq_s16(v33, (int16x8_t)vmovl_u8(v21)));
      *(int8x8_t *)((char *)v8 + 2 * a2) = vqmovun_s16(vqaddq_s16(v32, (int16x8_t)vmovl_u8(v22)));
      *(int8x8_t *)v9.i8 = vqmovun_s16(vqaddq_s16(v34, (int16x8_t)vmovl_u8(v23)));
      *(uint8x8_t *)((char *)v8 + 3 * a2) = *(uint8x8_t *)v9.i8;
      v8 = (uint8x8_t *)((char *)v8 + 4 * a2);
      v6 += 4;
      v18 = 0;
    }
    while ((v19 & 1) != 0);
  }
  return *(double *)v9.i64;
}

uint64_t sub_1C970A500(unint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1] << 54;
  v5 = a1[2];
  do
  {
    v6 = v3;
    if (v3 < v4)
      v7 = 0;
    else
      v7 = v4;
    v3 = 2 * (v6 - v7);
    if (v5 < -1)
    {
      ++v5;
    }
    else
    {
      v8 = (unsigned int *)a1[3];
      v10 = *v8;
      v9 = v8 + 1;
      v3 += (unint64_t)bswap32(v10) << (v5 + 1);
      v5 -= 31;
      if ((unint64_t)v9 >= a1[4])
        v11 = (unsigned int *)a1[4];
      else
        v11 = v9;
      a1[3] = (unint64_t)v11;
    }
    ++v2;
    a1[2] = v5;
    *a1 = v3;
  }
  while (v6 >= v4 && v2 < a2);
  return v2 - (v6 < v4);
}

int8x8_t sub_1C970A588(uint64_t a1, int16x4_t *a2, uint64_t a3, int8x8_t *a4)
{
  const __int16 *v4;
  uint8x8_t v5;
  uint8x8_t v6;
  const __int16 *v7;
  uint8x8_t v8;
  uint16x8_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x8_t result;
  int8x8_t *v18;

  v4 = (const __int16 *)&a2[1];
  v5 = (uint8x8_t)vld1_dup_s16(v4);
  v6 = (uint8x8_t)a2[2];
  v7 = (const __int16 *)&a2[3];
  v8 = (uint8x8_t)vld1_dup_s16(v7);
  v9 = vmull_u8((uint8x8_t)0x404030302020101, v8);
  v10 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  v11 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
  v12 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1);
  v13 = (int16x8_t)vdupq_laneq_s32(v10, 2);
  v14 = (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vdupq_laneq_s32(v10, 3), (uint8x8_t)0x404030302020101, v8), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 3));
  v15 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 0)), (uint8x8_t)0x404030302020101, v8), v11), v6, (uint8x8_t)0x303030303030303);
  v16 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 1)), (uint8x8_t)0x404030302020101, v8), v12), v6, (uint8x8_t)0x202020202020202);
  result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v9, v6), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 2)), v13), 3uLL);
  *a4 = vrshrn_n_s16(v15, 3uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v16, 3uLL);
  v18 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v18 = result;
  *(int8x8_t *)((char *)v18 + a3) = vrshrn_n_s16(v14, 3uLL);
  return result;
}

__n128 sub_1C970A640(int8x8_t *a1, uint64_t a2)
{
  unsigned int v2;
  int8x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  __n128 result;

  v2 = a1[-1].u8[7];
  v3 = vdup_n_s8(v2);
  *(_BYTE *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  v4 = *(int8x16_t *)a1->i8;
  v5 = vextq_s8(v4, v4, 8uLL);
  *(uint8x8_t *)&v6 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *a1, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), (uint8x8_t)*a1);
  *((uint8x8_t *)&v6 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1->i8, v5, 9uLL)), *(uint8x8_t *)v5.i8);
  *(_OWORD *)a2 = v6;
  *(_BYTE *)(a2 + 15) = v4.i8[15];
  v7 = *(int8x16_t *)a1[2].i8;
  v8 = vextq_s8(v7, v7, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v7.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL)), *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v8, 9uLL)), *(uint8x8_t *)v8.i8);
  *(__n128 *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 31) = v7.i8[15];
  return result;
}

int16x4_t *sub_1C970A6D8(int16x4_t *result, int a2)
{
  int16x4_t *v2;
  int16x8_t v3;
  char v4;
  char v5;

  v2 = result;
  if (a2 == 1)
  {
    v3 = vdupq_n_s16((result->i16[0] + 65) >> 7);
    v4 = 1;
    do
    {
      v5 = v4;
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v2 += 8;
      v4 = 0;
    }
    while ((v5 & 1) != 0);
  }
  else if (a2 > 16)
  {
    sub_1C970AC1C(result, 8u, (uint64_t)&unk_1C98612E0, (int16x4_t *)aYk2);
    sub_1C970AC1C(v2 + 1, 8u, (uint64_t)&unk_1C98612E0, (int16x4_t *)aYk2);
    sub_1C970A7E0((int16x8_t *)v2, 8u, (uint64_t)&unk_1C98612E0, (int16x4_t *)aYk2);
    return (int16x4_t *)sub_1C970A7E0((int16x8_t *)&v2[8], 8u, (uint64_t)&unk_1C98612E0, (int16x4_t *)aYk2);
  }
  else
  {
    sub_1C970AB50(result, 8u, (uint64_t)&unk_1C98612E0);
    sub_1C970B568(v2, 8u, (uint64_t)&unk_1C98612E0);
    return sub_1C970B568(v2 + 8, 8u, (uint64_t)&unk_1C98612E0);
  }
  return result;
}

int16x8_t *sub_1C970A7E0(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  unsigned int v4;
  int16x8_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int v31;
  int v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;

  v4 = a2 - 1;
  v5 = (int16x8_t *)((char *)&unk_1C9861310 + 2 * a2);
  v6 = *(int16x8_t *)((char *)result + 4 * a2);
  v7 = *(int16x8_t *)((char *)result + 2 * a2);
  v8 = *(int16x8_t *)((char *)result + 6 * a2);
  v9 = (int32x4_t)vtrn1q_s16(*result, v7);
  v10 = (int32x4_t)vtrn2q_s16(*result, v7);
  v11 = (int32x4_t)vtrn1q_s16(v6, v8);
  v12 = (int32x4_t)vtrn2q_s16(v6, v8);
  v13 = (int16x8_t)vtrn1q_s32(v9, v11);
  v14 = (int16x8_t)vtrn2q_s32(v9, v11);
  v15 = (int16x8_t)vtrn1q_s32(v10, v12);
  v16 = (int16x8_t)vtrn2q_s32(v10, v12);
  v17 = vshll_n_s16(*(int16x4_t *)v13.i8, 6uLL);
  v18 = a2 >> 3;
  v19 = (unsigned __int8 *)(a3 + 3);
  do
  {
    v20 = *v5++;
    v21 = vmlal_high_laneq_s16(v17, v13, v20, 4);
    v22 = vmlsl_high_laneq_s16(v17, v13, v20, 4);
    v23 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 0), v14, *(int16x4_t *)v20.i8, 1);
    v24 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 2), v14, *(int16x4_t *)v20.i8, 3);
    v25 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *a4, 1), *(int16x4_t *)v15.i8, *a4, 0), v15, *a4, 2), v16, *a4, 3);
    v26 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[1], 1), *(int16x4_t *)v15.i8, a4[1], 0), v15, a4[1], 2), v16, a4[1], 3);
    v27 = a4[3];
    v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[2], 1), *(int16x4_t *)v15.i8, a4[2], 0), v15, a4[2], 2), v16, a4[2], 3);
    v29 = vaddq_s32(v23, v21);
    v30 = vsubq_s32(v21, v23);
    v31 = *(v19 - 3);
    v32 = *(v19 - 2);
    v33 = *(v19 - 1);
    v20.i32[0] = *v19;
    v19 += 4;
    *(int16x4_t *)&result->i8[8 * v31] = vqrshrn_n_s32(vaddq_s32(v25, v29), 0xCuLL);
    v34 = vaddq_s32(v24, v22);
    v35 = vsubq_s32(v22, v24);
    *(int16x4_t *)&result->i8[8 * v32] = vqrshrn_n_s32(vaddq_s32(v26, v30), 0xCuLL);
    v36 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, v27, 1), *(int16x4_t *)v15.i8, v27, 0), v15, v27, 2), v16, v27, 3);
    *(int16x4_t *)&result->i8[8 * v33] = vqrshrn_n_s32(vaddq_s32(v28, v34), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * v20.u32[0]] = vqrshrn_n_s32(vaddq_s32(v36, v35), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v31)] = vqrshrn_n_s32(vsubq_s32(v29, v25), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v32)] = vqrshrn_n_s32(vsubq_s32(v30, v26), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v33)] = vqrshrn_n_s32(vsubq_s32(v34, v28), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v20.i32[0])] = vqrshrn_n_s32(vsubq_s32(v35, v36), 0xCuLL);
    a4 += 4;
    --v18;
  }
  while (v18);
  return result;
}

uint64_t sub_1C970A974(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  int v7;
  int16x8_t v8;
  int v9;
  int v10;
  double v11;
  int16x8_t v12;
  int v13;
  int v14;
  double v15;
  int16x8_t v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  _QWORD v30[6];

  v30[5] = *MEMORY[0x1E0C80C00];
  v30[0] = a7;
  v30[1] = vext_s8(a6, a7, 6uLL);
  v30[2] = vext_s8(a6, a7, 4uLL);
  v30[3] = vext_s8(a6, a7, 2uLL);
  v30[4] = a6;
  v7 = (int)result >> 5;
  if ((int)result >> 5 < 0)
    v7 = -v7;
  v8 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v30[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  v9 = a2 + result;
  v10 = (a2 + (int)result) >> 5;
  if (v10 < 0)
    v10 = -v10;
  v11 = COERCE_DOUBLE(vrshrn_n_s16(v8, 5uLL));
  v12 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v30[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu)));
  v13 = v9 + a2;
  v14 = v13 >> 5;
  if (v13 >> 5 < 0)
    v14 = -v14;
  v15 = COERCE_DOUBLE(vrshrn_n_s16(v12, 5uLL));
  v16 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v14 - 1], (uint8x8_t)vdup_n_s8(v13 & 0x1F)), (uint8x8_t)v30[v14], (uint8x8_t)vdup_n_s8(32 - (v13 & 0x1Fu)));
  v17 = v13 + a2;
  v18 = v17 >> 5;
  if (v17 >> 5 < 0)
    v18 = -v18;
  v19 = COERCE_DOUBLE(vrshrn_n_s16(v16, 5uLL));
  v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v18 - 1], (uint8x8_t)vdup_n_s8(v17 & 0x1F)), (uint8x8_t)v30[v18], (uint8x8_t)vdup_n_s8(32 - (v17 & 0x1Fu))), 5uLL));
  v21 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  v22 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  v23 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  v24 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  v25 = COERCE_DOUBLE(vzip1_s32(v21, v23));
  v26 = COERCE_DOUBLE(vzip2_s32(v21, v23));
  v27 = COERCE_DOUBLE(vzip1_s32(v22, v24));
  v28 = COERCE_DOUBLE(vzip2_s32(v22, v24));
  if (a3)
  {
    v20 = v28;
    v19 = v26;
    v15 = v27;
    v11 = v25;
  }
  *a5 = v11;
  *(double *)((char *)a5 + a4) = v15;
  v29 = (double *)((char *)a5 + a4 + a4);
  *v29 = v19;
  *(double *)((char *)v29 + a4) = v20;
  return result;
}

int16x4_t sub_1C970AB00(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t result;
  int16x4_t *v7;

  v4 = vdup_lane_s16(*a2, 1);
  v5 = vdup_lane_s16(*a2, 2);
  result = vdup_lane_s16(*a2, 3);
  *a4 = vdup_lane_s16(*a2, 0);
  *(int16x4_t *)((char *)a4 + a3) = v4;
  v7 = (int16x4_t *)((char *)a4 + a3 + a3);
  *v7 = v5;
  *(int16x4_t *)((char *)v7 + a3) = result;
  return result;
}

double sub_1C970AB30(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  double result;
  double *v5;

  result = *(double *)(a2 + 16);
  *a4 = result;
  *(double *)((char *)a4 + a3) = result;
  v5 = (double *)((char *)a4 + a3 + a3);
  *v5 = result;
  *(double *)((char *)v5 + a3) = result;
  return result;
}

int16x4_t *sub_1C970AB50(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x8_t *v7;
  int16x4_t v8;
  int32x4_t v9;
  unsigned __int8 *v10;
  int16x8_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int v16;

  LODWORD(v3) = a2 >> 2;
  v4 = (a2 - 1) * (a2 >> 2);
  v5 = *(int16x4_t *)((char *)result + 2 * a2);
  v6 = *(int16x4_t *)((char *)result + 4 * a2);
  v7 = (int16x8_t *)((char *)&unk_1C9861310 + 4 * a2);
  v8 = *(int16x4_t *)((char *)result + 6 * a2);
  v9 = vshll_n_s16(*result, 6uLL);
  if (a2 >> 2 <= 1)
    v3 = 1;
  else
    v3 = v3;
  v10 = (unsigned __int8 *)(a3 + 1);
  do
  {
    v11 = *v7++;
    v12 = vmlal_laneq_s16(v9, v6, v11, 4);
    v13 = vmlsl_laneq_s16(v9, v6, v11, 4);
    v14 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 1), v5, *(int16x4_t *)v11.i8, 0);
    v15 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 3), v5, *(int16x4_t *)v11.i8, 2);
    v16 = *(v10 - 1);
    v11.i32[0] = *v10;
    v10 += 2;
    result[v16] = vqrshrn_n_s32(vaddq_s32(v14, v12), 7uLL);
    result[v11.u32[0]] = vqrshrn_n_s32(vaddq_s32(v15, v13), 7uLL);
    result[v4 - v16] = vqrshrn_n_s32(vsubq_s32(v12, v14), 7uLL);
    result[v4 - v11.i32[0]] = vqrshrn_n_s32(vsubq_s32(v13, v15), 7uLL);
    --v3;
  }
  while (v3);
  return result;
}

int16x4_t *sub_1C970AC1C(int16x4_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4;
  int v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int16x8_t *v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int v27;
  int v28;
  int v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;

  v4 = *(int16x4_t *)((char *)result + 4 * a2);
  v5 = (a2 - 1) * (a2 >> 2);
  v6 = result[a2];
  v7 = *(int16x4_t *)((char *)result + 12 * a2);
  v8 = *(int16x4_t *)((char *)result + 2 * a2);
  v9 = *(int16x4_t *)((char *)result + 6 * a2);
  v10 = *(int16x4_t *)((char *)result + 10 * a2);
  v11 = *(int16x4_t *)((char *)result + 14 * a2);
  v12 = vshll_n_s16(*result, 6uLL);
  v13 = a2 >> 3;
  v14 = (unsigned __int8 *)(a3 + 3);
  v15 = (int16x8_t *)((char *)&unk_1C9861310 + 2 * a2);
  do
  {
    v16 = *v15++;
    v17 = vmlal_laneq_s16(v12, v6, v16, 4);
    v18 = vmlsl_laneq_s16(v12, v6, v16, 4);
    v19 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 1), v4, *(int16x4_t *)v16.i8, 0);
    v20 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 3), v4, *(int16x4_t *)v16.i8, 2);
    v21 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, *a4, 1), v8, *a4, 0), v10, *a4, 2), v11, *a4, 3);
    v22 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[1], 1), v8, a4[1], 0), v10, a4[1], 2), v11, a4[1], 3);
    v23 = a4[3];
    v24 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[2], 1), v8, a4[2], 0), v10, a4[2], 2), v11, a4[2], 3);
    v25 = vaddq_s32(v19, v17);
    v26 = vsubq_s32(v17, v19);
    v27 = *(v14 - 3);
    v28 = *(v14 - 2);
    v29 = *(v14 - 1);
    v16.i32[0] = *v14;
    v14 += 4;
    result[v27] = vqrshrn_n_s32(vaddq_s32(v21, v25), 7uLL);
    v30 = vaddq_s32(v20, v18);
    v31 = vsubq_s32(v18, v20);
    result[v28] = vqrshrn_n_s32(vaddq_s32(v22, v26), 7uLL);
    v32 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, v23, 1), v8, v23, 0), v10, v23, 2), v11, v23, 3);
    result[v29] = vqrshrn_n_s32(vaddq_s32(v24, v30), 7uLL);
    result[v16.u32[0]] = vqrshrn_n_s32(vaddq_s32(v32, v31), 7uLL);
    result[v5 - v27] = vqrshrn_n_s32(vsubq_s32(v25, v21), 7uLL);
    result[v5 - v28] = vqrshrn_n_s32(vsubq_s32(v26, v22), 7uLL);
    result[v5 - v29] = vqrshrn_n_s32(vsubq_s32(v30, v24), 7uLL);
    result[v5 - v16.i32[0]] = vqrshrn_n_s32(vsubq_s32(v31, v32), 7uLL);
    a4 += 4;
    --v13;
  }
  while (v13);
  return result;
}

__n128 sub_1C970ADCC(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2;
  int8x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint8x8_t v6;
  int8x16_t v7;
  uint8x8_t v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  __int128 v13;
  __n128 result;

  v2 = a1[-1].u8[15];
  v3 = vdup_n_s8(v2);
  *(_BYTE *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  v4 = *a1;
  v5 = a1[1];
  v6 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  v7 = vextq_s8(v5, v5, 8uLL);
  v8 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)&v9 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v8, v6);
  *((uint8x8_t *)&v9 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL)), *(uint8x8_t *)v7.i8);
  *(int8x16_t *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 31) = v5.i8[15];
  v10 = a1[2];
  v11 = a1[3];
  v12 = vextq_s8(v11, v11, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v10.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 1uLL)), *(uint8x8_t *)v10.i8);
  *(uint8x8_t *)&v13 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 1uLL)), *(uint8x8_t *)v11.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  *((uint8x8_t *)&v13 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v12, 9uLL)), *(uint8x8_t *)v12.i8);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 63) = v11.i8[15];
  return result;
}

uint8x8_t sub_1C970AEB4(uint64_t a1, int8x8_t *a2, uint64_t a3, uint8x8_t *a4)
{
  int16x4_t v4;
  uint16x8_t v5;
  uint8x8_t result;
  uint8x8_t *v7;

  v4 = vpadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vuzp1_s8(*a2, a2[2])), (int16x4_t)vpaddl_u8((uint8x8_t)vuzp2_s8(*a2, a2[2])));
  *(int16x4_t *)v5.i8 = vpadd_s16(v4, v4);
  v5.i64[1] = v5.i64[0];
  result = vqrshrn_n_u16(v5, 3uLL);
  *a4 = result;
  *(uint8x8_t *)((char *)a4 + a3) = result;
  v7 = (uint8x8_t *)((char *)a4 + a3 + a3);
  *v7 = result;
  *(uint8x8_t *)((char *)v7 + a3) = result;
  return result;
}

uint64_t sub_1C970AEF8(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;

  v1 = *a1;
  v2 = a1[1] - 2;
  a1[1] = v2;
  if (v1 >= v2 << 55)
    return 1;
  if (v2 > 0xFF)
    return 0;
  v3 = 2 * v1;
  *a1 = v3;
  a1[1] = 2 * v2;
  v4 = a1[2];
  v5 = v4 + 1;
  if (v4 >= -1)
  {
    v6 = (unsigned int *)a1[3];
    v7 = a1[4];
    v9 = *v6;
    v8 = v6 + 1;
    *a1 = ((unint64_t)bswap32(v9) << v5) + v3;
    v5 = v4 - 31;
    if ((unint64_t)v8 >= v7)
      v10 = (unsigned int *)v7;
    else
      v10 = v8;
    a1[3] = (uint64_t)v10;
  }
  v11 = 0;
  a1[2] = v5;
  return v11;
}

int8x16_t sub_1C970AF78(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  const char *v4;
  uint8x8_t v5;
  const char *v6;
  uint8x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  uint8x8_t v15;
  uint16x8_t v16;
  uint8x8_t v17;
  uint16x8_t v18;
  uint8x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint8x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint8x16_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t *v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int8x16_t *v50;
  int16x8_t v51;
  uint8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int8x16_t result;

  v4 = (const char *)(a2 + 48);
  v5 = (uint8x8_t)vld1_dup_s8(v4);
  v6 = (const char *)(a2 + 16);
  v7 = (uint8x8_t)vld1_dup_s8(v6);
  v8 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v7);
  v9 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v7);
  v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  v13 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  v14 = *(int8x16_t *)a2;
  v15 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0);
  v16 = vmull_u8(v15, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  v17 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 1);
  v18 = vmull_u8(v15, (uint8x8_t)0x1020304050607);
  v19 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 2);
  v20 = vmull_u8(v19, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  v21 = vmull_u8(v19, (uint8x8_t)0x1020304050607);
  v22 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 3);
  v23 = vmull_u8(v22, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  v24 = vmull_u8(v22, (uint8x8_t)0x1020304050607);
  v25.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v25.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v26 = *(uint8x16_t *)(a2 + 32);
  v27 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v16, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xF0F0F0F0F0F0F0FLL), v10);
  v28 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v18, v26, v25), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v10);
  v18.i64[0] = 0xE0E0E0E0E0E0E0ELL;
  v18.i64[1] = 0xE0E0E0E0E0E0E0ELL;
  v29 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(v17, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xE0E0E0E0E0E0E0ELL), v11);
  v30 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(v17, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v18), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v11);
  v31.i64[0] = 0xD0D0D0D0D0D0D0DLL;
  v31.i64[1] = 0xD0D0D0D0D0D0D0DLL;
  v32 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v20, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xD0D0D0D0D0D0D0DLL), v12);
  v33 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v21, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v12);
  v31.i64[0] = 0xC0C0C0C0C0C0C0CLL;
  v31.i64[1] = 0xC0C0C0C0C0C0C0CLL;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16(v27, 5uLL), v28, 5uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v29, 5uLL), v30, 5uLL);
  v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *v34 = vrshrn_high_n_s16(vrshrn_n_s16(v32, 5uLL), v33, 5uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v23, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xC0C0C0C0C0C0C0CLL), v13), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v24, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v13), 5uLL);
  v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  v36 = vdupq_laneq_s16(v8, 4);
  v37 = vdupq_laneq_s16(v8, 5);
  v38 = vdupq_laneq_s16(v8, 6);
  v39 = vdupq_laneq_s16(v8, 7);
  *(int8x8_t *)v8.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 4);
  *(int8x8_t *)v31.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 5);
  *(int8x8_t *)v29.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 6);
  *(int8x8_t *)v21.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 7);
  v24.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v24.i64[1] = 0xB0B0B0B0B0B0B0BLL;
  v40 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xB0B0B0B0B0B0B0BLL), v36);
  v41 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v24), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v36);
  v8.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v8.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  v42 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xA0A0A0A0A0A0A0ALL), v37);
  v43 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v37);
  v8.i64[0] = 0x909090909090909;
  v8.i64[1] = 0x909090909090909;
  v44 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x909090909090909), v38);
  v45 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v38);
  v8.i64[0] = 0x303030303030303;
  v8.i64[1] = 0x303030303030303;
  *v35 = vrshrn_high_n_s16(vrshrn_n_s16(v40, 5uLL), v41, 5uLL);
  *(int8x16_t *)((char *)v35 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v42, 5uLL), v43, 5uLL);
  v46 = (int8x16_t *)((char *)v35 + a3 + a3);
  *v46 = vrshrn_high_n_s16(vrshrn_n_s16(v44, 5uLL), v45, 5uLL);
  *(int8x16_t *)((char *)v46 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 3uLL)), v39), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 3uLL), *(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v39),
                                       5uLL);
  v47 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
  v48 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  v49 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  v50 = (int8x16_t *)((char *)v35 + 4 * a3);
  v51 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  *(int8x8_t *)v44.i8 = vdup_laneq_s8(v14, 8);
  *(int8x8_t *)v29.i8 = vdup_laneq_s8(v14, 9);
  *(int8x8_t *)v21.i8 = vdup_laneq_s8(v14, 10);
  *(int8x8_t *)v41.i8 = vdup_laneq_s8(v14, 11);
  v52.i64[0] = 0x707070707070707;
  v52.i64[1] = 0x707070707070707;
  v53 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x707070707070707), v47);
  v54 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x1020304050607), v26, v52), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v47);
  v44.i64[0] = 0x606060606060606;
  v44.i64[1] = 0x606060606060606;
  v55 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x606060606060606), v48);
  v56 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v44), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v48);
  v29.i64[0] = 0x505050505050505;
  v29.i64[1] = 0x505050505050505;
  *v50 = vrshrn_high_n_s16(vrshrn_n_s16(v53, 5uLL), v54, 5uLL);
  *(int8x16_t *)((char *)v50 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v55, 5uLL), v56, 5uLL);
  v57 = (int8x16_t *)((char *)v50 + a3 + a3);
  *v57 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x505050505050505), v49), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v29), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v49),
           5uLL);
  *(int8x16_t *)((char *)v57 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 2uLL)), v51), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 2uLL), *(uint8x8_t *)v41.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v51),
                                       5uLL);
  v58 = (int8x16_t *)((char *)v50 + 4 * a3);
  v59 = vdupq_laneq_s16(v9, 4);
  v60 = vdupq_laneq_s16(v9, 5);
  v61 = vdupq_laneq_s16(v9, 6);
  v62 = vdupq_laneq_s16(v9, 7);
  *(int8x8_t *)v51.i8 = vdup_laneq_s8(v14, 12);
  *(int8x8_t *)v53.i8 = vdup_laneq_s8(v14, 13);
  *(int8x8_t *)v55.i8 = vdup_laneq_s8(v14, 14);
  *(int8x8_t *)v14.i8 = vdup_laneq_s8(v14, 15);
  *v58 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x303030303030303), v59), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v59),
           5uLL);
  v63 = (int8x16_t *)((char *)v58 + a3);
  *v63 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v53.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 1uLL)), v60), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 1uLL), *(uint8x8_t *)v53.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v60), 5uLL);
  v64 = (int8x16_t *)((char *)v63 + a3);
  *v64 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(vmull_u8((uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8), *(uint8x8_t *)v55.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), v61), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vaddw_high_u8(vmull_u8(*(uint8x8_t *)v55.i8, (uint8x8_t)0x1020304050607), v26), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v61), 5uLL);
  result = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), v62), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v5), *(uint8x8_t *)v14.i8, (uint8x8_t)0x1020304050607), v62), 5uLL);
  *(int8x16_t *)((char *)v64 + a3) = result;
  return result;
}

int16x4_t *sub_1C970B38C(int16x4_t *result, int a2)
{
  int16x4_t *v2;
  int16x8_t v3;
  unsigned int v4;
  unint64_t v6;
  int16x4_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = result;
  if (a2 == 1)
  {
    v3 = vdupq_n_s16((result->i16[0] + 65) >> 7);
    v4 = -32;
    do
    {
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v4 += 32;
      v2 += 8;
    }
    while (v4 < 0xE0);
    return result;
  }
  if (a2 <= 16)
  {
    sub_1C970AB50(result, 0x10u, (uint64_t)&unk_1C9861410);
LABEL_12:
    v8 = -4;
    do
    {
      result = sub_1C970B568(v2, 0x10u, (uint64_t)&unk_1C98614F0);
      v8 += 4;
      v2 += 16;
    }
    while (v8 < 0xC);
    return result;
  }
  if (a2 >= 0x31)
  {
    v6 = -4;
    v7 = result;
    do
    {
      sub_1C970B648(v7, 0x10u, (uint64_t)&unk_1C9861460, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v6 += 4;
      ++v7;
    }
    while (v6 < 0xC);
  }
  else
  {
    sub_1C970AC1C(result, 0x10u, (uint64_t)&unk_1C9861410, (int16x4_t *)aZwpf);
    sub_1C970AC1C(v2 + 1, 0x10u, (uint64_t)&unk_1C9861410, (int16x4_t *)aZwpf);
  }
  if (a2 <= 32)
    goto LABEL_12;
  if (a2 >= 0x51)
  {
    v10 = -4;
    do
    {
      result = (int16x4_t *)sub_1C970BBBC((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1C98614F8, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v10 += 4;
      v2 += 16;
    }
    while (v10 < 0xC);
  }
  else
  {
    v9 = -4;
    do
    {
      result = (int16x4_t *)sub_1C970A7E0((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1C98614F0, (int16x4_t *)aZwpf);
      v9 += 4;
      v2 += 16;
    }
    while (v9 < 0xC);
  }
  return result;
}

int16x4_t *sub_1C970B568(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  int16x8_t *v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  unsigned __int8 *v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int v23;

  v3 = a2 - 1;
  v4 = (int16x8_t *)((char *)&unk_1C9861310 + 4 * a2);
  v5 = *(int16x4_t *)((char *)result + 2 * a2);
  v6 = *(int16x4_t *)((char *)result + 4 * a2);
  v7 = *(int16x4_t *)((char *)result + 6 * a2);
  v8 = (int32x2_t)vtrn1_s16(*result, v5);
  v9 = (int32x2_t)vtrn1_s16(v6, v7);
  v10 = vshll_n_s16((int16x4_t)vzip1_s32(v8, v9), 6uLL);
  v11 = a2 >> 2;
  v12 = (int32x2_t)vtrn2_s16(*result, v5);
  v13 = (int32x2_t)vtrn2_s16(v6, v7);
  v14 = (int16x4_t)vzip2_s32(v8, v9);
  v15 = (int16x4_t)vzip1_s32(v12, v13);
  v16 = (int16x4_t)vzip2_s32(v12, v13);
  v17 = (unsigned __int8 *)(a3 + 1);
  do
  {
    v18 = *v4++;
    v19 = vmlal_laneq_s16(v10, v14, v18, 4);
    v20 = vmlsl_laneq_s16(v10, v14, v18, 4);
    v21 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 1), v15, *(int16x4_t *)v18.i8, 0);
    v22 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 3), v15, *(int16x4_t *)v18.i8, 2);
    v23 = *(v17 - 1);
    v18.i32[0] = *v17;
    v17 += 2;
    result[v23] = vqrshrn_n_s32(vaddq_s32(v21, v19), 0xCuLL);
    result[v18.u32[0]] = vqrshrn_n_s32(vaddq_s32(v22, v20), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v23))) = vqrshrn_n_s32(vsubq_s32(v19, v21), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v18.i32[0]))) = vqrshrn_n_s32(vsubq_s32(v20, v22), 0xCuLL);
    --v11;
  }
  while (v11);
  return result;
}

int16x4_t *sub_1C970B648(int16x4_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  uint64_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t *v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  uint64_t v14;
  int16x8_t *v15;
  int32x4_t v16;
  uint64_t v17;
  int32x4_t *v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int16x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  uint64_t v33;
  int16x4_t *v34;
  uint64_t v35;
  int16x4_t v36;
  int16x4_t v37;
  uint64_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t *v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  uint64_t v46;
  uint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int v50;
  _OWORD v51[16];
  uint64_t v52;

  v5 = a2;
  v52 = *MEMORY[0x1E0C80C00];
  v6 = *(int16x4_t *)((char *)result + 1 * v5);
  v7 = result[v5];
  v8 = *(int16x4_t *)((char *)result + 3 * v5);
  v9 = &result[(v5 * 2)];
  v10 = *(int16x4_t *)((char *)v9 + 1 * v5);
  v11 = *v9;
  v12 = v9[v5];
  v13 = *(int16x4_t *)((char *)v9 + 3 * v5);
  v14 = a2 >> 1;
  v15 = (int16x8_t *)((char *)&unk_1C9861310 + 2 * v14);
  v16 = vshll_n_s16(*result, 6uLL);
  v17 = a2 >> 4;
  v18 = (int32x4_t *)v51;
  do
  {
    v19 = *v15++;
    v20 = vmlal_laneq_s16(v16, v11, v19, 4);
    v21 = vmlsl_laneq_s16(v16, v11, v19, 4);
    v22 = vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v19.i8, 1), v7, *(int16x4_t *)v19.i8, 0);
    v23 = vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v19.i8, 3), v7, *(int16x4_t *)v19.i8, 2);
    v24 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, *a4, 1), v6, *a4, 0), v10, *a4, 2), v13, *a4, 3);
    v25 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, a4[1], 1), v6, a4[1], 0), v10, a4[1], 2), v13, a4[1], 3);
    v26 = a4[3];
    v27 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, a4[2], 1), v6, a4[2], 0), v10, a4[2], 2), v13, a4[2], 3);
    v28 = vaddq_s32(v22, v20);
    v29 = vsubq_s32(v20, v22);
    v30 = vaddq_s32(v23, v21);
    v31 = vsubq_s32(v21, v23);
    *v18 = vaddq_s32(v24, v28);
    v18[1] = vaddq_s32(v25, v29);
    v32 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, v26, 1), v6, v26, 0), v10, v26, 2), v13, v26, 3);
    v18[2] = vaddq_s32(v27, v30);
    v18[3] = vaddq_s32(v32, v31);
    v18[4] = vsubq_s32(v28, v24);
    v18[5] = vsubq_s32(v29, v25);
    v18[6] = vsubq_s32(v30, v27);
    v18[7] = vsubq_s32(v31, v32);
    a4 += 4;
    v18 += 8;
    --v17;
  }
  while (v17);
  v33 = 0;
  v34 = (int16x4_t *)((char *)result + 2 * a2);
  v35 = 1 * v5;
  v36 = *(int16x4_t *)((char *)v34 + v35);
  v37 = *v34;
  v38 = a2;
  v39 = v34[v38];
  v40 = *(int16x4_t *)((char *)v34 + 12 * a2);
  v41 = &v34[2 * a2];
  v42 = *v41;
  v43 = *(int16x4_t *)((char *)v41 + v35);
  v44 = v41[v38];
  v45 = *(int16x4_t *)((char *)v41 + 12 * a2);
  if (v14 <= 1)
    v46 = 1;
  else
    v46 = v14;
  v47 = 2 * v14;
  do
  {
    v48 = (int32x4_t)v51[v33];
    v49 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v36, *a5, 1), v37, *a5, 0), v39, *a5, 2), v40, *a5, 3), v42, *(int16x8_t *)a5->i8, 4), v43, *(int16x8_t *)a5->i8, 5), v44, *(int16x8_t *)a5->i8, 6), v45, *(int16x8_t *)a5->i8,
            7);
    v50 = (a2 - 1) * (a2 >> 2) - *(unsigned __int8 *)(a3 + v33);
    result[*(unsigned __int8 *)(a3 + v33)] = vqrshrn_n_s32(vaddq_s32(v49, v48), 7uLL);
    result[v50] = vqrshrn_n_s32(vsubq_s32(v48, v49), 7uLL);
    ++v33;
    a5 = (int16x4_t *)((char *)a5 + v47);
  }
  while (v46 != v33);
  return result;
}

int8x8_t sub_1C970B85C(uint64_t a1, int8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4;
  const char *v5;
  uint8x8_t v6;
  const char *v7;
  uint8x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x8_t result;
  int8x8_t *v25;
  int8x8_t *v26;
  int8x8_t *v27;
  int8x8_t *v28;
  int8x8_t *v29;

  v4 = (uint8x8_t)a2[2];
  v5 = (const char *)&a2[3];
  v6 = (uint8x8_t)vld1_dup_s8(v5);
  v7 = (const char *)&a2[1];
  v8 = (uint8x8_t)vld1_dup_s8(v7);
  v9 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v8);
  v10 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  v11 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  v12 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  v13 = vdupq_laneq_s16(v9, 4);
  v14 = vdupq_laneq_s16(v9, 5);
  v15 = vdupq_laneq_s16(v9, 6);
  v16 = vmull_u8((uint8x8_t)0x807060504030201, v6);
  v17 = vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 7), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), vdupq_laneq_s16(v9, 7));
  v18 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 0), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x707070707070707), vdupq_lane_s16(*(int16x4_t *)v9.i8, 0));
  v19 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 1), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x606060606060606), v10);
  v20 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 2), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x505050505050505), v11);
  v21 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 3), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 2uLL)), v12);
  v22 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 4), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x303030303030303), v13);
  v23 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 5), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 1uLL)), v14);
  result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v16, v4), (uint8x8_t)vdup_lane_s8(*a2, 6), (uint8x8_t)0x1020304050607), v15), 4uLL);
  *a4 = vrshrn_n_s16(v18, 4uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v19, 4uLL);
  v25 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v25 = vrshrn_n_s16(v20, 4uLL);
  v26 = (int8x8_t *)((char *)v25 + a3);
  *v26 = vrshrn_n_s16(v21, 4uLL);
  v27 = (int8x8_t *)((char *)v26 + a3);
  *v27 = vrshrn_n_s16(v22, 4uLL);
  v28 = (int8x8_t *)((char *)v27 + a3);
  *v28 = vrshrn_n_s16(v23, 4uLL);
  v29 = (int8x8_t *)((char *)v28 + a3);
  *v29 = result;
  *(int8x8_t *)((char *)v29 + a3) = vrshrn_n_s16(v17, 4uLL);
  return result;
}

int8x16_t sub_1C970B9B8(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  const __int16 *v4;
  uint8x8_t v5;
  const __int16 *v6;
  uint8x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  int16x8_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint8x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint8x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint8x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint8x16_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  int16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint8x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  uint8x16_t v54;
  int16x8_t v55;
  int8x16_t v56;
  int8x16_t result;
  int8x16_t *v58;
  int8x16_t *v59;

  v4 = (const __int16 *)(a2 + 16);
  v5 = (uint8x8_t)vld1_dup_s16(v4);
  v6 = (const __int16 *)(a2 + 48);
  v7 = (uint8x8_t)vld1_dup_s16(v6);
  v8 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  v9 = (int32x4_t)vmull_u8((uint8x8_t)0x808070706060505, v5);
  v10 = vmull_u8((uint8x8_t)0x404030302020101, v7);
  v11 = vmull_u8((uint8x8_t)0x808070706060505, v7);
  v12 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 0);
  v13 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
  v14 = (uint16x8_t)vdupq_laneq_s32(v8, 2);
  v15 = *(int16x8_t *)a2;
  v16 = *(uint8x16_t *)(a2 + 32);
  v17 = (uint16x8_t)vdupq_laneq_s32(v8, 3);
  v18 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 0);
  v19 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v18);
  v20 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v18);
  v21 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 1);
  v22 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v21);
  v23 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v21);
  v24 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 2);
  v25 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v24);
  v26 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v24);
  v27 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 3);
  v28 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v27);
  v29 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v27);
  v30.i64[0] = 0x707070707070707;
  v30.i64[1] = 0x707070707070707;
  v31 = (int16x8_t)vmlal_high_u8(v20, v16, v30);
  v30.i64[0] = 0x606060606060606;
  v30.i64[1] = 0x606060606060606;
  v32 = (int16x8_t)vmlal_high_u8(v23, v16, v30);
  v30.i64[0] = 0x505050505050505;
  v30.i64[1] = 0x505050505050505;
  v33 = (int16x8_t)vmlal_high_u8(v26, v16, v30);
  v30.i64[0] = 0x404040404040404;
  v30.i64[1] = 0x404040404040404;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v19, *(uint8x8_t *)v16.i8, (uint8x8_t)0x707070707070707), 4uLL), v31, 4uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v22, *(uint8x8_t *)v16.i8, (uint8x8_t)0x606060606060606), 4uLL), v32, 4uLL);
  v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v25, *(uint8x8_t *)v16.i8, (uint8x8_t)0x505050505050505), 4uLL), v33, 4uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v28, *(uint8x8_t *)v16.i8, (uint8x8_t)0x404040404040404), 4uLL), (int16x8_t)vmlal_high_u8(v29, v16, v30), 4uLL);
  v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  v36 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
  v37 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
  v38 = vmlal_u8(v37, (uint8x8_t)0x404030302020101, v7);
  v39 = vmlal_u8(v37, (uint8x8_t)0x808070706060505, v7);
  v40 = (int16x8_t)vdupq_laneq_s32(v9, 2);
  v41 = (uint16x8_t)vdupq_laneq_s32(v9, 3);
  v42 = vmlal_u8(v41, (uint8x8_t)0x404030302020101, v7);
  v43 = (uint8x8_t)vdup_laneq_s16(v15, 4);
  v44 = vmlal_u8(v41, (uint8x8_t)0x808070706060505, v7);
  v45 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v43);
  v46 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v43);
  v47 = (uint8x8_t)vdup_laneq_s16(v15, 5);
  v48 = vmlal_u8(v38, (uint8x8_t)0x404050506060707, v47);
  v49 = vmlal_u8(v39, (uint8x8_t)0x10102020303, v47);
  v50 = (uint8x8_t)vdup_laneq_s16(v15, 6);
  v51 = (uint8x8_t)vdup_laneq_s16(v15, 7);
  v52 = (int16x8_t)vmlal_u8(v42, (uint8x8_t)0x404050506060707, v51);
  v53 = (int16x8_t)vmlal_u8(v44, (uint8x8_t)0x10102020303, v51);
  v54.i64[0] = 0x303030303030303;
  v54.i64[1] = 0x303030303030303;
  v55 = (int16x8_t)vmlal_high_u8(v46, v16, v54);
  v54.i64[0] = 0x202020202020202;
  v54.i64[1] = 0x202020202020202;
  v56 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_u8(v10, *(uint8x8_t *)v16.i8), v40), (uint8x8_t)0x404050506060707, v50), 4uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_high_u8(v11, v16), v40), (uint8x8_t)0x10102020303, v50), 4uLL);
  result = vrshrn_high_n_s16(vrshrn_n_s16(v52, 4uLL), v53, 4uLL);
  *v35 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v45, *(uint8x8_t *)v16.i8, (uint8x8_t)0x303030303030303), 4uLL), v55, 4uLL);
  v58 = (int8x16_t *)((char *)v35 + a3);
  *v58 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v48, *(uint8x8_t *)v16.i8, (uint8x8_t)0x202020202020202), 4uLL), (int16x8_t)vmlal_high_u8(v49, v16, v54), 4uLL);
  v59 = (int8x16_t *)((char *)v58 + a3);
  *v59 = v56;
  *(int8x16_t *)((char *)v59 + a3) = result;
  return result;
}

int16x8_t *sub_1C970BBBC(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  int16x8_t *v5;
  int16x8_t *v6;
  int16x8_t *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint64_t v28;
  int16x8_t *v29;
  int32x4_t v30;
  uint64_t v31;
  int32x4_t *v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int16x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int v52;
  _OWORD v53[16];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = (int16x8_t *)((char *)result + 2 * a2);
  v6 = (int16x8_t *)((char *)result + 4 * a2);
  v7 = (int16x8_t *)((char *)result + 6 * a2);
  v8 = result[1];
  v9 = v5[1];
  v10 = v6[1];
  v11 = v7[1];
  v12 = (int32x4_t)vtrn1q_s16(*result, *v5);
  v13 = (int32x4_t)vtrn2q_s16(*result, *v5);
  v14 = (int32x4_t)vtrn1q_s16(*v6, *v7);
  v15 = (int32x4_t)vtrn2q_s16(*v6, *v7);
  v16 = (int16x8_t)vtrn1q_s32(v12, v14);
  v17 = (int16x8_t)vtrn2q_s32(v12, v14);
  v18 = (int16x8_t)vtrn1q_s32(v13, v15);
  v19 = (int16x8_t)vtrn2q_s32(v13, v15);
  v20 = (int32x4_t)vtrn1q_s16(v8, v9);
  v21 = (int32x4_t)vtrn2q_s16(v8, v9);
  v22 = (int32x4_t)vtrn1q_s16(v10, v11);
  v23 = (int32x4_t)vtrn2q_s16(v10, v11);
  v24 = (int16x8_t)vtrn1q_s32(v20, v22);
  v25 = (int16x8_t)vtrn2q_s32(v20, v22);
  v26 = (int16x8_t)vtrn1q_s32(v21, v23);
  v27 = (int16x8_t)vtrn2q_s32(v21, v23);
  v28 = a2 >> 1;
  v29 = (int16x8_t *)((char *)&unk_1C9861310 + 2 * v28);
  v30 = vshll_n_s16(*(int16x4_t *)v16.i8, 6uLL);
  v31 = a2 >> 4;
  v32 = (int32x4_t *)v53;
  do
  {
    v33 = *v29++;
    v34 = vmlal_laneq_s16(v30, *(int16x4_t *)v24.i8, v33, 4);
    v35 = vmlsl_laneq_s16(v30, *(int16x4_t *)v24.i8, v33, 4);
    v36 = vmlal_high_lane_s16(vmull_high_lane_s16(v24, *(int16x4_t *)v33.i8, 1), v16, *(int16x4_t *)v33.i8, 0);
    v37 = vmlal_high_lane_s16(vmull_high_lane_s16(v24, *(int16x4_t *)v33.i8, 3), v16, *(int16x4_t *)v33.i8, 2);
    v38 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, *a4, 0), v17, *a4, 1), *(int16x4_t *)v25.i8, *a4, 2), v25, *a4, 3);
    v39 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, a4[1], 0), v17, a4[1], 1), *(int16x4_t *)v25.i8, a4[1], 2), v25, a4[1], 3);
    v40 = a4[3];
    v41 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, a4[2], 0), v17, a4[2], 1), *(int16x4_t *)v25.i8, a4[2], 2), v25, a4[2], 3);
    v42 = vaddq_s32(v36, v34);
    v43 = vsubq_s32(v34, v36);
    v44 = vaddq_s32(v37, v35);
    v45 = vsubq_s32(v35, v37);
    *v32 = vaddq_s32(v38, v42);
    v32[1] = vaddq_s32(v39, v43);
    v46 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, v40, 0), v17, v40, 1), *(int16x4_t *)v25.i8, v40, 2), v25, v40, 3);
    v32[2] = vaddq_s32(v41, v44);
    v32[3] = vaddq_s32(v46, v45);
    v32[4] = vsubq_s32(v42, v38);
    v32[5] = vsubq_s32(v43, v39);
    v32[6] = vsubq_s32(v44, v41);
    v32[7] = vsubq_s32(v45, v46);
    a4 += 4;
    v32 += 8;
    --v31;
  }
  while (v31);
  v47 = 0;
  if (v28 <= 1)
    v48 = 1;
  else
    v48 = v28;
  v49 = 2 * v28;
  do
  {
    v50 = (int32x4_t)v53[v47];
    v51 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *a5, 1), *(int16x4_t *)v18.i8, *a5, 0), v18, *a5, 2), v19, *a5, 3), *(int16x4_t *)v26.i8, *(int16x8_t *)a5->i8, 4), *(int16x4_t *)v27.i8, *(int16x8_t *)a5->i8, 5), v26,
              *(int16x8_t *)a5->i8,
              6),
            v27,
            *(int16x8_t *)a5->i8,
            7);
    v52 = 4 * (~*(unsigned __int8 *)(a3 + v47) + a2);
    *(int16x4_t *)&result->i8[8 * *(unsigned __int8 *)(a3 + v47)] = vqrshrn_n_s32(vaddq_s32(v51, v50), 0xCuLL);
    *(int16x4_t *)&result->i8[2 * v52] = vqrshrn_n_s32(vsubq_s32(v50, v51), 0xCuLL);
    ++v47;
    a5 = (int16x4_t *)((char *)a5 + v49);
  }
  while (v48 != v47);
  return result;
}

int8x8_t sub_1C970BDC4(uint64_t a1, uint8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4;
  int16x4_t v5;
  int16x4_t v6;
  uint16x8_t v7;
  uint64_t v8;
  int8x8_t result;
  int8x8_t *v10;
  int8x8_t *v11;
  int8x8_t *v12;
  int8x8_t *v13;
  int8x8_t *v14;

  v4 = a2[2];
  v5 = vpadd_s16((int16x4_t)vpaddl_u8(v4), (int16x4_t)vpaddl_u8(*a2));
  v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  *(uint8x8_t *)v7.i8 = vqrshrn_n_u16(v7, 4uLL);
  v8 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(vmull_u8(*(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), *a2), 2uLL);
  result = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], v4), *(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), 2uLL);
  *a4 = result;
  *(int8x8_t *)((char *)a4 + a3) = vext_s8((int8x8_t)vshld_n_s64(v8, 0x30uLL), *(int8x8_t *)v7.i8, 7uLL);
  v10 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v10 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x28uLL), *(int8x8_t *)v7.i8, 7uLL);
  v11 = (int8x8_t *)((char *)v10 + a3);
  *v11 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x20uLL), *(int8x8_t *)v7.i8, 7uLL);
  v12 = (int8x8_t *)((char *)v11 + a3);
  *v12 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x18uLL), *(int8x8_t *)v7.i8, 7uLL);
  v13 = (int8x8_t *)((char *)v12 + a3);
  *v13 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x10uLL), *(int8x8_t *)v7.i8, 7uLL);
  v14 = (int8x8_t *)((char *)v13 + a3);
  *v14 = vext_s8((int8x8_t)vshld_n_s64(v8, 8uLL), *(int8x8_t *)v7.i8, 7uLL);
  *(int8x8_t *)((char *)v14 + a3) = vext_s8((int8x8_t)v8, *(int8x8_t *)v7.i8, 7uLL);
  return result;
}

int16x8_t sub_1C970BE80(uint8x16_t *a1, uint64_t a2, int16x4_t *a3, int a4, int a5)
{
  int16x8_t *v6;
  int16x8_t result;
  int16x8_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  unsigned int v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  unsigned int v17;
  unsigned int v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;

  v6 = (int16x8_t *)a3;
  if (a5 == 1)
  {
    result = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    v10 = vnegq_s16(result);
    v11 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(result), result);
    v12 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v10), v10);
    v13 = -4;
    do
    {
      v14 = vqaddq_u8(*(uint8x16_t *)((char *)a1 + 3 * a2), v11);
      v15 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + a2), v11), v12);
      v16 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + 2 * a2), v11), v12);
      *a1 = vqsubq_u8(vqaddq_u8(*a1, v11), v12);
      *(uint8x16_t *)((char *)a1 + a2) = v15;
      *(uint8x16_t *)((char *)a1 + 2 * a2) = v16;
      *(uint8x16_t *)((char *)a1 + 3 * a2) = vqsubq_u8(v14, v12);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v13 += 4;
    }
    while (v13 < 0xC);
    if (a4)
    {
      v17 = -16;
      do
      {
        *v6 = result;
        v6[1] = result;
        v6 += 2;
        v17 += 16;
      }
      while (v17 < 0xF0);
    }
  }
  else
  {
    sub_1C970B38C(a3, a5);
    v18 = -4;
    do
    {
      v19 = v6[1];
      v20 = v6[2];
      v21 = v6[3];
      v22 = v6[4];
      v23 = v6[5];
      v24 = (int32x4_t)vtrn1q_s16(*v6, v20);
      v25 = (int32x4_t)vtrn2q_s16(*v6, v20);
      v26 = v6[6];
      v27 = v6[7];
      v28 = (int32x4_t)vtrn1q_s16(v22, v26);
      v29 = (int32x4_t)vtrn2q_s16(v22, v26);
      v30 = (int16x8_t)vtrn1q_s32(v24, v28);
      v31 = (int16x8_t)vtrn2q_s32(v24, v28);
      v32 = (int16x8_t)vtrn1q_s32(v25, v29);
      v33 = (int16x8_t)vtrn2q_s32(v25, v29);
      v34 = (int32x4_t)vtrn1q_s16(v19, v21);
      v35 = (int32x4_t)vtrn2q_s16(v19, v21);
      v36 = (int32x4_t)vtrn1q_s16(v23, v27);
      v37 = (int32x4_t)vtrn2q_s16(v23, v27);
      v38 = (int16x8_t)vtrn1q_s32(v34, v36);
      v39 = (int16x8_t)vtrn2q_s32(v34, v36);
      v40 = (int16x8_t)vtrn1q_s32(v35, v37);
      v41 = (int16x8_t)vtrn2q_s32(v35, v37);
      if (a4)
      {
        v42 = v30;
        v43 = v38;
        v44 = v32;
        v45 = v40;
        v46 = v31;
        v47 = v39;
        v48 = v33;
        v49 = v41;
      }
      else
      {
        v42 = 0uLL;
        v43 = 0uLL;
        v44 = 0uLL;
        v45 = 0uLL;
        v46 = 0uLL;
        v47 = 0uLL;
        v48 = 0uLL;
        v49 = 0uLL;
      }
      v50 = *(uint8x16_t *)((char *)a1 + a2);
      v51 = *a1;
      v52 = *(uint8x16_t *)((char *)a1 + 2 * a2);
      v53 = *(uint8x16_t *)((char *)a1 + 3 * a2);
      *v6 = v42;
      v6[1] = v43;
      v6[2] = v44;
      v6[3] = v45;
      v6[4] = v46;
      v6[5] = v47;
      v6[6] = v48;
      v6[7] = v49;
      result = vqaddq_s16(v41, (int16x8_t)vmovl_high_u8(v53));
      *(int8x16_t *)a1 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v30, (int16x8_t)vmovl_u8(*(uint8x8_t *)v51.i8))), vqaddq_s16(v38, (int16x8_t)vmovl_high_u8(v51)));
      *(int8x16_t *)((char *)a1 + a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v32, (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8))), vqaddq_s16(v40, (int16x8_t)vmovl_high_u8(v50)));
      *(int8x16_t *)((char *)a1 + 2 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v31, (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8))), vqaddq_s16(v39, (int16x8_t)vmovl_high_u8(v52)));
      *(int8x16_t *)((char *)a1 + 3 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v33, (int16x8_t)vmovl_u8(*(uint8x8_t *)v53.i8))), result);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v18 += 4;
      v6 += 8;
    }
    while (v18 < 0xC);
  }
  return result;
}

void sub_1C970C0B4(uint64_t a1, int a2, int a3, __int16 a4)
{
  char v4;
  unint64_t v8;

  v4 = a4;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2117);
  if (a3 && (a4 & 0x1E00) == 0)
    bzero((void *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 944)+ *(_QWORD *)(*(_QWORD *)(a1 + 8) + 928) * ((uint64_t)a3 >> 3)+ (a2 >> 2)), v8 >> 2);
  if (a2)
  {
    if ((v4 & 0xF0) == 0)
      bzero((void *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 968)+ *(_QWORD *)(*(_QWORD *)(a1 + 8) + 936) * ((uint64_t)a2 >> 3)+ (a3 >> 2)), v8 >> 2);
  }
}

int8x8_t sub_1C970C16C(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x8_t v4;
  const char *v5;
  uint8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t v12;
  int8x8_t result;
  int8x8_t *v14;
  int8x8_t *v15;
  int8x8_t *v16;
  int8x8_t *v17;
  int8x8_t *v18;

  v4 = *(int8x8_t *)a2;
  v5 = (const char *)(a2 - 1);
  v6 = (uint8x8_t)vld1_dup_s8(v5);
  *a4 = vqmovun_s16(vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0)), (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 16), v6), 1uLL));
  v7 = vdup_lane_s8(v4, 1);
  v8 = vdup_lane_s8(v4, 2);
  v9 = vdup_lane_s8(v4, 3);
  v10 = vdup_lane_s8(v4, 4);
  v11 = vdup_lane_s8(v4, 5);
  v12 = vdup_lane_s8(v4, 6);
  result = vdup_lane_s8(v4, 7);
  *(int8x8_t *)((char *)a4 + a3) = v7;
  v14 = (int8x8_t *)((char *)a4 + a3 + a3);
  *v14 = v8;
  v15 = (int8x8_t *)((char *)v14 + a3);
  *v15 = v9;
  v16 = (int8x8_t *)((char *)v15 + a3);
  *v16 = v10;
  v17 = (int8x8_t *)((char *)v16 + a3);
  *v17 = v11;
  v18 = (int8x8_t *)((char *)v17 + a3);
  *v18 = v12;
  *(int8x8_t *)((char *)v18 + a3) = result;
  return result;
}

uint64_t sub_1C970C1E8(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  int v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;
  int v13;
  double v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  double v20;
  int v21;
  int v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  int v28;
  double v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double *v54;
  double *v55;
  double *v56;
  double *v57;
  double *v58;
  _QWORD v59[10];

  v59[9] = *MEMORY[0x1E0C80C00];
  v59[0] = a7;
  v59[1] = vext_s8(a6, a7, 7uLL);
  v59[2] = vext_s8(a6, a7, 6uLL);
  v59[3] = vext_s8(a6, a7, 5uLL);
  v59[4] = vext_s8(a6, a7, 4uLL);
  v59[5] = vext_s8(a6, a7, 3uLL);
  v59[6] = vext_s8(a6, a7, 2uLL);
  v59[7] = vext_s8(a6, a7, 1uLL);
  v59[8] = a6;
  if ((int)result >> 5 >= 0)
    v7 = (int)result >> 5;
  else
    v7 = -((int)result >> 5);
  v8 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v59[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  v9 = a2 + result;
  v10 = (a2 + (int)result) >> 5;
  if (v10 < 0)
    v10 = -v10;
  v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v59[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu))), 5uLL));
  v12 = v9 + a2;
  v13 = v12 >> 5;
  if (v12 >> 5 < 0)
    v13 = -v13;
  v14 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v13 - 1], (uint8x8_t)vdup_n_s8(v12 & 0x1F)), (uint8x8_t)v59[v13], (uint8x8_t)vdup_n_s8(32 - (v12 & 0x1Fu))), 5uLL));
  v15 = v12 + a2;
  v16 = v15 >> 5;
  if (v15 >> 5 < 0)
    v16 = -v16;
  v17 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v16 - 1], (uint8x8_t)vdup_n_s8(v15 & 0x1F)), (uint8x8_t)v59[v16], (uint8x8_t)vdup_n_s8(32 - (v15 & 0x1Fu))), 5uLL));
  v18 = v15 + a2;
  v19 = v18 >> 5;
  if (v18 >> 5 < 0)
    v19 = -v19;
  v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v19 - 1], (uint8x8_t)vdup_n_s8(v18 & 0x1F)), (uint8x8_t)v59[v19], (uint8x8_t)vdup_n_s8(32 - (v18 & 0x1Fu))), 5uLL));
  v21 = v18 + a2;
  v22 = v21 >> 5;
  if (v21 >> 5 < 0)
    v22 = -v22;
  v23 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v22 - 1], (uint8x8_t)vdup_n_s8(v21 & 0x1F)), (uint8x8_t)v59[v22], (uint8x8_t)vdup_n_s8(32 - (v21 & 0x1Fu))), 5uLL));
  v24 = v21 + a2;
  v25 = v24 >> 5;
  if (v24 >> 5 < 0)
    v25 = -v25;
  v26 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v25 - 1], (uint8x8_t)vdup_n_s8(v24 & 0x1F)), (uint8x8_t)v59[v25], (uint8x8_t)vdup_n_s8(32 - (v24 & 0x1Fu))), 5uLL));
  v27 = v24 + a2;
  v28 = v27 >> 5;
  if (v27 >> 5 < 0)
    v28 = -v28;
  v29 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v28 - 1], (uint8x8_t)vdup_n_s8(v27 & 0x1F)), (uint8x8_t)v59[v28], (uint8x8_t)vdup_n_s8(32 - (v27 & 0x1Fu))), 5uLL));
  v30 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  v31 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  v32 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  v33 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  v34 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  v35 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  v36 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  v37 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  v38 = (int32x2_t)vtrn1_s16(v30, v32);
  v39 = (int32x2_t)vtrn2_s16(v30, v32);
  v40 = (int32x2_t)vtrn1_s16(v31, v33);
  v41 = (int32x2_t)vtrn2_s16(v31, v33);
  v42 = (int32x2_t)vtrn1_s16(v34, v36);
  v43 = (int32x2_t)vtrn2_s16(v34, v36);
  v44 = (int32x2_t)vtrn1_s16(v35, v37);
  v45 = (int32x2_t)vtrn2_s16(v35, v37);
  v46 = COERCE_DOUBLE(vzip1_s32(v38, v42));
  v47 = COERCE_DOUBLE(vzip2_s32(v38, v42));
  v48 = COERCE_DOUBLE(vzip1_s32(v40, v44));
  v49 = COERCE_DOUBLE(vzip2_s32(v40, v44));
  v50 = COERCE_DOUBLE(vzip1_s32(v39, v43));
  v51 = COERCE_DOUBLE(vzip2_s32(v39, v43));
  v52 = COERCE_DOUBLE(vzip1_s32(v41, v45));
  v53 = COERCE_DOUBLE(vzip2_s32(v41, v45));
  if (a3)
  {
    v29 = v53;
    v26 = v51;
    v23 = v49;
    v20 = v47;
    v17 = v52;
    v14 = v50;
    v11 = v48;
    v8 = v46;
  }
  *a5 = v8;
  *(double *)((char *)a5 + a4) = v11;
  v54 = (double *)((char *)a5 + a4 + a4);
  *v54 = v14;
  v55 = (double *)((char *)v54 + a4);
  *v55 = v17;
  v56 = (double *)((char *)v55 + a4);
  *v56 = v20;
  v57 = (double *)((char *)v56 + a4);
  *v57 = v23;
  v58 = (double *)((char *)v57 + a4);
  *v58 = v26;
  *(double *)((char *)v58 + a4) = v29;
  return result;
}

double sub_1C970C4E0(uint64_t a1, uint8x8_t *a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  const char *v5;
  uint8x8_t v6;
  unint64_t v7;
  int16x8_t v8;
  int8x8_t v9;
  uint64_t v10;
  double result;
  _QWORD v12[9];

  v4 = 0;
  v12[8] = *MEMORY[0x1E0C80C00];
  v5 = (char *)&a2[-1] + 7;
  v6 = (uint8x8_t)vld1_dup_s8(v5);
  v7 = (unint64_t)a2[2];
  v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8((int8x8_t)v7, 0));
  v9 = (int8x8_t)vshrd_n_u64(v7, 8uLL);
  v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*a2, v6), 1uLL));
  v12[0] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  v12[1] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  v12[2] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  v12[3] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  v12[4] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  v12[5] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  v12[6] = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  v12[7] = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    result = *(double *)&v12[v4];
    *a4 = result;
    a4 = (double *)((char *)a4 + a3);
    ++v4;
  }
  while (v4 != 8);
  return result;
}

void sub_1C970C5B8(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  const char *v4;
  int8x8_t v5;
  uint8x16_t v6;
  int v7;
  int8x8x2_t v8;
  int8x8x2_t v9;

  v8 = vld2_s8(a2);
  v4 = a2 + 32;
  v9 = vld2_s8(v4);
  v8.val[0] = (int8x8_t)vpadd_s16((int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[0]), (uint8x8_t)v8.val[0]), (int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[1]), (uint8x8_t)v8.val[1]));
  v8.val[1] = (int8x8_t)vpadd_s16((int16x4_t)v8.val[0], (int16x4_t)v8.val[0]);
  v5 = v8.val[1];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(*(uint16x8_t *)((char *)&v8 + 8), 4uLL), *(uint16x8_t *)((char *)&v8 + 8), 4uLL);
  v7 = 8;
  do
  {
    *a4 = v6;
    a4 = (uint8x16_t *)((char *)a4 + a3);
    --v7;
  }
  while (v7);
}

void sub_1C970C600(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint8x16_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x8_t v7;
  uint16x8_t v8;
  int16x8_t v9;
  uint64_t v10;
  int8x8_t v11;
  __int8 *v12;
  uint64_t i;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  int8x8_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = (int16x8_t)vmovl_high_u8(*a2);
  v6 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2->i8), *a2), v4), *(uint8x8_t *)v4.i8);
  v6.i64[0] = vpaddq_s16(v6, v6).u64[0];
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  v6.i64[1] = v6.i64[0];
  v7 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v6, 5uLL);
  v8 = vmull_u8((uint8x8_t)v7, (uint8x8_t)0x303030303030302);
  v9 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  v10 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(v8, *(uint8x8_t *)a2->i8), 2uLL);
  v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], *(uint8x8_t *)v4.i8), (uint8x8_t)v7, (uint8x8_t)0x303030303030302), 2uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v7, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v7, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v7, 7uLL);
  v23 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v7, 7uLL);
  v24 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v7, 7uLL);
  v25 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v7, 7uLL);
  v26 = vext_s8((int8x8_t)v10, v7, 7uLL);
  *a4 = vrshrn_high_n_s16(v11, (int16x8_t)vaddw_high_u8((uint16x8_t)v9, v4), 2uLL);
  v12 = &a4->i8[a3];
  for (i = 8; i != 64; i += 8)
  {
    *(int8x8_t *)&v14 = *(int8x8_t *)((char *)&v19 + i);
    *((int8x8_t *)&v14 + 1) = v7;
    *(_OWORD *)v12 = v14;
    v12 += a3;
  }
  v15 = 0;
  v16 = 0;
  v17 = (uint64_t)vrshrn_n_s16(vaddq_s16(v9, v5), 2uLL);
  v19 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x38uLL), v7, 7uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x30uLL), v7, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x28uLL), v7, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x20uLL), v7, 7uLL);
  v23 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x18uLL), v7, 7uLL);
  v24 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x10uLL), v7, 7uLL);
  v25 = vext_s8((int8x8_t)vshld_n_s64(v17, 8uLL), v7, 7uLL);
  v26 = vext_s8((int8x8_t)v17, v7, 7uLL);
  do
  {
    *(int8x8_t *)&v18 = *(int8x8_t *)((char *)&v19 + v16);
    *((int8x8_t *)&v18 + 1) = v7;
    *(_OWORD *)&v12[v15] = v18;
    v16 += 8;
    v15 += a3;
  }
  while (v16 != 64);
}

int16x8_t sub_1C970C794(uint8x8_t *a1, uint64_t a2, int16x4_t *a3, const __int16 *a4, int16x4_t *a5, int *a6)
{
  __int16 *v7;
  int v11;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t result;
  int16x4_t *v16;
  unsigned int v17;
  int32x4_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char v37;
  int16x8_t *v38;
  char v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int v47;
  char v48;
  int16x8_t *v49;
  char v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x4_t *v58;
  char v59;
  int32x4_t v60;
  char v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  uint8x16_t v110;
  int16x8_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int16x8_t v115;
  uint8x16_t v116;
  uint8x16_t v117;
  unsigned int v118;
  uint8x16_t v119;

  v7 = (__int16 *)a4;
  v11 = *a6;
  if ((*a6 & 0xFFFEFFFE) != 0)
  {
    if ((__int16)v11 < 1)
    {
      if ((v11 & 0x8000) != 0)
      {
        v37 = 1;
        v38 = (int16x8_t *)a3;
        do
        {
          v39 = v37;
          v40 = v38[1];
          v41 = v38[2];
          v42 = v38[3];
          v43 = (int32x4_t)vtrn1q_s16(*v38, v40);
          v44 = (int32x4_t)vtrn2q_s16(*v38, v40);
          v45 = (int32x4_t)vtrn1q_s16(v41, v42);
          v46 = (int32x4_t)vtrn2q_s16(v41, v42);
          *(int32x4_t *)v38 = vtrn1q_s32(v43, v45);
          v38[1] = (int16x8_t)vtrn1q_s32(v44, v46);
          v38[2] = (int16x8_t)vtrn2q_s32(v43, v45);
          v38[3] = (int16x8_t)vtrn2q_s32(v44, v46);
          v38 += 4;
          v37 = 0;
        }
        while ((v39 & 1) != 0);
      }
    }
    else
    {
      sub_1C970A6D8(a3, (unsigned __int16)*a6);
    }
    v47 = *((unsigned __int16 *)a6 + 1);
    if (*((__int16 *)a6 + 1) < 1)
    {
      if ((v47 & 0x8000) != 0)
      {
        v48 = 1;
        v49 = (int16x8_t *)v7;
        do
        {
          v50 = v48;
          v51 = v49[1];
          v52 = v49[2];
          v53 = v49[3];
          v54 = (int32x4_t)vtrn1q_s16(*v49, v51);
          v55 = (int32x4_t)vtrn2q_s16(*v49, v51);
          v56 = (int32x4_t)vtrn1q_s16(v52, v53);
          v57 = (int32x4_t)vtrn2q_s16(v52, v53);
          *(int32x4_t *)v49 = vtrn1q_s32(v54, v56);
          v49[1] = (int16x8_t)vtrn1q_s32(v55, v57);
          v49[2] = (int16x8_t)vtrn2q_s32(v54, v56);
          v49[3] = (int16x8_t)vtrn2q_s32(v55, v57);
          v49 += 4;
          v48 = 0;
        }
        while ((v50 & 1) != 0);
      }
    }
    else
    {
      sub_1C970A6D8((int16x4_t *)v7, v47);
    }
    v58 = a3 - 16;
    v59 = 1;
    result = 0uLL;
    v60.i64[0] = 0x800000008;
    v60.i64[1] = 0x800000008;
    do
    {
      v61 = v59;
      v62 = *(int16x8_t *)v58[16].i8;
      v63 = *(int16x8_t *)v58[18].i8;
      v64 = *(int16x8_t *)v58[20].i8;
      v65 = *(int16x8_t *)v58[22].i8;
      v66 = *(int16x8_t *)v7;
      v67 = *((int16x8_t *)v7 + 1);
      v68 = (int32x4_t)vtrn1q_s16(v62, v63);
      v69 = (int32x4_t)vtrn2q_s16(v62, v63);
      v70 = (int32x4_t)vtrn1q_s16(v64, v65);
      v71 = (int32x4_t)vtrn2q_s16(v64, v65);
      v72 = *((int16x8_t *)v7 + 2);
      v73 = *((int16x8_t *)v7 + 3);
      *(_OWORD *)v58[16].i8 = 0uLL;
      *(_OWORD *)v58[18].i8 = 0uLL;
      *(_OWORD *)v58[20].i8 = 0uLL;
      *(_OWORD *)v58[22].i8 = 0uLL;
      v74 = (int16x8_t)vtrn1q_s32(v68, v70);
      v75 = (int16x8_t)vtrn2q_s32(v68, v70);
      v76 = (int16x8_t)vtrn1q_s32(v69, v71);
      v77 = (int16x8_t)vtrn2q_s32(v69, v71);
      v78 = (int32x4_t)vtrn1q_s16(v66, v67);
      v79 = (int32x4_t)vtrn2q_s16(v66, v67);
      v80 = (int32x4_t)vtrn1q_s16(v72, v73);
      v81 = (int32x4_t)vtrn2q_s16(v72, v73);
      v82 = (int16x8_t)vtrn1q_s32(v78, v80);
      v83 = (int16x8_t)vtrn2q_s32(v78, v80);
      v84 = (int16x8_t)vtrn1q_s32(v79, v81);
      v85 = (int16x8_t)vtrn2q_s32(v79, v81);
      *((_OWORD *)v7 + 2) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *(_OWORD *)v7 = 0uLL;
      *((_OWORD *)v7 + 1) = 0uLL;
      if (a5)
      {
        v86 = *(int16x8_t *)v58[2].i8;
        v87 = vdupq_laneq_s32(vsubw_s16(v60, *a5), 2);
        v88 = vshlq_s32(vmovl_s16(*v58), v87);
        v89 = vshlq_s32(vmovl_high_s16(*(int16x8_t *)v58->i8), v87);
        v90 = vshlq_s32(vmovl_s16(*(int16x4_t *)v86.i8), v87);
        v91 = vshlq_s32(vmovl_high_s16(v86), v87);
        v92 = vmovl_s16(vdup_lane_s16(*a5, 0));
        v93 = vmovl_s16(vdup_lane_s16(*a5, 1));
        *(_OWORD *)v58->i8 = 0uLL;
        *(_OWORD *)v58[2].i8 = 0uLL;
        v74 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v88, v92), 3uLL), vmulq_s32(v89, v92), 3uLL), v74);
        v82 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v88, v93), 3uLL), vmulq_s32(v89, v93), 3uLL), v82);
        v76 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v90, v92), 3uLL), vmulq_s32(v91, v92), 3uLL), v76);
        v84 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v90, v93), 3uLL), vmulq_s32(v91, v93), 3uLL), v84);
        v94 = *(int16x8_t *)v58[4].i8;
        v95 = *(int16x8_t *)v58[6].i8;
        v96 = vdupq_laneq_s32(vsubw_s16(v60, *a5), 2);
        v97 = vshlq_s32(vmovl_s16(*(int16x4_t *)v94.i8), v96);
        v98 = vshlq_s32(vmovl_high_s16(v94), v96);
        v99 = vshlq_s32(vmovl_s16(*(int16x4_t *)v95.i8), v96);
        v100 = vshlq_s32(vmovl_high_s16(v95), v96);
        v101 = vmovl_s16(vdup_lane_s16(*a5, 0));
        v102 = vmovl_s16(vdup_lane_s16(*a5, 1));
        *(_OWORD *)v58[4].i8 = 0uLL;
        *(_OWORD *)v58[6].i8 = 0uLL;
        v75 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v97, v101), 3uLL), vmulq_s32(v98, v101), 3uLL), v75);
        v83 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v97, v102), 3uLL), vmulq_s32(v98, v102), 3uLL), v83);
        v77 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v99, v101), 3uLL), vmulq_s32(v100, v101), 3uLL), v77);
        v85 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v99, v102), 3uLL), vmulq_s32(v100, v102), 3uLL), v85);
      }
      v59 = 0;
      v103 = vzip1q_s16(v74, v82);
      v104 = vzip2q_s16(v74, v82);
      v105 = vzip1q_s16(v76, v84);
      v106 = vzip2q_s16(v76, v84);
      v107 = vzip1q_s16(v75, v83);
      v108 = vzip2q_s16(v75, v83);
      v109 = vzip1q_s16(v77, v85);
      v110 = *(uint8x16_t *)&a1->i8[3 * a2];
      v111 = vqaddq_s16(vzip2q_s16(v77, v85), (int16x8_t)vmovl_high_u8(v110));
      v112 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v103, (int16x8_t)vmovl_u8(*a1))), vqaddq_s16(v104, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)a1->i8)));
      v113 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v105, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + a2)))), vqaddq_s16(v106, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&a1->i8[a2])));
      v114 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v107, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2)))), vqaddq_s16(v108, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&a1->i8[2 * a2])));
      *(int8x16_t *)a1->i8 = v112;
      *(int8x16_t *)&a1->i8[a2] = v113;
      *(int8x16_t *)&a1->i8[2 * a2] = v114;
      *(int8x16_t *)&a1->i8[3 * a2] = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v109, (int16x8_t)vmovl_u8(*(uint8x8_t *)v110.i8))), v111);
      a1 = (uint8x8_t *)((char *)a1 + 4 * a2);
      v58 += 8;
      v7 += 32;
    }
    while ((v61 & 1) != 0);
  }
  else
  {
    v13 = vld1q_dup_s16((const __int16 *)a3);
    v14 = vld1q_dup_s16(a4);
    result = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v13, v14), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    if (a5)
    {
      v16 = a3 - 16;
      v17 = -2;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      do
      {
        v19 = *(int16x8_t *)v16[2].i8;
        v20 = vdupq_laneq_s32(vsubw_s16(v18, *a5), 2);
        v21 = vshlq_s32(vmovl_s16(*v16), v20);
        v22 = vshlq_s32(vmovl_high_s16(*(int16x8_t *)v16->i8), v20);
        v23 = vshlq_s32(vmovl_s16(*(int16x4_t *)v19.i8), v20);
        v24 = vshlq_s32(vmovl_high_s16(v19), v20);
        v25 = vmovl_s16(vdup_lane_s16(*a5, 0));
        v26 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v21, v25), 3uLL), vmulq_s32(v22, v25), 3uLL);
        v27 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v23, v25), 3uLL), vmulq_s32(v24, v25), 3uLL);
        v28 = vmovl_s16(vdup_lane_s16(*a5, 1));
        v29 = vmulq_s32(v21, v28);
        v30 = vmulq_s32(v22, v28);
        v31 = vmulq_s32(v23, v28);
        v32 = vmulq_s32(v24, v28);
        v33 = vshrn_high_n_s32(vshrn_n_s32(v29, 3uLL), v30, 3uLL);
        v34 = vshrn_high_n_s32(vshrn_n_s32(v31, 3uLL), v32, 3uLL);
        *(_OWORD *)v16->i8 = 0uLL;
        *(_OWORD *)v16[2].i8 = 0uLL;
        v16 += 4;
        v35 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*a1), vaddq_s16(vzip1q_s16(v26, v33), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)a1->i8), vaddq_s16(vzip2q_s16(v26, v33), result)));
        v36 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + a2)), vaddq_s16(vzip1q_s16(v27, v34), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)&a1->i8[a2]), vaddq_s16(vzip2q_s16(v27, v34), result)));
        *(int8x16_t *)a1->i8 = v35;
        *(int8x16_t *)&a1->i8[a2] = v36;
        a1 = (uint8x8_t *)((char *)a1 + 2 * a2);
        v17 += 2;
      }
      while (v17 < 6);
    }
    else
    {
      v115 = vnegq_s16(result);
      v116 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(result), result);
      v117 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v115), v115);
      v118 = -2;
      do
      {
        result = (int16x8_t)vqsubq_u8(vqaddq_u8(*(uint8x16_t *)a1->i8, v116), v117);
        v119 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)&a1->i8[a2], v116), v117);
        *(int16x8_t *)a1->i8 = result;
        *(uint8x16_t *)&a1->i8[a2] = v119;
        a1 = (uint8x8_t *)((char *)a1 + 2 * a2);
        v118 += 2;
      }
      while (v118 < 6);
    }
  }
  return result;
}

void sub_1C970CC8C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  __int128 v4;
  int v5;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = 8;
  do
  {
    *a4 = v4;
    a4 = (_OWORD *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
}

uint64_t sub_1C970CCA8(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t i;
  int v75;
  _BOOL8 v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t *v85;
  int v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  _BOOL8 v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  int v99;
  int *v100;
  int v101;
  uint64_t v102;
  uint64_t vars0;
  uint64_t *vars8;
  signed int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;

  v49 = a3;
  v50 = result;
  v51 = *(_QWORD *)(a2 + 8);
  v101 = *(_DWORD *)(v51 + 520);
  v52 = *(_QWORD *)(v51 + 416);
  v53 = *(_QWORD *)(v51 + 424);
  v54 = *a3;
  v102 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    v106 = (v101 - 1) & 0xFFFFFFC0;
    vars8 = &a49;
    v108 = 8 * v52;
    v56 = 8 * v53;
    v100 = v49;
    vars0 = 8 * v53;
    do
    {
      v57 = *(_BYTE *)(v102 + 531);
      v58 = *(_QWORD *)(v102 + 400) + ((*(_QWORD *)(v102 + 416) * v55) << v57);
      v59 = *(_QWORD *)(v102 + 408) + ((*(_QWORD *)(v102 + 424) * ((uint64_t)v55 >> 1)) << v57);
      v60 = v54 - v55;
      if (v60 >= 64)
        v61 = 64;
      else
        v61 = v60;
      v109 = ((int)v61 >> 3);
      v110 = (((int)v61 + 8) >> 4);
      v107 = v61;
      v62 = 0;
      if (v106 >= 1)
      {
        v63 = ((int)v61 >> 1);
        do
        {
          v113 = v59;
          v64 = &a17;
          v111 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          v65 = 0;
          do
          {
            v66 = v65 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v65 + 8 + v58, v52, (char *)&STACK[0x7C0] + v65, v64, v61);
            v64 += 16;
            v65 = v66;
          }
          while (v66 != 64);
          v67 = *(_DWORD *)(v50 + 120);
          if ((int)v109 > (v67 == 0))
          {
            v68 = v67 == 0;
            v69 = v109 - v68;
            v70 = &a33 + 2 * v68;
            v71 = &STACK[0x800] + v68;
            v72 = v58 + v108 * v68;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v72, v52, v71, v70, 64);
              v70 += 2;
              ++v71;
              v72 += v108;
              --v69;
            }
            while (v69);
          }
          v73 = &a49;
          for (i = 16; i != 80; i += 16)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v113 + i, v53, v73, v63);
            v73 += 4;
          }
          v75 = *(_DWORD *)(v50 + 120);
          v56 = 8 * v53;
          v61 = v107;
          if ((int)v110 > (v75 == 0))
          {
            v76 = v75 == 0;
            v77 = v110 - v76;
            v78 = &STACK[0x6C0] + 4 * v76;
            v79 = v113 + vars0 * v76;
            do
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v79, v53, v78, 32);
              v78 += 4;
              v79 += vars0;
              --v77;
            }
            while (v77);
          }
          v58 += 64;
          v59 = v113 + 64;
          v62 = v111 + 64;
        }
        while (v111 + 64 < v106);
        v55 = *(_DWORD *)(v50 + 120);
      }
      v80 = v101 - v62;
      if (v101 != v62)
      {
        v114 = v59;
        result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        v112 = v80;
        if (v80 >= 16)
        {
          v81 = v61;
          v82 = v58 + 8;
          v83 = (v80 >> 3) - 1;
          v84 = &a17;
          v85 = &STACK[0x7C0];
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v82, v52, v85, v84, v81);
            v84 += 16;
            ++v85;
            v82 += 8;
            --v83;
          }
          while (v83);
        }
        v86 = *(_DWORD *)(v50 + 120);
        if ((int)v109 > (v86 == 0))
        {
          v87 = v86 == 0;
          v88 = v109 - v87;
          v89 = &a33 + 2 * v87;
          v90 = &STACK[0x800] + v87;
          v91 = v58 + v108 * v87;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, _QWORD))(v50 + 80))(v91, v52, v90, v89, v112);
            v89 += 2;
            ++v90;
            v91 += v108;
            --v88;
          }
          while (v88);
        }
        if (v112 >= 24)
        {
          v92 = v114 + 16;
          v93 = ((v112 + 8) >> 4) - 1;
          v94 = &a49;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(v50 + 88))(v92, v53, v94, (v107 >> 1));
            v94 += 4;
            v92 += 16;
            --v93;
          }
          while (v93);
        }
        v55 = *(_DWORD *)(v50 + 120);
        LODWORD(v61) = v107;
        if ((int)v110 > (v55 == 0))
        {
          v95 = v55 == 0;
          v96 = v110 - v95;
          v97 = &STACK[0x6C0] + 4 * v95;
          v98 = v114 + v56 * v95;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, _QWORD))(v50 + 96))(v98, v53, v97, (v112 >> 1));
            v97 += 4;
            v98 += v56;
            --v96;
          }
          while (v96);
          v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v61;
      *(_DWORD *)(v50 + 120) = v55;
      v49 = v100;
      v54 = *v100;
    }
    while (v55 < *v100);
  }
  v99 = *(_DWORD *)(v102 + 524);
  if (v99 >= v55)
    v99 = v55;
  *v49 = v99;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v102 + 524))
  {
    if (v99 <= 4)
      v99 = 4;
    *v49 = v99 - 4;
  }
  return result;
}

uint64_t sub_1C970D174(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int16x8_t v18;
  uint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int8x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;
  uint8x8_t v36;
  uint8x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;

  if (a5 <= 7)
  {
    v7 = -4 * a2;
    v8 = 3 * a2;
    v9 = -3 * a2;
    v10 = 2 * a2;
    v11 = -a2;
    v12 = -2 * a2;
  }
  else
  {
    v5 = 0;
    v6 = a5 >> 3;
    v7 = -4 * a2;
    v8 = 3 * a2;
    v9 = -3 * a2;
    v10 = 2 * a2;
    v11 = -a2;
    v12 = -2 * a2;
    v13 = result + a2;
    v14 = result + 2 * a2;
    v15 = result - a2;
    v16 = result - 3 * a2;
    v17 = result - 2 * a2;
    v18.i64[0] = 0xA000A000A000ALL;
    v18.i64[1] = 0xA000A000A000ALL;
    v19 = result;
    do
    {
      if (*(_WORD *)(a4 + 2 * v5))
      {
        v20 = *(int8x8_t *)(v16 + 8 * v5);
        v21 = *(uint8x8_t *)(v17 + 8 * v5);
        v22 = *(uint8x8_t *)(v15 + 8 * v5);
        v23 = *(uint8x8_t *)(result + 8 * v5);
        v24 = *(uint8x8_t *)(v13 + 8 * v5);
        v25 = *(int8x8_t *)(v14 + 8 * v5);
        v26 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v5));
        v27 = (int16x8_t)vaddl_u8(v22, (uint8x8_t)v20);
        v28 = (int16x8_t)vshll_n_u8(v21, 1uLL);
        v29 = vabdq_s16(v27, v28);
        v30 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v23);
        v31 = (int16x8_t)vshll_n_u8(v24, 1uLL);
        v32 = vabdq_s16(v30, v31);
        v33 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v29), v27, v28), (int8x16_t)xmmword_1C9862F60);
        v34 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v32), v30, v31), (int8x16_t)xmmword_1C9862F60);
        v35 = (int8x16_t)vcgtq_s16(v26, vaddq_s16(v34, v33));
        if (vaddlvq_u16((uint16x8_t)v35))
        {
          v36 = *(uint8x8_t *)(result - 4 * a2 + 8 * v5);
          v37 = *(uint8x8_t *)(result + 3 * a2 + 8 * v5);
          v38 = (int16x8_t)vmovl_u8(v21);
          v39 = (int16x8_t)vmovl_u8(v22);
          v40 = (int16x8_t)vmovl_u8(v24);
          v41 = (int16x8_t)vmovl_u8(v23);
          v42 = (int16x8_t)vandq_s8(v35, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v5)), (int8x16_t)xmmword_1C9862F50));
          v43 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v42, vshlq_n_s16(v42, 2uLL)), (int16x8_t)vabdl_u8(v22, v23)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v26, 3uLL), vaddq_s16(v32, v29)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v26, 3uLL), vabal_u8(vabdl_u8(v37, v23), v36, v22))));
          v44 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v43), (int8x16_t)v43), (int8x16_t)xmmword_1C9862F60);
          v45 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v26, (uint16x8_t)v26, 1uLL), 3uLL);
          v46 = (int8x16_t)vcgtq_s16(v45, v33);
          v47 = (int8x16_t)vcgtq_s16(v45, v34);
          v48 = (int16x8_t)vbicq_s8((int8x16_t)v42, (int8x16_t)v44);
          v49 = (int16x8_t)vsubl_u8(v24, v21);
          v50 = vrhadd_u8((uint8x8_t)v20, v22);
          v51 = vrhadd_u8((uint8x8_t)v25, v23);
          if (vaddlvq_u16((uint16x8_t)v44))
          {
            v52 = vmovn_s16(v42);
            v53 = (uint8x8_t)vadd_s8(v52, v52);
            v54 = (int16x8_t)vaddl_u8((uint8x8_t)v20, v36);
            v55 = (int16x8_t)vaddl_u8(v21, (uint8x8_t)v20);
            v56 = (int16x8_t)vaddl_u8(v23, v22);
            v57 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v24);
            v58 = (int16x8_t)vaddl_u8(v37, (uint8x8_t)v25);
            v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v38), vhadd_u8((uint8x8_t)v20, v24)), 2uLL), vqadd_u8(v22, v53)), vqsub_u8(v22, v53));
            v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v40), vhadd_u8((uint8x8_t)v25, v21)), 2uLL), vqadd_u8(v23, v53)), vqsub_u8(v23, v53));
            v61 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v56, v55), 2uLL), vqadd_u8(v21, v53)), vqsub_u8(v21, v53));
            v62 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v57, v56), 2uLL), vqadd_u8(v24, v53)), vqsub_u8(v24, v53));
            v63 = (int16x8_t)vsubl_u8(v23, v22);
            v64.i64[0] = 0x9000900090009;
            v64.i64[1] = 0x9000900090009;
            v65 = vmulq_s16(v63, v64);
            v64.i64[0] = 0x2000200020002;
            v64.i64[1] = 0x2000200020002;
            v66 = vrshrq_n_s16(vmlaq_s16(v65, v49, v64), 4uLL);
            v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v66));
            v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v48), vnegq_s16(v48));
            v69 = vshrq_n_s16(v48, 1uLL);
            v70 = vnegq_s16(v69);
            v71 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v68), v69), v70), vandq_s8(v47, v67)), v40);
            v72 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v68), v69), v70), vandq_s8(v46, v67)), v38));
            v73 = vqmovun_s16(vaddq_s16(v68, v39));
            v74 = vqmovun_s16(vsubq_s16(v41, v68));
            *(int8x8_t *)v68.i8 = vqmovn_s16(v44);
            *(int8x8_t *)(v16 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v54, (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v20, v53)), vqsub_u8((uint8x8_t)v20, v53)), v20);
            *(int8x8_t *)(v17 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v61, v72);
            *(int8x8_t *)(v15 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v59, v73);
            *(int8x8_t *)(result + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v60, v74);
            *(int8x8_t *)(v13 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v62, vqmovun_s16(v71));
            *(int8x8_t *)(v14 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v58, (int16x8_t)vhaddq_u16((uint16x8_t)v57, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v25, v53)), vqsub_u8((uint8x8_t)v25, v53)), v25);
          }
          else
          {
            v75.i64[0] = 0x2000200020002;
            v75.i64[1] = 0x2000200020002;
            v76 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v23, (uint8x8_t)0x909090909090909), v22, (uint8x8_t)0x909090909090909), v49, v75), 4uLL);
            v77 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v76));
            v78 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v76, v77), v48), vnegq_s16(v48));
            v79 = vaddq_s16(v78, v39);
            v80 = vsubq_s16(v41, v78);
            v81 = vshrq_n_s16(v48, 1uLL);
            v82 = vnegq_s16(v81);
            *(int8x8_t *)(v17 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v78), v81), v82), vandq_s8(v46, v77)), v38));
            *(int8x8_t *)(v15 + 8 * v5) = vqmovun_s16(v79);
            *(int8x8_t *)(result + 8 * v5) = vqmovun_s16(v80);
            *(int8x8_t *)(v13 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v78), v81), v82), vandq_s8(v47, v77)), v40));
          }
        }
      }
      ++v5;
      v19 += 8;
    }
    while (v6 != v5);
    result = v19;
  }
  _X9 = result + 64 + v7;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v9;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v12;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v11;
  __asm
  {
    PRFM            #0x10, [X9]
    PRFM            #0x10, [X0,#0x40]
  }
  _X9 = result + 64 + a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v10;
  __asm { PRFM            #0x10, [X9] }
  _X8 = result + 64 + v8;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1C970D5A4(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  uint8x8_t v40;
  int8x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  int8x8_t v44;
  uint8x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  uint8x8_t v72;
  uint8x8_t v73;
  int8x8_t v74;
  uint8x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x8_t v79;
  int8x8_t v80;
  int8x8_t v81;
  int8x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int8x8_t v92;
  int8x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  int16x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  int16x4_t v100;
  int16x4_t v101;
  int16x4_t v102;
  int32x2_t v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  int32x2_t v109;
  int16x8_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int8x8_t v118;
  int16x4_t v119;
  int16x4_t v120;
  int16x4_t v121;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 3 * a2;
    v8 = 4 * a2;
    v9 = 7 * a2;
    v10 = 6 * a2;
    v11.i64[0] = 0x2000200020002;
    v11.i64[1] = 0x2000200020002;
    v12.i64[0] = 0xA000A000A000ALL;
    v12.i64[1] = 0xA000A000A000ALL;
    v13 = 5 * a2;
    do
    {
      v15 = *a4++;
      v14 = v15;
      if (v15)
      {
        v16 = *(int8x8_t *)(result - 4);
        v17 = *(int8x8_t *)(result + a2 - 4);
        v18 = *(int8x8_t *)(result + v6 - 4);
        v19 = *(int8x8_t *)(result + v7 - 4);
        v20 = *(int8x8_t *)(result + v8 - 4);
        v21 = *(int8x8_t *)(result + v13 - 4);
        v22 = *(int8x8_t *)(result + v10 - 4);
        v23 = *(int8x8_t *)(result + v9 - 4);
        v24 = (int16x4_t)vtrn1_s8(v16, v17);
        v25 = (int16x4_t)vtrn2_s8(v16, v17);
        v26 = (int16x4_t)vtrn1_s8(v18, v19);
        v27 = (int16x4_t)vtrn2_s8(v18, v19);
        v28 = (int16x4_t)vtrn1_s8(v20, v21);
        v29 = (int16x4_t)vtrn2_s8(v20, v21);
        v30 = (int16x4_t)vtrn1_s8(v22, v23);
        v31 = (int16x4_t)vtrn2_s8(v22, v23);
        v32 = (int32x2_t)vtrn1_s16(v24, v26);
        v33 = (int32x2_t)vtrn2_s16(v24, v26);
        v34 = (int32x2_t)vtrn1_s16(v25, v27);
        v35 = (int32x2_t)vtrn2_s16(v25, v27);
        v36 = (int32x2_t)vtrn1_s16(v28, v30);
        v37 = (int32x2_t)vtrn2_s16(v28, v30);
        v38 = (int32x2_t)vtrn1_s16(v29, v31);
        v39 = (int32x2_t)vtrn2_s16(v29, v31);
        v40 = (uint8x8_t)vzip2_s32(v32, v36);
        v41 = (int8x8_t)vzip1_s32(v34, v38);
        v42 = (uint8x8_t)vzip2_s32(v34, v38);
        v43 = (uint8x8_t)vzip1_s32(v33, v37);
        v44 = (int8x8_t)vzip2_s32(v33, v37);
        v45 = (uint8x8_t)vzip1_s32(v35, v39);
        v46 = vdupq_n_s16(*a3);
        v47 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v45);
        v48 = (int16x8_t)vshll_n_u8(v43, 1uLL);
        v49 = vabdq_s16(v47, v48);
        v50 = (int16x8_t)vaddl_u8((uint8x8_t)v44, v40);
        v51 = (int16x8_t)vshll_n_u8(v42, 1uLL);
        v52 = vabdq_s16(v50, v51);
        v53 = (int8x16_t)vabaq_s16(vrev64q_s16(v49), v47, v48);
        v54 = (int8x16_t)vabaq_s16(vrev64q_s16(v52), v50, v51);
        v55 = (int16x8_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1C9862F60);
        v56 = (int16x8_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1C9862F60);
        v57 = (int8x16_t)vcgtq_s16(v46, vaddq_s16(v56, v55));
        if (vaddlvq_u16((uint16x8_t)v57))
        {
          v58 = (int8x8_t)vzip1_s32(v32, v36);
          v59 = (int8x8_t)vzip2_s32(v35, v39);
          v60 = (int16x8_t)vmovl_u8(v43);
          v61 = (int16x8_t)vmovl_u8(v45);
          v62 = (int16x8_t)vmovl_u8(v42);
          v63 = (int16x8_t)vmovl_u8(v40);
          v64 = (int16x8_t)vandq_s8(v57, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v14), (int8x16_t)xmmword_1C9862F50));
          v65 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v64, vshlq_n_s16(v64, 2uLL)), (int16x8_t)vabdl_u8(v45, v40)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v46, 3uLL), vaddq_s16(v52, v49)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v46, 3uLL), vabal_u8(vabdl_u8((uint8x8_t)v59, v40), (uint8x8_t)v58, v45))));
          v66 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v65), (int8x16_t)v65), (int8x16_t)xmmword_1C9862F60);
          v67 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v46, (uint16x8_t)v46, 1uLL), 3uLL);
          v68 = (int8x16_t)vcgtq_s16(v67, v55);
          v69 = (int8x16_t)vcgtq_s16(v67, v56);
          v70 = (int16x8_t)vbicq_s8((int8x16_t)v64, (int8x16_t)v66);
          v71 = (int16x8_t)vsubl_u8(v42, v43);
          v72 = vrhadd_u8((uint8x8_t)v41, v45);
          v73 = vrhadd_u8((uint8x8_t)v44, v40);
          if (vaddlvq_u16((uint16x8_t)v66))
          {
            v74 = vmovn_s16(v64);
            v75 = (uint8x8_t)vadd_s8(v74, v74);
            v76 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v43);
            v77 = (int16x8_t)vaddl_u8(v45, v40);
            v78 = (int16x8_t)vaddl_u8(v42, (uint8x8_t)v44);
            v79 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v60), vhadd_u8((uint8x8_t)v41, v42)), 2uLL), vqadd_u8(v45, v75)), vqsub_u8(v45, v75));
            v80 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v62), vhadd_u8((uint8x8_t)v44, v43)), 2uLL), vqadd_u8(v40, v75)), vqsub_u8(v40, v75));
            v81 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v76, v77), 2uLL), vqadd_u8(v43, v75)), vqsub_u8(v43, v75));
            v82 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v78, v77), 2uLL), vqadd_u8(v42, v75)), vqsub_u8(v42, v75));
            v83 = (int16x8_t)vsubl_u8(v40, v45);
            v84.i64[0] = 0x9000900090009;
            v84.i64[1] = 0x9000900090009;
            v85 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v83, v84), v71, v11), 4uLL);
            v86 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v85));
            v87 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v85, v86), v70), vnegq_s16(v70));
            v88 = vshrq_n_s16(v70, 1uLL);
            v89 = (int16x8_t)vsubl_u8(v72, v43);
            v90 = vnegq_s16(v88);
            v91 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v87), v88), v90), vandq_s8(v69, v86)), v62);
            v92 = vqmovn_s16(v66);
            v93 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v58, (uint8x8_t)v41), (int16x8_t)vhaddq_u16((uint16x8_t)v76, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v41, v75)), vqsub_u8((uint8x8_t)v41, v75)), v41);
            v94 = vbsl_s8(v92, v81, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v89, v87), v88), v90), vandq_s8(v68, v86)), v60)));
            *(int8x8_t *)v89.i8 = vbsl_s8(v92, v79, vqmovun_s16(vaddq_s16(v87, v61)));
            v95 = vbsl_s8(v92, v80, vqmovun_s16(vsubq_s16(v63, v87)));
            v96 = vbsl_s8(v92, v82, vqmovun_s16(v91));
            *(int8x8_t *)v91.i8 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v44, (uint8x8_t)v59), (int16x8_t)vhaddq_u16((uint16x8_t)v78, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v44, v75)), vqsub_u8((uint8x8_t)v44, v75)), v44);
            v97 = (int16x4_t)vtrn1_s8(v58, v93);
            v98 = (int16x4_t)vtrn2_s8(v58, v93);
            v99 = (int16x4_t)vtrn1_s8(v94, *(int8x8_t *)v89.i8);
            v100 = (int16x4_t)vtrn2_s8(v94, *(int8x8_t *)v89.i8);
            *(int8x8_t *)v89.i8 = vtrn1_s8(v95, v96);
            v101 = (int16x4_t)vtrn2_s8(v95, v96);
            v102 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v91.i8, v59);
            *(int8x8_t *)v91.i8 = vtrn2_s8(*(int8x8_t *)v91.i8, v59);
            v103 = (int32x2_t)vtrn1_s16(v97, v99);
            v104 = (int32x2_t)vtrn2_s16(v97, v99);
            v105 = (int32x2_t)vtrn1_s16(v98, v100);
            v106 = (int32x2_t)vtrn2_s16(v98, v100);
            v107 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v89.i8, v102);
            *(int16x4_t *)v89.i8 = vtrn2_s16(*(int16x4_t *)v89.i8, v102);
            v108 = (int32x2_t)vtrn1_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result - 4) = vzip1_s32(v103, v107);
            *(int32x2_t *)(result + a2 - 4) = vzip1_s32(v105, v108);
            v109 = (int32x2_t)vtrn2_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result + v6 - 4) = vzip1_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v7 - 4) = vzip1_s32(v106, v109);
            *(int32x2_t *)(result + v8 - 4) = vzip2_s32(v103, v107);
            *(int32x2_t *)(result + v13 - 4) = vzip2_s32(v105, v108);
            *(int32x2_t *)(result + v10 - 4) = vzip2_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v9 - 4) = vzip2_s32(v106, v109);
          }
          else
          {
            v110 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v40, (uint8x8_t)0x909090909090909), v45, (uint8x8_t)0x909090909090909), v71, v11), 4uLL);
            v111 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v110));
            v112 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v110, v111), v70), vnegq_s16(v70));
            v113 = vaddq_s16(v112, v61);
            v114 = vsubq_s16(v63, v112);
            v115 = vshrq_n_s16(v70, 1uLL);
            v116 = vnegq_s16(v115);
            v117 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v112), v115), v116), vandq_s8(v69, v111)), v62);
            *(int8x8_t *)v112.i8 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v72, v43), v112), v115), v116), vandq_s8(v68, v111)), v60));
            *(int8x8_t *)v113.i8 = vqmovun_s16(v113);
            v118 = vqmovun_s16(v114);
            *(int8x8_t *)v117.i8 = vqmovun_s16(v117);
            v119 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v112.i8 = vtrn2_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v113.i8 = vtrn1_s8(v118, *(int8x8_t *)v117.i8);
            *(int8x8_t *)v117.i8 = vtrn2_s8(v118, *(int8x8_t *)v117.i8);
            v120 = vtrn1_s16(v119, *(int16x4_t *)v113.i8);
            *(int16x4_t *)v113.i8 = vtrn2_s16(v119, *(int16x4_t *)v113.i8);
            v121 = vtrn1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(int16x4_t *)v117.i8 = vtrn2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(_DWORD *)(result - 2) = v120.i32[0];
            *(_DWORD *)(result + a2 - 2) = v121.i32[0];
            *(_DWORD *)(result + v6 - 2) = v113.i32[0];
            *(_DWORD *)(result + v7 - 2) = v117.i32[0];
            *(_DWORD *)(result + v8 - 2) = v120.i32[1];
            *(_DWORD *)(result + v13 - 2) = v121.i32[1];
            *(_DWORD *)(result + v10 - 2) = v113.i32[1];
            *(_DWORD *)(result + v9 - 2) = v117.i32[1];
          }
        }
      }
      result += 8 * a2;
      ++a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C970DA84(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  uint8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 3 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 7 * a2;
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11 = 5 * a2;
    do
    {
      if (*(_QWORD *)(a3 + v4))
      {
        v12.i64[0] = *(_QWORD *)(result - 4);
        v13.i64[0] = *(_QWORD *)(result + a2 - 4);
        v14.i64[0] = *(_QWORD *)(result + v5 - 4);
        v15.i64[0] = *(_QWORD *)(result + v6 - 4);
        v12.i64[1] = *(_QWORD *)(result + v7 - 4);
        v13.i64[1] = *(_QWORD *)(result + v11 - 4);
        v14.i64[1] = *(_QWORD *)(result + v8 - 4);
        v15.i64[1] = *(_QWORD *)(result + v9 - 4);
        v16 = (int32x4_t)vtrn1q_s16(v12, v13);
        v17 = (int32x4_t)vtrn2q_s16(v12, v13);
        v18 = (int32x4_t)vtrn1q_s16(v14, v15);
        v19 = vtrn2q_s16(v14, v15);
        v20 = (uint8x16_t)vtrn1q_s32(v16, v18);
        v21 = (int8x16_t)vtrn2q_s32(v16, v18);
        v22 = (int8x16_t)vtrn1q_s32(v17, (int32x4_t)v19);
        v23 = (uint8x16_t)vtrn2q_s32(v17, (int32x4_t)v19);
        v19.i64[0] = *(_QWORD *)(a3 + v4);
        v24 = (int8x16_t)vzip1q_s16(v19, v19);
        v25 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8((uint8x16_t)v21, (uint8x16_t)v22), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(v20, v23), 1uLL), vandq_s8(veorq_s8(v21, v22), v10))), v24), vnegq_s8(v24));
        v26 = (int16x8_t)vsqaddq_u8((uint8x16_t)v22, v25);
        v27 = (int16x8_t)vsqaddq_u8((uint8x16_t)v21, vnegq_s8(v25));
        v28 = vzip1q_s16(v26, v27);
        *(_DWORD *)(result - 2) = v28.i32[0];
        *(_DWORD *)(result + a2 - 2) = v28.i32[1];
        *(_DWORD *)(result + v5 - 2) = v28.i32[2];
        *(_DWORD *)(result + v6 - 2) = v28.i32[3];
        v29 = vzip2q_s16(v26, v27);
        *(_DWORD *)(result + v7 - 2) = v29.i32[0];
        *(_DWORD *)(result + v11 - 2) = v29.i32[1];
        *(_DWORD *)(result + v8 - 2) = v29.i32[2];
        *(_DWORD *)(result + v9 - 2) = v29.i32[3];
      }
      result += 8 * a2;
      v4 += 8;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint8x16_t *sub_1C970DBBC(uint8x16_t *result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, int16x8_t a10)
{
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint8x16_t v14;

  if (a4 >= 1)
  {
    v10 = 0;
    v11.i64[0] = 0x101010101010101;
    v11.i64[1] = 0x101010101010101;
    do
    {
      if (*(_QWORD *)(a3 + v10))
      {
        v12 = *(int8x16_t *)((char *)result - a2);
        a10.i64[0] = *(_QWORD *)(a3 + v10);
        a10 = vzip1q_s16(a10, a10);
        v13 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8(*result, (uint8x16_t)v12), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(*(uint8x16_t *)((char *)result - 2 * a2), *(uint8x16_t *)((char *)result + a2)), 1uLL), vandq_s8(veorq_s8(*(int8x16_t *)result, v12), v11))), (int8x16_t)a10), vnegq_s8((int8x16_t)a10));
        v14 = vsqaddq_u8(*result, vnegq_s8(v13));
        *(uint8x16_t *)((char *)result - a2) = vsqaddq_u8((uint8x16_t)v12, v13);
        *result = v14;
      }
      ++result;
      v10 += 8;
    }
    while ((int)v10 < a4);
  }
  return result;
}

unint64_t sub_1C970DC44(unint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  int8x16_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t *v14;
  const __int16 *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int v34;
  int v35;
  int64x2_t v37;
  int64x2_t v38;
  int16x8_t v60;
  unsigned __int128 v61;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint8x16_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  uint8x16_t v91;
  unsigned __int128 v92;
  unsigned __int128 v94;
  unsigned __int128 v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v101;
  int8x16_t v103;
  int8x16_t v105;
  int8x16_t v107;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t *v112;
  int32x4_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  _DWORD *v119;
  int8x16_t v120;
  int8x16_t v121;
  int16x8_t v122;
  int8x16_t v123;
  _QWORD *v124;
  _QWORD *v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int16x8_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t *v133;
  _OWORD v134[8];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(result + 8);
  v8 = (uint64_t)a3 >> 3;
  v9 = v7[96];
  v10 = v7[97];
  v11 = v7[116];
  v12 = v7[118];
  v13 = v7[117];
  v14 = (int32x4_t *)(v7[121] + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  v15 = (const __int16 *)(*(_QWORD *)(result + 32) + 14);
  v16 = *(int32x4_t *)((char *)v14 + v13);
  v17 = *(int32x4_t *)((char *)v14 + 2 * v13);
  v18 = *(int32x4_t *)((char *)v14 + 3 * v13);
  v19 = *(int32x4_t *)((char *)v14 + 4 * v13);
  v20 = *(int32x4_t *)((char *)v14 + 5 * v13);
  v21 = *(int32x4_t *)((char *)v14 + 6 * v13);
  v22 = *(int32x4_t *)((char *)v14 + 7 * v13);
  v23 = (int64x2_t)vtrn1q_s32(*v14, v16);
  v24 = (int64x2_t)vtrn2q_s32(*v14, v16);
  v25 = (int64x2_t)vtrn1q_s32(v17, v18);
  v26 = (int64x2_t)vtrn2q_s32(v17, v18);
  v27 = vzip1q_s64(v23, v25);
  v28 = vzip2q_s64(v23, v25);
  v29 = vzip1q_s64(v24, v26);
  v30 = vzip2q_s64(v24, v26);
  v31 = (int64x2_t)vtrn1q_s32(v19, v20);
  v32 = (int64x2_t)vtrn1q_s32(v21, v22);
  v134[0] = v27;
  v134[1] = vzip1q_s64(v31, v32);
  v33 = (int8x16_t)vld1q_dup_s16(v15);
  v34 = *(unsigned __int8 *)(result + 660);
  v35 = *(unsigned __int8 *)(result + 661);
  _X8 = v10 + 2 * (v9 * v8 + (a2 >> 3));
  v37 = (int64x2_t)vtrn2q_s32(v19, v20);
  v38 = (int64x2_t)vtrn2q_s32(v21, v22);
  v134[2] = v29;
  v134[3] = vzip1q_s64(v37, v38);
  v134[4] = v28;
  v134[5] = vzip2q_s64(v31, v32);
  v134[6] = v30;
  v134[7] = vzip2q_s64(v37, v38);
  _X13 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X13] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (int16x8_t *)(_X8 - 2 * v9);
    v60 = *_X9;
    _X9 += 2;
    v61 = (unsigned __int128)vshrq_n_s16(v60, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    v61 = 0uLL;
  }
  if (a5 >= 8)
  {
    v63 = 0;
    v64 = 0;
    v65 = v35 - 20;
    v66 = v35 - 16;
    v67 = (uint64_t)a2 >> 2;
    v68 = vdupq_n_s8(v34 - 16);
    v69 = vdupq_n_s8(v65);
    v70 = vdupq_n_s8(v66);
    v71 = a5 >> 3;
    v72 = 2 * v9;
    v73 = 2 * v11;
    v74 = v12 + v11 * v8;
    v75 = v12 + v11 + v11 * v8;
    v76 = 4 * v9;
    result = 512;
    v77 = 256;
    v78 = 832;
    v79.i64[0] = 0x2323232323232323;
    v79.i64[1] = 0x2323232323232323;
    v80 = xmmword_1C9862F70;
    v81 = xmmword_1C9862F80;
    v82 = xmmword_1C9862F90;
    v83.i64[0] = 0x101010101010101;
    v83.i64[1] = 0x101010101010101;
    v84 = xmmword_1C9862FA0;
    v85 = xmmword_1C9862FB0;
    v86 = xmmword_1C9862FC0;
    v87.i64[0] = 0x2B2B2B2B2B2B2B2BLL;
    v87.i64[1] = 0x2B2B2B2B2B2B2B2BLL;
    v88.i64[0] = 0xFAFAFAFAFAFAFAFALL;
    v88.i64[1] = 0xFAFAFAFAFAFAFAFALL;
    v89.i64[0] = 0xE2E2E2E2E2E2E2E2;
    v89.i64[1] = 0xE2E2E2E2E2E2E2E2;
    v90.i64[0] = 0xD4D4D4D4D4D4D4D4;
    v90.i64[1] = 0xD4D4D4D4D4D4D4D4;
    v91.i64[0] = 0xF2F2F2F2F2F2F2F2;
    v91.i64[1] = 0xF2F2F2F2F2F2F2F2;
    do
    {
      v92 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X6 = _X8 + v72;
      v94 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v92);
      v61 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v72), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v95 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v72 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v96 = vzip1q_s8(v6, v6);
      *(int8x8_t *)&v94 = vraddhn_s16((int16x8_t)v92, (int16x8_t)v94);
      *(int8x8_t *)&v95 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v95);
      v97 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v92, (int16x8_t)v61);
      v98 = vzip1q_s8((int8x16_t)v94, (int8x16_t)v95);
      __asm
      {
        PRFM            #0, [X8,#0x20]
        PRFM            #0, [X6,#0x20]
      }
      v101 = vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(v98, v68), v79));
      *(int8x16_t *)(a6 + v78) = vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(v97, v68), v79));
      *(_WORD *)(a6 + v64 + 776) = v101.i16[1];
      *(_WORD *)(a6 + v64 + 784) = v101.i16[2];
      *(_WORD *)(a6 + v64 + 792) = v101.i16[3];
      *(_WORD *)(a6 + v64 + 800) = v101.i16[4];
      *(_WORD *)(a6 + v64 + 808) = v101.i16[5];
      *(_WORD *)(a6 + v64 + 816) = v101.i16[6];
      *(_WORD *)(a6 + v64 + 768) = v101.i16[0];
      *(_WORD *)(a6 + v64 + 824) = v101.i16[7];
      _X4 = v74 + v67 + 16;
      v103 = *(int8x16_t *)(v74 + v67);
      _X6 = v75 + v67 + 16;
      v105 = *(int8x16_t *)(v75 + v67);
      __asm { PRFM            #0, [X4] }
      v107 = vaddq_s8(v97, v69);
      __asm { PRFM            #0, [X6] }
      v109 = vzip1q_s8(v107, v107);
      v110 = vceqzq_s8(v105);
      v111 = vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8(v105, v105), vzip2q_s8(v107, v107)), v79));
      v112 = (int8x16_t *)(a6 + 16 * v64);
      v113 = (int32x4_t)v134[result / 0x10 - 32];
      v114 = (int32x4_t)v134[result / 0x10 - 31];
      v115 = vaddq_s8(v98, v69);
      v116 = vbicq_s8(v111, v110);
      v117 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v113, (int8x16_t)v113), vzip1q_s8(v115, v115)), v79)), vceqzq_s8((int8x16_t)v113));
      v112[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8(v103, v103), v109), v79)), vceqzq_s8(v103));
      v112[9] = v116;
      v118 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v114, (int8x16_t)v114), vzip2q_s8(v115, v115)), v79)), vceqzq_s8((int8x16_t)v114));
      v119 = (_DWORD *)(a6 + v63);
      *v119 = v117.i32[0];
      *(_DWORD *)(a6 + v63 + 16) = v117.i32[1];
      *(_DWORD *)(a6 + v63 + 32) = v117.i32[2];
      *(_DWORD *)(a6 + v63 + 48) = v117.i32[3];
      v119[16] = v118.i32[0];
      v120 = vaddq_s8(vqtbl1q_s8(v98, (int8x16_t)xmmword_1C9862FD0), v33);
      v121 = vaddq_s8(vandq_s8(vcgtq_s8(v120, v87), v88), v120);
      *(_DWORD *)(a6 + v63 + 80) = v118.i32[1];
      *(_DWORD *)(a6 + v63 + 96) = v118.i32[2];
      v122 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v91, (uint8x16_t)vaddq_s8(v120, v90)), v121, vqtbl1q_s8((int8x16_t)xmmword_1C9862FE0, vaddq_s8(v121, v89))), v70), v79));
      *(_DWORD *)(a6 + v63 + 112) = v118.i32[3];
      v123 = (int8x16_t)vcgtq_u8((uint8x16_t)vuzp2q_s32(v113, v114), v83);
      v124 = (_QWORD *)(a6 + v77);
      v125 = (_QWORD *)(a6 + v77 + 96);
      v126 = vaddq_s8(v96, v33);
      v127 = vandq_s8((int8x16_t)vzip1q_s16(v122, v122), (int8x16_t)vmovl_s8(*(int8x8_t *)v123.i8));
      v128 = vaddq_s8(vandq_s8(vcgtq_s8(v126, v87), v88), v126);
      v129 = vandq_s8((int8x16_t)vzip2q_s16(v122, v122), (int8x16_t)vmovl_high_s8(v123));
      v130 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v91, (uint8x16_t)vaddq_s8(v126, v90)), v128, vqtbl1q_s8((int8x16_t)xmmword_1C9862FE0, vaddq_s8(v128, v89))), v70), v79));
      v131 = (int8x16_t)vzip1q_s16(v130, v130);
      *v124 = v127.i64[0];
      v6 = (int8x16_t)vzip2q_s16(v130, v130);
      v132 = (int8x16_t)vcgtq_u8((uint8x16_t)v103, v83);
      *(_QWORD *)(a6 + v77 + 32) = v127.i64[1];
      v133 = (int8x16_t *)(a6 + result);
      v64 += 2;
      v74 += v73;
      v124[8] = v129.i64[0];
      result += 32;
      v75 += v73;
      v77 += 8;
      _X8 += v76;
      *v125 = v129.i64[1];
      *v133 = vandq_s8(v131, (int8x16_t)vmovl_s8(*(int8x8_t *)v132.i8));
      v133[1] = vandq_s8(v6, (int8x16_t)vmovl_high_s8(v132));
      v78 += 16;
      v63 += 4;
    }
    while (v64 < v71);
  }
  return result;
}

void sub_1C970E154(int *a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v7;
  FILE *v8;
  const char *v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;

  v7 = *(_QWORD *)(a2 + 8);
  if (a3)
  {
    if (a1[1])
    {
      if (dword_1ED1ACCC0 < 3)
        return;
      v8 = (FILE *)*MEMORY[0x1E0C80C10];
      v9 = "SAO enabled partway through processing frame\n";
      v10 = "SAO enabled partway through processing frame\n";
      v11 = 45;
LABEL_9:
      fwrite(v10, v11, 1uLL, v8);
      syslog(27, v9);
      return;
    }
    v12 = *a1;
    v13 = *a4;
    if (*a4 >= *(_DWORD *)(*(_QWORD *)(a2 + 16) + 208))
    {
      v15 = a1[5];
    }
    else
    {
      v14 = a1[2];
      v15 = v13 >> v14;
      *a4 = v13 >> v14 << v14;
    }
    *a1 = v15;
    if ((int)v12 >= v15)
    {
LABEL_22:
      if (*(_BYTE *)(v7 + 534))
      {
        v21 = a1[3];
        v22 = v21 * v12;
        v23 = v21 * v15;
        if (*(_DWORD *)(v7 + 524) >= v23)
          v24 = v23;
        else
          v24 = *(_DWORD *)(v7 + 524);
        sub_1C97ED4C0((uint64_t)a1, v7, v22, v24);
      }
    }
    else
    {
      v17 = v12;
      while (1)
      {
        v18 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))*((_QWORD *)a1 + 56);
        v19 = *((_QWORD *)a1 + 57);
        v20 = (_QWORD *)((char *)a1 + (v19 >> 1));
        if ((v19 & 1) != 0)
          v18 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*v20 + v18);
        if (v18(v20, a2, v17))
          break;
        v17 = (v17 + 1);
        if (v15 == (_DWORD)v17)
          goto LABEL_22;
      }
    }
  }
  else
  {
    if (!*(_BYTE *)(v7 + 534))
      return;
    if (*a1)
    {
      if (dword_1ED1ACCC0 < 3)
        return;
      v8 = (FILE *)*MEMORY[0x1E0C80C10];
      v9 = "SAO disabled partway through processing frame\n";
      v10 = "SAO disabled partway through processing frame\n";
      v11 = 46;
      goto LABEL_9;
    }
    v16 = *a4;
    if (v16 < *(_DWORD *)(*(_QWORD *)(a2 + 16) + 208))
    {
      v16 &= 0xFFFFFFF8;
      *a4 = v16;
    }
    sub_1C97ED4C0((uint64_t)a1, v7, a1[1], v16);
    a1[1] = *a4;
  }
}

int8x16_t sub_1C970E300(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int8x16_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  size_t v64;
  int v65;
  BOOL v66;
  BOOL v67;
  uint64_t v68;
  __int8 *v69;
  uint64_t v70;
  int8x16_t result;
  unint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  int v77;
  _BOOL4 v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v83;
  unsigned int v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  _BOOL4 v90;
  _WORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  int v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  int v102;
  char *v104;
  uint64_t v105;
  char *v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  void (**v112)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 v120;
  int8x16_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  unsigned __int8 v127;
  int v128;
  _WORD *v129;
  char *v130;
  uint64_t v131;
  int v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  int8x16_t *v141;
  int8x16_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  uint64_t vars0;
  int8x16_t *vars8;
  int v155;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;

  v48 = (int8x16_t *)a1;
  v145 = &v143;
  a48 = *MEMORY[0x1E0C80C00];
  v49 = *(_QWORD *)(a2 + 8);
  v50 = *(_DWORD *)(a1 + 16);
  v51 = *(_DWORD *)(a1 + 20);
  v52 = (unsigned __int8 *)(*(_QWORD *)(v49 + 1000) + 16 * (int)(v50 * a3));
  v54 = *(_QWORD *)(v49 + 416);
  v53 = *(_QWORD *)(v49 + 424);
  v56 = *(_DWORD *)(a1 + 8);
  v55 = *(int *)(a1 + 12);
  v57 = (int)v55 * (uint64_t)(int)a3;
  v58 = *(_BYTE *)(v49 + 531);
  v59 = *(_QWORD *)(v49 + 400) + ((v54 * v57) << v58);
  v60 = *(_QWORD *)(v49 + 408) + ((v53 * ((uint64_t)(int)v57 >> 1)) << v58);
  v61 = *(_QWORD *)(a1 + 32);
  v159 = *(_QWORD *)(a1 + 48);
  v160 = v60;
  if (a3)
    v62 = 38;
  else
    v62 = 2;
  if (a3)
    v63 = 17;
  else
    v63 = 1;
  v144 = *(_QWORD *)(a2 + 8);
  if (v51 - 1 <= (int)a3)
  {
    v151 = v63;
    v65 = *(_DWORD *)(v49 + 524) - v57;
  }
  else
  {
    v62 = v62 | 0x88;
    v151 = v63 | 0x40;
    v64 = *(int *)(v49 + 520);
    memcpy(*(void **)(a1 + 40), (const void *)(v59 + v54 * (v55 - 1)), v64);
    memcpy((void *)v48[3].i64[1], (const void *)(v60 + v53 * ((v48->i32[3] >> 1) - 1)), v64 & 0x7FFFFFFFFFFFFFFFLL);
    v65 = v48->i32[3];
    v50 = v48[1].i32[0];
  }
  vars0 = (v65 >> 1);
  vars8 = v48;
  v149 = v53;
  v158 = v65;
  if (v50 < 2)
  {
    v68 = 0;
    v95 = 0;
    v151 = 0;
  }
  else
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = &v48->i8[40 * v56];
    v147 = v69 + 112;
    v148 = v69 - 48;
    v146 = v65;
    v150 = v151 | v62;
    do
    {
      v70 = sub_1C970EA84(a2, v68, a3, v62);
      v72 = *v52;
      v73 = (v72 & 1) == 0;
      if ((v72 & 1) != 0)
      {
        v74 = (v72 >> 1) & 7;
        if (v74 > 4)
          return result;
        if ((_DWORD)v74 == 4)
        {
          v75 = 0;
          v76 = v52[13];
          a29 = 0u;
          a30 = 0u;
          v77 = v158;
          do
          {
            *((_BYTE *)&a29 + ((v76 + (_BYTE)v75) & 0x1F)) = v52[v75 + 1];
            ++v75;
          }
          while (v75 != 4);
        }
        else
        {
          LOWORD(a29) = *(_WORD *)(v52 + 1);
          *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 3);
          BYTE2(a29) = 0;
          v77 = v158;
        }
        v78 = v73;
        if (v67 && v77 > 0)
        {
          v79 = (char *)(v59 - 1);
          v80 = &a33;
          v81 = v146;
          do
          {
            *v80++ = *v79;
            v79 += v54;
            --v81;
          }
          while (v81);
        }
        v82 = v70;
        (*(void (**)(uint64_t, uint64_t, __int128 *))&v148[8 * v74])(v59, v54, &a29);
        v70 = v82;
        LODWORD(v72) = *v52;
        v73 = v78;
      }
      v83 = (v72 & 0x10) == 0;
      if ((v72 & 0x10) != 0)
      {
        if (v72 > 0x9F)
          return result;
        v84 = v72 >> 5;
        v151 = v83;
        if (v84 == 4)
        {
          v85 = 0;
          v86 = v52[14];
          a29 = 0u;
          a30 = 0u;
          do
          {
            *((_BYTE *)&a29 + ((v86 + (_BYTE)v85) & 0x1F)) = v52[v85 + 5];
            ++v85;
          }
          while (v85 != 4);
          v87 = 0;
          v88 = v52[15];
          a31 = 0u;
          a32 = 0u;
          v89 = v149;
          do
          {
            *((_BYTE *)&a31 + ((v88 + (_BYTE)v87) & 0x1F)) = v52[v87 + 9];
            ++v87;
          }
          while (v87 != 4);
        }
        else
        {
          LOWORD(a29) = *(_WORD *)(v52 + 5);
          *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 7);
          BYTE2(a29) = 0;
          LOWORD(a31) = *(_WORD *)(v52 + 9);
          *(_WORD *)((char *)&a31 + 3) = *(_WORD *)(v52 + 11);
          BYTE2(a31) = 0;
          v89 = v149;
        }
        v90 = v73;
        if (v66 && v158 > 1)
        {
          v91 = (_WORD *)(v160 - 2);
          v92 = &a13;
          v93 = vars0;
          do
          {
            *(_WORD *)v92 = *v91;
            v92 += 2;
            v91 = (_WORD *)((char *)v91 + v89);
            --v93;
          }
          while (v93);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))&v147[8 * v84])(v160, v89, &a29, v70, &a13, v159, vars0);
        v83 = v151;
        v73 = v90;
      }
      v94 = vars8->i32[3];
      v59 += v94;
      v61 += v94;
      v159 += v94;
      v160 += v94;
      v52 += 16;
      v68 = (v68 + 1);
      v62 = v150;
      v66 = v83;
      v67 = v73;
    }
    while ((int)v68 < vars8[1].i32[0] - 1);
    v95 = v73;
    v151 = v83;
    LOBYTE(v62) = v150;
    v48 = vars8;
  }
  v96 = sub_1C970EA84(a2, v68, a3, v62 & 0x5D);
  v97 = *(_DWORD *)(v144 + 520) - (v48[1].i32[0] - 1) * v48->i32[3];
  v98 = *v52;
  if ((v98 & 1) != 0)
  {
    v99 = (v98 >> 1) & 7;
    if (v99 > 4)
      return result;
    if ((_DWORD)v99 == 4)
    {
      v100 = 0;
      v101 = v52[13];
      result = 0uLL;
      a29 = 0u;
      a30 = 0u;
      v102 = v158;
      do
      {
        *((_BYTE *)&a29 + ((v101 + (_BYTE)v100) & 0x1F)) = v52[v100 + 1];
        ++v100;
      }
      while (v100 != 4);
    }
    else
    {
      LOWORD(a29) = *(_WORD *)(v52 + 1);
      *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 3);
      BYTE2(a29) = 0;
      v102 = v158;
    }
    if (v102 > 0 && v95)
    {
      v104 = (char *)(v59 - 1);
      v105 = v102;
      v106 = &a33;
      do
      {
        *v106++ = *v104;
        v104 += v54;
        --v105;
      }
      while (v105);
    }
    if ((v96 & 4) != 0)
      v107 = 34;
    else
      v107 = 2;
    if ((v96 & 4) != 0)
      v108 = 17;
    else
      v108 = 1;
    v109 = v107 & 0xFFFFFF7F | (((v96 & 8) != 0) << 7);
    v110 = v108 & 0xFFFFFFBF | (((v96 & 8) != 0) << 6);
    v155 = v97;
    v111 = v97 >> 3;
    v112 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v48[12] + v99;
    v113 = 4;
    v157 = v96;
    v114 = v96;
    do
    {
      if ((v111 & (1 << --v113)) != 0)
      {
        v111 -= 1 << v113;
        if (v111)
          v115 = v109;
        else
          v115 = 0;
        v116 = v115 | v114;
        v114 = v114 & 0xC | v110;
        (*v112)(v59, v54, &a29, v116, &a33, v61, v158);
        v59 += 8 << v113;
        v61 += 8 << v113;
      }
      v112 -= 5;
    }
    while (v113);
    LODWORD(v98) = *v52;
    v96 = v157;
    v97 = v155;
  }
  v117 = v159;
  if ((v98 & 0x10) == 0)
  {
LABEL_93:
    v141 = vars8;
    result = vextq_s8(vars8[2], vars8[2], 8uLL);
    v142 = vextq_s8(vars8[3], vars8[3], 8uLL);
    vars8[2] = result;
    v141[3] = v142;
    return result;
  }
  if (v98 <= 0x9F)
  {
    v118 = v98 >> 5;
    if (v118 == 4)
    {
      v119 = 0;
      v120 = v52[14];
      a29 = 0u;
      a30 = 0u;
      v121 = vars8;
      v122 = v149;
      v123 = v160;
      v124 = v158;
      v125 = v151;
      do
      {
        *((_BYTE *)&a29 + ((v120 + (_BYTE)v119) & 0x1F)) = v52[v119 + 5];
        ++v119;
      }
      while (v119 != 4);
      v126 = 0;
      v127 = v52[15];
      a31 = 0u;
      a32 = 0u;
      do
      {
        *((_BYTE *)&a31 + ((v127 + (_BYTE)v126) & 0x1F)) = v52[v126 + 9];
        ++v126;
      }
      while (v126 != 4);
    }
    else
    {
      LOWORD(a29) = *(_WORD *)(v52 + 5);
      *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 7);
      BYTE2(a29) = 0;
      LOWORD(a31) = *(_WORD *)(v52 + 9);
      *(_WORD *)((char *)&a31 + 3) = *(_WORD *)(v52 + 11);
      BYTE2(a31) = 0;
      v121 = vars8;
      v122 = v149;
      v123 = v160;
      v124 = v158;
      v125 = v151;
    }
    if (v124 > 1)
      v128 = v125;
    else
      v128 = 0;
    if (v128 == 1)
    {
      v129 = (_WORD *)(v123 - 2);
      v130 = &a13;
      v131 = vars0;
      do
      {
        *(_WORD *)v130 = *v129;
        v130 += 2;
        v129 = (_WORD *)((char *)v129 + v122);
        --v131;
      }
      while (v131);
    }
    if ((v96 & 4) != 0)
      v132 = 34;
    else
      v132 = 2;
    if ((v96 & 4) != 0)
      v133 = 17;
    else
      v133 = 1;
    v134 = v132 & 0xFFFFFF7F | (((v96 & 8) != 0) << 7);
    v135 = v133 & 0xFFFFFFBF | (((v96 & 8) != 0) << 6);
    v136 = v97 >> 3;
    v137 = &v121[24].i64[v118 + 1];
    v138 = 5;
    do
    {
      if ((v136 & (1 << --v138)) != 0)
      {
        v136 -= 1 << v138;
        if (v136)
          v139 = v134;
        else
          v139 = 0;
        v140 = v96 & 0xC | v135;
        ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, uint64_t))*v137)(v160, v149, &a29, v139 | v96, &a13, v117, vars0);
        v96 = v140;
        v160 += 8 << v138;
        v117 += 8 << v138;
      }
      v137 -= 5;
    }
    while (v138);
    goto LABEL_93;
  }
  return result;
}

uint64_t sub_1C970EA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  BOOL v18;
  int v19;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v6 = a4;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(unsigned __int8 *)(v10 + 20);
  if (*(_BYTE *)(v10 + 20))
  {
    v12 = *(_DWORD *)(v10 + 1744);
    if (v12 > (int)a2)
    {
      v11 = *(_DWORD *)(v10 + 1748);
      if (v11 > (int)a3)
      {
        v4 = *(unsigned __int8 *)(v10 + 1752);
        if (*(_BYTE *)(v10 + 1752))
        {
          v13 = *(_QWORD *)(v10 + 1696) + 12 * (int)a2;
          v5 = *(_DWORD *)(v13 + 4);
          v12 = *(_DWORD *)(v13 + 8);
          v14 = *(_QWORD *)(v10 + 1720) + 12 * (int)a3;
          v4 = *(_DWORD *)(v14 + 4);
          v11 = *(_DWORD *)(v14 + 8);
        }
        else
        {
          v5 = 0;
        }
      }
    }
    if (*(_BYTE *)(v10 + 27))
    {
      v18 = v12 - 1 == (_DWORD)a2 && v4 < (int)a3;
      v19 = v11 - 1;
      v21 = v5 == (_DWORD)a2 && v19 > (int)a3;
      if (*(_BYTE *)(a1 + 1600))
        v15 = v21;
      else
        v15 = 0;
      if (*(_BYTE *)(a1 + 1600))
        v16 = v18;
      else
        v16 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v22 = a4 & 0xFFFFFFAE;
      if (v5 != (_DWORD)a2)
        v22 = a4;
      if (v12 - 1 == (_DWORD)a2)
        v22 &= 0xFFFFFF5D;
      if (v4 == (_DWORD)a3)
        v22 &= 0xFFFFFFCB;
      if (v11 - 1 == (_DWORD)a3)
        v6 = v22 & 0xFFFFFF37;
      else
        v6 = v22;
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  if (*(_BYTE *)(a1 + 1600))
  {
    v23 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))a1)(a1, a2, a3);
    v24 = *(_DWORD *)(v23 + 648);
    if (*(_BYTE *)(v23 + 567))
    {
LABEL_57:
      if ((v6 & 2) != 0)
      {
        v27 = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))a1)(a1, (a2 + 1), a3);
        if (*(_DWORD *)(v27 + 648) != v24)
        {
          if (*(_BYTE *)(v27 + 567))
            v6 = v6;
          else
            v6 = v6 & 0xFFFFFFFD;
        }
      }
      if ((v6 & 8) != 0)
      {
        v28 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD))a1)(a1, a2, (a3 + 1));
        if (*(_DWORD *)(v28 + 648) != v24)
        {
          if (*(_BYTE *)(v28 + 567))
            v6 = v6;
          else
            v6 = v6 & 0xFFFFFFF7;
        }
      }
      if ((v6 & 0x80) != 0)
      {
        v29 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (a2 + 1), (a3 + 1));
        if (*(_DWORD *)(v29 + 648) != v24)
        {
          if (*(_BYTE *)(v29 + 567))
            v6 = v6;
          else
            v6 = v6 & 0xFFFFFF7F;
        }
      }
      if ((v6 & 0x40) != 0)
        v30 = v15;
      else
        v30 = 1;
      if ((v30 & 1) == 0)
      {
        v31 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (a2 - 1), (a3 + 1));
        if (*(_DWORD *)(v31 + 648) != v24)
        {
          if (*(_BYTE *)(v31 + 567))
            v6 = v6;
          else
            v6 = v6 & 0xFFFFFFBF;
        }
      }
      v32 = v16 ^ 1;
      if ((v6 & 0x20) == 0)
        v32 = 1;
      if ((v32 & 1) == 0)
      {
        v33 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (a2 + 1), (a3 - 1));
        if (*(_DWORD *)(v33 + 648) != v24)
        {
          if (*(_BYTE *)(v33 + 567))
            return v6;
          else
            return v6 & 0xFFFFFFDF;
        }
      }
      return v6;
    }
    if ((v6 & 1) != 0)
    {
      if (*(_DWORD *)((**(uint64_t (***)(uint64_t, _QWORD, uint64_t))a1)(a1, (a2 - 1), a3) + 648) == v24)
        v6 = v6;
      else
        v6 = v6 & 0xFFFFFFFE;
      if ((v6 & 4) == 0)
      {
LABEL_40:
        if ((v6 & 0x10) == 0)
          goto LABEL_44;
        goto LABEL_41;
      }
    }
    else if ((v6 & 4) == 0)
    {
      goto LABEL_40;
    }
    if (*(_DWORD *)((**(uint64_t (***)(uint64_t, uint64_t, _QWORD))a1)(a1, a2, (a3 - 1)) + 648) == v24)
      v6 = v6;
    else
      v6 = v6 & 0xFFFFFFFB;
    if ((v6 & 0x10) == 0)
      goto LABEL_44;
LABEL_41:
    if (*(_DWORD *)((**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (a2 - 1), (a3 - 1))+ 648) == v24)v6 = v6;
    else
      v6 = v6 & 0xFFFFFFEF;
LABEL_44:
    if ((v6 & 0x20) != 0)
      v25 = v16;
    else
      v25 = 1;
    if ((v25 & 1) == 0)
    {
      if (*(_DWORD *)((**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (a2 + 1), (a3 - 1))+ 648) == v24)v6 = v6;
      else
        v6 = v6 & 0xFFFFFFDF;
    }
    v26 = v15 ^ 1;
    if ((v6 & 0x40) == 0)
      v26 = 1;
    if ((v26 & 1) == 0)
    {
      if (*(_DWORD *)((**(uint64_t (***)(uint64_t, _QWORD, _QWORD))a1)(a1, (a2 - 1), (a3 + 1))+ 648) == v24)v6 = v6;
      else
        v6 = v6 & 0xFFFFFFBF;
    }
    goto LABEL_57;
  }
  return v6;
}

__n128 sub_1C970EE04(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2;
  int8x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  int8x16_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int8x16_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  __int128 v32;
  __n128 result;

  v2 = a1[-1].u8[15];
  v3 = vdup_n_s8(v2);
  *(_BYTE *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[4].u8[0] + 2) >> 2;
  v4 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  v9 = (uint8x8_t)vextq_s8(v5, v5, 8uLL).u64[0];
  v10 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  v11 = vextq_s8(v6, v6, 8uLL);
  v12 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  v13 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL));
  v14 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL));
  v15 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 9uLL));
  v16 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 1uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)v5.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  *(uint8x8_t *)v7.i8 = vrhadd_u8(v14, *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&v17 = vrhadd_u8(v16, *(uint8x8_t *)v6.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v12, v8);
  v5.u64[1] = (unint64_t)vrhadd_u8(v13, v9);
  *(int8x16_t *)a2 = v4;
  *(int8x16_t *)(a2 + 16) = v5;
  v7.u64[1] = (unint64_t)vrhadd_u8(v15, v10);
  *((uint8x8_t *)&v17 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v11, 9uLL)), *(uint8x8_t *)v11.i8);
  *(int8x16_t *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v17;
  *(_BYTE *)(a2 + 63) = v6.i8[15];
  v18 = a1[4];
  v19 = a1[5];
  v21 = a1[6];
  v20 = a1[7];
  v22 = (uint8x8_t)vextq_s8(v19, v19, 8uLL).u64[0];
  v23 = (uint8x8_t)vextq_s8(v21, v21, 8uLL).u64[0];
  v24 = vextq_s8(v20, v20, 8uLL);
  v25 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 1uLL));
  v26 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 9uLL));
  v27 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 1uLL));
  v28 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 9uLL));
  v29 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL));
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v18.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL)), *(uint8x8_t *)v18.i8);
  *(uint8x8_t *)v18.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(uint8x8_t *)v19.i8 = vrhadd_u8(v25, *(uint8x8_t *)v19.i8);
  v30 = vrhadd_u8(v26, v22);
  *(uint8x8_t *)v21.i8 = vrhadd_u8(v27, *(uint8x8_t *)v21.i8);
  v31 = vrhadd_u8(v28, v23);
  *(uint8x8_t *)&v32 = vrhadd_u8(v29, *(uint8x8_t *)v20.i8);
  result.n128_u64[1] = v18.i64[0];
  v19.u64[1] = (unint64_t)v30;
  v21.u64[1] = (unint64_t)v31;
  *((uint8x8_t *)&v32 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v24, 9uLL)), *(uint8x8_t *)v24.i8);
  *(__n128 *)(a2 + 64) = result;
  *(int8x16_t *)(a2 + 80) = v19;
  *(int8x16_t *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 112) = v32;
  *(_BYTE *)(a2 + 127) = v20.i8[15];
  return result;
}

void sub_1C970EF9C(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  const __int16 *i16;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  const __int16 *v12;
  uint8x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x4_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint8x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  int16x4_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  _OWORD v35[4];
  _OWORD v36[2];
  uint8x8_t v37;
  _QWORD v38[5];

  v4 = 0;
  v38[4] = *MEMORY[0x1E0C80C00];
  v38[0] = 0xC0C0D0D0E0E0F0FLL;
  v38[1] = 0x80809090A0A0B0BLL;
  v38[2] = 0x404050506060707;
  v38[3] = 0x10102020303;
  v5 = a2[1];
  v6 = a2[4];
  v7 = a2[5];
  v36[0] = *a2;
  v36[1] = v5;
  i16 = a2[2].i16;
  v9 = (uint8x8_t)vld1_dup_s16(i16);
  v37 = v9;
  v10 = (uint8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
  v11 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  v12 = a2[6].i16;
  v13 = (uint8x8_t)vld1_dup_s16(v12);
  v35[0] = vmull_u8((uint8x8_t)0x404030302020101, v9);
  v35[1] = vmull_u8((uint8x8_t)0x808070706060505, v9);
  v35[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v9);
  v35[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v9);
  v14 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v13);
  v15 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v13);
  v16 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  v17 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  do
  {
    v18 = *(int16x4_t *)((char *)v36 + 8 * v4);
    v19 = (int32x4_t)v35[v4];
    v20 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    v21 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1);
    v22 = (int16x8_t)vdupq_laneq_s32(v19, 2);
    v23 = (int16x8_t)vdupq_laneq_s32(v19, 3);
    v24 = (uint8x8_t)vdup_lane_s16(v18, 0);
    v25 = (uint8x8_t)vdup_lane_s16(v18, 1);
    *(int16x4_t *)v19.i8 = vdup_lane_s16(v18, 2);
    v26 = (uint8x8_t)vdup_lane_s16(v18, 3);
    v27 = (int16x4_t)v38[v4];
    v28 = (uint8x8_t)vdup_lane_s16(v27, 0);
    v29 = (uint8x8_t)vdup_lane_s16(v27, 1);
    v30 = (uint8x8_t)vdup_lane_s16(v27, 2);
    v31 = (uint8x8_t)vdup_lane_s16(v27, 3);
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v24), v20), *(uint8x8_t *)v6.i8, v28), 5uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v15, (uint8x8_t)0x80809090A0A0B0BLL, v24), v20), v10, v28), 5uLL);
    v32 = (int8x16_t *)((char *)a4 + a3);
    *v32 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v25), v21), *(uint8x8_t *)v6.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v21), (uint8x8_t)0x80809090A0A0B0BLL, v25), v10, v29), 5uLL);
    v33 = (int8x16_t *)((char *)a4 + 2 * a3);
    *v33 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v22), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v6.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v22), (uint8x8_t)0x80809090A0A0B0BLL, *(uint8x8_t *)v19.i8), v10, v30), 5uLL);
    v34 = (int8x16_t *)((char *)a4 + 3 * a3);
    *v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v23), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v26), *(uint8x8_t *)v6.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v23), (uint8x8_t)0x80809090A0A0B0BLL, v26), v10, v31), 5uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v20), (uint8x8_t)0x404050506060707, v24), *(uint8x8_t *)v7.i8, v28), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v20), (uint8x8_t)0x10102020303, v24), v11, v28), 5uLL);
    v32[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v21), (uint8x8_t)0x404050506060707, v25), *(uint8x8_t *)v7.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v21), (uint8x8_t)0x10102020303, v25), v11, v29), 5uLL);
    v33[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v22), (uint8x8_t)0x404050506060707, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v7.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v22), (uint8x8_t)0x10102020303, *(uint8x8_t *)v19.i8), v11, v30), 5uLL);
    v34[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v23), (uint8x8_t)0x404050506060707, v26), *(uint8x8_t *)v7.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v23), (uint8x8_t)0x10102020303, v26), v11, v31), 5uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + 4 * a3);
  }
  while (v4 != 4);
}

_OWORD *sub_1C970F238(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  const char *i8;
  uint8x8_t v14;
  const char *v15;
  uint8x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *result;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  _OWORD v47[4];
  _OWORD v48[4];
  _OWORD v49[4];
  uint64_t v50;

  v4 = 0;
  v50 = *MEMORY[0x1E0C80C00];
  v49[0] = xmmword_1C9862C70;
  v49[1] = xmmword_1C9862C80;
  v49[2] = xmmword_1C9862C90;
  v49[3] = xmmword_1C9862CA0;
  v5 = a2[1];
  v6 = a2[4];
  v7 = a2[5];
  v8 = vmovl_high_u8(*a2);
  v48[0] = vmovl_u8(*(uint8x8_t *)a2->i8);
  v48[1] = v8;
  v48[2] = vmovl_u8(*(uint8x8_t *)v5.i8);
  v48[3] = vmovl_high_u8(v5);
  v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
  v10 = (int16x8_t)vmovl_high_u8(v6);
  v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
  v12 = (int16x8_t)vmovl_high_u8(v7);
  i8 = a2[6].i8;
  v14 = (uint8x8_t)vld1_dup_s8(i8);
  v15 = a2[2].i8;
  v16 = (uint8x8_t)vld1_dup_s8(v15);
  v17 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v14);
  v18 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v14);
  v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v14);
  v20 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v14);
  v47[0] = vmull_u8((uint8x8_t)0x807060504030201, v16);
  v47[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v16);
  v21 = 4 * a3;
  v22 = 7 * a3;
  v23 = 6 * a3;
  v24 = 5 * a3;
  v25 = 3 * a3 + 16;
  v26 = 2 * a3 + 16;
  v47[2] = vmull_u8((uint8x8_t)0x1817161514131211, v16);
  v47[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v16);
  v27 = a3 + 16;
  result = v47;
  do
  {
    v29 = (int16x8_t)v47[v4];
    v30 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 0);
    v31 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 1);
    v32 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 2);
    v33 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 3);
    v34 = (int16x8_t)v48[v4];
    v35 = (int16x8_t)v49[v4];
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1C9862C70, *(int16x4_t *)v34.i8, 0), v30), v9, *(int16x4_t *)v35.i8, 0), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1C9862C80, *(int16x4_t *)v34.i8, 0), v30), v10, *(int16x4_t *)v35.i8, 0), 6uLL);
    v36 = (int8x16_t *)((char *)a4 + v27);
    v36[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1C9862C70, *(int16x4_t *)v34.i8, 1), v31), v9, *(int16x4_t *)v35.i8, 1), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1C9862C80, *(int16x4_t *)v34.i8, 1), v31), v10, *(int16x4_t *)v35.i8, 1), 6uLL);
    v37 = (int8x16_t *)((char *)a4 + v26);
    v37[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1C9862C70, *(int16x4_t *)v34.i8, 2), v32), v9, *(int16x4_t *)v35.i8, 2), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1C9862C80, *(int16x4_t *)v34.i8, 2), v32), v10, *(int16x4_t *)v35.i8, 2), 6uLL);
    v38 = (int8x16_t *)((char *)a4 + v25);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1C9862C70, *(int16x4_t *)v34.i8, 3), v33), v9, *(int16x4_t *)v35.i8, 3), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1C9862C80, *(int16x4_t *)v34.i8, 3), v33), v10, *(int16x4_t *)v35.i8, 3), 6uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v19), v11, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1C9862C90, *(int16x4_t *)v34.i8, 0), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v20), v12, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1C9862CA0, *(int16x4_t *)v34.i8, 0), 6uLL);
    *v36 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v19), v11, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1C9862C90, *(int16x4_t *)v34.i8, 1), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v20), v12, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1C9862CA0, *(int16x4_t *)v34.i8, 1), 6uLL);
    *v37 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v19), v11, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1C9862C90, *(int16x4_t *)v34.i8, 2), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v20), v12, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1C9862CA0, *(int16x4_t *)v34.i8, 2), 6uLL);
    *v38 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v19), v11, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1C9862C90, *(int16x4_t *)v34.i8, 3), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v20), v12, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1C9862CA0, *(int16x4_t *)v34.i8, 3), 6uLL);
    v39 = (int8x16_t *)((char *)a4 + v21);
    v40 = vdupq_laneq_s16(v29, 4);
    v41 = vdupq_laneq_s16(v29, 5);
    v42 = vdupq_laneq_s16(v29, 6);
    v43 = vdupq_laneq_s16(v29, 7);
    *v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1C9862C70, v34, 4), v40), v9, v35, 4), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1C9862C80, v34, 4), v40), v10, v35, 4), 6uLL);
    v44 = (int8x16_t *)((char *)a4 + v24);
    *v44 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1C9862C70, v34, 5), v41), v9, v35, 5), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1C9862C80, v34, 5), v41), v10, v35, 5), 6uLL);
    v45 = (int8x16_t *)((char *)a4 + v23);
    *v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1C9862C70, v34, 6), v42), v9, v35, 6), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1C9862C80, v34, 6), v42), v10, v35, 6), 6uLL);
    v46 = (int8x16_t *)((char *)a4 + v22);
    *v46 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1C9862C70, v34, 7), v43), v9, v35, 7), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1C9862C80, v34, 7), v43), v10, v35, 7), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v19), v11, v35, 4), (int16x8_t)xmmword_1C9862C90, v34, 4), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v20), v12, v35, 4), (int16x8_t)xmmword_1C9862CA0, v34, 4), 6uLL);
    v44[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v19), v11, v35, 5), (int16x8_t)xmmword_1C9862C90, v34, 5), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v20), v12, v35, 5), (int16x8_t)xmmword_1C9862CA0, v34, 5), 6uLL);
    v45[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v19), v11, v35, 6), (int16x8_t)xmmword_1C9862C90, v34, 6), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v20), v12, v35, 6), (int16x8_t)xmmword_1C9862CA0, v34, 6), 6uLL);
    v46[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v19), v11, v35, 7), (int16x8_t)xmmword_1C9862C90, v34, 7), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v20), v12, v35, 7), (int16x8_t)xmmword_1C9862CA0, v34, 7), 6uLL);
    a4 = (int8x16_t *)((char *)v39 + v21);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

void sub_1C970F654(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  int8x16_t v6;
  unint64_t v7;
  int16x8_t v8;
  int8x8_t v9;
  uint64_t v10;
  int16x8_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a2 - 1);
  v6 = *(int8x16_t *)(a2 + 32);
  v7 = vextq_s8(v6, v6, 8uLL).u64[0];
  v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v6.i8, 0));
  v9 = (int8x8_t)vshrd_n_u64(v6.u64[0], 8uLL);
  v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*(uint8x8_t *)a2, (uint8x8_t)vdup_n_s8(v5)), 1uLL));
  v11 = vshrq_n_s16((int16x8_t)vsubl_high_u8(*(uint8x16_t *)a2, (uint8x16_t)vdupq_n_s8(v5)), 1uLL);
  v16 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  v17 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  v18 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  v19 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  v23 = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    *(int8x8_t *)&v12 = *(int8x8_t *)((char *)&v16 + v4);
    *((_QWORD *)&v12 + 1) = v7;
    *a4 = v12;
    a4 = (_OWORD *)((char *)a4 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  v13 = 0;
  v14 = (uint64_t)vqmovun_s16(vaddq_s16(v11, v8));
  v16 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x38uLL), v9, 7uLL);
  v17 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x30uLL), v9, 7uLL);
  v18 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x28uLL), v9, 7uLL);
  v19 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x20uLL), v9, 7uLL);
  v20 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x18uLL), v9, 7uLL);
  v21 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x10uLL), v9, 7uLL);
  v22 = vext_s8((int8x8_t)vshld_n_s64(v14, 8uLL), v9, 7uLL);
  v23 = vext_s8((int8x8_t)v14, v9, 7uLL);
  do
  {
    *(int8x8_t *)&v15 = *(int8x8_t *)((char *)&v16 + v13);
    *((_QWORD *)&v15 + 1) = v7;
    *a4 = v15;
    a4 = (_OWORD *)((char *)a4 + a3);
    v13 += 8;
  }
  while (v13 != 64);
}

int16x8_t sub_1C970F7BC(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x8_t *a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t result;
  int16x8_t *v11;
  int16x8_t *v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;

  v4 = vdupq_lane_s16(*a2, 1);
  v5 = vdupq_lane_s16(*a2, 2);
  v6 = vdupq_lane_s16(*a2, 3);
  v7 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 4);
  v8 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 5);
  v9 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 6);
  result = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 7);
  *a4 = vdupq_lane_s16(*a2, 0);
  *(int16x8_t *)((char *)a4 + a3) = v4;
  v11 = (int16x8_t *)((char *)a4 + a3 + a3);
  *v11 = v5;
  v12 = (int16x8_t *)((char *)v11 + a3);
  *v12 = v6;
  v13 = (int16x8_t *)((char *)v12 + a3);
  *v13 = v7;
  v14 = (int16x8_t *)((char *)v13 + a3);
  *v14 = v8;
  v15 = (int16x8_t *)((char *)v14 + a3);
  *v15 = v9;
  *(int16x8_t *)((char *)v15 + a3) = result;
  return result;
}

uint8x16_t *sub_1C970F81C(uint8x16_t *result, uint64_t a2, int16x4_t *a3, int a4, int a5)
{
  _OWORD *v6;
  uint8x16_t *v8;
  int16x8_t v9;
  int16x8_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  unsigned int v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint8x16_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint8x16_t *v22;
  unsigned int v23;
  int16x8_t *v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;

  v6 = a3;
  v8 = result;
  if (a5 == 1)
  {
    v9 = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    v10 = vnegq_s16(v9);
    v11 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v9), v9);
    v12 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v10), v10);
    v13 = -2;
    do
    {
      v14 = (uint8x16_t *)((char *)v8 + a2);
      v15 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v8 + a2), v11), v12);
      v16 = vqsubq_u8(vqaddq_u8(v8[1], v11), v12);
      v17 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)&v8[1] + a2), v11), v12);
      *v8 = vqsubq_u8(vqaddq_u8(*v8, v11), v12);
      *v14 = v15;
      v8[1] = v16;
      v14[1] = v17;
      v8 = (uint8x16_t *)((char *)v8 + 2 * a2);
      v13 += 2;
    }
    while (v13 < 0x1E);
    if (a4)
    {
      v18 = -16;
      do
      {
        *v6 = v9;
        v6[1] = v9;
        v6 += 2;
        v18 += 16;
      }
      while (v18 < 0x3F0);
    }
  }
  else
  {
    result = (uint8x16_t *)sub_1C97023B8(a3, a5);
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = v20;
      v22 = &v8[(unint64_t)v19 / 2];
      v23 = -4;
      v24 = (int16x8_t *)&v6[v19];
      do
      {
        v25 = v24[1];
        v26 = v24[4];
        v27 = v24[5];
        v28 = v24[8];
        v29 = v24[9];
        v30 = (int32x4_t)vtrn1q_s16(*v24, v26);
        v31 = (int32x4_t)vtrn2q_s16(*v24, v26);
        v32 = v24[12];
        v33 = v24[13];
        v34 = (int32x4_t)vtrn1q_s16(v28, v32);
        v35 = (int32x4_t)vtrn2q_s16(v28, v32);
        v36 = (int16x8_t)vtrn1q_s32(v30, v34);
        v37 = (int16x8_t)vtrn2q_s32(v30, v34);
        v38 = (int16x8_t)vtrn1q_s32(v31, v35);
        v39 = (int16x8_t)vtrn2q_s32(v31, v35);
        v40 = (int32x4_t)vtrn1q_s16(v25, v27);
        v41 = (int32x4_t)vtrn2q_s16(v25, v27);
        v42 = (int32x4_t)vtrn1q_s16(v29, v33);
        v43 = (int32x4_t)vtrn2q_s16(v29, v33);
        v44 = (int16x8_t)vtrn1q_s32(v40, v42);
        v45 = (int16x8_t)vtrn2q_s32(v40, v42);
        v46 = (int16x8_t)vtrn1q_s32(v41, v43);
        v47 = (int16x8_t)vtrn2q_s32(v41, v43);
        if (a4)
        {
          v48 = v36;
          v49 = v44;
          v50 = v38;
          v51 = v46;
          v52 = v37;
          v53 = v45;
          v54 = v39;
          v55 = v47;
        }
        else
        {
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          v53 = 0uLL;
          v54 = 0uLL;
          v55 = 0uLL;
        }
        v56 = *(uint8x16_t *)((char *)v22 + a2);
        v57 = *v22;
        v58 = *(uint8x16_t *)((char *)v22 + 2 * a2);
        v59 = *(uint8x16_t *)((char *)v22 + 3 * a2);
        *v24 = v48;
        v24[1] = v49;
        v24[4] = v50;
        v24[5] = v51;
        v24[8] = v52;
        v24[9] = v53;
        v24[12] = v54;
        v24[13] = v55;
        *(int8x16_t *)v22 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v36, (int16x8_t)vmovl_u8(*(uint8x8_t *)v57.i8))), vqaddq_s16(v44, (int16x8_t)vmovl_high_u8(v57)));
        *(int8x16_t *)((char *)v22 + a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v38, (int16x8_t)vmovl_u8(*(uint8x8_t *)v56.i8))), vqaddq_s16(v46, (int16x8_t)vmovl_high_u8(v56)));
        *(int8x16_t *)((char *)v22 + 2 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v37, (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8))), vqaddq_s16(v45, (int16x8_t)vmovl_high_u8(v58)));
        *(int8x16_t *)((char *)v22 + 3 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v39, (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8))), vqaddq_s16(v47, (int16x8_t)vmovl_high_u8(v59)));
        v22 = (uint8x16_t *)((char *)v22 + 4 * a2);
        v23 += 4;
        v24 += 16;
      }
      while (v23 < 0x1C);
      v20 = 0;
      v19 = 2;
    }
    while ((v21 & 1) != 0);
  }
  return result;
}

int16x4_t *sub_1C970FA64(int16x4_t *result)
{
  int16x8_t *v1;
  unint64_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  unint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int32x4_t *v39;
  int32x4_t v40;
  int16x8_t v41;
  int32x4_t v42;
  uint64_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  const __int16 *v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int v65;
  _OWORD v66[16];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v1 = (int16x8_t *)&result[16];
  v2 = -8;
  do
  {
    v3 = v1[-8];
    v4 = v1[-4];
    v5 = v1[4];
    v6 = (int32x4_t)vtrn1q_s16(v3, v4);
    v7 = (int32x4_t)vtrn2q_s16(v3, v4);
    v8 = (int32x4_t)vtrn1q_s16(*v1, v5);
    v9 = (int32x4_t)vtrn2q_s16(*v1, v5);
    v1[-8] = (int16x8_t)vtrn1q_s32(v6, v8);
    v1[-4] = (int16x8_t)vtrn1q_s32(v7, v9);
    *(int32x4_t *)v1 = vtrn2q_s32(v6, v8);
    v1[4] = (int16x8_t)vtrn2q_s32(v7, v9);
    v2 += 8;
    ++v1;
  }
  while (v2 < 0x18);
  v10 = 0;
  v11 = result[1];
  v12 = result[2];
  v13 = result[3];
  v15 = result[4];
  v14 = result[5];
  v16 = result[6];
  v17 = result[7];
  v18 = vshll_n_s16(*result, 6uLL);
  v19 = vmlal_s16(v18, v15, (int16x4_t)0x40004000400040);
  v20 = vmlsl_s16(v18, v15, (int16x4_t)0x40004000400040);
  v21 = vmlal_s16(vmull_s16(v16, (int16x4_t)0x24002400240024), v12, (int16x4_t)0x53005300530053);
  v22 = vmlal_s16(vmull_s16(v16, (int16x4_t)0x52005200520052), v12, (int16x4_t)0x24002400240024);
  v23 = vaddq_s32(v21, v19);
  v24 = vsubq_s32(v19, v21);
  v25 = vaddq_s32(v22, v20);
  v26 = vsubq_s32(v20, v22);
  v27 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x4B004B004B004BLL), v11, (int16x4_t)0x59005900590059), v14, (int16x4_t)0x32003200320032), v17, (int16x4_t)0x12001200120012);
  v28 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x31003100310031), v11, (int16x4_t)0x12001200120012), v14, (int16x4_t)0x4B004B004B004BLL), v17, (int16x4_t)0x58005800580058);
  v29 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x11001100110011), v11, (int16x4_t)0x4B004B004B004BLL), v14, (int16x4_t)0x58005800580058), v17, (int16x4_t)0x31003100310031);
  v66[0] = vaddq_s32(v27, v23);
  v66[1] = vaddq_s32(v28, v24);
  v30 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x58005800580058), v11, (int16x4_t)0x32003200320032), v14, (int16x4_t)0x12001200120012), v17, (int16x4_t)0x4B004B004B004BLL);
  v66[2] = vaddq_s32(v29, v25);
  v66[3] = vaddq_s32(v30, v26);
  v66[4] = vsubq_s32(v23, v27);
  v66[5] = vsubq_s32(v24, v28);
  v66[6] = vsubq_s32(v25, v29);
  v66[7] = vsubq_s32(v26, v30);
  v31 = result[16];
  v32 = result[17];
  v33 = result[18];
  v34 = result[19];
  v35 = result[20];
  v36 = result[21];
  v37 = result[22];
  v38 = result[23];
  do
  {
    v39 = (int32x4_t *)&v66[v10 / 8];
    v40 = (int32x4_t)v66[v10 / 8];
    v41 = *(int16x8_t *)&aZwpf9[v10];
    v42 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v32, *(int16x4_t *)v41.i8, 1), v31, *(int16x4_t *)v41.i8, 0), v33, *(int16x4_t *)v41.i8, 2), v34, *(int16x4_t *)v41.i8, 3), v35, v41, 4), v36, v41, 5), v37,
              v41,
              6),
            v38,
            v41,
            7);
    *v39 = vaddq_s32(v42, v40);
    v39[8] = vsubq_s32(v40, v42);
    v10 += 8;
  }
  while (v10 != 64);
  v43 = 0;
  v44 = result[8];
  v45 = result[9];
  v46 = result[24];
  v47 = result[25];
  v48 = result[10];
  v49 = result[11];
  v50 = result[26];
  v51 = result[27];
  v52 = result[12];
  v53 = result[13];
  v54 = result[28];
  v55 = result[29];
  v56 = aZzxurnic6;
  v57 = result[14];
  v58 = result[15];
  v59 = result[30];
  v60 = result[31];
  do
  {
    v61 = *(int16x8_t *)v56;
    v62 = *((int16x8_t *)v56 + 1);
    v56 += 16;
    v63 = (int32x4_t)v66[byte_1C98617E0[v43]];
    v64 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v46, *(int16x4_t *)v61.i8, 1), v44, *(int16x4_t *)v61.i8, 0), v45,
                                      *(int16x4_t *)v61.i8,
                                      2),
                                    v47,
                                    *(int16x4_t *)v61.i8,
                                    3),
                                  v48,
                                  v61,
                                  4),
                                v50,
                                v61,
                                5),
                              v49,
                              v61,
                              6),
                            v51,
                            v61,
                            7),
                          v52,
                          *(int16x4_t *)v62.i8,
                          0),
                        v54,
                        *(int16x4_t *)v62.i8,
                        1),
                      v53,
                      *(int16x4_t *)v62.i8,
                      2),
                    v55,
                    *(int16x4_t *)v62.i8,
                    3),
                  v57,
                  v62,
                  4),
                v59,
                v62,
                5),
              v58,
              v62,
              6),
            v60,
            v62,
            7);
    v65 = 124 - 4 * *((unsigned __int8 *)&unk_1C9861500 + v43 + 80);
    result[*((unsigned __int8 *)&unk_1C9861500 + v43 + 80)] = vqrshrn_n_s32(vaddq_s32(v64, v63), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * v65) = vqrshrn_n_s32(vsubq_s32(v63, v64), 0xCuLL);
    ++v43;
  }
  while (v43 != 16);
  return result;
}

int16x4_t *sub_1C970FD18(int16x4_t *result)
{
  unint64_t v1;
  int16x4_t v2;
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int32x4_t *v30;
  int32x4_t v31;
  int16x8_t v32;
  int32x4_t v33;
  uint64_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  const __int16 *v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int v56;
  _OWORD v57[16];
  uint64_t v58;

  v1 = 0;
  v58 = *MEMORY[0x1E0C80C00];
  v2 = result[32];
  v3 = result[64];
  v4 = result[96];
  v5 = result[128];
  v6 = result[160];
  v7 = result[192];
  v8 = result[224];
  v9 = vshll_n_s16(*result, 6uLL);
  v10 = vmlal_s16(v9, v5, (int16x4_t)0x40004000400040);
  v11 = vmlsl_s16(v9, v5, (int16x4_t)0x40004000400040);
  v12 = vmlal_s16(vmull_s16(v7, (int16x4_t)0x24002400240024), v3, (int16x4_t)0x53005300530053);
  v13 = vmlal_s16(vmull_s16(v7, (int16x4_t)0x52005200520052), v3, (int16x4_t)0x24002400240024);
  v14 = vaddq_s32(v12, v10);
  v15 = vsubq_s32(v10, v12);
  v16 = vaddq_s32(v13, v11);
  v17 = vsubq_s32(v11, v13);
  v18 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x4B004B004B004BLL), v2, (int16x4_t)0x59005900590059), v6, (int16x4_t)0x32003200320032), v8, (int16x4_t)0x12001200120012);
  v19 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x31003100310031), v2, (int16x4_t)0x12001200120012), v6, (int16x4_t)0x4B004B004B004BLL), v8, (int16x4_t)0x58005800580058);
  v20 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x11001100110011), v2, (int16x4_t)0x4B004B004B004BLL), v6, (int16x4_t)0x58005800580058), v8, (int16x4_t)0x31003100310031);
  v57[0] = vaddq_s32(v18, v14);
  v57[1] = vaddq_s32(v19, v15);
  v21 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x58005800580058), v2, (int16x4_t)0x32003200320032), v6, (int16x4_t)0x12001200120012), v8, (int16x4_t)0x4B004B004B004BLL);
  v57[2] = vaddq_s32(v20, v16);
  v57[3] = vaddq_s32(v21, v17);
  v57[4] = vsubq_s32(v14, v18);
  v57[5] = vsubq_s32(v15, v19);
  v57[6] = vsubq_s32(v16, v20);
  v57[7] = vsubq_s32(v17, v21);
  v22 = result[16];
  v23 = result[48];
  v24 = result[80];
  v25 = result[112];
  v26 = result[144];
  v27 = result[176];
  v28 = result[208];
  v29 = result[240];
  do
  {
    v30 = (int32x4_t *)&v57[v1 / 8];
    v31 = (int32x4_t)v57[v1 / 8];
    v32 = *(int16x8_t *)&aZwpf9[v1];
    v33 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v23, *(int16x4_t *)v32.i8, 1), v22, *(int16x4_t *)v32.i8, 0), v24, *(int16x4_t *)v32.i8, 2), v25, *(int16x4_t *)v32.i8, 3), v26, v32, 4), v27, v32, 5), v28,
              v32,
              6),
            v29,
            v32,
            7);
    *v30 = vaddq_s32(v33, v31);
    v30[8] = vsubq_s32(v31, v33);
    v1 += 8;
  }
  while (v1 != 64);
  v34 = 0;
  v35 = result[8];
  v36 = result[24];
  v37 = result[40];
  v38 = result[56];
  v39 = result[72];
  v40 = result[88];
  v41 = result[104];
  v42 = result[120];
  v43 = result[136];
  v44 = result[152];
  v45 = result[168];
  v46 = result[184];
  v47 = aZzxurnic6;
  v48 = result[200];
  v49 = result[216];
  v50 = result[232];
  v51 = result[248];
  do
  {
    v52 = *(int16x8_t *)v47;
    v53 = *((int16x8_t *)v47 + 1);
    v47 += 16;
    v54 = (int32x4_t)v57[byte_1C98617E0[v34]];
    v55 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v36, *(int16x4_t *)v52.i8, 1), v35, *(int16x4_t *)v52.i8, 0), v37,
                                      *(int16x4_t *)v52.i8,
                                      2),
                                    v38,
                                    *(int16x4_t *)v52.i8,
                                    3),
                                  v39,
                                  v52,
                                  4),
                                v40,
                                v52,
                                5),
                              v41,
                              v52,
                              6),
                            v42,
                            v52,
                            7),
                          v43,
                          *(int16x4_t *)v53.i8,
                          0),
                        v44,
                        *(int16x4_t *)v53.i8,
                        1),
                      v45,
                      *(int16x4_t *)v53.i8,
                      2),
                    v46,
                    *(int16x4_t *)v53.i8,
                    3),
                  v48,
                  v53,
                  4),
                v49,
                v53,
                5),
              v50,
              v53,
              6),
            v51,
            v53,
            7);
    v56 = 992 - 4 * *((unsigned __int8 *)&unk_1C9861500 + v34 + 64);
    result[*((unsigned __int8 *)&unk_1C9861500 + v34 + 64)] = vqrshrn_n_s32(vaddq_s32(v55, v54), 7uLL);
    *(int16x4_t *)((char *)result + 2 * v56) = vqrshrn_n_s32(vsubq_s32(v54, v55), 7uLL);
    ++v34;
  }
  while (v34 != 16);
  return result;
}

int8x16_t sub_1C970FFB4(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4;
  int16x8_t v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t result;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;

  v4 = *(int8x16_t *)a2;
  v5 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0));
  *a4 = vqmovun_high_s16(vqmovun_s16(vsraq_n_s16(v5, (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 32), (uint8x8_t)vdup_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL)), vsraq_n_s16(v5, (int16x8_t)vsubl_high_u8(*(uint8x16_t *)(a2 + 32), (uint8x16_t)vdupq_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL));
  *(int8x16_t *)((char *)a4 + a3) = vdupq_lane_s8(*(int8x8_t *)v4.i8, 1);
  v6 = (int8x16_t *)((char *)a4 + a3 + a3);
  *v6 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 2);
  v7 = (int8x16_t *)((char *)v6 + a3);
  *v7 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 3);
  v8 = (int8x16_t *)((char *)v7 + a3);
  *v8 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 4);
  v9 = (int8x16_t *)((char *)v8 + a3);
  *v9 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 5);
  v10 = (int8x16_t *)((char *)v9 + a3);
  *v10 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 6);
  v11 = (int8x16_t *)((char *)v10 + a3);
  *v11 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 7);
  result = vdupq_laneq_s8(v4, 8);
  v13 = (int8x16_t *)((char *)v11 + a3);
  *v13 = result;
  v14 = (int8x16_t *)((char *)v13 + a3);
  *v14 = vdupq_laneq_s8(v4, 9);
  v15 = (int8x16_t *)((char *)v14 + a3);
  *v15 = vdupq_laneq_s8(v4, 10);
  v16 = (int8x16_t *)((char *)v15 + a3);
  *v16 = vdupq_laneq_s8(v4, 11);
  v17 = (int8x16_t *)((char *)v16 + a3);
  *v17 = vdupq_laneq_s8(v4, 12);
  v18 = (int8x16_t *)((char *)v17 + a3);
  *v18 = vdupq_laneq_s8(v4, 13);
  v19 = (int8x16_t *)((char *)v18 + a3);
  *v19 = vdupq_laneq_s8(v4, 14);
  *(int8x16_t *)((char *)v19 + a3) = vdupq_laneq_s8(v4, 15);
  return result;
}

char *sub_1C97100A4(char *result, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  const char *v13;
  char *v15;
  char *v21;
  int8x16x2_t v23;
  int8x16x2_t v24;
  int8x16x2_t v25;
  int8x16x2_t v26;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  do
  {
    v13 = result;
    v23 = vld2q_s8(v13);
    _X10 = (char *)&v13[a2];
    v15 = result + 32;
    v24 = vld2q_s8(v15);
    __asm { PRFM            #0, [X0,#0x40] }
    v21 = _X10;
    v25 = vld2q_s8(v21);
    v21 += 32;
    v26 = vld2q_s8(v21);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5 = v24.val[0].i8[15];
    a5[1] = v24.val[1].i8[15];
    a5[2] = v26.val[0].i8[15];
    a5[3] = v26.val[1].i8[15];
    v23.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[0], 3uLL)));
    v23.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[1], 3uLL)));
    v24.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v24.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v24.val[0], 3uLL)));
    v24.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v24.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v24.val[1], 3uLL)));
    v25.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v25.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v25.val[0], 3uLL)));
    v25.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v25.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v25.val[1], 3uLL)));
    vst2q_s8(result, v23);
    v11 = 2 * a2;
    result += v11;
    vst2q_s8(v15, v24);
    v26.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v26.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v26.val[0], 3uLL)));
    vst2q_s8(_X10, v25);
    v26.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v26.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v26.val[1], 3uLL)));
    vst2q_s8(v21, v26);
    v12 -= 2;
    a5 += 4;
  }
  while (v12 > 2);
  return result;
}

int16x8_t sub_1C9710178(uint8x8_t *a1, uint64_t a2, int16x4_t *a3, const __int16 *a4, int16x4_t *a5, int *a6)
{
  int16x4_t *v7;
  int16x4_t *v8;
  uint8x8_t *v10;
  int v11;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t result;
  uint8x8_t *v16;
  uint64_t v17;
  int32x4_t v18;
  int16x4_t *v19;
  int16x8_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unsigned int v39;
  int16x4_t *v40;
  uint64_t v41;
  char v42;
  char v43;
  int16x8_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  BOOL v52;
  int v53;
  unsigned int v54;
  int16x4_t *v55;
  uint64_t v56;
  char v57;
  char v58;
  int16x8_t *v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  unsigned int v67;
  int32x4_t v68;
  uint64_t v69;
  char v70;
  char v71;
  int16x8_t *v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t *v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x4_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int16x8_t *v107;
  int16x8_t v108;
  int16x8_t *v109;
  int16x8_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  uint8x8_t *v125;
  uint8x16_t v126;
  int16x8_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int16x8_t v131;
  uint8x16_t v132;
  uint8x16_t v133;
  uint8x16_t *v134;
  int v135;
  uint8x16_t v136;

  v7 = (int16x4_t *)a4;
  v8 = a3;
  v10 = a1;
  v11 = *a6;
  if ((*a6 & 0xFFFEFFFE) != 0)
  {
    if ((__int16)v11 < 1)
    {
      if ((v11 & 0x8000) != 0)
      {
        v39 = 0;
        v40 = a3;
        do
        {
          v41 = 0;
          v42 = 1;
          do
          {
            v43 = v42;
            v44 = (int16x8_t *)&v40[v41];
            v45 = v44[2];
            v46 = v44[4];
            v47 = v44[6];
            v48 = (int32x4_t)vtrn1q_s16(*v44, v45);
            v49 = (int32x4_t)vtrn2q_s16(*v44, v45);
            v50 = (int32x4_t)vtrn1q_s16(v46, v47);
            v51 = (int32x4_t)vtrn2q_s16(v46, v47);
            *(int32x4_t *)v44 = vtrn1q_s32(v48, v50);
            v44[2] = (int16x8_t)vtrn1q_s32(v49, v51);
            v44[4] = (int16x8_t)vtrn2q_s32(v48, v50);
            v44[6] = (int16x8_t)vtrn2q_s32(v49, v51);
            v41 = 2;
            v42 = 0;
          }
          while ((v43 & 1) != 0);
          v40 += 16;
          v52 = v39 >= 0xC;
          v39 += 4;
        }
        while (!v52);
      }
    }
    else
    {
      sub_1C970B38C(a3, (unsigned __int16)*a6);
    }
    v53 = *((unsigned __int16 *)a6 + 1);
    if (*((__int16 *)a6 + 1) < 1)
    {
      if ((v53 & 0x8000) != 0)
      {
        v54 = 0;
        v55 = v7;
        do
        {
          v56 = 0;
          v57 = 1;
          do
          {
            v58 = v57;
            v59 = (int16x8_t *)&v55[v56];
            v60 = v59[2];
            v61 = v59[4];
            v62 = v59[6];
            v63 = (int32x4_t)vtrn1q_s16(*v59, v60);
            v64 = (int32x4_t)vtrn2q_s16(*v59, v60);
            v65 = (int32x4_t)vtrn1q_s16(v61, v62);
            v66 = (int32x4_t)vtrn2q_s16(v61, v62);
            *(int32x4_t *)v59 = vtrn1q_s32(v63, v65);
            v59[2] = (int16x8_t)vtrn1q_s32(v64, v66);
            v59[4] = (int16x8_t)vtrn2q_s32(v63, v65);
            v59[6] = (int16x8_t)vtrn2q_s32(v64, v66);
            v56 = 2;
            v57 = 0;
          }
          while ((v58 & 1) != 0);
          v55 += 16;
          v52 = v54 >= 0xC;
          v54 += 4;
        }
        while (!v52);
      }
    }
    else
    {
      sub_1C970B38C(v7, v53);
    }
    v67 = 0;
    result = 0uLL;
    v68.i64[0] = 0x800000008;
    v68.i64[1] = 0x800000008;
    do
    {
      v69 = 0;
      v70 = 1;
      do
      {
        v71 = v70;
        v72 = (int16x8_t *)&v8[v69];
        v73 = v72[2];
        v74 = v72[4];
        v75 = v72[6];
        v76 = (int16x8_t *)&v7[v69];
        v77 = *v76;
        v78 = v76[2];
        v79 = v76[4];
        v80 = (int32x4_t)vtrn1q_s16(*v72, v73);
        v81 = (int32x4_t)vtrn2q_s16(*v72, v73);
        v82 = (int32x4_t)vtrn1q_s16(v74, v75);
        v83 = (int32x4_t)vtrn2q_s16(v74, v75);
        v84 = v76[6];
        *v72 = 0uLL;
        v72[2] = 0uLL;
        v72[4] = 0uLL;
        v72[6] = 0uLL;
        *v76 = 0uLL;
        v76[2] = 0uLL;
        v76[4] = 0uLL;
        v76[6] = 0uLL;
        v85 = (int16x8_t)vtrn1q_s32(v80, v82);
        v86 = (int16x8_t)vtrn2q_s32(v80, v82);
        v87 = (int16x8_t)vtrn1q_s32(v81, v83);
        v88 = (int16x8_t)vtrn2q_s32(v81, v83);
        v89 = (int32x4_t)vtrn1q_s16(v77, v78);
        v90 = (int32x4_t)vtrn2q_s16(v77, v78);
        v91 = (int32x4_t)vtrn1q_s16(v79, v84);
        v92 = (int32x4_t)vtrn2q_s16(v79, v84);
        v93 = (int16x8_t)vtrn1q_s32(v89, v91);
        v94 = (int16x8_t)vtrn2q_s32(v89, v91);
        v95 = (int16x8_t)vtrn1q_s32(v90, v92);
        v96 = (int16x8_t)vtrn2q_s32(v90, v92);
        if (a5)
        {
          v97 = *a5;
          v98 = v72[-32];
          v99 = v72[-30];
          v72[-32] = 0uLL;
          v72[-30] = 0uLL;
          v100 = vdupq_laneq_s32(vsubw_s16(v68, v97), 2);
          v101 = vshlq_s32(vmovl_s16(*(int16x4_t *)v98.i8), v100);
          v102 = vshlq_s32(vmovl_high_s16(v98), v100);
          v103 = vshlq_s32(vmovl_s16(*(int16x4_t *)v99.i8), v100);
          v104 = vshlq_s32(vmovl_high_s16(v99), v100);
          v105 = vmovl_s16(vdup_lane_s16(v97, 0));
          v106 = vmovl_s16(vdup_lane_s16(v97, 1));
          v85 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v101, v105), 3uLL), vmulq_s32(v102, v105), 3uLL), v85);
          v93 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v101, v106), 3uLL), vmulq_s32(v102, v106), 3uLL), v93);
          v87 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v103, v105), 3uLL), vmulq_s32(v104, v105), 3uLL), v87);
          v95 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v103, v106), 3uLL), vmulq_s32(v104, v106), 3uLL), v95);
          v107 = v72 - 28;
          *(int16x4_t *)v106.i8 = *a5;
          v108 = v72[-28];
          v109 = v72 - 26;
          v110 = *v109;
          *v107 = 0uLL;
          *v109 = 0uLL;
          v111 = vdupq_laneq_s32(vsubw_s16(v68, *(int16x4_t *)v106.i8), 2);
          v112 = vshlq_s32(vmovl_s16(*(int16x4_t *)v108.i8), v111);
          v113 = vshlq_s32(vmovl_high_s16(v108), v111);
          v114 = vshlq_s32(vmovl_s16(*(int16x4_t *)v110.i8), v111);
          v115 = vshlq_s32(vmovl_high_s16(v110), v111);
          v116 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v106.i8, 0));
          v117 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v106.i8, 1));
          v86 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v112, v116), 3uLL), vmulq_s32(v113, v116), 3uLL), v86);
          v94 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v112, v117), 3uLL), vmulq_s32(v113, v117), 3uLL), v94);
          v88 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v114, v116), 3uLL), vmulq_s32(v115, v116), 3uLL), v88);
          v96 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v114, v117), 3uLL), vmulq_s32(v115, v117), 3uLL), v96);
        }
        v70 = 0;
        v118 = vzip1q_s16(v85, v93);
        v119 = vzip2q_s16(v85, v93);
        v120 = vzip1q_s16(v87, v95);
        v121 = vzip2q_s16(v87, v95);
        v122 = vzip1q_s16(v86, v94);
        v123 = vzip2q_s16(v86, v94);
        v124 = vzip1q_s16(v88, v96);
        v125 = &v10[v69];
        v126 = *(uint8x16_t *)&v125->i8[3 * a2];
        v127 = vqaddq_s16(vzip2q_s16(v88, v96), (int16x8_t)vmovl_high_u8(v126));
        v128 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v118, (int16x8_t)vmovl_u8(*v125))), vqaddq_s16(v119, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v125->i8)));
        v129 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v120, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v125 + a2)))), vqaddq_s16(v121, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v125->i8[a2])));
        v130 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v122, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v125 + 2 * a2)))), vqaddq_s16(v123, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v125->i8[2 * a2])));
        *(int8x16_t *)v125->i8 = v128;
        *(int8x16_t *)&v125->i8[a2] = v129;
        *(int8x16_t *)&v125->i8[2 * a2] = v130;
        *(int8x16_t *)&v125->i8[3 * a2] = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v124, (int16x8_t)vmovl_u8(*(uint8x8_t *)v126.i8))), v127);
        v69 = 2;
      }
      while ((v71 & 1) != 0);
      v10 = (uint8x8_t *)((char *)v10 + 4 * a2);
      v8 += 16;
      v7 += 16;
      v52 = v67 >= 0xC;
      v67 += 4;
    }
    while (!v52);
  }
  else
  {
    v13 = vld1q_dup_s16((const __int16 *)a3);
    v14 = vld1q_dup_s16(a4);
    result = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v13, v14), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    if (a5)
    {
      v16 = a1 + 2;
      v17 = 0x1FFFFFFFFFFFFFC0;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      do
      {
        v19 = &a3[v17];
        v20 = *(int16x8_t *)a3[v17].i8;
        v21 = *(int16x8_t *)a3[v17 + 2].i8;
        v22 = vdupq_laneq_s32(vsubw_s16(v18, *a5), 2);
        v23 = vshlq_s32(vmovl_s16(*(int16x4_t *)v20.i8), v22);
        v24 = vshlq_s32(vmovl_high_s16(v20), v22);
        v25 = vshlq_s32(vmovl_s16(*(int16x4_t *)v21.i8), v22);
        v26 = vshlq_s32(vmovl_high_s16(v21), v22);
        v27 = vmovl_s16(vdup_lane_s16(*a5, 0));
        v28 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v23, v27), 3uLL), vmulq_s32(v24, v27), 3uLL);
        v29 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v25, v27), 3uLL), vmulq_s32(v26, v27), 3uLL);
        v30 = vmovl_s16(vdup_lane_s16(*a5, 1));
        v31 = vmulq_s32(v23, v30);
        v32 = vmulq_s32(v24, v30);
        v33 = vmulq_s32(v25, v30);
        v34 = vmulq_s32(v26, v30);
        v35 = vshrn_high_n_s32(vshrn_n_s32(v31, 3uLL), v32, 3uLL);
        v36 = vshrn_high_n_s32(vshrn_n_s32(v33, 3uLL), v34, 3uLL);
        *(_OWORD *)v19->i8 = 0uLL;
        *(_OWORD *)v19[2].i8 = 0uLL;
        v37 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(v16[-2]), vaddq_s16(vzip1q_s16(v28, v35), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)v16[-2].i8), vaddq_s16(vzip2q_s16(v28, v35), result)));
        v38 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*v16), vaddq_s16(vzip1q_s16(v29, v36), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)v16->i8), vaddq_s16(vzip2q_s16(v29, v36), result)));
        *(int8x16_t *)v16[-2].i8 = v37;
        *(int8x16_t *)v16->i8 = v38;
        v16 = (uint8x8_t *)((char *)v16 + a2);
        v17 += 4;
      }
      while ((_DWORD)(v17 * 8));
    }
    else
    {
      v131 = vnegq_s16(result);
      v132 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(result), result);
      v133 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v131), v131);
      v134 = (uint8x16_t *)&a1[2];
      v135 = 16;
      do
      {
        result = (int16x8_t)vqsubq_u8(vqaddq_u8(v134[-1], v132), v133);
        v136 = vqsubq_u8(vqaddq_u8(*v134, v132), v133);
        v134[-1] = (uint8x16_t)result;
        *v134 = v136;
        v134 = (uint8x16_t *)((char *)v134 + a2);
        --v135;
      }
      while (v135);
    }
  }
  return result;
}

void sub_1C971071C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  double v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL4 v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  unsigned int v79;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_DWORD *)(a1 + 52);
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2120);
  v5 = v3 / v4;
  v6 = v3 / v4 * v4;
  v7 = v3 % v4;
  if (*(_BYTE *)(a1 + 58))
  {
    if (*(_BYTE *)(a1 + 58) == 1)
      v8 = *(_BYTE *)(a1 + 553) == 0;
    else
      v8 = 2;
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 553);
  }
  if (sub_1C9710ED4(*(_QWORD *)(a1 + 32) + 1648, v3 % v4, v5, a1 + 2304))
    return;
  *(_DWORD *)(a1 + 2328) = 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 1576) + 34) != 255)
  {
    sub_1C9750790(a1, v9);
    if (v10)
      return;
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v11 + 20))
  {
    v12 = *(unsigned __int16 *)(v11 + 22) + 1 + (*(unsigned __int16 *)(v11 + 22) + 1) * *(unsigned __int16 *)(v11 + 24);
  }
  else if (*(_BYTE *)(v11 + 21))
  {
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2124);
  }
  else
  {
    v12 = 1;
  }
  sub_1C9710DCC((char **)(a1 + 1184), v12);
  if (v12 >= 1)
  {
    v13 = *(_DWORD **)(a1 + 1184);
    v14 = v12;
    do
    {
      *v13++ = *(char *)(a1 + 653);
      --v14;
    }
    while (v14);
  }
  v15 = *(int *)(a1 + 568);
  v16 = v15 + 1;
  v17 = *(char **)(a1 + 2360);
  v18 = *(_BYTE **)(a1 + 2352);
  v19 = 0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 5);
  v20 = v15 + 1 - v19;
  if (v15 + 1 > v19)
  {
    v21 = *(_QWORD *)(a1 + 2368);
    if (0x6DB6DB6DB6DB6DB7 * ((v21 - (uint64_t)v17) >> 5) < v20)
    {
      if ((int)v15 <= -2)
        sub_1C9747024();
      v79 = v8;
      v22 = 0x6DB6DB6DB6DB6DB7 * ((v21 - (uint64_t)v18) >> 5);
      v23 = 0xDB6DB6DB6DB6DB6ELL * ((v21 - (uint64_t)v18) >> 5);
      if (v23 > v16)
        v16 = v23;
      if (v22 >= 0x92492492492492)
        v16 = 0x124924924924924;
      if (v16 > 0x124924924924924)
        sub_1C9724B4C();
      v24 = 224 * v16;
      v25 = (char *)operator new(224 * v16);
      v26 = &v25[32 * ((v17 - v18) >> 5)];
      v78 = &v25[v24];
      bzero(v26, 224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224);
      v27 = &v26[224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224];
      if (v17 == v18)
      {
        v8 = v79;
      }
      else
      {
        v8 = v79;
        do
        {
          v28 = *((_OWORD *)v17 - 13);
          *((_OWORD *)v26 - 14) = *((_OWORD *)v17 - 14);
          *((_OWORD *)v26 - 13) = v28;
          v29 = *((_OWORD *)v17 - 12);
          v30 = *((_OWORD *)v17 - 11);
          v31 = *((_OWORD *)v17 - 9);
          *((_OWORD *)v26 - 10) = *((_OWORD *)v17 - 10);
          *((_OWORD *)v26 - 9) = v31;
          *((_OWORD *)v26 - 12) = v29;
          *((_OWORD *)v26 - 11) = v30;
          v32 = *((_OWORD *)v17 - 8);
          v33 = *((_OWORD *)v17 - 7);
          v34 = *((_OWORD *)v17 - 5);
          *((_OWORD *)v26 - 6) = *((_OWORD *)v17 - 6);
          *((_OWORD *)v26 - 5) = v34;
          *((_OWORD *)v26 - 8) = v32;
          *((_OWORD *)v26 - 7) = v33;
          v35 = *((_OWORD *)v17 - 4);
          v36 = *((_OWORD *)v17 - 3);
          v37 = *((_OWORD *)v17 - 2);
          *(_OWORD *)(v26 - 23) = *(_OWORD *)(v17 - 23);
          *((_OWORD *)v26 - 3) = v36;
          *((_OWORD *)v26 - 2) = v37;
          *((_OWORD *)v26 - 4) = v35;
          v26 -= 224;
          v17 -= 224;
        }
        while (v17 != v18);
        v17 = *(char **)(a1 + 2352);
      }
      *(_QWORD *)(a1 + 2352) = v26;
      *(_QWORD *)(a1 + 2360) = v27;
      *(_QWORD *)(a1 + 2368) = v78;
      if (v17)
        operator delete(v17);
      goto LABEL_37;
    }
    bzero(*(void **)(a1 + 2360), 224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224);
    v38 = &v17[224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224];
    goto LABEL_33;
  }
  if (v15 + 1 < v19)
  {
    v38 = &v18[224 * v16];
LABEL_33:
    *(_QWORD *)(a1 + 2360) = v38;
  }
LABEL_37:
  LODWORD(v39) = *(_DWORD *)(a1 + 568);
  if ((int)v39 <= 0)
  {
LABEL_62:
    v50 = (_QWORD *)(*(_QWORD *)(a1 + 2352) + 224 * (int)v39);
    sub_1C9710D38((uint64_t)v50, v8, *(char *)(a1 + 653));
    v51 = *(unsigned __int8 **)(a1 + 1640);
    v52 = *(_QWORD *)(a1 + 1648);
    v50[1] = 510;
    v50[3] = v51;
    v50[4] = v52;
    sub_1C9710CD0((uint64_t)v50, v51);
    if (*(_BYTE *)(a1 + 56))
    {
      v53 = *(_QWORD *)(a1 + 32);
      v54 = *(unsigned __int8 *)(v53 + 21);
      if (*(_BYTE *)(v53 + 21))
      {
        if (v3 == v6)
          goto LABEL_84;
      }
      if (v7 != *(_DWORD *)(a1 + 2320) || v5 != *(_DWORD *)(a1 + 2308))
      {
        if (*(_BYTE *)(v53 + 20))
        {
          v55 = *(_DWORD *)(a1 + 2304)
              + *(_DWORD *)(a1 + 2304) * *(unsigned __int16 *)(v53 + 22)
              + *(_DWORD *)(a1 + 2316);
        }
        else if (*(_BYTE *)(v53 + 21))
        {
          v55 = v5;
        }
        else
        {
          v55 = 0;
        }
        v56 = *(_QWORD *)(a1 + 2336);
        v57 = *(_QWORD *)(v56 + 1184);
        if (v55 < (unint64_t)((*(_QWORD *)(v56 + 1192) - v57) >> 2))
          *(_DWORD *)(*(_QWORD *)(a1 + 1184) + 4 * v55) = *(_DWORD *)(v57 + 4 * v55);
        v58 = *(_QWORD *)(a1 + 2352);
        v59 = *(_OWORD *)(v56 + 1386);
        v60 = *(_OWORD *)(v56 + 1402);
        v61 = *(_OWORD *)(v56 + 1418);
        *(_OWORD *)(v58 + 88) = *(_OWORD *)(v56 + 1434);
        *(_OWORD *)(v58 + 72) = v61;
        *(_OWORD *)(v58 + 56) = v60;
        *(_OWORD *)(v58 + 40) = v59;
        v62 = *(_OWORD *)(v56 + 1450);
        v63 = *(_OWORD *)(v56 + 1466);
        v64 = *(_OWORD *)(v56 + 1482);
        *(_OWORD *)(v58 + 152) = *(_OWORD *)(v56 + 1498);
        *(_OWORD *)(v58 + 136) = v64;
        *(_OWORD *)(v58 + 120) = v63;
        *(_OWORD *)(v58 + 104) = v62;
        v65 = *(_OWORD *)(v56 + 1514);
        v66 = *(_OWORD *)(v56 + 1530);
        v67 = *(_OWORD *)(v56 + 1546);
        *(_BYTE *)(v58 + 216) = *(_BYTE *)(v56 + 1562);
        *(_OWORD *)(v58 + 200) = v67;
        *(_OWORD *)(v58 + 184) = v66;
        *(_OWORD *)(v58 + 168) = v65;
        v53 = *(_QWORD *)(a1 + 32);
        v54 = *(unsigned __int8 *)(v53 + 21);
      }
      if (v54)
      {
LABEL_84:
        if (!*(_BYTE *)(v53 + 20))
        {
          v68 = *(_QWORD *)(a1 + 2336);
          v69 = *(_OWORD *)(v68 + 1256);
          v71 = *(_OWORD *)(v68 + 1208);
          v70 = *(_OWORD *)(v68 + 1224);
          *(_OWORD *)(a1 + 1240) = *(_OWORD *)(v68 + 1240);
          *(_OWORD *)(a1 + 1256) = v69;
          *(_OWORD *)(a1 + 1208) = v71;
          *(_OWORD *)(a1 + 1224) = v70;
          v72 = *(_OWORD *)(v68 + 1320);
          v74 = *(_OWORD *)(v68 + 1272);
          v73 = *(_OWORD *)(v68 + 1288);
          *(_OWORD *)(a1 + 1304) = *(_OWORD *)(v68 + 1304);
          *(_OWORD *)(a1 + 1320) = v72;
          *(_OWORD *)(a1 + 1272) = v74;
          *(_OWORD *)(a1 + 1288) = v73;
          v76 = *(_OWORD *)(v68 + 1352);
          v75 = *(_OWORD *)(v68 + 1368);
          v77 = *(_OWORD *)(v68 + 1336);
          *(_BYTE *)(a1 + 1384) = *(_BYTE *)(v68 + 1384);
          *(_OWORD *)(a1 + 1352) = v76;
          *(_OWORD *)(a1 + 1368) = v75;
          *(_OWORD *)(a1 + 1336) = v77;
          *(_BYTE *)(a1 + 1385) = *(_BYTE *)(v68 + 1385);
        }
      }
    }
    *(_BYTE *)(a1 + 2332) = 1;
    return;
  }
  v40 = 0;
  while (1)
  {
    v41 = (_QWORD *)(*(_QWORD *)(a1 + 2352) + 224 * v40);
    v42 = *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * v40);
    sub_1C9710D38((uint64_t)v41, v8, *(char *)(a1 + 653));
    v43 = *(unsigned __int8 **)(a1 + 1640);
    v44 = (uint64_t)&v43[-*(_QWORD *)(a1 + 1632)];
    if (v44 < 2)
    {
      if (v44 != 1)
      {
        LODWORD(v44) = 0;
        goto LABEL_47;
      }
    }
    else
    {
      LODWORD(v44) = *(v43 - 2) ? 1 : 2;
    }
    if (*(v43 - 1))
      LODWORD(v44) = 0;
LABEL_47:
    v45 = (v42 + 1);
    if (v42 != -1)
      break;
    v45 = 0;
LABEL_61:
    v41[1] = 510;
    v41[3] = v43;
    v41[4] = &v43[v45];
    sub_1C9710CD0((uint64_t)v41, v43);
    *(_QWORD *)(a1 + 1640) += v45;
    ++v40;
    v39 = *(int *)(a1 + 568);
    if (v40 >= v39)
      goto LABEL_62;
  }
  v46 = 0;
  while (*(_QWORD *)(a1 + 1648) - (_QWORD)v43 != v46)
  {
    v47 = v43[v46];
    v48 = v44 == 2;
    if ((_DWORD)v44 == 2)
      LODWORD(v44) = 2 * (v47 > 3);
    v49 = v47 < 4 && v48;
    v45 -= v49;
    if (v43[v46])
      LODWORD(v44) = 0;
    else
      LODWORD(v44) = v44 + 1;
    if (++v46 >= v45)
      goto LABEL_61;
  }
}

uint64_t sub_1C9710CD0(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;

  v2 = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_OWORD *)result = xmmword_1C9862BF0;
  v3 = *(_QWORD *)(result + 32);
  v4 = 64;
  v5 = a2;
  do
  {
    v4 -= 8;
    v2 |= (unint64_t)*v5 << v4;
    *(_QWORD *)result = v2;
    if ((unint64_t)v5 < v3)
      *(_QWORD *)(result + 24) = ++v5;
  }
  while (8 * (a2 & 3) != v4);
  *(_QWORD *)(result + 16) = (int)((8 * (_DWORD)a2) | 0xFFFFFFE0);
  return result;
}

uint64_t sub_1C9710D38(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  BOOL v9;
  BOOL v10;
  char v11;

  v3 = 0;
  if (a3 >= 51)
    v4 = 51;
  else
    v4 = a3;
  v5 = v4 & ~(v4 >> 31);
  do
  {
    v6 = byte_1C983229C[177 * a2 + v3];
    v7 = 8 * (v6 & 0xF) + ((int)((5 * (v6 >> 4) - 45) * v5) >> 4) - 16;
    if (v7 >= 126)
      v7 = 126;
    if (v7 <= 1)
      v7 = 1;
    v8 = 63 - v7;
    v9 = v7 > 0x3F;
    v10 = v7 > 0x3F;
    v11 = v7 + 64;
    if (!v9)
      v11 = v8;
    *(_BYTE *)(result + 40 + v3++) = v10 | (2 * v11);
  }
  while (v3 != 177);
  *(_DWORD *)(result + 213) = 0;
  return result;
}

void sub_1C9710DCC(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v3[4 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v16 = &v4[4 * v6];
LABEL_16:
    a1[1] = v16;
    return;
  }
  if (a2 >> 62)
    sub_1C9747024();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 62)
    sub_1C9724B4C();
  v11 = (char *)operator new(4 * v10);
  v12 = &v11[4 * v5];
  v13 = &v11[4 * v10];
  bzero(v12, 4 * v6);
  v14 = &v12[4 * v6];
  while (v4 != v3)
  {
    v15 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *((_DWORD *)v12 - 1) = v15;
    v12 -= 4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

uint64_t sub_1C9710ED4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  if (*(_DWORD *)(a1 + 96) <= a2 || *(_DWORD *)(a1 + 100) <= a3)
    return 4294954387;
  if (*(_BYTE *)(a1 + 104))
  {
    result = 0;
    v6 = *(_QWORD *)(a1 + 48) + 12 * a2;
    v7 = *(_QWORD *)v6;
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(v6 + 8);
    *(_QWORD *)(a4 + 12) = v7;
    v8 = *(_QWORD *)(a1 + 72) + 12 * a3;
    v9 = *(_QWORD *)v8;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(v8 + 8);
    *(_QWORD *)a4 = v9;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    v11 = *(_DWORD *)(a1 + 96);
    v10 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a4 + 20) = v11;
    *(_DWORD *)(a4 + 8) = v10;
  }
  return result;
}

void sub_1C9710F58(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  int v10;
  FILE **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::mutex *v20;
  char v21;

  v4 = (_QWORD *)(a1 + 2120);
  v5 = *(_QWORD *)(a1 + 2120);
  v6 = *(std::__shared_weak_count **)(a1 + 2128);
  v18 = v5;
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_1C974E55C(v4);
  if (!(_DWORD)a2)
  {
    if (v5)
    {
      v9 = *(_QWORD *)(a1 + 2056);
      if (*(unsigned __int8 *)(v9 + 50) == 255)
        goto LABEL_11;
      v10 = sub_1C972F610(v5);
      if (dword_1ED1ACCC0 >= 7)
      {
        v11 = (FILE **)MEMORY[0x1E0C80C10];
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Received frame checksum (POC %d) = %x\n", *(_DWORD *)(**(_QWORD **)(a1 + 2064) + 640), *(unsigned __int16 *)(v9 + 64));
        syslog(31, "Received frame checksum (POC %d) = %x\n", *(_DWORD *)(**(_QWORD **)(a1 + 2064) + 640), *(unsigned __int16 *)(*(_QWORD *)(a1 + 2056) + 64));
        if (dword_1ED1ACCC0 >= 7)
        {
          fprintf(*v11, "Decoded  frame checksum (POC %d) = %x\n", *(_DWORD *)(**(_QWORD **)(a1 + 2064) + 640), v10);
          syslog(31, "Decoded  frame checksum (POC %d) = %x\n", *(_DWORD *)(**(_QWORD **)(a1 + 2064) + 640), v10);
        }
      }
      if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 2056) + 64) == v10)
      {
LABEL_11:
        a2 = 0;
      }
      else
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Checksum mismatch at POC %d: enc = %d, dec = %d\n", *(_DWORD *)(**(_QWORD **)(a1 + 2064) + 640), *(unsigned __int16 *)(*(_QWORD *)(a1 + 2056) + 64), v10);
          syslog(27, "Checksum mismatch at POC %d: enc = %d, dec = %d\n", *(_DWORD *)(**(_QWORD **)(a1 + 2064) + 640), *(unsigned __int16 *)(*(_QWORD *)(a1 + 2056) + 64), v10);
        }
        a2 = 4294954387;
      }
    }
    else
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Something went wrong and frame is NULL (but we have no specific error...)\n", 0x4AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Something went wrong and frame is NULL (but we have no specific error...)\n");
      }
      a2 = 4294954385;
    }
  }
  if (*(int *)(a1 + 2112) >= 1)
  {
    v12 = 0;
    do
      sub_1C9714CD4(*(_QWORD *)(*(_QWORD *)(a1 + 2064) + 8 * v12++));
    while (v12 < *(int *)(a1 + 2112));
  }
  sub_1C97173C8((_QWORD *)(a1 + 2136));
  if (v18)
  {
    v20 = (std::mutex *)(v18 + 1040);
    v21 = 1;
    std::mutex::lock((std::mutex *)(v18 + 1040));
    atomic_store(0x7FFFFFFFu, (unsigned int *)(v18 + 1032));
    sub_1C971138C((uint64_t)&v20);
    std::condition_variable::notify_all((std::condition_variable *)(v18 + 1104));
    if (v21)
      std::mutex::unlock(v20);
    v13 = v18;
    *(_BYTE *)(v18 + 45) = *(_BYTE *)(**(_QWORD **)(a1 + 2064) + 59);
    if (!(_DWORD)a2)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 2056) + 304))
      {
        a2 = sub_1C97481E4(v13, v13 + 598);
        *(_BYTE *)(v18 + 597) = 1;
      }
      else
      {
        a2 = 0;
      }
    }
  }
  v14 = *(_QWORD *)a1;
  atomic_store(0, (unsigned __int8 *)(a1 + 3440));
  sub_1C97112A4(*(_QWORD *)(a1 + 2056), v14, a2, &v18);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1C9711270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, std::mutex *a15, char a16)
{
  sub_1C972CFE0((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1C97112A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t, uint64_t, uint64_t *);
  BOOL v10;
  std::mutex *v12;
  char v13;

  v12 = (std::mutex *)(a1 + 2472);
  v13 = 1;
  std::mutex::lock((std::mutex *)(a1 + 2472));
  v8 = *a4;
  if (*a4)
  {
    *(_BYTE *)(v8 + 44) = 1;
    *(_DWORD *)(v8 + 544) = a3;
    *(_QWORD *)(v8 + 536) = a2;
  }
  v10 = v8 == 0;
  v9 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(a1 + 2408);
  v10 = !v10 && (_DWORD)a3 == 0;
  if (!v10 && v9 != 0)
    v9(*(_QWORD *)(a1 + 2416), a2, a3, a4);
  sub_1C97113CC(a1);
  sub_1C971138C((uint64_t)&v12);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 2400));
  if (v13)
    std::mutex::unlock(v12);
}

void sub_1C9711370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_1C971138C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_1C97113CC();
  }
}

void sub_1C97113CC(uint64_t a1)
{
  int64x2_t *v2;
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;
  int64x2_t v7;
  int v8;
  uint64_t v9;
  FILE *v10;
  void (*v11)(_QWORD, _QWORD, _QWORD, int *);
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15[4];

  v2 = (int64x2_t *)(a1 + 2456);
  while (*(_QWORD *)(a1 + 2464))
  {
    v3 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + ((*(_QWORD *)(a1 + 2456) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(_QWORD *)(a1 + 2456));
    *(_OWORD *)v15 = v3;
    if (*((_QWORD *)&v3 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = *(unsigned __int8 *)(v3 + 44);
    if (*(_BYTE *)(v3 + 44))
    {
      sub_1C972CFE0(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + ((*(_QWORD *)(a1 + 2456) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * *(_QWORD *)(a1 + 2456));
      v7 = vaddq_s64(*v2, (int64x2_t)xmmword_1C9862BD0);
      *v2 = v7;
      if (v7.i64[0] >= 0x200uLL)
      {
        operator delete(**(void ***)(a1 + 2432));
        *(_QWORD *)(a1 + 2432) += 8;
        *(_QWORD *)(a1 + 2456) -= 256;
      }
      v8 = *(_DWORD *)(a1 + 328);
      if (v8)
      {
        v9 = *(_QWORD *)v15;
        if (*(_DWORD *)(a1 + 196) >= v8)
          *(_BYTE *)(*(_QWORD *)v15 + 45) = 0;
      }
      else
      {
        v9 = *(_QWORD *)v15;
      }
      if (*(_BYTE *)(v9 + 45))
      {
        v10 = *(FILE **)(a1 + 216);
        if (v10)
          sub_1C9747A5C(v9, v10, *(_QWORD *)(a1 + 168), *(unsigned __int8 *)(a1 + 359));
      }
      v11 = *(void (**)(_QWORD, _QWORD, _QWORD, int *))(a1 + 2408);
      if (v11 && !*(_DWORD *)(*(_QWORD *)v15 + 544))
        v11(*(_QWORD *)(a1 + 2416), *(_QWORD *)(*(_QWORD *)v15 + 536), 0, v15);
      ++*(_DWORD *)(a1 + 196);
    }
    v12 = *(std::__shared_weak_count **)&v15[2];
    if (!*(_QWORD *)&v15[2])
      goto LABEL_24;
    v13 = (unint64_t *)(*(_QWORD *)&v15[2] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v6)
        return;
    }
    else
    {
LABEL_24:
      if (!v6)
        return;
    }
  }
}

void sub_1C971156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1C972CFE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9711584(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  int64x2_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  uint64_t result;
  uint64_t v36;
  int v37;
  char v38;
  unsigned __int8 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  unsigned __int8 v47;
  const char *v48;
  uint64_t v49;
  FILE *v50;
  const char *v51;
  size_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  int v57;
  signed int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 **v63;
  unsigned __int8 **v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned __int16 *v80;
  uint64_t v81;
  int v82;
  int v83;
  BOOL v84;
  int v85;
  int32x2_t v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int16 *v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  uint64_t v128;
  unsigned __int8 *v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  int32x4_t v134;
  int32x4_t v135;
  uint32x4_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int32x4_t v139;
  int8x16_t v140;
  uint32x4_t v141;
  unsigned int v142;
  BOOL v143;
  unsigned int v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  char v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  unsigned __int8 v164;
  uint64_t v165;
  unsigned __int16 v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned __int8 v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  _QWORD *v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned __int8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  unsigned __int8 v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t i;
  _BYTE *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  FILE *v214;
  const char *v215;
  const char *v216;
  size_t v217;
  FILE *v218;
  const char *v219;
  const char *v220;
  size_t v221;
  uint64_t j;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unsigned int **v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  BOOL v244;
  unint64_t v245;
  unsigned int v246;
  unint64_t v247;
  const char *v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  unsigned int v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  unsigned __int8 **v258;
  _QWORD *v259;
  __int128 v261;

  v7 = a1[132].i32[0];
  if ((_DWORD)v7)
  {
    v8 = a1[129].i64[0];
    v9 = *(_QWORD *)(v8 + 8 * ((int)v7 - 1));
  }
  else
  {
    v9 = 0;
    v8 = a1[129].i64[0];
  }
  v10 = a1[132].i32[0];
  if (v7 >= (a1[129].i64[1] - v8) >> 3)
  {
    v11 = operator new();
    sub_1C971EA5C(v11);
    *(_QWORD *)v11 = off_1E8291920;
    *(_BYTE *)(v11 + 2332) = 0;
    *(_QWORD *)(v11 + 2352) = 0;
    *(_QWORD *)(v11 + 2368) = 0;
    *(_QWORD *)(v11 + 2360) = 0;
    *(_BYTE *)(v11 + 1384) = 0;
    *(_OWORD *)(v11 + 1208) = 0u;
    *(_OWORD *)(v11 + 1224) = 0u;
    *(_OWORD *)(v11 + 1240) = 0u;
    *(_OWORD *)(v11 + 1256) = 0u;
    *(_OWORD *)(v11 + 1272) = 0u;
    *(_OWORD *)(v11 + 1288) = 0u;
    *(_OWORD *)(v11 + 1304) = 0u;
    *(_OWORD *)(v11 + 1320) = 0u;
    *(_OWORD *)(v11 + 1336) = 0u;
    *(_OWORD *)(v11 + 1352) = 0u;
    *(_OWORD *)(v11 + 1368) = 0u;
    *(_BYTE *)(v11 + 1562) = 0;
    *(_OWORD *)(v11 + 1530) = 0u;
    *(_OWORD *)(v11 + 1546) = 0u;
    *(_OWORD *)(v11 + 1498) = 0u;
    *(_OWORD *)(v11 + 1514) = 0u;
    *(_OWORD *)(v11 + 1466) = 0u;
    *(_OWORD *)(v11 + 1482) = 0u;
    *(_OWORD *)(v11 + 1434) = 0u;
    *(_OWORD *)(v11 + 1450) = 0u;
    *(_OWORD *)(v11 + 1402) = 0u;
    *(_OWORD *)(v11 + 1418) = 0u;
    *(_OWORD *)(v11 + 1386) = 0u;
    v12 = (uint64_t *)a1[129].i64[1];
    v13 = a1[130].u64[0];
    if ((unint64_t)v12 >= v13)
    {
      v15 = (_QWORD *)a1[129].i64[0];
      v16 = v12 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_1C9747024();
      v18 = v13 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          sub_1C9724B4C();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (uint64_t *)&v20[8 * v16];
      *v21 = v11;
      v14 = v21 + 1;
      if (v12 == v15)
      {
        v23 = vdupq_n_s64((unint64_t)v12);
      }
      else
      {
        do
        {
          v22 = *--v12;
          *v12 = 0;
          *--v21 = v22;
        }
        while (v12 != v15);
        v23 = a1[129];
      }
      a1[129].i64[0] = (uint64_t)v21;
      a1[129].i64[1] = (uint64_t)v14;
      a1[130].i64[0] = (uint64_t)&v20[8 * v19];
      v25 = (_QWORD *)v23.i64[1];
      v24 = (_QWORD *)v23.i64[0];
      while (v25 != v24)
      {
        v27 = *--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      }
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v12 = v11;
      v14 = v12 + 1;
    }
    a1[129].i64[1] = (uint64_t)v14;
    v10 = a1[132].i32[0];
    v8 = a1[129].i64[0];
  }
  v28 = *(_QWORD *)(v8 + 8 * v10);
  v29 = a1[128].i64[1];
  v30 = a1[128].u8[0];
  if (v29)
  {
    *(_QWORD *)(v28 + 1576) = v29;
    *(_QWORD *)(v28 + 1568) = v29 + 48;
    sub_1C9746DB4((_QWORD *)(v28 + 1584), *(_QWORD *)(v29 + 168), *(_QWORD *)(v29 + 176));
    *(_QWORD *)(v28 + 2344) = v29 + 248;
  }
  v31 = *(unsigned __int8 *)(a2 + 16);
  v32 = v31 - 19;
  *(_BYTE *)(v28 + 632) = (v31 - 19) < 2;
  v33 = v31 & 0xF8;
  *(_BYTE *)(v28 + 633) = v33 == 16;
  *(_BYTE *)(v28 + 634) = (v31 & 0xFE) == 6;
  *(_BYTE *)(v28 + 635) = (v31 & 0xFE) == 8;
  *(_BYTE *)(v28 + 636) = (v31 & 0xF1) == 0;
  *(_BYTE *)(v28 + 637) = v31 == 21;
  v34 = (v31 - 16) < 3;
  if (v32 < 2)
    v34 = 1;
  if (v30)
    v34 = 1;
  *(_BYTE *)(v28 + 638) = v34;
  if (v29 && v33 == 16 && *(_BYTE *)(v29 + 203))
    *(_BYTE *)(v28 + 638) = 1;
  *(_BYTE *)(v28 + 659) = 1;
  result = sub_1C971B9D0((unint64_t *)(v28 + 1608), a2);
  if ((_DWORD)result)
    return result;
  v36 = a1[128].i64[1];
  *(_QWORD *)(v28 + 2336) = v9;
  *(_QWORD *)(v28 + 2280) = a1;
  *(_BYTE *)(v28 + 2332) = 0;
  v37 = sub_1C971C898(v28 + 1608, 1);
  if (v37)
  {
    *(_WORD *)(v28 + 48) = 1;
    *(_BYTE *)(v28 + 50) = 0;
    *(_DWORD *)(v28 + 52) = 0;
    *(_BYTE *)(v28 + 56) = 0;
    *(_WORD *)(v28 + 58) = 258;
    *(_BYTE *)(v28 + 60) = 0;
    *(_DWORD *)(v28 + 64) = 0;
    *(_BYTE *)(v28 + 68) = 0;
    *(_DWORD *)(v28 + 320) = 0;
    *(_QWORD *)(v28 + 512) = 0;
    *(_QWORD *)(v28 + 552) = 0;
    *(_QWORD *)(v28 + 559) = 0;
    *(_BYTE *)(v28 + 567) = 1;
    *(_DWORD *)(v28 + 568) = 0;
    *(_BYTE *)(v28 + 572) = 0;
    *(_WORD *)(v28 + 600) = 0;
    *(_OWORD *)(v28 + 520) = xmmword_1C9862BE0;
    *(_OWORD *)(v28 + 536) = xmmword_1C9862BE0;
    *(_BYTE *)(v28 + 1600) = 0;
    *(_DWORD *)(v28 + 2256) = 0;
  }
  *(_BYTE *)(v28 + 48) = v37 != 0;
  v38 = *(_BYTE *)(v28 + 633);
  if (v38)
    v38 = sub_1C971C898(v28 + 1608, 1) != 0;
  *(_BYTE *)(v28 + 49) = v38;
  v39 = sub_1C971B8B0(v28 + 1608);
  *(_BYTE *)(v28 + 50) = v39;
  if (*(_BYTE *)(v28 + 48) != (v9 == 0))
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954387;
    v50 = (FILE *)*MEMORY[0x1E0C80C10];
    v48 = "first_slice_in_pic_flag mismatch\n";
LABEL_61:
    v51 = v48;
    v52 = 33;
    goto LABEL_62;
  }
  if (*(_BYTE *)(v28 + 48))
  {
    v40 = (uint64_t *)(v36 + 16 * v39 + 880);
    if ((v39 & 0xC0) != 0)
      v40 = (uint64_t *)(v36 + 1936);
    v41 = v28 + 32;
    sub_1C9746DB4((_QWORD *)(v28 + 32), *v40, v40[1]);
    v42 = *(_QWORD *)(v28 + 32);
    if (!v42)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v48 = "No PPS found for ID %d\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "No PPS found for ID %d\n", *(unsigned __int8 *)(v28 + 50));
        v49 = *(unsigned __int8 *)(v28 + 50);
        goto LABEL_107;
      }
      return 4294954387;
    }
    if (*(_BYTE *)(v42 + 1760))
    {
LABEL_49:
      v43 = *(unsigned __int8 *)(v42 + 1);
      if (v43 <= 0xF)
        v44 = (uint64_t *)(v36 + 16 * v43 + 624);
      else
        v44 = (uint64_t *)(v36 + 1920);
      sub_1C9746DB4((_QWORD *)(v28 + 16), *v44, v44[1]);
      if (!*(_QWORD *)(v28 + 16))
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          v48 = "No SPS found for ID %d\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "No SPS found for ID %d\n", *(unsigned __int8 *)(*(_QWORD *)v41 + 1));
          v49 = *(unsigned __int8 *)(*(_QWORD *)v41 + 1);
          goto LABEL_107;
        }
        return 4294954387;
      }
      v45 = 0;
      *(_BYTE *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 52) = 0;
      goto LABEL_54;
    }
    v61 = *(_QWORD *)(v42 + 1768);
    v62 = *(unsigned __int8 *)(v42 + 1);
    v63 = (unsigned __int8 **)(v61 + 1552);
    v64 = (unsigned __int8 **)(v61 + 16 * v62 + 256);
    if (v62 > 0xF)
      v64 = v63;
    if (!*v64)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v48 = "No SPS found for ID %d\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "No SPS found for ID %d\n", *(unsigned __int8 *)(v42 + 1));
        v49 = *(unsigned __int8 *)(v42 + 1);
        goto LABEL_107;
      }
      return 4294954387;
    }
    v258 = v64;
    result = sub_1C96FB64C(*v64);
    if ((_DWORD)result)
      return result;
    v65 = *v258;
    v66 = *((_DWORD *)*v258 + 530);
    *(_DWORD *)(v42 + 1744) = v66;
    v67 = *((_DWORD *)v65 + 531);
    *(_DWORD *)(v42 + 1748) = v67;
    if (*(_BYTE *)(v42 + 1752))
    {
      if (*(_BYTE *)(v42 + 26))
      {
        LODWORD(v68) = *(unsigned __int16 *)(v42 + 22);
        if (*(_WORD *)(v42 + 22))
        {
          v69 = 0;
          v70 = 0;
          v71 = *(_QWORD *)(v42 + 1648);
          do
          {
            v72 = v68 + 1;
            v73 = v69 / v72;
            v69 += v66;
            *(_WORD *)(v71 + 2 * v70) = ~(_WORD)v73 + v69 / v72;
            v68 = *(unsigned __int16 *)(v42 + 22);
            ++v70;
          }
          while (v70 < v68);
        }
        LODWORD(v74) = *(unsigned __int16 *)(v42 + 24);
        if (*(_WORD *)(v42 + 24))
        {
          v75 = 0;
          v76 = 0;
          v77 = *(_QWORD *)(v42 + 1672);
          do
          {
            v78 = v74 + 1;
            v79 = v75 / v78;
            v75 += v67;
            *(_WORD *)(v77 + 2 * v76) = ~(_WORD)v79 + v75 / v78;
            v74 = *(unsigned __int16 *)(v42 + 24);
            ++v76;
          }
          while (v76 < v74);
        }
      }
      if (*(_WORD *)(v42 + 22))
      {
        v80 = *(unsigned __int16 **)(v42 + 1648);
        v81 = *(unsigned __int16 *)(v42 + 22);
        v82 = v66;
        do
        {
          v83 = *v80++;
          v82 += ~v83;
          --v81;
        }
        while (v81);
      }
      else
      {
        v82 = v66;
      }
      v95 = *(unsigned __int16 *)(v42 + 24);
      if (*(_WORD *)(v42 + 24))
      {
        v96 = *(unsigned __int16 **)(v42 + 1672);
        do
        {
          v97 = *v96++;
          v67 += ~v97;
          --v95;
        }
        while (v95);
      }
      v98 = __OFSUB__(v82, 1);
      v99 = v82 - 1;
      if (v99 < 0 != v98 || (v98 = __OFSUB__(v67, 1), v100 = v67 - 1, (v100 < 0) ^ v98))
      {
        if (dword_1ED1ACCC0 < 3)
          return 4294954387;
        v50 = (FILE *)*MEMORY[0x1E0C80C10];
        v48 = "Invalid tile widths\n";
        v51 = "Invalid tile widths\n";
        v52 = 20;
        goto LABEL_62;
      }
      *(_WORD *)(*(_QWORD *)(v42 + 1648) + 2 * *(unsigned __int16 *)(v42 + 22)) = v99;
      *(_WORD *)(*(_QWORD *)(v42 + 1672) + 2 * *(unsigned __int16 *)(v42 + 24)) = v100;
      sub_1C9750A20(v42 + 1696, v66);
      sub_1C9750A20(v42 + 1720, *(int *)(v42 + 1748));
      v257 = *(unsigned __int16 *)(v42 + 24);
      result = sub_1C9750B90(*(_DWORD *)(v42 + 1744), *(unsigned __int16 *)(v42 + 22) + 1, *(_QWORD *)(v42 + 1648), *(_QWORD *)(v42 + 1696));
      if ((_DWORD)result)
        return result;
      result = sub_1C9750B90(*(_DWORD *)(v42 + 1748), v257 + 1, *(_QWORD *)(v42 + 1672), *(_QWORD *)(v42 + 1720));
      if ((_DWORD)result)
        return result;
      v65 = *v258;
    }
    if (!*(_BYTE *)(v42 + 34))
    {
      memcpy((void *)(v42 + 40), v65 + 416, 0x618uLL);
      v65 = *v258;
    }
    v101 = v65[2113];
    v102 = *(unsigned __int8 *)(v42 + 13);
    *(_DWORD *)(v42 + 1636) = v101 - v102;
    v103 = *(unsigned __int8 *)(v42 + 1618);
    *(_DWORD *)(v42 + 1640) = v101 - v103;
    v104 = *(_QWORD *)(v42 + 1768);
    v105 = *(unsigned __int8 *)(v42 + 1);
    v106 = (_QWORD *)(v104 + 1552);
    v107 = v104 + 16 * v105 + 256;
    if (v105 <= 0xF)
      v108 = (_QWORD *)v107;
    else
      v108 = v106;
    v109 = *v108;
    if (!*v108)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v50 = (FILE *)*MEMORY[0x1E0C80C10];
      v48 = "sps failed!\n";
      v51 = "sps failed!\n";
      v52 = 12;
      goto LABEL_62;
    }
    v110 = *(unsigned __int8 *)(v42 + 7);
    if (v110 >= 0xF)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v48 = "num_ref_idx_l0_default_active_minus1_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_ref_idx_l0_default_active_minus1_ of %lld is out of range (%lld, %lld)\n", v110, 0, 14);
      v49 = *(unsigned __int8 *)(v42 + 7);
    }
    else
    {
      v111 = *(unsigned __int8 *)(v42 + 8);
      if (v111 < 0xF)
      {
        v112 = *(char *)(v42 + 9);
        v113 = -26 - *(unsigned __int8 *)(v109 + 2097);
        if (v112 > 25 || v113 > v112)
        {
          if (dword_1ED1ACCC0 < 3)
            return 4294954387;
          v189 = v108;
          v48 = "init_qp_minus26_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "init_qp_minus26_ of %lld is out of range (%lld, %lld)\n", v112, v113, 25);
          v49 = *(char *)(v42 + 9);
          v190 = -26 - *(unsigned __int8 *)(*v189 + 2097);
          v256 = 25;
          goto LABEL_343;
        }
        v114 = *(unsigned __int8 *)(v109 + 269);
        if (v102 > v114)
        {
          if (dword_1ED1ACCC0 < 3)
            return 4294954387;
          v115 = v108;
          v48 = "diff_cu_qp_delta_depth_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "diff_cu_qp_delta_depth_ of %lld is out of range (%lld, %lld)\n", v102, 0, v114);
          v49 = *(unsigned __int8 *)(v42 + 13);
          v116 = *v115;
          goto LABEL_160;
        }
        v259 = v108;
        v195 = *(char *)(v42 + 14);
        if ((v195 + 12) >= 0x19u)
        {
          if (dword_1ED1ACCC0 < 3)
            return 4294954387;
          v205 = 12;
          v171 = -12;
          v48 = "pps_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "pps_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n", v195, -12, 12);
          v49 = *(char *)(v42 + 14);
        }
        else
        {
          v196 = *(char *)(v42 + 15);
          if ((v196 + 12) >= 0x19u)
          {
            if (dword_1ED1ACCC0 < 3)
              return 4294954387;
            v205 = 12;
            v171 = -12;
            v48 = "pps_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "pps_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n", v196, -12, 12);
            v49 = *(char *)(v42 + 15);
          }
          else
          {
            if (*(_BYTE *)(v42 + 20))
            {
              v197 = *(unsigned __int16 *)(v42 + 22);
              v198 = *(int *)(v109 + 2120) - 1;
              if (v197 > v198)
              {
                if (dword_1ED1ACCC0 < 3)
                  return 4294954387;
                v48 = "num_tile_columns_minus1_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_tile_columns_minus1_ of %lld is out of range (%lld, %lld)\n", v197, 0, v198);
                v49 = *(unsigned __int16 *)(v42 + 22);
                v199 = *(int *)(*v259 + 2120);
                goto LABEL_430;
              }
              v230 = *(unsigned __int16 *)(v42 + 24);
              v231 = *(int *)(v109 + 2124) - 1;
              if (v230 > v231)
              {
                if (dword_1ED1ACCC0 < 3)
                  return 4294954387;
                v48 = "num_tile_rows_minus1_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_tile_rows_minus1_ of %lld is out of range (%lld, %lld)\n", v230, 0, v231);
                v49 = *(unsigned __int16 *)(v42 + 24);
                v199 = *(int *)(*v259 + 2124);
LABEL_430:
                v117 = v199 - 1;
                goto LABEL_161;
              }
            }
            if (!*(_BYTE *)(v42 + 29) || *(_BYTE *)(v42 + 31))
            {
LABEL_433:
              v232 = *(unsigned __int16 *)(v42 + 1610);
              v233 = *(unsigned __int8 *)(v109 + 2113) - 2;
              if (v233 < v232)
              {
                if (dword_1ED1ACCC0 < 3)
                  return 4294954387;
                v48 = "log2_parallel_merge_level_minus2_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2_parallel_merge_level_minus2_ of %lld is out of range (%lld, %lld)\n", v232, 0, v233);
                v49 = *(unsigned __int16 *)(v42 + 1610);
                v234 = *(unsigned __int8 *)(*v259 + 2113);
                goto LABEL_436;
              }
              if (*(_BYTE *)(v42 + 20) && *(_BYTE *)(v42 + 21))
              {
                if (dword_1ED1ACCC0 < 3)
                  return 4294954387;
                v50 = (FILE *)*MEMORY[0x1E0C80C10];
                v48 = "Both tiles and wavefront enabled!\n";
                v51 = "Both tiles and wavefront enabled!\n";
                v52 = 34;
                goto LABEL_62;
              }
              if (*(_BYTE *)(v42 + 1614))
              {
                v235 = *(unsigned __int8 *)(v42 + 1615);
                v236 = *(unsigned __int8 *)(v109 + 2115) - 2;
                if (v236 < v235)
                {
                  if (dword_1ED1ACCC0 < 3)
                    return 4294954387;
                  v48 = "rext.log2_max_transform_skip_block_size_minus2_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "rext.log2_max_transform_skip_block_size_minus2_ of %lld is out of range (%lld, %lld)\n", v235, 0, v236);
                  v49 = *(unsigned __int8 *)(v42 + 1615);
                  v234 = *(unsigned __int8 *)(*v259 + 2115);
LABEL_436:
                  v117 = v234 - 2;
                  goto LABEL_161;
                }
                if (v103 > v114)
                {
                  if (dword_1ED1ACCC0 < 3)
                    return 4294954387;
                  v48 = "rext.diff_cu_chroma_qp_offset_depth_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "rext.diff_cu_chroma_qp_offset_depth_ of %lld is out of range (%lld, %lld)\n", v103, 0, v114);
                  v49 = *(unsigned __int8 *)(v42 + 1618);
                  v116 = *v259;
LABEL_160:
                  v117 = *(unsigned __int8 *)(v116 + 269);
LABEL_161:
                  v256 = v117;
LABEL_285:
                  v255 = 0;
                  goto LABEL_107;
                }
                v245 = *(unsigned __int8 *)(v42 + 1632);
                v246 = *(unsigned __int8 *)(v109 + 2096);
                if (v246 <= 0xA)
                  v246 = 10;
                v247 = v246 - 10;
                if (v245 > v247)
                {
                  if (dword_1ED1ACCC0 < 3)
                    return 4294954387;
                  v248 = "rext.log2_sao_offset_scale_luma_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "rext.log2_sao_offset_scale_luma_ of %lld is out of range (%lld, %lld)\n", v245, 0, v247);
                  v249 = *(unsigned __int8 *)(v42 + 1632);
                  v250 = *(unsigned __int8 *)(*v259 + 2096);
LABEL_501:
                  if (v250 <= 10)
                    v250 = 10;
                  syslog(27, v248, v249, 0, (v250 - 10));
                  return 4294954387;
                }
                v251 = *(unsigned __int8 *)(v42 + 1633);
                v252 = *(unsigned __int8 *)(v109 + 2098);
                if (v252 <= 0xA)
                  v252 = 10;
                v253 = v252 - 10;
                if (v251 > v253)
                {
                  if (dword_1ED1ACCC0 < 3)
                    return 4294954387;
                  v248 = "rext.log2_sao_offset_scale_chroma_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "rext.log2_sao_offset_scale_chroma_ of %lld is out of range (%lld, %lld)\n", v251, 0, v253);
                  v249 = *(unsigned __int8 *)(v42 + 1633);
                  v250 = *(unsigned __int8 *)(*v259 + 2098);
                  goto LABEL_501;
                }
              }
              if (*(_BYTE *)(v42 + 1616))
              {
                if (*(_BYTE *)(v109 + 2148) != 3)
                {
                  if (dword_1ED1ACCC0 < 3)
                    return 4294954387;
                  v50 = (FILE *)*MEMORY[0x1E0C80C10];
                  v48 = "cross_component_prediction only defined for 444\n";
                  v51 = "cross_component_prediction only defined for 444\n";
                  v52 = 48;
                  goto LABEL_62;
                }
                if (*(unsigned __int8 *)(v109 + 2096) >= 0xCu && dword_1ED1ACCC0 >= 4)
                {
                  fwrite("Our CCP can diverge from spec if IDCT output exceeds 16bits, possible at 12-bit luma\n", 0x55uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                  syslog(28, "Our CCP can diverge from spec if IDCT output exceeds 16bits, possible at 12-bit luma\n");
                }
              }
              *(_BYTE *)(v42 + 1760) = 1;
              v42 = *(_QWORD *)v41;
              goto LABEL_49;
            }
            v239 = *(char *)(v42 + 32);
            if ((v239 + 6) >= 0xDu)
            {
              if (dword_1ED1ACCC0 < 3)
                return 4294954387;
              v205 = 6;
              v171 = -6;
              v48 = "pps_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n";
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "pps_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n", v239, -6, 6);
              v49 = *(char *)(v42 + 32);
            }
            else
            {
              v240 = *(char *)(v42 + 33);
              if ((v240 + 6) < 0xDu)
                goto LABEL_433;
              if (dword_1ED1ACCC0 < 3)
                return 4294954387;
              v205 = 6;
              v171 = -6;
              v48 = "pps_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n";
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "pps_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n", v240, -6, 6);
              v49 = *(char *)(v42 + 33);
            }
          }
        }
        v256 = v205;
LABEL_398:
        v255 = v171;
        goto LABEL_107;
      }
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v48 = "num_ref_idx_l1_default_active_minus1_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_ref_idx_l1_default_active_minus1_ of %lld is out of range (%lld, %lld)\n", v111, 0, 14);
      v49 = *(unsigned __int8 *)(v42 + 8);
    }
    v256 = 14;
    goto LABEL_285;
  }
  v53 = *(_QWORD *)(v28 + 2336);
  if (!v53)
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954387;
    v50 = (FILE *)*MEMORY[0x1E0C80C10];
    v48 = "No previous slice found but first_slice_in_pic_flag_ not set!\n";
    v51 = "No previous slice found but first_slice_in_pic_flag_ not set!\n";
    v52 = 62;
LABEL_62:
    fwrite(v51, v52, 1uLL, v50);
LABEL_108:
    syslog(27, v48, v254, v255, v256);
    return 4294954387;
  }
  sub_1C9746DB4((_QWORD *)(v28 + 32), *(_QWORD *)(v53 + 32), *(_QWORD *)(v53 + 40));
  v54 = (uint64_t *)(v28 + 16);
  sub_1C9746DB4((_QWORD *)(v28 + 16), *(_QWORD *)(*(_QWORD *)(v28 + 2336) + 16), *(_QWORD *)(*(_QWORD *)(v28 + 2336) + 24));
  v55 = *(unsigned __int8 **)(v28 + 32);
  if (!v55 || (v56 = *v54) == 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Missing SPS or PPS for secondary slice\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Missing SPS or PPS for secondary slice\n");
    }
    return 4294954385;
  }
  if (*v55 != *(unsigned __int8 *)(v28 + 50) || *(unsigned __int8 *)(v56 + 200) != v55[1])
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954387;
    v50 = (FILE *)*MEMORY[0x1E0C80C10];
    v48 = "Secondary slice points to different SPS/PPS\n";
    v51 = "Secondary slice points to different SPS/PPS\n";
    v52 = 44;
    goto LABEL_62;
  }
  v57 = v55[2];
  if (v57)
  {
    LOBYTE(v57) = sub_1C971C898(v28 + 1608, 1) != 0;
    v56 = *v54;
  }
  *(_BYTE *)(v28 + 56) = v57;
  v58 = *(_DWORD *)(v56 + 2124) * *(_DWORD *)(v56 + 2120);
  if (v58 <= 1)
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954387;
    v50 = (FILE *)*MEMORY[0x1E0C80C10];
    v48 = "got secondary slice but only one CTB in entire picture!\n";
    v51 = "got secondary slice but only one CTB in entire picture!\n";
    v52 = 56;
    goto LABEL_62;
  }
  v59 = __clz(v58) ^ 0x1F;
  if ((v58 & (v58 - 1)) != 0)
    v60 = v59 + 1;
  else
    v60 = v59;
  v45 = sub_1C9713974(v28 + 1608, v60);
  *(_DWORD *)(v28 + 52) = v45;
  if (!*(_BYTE *)(v28 + 56))
  {
LABEL_54:
    *(_DWORD *)(v28 + 648) = v45;
    *(_BYTE *)(v28 + 1385) = 0;
    v46 = *(_QWORD *)(v28 + 32);
    if (*(_BYTE *)(v46 + 4))
      *(_BYTE *)(v28 + 57) = sub_1C971C898(v28 + 1608, *(unsigned __int8 *)(v46 + 4));
    v47 = sub_1C971B8B0(v28 + 1608);
    *(_BYTE *)(v28 + 58) = v47;
    if (v47 >= 3u)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v48 = "Invalid slice type %d\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid slice type %d\n", v47);
        v49 = *(unsigned __int8 *)(v28 + 58);
LABEL_107:
        v254 = v49;
        goto LABEL_108;
      }
      return 4294954387;
    }
    if (*(_BYTE *)(*(_QWORD *)(v28 + 32) + 3))
      v84 = sub_1C971C898(v28 + 1608, 1) != 0;
    else
      v84 = 1;
    *(_BYTE *)(v28 + 59) = v84;
    if (*(_BYTE *)(*(_QWORD *)(v28 + 16) + 202))
      *(_BYTE *)(v28 + 60) = sub_1C971C898(v28 + 1608, 2);
    if (*(_BYTE *)(v28 + 632))
    {
      if (*(_BYTE *)(v28 + 58) == 2)
        goto LABEL_116;
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v50 = (FILE *)*MEMORY[0x1E0C80C10];
      v48 = "IDR nalu must have only I slices\n";
      goto LABEL_61;
    }
    *(_DWORD *)(v28 + 64) = sub_1C971C898(v28 + 1608, *(unsigned __int8 *)(*(_QWORD *)(v28 + 16) + 224) + 4);
    v90 = sub_1C971C898(v28 + 1608, 1);
    *(_BYTE *)(v28 + 68) = v90 != 0;
    if (v90)
    {
      v91 = *(_QWORD *)(v28 + 16);
      v92 = *(_DWORD *)(v91 + 288);
      if (v92)
      {
        v93 = __clz(v92) ^ 0x1F;
        if ((v92 & (v92 - 1)) != 0)
          ++v93;
        if (v93)
        {
          v94 = sub_1C971C898(v28 + 1608, v93);
          v91 = *(_QWORD *)(v28 + 16);
          v92 = *(_DWORD *)(v91 + 288);
        }
        else
        {
          v94 = 0;
        }
        *(_DWORD *)(v28 + 320) = v94;
        if (v94 < v92)
        {
LABEL_178:
          if (*(_BYTE *)(v91 + 320))
          {
            result = sub_1C982F648((unsigned int *)(v28 + 324), v91, v28 + 1608);
            if ((_DWORD)result)
              return result;
            v91 = *(_QWORD *)(v28 + 16);
          }
          else
          {
            *(_QWORD *)(v28 + 324) = 0;
            *(_DWORD *)(v28 + 508) = 0;
          }
          v123 = *(_BYTE *)(v91 + 396);
          if (v123)
            v123 = sub_1C971C898(v28 + 1608, 1) != 0;
          *(_BYTE *)(v28 + 514) = v123;
LABEL_116:
          *(_WORD *)(v28 + 512) = 0;
          if (*(_BYTE *)(*(_QWORD *)(v28 + 16) + 277))
          {
            *(_BYTE *)(v28 + 512) = sub_1C971C898(v28 + 1608, 1) != 0;
            if (*(_BYTE *)(*(_QWORD *)(v28 + 16) + 201))
              *(_BYTE *)(v28 + 513) = sub_1C971C898(v28 + 1608, 1) != 0;
          }
          *(_WORD *)(v28 + 516) = 0;
          if (*(unsigned __int8 *)(v28 + 58) > 1u)
            goto LABEL_232;
          v85 = sub_1C971C898(v28 + 1608, 1);
          *(_BYTE *)(v28 + 515) = v85 != 0;
          if (v85)
          {
            v87 = sub_1C971B8B0(v28 + 1608);
            *(_BYTE *)(v28 + 516) = v87 + 1;
            if (v87 >= 0xFu)
            {
              if (dword_1ED1ACCC0 < 3)
                return 4294954387;
              v48 = "num_ref_idx_l0_active_minus1_ (%d) out of range [0, 14]\n";
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_ref_idx_l0_active_minus1_ (%d) out of range [0, 14]\n", (char)(v87 + 1) - 1);
              v89 = *(char *)(v28 + 516);
LABEL_173:
              v49 = (v89 - 1);
              goto LABEL_107;
            }
            if (!*(_BYTE *)(v28 + 58))
            {
              v88 = sub_1C971B8B0(v28 + 1608);
              *(_BYTE *)(v28 + 517) = v88 + 1;
              if (v88 >= 0xFu)
              {
                if (dword_1ED1ACCC0 < 3)
                  return 4294954387;
                v48 = "num_ref_idx_l1_active_minus1_ (%d) out of range [0, 14]\n";
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_ref_idx_l1_active_minus1_ (%d) out of range [0, 14]\n", (char)(v88 + 1) - 1);
                v89 = *(char *)(v28 + 517);
                goto LABEL_173;
              }
            }
          }
          else
          {
            v118 = *(_QWORD *)(v28 + 32);
            *(_BYTE *)(v28 + 516) = *(_BYTE *)(v118 + 7) + 1;
            if (!*(_BYTE *)(v28 + 58))
              *(_BYTE *)(v28 + 517) = *(_BYTE *)(v118 + 8) + 1;
          }
          if (*(_BYTE *)(v28 + 68))
            v119 = *(_QWORD *)(*(_QWORD *)(v28 + 16) + 296) + 248 * *(int *)(v28 + 320);
          else
            v119 = v28 + 72;
          v124 = *(unsigned __int8 *)(v119 + 160);
          if (*(_BYTE *)(v119 + 160))
          {
            LODWORD(v125) = 0;
            v126 = (unsigned __int8 *)(v119 + 2);
            do
            {
              v127 = *v126;
              v126 += 4;
              v125 = (v125 + v127);
              --v124;
            }
            while (v124);
          }
          else
          {
            v125 = 0;
          }
          v128 = *(unsigned __int8 *)(v119 + 161);
          if (*(_BYTE *)(v119 + 161))
          {
            v129 = (unsigned __int8 *)(v119 + 66);
            do
            {
              v130 = *v129;
              v129 += 4;
              v125 = (v125 + v130);
              --v128;
            }
            while (v128);
          }
          v131 = *(_DWORD *)(v28 + 328) + *(_DWORD *)(v28 + 324);
          v132 = v131 - 1;
          if (v131 >= 1)
          {
            v133 = (v131 + 3) & 0xFFFFFFFC;
            v86.i32[0] = v132;
            v134 = (int32x4_t)v125;
            v135 = (int32x4_t)xmmword_1C9862C30;
            v136 = (uint32x4_t)vdupq_n_s32(*(unsigned __int16 *)(v28 + 508));
            v137.i64[0] = 0xFF000000FFLL;
            v137.i64[1] = 0xFF000000FFLL;
            v138.i64[0] = 0x100000001;
            v138.i64[1] = 0x100000001;
            v139.i64[0] = 0x400000004;
            v139.i64[1] = 0x400000004;
            do
            {
              v140 = (int8x16_t)v134;
              v141 = (uint32x4_t)v135;
              v134 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v136, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)v135, v137))), v138), v134);
              v135 = vaddq_s32(v135, v139);
              v133 -= 4;
            }
            while (v133);
            v125 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v141, (uint32x4_t)vdupq_lane_s32(v86, 0)), v140, (int8x16_t)v134));
          }
          v142 = *(unsigned __int8 *)(*(_QWORD *)(v28 + 16) + *(unsigned __int8 *)(*(_QWORD *)(v28 + 16) + 1) + 226);
          if (v125 > v142)
          {
            if (dword_1ED1ACCC0 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "numPocTotalCurr (%d) out of range [0, %d]\n", v125, v142);
              syslog(27, "numPocTotalCurr (%d) out of range [0, %d]\n");
            }
            return 4294954387;
          }
          if (*(_BYTE *)(*(_QWORD *)(v28 + 32) + 1608))
            v143 = v125 >= 2;
          else
            v143 = 0;
          if (!v143)
          {
            *(_WORD *)(v28 + 518) = 0;
            goto LABEL_208;
          }
          v144 = __clz(v125) ^ 0x1F;
          if ((v125 & ((_DWORD)v125 - 1)) != 0)
            v145 = v144 + 1;
          else
            v145 = v144;
          v146 = sub_1C971C898(v28 + 1608, 1);
          *(_BYTE *)(v28 + 518) = v146 != 0;
          if (v146 && *(char *)(v28 + 516) >= 1)
          {
            v147 = 0;
            v148 = v28 + 520;
            while (1)
            {
              v149 = sub_1C971C898(v28 + 1608, v145);
              *(_BYTE *)(v148 + v147) = v149;
              if (v149 >= v125)
                break;
              if (++v147 >= *(char *)(v28 + 516))
                goto LABEL_218;
            }
            if (dword_1ED1ACCC0 < 3)
              return 4294954387;
            v200 = "list_entry_l0_[%d] (%d) out of range [0, %d]\n";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "list_entry_l0_[%d] (%d) out of range [0, %d]\n");
          }
          else
          {
LABEL_218:
            if (*(_BYTE *)(v28 + 58))
            {
              *(_BYTE *)(v28 + 519) = 0;
              goto LABEL_220;
            }
            v193 = sub_1C971C898(v28 + 1608, 1);
            *(_BYTE *)(v28 + 519) = v193 != 0;
            if (!v193 || *(char *)(v28 + 517) < 1)
            {
LABEL_208:
              if (!*(_BYTE *)(v28 + 58))
                *(_BYTE *)(v28 + 552) = sub_1C971C898(v28 + 1608, 1) != 0;
LABEL_220:
              v150 = *(_BYTE *)(*(_QWORD *)(v28 + 32) + 6);
              if (v150)
                v150 = sub_1C971C898(v28 + 1608, 1) != 0;
              *(_BYTE *)(v28 + 553) = v150;
              *(_WORD *)(v28 + 554) = 1;
              if (!*(_BYTE *)(v28 + 514))
                goto LABEL_227;
              if (*(_BYTE *)(v28 + 58)
                || (v151 = sub_1C971C898(v28 + 1608, 1), *(_BYTE *)(v28 + 554) = v151 != 0, v151))
              {
                if (*(char *)(v28 + 516) <= 1)
                {
LABEL_227:
                  v152 = *(_QWORD *)(v28 + 32);
                  if ((!*(_BYTE *)(v152 + 17) || *(_BYTE *)(v28 + 58) != 1)
                    && (!*(_BYTE *)(v152 + 18) || *(_BYTE *)(v28 + 58)))
                  {
LABEL_231:
                    *(_BYTE *)(v28 + 558) = sub_1C971B8B0(v28 + 1608);
LABEL_232:
                    v153 = sub_1C971B8B0(v28 + 1608);
                    *(_BYTE *)(v28 + 559) = (-((v153 + 1) & 1) ^ ((v153 + 1) >> 1)) + ((v153 + 1) & 1);
                    v154 = *(_QWORD *)(v28 + 32);
                    *(_BYTE *)(v28 + 564) = *(_BYTE *)(v154 + 31);
                    *(_BYTE *)(v28 + 567) = *(_BYTE *)(v154 + 28);
                    *(_WORD *)(v28 + 565) = *(_WORD *)(v154 + 32);
                    *(_WORD *)(v28 + 560) = 0;
                    *(_BYTE *)(v28 + 562) = 0;
                    if (*(_BYTE *)(v154 + 16))
                    {
                      v155 = sub_1C971B8B0(v28 + 1608);
                      *(_BYTE *)(v28 + 560) = (-((v155 + 1) & 1) ^ ((v155 + 1) >> 1)) + ((v155 + 1) & 1);
                      v156 = sub_1C971B8B0(v28 + 1608);
                      *(_BYTE *)(v28 + 561) = (-((v156 + 1) & 1) ^ ((v156 + 1) >> 1)) + ((v156 + 1) & 1);
                      v154 = *(_QWORD *)(v28 + 32);
                    }
                    if (*(_BYTE *)(v154 + 1617))
                    {
                      *(_BYTE *)(v28 + 562) = sub_1C971C898(v28 + 1608, 1) != 0;
                      v154 = *(_QWORD *)(v28 + 32);
                    }
                    if (*(_BYTE *)(v154 + 29))
                    {
                      if (*(_BYTE *)(v154 + 30))
                      {
                        v157 = sub_1C971C898(v28 + 1608, 1);
                        *(_BYTE *)(v28 + 563) = v157 != 0;
                        if (v157)
                        {
                          v158 = sub_1C971C898(v28 + 1608, 1);
                          *(_BYTE *)(v28 + 564) = v158 != 0;
                          if (!v158)
                          {
                            v159 = sub_1C971B8B0(v28 + 1608);
                            *(_BYTE *)(v28 + 565) = (-((v159 + 1) & 1) ^ ((v159 + 1) >> 1))
                                                  + ((v159 + 1) & 1);
                            v160 = sub_1C971B8B0(v28 + 1608);
                            *(_BYTE *)(v28 + 566) = (-((v160 + 1) & 1) ^ ((v160 + 1) >> 1))
                                                  + ((v160 + 1) & 1);
                          }
                        }
                      }
                      else
                      {
                        *(_BYTE *)(v28 + 563) = 0;
                      }
                    }
                    if (*(_BYTE *)(*(_QWORD *)(v28 + 32) + 28)
                      && (*(_BYTE *)(v28 + 512) || *(_BYTE *)(v28 + 513) || !*(_BYTE *)(v28 + 564)))
                    {
                      *(_BYTE *)(v28 + 567) = sub_1C971C898(v28 + 1608, 1) != 0;
                    }
                    goto LABEL_246;
                  }
                  v170 = sub_1C971B8B0(v28 + 1608);
                  *(_BYTE *)(v28 + 556) = v170;
                  if (v170 >= 8u)
                  {
                    if (dword_1ED1ACCC0 < 3)
                      return 4294954387;
                    v171 = 7;
                    v48 = "luma_log2_weight_denom %u > kMaxWeightDenominator %u\n";
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "luma_log2_weight_denom %u > kMaxWeightDenominator %u\n", v170, 7);
                    v49 = *(unsigned __int8 *)(v28 + 556);
                    goto LABEL_398;
                  }
                  *(_BYTE *)(v28 + 557) = 0;
                  if (*(_BYTE *)(*(_QWORD *)(v28 + 16) + 201))
                  {
                    v191 = sub_1C971B8B0(v28 + 1608);
                    v192 = (-((v191 + 1) & 1) ^ ((v191 + 1) >> 1)) + ((v191 + 1) & 1);
                    *(_BYTE *)(v28 + 557) = (-((v191 + 1) & 1) ^ ((v191 + 1) >> 1)) + ((v191 + 1) & 1);
                    v170 = *(_BYTE *)(v28 + 556);
                  }
                  else
                  {
                    LOBYTE(v192) = 0;
                  }
                  v201 = v192 + v170;
                  *(_BYTE *)(v28 + 662) = v192 + v170;
                  if ((v192 + v170) < 8u)
                  {
                    v202 = *(_QWORD *)(v28 + 16);
                    v203 = 14 - *(unsigned __int8 *)(v202 + 2096);
                    if (v203 <= 2)
                      v203 = 2;
                    *(_DWORD *)(v28 + 664) = v203 + v170;
                    v204 = 14 - *(unsigned __int8 *)(v202 + 2098);
                    if (v204 <= 2)
                      v204 = 2;
                    *(_DWORD *)(v28 + 668) = v204 + v201;
                    result = sub_1C977B560(v28, 0);
                    if ((_DWORD)result)
                      return result;
                    if (!*(_BYTE *)(v28 + 58))
                    {
                      result = sub_1C977B560(v28, 1u);
                      if ((_DWORD)result)
                        return result;
                    }
                    goto LABEL_231;
                  }
                  if (dword_1ED1ACCC0 < 3)
                    return 4294954387;
                  v48 = "chromaLog2WeightDenom %d not in [0, %u] (chroma delta %d)\n";
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "chromaLog2WeightDenom %d not in [0, %u] (chroma delta %d)\n", (v192 + v170), (char)v192, 7);
                  v49 = *(unsigned __int8 *)(v28 + 662);
                  v190 = *(char *)(v28 + 557);
                  v256 = 7;
LABEL_343:
                  v255 = v190;
                  goto LABEL_107;
                }
              }
              else if (*(char *)(v28 + 517) < 2)
              {
                goto LABEL_227;
              }
              *(_BYTE *)(v28 + 555) = sub_1C971B8B0(v28 + 1608);
              goto LABEL_227;
            }
            v147 = 0;
            v148 = v28 + 536;
            while (1)
            {
              v194 = sub_1C971C898(v28 + 1608, v145);
              *(_BYTE *)(v148 + v147) = v194;
              if (v194 >= v125)
                break;
              if (++v147 >= *(char *)(v28 + 517))
                goto LABEL_208;
            }
            if (dword_1ED1ACCC0 < 3)
              return 4294954387;
            v200 = "list_entry_l1_[%d] (%d) out of range [0, %d]\n";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "list_entry_l1_[%d] (%d) out of range [0, %d]\n");
          }
          syslog(27, v200, v147, *(unsigned __int8 *)(v148 + v147), v125);
          return 4294954387;
        }
      }
      else
      {
        v94 = 0;
        *(_DWORD *)(v28 + 320) = 0;
      }
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v120 = "short_term_ref_pic_set_idx (%u) >= sps_->num_short_term_ref_pic_sets (%u)!\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "short_term_ref_pic_set_idx (%u) >= sps_->num_short_term_ref_pic_sets (%u)!\n", v94, v92);
      v121 = *(unsigned int *)(v28 + 320);
      v122 = *(unsigned int *)(*(_QWORD *)(v28 + 16) + 288);
LABEL_253:
      syslog(27, v120, v121, v122);
      return 4294954387;
    }
    result = sub_1C96FC5C4(v28 + 72, v28 + 1608, *(_QWORD *)(v28 + 16), *(unsigned int *)(*(_QWORD *)(v28 + 16) + 288));
    if ((_DWORD)result)
      return result;
    v91 = *(_QWORD *)(v28 + 16);
    goto LABEL_178;
  }
LABEL_246:
  v161 = *(_QWORD *)(v28 + 32);
  if (*(_BYTE *)(v161 + 20) || *(_BYTE *)(v161 + 21))
  {
    v162 = sub_1C971B8B0(v28 + 1608);
    *(_DWORD *)(v28 + 568) = v162;
    if (v162 < 1)
    {
      if (v162 < 0)
      {
        if (dword_1ED1ACCC0 < 3)
          return 4294954387;
        v50 = (FILE *)*MEMORY[0x1E0C80C10];
        v48 = "Invalid number of substreams!\n";
        v51 = "Invalid number of substreams!\n";
        v52 = 30;
        goto LABEL_62;
      }
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(v28 + 32) + 21))
      {
        v163 = *(_DWORD *)(*(_QWORD *)(v28 + 16) + 2124);
        if (v162 > v163)
        {
          if (dword_1ED1ACCC0 < 3)
            return 4294954387;
          v120 = "num_entry_point_offsets %d > sps_->picHeightInCtbsY %d!\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_entry_point_offsets %d > sps_->picHeightInCtbsY %d!\n", v162, v163);
          v121 = *(unsigned int *)(v28 + 568);
          v122 = *(unsigned int *)(*(_QWORD *)(v28 + 16) + 2124);
          goto LABEL_253;
        }
      }
      v164 = sub_1C971B8B0(v28 + 1608);
      *(_BYTE *)(v28 + 572) = v164;
      if (v164 >= 0x20u)
      {
        if (dword_1ED1ACCC0 < 3)
          return 4294954387;
        v48 = "offset_len_minus1 %d > 31!\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "offset_len_minus1 %d > 31!\n", v164);
        v49 = *(unsigned __int8 *)(v28 + 572);
        goto LABEL_107;
      }
      sub_1C9710DCC((char **)(v28 + 576), *(int *)(v28 + 568));
      if (*(int *)(v28 + 568) >= 1)
      {
        v165 = 0;
        do
          *(_DWORD *)(*(_QWORD *)(v28 + 576) + 4 * v165++) = sub_1C9713974(v28 + 1608, *(unsigned __int8 *)(v28 + 572) + 1);
        while (v165 < *(int *)(v28 + 568));
      }
    }
  }
  else
  {
    *(_DWORD *)(v28 + 568) = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(v28 + 32) + 1612))
  {
    v166 = sub_1C971B8B0(v28 + 1608);
    *(_WORD *)(v28 + 600) = v166;
    if (v166 >= 0x101u)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v48 = "slice_segment_header_extension_length %d > 256!\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "slice_segment_header_extension_length %d > 256!\n", v166);
      v49 = *(unsigned __int16 *)(v28 + 600);
      goto LABEL_107;
    }
    sub_1C977B928((unint64_t *)(v28 + 608), v166);
    if (*(_WORD *)(v28 + 600))
    {
      v167 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(v28 + 608) + v167++) = sub_1C971C898(v28 + 1608, 8);
      while (v167 < *(unsigned __int16 *)(v28 + 600));
    }
  }
  v168 = *(_QWORD *)(v28 + 1640) + 1;
  *(_QWORD *)(v28 + 1640) = v168;
  *(_DWORD *)(v28 + 1660) = 0;
  v169 = *(_QWORD *)(v28 + 1648);
  if (v168 > v169)
    *(_QWORD *)(v28 + 1640) = v169;
  result = sub_1C9713A00(v28);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(*(_QWORD *)(v28 + 2344) + 58))
      sub_1C974FAE0(v28, (FILE *)*MEMORY[0x1E0C80C10]);
    if ((_DWORD)v7)
    {
LABEL_278:
      if (a1[133].i32[2] <= 0 && *(_BYTE *)(v28 + 58) == 2
        || (result = sub_1C974DADC(v28, &a1[133].i32[2], a1[132].i64[1]), !(_DWORD)result))
      {
        result = 0;
        ++a1[132].i32[0];
      }
      return result;
    }
    if (!*(_BYTE *)(v28 + 48))
      return 4294954387;
    v172 = a1[128].i64[1];
    v173 = *(unsigned __int8 *)(a2 + 18);
    v174 = *(unsigned __int8 *)(v28 + 633);
    if (*(_BYTE *)(v28 + 633))
      *(_BYTE *)(v172 + 202) = *(_BYTE *)(v28 + 638);
    *(_BYTE *)(v172 + 2584) = 0;
    v176 = v28 + 16;
    v175 = *(_QWORD *)(v28 + 16);
    v177 = *(unsigned __int8 *)(v175 + 2129);
    v178 = *(unsigned __int8 *)(v175 + 2128);
    *(_DWORD *)(v172 + 2368) = v173;
    *(_DWORD *)(v172 + 2372) = v177;
    *(_DWORD *)(v172 + 2376) = v178;
    v179 = *(unsigned __int8 *)(v28 + 632);
    if (*(_BYTE *)(v28 + 632))
      v180 = 0;
    else
      v180 = *(_DWORD *)(v172 + 2384);
    if (*(_BYTE *)(v28 + 632))
      v181 = 0;
    else
      v181 = *(_DWORD *)(v172 + 2388);
    v182 = *(_DWORD *)(v28 + 64);
    if (v182 < v180
      && ((v183 = *(_DWORD *)(v175 + 2108), v183 >= 0) ? (v184 = *(_DWORD *)(v175 + 2108)) : (v184 = v183 + 1),
          v180 - v182 >= v184 >> 1))
    {
      v181 += v183;
    }
    else
    {
      v98 = __OFSUB__(v182, v180);
      v185 = v182 - v180;
      if (!((v185 < 0) ^ v98 | (v185 == 0)))
      {
        v186 = *(_DWORD *)(v175 + 2108);
        if (v186 >= 0)
          v187 = *(_DWORD *)(v175 + 2108);
        else
          v187 = v186 + 1;
        if (v185 <= v187 >> 1)
          v188 = 0;
        else
          v188 = *(_DWORD *)(v175 + 2108);
        v181 -= v188;
      }
    }
    *(_DWORD *)(v28 + 644) = v181;
    if (v174 && *(_BYTE *)(v28 + 638))
    {
      v181 = 0;
      *(_DWORD *)(v28 + 644) = 0;
    }
    *(_DWORD *)(v28 + 640) = v181 + v182;
    if (!v173 && !*(_BYTE *)(v28 + 634) && !*(_BYTE *)(v28 + 635) && !*(_BYTE *)(v28 + 636))
    {
      *(_DWORD *)(v172 + 2384) = v182;
      *(_DWORD *)(v172 + 2388) = v181;
    }
    if (!v179)
    {
      if (*(_BYTE *)(v28 + 68))
        v207 = (_BYTE *)(*(_QWORD *)(v175 + 296) + 248 * *(int *)(v28 + 320));
      else
        v207 = (_BYTE *)(v28 + 72);
      result = sub_1C9752480(&a1[133].i32[2], v172 + 1976, v28 + 16, v207, v28 + 324, v181 + v182);
      if ((_DWORD)result)
        return result;
      sub_1C97536B0(v172 + 1976, &a1[133].i32[2]);
      if (*(_BYTE *)(v28 + 58) != 2 && !a1[133].i32[2])
      {
        if (dword_1ED1ACCC0 < 3)
          return 4294954387;
        v50 = (FILE *)*MEMORY[0x1E0C80C10];
        v48 = "P or B slice must have reference frames!\n";
        v51 = "P or B slice must have reference frames!\n";
        v52 = 41;
        goto LABEL_62;
      }
    }
    if (*(_QWORD *)(v172 + 2544) && *(_BYTE *)(v28 + 58) != 2)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v218 = (FILE *)*MEMORY[0x1E0C80C10];
        v219 = "P or B slice not supported in tile decoder!\n";
        v220 = "P or B slice not supported in tile decoder!\n";
        v221 = 44;
        goto LABEL_390;
      }
      return 4294954386;
    }
    sub_1C9713918(v172 + 1976);
    if (*(_BYTE *)(v28 + 633) && *(_BYTE *)(v28 + 638))
    {
      if (!*(_BYTE *)(v28 + 637) && !*(_BYTE *)(v28 + 49))
        sub_1C9715A8C(v172);
      for (i = 0; i != 272; i += 16)
        sub_1C974E55C((_QWORD *)(v172 + 2008 + i));
    }
    else
    {
      sub_1C9715BA8(v172, 0);
    }
    v209 = (_QWORD *)(v172 + 184);
    v208 = *(_QWORD *)(v172 + 184);
    if (!v208)
    {
LABEL_415:
      result = sub_1C96FE08C((unsigned __int8 **)(v28 + 16), (uint64_t *)(v172 + 2536), (_QWORD *)(v172 + 184));
      if ((_DWORD)result)
        return result;
      v208 = *v209;
LABEL_417:
      v226 = (unsigned int **)&a1[132].i64[1];
      if (*(unsigned __int8 *)(v172 + 34) != 255)
        *(_BYTE *)(v208 + 25) = 1;
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v208 + 32))(v208, *(unsigned int *)(v28 + 640), a3, a4, &a1[132].i64[1]);
      if (!(_DWORD)result)
      {
        if (!*(_BYTE *)(*(_QWORD *)v176 + 201))
          sub_1C9747864(*v226);
        *(_BYTE *)(a1[132].i64[1] + 43) = *(_BYTE *)(v28 + 59) ^ 1;
        sub_1C9714DF8(v172 + 1976, a1[132].i64[1], a1[133].i64[0]);
        v227 = 0;
        v228 = 2008;
        while (1)
        {
          v229 = *(_QWORD *)(v172 + v228);
          if (v229)
          {
            if (*(_DWORD *)(v229 + 1024) == *(_DWORD *)(v28 + 640))
              break;
          }
          ++v227;
          v228 += 16;
          if (v227 == 17)
            goto LABEL_447;
        }
        if ((v227 & 0x80000000) == 0)
          *(_BYTE *)(v172 + v227 + 2280) = 1;
LABEL_447:
        sub_1C9715BA8(v172, 1);
        if (*(_BYTE *)(v172 + 357))
        {
          std::mutex::lock((std::mutex *)(v172 + 2472));
          if (!*((_BYTE *)*v226 + 42))
          {
            sub_1C9715DFC((_QWORD *)(v172 + 2424), (__int128 *)&a1[132].u64[1]);
            *((_BYTE *)*v226 + 42) = 1;
          }
          std::mutex::unlock((std::mutex *)(v172 + 2472));
        }
        if (*(_QWORD *)(v172 + 2544)
          || !*(_BYTE *)(*(_QWORD *)v176 + *(unsigned __int8 *)(*(_QWORD *)v176 + 1) + 226))
        {
          v237 = 0;
          v238 = v172 + 2008;
          while (!*(_QWORD *)v238 || *(_DWORD *)(*(_QWORD *)v238 + 1024) != *(_DWORD *)(v28 + 640))
          {
            ++v237;
            v238 += 16;
            if (v237 == 17)
              goto LABEL_465;
          }
          if ((v237 & 0x80000000) == 0)
            *(_BYTE *)(v172 + v237 + 2280) = 0;
LABEL_465:
          sub_1C9713918(v172 + 1976);
        }
        if (!*(_BYTE *)(v172 + 2584))
        {
          v261 = 0uLL;
          sub_1C974C5FC(v172 + 2560, &v261);
          v241 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
          if (*((_QWORD *)&v261 + 1))
          {
            v242 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
          }
        }
        goto LABEL_278;
      }
      return result;
    }
    v210 = *(_QWORD *)(v172 + 2544);
    if (v210)
      v211 = 3;
    else
      v211 = 6;
    v212 = *(_QWORD *)v176;
    v213 = *(_QWORD *)(v208 + 8);
    if (*(unsigned __int8 *)(*(_QWORD *)v176 + 2096) == *(unsigned __int8 *)(v213 + 2096)
      && *(unsigned __int8 *)(v212 + 2098) == *(unsigned __int8 *)(v213 + 2098)
      && *(unsigned __int8 *)(v212 + 201) == *(unsigned __int8 *)(v213 + 201)
      && *(unsigned __int8 *)(v212 + 1991) == *(unsigned __int8 *)(v213 + 1991))
    {
      if ((*(_BYTE *)(v212 + *(unsigned __int8 *)(v212 + 1) + 226) != 0) == (*(_BYTE *)(v213
                                                                                       + *(unsigned __int8 *)(v213 + 1)
                                                                                       + 226) != 0))
      {
        if (*(_DWORD *)(v212 + 204) == *(_DWORD *)(v213 + 204)
          && *(_DWORD *)(v212 + 208) == *(_DWORD *)(v213 + 208)
          && *(unsigned __int8 *)(v212 + 2113) == *(unsigned __int8 *)(v213 + 2113)
          && *(unsigned __int16 *)(v212 + 220) == *(unsigned __int16 *)(v213 + 220)
          && *(unsigned __int16 *)(v212 + 218) == *(unsigned __int16 *)(v213 + 218)
          && *(unsigned __int16 *)(v212 + 214) == *(unsigned __int16 *)(v213 + 214)
          && *(unsigned __int16 *)(v212 + 216) == *(unsigned __int16 *)(v213 + 216))
        {
          v244 = *(unsigned __int8 *)(v212 + 1992) == *(unsigned __int8 *)(v213 + 1992)
              && *(unsigned __int8 *)(v212 + 1994) == *(unsigned __int8 *)(v213 + 1994)
              && *(unsigned __int8 *)(v212 + 1993) == *(unsigned __int8 *)(v213 + 1993)
              && *(unsigned __int8 *)(v212 + 1995) == *(unsigned __int8 *)(v213 + 1995)
              && *(unsigned __int8 *)(v212 + 1996) == *(unsigned __int8 *)(v213 + 1996);
          if (v244 || v211 > dword_1ED1ACCC0)
          {
            if (v244)
              goto LABEL_417;
            goto LABEL_385;
          }
          v214 = (FILE *)*MEMORY[0x1E0C80C10];
          v215 = "SPS change resulted in different colorspace\n";
          v216 = "SPS change resulted in different colorspace\n";
          v217 = 44;
        }
        else
        {
          if (v211 > dword_1ED1ACCC0)
          {
LABEL_385:
            if (v210)
            {
              if (dword_1ED1ACCC0 >= 3)
              {
                v218 = (FILE *)*MEMORY[0x1E0C80C10];
                v219 = "SPS has signficantly changed during tile decode\n";
                v220 = "SPS has signficantly changed during tile decode\n";
                v221 = 48;
LABEL_390:
                fwrite(v220, v221, 1uLL, v218);
                syslog(27, v219);
                return 4294954386;
              }
              return 4294954386;
            }
            sub_1C9715A8C(v172);
            for (j = 0; j != 272; j += 16)
              sub_1C974E55C((_QWORD *)(v172 + 2008 + j));
            sub_1C97173C8(&a1[133].i64[1]);
            if (*v209)
              (*(void (**)(_QWORD))(*(_QWORD *)*v209 + 8))(*v209);
            *(_QWORD *)(v172 + 184) = 0;
            v261 = 0uLL;
            sub_1C974C5FC(v172 + 2560, &v261);
            v223 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
            if (*((_QWORD *)&v261 + 1))
            {
              v224 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
              do
                v225 = __ldaxr(v224);
              while (__stlxr(v225 - 1, v224));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                std::__shared_weak_count::__release_weak(v223);
              }
            }
            v208 = *v209;
            if (*v209)
              goto LABEL_417;
            goto LABEL_415;
          }
          v214 = (FILE *)*MEMORY[0x1E0C80C10];
          v215 = "SPS change resulted in different buffer size\n";
          v216 = "SPS change resulted in different buffer size\n";
          v217 = 45;
        }
      }
      else
      {
        if (v211 > dword_1ED1ACCC0)
          goto LABEL_385;
        v214 = (FILE *)*MEMORY[0x1E0C80C10];
        v215 = "SPS change resulted in different profile!\n";
        v216 = "SPS change resulted in different profile!\n";
        v217 = 42;
      }
    }
    else
    {
      if (v211 > dword_1ED1ACCC0)
        goto LABEL_385;
      v214 = (FILE *)*MEMORY[0x1E0C80C10];
      v215 = "New SPS changed pixel format\n";
      v216 = "New SPS changed pixel format\n";
      v217 = 29;
    }
    fwrite(v216, v217, 1uLL, v214);
    syslog(v211 | 0x18, v215);
    v210 = *(_QWORD *)(v172 + 2544);
    goto LABEL_385;
  }
  return result;
}

void sub_1C97138CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9713918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 32;
  v3 = 304;
  do
  {
    v4 = *(_QWORD *)(a1 + v2);
    if (v4 && !*(_BYTE *)(a1 + v3))
    {
      if (*(_BYTE *)(v4 + 43))
        sub_1C974E55C((_QWORD *)(a1 + v2));
    }
    v2 += 16;
    ++v3;
  }
  while (v2 != 304);
}

uint64_t sub_1C9713974(uint64_t a1, int a2)
{
  int v4;

  if (a2 <= 25)
    return sub_1C971C898(a1, a2);
  v4 = sub_1C971C898(a1, a2 - 16);
  return sub_1C971C898(a1, 16) + (v4 << 16);
}

uint64_t sub_1C97139C8(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  return sub_1C972CFE0(v1);
}

uint64_t sub_1C9713A00(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = *(_QWORD *)(a1 + 2336);
  if (*(_BYTE *)(a1 + 56))
  {
    *(_DWORD *)(a1 + 648) = *(_DWORD *)(v2 + 648);
    *(_BYTE *)(a1 + 1385) = *(_BYTE *)(v2 + 1385);
    *(_DWORD *)(a1 + 57) = *(_DWORD *)(v2 + 57);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v2 + 64);
    v3 = *(unsigned __int8 *)(v2 + 68);
    *(_BYTE *)(a1 + 68) = v3;
    if (v3)
    {
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(v2 + 320);
    }
    else
    {
      v4 = *(_OWORD *)(v2 + 72);
      v5 = *(_OWORD *)(v2 + 88);
      v6 = *(_OWORD *)(v2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(v2 + 120);
      *(_OWORD *)(a1 + 104) = v6;
      *(_OWORD *)(a1 + 88) = v5;
      *(_OWORD *)(a1 + 72) = v4;
      v7 = *(_OWORD *)(v2 + 136);
      v8 = *(_OWORD *)(v2 + 152);
      v9 = *(_OWORD *)(v2 + 168);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(v2 + 184);
      *(_OWORD *)(a1 + 168) = v9;
      *(_OWORD *)(a1 + 152) = v8;
      *(_OWORD *)(a1 + 136) = v7;
      v10 = *(_OWORD *)(v2 + 200);
      v11 = *(_OWORD *)(v2 + 216);
      v12 = *(_OWORD *)(v2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(v2 + 248);
      *(_OWORD *)(a1 + 232) = v12;
      *(_OWORD *)(a1 + 216) = v11;
      *(_OWORD *)(a1 + 200) = v10;
      v13 = *(_OWORD *)(v2 + 264);
      v14 = *(_OWORD *)(v2 + 280);
      v15 = *(_OWORD *)(v2 + 296);
      *(_QWORD *)(a1 + 310) = *(_QWORD *)(v2 + 310);
      *(_OWORD *)(a1 + 280) = v14;
      *(_OWORD *)(a1 + 296) = v15;
      *(_OWORD *)(a1 + 264) = v13;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 320))
    {
      v16 = *(_OWORD *)(v2 + 324);
      v17 = *(_OWORD *)(v2 + 340);
      v18 = *(_OWORD *)(v2 + 372);
      *(_OWORD *)(a1 + 356) = *(_OWORD *)(v2 + 356);
      *(_OWORD *)(a1 + 372) = v18;
      *(_OWORD *)(a1 + 324) = v16;
      *(_OWORD *)(a1 + 340) = v17;
      v19 = *(_OWORD *)(v2 + 388);
      v20 = *(_OWORD *)(v2 + 404);
      v21 = *(_OWORD *)(v2 + 436);
      *(_OWORD *)(a1 + 420) = *(_OWORD *)(v2 + 420);
      *(_OWORD *)(a1 + 436) = v21;
      *(_OWORD *)(a1 + 388) = v19;
      *(_OWORD *)(a1 + 404) = v20;
      v22 = *(_OWORD *)(v2 + 452);
      v23 = *(_OWORD *)(v2 + 468);
      v24 = *(_OWORD *)(v2 + 484);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(v2 + 496);
      *(_OWORD *)(a1 + 468) = v23;
      *(_OWORD *)(a1 + 484) = v24;
      *(_OWORD *)(a1 + 452) = v22;
    }
    else
    {
      *(_QWORD *)(a1 + 324) = 0;
      *(_DWORD *)(a1 + 508) = 0;
    }
    *(_WORD *)(a1 + 513) = *(_WORD *)(v2 + 513);
    *(_BYTE *)(a1 + 512) = *(_BYTE *)(v2 + 512);
    *(_WORD *)(a1 + 516) = *(_WORD *)(v2 + 516);
    *(_BYTE *)(a1 + 515) = *(_BYTE *)(v2 + 515);
    *(_WORD *)(a1 + 518) = *(_WORD *)(v2 + 518);
    v25 = *(_OWORD *)(v2 + 536);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(v2 + 520);
    *(_OWORD *)(a1 + 536) = v25;
    *(_DWORD *)(a1 + 552) = *(_DWORD *)(v2 + 552);
    *(_WORD *)(a1 + 556) = *(_WORD *)(v2 + 556);
    *(_BYTE *)(a1 + 662) = *(_BYTE *)(v2 + 662);
    *(_QWORD *)(a1 + 664) = *(_QWORD *)(v2 + 664);
    memcpy((void *)(a1 + 672), (const void *)(v2 + 672), 0x200uLL);
    *(_QWORD *)(a1 + 558) = *(_QWORD *)(v2 + 558);
    *(_WORD *)(a1 + 566) = *(_WORD *)(v2 + 566);
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)(a1 + 640) = *(_QWORD *)(v2 + 640);
    *(_DWORD *)(a1 + 2256) = *(_DWORD *)(v2 + 2256);
    v26 = *(_OWORD *)(v2 + 2224);
    *(_OWORD *)(a1 + 2240) = *(_OWORD *)(v2 + 2240);
    *(_OWORD *)(a1 + 2224) = v26;
  }
  *(_BYTE *)(a1 + 652) = 5 - *(_BYTE *)(a1 + 558);
  *(_BYTE *)(a1 + 660) = 2 * *(_BYTE *)(a1 + 565);
  *(_BYTE *)(a1 + 661) = 2 * *(_BYTE *)(a1 + 566);
  sub_1C9714D1C(a1);
  v27 = *(_DWORD *)(a1 + 52);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_DWORD *)(v28 + 2120);
  v30 = *(_DWORD *)(v28 + 2124);
  if (v27 < 0 || v27 >= v30 * v29)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "slice_segment_address_ of %lld is out of range (%lld, %lld)\n", v27, 0, v30 * (uint64_t)v29 - 1);
      syslog(27, "slice_segment_address_ of %lld is out of range (%lld, %lld)\n");
    }
    return 4294954387;
  }
  if (*(_BYTE *)(a1 + 56))
    goto LABEL_14;
  if (*(_BYTE *)(v28 + 202))
  {
    v33 = *(unsigned __int8 *)(a1 + 60);
    if (v33 >= 3)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v41 = 2;
      v36 = "colour_plane_id_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "colour_plane_id_ of %lld is out of range (%lld, %lld)\n", v33, 0, 2);
      v37 = *(unsigned __int8 *)(a1 + 60);
LABEL_82:
      v61 = v41;
      goto LABEL_83;
    }
  }
  if (!*(_BYTE *)(a1 + 632))
  {
    v42 = *(_DWORD *)(a1 + 64);
    v43 = *(_DWORD *)(v28 + 2108);
    if (v42 < 0 || v42 >= v43)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v36 = "slice_pic_order_cnt_lsb_ of %lld is out of range (%lld, %lld)\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "slice_pic_order_cnt_lsb_ of %lld is out of range (%lld, %lld)\n", v42, 0, v43 - 1);
        v37 = *(int *)(a1 + 64);
        v38 = *(int *)(*(_QWORD *)(a1 + 16) + 2108);
        goto LABEL_62;
      }
      return 4294954387;
    }
    if (*(_BYTE *)(a1 + 68))
    {
      v44 = *(int *)(a1 + 320);
      v45 = *(unsigned int *)(v28 + 288);
      if ((v44 & 0x80000000) != 0 || v44 > (v45 - 1))
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          v36 = "short_term_ref_pic_set_idx_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "short_term_ref_pic_set_idx_ of %lld is out of range (%lld, %lld)\n", v44, 0, v45 - 1);
          v37 = *(int *)(a1 + 320);
          v38 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 288);
          goto LABEL_62;
        }
        return 4294954387;
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 58) <= 1u)
  {
    if (*(_BYTE *)(a1 + 514))
    {
      v34 = *(unsigned __int8 *)(a1 + 555);
      if (*(_BYTE *)(a1 + 554))
      {
        v35 = *(char *)(a1 + 516);
        if (v35 <= v34)
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            v36 = "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n", v34, 0, v35 - 1);
            v37 = *(unsigned __int8 *)(a1 + 555);
            v38 = *(char *)(a1 + 516);
LABEL_62:
            v61 = v38 - 1;
LABEL_83:
            v60 = 0;
            goto LABEL_84;
          }
          return 4294954387;
        }
      }
      else
      {
        v46 = *(char *)(a1 + 517);
        if (v46 <= v34)
        {
          if (dword_1ED1ACCC0 < 3)
            return 4294954387;
          v36 = "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n", v34, 0, v46 - 1);
          v37 = *(unsigned __int8 *)(a1 + 555);
          v38 = *(char *)(a1 + 517);
          goto LABEL_62;
        }
      }
    }
    v47 = *(unsigned __int8 *)(a1 + 558);
    if (v47 >= 5)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v41 = 4;
      v36 = "five_minus_max_num_merge_cand_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "five_minus_max_num_merge_cand_ of %lld is out of range (%lld, %lld)\n", v47, 0, 4);
      v37 = *(unsigned __int8 *)(a1 + 558);
      goto LABEL_82;
    }
  }
  v48 = *(char **)(a1 + 32);
  v49 = v48[9] + (uint64_t)*(char *)(a1 + 559) + 26;
  v50 = -(uint64_t)*(unsigned __int8 *)(v28 + 2097);
  if (v49 > 51 || v49 < v50)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v36 = "26+pps_->init_qp_minus26_+slice_qp_delta_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "26+pps_->init_qp_minus26_+slice_qp_delta_ of %lld is out of range (%lld, %lld)\n", v49, v50, 51);
      v37 = *(char *)(*(_QWORD *)(a1 + 32) + 9) + (uint64_t)*(char *)(a1 + 559) + 26;
      v60 = -(uint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2097);
      v61 = 51;
LABEL_84:
      syslog(27, v36, v37, v60, v61);
      return 4294954387;
    }
    return 4294954387;
  }
  if (!v48[16])
    goto LABEL_75;
  v52 = *(char *)(a1 + 560) + (uint64_t)v48[14];
  if ((unint64_t)(v52 + 12) >= 0x19)
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954387;
    v56 = 12;
    v57 = -12;
    v36 = "pps_->pps_cb_qp_offset_+slice_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "pps_->pps_cb_qp_offset_+slice_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n", v52, -12, 12);
    v58 = *(char *)(*(_QWORD *)(a1 + 32) + 14);
    v59 = *(char *)(a1 + 560);
    goto LABEL_95;
  }
  v53 = *(char *)(a1 + 561) + (uint64_t)v48[15];
  if ((unint64_t)(v53 + 12) >= 0x19)
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954387;
    v56 = 12;
    v57 = -12;
    v36 = "pps_->pps_cr_qp_offset_+slice_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "pps_->pps_cr_qp_offset_+slice_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n", v53, -12, 12);
    v58 = *(char *)(*(_QWORD *)(a1 + 32) + 15);
    v59 = *(char *)(a1 + 561);
LABEL_95:
    v37 = v59 + v58;
    goto LABEL_96;
  }
LABEL_75:
  if (v48[29])
  {
    v54 = *(char *)(a1 + 565);
    if ((v54 + 6) >= 0xDu)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v56 = 6;
      v57 = -6;
      v36 = "slice_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "slice_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n", v54, -6, 6);
      v37 = *(char *)(a1 + 565);
      goto LABEL_96;
    }
    v55 = *(char *)(a1 + 566);
    if ((v55 + 6) >= 0xDu)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v56 = 6;
      v57 = -6;
      v36 = "slice_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "slice_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n", v55, -6, 6);
      v37 = *(char *)(a1 + 566);
LABEL_96:
      v60 = v57;
      v61 = v56;
      goto LABEL_84;
    }
  }
LABEL_14:
  v31 = *(_QWORD *)(a1 + 2280);
  if (v31)
  {
    if (*(_BYTE *)(a1 + 635) && *(_BYTE *)(v31 + 2049))
      *(_BYTE *)(a1 + 59) = 0;
    if (*(_BYTE *)(a1 + 48))
    {
      result = sub_1C971447C(v31 + 8, a1);
      if ((_DWORD)result)
        return result;
      result = sub_1C9714A30((void (**)(__int32 *, uint64_t, int32x4_t *, int, int))(*(_QWORD *)(a1 + 2280) + 552), a1);
      if ((_DWORD)result)
        return result;
      result = sub_1C9714864((_QWORD *)(*(_QWORD *)(a1 + 2280) + 952), *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2096), *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2098), 1);
      if ((_DWORD)result)
        return result;
      result = sub_1C9714274(*(_QWORD *)(a1 + 2280) + 1128, a1);
      if ((_DWORD)result)
        return result;
      result = sub_1C9715578(*(_QWORD *)(a1 + 2280) + 1264, a1);
      if ((_DWORD)result)
        return result;
      v31 = *(_QWORD *)(a1 + 2280);
      *(_WORD *)(v31 + 2050) = 0;
    }
    else if (*(unsigned __int8 *)(v2 + 565) != *(unsigned __int8 *)(a1 + 565)
           || *(unsigned __int8 *)(v2 + 566) != *(unsigned __int8 *)(a1 + 566))
    {
      *(_QWORD *)(v31 + 1176) = *(_QWORD *)(v31 + 1184);
    }
    if (*(_BYTE *)(a1 + 512) || *(_BYTE *)(a1 + 513))
      *(_BYTE *)(v31 + 2050) = 1;
    if (!*(_BYTE *)(a1 + 564))
      *(_BYTE *)(v31 + 2051) = 1;
  }
  v39 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v39 + 17) && *(_BYTE *)(a1 + 58) == 1)
  {
    v40 = 1;
  }
  else if (*(_BYTE *)(v39 + 18))
  {
    v40 = *(_BYTE *)(a1 + 58) == 0;
  }
  else
  {
    v40 = 0;
  }
  result = 0;
  *(_QWORD *)(a1 + 2288) = *(&off_1E8292188[4 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 2148)] + 2 * v40);
  *(_QWORD *)(a1 + 2296) = 0;
  return result;
}

uint64_t sub_1C9714274(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  _BOOL4 v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, int, int, uint64_t, int, uint64_t);
  uint64_t (*v15)(uint64_t, int, int, uint64_t, int, uint64_t);

  v2 = *(unsigned __int8 **)(a2 + 16);
  v3 = v2[201];
  *(_BYTE *)(a1 + 128) = v3;
  v4 = v2[2096];
  if (v4 <= 0xC && (v5 = v2[2098], v5 < 0xD))
  {
    v10 = v4 > 8 || v5 > 8;
    (*(&off_1E8292068[4 * v3] + 2 * v10))();
    if (v10)
    {
      ((void (*)(uint64_t))off_1E82920E8[4 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 222)])(a1);
      ((void (*)(uint64_t))off_1E82920E8[4 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 223) + 2])(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 72) = sub_1C970D5A4;
      *(_QWORD *)(a1 + 80) = sub_1C970D174;
      v11 = sub_1C9810B78;
      v12 = sub_1C9810C0C;
      v13 = *(unsigned __int8 *)(a1 + 128);
      if (v13 < 2)
        v12 = sub_1C970DA84;
      v14 = sub_1C9810D50;
      if (v13 != 2)
        v14 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1C970DC44;
      if (v13 < 3)
        v11 = sub_1C970DBBC;
      *(_QWORD *)(a1 + 88) = v12;
      *(_QWORD *)(a1 + 96) = v11;
      v15 = sub_1C9811248;
      if (v13 != 3)
        v15 = v14;
      *(_QWORD *)(a1 + 48) = v15;
      *(_QWORD *)(a1 + 104) = sub_1C9811774;
      *(_QWORD *)(a1 + 112) = sub_1C9811F5C;
    }
    result = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Unsupported bit depth\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Unsupported bit depth\n");
    }
    return 4294954386;
  }
  return result;
}

_QWORD *sub_1C97143F8(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19))
  {
    v2 = sub_1C978C9A0;
    v3 = sub_1C978BF04;
  }
  else
  {
    v3 = sub_1C978BF04;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    {
      v2 = sub_1C978C9A0;
    }
    else
    {
      v3 = sub_1C970CCA8;
      v2 = sub_1C978C508;
    }
  }
  *result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1C978CEF8;
  result[5] = 0;
  result[6] = sub_1C978B660;
  result[7] = sub_1C978B660;
  result[8] = sub_1C9784130;
  return result;
}

uint64_t sub_1C971447C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  void *v9;
  int v10;
  void *(*v11)(void *, unsigned int, uint64_t, uint64_t, uint64_t);
  BOOL v12;
  char *(*v13)(char *, unsigned int, uint64_t, uint64_t, uint64_t);

  v4 = *(unsigned __int8 **)(a2 + 16);
  *(_BYTE *)(a1 + 536) = v4[406];
  v5 = v4[397];
  *(_BYTE *)(a1 + 537) = v5;
  *(_BYTE *)(a1 + 538) = v4[2148];
  v6 = v4[2096];
  if (v6 == 8)
  {
    v7 = v4[2098];
    if (v7 == 8)
    {
      result = 0;
      *(_QWORD *)(a1 + 208) = sub_1C975E2DC;
      *(_QWORD *)(a1 + 216) = sub_1C975E2F8;
      *(_QWORD *)(a1 + 224) = sub_1C975E318;
      *(_QWORD *)(a1 + 232) = sub_1C975E338;
      *(_QWORD *)(a1 + 128) = sub_1C975E388;
      *(_QWORD *)(a1 + 136) = sub_1C975E3B0;
      *(_QWORD *)(a1 + 144) = sub_1C975E3D8;
      *(_QWORD *)(a1 + 152) = sub_1C975E3FC;
      *(_QWORD *)(a1 + 520) = sub_1C975E424;
      *(_QWORD *)(a1 + 32) = sub_1C970A640;
      *(_QWORD *)(a1 + 40) = sub_1C970ADCC;
      if (v5)
        v9 = sub_1C978FD40;
      else
        v9 = sub_1C970EE04;
      *(_QWORD *)(a1 + 288) = sub_1C970B85C;
      *(_QWORD *)(a1 + 296) = sub_1C970AF78;
      *(_QWORD *)(a1 + 304) = sub_1C970F238;
      *(_QWORD *)(a1 + 312) = sub_1C978FE00;
      *(_QWORD *)(a1 + 160) = sub_1C970A180;
      *(_QWORD *)(a1 + 168) = sub_1C970C4E0;
      *(_QWORD *)(a1 + 176) = sub_1C970F654;
      *(_QWORD *)(a1 + 184) = sub_1C9717E30;
      *(_QWORD *)(a1 + 192) = sub_1C97905DC;
      *(_QWORD *)(a1 + 200) = sub_1C975E2C0;
      *(_QWORD *)(a1 + 80) = sub_1C970A230;
      *(_QWORD *)(a1 + 88) = sub_1C970C16C;
      *(_QWORD *)(a1 + 96) = sub_1C970FFB4;
      *(_QWORD *)(a1 + 104) = sub_1C9790604;
      *(_QWORD *)(a1 + 112) = sub_1C97906CC;
      *(_QWORD *)(a1 + 120) = sub_1C975E360;
      *(_QWORD *)(a1 + 320) = sub_1C970A1C8;
      *(_QWORD *)(a1 + 328) = sub_1C970BDC4;
      *(_QWORD *)(a1 + 336) = sub_1C970C600;
      *(_QWORD *)(a1 + 344) = sub_1C9718484;
      *(_QWORD *)(a1 + 240) = sub_1C9708284;
      *(_QWORD *)(a1 + 248) = sub_1C970A27C;
      *(_QWORD *)(a1 + 256) = sub_1C97028DC;
      *(_QWORD *)(a1 + 264) = sub_1C9717E50;
      *(_QWORD *)(a1 + 272) = sub_1C9790848;
      *(_QWORD *)(a1 + 280) = sub_1C97091D8;
      *(_QWORD *)a1 = sub_1C9707238;
      *(_QWORD *)(a1 + 8) = sub_1C97086EC;
      v10 = *(unsigned __int8 *)(a1 + 538);
      v11 = sub_1C975D690;
      if (v10 == 2)
        v11 = sub_1C975D398;
      v12 = v10 == 3;
      v13 = sub_1C975D924;
      if (!v12)
        v13 = (char *(*)(char *, unsigned int, uint64_t, uint64_t, uint64_t))v11;
      *(_QWORD *)(a1 + 16) = sub_1C975DF3C;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = sub_1C975DC3C;
      *(_QWORD *)(a1 + 64) = sub_1C975DCE4;
      *(_QWORD *)(a1 + 72) = sub_1C975DD8C;
      *(_QWORD *)(a1 + 528) = sub_1C975DE34;
      *(_QWORD *)(a1 + 352) = sub_1C97907C0;
      *(_QWORD *)(a1 + 360) = sub_1C970A588;
      *(_QWORD *)(a1 + 368) = sub_1C970B9B8;
      *(_QWORD *)(a1 + 376) = sub_1C970EF9C;
      *(_QWORD *)(a1 + 384) = sub_1C9790F0C;
      *(_QWORD *)(a1 + 392) = sub_1C970AB30;
      *(_QWORD *)(a1 + 400) = sub_1C970CC8C;
      *(_QWORD *)(a1 + 408) = sub_1C9717A30;
      *(_QWORD *)(a1 + 416) = sub_1C97913B8;
      *(_QWORD *)(a1 + 424) = sub_1C970AB00;
      *(_QWORD *)(a1 + 432) = sub_1C970F7BC;
      *(_QWORD *)(a1 + 440) = sub_1C971FE38;
      *(_QWORD *)(a1 + 448) = sub_1C97913E0;
      *(_QWORD *)(a1 + 456) = sub_1C970AEB4;
      *(_QWORD *)(a1 + 464) = sub_1C970C5B8;
      *(_QWORD *)(a1 + 472) = sub_1C9718418;
      *(_QWORD *)(a1 + 480) = sub_1C97914CC;
      *(_QWORD *)(a1 + 488) = sub_1C9709128;
      *(_QWORD *)(a1 + 496) = sub_1C97025B0;
      *(_QWORD *)(a1 + 504) = sub_1C9717A50;
      *(_QWORD *)(a1 + 512) = sub_1C979156C;
      return result;
    }
    goto LABEL_13;
  }
  if (v6 <= 0xC)
  {
    v7 = v4[2098];
LABEL_13:
    if (v7 <= 0xC)
    {
      ((void (*)(uint64_t))*(&off_1E8291E20 + 4 * v4[222]))(a1);
      ((void (*)(uint64_t))*(&off_1E8291E20 + 4 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 223) + 2))(a1);
      return 0;
    }
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Luma/Chroma bitdepth %d/%d not supported\n", v6, v4[2098]);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 2096), *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 2098));
  }
  return 4294954386;
}

uint64_t sub_1C9714864(_QWORD *a1, int a2, int a3, int a4)
{
  _BOOL4 v7;
  uint64_t (**v8)();
  uint64_t result;

  v7 = a2 > 12 || a3 > 12;
  if (a4)
  {
    if (!v7)
    {
      if (a2 != 8 || a3 != 8)
      {
        v8 = &off_1E8291D40;
        result = ((uint64_t (*)(_QWORD *))*(&off_1E8291D40 + 4 * a2 - 32))(a1);
        if ((_DWORD)result)
          return result;
        goto LABEL_22;
      }
      goto LABEL_19;
    }
  }
  else if (!v7)
  {
    if (a2 != 8 || a3 != 8)
    {
      v8 = &off_1E8291CA0;
      result = ((uint64_t (*)(_QWORD *))*(&off_1E8291CA0 + 4 * a2 - 32))(a1);
      if ((_DWORD)result)
        return result;
LABEL_22:
      result = ((uint64_t (*)(_QWORD *))v8[4 * a3 - 30])(a1);
      if ((_DWORD)result)
        return result;
      return 0;
    }
LABEL_19:
    *a1 = sub_1C975F370;
    a1[1] = sub_1C975F670;
    a1[2] = sub_1C975F8DC;
    a1[3] = sub_1C975FFEC;
    a1[8] = sub_1C9760714;
    a1[9] = sub_1C9760A7C;
    a1[10] = sub_1C9760D10;
    a1[11] = sub_1C9761408;
    a1[4] = sub_1C975F370;
    a1[5] = sub_1C9762038;
    a1[6] = sub_1C97622E0;
    a1[7] = sub_1C97626BC;
    a1[12] = sub_1C9760714;
    a1[13] = sub_1C9762C34;
    a1[14] = sub_1C9762EE0;
    a1[15] = sub_1C9763264;
    a1[20] = sub_1C9761AE8;
    a1[21] = sub_1C9761AE8;
    a1[16] = sub_1C9761C4C;
    a1[17] = sub_1C9761C4C;
    a1[18] = sub_1C9761E00;
    a1[19] = sub_1C9761E00;
    return 0;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Luma/Chroma bitdepth %d/%d not supported\n", a2, a3);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", a2, a3);
  }
  return 4294954386;
}

uint64_t sub_1C9714A30(void (**a1)(__int32 *a1, uint64_t a2, int32x4_t *a3, int a4, int a5), uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;

  v4 = *(unsigned __int8 **)(a2 + 16);
  v5 = v4[2096];
  if (v5 == 8)
  {
    v6 = v4[2098];
    if (v6 == 8)
    {
      result = 0;
      a1[24] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9755974;
      a1[25] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C97559A0;
      a1[46] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C97551B4;
      a1[47] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9755224;
      a1[40] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C98193D4;
      a1[41] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819444;
      a1[8] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C98194DC;
      a1[9] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819594;
      a1[10] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C98196C0;
      a1[11] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C981979C;
      *a1 = sub_1C9819908;
      a1[1] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9708118;
      a1[2] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C970A330;
      a1[4] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C970BE80;
      a1[6] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C970F81C;
      a1[22] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819A14;
      a1[23] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819A28;
      a1[30] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9755188;
      a1[31] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819A4C;
      a1[32] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819AA8;
      a1[33] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819AC4;
      a1[28] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9755974;
      a1[29] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C97559A0;
      a1[38] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9755BE0;
      a1[39] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819384;
      a1[48] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9755AC4;
      a1[49] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9755AC4;
      a1[42] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819494;
      a1[43] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C98235B4;
      a1[44] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9823620;
      a1[45] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C982366C;
      a1[12] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819858;
      a1[13] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C98236A8;
      a1[14] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C982377C;
      a1[15] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C98237E8;
      a1[16] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9708BAC;
      a1[17] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C970C794;
      a1[18] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9710178;
      a1[19] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9823854;
      a1[20] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819A00;
      a1[21] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819A00;
      a1[26] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819A14;
      a1[27] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819A28;
      a1[34] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9819AE0;
      a1[35] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9708D08;
      a1[36] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9823E34;
      a1[37] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1C9823F5C;
      return result;
    }
  }
  else
  {
    if (v5 > 0xC)
      goto LABEL_8;
    v6 = v4[2098];
  }
  if (v6 <= 0xC)
  {
    ((void (*)(void (**)(__int32 *, uint64_t, int32x4_t *, int, int)))off_1E8292228[4 * v4[222]])(a1);
    ((void (*)(void (**)(__int32 *, uint64_t, int32x4_t *, int, int)))off_1E8292228[4 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 223) + 2])(a1);
    return 0;
  }
LABEL_8:
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Luma/Chroma bitdepth %d/%d not supported\n", v5, v4[2098]);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 2096), *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 2098));
  }
  return 4294954386;
}

void sub_1C9714CD4(uint64_t a1)
{
  uint64_t v2;

  v2 = -256;
  do
  {
    sub_1C974E55C((_QWORD *)(a1 + v2 + 1928));
    sub_1C974E55C((_QWORD *)(a1 + v2 + 2184));
    v2 += 16;
  }
  while (v2);
  sub_1C974E55C((_QWORD *)(a1 + 2184));
}

uint64_t sub_1C9714D1C(uint64_t result)
{
  uint64_t v1;
  int v2;
  char *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(unsigned __int8 *)(v1 + 2097);
  v3 = *(char **)(result + 32);
  v4 = v3[9] + *(char *)(result + 559) + 26;
  if (v4 >= 51)
    v5 = 51;
  else
    v5 = v3[9] + *(char *)(result + 559) + 26;
  if (v4 <= -v2)
    v6 = -v2;
  else
    v6 = v5;
  *(_BYTE *)(result + 653) = v6;
  v7 = *(char *)(result + 560);
  v8 = v6 + v3[14] + v7;
  v9 = *(unsigned __int8 *)(v1 + 2099);
  if (v8 >= 57)
    v10 = 57;
  else
    v10 = v6 + v3[14] + v7;
  if (v8 <= -v9)
    v11 = -v9;
  else
    v11 = v10;
  if (v11 >= 30)
    LOBYTE(v11) = byte_1C9861020[v11 - 30];
  *(_BYTE *)(result + 654) = v11;
  v12 = *(_BYTE *)(result + 561);
  v13 = v6 + v3[15] + v12;
  v14 = *(unsigned __int8 *)(v1 + 2099);
  if (v13 >= 57)
    v15 = 57;
  else
    v15 = v13;
  if (v13 <= -v14)
    v16 = -v14;
  else
    v16 = v15;
  if (v16 >= 30)
    LOBYTE(v16) = byte_1C9861020[v16 - 30];
  *(_BYTE *)(result + 655) = v16;
  *(_BYTE *)(result + 656) = 0;
  *(_BYTE *)(result + 657) = v3[14] + v7;
  *(_BYTE *)(result + 658) = v3[15] + v12;
  return result;
}

uint64_t sub_1C9714DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  for (i = 32; i != 304; i += 16)
  {
    if (!*(_QWORD *)(a1 + i))
    {
      sub_1C9746DB4((_QWORD *)(a1 + i), a2, a3);
      return 0;
    }
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("DPB overflow!\n", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "DPB overflow!\n");
  }
  return 4294954387;
}

uint64_t sub_1C9714E80(uint64_t a1, int a2, CVPixelBufferRef pixelBuffer, int64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  int Width;
  int Height;
  uint64_t result;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int64x2_t v64;
  int64x2_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  _BYTE *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = 0;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(unsigned __int8 *)(a1 + 25);
  if (pixelBuffer)
  {
    v12 = v10 != 0;
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    result = sub_1C971648C(v9, a1, 0, v12, &v99, pixelBuffer, a4, Width - (int)a4, Height - HIDWORD(a4));
  }
  else
  {
    result = sub_1C971648C(v9, a1, 0, v10 != 0, &v99, 0, a4, 0, 0);
  }
  if ((_DWORD)result)
    return result;
  v16 = v99;
  *(_DWORD *)(v99 + 1024) = a2;
  *(_BYTE *)(v16 + 1173) = *(_BYTE *)(a1 + 64);
  v17 = *(unsigned __int8 *)(a1 + 24);
  v18 = *(_DWORD *)(v16 + 1028);
  v19 = ~(-1 << v18);
  v20 = (*(_DWORD *)(v16 + 520) + v19) >> v18;
  *(_DWORD *)(v16 + 992) = v20;
  v21 = (*(_DWORD *)(v16 + 524) + v19) >> v18;
  *(_DWORD *)(v16 + 996) = v21;
  v22 = ((v20 << v18) + 7) >> 3;
  *(_QWORD *)(v16 + 752) = v22;
  v23 = ((v21 << v18) + 7) >> 3;
  *(_QWORD *)(v16 + 760) = v23;
  v24 = ((_DWORD)v22 + 7) & 0x3FFFFFF8;
  *(_QWORD *)(v16 + 768) = v24;
  v25 = v23 + 3;
  if (v17)
  {
    *(_QWORD *)(v16 + 800) = 0;
    sub_1C9748C8C((char **)(v16 + 808), (((_DWORD)v23 + 7) & 0x3FFFFFF8 | 2u) * (unint64_t)v24);
    *(_QWORD *)(v16 + 800) = *(_QWORD *)(v16 + 808) + 2 * *(_QWORD *)(v16 + 768);
    goto LABEL_24;
  }
  v26 = v25 * (unint64_t)v24 + 8;
  v27 = *(_QWORD *)(v16 + 784);
  v28 = *(_QWORD *)(v16 + 776);
  v29 = (v27 - v28) >> 1;
  if (v26 <= v29)
  {
    if (v26 >= v29)
      goto LABEL_24;
    v41 = v28 + 2 * v26;
    goto LABEL_23;
  }
  v30 = v26 - v29;
  v31 = *(_QWORD *)(v16 + 792);
  if (v26 - v29 <= (v31 - v27) >> 1)
  {
    bzero(*(void **)(v16 + 784), 2 * v30);
    v41 = v27 + 2 * v30;
LABEL_23:
    *(_QWORD *)(v16 + 784) = v41;
    goto LABEL_24;
  }
  v32 = v31 - v28;
  if (v32 > v26)
    v26 = v32;
  if (v32 >= 0x7FFFFFFFFFFFFFFELL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v26;
  if (v33 < 0)
    goto LABEL_90;
  v34 = (char *)operator new(2 * v33);
  v35 = &v34[2 * v29];
  v36 = &v34[2 * v33];
  bzero(v35, 2 * v30);
  v37 = &v35[2 * v30];
  v38 = *(char **)(v16 + 784);
  v39 = *(char **)(v16 + 776);
  if (v38 != v39)
  {
    do
    {
      v40 = *((_WORD *)v38 - 1);
      v38 -= 2;
      *((_WORD *)v35 - 1) = v40;
      v35 -= 2;
    }
    while (v38 != v39);
    v38 = *(char **)(v16 + 776);
  }
  *(_QWORD *)(v16 + 776) = v35;
  *(_QWORD *)(v16 + 784) = v37;
  *(_QWORD *)(v16 + 792) = v36;
  if (v38)
    operator delete(v38);
LABEL_24:
  v42 = 2 * *(_QWORD *)(v16 + 752);
  *(_QWORD *)(v16 + 832) = v42;
  v43 = 2 * *(_QWORD *)(v16 + 760);
  *(_QWORD *)(v16 + 840) = v43;
  v44 = v42 + 7;
  *(_QWORD *)(v16 + 848) = v44;
  v45 = v43 + 7;
  if (v17)
  {
    sub_1C9748D90((char **)(v16 + 880), v45 * v44);
    v46 = *(_QWORD *)(v16 + 848) * v45;
    v47 = *(_QWORD *)(v16 + 912);
    v48 = *(_QWORD *)(v16 + 904);
    v49 = (v47 - v48) >> 2;
    if (v46 <= v49)
    {
      if (v46 >= v49)
      {
LABEL_47:
        *(_BYTE *)(v16 + 712) = 0;
        goto LABEL_48;
      }
      v63 = v48 + 4 * v46;
    }
    else
    {
      v50 = v46 - v49;
      v51 = *(_QWORD *)(v16 + 920);
      if (v46 - v49 > (v51 - v47) >> 2)
      {
        if (v46 >> 62)
          sub_1C9747024();
        v52 = v51 - v48;
        if (v52 >> 1 > v46)
          v46 = v52 >> 1;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v46;
        if (v53 >> 62)
          goto LABEL_90;
        v54 = (char *)operator new(4 * v53);
        v55 = &v54[4 * v49];
        v56 = &v54[4 * v53];
        bzero(v55, 4 * v50);
        v57 = &v55[4 * v50];
        v58 = *(char **)(v16 + 912);
        v59 = *(char **)(v16 + 904);
        if (v58 != v59)
        {
          do
          {
            v60 = *((_DWORD *)v58 - 1);
            v58 -= 4;
            *((_DWORD *)v55 - 1) = v60;
            v55 -= 4;
          }
          while (v58 != v59);
          v58 = *(char **)(v16 + 904);
        }
        *(_QWORD *)(v16 + 904) = v55;
        *(_QWORD *)(v16 + 912) = v57;
        *(_QWORD *)(v16 + 920) = v56;
        if (v58)
          operator delete(v58);
        goto LABEL_47;
      }
      bzero(*(void **)(v16 + 912), 4 * v50);
      v63 = v47 + 4 * v50;
    }
    *(_QWORD *)(v16 + 912) = v63;
    goto LABEL_47;
  }
  v61 = *(_QWORD *)(v16 + 688);
  v62 = *(_QWORD *)(v16 + 696) - v61;
  if (v45 <= v62)
  {
    if (v45 < v62)
      *(_QWORD *)(v16 + 696) = v61 + v45;
  }
  else
  {
    sub_1C971BA44((unint64_t *)(v16 + 688), v45 - v62);
  }
LABEL_48:
  v64 = *(int64x2_t *)(v16 + 752);
  v65 = vaddq_s64(vaddq_s64(v64, v64), vdupq_n_s64(0x10uLL));
  *(int64x2_t *)(v16 + 928) = v65;
  v66 = v65.i64[0] * v25 + 31;
  v67 = *(_QWORD *)(v16 + 944);
  v68 = *(_QWORD *)(v16 + 952) - v67;
  if (v66 <= v68)
  {
    v70 = v65.i64[1];
    v69 = v64.i64[0];
    if (v66 < v68)
      *(_QWORD *)(v16 + 952) = v67 + v66;
  }
  else
  {
    sub_1C971BA44((unint64_t *)(v16 + 944), v66 - v68);
    v69 = *(_QWORD *)(v16 + 752);
    v70 = *(_QWORD *)(v16 + 936);
  }
  v71 = (v69 + 8) * v70 + 31;
  v72 = *(_QWORD *)(v16 + 968);
  v73 = *(_QWORD *)(v16 + 976) - v72;
  if (v71 <= v73)
  {
    if (v71 < v73)
      *(_QWORD *)(v16 + 976) = v72 + v71;
  }
  else
  {
    sub_1C971BA44((unint64_t *)(v16 + 968), v71 - v73);
  }
  v74 = (*(_DWORD *)(v16 + 996) * *(_DWORD *)(v16 + 992));
  v75 = *(char **)(v16 + 1008);
  v76 = *(_BYTE **)(v16 + 1000);
  v77 = (v75 - v76) >> 4;
  if (v74 > v77)
  {
    v78 = v74 - v77;
    v79 = *(_QWORD *)(v16 + 1016);
    if (v74 - v77 > (v79 - (uint64_t)v75) >> 4)
    {
      v80 = v79 - (_QWORD)v76;
      if (v80 >> 3 > v74)
        v74 = v80 >> 3;
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
        v81 = 0xFFFFFFFFFFFFFFFLL;
      else
        v81 = v74;
      if (!(v81 >> 60))
      {
        v82 = (char *)operator new(16 * v81);
        v83 = &v82[16 * v77];
        v84 = &v82[16 * v81];
        bzero(v83, 16 * v78);
        v85 = &v83[16 * v78];
        if (v75 != v76)
        {
          do
          {
            *((_OWORD *)v83 - 1) = *((_OWORD *)v75 - 1);
            v83 -= 16;
            v75 -= 16;
          }
          while (v75 != v76);
          v75 = *(char **)(v16 + 1000);
        }
        *(_QWORD *)(v16 + 1000) = v83;
        *(_QWORD *)(v16 + 1008) = v85;
        *(_QWORD *)(v16 + 1016) = v84;
        if (v75)
          operator delete(v75);
        goto LABEL_73;
      }
LABEL_90:
      sub_1C9724B4C();
    }
    bzero(*(void **)(v16 + 1008), 16 * v78);
    v86 = &v75[16 * v78];
    goto LABEL_72;
  }
  if (v74 < v77)
  {
    v86 = &v76[16 * v74];
LABEL_72:
    *(_QWORD *)(v16 + 1008) = v86;
  }
LABEL_73:
  sub_1C97154F4(v16, v17 != 0);
  if (!v17 || (result = sub_1C97BE09C(v16 + 48, 1 << *(_DWORD *)(v16 + 1028)), !(_DWORD)result))
  {
    atomic_store(0x80000000, (unsigned int *)(v16 + 1032));
    std::condition_variable::notify_all((std::condition_variable *)(v16 + 1104));
    v88 = *(_QWORD *)(a1 + 48);
    v87 = *(_QWORD *)(a1 + 56);
    if (v87)
    {
      v89 = (unint64_t *)(v87 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    *(_QWORD *)&v97 = v88;
    *((_QWORD *)&v97 + 1) = v87;
    sub_1C974C55C(&v98, v16, &v97);
    sub_1C974C5FC(a5, &v98);
    v91 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (*((_QWORD *)&v98 + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    return 0;
  }
  return result;
}

void sub_1C97154D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_1C972CFE0((uint64_t)va1);
  sub_1C972CFE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C97154F4(uint64_t a1, int a2)
{
  bzero(*(void **)(a1 + 944), *(_QWORD *)(a1 + 928) * *(_QWORD *)(a1 + 760));
  bzero(*(void **)(a1 + 968), *(_QWORD *)(a1 + 936) * *(_QWORD *)(a1 + 752));
  if (a2)
  {
    bzero(*(void **)(a1 + 800), 2 * *(_QWORD *)(a1 + 760) * *(_QWORD *)(a1 + 768));
    bzero(*(void **)(a1 + 880), 16 * *(_QWORD *)(a1 + 840) * *(_QWORD *)(a1 + 848));
  }
}

uint64_t sub_1C9715578(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(unsigned __int8 *)(v3 + 2117);
  *(_DWORD *)(a1 + 8) = *(unsigned __int8 *)(v3 + 2113);
  *(_DWORD *)(a1 + 12) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v3 + 2120);
  *(_QWORD *)a1 = 0;
  v5 = sub_1C9715700(a1, a2);
  if (!(_DWORD)v5)
    sub_1C97155C8(a1);
  return v5;
}

void sub_1C97155C8(uint64_t a1)
{
  int v2;
  char v3;
  unint64_t v4;
  signed int v5;
  uint64_t v6;
  char *v7;
  void *v8;
  char *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  void *memptr;

  v2 = *(_DWORD *)(a1 + 16) << *(_DWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v3 = *(_BYTE *)(a1 + 28);
  v4 = ((v2 << v3) + 31) & 0xFFFFFFFFFFFFFFE0;
  if (*(_BYTE *)(a1 + 29) == 3)
    ++v3;
  v5 = ((v2 << v3) + 31) & 0xFFFFFFE0;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * (v5 + (int)v4) + 64, 0x55B6168FuLL))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, (struct type_info *)&unk_1E82913C0, MEMORY[0x1E0DE4DC0]);
  }
  v6 = 2 * v4;
  v7 = (char *)memptr;
  v8 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = memptr;
  if (v8)
  {
    free(v8);
    v7 = *(char **)(a1 + 64);
  }
  v9 = v7 + 32;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = &v9[(int)v4];
  *(_QWORD *)(a1 + 48) = &v9[v6];
  *(_QWORD *)(a1 + 56) = &v9[v6 + v5];
  if ((v9 & 0x1F) != 0 && dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "UNALIGNED! %p %p\n", v9, &v9[(int)v4]);
    syslog(27, "UNALIGNED! %p %p\n", *(const void **)(a1 + 32), *(const void **)(a1 + 40));
  }
}

uint64_t sub_1C9715700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(v4 + 2096);
  v6 = v5 > 8 || *(unsigned __int8 *)(v4 + 2098) > 8u;
  *(_BYTE *)(a1 + 28) = v6;
  v7 = *(char *)(v4 + 201);
  *(_BYTE *)(a1 + 29) = v7;
  if (v5 >= 10)
    LOBYTE(v5) = 10;
  *(_BYTE *)(a1 + 30) = ~(-1 << (v5 - 5));
  v8 = *(_BYTE *)(*(_QWORD *)(a2 + 16) + 2098);
  if (v8 >= 0xAu)
    v8 = 10;
  *(_BYTE *)(a1 + 31) = ~(-1 << (v8 - 5));
  ((void (*)(uint64_t, uint64_t))*(&off_1E8291EC0 + 4 * v7 + 2 * v6))(a1, a2);
  v9 = *(unsigned __int8 **)(a2 + 16);
  v10 = v9[2096];
  if (v10 == 8)
  {
    v11 = v9[2098];
    if (v11 == 8)
    {
      result = 0;
      *(_QWORD *)(a1 + 72) = sub_1C972F770;
      *(_QWORD *)(a1 + 80) = sub_1C972F80C;
      *(_QWORD *)(a1 + 88) = sub_1C972F8C4;
      *(_QWORD *)(a1 + 96) = sub_1C972FA18;
      *(_QWORD *)(a1 + 104) = sub_1C972FB58;
      *(_QWORD *)(a1 + 112) = sub_1C972FB90;
      *(_QWORD *)(a1 + 120) = sub_1C972FC2C;
      *(_QWORD *)(a1 + 128) = sub_1C972FCE4;
      *(_QWORD *)(a1 + 136) = sub_1C972FE38;
      *(_QWORD *)(a1 + 144) = sub_1C972FF78;
      *(_QWORD *)(a1 + 152) = sub_1C972FFB0;
      *(_QWORD *)(a1 + 160) = sub_1C9730094;
      *(_QWORD *)(a1 + 168) = sub_1C9730174;
      *(_QWORD *)(a1 + 176) = sub_1C973030C;
      *(_QWORD *)(a1 + 184) = sub_1C9730494;
      *(_QWORD *)(a1 + 192) = sub_1C97304DC;
      *(_QWORD *)(a1 + 200) = sub_1C9730628;
      *(_QWORD *)(a1 + 208) = sub_1C9730778;
      *(_QWORD *)(a1 + 216) = sub_1C973099C;
      *(_QWORD *)(a1 + 224) = sub_1C9730BA0;
      *(_QWORD *)(a1 + 440) = nullsub_25;
      *(_QWORD *)(a1 + 232) = sub_1C9730C08;
      *(_QWORD *)(a1 + 240) = sub_1C9730CB4;
      *(_QWORD *)(a1 + 248) = sub_1C9730D7C;
      *(_QWORD *)(a1 + 256) = sub_1C9730ED8;
      *(_QWORD *)(a1 + 264) = sub_1C97E5020;
      *(_QWORD *)(a1 + 272) = sub_1C9731020;
      *(_QWORD *)(a1 + 280) = sub_1C97200B4;
      *(_QWORD *)(a1 + 288) = sub_1C971FF58;
      *(_QWORD *)(a1 + 312) = sub_1C9731214;
      *(_QWORD *)(a1 + 320) = sub_1C9731308;
      *(_QWORD *)(a1 + 328) = sub_1C97313F8;
      *(_QWORD *)(a1 + 336) = sub_1C9731598;
      *(_QWORD *)(a1 + 360) = sub_1C972017C;
      *(_QWORD *)(a1 + 368) = sub_1C97186EC;
      *(_QWORD *)(a1 + 296) = sub_1C97310CC;
      *(_QWORD *)(a1 + 304) = sub_1C9718918;
      *(_QWORD *)(a1 + 344) = sub_1C9731728;
      *(_QWORD *)(a1 + 352) = sub_1C97176E4;
      *(_QWORD *)(a1 + 376) = sub_1C97184E0;
      *(_QWORD *)(a1 + 384) = sub_1C97100A4;
      *(_QWORD *)(a1 + 392) = sub_1C97317B8;
      *(_QWORD *)(a1 + 400) = sub_1C9731854;
      *(_QWORD *)(a1 + 408) = sub_1C9731900;
      *(_QWORD *)(a1 + 416) = sub_1C97319AC;
      *(_QWORD *)(a1 + 424) = sub_1C9731A58;
      *(_QWORD *)(a1 + 432) = nullsub_25;
      return result;
    }
  }
  else
  {
    if (v10 > 0xC)
      goto LABEL_15;
    v11 = v9[2098];
  }
  if (v11 <= 0xC)
  {
    ((void (*)(uint64_t))*(&off_1E8291F40 + 4 * v9[222]))(a1);
    ((void (*)(uint64_t))*(&off_1E8291F40 + 4 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 223) + 2))(a1);
    return 0;
  }
LABEL_15:
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Luma/Chroma bitdepth %d/%d not supported\n", v10, v9[2098]);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 2096), *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 2098));
  }
  return 4294954386;
}

uint64_t sub_1C9715A58(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97EBA1C;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C970E300;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

void sub_1C9715A8C(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v2 = (std::mutex *)(a1 + 2472);
  std::mutex::lock((std::mutex *)(a1 + 2472));
  v3 = sub_1C9715D38(a1 + 1976);
  v4 = *v3;
  v5 = v3[1];
  *(_QWORD *)&v12 = *v3;
  *((_QWORD *)&v12 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v4)
  {
    do
    {
      if (!*(_BYTE *)(v4 + 42))
      {
        sub_1C9715DFC((_QWORD *)(a1 + 2424), &v12);
        v4 = v12;
        *(_BYTE *)(v12 + 42) = 1;
      }
      *(_BYTE *)(v4 + 43) = 1;
      v8 = sub_1C9715D38(a1 + 1976);
      sub_1C9746DB4(&v12, *v8, v8[1]);
      v4 = v12;
    }
    while ((_QWORD)v12);
  }
  sub_1C97113CC(a1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::mutex::unlock(v2);
}

void sub_1C9715B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_1C972CFE0((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_1C9715BA8(uint64_t a1, int a2)
{
  std::mutex *v4;
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  v4 = (std::mutex *)(a1 + 2472);
  std::mutex::lock((std::mutex *)(a1 + 2472));
  v5 = 0;
  v6 = 0;
  for (i = 0; ; i = 0)
  {
    do
    {
      v8 = *(_QWORD *)(a1 + 16 * v5 + 2008);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 43))
        {
          v9 = *(_BYTE *)(a1 + v5 + 2280) != 0;
        }
        else
        {
          ++i;
          v9 = 1;
        }
        v6 += v9;
      }
      ++v5;
    }
    while (v5 != 17);
    if (!i)
      break;
    v10 = *(_DWORD *)(a1 + 2372);
    if ((a2 & 1) != 0 || i > v10)
    {
      if (i > v10)
        v11 = 1;
      else
        v11 = a2 ^ 1;
      if (v11 != 1)
        break;
    }
    else if (v6 <= *(_DWORD *)(a1 + 2376))
    {
      break;
    }
    v12 = sub_1C9715D38(a1 + 1976);
    v14 = *v12;
    v13 = (std::__shared_weak_count *)v12[1];
    *(_QWORD *)&v19 = *v12;
    *((_QWORD *)&v19 + 1) = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    if (!*(_BYTE *)(v14 + 42))
    {
      sub_1C9715DFC((_QWORD *)(a1 + 2424), &v19);
      *(_BYTE *)(v14 + 42) = 1;
    }
    *(_BYTE *)(v14 + 43) = 1;
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v5 = 0;
    v6 = 0;
  }
  std::mutex::unlock(v4);
}

void sub_1C9715D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_1C972CFE0((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1C9715D38(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t i;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v1 = atomic_load((unsigned __int8 *)&qword_1ED1ACCD0);
  if ((v1 & 1) == 0)
  {
    v7 = a1;
    v6 = __cxa_guard_acquire(&qword_1ED1ACCD0);
    a1 = v7;
    if (v6)
    {
      __cxa_atexit((void (*)(void *))sub_1C9752BB8, &qword_1EF920E38, &dword_1C96FA000);
      __cxa_guard_release(&qword_1ED1ACCD0);
      a1 = v7;
    }
  }
  v2 = &qword_1EF920E38;
  for (i = 32; i != 304; i += 16)
  {
    v4 = *(_QWORD *)(a1 + i);
    if (v4 && !*(_BYTE *)(v4 + 43) && (!*v2 || *(_DWORD *)(v4 + 1024) < *(_DWORD *)(*v2 + 1024)))
      v2 = (uint64_t *)(a1 + i);
  }
  return v2;
}

void sub_1C9715DFC(_QWORD *a1, __int128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 32 * (v4 - v5) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x100)
    {
      a1[4] = v9 - 256;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)sub_1C974B718(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = v8 + a1[4];
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)sub_1C974B718(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v100 = 1;
            else
              v100 = (uint64_t)&v64[-*a1] >> 2;
            v101 = (char *)sub_1C974B718(v100);
            v103 = &v101[8 * (v100 >> 2)];
            v104 = (uint64_t *)a1[1];
            v64 = v103;
            v105 = a1[2] - (_QWORD)v104;
            if (v105)
            {
              v64 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
              v106 = 8 * (v105 >> 3);
              v107 = &v101[8 * (v100 >> 2)];
              do
              {
                v108 = *v104++;
                *(_QWORD *)v107 = v108;
                v107 += 8;
                v106 -= 8;
              }
              while (v106);
            }
            v109 = (char *)*a1;
            *a1 = v101;
            a1[1] = v103;
            a1[2] = v64;
            a1[3] = &v101[8 * v102];
            if (v109)
            {
              operator delete(v109);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)sub_1C974B718(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v113 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v113;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)sub_1C974B718(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v110 = v37;
      v113 = v39;
      operator delete(v31);
      v37 = v110;
    }
    v39 = v113;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)sub_1C974B718(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v111 = v37;
            v115 = v39;
            operator delete(v79);
            v37 = v111;
            v39 = v115;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v112 = *((_QWORD *)&v37 + 1);
            v114 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v112;
            *(_QWORD *)&v39 = v114;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  v97 = *a2;
  *(_OWORD *)(*(_QWORD *)&v5[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10) = *a2;
  if (*((_QWORD *)&v97 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
    v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_1C971636C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void sub_1C971639C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v5 = a2;
  v4 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_1C97170AC(a2);
  sub_1C9716408((_QWORD *)(a1 + 8), &v5);
  std::mutex::unlock(v4);
}

void sub_1C97163F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9716408(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1C971E580(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t sub_1C971648C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5, __CVBuffer *a6, int64_t a7, unsigned int a8, int a9)
{
  uint64_t *v10;
  const __CFDictionary *PixelBufferAttributes;
  unint64_t v14;
  uint64_t v15;
  const __CFArray *Value;
  const __CFArray *ValueAtIndex;
  CFTypeID v18;
  CFTypeID v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t Width;
  size_t v26;
  size_t Height;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  __CVBuffer *v38;
  signed int PixelFormatType;
  int v40;
  int v41;
  unsigned __int8 PlaneCount;
  unsigned int v43;
  size_t v44;
  char v45;
  char v46;
  uint64_t *v47;
  char v48;
  size_t v49;
  uint64_t *v50;
  size_t v51;
  uint64_t v52;
  int v53;
  int v54;
  size_t WidthOfPlane;
  size_t v56;
  size_t HeightOfPlane;
  unint64_t v58;
  unint64_t v59;
  signed int v60;
  __CVBuffer *v61;
  int v62;
  size_t v63;
  char v64;
  char v65;
  _QWORD *v66;
  size_t BytesPerRowOfPlane;
  uint64_t v68;
  BOOL v69;
  FILE *v70;
  const char *v71;
  const char *v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v81;
  __CVBuffer *texture;
  unint64_t v83;
  uint64_t v85;
  int v88;
  std::mutex *v89;
  CVPixelBufferRef v91;
  CVPixelBufferRef pixelBufferOut;
  unint64_t *p_valuePtr;
  unint64_t valuePtr;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight[3];

  v10 = a5;
  v91 = 0;
  pixelBufferOut = 0;
  *a5 = 0;
  v89 = (std::mutex *)(a1 + 56);
  if (a6)
  {
    PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(*(CVPixelBufferPoolRef *)(a1 + 120));
    if ((a3 & 1) != 0)
      goto LABEL_3;
    LODWORD(valuePtr) = 0;
    Value = (const __CFArray *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E0CA9040]);
    ValueAtIndex = Value;
    if (Value
      && ((v18 = CFGetTypeID(Value), v18 != CFArrayGetTypeID())
       || CFArrayGetCount(ValueAtIndex) < 1
       || (ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
      && (v19 = CFGetTypeID(ValueAtIndex), v19 == CFNumberGetTypeID())
      && CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr))
    {
      v20 = valuePtr;
      v21 = v20 == CVPixelBufferGetPixelFormatType(a6);
    }
    else
    {
      v21 = 0;
    }
    v22 = *(_QWORD *)(a2 + 8);
    v23 = *(int *)(v22 + 204);
    v24 = *(int *)(v22 + 208);
    extraRowsOnBottom = 0;
    extraColumnsOnRight[0] = 0;
    CVPixelBufferGetExtendedPixels(a6, 0, extraColumnsOnRight, 0, &extraRowsOnBottom);
    Width = CVPixelBufferGetWidth(a6);
    v26 = extraColumnsOnRight[0];
    Height = CVPixelBufferGetHeight(a6);
    v28 = v23 + (int)a7;
    v29 = v24 + (a7 >> 32);
    v30 = v26 + Width;
    v31 = extraRowsOnBottom + Height;
    if (v28 > v30 || v29 > v31)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Pixel buffer needs to be at least %zux%zu, but got %zux%zu\n", v28, v29, v30, v31);
        syslog(27, "Pixel buffer needs to be at least %zux%zu, but got %zux%zu\n", v28, v29, v30, v31);
      }
    }
    else if (v21)
    {
      pixelBufferOut = CVPixelBufferRetain(a6);
      v14 = HIDWORD(a7);
      v88 = a7;
      if (pixelBufferOut)
        goto LABEL_26;
      goto LABEL_6;
    }
LABEL_3:
    v14 = 0;
    v88 = 0;
    if (pixelBufferOut)
      goto LABEL_26;
    goto LABEL_6;
  }
  v88 = 0;
  v14 = 0;
LABEL_6:
  v15 = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)(a1 + 120), &pixelBufferOut);
  if ((_DWORD)v15)
    goto LABEL_29;
  v15 = (*(uint64_t (**)(uint64_t, CVPixelBufferRef))(*(_QWORD *)a2 + 40))(a2, pixelBufferOut);
  if ((_DWORD)v15)
    goto LABEL_29;
LABEL_26:
  if (a4)
  {
    v15 = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)(a1 + 120), &v91);
    if ((_DWORD)v15
      || (v15 = (*(uint64_t (**)(uint64_t, CVPixelBufferRef))(*(_QWORD *)a2 + 40))(a2, v91), (_DWORD)v15))
    {
LABEL_29:
      v33 = 0;
LABEL_138:
      v74 = *v10;
      if (!*v10)
        goto LABEL_146;
      v75 = *(_QWORD *)(a1 + 24);
      v76 = *(_QWORD *)(a1 + 16);
      if (v75 == v76)
        v77 = 0;
      else
        v77 = ((v75 - v76) << 6) - 1;
      v78 = *(_QWORD *)(a1 + 48);
      v79 = v78 + *(_QWORD *)(a1 + 40);
      if (v77 == v79)
      {
        sub_1C971E580((_QWORD *)(a1 + 8));
        v76 = *(_QWORD *)(a1 + 16);
        v78 = *(_QWORD *)(a1 + 48);
        v79 = *(_QWORD *)(a1 + 40) + v78;
      }
      *(_QWORD *)(*(_QWORD *)(v76 + ((v79 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v79 & 0x1FF)) = v74;
      *(_QWORD *)(a1 + 48) = v78 + 1;
      goto LABEL_145;
    }
  }
  std::mutex::lock(v89);
  if (*(_QWORD *)(a1 + 48))
  {
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((*(_QWORD *)(a1 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*(_QWORD *)(a1 + 40) & 0x1FFLL));
    *v10 = v34;
    *(_QWORD *)(v34 + 992) = 0;
    *(_BYTE *)(v34 + 40) = 0;
    *(_WORD *)(v34 + 42) = 0;
    *(_BYTE *)(v34 + 44) = 0;
    *(_DWORD *)(v34 + 1024) = 0;
    *(_DWORD *)(v34 + 36) = 0;
    *(_BYTE *)(v34 + 548) = 0;
    *(_BYTE *)(v34 + 597) = 0;
    *(_BYTE *)(v34 + 1172) = 0;
    *(_OWORD *)(v34 + 648) = 0u;
    *(_BYTE *)(v34 + 748) = 0;
    *(_QWORD *)(v34 + 752) = 0;
    *(_OWORD *)(v34 + 760) = 0u;
    *(_QWORD *)(v34 + 832) = 0;
    *(_OWORD *)(v34 + 840) = 0u;
    *(_OWORD *)(v34 + 928) = 0u;
    *(_QWORD *)(v34 + 672) = -1;
    *(_QWORD *)(v34 + 664) = -1;
    *(_BYTE *)(v34 + 680) = 0;
    *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_1C9862BD0);
    sub_1C974B74C(a1 + 8);
    v35 = *v10;
  }
  else
  {
    v36 = operator new(0x4C0uLL, MEMORY[0x1E0DE4E10]);
    if (!v36)
    {
      v15 = 4294954392;
      v33 = 1;
LABEL_145:
      *v10 = 0;
      goto LABEL_146;
    }
    v35 = (uint64_t)v36;
    sub_1C97182D0((uint64_t)v36);
    *(_QWORD *)v37 = &off_1E82916F0;
    *(_QWORD *)(v37 + 1176) = 0;
    *(_DWORD *)(v37 + 1184) = 0;
    *(_QWORD *)(v37 + 1192) = 0;
    *v10 = v37;
  }
  *(_BYTE *)(v35 + 432) = a4;
  v38 = pixelBufferOut;
  if (!pixelBufferOut)
    goto LABEL_136;
  texture = v91;
  v83 = v14;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBufferOut);
  v40 = PixelFormatType;
  if (PixelFormatType <= 1952854577)
  {
    if (PixelFormatType <= 875836533)
    {
      if (PixelFormatType <= 875704933)
      {
        if (PixelFormatType == 875704422)
          goto LABEL_67;
        v41 = 875704438;
      }
      else
      {
        if (PixelFormatType == 875704934 || PixelFormatType == 875704950)
          goto LABEL_67;
        v41 = 875836518;
      }
    }
    else if (PixelFormatType > 1278226737)
    {
      if (PixelFormatType == 1278226738 || PixelFormatType == 1496395842)
        goto LABEL_67;
      v41 = 1952854576;
    }
    else
    {
      if (PixelFormatType == 875836534 || PixelFormatType == 1278226488)
        goto LABEL_67;
      v41 = 1278226736;
    }
  }
  else if (PixelFormatType > 2016686639)
  {
    if (PixelFormatType > 2019963439)
    {
      if (PixelFormatType == 2019963440 || PixelFormatType == 2019963442)
        goto LABEL_67;
      v41 = 2019963956;
    }
    else
    {
      if (PixelFormatType == 2016686640 || PixelFormatType == 2016686642)
        goto LABEL_67;
      v41 = 2016687156;
    }
  }
  else if (PixelFormatType > 1953903153)
  {
    if (PixelFormatType == 1953903154 || PixelFormatType == 1953903668)
      goto LABEL_67;
    v41 = 1983000886;
  }
  else
  {
    if (PixelFormatType == 1952854578 || PixelFormatType == 1952855092)
      goto LABEL_67;
    v41 = 1953903152;
  }
  if (PixelFormatType != v41)
    goto LABEL_129;
LABEL_67:
  sub_1C97170AC(v35);
  *(_DWORD *)(v35 + 1184) = 0;
  v15 = CVPixelBufferLockBaseAddress(v38, 0);
  if ((_DWORD)v15)
    goto LABEL_137;
  *(_QWORD *)(v35 + 1176) = CVPixelBufferRetain(v38);
  *(_DWORD *)(v35 + 520) = CVPixelBufferGetWidth(v38);
  *(_DWORD *)(v35 + 524) = CVPixelBufferGetHeight(v38);
  PlaneCount = CVPixelBufferGetPlaneCount(v38);
  v43 = PlaneCount;
  if ((PlaneCount & 0xFE) == 0)
    v43 = 1;
  *(_BYTE *)(v35 + 530) = v43;
  if (v43 >= 3)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unexpected %d planes (too many)\n", v43);
      syslog(27, "Unexpected %d planes (too many)\n", *(unsigned __int8 *)(v35 + 530));
    }
    v15 = 4294954386;
    goto LABEL_137;
  }
  v85 = v35;
  v81 = a8;
  v44 = 0;
  v45 = sub_1C9717840(v40) > 8;
  v46 = 1;
  do
  {
    v47 = v10;
    v48 = v46;
    v49 = v85 + 8 * v44;
    *(_QWORD *)(v49 + 400) = CVPixelBufferGetBaseAddressOfPlane(v38, v44);
    v50 = (uint64_t *)(v49 + 400);
    v51 = CVPixelBufferGetBytesPerRowOfPlane(v38, v44) >> v45;
    *(_QWORD *)(v49 + 416) = v51;
    v52 = *(_QWORD *)(v49 + 400);
    if (v52)
    {
      v53 = v88;
      v54 = v83;
      if ((v48 & 1) == 0)
      {
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(v38, 1uLL);
        v56 = *(int *)(v85 + 520);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(v38, 1uLL);
        v53 = v88 >> (WidthOfPlane < v56);
        v54 = (int)v83 >> (HeightOfPlane < *(int *)(v85 + 524));
        v52 = *v50;
        v51 = *(_QWORD *)(v49 + 416);
      }
      *v50 = v52 + ((v51 * v54 + (v53 << v44)) << v45);
    }
    v58 = v51 << v45;
    valuePtr = v58;
    v10 = v47;
    if (v58 >= 0x400 && (v58 & 0x3FF) == 0)
    {
      p_valuePtr = &valuePtr;
      v59 = atomic_load(&qword_1EF920DF8);
      if (v59 != -1)
      {
        extraColumnsOnRight[0] = (size_t)sub_1C974C2AC;
        extraColumnsOnRight[1] = (size_t)&p_valuePtr;
        extraRowsOnBottom = (size_t)extraColumnsOnRight;
        std::__call_once(&qword_1EF920DF8, &extraRowsOnBottom, (void (__cdecl *)(void *))sub_1C974C318);
        v10 = v47;
      }
    }
    v46 = 0;
    v44 = 1;
  }
  while ((v48 & 1) != 0);
  if (texture)
  {
    v60 = CVPixelBufferGetPixelFormatType(texture);
    if (v60 <= 1952854577)
    {
      v61 = texture;
      if (v60 <= 875836533)
      {
        if (v60 <= 875704933)
        {
          if (v60 == 875704422)
            goto LABEL_116;
          v62 = 875704438;
        }
        else
        {
          if (v60 == 875704934 || v60 == 875704950)
            goto LABEL_116;
          v62 = 875836518;
        }
      }
      else if (v60 > 1278226737)
      {
        if (v60 == 1278226738 || v60 == 1496395842)
          goto LABEL_116;
        v62 = 1952854576;
      }
      else
      {
        if (v60 == 875836534 || v60 == 1278226488)
          goto LABEL_116;
        v62 = 1278226736;
      }
    }
    else
    {
      v61 = texture;
      if (v60 > 2016686639)
      {
        if (v60 > 2019963439)
        {
          if (v60 == 2019963440 || v60 == 2019963442)
            goto LABEL_116;
          v62 = 2019963956;
        }
        else
        {
          if (v60 == 2016686640 || v60 == 2016686642)
            goto LABEL_116;
          v62 = 2016687156;
        }
      }
      else
      {
        if (v60 <= 1953903153)
        {
          if (v60 != 1952854578 && v60 != 1952855092)
          {
            v62 = 1953903152;
            goto LABEL_115;
          }
LABEL_116:
          v15 = CVPixelBufferLockBaseAddress(v61, 0);
          if ((_DWORD)v15)
            goto LABEL_137;
          *(_QWORD *)(v85 + 1192) = CVPixelBufferRetain(texture);
          if (CVPixelBufferGetWidth(texture) == *(_DWORD *)(v85 + 520)
            && CVPixelBufferGetHeight(texture) == *(_DWORD *)(v85 + 524))
          {
            v63 = 0;
            v64 = 1;
            do
            {
              v65 = v64;
              v66 = (_QWORD *)(v85 + 8 * v63);
              v66[59] = CVPixelBufferGetBaseAddressOfPlane(texture, v63);
              BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(texture, v63);
              v64 = 0;
              v66[61] = BytesPerRowOfPlane >> v45;
              v66[55] = v66[50];
              v66[57] = v66[52];
              v63 = 1;
            }
            while ((v65 & 1) != 0);
            goto LABEL_121;
          }
          if (dword_1ED1ACCC0 >= 3)
          {
            v70 = (FILE *)*MEMORY[0x1E0C80C10];
            v71 = "SetBuffer: VRA buffers have different dimensions\n";
            v72 = "SetBuffer: VRA buffers have different dimensions\n";
            v73 = 49;
            goto LABEL_135;
          }
          goto LABEL_136;
        }
        if (v60 == 1953903154 || v60 == 1953903668)
          goto LABEL_116;
        v62 = 1983000886;
      }
    }
LABEL_115:
    if (v60 == v62)
      goto LABEL_116;
LABEL_129:
    if (dword_1ED1ACCC0 >= 3)
    {
      v70 = (FILE *)*MEMORY[0x1E0C80C10];
      v71 = "Invalid pixel format\n";
      v72 = "Invalid pixel format\n";
      v73 = 21;
LABEL_135:
      fwrite(v72, v73, 1uLL, v70);
      syslog(27, v71);
    }
LABEL_136:
    v15 = 4294954394;
    goto LABEL_137;
  }
LABEL_121:
  *(_QWORD *)(v85 + 504) = 0;
  *(_QWORD *)(v85 + 512) = 0;
  v68 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v10 + 40))(*v10, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 24));
  v15 = v68;
  if (!a6 || (!(_DWORD)v68 ? (v69 = a3 == 0) : (v69 = 1), v69))
  {
    v33 = 1;
    if ((_DWORD)v68)
      goto LABEL_138;
  }
  else
  {
    v15 = sub_1C97DC9BC((void (**)(uint64_t))(a1 + 128), a6, a7, v81, a9, pixelBufferOut, v88 | (v83 << 32), 1);
    if ((_DWORD)v15)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v33 = 1;
        fwrite("Failed to copy source buffer\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Failed to copy source buffer\n");
        goto LABEL_138;
      }
LABEL_137:
      v33 = 1;
      goto LABEL_138;
    }
    v33 = 1;
  }
LABEL_146:
  CVPixelBufferRelease(pixelBufferOut);
  CVPixelBufferRelease(v91);
  if (v33)
    std::mutex::unlock(v89);
  return v15;
}

void sub_1C9717060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::mutex *a23)
{
  std::mutex::unlock(a23);
  _Unwind_Resume(a1);
}

double sub_1C97170AC(uint64_t a1)
{
  __CVBuffer *v2;
  __CVBuffer *v3;
  double result;

  v2 = *(__CVBuffer **)(a1 + 1176);
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(v2, *(unsigned int *)(a1 + 1184));
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 1176));
    *(_QWORD *)(a1 + 1176) = 0;
  }
  v3 = *(__CVBuffer **)(a1 + 1192);
  if (v3)
  {
    CVPixelBufferUnlockBaseAddress(v3, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 1192));
    *(_QWORD *)(a1 + 1192) = 0;
  }
  result = 0.0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t sub_1C9717114(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  unint64_t (*v6)(int, size_t, CVPixelBufferRef);
  void *v7;

  result = sub_1C9717180(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a2 + 2096) == 8 && *(_BYTE *)(a2 + 2098) == 8)
    {
      v6 = sub_1C974BFF0;
      v7 = sub_1C974BC28;
    }
    else
    {
      v6 = sub_1C974BDDC;
      v7 = sub_1C974BA2C;
    }
    *(_QWORD *)(a1 + 1200) = v7;
    *(_QWORD *)(a1 + 1208) = v6;
  }
  return result;
}

uint64_t sub_1C9717180(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  int v5;
  int v6;
  float32x2x2_t v7;
  float *v8;
  unint64_t v9;
  BOOL v10;
  char v11;
  int v12;
  char v13;
  FILE **v14;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  result = 0;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 204);
  v5 = *(unsigned __int8 *)(a2 + 2096);
  *(_BYTE *)(a1 + 528) = v5;
  v6 = *(unsigned __int8 *)(a2 + 2098);
  *(_BYTE *)(a1 + 529) = v6;
  *(_DWORD *)(a1 + 1028) = *(unsigned __int8 *)(a2 + 2113);
  v7 = *(float32x2x2_t *)(a2 + 2132);
  v8 = (float *)(a1 + 648);
  v9 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  vst2_f32(v8, v7);
  v10 = v5 == 8 && v6 == 8;
  v11 = !v10;
  *(_BYTE *)(a1 + 531) = v11;
  v12 = *(unsigned __int8 *)(a2 + 201);
  *(_BYTE *)(a1 + 532) = v12;
  *(_BYTE *)(a1 + 533) = *(_BYTE *)(a2 + 1991);
  v13 = a3 ^ 1;
  if (v10)
    v13 = 0;
  *(_BYTE *)(a1 + 534) = v13;
  if (!*(_QWORD *)(a1 + 408) && v12)
  {
    if (*(_BYTE *)(a1 + 432))
    {
      if (dword_1ED1ACCC0 > 2)
      {
        v14 = (FILE **)MEMORY[0x1E0C80C10];
        fwrite("VRA not implemented without CoreVideo\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "VRA not implemented without CoreVideo\n");
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("Failed to allocate chroma plane\n", 0x20uLL, 1uLL, *v14);
          syslog(27, "Failed to allocate chroma plane\n");
        }
      }
      return 4294954386;
    }
    else
    {
      v16 = *(unsigned __int8 *)(a2 + 2117) << v11;
      sub_1C971FF04();
      LODWORD(v17) = qword_1ED1ACCA8;
      if (v16 < (int)qword_1ED1ACCA8)
        LODWORD(v17) = v16;
      if ((int)v17 <= 32)
        v17 = 32;
      else
        v17 = v17;
      v18 = ((71 << v11) + 0x7FFFFFFF + v17) & -(int)v17;
      v19 = v17 - 1;
      v20 = -v17;
      v21 = (v17 - 1 + ((*(int *)(a2 + 204) + 142) << v11)) & -v17;
      if ((v21 & 0x3FF) == 0 && v21 > 0x3FF)
        v23 = v17;
      else
        v23 = 0;
      v24 = v23 + v21;
      v25 = *(unsigned __int8 *)(a2 + 201);
      v26 = v25 < 3;
      v27 = v25 < 2;
      v28 = (2 * v24) >> (v25 < 3);
      v29 = v17 + v28 * ((*(int *)(a2 + 208) >> (v25 < 2)) + 143);
      v30 = *(_QWORD *)(a1 + 720);
      v31 = *(_QWORD *)(a1 + 728) - v30;
      if (v29 <= v31)
      {
        if (v29 < v31)
          *(_QWORD *)(a1 + 728) = v30 + v29;
      }
      else
      {
        sub_1C971BA44((unint64_t *)(a1 + 720), v29 - v31);
        v30 = *(_QWORD *)(a1 + 720);
      }
      result = 0;
      *(_BYTE *)(a1 + 530) = 2;
      *(_QWORD *)(a1 + 424) = v28 >> v11;
      *(_QWORD *)(a1 + 408) = (v19 + v30 + ((unint64_t)(2 * v18) >> v26) + v28 * (0x47u >> v27)) & v20;
    }
  }
  return result;
}

void sub_1C97173C8(_QWORD *a1)
{
  uint64_t v2;

  v2 = 0x1FFFFFFFFFFFFFE0;
  do
  {
    sub_1C974E55C(&a1[v2 + 35]);
    sub_1C974E55C(&a1[v2 + 67]);
    sub_1C974E55C(&a1[v2 + 99]);
    sub_1C974E55C(&a1[v2 + 131]);
    sub_1C974E55C(&a1[v2 + 163]);
    v2 += 2;
  }
  while (v2 * 8);
  *a1 = 0;
  a1[1] = 0;
}

void sub_1C9717428(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  _BYTE *v7;
  __CVBuffer *v8;
  __CVBuffer *v9;
  OSType PixelFormatType;
  OSType v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t Height;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  FILE *v20;
  int v21;
  int v22;
  size_t Width;
  size_t v24;
  int v25;
  int v26;
  size_t v27;
  size_t v28;
  OSType v29;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight;

  if (!a3)
  {
    v7 = (_BYTE *)*a4;
    if (*a4)
    {
      if (v7[45])
      {
        v8 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 24))(*a4);
        if (v8 == *(__CVBuffer **)(a2 + 32))
          sub_1C97170AC((uint64_t)v7);
        if (v8)
        {
          v9 = *(__CVBuffer **)(a2 + 32);
          if (v9)
          {
            if (v8 != v9)
            {
              PixelFormatType = CVPixelBufferGetPixelFormatType(v8);
              v11 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a2 + 32));
              v29 = PixelFormatType;
              if (PixelFormatType != v11 && dword_1ED1ACCC0 >= 3)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "Pixel format mismatch for tile - got %x, expected %x\n", v11, PixelFormatType);
                syslog(27, "Pixel format mismatch for tile - got %x, expected %x\n", v11, PixelFormatType);
              }
              v12 = *(int *)(*a4 + 520);
              v13 = *(int *)(*a4 + 524);
              v14 = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 32)) - *(int *)(a2 + 40);
              Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 32));
              v16 = *(int *)(a2 + 44);
              extraRowsOnBottom = 0;
              extraColumnsOnRight = 0;
              CVPixelBufferGetExtendedPixels(*(CVPixelBufferRef *)(a2 + 32), 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
              v17 = v14 + extraColumnsOnRight;
              v18 = v13;
              v19 = v12;
              if (v17 >= v12 && Height - v16 + extraRowsOnBottom >= v18)
              {
                if (v29 == v11)
                  sub_1C97DC950(*(void (***)(uint64_t))(a1 + 1064), v8, *(__CVBuffer **)(a2 + 32), *(_QWORD *)(a2 + 40));
              }
              else if (dword_1ED1ACCC0 >= 3)
              {
                v20 = (FILE *)*MEMORY[0x1E0C80C10];
                v21 = *(_DWORD *)(a2 + 40);
                v22 = *(_DWORD *)(a2 + 44);
                Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 32));
                v24 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 32));
                fprintf(v20, "OOB destination for %zux%zu tile - offset %dx%d into %zux%zu with %zu/%zu edge\n", v19, v18, v21, v22, Width, v24, extraColumnsOnRight, extraRowsOnBottom);
                v25 = *(_DWORD *)(a2 + 40);
                v26 = *(_DWORD *)(a2 + 44);
                v27 = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 32));
                v28 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 32));
                syslog(27, "OOB destination for %zux%zu tile - offset %dx%d into %zux%zu with %zu/%zu edge\n", v19, v18, v25, v26, v27, v28, extraColumnsOnRight, extraRowsOnBottom);
              }
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + 8) |= 2u;
      }
    }
  }
  VTTileDecoderSessionEmitDecodedTile();
  sub_1C97176A8(a2);
}

uint64_t sub_1C97176A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1176);
}

void sub_1C97176A8(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRelease(v2);
    free((void *)a1);
  }
}

int8x16_t *sub_1C97176E4(int8x16_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862B20);
  v11 = a7 + 1;
  v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1C9862B30));
  v13 = vceqzq_s8(v10);
  v14 = a5;
  do
  {
    v16 = *result;
    v15 = result[1];
    v17 = result[2];
    v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v24 = (int8x16_t)vld1q_dup_s16(v14++);
    *a5 = v18.i16[7];
    v7.i16[0] = *(__int16 *)((char *)result->i16 + ((32 * a4) & 0x40));
    v25 = (uint8x16_t)vextq_s8(v24, v16, 0xEuLL);
    v26 = (uint8x16_t)vextq_s8(v16, v15, 0xEuLL);
    v27 = (uint8x16_t)vextq_s8(v15, v17, 0xEuLL);
    v28 = (uint8x16_t)vextq_s8(v17, v18, 0xEuLL);
    v29 = (uint8x16_t)vextq_s8(v16, v15, 2uLL);
    v30 = (uint8x16_t)vextq_s8(v15, v17, 2uLL);
    v31 = (uint8x16_t)vextq_s8(v17, v18, 2uLL);
    v32 = (uint8x16_t)vextq_s8(v18, v7, 2uLL);
    v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v28), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v32)), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v18))));
    *result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v16, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v16, v29), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v16)), (int8x16_t)vcgtq_u8((uint8x16_t)v16, v25)), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v16)))), v16);
    result[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v15, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v15, v26), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v15)), (int8x16_t)vcgtq_u8((uint8x16_t)v15, v30)), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v15))));
    result[2] = (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v27), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v31)), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v17))));
    result[3] = vbslq_s8(v12, v7, v18);
    result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (__int16 *)v14;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1C9717840(int a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;

  if (a1 > 1952854577)
  {
    if (a1 <= 2016686639)
    {
      if (a1 <= 1953903153)
      {
        if (a1 == 1952854578 || a1 == 1952855092)
          return 12;
        v1 = 1953903152;
LABEL_31:
        if (a1 == v1)
          return 12;
        return 0;
      }
      if (a1 == 1953903154 || a1 == 1953903668)
        return 12;
      v3 = 1983000886;
      goto LABEL_26;
    }
    if (a1 > 2019963439)
    {
      if (a1 != 2019963440 && a1 != 2019963956)
      {
        v3 = 2019963442;
LABEL_26:
        if (a1 != v3)
          return 0;
      }
    }
    else if (a1 != 2016686640 && a1 != 2016686642)
    {
      v3 = 2016687156;
      goto LABEL_26;
    }
    return 10;
  }
  v2 = 8;
  if (a1 <= 875836533)
  {
    if (a1 <= 875704933)
    {
      if (a1 == 875704422)
        return v2;
      v4 = 875704438;
    }
    else
    {
      if (a1 == 875704934 || a1 == 875704950)
        return v2;
      v4 = 875836518;
    }
    if (a1 == v4)
      return v2;
    return 0;
  }
  if (a1 > 1278226737)
  {
    if (a1 == 1278226738)
      return 12;
    if (a1 != 1496395842)
    {
      v1 = 1952854576;
      goto LABEL_31;
    }
    return 10;
  }
  if (a1 != 875836534 && a1 != 1278226488)
  {
    v3 = 1278226736;
    goto LABEL_26;
  }
  return v2;
}

void sub_1C9717A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  int v7;

  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = (_OWORD *)(a4 + 16);
  v7 = 16;
  do
  {
    *(v6 - 1) = v4;
    *v6 = v5;
    v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

uint64_t sub_1C9717A50(unsigned int a1, int8x16x2_t *a2, uint64_t a3, double *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *val;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  _BOOL4 v24;
  uint64_t result;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x16x2_t *v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  int8x8_t v40;
  int8x8_t v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  int8x16x2_t v56;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = byte_1C98328DA[a1];
  v7 = (char)v6;
  if (a1 >= 0x12)
  {
    if ((v6 & 0x80) == 0)
    {
      val = a2[2].val;
      v8 = 7;
      v9 = 3;
      v10 = 5;
LABEL_6:
      v12 = a2->val[v8];
      v13 = a2[v9].val[0];
      v14 = a2->val[v10];
      v51 = *val;
      v52 = v14;
      v49 = 4 * a3;
      v50 = 8;
      v15 = *(&v49 + (a1 > 0x11));
      v46 = *(&v49 + (a1 < 0x12));
      v53 = v13;
      v54 = v12;
      v16 = 4;
      v17 = v6;
      do
      {
        v18 = v17 & 0x7F;
        v19 = *(int8x8_t *)&v51.i8[8 * (v17 >> 7)];
        v20 = (int8x8_t)v51.u64[(v17 >> 7) + 1];
        v21 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 16);
        v22 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 24);
        v23 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 32);
        if (v18 >= 0x40)
        {
          v19 = vext_s8(v19, v20, 4uLL);
          v20 = vext_s8(v20, v21, 4uLL);
          v21 = vext_s8(v21, v22, 4uLL);
          v22 = vext_s8(v22, v23, 4uLL);
          v23 = vext_s8(v23, *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 40), 4uLL);
          v18 = (v18 - 64);
        }
        v24 = a1 < 0x12;
        sub_1C9708A20(v18, v6, v24, a3, a4, v19, v20);
        sub_1C9708A20(v18, v6, v24, a3, (double *)((char *)a4 + v15), v20, v21);
        sub_1C9708A20(v18, v6, v24, a3, (double *)((char *)a4 + 2 * v15), v21, v22);
        result = sub_1C9708A20(v18, v6, v24, a3, (double *)((char *)a4 + 3 * v15), v22, v23);
        a4 = (double *)((char *)a4 + v46);
        v17 += 4 * v6;
        --v16;
      }
      while (v16);
      return result;
    }
    v31 = &xmmword_1C9832A20[2 * a1 - 36];
    v32 = vqtbl2q_s8(*a2, v31[1]);
    v51 = vqtbl2q_s8(*a2, *v31);
    v33 = vextq_s8(v32, v32, 8uLL);
    v33.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v32.i64[0];
    v52.i64[1] = v33.i64[0];
    v30 = a2 + 2;
    v29 = 5;
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      v8 = 3;
      v9 = 1;
      v10 = 1;
      val = (int8x16_t *)a2;
      goto LABEL_6;
    }
    v26 = &xmmword_1C9832A20[2 * (18 - a1)];
    v56 = a2[2];
    v27 = vqtbl2q_s8(v56, v26[1]);
    v51 = vqtbl2q_s8(v56, *v26);
    v28 = vextq_s8(v27, v27, 8uLL);
    v28.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v27.i64[0];
    v52.i64[1] = v28.i64[0];
    v29 = 1;
    v30 = a2;
  }
  v34 = a2->val[v29];
  v53 = v30->val[0];
  v54 = v34;
  v49 = 4 * a3;
  v50 = 8;
  v35 = *(&v49 + (a1 > 0x11));
  v47 = *(&v49 + (a1 < 0x12));
  v36 = 4 * (char)v6;
  v37 = 4;
  v6 = (char)v6;
  do
  {
    v38 = v6 | 0xFFFFFF80;
    v39 = &v52.i64[(v6 >> 7) + 1];
    v41 = (int8x8_t)v39[4];
    v40 = (int8x8_t)v39[5];
    v43 = (int8x8_t)v39[2];
    v42 = (int8x8_t)v39[3];
    v44 = (int8x8_t)v39[1];
    if (v38 <= 0xFFFFFFBF)
    {
      v40 = vext_s8(v41, v40, 4uLL);
      v41 = vext_s8(v42, v41, 4uLL);
      v42 = vext_s8(v43, v42, 4uLL);
      v43 = vext_s8(v44, v43, 4uLL);
      v44 = vext_s8((int8x8_t)v52.u64[((uint64_t)v6 >> 7) + 1], v44, 4uLL);
      v38 = (v38 + 64);
    }
    v45 = a1 < 0x12;
    sub_1C970A974(v38, v7, v45, a3, a4, v44, v43);
    sub_1C970A974(v38, v7, v45, a3, (double *)((char *)a4 + v35), v43, v42);
    sub_1C970A974(v38, v7, v45, a3, (double *)((char *)a4 + 2 * v35), v42, v41);
    result = sub_1C970A974(v38, v7, v45, a3, (double *)((char *)a4 + 3 * v35), v41, v40);
    a4 = (double *)((char *)a4 + v47);
    v6 += v36;
    --v37;
  }
  while (v37);
  return result;
}

void sub_1C9717E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  int v7;

  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = (_OWORD *)(a4 + 16);
  v7 = 32;
  do
  {
    *(v6 - 1) = v4;
    *v6 = v5;
    v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

uint64_t sub_1C9717E50(unsigned int a1, _OWORD *a2, uint64_t a3, double *a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t result;
  int8x16_t *v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  __int128 *v47;
  int8x16_t *v48;
  int8x16_t v49;
  int8x16_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  int8x16x2_t v74;

  v73 = *MEMORY[0x1E0C80C00];
  v7 = byte_1C98328DA[a1];
  v8 = (char)v7;
  v72 = 0;
  if (a1 < 0x12)
  {
    if (((char)v7 & 0x80000000) == 0)
    {
      v9 = 3;
      v10 = 2;
      v11 = 1;
      v12 = (int8x16_t *)a2;
      goto LABEL_6;
    }
    v43 = (int8x16_t *)&qword_1C9832900[4 * (18 - a1)];
    v74 = *(int8x16x2_t *)((_BYTE *)a2 + 2);
    v44 = vqtbl2q_s8(v74, v43[1]);
    v68 = vqtbl2q_s8(v74, *v43);
    v45 = vextq_s8(v44, v44, 8uLL);
    v45.i8[7] = *((_BYTE *)a2 - 1);
    *(_QWORD *)&v69 = v44.i64[0];
    *((_QWORD *)&v69 + 1) = v45.i64[0];
    v46 = 1;
    v47 = a2;
    goto LABEL_29;
  }
  if ((v7 & 0x80) != 0)
  {
    v48 = (int8x16_t *)&qword_1C9832900[4 * a1 - 72];
    v49 = vqtbl2q_s8(*(int8x16x2_t *)a2, v48[1]);
    v68 = vqtbl2q_s8(*(int8x16x2_t *)a2, *v48);
    v50 = vextq_s8(v49, v49, 8uLL);
    v50.i8[7] = *((_BYTE *)a2 - 1);
    *(_QWORD *)&v69 = v49.i64[0];
    *((_QWORD *)&v69 + 1) = v50.i64[0];
    v47 = a2 + 4;
    v46 = 5;
LABEL_29:
    v51 = a2[v46];
    v70 = *v47;
    v71 = v51;
    v66 = 8 * a3;
    v67 = 8;
    v52 = *(&v66 + (a1 > 0x11));
    v65 = *(&v66 + (a1 < 0x12));
    v63 = 8 * (char)v7;
    v53 = 4;
    v7 = (char)v7;
    while (1)
    {
      v54 = v7 | 0xFFFFFF00;
      v55 = (_QWORD *)&v69 + (v7 >> 8) + 1;
      v57 = (int8x8_t)v55[4];
      v56 = (int8x8_t)v55[5];
      v59 = (int8x8_t)v55[2];
      v58 = (int8x8_t)v55[3];
      v60 = (int8x8_t)v55[1];
      if (v54 <= 0xFFFFFFBF)
      {
        v61 = *((_QWORD *)&v69 + ((uint64_t)v7 >> 8) + 1);
        if (v54 > 0xFFFFFF7F)
        {
          v62 = v7 | 0xFFFFFF00;
        }
        else
        {
          v56 = vext_s8(v57, v56, 4uLL);
          v57 = vext_s8(v58, v57, 4uLL);
          v58 = vext_s8(v59, v58, 4uLL);
          v59 = vext_s8(v60, v59, 4uLL);
          v62 = v54 + 128;
          v60 = vext_s8((int8x8_t)v61, v60, 4uLL);
          if (v54 > 0xFFFFFF3F)
          {
            v54 = (v54 + 128);
            goto LABEL_37;
          }
          v61 = vshld_n_s64(v61, 0x20uLL);
        }
        v56 = vext_s8(v57, v56, 6uLL);
        v57 = vext_s8(v58, v57, 6uLL);
        v58 = vext_s8(v59, v58, 6uLL);
        v59 = vext_s8(v60, v59, 6uLL);
        v54 = v62 + 64;
        v60 = vext_s8((int8x8_t)v61, v60, 6uLL);
      }
LABEL_37:
      sub_1C970C1E8(v54, v8, a1 < 0x12, a3, a4, v60, v59);
      sub_1C970C1E8(v54, v8, a1 < 0x12, a3, (double *)((char *)a4 + v52), v59, v58);
      sub_1C970C1E8(v54, v8, a1 < 0x12, a3, (double *)((char *)a4 + 2 * v52), v58, v57);
      result = sub_1C970C1E8(v54, v8, a1 < 0x12, a3, (double *)((char *)a4 + 3 * v52), v57, v56);
      a4 = (double *)((char *)a4 + v65);
      v7 += v63;
      if (!--v53)
        return result;
    }
  }
  v12 = (int8x16_t *)(a2 + 4);
  v9 = 7;
  v10 = 6;
  v11 = 5;
LABEL_6:
  v13 = a2[v9];
  v14 = a2[v10];
  v15 = a2[v11];
  v68 = *v12;
  v69 = v15;
  v66 = 8 * a3;
  v67 = 8;
  v16 = *(&v66 + (a1 > 0x11));
  v64 = *(&v66 + (a1 < 0x12));
  v70 = v14;
  v71 = v13;
  v17 = 4;
  v18 = v7;
  do
  {
    v19 = *(double *)&v68.i64[v18 >> 8];
    v20 = *(double *)&v68.i64[(v18 >> 8) + 1];
    v21 = *((double *)&v68 + (v18 >> 8) + 2);
    v22 = *((double *)&v68 + (v18 >> 8) + 3);
    v23 = *((double *)&v68 + (v18 >> 8) + 4);
    v24 = *((unint64_t *)&v68 + (v18 >> 8) + 5);
    v25 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 4uLL));
    v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 4uLL));
    v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 4uLL));
    v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, *(int8x8_t *)&v23, 4uLL));
    v29 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v23, (int8x8_t)v24, 4uLL));
    v30 = COERCE_DOUBLE(vshrd_n_u64(v24, 0x20uLL));
    v31 = v18 - 128;
    if (v18 < 0x80u)
    {
      v31 = v18;
    }
    else
    {
      v23 = v29;
      v22 = v28;
      v21 = v27;
      v20 = v26;
      v19 = v25;
      *(double *)&v24 = v30;
    }
    v32 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 2uLL));
    v33 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 2uLL));
    v34 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 2uLL));
    v35 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, *(int8x8_t *)&v23, 2uLL));
    v36 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v23, (int8x8_t)v24, 2uLL));
    if (v31 >= 0x40)
      *(double *)&v37 = v36;
    else
      *(double *)&v37 = v23;
    if (v31 >= 0x40)
      *(double *)&v38 = v35;
    else
      *(double *)&v38 = v22;
    if (v31 >= 0x40)
      *(double *)&v39 = v34;
    else
      *(double *)&v39 = v21;
    if (v31 >= 0x40)
      *(double *)&v40 = v33;
    else
      *(double *)&v40 = v20;
    if (v31 < 0x40)
    {
      v41 = v31;
    }
    else
    {
      v19 = v32;
      v41 = v31 - 64;
    }
    sub_1C9708E28(v41, v7, a1 < 0x12, a3, a4, *(int8x8_t *)&v19, v40);
    sub_1C9708E28(v41, v7, a1 < 0x12, a3, (double *)((char *)a4 + v16), v40, v39);
    sub_1C9708E28(v41, v7, a1 < 0x12, a3, (double *)((char *)a4 + 2 * v16), v39, v38);
    result = sub_1C9708E28(v41, v7, a1 < 0x12, a3, (double *)((char *)a4 + 3 * v16), v38, v37);
    a4 = (double *)((char *)a4 + v64);
    v18 += 8 * v7;
    --v17;
  }
  while (v17);
  return result;
}

double sub_1C97182D0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E8291810;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = a1;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 141) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 527) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 712) = 1;
  *(_QWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_QWORD *)(a1 + 1040) = 850045863;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1104) = 1018212795;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 42) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 548) = 0;
  *(_BYTE *)(a1 + 597) = 0;
  *(_BYTE *)(a1 + 1172) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 672) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_BYTE *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  return result;
}

void sub_1C9718418(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  const char *v4;
  int8x16_t v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  int v8;
  int8x16x2_t v9;
  int8x16x2_t v10;

  v4 = a2 + 64;
  v9 = vld2q_s8(a2);
  v10 = vld2q_s8(v4);
  v5 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[0].i8), (uint8x16_t)v9.val[0]), (uint8x16_t)v10.val[0]), *(uint8x8_t *)v10.val[0].i8);
  v9.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[1].i8), (uint8x16_t)v9.val[1]), (uint8x16_t)v10.val[1]), *(uint8x8_t *)v10.val[1].i8);
  *(int16x4_t *)v9.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v5.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)), vadd_s16(*(int16x4_t *)v9.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v9.val[0], v9.val[0], 8uLL)));
  *(int16x4_t *)v9.val[1].i8 = vpadd_s16(*(int16x4_t *)v9.val[0].i8, *(int16x4_t *)v9.val[0].i8);
  v9.val[1].i64[1] = v9.val[1].i64[0];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v9.val[1], 5uLL), (uint16x8_t)v9.val[1], 5uLL);
  v7 = a4 + 1;
  v8 = 16;
  do
  {
    v7[-1] = v6;
    *v7 = v6;
    v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

void sub_1C9718484(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4;
  uint16x8_t v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  int v8;

  v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 64)), *(uint8x8_t *)(a2 + 64)), *(uint8x16_t *)(a2 + 80)), *(uint8x8_t *)(a2 + 80));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 6uLL), v5, 6uLL);
  v7 = a4 + 1;
  v8 = 32;
  do
  {
    v7[-1] = v6;
    *v7 = v6;
    v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

uint64_t sub_1C97184E0(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _BYTE *a5, int8x16_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const __int16 *i16;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  const __int16 *v26;
  int8x16_t v28;
  __int16 *v29;
  signed int v30;
  int8x16_t v31;
  int8x16_t v32;
  const __int16 *v33;
  uint8x16_t v34;
  int8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  int8x16_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E52DC((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 62);
    a5 += 2;
    _X5 = (int8x16_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862B20);
  v11 = vandq_s8(v9, (int8x16_t)xmmword_1C9862B30);
  v13 = *_X5;
  v12 = _X5[1];
  v14 = _X5[2];
  v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  v22 = *(int8x16_t *)result;
  v23 = *(int8x16_t *)(result + 16);
  v24 = *(int8x16_t *)(result + 32);
  v25 = *(int8x16_t *)(result + 48);
  v26 = (const __int16 *)(result + 64);
  __asm { PRFM            #0, [X0,#0x40] }
  v28 = (int8x16_t)vld1q_dup_s16(i16);
  *(_WORD *)a5 = v25.i16[7];
  v29 = (__int16 *)(a5 + 2);
  v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v31 = vceqzq_s8(v11);
  v32 = vceqzq_s8(v10);
  v33 = v29;
  do
  {
    v34 = (uint8x16_t)vextq_s8(v14, v15, 2uLL);
    v35 = v25;
    v36 = (uint8x16_t)v24;
    v37 = (uint8x16_t)v23;
    v38 = (uint8x16_t)vextq_s8(v13, v12, 2uLL);
    v13 = v22;
    _X11 = (char *)v26 + a2;
    v22 = *(int8x16_t *)((char *)v26 + a2 - 64);
    v23 = *(int8x16_t *)((char *)v26 + a2 - 48);
    v24 = *(int8x16_t *)((char *)v26 + a2 - 32);
    v25 = *(int8x16_t *)((char *)v26 + a2 - 16);
    __asm { PRFM            #0, [X11] }
    v41 = (int8x16_t)vld1q_dup_s16(v33++);
    *v29 = v25.i16[7];
    v42 = (uint8x16_t)vextq_s8(v15, v28, 2uLL);
    v43 = (uint8x16_t)vextq_s8(v12, v14, 2uLL);
    v44 = (uint8x16_t)vextq_s8(v41, v22, 0xEuLL);
    v45 = (uint8x16_t)vextq_s8(v22, v23, 0xEuLL);
    v46 = (uint8x16_t)vextq_s8(v23, v24, 0xEuLL);
    v47 = (uint8x16_t)vextq_s8(v24, v25, 0xEuLL);
    v48 = (int8x16_t)vsqaddq_u8((uint8x16_t)v13, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v13, v38), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v13)), (int8x16_t)vcgtq_u8((uint8x16_t)v13, v44)), (int8x16_t)vcgtq_u8(v44, (uint8x16_t)v13))));
    v49 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v37, v43), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v43, v37)), (int8x16_t)vcgtq_u8(v37, v45)), (int8x16_t)vcgtq_u8(v45, v37)));
    v12 = (int8x16_t)v37;
    v50 = vsqaddq_u8(v37, v49);
    v14 = (int8x16_t)v36;
    v51 = vbslq_s8(v31, (int8x16_t)vsqaddq_u8((uint8x16_t)v35, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v35, v42), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v42, (uint8x16_t)v35)), (int8x16_t)vcgtq_u8((uint8x16_t)v35, v47)), (int8x16_t)vcgtq_u8(v47, (uint8x16_t)v35)))), v35);
    *((int8x16_t *)v26 - 4) = vbslq_s8(v32, v48, v13);
    *((uint8x16_t *)v26 - 3) = v50;
    v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v30;
    *((uint8x16_t *)v26 - 2) = vsqaddq_u8(v36, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v36, v34), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v34, v36)), (int8x16_t)vcgtq_u8(v36, v46)), (int8x16_t)vcgtq_u8(v46, v36))));
    *((int8x16_t *)v26 - 1) = v51;
    v26 = (const __int16 *)((char *)v26 + a2);
    v29 = (__int16 *)v33;
    v15 = v35;
  }
  while (v30 > 1);
  return result;
}

int8x16_t *sub_1C97186EC(int8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  const __int16 *v9;
  int8x16_t v10;
  const __int16 *v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  const __int16 *v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  int8x16_t v47;
  uint8x16_t v48;
  int8x16_t v49;

  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E5264((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    v11 = &_X5[-1].i16[7];
    v10 = (int8x16_t)vld1q_dup_s16(v11);
  }
  else
  {
    v9 = (const __int16 *)a5;
    v10 = (int8x16_t)vld1q_dup_s16(v9++);
    *(_WORD *)a5 = result[3].i16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v9;
  }
  v7.i64[1] = v8;
  v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v12 + 1)] = *(__int16 *)((char *)&result[3].i16[7] + (int)(v12 + 1) * a2);
  v13 = vdupq_n_s8(~a4);
  v14 = vandq_s8(v13, (int8x16_t)xmmword_1C9862B20);
  v15 = vandq_s8(v13, (int8x16_t)xmmword_1C9862B30);
  v17 = *_X5;
  v16 = _X5[1];
  v19 = _X5[2];
  v18 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v25 = result + 2;
  v26 = result[2];
  v27 = *result;
  v28 = result[1];
  v29 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v31 = v12 + 2;
  v32 = vceqzq_s8(v15);
  v33 = vceqzq_s8(v14);
  v34 = (const __int16 *)a5;
  do
  {
    v35 = (uint8x16_t)vextq_s8(v19, v18, 0xEuLL);
    v18 = v29;
    v36 = (uint8x16_t)v26;
    v37 = (uint8x16_t)v28;
    v38 = (uint8x16_t)vextq_s8(v10, v17, 0xEuLL);
    v39 = (uint8x16_t)vextq_s8(v17, v16, 0xEuLL);
    v17 = v27;
    _X12 = &v25->i8[a2];
    v27 = *(int8x16_t *)((char *)&v25[-2] + a2);
    v28 = *(int8x16_t *)((char *)&v25[-1] + a2);
    v26 = *(int8x16_t *)((char *)v25 + a2);
    v29 = *(int8x16_t *)((char *)&v25[1] + a2);
    __asm { PRFM            #0, [X12,#0x20] }
    v10.i32[0] = *(unsigned __int16 *)((char *)v25[-2].u16 + a2 + ((32 * a4) & 0x40));
    v42 = (uint8x16_t)vextq_s8(v16, v19, 0xEuLL);
    v43 = (uint8x16_t)vextq_s8(v27, v28, 2uLL);
    v44 = (uint8x16_t)vextq_s8(v28, v26, 2uLL);
    v45 = (uint8x16_t)vextq_s8(v26, v29, 2uLL);
    v46 = (uint8x16_t)vextq_s8(v29, v10, 2uLL);
    v47 = (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v38), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v43)), (int8x16_t)vcgtq_u8(v43, (uint8x16_t)v17))));
    v16 = (int8x16_t)v37;
    v48 = vsqaddq_u8(v37, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v37, v39), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v39, v37)), (int8x16_t)vcgtq_u8(v37, v44)), (int8x16_t)vcgtq_u8(v44, v37))));
    v49 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v36, v42), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v42, v36)), (int8x16_t)vcgtq_u8(v36, v45)), (int8x16_t)vcgtq_u8(v45, v36)));
    v19 = (int8x16_t)v36;
    v25[-2] = vbslq_s8(v33, v47, v17);
    v25[-1] = (int8x16_t)v48;
    *(uint8x16_t *)v25 = vsqaddq_u8(v36, v49);
    v25[1] = vbslq_s8(v32, (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v35), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v35, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v46)), (int8x16_t)vcgtq_u8(v46, (uint8x16_t)v18)))), v18);
    v10 = (int8x16_t)vld1q_dup_s16(v34++);
    --v31;
    v25 = (int8x16_t *)((char *)v25 + a2);
    *(_WORD *)a5 = v18.i16[7];
    a5 = (char *)v34;
  }
  while (v31 > 1);
  return result;
}

char *sub_1C9718918(char *result, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  const char *v13;
  char *v14;
  int8x8x2_t v22;
  int8x8x2_t v23;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  do
  {
    v13 = result;
    v22 = vld2_s8(v13);
    v14 = (char *)&v13[a2];
    __asm { PRFM            #0, [X0,#0x10] }
    _X11 = v14;
    v23 = vld2_s8(_X11);
    _X11 += 16;
    __asm { PRFM            #0, [X11] }
    *a5 = v22.val[0].i8[7];
    a5[1] = v22.val[1].i8[7];
    a5[2] = v23.val[0].i8[7];
    a5[3] = v23.val[1].i8[7];
    v22.val[0] = (int8x8_t)vsqadd_u8((uint8x8_t)v22.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, (int8x8_t)vshr_n_u8((uint8x8_t)v22.val[0], 3uLL)));
    v22.val[1] = (int8x8_t)vsqadd_u8((uint8x8_t)v22.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, (int8x8_t)vshr_n_u8((uint8x8_t)v22.val[1], 3uLL)));
    v23.val[0] = (int8x8_t)vsqadd_u8((uint8x8_t)v23.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, (int8x8_t)vshr_n_u8((uint8x8_t)v23.val[0], 3uLL)));
    vst2_s8(result, v22);
    v11 = 2 * a2;
    result += v11;
    v23.val[1] = (int8x8_t)vsqadd_u8((uint8x8_t)v23.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, (int8x8_t)vshr_n_u8((uint8x8_t)v23.val[1], 3uLL)));
    vst2_s8(v14, v23);
    v12 -= 2;
    a5 += 4;
  }
  while (v12 > 2);
  return result;
}

uint64_t sub_1C97189A8(uint64_t a1, uint64_t a2)
{
  unint64_t i;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;

  for (i = 0; i != 4; ++i)
  {
    v5 = 0;
    if (i)
      v6 = byte_1C9861A00;
    else
      v6 = byte_1C98619D8;
    if (i)
      v7 = 64;
    else
      v7 = 16;
    if (i == 3)
      v8 = 3;
    else
      v8 = 1;
    v30 = v8;
    v31 = v6;
    v29 = *v6 + 1;
    do
    {
      v9 = v5 - 3;
      if (v5 < 3)
        v9 = v5;
      if (i == 3 && v9)
      {
        v10 = a1 + 65 * v5;
        v11 = (void *)(v10 + 1170);
        v12 = (const void *)(v10 + 780);
LABEL_28:
        memcpy(v11, v12, v7 | 1);
        goto LABEL_29;
      }
      if (!sub_1C971C898(a2, 1))
      {
        v15 = sub_1C971B8B0(a2);
        v16 = v15 * v30;
        v17 = 4294954394;
        if (v15 * v30 < 0 || (uint64_t)v5 < v16)
          return v17;
        v18 = (char *)&unk_1C98324C0 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
        if (!i)
          v18 = (char *)&unk_1C98324AF;
        v19 = a1 + 390 * i + 65 * ((int)v5 - v16);
        if (v15)
          v12 = (const void *)v19;
        else
          v12 = v18;
        v11 = (void *)(a1 + 390 * i + 65 * v5);
        goto LABEL_28;
      }
      if (i <= 1)
      {
        v14 = 8;
      }
      else
      {
        v13 = sub_1C971B8B0(a2);
        v14 = (-((v13 + 1) & 1) ^ ((v13 + 1) >> 1)) + ((v13 + 1) & 1) + 8;
        *(_BYTE *)(a1 + 390 * i + 65 * v5) = (-((v13 + 1) & 1) ^ ((v13 + 1) >> 1)) + ((v13 + 1) & 1) + 8;
      }
      v20 = v31;
      v21 = v7;
      do
      {
        v22 = sub_1C971B8B0(a2);
        v23 = (v22 + 1) & 1;
        v24 = v14 + v23 + (-v23 ^ ((v22 + 1) >> 1)) + 256;
        v25 = (v14 + v23 + (-(char)v23 ^ ((v22 + 1) >> 1)));
        v26 = -v24;
        if (v26 >= 0)
          v14 = -v26;
        else
          v14 = v25;
        v27 = *v20++;
        *(_BYTE *)(v27 + 65 * v5 + a1 + 390 * i + 1) = v14;
        --v21;
      }
      while (v21);
      if (i < 2)
        *(_BYTE *)(a1 + 390 * i + 65 * v5) = *(_BYTE *)(a1 + 390 * i + 65 * v5 + v29);
LABEL_29:
      ++v5;
    }
    while (v5 != 6);
  }
  return 0;
}

uint64_t sub_1C9718BDC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  char v37;
  int v38;
  unint64_t v39;
  char v40;
  unsigned int *v41;
  BOOL v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  int v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  unsigned int *v73;
  BOOL v74;
  unsigned int v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  unsigned int *v80;
  unsigned int v81;
  unint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  unsigned int *v87;
  unsigned int v88;
  int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  int v95;
  int v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  int v101;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  int v109;
  unint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  int v117;
  unint64_t v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned __int16 v128;
  unsigned __int16 *v129;
  unsigned __int16 v130;
  std::__shared_weak_count *v131;
  int v132;
  unint64_t v133;
  char v134;
  unsigned int *v135;
  unsigned int v136;
  int v137;
  uint64_t v138;
  int v139;
  unsigned int *v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int *v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  const char *v154;
  int v155;
  unint64_t v156;
  char v157;
  unsigned int *v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  unint64_t v166;
  int v167;
  unsigned int *v168;
  unsigned int v169;
  int v170;
  unint64_t v171;
  char v172;
  unsigned int *v173;
  BOOL v174;
  unsigned int v175;
  unint64_t v176;
  unsigned int *v177;
  unsigned int *v178;
  unsigned int v179;
  int v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  int v185;
  _BOOL4 v186;
  unsigned int v187;
  unint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unint64_t v192;
  unsigned int v193;
  unint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  int v197;
  unint64_t v198;
  unsigned int *v199;
  BOOL v200;
  unsigned int v201;
  unsigned __int8 v202;
  unint64_t v203;
  uint64_t shared_weak_owners;
  unint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unint64_t v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  unint64_t v213;
  char v214;
  unsigned int *v215;
  BOOL v216;
  unsigned int v217;
  FILE *v218;
  const char *v219;
  const char *v220;
  size_t v221;
  unint64_t v222;
  unsigned __int8 *v223;
  int v224;
  BOOL v225;
  unsigned int v226;
  unint64_t v227;
  char v228;
  unsigned int *v229;
  unsigned int v230;
  uint64_t v231;
  _BYTE *v232;
  int v233;
  int v234;
  unsigned int v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unsigned __int16 v239;
  int v240;
  int v241;
  int v242;
  unsigned int *v243;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  unsigned int v252;
  unint64_t v254;
  unsigned int *v255;
  BOOL v256;
  unsigned int v257;
  unsigned __int8 v258;
  uint64_t v259;
  const char *v260;
  uint64_t shared_owners_low;
  int v262;
  unint64_t v263;
  char v264;
  unsigned int *v265;
  BOOL v266;
  unsigned int v267;
  int v268;
  unint64_t v269;
  char v270;
  unint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  char *v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  unint64_t v285;
  int v286;
  unsigned int *v287;
  unsigned int *v288;
  unsigned int v289;
  int v290;
  unint64_t v291;
  char v292;
  unsigned int *v293;
  BOOL v294;
  unsigned int v295;
  int v296;
  unint64_t v297;
  unsigned int v298;
  unsigned __int16 v299;
  uint64_t v300;
  unint64_t v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  unsigned int *v305;
  unsigned int v306;
  int v307;
  int v308;
  unint64_t v309;
  unsigned int *v310;
  unsigned int v311;
  int v312;
  unint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  int v316;
  unint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unint64_t v322;
  unsigned int *v323;
  unsigned int v324;
  unint64_t v325;
  unsigned int *v326;
  unsigned int v327;
  unsigned int v328;
  unint64_t v329;
  char v330;
  unsigned int *v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  unint64_t v335;
  int v336;
  unint64_t v337;
  unsigned int v338;
  unint64_t v339;
  unsigned int *v340;
  unsigned int v341;
  int v342;
  unint64_t v343;
  unsigned int *v344;
  unsigned int v345;
  int v346;
  unint64_t v347;
  unsigned int *v348;
  unsigned int v349;
  int v350;
  unint64_t v351;
  unsigned int v352;
  unsigned int *v353;
  unsigned int v354;
  int v355;
  unint64_t v356;
  unsigned int v357;
  unsigned int *v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  _BOOL4 v362;
  unsigned int shared_weak_owners_low;
  unint64_t v364;
  unsigned int *v365;
  unsigned int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  uint64_t v372;
  unint64_t v373;
  unsigned int *v374;
  unsigned int v375;
  unsigned int v376;
  unint64_t v377;
  unsigned int v378;
  unsigned int v379;
  unint64_t v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  unsigned int *v384;
  unsigned int v385;
  int v386;
  uint64_t v387;
  int v388;
  unsigned int *v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  int v393;
  unsigned int *v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  int v398;
  unsigned int *v399;
  unsigned int v400;
  int v401;
  unsigned int v402;
  int v403;
  unsigned int *v404;
  unsigned int v405;
  int v406;
  unsigned int v407;
  int v408;
  unsigned int *v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  int v413;
  unsigned int *v414;
  unsigned int v415;
  int v416;
  unsigned int v417;
  int v418;
  unsigned int *v419;
  unsigned int v420;
  int v421;
  uint64_t v422;
  int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  uint64_t v429;
  int v430;
  char v431;
  char v432;
  char v433;
  unsigned __int8 v434;
  char v435;
  unsigned __int8 v436;
  int v437;
  unsigned int shared_owners_high;
  unsigned int v439;
  char v440;
  unsigned __int8 *v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  char v448;
  unint64_t v449;
  unsigned int v450;
  unsigned __int8 v451;
  FILE *v452;
  uint64_t v453;
  uint64_t v454;
  unsigned int v455;
  BOOL v456;
  int v457;
  int v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  unsigned int v462;
  unsigned int v463;
  uint64_t v464;
  unsigned int v465;
  uint64_t v466;
  int v467;
  int v468;
  uint64_t v469;
  int v470;
  uint64_t i;
  uint64_t v472;
  uint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  std::__shared_count v476;
  __int128 v477;
  int v478;
  __int128 v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t *v482;
  unint64_t v483;
  int v484[2];
  std::__shared_weak_count *v485;
  void *__p[4];
  unsigned int *v487;
  unsigned int *v488;
  unint64_t v489;

  memset(__p, 0, 24);
  v487 = 0;
  v488 = 0;
  v489 = 0;
  v6 = sub_1C971B9D0((unint64_t *)__p, a2);
  if ((_DWORD)v6)
    goto LABEL_2;
  v8 = *(unsigned __int8 *)(a2 + 16);
  switch(v8)
  {
    case '"':
      v12 = (std::__shared_weak_count *)operator new(0x708uLL);
      v12->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291B10;
      v14 = v12 + 1;
      sub_1C96FDC78((uint64_t)&v12[1], a1, 0, 0);
      *(_QWORD *)v484 = v12 + 1;
      v485 = v12;
      if (BYTE1(v12[74].__shared_owners_))
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("This PPS has already been parsed, a new one must be allocated instead\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "This PPS has already been parsed, a new one must be allocated instead\n");
        }
        v6 = 4294954385;
        goto LABEL_20;
      }
      BYTE1(v12[74].__shared_owners_) = 1;
      LOBYTE(v12[1].__vftable) = sub_1C971B8B0((uint64_t)__p);
      BYTE1(v12[1].__vftable) = sub_1C971B8B0((uint64_t)__p);
      v21 = SHIDWORD(v489) + 1;
      HIDWORD(v489) = v21 & 7;
      v22 = v488;
      v23 = (unsigned int *)((char *)v487 + (v21 >> 3));
      v487 = v23;
      if (v23 >= v488)
      {
        if (v23 > v488)
          v23 = v488;
        v24 = v489;
      }
      else
      {
        v24 = bswap32(*v23);
      }
      v44 = v24 << (v21 & 7);
      BYTE2(v12[1].__vftable) = (v489 & 0x80000000) != 0;
      v45 = (v21 & 7) + 1;
      LODWORD(v489) = v44;
      HIDWORD(v489) = v45 & 7;
      v46 = (unsigned int *)((char *)v23 + (v45 >> 3));
      v487 = v46;
      if (v46 >= v22)
      {
        if (v46 > v22)
          v46 = v22;
        v47 = v44;
      }
      else
      {
        v47 = bswap32(*v46);
      }
      v48 = v47 << (v45 & 7);
      BYTE3(v12[1].__vftable) = v44 < 0;
      v49 = (v45 & 7) + 3;
      v50 = v49 & 7;
      LODWORD(v489) = v48;
      HIDWORD(v489) = v49 & 7;
      v51 = (unsigned int *)((char *)v46 + (v49 >> 3));
      v487 = v51;
      if (v51 >= v22)
      {
        if (v51 > v22)
          v51 = v22;
        v52 = v48;
      }
      else
      {
        v52 = bswap32(*v51);
      }
      v53 = v48 >> 29;
      v54 = v52 << v50;
      BYTE4(v12[1].__vftable) = v53;
      v55 = (v49 & 7) + 1;
      LODWORD(v489) = v52 << v50;
      HIDWORD(v489) = v55 & 7;
      v56 = (unsigned int *)((char *)v51 + (v55 >> 3));
      v487 = v56;
      if (v56 >= v22)
      {
        if (v56 > v22)
          v56 = v22;
        v57 = v54;
      }
      else
      {
        v57 = bswap32(*v56);
      }
      v58 = v57 << (v55 & 7);
      BYTE5(v12[1].__vftable) = v54 < 0;
      v59 = (v55 & 7) + 1;
      LODWORD(v489) = v58;
      HIDWORD(v489) = v59 & 7;
      v60 = (unsigned int *)((char *)v56 + (v59 >> 3));
      v487 = v60;
      if (v60 >= v22)
      {
        if (v60 > v22)
          v487 = v22;
        v61 = v58;
      }
      else
      {
        v61 = bswap32(*v60);
      }
      LODWORD(v489) = v61 << (v59 & 7);
      BYTE6(v12[1].__vftable) = v58 < 0;
      HIBYTE(v12[1].__vftable) = sub_1C971B8B0((uint64_t)__p);
      LOBYTE(v12[1].__shared_owners_) = sub_1C971B8B0((uint64_t)__p);
      v62 = sub_1C971B8B0((uint64_t)__p);
      BYTE1(v12[1].__shared_owners_) = (-((v62 + 1) & 1) ^ ((v62 + 1) >> 1)) + ((v62 + 1) & 1);
      v63 = SHIDWORD(v489) + 1;
      HIDWORD(v489) = v63 & 7;
      v64 = v488;
      v65 = (unsigned int *)((char *)v487 + (v63 >> 3));
      v487 = v65;
      if (v65 >= v488)
      {
        if (v65 > v488)
          v65 = v488;
        v66 = v489;
      }
      else
      {
        v66 = bswap32(*v65);
      }
      v67 = v66 << (v63 & 7);
      BYTE2(v12[1].__shared_owners_) = (v489 & 0x80000000) != 0;
      v68 = (v63 & 7) + 1;
      LODWORD(v489) = v67;
      HIDWORD(v489) = v68 & 7;
      v69 = (unsigned int *)((char *)v65 + (v68 >> 3));
      v487 = v69;
      if (v69 >= v64)
      {
        if (v69 > v64)
          v69 = v64;
        v70 = v67;
      }
      else
      {
        v70 = bswap32(*v69);
      }
      v71 = v70 << (v68 & 7);
      BYTE3(v12[1].__shared_owners_) = v67 < 0;
      v72 = (v68 & 7) + 1;
      LODWORD(v489) = v71;
      HIDWORD(v489) = v72 & 7;
      v73 = (unsigned int *)((char *)v69 + (v72 >> 3));
      v487 = v73;
      v74 = v73 > v64;
      if (v73 >= v64)
      {
        v75 = v71;
        if (v74)
        {
          v487 = v64;
          v75 = v71;
        }
      }
      else
      {
        v75 = bswap32(*v73);
      }
      LODWORD(v489) = v75 << (v72 & 7);
      BYTE4(v12[1].__shared_owners_) = v71 < 0;
      if (v71 < 0)
        v76 = sub_1C971B8B0((uint64_t)__p);
      else
        v76 = 0;
      BYTE5(v12[1].__shared_owners_) = v76;
      v95 = sub_1C971B8B0((uint64_t)__p);
      BYTE6(v12[1].__shared_owners_) = (-((v95 + 1) & 1) ^ ((v95 + 1) >> 1)) + ((v95 + 1) & 1);
      v96 = sub_1C971B8B0((uint64_t)__p);
      HIBYTE(v12[1].__shared_owners_) = (-((v96 + 1) & 1) ^ ((v96 + 1) >> 1)) + ((v96 + 1) & 1);
      v97 = SHIDWORD(v489) + 1;
      HIDWORD(v489) = v97 & 7;
      v98 = v488;
      v99 = (unsigned int *)((char *)v487 + (v97 >> 3));
      v487 = v99;
      if (v99 >= v488)
      {
        if (v99 > v488)
          v99 = v488;
        v100 = v489;
      }
      else
      {
        v100 = bswap32(*v99);
      }
      v101 = v100 << (v97 & 7);
      LOBYTE(v12[1].__shared_weak_owners_) = (v489 & 0x80000000) != 0;
      v102 = (v97 & 7) + 1;
      LODWORD(v489) = v101;
      HIDWORD(v489) = v102 & 7;
      v103 = (unsigned int *)((char *)v99 + (v102 >> 3));
      v487 = v103;
      if (v103 >= v98)
      {
        if (v103 > v98)
          v103 = v98;
        v104 = v101;
      }
      else
      {
        v104 = bswap32(*v103);
      }
      v105 = v104 << (v102 & 7);
      BYTE1(v12[1].__shared_weak_owners_) = v101 < 0;
      v106 = (v102 & 7) + 1;
      LODWORD(v489) = v105;
      HIDWORD(v489) = v106 & 7;
      v107 = (unsigned int *)((char *)v103 + (v106 >> 3));
      v487 = v107;
      if (v107 >= v98)
      {
        if (v107 > v98)
          v107 = v98;
        v108 = v105;
      }
      else
      {
        v108 = bswap32(*v107);
      }
      v109 = v108 << (v106 & 7);
      BYTE2(v12[1].__shared_weak_owners_) = v105 < 0;
      v110 = (v106 & 7) + 1;
      LODWORD(v489) = v109;
      HIDWORD(v489) = v110 & 7;
      v111 = (unsigned int *)((char *)v107 + (v110 >> 3));
      v487 = v111;
      if (v111 >= v98)
      {
        if (v111 > v98)
          v111 = v98;
        v112 = v109;
      }
      else
      {
        v112 = bswap32(*v111);
      }
      v113 = v112 << (v110 & 7);
      BYTE3(v12[1].__shared_weak_owners_) = v109 < 0;
      v114 = (v110 & 7) + 1;
      LODWORD(v489) = v113;
      HIDWORD(v489) = v114 & 7;
      v115 = (unsigned int *)((char *)v111 + (v114 >> 3));
      v487 = v115;
      if (v115 >= v98)
      {
        if (v115 > v98)
          v115 = v98;
        v116 = v113;
      }
      else
      {
        v116 = bswap32(*v115);
      }
      v117 = v116 << (v114 & 7);
      BYTE4(v12[1].__shared_weak_owners_) = v113 < 0;
      v118 = (v114 & 7) + 1;
      v119 = v118 & 7;
      v489 = __PAIR64__(v119, v117);
      v120 = (unsigned int *)((char *)v115 + (v118 >> 3));
      v487 = v120;
      if (v120 >= v98)
      {
        if (v120 > v98)
        {
          v487 = v98;
          v120 = v98;
        }
        v121 = v117;
      }
      else
      {
        v121 = bswap32(*v120);
      }
      v122 = v121 << v119;
      LODWORD(v489) = v122;
      BYTE5(v12[1].__shared_weak_owners_) = v117 < 0;
      LOBYTE(v12[74].__vftable) = v113 < 0;
      if ((v113 & 0x80000000) == 0)
      {
        LOBYTE(v123) = 1;
        goto LABEL_142;
      }
      v128 = sub_1C971B8B0((uint64_t)__p);
      HIWORD(v12[1].__shared_weak_owners_) = v128;
      v129 = (unsigned __int16 *)&v12[1].__shared_weak_owners_ + 3;
      v130 = sub_1C971B8B0((uint64_t)__p);
      LOWORD(v12[2].__vftable) = v130;
      v131 = v12 + 2;
      v132 = v489;
      v133 = SHIDWORD(v489) + 1;
      v134 = v133 & 7;
      HIDWORD(v489) = v133 & 7;
      v135 = (unsigned int *)((char *)v487 + (v133 >> 3));
      v487 = v135;
      if (v135 >= v488)
      {
        if (v135 > v488)
          v487 = v488;
        v136 = v489;
      }
      else
      {
        v136 = bswap32(*v135);
      }
      LODWORD(v489) = v136 << v134;
      BYTE2(v12[2].__vftable) = v132 < 0;
      if (v128 < 0x14u)
      {
        if (v130 < 0x16u)
        {
          sub_1C97480EC((char **)&v12[69].__shared_weak_owners_, v128 + 1);
          sub_1C97480EC((char **)&v12[70].__shared_weak_owners_, LOWORD(v12[2].__vftable) + 1);
          if (!BYTE2(v12[2].__vftable))
          {
            if (*v129)
            {
              v203 = 0;
              shared_weak_owners = v12[69].__shared_weak_owners_;
              do
                *(_WORD *)(shared_weak_owners + 2 * v203++) = sub_1C971B8B0((uint64_t)__p);
              while (v203 < *v129);
            }
            if (LOWORD(v131->__vftable))
            {
              v205 = 0;
              v206 = v12[70].__shared_weak_owners_;
              do
                *(_WORD *)(v206 + 2 * v205++) = sub_1C971B8B0((uint64_t)__p);
              while (v205 < LOWORD(v131->__vftable));
            }
          }
          v207 = v489;
          v208 = SHIDWORD(v489) + 1;
          v119 = v208 & 7;
          HIDWORD(v489) = v119;
          v98 = v488;
          v120 = (unsigned int *)((char *)v487 + (v208 >> 3));
          v487 = v120;
          if (v120 >= v488)
          {
            if (v120 > v488)
              v120 = v488;
            v209 = v489;
          }
          else
          {
            v209 = bswap32(*v120);
          }
          v122 = v209 << v119;
          LODWORD(v489) = v122;
          v123 = v207 >> 31;
LABEL_142:
          BYTE3(v12[2].__vftable) = v123;
          v124 = v119 + 1;
          v125 = v124 & 7;
          HIDWORD(v489) = v125;
          v126 = (unsigned int *)((char *)v120 + (v124 >> 3));
          v487 = v126;
          if (v126 >= v98)
          {
            if (v126 > v98)
              v126 = v98;
            v127 = v122;
          }
          else
          {
            v127 = bswap32(*v126);
          }
          v137 = v127 << v125;
          BYTE4(v12[2].__vftable) = v122 < 0;
          v138 = (v125 + 1) >> 3;
          v139 = (v125 + 1) & 7;
          v489 = __PAIR64__(v139, v137);
          v140 = (unsigned int *)((char *)v126 + v138);
          v487 = (unsigned int *)((char *)v126 + v138);
          if ((unsigned int *)((char *)v126 + v138) >= v98)
          {
            if ((unsigned int *)((char *)v126 + v138) > v98)
              v140 = v98;
            v141 = v137;
          }
          else
          {
            v141 = bswap32(*v140);
          }
          v142 = v141 << v139;
          LODWORD(v489) = v142;
          BYTE5(v12[2].__vftable) = v137 < 0;
          if (v137 < 0)
          {
            v143 = v139 + 1;
            v144 = v143 >> 3;
            v145 = v143 & 7;
            HIDWORD(v489) = v145;
            v146 = (unsigned int *)((char *)v140 + v144);
            v487 = v146;
            if (v146 >= v98)
            {
              if (v146 > v98)
                v146 = v98;
              v147 = v142;
            }
            else
            {
              v147 = bswap32(*v146);
            }
            v160 = v147 << v145;
            BYTE6(v12[2].__vftable) = v142 < 0;
            v161 = v145 + 1;
            v139 = ((_BYTE)v145 + 1) & 7;
            v489 = __PAIR64__(v139, v160);
            v140 = (unsigned int *)((char *)v146 + (v161 >> 3));
            v487 = v140;
            if (v140 >= v98)
            {
              v162 = v160;
              if (v140 > v98)
              {
                v487 = v98;
                v140 = v98;
                v162 = v160;
              }
            }
            else
            {
              v162 = bswap32(*v140);
            }
            v142 = v162 << v139;
            LODWORD(v489) = v142;
            HIBYTE(v12[2].__vftable) = v160 < 0;
            if (v160 < 0)
            {
              LOBYTE(v165) = 0;
              LOBYTE(v12[2].__shared_owners_) = 0;
            }
            else
            {
              v163 = sub_1C971B8B0((uint64_t)__p);
              LOBYTE(v12[2].__shared_owners_) = (-((v163 + 1) & 1) ^ ((v163 + 1) >> 1)) + ((v163 + 1) & 1);
              v164 = sub_1C971B8B0((uint64_t)__p);
              v165 = (-((v164 + 1) & 1) ^ ((v164 + 1) >> 1)) + ((v164 + 1) & 1);
              v142 = v489;
              v139 = HIDWORD(v489);
              v140 = v487;
              v98 = v488;
            }
            BYTE1(v12[2].__shared_owners_) = v165;
          }
          v166 = v139 + 1;
          v167 = v166 & 7;
          HIDWORD(v489) = v167;
          v168 = (unsigned int *)((char *)v140 + (v166 >> 3));
          v487 = v168;
          if (v168 >= v98)
          {
            v169 = v142;
            if (v168 > v98)
            {
              v487 = v98;
              v168 = v98;
              v169 = v142;
            }
          }
          else
          {
            v169 = bswap32(*v168);
          }
          v170 = v169 << v167;
          LODWORD(v489) = v170;
          BYTE2(v12[2].__shared_owners_) = v142 < 0;
          if (v142 < 0)
          {
            sub_1C97189A8((uint64_t)&v12[2].__shared_weak_owners_, (uint64_t)__p);
            v170 = v489;
            v167 = HIDWORD(v489);
            v168 = v487;
            v98 = v488;
          }
          v171 = v167 + 1;
          v172 = v171 & 7;
          HIDWORD(v489) = v171 & 7;
          v173 = (unsigned int *)((char *)v168 + (v171 >> 3));
          v487 = v173;
          v174 = v173 > v98;
          if (v173 >= v98)
          {
            v175 = v170;
            if (v174)
            {
              v487 = v98;
              v175 = v170;
            }
          }
          else
          {
            v175 = bswap32(*v173);
          }
          LODWORD(v489) = v175 << v172;
          LOBYTE(v12[68].__vftable) = v170 < 0;
          WORD1(v12[68].__vftable) = sub_1C971B8B0((uint64_t)__p);
          v176 = SHIDWORD(v489) + 1;
          HIDWORD(v489) = v176 & 7;
          v177 = v488;
          v178 = (unsigned int *)((char *)v487 + (v176 >> 3));
          v487 = v178;
          if (v178 >= v488)
          {
            if (v178 > v488)
              v178 = v488;
            v179 = v489;
          }
          else
          {
            v179 = bswap32(*v178);
          }
          v180 = v179 << (v176 & 7);
          BYTE4(v12[68].__vftable) = (v489 & 0x80000000) != 0;
          v181 = (v176 & 7) + 1;
          v182 = v181 & 7;
          v489 = __PAIR64__(v182, v180);
          v183 = (unsigned int *)((char *)v178 + (v181 >> 3));
          v487 = v183;
          if (v183 >= v177)
          {
            v184 = v180;
            if (v183 > v177)
            {
              v487 = v177;
              v183 = v177;
              v184 = v180;
            }
          }
          else
          {
            v184 = bswap32(*v183);
          }
          v185 = v184 << v182;
          LODWORD(v489) = v185;
          BYTE5(v12[68].__vftable) = v180 < 0;
          if (v180 < 0)
          {
            v188 = (v181 & 7) + 1;
            HIDWORD(v489) = v188 & 7;
            v189 = (unsigned int *)((char *)v183 + (v188 >> 3));
            v487 = v189;
            if (v189 >= v177)
            {
              if (v189 > v177)
                v189 = v177;
              v190 = v185;
            }
            else
            {
              v190 = bswap32(*v189);
            }
            v191 = v190 << (v188 & 7);
            v187 = v185 >> 31;
            BYTE6(v12[68].__vftable) = v185 < 0;
            v192 = (v188 & 7) + 7;
            v182 = v192 & 7;
            v489 = __PAIR64__(v182, v191);
            v183 = (unsigned int *)((char *)v189 + (v192 >> 3));
            v487 = v183;
            if (v183 >= v177)
            {
              if (v183 > v177)
              {
                v487 = v177;
                v183 = v177;
              }
              v193 = v191;
            }
            else
            {
              v193 = bswap32(*v183);
            }
            v185 = v193 << v182;
            LODWORD(v489) = v185;
            v186 = (v191 & 0xFE000000) != 0;
          }
          else
          {
            v186 = 0;
            v187 = BYTE6(v12[68].__vftable);
          }
          if (v187)
          {
            if (BYTE3(v12[1].__shared_owners_))
            {
              HIBYTE(v12[68].__vftable) = sub_1C971B8B0((uint64_t)__p);
              v185 = v489;
              v182 = HIDWORD(v489);
              v183 = v487;
              v177 = v488;
            }
            v194 = (int)v182 + 1;
            HIDWORD(v489) = v194 & 7;
            v195 = (unsigned int *)((char *)v183 + (v194 >> 3));
            v487 = v195;
            if (v195 >= v177)
            {
              if (v195 > v177)
                v195 = v177;
              v196 = v185;
            }
            else
            {
              v196 = bswap32(*v195);
            }
            v197 = v196 << (v194 & 7);
            LOBYTE(v12[68].__shared_owners_) = v185 < 0;
            v198 = (v194 & 7) + 1;
            LODWORD(v489) = v197;
            HIDWORD(v489) = v198 & 7;
            v199 = (unsigned int *)((char *)v195 + (v198 >> 3));
            v487 = v199;
            v200 = v199 > v177;
            if (v199 >= v177)
            {
              v201 = v197;
              if (v200)
              {
                v487 = v177;
                v201 = v197;
              }
            }
            else
            {
              v201 = bswap32(*v199);
            }
            LODWORD(v489) = v201 << (v198 & 7);
            BYTE1(v12[68].__shared_owners_) = v197 < 0;
            if (v197 < 0)
            {
              BYTE2(v12[68].__shared_owners_) = sub_1C971B8B0((uint64_t)__p);
              v202 = sub_1C971B8B0((uint64_t)__p);
              BYTE3(v12[68].__shared_owners_) = v202;
              if (v202 > 5u)
              {
                if (dword_1ED1ACCC0 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid chroma_qp_offset_list_len_minus1 = %d\n", v202);
                  syslog(27, "Invalid chroma_qp_offset_list_len_minus1 = %d\n", BYTE3(v12[68].__shared_owners_));
                }
                goto LABEL_243;
              }
              v231 = v202 + 1;
              v232 = (char *)&v12[68].__shared_weak_owners_ + 2;
              do
              {
                v233 = sub_1C971B8B0((uint64_t)__p);
                *(v232 - 6) = (-((v233 + 1) & 1) ^ ((v233 + 1) >> 1)) + ((v233 + 1) & 1);
                v234 = sub_1C971B8B0((uint64_t)__p);
                *v232++ = (-((v234 + 1) & 1) ^ ((v234 + 1) >> 1)) + ((v234 + 1) & 1);
                --v231;
              }
              while (v231);
            }
            LOBYTE(v12[69].__vftable) = sub_1C971B8B0((uint64_t)__p);
            BYTE1(v12[69].__vftable) = sub_1C971B8B0((uint64_t)__p);
          }
          if (!v186)
            goto LABEL_288;
          if (dword_1ED1ACCC0 >= 4)
          {
            fwrite("Ignoring PPS extension\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(28, "Ignoring PPS extension\n");
          }
          v6 = sub_1C9750FC0((uint64_t)__p);
          if (!(_DWORD)v6)
          {
LABEL_288:
            v487 = (unsigned int *)((char *)v487 + 1);
            HIDWORD(v489) = 0;
            if (v487 > v488)
              v487 = v488;
            v235 = LOBYTE(v12[1].__vftable);
            v6 = 4294954387;
            if (v235 <= 0x3F && BYTE1(v12[1].__vftable) < 0x10u)
            {
              if (a3)
              {
                sub_1C9776418((uint64_t)v14, (FILE *)*MEMORY[0x1E0C80C10]);
                v235 = LOBYTE(v14->__vftable);
              }
              sub_1C9746DB4((_QWORD *)(a1 + 16 * v235 + 512), (uint64_t)v14, (uint64_t)v12);
              do
                v236 = __ldaxr(p_shared_owners);
              while (__stlxr(v236 - 1, p_shared_owners));
              if (!v236)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                v237 = v12;
LABEL_295:
                std::__shared_weak_count::__release_weak(v237);
              }
LABEL_296:
              v6 = 0;
              goto LABEL_2;
            }
          }
          do
LABEL_20:
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (v15)
            goto LABEL_2;
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          v16 = v12;
LABEL_306:
          std::__shared_weak_count::__release_weak(v16);
          goto LABEL_2;
        }
        if (dword_1ED1ACCC0 >= 3)
        {
          v153 = 21;
          v154 = "num_tile_rows_minus1 (%d) out of range [0, %d]\n";
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_tile_rows_minus1 (%d) out of range [0, %d]\n", v130, 21);
          v129 = (unsigned __int16 *)&v12[2];
          goto LABEL_178;
        }
      }
      else if (dword_1ED1ACCC0 >= 3)
      {
        v153 = 19;
        v154 = "num_tile_columns_minus1 (%d) out of range [0, %d]\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_tile_columns_minus1 (%d) out of range [0, %d]\n", v128, 19);
LABEL_178:
        syslog(27, v154, *v129, v153);
      }
LABEL_243:
      v6 = 4294954387;
      goto LABEL_20;
    case '!':
      v10 = (std::__shared_weak_count *)operator new(0x888uLL);
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291B48;
      v11 = v10 + 1;
      sub_1C971BCE0((uint64_t)&v10[1], a1, 0);
      *(_QWORD *)v484 = v10 + 1;
      v485 = v10;
      if (BYTE5(v10[90].__shared_owners_))
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("This SPS has already been parsed, a new one must be allocated instead\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "This SPS has already been parsed, a new one must be allocated instead\n");
        }
        v6 = 4294954385;
        goto LABEL_301;
      }
      BYTE5(v10[90].__shared_owners_) = 1;
      v17 = SHIDWORD(v489) + 4;
      HIDWORD(v489) = v17 & 7;
      v18 = v488;
      v19 = (unsigned int *)((char *)v487 + (v17 >> 3));
      v487 = v19;
      if (v19 >= v488)
      {
        if (v19 > v488)
          v19 = v488;
        v20 = v489;
      }
      else
      {
        v20 = bswap32(*v19);
      }
      v29 = v20 << (v17 & 7);
      LOBYTE(v11->__vftable) = v489 >> 28;
      v30 = (v17 & 7) + 3;
      LODWORD(v489) = v29;
      HIDWORD(v489) = v30 & 7;
      v31 = (unsigned int *)((char *)v19 + (v30 >> 3));
      v487 = v31;
      if (v31 >= v18)
      {
        if (v31 > v18)
          v31 = v18;
        v32 = v29;
      }
      else
      {
        v32 = bswap32(*v31);
      }
      v33 = v29 >> 29;
      BYTE1(v10[1].__vftable) = v29 >> 29;
      v34 = (v30 & 7) + 1;
      LODWORD(v489) = v32 << (v30 & 7);
      HIDWORD(v489) = v34 & 7;
      v35 = (unsigned int *)((char *)v31 + (v34 >> 3));
      v487 = v35;
      if (v35 >= v18)
      {
        if (v35 > v18)
          v487 = v18;
        v36 = v32 << (v30 & 7);
      }
      else
      {
        v36 = bswap32(*v35);
      }
      LODWORD(v489) = v36 << (v34 & 7);
      BYTE2(v10[1].__vftable) = ((v32 << (v30 & 7)) & 0x80000000) != 0;
      v6 = sub_1C971BECC((uint64_t)&v10[1].__vftable + 4, v33, (uint64_t)__p);
      if ((_DWORD)v6)
        goto LABEL_301;
      LOBYTE(v10[9].__shared_owners_) = sub_1C971B8B0((uint64_t)__p);
      v37 = sub_1C971B8B0((uint64_t)__p);
      BYTE1(v10[9].__shared_owners_) = v37;
      if (v37 == 3)
      {
        v38 = v489;
        v39 = SHIDWORD(v489) + 1;
        v40 = v39 & 7;
        HIDWORD(v489) = v39 & 7;
        v41 = (unsigned int *)((char *)v487 + (v39 >> 3));
        v487 = v41;
        v42 = v41 > v488;
        if (v41 >= v488)
        {
          v43 = v489;
          if (v42)
          {
            v487 = v488;
            v43 = v489;
          }
        }
        else
        {
          v43 = bswap32(*v41);
        }
        LODWORD(v489) = v43 << v40;
        BYTE2(v10[9].__shared_owners_) = v38 < 0;
        if (v38 < 0)
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("separate_colour_plane_flag_ not supported\n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "separate_colour_plane_flag_ not supported\n");
          }
          v6 = 4294954386;
          goto LABEL_301;
        }
      }
      else
      {
        BYTE2(v10[9].__shared_owners_) = 0;
      }
      v210 = sub_1C971BC60((uint64_t)__p);
      HIDWORD(v10[9].__shared_owners_) = v210;
      v211 = sub_1C971BC60((uint64_t)__p);
      LODWORD(v10[9].__shared_weak_owners_) = v211;
      if (v210 > 268435454 || v211 >= 0xFFFFFFF)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          v218 = (FILE *)*MEMORY[0x1E0C80C10];
          v219 = "width/height are larger than we support\n";
          v220 = "width/height are larger than we support\n";
          v221 = 40;
LABEL_299:
          fwrite(v220, v221, 1uLL, v218);
          syslog(27, v219);
        }
      }
      else
      {
        if (v210 >= 1 && v211 > 0)
        {
          v212 = v489;
          v213 = SHIDWORD(v489) + 1;
          v214 = v213 & 7;
          HIDWORD(v489) = v213 & 7;
          v215 = (unsigned int *)((char *)v487 + (v213 >> 3));
          v487 = v215;
          v216 = v215 > v488;
          if (v215 >= v488)
          {
            v217 = v489;
            if (v216)
            {
              v487 = v488;
              v217 = v489;
            }
          }
          else
          {
            v217 = bswap32(*v215);
          }
          LODWORD(v489) = v217 << v214;
          BYTE4(v10[9].__shared_weak_owners_) = v212 < 0;
          if (v212 < 0)
          {
            HIWORD(v10[9].__shared_weak_owners_) = sub_1C971BC60((uint64_t)__p);
            LOWORD(v10[10].__vftable) = sub_1C971BC60((uint64_t)__p);
            WORD1(v10[10].__vftable) = sub_1C971BC60((uint64_t)__p);
            WORD2(v10[10].__vftable) = sub_1C971BC60((uint64_t)__p);
          }
          BYTE6(v10[10].__vftable) = sub_1C971B8B0((uint64_t)__p);
          HIBYTE(v10[10].__vftable) = sub_1C971B8B0((uint64_t)__p);
          v258 = sub_1C971B8B0((uint64_t)__p);
          LOBYTE(v10[10].__shared_owners_) = v258;
          if (v258 >= 0xDu)
          {
            if (dword_1ED1ACCC0 >= 3)
            {
              v259 = 12;
              v260 = "log2_max_pic_order_cnt_lsb_minus4 (%d) > %d\n";
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2_max_pic_order_cnt_lsb_minus4 (%d) > %d\n", v258, 12);
              shared_owners_low = LOBYTE(v10[10].__shared_owners_);
LABEL_342:
              syslog(27, v260, shared_owners_low, v259);
            }
            goto LABEL_300;
          }
          v262 = v489;
          v263 = SHIDWORD(v489) + 1;
          v264 = v263 & 7;
          HIDWORD(v489) = v263 & 7;
          v265 = (unsigned int *)((char *)v487 + (v263 >> 3));
          v487 = v265;
          v266 = v265 > v488;
          if (v265 >= v488)
          {
            v267 = v489;
            if (v266)
            {
              v487 = v488;
              v267 = v489;
            }
          }
          else
          {
            v267 = bswap32(*v265);
          }
          v278 = 0;
          LODWORD(v489) = v267 << v264;
          BYTE1(v10[10].__shared_owners_) = v262 < 0;
          LOWORD(v10[89].__shared_weak_owners_) = 0;
          v279 = v10 + 11;
          do
          {
            if (!v278 || v262 < 0)
            {
              *((_BYTE *)v279 + v278 - 14) = sub_1C971B8B0((uint64_t)__p);
              *((_BYTE *)v279 + v278 - 7) = sub_1C971B8B0((uint64_t)__p);
              v281 = sub_1C971BC60((uint64_t)__p);
            }
            else
            {
              v280 = (char *)v279 + v278;
              *(v280 - 14) = BYTE2(v10[10].__shared_owners_);
              *(v280 - 7) = BYTE1(v10[10].__shared_weak_owners_);
              v281 = (int)v10[11].__vftable;
            }
            *((_DWORD *)&v279->__vftable + v278) = v281;
            v282 = *((unsigned __int8 *)v279 + v278 - 14);
            if (v282 > 0xF)
              goto LABEL_300;
            if (LOBYTE(v10[89].__shared_weak_owners_) > v282)
              LOBYTE(v282) = v10[89].__shared_weak_owners_;
            LOBYTE(v10[89].__shared_weak_owners_) = v282;
            v283 = *((unsigned __int8 *)v279 + v278 - 7);
            if (BYTE1(v10[89].__shared_weak_owners_) > v283)
              LOBYTE(v283) = BYTE1(v10[89].__shared_weak_owners_);
            BYTE1(v10[89].__shared_weak_owners_) = v283;
            v225 = v278++ >= BYTE1(v10[1].__vftable);
          }
          while (!v225);
          BYTE4(v10[12].__vftable) = sub_1C971B8B0((uint64_t)__p);
          BYTE5(v10[12].__vftable) = sub_1C971B8B0((uint64_t)__p);
          BYTE6(v10[12].__vftable) = sub_1C971B8B0((uint64_t)__p);
          HIBYTE(v10[12].__vftable) = sub_1C971B8B0((uint64_t)__p);
          LOBYTE(v10[12].__shared_owners_) = sub_1C971B8B0((uint64_t)__p);
          BYTE1(v10[12].__shared_owners_) = sub_1C971B8B0((uint64_t)__p);
          v284 = v489;
          v285 = SHIDWORD(v489) + 1;
          v286 = v285 & 7;
          HIDWORD(v489) = v286;
          v287 = v488;
          v288 = (unsigned int *)((char *)v487 + (v285 >> 3));
          v487 = v288;
          if (v288 >= v488)
          {
            if (v288 > v488)
              v288 = v488;
            v289 = v489;
          }
          else
          {
            v289 = bswap32(*v288);
          }
          v296 = v289 << v286;
          LODWORD(v489) = v296;
          BYTE2(v10[12].__shared_owners_) = v284 < 0;
          if (v284 < 0)
          {
            v297 = (v285 & 7) + 1;
            v286 = v297 & 7;
            HIDWORD(v489) = v286;
            v288 = (unsigned int *)((char *)v288 + (v297 >> 3));
            v487 = v288;
            if (v288 >= v287)
            {
              v298 = v296;
              if (v288 > v287)
              {
                v487 = v287;
                v288 = v287;
                v298 = v296;
              }
            }
            else
            {
              v298 = bswap32(*v288);
            }
            v308 = v298 << v286;
            LODWORD(v489) = v308;
            BYTE3(v10[12].__shared_owners_) = v296 < 0;
            if (v296 < 0)
            {
              v6 = sub_1C97189A8((uint64_t)&v10[18].__shared_owners_, (uint64_t)__p);
              if ((_DWORD)v6)
                goto LABEL_301;
              v296 = v489;
              v286 = HIDWORD(v489);
              v288 = v487;
              v287 = v488;
            }
            else
            {
              v296 = v308;
            }
          }
          v309 = v286 + 1;
          HIDWORD(v489) = v309 & 7;
          v310 = (unsigned int *)((char *)v288 + (v309 >> 3));
          v487 = v310;
          if (v310 >= v287)
          {
            if (v310 > v287)
              v310 = v287;
            v311 = v296;
          }
          else
          {
            v311 = bswap32(*v310);
          }
          v312 = v311 << (v309 & 7);
          BYTE4(v10[12].__shared_owners_) = v296 < 0;
          v313 = (v309 & 7) + 1;
          LODWORD(v489) = v312;
          HIDWORD(v489) = v313 & 7;
          v314 = (unsigned int *)((char *)v310 + (v313 >> 3));
          v487 = v314;
          if (v314 >= v287)
          {
            if (v314 > v287)
              v314 = v287;
            v315 = v312;
          }
          else
          {
            v315 = bswap32(*v314);
          }
          v316 = v315 << (v313 & 7);
          BYTE5(v10[12].__shared_owners_) = v312 < 0;
          v317 = (v313 & 7) + 1;
          LODWORD(v489) = v316;
          HIDWORD(v489) = v317 & 7;
          v318 = (unsigned int *)((char *)v314 + (v317 >> 3));
          v487 = v318;
          if (v318 >= v287)
          {
            v319 = v315 << (v313 & 7);
            if (v318 > v287)
            {
              v487 = v287;
              v318 = v287;
              v319 = v316;
            }
          }
          else
          {
            v319 = bswap32(*v318);
          }
          v320 = v319 << (v317 & 7);
          LODWORD(v489) = v320;
          BYTE6(v10[12].__shared_owners_) = v316 < 0;
          if (v316 < 0)
          {
            v322 = (v317 & 7) + 4;
            HIDWORD(v489) = v322 & 7;
            v323 = (unsigned int *)((char *)v318 + (v322 >> 3));
            v487 = v323;
            if (v323 >= v287)
            {
              if (v323 > v287)
                v323 = v287;
              v324 = v320;
            }
            else
            {
              v324 = bswap32(*v323);
            }
            HIBYTE(v10[12].__shared_owners_) = v320 >> 28;
            v325 = (v322 & 7) + 4;
            LODWORD(v489) = v324 << (v322 & 7);
            HIDWORD(v489) = v325 & 7;
            v326 = (unsigned int *)((char *)v323 + (v325 >> 3));
            v487 = v326;
            if (v326 >= v287)
            {
              if (v326 > v287)
                v487 = v287;
              v327 = v324 << (v322 & 7);
            }
            else
            {
              v327 = bswap32(*v326);
            }
            LODWORD(v489) = v327 << (v325 & 7);
            LOBYTE(v10[12].__shared_weak_owners_) = v324 << (v322 & 7) >> 28;
            BYTE1(v10[12].__shared_weak_owners_) = sub_1C971B8B0((uint64_t)__p);
            BYTE2(v10[12].__shared_weak_owners_) = sub_1C971B8B0((uint64_t)__p);
            v328 = v489;
            v329 = SHIDWORD(v489) + 1;
            v330 = v329 & 7;
            HIDWORD(v489) = v329 & 7;
            v331 = (unsigned int *)((char *)v487 + (v329 >> 3));
            v487 = v331;
            if (v331 >= v488)
            {
              if (v331 > v488)
                v487 = v488;
              v332 = v489;
            }
            else
            {
              v332 = bswap32(*v331);
            }
            LODWORD(v489) = v332 << v330;
            v321 = v328 >> 31;
          }
          else
          {
            LOBYTE(v321) = 0;
          }
          BYTE3(v10[12].__shared_weak_owners_) = v321;
          v333 = sub_1C971B8B0((uint64_t)__p);
          LODWORD(v10[13].__vftable) = v333;
          if (v333 >= 0x41)
          {
            if (dword_1ED1ACCC0 < 3)
              goto LABEL_300;
            v259 = 64;
            v260 = "num_short_term_ref_pic_sets (%d) out of range [0, %d]\n";
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_short_term_ref_pic_sets (%d) out of range [0, %d]\n", v333, 64);
            shared_owners_low = LODWORD(v10[13].__vftable);
            goto LABEL_342;
          }
          sub_1C971E334((void **)&v10[13].__shared_owners_, v333);
          if (LODWORD(v10[13].__vftable))
          {
            v334 = 0;
            v335 = 0;
            do
            {
              v6 = sub_1C96FC5C4(v10[13].__shared_owners_ + v334, (uint64_t)__p, (uint64_t)v11, v335);
              if ((_DWORD)v6)
                goto LABEL_301;
              ++v335;
              v334 += 248;
            }
            while (v335 < LODWORD(v10[13].__vftable));
          }
          v336 = v489;
          v337 = SHIDWORD(v489) + 1;
          v338 = v337 & 7;
          HIDWORD(v489) = v338;
          v339 = (unint64_t)v488;
          v340 = (unsigned int *)((char *)v487 + (v337 >> 3));
          v487 = v340;
          if (v340 >= v488)
          {
            v341 = v489;
            if (v340 > v488)
            {
              v487 = v488;
              v340 = v488;
              v341 = v489;
            }
          }
          else
          {
            v341 = bswap32(*v340);
          }
          v342 = v341 << v338;
          LODWORD(v489) = v342;
          LOBYTE(v10[14].__shared_owners_) = v336 < 0;
          if (v336 < 0)
          {
            v360 = sub_1C971B8B0((uint64_t)__p);
            HIDWORD(v10[14].__shared_owners_) = v360;
            if (v360 >= 0x21)
            {
              if (dword_1ED1ACCC0 < 3)
                goto LABEL_300;
              v259 = 32;
              v260 = "num_long_term_ref_pics_sps_ (%d) out of range [0, %d]\n";
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "num_long_term_ref_pics_sps_ (%d) out of range [0, %d]\n", v360, 32);
              shared_owners_low = HIDWORD(v10[14].__shared_owners_);
              goto LABEL_342;
            }
            LODWORD(v10[17].__shared_owners_) = 0;
            v342 = v489;
            v338 = HIDWORD(v489);
            v340 = v487;
            v339 = (unint64_t)v488;
            if (v360)
            {
              v367 = 0;
              v368 = 0;
              v369 = LOBYTE(v10[10].__shared_owners_);
              v370 = v369 + 4;
              v371 = 28 - v369;
              v372 = v360;
              do
              {
                v373 = v370 + (int)v338;
                HIDWORD(v489) = v373 & 7;
                v374 = (unsigned int *)((char *)v340 + (v373 >> 3));
                v487 = v374;
                if ((unint64_t)v374 >= v339)
                {
                  if ((unint64_t)v374 > v339)
                    v374 = (unsigned int *)v339;
                  v375 = v342;
                }
                else
                {
                  v375 = bswap32(*v374);
                }
                v376 = v375 << (v373 & 7);
                *((_WORD *)&v10[14].__shared_weak_owners_ + v368) = v342 >> v371;
                v377 = (v373 & 7) + 1;
                v338 = v377 & 7;
                v489 = __PAIR64__(v338, v376);
                v340 = (unsigned int *)((char *)v374 + (v377 >> 3));
                v487 = v340;
                if ((unint64_t)v340 >= v339)
                {
                  if ((unint64_t)v340 > v339)
                  {
                    v487 = (unsigned int *)v339;
                    v340 = (unsigned int *)v339;
                  }
                  v378 = v376;
                }
                else
                {
                  v378 = bswap32(*v340);
                }
                v342 = v378 << v338;
                LODWORD(v489) = v342;
                v367 |= v376 >> 31 << v368;
                LODWORD(v10[17].__shared_owners_) = v367;
                ++v368;
              }
              while (v372 != v368);
            }
          }
          v343 = (int)v338 + 1;
          HIDWORD(v489) = v343 & 7;
          v344 = (unsigned int *)((char *)v340 + (v343 >> 3));
          v487 = v344;
          if ((unint64_t)v344 >= v339)
          {
            if ((unint64_t)v344 > v339)
              v344 = (unsigned int *)v339;
            v345 = v342;
          }
          else
          {
            v345 = bswap32(*v344);
          }
          v346 = v345 << (v343 & 7);
          BYTE4(v10[17].__shared_owners_) = v342 < 0;
          v347 = (v343 & 7) + 1;
          LODWORD(v489) = v346;
          HIDWORD(v489) = v347 & 7;
          v348 = (unsigned int *)((char *)v344 + (v347 >> 3));
          v487 = v348;
          if ((unint64_t)v348 >= v339)
          {
            if ((unint64_t)v348 > v339)
              v348 = (unsigned int *)v339;
            v349 = v346;
          }
          else
          {
            v349 = bswap32(*v348);
          }
          v350 = v349 << (v347 & 7);
          BYTE5(v10[17].__shared_owners_) = v346 < 0;
          v351 = (v347 & 7) + 1;
          v352 = v351 & 7;
          v489 = __PAIR64__(v352, v350);
          v353 = (unsigned int *)((char *)v348 + (v351 >> 3));
          v487 = v353;
          if ((unint64_t)v353 >= v339)
          {
            v354 = v350;
            if ((unint64_t)v353 > v339)
            {
              v487 = (unsigned int *)v339;
              v353 = (unsigned int *)v339;
              v354 = v350;
            }
          }
          else
          {
            v354 = bswap32(*v353);
          }
          v355 = v354 << v352;
          LODWORD(v489) = v355;
          BYTE6(v10[17].__shared_owners_) = v350 < 0;
          if (v350 < 0)
          {
            v6 = sub_1C96FD7D0((uint64_t)&v10[83].__shared_weak_owners_, (uint64_t)__p, (uint64_t)v11);
            if ((_DWORD)v6)
              goto LABEL_301;
            v355 = v489;
            v352 = HIDWORD(v489);
            v353 = v487;
            v339 = (unint64_t)v488;
          }
          v356 = (int)v352 + 1;
          v357 = v356 & 7;
          HIDWORD(v489) = v357;
          v358 = (unsigned int *)((char *)v353 + (v356 >> 3));
          v487 = v358;
          if ((unint64_t)v358 >= v339)
          {
            v359 = v355;
            if ((unint64_t)v358 > v339)
            {
              v487 = (unsigned int *)v339;
              v358 = (unsigned int *)v339;
              v359 = v355;
            }
          }
          else
          {
            v359 = bswap32(*v358);
          }
          v361 = v359 << v357;
          LODWORD(v489) = v361;
          HIBYTE(v10[17].__shared_owners_) = v355 < 0;
          if (v355 < 0)
          {
            v364 = (v356 & 7) + 1;
            HIDWORD(v489) = v364 & 7;
            v365 = (unsigned int *)((char *)v358 + (v364 >> 3));
            v487 = v365;
            if ((unint64_t)v365 >= v339)
            {
              if ((unint64_t)v365 > v339)
                v365 = (unsigned int *)v339;
              v366 = v361;
            }
            else
            {
              v366 = bswap32(*v365);
            }
            v379 = v366 << (v364 & 7);
            shared_weak_owners_low = v361 >> 31;
            LOBYTE(v10[17].__shared_weak_owners_) = v361 < 0;
            v380 = (v364 & 7) + 7;
            v357 = v380 & 7;
            v489 = __PAIR64__(v357, v379);
            v358 = (unsigned int *)((char *)v365 + (v380 >> 3));
            v487 = v358;
            if ((unint64_t)v358 >= v339)
            {
              if ((unint64_t)v358 > v339)
              {
                v487 = (unsigned int *)v339;
                v358 = (unsigned int *)v339;
              }
              v381 = v379;
            }
            else
            {
              v381 = bswap32(*v358);
            }
            v361 = v381 << v357;
            LODWORD(v489) = v361;
            v362 = (v379 & 0xFE000000) != 0;
          }
          else
          {
            v362 = 0;
            shared_weak_owners_low = LOBYTE(v10[17].__shared_weak_owners_);
          }
          if (shared_weak_owners_low)
          {
            v382 = v357 + 1;
            v383 = v382 & 7;
            HIDWORD(v489) = v383;
            v384 = (unsigned int *)((char *)v358 + (v382 >> 3));
            v487 = v384;
            if ((unint64_t)v384 >= v339)
            {
              if ((unint64_t)v384 > v339)
                v384 = (unsigned int *)v339;
              v385 = v361;
            }
            else
            {
              v385 = bswap32(*v384);
            }
            v386 = v385 << v383;
            BYTE1(v10[17].__shared_weak_owners_) = v361 < 0;
            v387 = (v383 + 1) >> 3;
            v388 = (v383 + 1) & 7;
            v489 = __PAIR64__(v388, v386);
            v389 = (unsigned int *)((char *)v384 + v387);
            v487 = (unsigned int *)((char *)v384 + v387);
            if ((unint64_t)v384 + v387 >= v339)
            {
              if ((unint64_t)v384 + v387 > v339)
                v389 = (unsigned int *)v339;
              v390 = v386;
            }
            else
            {
              v390 = bswap32(*v389);
            }
            v391 = v390 << v388;
            BYTE2(v10[17].__shared_weak_owners_) = v386 < 0;
            v392 = v388 + 1;
            v393 = ((_BYTE)v388 + 1) & 7;
            v489 = __PAIR64__(v393, v391);
            v394 = (unsigned int *)((char *)v389 + (v392 >> 3));
            v487 = v394;
            if ((unint64_t)v394 >= v339)
            {
              if ((unint64_t)v394 > v339)
                v394 = (unsigned int *)v339;
              v395 = v391;
            }
            else
            {
              v395 = bswap32(*v394);
            }
            v396 = v395 << v393;
            BYTE3(v10[17].__shared_weak_owners_) = v391 < 0;
            v397 = v393 + 1;
            v398 = ((_BYTE)v393 + 1) & 7;
            v489 = __PAIR64__(v398, v396);
            v399 = (unsigned int *)((char *)v394 + (v397 >> 3));
            v487 = v399;
            if ((unint64_t)v399 >= v339)
            {
              if ((unint64_t)v399 > v339)
                v399 = (unsigned int *)v339;
              v400 = v396;
            }
            else
            {
              v400 = bswap32(*v399);
            }
            v401 = v400 << v398;
            BYTE4(v10[17].__shared_weak_owners_) = v396 < 0;
            v402 = v398 + 1;
            v403 = ((_BYTE)v398 + 1) & 7;
            v489 = __PAIR64__(v403, v401);
            v404 = (unsigned int *)((char *)v399 + (v402 >> 3));
            v487 = v404;
            if ((unint64_t)v404 >= v339)
            {
              if ((unint64_t)v404 > v339)
                v404 = (unsigned int *)v339;
              v405 = v401;
            }
            else
            {
              v405 = bswap32(*v404);
            }
            v406 = v405 << v403;
            BYTE5(v10[17].__shared_weak_owners_) = v401 < 0;
            v407 = v403 + 1;
            v408 = ((_BYTE)v403 + 1) & 7;
            v489 = __PAIR64__(v408, v406);
            v409 = (unsigned int *)((char *)v404 + (v407 >> 3));
            v487 = v409;
            if ((unint64_t)v409 >= v339)
            {
              if ((unint64_t)v409 > v339)
                v409 = (unsigned int *)v339;
              v410 = v406;
            }
            else
            {
              v410 = bswap32(*v409);
            }
            v411 = v410 << v408;
            BYTE6(v10[17].__shared_weak_owners_) = v406 < 0;
            v412 = v408 + 1;
            v413 = ((_BYTE)v408 + 1) & 7;
            v489 = __PAIR64__(v413, v411);
            v414 = (unsigned int *)((char *)v409 + (v412 >> 3));
            v487 = v414;
            if ((unint64_t)v414 >= v339)
            {
              if ((unint64_t)v414 > v339)
                v414 = (unsigned int *)v339;
              v415 = v411;
            }
            else
            {
              v415 = bswap32(*v414);
            }
            v416 = v415 << v413;
            HIBYTE(v10[17].__shared_weak_owners_) = v411 < 0;
            v417 = v413 + 1;
            v418 = ((_BYTE)v413 + 1) & 7;
            v489 = __PAIR64__(v418, v416);
            v419 = (unsigned int *)((char *)v414 + (v417 >> 3));
            v487 = v419;
            if ((unint64_t)v419 >= v339)
            {
              if ((unint64_t)v419 > v339)
                v419 = (unsigned int *)v339;
              v420 = v416;
            }
            else
            {
              v420 = bswap32(*v419);
            }
            v421 = v420 << v418;
            LOBYTE(v10[18].__vftable) = v416 < 0;
            v422 = (v418 + 1) >> 3;
            v423 = (v418 + 1) & 7;
            v489 = __PAIR64__(v423, v421);
            v358 = (unsigned int *)((char *)v419 + v422);
            v487 = (unsigned int *)((char *)v419 + v422);
            if ((unint64_t)v419 + v422 >= v339)
            {
              if ((unint64_t)v419 + v422 > v339)
              {
                v487 = (unsigned int *)v339;
                v358 = (unsigned int *)v339;
              }
              v424 = v421;
            }
            else
            {
              v424 = bswap32(*v358);
            }
            LODWORD(v489) = v424 << v423;
            BYTE1(v10[18].__vftable) = v421 < 0;
          }
          if (v362)
          {
            if (dword_1ED1ACCC0 >= 4)
            {
              fwrite("Ignoring SPS extension\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(28, "Ignoring SPS extension\n");
            }
            v6 = sub_1C9750FC0((uint64_t)__p);
            if ((_DWORD)v6)
              goto LABEL_301;
            v358 = v487;
            v339 = (unint64_t)v488;
          }
          v487 = (unsigned int *)((char *)v358 + 1);
          HIDWORD(v489) = 0;
          if ((unint64_t)v358 + 1 > v339)
            v487 = (unsigned int *)v339;
          v425 = BYTE6(v10[10].__vftable);
          if (v425 > 8 || (v426 = HIBYTE(v10[10].__vftable), v426 >= 9))
          {
            if (dword_1ED1ACCC0 < 3)
              goto LABEL_300;
            v218 = (FILE *)*MEMORY[0x1E0C80C10];
            v219 = "Invalid bitdepth\n";
            v220 = "Invalid bitdepth\n";
            v221 = 17;
            goto LABEL_299;
          }
          v427 = BYTE4(v10[12].__vftable);
          if (v427 > 3 || (v428 = BYTE5(v10[12].__vftable), v428 >= 4))
          {
            if (dword_1ED1ACCC0 < 3)
              goto LABEL_300;
            v218 = (FILE *)*MEMORY[0x1E0C80C10];
            v219 = "Invalid min/max CTB size\n";
            v220 = "Invalid min/max CTB size\n";
            v221 = 25;
            goto LABEL_299;
          }
          v429 = BYTE1(v10[9].__shared_owners_);
          if (v429 >= 4)
          {
            if (dword_1ED1ACCC0 < 3)
              goto LABEL_300;
            v218 = (FILE *)*MEMORY[0x1E0C80C10];
            v219 = "Invalid chroma format\n";
            v220 = "Invalid chroma format\n";
            v221 = 22;
            goto LABEL_299;
          }
          LOBYTE(v10[88].__shared_owners_) = v425 + 8;
          BYTE1(v10[88].__shared_owners_) = 6 * v425;
          BYTE2(v10[88].__shared_owners_) = v426 + 8;
          BYTE3(v10[88].__shared_owners_) = 6 * v426;
          if (HIBYTE(v10[17].__shared_weak_owners_))
          {
            v430 = 1 << (v425 + 7);
            v431 = v426 + 7;
            LOBYTE(v425) = 0;
            LOBYTE(v426) = 0;
          }
          else
          {
            v431 = 7;
            LOWORD(v430) = 128;
          }
          BYTE4(v10[88].__shared_owners_) = v425;
          BYTE5(v10[88].__shared_owners_) = v426;
          HIWORD(v10[88].__shared_owners_) = v430;
          LOWORD(v10[88].__shared_weak_owners_) = 1 << v431;
          HIDWORD(v10[88].__shared_weak_owners_) = 16 << LOBYTE(v10[10].__shared_owners_);
          v432 = v427 + 3;
          LOBYTE(v10[89].__vftable) = v432;
          v433 = v428 + v432;
          BYTE1(v10[89].__vftable) = v428 + v432;
          v434 = BYTE6(v10[12].__vftable) + 2;
          BYTE2(v10[89].__vftable) = v434;
          BYTE3(v10[89].__vftable) = HIBYTE(v10[12].__vftable) + v434;
          v435 = v434;
          if (v434 <= 3u)
            v435 = 3;
          v436 = v435 - 1;
          if ((v429 - 1) < 2)
            v434 = v436;
          BYTE4(v10[89].__vftable) = v434;
          BYTE5(v10[89].__vftable) = 1 << v433;
          v437 = (1 << v433) - 1;
          shared_owners_high = HIDWORD(v10[9].__shared_owners_);
          v439 = v10[9].__shared_weak_owners_;
          LODWORD(v10[89].__shared_owners_) = (int)(v437 + shared_owners_high) >> v433;
          HIDWORD(v10[89].__shared_owners_) = (int)(v437 + v439) >> v433;
          if (BYTE2(v10[9].__shared_owners_))
            v440 = 0;
          else
            v440 = v429;
          BYTE4(v10[90].__shared_owners_) = v440;
          if (BYTE4(v10[9].__shared_weak_owners_))
          {
            v441 = (unsigned __int8 *)&unk_1C9861970 + 2 * v429;
            v442 = *v441;
            v443 = v441[1];
            v444 = HIWORD(v10[9].__shared_weak_owners_) * v442;
            HIDWORD(v10[89].__shared_weak_owners_) = v444;
            v445 = LOWORD(v10[10].__vftable) * v442;
            LODWORD(v10[90].__vftable) = v445;
            v446 = WORD1(v10[10].__vftable) * v443;
            HIDWORD(v10[90].__vftable) = v446;
            v447 = WORD2(v10[10].__vftable) * v443;
            LODWORD(v10[90].__shared_owners_) = v447;
            v6 = 4294954387;
            if (v445 + v444 > shared_owners_high || v447 + v446 > v439)
              goto LABEL_301;
          }
          else
          {
            *(_OWORD *)((char *)&v10[89].__shared_weak_owners_ + 4) = 0u;
          }
          if (BYTE6(v10[12].__shared_owners_))
          {
            BYTE4(v10[12].__shared_weak_owners_) = HIBYTE(v10[12].__shared_owners_) + 1;
            BYTE5(v10[12].__shared_weak_owners_) = LOBYTE(v10[12].__shared_weak_owners_) + 1;
            v448 = BYTE1(v10[12].__shared_weak_owners_) + 3;
            BYTE6(v10[12].__shared_weak_owners_) = v448;
            HIBYTE(v10[12].__shared_weak_owners_) = BYTE2(v10[12].__shared_weak_owners_) + v448;
          }
          if (LOBYTE(v11->__vftable) > 0xFu || LOBYTE(v10[9].__shared_owners_) > 0xFu)
            goto LABEL_300;
          v449 = (int)v439 * (uint64_t)(int)shared_owners_high;
          v450 = BYTE4(v10[7].__shared_owners_);
          v451 = v450 - 7;
          if ((v450 - 7) >= 0xFAu)
          {
            v454 = BYTE3(v10[7].__shared_weak_owners_);
            if (v454 <= byte_1C9833418[v450 - 1])
              v455 = dword_1C98332F8[3 * BYTE4(v10[7].__shared_owners_) - 3 + v454];
            else
              v455 = 0x7FFFFFFF;
            if (v449 <= v455 || dword_1ED1ACCC0 <= 3)
              goto LABEL_615;
            v452 = (FILE *)*MEMORY[0x1E0C80C10];
            v453 = BYTE3(v10[7].__shared_weak_owners_);
            if ((v450 - 7) >= 0xFAu && v453 <= byte_1C9833418[v450 - 1])
            {
              v457 = dword_1C98332F8[3 * BYTE4(v10[7].__shared_owners_) - 3 + v453];
LABEL_610:
              fprintf(v452, "%dx%d exceeds maximum picture size for level %d.%d of %d\n", shared_owners_high, v439, v450, v453, v457);
              v458 = BYTE4(v10[7].__shared_owners_);
              v459 = BYTE3(v10[7].__shared_weak_owners_);
              if ((v458 - 7) >= 0xFFFFFFFA && v459 <= byte_1C9833418[v458 - 1])
                v460 = dword_1C98332F8[3 * BYTE4(v10[7].__shared_owners_) - 3 + v459];
              else
                v460 = 0x7FFFFFFF;
              syslog(28, "%dx%d exceeds maximum picture size for level %d.%d of %d\n", HIDWORD(v10[9].__shared_owners_), LODWORD(v10[9].__shared_weak_owners_), v458, BYTE3(v10[7].__shared_weak_owners_), v460);
              shared_owners_high = HIDWORD(v10[9].__shared_owners_);
              v450 = BYTE4(v10[7].__shared_owners_);
              v451 = v450 - 7;
LABEL_615:
              v456 = v451 < 0xFAu;
              if (v451 >= 0xFAu)
              {
                v461 = BYTE3(v10[7].__shared_weak_owners_);
                if (v461 <= byte_1C9833418[v450 - 1])
                {
                  v462 = word_1C9833340[3 * v450 - 3 + v461];
LABEL_618:
                  if (shared_owners_high <= v462)
                  {
                    v463 = v10[9].__shared_weak_owners_;
                    if (v456
                      || (v464 = BYTE3(v10[7].__shared_weak_owners_), v464 > byte_1C9833418[v450 - 1]))
                    {
                      v465 = 0x7FFFFFFF;
                    }
                    else
                    {
                      v465 = word_1C9833340[3 * v450 - 3 + v464];
                    }
                    if (v463 <= v465 || dword_1ED1ACCC0 <= 3)
                      goto LABEL_637;
                  }
                  else
                  {
                    v463 = v10[9].__shared_weak_owners_;
                    if (dword_1ED1ACCC0 < 4)
                    {
LABEL_637:
                      if ((unint64_t)((int)v463 * (uint64_t)(int)shared_owners_high) >> 31)
                      {
                        if (dword_1ED1ACCC0 < 3)
                          goto LABEL_300;
                        v218 = (FILE *)*MEMORY[0x1E0C80C10];
                        v219 = "We don't support more than INT32_MAX pixels\n";
                        v220 = "We don't support more than INT32_MAX pixels\n";
                        v221 = 44;
                        goto LABEL_299;
                      }
                      if ((a3 & 1) != 0)
                        sub_1C982F8F8(*(unsigned __int8 **)v484, (FILE *)*MEMORY[0x1E0C80C10]);
                      for (i = 0; i != 64; ++i)
                      {
                        v472 = a1 + 16 * i;
                        v473 = *(_QWORD *)(v472 + 512);
                        if (v473)
                        {
                          if (*(_BYTE *)(v473 + 1760))
                          {
                            if (*(unsigned __int8 *)(v473 + 1) == *(unsigned __int8 *)(*(_QWORD *)v484 + 200))
                            {
                              v474 = (std::__shared_weak_count *)operator new(0x708uLL);
                              *(_OWORD *)&v474->__shared_owners_ = 0u;
                              v475 = (unint64_t *)&v474->__shared_owners_;
                              v474->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291B10;
                              v476 = *(std::__shared_count *)v473;
                              v477 = *(_OWORD *)(v473 + 16);
                              *(_DWORD *)((char *)&v474[2].__vftable + 7) = *(_DWORD *)(v473 + 31);
                              *(_OWORD *)&v474[1].__shared_weak_owners_ = v477;
                              v474[1].std::__shared_count = v476;
                              v474[67].__shared_weak_owners_ = 0;
                              memcpy(&v474[2].__shared_weak_owners_, (const void *)(v473 + 40), 0x618uLL);
                              v478 = *(_DWORD *)(v473 + 1640);
                              v479 = *(_OWORD *)(v473 + 1624);
                              v474[68].std::__shared_count = *(std::__shared_count *)(v473 + 1608);
                              *(_OWORD *)&v474[68].__shared_weak_owners_ = v479;
                              LODWORD(v474[69].__shared_owners_) = v478;
                              v474[70].std::__shared_count = 0u;
                              v474[69].__shared_weak_owners_ = 0;
                              sub_1C9746EF0(&v474[69].__shared_weak_owners_, *(const void **)(v473 + 1648), *(_QWORD *)(v473 + 1656), (uint64_t)(*(_QWORD *)(v473 + 1656) - *(_QWORD *)(v473 + 1648)) >> 1);
                              v474[71].__shared_owners_ = 0;
                              *(_OWORD *)&v474[70].__shared_weak_owners_ = 0u;
                              sub_1C9746EF0(&v474[70].__shared_weak_owners_, *(const void **)(v473 + 1672), *(_QWORD *)(v473 + 1680), (uint64_t)(*(_QWORD *)(v473 + 1680) - *(_QWORD *)(v473 + 1672)) >> 1);
                              v474[72].__shared_owners_ = 0;
                              *(_OWORD *)&v474[71].__shared_weak_owners_ = 0u;
                              sub_1C9746F80(&v474[71].__shared_weak_owners_, *(const void **)(v473 + 1696), *(_QWORD *)(v473 + 1704), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v473 + 1704) - *(_QWORD *)(v473 + 1696)) >> 2));
                              v474[73].__shared_owners_ = 0;
                              *(_OWORD *)&v474[72].__shared_weak_owners_ = 0u;
                              sub_1C9746F80(&v474[72].__shared_weak_owners_, *(const void **)(v473 + 1720), *(_QWORD *)(v473 + 1728), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v473 + 1728) - *(_QWORD *)(v473 + 1720)) >> 2));
                              v480 = *(_QWORD *)(v473 + 1744);
                              LOBYTE(v474[74].__vftable) = *(_BYTE *)(v473 + 1752);
                              v474[73].__shared_weak_owners_ = v480;
                              *(_OWORD *)&v474[74].__shared_owners_ = *(_OWORD *)(v473 + 1760);
                              LOBYTE(v474[74].__shared_owners_) = 0;
                              sub_1C9746DB4((_QWORD *)(v472 + 512), (uint64_t)&v474[1], (uint64_t)v474);
                              do
                                v481 = __ldaxr(v475);
                              while (__stlxr(v481 - 1, v475));
                              if (!v481)
                              {
                                ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
                                std::__shared_weak_count::__release_weak(v474);
                              }
                            }
                          }
                        }
                      }
                      sub_1C9746DB4((_QWORD *)(a1 + 16 * *(unsigned __int8 *)(*(_QWORD *)v484 + 200) + 256), *(uint64_t *)v484, (uint64_t)v485);
                      if (v485)
                      {
                        v482 = (unint64_t *)&v485->__shared_owners_;
                        do
                          v483 = __ldaxr(v482);
                        while (__stlxr(v483 - 1, v482));
                        if (!v483)
                        {
                          ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
                          v237 = v485;
                          goto LABEL_295;
                        }
                      }
                      goto LABEL_296;
                    }
                  }
                  v466 = BYTE3(v10[7].__shared_weak_owners_);
                  if (v456 || v466 > byte_1C9833418[v450 - 1])
                    v467 = 0x7FFFFFFF;
                  else
                    v467 = word_1C9833340[3 * v450 - 3 + v466];
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%dx%d exceeds maximum dimension size for level %d.%d of %d\n", shared_owners_high, v463, v450, BYTE3(v10[7].__shared_weak_owners_), v467);
                  v468 = BYTE4(v10[7].__shared_owners_);
                  v469 = BYTE3(v10[7].__shared_weak_owners_);
                  if ((v468 - 7) >= 0xFFFFFFFA && v469 <= byte_1C9833418[v468 - 1])
                    v470 = word_1C9833340[3 * BYTE4(v10[7].__shared_owners_) - 3 + v469];
                  else
                    v470 = 0x7FFFFFFF;
                  syslog(28, "%dx%d exceeds maximum dimension size for level %d.%d of %d\n", HIDWORD(v10[9].__shared_owners_), LODWORD(v10[9].__shared_weak_owners_), v468, BYTE3(v10[7].__shared_weak_owners_), v470);
                  shared_owners_high = HIDWORD(v10[9].__shared_owners_);
                  v463 = v10[9].__shared_weak_owners_;
                  goto LABEL_637;
                }
              }
LABEL_617:
              v462 = 0x7FFFFFFF;
              goto LABEL_618;
            }
          }
          else
          {
            if (!(v449 >> 31) || dword_1ED1ACCC0 <= 3)
            {
              v456 = (v450 - 7) < 0xFAu;
              goto LABEL_617;
            }
            v452 = (FILE *)*MEMORY[0x1E0C80C10];
            LODWORD(v453) = BYTE3(v10[7].__shared_weak_owners_);
          }
          v457 = 0x7FFFFFFF;
          goto LABEL_610;
        }
        if (dword_1ED1ACCC0 >= 3)
        {
          v218 = (FILE *)*MEMORY[0x1E0C80C10];
          v219 = "width/height cannot be zero\n";
          v220 = "width/height cannot be zero\n";
          v221 = 28;
          goto LABEL_299;
        }
      }
LABEL_300:
      v6 = 4294954387;
LABEL_301:
      v150 = (uint64_t)v485;
      if (!v485)
        goto LABEL_2;
      v238 = (unint64_t *)&v485->__shared_owners_;
      do
        v152 = __ldaxr(v238);
      while (__stlxr(v152 - 1, v238));
      goto LABEL_304;
    case ' ':
      sub_1C9746CCC(v484);
      v9 = *(unsigned __int8 **)v484;
      if (*(_BYTE *)(*(_QWORD *)v484 + 432))
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("This VPS has already been parsed, a new one must be allocated instead\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "This VPS has already been parsed, a new one must be allocated instead\n");
        }
        v6 = 4294954385;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v484 + 432) = 1;
        v25 = SHIDWORD(v489) + 4;
        HIDWORD(v489) = v25 & 7;
        v26 = v488;
        v27 = (unsigned int *)((char *)v487 + (v25 >> 3));
        v487 = v27;
        if (v27 >= v488)
        {
          if (v27 > v488)
            v27 = v488;
          v28 = v489;
        }
        else
        {
          v28 = bswap32(*v27);
        }
        v77 = v28 << (v25 & 7);
        v9[196] = v489 >> 28;
        v78 = (v25 & 7) + 2;
        v79 = v78 & 7;
        LODWORD(v489) = v77;
        HIDWORD(v489) = v78 & 7;
        v80 = (unsigned int *)((char *)v27 + (v78 >> 3));
        v487 = v80;
        if (v80 >= v26)
        {
          if (v80 > v26)
            v80 = v26;
        }
        else
        {
          v77 = bswap32(*v80);
        }
        v81 = v77 << v79;
        v82 = (v78 & 7) + 6;
        LODWORD(v489) = v77 << v79;
        HIDWORD(v489) = v82 & 7;
        v83 = (unsigned int *)((char *)v80 + (v82 >> 3));
        v487 = v83;
        if (v83 >= v26)
        {
          if (v83 > v26)
            v83 = v26;
        }
        else
        {
          v81 = bswap32(*v83);
        }
        v84 = v81 << (v82 & 7);
        v85 = (v82 & 7) + 3;
        v86 = v85 & 7;
        LODWORD(v489) = v84;
        HIDWORD(v489) = v85 & 7;
        v87 = (unsigned int *)((char *)v83 + (v85 >> 3));
        v487 = v87;
        if (v87 >= v26)
        {
          if (v87 > v26)
          {
            v487 = v26;
            v87 = v26;
          }
          v88 = v84;
        }
        else
        {
          v88 = bswap32(*v87);
        }
        v89 = v84 >> 29;
        v90 = v88 << v86;
        LODWORD(v489) = v88 << v86;
        v9[200] = v89;
        if (v89 != 7)
        {
          v91 = (v85 & 7) + 1;
          v92 = v91 & 7;
          HIDWORD(v489) = v92;
          v93 = (unsigned int *)((char *)v87 + (v91 >> 3));
          v487 = v93;
          if (v93 >= v26)
          {
            if (v93 > v26)
              v93 = v26;
            v94 = v90;
          }
          else
          {
            v94 = bswap32(*v93);
          }
          v148 = v94 << v92;
          v9[201] = v90 < 0;
          v489 = __PAIR64__(v92, v148);
          v149 = (unsigned int *)((char *)v93 + 2);
          v487 = v149;
          if (v149 >= v26)
          {
            if (v149 > v26)
              v487 = v26;
          }
          else
          {
            v148 = bswap32(*v149);
          }
          LODWORD(v489) = v148 << v92;
          v6 = sub_1C971BECC((uint64_t)v9, v89, (uint64_t)__p);
          if ((_DWORD)v6)
            goto LABEL_165;
          v155 = v489;
          v156 = SHIDWORD(v489) + 1;
          v157 = v156 & 7;
          HIDWORD(v489) = v156 & 7;
          v158 = (unsigned int *)((char *)v487 + (v156 >> 3));
          v487 = v158;
          if (v158 >= v488)
          {
            if (v158 > v488)
              v487 = v488;
            v159 = v489;
          }
          else
          {
            v159 = bswap32(*v158);
          }
          v222 = 0;
          LODWORD(v489) = v159 << v157;
          v9[202] = v155 < 0;
          while (1)
          {
            if (!v222 || v9[202])
            {
              v9[v222 + 203] = sub_1C971B8B0((uint64_t)__p);
              v9[v222 + 210] = sub_1C971B8B0((uint64_t)__p);
              v224 = sub_1C971BC60((uint64_t)__p);
            }
            else
            {
              v223 = &v9[v222];
              v223[203] = v9[203];
              v223[210] = v9[210];
              v224 = *((_DWORD *)v9 + 55);
            }
            *(_DWORD *)&v9[4 * v222 + 220] = v224;
            if (v9[v222 + 203] > 0xFu)
              break;
            v225 = v222++ >= v9[200];
            if (v225)
            {
              v226 = v489;
              v227 = SHIDWORD(v489) + 6;
              v228 = v227 & 7;
              HIDWORD(v489) = v227 & 7;
              v229 = (unsigned int *)((char *)v487 + (v227 >> 3));
              v487 = v229;
              if (v229 >= v488)
              {
                if (v229 > v488)
                  v487 = v488;
                v230 = v489;
              }
              else
              {
                v230 = bswap32(*v229);
              }
              LODWORD(v489) = v230 << v228;
              v9[248] = v226 >> 26;
              v239 = sub_1C971B8B0((uint64_t)__p);
              v240 = v239;
              *((_WORD *)v9 + 125) = v239;
              if (v239 >= 0x400u)
              {
                if (dword_1ED1ACCC0 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_num_layer_sets_minus1_ (%d) out of range [0, %d]\n", v239, 1023);
                  syslog(27, "vps_num_layer_sets_minus1_ (%d) out of range [0, %d]\n", *((unsigned __int16 *)v9 + 125), 1023);
                }
                break;
              }
              if (v239)
              {
                sub_1C97A01FC((char **)v9 + 32, v239 + 1);
                v240 = *((unsigned __int16 *)v9 + 125);
              }
              v242 = v489;
              v241 = HIDWORD(v489);
              v244 = v487;
              v243 = v488;
              if (v240)
              {
                v245 = *((_QWORD *)v9 + 32);
                v246 = v9[248] + 1;
                v247 = 1;
                do
                {
                  v248 = 0;
                  v249 = 0;
                  *(_QWORD *)(v245 + 8 * v247) = 0;
                  do
                  {
                    v250 = v242;
                    v251 = v241 + 1;
                    v241 = v251 & 7;
                    HIDWORD(v489) = v241;
                    v244 = (unsigned int *)((char *)v244 + (v251 >> 3));
                    v487 = v244;
                    if (v244 >= v243)
                    {
                      v252 = v250;
                      if (v244 > v243)
                      {
                        v487 = v243;
                        v244 = v243;
                        v252 = v250;
                      }
                    }
                    else
                    {
                      v252 = bswap32(*v244);
                    }
                    v242 = v252 << v241;
                    LODWORD(v489) = v242;
                    v248 |= (unint64_t)(v250 >> 31) << v249;
                    *(_QWORD *)(v245 + 8 * v247) = v248;
                    ++v249;
                  }
                  while (v246 != v249);
                }
                while (v247++ != v240);
              }
              v254 = v241 + 1;
              HIDWORD(v489) = v254 & 7;
              v255 = (unsigned int *)((char *)v244 + (v254 >> 3));
              v487 = v255;
              v256 = v255 > v243;
              if (v255 >= v243)
              {
                v257 = v242;
                if (v256)
                {
                  v487 = v243;
                  v257 = v242;
                }
              }
              else
              {
                v257 = bswap32(*v255);
              }
              LODWORD(v489) = v257 << (v254 & 7);
              v9[280] = v242 < 0;
              if (v242 < 0)
              {
                *((_DWORD *)v9 + 71) = sub_1C9713974((uint64_t)__p, 32);
                *((_DWORD *)v9 + 72) = sub_1C9713974((uint64_t)__p, 32);
                v290 = v489;
                v291 = SHIDWORD(v489) + 1;
                v292 = v291 & 7;
                HIDWORD(v489) = v291 & 7;
                v293 = (unsigned int *)((char *)v487 + (v291 >> 3));
                v487 = v293;
                v294 = v293 > v488;
                if (v293 >= v488)
                {
                  v295 = v489;
                  if (v294)
                  {
                    v487 = v488;
                    v295 = v489;
                  }
                }
                else
                {
                  v295 = bswap32(*v293);
                }
                LODWORD(v489) = v295 << v292;
                v9[292] = v290 < 0;
                if (v290 < 0)
                  *((_DWORD *)v9 + 74) = sub_1C971BC60((uint64_t)__p);
                v299 = sub_1C971B8B0((uint64_t)__p);
                *((_WORD *)v9 + 150) = v299;
                if (v299)
                {
                  sub_1C97A0304((char **)v9 + 51, v299);
                  if (*((_WORD *)v9 + 150))
                  {
                    v300 = 0;
                    v301 = 0;
                    do
                    {
                      sub_1C971B8B0((uint64_t)__p);
                      if (v301)
                      {
                        v302 = v489;
                        v303 = SHIDWORD(v489) + 1;
                        v304 = v303 & 7;
                        HIDWORD(v489) = v303 & 7;
                        v305 = (unsigned int *)((char *)v487 + (v303 >> 3));
                        v487 = v305;
                        if (v305 >= v488)
                        {
                          if (v305 > v488)
                            v487 = v488;
                          v306 = v489;
                        }
                        else
                        {
                          v306 = bswap32(*v305);
                        }
                        LODWORD(v489) = v306 << v304;
                        v307 = v302 >> 31;
                      }
                      else
                      {
                        v307 = 1;
                      }
                      v6 = sub_1C979FA50(*((_QWORD *)v9 + 51) + v300, (uint64_t)__p, v307, v9[200] + 1);
                      if ((_DWORD)v6)
                        goto LABEL_165;
                      ++v301;
                      v300 += 40;
                    }
                    while (v301 < *((unsigned __int16 *)v9 + 150));
                  }
                }
              }
              v268 = v489;
              v269 = SHIDWORD(v489) + 1;
              v270 = v269 & 7;
              HIDWORD(v489) = v269 & 7;
              v271 = (unint64_t)v488;
              v272 = (unsigned int *)((char *)v487 + (v269 >> 3));
              v487 = v272;
              if (v272 >= v488)
              {
                v273 = v489;
                if (v272 > v488)
                {
                  v487 = v488;
                  v272 = v488;
                  v273 = v489;
                }
              }
              else
              {
                v273 = bswap32(*v272);
              }
              LODWORD(v489) = v273 << v270;
              v9[302] = v268 < 0;
              if (v268 < 0)
              {
                if (dword_1ED1ACCC0 >= 4)
                {
                  fwrite("Ignoring VPS extension\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                  syslog(28, "Ignoring VPS extension\n");
                }
                v6 = sub_1C9750FC0((uint64_t)__p);
                if ((_DWORD)v6)
                  goto LABEL_165;
                v272 = v487;
                v271 = (unint64_t)v488;
              }
              v487 = (unsigned int *)((char *)v272 + 1);
              HIDWORD(v489) = 0;
              if ((unint64_t)v272 + 1 > v271)
                v487 = (unsigned int *)v271;
              if ((sub_1C971EFBC((uint64_t)v9) & 1) == 0)
                break;
              if (a3)
                sub_1C97A051C((uint64_t)v9, (FILE *)*MEMORY[0x1E0C80C10]);
              v274 = (_QWORD *)(a1 + 16 * v9[196]);
              v275 = (uint64_t)v485;
              sub_1C9746DB4(v274, (uint64_t)v9, (uint64_t)v485);
              if (v275)
              {
                v276 = (unint64_t *)(v275 + 8);
                do
                  v277 = __ldaxr(v276);
                while (__stlxr(v277 - 1, v276));
                if (!v277)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v275 + 16))(v275);
                  v237 = (std::__shared_weak_count *)v275;
                  goto LABEL_295;
                }
              }
              goto LABEL_296;
            }
          }
        }
        v6 = 4294954387;
      }
LABEL_165:
      v150 = (uint64_t)v485;
      if (!v485)
        goto LABEL_2;
      v151 = (unint64_t *)&v485->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
LABEL_304:
      if (v152)
        goto LABEL_2;
      (*(void (**)(uint64_t))(*(_QWORD *)v150 + 16))(v150);
      v16 = (std::__shared_weak_count *)v150;
      goto LABEL_306;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("Passed NALU that isn't a parameter set!\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Passed NALU that isn't a parameter set!\n");
  }
  v6 = 4294954385;
LABEL_2:
  if (__p[0])
    operator delete(__p[0]);
  return v6;
}

void sub_1C971B7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__shared_weak_count *v18;
  void **v19;
  void **v20;
  uint64_t *p_shared_weak_owners;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  void *v27;

  p_shared_weak_owners = &v18[67].__shared_weak_owners_;
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v18[71].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v18[72].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  v24 = (std::__shared_weak_count_vtbl *)*v20;
  if (*v20)
  {
    v18[71].__vftable = v24;
    operator delete(v24);
  }
  v25 = (std::__shared_weak_count_vtbl *)*v19;
  if (*v19)
  {
    v18[70].__vftable = v25;
    operator delete(v25);
  }
  v26 = *p_shared_weak_owners;
  *p_shared_weak_owners = 0;
  if (v26)
    MEMORY[0x1CAA43B6C](v26, 0x1000C8052888210);
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v27);
  sub_1C972CFE0((uint64_t)&a15);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1C971B8B0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  int v7;

  v1 = *(_DWORD *)(a1 + 48);
  if (!v1)
    return 0;
  v2 = __clz(v1);
  if (v2 >= 0xC)
    v2 = 12;
  v3 = v1 << (v2 + 1) >> -(char)v2;
  if (!v2)
    v3 = 0;
  v4 = *(int *)(a1 + 52) + (unint64_t)((2 * v2) | 1);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 32) + (v4 >> 3));
  v7 = v4 & 7;
  *(_DWORD *)(a1 + 52) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  if ((unint64_t)v6 >= v5)
  {
    if ((unint64_t)v6 > v5)
      *(_QWORD *)(a1 + 32) = v5;
  }
  else
  {
    v1 = bswap32(*v6);
  }
  *(_DWORD *)(a1 + 48) = v1 << v7;
  return v3 + ~(-1 << v2);
}

uint64_t sub_1C971B944(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result;

  if (a2 && a3)
  {
    result = 0;
    *(_QWORD *)(a1 + 24) = a2;
    *(_QWORD *)(a1 + 32) = a2;
    *(_QWORD *)(a1 + 40) = (char *)a2 + a3;
    *(_QWORD *)(a1 + 48) = bswap32(*a2);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("NULL buffer\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "NULL buffer\n");
    }
    return 4294954387;
  }
  return result;
}

uint64_t sub_1C971B9D0(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *a1;
  v7 = a1[1] - v5;
  if (v4 + 4 <= v7)
  {
    if (v4 + 4 < v7)
      a1[1] = v5 + v4 + 4;
  }
  else
  {
    sub_1C971BA44(a1, v4 + 4 - v7);
    v5 = *a1;
    v4 = *(_QWORD *)(a2 + 24);
  }
  v8 = off_1ED1ACCE8(v5, *(_QWORD *)(a2 + 8), v4);
  return sub_1C971B944((uint64_t)a1, (unsigned int *)*a1, v8);
}

void sub_1C971BA44(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_1C9747024();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1C971BB68(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int8x16_t v5;
  int64x2_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a3 < 0x12)
  {
    v3 = 0;
    v4 = 2;
  }
  else
  {
    v3 = 0;
    v4 = 2;
    do
    {
      v5 = *(int8x16_t *)(a2 + v4);
      *(int8x16_t *)(a1 + v3) = v5;
      v6 = (int64x2_t)vceqzq_s8(v5);
      if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0])
      {
        do
        {
          v7 = v4;
          v8 = v3++;
          ++v4;
        }
        while (*(_BYTE *)(a2 + v7));
        if (v7 + 2 < a3)
        {
          v9 = *(unsigned __int8 *)(a2 + v4);
          if ((*(unsigned __int8 *)(a2 + v7 + 2) | (v9 << 8)) == 3)
          {
            *(_BYTE *)(a1 + v3) = v9;
            v4 = v7 + 3;
            v3 = v8 + 2;
          }
        }
      }
      else
      {
        v4 += 16;
        v3 += 16;
      }
    }
    while (v4 + 15 < a3);
  }
  while (v4 < a3)
  {
    v10 = *(unsigned __int8 *)(a2 + v4);
    if (v4 + 2 < a3
      && ((v10 << 16) | (*(unsigned __int8 *)(a2 + v4 + 1) << 8) | *(unsigned __int8 *)(a2 + v4 + 2)) == 3)
    {
      *(_BYTE *)(a1 + v3++) = v10;
      LOBYTE(v10) = *(_BYTE *)(v4 + a2 + 1);
      v4 += 2;
    }
    *(_BYTE *)(a1 + v3++) = v10;
    ++v4;
  }
  return v3;
}

uint64_t sub_1C971BC60(uint64_t a1)
{
  unsigned int v3;

  if (*(_DWORD *)(a1 + 48) >> 19)
    return sub_1C971B8B0(a1);
  v3 = -1;
  do
    ++v3;
  while (!sub_1C971C898(a1, 1) && v3 < 0x1F);
  return sub_1C9713974(a1, v3) + ~(-1 << v3);
}

uint64_t sub_1C971BCE0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  char *v9;

  v4 = 0;
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 11) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_WORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 214) = 0u;
  *(_BYTE *)(a1 + 200) = a3;
  *(_WORD *)(a1 + 201) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_OWORD *)(a1 + 230) = 0u;
  *(_OWORD *)(a1 + 246) = 0u;
  *(_OWORD *)(a1 + 262) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  v5 = 416;
  *(_QWORD *)(a1 + 402) = 0;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_WORD *)(a1 + 168) = 0;
  do
  {
    v6 = 0;
    if (v4)
      v7 = 65;
    else
      v7 = 17;
    v8 = v5;
    do
    {
      if (v4)
        v9 = (char *)&unk_1C98324C0 + ((v6 > 2) | ((unint64_t)(v6 > 2) << 6));
      else
        v9 = (char *)&unk_1C98324AF;
      memcpy((void *)(a1 + v8), v9, v7);
      ++v6;
      v8 += 65;
    }
    while (v6 != 6);
    ++v4;
    v5 += 390;
  }
  while (v4 != 4);
  *(_QWORD *)(a1 + 2064) = 0;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_QWORD *)(a1 + 2032) = 0;
  *(_QWORD *)(a1 + 2037) = 0;
  *(_DWORD *)(a1 + 1984) = 0;
  *(_WORD *)(a1 + 1988) = 0;
  *(_DWORD *)(a1 + 1990) = 33685509;
  *(_BYTE *)(a1 + 1994) = 2;
  *(_DWORD *)(a1 + 2024) = 0;
  *(_BYTE *)(a1 + 2028) = 0;
  *(_QWORD *)(a1 + 1995) = 0;
  *(_QWORD *)(a1 + 2001) = 0;
  *(_BYTE *)(a1 + 2020) = 0;
  *(_QWORD *)(a1 + 2012) = 0;
  *(_WORD *)(a1 + 2116) = 0;
  *(_QWORD *)(a1 + 2108) = 0;
  *(_WORD *)(a1 + 2128) = 0;
  *(_QWORD *)(a1 + 2120) = 0;
  *(_OWORD *)(a1 + 2132) = 0u;
  *(_QWORD *)(a1 + 2088) = 0;
  *(_DWORD *)(a1 + 2096) = 0;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2080) = 0;
  *(_WORD *)(a1 + 2148) = 1;
  *(_QWORD *)(a1 + 2152) = a2;
  return a1;
}

uint64_t sub_1C971BECC(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int8x8_t v14;
  uint16x8_t v15;
  uint32x4_t v16;
  uint8x8_t v17;
  int16x8_t v18;
  char v19;
  uint64_t v20;
  FILE **v21;
  unsigned __int8 *v22;
  char v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;

  if (a2 >= 7)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "maxNumSubLayersMinus1 (%d) out of range [0, %d]\n", a2, 6);
      syslog(27, "maxNumSubLayersMinus1 (%d) out of range [0, %d]\n");
    }
    return 4294954387;
  }
  sub_1C971C58C((_BYTE *)a1, 0, a3);
  *(_BYTE *)(a1 + 57) = sub_1C971C898(a3, 8);
  if (a2 <= 0)
  {
    v10 = (a2 + 1);
  }
  else
  {
    v6 = 0;
    do
    {
      *(_BYTE *)(a1 + 64) |= (sub_1C971C898(a3, 1) != 0) << ++v6;
      *(_BYTE *)(a1 + 65) |= (sub_1C971C898(a3, 1) != 0) << v6;
    }
    while (a2 != v6);
    v7 = a2 - 8;
    do
      sub_1C971C898(a3, 2);
    while (!__CFADD__(v7++, 1));
    v9 = 0;
    v10 = (a2 + 1);
    do
    {
      v11 = v9 + 1;
      v12 = 1 << (v9 + 1);
      if ((v12 & *(_BYTE *)(a1 + 64)) != 0)
      {
        sub_1C971C58C((_BYTE *)a1, v11, a3);
      }
      else
      {
        v13 = a1 + v9;
        *(_BYTE *)(v13 + 1) = *(_BYTE *)a1;
        *(_BYTE *)(a1 + 7) |= (*(_BYTE *)(a1 + 7) & 1) << v11;
        *(_BYTE *)(v13 + 9) = *(_BYTE *)(a1 + 8);
        *(_DWORD *)(a1 + 4 * v9 + 20) = *(_DWORD *)(a1 + 16);
        v14 = *(int8x8_t *)(a1 + 44);
        v15 = vmovl_u8((uint8x8_t)vand_s8(v14, (int8x8_t)0x101010101010101));
        v16 = (uint32x4_t)vdupq_n_s32(v11);
        v17 = (uint8x8_t)vorr_s8(v14, vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v15.i8), v16), (int16x8_t)vshlq_u32(vmovl_high_u16(v15), v16))));
        *(uint8x8_t *)(a1 + 44) = v17;
        v17.i32[0] = *(_DWORD *)(a1 + 52);
        v18 = (int16x8_t)vmovl_u8(v17);
        *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)vmovn_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)(v18.i64[0] & 0xFF01FF01FF01FF01)), v16)));
        *(_DWORD *)(a1 + 52) = vmovn_s16(v18).u32[0];
        *(_BYTE *)(a1 + 56) |= (*(_BYTE *)(a1 + 56) & 1) << v11;
      }
      if ((v12 & *(_BYTE *)(a1 + 65)) != 0)
        v19 = sub_1C971C898(a3, 8);
      else
        v19 = *(_BYTE *)(a1 + 57);
      *(_BYTE *)(a1 + v9++ + 58) = v19;
    }
    while (v10 - 1 != v9);
  }
  v20 = 0;
  v21 = (FILE **)MEMORY[0x1E0C80C10];
  v22 = (unsigned __int8 *)&unk_1C9833418;
  while (2)
  {
    v23 = *(_BYTE *)(a1 + v20 + 57) / 0x1Eu;
    *(_BYTE *)(a1 + v20 + 159) = *(_BYTE *)(a1 + v20 + 57) % 0x1Eu / 3;
    *(_BYTE *)(a1 + v20 + 152) = v23;
    if (!*(_BYTE *)(a1 + v20 + 8))
    {
      *(_BYTE *)(a1 + v20 + 152) = 4;
      *(_BYTE *)(a1 + v20 + 159) = 0;
      *(_BYTE *)(a1 + v20 + 57) = 120;
      *(_BYTE *)(a1 + v20 + 8) = 1;
      *(_DWORD *)(a1 + 4 * v20 + 16) = 6;
    }
    if (*(_BYTE *)(a1 + (int)v20))
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("profile_space_[layer_idx] == 0 failed!\n", 0x27uLL, 1uLL, *v21);
        syslog(27, "profile_space_[layer_idx] == 0 failed!\n");
      }
      return 4294954387;
    }
    v24 = (unsigned __int8 *)(a1 + (int)v20);
    v26 = v24 + 152;
    v25 = v24[152];
    if (((v25 - 7) < 0xFFFFFFFA || v24[159] > v22[v25 - 1])
      && v24[57] != 255
      && dword_1ED1ACCC0 >= 6)
    {
      v27 = v10;
      v28 = v22;
      fprintf(*v21, "Unknown level %d.%d\n", v25, *(unsigned __int8 *)(a1 + (int)v20 + 159));
      syslog(30, "Unknown level %d.%d\n", *v26, *(unsigned __int8 *)(a1 + (int)v20 + 159));
      v22 = v28;
      v10 = v27;
    }
    v29 = 0;
    while (1)
    {
      v30 = byte_1C983341E[v29];
      if (*(unsigned __int8 *)(a1 + (int)v20 + 8) == v30 || ((*(_DWORD *)(a1 + 4 * (int)v20 + 16) >> v30) & 1) != 0)
        break;
      if (++v29 == 4)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf(*v21, "Profile %d not supported\n", *(unsigned __int8 *)(a1 + (int)v20 + 8));
          syslog(27, "Profile %d not supported\n");
        }
        return 4294954387;
      }
    }
    if (++v20 != v10)
      continue;
    break;
  }
  return 0;
}

uint64_t sub_1C971C308(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t result;
  BOOL v17;

  *(_BYTE *)a1 = sub_1C971C898(a2, 8);
  *(_BYTE *)(a1 + 1) = sub_1C971C898(a2, 2);
  *(_BYTE *)(a1 + 2) = sub_1C971C898(a2, 1) != 0;
  *(_BYTE *)(a1 + 3) = sub_1C971C898(a2, 5);
  v4 = sub_1C971C898(a2, 16);
  *(_DWORD *)(a1 + 4) = sub_1C971C898(a2, 16) + (v4 << 16);
  v5 = sub_1C971C898(a2, 16);
  v6 = sub_1C971C898(a2, 16) + (v5 << 16);
  *(_QWORD *)(a1 + 8) = sub_1C971C898(a2, 16) | (unint64_t)(v6 << 16);
  *(_BYTE *)(a1 + 16) = sub_1C971C898(a2, 8);
  v7 = sub_1C971C898(a2, 4);
  *(_WORD *)(a1 + 18) = sub_1C971C898(a2, 12);
  v8 = sub_1C971C898(a2, 6);
  *(_BYTE *)(a1 + 20) = sub_1C971C898(a2, 2);
  v9 = sub_1C971C898(a2, 6);
  *(_BYTE *)(a1 + 21) = sub_1C971C898(a2, 2);
  v10 = sub_1C971C898(a2, 5);
  *(_BYTE *)(a1 + 22) = sub_1C971C898(a2, 3);
  v11 = sub_1C971C898(a2, 5);
  *(_BYTE *)(a1 + 23) = sub_1C971C898(a2, 3);
  *(_WORD *)(a1 + 24) = sub_1C971C898(a2, 16);
  *(_BYTE *)(a1 + 26) = sub_1C971C898(a2, 2);
  *(_BYTE *)(a1 + 27) = sub_1C971C898(a2, 3);
  *(_BYTE *)(a1 + 28) = sub_1C971C898(a2, 1) != 0;
  *(_BYTE *)(a1 + 29) = sub_1C971C898(a2, 2);
  *(_BYTE *)(a1 + 30) = sub_1C971C898(a2, 8);
  if (*(_BYTE *)a1 != 1)
    return 4294954394;
  v12 = *(unsigned __int8 *)(a1 + 29);
  result = 4294954394;
  if (v12 <= 3 && v12 != 2)
  {
    result = 0;
    v17 = v11 == 31 && v10 == 31 && v9 == 63 && v8 == 63 && v7 == 15;
    if (!v17 && dword_1ED1ACCC0 >= 3)
    {
      fwrite("Invalid value for a reserved hvcC field\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Invalid value for a reserved hvcC field\n");
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C971C58C(_BYTE *a1, int a2, uint64_t a3)
{
  _BYTE *v6;
  int v7;
  _BYTE *v8;
  _DWORD *v9;
  int v10;

  v6 = &a1[a2];
  *v6 = sub_1C971C898(a3, 2);
  a1[7] |= (sub_1C971C898(a3, 1) != 0) << a2;
  v7 = 0;
  v6[8] = sub_1C971C898(a3, 5);
  v8 = v6 + 8;
  v9 = &a1[4 * a2 + 16];
  do
    *v9 |= (sub_1C971C898(a3, 1) != 0) << v7++;
  while (v7 != 32);
  a1[44] |= (sub_1C971C898(a3, 1) != 0) << a2;
  a1[45] |= (sub_1C971C898(a3, 1) != 0) << a2;
  a1[46] |= (sub_1C971C898(a3, 1) != 0) << a2;
  a1[47] |= (sub_1C971C898(a3, 1) != 0) << a2;
  if (*v8 > 3u || (*(_BYTE *)v9 & 0x10) != 0)
  {
    a1[48] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[49] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[50] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[51] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[52] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[53] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[54] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[55] |= (sub_1C971C898(a3, 1) != 0) << a2;
    a1[56] |= (sub_1C971C898(a3, 1) != 0) << a2;
    v10 = 13;
  }
  else
  {
    a1[48] |= 1 << a2;
    a1[49] |= 1 << a2;
    a1[51] |= 1 << a2;
    a1[52] |= 1 << a2;
    if (*v8 == 3)
      a1[54] |= 1 << a2;
    v10 = 22;
  }
  sub_1C971C898(a3, v10);
  return sub_1C971C898(a3, 22);
}

uint64_t sub_1C971C898(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(int *)(a1 + 52) + (uint64_t)a2;
  v4 = v3 & 7;
  *(_DWORD *)(a1 + 52) = v3 & 7;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 32) + (v3 >> 3));
  *(_QWORD *)(a1 + 32) = v6;
  if ((unint64_t)v6 >= v5)
  {
    if ((unint64_t)v6 > v5)
      *(_QWORD *)(a1 + 32) = v5;
    v7 = v2;
  }
  else
  {
    v7 = bswap32(*v6);
  }
  *(_DWORD *)(a1 + 48) = v7 << v4;
  return v2 >> -(char)a2;
}

uint64_t sub_1C971C8F0(uint64_t a1, CMFormatDescriptionRef desc)
{
  CFPropertyListRef Extension;
  const void *v4;
  CFTypeID TypeID;
  const void *Value;
  CFTypeID v7;
  CFTypeID v8;
  uint64_t v9;
  FILE *v10;
  const char *v11;
  const char *v12;
  size_t v13;
  unsigned int *BytePtr;
  CFIndex Length;
  CMVideoDimensions Dimensions;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  FILE **v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unint64_t v41;
  void *__p[2];
  CMVideoDimensions v43;
  unsigned int *v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE v47[32];

  Extension = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension)
    return 4294954387;
  v4 = Extension;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v4))
    return 4294954387;
  if (!*(_QWORD *)(a1 + 32))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "No decoder, session was invalidated?\n");
    }
    return 4294954393;
  }
  FigFormatDescriptionRelease();
  *(_QWORD *)(a1 + 16) = FigFormatDescriptionRetain();
  Value = CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("hvcC"));
  if (!Value)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)v4, CFSTR("ftvH"));
    if (!Value)
      return 4294954387;
  }
  v7 = CFArrayGetTypeID();
  if (v7 == CFGetTypeID(Value) && (Value = CFArrayGetValueAtIndex((CFArrayRef)Value, 0)) == 0
    || (v8 = CFDataGetTypeID(), v8 != CFGetTypeID(Value))
    || CFDataGetLength((CFDataRef)Value) > 3000)
  {
    v9 = 4294954387;
    goto LABEL_11;
  }
  __p[0] = 0;
  __p[1] = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  BytePtr = (unsigned int *)CFDataGetBytePtr((CFDataRef)Value);
  Length = CFDataGetLength((CFDataRef)Value);
  v9 = sub_1C971B944((uint64_t)__p, BytePtr, Length);
  if (!(_DWORD)v9)
  {
    v9 = sub_1C971C308(*(_QWORD *)(a1 + 24), (uint64_t)__p);
    if (!(_DWORD)v9)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 30))
      {
        v18 = 0;
        v19 = v46;
        v20 = HIDWORD(v46);
        v21 = 0x1ED1AC000uLL;
        v22 = v44;
        v23 = v45;
        v24 = (FILE **)MEMORY[0x1E0C80C10];
        while (1)
        {
          v25 = (int)v20 + 1;
          HIDWORD(v46) = v25 & 7;
          v26 = (unsigned int *)((char *)v22 + (v25 >> 3));
          v44 = v26;
          if ((unint64_t)v26 >= v23)
          {
            if ((unint64_t)v26 > v23)
              v26 = (unsigned int *)v23;
          }
          else
          {
            v19 = bswap32(*v26);
          }
          v27 = v19 << (v25 & 7);
          v28 = (v25 & 7) + 1;
          v29 = v28 & 7;
          LODWORD(v46) = v27;
          HIDWORD(v46) = v28 & 7;
          v30 = (unsigned int *)((char *)v26 + (v28 >> 3));
          v44 = v30;
          if ((unint64_t)v30 >= v23)
          {
            if ((unint64_t)v30 > v23)
              v30 = (unsigned int *)v23;
            v31 = v27;
          }
          else
          {
            v31 = bswap32(*v30);
          }
          v32 = v31 << v29;
          LODWORD(v46) = v31 << v29;
          if ((v27 & 0x80000000) != 0 && *(int *)(v21 + 3264) >= 3)
          {
            fwrite("Invalid value for reserved bit\n", 0x1FuLL, 1uLL, *v24);
            syslog(27, "Invalid value for reserved bit\n");
          }
          v33 = (v28 & 7) + 6;
          v20 = v33 & 7;
          HIDWORD(v46) = v20;
          v34 = (unsigned int *)((char *)v30 + (v33 >> 3));
          v44 = v34;
          if ((unint64_t)v34 >= v23)
          {
            if ((unint64_t)v34 > v23)
              v34 = (unsigned int *)v23;
          }
          else
          {
            v32 = bswap32(*v34);
          }
          v35 = v32 << v20;
          LODWORD(v46) = v32 << v20;
          HIDWORD(v46) = v20;
          v22 = (unsigned int *)((char *)v34 + 2);
          v44 = (unsigned int *)((char *)v34 + 2);
          if ((unint64_t)v34 + 2 >= v23)
          {
            if ((unint64_t)v34 + 2 > v23)
            {
              v44 = (unsigned int *)v23;
              v22 = (unsigned int *)v23;
            }
            v36 = v32 << v20;
          }
          else
          {
            v36 = bswap32(*v22);
          }
          v19 = v36 << v20;
          LODWORD(v46) = v19;
          if (v35 >= 0x10000)
            break;
LABEL_67:
          v9 = 0;
          if (++v18 >= *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 30))
            goto LABEL_21;
        }
        v37 = v21;
        v38 = HIWORD(v35);
        while (1)
        {
          v39 = (unsigned int *)((char *)v22 + 2);
          if ((unint64_t)v22 + 2 >= v23)
          {
            if ((unint64_t)v22 + 2 > v23)
              v39 = (unsigned int *)v23;
            v40 = v19;
          }
          else
          {
            v40 = bswap32(*v39);
          }
          v41 = HIWORD(v19);
          if (v23 - (unint64_t)v39 < v41)
            break;
          if (*(_QWORD *)(a1 + 32))
          {
            sub_1C971CDA8((uint64_t)v47);
            v9 = sub_1C971CE30((uint64_t)v47, (unsigned __int8 *)v39, v41);
            if ((_DWORD)v9)
              goto LABEL_21;
            v9 = sub_1C971D0C8(*(char **)(a1 + 32), (uint64_t)v47);
            if ((_DWORD)v9)
              goto LABEL_21;
          }
          v22 = (unsigned int *)((char *)v39 + v41);
          if ((unint64_t)v39 + v41 >= v23)
          {
            v19 = v40 << v20;
            if ((unint64_t)v39 + v41 > v23)
              v22 = (unsigned int *)v23;
          }
          else
          {
            v19 = bswap32(*v22);
          }
          if (!--v38)
          {
            v46 = __PAIR64__(v20, v19);
            v44 = v22;
            v21 = v37;
            v24 = (FILE **)MEMORY[0x1E0C80C10];
            goto LABEL_67;
          }
        }
        v9 = 4294954387;
      }
      else
      {
        v9 = 0;
      }
    }
  }
LABEL_21:
  if (__p[0])
    operator delete(__p[0]);
  if ((_DWORD)v9)
  {
LABEL_11:
    if (dword_1ED1ACCC0 >= 3)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = "ProcessHvcC failed\n";
      v12 = "ProcessHvcC failed\n";
      v13 = 19;
LABEL_13:
      fwrite(v12, v13, 1uLL, v10);
      syslog(27, v11);
      return v9;
    }
    return v9;
  }
  Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 16));
  *(_OWORD *)__p = *(_OWORD *)a1;
  v43 = Dimensions;
  v9 = sub_1C971FC78(*(_QWORD *)(a1 + 32), (__int128 *)__p);
  if ((_DWORD)v9 && dword_1ED1ACCC0 >= 3)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = "RegisterSession() failed\n";
    v12 = "RegisterSession() failed\n";
    v13 = 25;
    goto LABEL_13;
  }
  return v9;
}

void sub_1C971CD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C971CDA8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  *(_QWORD *)a1 = &off_1E8291878;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 64;
  *(_BYTE *)(a1 + 18) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a1;
  v2 = atomic_load(&qword_1ED1ACCF8);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&qword_1ED1ACCF8, &v5, (void (__cdecl *)(void *))sub_1C9747430);
  }
  return a1;
}

uint64_t sub_1C971CE30(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  FILE *v3;
  const char *v4;
  const char *v5;
  size_t v6;
  unsigned __int8 v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 16) = 64;
  if (a3 <= 1)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
      v4 = "NALU too small\n";
      v5 = "NALU too small\n";
      v6 = 15;
LABEL_21:
      fwrite(v5, v6, 1uLL, v3);
      syslog(27, v4);
      return 4294954387;
    }
    return 4294954387;
  }
  if ((char)*a2 < 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
      v4 = "forbidden_zero_bit is 1\n";
      v5 = "forbidden_zero_bit is 1\n";
      v6 = 24;
      goto LABEL_21;
    }
    return 4294954387;
  }
  v8 = *a2;
  v9 = *a2 >> 1;
  *(_BYTE *)(a1 + 16) = v9;
  if (a3 <= 2 && (v8 & 0xFC) != 0x48)
  {
    if (dword_1ED1ACCC0 < 3)
      return 4294954387;
    v10 = "NALU (type %d) has no RBSP!\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "NALU (type %d) has no RBSP!\n");
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + 17) = (a2[1] >> 3) & 0xDF | (32 * (*a2 & 1));
  if ((a2[1] & 7) == 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
      v4 = "nuh_temporal_id_plus1 == 0\n";
      v5 = "nuh_temporal_id_plus1 == 0\n";
      v6 = 27;
      goto LABEL_21;
    }
    return 4294954387;
  }
  result = 0;
  v13 = (a2[1] & 7) - 1;
  *(_BYTE *)(a1 + 18) = v13;
  if (v9 > 0x25)
    return result;
  if (((1 << v9) & 0x3003F0000) != 0)
    goto LABEL_16;
  if (((1 << v9) & 0x3C) != 0)
  {
    if (!v13)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v10 = "Temporal ID must be non-zero for NALU type %d\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Temporal ID must be non-zero for NALU type %d\n");
LABEL_9:
      v11 = *(unsigned __int8 *)(a1 + 16);
LABEL_10:
      syslog(27, v10, v11, v14);
      return 4294954387;
    }
    return 0;
  }
  if (((1 << v9) & 0x3000000000) != 0)
  {
    if (a3 >= 3 && dword_1ED1ACCC0 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "End of sequence/bitstream NALU (%d) shouldn't have RBSP data (%ld bytes)!\n", v9, a3 - 2);
      syslog(28, "End of sequence/bitstream NALU (%d) shouldn't have RBSP data (%ld bytes)!\n", *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24) - 2);
      LOBYTE(v13) = *(_BYTE *)(a1 + 18);
    }
LABEL_16:
    if ((_BYTE)v13)
    {
      if (dword_1ED1ACCC0 < 3)
        return 4294954387;
      v10 = "Temporal ID (%d) must be zero for NALU type %d\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Temporal ID (%d) must be zero for NALU type %d\n", v13, *(unsigned __int8 *)(a1 + 16));
      v11 = *(unsigned __int8 *)(a1 + 18);
      v14 = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_10;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C971D0C8(char *__s1, uint64_t a2)
{
  FILE *v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (FILE *)*((_QWORD *)__s1 + 26);
  if (v4 && __s1[200] && !__s1[240])
  {
    v5 = __s1;
    if (__s1[23] < 0)
      v5 = *(const char **)__s1;
    v6 = *((_QWORD *)__s1 + 3);
    if (strncmp(v5, "FLS;", 4uLL))
    {
      fwrite("FLS;", 1uLL, 4uLL, v4);
      v4 = (FILE *)*((_QWORD *)__s1 + 26);
    }
    fwrite(v5, 1uLL, v6, v4);
    __s1[240] = 1;
  }
  if (*(_BYTE *)(a2 + 17))
  {
    if (dword_1ED1ACCC0 >= 6)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Discarding NALU from layer %d\n", *(unsigned __int8 *)(a2 + 17));
      syslog(30, "Discarding NALU from layer %d\n");
    }
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 16) - 32 > 2)
  {
    if (dword_1ED1ACCC0 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Discarding NALU of unknown type %d\n", *(unsigned __int8 *)(a2 + 16));
      syslog(28, "Discarding NALU of unknown type %d\n");
    }
    return 0;
  }
  v7 = sub_1C971D2A4((uint64_t)__s1, a2);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Dump NALU type %d with error %d", *(unsigned __int8 *)(a2 + 16), v7);
      syslog(27, "Dump NALU type %d with error %d", *(unsigned __int8 *)(a2 + 16), v8);
    }
    return v8;
  }
  return sub_1C9718BDC((uint64_t)(__s1 + 368), a2, __s1[306]);
}

uint64_t sub_1C971D2A4(uint64_t a1, uint64_t a2)
{
  FILE *v2;
  const void *v4;
  size_t v5;

  v2 = *(FILE **)(a1 + 208);
  if (!v2)
    return 0;
  v4 = *(const void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  if (fwrite(&unk_1C98328D7, 1uLL, 3uLL, v2) == 3 && fwrite(v4, 1uLL, v5, *(FILE **)(a1 + 208)) == v5)
    return 0;
  else
    return *__error();
}

uint64_t sub_1C971D324(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E82919A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C971D338(uint64_t a1, unint64_t a2, const char *a3, char *a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t result;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  char v14;

  v6 = a3;
  v14 = 0;
  result = sub_1C971D440(a1, a2, a3, a4, a5, a6, &v14);
  if (!(_DWORD)result)
  {
    if (v14)
      return 0;
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unknown option '%s'\n", v6);
      syslog(27, "Unknown option '%s'\n", v6);
    }
    result = 4294954386;
    if (a2)
    {
      if (v6)
      {
        v9 = strlen(v6);
        if (!v9)
          return 4294954386;
        v10 = v9 - 1;
        do
        {
          v12 = *v6++;
          v11 = v12;
          if (v12 < 0)
            break;
        }
        while (v10--);
        result = 4294954386;
        if (v11 < 0 && dword_1ED1ACCC0 >= 3)
        {
          fwrite("Option name contains non-ASCII characters, this is wrong!\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "Option name contains non-ASCII characters, this is wrong!\n");
          return 4294954386;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C971D440(uint64_t a1, unint64_t a2, const char *a3, char *__s, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t result;
  unsigned int *v22;

  *a7 = 0;
  if (!a2
    && strlen(__s) >= 3
    && ((*__s << 16) | (__s[1] << 8) | __s[2]) == 0xE28094)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Option '%s' starts with the wrong dash, please retype it\n", __s);
      syslog(27, "Option '%s' starts with the wrong dash, please retype it\n");
    }
    return 4294954394;
  }
  v16 = *(_QWORD **)(a1 + 16);
  v15 = (_QWORD *)(a1 + 16);
  v14 = v16;
  if (!v16)
    return 0;
  v17 = v15;
  do
  {
    v18 = v14[4];
    v19 = v18 >= a2;
    if (v18 >= a2)
      v20 = v14;
    else
      v20 = v14 + 1;
    if (v19)
      v17 = v14;
    v14 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v17 == v15 || a2 < v17[4])
    return 0;
  v22 = (unsigned int *)v17[6];
  if ((_DWORD)a5 == -1)
    a5 = v22[2];
  *a7 = 1;
  result = (*(uint64_t (**)(unsigned int *, char *, uint64_t, uint64_t))(*(_QWORD *)v22 + 8))(v22, __s, a5, a6);
  if ((_DWORD)result == -12902 && dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid parameter '%s' to '%s'\n", __s, a3);
    syslog(27, "Invalid parameter '%s' to '%s'\n");
    return 4294954394;
  }
  return result;
}

uint64_t HEVCVideoDecoder_CreateInstance(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  FILE *v5;
  const char *v6;
  const char *v7;
  size_t v8;
  uint64_t DerivedStorage;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __darwin_ino64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const char **v19;
  int *v20;
  stat *v21;
  uint64_t v22;
  uint64_t *v23;
  const char *v24;
  uint64_t *v25;
  _QWORD *v26;
  FILE *v27;
  const char *v28;
  FILE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v35;
  time_t v36[65];
  stat v37[3];
  char v38[20];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  VTVideoDecoderGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v5 = (FILE *)*MEMORY[0x1E0C80C10];
      v6 = "FigDerivedObjectCreate failed";
      v7 = "FigDerivedObjectCreate failed";
      v8 = 29;
LABEL_4:
      fwrite(v7, v8, 1uLL, v5);
      syslog(27, v6);
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 1044) = -1;
  *(_QWORD *)(DerivedStorage + 1048) = -1;
  *(_BYTE *)(DerivedStorage + 1060) = 1;
  v10 = operator new(0x40uLL, MEMORY[0x1E0DE4E10]);
  v11 = v10;
  if (v10)
  {
    v10[12] = 0;
    *((_QWORD *)v10 + 7) = sub_1C97FEB88;
    *((_QWORD *)v10 + 4) = sub_1C97DD724;
    *((_QWORD *)v10 + 5) = sub_1C97DD768;
    *(_QWORD *)v10 = sub_1C97DD694;
    *((_QWORD *)v10 + 1) = sub_1C97FE224;
    *((_QWORD *)v10 + 2) = sub_1C97DD6DC;
    *((_QWORD *)v10 + 3) = sub_1C97FE2C8;
  }
  *(_QWORD *)(DerivedStorage + 1064) = v10;
  v12 = (char *)operator new(0x40uLL, MEMORY[0x1E0DE4E10]);
  v13 = v12;
  if (v12)
  {
    *(_QWORD *)v12 = 850045863;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *((_QWORD *)v12 + 7) = 0;
  }
  *(_QWORD *)(DerivedStorage + 1072) = v12;
  v14 = (char *)operator new(0x40uLL, MEMORY[0x1E0DE4E10]);
  if (!v14)
  {
    *(_QWORD *)(DerivedStorage + 24) = 0;
    atomic_store(0, (unsigned __int8 *)(DerivedStorage + 1080));
    v4 = 4294954392;
    goto LABEL_49;
  }
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v14[21] = 1;
  *(_DWORD *)(v14 + 22) = 0;
  *(_DWORD *)(v14 + 25) = 0;
  v14[29] = 3;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *(_QWORD *)(DerivedStorage + 24) = v14;
  v4 = 4294954392;
  atomic_store(0, (unsigned __int8 *)(DerivedStorage + 1080));
  if (!v11 || !v13)
    goto LABEL_49;
  v15 = (char *)operator new(0xA20uLL, MEMORY[0x1E0DE4E10]);
  if (!v15)
  {
    *(_QWORD *)(DerivedStorage + 32) = 0;
    v23 = (uint64_t *)(DerivedStorage + 32);
    if (dword_1ED1ACCC0 < 3)
      goto LABEL_49;
    v24 = "Decoder creation failed\n";
    fwrite("Decoder creation failed\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v25 = v23;
    goto LABEL_42;
  }
  v16 = (__darwin_ino64_t)v15;
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *(_DWORD *)(v15 + 34) = -1;
  *((_WORD *)v15 + 19) = -1;
  v15[40] = 0;
  *((_WORD *)v15 + 16) = 0;
  *((_DWORD *)v15 + 12) = -1;
  v15[52] = -1;
  v15[100] = 0;
  *((_QWORD *)v15 + 21) = 0;
  v17 = v15 + 168;
  *((_QWORD *)v15 + 22) = 0;
  *((_QWORD *)v15 + 28) = 0;
  v18 = (uint64_t)(v15 + 248);
  *((_QWORD *)v15 + 29) = 0;
  sub_1C971F310((uint64_t)(v15 + 248));
  *(_QWORD *)(v16 + 248) = &off_1E82916B0;
  *(_BYTE *)(v16 + 348) = 0;
  sub_1C96FED58(v18, 0xAF63E54C8601FBD7, "h", (_BYTE *)(v16 + 305), 0);
  sub_1C96FED58(v18, 0xA9918CC5FA26ABAuLL, "help", (_BYTE *)(v16 + 305), 0);
  sub_1C971E1F4(v18, 0, 0, (_QWORD *)(v16 + 288));
  v19 = (const char **)(v16 + 296);
  sub_1C971E1F4(v18, 0xAF63E24C8601F6BELL, "o", (_QWORD *)(v16 + 296));
  sub_1C96FED58(v18, 0x81988191775D1F3uLL, "md5", (_BYTE *)(v16 + 304), 0);
  sub_1C96FED58(v18, 0x35CA209DCAF9161DuLL, "verbose", (_BYTE *)(v16 + 306), 0);
  sub_1C96FEC6C(v18, 0x23E5906728B4E66FuLL, "frames", (_DWORD *)(v16 + 328), 0);
  sub_1C96FED58(v18, 0x1E5485EF2E9F9384uLL, "time", (_BYTE *)(v16 + 332), 0);
  sub_1C96FEC6C(v18, 0x84C51CA356506FC0, "trials", (_DWORD *)(v16 + 336), 1);
  sub_1C96FED58(v18, 0x832846984DBFE0D9, "time-frames", (_BYTE *)(v16 + 340), 0);
  sub_1C96FEC6C(v18, 0x71F304EA62C01CBDuLL, "window", (_DWORD *)(v16 + 344), 1);
  sub_1C96FED58(v18, 0x1D394CB372451B96uLL, "coding-order", (_BYTE *)(v16 + 357), 0);
  sub_1C96FED58(v18, 0xDEE7D1A9CEA3053FLL, "deblock-per-ctb", (_BYTE *)(v16 + 358), 0);
  sub_1C96FED58(v18, 0x5DAB01B8216B7BDDuLL, "scalar", (_BYTE *)(v16 + 348), 0);
  sub_1C971FF04();
  sub_1C96FEC6C(v18, 0xC0AB56BF45863635, "max-threads", (_DWORD *)(v16 + 312), dword_1ED1ACCA4);
  sub_1C96FEC6C(v18, 0x1CEC94C4396EBFBuLL, "max-mpt-threads", (_DWORD *)(v16 + 316), 3);
  sub_1C96FEC6C(v18, 0x90EC632032E98B72, "wpp-threads", (_DWORD *)(v16 + 320), 0);
  sub_1C96FEC6C(v18, 0xDC868918FEB4BC88, "fps", (_DWORD *)(v16 + 352), 0);
  sub_1C96FED58(v18, 0x54EB290A497D21C7uLL, "leaks", (_BYTE *)(v16 + 360), 0);
  sub_1C96FED58(v18, 0xBA3720DECF81698ALL, "u16-yuv", (_BYTE *)(v16 + 359), 0);
  v20 = (int *)(v16 + 364);
  sub_1C96FEC6C(v18, 0xC757C18968E4439DLL, "debug_facetime", (_DWORD *)(v16 + 364), 0);
  sub_1C96FEB10(v18, 0xFE31B357AB72A0FuLL, (uint64_t)"threading", (_DWORD *)(v16 + 308), qword_1E82925A8, 0x3C0D17BAD169557BLL);
  sub_1C96FEB10(v18, 0xF5B6EA8C35AC1E89, (uint64_t)"priority", (_DWORD *)(v16 + 324), qword_1E8292650, 0xC76A095E1FFA22B6);
  sub_1C96FEA64(v18, 0xE061A2646338FACFLL, (uint64_t)"HEVCDecoderOptions", (void (*)(uint64_t, unint64_t))sub_1C971F3D8, 0, 0);
  bzero((void *)(v16 + 368), 0x648uLL);
  sub_1C971EBF0(v16 + 1976);
  *(_DWORD *)(v16 + 2392) = 1;
  *(_OWORD *)(v16 + 2424) = 0u;
  *(_OWORD *)(v16 + 2440) = 0u;
  *(_OWORD *)(v16 + 2456) = 0u;
  *(_QWORD *)(v16 + 2472) = 850045863;
  *(_QWORD *)(v16 + 2384) = 0;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 2400) = 0u;
  *(_OWORD *)(v16 + 2480) = 0u;
  *(_OWORD *)(v16 + 2496) = 0u;
  *(_OWORD *)(v16 + 2512) = 0u;
  *(_OWORD *)(v16 + 2528) = 0u;
  *(_OWORD *)(v16 + 2544) = 0u;
  *(_OWORD *)(v16 + 2560) = 0u;
  *(_OWORD *)(v16 + 2569) = 0u;
  *(_BYTE *)(v16 + 240) = 0;
  *(_DWORD *)(v16 + 200) = 65793;
  *(_QWORD *)&v37[0].st_dev = &off_1E82919A0;
  v37[0].st_ino = v16;
  *(_QWORD *)&v37[0].st_rdev = v37;
  sub_1C9752BBC(v37, (_QWORD *)(v16 + 1976));
  v21 = *(stat **)&v37[0].st_rdev;
  if (*(stat **)&v37[0].st_rdev == v37)
  {
    v22 = 4;
    v21 = v37;
  }
  else
  {
    if (!*(_QWORD *)&v37[0].st_rdev)
      goto LABEL_21;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&v21->st_dev + 8 * v22))();
LABEL_21:
  *(_QWORD *)(DerivedStorage + 32) = v16;
  v25 = (uint64_t *)(DerivedStorage + 32);
  v26 = (_QWORD *)operator new();
  *v26 = &off_1E8291790;
  v26[531] = 0;
  *(_QWORD *)&v37[0].st_dev = v26;
  sub_1C977EF28(v17, (uint64_t *)&v37[0].st_dev);
  if (*(_QWORD *)&v37[0].st_dev)
    (*(void (**)(_QWORD))(**(_QWORD **)&v37[0].st_dev + 8))(*(_QWORD *)&v37[0].st_dev);
  if (*v17)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v17 + 16))(*v17, 1);
    if (*v20)
    {
      v36[0] = 0;
      setlocale(0, (const char *)&unk_1C986A1CD);
      time(v36);
      localtime_r(v36, (tm *)v37);
      strftime(v38, 0x14uLL, "%m%d%g_%H%M%S", (const tm *)v37);
      strcpy((char *)v36, "/private/var/logs/mediaserverd/VideoProcessing");
      if (stat((const char *)v36, v37))
        mkdir((const char *)v36, 0x1FFu);
      snprintf((char *)v37, 0x200uLL, "%s/LrpDec_%s_Bitstream.hevc", (const char *)v36, v38);
      v27 = fopen((const char *)v37, "wb");
      if (!v27 && dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open file '%s'\n", (const char *)v37);
        syslog(27, "Unable to open file '%s'\n", (const char *)v37);
      }
      *(_QWORD *)(v16 + 208) = v27;
      if (*v20 >= 3)
      {
        snprintf((char *)v37, 0x200uLL, "%s/LrpDec_%s_DecYuv.yuv", (const char *)v36, v38);
        v35 = 0;
        sub_1C971D338(v18, 0xAF63E24C8601F6BELL, "o", (char *)v37, 0xFFFFFFFFLL, (uint64_t)&v35);
      }
    }
    v28 = *v19;
    if (*v19)
    {
      v29 = fopen(*v19, "wb");
      if (!v29 && dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open file '%s'\n", v28);
        syslog(27, "Unable to open file '%s'\n", v28);
      }
      *(_QWORD *)(v16 + 216) = v29;
    }
    v4 = sub_1C96FCC5C(*(_QWORD *)(DerivedStorage + 32), (char *)(DerivedStorage + 40));
    if (!(_DWORD)v4)
    {
      v30 = *v25 + 248;
      LOBYTE(v37[0].st_dev) = 0;
      sub_1C971D338(v30, 0xFE31B357AB72A0FuLL, "threading", "auto", 0xFFFFFFFFLL, (uint64_t)v37);
      v31 = *v25 + 248;
      LOBYTE(v37[0].st_dev) = 0;
      sub_1C971D338(v31, 0x1D394CB372451B96uLL, "coding-order", "1", 0xFFFFFFFFLL, (uint64_t)v37);
      v4 = 0;
      goto LABEL_49;
    }
    if (dword_1ED1ACCC0 >= 3)
    {
      v24 = "Invalid NDU\n";
      fwrite("Invalid NDU\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
LABEL_42:
      syslog(27, v24);
    }
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v24 = "Init failed\n";
      fwrite("Init failed\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      v4 = 4294954392;
      goto LABEL_42;
    }
    v4 = 4294954392;
  }
  if (*v25)
  {
    v32 = sub_1C977EB64(*v25);
    MEMORY[0x1CAA43B9C](v32, 0x10F2C4084AC0B2ELL);
  }
  v33 = dword_1ED1ACCC0;
  *v25 = 0;
  if (v33 >= 3)
  {
    v5 = (FILE *)*MEMORY[0x1E0C80C10];
    v6 = "Error creating LRP decoder\n";
    v7 = "Error creating LRP decoder\n";
    v8 = 27;
    goto LABEL_4;
  }
LABEL_49:
  *a3 = 0;
  return v4;
}

void sub_1C971E108(_Unwind_Exception *a1)
{
  if (STACK[0x228])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x228] + 8))(STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_1C971E1F4(uint64_t a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  _QWORD *v7;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;

  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a3;
  *a4 = 0;
  v7 = *(_QWORD **)(a1 + 16);
  if (!v7)
  {
LABEL_6:
    v10 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v10)
    {
      v10[2] = 0;
      *(_QWORD *)v10 = &off_1E82914E0;
      *((_QWORD *)v10 + 2) = a4;
      sub_1C96FEE44((uint64_t **)(a1 + 8), a2, &v11)[6] = (uint64_t *)v10;
    }
    return;
  }
  while (1)
  {
    v9 = v7[4];
    if (a2 >= v9)
      break;
LABEL_5:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_6;
  }
  if (v9 < a2)
  {
    ++v7;
    goto LABEL_5;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

void VCPHEVCRegisterDecoder()
{
  unint64_t v0;
  char v1;
  char **v2;
  char *v3;

  v0 = atomic_load(&qword_1ED1ACD00);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&qword_1ED1ACD00, &v2, (void (__cdecl *)(void *))sub_1C97218FC);
  }
}

void sub_1C971E334(void **a1, unint64_t a2)
{
  _OWORD *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;

  v5 = (char *)*a1;
  v4 = a1[1];
  v6 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[248 * a2];
  }
  else
  {
    v8 = a1[2];
    if (0xEF7BDEF7BDEF7BDFLL * ((v8 - (_BYTE *)v4) >> 3) >= v7)
    {
      v31 = (_OWORD *)((char *)v4 + 248 * v7);
      do
      {
        *(_OWORD *)((char *)v4 + 153) = 0uLL;
        v4[8] = 0uLL;
        v4[9] = 0uLL;
        v4[6] = 0uLL;
        v4[7] = 0uLL;
        v4[4] = 0uLL;
        v4[5] = 0uLL;
        v4[2] = 0uLL;
        v4[3] = 0uLL;
        *v4 = 0uLL;
        v4[1] = 0uLL;
        *(_OWORD *)((char *)v4 + 170) = 0uLL;
        *(_OWORD *)((char *)v4 + 186) = 0uLL;
        *(_OWORD *)((char *)v4 + 202) = 0uLL;
        *(_OWORD *)((char *)v4 + 218) = 0uLL;
        *(_OWORD *)((char *)v4 + 230) = 0uLL;
        v4 = (_OWORD *)((char *)v4 + 248);
      }
      while (v4 != v31);
      a1[1] = v31;
    }
    else
    {
      if (a2 > 0x108421084210842)
        sub_1C9747024();
      v9 = 0xEF7BDEF7BDEF7BDFLL * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x84210842108421)
        v11 = 0x108421084210842;
      else
        v11 = v10;
      if (v11 > 0x108421084210842)
        sub_1C9724B4C();
      v12 = (char *)operator new(248 * v11);
      v13 = &v12[248 * v6];
      v14 = &v12[248 * a2];
      v15 = v13;
      do
      {
        *(_OWORD *)(v15 + 153) = 0uLL;
        *((_OWORD *)v15 + 8) = 0uLL;
        *((_OWORD *)v15 + 9) = 0uLL;
        *((_OWORD *)v15 + 6) = 0uLL;
        *((_OWORD *)v15 + 7) = 0uLL;
        *((_OWORD *)v15 + 4) = 0uLL;
        *((_OWORD *)v15 + 5) = 0uLL;
        *((_OWORD *)v15 + 2) = 0uLL;
        *((_OWORD *)v15 + 3) = 0uLL;
        *(_OWORD *)v15 = 0uLL;
        *((_OWORD *)v15 + 1) = 0uLL;
        *(_OWORD *)(v15 + 170) = 0uLL;
        *(_OWORD *)(v15 + 186) = 0uLL;
        *(_OWORD *)(v15 + 202) = 0uLL;
        *(_OWORD *)(v15 + 218) = 0uLL;
        *(_OWORD *)(v15 + 230) = 0uLL;
        v15 += 248;
      }
      while (v15 != v14);
      v16 = &v12[248 * v11];
      v18 = (char *)*a1;
      v17 = (char *)a1[1];
      if (v17 != *a1)
      {
        do
        {
          v19 = *(_OWORD *)(v17 - 248);
          v20 = *(_OWORD *)(v17 - 232);
          v21 = *(_OWORD *)(v17 - 216);
          *(_OWORD *)(v13 - 200) = *(_OWORD *)(v17 - 200);
          *(_OWORD *)(v13 - 216) = v21;
          *(_OWORD *)(v13 - 232) = v20;
          *(_OWORD *)(v13 - 248) = v19;
          v22 = *(_OWORD *)(v17 - 184);
          v23 = *(_OWORD *)(v17 - 168);
          v24 = *(_OWORD *)(v17 - 152);
          *(_OWORD *)(v13 - 136) = *(_OWORD *)(v17 - 136);
          *(_OWORD *)(v13 - 152) = v24;
          *(_OWORD *)(v13 - 168) = v23;
          *(_OWORD *)(v13 - 184) = v22;
          v25 = *(_OWORD *)(v17 - 120);
          v26 = *(_OWORD *)(v17 - 104);
          v27 = *(_OWORD *)(v17 - 88);
          *(_OWORD *)(v13 - 72) = *(_OWORD *)(v17 - 72);
          *(_OWORD *)(v13 - 88) = v27;
          *(_OWORD *)(v13 - 104) = v26;
          *(_OWORD *)(v13 - 120) = v25;
          v28 = *(_OWORD *)(v17 - 56);
          v29 = *(_OWORD *)(v17 - 40);
          v30 = *(_OWORD *)(v17 - 24);
          *(_QWORD *)(v13 - 10) = *(_QWORD *)(v17 - 10);
          *(_OWORD *)(v13 - 24) = v30;
          *(_OWORD *)(v13 - 40) = v29;
          *(_OWORD *)(v13 - 56) = v28;
          v13 -= 248;
          v17 -= 248;
        }
        while (v17 != v18);
        v17 = (char *)*a1;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v16;
      if (v17)
        operator delete(v17);
    }
  }
}

void sub_1C971E580(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v40 = 1;
      else
        v40 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)sub_1C974B718(v40);
      v42 = &v41[8 * (v40 >> 2)];
      v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      v6 = v42;
      v46 = a1[2] - (_QWORD)v45;
      if (v46)
      {
        v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v41[8 * (v40 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v51 = 1;
      else
        v51 = (v19 - v22) >> 2;
      v52 = 2 * v51;
      v53 = (char *)sub_1C974B718(v51);
      v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      v55 = (uint64_t *)a1[1];
      v56 = v22;
      v57 = a1[2] - (_QWORD)v55;
      if (v57)
      {
        v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = 8 * (v57 >> 3);
        v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v60 = *v55++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v85 = 1;
      else
        v85 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)sub_1C974B718(v85);
      v42 = &v41[8 * (v85 >> 2)];
      v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      v6 = v42;
      v88 = a1[2] - (_QWORD)v87;
      if (v88)
      {
        v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          v91 = *v87++;
          *(_QWORD *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)sub_1C974B718(v28);
  v31 = v30;
  v32 = &v29[8 * v23];
  *(_QWORD *)&v33 = v29;
  *((_QWORD *)&v33 + 1) = v32;
  v95 = v33;
  v34 = operator new(0x1000uLL);
  *(_QWORD *)&v35 = v32;
  *((_QWORD *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    v36 = 8 * v23;
    *(_QWORD *)&v37 = v95;
    if (v20 - v22 >= 1)
    {
      v38 = v36 >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v32 -= 8 * (v39 >> 1);
      *(_QWORD *)&v35 = v32;
      *((_QWORD *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    v62 = v36 >> 2;
    if (v20 == v22)
      v63 = 1;
    else
      v63 = v62;
    v64 = (char *)sub_1C974B718(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(_QWORD *)&v37 = v64;
    *((_QWORD *)&v37 + 1) = v32;
    *(_QWORD *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = &v64[8 * v65];
    if (!v29)
      goto LABEL_50;
    v92 = v35;
    v95 = v37;
    operator delete(v29);
    v35 = v92;
  }
  v37 = v95;
LABEL_50:
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v35 = v35 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (_QWORD *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
    {
      v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        if (*((_QWORD *)&v35 + 1) == *((_QWORD *)&v37 + 1))
          v74 = 1;
        else
          v74 = (uint64_t)(*((_QWORD *)&v35 + 1) - *((_QWORD *)&v37 + 1)) >> 2;
        v75 = (char *)sub_1C974B718(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            v82 = *v81++;
            *(_QWORD *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(_QWORD *)&v37 = v75;
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = v77;
        *((_QWORD *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          v93 = v35;
          v97 = v37;
          operator delete(v67);
          v35 = v93;
          v37 = v97;
        }
      }
      else
      {
        v70 = (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1)
          v71 = v70 + 1;
        else
          v71 = v70 + 2;
        v72 = v71 >> 1;
        v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((_QWORD *)&v37 + 1)));
        if ((_QWORD)v35 == *((_QWORD *)&v37 + 1))
        {
          v69 = (_BYTE *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v94 = *((_QWORD *)&v35 + 1);
          v96 = v37;
          memmove((void *)(v73 - (v35 - *((_QWORD *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((_QWORD *)&v37 + 1));
          *((_QWORD *)&v35 + 1) = v94;
          *(_QWORD *)&v37 = v96;
        }
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((_QWORD *)&v37 + 1);
    }
    v83 = *(_QWORD *)(i - 8);
    *((_QWORD *)v68 - 1) = v83;
    *((_QWORD *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
    operator delete(v84);
}

void sub_1C971EA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1C971EA5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *(_QWORD *)a1 = off_1E8291850;
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = a1 + 324;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  *(_OWORD *)(a1 + 242) = 0u;
  *(_OWORD *)(a1 + 258) = 0u;
  *(_OWORD *)(a1 + 274) = 0u;
  *(_OWORD *)(a1 + 290) = 0u;
  *(_OWORD *)(a1 + 302) = 0u;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  v3 = a1 + 1584;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1648) = 0;
  bzero((void *)(a1 + 1672), 0x220uLL);
  *(_BYTE *)(a1 + 659) = 1;
  *(_WORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 50) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 58) = 258;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 559) = 0;
  *(_BYTE *)(a1 + 567) = 1;
  *(_DWORD *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 572) = 0;
  *(_WORD *)(a1 + 600) = 0;
  *(_OWORD *)(v2 + 196) = xmmword_1C9862BE0;
  *(_OWORD *)(v2 + 212) = xmmword_1C9862BE0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_DWORD *)(a1 + 2256) = 0;
  v8 = 0uLL;
  sub_1C974C5FC(v3, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t sub_1C971EBF0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v5[0] = &off_1E8292368;
  v6 = v5;
  sub_1C9752BBC(v5, (_QWORD *)a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_1C971ECE4(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  __int16 *v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _WORD *v40;
  __int16 *v41;
  uint64_t v42;
  __int16 v43;
  unsigned __int8 v44;
  BOOL (*v45)(__int16 *, __int16 *);

  if (*(_BYTE *)(a1 + 163))
  {
    v3 = 0;
    v4 = 0;
    v5 = *(unsigned __int16 *)(a1 + 170)
       + 1
       - 2 * *(unsigned __int8 *)(a1 + 168) * (*(unsigned __int16 *)(a1 + 170) + 1);
    v6 = *(unsigned __int16 *)(a1 + 172);
    v7 = *(unsigned __int16 *)(a1 + 174);
    v8 = *(unsigned __int8 *)(a2 + 162) + 1;
    v9 = (__int16 *)(a2 + 128);
    do
    {
      if (((v6 | v7) & 1) != 0)
      {
        v10 = v6 & 1;
        v11 = v5 + *v9;
        if (v11 < 0)
        {
          v13 = a1 + 4 * v4;
          *(_WORD *)v13 = v11;
          *(_BYTE *)(v13 + 2) = v10;
          ++v4;
        }
        else
        {
          v12 = a1 + 4 * v3;
          *(_WORD *)(v12 + 64) = v11;
          *(_BYTE *)(v12 + 66) = v10;
          ++v3;
        }
      }
      v6 >>= 1;
      v7 >>= 1;
      ++v9;
      --v8;
    }
    while (v8);
    *(_BYTE *)(a1 + 160) = v4;
    *(_BYTE *)(a1 + 161) = v3;
    v14 = v4;
    v45 = sub_1C982EA74;
    if (v4 < 0x81u)
    {
      v15 = 0;
      v17 = 0;
    }
    else
    {
      v15 = (int *)sub_1C982EA88(v4);
      v17 = v16;
    }
    sub_1C982EAE8(a1, (int *)(a1 + 4 * v14), (uint64_t (**)(int *, int *))&v45, v14, v15, v17);
    if (v15)
      operator delete(v15);
    v34 = *(unsigned __int8 *)(a1 + 161);
    v45 = sub_1C982ED4C;
    if (v34 < 0x81)
    {
      v35 = 0;
      v37 = 0;
    }
    else
    {
      v35 = (int *)sub_1C982EA88(v34);
      v37 = v36;
    }
    sub_1C982EAE8(a1 + 64, (int *)(a1 + 64 + 4 * v34), (uint64_t (**)(int *, int *))&v45, v34, v35, v37);
    if (v35)
      operator delete(v35);
    LODWORD(v20) = *(unsigned __int8 *)(a1 + 160);
    if (*(_BYTE *)(a1 + 160))
    {
LABEL_27:
      v38 = 0;
      do
      {
        *(_WORD *)(a1 + v38 + 128) = *(_WORD *)(a1 + 2 * v38);
        v38 += 2;
      }
      while (2 * v20 != v38);
    }
  }
  else
  {
    v18 = *(unsigned __int16 *)(a1 + 242);
    v19 = ~*(unsigned __int16 *)(a1 + 178);
    *(_WORD *)a1 = ~*(_WORD *)(a1 + 178);
    *(_BYTE *)(a1 + 2) = v18 & 1;
    v20 = *(unsigned __int8 *)(a1 + 176);
    if (v20 >= 2)
    {
      v21 = v20 - 1;
      v22 = (_BYTE *)(a1 + 6);
      v23 = (unsigned __int16 *)(a1 + 180);
      do
      {
        v24 = (v18 >> 1) & 1;
        v18 = (unsigned __int16)v18 >> 1;
        v25 = *v23++;
        v19 += ~v25;
        *((_WORD *)v22 - 1) = v19;
        *v22 = v24;
        v22 += 4;
        --v21;
      }
      while (v21);
    }
    v26 = *(unsigned __int16 *)(a1 + 244);
    v27 = *(unsigned __int16 *)(a1 + 210) + 1;
    *(_WORD *)(a1 + 64) = *(_WORD *)(a1 + 210) + 1;
    *(_BYTE *)(a1 + 66) = v26 & 1;
    v28 = *(unsigned __int8 *)(a1 + 177);
    if (v28 >= 2)
    {
      v29 = v28 - 1;
      v30 = (_BYTE *)(a1 + 70);
      v31 = (unsigned __int16 *)(a1 + 212);
      do
      {
        v32 = (v26 >> 1) & 1;
        v26 = (unsigned __int16)v26 >> 1;
        v33 = *v31++;
        v27 += v33 + 1;
        *((_WORD *)v30 - 1) = v27;
        *v30 = v32;
        v30 += 4;
        --v29;
      }
      while (v29);
    }
    *(_BYTE *)(a1 + 160) = v20;
    *(_BYTE *)(a1 + 161) = v28;
    if ((_DWORD)v20)
      goto LABEL_27;
  }
  v39 = *(_BYTE *)(a1 + 161);
  if (v39)
  {
    v40 = (_WORD *)(a1 + 2 * v20 + 128);
    v41 = (__int16 *)(a1 + 64);
    v42 = *(unsigned __int8 *)(a1 + 161);
    do
    {
      v43 = *v41;
      v41 += 2;
      *v40++ = v43;
      --v42;
    }
    while (v42);
  }
  v44 = v39 + v20;
  *(_BYTE *)(a1 + 162) = v44;
  if (v44 <= 0xFu)
    bzero((void *)(a1 + 2 * v44 + 128), ((30 - 2 * v44) & 0x1FFFFFFFELL) + 2);
}

void sub_1C971EFA0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C971EFBC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(unsigned __int8 *)(a1 + 196);
  if (v1 >= 0x10)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_video_parameter_set_id_ of %lld is out of range (%lld, %lld)\n", v1, 0, 15);
      syslog(27, "vps_video_parameter_set_id_ of %lld is out of range (%lld, %lld)\n");
    }
    return 0;
  }
  v2 = *(unsigned __int8 *)(a1 + 200);
  if (v2 >= 7)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n", v2, 0, 6);
      syslog(27, "vps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n");
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 202))
    v3 = 0;
  else
    v3 = *(unsigned __int8 *)(a1 + 200);
  v4 = 4 * v3 + 220;
  v5 = v2 + 1;
  do
  {
    v6 = a1 + v3;
    v7 = *(unsigned __int8 *)(a1 + v3 + 203);
    if (v7 >= 0x10)
    {
      if (dword_1ED1ACCC0 < 3)
        return 0;
      v13 = "vps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n", v7, 0, 15);
      v14 = *(unsigned __int8 *)(v6 + 203);
      v15 = 15;
LABEL_25:
      syslog(27, v13, v14, 0, v15);
      return 0;
    }
    v8 = *(unsigned __int8 *)(v6 + 210);
    if (v8 > v7)
    {
      if (dword_1ED1ACCC0 < 3)
        return 0;
      v13 = "vps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n", v8, 0, v7);
      v14 = *(unsigned __int8 *)(v6 + 210);
      v15 = *(unsigned __int8 *)(v6 + 203);
      goto LABEL_25;
    }
    v9 = *(unsigned int *)(a1 + v4);
    if (v9 >= 0xFFFFFFFE)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n", v9, 0, 4294967293);
        syslog(27, "vps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n");
      }
      return 0;
    }
    ++v3;
    v4 += 4;
  }
  while (v5 != v3);
  v10 = *(unsigned __int16 *)(a1 + 250);
  if (v10 >= 0x400)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_num_layer_sets_minus1_ of %lld is out of range (%lld, %lld)\n", v10, 0, 1023);
      syslog(27, "vps_num_layer_sets_minus1_ of %lld is out of range (%lld, %lld)\n");
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 280))
      return 1;
    v11 = *(unsigned __int16 *)(a1 + 300);
    if (v11 < 0x401)
      return 1;
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "vps_num_hrd_parameters_ of %lld is out of range (%lld, %lld)\n", v11, 0, 1024);
      syslog(27, "vps_num_hrd_parameters_ of %lld is out of range (%lld, %lld)\n");
    }
  }
  return 0;
}

uint64_t sub_1C971F264(uint64_t a1, _BYTE *a2, int a3, _BYTE *a4)
{
  unint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v4 = 0xCBF29CE484222325;
    v5 = *a2;
    if (*a2)
    {
      v6 = a2 + 1;
      do
      {
        v4 = 0x100000001B3 * (v4 ^ v5);
        v7 = *v6++;
        v5 = v7;
      }
      while (v7);
    }
    if (v4 <= 1)
      v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  *a4 = 1;
  if (*(_DWORD *)(a1 + 8) != a3)
    return 0;
  v8 = *(uint64_t **)(a1 + 16);
  v9 = *v8;
  if (*v8)
  {
    while (!v4 || v9 != v4)
    {
      v10 = v8[3];
      v8 += 3;
      v9 = v10;
      if (!v10)
        goto LABEL_14;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (!v4)
  {
LABEL_17:
    v11 = 0;
    **(_DWORD **)(a1 + 24) = *((_DWORD *)v8 + 4);
    return v11;
  }
  return 4294954394;
}

uint64_t sub_1C971F310(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E8291690;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  sub_1C96FEB10(a1, 0xAAB8A388324B35B9, (uint64_t)"loglevel", &dword_1ED1ACCC0, qword_1E82923C0, 0x9F7452DD75D54D31);
  sub_1C96FEA64(a1, 0x78039475C6A50527uLL, (uint64_t)"config", (void (*)(uint64_t, unint64_t))sub_1C971F964, 0, 1);
  return a1;
}

void sub_1C971F3C4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_1C977F5E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C971F3D8(uint64_t a1, int a2, const char *a3, char *__s1)
{
  char *v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v11;
  int v12;
  unint64_t v13;
  int v14;
  int v16;
  uint64_t v17;
  int v18;
  char *v19;
  size_t v20;
  char *v21;
  size_t v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  char *v35;
  const char *v36;
  char *i;
  int v38;
  char v40;
  unint64_t v41;
  unsigned __int8 *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  const char *v47;
  char *v48;
  char *__stringp;
  char *v51;
  char v52;
  const char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE __dst[1024];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (!__s1)
    return 0;
  v5 = strdup(__s1);
  if (!v5)
    return 4294954392;
  v6 = v5;
  v7 = 0;
  __stringp = v5;
  v51 = 0;
  v48 = v5;
  v47 = a3;
  while (1)
  {
    v8 = strsep(&__stringp, "\r\n");
    v51 = v8;
    if (!v8)
    {
      v45 = 0;
      goto LABEL_86;
    }
    while (1)
    {
      v9 = *v8;
      if (v9 != 32 && v9 != 9)
        break;
      v51 = ++v8;
    }
    sub_1C977FB84(v8);
    v11 = v51;
    v12 = *v51;
    if (!*v51 || v12 == 35)
      goto LABEL_79;
    if (v12 == 45)
      break;
    __dst[0] = 0;
    v35 = strsep(&v51, ":");
    v36 = v35;
    if (!v35)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d: Parse error (expected <option> : <argument>)\n", a3, v7);
        syslog(27, "%s:%d: Parse error (expected <option> : <argument>)\n", a3, v7);
      }
      goto LABEL_92;
    }
    sub_1C977FB84(v35);
    for (i = v51; ; v51 = i)
    {
      v38 = *i;
      if (v38 != 32 && v38 != 9)
        break;
      ++i;
    }
    v40 = *v36;
    v41 = 0xCBF29CE484222325;
    if (*v36)
    {
      v42 = (unsigned __int8 *)(v36 + 1);
      do
      {
        v41 = 0x100000001B3 * (v41 ^ v40);
        v43 = *v42++;
        v40 = v43;
      }
      while (v43);
    }
    if (v41 <= 1)
      v44 = 1;
    else
      v44 = v41;
    v45 = sub_1C971D338(a1, v44, v36, i, 0xFFFFFFFFLL, (uint64_t)__dst);
    if ((_DWORD)v45)
      goto LABEL_86;
LABEL_79:
    ++v7;
  }
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0u;
  v13 = 1;
  v53 = a3;
  do
  {
    while (1)
    {
      v14 = *v11++;
      if (v14 != 32 && v14 != 9)
        break;
      v51 = v11;
    }
    (&v53)[v13] = strsep(&v51, " \t");
    v16 = v13 + 1;
    v11 = v51;
    if (v13 > 0x7E)
      break;
    ++v13;
  }
  while (v51);
  if (v51)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d: Too many options (max %d)\n", v47, v7, 128);
      syslog(27, "%s:%d: Too many options (max %d)\n", v47, v7, 128);
    }
LABEL_92:
    v45 = 4294954394;
    goto LABEL_86;
  }
  v17 = *(unsigned int *)(a1 + 32);
  if ((v17 & 0x80000000) != 0)
  {
LABEL_63:
    v6 = v48;
    a3 = v47;
    goto LABEL_79;
  }
  while (v16 < 2)
  {
LABEL_61:
    v34 = __OFSUB__((_DWORD)v17, 1);
    v17 = (v17 - 1);
    if ((int)v17 < 0 != v34)
      goto LABEL_63;
  }
  v18 = 1;
  while (2)
  {
    v52 = 0;
    v19 = (char *)(&v53)[v18];
    v20 = strlen(v19);
    if (!v20)
    {
LABEL_60:
      if (++v18 >= v16)
        goto LABEL_61;
      continue;
    }
    break;
  }
  if (*v19 != 45)
  {
    v45 = sub_1C971D338(a1, 0, 0, v19, v17, (uint64_t)&v52);
    if ((_DWORD)v45)
      goto LABEL_85;
    goto LABEL_60;
  }
  v21 = &v19[v20];
  v22 = v20 - 1;
  do
  {
    if (!v22)
    {
      v26 = strchr(v21, 61);
      if (!v26)
        goto LABEL_60;
LABEL_37:
      if ((unint64_t)(v26 - v21) >= 0x3FF)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "'%s' option too long!\n", v21);
          syslog(27, "'%s' option too long!\n", v21);
        }
        goto LABEL_60;
      }
      v19 = __dst;
      memcpy(__dst, v21, v26 - v21);
      __dst[v26 - v21] = 0;
      LOBYTE(v23) = __dst[0];
      if (!__dst[0])
        goto LABEL_60;
      v27 = v26 + 1;
      v28 = 1;
      goto LABEL_47;
    }
    v24 = *++v19;
    v23 = v24;
    --v22;
  }
  while (v24 == 45);
  v25 = strchr(v19, 61);
  if (v25)
  {
    v26 = v25;
    v21 = v19;
    goto LABEL_37;
  }
  if (v18 + 1 >= v16)
    v27 = 0;
  else
    v27 = (char *)(&v53)[v18 + 1];
  v28 = 0;
  v29 = 0xCBF29CE484222325;
  if (v23)
  {
LABEL_47:
    v30 = 1;
    v29 = 0xCBF29CE484222325;
    do
    {
      v29 = 0x100000001B3 * (v29 ^ (char)v23);
      v23 = v19[v30++];
    }
    while (v23);
  }
  if (v29 <= 1)
    v31 = 1;
  else
    v31 = v29;
  v45 = sub_1C971D338(a1, v31, v19, v27, v17, (uint64_t)&v52);
  if (!(_DWORD)v45)
  {
    if (v52)
      v32 = v28;
    else
      v32 = 1;
    v18 += v32 ^ 1;
    if (v52)
      v33 = 0;
    else
      v33 = v28;
    if (v33 != 1)
      goto LABEL_60;
    if (dword_1ED1ACCC0 >= 6)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Option '%s' is invalid!\n", (&v53)[v18]);
    v45 = 4294954394;
  }
LABEL_85:
  v6 = v48;
LABEL_86:
  free(v6);
  return v45;
}

void sub_1C971F938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1C971F964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  char *p_p;
  uint64_t v12;
  void *__p;
  char v15;
  _QWORD v16[13];
  char v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[51];
  _QWORD v21[20];

  v4 = a4;
  v21[19] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if (*(_BYTE *)(a1 + 36))
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Config file within a config file not supported!\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Config file within a config file not supported!\n");
      }
      return 4294954394;
    }
    else
    {
      *(_BYTE *)(a1 + 36) = 1;
      sub_1C97518F4(v19);
      if (v20[15])
      {
        sub_1C972D15C((uint64_t)v16);
        std::ostream::operator<<();
        std::stringbuf::str();
        v6 = 0xCBF29CE484222325;
        v7 = *(_BYTE *)v4;
        if (*(_BYTE *)v4)
        {
          v8 = (unsigned __int8 *)(v4 + 1);
          do
          {
            v6 = 0x100000001B3 * (v6 ^ v7);
            v9 = *v8++;
            v7 = v9;
          }
          while (v9);
        }
        if (v6 <= 1)
          v10 = 1;
        else
          v10 = v6;
        if (v15 >= 0)
          p_p = (char *)&__p;
        else
          p_p = (char *)__p;
        v4 = sub_1C971F3D8(a1, v10, (const char *)v4, p_p);
        if (v15 < 0)
          operator delete(__p);
        v16[0] = *MEMORY[0x1E0DE4F50];
        v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
        v16[2] = v12;
        v16[3] = MEMORY[0x1E0DE4FB8] + 16;
        if (v17 < 0)
          operator delete((void *)v16[11]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1CAA43B3C](&v18);
      }
      else
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open config file '%s'\n", (const char *)v4);
          syslog(27, "Unable to open config file '%s'\n", (const char *)v4);
        }
        v4 = 4294954394;
      }
      v19[0] = *MEMORY[0x1E0DE4F40];
      *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1CAA43A04](v20);
      std::istream::~istream();
      MEMORY[0x1CAA43B3C](v21);
    }
  }
  return v4;
}

void sub_1C971FBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_1C97519FC(&a51);
  _Unwind_Resume(a1);
}

void sub_1C971FC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a1 + 2408))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Callback already set and can't be changed!\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Callback already set and can't be changed!\n");
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2408) = a2;
    *(_QWORD *)(a1 + 2416) = a3;
  }
}

uint64_t sub_1C971FC78(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t *v3;
  __int128 v4;
  uint64_t result;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned __int8 **v13;

  v3 = (uint64_t *)(a1 + 184);
  v2 = *(_QWORD *)(a1 + 184);
  v4 = *a2;
  *(_QWORD *)(a1 + 2552) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 2536) = v4;
  if (v2)
    return 0;
  v7 = (unsigned __int8 **)(a1 + 1920);
  v8 = (unsigned __int8 **)(a1 + 624);
  v9 = -1;
  while (1)
  {
    v10 = *v8;
    if (*v8)
    {
      if (*((_DWORD *)v10 + 51) - (*((_DWORD *)v10 + 533) + *((_DWORD *)v10 + 534)) == *(_DWORD *)(a1 + 2552)
        && *((_DWORD *)v10 + 52) - (*((_DWORD *)v10 + 535) + *((_DWORD *)v10 + 536)) == *(_DWORD *)(a1 + 2556))
      {
        break;
      }
    }
    if (v9 < 0 && v10 != 0)
      v9 = v2;
    ++v2;
    v8 += 2;
    if (v2 == 16)
    {
      v12 = 0;
      goto LABEL_15;
    }
  }
  result = sub_1C96FE08C(v8, v3 + 294, v3);
  if ((_DWORD)result)
    return result;
  v12 = *v3;
  if (*v3)
    goto LABEL_23;
LABEL_15:
  if ((v9 & 0x80000000) == 0)
  {
    if (dword_1ED1ACCC0 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Didn't find an SPS matching dimensions %dx%d, using SPS %d\n", *(_DWORD *)(a1 + 2552), *(_DWORD *)(a1 + 2556), v9);
      syslog(28, "Didn't find an SPS matching dimensions %dx%d, using SPS %d\n", *(_DWORD *)(a1 + 2552), *(_DWORD *)(a1 + 2556), v9);
    }
    if (v9 <= 0xF)
      v13 = (unsigned __int8 **)(a1 + 16 * v9 + 624);
    else
      v13 = v7;
    result = sub_1C96FE08C(v13, v3 + 294, v3);
    if ((_DWORD)result)
      return result;
    v12 = *v3;
  }
LABEL_23:
  if (v12 || !*(_QWORD *)(a1 + 2544))
    return 0;
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("No SPS found in hvcC!\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "No SPS found in hvcC!\n");
  }
  return 4294954387;
}

int16x8_t sub_1C971FE38(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  int16x8_t v7;
  char v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t result;
  int16x8_t *v17;
  int16x8_t *v18;
  int16x8_t *v19;
  int16x8_t *v20;
  int16x8_t *v21;
  int16x8_t *v22;
  int16x8_t *v23;
  _OWORD v24[2];
  uint64_t v25;

  v4 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v24[0] = *a2;
  v24[1] = v5;
  v6 = 1;
  do
  {
    v7 = (int16x8_t)v24[v4];
    v8 = v6;
    v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    v12 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    v13 = vdupq_laneq_s16(v7, 4);
    v14 = vdupq_laneq_s16(v7, 5);
    v15 = vdupq_laneq_s16(v7, 6);
    result = vdupq_laneq_s16(v7, 7);
    *a4 = v9;
    a4[1] = v9;
    v17 = (int16x8_t *)((char *)a4 + a3);
    *v17 = v10;
    v17[1] = v10;
    v18 = (int16x8_t *)((char *)a4 + a3 + a3);
    *v18 = v11;
    v18[1] = v11;
    v19 = (int16x8_t *)((char *)v18 + a3);
    *v19 = v12;
    v19[1] = v12;
    v20 = (int16x8_t *)((char *)v19 + a3);
    *v20 = v13;
    v20[1] = v13;
    v21 = (int16x8_t *)((char *)v20 + a3);
    *v21 = v14;
    v21[1] = v14;
    v22 = (int16x8_t *)((char *)v21 + a3);
    *v22 = v15;
    v22[1] = v15;
    v23 = (int16x8_t *)((char *)v22 + a3);
    *v23 = result;
    v23[1] = result;
    a4 = (int16x8_t *)((char *)v23 + a3);
    v4 = 1;
    v6 = 0;
  }
  while ((v8 & 1) != 0);
  return result;
}

void sub_1C971FF04()
{
  unint64_t v0;
  uint64_t (**v1)();
  uint64_t (*v2)();

  v0 = atomic_load(&qword_1ED1ACCF0);
  if (v0 != -1)
  {
    v1 = &v2;
    v2 = sub_1C977F428;
    std::__call_once(&qword_1ED1ACCF0, &v1, (void (__cdecl *)(void *))sub_1C977F514);
  }
}

int8x16_t *sub_1C971FF58(int8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v23;
  int v25;
  int8x16_t v26;
  const __int16 *v27;
  int8x16_t v29;
  uint8x16_t v31;
  uint8x16_t v32;

  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E5084((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const __int16 *)(a6 - 2);
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = (const __int16 *)a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *(_WORD *)a5 = result->i16[7];
    a6 = (unsigned __int8 *)result;
    result = (int8x16_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v13 + 1)] = *(__int16 *)((char *)&result->i16[7] + (int)(v13 + 1) * a2);
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 16;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 1;
  v23 = *result;
  __asm { PRFM            #0, [X10] }
  v25 = v13 + 2;
  v26 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1C9862AF0));
  v27 = (const __int16 *)a5;
  do
  {
    _X12 = (uint64_t)result[1].i64 + a2;
    v29 = *(int8x16_t *)((char *)result + a2);
    __asm { PRFM            #0, [X12] }
    v7.i16[0] = *(__int16 *)((char *)result->i16 + a2 + ((8 * a4) & 0x10));
    v31 = (uint8x16_t)vextq_s8(v11, v16, 0xEuLL);
    v32 = (uint8x16_t)vextq_s8(v29, v7, 2uLL);
    v7 = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v23, v31), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00);
    *result = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v23, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(v7, (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v23)), (int8x16_t)vcgtq_u8((uint8x16_t)v23, v32)), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v23)))), v23);
    v11 = (int8x16_t)vld1q_dup_s16(v27++);
    --v25;
    v16 = v23;
    *(_WORD *)a5 = v23.i16[7];
    v23 = v29;
    a5 = (char *)v27;
    result = (int8x16_t *)((char *)result + a2);
  }
  while (v25 > 1);
  return result;
}

uint8x16_t *sub_1C97200B4(uint8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x16_t *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v19;
  int v21;
  uint8x16_t v23;
  int8x16_t v25;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result->i16[7] + (v9 + 1) * a2);
  v11 = *a6;
  _X5 = a6 + 1;
  v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  v19 = *result;
  __asm { PRFM            #0, [X9] }
  v21 = v9 + 2;
  do
  {
    _X10 = (uint64_t)result[1].i64 + a2;
    v23 = *(uint8x16_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v19.i16[7];
    v25 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v19, v12), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v12, v19)), (int8x16_t)vcgtq_u8(v19, v23)), (int8x16_t)vcgtq_u8(v23, v19)));
    v12 = v19;
    *result = vsqaddq_u8(v19, v25);
    --v21;
    v19 = v23;
    result = (uint8x16_t *)((char *)result + a2);
  }
  while (v21 > 1);
  return result;
}

uint8x16_t *sub_1C972017C(uint8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x16_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  int8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  uint8x16_t v36;
  int8x16_t v37;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result[3].i16[7] + (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  v12 = _X5[2];
  v13 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v19 = *result;
  v20 = result[1];
  v21 = result[2];
  v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v24 = v9 + 2;
  do
  {
    v25 = v19;
    v26 = v20;
    v27 = v21;
    v28 = v22;
    _X9 = (uint64_t)result->i64 + a2;
    v19 = *(uint8x16_t *)((char *)result + a2);
    v20 = *(uint8x16_t *)((char *)&result[1] + a2);
    v21 = *(uint8x16_t *)((char *)&result[2] + a2);
    v22 = *(uint8x16_t *)((char *)&result[3] + a2);
    __asm { PRFM            #0, [X9,#0x40] }
    *a5++ = v28.i16[7];
    v31 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v25, v11), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v11, v25)), (int8x16_t)vcgtq_u8(v25, v19)), (int8x16_t)vcgtq_u8(v19, v25)));
    v11 = v25;
    v32 = vsqaddq_u8(v25, v31);
    v33 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v26, v10), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v10, v26)), (int8x16_t)vcgtq_u8(v26, v20)), (int8x16_t)vcgtq_u8(v20, v26)));
    v10 = v26;
    v34 = vsqaddq_u8(v26, v33);
    v35 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v27, v12), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v12, v27)), (int8x16_t)vcgtq_u8(v27, v21)), (int8x16_t)vcgtq_u8(v21, v27)));
    v12 = v27;
    v36 = vsqaddq_u8(v27, v35);
    v37 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v28, v13), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v13, v28)), (int8x16_t)vcgtq_u8(v28, v22)), (int8x16_t)vcgtq_u8(v22, v28)));
    v13 = v28;
    *result = v32;
    result[1] = v34;
    result[2] = v36;
    result[3] = vsqaddq_u8(v28, v37);
    --v24;
    result = (uint8x16_t *)((char *)result + a2);
  }
  while (v24 > 1);
  return result;
}

uint64_t sub_1C97202DC(uint64_t result, _QWORD *a2, int a3, int16x8_t *a4, unsigned int a5)
{
  int16x8_t v5;
  _OWORD *v6;
  uint8x16_t *v7;
  _OWORD *v8;
  uint8x16_t *v9;
  _OWORD *v10;
  uint8x16_t *v11;
  _OWORD *v12;
  uint8x16_t *v13;
  int16x8_t v14;
  _OWORD *v15;
  uint8x16_t v16;
  uint8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  _OWORD *v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  _OWORD *v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int16x8_t v28;
  int16x8_t v29;
  _OWORD *v30;
  uint8x16_t v31;
  uint8x16_t v32;
  BOOL v33;
  uint8x16_t v34;
  uint8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  uint8x16_t v76;
  uint8x16_t v77;

  v5 = *a4;
  v6 = (_OWORD *)*a2;
  v7 = (uint8x16_t *)a2[1];
  v8 = (_OWORD *)a2[2];
  v9 = (uint8x16_t *)a2[3];
  v10 = (_OWORD *)a2[4];
  v11 = (uint8x16_t *)a2[5];
  v12 = (_OWORD *)a2[6];
  v13 = (uint8x16_t *)a2[7];
  v14 = vnegq_s16(vdupq_n_s16(a5));
  if ((a3 & 0x10000) != 0)
  {
    a3 -= 16;
    v16 = *(uint8x16_t *)v6;
    v15 = v6 + 1;
    v17 = *(uint8x16_t *)v15;
    v6 = v15 + 1;
    v18 = vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v16.i8), v5.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v17.i8), *(int16x4_t *)v5.i8, 1);
    v19 = vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v16), v5.i16[0]), (int16x8_t)vmovl_high_u8(v17), *(int16x4_t *)v5.i8, 1);
    v21 = *(uint8x16_t *)v8;
    v20 = v8 + 1;
    v22 = *(uint8x16_t *)v20;
    v8 = v20 + 1;
    v23 = vmlaq_lane_s16(vmlaq_lane_s16(v18, (int16x8_t)vmovl_u8(*(uint8x8_t *)v21.i8), *(int16x4_t *)v5.i8, 2), (int16x8_t)vmovl_u8(*(uint8x8_t *)v22.i8), *(int16x4_t *)v5.i8, 3);
    v24 = vmlaq_lane_s16(vmlaq_lane_s16(v19, (int16x8_t)vmovl_high_u8(v21), *(int16x4_t *)v5.i8, 2), (int16x8_t)vmovl_high_u8(v22), *(int16x4_t *)v5.i8, 3);
    v26 = *(uint8x16_t *)v10;
    v25 = v10 + 1;
    v27 = *(uint8x16_t *)v25;
    v10 = v25 + 1;
    v28 = vmlaq_laneq_s16(vmlaq_laneq_s16(v23, (int16x8_t)vmovl_u8(*(uint8x8_t *)v26.i8), v5, 4), (int16x8_t)vmovl_u8(*(uint8x8_t *)v27.i8), v5, 5);
    v29 = vmlaq_laneq_s16(vmlaq_laneq_s16(v24, (int16x8_t)vmovl_high_u8(v26), v5, 4), (int16x8_t)vmovl_high_u8(v27), v5, 5);
    v31 = *(uint8x16_t *)v12;
    v30 = v12 + 1;
    v32 = *(uint8x16_t *)v30;
    v12 = v30 + 1;
    *(int8x8_t *)result = vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v28, (int16x8_t)vmovl_u8(*(uint8x8_t *)v31.i8), v5, 6), (int16x8_t)vmovl_u8(*(uint8x8_t *)v32.i8), v5, 7), v14));
    *(int8x8_t *)(result + 8) = vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v29, (int16x8_t)vmovl_high_u8(v31), v5, 6), (int16x8_t)vmovl_high_u8(v32), v5, 7), v14));
    result += 16;
  }
  do
  {
    v33 = __OFSUB__(a3, 32);
    a3 -= 32;
    v34 = *(uint8x16_t *)v6;
    v35 = *((uint8x16_t *)v6 + 1);
    v6 += 2;
    v36 = vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v34.i8), v5.i16[0]);
    v37 = vmulq_n_s16((int16x8_t)vmovl_high_u8(v34), v5.i16[0]);
    v38 = vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v35.i8), v5.i16[0]);
    v39 = vmulq_n_s16((int16x8_t)vmovl_high_u8(v35), v5.i16[0]);
    v40 = *v7;
    v41 = v7[1];
    v7 += 2;
    v42 = vmlaq_lane_s16(v36, (int16x8_t)vmovl_u8(*(uint8x8_t *)v40.i8), *(int16x4_t *)v5.i8, 1);
    v43 = vmlaq_lane_s16(v37, (int16x8_t)vmovl_high_u8(v40), *(int16x4_t *)v5.i8, 1);
    v44 = vmlaq_lane_s16(v38, (int16x8_t)vmovl_u8(*(uint8x8_t *)v41.i8), *(int16x4_t *)v5.i8, 1);
    v45 = vmlaq_lane_s16(v39, (int16x8_t)vmovl_high_u8(v41), *(int16x4_t *)v5.i8, 1);
    v46 = *(uint8x16_t *)v8;
    v47 = *((uint8x16_t *)v8 + 1);
    v8 += 2;
    v48 = vmlaq_lane_s16(v42, (int16x8_t)vmovl_u8(*(uint8x8_t *)v46.i8), *(int16x4_t *)v5.i8, 2);
    v49 = vmlaq_lane_s16(v43, (int16x8_t)vmovl_high_u8(v46), *(int16x4_t *)v5.i8, 2);
    v50 = vmlaq_lane_s16(v44, (int16x8_t)vmovl_u8(*(uint8x8_t *)v47.i8), *(int16x4_t *)v5.i8, 2);
    v51 = vmlaq_lane_s16(v45, (int16x8_t)vmovl_high_u8(v47), *(int16x4_t *)v5.i8, 2);
    v52 = *v9;
    v53 = v9[1];
    v9 += 2;
    v54 = vmlaq_lane_s16(v48, (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8), *(int16x4_t *)v5.i8, 3);
    v55 = vmlaq_lane_s16(v49, (int16x8_t)vmovl_high_u8(v52), *(int16x4_t *)v5.i8, 3);
    v56 = vmlaq_lane_s16(v50, (int16x8_t)vmovl_u8(*(uint8x8_t *)v53.i8), *(int16x4_t *)v5.i8, 3);
    v57 = vmlaq_lane_s16(v51, (int16x8_t)vmovl_high_u8(v53), *(int16x4_t *)v5.i8, 3);
    v58 = *(uint8x16_t *)v10;
    v59 = *((uint8x16_t *)v10 + 1);
    v10 += 2;
    v60 = vmlaq_laneq_s16(v54, (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8), v5, 4);
    v61 = vmlaq_laneq_s16(v55, (int16x8_t)vmovl_high_u8(v58), v5, 4);
    v62 = vmlaq_laneq_s16(v56, (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8), v5, 4);
    v63 = vmlaq_laneq_s16(v57, (int16x8_t)vmovl_high_u8(v59), v5, 4);
    v64 = *v11;
    v65 = v11[1];
    v11 += 2;
    v66 = vmlaq_laneq_s16(v60, (int16x8_t)vmovl_u8(*(uint8x8_t *)v64.i8), v5, 5);
    v67 = vmlaq_laneq_s16(v61, (int16x8_t)vmovl_high_u8(v64), v5, 5);
    v68 = vmlaq_laneq_s16(v62, (int16x8_t)vmovl_u8(*(uint8x8_t *)v65.i8), v5, 5);
    v69 = vmlaq_laneq_s16(v63, (int16x8_t)vmovl_high_u8(v65), v5, 5);
    v70 = *(uint8x16_t *)v12;
    v71 = *((uint8x16_t *)v12 + 1);
    v12 += 2;
    v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v70.i8);
    v73 = (int16x8_t)vmovl_high_u8(v70);
    v74 = vmlaq_laneq_s16(v68, (int16x8_t)vmovl_u8(*(uint8x8_t *)v71.i8), v5, 6);
    v75 = vmlaq_laneq_s16(v69, (int16x8_t)vmovl_high_u8(v71), v5, 6);
    v76 = *v13;
    v77 = v13[1];
    v13 += 2;
    *(int8x16_t *)result = vqmovun_high_s16(vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v66, v72, v5, 6), (int16x8_t)vmovl_u8(*(uint8x8_t *)v76.i8), v5, 7), v14)), vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v67, v73, v5, 6), (int16x8_t)vmovl_high_u8(v76), v5, 7), v14));
    *(int8x16_t *)(result + 16) = vqmovun_high_s16(vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(v74, (int16x8_t)vmovl_u8(*(uint8x8_t *)v77.i8), v5, 7), v14)), vrshlq_s16(vmlaq_laneq_s16(v75, (int16x8_t)vmovl_high_u8(v77), v5, 7), v14));
    result += 32;
  }
  while (!((a3 < 0) ^ v33 | (a3 == 0)));
  return result;
}

int8x8_t *sub_1C9720510(int8x8_t *result, uint64_t a2, int a3, uint64_t a4, unsigned __int16 *a5, _BYTE *a6, unsigned int a7)
{
  int16x8_t v7;
  unsigned __int16 *v8;
  unsigned __int16 v9;
  uint8x8_t *v10;
  BOOL v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint8x8_t *v20;
  uint8x8_t v21;
  uint8x8_t *v22;
  uint8x8_t v23;
  uint8x8_t *v24;
  uint8x8_t v25;
  uint8x8_t *v26;
  uint8x8_t v27;
  _BYTE *v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint8x8_t *v40;
  uint8x8_t v41;
  uint8x8_t *v42;
  uint8x8_t v43;
  uint8x8_t *v44;
  uint8x8_t v45;
  uint8x8_t v46;

  v7 = vnegq_s16(vdupq_n_s16(a7));
  v9 = *a5;
  v8 = a5 + 1;
  v10 = (uint8x8_t *)(a2 - 3 + v9);
  do
  {
    v11 = __OFSUB__(a3, 8);
    a3 -= 8;
    v14 = *v8;
    v12 = v8 + 1;
    v13 = v14;
    v16 = *v12++;
    v15 = v16;
    v18 = *v12++;
    v17 = v18;
    v19 = *v12++;
    v21 = *v10;
    v20 = (uint8x8_t *)((char *)v10 + v13);
    v23 = *v20;
    v22 = (uint8x8_t *)((char *)v20 + v15);
    v25 = *v22;
    v24 = (uint8x8_t *)((char *)v22 + v17);
    v27 = *v24;
    v26 = (uint8x8_t *)((char *)v24 + v19);
    LOBYTE(v19) = *a6;
    v28 = a6 + 1;
    LOBYTE(v13) = v19;
    LOBYTE(v19) = *v28++;
    LOBYTE(v15) = v19;
    LOBYTE(v19) = *v28++;
    LOBYTE(v17) = v19;
    LOBYTE(v19) = *v28++;
    v29 = vmulq_s16((int16x8_t)vmovl_u8(v21), *(int16x8_t *)(a4 + v13));
    v30 = vmulq_s16((int16x8_t)vmovl_u8(v23), *(int16x8_t *)(a4 + v15));
    v31 = vmulq_s16((int16x8_t)vmovl_u8(v25), *(int16x8_t *)(a4 + v17));
    v32 = vmulq_s16((int16x8_t)vmovl_u8(v27), *(int16x8_t *)(a4 + v19));
    v34 = *v12++;
    v33 = v34;
    v36 = *v12++;
    v35 = v36;
    v38 = *v12++;
    v37 = v38;
    v39 = *v12;
    v8 = v12 + 1;
    v41 = *v26;
    v40 = (uint8x8_t *)((char *)v26 + v33);
    v43 = *v40;
    v42 = (uint8x8_t *)((char *)v40 + v35);
    v45 = *v42;
    v44 = (uint8x8_t *)((char *)v42 + v37);
    v46 = *v44;
    v10 = (uint8x8_t *)((char *)v44 + v39);
    LOBYTE(v39) = *v28++;
    LOBYTE(v33) = v39;
    LOBYTE(v39) = *v28++;
    LOBYTE(v35) = v39;
    LOBYTE(v39) = *v28++;
    LOBYTE(v37) = v39;
    LOBYTE(v39) = *v28;
    a6 = v28 + 1;
    *result++ = vqmovun_s16(vrshlq_s16(vpaddq_s16(vpaddq_s16(vpaddq_s16(v29, v30), vpaddq_s16(v31, v32)), vpaddq_s16(vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(v41), *(int16x8_t *)(a4 + v33)), vmulq_s16((int16x8_t)vmovl_u8(v43), *(int16x8_t *)(a4 + v35))), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(v45), *(int16x8_t *)(a4 + v37)), vmulq_s16((int16x8_t)vmovl_u8(v46), *(int16x8_t *)(a4 + v39))))), v7));
  }
  while (!((a3 < 0) ^ v11 | (a3 == 0)));
  return result;
}

int8x8_t *sub_1C9720644(int8x8_t *result, uint64_t a2, int a3, uint64_t a4, unsigned __int16 *a5, _BYTE *a6, unsigned int a7)
{
  int16x8_t v7;
  unsigned __int16 *v8;
  unsigned __int16 v9;
  const char *v10;
  BOOL v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  const char *v22;
  const char *v23;
  _BYTE *v24;
  int8x8x2_t v25;
  int8x8x2_t v26;
  int8x8x2_t v27;
  int8x8x2_t v28;

  v7 = vnegq_s16(vdupq_n_s16(a7));
  v9 = *a5;
  v8 = a5 + 1;
  v10 = (const char *)(a2 - 6 + v9);
  do
  {
    v11 = __OFSUB__(a3, 8);
    a3 -= 8;
    v14 = *v8;
    v12 = v8 + 1;
    v13 = v14;
    v16 = *v12++;
    v15 = v16;
    v18 = *v12++;
    v17 = v18;
    v20 = *v12;
    v8 = v12 + 1;
    v19 = v20;
    v25 = vld2_s8(v10);
    v21 = &v10[v13];
    v26 = vld2_s8(v21);
    v22 = &v21[v15];
    v27 = vld2_s8(v22);
    v23 = &v22[v17];
    v28 = vld2_s8(v23);
    v10 = &v23[v19];
    LOBYTE(v20) = *a6;
    v24 = a6 + 1;
    LOBYTE(v13) = v20;
    LOBYTE(v20) = *v24++;
    LOBYTE(v15) = v20;
    LOBYTE(v20) = *v24++;
    LOBYTE(v17) = v20;
    LOBYTE(v20) = *v24;
    a6 = v24 + 1;
    *result++ = vqmovun_s16(vrshlq_s16(vpaddq_s16(vpaddq_s16(vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v25.val[0]), *(int16x8_t *)(a4 + v13)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v25.val[1]), *(int16x8_t *)(a4 + v13))), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v26.val[0]), *(int16x8_t *)(a4 + v15)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v26.val[1]), *(int16x8_t *)(a4 + v15)))), vpaddq_s16(vpaddq_s16(
                          vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[0]), *(int16x8_t *)(a4 + v17)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[1]), *(int16x8_t *)(a4 + v17))), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v28.val[0]), *(int16x8_t *)(a4 + v20)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v28.val[1]), *(int16x8_t *)(a4 + v20))))), v7));
  }
  while (!((a3 < 0) ^ v11 | (a3 == 0)));
  return result;
}

uint64_t sub_1C9720728(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t DerivedStorage;
  std::mutex *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;

  VTVideoDecoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v6);
  v7 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if ((v7 & 1) != 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Session was invalidated");
    }
    v8 = 4294954393;
  }
  else
  {
    *(_QWORD *)DerivedStorage = a2;
    v8 = sub_1C971C8F0(DerivedStorage, a3);
    if ((_DWORD)v8)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Invalid/unsupported format\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Invalid/unsupported format\n");
      }
    }
    else
    {
      v9 = *(_QWORD *)(DerivedStorage + 32);
      *(_DWORD *)(v9 + 192) = *(unsigned __int8 *)(*(_QWORD *)(DerivedStorage + 24) + 29) + 1;
      sub_1C971FC0C(v9, (uint64_t)sub_1C9720DE4, DerivedStorage);
      v8 = 0;
    }
  }
  std::mutex::unlock(v6);
  return v8;
}

void sub_1C9720848(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9720860(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, char a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  std::mutex *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  uint64_t v13;
  char v15;

  VTVideoDecoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v10 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v10);
  v11 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if ((v11 & 1) != 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Session was invalidated");
    }
    v13 = 4294954393;
  }
  else
  {
    v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x1020040089D864DuLL);
    *v12 = a2;
    sub_1C96FF0EC(DerivedStorage, (uint64_t)v12, a3, a4, a5, &v15);
    if (!v15)
    {
      sub_1C97176A8((uint64_t)v12);
      VTDecoderSessionEmitDecodedFrame();
    }
    v13 = 0;
  }
  std::mutex::unlock(v10);
  return v13;
}

void sub_1C972099C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97209B8(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage;
  std::mutex *v4;
  unsigned __int8 v5;
  const opaqueCMFormatDescription *v6;
  CMVideoDimensions Dimensions;
  const __CFDictionary *Extension;
  CFTypeID TypeID;
  const __CFData *Value;
  unsigned int *BytePtr;
  CFIndex Length;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _QWORD v21[2];
  char v22;
  _BYTE v23[11];
  __int16 v24;
  void *__p[2];
  __int128 v26;
  void *v27[8];

  VTVideoDecoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v4);
  v5 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if ((v5 & 1) != 0)
    goto LABEL_31;
  v6 = *(const opaqueCMFormatDescription **)(DerivedStorage + 16);
  if (!v6)
    goto LABEL_31;
  Dimensions = CMVideoFormatDescriptionGetDimensions(v6);
  if (Dimensions != CMVideoFormatDescriptionGetDimensions(a2))
    goto LABEL_31;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a2, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (Extension && (TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(Extension)))
  {
    Value = (const __CFData *)CFDictionaryGetValue(Extension, CFSTR("hvcC"));
    if (!Value)
      Value = (const __CFData *)CFDictionaryGetValue(Extension, CFSTR("ftvH"));
  }
  else
  {
    Value = 0;
  }
  memset(v27, 0, 24);
  memset(&v27[4], 0, 24);
  BytePtr = (unsigned int *)CFDataGetBytePtr(Value);
  Length = CFDataGetLength(Value);
  v13 = sub_1C971B944((uint64_t)v27, BytePtr, Length);
  if (v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    *(_QWORD *)v23 = 0x1000000;
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    *(_DWORD *)&v23[7] = 0;
    v24 = 3;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v17 = sub_1C971C308((uint64_t)v21, (uint64_t)v27);
    v13 = v17;
    if (v17)
      v14 = 0;
    else
      v14 = v23[3];
    if (v17)
      v15 = 0;
    else
      v15 = v23[4];
    if (v17)
      v16 = 0;
    else
      v16 = v23[5];
    if (__p[0])
      operator delete(__p[0]);
  }
  if (v27[0])
    operator delete(v27[0]);
  if (v13)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("CanAcceptFormatDescription: Error parsing new FormatDescription\n", 0x40uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "CanAcceptFormatDescription: Error parsing new FormatDescription\n");
    }
    goto LABEL_31;
  }
  v18 = *(unsigned __int8 **)(DerivedStorage + 24);
  if (v14 != v18[21] || v15 != v18[22] || v16 != v18[23])
  {
LABEL_31:
    v19 = 0;
    goto LABEL_32;
  }
  v19 = 1;
LABEL_32:
  std::mutex::unlock(v4);
  return v19;
}

void sub_1C9720BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::mutex *v17;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void sub_1C9720C18()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *values[11];
  void *keys[12];

  keys[11] = *(void **)MEMORY[0x1E0C80C00];
  memset(&keys[8], 0, 24);
  memset(&values[8], 0, 24);
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    v3 = (void *)*MEMORY[0x1E0CED3A8];
    keys[0] = *(void **)MEMORY[0x1E0CED3C8];
    keys[1] = v3;
    values[0] = v1;
    values[1] = v1;
    v4 = (void *)*MEMORY[0x1E0CED3E0];
    keys[2] = CFSTR("NegotiationDetails");
    keys[3] = v4;
    values[2] = v1;
    values[3] = v1;
    v5 = (void *)*MEMORY[0x1E0CED388];
    keys[4] = *(void **)MEMORY[0x1E0CED2D8];
    keys[5] = v5;
    values[4] = v1;
    values[5] = v1;
    v6 = (void *)*MEMORY[0x1E0CED300];
    keys[6] = *(void **)MEMORY[0x1E0CED3B0];
    keys[7] = v6;
    values[6] = v1;
    values[7] = v1;
    qword_1ED1ACCE0 = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!qword_1ED1ACCE0 && dword_1ED1ACCC0 >= 3)
    {
      fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "CFDictionaryCreate failed");
    }
    CFRelease(v2);
  }
  else if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "CFDictionaryCreate failed");
  }
}

void sub_1C9720DE4(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  __CVBuffer *v7;
  CVPixelBufferLockFlags v8;
  __CVBuffer *v9;
  uint64_t v10;
  __CVPixelBufferPool *PixelBufferPool;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
  {
    v6 = *a4;
    if (*a4)
    {
      if (*(_BYTE *)(v6 + 45))
      {
        v7 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 24))(*a4);
        if (v7)
        {
          if (*(_BYTE *)(v6 + 1173))
          {
            v8 = *(unsigned int *)(v6 + 1184);
            if ((v8 & 1) == 0)
            {
              v9 = *(__CVBuffer **)(v6 + 1176);
              if (v9)
              {
                CVPixelBufferUnlockBaseAddress(v9, v8);
                v10 = *(unsigned int *)(v6 + 1184);
                *(_DWORD *)(v6 + 1184) = v10 | 1;
                CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v6 + 1176), v10 | 1);
              }
            }
          }
          else
          {
            PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
            if (PixelBufferPool)
            {
              if (!CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, (CVPixelBufferRef *)&cf))
              {
                sub_1C97DC950(*(void (***)(uint64_t))(a1 + 1064), v7, (__CVBuffer *)cf, 0);
                CVBufferPropagateAttachments(v7, (CVBufferRef)cf);
                *(_DWORD *)(a2 + 8) |= 4u;
              }
            }
            else if (dword_1ED1ACCC0 >= 3)
            {
              fwrite("Unable to get CVPixelBufferPool from VideoToolbox\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(27, "Unable to get CVPixelBufferPool from VideoToolbox\n");
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + 8) |= 2u;
      }
    }
  }
  VTDecoderSessionEmitDecodedFrame();
  sub_1C97176A8(a2);
  if (cf)
    CFRelease(cf);
}

uint64_t sub_1C9720F7C()
{
  uint64_t DerivedStorage;
  unsigned __int8 v1;
  _QWORD *v2;
  std::mutex *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)DerivedStorage;
    atomic_store(1u, (unsigned __int8 *)(DerivedStorage + 1080));
    v3 = *(std::mutex **)(DerivedStorage + 1072);
    std::mutex::lock(v3);
    v4 = v2[4];
    if (v4)
    {
      v5 = sub_1C977EB64(v4);
      MEMORY[0x1CAA43B9C](v5, 0x10F2C4084AC0B2ELL);
    }
    v2[4] = 0;
    v6 = v2[133];
    if (v6)
      MEMORY[0x1CAA43B9C](v6, 0x1080C409C3078A8);
    v2[133] = 0;
    v7 = v2[3];
    if (v7)
    {
      v8 = *(void **)(v7 + 32);
      if (v8)
      {
        *(_QWORD *)(v7 + 40) = v8;
        operator delete(v8);
      }
      MEMORY[0x1CAA43B9C](v7, 0x1010C4086E593A5);
    }
    v2[3] = 0;
    *v2 = 0;
    FigFormatDescriptionRelease();
    v2[2] = 0;
    std::mutex::unlock(v3);
  }
  return 0;
}

void sub_1C9721058(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::mutex *sub_1C972106C()
{
  uint64_t DerivedStorage;
  std::mutex *result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sub_1C9720F7C();
  result = *(std::mutex **)(DerivedStorage + 1072);
  if (result)
  {
    std::mutex::~mutex(result);
    result = (std::mutex *)MEMORY[0x1CAA43B9C]();
  }
  *(_QWORD *)(DerivedStorage + 1072) = 0;
  return result;
}

__CFString *sub_1C97210BC(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<LRPVideoDecoder %p>"), a1);
  return Mutable;
}

uint64_t sub_1C9721110(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  std::mutex *v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v12;
  CFNumberRef *v13;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    v8 = DerivedStorage;
    v9 = *(std::mutex **)(DerivedStorage + 1072);
    std::mutex::lock(v9);
    v10 = atomic_load((unsigned __int8 *)(v8 + 1080));
    if ((v10 & 1) != 0)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Session was invalidated");
      }
      v11 = 4294954393;
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED3A8]))
    {
      valuePtr = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 312);
      v11 = 0;
      *a4 = CFNumberCreate(a3, kCFNumberSInt32Type, &valuePtr);
LABEL_19:
      std::mutex::unlock(v9);
      return v11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED388]))
    {
      v11 = 0;
      v12 = *(unsigned __int8 *)(v8 + 1060);
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED3B0]))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED300]))
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("unrecognised property key", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "unrecognised property key");
          }
          v11 = 4294954396;
          goto LABEL_19;
        }
        v11 = 0;
        v13 = (CFNumberRef *)MEMORY[0x1E0C9AE50];
        goto LABEL_18;
      }
      v11 = 0;
      v12 = *(unsigned __int8 *)(v8 + 1062);
    }
    if (v12)
      v13 = (CFNumberRef *)MEMORY[0x1E0C9AE50];
    else
      v13 = (CFNumberRef *)MEMORY[0x1E0C9AE40];
LABEL_18:
    *a4 = *v13;
    goto LABEL_19;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "No decoder, session was invalidated?\n");
  }
  return 4294954393;
}

void sub_1C9721324(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9721340(uint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  std::mutex *v7;
  unsigned __int8 v8;
  uint64_t v9;
  CFTypeID TypeID;
  CFTypeID v12;
  char *v13;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  const __CFNumber *Value;
  const __CFNumber *v18;
  FILE *v19;
  const char *v20;
  const char *v21;
  size_t v22;
  CFTypeID v23;
  CFTypeID v24;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    v6 = DerivedStorage;
    v7 = *(std::mutex **)(DerivedStorage + 1072);
    std::mutex::lock(v7);
    v8 = atomic_load((unsigned __int8 *)(v6 + 1080));
    if ((v8 & 1) != 0)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Session was invalidated");
      }
      v9 = 4294954393;
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED3C8]))
      goto LABEL_4;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED3A8]))
    {
      if (a3)
      {
        TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          valuePtr = 0;
          v12 = CFGetTypeID(a3);
          if (v12 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
            if (valuePtr >= 1)
              sub_1C977F014(*(_QWORD *)(v6 + 32), valuePtr);
          }
        }
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, CFSTR("NegotiationDetails")))
    {
      *(_BYTE *)(v6 + 40) = 0;
      v13 = (char *)(v6 + 40);
      if (a3)
      {
        v14 = CFStringGetTypeID();
        if (v14 == CFGetTypeID(a3))
        {
          CFStringGetCString(a3, v13, 1001, 0);
          v9 = 0;
          goto LABEL_11;
        }
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED3E0]))
    {
      if (a3)
      {
        v15 = CFNumberGetTypeID();
        if (v15 == CFGetTypeID(a3))
          sub_1C97217CC(a3, (void *)(v6 + 1044));
        goto LABEL_4;
      }
      if (dword_1ED1ACCC0 >= 3)
      {
        v19 = (FILE *)*MEMORY[0x1E0C80C10];
        v20 = "Invalid value of VideoResolutionAdaptationType";
        v21 = "Invalid value of VideoResolutionAdaptationType";
        v22 = 46;
LABEL_41:
        fwrite(v21, v22, 1uLL, v19);
        syslog(27, v20);
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED2D8]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED388]))
        {
          if (!a3)
            goto LABEL_4;
          v23 = CFBooleanGetTypeID();
          if (v23 != CFGetTypeID(a3))
            goto LABEL_4;
          *(_BYTE *)(v6 + 1060) = sub_1C9721824(a3);
          *(_BYTE *)(v6 + 1061) = 1;
        }
        else
        {
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED3B0]))
          {
            if (dword_1ED1ACCC0 >= 3)
            {
              fwrite("unrecognised property key", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(27, "unrecognised property key");
            }
            v9 = 4294954396;
            goto LABEL_11;
          }
          if (!a3)
            goto LABEL_4;
          v24 = CFBooleanGetTypeID();
          if (v24 != CFGetTypeID(a3))
            goto LABEL_4;
          *(_BYTE *)(v6 + 1062) = sub_1C9721824(a3);
        }
        sub_1C972186C(v6);
LABEL_4:
        v9 = 0;
LABEL_11:
        std::mutex::unlock(v7);
        return v9;
      }
      if (a3)
      {
        v16 = CFDictionaryGetTypeID();
        if (v16 != CFGetTypeID(a3))
          goto LABEL_4;
        Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CED440]);
        if (!Value)
        {
          if (dword_1ED1ACCC0 < 3)
            goto LABEL_42;
          v19 = (FILE *)*MEMORY[0x1E0C80C10];
          v20 = "Invalid value of kVTDecompressionResolutionKey_Width";
          v21 = "Invalid value of kVTDecompressionResolutionKey_Width";
          v22 = 52;
          goto LABEL_41;
        }
        CFNumberGetValue(Value, kCFNumberIntType, (void *)(v6 + 1048));
        v18 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CED438]);
        if (v18)
        {
          CFNumberGetValue(v18, kCFNumberIntType, (void *)(v6 + 1052));
          goto LABEL_4;
        }
        if (dword_1ED1ACCC0 >= 3)
        {
          v19 = (FILE *)*MEMORY[0x1E0C80C10];
          v20 = "Invalid value of kVTDecompressionResolutionKey_Height";
          v21 = "Invalid value of kVTDecompressionResolutionKey_Height";
          v22 = 53;
          goto LABEL_41;
        }
      }
      else if (dword_1ED1ACCC0 >= 3)
      {
        v19 = (FILE *)*MEMORY[0x1E0C80C10];
        v20 = "Invalid value of ActiveVideoResolution";
        v21 = "Invalid value of ActiveVideoResolution";
        v22 = 38;
        goto LABEL_41;
      }
    }
LABEL_42:
    v9 = 4294954394;
    goto LABEL_11;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "No decoder, session was invalidated?\n");
  }
  return 4294954393;
}

void sub_1C97217A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeID sub_1C97217CC(const void *a1, void *a2)
{
  CFTypeID v4;
  CFTypeID result;

  v4 = CFGetTypeID(a1);
  result = CFNumberGetTypeID();
  if (v4 == result)
    return CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2);
  return result;
}

BOOL sub_1C9721824(const void *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  return v2 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)a1) != 0;
}

uint64_t sub_1C972186C(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 1062))
  {
    *(_WORD *)(a1 + 1060) = 0;
    v1 = "background";
  }
  else if (*(_BYTE *)(a1 + 1060))
  {
    if (*(_BYTE *)(a1 + 1061))
      v1 = "high";
    else
      v1 = "medium";
  }
  else
  {
    v1 = "low";
  }
  v2 = *(_QWORD *)(a1 + 32) + 248;
  v4 = 0;
  return sub_1C971D338(v2, 0xF5B6EA8C35AC1E89, "priority", v1, 0xFFFFFFFFLL, (uint64_t)&v4);
}

void sub_1C97218FC()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  keys[0] = *(void **)MEMORY[0x1E0CEDCD8];
  values = (void *)*MEMORY[0x1E0C9AE40];
  v1 = CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  VTRegisterVideoDecoderWithInfo();
  if (v1)
    CFRelease(v1);
}

void sub_1C97219BC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *i;
  unint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  float *v23;
  float *v24;
  CFTypeID TypeID;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  CFTypeID v32;
  CFTypeID v33;
  CFTypeID v34;
  CFTypeID v35;
  CFTypeID v36;
  CFTypeID v37;
  CFTypeID v38;
  CFTypeID v39;
  CFTypeID v40;
  CFTypeID v41;
  CFTypeID v42;
  CFTypeID v43;
  CFTypeID v44;
  CFTypeID v45;
  CFTypeID v46;
  CFTypeID v47;
  CFTypeID v48;
  CFTypeID v49;
  CFTypeID v50;
  CFTypeID v51;
  CFTypeID v52;
  CFTypeID v53;
  CFTypeID v54;
  CFTypeID v55;
  CFTypeID v56;
  CFTypeID v57;
  CFTypeID v58;
  CFTypeID v59;
  CFTypeID v60;
  CFTypeID v61;
  CFTypeID v62;
  CFTypeID v63;
  CFTypeID v64;
  CFTypeID v65;
  CFTypeID v66;
  CFTypeID v67;
  CFTypeID v68;
  CFTypeID v69;
  CFTypeID v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  *(_WORD *)(a1 + 12) = 257;
  v3 = a1 + 12;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  v4 = a1 + 144;
  *(_WORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 40) = 0x403E000000000000;
  v5 = a1 + 40;
  *(_DWORD *)(a1 + 48) = 0x7FFFFFFF;
  v6 = a1 + 48;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 1196) = 3;
  *(_DWORD *)(a1 + 1220) = -1;
  *(_DWORD *)(a1 + 1296) = a2;
  *(_DWORD *)(a1 + 32) = -1082130432;
  v7 = a1 + 32;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_QWORD *)(a1 + 1344) = 0;
  v8 = (__int128 *)MEMORY[0x1E0CA2E68];
  v9 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)(a1 + 1352) = v9;
  v10 = *v8;
  *(_QWORD *)(a1 + 1392) = *((_QWORD *)v8 + 2);
  *(_OWORD *)(a1 + 1376) = v10;
  v11 = (char *)operator new(0x2B10uLL, MEMORY[0x1E0DE4E10]);
  if (!v11)
  {
    *(_QWORD *)(a1 + 1288) = 0;
    return;
  }
  v12 = v11;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)(v11 + 34) = -1;
  *((_WORD *)v11 + 19) = -1;
  v11[40] = 0;
  *((_WORD *)v11 + 16) = 0;
  *((_DWORD *)v11 + 12) = -1;
  v11[52] = -1;
  v11[100] = 0;
  *((_QWORD *)v11 + 21) = 0;
  *((_QWORD *)v11 + 22) = 0;
  *((_QWORD *)v11 + 24) = 0;
  *((_QWORD *)v11 + 25) = 0;
  *((_QWORD *)v11 + 26) = 0;
  *((_QWORD *)v11 + 34) = 0;
  v11[288] = 0;
  *((_QWORD *)v11 + 37) = 0;
  *((_QWORD *)v11 + 38) = 0;
  *((_QWORD *)v11 + 42) = 0;
  *((_QWORD *)v11 + 43) = 0;
  v13 = (uint64_t)(v11 + 360);
  *((_QWORD *)v11 + 44) = 0;
  sub_1C971F310((uint64_t)(v11 + 360));
  *((_QWORD *)v12 + 45) = &off_1E82916D0;
  *((_QWORD *)v12 + 1017) = 0;
  *((_DWORD *)v12 + 150) = 0;
  *((_DWORD *)v12 + 232) = 1000;
  v12[869] = 7;
  *(_OWORD *)(v12 + 7876) = 0u;
  *(_OWORD *)(v12 + 7892) = 0u;
  *(_OWORD *)(v12 + 7908) = 0u;
  *(_OWORD *)(v12 + 7924) = 0u;
  *(_OWORD *)(v12 + 7940) = 0u;
  *(_OWORD *)(v12 + 7956) = 0u;
  *(_OWORD *)(v12 + 7972) = 0u;
  *(_OWORD *)(v12 + 7988) = 0u;
  *(_OWORD *)(v12 + 8004) = 0u;
  *(_OWORD *)(v12 + 8020) = 0u;
  *(_OWORD *)(v12 + 8036) = 0u;
  *(_OWORD *)(v12 + 8052) = 0u;
  *(_OWORD *)(v12 + 8068) = 0u;
  *(_OWORD *)(v12 + 8084) = 0u;
  *(_OWORD *)(v12 + 8100) = 0u;
  *(_OWORD *)(v12 + 8116) = 0u;
  v12[952] = 0;
  bzero(v12 + 956, 0x1B00uLL);
  *((_QWORD *)v12 + 99) = 0;
  *((_QWORD *)v12 + 98) = 0;
  *((_DWORD *)v12 + 202) = 0;
  *((_QWORD *)v12 + 100) = 0;
  *((_QWORD *)v12 + 102) = 0;
  *(_QWORD *)(v12 + 828) = 0;
  *((_DWORD *)v12 + 209) = 0;
  sub_1C96FED58(v13, 0xAF63E54C8601FBD7, "h", v12 + 427, 0);
  sub_1C96FED58(v13, 0xA9918CC5FA26ABAuLL, "help", v12 + 427, 0);
  sub_1C971E1F4(v13, 0, 0, (_QWORD *)v12 + 50);
  sub_1C971E1F4(v13, 0xAF63E24C8601F6BELL, "o", (_QWORD *)v12 + 51);
  sub_1C971E1F4(v13, 0xAF63EF4C86020CD5, "r", (_QWORD *)v12 + 52);
  sub_1C971E1F4(v13, 0x75909A2E7B7A5950uLL, "negotiationdetails", (_QWORD *)v12 + 85);
  sub_1C96FED58(v13, 0x81988191775D1F3uLL, "md5", v12 + 424, 0);
  sub_1C96FED58(v13, 0x7E8D690E31D04174uLL, "psnr", v12 + 425, 0);
  sub_1C96FED58(v13, 0x4B67B014335F38D7uLL, "quiet", v12 + 426, 0);
  sub_1C96FED58(v13, 0x35CA209DCAF9161DuLL, "verbose", v12 + 428, 0);
  sub_1C96FED58(v13, 0x6C8B4995CC5E527EuLL, "ionly", v12 + 429, 0);
  sub_1C96FED58(v13, 0x72868D48B2D5EBA3uLL, "lossless", v12 + 430, 0);
  sub_1C96FED58(v13, 0xB03C2E5AF042E3A5, "probskip", v12 + 445, 1);
  sub_1C96FED58(v13, 0x8435706FD97519EDLL, "framereenc", v12 + 446, 0);
  sub_1C96FED58(v13, 0xDA7CA283D396F91BLL, "framedrop", v12 + 447, 0);
  sub_1C96FED58(v13, 0xDFF2FE5D542EA31BLL, "preprocess", v12 + 448, 0);
  sub_1C96FED58(v13, 0x602305DAC098B022uLL, "cabac_estimation_enable_", v12 + 449, 0);
  sub_1C96FED58(v13, 0x3A01566E736A4E8uLL, "dpmd", v12 + 450, 0);
  sub_1C96FED58(v13, 0x2B1EBF5605FA6228uLL, "dpmd-enable", v12 + 451, 0);
  sub_1C96FED58(v13, 0x651738E42F5A27F0uLL, "band-qp", v12 + 452, 0);
  sub_1C977FEC4(v13, 0x272E34E2BFB32E6CuLL, "hdr-type", v12 + 481, -1);
  sub_1C96FED58(v13, 0xB5C61104404590D6, "hdr-pq-deblock", v12 + 482, 0);
  sub_1C96FED58(v13, 0x240E0E991FD2AE9BuLL, "hdr-pq-banding", v12 + 483, 0);
  sub_1C96FED58(v13, 0xA8EDB06A6EA3063ELL, "hdr-pq-qpm", v12 + 484, 0);
  sub_1C96FED58(v13, 0xE7A385CA7BF9D2E1, "hdr-pq-chroma-qpm", v12 + 485, 0);
  sub_1C96FED58(v13, 0xEBAEEC9A08259398, "adaptive-hdr-chroma-qpm", v12 + 486, 0);
  sub_1C96FED58(v13, 0xB71C8689F9C18CECLL, "hdr-hlg-qpm", v12 + 487, 0);
  sub_1C977FCD4(v13, 0x818677D402EF7CE6, "roundingcontrol", (_WORD *)v12 + 227, 0);
  sub_1C96FED58(v13, 0x74FC82D498616DDCuLL, "recoverdroppedframe", v12 + 575, 0);
  sub_1C96FED58(v13, 0xBDE6380775DA187BLL, "frameack", v12 + 585, 0);
  sub_1C977FEC4(v13, 0x8914E07B53BA1E3uLL, "db", v12 + 561, 1);
  sub_1C977FEC4(v13, 0xAF63EE4C86020B22, "s", v12 + 480, 1);
  sub_1C977FEC4(v13, 0x8B74307B55C5E6FuLL, "iq", v12 + 488, 26);
  sub_1C977FEC4(v13, 0x8D55707B5757DFAuLL, "pq", v12 + 489, 29);
  sub_1C977FEC4(v13, 0xDDFB231C5BDB75EuLL, "cb-qp-offset", v12 + 490, 0);
  sub_1C977FEC4(v13, 0x4D722CB707F47EEuLL, "cr-qp-offset", v12 + 491, 0);
  sub_1C977FEC4(v13, 0x70A12C1952D5628BuLL, "qpm", v12 + 492, 0);
  sub_1C977FEC4(v13, 0x3740EA07C0973081uLL, "qpmp", v12 + 493, 0);
  sub_1C96FED58(v13, 0xA5ED87530AAE8BE1, "qpm-flat-area", v12 + 495, 1);
  sub_1C977FEC4(v13, 0x3740DD07C0971A6AuLL, "qpme", v12 + 494, 0);
  sub_1C977FEC4(v13, 0xF8B0C066E05FB132, "dqpd", v12 + 496, 0);
  sub_1C977FEC4(v13, 0x53F78B1FC36A960FuLL, "rdoq", v12 + 497, 0);
  sub_1C96FEC6C(v13, 0x2C6F698EE31B44D2uLL, "rdoq-prequant-dz-intra", (_DWORD *)v12 + 125, 256);
  sub_1C96FEC6C(v13, 0x2C2E868EE2E3DF24uLL, "rdoq-prequant-dz-inter", (_DWORD *)v12 + 126, 256);
  sub_1C96FED58(v13, 0x822379195CCD6478, "sbh", v12 + 508, 1);
  sub_1C96FEC6C(v13, 0xAF63DB4C8601EAD9, "f", (_DWORD *)v12 + 128, 0x7FFFFFFF);
  sub_1C971FF04();
  sub_1C96FEC6C(v13, 0xC0AB56BF45863635, "max-threads", (_DWORD *)v12 + 130, dword_1ED1ACCA4);
  sub_1C96FEC6C(v13, 0x90EC632032E98B72, "wpp-threads", (_DWORD *)v12 + 131, 0);
  sub_1C96FED58(v13, 0x8931489410D7395BLL, "global-threadpool", v12 + 560, 0);
  sub_1C9780114(v13, 0x72351913690D14uLL, "bps", (_DWORD *)v12 + 137);
  sub_1C977FEC4(v13, 0x8DC5507B57B9942uLL, "rc", v12 + 552, 0);
  sub_1C96FED58(v13, 0x5DAB01B8216B7BDDuLL, "scalar", v12 + 568, 0);
  sub_1C96FED58(v13, 0x1E5485EF2E9F9384uLL, "time", v12 + 569, 0);
  sub_1C96FED58(v13, 0x832846984DBFE0D9, "time-frames", v12 + 570, 0);
  sub_1C96FED58(v13, 0x54EB290A497D21C7uLL, "leaks", v12 + 571, 0);
  sub_1C96FED58(v13, 0x5ED5212C9D566C9DuLL, "use-cra", v12 + 536, 0);
  sub_1C977FEC4(v13, 0x822DA0195CD5FB42, "sao", v12 + 572, 2);
  sub_1C977FEC4(v13, 0x9823E18BF99D7A9uLL, "saoq", v12 + 573, 0);
  sub_1C977FEC4(v13, 0x9BFA121F99ACE953, "adaptcu", v12 + 444, 0);
  sub_1C977FEC4(v13, 0x8D26507B5735FEDuLL, "qc", v12 + 562, 0);
  sub_1C977FEC4(v13, 0x8A25007B54A187CuLL, "cf", v12 + 563, 3);
  sub_1C96FED58(v13, 0x8A24D07B54A1363uLL, "cc", v12 + 564, 1);
  sub_1C96FED58(v13, 0x50939CEF4A983267uLL, "tssd", v12 + 565, 0);
  sub_1C96FED58(v13, 0xCDE5ECAD70CF6CD5, "lomd", v12 + 908, 0);
  sub_1C96FED58(v13, 0xDC9E8F18FEC9589BLL, "fii", v12 + 898, 0);
  sub_1C977FEC4(v13, 0x8AD3B07B553FC52uLL, "lm", v12 + 566, 1);
  sub_1C977FEC4(v13, 0x570AB51944740F8AuLL, "trm", v12 + 567, 1);
  sub_1C96FEC6C(v13, 0x615A99E879F1FBEDuLL, "maxsatd", (_DWORD *)v12 + 144, 32);
  sub_1C96FED58(v13, 0x56E9FE341621E09uLL, "adaptive-lambda", v12 + 580, 1);
  sub_1C96FED58(v13, 0x5334C45223677F91uLL, "no-ic-half", v12 + 581, 1);
  sub_1C96FED58(v13, 0x5F76FE45FB19FE48uLL, "qpel-bilinear", v12 + 582, 0);
  sub_1C96FEC6C(v13, 0x8984D07B541BEDEuLL, "fs", (_DWORD *)v12 + 129, 0);
  sub_1C977FEC4(v13, 0x41B440525D697FF7uLL, "mdmode", v12 + 856, 4);
  sub_1C96FED58(v13, 0xC25B30BDF01A30D5, "mtree-skip-rect", v12 + 888, 0);
  sub_1C96FED58(v13, 0xB8E3D9290E474EB5, "check-split-first", v12 + 860, 0);
  sub_1C96FED58(v13, 0x8A2F64AA860B099FLL, "mtree-cu-test-order", v12 + 890, 0);
  sub_1C977FEC4(v13, 0xD21B034DBFE04CECLL, "skip-bias", v12 + 889, 1);
  sub_1C96FED58(v13, 0x43F116253D1EA9CEuLL, "mtree-skip-cu-split", v12 + 891, 0);
  sub_1C96FED58(v13, 0x840C1656727A0FCFLL, "mtree-skip-cu-full", v12 + 892, 0);
  sub_1C96FED58(v13, 0xC4BF903204850796, "fast-merge", v12 + 901, 1);
  sub_1C96FED58(v13, 0x1E2005B3F5BEB950uLL, "satd-merge", v12 + 902, 0);
  sub_1C96FEC6C(v13, 0x799736CC586FE042uLL, "num-merge-candidate", (_DWORD *)v12 + 226, 5);
  sub_1C977FEC4(v13, 0xF43418886590D867, "imode", v12 + 857, 0);
  sub_1C977FEC4(v13, 0x2B80F1192BB9FFE5uLL, "iet", v12 + 858, 0);
  sub_1C977FEC4(v13, 0xD65DFC1F8E66C132, "ichroma", v12 + 859, 0);
  sub_1C977FEC4(v13, 0xF8430C8B4F06F401, "amvp-et", v12 + 887, 0);
  sub_1C977FEC4(v13, 0xB85BFD9F3C15B21BLL, "nimode", v12 + 861, 2);
  sub_1C96FEC6C(v13, 0xAA68CD72D6497127, "max-intra-cu-size", (_DWORD *)v12 + 216, 6);
  sub_1C977FEC4(v13, 0x81EED073FE32EFC5, "max-inter-cu-size", v12 + 868, 6);
  sub_1C977FEC4(v13, 0x6273AF826AE6052uLL, "check-combine-cu", v12 + 910, 0);
  sub_1C96FED58(v13, 0x7A5CA636C472D4BAuLL, "less-recon", v12 + 911, 0);
  sub_1C977FEC4(v13, 0x5A76D5720CA84BE6uLL, "thrde", v12 + 862, 0);
  sub_1C96FED58(v13, 0x42362CEF434B870CuLL, "tmvp", v12 + 583, 0);
  sub_1C96FED58(v13, 0xC4D0FEC7CD579487, "reencode-anti-pop", v12 + 584, 0);
  sub_1C977FEC4(v13, 0x9532CFA66877DD95, "num_mvp", v12 + 586, 0);
  sub_1C96FED58(v13, 0xE31989A769C63238, "sub8x8pu", v12 + 587, 1);
  sub_1C96FED58(v13, 0xAF2A5491CAA7C0A4, "me-topleft", v12 + 592, 1);
  sub_1C96FED58(v13, 0x2B9CFF192BD29267uLL, "imv", v12 + 593, 1);
  sub_1C96FED58(v13, 0x7EF6AFD0BC2C3AFBuLL, "turde", v12 + 588, 0);
  sub_1C977FEC4(v13, 0xAF38EF220F97347CLL, "fasttu", v12 + 589, 0);
  sub_1C96FED58(v13, 0xAEC568C75E5A789BLL, "bipred", v12 + 594, 0);
  sub_1C977FEC4(v13, 0xEDFFBC8BA94277D2, "biiter", v12 + 595, 1);
  sub_1C977FEC4(v13, 0x4A6099A424EFF8D8uLL, "bisearch", v12 + 596, 4);
  sub_1C977FEC4(v13, 0xD92EDD40EE009C75, "fastbipred", v12 + 597, 0);
  sub_1C96FED58(v13, 0xDC91E78F7946A89BLL, "lowdelay-b", v12 + 599, 0);
  sub_1C96FEC6C(v13, 0x32468D84F55FB2A7uLL, "number-gop", (_DWORD *)v12 + 151, 1);
  sub_1C96FEC6C(v13, 0x9163BFEE0B8BBC39, "dec-reorder", (_DWORD *)v12 + 161, 0);
  sub_1C96FED58(v13, 0x6FB4ED4D665CFB53uLL, "ref-l0-m", v12 + 648, 0);
  sub_1C96FED58(v13, 0x672CC44D6190BB64uLL, "ref-l1-m", v12 + 649, 0);
  sub_1C96FED58(v13, 0xF177F127AFD546AFLL, "fastprecomp", v12 + 590, 0);
  sub_1C96FED58(v13, 0xA8CCC6E13F002CB5, "fast-TA", v12 + 591, 0);
  sub_1C971E1F4(v13, 0xC149B762C3CBBEEFLL, "ave_bin_path", (_QWORD *)v12 + 83);
  sub_1C971E1F4(v13, 0xC8CF39AD19D4144ELL, "ave_log_path", (_QWORD *)v12 + 84);
  sub_1C977FEC4(v13, 0xC31497E238864B46, "fw_stats_usage", v12 + 697, 0);
  sub_1C96FEC6C(v13, 0x4CF9EDAEEADD3E2DuLL, "start_frame", (_DWORD *)v12 + 133, 0);
  sub_1C971E1F4(v13, 0x58682CE1B84A76E1uLL, "fw_stats_path_prefix", (_QWORD *)v12 + 88);
  sub_1C96FED58(v13, 0xE71AB9033F0EDA46, "ispdrivenwp", v12 + 712, 0);
  sub_1C96FED58(v13, 0x25CA010D7C67FE5uLL, "en-analyze-wp", v12 + 713, 0);
  sub_1C96FEC6C(v13, 0x10F5B9695738A8B9uLL, "forcedqualitylevel", (_DWORD *)v12 + 172, -1);
  sub_1C96FEC6C(v13, 0x362F2028C00751E9uLL, "forcedqp", (_DWORD *)v12 + 173, -1);
  sub_1C96FED58(v13, 0x694C40428BDBDE55uLL, "vradeblocktuning", v12 + 696, 0);
  sub_1C971E1F4(v13, 0x8860D9D1EF04328uLL, "isp_meta_file", (_QWORD *)v12 + 90);
  sub_1C971E1F4(v13, 0x6F04801F48EBD537uLL, "face_meta_file", (_QWORD *)v12 + 91);
  sub_1C96FED58(v13, 0xF0F0537A8BB752CELL, "facedrivenqpm", v12 + 714, 0);
  sub_1C96FED58(v13, 0xDF7FDAC19F2075E3, "hardware_scaling", v12 + 736, 0);
  sub_1C96FED58(v13, 0xBE27DAD503ACC303, "ref_selection", v12 + 870, 0);
  sub_1C96FED58(v13, 0x8AE8B64DF29B63BELL, "extended-frame-stats", v12 + 737, 0);
  sub_1C971E1F4(v13, 0xFE98FF5FC68FF9F7, "logfile", (_QWORD *)v12 + 93);
  sub_1C96FED58(v13, 0xBC874B605A9708BuLL, "fixed-fps", v12 + 871, 0);
  sub_1C96FED58(v13, 0xD6C905BD7D301F5FLL, "fast-sao", v12 + 574, 0);
  sub_1C96FEC6C(v13, 0xC757C18968E4439DLL, "debug_facetime", (_DWORD *)v12 + 189, 0);
  sub_1C96FED58(v13, 0xE7F531AB6DDD32A0, "use_bias", v12 + 840, 0);
  *(_QWORD *)&v71 = 0x32B8DD2503E0688BLL;
  *((_QWORD *)&v71 + 1) = "predbias";
  *((_QWORD *)v12 + 106) = 0x3FE8000000000000;
  for (i = (_QWORD *)*((_QWORD *)v12 + 47); i; i = (_QWORD *)*i)
  {
    v15 = i[4];
    if (v15 <= 0x32B8DD2503E0688BLL)
    {
      if (v15 == 0x32B8DD2503E0688BLL)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", "predbias");
          syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", "predbias");
        }
        goto LABEL_9;
      }
      ++i;
    }
  }
  v16 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
  if (v16)
  {
    v16[2] = 0;
    *(_QWORD *)v16 = &off_1E8291570;
    *((_QWORD *)v16 + 2) = v12 + 848;
    sub_1C96FEE44((uint64_t **)v12 + 46, 0x32B8DD2503E0688BuLL, &v71)[6] = (uint64_t *)v16;
  }
LABEL_9:
  sub_1C96FED58(v13, 0xFC7DFD8BC570D29ELL, "noise-level-control", v12 + 912, 0);
  sub_1C96FED58(v13, 0xD751E917FCC287DDLL, "intra-motion-analysis", v12 + 936, 0);
  sub_1C96FED58(v13, 0x2C51CE3D8BCD05CuLL, "mv-analysis-anti-pop", v12 + 937, 0);
  sub_1C96FED58(v13, 0xA1EDFCC9C98DE037, "noise-level-estimate", v12 + 913, 0);
  sub_1C977FEC4(v13, 0x992C8E2B020CE065, "noise-early-terminate", v12 + 914, 0);
  sub_1C9780400(v13, 0xA5B5C24B1EE618C9, "noise-et-strength", (float *)v12 + 229, 1.0);
  sub_1C96FEC6C(v13, 0x567920750E39752DuLL, "freq-deadzone-level", (_DWORD *)v12 + 230, 0);
  sub_1C96FED58(v13, 0x70CF4EDD9A7A5A6FuLL, "ml-tree-cu-split", v12 + 752, 0);
  sub_1C96FED58(v13, 0x4BCAD57DADE2AAD5uLL, "use-ernie-motion-mask-qpm", v12 + 753, 0);
  sub_1C96FED58(v13, 0x9FA17F231CA2208DLL, "legacy-pixfmt", v12 + 872, 0);
  sub_1C977FCD4(v13, 0xD2169DA14FFB5F9ALL, "ifdist", (_WORD *)v12 + 437, 0);
  sub_1C96FEC6C(v13, 0x5C8E300840CF1DCCuLL, "idr-interval", (_DWORD *)v12 + 219, 0);
  sub_1C9780400(v13, 0x25B0C33846144F91uLL, "idr-duration", (float *)v12 + 220, 0.0);
  sub_1C96FED58(v13, 0x907E5BC0BE3F5F7FLL, "scene-idr", v12 + 884, 0);
  sub_1C977FCD4(v13, 0xEADA4767E797268BLL, "vui-chroma-loc", (_WORD *)v12 + 381, 0);
  sub_1C96FED58(v13, 0x3BEB44829B7A4FABuLL, "vui-full-range", v12 + 760, 0);
  sub_1C977FCD4(v13, 0x9FFE593DC10E7CC4, "vui-primaries", (_WORD *)v12 + 382, 2);
  sub_1C977FCD4(v13, 0x2660BA38B42FDFB5uLL, "vui-transfer", (_WORD *)v12 + 383, 2);
  sub_1C977FCD4(v13, 0xE961BACE8A163BCBLL, "vui-matrix-coeff", (_WORD *)v12 + 384, 2);
  sub_1C96FEC6C(v13, 0xA4FAC089B047A575, "schedule-policy", (_DWORD *)v12 + 233, 0);
  sub_1C96FEA64(v13, 0x4179B3C137C3CEB0uLL, (uint64_t)"vui-sar", (void (*)(uint64_t, unint64_t))sub_1C97BB094, 0, 0);
  sub_1C96FEC6C(v13, 0x818A639346385C5uLL, "required-sps-id", (_DWORD *)v12 + 235, 0);
  sub_1C96FEC6C(v13, 0xEC4CA737CBED8456, "required-pps-id", (_DWORD *)v12 + 236, 0);
  sub_1C96FEC6C(v13, 0x4BD00B7E61081A2BuLL, "alpha-layer-id", (_DWORD *)v12 + 237, 0);
  sub_1C96FEB10(v13, 0xD1603A6EC53E98DFLL, (uint64_t)"chroma", (_DWORD *)v12 + 164, qword_1E82926C8, 0x2BD23A1809BB3649);
  sub_1C96FEB10(v13, 0xFE31B357AB72A0FuLL, (uint64_t)"threading", (_DWORD *)v12 + 136, qword_1E82925A8, 0x3C0D17BAD169557BLL);
  sub_1C96FEB10(v13, 0xF5B6EA8C35AC1E89, (uint64_t)"priority", (_DWORD *)v12 + 139, qword_1E8292650, 0xC76A095E1FFA22B6);
  sub_1C96FEB10(v13, 0xB2883551E8F20F05, (uint64_t)"me-mode", (_DWORD *)v12 + 108, qword_1E8292740, 0x9783E8FBF7E0C136);
  sub_1C96FEB10(v13, 0x73F6047B706C4F0EuLL, (uint64_t)"subpel-mode", (_DWORD *)v12 + 109, qword_1E82927B8, 0x8948DE7DE7DC4ALL);
  sub_1C96FEB10(v13, 0xF481A443D70D26E9, (uint64_t)"bipred-mode", (_DWORD *)v12 + 110, qword_1E8292830, 0xDC9178070790BA59);
  sub_1C9780114(v13, 0x8ADD349E618BA10ELL, "profile", (_DWORD *)v12 + 115);
  *(_QWORD *)&v71 = 0xE8DDC90A9D7C709DLL;
  *((_QWORD *)&v71 + 1) = "level";
  *((_WORD *)v12 + 232) = 0;
  v17 = (_QWORD *)*((_QWORD *)v12 + 47);
  if (!v17)
  {
LABEL_14:
    v19 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v19)
    {
      v19[2] = 0;
      *(_QWORD *)v19 = &off_1E8291660;
      *((_QWORD *)v19 + 2) = v12 + 464;
      sub_1C96FEE44((uint64_t **)v12 + 46, 0xE8DDC90A9D7C709DLL, &v71)[6] = (uint64_t *)v19;
    }
    goto LABEL_16;
  }
  while (1)
  {
    v18 = v17[4];
    if (v18 <= 0xE8DDC90A9D7C709DLL)
      break;
LABEL_13:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_14;
  }
  if (v18 != 0xE8DDC90A9D7C709DLL)
  {
    ++v17;
    goto LABEL_13;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Hash of option '%s' collides with previous a option! Change its name!\n", "level");
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", "level");
  }
LABEL_16:
  sub_1C96FEA64(v13, 0xAF63D94C8601E773, (uint64_t)"d", (void (*)(uint64_t, unint64_t))sub_1C97BB23C, 0, 0);
  sub_1C96FEA64(v13, 0x8984E07B541C091uLL, (uint64_t)"fr", (void (*)(uint64_t, unint64_t))sub_1C97BB2BC, (uint64_t)"30", 0);
  sub_1C96FEA64(v13, 0x89E9C01960F4C582, (uint64_t)"ref", (void (*)(uint64_t, unint64_t))sub_1C97BB3CC, (uint64_t)"1:0:1:1", 0);
  sub_1C96FEA64(v13, 0x8A24307B54A0265uLL, (uint64_t)"cu", (void (*)(uint64_t, unint64_t))sub_1C97BB094, (uint64_t)"3:6", 0);
  sub_1C96FEA64(v13, 0x8C84307B56AD1A2uLL, (uint64_t)"tu", (void (*)(uint64_t, unint64_t))sub_1C97BB094, (uint64_t)"2:5", 0);
  sub_1C96FEA64(v13, 0x571BB01944827A3EuLL, (uint64_t)"tuh", (void (*)(uint64_t, unint64_t))sub_1C97BB094, (uint64_t)"2:2", 0);
  sub_1C96FEA64(v13, 0x8C49EF6ED9F28EA0, (uint64_t)"bit-depth", (void (*)(uint64_t, unint64_t))sub_1C97BB4BC, (uint64_t)"8", 0);
  sub_1C96FEA64(v13, 0x81C3B0CF315BC925, (uint64_t)"input-bit-depth", (void (*)(uint64_t, unint64_t))sub_1C97BB4BC, 0, 0);
  sub_1C96FEA64(v13, 0xDD66DE355FAABFA7, (uint64_t)"HEVCEncoderOptions", (void (*)(uint64_t, unint64_t))sub_1C971F3D8, 0, 0);
  sub_1C96FEA64(v13, 0xA72E681EA6EA2FFDLL, (uint64_t)"gop-size", (void (*)(uint64_t, unint64_t))sub_1C97BB644, 0, 0);
  sub_1C96FEA64(v13, 0x50F6C19BB163CD98uLL, (uint64_t)"ref-struct", (void (*)(uint64_t, unint64_t))sub_1C97BB73C, 0, 0);
  sub_1C96FEA64(v13, 0x3DC4253E192FDEDuLL, (uint64_t)"max-cll", (void (*)(uint64_t, unint64_t))sub_1C97BB094, 0, 0);
  sub_1C96FEA64(v13, 0x90898E7CB0F4FE00, (uint64_t)"master-display", (void (*)(uint64_t, unint64_t))sub_1C97BC228, 0, 0);
  sub_1C96FEA64(v13, 0x6FFBA4D618E54C5DuLL, (uint64_t)"ambient-viewing", (void (*)(uint64_t, unint64_t))sub_1C97BC2C8, 0, 0);
  sub_1C96FEA64(v13, 0x92F39F846EC10A99, (uint64_t)"scaling-list", (void (*)(uint64_t, unint64_t))sub_1C97BC340, 0, 0);
  sub_1C96FEA64(v13, 0x6BABB84D374647CAuLL, (uint64_t)"scaling-list-file", (void (*)(uint64_t, unint64_t))sub_1C97BC488, 0, 0);
  sub_1C96FEA64(v13, 0xAF63E84C860200F0, (uint64_t)"u", (void (*)(uint64_t, unint64_t))sub_1C97BC7F4, 0, 1);
  *((_QWORD *)v12 + 1226) = 0;
  *((_OWORD *)v12 + 612) = 0u;
  bzero(v12 + 8152, 0x660uLL);
  *((_QWORD *)v12 + 1231) = 850045863;
  *((_OWORD *)v12 + 616) = 0u;
  *((_OWORD *)v12 + 617) = 0u;
  *((_OWORD *)v12 + 618) = 0u;
  *((_QWORD *)v12 + 1238) = 0;
  *((_QWORD *)v12 + 1240) = 0;
  *((_QWORD *)v12 + 1242) = 0;
  *((_QWORD *)v12 + 1241) = 0;
  sub_1C971EBF0((uint64_t)(v12 + 9968));
  *((_OWORD *)v12 + 649) = 0u;
  *(_OWORD *)(v12 + 10408) = 0u;
  *(_OWORD *)(v12 + 10760) = 0u;
  *(_OWORD *)(v12 + 10776) = 0u;
  *(_OWORD *)(v12 + 10792) = 0u;
  *((_QWORD *)v12 + 1351) = 850045863;
  *((_OWORD *)v12 + 676) = 0u;
  *((_OWORD *)v12 + 677) = 0u;
  *((_OWORD *)v12 + 678) = 0u;
  *((_OWORD *)v12 + 679) = 0u;
  *((_OWORD *)v12 + 680) = 0u;
  *((_OWORD *)v12 + 681) = 0u;
  *((_QWORD *)v12 + 1364) = 0;
  v12[11012] = 1;
  v12[11012] = CC_MD5_Init((CC_MD5_CTX *)(v12 + 10920)) != 0;
  *((_DWORD *)v12 + 2454) = 0;
  *((_QWORD *)v12 + 1223) = 0;
  *((_QWORD *)v12 + 1300) = 0;
  *((_QWORD *)v12 + 23) = 0;
  *((_DWORD *)v12 + 2036) = 0;
  *((_QWORD *)v12 + 32) = 0;
  *((_QWORD *)v12 + 33) = 0;
  *((_QWORD *)v12 + 1228) = 0;
  *((_QWORD *)v12 + 1230) = 0;
  *((_QWORD *)v12 + 1229) = 0;
  v20 = *MEMORY[0x1E0C80C20];
  *((_QWORD *)v12 + 30) = 0;
  *((_QWORD *)v12 + 31) = v20;
  v12[224] = 1;
  *((_QWORD *)v12 + 1239) = 0;
  *(_QWORD *)(v12 + 9948) = 0;
  *((_DWORD *)v12 + 82) = 0;
  *(_DWORD *)(v12 + 9961) = 0;
  sub_1C971CDA8((uint64_t)&v71);
  *(_QWORD *)(a1 + 1288) = v12;
  v21 = atomic_load((unsigned __int8 *)&qword_1EF920DD0);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920DD0))
  {
    qword_1EF920DC8 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &unk_1C98321A0);
    __cxa_guard_release(&qword_1EF920DD0);
  }
  v22 = atomic_load((unsigned __int8 *)&qword_1EF920DE0);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920DE0))
  {
    qword_1EF920DD8 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &unk_1C98321A4);
    __cxa_guard_release(&qword_1EF920DE0);
  }
  v23 = (float *)operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
  if (v23)
  {
    v24 = v23;
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    v23[8] = 1.0;
    *(_QWORD *)(a1 + 1448) = v23;
    TypeID = CFStringGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED180];
    *((_QWORD *)&v71 + 1) = TypeID;
    v72 = a1;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v26 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CECEC8];
    *((_QWORD *)&v71 + 1) = v26;
    v72 = v3;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v27 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CECEB0];
    *((_QWORD *)&v71 + 1) = v27;
    v72 = v3 + 1;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v28 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("DroppablePFramesOnly");
    *((_QWORD *)&v71 + 1) = v28;
    v72 = a1 + 14;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v29 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED0A8];
    *((_QWORD *)&v71 + 1) = v29;
    v72 = a1 + 16;
    v73 = 3;
    v74 = qword_1EF920DC8;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v30 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED0B0];
    *((_QWORD *)&v71 + 1) = v30;
    v72 = a1 + 20;
    v73 = 5;
    v74 = qword_1EF920DD8;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v31 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED100];
    *((_QWORD *)&v71 + 1) = v31;
    v72 = a1 + 24;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v32 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CECEF0];
    *((_QWORD *)&v71 + 1) = v32;
    v72 = a1 + 28;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v33 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED190];
    *((_QWORD *)&v71 + 1) = v33;
    v72 = v7;
    v73 = 5;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v34 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CECFD0];
    *((_QWORD *)&v71 + 1) = v34;
    v72 = v5;
    v73 = 13;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v35 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED1F8];
    *((_QWORD *)&v71 + 1) = v35;
    v72 = v6;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v36 = CFDictionaryGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED140];
    *((_QWORD *)&v71 + 1) = v36;
    v72 = a1 + 56;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v37 = CFStringGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CECF48];
    *((_QWORD *)&v71 + 1) = v37;
    v72 = a1 + 72;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v38 = CFStringGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED238];
    *((_QWORD *)&v71 + 1) = v38;
    v72 = a1 + 80;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v39 = CFStringGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED290];
    *((_QWORD *)&v71 + 1) = v39;
    v72 = a1 + 88;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v40 = CFDataGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CECF60];
    *((_QWORD *)&v71 + 1) = v40;
    v72 = a1 + 96;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v41 = CFDataGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED090];
    *((_QWORD *)&v71 + 1) = v41;
    v72 = a1 + 104;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v42 = CFDataGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED070];
    *((_QWORD *)&v71 + 1) = v42;
    v72 = a1 + 136;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v43 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED248];
    *((_QWORD *)&v71 + 1) = v43;
    v72 = v4;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v44 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CECFE0];
    *((_QWORD *)&v71 + 1) = v44;
    v72 = a1 + 148;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v45 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("RequiredHEVCSequenceParameterSetID");
    *((_QWORD *)&v71 + 1) = v45;
    v72 = a1 + 160;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v46 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("RequiredHEVCPictureParameterSetID");
    *((_QWORD *)&v71 + 1) = v46;
    v72 = a1 + 164;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v47 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("RequiredHEVCVideoParameterSetAlphaLayerID");
    *((_QWORD *)&v71 + 1) = v47;
    v72 = a1 + 168;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v48 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("EncodesAlpha");
    *((_QWORD *)&v71 + 1) = v48;
    v72 = a1 + 172;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v49 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("RequireDeterministicDependencyAndReordering");
    *((_QWORD *)&v71 + 1) = v49;
    v72 = a1 + 173;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v50 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("InitialQPI");
    *((_QWORD *)&v71 + 1) = v50;
    v72 = a1 + 152;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v51 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("InitialQP");
    *((_QWORD *)&v71 + 1) = v51;
    v72 = a1 + 152;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v52 = CFDataGetTypeID();
    *(_QWORD *)&v71 = CFSTR("QuantizationScalingLists");
    *((_QWORD *)&v71 + 1) = v52;
    v72 = a1 + 120;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v53 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = *MEMORY[0x1E0CED198];
    *((_QWORD *)&v71 + 1) = v53;
    v72 = a1 + 128;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v54 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("ThermalLevel");
    *((_QWORD *)&v71 + 1) = v54;
    v72 = a1 + 176;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v55 = CFStringGetTypeID();
    *(_QWORD *)&v71 = CFSTR("NegotiationDetails");
    *((_QWORD *)&v71 + 1) = v55;
    v72 = a1 + 184;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v56 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("UsingCellular");
    *((_QWORD *)&v71 + 1) = v56;
    v72 = a1 + 1193;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v57 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey001");
    *((_QWORD *)&v71 + 1) = v57;
    v72 = a1 + 1194;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v58 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey002");
    *((_QWORD *)&v71 + 1) = v58;
    v72 = v3 + 1184;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v59 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey000");
    *((_QWORD *)&v71 + 1) = v59;
    v72 = a1 + 1204;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v60 = CFStringGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey004");
    *((_QWORD *)&v71 + 1) = v60;
    v72 = a1 + 1208;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v61 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey005");
    *((_QWORD *)&v71 + 1) = v61;
    v72 = a1 + 1216;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v62 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey003");
    *((_QWORD *)&v71 + 1) = v62;
    v72 = v3 + 1208;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v63 = CFStringGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey024");
    *((_QWORD *)&v71 + 1) = v63;
    v72 = a1 + 1224;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v64 = CFStringGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey023");
    *((_QWORD *)&v71 + 1) = v64;
    v72 = a1 + 1232;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v65 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey034");
    *((_QWORD *)&v71 + 1) = v65;
    v72 = a1 + 1240;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v66 = CFNumberGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey035");
    *((_QWORD *)&v71 + 1) = v66;
    v72 = a1 + 1244;
    v73 = 3;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v67 = CFStringGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey041");
    *((_QWORD *)&v71 + 1) = v67;
    v72 = a1 + 1248;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v68 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey044");
    *((_QWORD *)&v71 + 1) = v68;
    v72 = v3 + 1428;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v69 = CFBooleanGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey045");
    *((_QWORD *)&v71 + 1) = v69;
    v72 = v3 + 1429;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
    v70 = CFStringGetTypeID();
    *(_QWORD *)&v71 = CFSTR("PrivateKey046");
    *((_QWORD *)&v71 + 1) = v70;
    v72 = a1 + 1256;
    v73 = 16;
    v74 = 0;
    sub_1C9724740(v24, (CFTypeRef *)&v71, (uint64_t)&v71);
  }
  else
  {
    *(_QWORD *)(a1 + 1448) = 0;
  }
}

void sub_1C97244E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EF920DE0);
  _Unwind_Resume(a1);
}

void sub_1C9724740(float *a1, CFTypeRef *a2, uint64_t a3)
{
  CFHashCode v3;
  CFHashCode v7;
  CFHashCode v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **i;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;

  v7 = CFHash(*a2);
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t **)*i)
      {
        v14 = (unint64_t)i[1];
        if (v14 == v8)
        {
          if (CFEqual(i[2], *a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x38uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v16;
  v15[6] = *(_QWORD *)(a3 + 32);
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v29 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_1C9724B4C();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v26)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = a1 + 4;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_55:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v34 = *(_QWORD **)a1;
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v35)
  {
    *v15 = *v35;
LABEL_72:
    *v35 = v15;
    goto LABEL_73;
  }
  *v15 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v15;
  v34[v3] = a1 + 4;
  if (*v15)
  {
    v36 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9)
        v36 %= v9;
    }
    else
    {
      v36 &= v9 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_1C9724B38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C9724B4C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_1E82913A8, MEMORY[0x1E0DE4390]);
}

void sub_1C9724B74(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void **v29;
  void **v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  FILE *v38;
  FILE *v39;
  _QWORD *v40;
  FILE *v41;
  FILE *v42;
  FILE *v43;
  void *v44;
  void *v45;
  uint64_t i;
  _QWORD *v47;
  uint64_t v48;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  void **v59;

  if (*(_BYTE *)(a1 + 1312))
    return;
  *(_BYTE *)(a1 + 1312) = 1;
  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v4 = *(const void **)(a1 + 184);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v5 = *(const void **)(a1 + 72);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v6 = *(const void **)(a1 + 80);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v7 = *(const void **)(a1 + 88);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v8 = *(const void **)(a1 + 1208);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 1208) = 0;
  }
  v9 = *(const void **)(a1 + 1224);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 1224) = 0;
  }
  v10 = *(const void **)(a1 + 1232);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 1232) = 0;
  }
  v11 = *(const void **)(a1 + 1248);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 1248) = 0;
  }
  v12 = *(const void **)(a1 + 1256);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 1256) = 0;
  }
  v13 = *(const void **)(a1 + 96);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v14 = *(const void **)(a1 + 104);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v15 = *(const void **)(a1 + 112);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v16 = *(const void **)(a1 + 120);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v17 = *(const void **)(a1 + 136);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_QWORD *)(a1 + 1264) = 0;
  FigFormatDescriptionRelease();
  *(_QWORD *)(a1 + 1280) = 0;
  v18 = *(_QWORD *)(a1 + 1288);
  if (v18)
  {
    sub_1C97A1348(*(_QWORD *)(a1 + 1288));
    v19 = *(NSObject **)(v18 + 9912);
    if (v19)
    {
      dispatch_group_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(v18 + 9912));
      *(_QWORD *)(v18 + 9912) = 0;
    }
    v20 = *(NSObject **)(v18 + 9824);
    if (v20)
    {
      dispatch_release(v20);
      *(_QWORD *)(v18 + 9824) = 0;
    }
    v21 = *(NSObject **)(v18 + 9832);
    if (v21)
    {
      dispatch_release(v21);
      *(_QWORD *)(v18 + 9832) = 0;
    }
    v22 = *(_QWORD *)(v18 + 9784);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *(_QWORD **)(v18 + 10400);
    if (!v23)
    {
LABEL_71:
      v38 = *(FILE **)(v18 + 184);
      if (v38)
        fclose(v38);
      v39 = *(FILE **)(v18 + 248);
      if (v39)
      {
        v40 = (_QWORD *)MEMORY[0x1E0C80C20];
        if (v39 != (FILE *)*MEMORY[0x1E0C80C20])
        {
          fclose(v39);
          *(_QWORD *)(v18 + 248) = *v40;
        }
      }
      v41 = *(FILE **)(v18 + 240);
      if (v41 && fclose(v41) && dword_1ED1ACCC0 >= 3)
      {
        fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Unable to close file\n");
      }
      v42 = *(FILE **)(v18 + 264);
      if (v42 && fclose(v42) && dword_1ED1ACCC0 >= 3)
      {
        fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Unable to close file\n");
      }
      v43 = *(FILE **)(v18 + 256);
      if (v43 && fclose(v43) && dword_1ED1ACCC0 >= 3)
      {
        fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Unable to close file\n");
      }
      sub_1C97A0A90(v18 + 10872);
      std::mutex::~mutex((std::mutex *)(v18 + 10808));
      v44 = *(void **)(v18 + 10784);
      if (v44)
      {
        *(_QWORD *)(v18 + 10792) = v44;
        operator delete(v44);
      }
      v45 = *(void **)(v18 + 10760);
      if (v45)
      {
        *(_QWORD *)(v18 + 10768) = v45;
        operator delete(v45);
      }
      sub_1C972CFE0(v18 + 10408);
      sub_1C972CFE0(v18 + 10384);
      for (i = 0; i != -272; i -= 16)
        sub_1C972CFE0(v18 + 10256 + i);
      v47 = *(_QWORD **)(v18 + 9992);
      if (v47 == (_QWORD *)(v18 + 9968))
      {
        v48 = 4;
        v47 = (_QWORD *)(v18 + 9968);
      }
      else
      {
        if (!v47)
          goto LABEL_99;
        v48 = 5;
      }
      (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_99:
      v59 = (void **)(v18 + 9920);
      sub_1C97A0BD8(&v59);
      std::mutex::~mutex((std::mutex *)(v18 + 9848));
      v59 = (void **)(v18 + 9792);
      sub_1C97A0BD8(&v59);
      sub_1C972CFE0(v18 + 9768);
      sub_1C972CFE0(v18 + 9752);
      sub_1C972CFE0(v18 + 9736);
      sub_1C972CFE0(v18 + 9720);
      sub_1C972CFE0(v18 + 9704);
      sub_1C972CFE0(v18 + 9688);
      for (j = 0; j != -1024; j -= 16)
        sub_1C972CFE0(v18 + 9672 + j);
      for (k = 0; k != -256; k -= 16)
        sub_1C972CFE0(v18 + 8648 + k);
      for (m = 0; m != -256; m -= 16)
        sub_1C972CFE0(v18 + 8392 + m);
      *(_QWORD *)(v18 + 360) = &off_1E82916D0;
      v52 = *(_QWORD *)(v18 + 8136);
      *(_QWORD *)(v18 + 8136) = 0;
      if (v52)
        sub_1C97A0D88(v52);
      sub_1C977F548((_QWORD *)(v18 + 360));
      v59 = (void **)(v18 + 336);
      sub_1C97A0C88(&v59);
      sub_1C972CFE0(v18 + 296);
      v53 = *(void **)(v18 + 192);
      if (v53)
      {
        *(_QWORD *)(v18 + 200) = v53;
        operator delete(v53);
      }
      sub_1C972CFE0(v18 + 168);
      if (*(char *)(v18 + 23) < 0)
        operator delete(*(void **)v18);
      MEMORY[0x1CAA43B9C](v18, 0x10F2C4042379925);
      goto LABEL_112;
    }
    v24 = (char *)v23[226];
    v25 = (char *)v23[225];
    if (v24 == v25)
    {
      v25 = (char *)v23[226];
      if (v24)
      {
LABEL_52:
        v23[226] = v25;
        operator delete(v25);
      }
    }
    else
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        if (v26)
        {
          std::condition_variable::~condition_variable((std::condition_variable *)(v26 + 104));
          std::mutex::~mutex((std::mutex *)(v26 + 40));
          v27 = *(void **)(v26 + 8);
          if (v27)
          {
            *(_QWORD *)(v26 + 16) = v27;
            operator delete(v27);
          }
          MEMORY[0x1CAA43B9C](v26, 0x1020C40567BECFALL);
          v24 = (char *)v23[226];
          v25 = (char *)v23[225];
        }
        v24 -= 8;
        v23[226] = v24;
      }
      while (v24 != v25);
      if (v25)
        goto LABEL_52;
    }
    v28 = v23[220];
    v23[220] = 0;
    if (v28)
      MEMORY[0x1CAA43B9C](v28, 0x1000C409380FD32);
    v29 = (void **)v23[57];
    v30 = (void **)v23[58];
    v23[61] = 0;
    v31 = (char *)v30 - (char *)v29;
    if ((unint64_t)((char *)v30 - (char *)v29) >= 0x11)
    {
      do
      {
        operator delete(*v29);
        v30 = (void **)v23[58];
        v29 = (void **)(v23[57] + 8);
        v23[57] = v29;
        v31 = (char *)v30 - (char *)v29;
      }
      while ((unint64_t)((char *)v30 - (char *)v29) > 0x10);
    }
    v32 = v31 >> 3;
    if (v32 == 1)
    {
      v33 = 170;
    }
    else
    {
      if (v32 != 2)
        goto LABEL_64;
      v33 = 341;
    }
    v23[60] = v33;
LABEL_64:
    if (v29 != v30)
    {
      do
      {
        v34 = *v29++;
        operator delete(v34);
      }
      while (v29 != v30);
      v36 = v23[57];
      v35 = v23[58];
      if (v35 != v36)
        v23[58] = v35 + ((v36 - v35 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    v37 = (void *)v23[56];
    if (v37)
      operator delete(v37);
    sub_1C972CFE0((uint64_t)(v23 + 1));
    MEMORY[0x1CAA43B9C](v23, 0x10E0C40107E3BE5);
    *(_QWORD *)(v18 + 10400) = 0;
    goto LABEL_71;
  }
LABEL_112:
  v54 = *(const void **)(a1 + 1320);
  if (v54)
  {
    CFRelease(v54);
    *(_QWORD *)(a1 + 1320) = 0;
  }
  v55 = *(_QWORD *)(a1 + 1448);
  if (v55)
  {
    v56 = *(_QWORD **)(v55 + 16);
    if (v56)
    {
      do
      {
        v57 = (_QWORD *)*v56;
        operator delete(v56);
        v56 = v57;
      }
      while (v57);
    }
    v58 = *(void **)v55;
    *(_QWORD *)v55 = 0;
    if (v58)
      operator delete(v58);
    JUMPOUT(0x1CAA43B9CLL);
  }
}

uint64_t sub_1C972521C(uint64_t a1, CFStringRef theString, const void *a3)
{
  const char *CStringPtr;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL *v9;
  uint64_t **v10;
  CFNumberType v11;
  CFTypeID v12;
  uint64_t **v13;
  const __CFNumber *v14;
  uint64_t result;
  const char *v16;
  CFTypeID v17;
  BOOL v18;
  CFTypeRef v19;
  CFTypeRef v20;

  v20 = theString;
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  v6 = sub_1C9725468(*(_QWORD **)(a1 + 1448), &v20);
  if (!v6)
    goto LABEL_33;
  v7 = v6[3];
  v8 = sub_1C9725468(*(_QWORD **)(a1 + 1448), &v20);
  if (!v8)
    goto LABEL_33;
  if (!a3 || (v9 = (BOOL *)v8[4], (uint64_t *)CFGetTypeID(a3) != v7))
  {
LABEL_13:
    if (dword_1ED1ACCC0 < 3)
      return 4294954394;
    v16 = "(key '%s'): bad\n";
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "(key '%s'): bad\n");
LABEL_15:
    syslog(27, v16, CStringPtr);
    return 4294954394;
  }
  if (v7 == (uint64_t *)CFNumberGetTypeID())
  {
    v10 = sub_1C9725468(*(_QWORD **)(a1 + 1448), &v20);
    if (!v10)
      goto LABEL_33;
    v11 = (CFNumberType)v10[5];
    v12 = CFGetTypeID(a3);
    if (v12 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)a3, v11, v9))
    {
      v13 = sub_1C9725468(*(_QWORD **)(a1 + 1448), &v20);
      if (v13)
      {
        v14 = (const __CFNumber *)v13[6];
        if (!v14 || CFNumberCompare((CFNumberRef)a3, v14, 0) != kCFCompareLessThan)
          return 0;
        if (dword_1ED1ACCC0 < 3)
          return 4294954394;
        v16 = "bad (key '%s') (out of range)\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "bad (key '%s') (out of range)\n");
        goto LABEL_15;
      }
LABEL_33:
      sub_1C9725560();
    }
    goto LABEL_13;
  }
  if (v7 == (uint64_t *)CFBooleanGetTypeID())
  {
    v17 = CFGetTypeID(a3);
    v18 = v17 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)a3) != 0;
    result = 0;
    *v9 = v18;
  }
  else if (v7 == (uint64_t *)CFStringGetTypeID() || v7 == (uint64_t *)CFDataGetTypeID())
  {
    if (*(_QWORD *)v9)
      CFRelease(*(CFTypeRef *)v9);
    v19 = CFRetain(a3);
    result = 0;
    *(_QWORD *)v9 = v19;
  }
  else
  {
    if (dword_1ED1ACCC0 >= 2)
    {
      fwrite("unsupported CFTypeID for SetCommonProperty()\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(26, "unsupported CFTypeID for SetCommonProperty()\n");
    }
    return 4294954385;
  }
  return result;
}

uint64_t **sub_1C9725468(_QWORD *a1, CFTypeRef *a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = CFHash(*a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (CFEqual(i[2], *a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void sub_1C9725560()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1C97255A8(exception);
  __cxa_throw(exception, (struct type_info *)&unk_1E8291390, MEMORY[0x1E0DE42E0]);
}

void sub_1C9725594(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1C97255A8(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "unordered_map::at: key not found");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t sub_1C97255D4(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  void *v10;
  uint64_t *v11;
  uint64_t result;
  void *v13;
  CFTypeRef v14;

  v14 = a2;
  v5 = sub_1C9725468(*(_QWORD **)(a1 + 1448), &v14);
  if (!v5)
    goto LABEL_20;
  v6 = v5[3];
  v7 = sub_1C9725468(*(_QWORD **)(a1 + 1448), &v14);
  if (!v7)
    goto LABEL_20;
  v8 = v7[4];
  *a3 = 0;
  if (v6 == (uint64_t *)CFNumberGetTypeID())
  {
    v9 = sub_1C9725468(*(_QWORD **)(a1 + 1448), &v14);
    if (v9)
    {
      v10 = CFNumberCreate(0, (CFNumberType)v9[5], v8);
LABEL_15:
      v13 = v10;
      result = 0;
      *a3 = v13;
      return result;
    }
LABEL_20:
    sub_1C9725560();
  }
  if (v6 == (uint64_t *)CFBooleanGetTypeID())
  {
    v11 = (uint64_t *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)v8)
      v11 = (uint64_t *)MEMORY[0x1E0C9AE40];
    result = *v11;
LABEL_14:
    v10 = (void *)CFRetain((CFTypeRef)result);
    goto LABEL_15;
  }
  if (v6 == (uint64_t *)CFStringGetTypeID()
    || v6 == (uint64_t *)CFDataGetTypeID()
    || v6 == (uint64_t *)CFDictionaryGetTypeID())
  {
    result = *v8;
    if (!*v8)
      return result;
    goto LABEL_14;
  }
  if (dword_1ED1ACCC0 >= 2)
  {
    fwrite("unsupported CFTypeID for CopyCommonProperty()", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(26, "unsupported CFTypeID for CopyCommonProperty()");
  }
  return 4294954385;
}

uint64_t HEVCVideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  if (dword_1ED1ACCC0 >= 7)
  {
    fwrite("\n\n========================\n\nrunning through HEVCVideoEncoder_CreateInstance()\n\n========================\n\n", 0x69uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(31, "\n\n========================\n\nrunning through HEVCVideoEncoder_CreateInstance()\n\n========================\n\n");
  }
  VTVideoEncoderGetClassID();
  v4 = CMDerivedObjectCreate();
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("FigDerivedObjectCreate failed", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "FigDerivedObjectCreate failed");
  }
  *a3 = 0;
  return v4;
}

uint64_t sub_1C972582C(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  int v5;
  unint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;

  v5 = a3;
  v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 1264) = a2;
  *(_DWORD *)(DerivedStorage + 1300) = v5;
  *(_DWORD *)(DerivedStorage + 1304) = v7;
  if (a4)
    *(_QWORD *)(DerivedStorage + 1320) = CFRetain(a4);
  v9 = sub_1C974C7AC(v5, v7, *(_DWORD *)(DerivedStorage + 8));
  if ((_DWORD)v9)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Error setting buffer attributes\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Error setting buffer attributes\n");
    }
  }
  else
  {
    v10 = *(_QWORD *)(DerivedStorage + 1288);
    *(_QWORD *)(v10 + 10448) = sub_1C972E2F4;
    *(_QWORD *)(v10 + 10456) = DerivedStorage;
  }
  return v9;
}

uint64_t sub_1C9725904(uint64_t a1, uint64_t a2, __CVBuffer *a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage;
  char *v9;
  uint64_t v10;
  const __CFNumber *Attachment;
  const __CFDictionary *Attachments;
  const __CFDictionary *v13;
  const void *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFTypeID v17;
  unsigned int Count;
  int v19;
  unint64_t v20;
  const void *v21;
  float32x4_t *v22;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v24;
  CFTypeID v25;
  CMTimeEpoch v26;
  CGFloat v27;
  CMTimeValue v28;
  CMTimeScale v29;
  CMTimeFlags v30;
  int v31;
  CMTimeFlags v32;
  int v33;
  int32_t v34;
  CMTime *p_time1;
  int32_t v36;
  double Seconds;
  int v38;
  int v39;
  double v40;
  unsigned int v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  void *key;
  CMTimeScale keya;
  CVBufferRef buffer;
  void *v62;
  void *v63;
  __int128 v66[2];
  uint64_t v67;
  __int128 v68;
  CGRect rect;
  CMTime rhs;
  CMTime lhs;
  CMTime v72;
  CMTime time2;
  CMTime time1;
  CMTime value;

  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v68 = 0uLL;
  v9 = (char *)operator new(0x320uLL, MEMORY[0x1E0DE4E10]);
  v10 = (uint64_t)v9;
  if (!v9)
    goto LABEL_81;
  bzero(v9 + 88, 0x2C8uLL);
  *(_QWORD *)(v10 + 96) = 0x186A0000280A0;
  *(_QWORD *)(v10 + 120) = 0x403E000000000000;
  *(_QWORD *)(v10 + 460) = 0;
  *(_QWORD *)(v10 + 452) = 0;
  *(_DWORD *)(v10 + 468) = 0;
  *(_DWORD *)(v10 + 356) = 1;
  *(_QWORD *)(v10 + 436) = 0;
  *(_QWORD *)(v10 + 444) = 0;
  *(_QWORD *)(v10 + 428) = 0;
  *(_DWORD *)(v10 + 660) = -1;
  *(_OWORD *)(v10 + 500) = 0u;
  *(_OWORD *)(v10 + 516) = 0u;
  *(_OWORD *)(v10 + 532) = 0u;
  *(_OWORD *)(v10 + 548) = 0u;
  *(_OWORD *)(v10 + 564) = 0u;
  *(_OWORD *)(v10 + 580) = 0u;
  *(_OWORD *)(v10 + 596) = 0u;
  *(_OWORD *)(v10 + 612) = 0u;
  *(_OWORD *)(v10 + 628) = 0u;
  *(_OWORD *)(v10 + 644) = 0u;
  *(_OWORD *)(v10 + 664) = 0u;
  *(_OWORD *)(v10 + 680) = 0u;
  *(_DWORD *)(v10 + 284) = -1;
  if (!a3)
    goto LABEL_81;
  *(_QWORD *)v10 = a2;
  *(_QWORD *)(v10 + 648) = 0;
  *(_QWORD *)(v10 + 656) = 0xFFFFFFFF00000000;
  *(_OWORD *)(v10 + 500) = 0uLL;
  *(_OWORD *)(v10 + 516) = 0uLL;
  *(_OWORD *)(v10 + 532) = 0uLL;
  *(_OWORD *)(v10 + 548) = 0uLL;
  *(_OWORD *)(v10 + 564) = 0uLL;
  *(_OWORD *)(v10 + 580) = 0uLL;
  *(_OWORD *)(v10 + 596) = 0uLL;
  *(_OWORD *)(v10 + 612) = 0uLL;
  *(_OWORD *)(v10 + 628) = 0uLL;
  *(_QWORD *)(v10 + 672) = 0;
  *(_QWORD *)(v10 + 688) = 0;
  *(_QWORD *)(v10 + 680) = 0;
  *(_QWORD *)(v10 + 664) = 0x3FF0000000000000;
  buffer = a3;
  Attachment = (const __CFNumber *)CVBufferGetAttachment(a3, CFSTR("FrameIndex"), 0);
  value.value = (CMTimeValue)Attachment;
  if (Attachment)
    CFNumberGetValue(Attachment, kCFNumberIntType, (void *)(v10 + 660));
  Attachments = CVBufferGetAttachments(a3, kCVAttachmentMode_ShouldPropagate);
  v13 = Attachments;
  if (Attachments)
  {
    v14 = (const void *)*MEMORY[0x1E0D04138];
    if (CFDictionaryContainsKey(Attachments, (const void *)*MEMORY[0x1E0D04138]))
    {
      v13 = (const __CFDictionary *)CFDictionaryGetValue(v13, v14);
      v15 = (const __CFArray *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0D05350]);
      v16 = v15;
      if (v15)
      {
        v17 = CFGetTypeID(v15);
        if (v17 == CFArrayGetTypeID())
        {
          Count = CFArrayGetCount(v16);
          v19 = Count >= 5 ? 5 : Count;
          *(_DWORD *)(v10 + 640) = v19;
          if (v19)
          {
            v20 = 0;
            v21 = (const void *)*MEMORY[0x1E0D05358];
            key = (void *)*MEMORY[0x1E0D05368];
            v57 = (void *)*MEMORY[0x1E0D05370];
            v62 = (void *)*MEMORY[0x1E0D05360];
            v22 = (float32x4_t *)(v10 + 504);
            do
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v20);
              v24 = ValueAtIndex;
              if (ValueAtIndex)
              {
                v25 = CFGetTypeID(ValueAtIndex);
                if (v25 == CFDictionaryGetTypeID())
                {
                  if (CFDictionaryGetValueIfPresent(v24, v21, (const void **)&value))
                    CFNumberGetValue((CFNumberRef)value.value, kCFNumberSInt32Type, (char *)&v22[-1].u64[1] + 4);
                  if (!v20)
                  {
                    if (CFDictionaryGetValueIfPresent(v24, key, (const void **)&value))
                      CFNumberGetValue((CFNumberRef)value.value, kCFNumberSInt32Type, (void *)(v10 + 520));
                    if (CFDictionaryGetValueIfPresent(v24, v57, (const void **)&value))
                      CFNumberGetValue((CFNumberRef)value.value, kCFNumberSInt32Type, (void *)(v10 + 524));
                  }
                  if (CFDictionaryGetValueIfPresent(v24, v62, (const void **)&value)
                    && CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)value.value, &rect))
                  {
                    *v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)rect.origin), (float64x2_t)rect.size);
                  }
                }
              }
              ++v20;
              v22 = (float32x4_t *)((char *)v22 + 28);
            }
            while (v20 < *(unsigned int *)(v10 + 640));
          }
        }
      }
    }
  }
  time1.value = 0;
  *(_OWORD *)(v10 + 720) = 0u;
  LODWORD(time2.value) = 0;
  *(_QWORD *)(v10 + 744) = 0;
  *(_DWORD *)(v10 + 752) = 0;
  *(_DWORD *)(v10 + 736) = 0;
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D05038], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberDoubleType, (void *)(v10 + 720));
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D04FC8], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 728));
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D050E0], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 732));
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D04FB8], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, &time2);
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D04FE0], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 744));
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D04FD8], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 748));
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D04FD0], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 752));
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D050D8], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 736));
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E0D05078], (const void **)&time1))
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberDoubleType, (void *)(v10 + 760));
  *(_OWORD *)(v10 + 40) = *(_OWORD *)a4;
  v26 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v10 + 56) = v26;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a5;
  v27 = *(double *)(a5 + 16);
  *(CGFloat *)(v10 + 32) = v27;
  v28 = *(_QWORD *)a4;
  v29 = *(_DWORD *)(a4 + 8);
  v30 = *(_DWORD *)(a4 + 12);
  v63 = *(void **)a5;
  v31 = *(_DWORD *)(a5 + 8);
  v32 = *(_DWORD *)(a5 + 12);
  v33 = *(_DWORD *)(DerivedStorage + 1308);
  *(_QWORD *)(v10 + 776) = *(_QWORD *)a4;
  *(_DWORD *)(v10 + 792) = v29;
  keya = v31;
  if ((v32 & 0x1D) == 1
    && (*(_QWORD *)&rect.origin.x = v63,
        *(_QWORD *)&rect.origin.y = __PAIR64__(v32, v31),
        rect.size.width = v27,
        value = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
        v34 = CMTimeCompare((CMTime *)&rect, &value),
        v31 = keya,
        v34 >= 1))
  {
    time1.value = (CMTimeValue)v63;
    time1.timescale = keya;
    time1.flags = v32;
    p_time1 = &time1;
    *(CGFloat *)&time1.epoch = v27;
  }
  else
  {
    if (v33 < 1
      || (v30 & 0x1D) != 1
      || (time1.value = v28,
          time1.timescale = v29,
          time1.flags = v30,
          time1.epoch = v26,
          time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
          v36 = CMTimeCompare(&time1, &time2),
          v31 = keya,
          v36 < 1))
    {
      Seconds = 1.0 / *(double *)(v10 + 120);
      goto LABEL_56;
    }
    lhs.value = v28;
    lhs.timescale = v29;
    lhs.flags = v30;
    lhs.epoch = v26;
    rhs = *(CMTime *)(DerivedStorage + 1352);
    p_time1 = &v72;
    CMTimeSubtract(&v72, &lhs, &rhs);
  }
  Seconds = CMTimeGetSeconds(p_time1);
  v31 = keya;
LABEL_56:
  v38 = 0;
  v39 = 0;
  *(double *)(DerivedStorage + 8 * (v33 % 5) + 1400) = Seconds;
  v40 = 0.0;
  v41 = v33;
  do
  {
    if (v33 + v38 >= 0)
    {
      ++v39;
      v40 = v40 + *(double *)(DerivedStorage + 8 * (v38 + v33 - 5 * (v41 / 5)) + 1400);
    }
    --v38;
    --v41;
  }
  while (v38 != -5);
  if (v40 <= 0.0)
  {
    v42 = *(double *)(v10 + 120);
  }
  else
  {
    v42 = (double)v39 / v40;
    *(double *)(v10 + 120) = v42;
  }
  *(_QWORD *)(DerivedStorage + 1352) = v28;
  *(_DWORD *)(DerivedStorage + 1360) = v29;
  *(_DWORD *)(DerivedStorage + 1364) = v30;
  *(_QWORD *)(DerivedStorage + 1368) = v26;
  *(_QWORD *)(DerivedStorage + 1376) = v63;
  *(_DWORD *)(DerivedStorage + 1384) = v31;
  *(_DWORD *)(DerivedStorage + 1388) = v32;
  *(CGFloat *)(DerivedStorage + 1392) = v27;
  if (*(double *)(DerivedStorage + 1344) == v42)
  {
    v43 = (uint64_t)buffer;
  }
  else
  {
    if (dword_1ED1ACCC0 < 6)
    {
      v43 = (uint64_t)buffer;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Update framerate %.2f -> %.2f\n", *(double *)(DerivedStorage + 1344), v42);
      syslog(30, "Update framerate %.2f -> %.2f\n", *(double *)(DerivedStorage + 1344), *(double *)(v10 + 120));
      v42 = *(double *)(v10 + 120);
      v43 = (uint64_t)buffer;
      v31 = keya;
    }
    *(double *)(DerivedStorage + 1344) = v42;
  }
  if ((v30 & 0x1D) == 1)
  {
    *(_QWORD *)(v10 + 776) = v28;
    *(_DWORD *)(v10 + 792) = v29;
    if ((v32 & 0x1D) == 1)
    {
      if (v29 == v31)
      {
        v44 = (uint64_t)v63;
LABEL_78:
        *(_QWORD *)(v10 + 784) = v44;
        goto LABEL_79;
      }
      v46 = (double)v29 / (double)v31 * (double)(uint64_t)v63;
    }
    else
    {
      v46 = Seconds * (double)v29;
    }
    v44 = (uint64_t)(v46 + 0.5);
    goto LABEL_78;
  }
  if (v42 > 0.0)
  {
    v45 = (uint64_t)(3000.0 / v42 * (double)v33);
    *(_QWORD *)(v10 + 776) = v45;
    *(_QWORD *)(v10 + 784) = (uint64_t)(3000.0 / v42 * (double)(v33 + 1)) - v45;
    *(_DWORD *)(v10 + 792) = (int)(v42 * (double)(uint64_t)(3000.0 / v42 + 0.5) + 0.5);
  }
LABEL_79:
  if (!*(_BYTE *)(DerivedStorage + 1313) && sub_1C972712C())
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Init failed\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Init failed\n");
    }
    goto LABEL_81;
  }
  if (sub_1C97A87F4(*(_QWORD *)(DerivedStorage + 1288), (uint64_t)&v68, v43, 0, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(DerivedStorage + 1288) + 9752) + 204), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(DerivedStorage + 1288) + 9752) + 208)))
  {
LABEL_81:
    VTEncoderSessionEmitEncodedFrame();
    if (v10)
    {
      sub_1C977F0D4((_QWORD *)(v10 + 88));
      MEMORY[0x1CAA43B9C](v10, 0x1070C40040150F9);
    }
    goto LABEL_83;
  }
  if (sub_1C972BDE0(DerivedStorage, (uint64_t *)&v68, v10, a6))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Setup failed\n", 0xDuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Setup failed\n");
    }
    goto LABEL_81;
  }
  v66[1] = *(_OWORD *)a4;
  v67 = *(_QWORD *)(a4 + 16);
  VTEncoderSessionEnqueuePresentationTimeStamp();
  v51 = *(_QWORD *)(DerivedStorage + 1288);
  v66[0] = v68;
  if (*((_QWORD *)&v68 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  sub_1C97A88B4(v51, v66, v10, v10 + 88);
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v66[0] + 1);
  if (*((_QWORD *)&v66[0] + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v66[0] + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_83:
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return 0;
}

void sub_1C9726330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1C972CFE0((uint64_t)&a21);
  sub_1C972CFE0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9726364()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  char v3;
  BOOL v4;
  uint64_t v5;
  const std::ios_base *v6;
  _QWORD *v7;
  uint64_t v8;
  const std::locale::facet *v9;
  uint64_t v10;
  const char *locale;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  char v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  FILE *v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  double v41;
  double v42;
  unint64_t v43;
  int v44;
  double v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  std::locale v56;
  char v57;
  _QWORD v58[2];
  _QWORD v59[11];
  char v60;
  uint64_t v61;
  unsigned __int8 md[16];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sub_1C97A1348(*(_QWORD *)(DerivedStorage + 1288));
  if (*(_BYTE *)(DerivedStorage + 1216))
  {
    v1 = *(const void **)(DerivedStorage + 1256);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 1256) = 0;
    }
    v2 = *(_QWORD *)(DerivedStorage + 1288);
    if (*(_BYTE *)(v2 + 424) && *(_QWORD *)(v2 + 248))
    {
      v3 = CC_MD5_Final(md, (CC_MD5_CTX *)(v2 + 10920));
      v4 = (v3 & *(_BYTE *)(v2 + 11012)) == 0;
      *(_BYTE *)(v2 + 11012) &= v3;
      if (v4)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("Error printing bitstream MD5\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "Error printing bitstream MD5\n");
        }
      }
      else
      {
        sub_1C972D15C((uint64_t)v58);
        v5 = v59[0];
        *(_DWORD *)((char *)&v59[1] + *(_QWORD *)(v59[0] - 24)) = *(_DWORD *)((_BYTE *)&v59[1]
                                                                              + *(_QWORD *)(v59[0] - 24)) & 0xFFFFFFB5 | 8;
        v6 = (const std::ios_base *)((char *)v59 + *(_QWORD *)(v5 - 24));
        v7 = (_QWORD *)MEMORY[0x1E0DE4F50];
        v8 = MEMORY[0x1E0DE4FB8];
        if (v6[1].__fmtflags_ == -1)
        {
          std::ios_base::getloc(v6);
          v9 = std::locale::use_facet(&v56, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
          std::locale::~locale(&v56);
        }
        v10 = 0;
        v6[1].__fmtflags_ = 48;
        do
        {
          *(_QWORD *)((char *)&v59[3] + *(_QWORD *)(v59[0] - 24)) = 2;
          std::ostream::operator<<();
          ++v10;
        }
        while (v10 != 16);
        std::stringbuf::str();
        if (dword_1ED1ACCC0 >= 6)
        {
          locale = (const char *)&v56;
          if (v57 < 0)
            locale = (const char *)v56.__locale_;
          fprintf(*(FILE **)(v2 + 248), "Stream MD5: %s\n", locale);
        }
        if (v57 >= 0)
          v12 = (const char *)&v56;
        else
          v12 = (const char *)v56.__locale_;
        *(_QWORD *)(DerivedStorage + 1256) = CFStringCreateWithCString(0, v12, 0x8000100u);
        if (v57 < 0)
          operator delete(v56.__locale_);
        v58[0] = *v7;
        v13 = v7[9];
        *(_QWORD *)((char *)v58 + *(_QWORD *)(v58[0] - 24)) = v7[8];
        v59[0] = v13;
        v59[1] = v8 + 16;
        if (v60 < 0)
          operator delete((void *)v59[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1CAA43B3C](&v61);
      }
    }
    v14 = *(_QWORD *)(DerivedStorage + 1288);
    v15 = *(_DWORD *)(v14 + 10464);
    v16 = *(_DWORD *)(v14 + 10468) + v15;
    v17 = *(_BYTE *)(v14 + 447) ? *(double *)(v14 + 472) : *(double *)(v14 + 10544) / (double)v16;
    if (dword_1ED1ACCC0 >= 6)
    {
      v18 = *(_BYTE *)(v14 + 650);
      v19 = *(__int16 *)(v14 + 466);
      v20 = *(__int16 *)(v14 + 468);
      v21 = *(double *)(v14 + 10600);
      v22 = *(double *)(v14 + 10608);
      v23 = *(double *)(v14 + 10616);
      v24 = *(FILE **)(v14 + 248);
      fwrite("-----------------------------------------------------------------------------------------------------------\n", 0x6CuLL, 1uLL, v24);
      if (dword_1ED1ACCC0 >= 6)
      {
        fprintf(v24, "Total bits written: %llu, VPS/SPS/PPS bits: %u, NALU stream bits: %llu\n", 8 * (*(_QWORD *)(v14 + 10656) + *(unsigned int *)(v14 + 10664)), 8 * *(_DWORD *)(v14 + 10664), 8 * *(_QWORD *)(v14 + 10656));
        if (dword_1ED1ACCC0 >= 6)
        {
          LODWORD(v25) = *(_DWORD *)(v14 + 10464);
          fprintf(v24, "Avg {   PSNR[i]   }: Y = %6.2f, Cb = %6.2f, Cr = %6.2f\n", *(double *)(v14 + 10624) / (double)v25, *(double *)(v14 + 10632) / (double)v25, *(double *)(v14 + 10640) / (double)v25);
          if (dword_1ED1ACCC0 >= 6)
          {
            v26 = (double)(~(-1 << v18) * ~(-1 << v18)) * (double)(v20 * v19) * (double)v15;
            v27 = *(double *)(v14 + 10600);
            v28 = 999.0;
            v29 = 999.0;
            if (v27 > 0.0)
              v29 = log10(v26 / v27) * 10.0;
            v30 = v21 + v22;
            v31 = *(double *)(v14 + 10608);
            v32 = 999.0;
            if (v31 > 0.0)
              v32 = log10(v26 * 0.25 / v31) * 10.0;
            v33 = v30 + v23;
            v34 = *(double *)(v14 + 10616);
            v35 = 999.0;
            if (v34 > 0.0)
              v35 = log10(v26 * 0.25 / v34) * 10.0;
            if (v33 > 0.0)
              v28 = log10(v26 * 1.5 / v33) * 10.0;
            fprintf(v24, "PSNR{ Avg{MSE[i]} }: Y = %6.2f, Cb = %6.2f, Cr = %6.2f, Total = %6.2f\n", v29, v32, v35, v28);
            if (dword_1ED1ACCC0 >= 6)
            {
              fprintf(v24, "NALU stream bitrate (including SPS/PPS): %6.2f kbps @ %.2f fps\n", v17* (double)(8 * (*(_QWORD *)(v14 + 10656) + (unint64_t)*(unsigned int *)(v14 + 10664)))/ ((double)v16* 1000.0), v17 * (float)*(unsigned int *)(v14 + 10464) / (double)v16);
              if (dword_1ED1ACCC0 >= 6)
              {
                fwrite("-----------------------------------------------------------------------------------------------------------\n", 0x6CuLL, 1uLL, v24);
                if (dword_1ED1ACCC0 >= 6)
                {
                  fprintf(v24, "Frame(s) encoded/dropped/reencoded %u/%u/%u\n", *(_DWORD *)(v14 + 10464), *(_DWORD *)(v14 + 10468), *(_DWORD *)(v14 + 10480));
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    fprintf(v24, "Frame(s) dropped: before encoding/after encoding/after reencoding %u/%u/%u\n", *(_DWORD *)(v14 + 10476), *(_DWORD *)(v14 + 10472), *(_DWORD *)(v14 + 10484));
                    if (dword_1ED1ACCC0 >= 6)
                    {
                      LODWORD(v36) = *(_DWORD *)(v14 + 10464);
                      fprintf(v24, "Resolution: min/avg/max %ux%u/%ux%u/%ux%u\n", *(_DWORD *)(v14 + 10512), *(_DWORD *)(v14 + 10516), (*(double *)(v14 + 10496) / (double)v36), (*(double *)(v14 + 10504) / (double)v36), *(_DWORD *)(v14 + 10520), *(_DWORD *)(v14 + 10524));
                      if (dword_1ED1ACCC0 >= 6)
                      {
                        LODWORD(v37) = *(_DWORD *)(v14 + 10464);
                        fprintf(v24, "Frame rate: min/avg/max %.2f/%.2f/%.2f\n", *(double *)(v14 + 10552), *(double *)(v14 + 10544) / (double)v37, *(double *)(v14 + 10560));
                        if (dword_1ED1ACCC0 >= 6)
                        {
                          LODWORD(v38) = *(_DWORD *)(v14 + 10464);
                          fprintf(v24, "Frame QP: min/avg/max %.2f/%.2f/%.2f\n", (double)*(int *)(v14 + 10536), *(double *)(v14 + 10528) / (double)v38, (double)*(int *)(v14 + 10540));
                          if (dword_1ED1ACCC0 >= 6)
                          {
                            LODWORD(v39) = *(_DWORD *)(v14 + 10464);
                            fprintf(v24, "Transmission buffer delay: min/avg/max %.2f/%.2f/%.2f ms\n", (double)*(int *)(v14 + 10576), *(double *)(v14 + 10568) / (double)v39, (double)*(int *)(v14 + 10580));
                            if (dword_1ED1ACCC0 >= 6)
                            {
                              v40 = *(_DWORD *)(v14 + 10464);
                              v41 = -1.0;
                              v42 = -1.0;
                              if (v40 >= 0xB)
                              {
                                v41 = *(double *)(v14 + 10584) / (double)(v40 - 10);
                                v42 = (double)*(int *)(v14 + 10596);
                              }
                              fprintf(v24, "After first ten frames: avg/max %.2f/%.2f ms\n", v41, v42);
                              if (dword_1ED1ACCC0 >= 6)
                              {
                                LODWORD(v43) = *(_DWORD *)(v14 + 10488);
                                v44 = *(_DWORD *)(v14 + 10492);
                                v45 = 1.0 / (double)v43;
                                if (v44 == -1)
                                  v44 = *(_DWORD *)(v14 + 10464);
                                fprintf(v24, "VRA stability score: %.2f, min number of frames stayed at one resolution: %d\n", v45, v44);
                                v47 = dword_1ED1ACCC0;
                                v48 = *(_DWORD *)(v14 + 456);
                                if (!v48 && dword_1ED1ACCC0 >= 7)
                                {
                                  fwrite("Avg frame bytes by type:\n", 0x19uLL, 1uLL, v24);
                                  v49 = 0;
                                  v50 = dword_1ED1ACCC0;
                                  v51 = v14 + 10720;
                                  do
                                  {
                                    if (v50 >= 6)
                                    {
                                      v52 = *(unsigned int *)(v51 + 4 * v49);
                                      if ((_DWORD)v52)
                                        v53 = *(_QWORD *)(v51 + 8 * v49 - 48) / v52;
                                      else
                                        v53 = 0;
                                      fprintf(v24, "    %llu", v53);
                                      v50 = dword_1ED1ACCC0;
                                    }
                                    ++v49;
                                  }
                                  while (v49 != 6);
                                  if (v50 <= 5)
                                    return 0;
                                  fputc(10, v24);
                                  v47 = dword_1ED1ACCC0;
                                  v48 = *(_DWORD *)(v14 + 456);
                                }
                                if (!v48 && v47 > 6)
                                {
                                  v54 = *(_QWORD *)(v14 + 10400);
                                  if (!v54)
                                  {
LABEL_70:
                                    fwrite("-----------------------------------------------------------------------------------------------------------\n", 0x6CuLL, 1uLL, v24);
                                    return 0;
                                  }
                                  LODWORD(v46) = *(_DWORD *)(v54 + 1712);
                                  fprintf(v24, "bps (encoded, target, error): (%.0f, %.0f, %.3f)\n", v17* (double)(8* (*(_QWORD *)(v14 + 10656) + (unint64_t)*(unsigned int *)(v14 + 10664)))/ (double)v16, (double)v46, (v17* (double)(8* (*(_QWORD *)(v14 + 10656)+ (unint64_t)*(unsigned int *)(v14 + 10664)))/ (double)v16- (double)v46)/ (double)v46);
                                  v47 = dword_1ED1ACCC0;
                                }
                                if (v47 >= 6)
                                  goto LABEL_70;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1C9726BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;

  a21 = *v40;
  v43 = v40[9];
  *(uint64_t *)((char *)&a21 + *(_QWORD *)(a21 - 24)) = v40[8];
  a23 = v43;
  a24 = v41 + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA43B3C](&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9726C4C(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  CFTypeRef v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t **v9;

  v6 = &v7;
  v7 = a1;
  v3 = atomic_load(&qword_1EF920DF0);
  if (v3 != -1)
  {
    v9 = &v6;
    v8 = &v9;
    std::__call_once(&qword_1EF920DF0, &v8, (void (__cdecl *)(void *))sub_1C972DFF4);
  }
  if (qword_1EF920DE8)
  {
    if (a2)
    {
      v4 = CFRetain((CFTypeRef)qword_1EF920DE8);
      result = 0;
      *a2 = v4;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("CFDictionaryCreate failed\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "CFDictionaryCreate failed\n", v6, v7);
    }
    return 4294954392;
  }
  return result;
}

uint64_t sub_1C9726D24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5)
{
  int v6;
  unint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;

  v6 = a4;
  v8 = HIDWORD(a4);
  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 1272) = a2;
  *(_DWORD *)(DerivedStorage + 1300) = v6;
  *(_DWORD *)(DerivedStorage + 1304) = v8;
  *(_WORD *)(DerivedStorage + 12) = 0;
  if (a5)
    *(_QWORD *)(DerivedStorage + 1320) = CFRetain(a5);
  v10 = sub_1C974CF84(*(_DWORD *)(DerivedStorage + 8));
  if ((_DWORD)v10)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Error setting tile requirements\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Error setting tile requirements\n");
    }
  }
  else
  {
    v11 = *(_QWORD *)(DerivedStorage + 1288);
    *(_QWORD *)(v11 + 10448) = sub_1C972D640;
    *(_QWORD *)(v11 + 10456) = DerivedStorage;
  }
  return v10;
}

uint64_t sub_1C9726DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;

  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0uLL;
  v12 = (char *)operator new(0x320uLL, MEMORY[0x1E0DE4E10]);
  v13 = (uint64_t)v12;
  if (!v12)
    goto LABEL_8;
  bzero(v12 + 88, 0x2C8uLL);
  *(_QWORD *)(v13 + 96) = 0x186A0000280A0;
  *(_QWORD *)(v13 + 120) = 0x403E000000000000;
  *(_QWORD *)(v13 + 460) = 0;
  *(_QWORD *)(v13 + 452) = 0;
  *(_DWORD *)(v13 + 468) = 0;
  *(_DWORD *)(v13 + 356) = 1;
  *(_QWORD *)(v13 + 436) = 0;
  *(_QWORD *)(v13 + 444) = 0;
  *(_QWORD *)(v13 + 428) = 0;
  *(_DWORD *)(v13 + 660) = -1;
  *(_OWORD *)(v13 + 500) = 0u;
  *(_OWORD *)(v13 + 516) = 0u;
  *(_OWORD *)(v13 + 532) = 0u;
  *(_OWORD *)(v13 + 548) = 0u;
  *(_OWORD *)(v13 + 564) = 0u;
  *(_OWORD *)(v13 + 580) = 0u;
  *(_OWORD *)(v13 + 596) = 0u;
  *(_OWORD *)(v13 + 612) = 0u;
  *(_OWORD *)(v13 + 628) = 0u;
  *(_OWORD *)(v13 + 644) = 0u;
  *(_OWORD *)(v13 + 664) = 0u;
  *(_OWORD *)(v13 + 680) = 0u;
  *(_DWORD *)(v13 + 284) = -1;
  if (!a3)
    goto LABEL_8;
  *(_QWORD *)(v13 + 8) = a2;
  if (!*(_BYTE *)(DerivedStorage + 1313) && sub_1C972712C())
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Init failed\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Init failed\n");
    }
    goto LABEL_8;
  }
  if (sub_1C97A87F4(*(_QWORD *)(DerivedStorage + 1288), (uint64_t)&v25, a3, a4, a5, HIDWORD(a5)))
  {
LABEL_8:
    VTEncoderSessionEmitEncodedTile();
    if (v13)
    {
      sub_1C977F0D4((_QWORD *)(v13 + 88));
      MEMORY[0x1CAA43B9C](v13, 0x1070C40040150F9);
    }
    goto LABEL_10;
  }
  if (sub_1C972BDE0(DerivedStorage, (uint64_t *)&v25, v13, a6))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Setup failed\n", 0xDuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Setup failed\n");
    }
    goto LABEL_8;
  }
  v18 = *(_QWORD *)(DerivedStorage + 1288);
  v24 = v25;
  if (*((_QWORD *)&v25 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  sub_1C97A88B4(v18, &v24, v13, v13 + 88);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_10:
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return 0;
}

void sub_1C97270D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1C972CFE0((uint64_t)&a9);
  sub_1C972CFE0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1C9727108()
{
  uint64_t DerivedStorage;

  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sub_1C97A1348(*(_QWORD *)(DerivedStorage + 1288));
  return 0;
}

uint64_t sub_1C972712C()
{
  uint64_t v0;
  __CVBuffer *v1;
  __CVBuffer *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int IntegerCodePointForString;
  int v12;
  int v13;
  int v14;
  int v15;
  float v16;
  int v17;
  int v18;
  float v19;
  float v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const __CFString *v25;
  uint64_t v26;
  FILE **v27;
  FILE *v28;
  const char *CStringPtr;
  FILE *v30;
  const char *v31;
  FILE *v32;
  const char *v33;
  FILE *v34;
  const char *v35;
  FILE *v36;
  const char *v37;
  FILE *v38;
  const char *v39;
  FILE *v40;
  const char *v41;
  FILE *v42;
  const char *v43;
  uint64_t v44;
  int v45;
  int v46;
  OSType PixelFormatType;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  signed int v53;
  const __CFString *v54;
  uint64_t v55;
  const __CFString *v56;
  uint64_t v57;
  const __CFData *v58;
  unsigned int *BytePtr;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  const __CFData *v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unsigned int *v71;
  int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  char v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  CFTypeRef Attachment;
  CFTypeRef v122;
  const void *v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  unsigned __int16 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  char *v150;
  uint64_t v151;
  int v152;
  char *v153;
  uint64_t v154;
  FILE *v155;
  int v156;
  const char *v157;
  const char *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const __CFData *v172;
  int v173;
  char *v174;
  uint64_t v175;
  const UInt8 *v176;
  unsigned int v177;
  unint64_t v178;
  unsigned int v179;
  unsigned __int8 *v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  char v193;
  int v194;
  int v195;
  int v196;
  int v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int8 *v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  int *v224;
  char *v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE *v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  char v248;
  int v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  BOOL v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned __int8 *v258;
  BOOL v259;
  unsigned int v260;
  int v261;
  BOOL v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  int v276;
  BOOL v277;
  BOOL v278;
  BOOL v279;
  BOOL v280;
  int v281;
  int v282;
  uint64_t v283;
  unsigned __int16 *v284;
  uint64_t v285;
  uint64_t v287;
  uint64_t v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  unint64_t v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  int v309;
  __int16 v310;
  __CFDictionary *Mutable;
  __CFDictionary *v312;
  int v313;
  FILE *v314;
  const char *v315;
  const char *v316;
  size_t v317;
  __int128 v318;
  std::__shared_weak_count *v319;
  unint64_t *p_shared_owners;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v328;
  __int128 v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  _QWORD *v334;
  __int128 v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  int v346;
  int v347;
  unsigned int v348;
  int v349;
  uint64_t v350;
  int v351;
  int v352;
  unsigned int v353;
  uint64_t v354;
  unsigned int v355;
  const void *v356;
  const void *v357;
  const void *v358;
  const void *v359;
  unsigned __int16 VideoFormatDescription;
  uint64_t v361;
  char v362;
  int v363;
  _QWORD *v364;
  int v365;
  void *v366;
  uint64_t v367;
  int v368;
  int v369;
  uint64_t v370;
  unint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  int v374;
  dispatch_group_t v375;
  int v376;
  int v377;
  unint64_t v378;
  dispatch_semaphore_t v379;
  uint64_t *v380;
  uint64_t *v381;
  uint64_t v382;
  int v383;
  int v384;
  int v385;
  unsigned int v386;
  _WORD v387[3];
  char v388;
  char buffer[16];
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  void *v395;
  char v396;
  uint64_t v397;
  void *v398[2];
  char v399;
  void *__p;
  uint64_t v401;
  uint64_t v402;
  unsigned int *v403;
  unsigned int *v404;
  unint64_t v405;
  uint64_t v406;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v406 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(v0 + 8);
  if (!*(_QWORD *)(v0 + 1272))
  {
    if (v4 != 3)
      goto LABEL_8;
LABEL_7:
    *(_WORD *)(v0 + 12) = 0;
    *(_DWORD *)(v0 + 16) = 1;
    *(_DWORD *)(v0 + 144) = 40;
    goto LABEL_8;
  }
  if (*(_BYTE *)(v0 + 12))
    v5 = v4 == 3;
  else
    v5 = 1;
  if (v5)
    goto LABEL_7;
LABEL_8:
  v6 = *(_QWORD *)(v0 + 1376);
  v7 = *(_DWORD *)(v0 + 1384);
  v8 = *(_DWORD *)(v0 + 144);
  if (v8)
  {
    if (v8 != 41)
      goto LABEL_31;
    *(_DWORD *)(v0 + 144) = 0;
  }
  if (*(_BYTE *)(v0 + 12))
  {
    if (*(_BYTE *)(v0 + 13))
      v9 = 4;
    else
      v9 = 1;
    *(_DWORD *)(v0 + 1196) = v9;
    v10 = __clz(__rbit32(v9));
  }
  else
  {
    *(_DWORD *)(v0 + 16) = 1;
    *(_BYTE *)(v0 + 13) = 0;
    v10 = __clz(__rbit32(*(_DWORD *)(v0 + 1196))) & 0x1F;
  }
  *(_DWORD *)(v0 + 1200) = v10;
  if (*(_DWORD *)(v0 + 1220) == -1)
  {
    IntegerCodePointForString = CVColorPrimariesGetIntegerCodePointForString(*(CFStringRef *)(v0 + 72));
    v12 = CVTransferFunctionGetIntegerCodePointForString(*(CFStringRef *)(v3 + 80));
    v13 = CVYCbCrMatrixGetIntegerCodePointForString(*(CFStringRef *)(v3 + 88));
    if (IntegerCodePointForString == 9 && v12 == 16 && v13 == 9)
    {
      v14 = 2;
      if (dword_1ED1ACCC0 <= 5)
        goto LABEL_30;
      goto LABEL_29;
    }
    if (IntegerCodePointForString == 9 && v12 == 18 && v13 == 9)
    {
      v14 = 3;
      if (dword_1ED1ACCC0 < 6)
      {
LABEL_30:
        *(_DWORD *)(v3 + 1220) = v14;
        goto LABEL_31;
      }
LABEL_29:
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Changing hdr_type from %d to %d\n", *(_DWORD *)(v3 + 1220), v14);
      syslog(30, "Changing hdr_type from %d to %d\n", *(_DWORD *)(v3 + 1220), v14);
      goto LABEL_30;
    }
  }
LABEL_31:
  if (!*(_QWORD *)(v3 + 1272) && *(_DWORD *)(v3 + 144) != 40)
  {
    v18 = *(_DWORD *)(v3 + 28);
    if (v18 < 1)
    {
      v16 = *(float *)(v3 + 32);
      if (v16 >= 0.0)
      {
LABEL_36:
        *(_DWORD *)(v3 + 1328) = 1;
        v17 = *(unsigned __int8 *)(v3 + 172);
        if (!*(_BYTE *)(v3 + 172))
          goto LABEL_45;
        goto LABEL_37;
      }
      v17 = *(unsigned __int8 *)(v3 + 172);
      *(_DWORD *)(v3 + 1328) = v17;
      if (v17)
      {
LABEL_37:
        if (v16 < 0.0)
        {
          v15 = 30;
          goto LABEL_58;
        }
LABEL_45:
        if (v16 < 0.0)
          v16 = 0.75;
        if (v16 < 1.0)
          v19 = v16;
        else
          v19 = 1.0;
        v259 = v16 > 0.0;
        v20 = 0.0;
        if (v259)
          v20 = v19;
        v15 = a3210[(int)(v20 * 100.0 + 0.5)];
        if (v20 == 1.0 && v17 == 0)
        {
          v22 = *(_QWORD *)(v3 + 1288) + 360;
          buffer[0] = 0;
          sub_1C971D338(v22, 0x72868D48B2D5EBA3uLL, "lossless", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
        }
        goto LABEL_58;
      }
      if (!v18)
      {
        if (7 * *(_DWORD *)(v3 + 1300) * *(_DWORD *)(v3 + 1304) >= 800000000)
          v18 = 800000000;
        else
          v18 = 7 * *(_DWORD *)(v3 + 1300) * *(_DWORD *)(v3 + 1304);
        *(_DWORD *)(v3 + 28) = v18;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 1328) = 0;
    }
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x72351913690D14uLL, "bps", v18);
    goto LABEL_59;
  }
  if (!*(_BYTE *)(v3 + 156))
  {
    v16 = *(float *)(v3 + 32);
    goto LABEL_36;
  }
  *(_DWORD *)(v3 + 1328) = 2;
  v15 = *(_DWORD *)(v3 + 152);
LABEL_58:
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x8B74307B55C5E6FuLL, "iq", v15);
  v23 = *(_QWORD *)(v3 + 1288);
  v24 = sub_1C972D038();
  sub_1C97A5630(v23, 0x8D55707B5757DFAuLL, "pq", v24 + v15);
LABEL_59:
  v25 = *(const __CFString **)(v3 + 1208);
  if (v25)
  {
    CFStringGetCString(v25, buffer, 32, 0x8000100u);
    v26 = *(_QWORD *)(v3 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1C971D338(v26, 0xAAB8A388324B35B9, "loglevel", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  if (dword_1ED1ACCC0 >= 7)
  {
    v27 = (FILE **)MEMORY[0x1E0C80C20];
    fwrite("\n========================\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C20]);
    if (dword_1ED1ACCC0 >= 6)
    {
      fwrite("\n=== VTCompressionProperties.h === \n", 0x24uLL, 1uLL, *v27);
      if (dword_1ED1ACCC0 >= 6)
      {
        v28 = *v27;
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)v3, 0x8000100u);
        fprintf(v28, "profileLevelArg             = %s\n", CStringPtr);
        if (dword_1ED1ACCC0 >= 6)
        {
          fprintf(*v27, "profile                     = %u\n", *(_DWORD *)(v3 + 8));
          if (dword_1ED1ACCC0 >= 6)
          {
            fprintf(*v27, "allowTemporal               = %d\n", *(unsigned __int8 *)(v3 + 12));
            if (dword_1ED1ACCC0 >= 6)
            {
              fprintf(*v27, "allowB                      = %d\n", *(unsigned __int8 *)(v3 + 13));
              if (dword_1ED1ACCC0 >= 6)
              {
                fprintf(*v27, "droppablePOnly              = %d\n", *(unsigned __int8 *)(v3 + 14));
                if (dword_1ED1ACCC0 >= 6)
                {
                  fprintf(*v27, "maxKeyFrameInterval         = %u\n", *(_DWORD *)(v3 + 16));
                  if (dword_1ED1ACCC0 >= 6)
                  {
                    fprintf(*v27, "maxKeyFrameIntervalDuration = %f\n", *(float *)(v3 + 20));
                    if (dword_1ED1ACCC0 >= 6)
                    {
                      fprintf(*v27, "numberOfThreads             = %d\n", *(_DWORD *)(v3 + 24));
                      if (dword_1ED1ACCC0 >= 6)
                      {
                        fprintf(*v27, "targetBitsPerSec            = %d\n", *(_DWORD *)(v3 + 28));
                        if (dword_1ED1ACCC0 >= 6)
                        {
                          fprintf(*v27, "expectedFrameRate           = %f\n", *(double *)(v3 + 40));
                          if (dword_1ED1ACCC0 >= 6)
                          {
                            fprintf(*v27, "numberOfFramesToEncode      = %d\n", *(_DWORD *)(v3 + 48));
                            if (dword_1ED1ACCC0 >= 6)
                            {
                              fprintf(*v27, "sar_width                   = %u\n", *(_DWORD *)(v3 + 64));
                              if (dword_1ED1ACCC0 >= 6)
                              {
                                fprintf(*v27, "sar_height                  = %u\n", *(_DWORD *)(v3 + 68));
                                if (dword_1ED1ACCC0 >= 6)
                                {
                                  v30 = *v27;
                                  v31 = CFStringGetCStringPtr(*(CFStringRef *)(v3 + 72), 0x8000100u);
                                  fprintf(v30, "colorPrimaries              = %s\n", v31);
                                  if (dword_1ED1ACCC0 >= 6)
                                  {
                                    v32 = *v27;
                                    v33 = CFStringGetCStringPtr(*(CFStringRef *)(v3 + 80), 0x8000100u);
                                    fprintf(v32, "transferCharacteristics     = %s\n", v33);
                                    if (dword_1ED1ACCC0 >= 6)
                                    {
                                      v34 = *v27;
                                      v35 = CFStringGetCStringPtr(*(CFStringRef *)(v3 + 88), 0x8000100u);
                                      fprintf(v34, "matrixCoefficients          = %s\n", v35);
                                      if (dword_1ED1ACCC0 >= 6)
                                      {
                                        fwrite("\n=== VTCompressionPropertiesPrivate.h === \n", 0x2BuLL, 1uLL, *v27);
                                        if (dword_1ED1ACCC0 >= 6)
                                        {
                                          fprintf(*v27, "usage                       = %d\n", *(_DWORD *)(v3 + 144));
                                          if (dword_1ED1ACCC0 >= 6)
                                          {
                                            fprintf(*v27, "priority                    = %u\n", *(_DWORD *)(v3 + 148));
                                            if (dword_1ED1ACCC0 >= 6)
                                            {
                                              fwrite("\n=== VideoProcessing.h === \n", 0x1CuLL, 1uLL, *v27);
                                              if (dword_1ED1ACCC0 >= 6)
                                              {
                                                fprintf(*v27, "thermalLevel                = %d\n", *(_DWORD *)(v3 + 176));
                                                if (dword_1ED1ACCC0 >= 6)
                                                {
                                                  fprintf(*v27, "fUsingCellular              = %d\n", *(unsigned __int8 *)(v3 + 1193));
                                                  if (dword_1ED1ACCC0 >= 6)
                                                  {
                                                    fwrite("\n=== LRPVideoToolboxPrivateKeys.h === \n", 0x27uLL, 1uLL, *v27);
                                                    if (dword_1ED1ACCC0 >= 6)
                                                    {
                                                      fprintf(*v27, "sceneChangeIdrInsertion     = %d\n", *(unsigned __int8 *)(v3 + 1194));
                                                      if (dword_1ED1ACCC0 >= 6)
                                                      {
                                                        fprintf(*v27, "gopSize                     = %d\n", *(_DWORD *)(v3 + 1196));
                                                        if (dword_1ED1ACCC0 >= 6)
                                                        {
                                                          fprintf(*v27, "maxReorder                  = %d\n", *(_DWORD *)(v3 + 1204));
                                                          if (dword_1ED1ACCC0 >= 6)
                                                          {
                                                            v36 = *v27;
                                                            v37 = CFStringGetCStringPtr(*(CFStringRef *)(v3 + 1208), 0x8000100u);
                                                            fprintf(v36, "logLevel                    = %s\n", v37);
                                                            if (dword_1ED1ACCC0 >= 6)
                                                            {
                                                              fprintf(*v27, "md5                         = %d\n", *(unsigned __int8 *)(v3 + 1216));
                                                              if (dword_1ED1ACCC0 >= 6)
                                                              {
                                                                fprintf(*v27, "hdr_type                    = %d\n", *(_DWORD *)(v3 + 1220));
                                                                if (dword_1ED1ACCC0 >= 6)
                                                                {
                                                                  v38 = *v27;
                                                                  v39 = CFStringGetCStringPtr(*(CFStringRef *)(v3 + 1224), 0x8000100u);
                                                                  fprintf(v38, "hdr10MaxCLL                 = %s\n", v39);
                                                                  if (dword_1ED1ACCC0 >= 6)
                                                                  {
                                                                    v40 = *v27;
                                                                    v41 = CFStringGetCStringPtr(*(CFStringRef *)(v3 + 1232), 0x8000100u);
                                                                    fprintf(v40, "hdr10MasterDisplay          = %s\n", v41);
                                                                    if (dword_1ED1ACCC0 >= 6)
                                                                    {
                                                                      fprintf(*v27, "noiseLevelControl           = %d\n", *(unsigned __int8 *)(v3 + 1240));
                                                                      if (dword_1ED1ACCC0 >= 6)
                                                                      {
                                                                        fprintf(*v27, "schedulePolicy              = %d\n", *(_DWORD *)(v3 + 1244));
                                                                        if (dword_1ED1ACCC0 >= 6)
                                                                        {
                                                                          fwrite("\n=== others === \n", 0x11uLL, 1uLL, *v27);
                                                                          if (dword_1ED1ACCC0 >= 6)
                                                                          {
                                                                            fprintf(*v27, "codecType                   = %u\n", *(_DWORD *)(v3 + 1296));
                                                                            if (dword_1ED1ACCC0 >= 6)
                                                                            {
                                                                              fprintf(*v27, "dimensions                  = %dx%d\n", *(_DWORD *)(v3 + 1300), *(_DWORD *)(v3 + 1304));
                                                                              if (dword_1ED1ACCC0 >= 6)
                                                                              {
                                                                                v42 = *v27;
                                                                                v43 = CFStringGetCStringPtr(*(CFStringRef *)(v3 + 1248), 0x8000100u);
                                                                                fprintf(v42, "version_string              = %s\n", v43);
                                                                                if (dword_1ED1ACCC0 >= 6)
                                                                                  fwrite("\n========================\n", 0x1AuLL, 1uLL, *v27);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(_DWORD *)(v3 + 8))
    goto LABEL_114;
  v44 = *(_QWORD *)(v3 + 1288);
  snprintf(buffer, 0x10uLL, "%u", *(_DWORD *)(v3 + 8));
  LOBYTE(__p) = 0;
  sub_1C971D338(v44 + 360, 0x8ADD349E618BA10ELL, "profile", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  v45 = *(_DWORD *)(v3 + 8);
  v46 = 8;
  if (v45 <= 1891)
  {
    switch(v45)
    {
      case 0:
        goto LABEL_114;
      case 1:
      case 3:
        goto LABEL_115;
      case 2:
        goto LABEL_111;
      default:
        goto LABEL_112;
    }
    goto LABEL_115;
  }
  if (v45 > 2915)
  {
    if (v45 == 3044)
      goto LABEL_115;
    if (v45 != 2916)
      goto LABEL_112;
LABEL_111:
    v46 = 10;
    goto LABEL_115;
  }
  if (v45 == 1892)
    goto LABEL_111;
  if (v45 != 2020)
  {
LABEL_112:
    if (dword_1ED1ACCC0 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Specified profile %d, but we don't know the allowed bitdepth\n", *(_DWORD *)(v3 + 8));
      syslog(28, "Specified profile %d, but we don't know the allowed bitdepth\n", *(_DWORD *)(v3 + 8));
    }
LABEL_114:
    PixelFormatType = CVPixelBufferGetPixelFormatType(v2);
    v46 = sub_1C9717840(PixelFormatType);
  }
LABEL_115:
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x8C49EF6ED9F28EA0, "bit-depth", v46);
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xAF63E84C860200F0, "u", *(_DWORD *)(v3 + 144));
  snprintf(buffer, 0x40uLL, "%dx%d", *(_DWORD *)(v3 + 1300), *(_DWORD *)(v3 + 1304));
  v48 = *(_QWORD *)(v3 + 1288) + 360;
  LOBYTE(__p) = 0;
  sub_1C971D338(v48, 0xAF63D94C8601E773, "d", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  v49 = *(_DWORD *)(v3 + 144);
  if (v49 == 33)
  {
    v50 = 2;
    v51 = 4;
  }
  else if ((v49 - 34) >= 4)
  {
    if (v49 < 0)
    {
      v51 = 2;
      v50 = 2;
    }
    else
    {
      v50 = 2 * *(unsigned __int8 *)(v3 + 12);
      if (*(int *)(v3 + 1196) < 2)
        v51 = 2 * *(unsigned __int8 *)(v3 + 12);
      else
        v51 = *(_DWORD *)(v3 + 1200) + 1;
    }
  }
  else
  {
    v50 = 2;
    v51 = 5;
  }
  snprintf(buffer, 0x80uLL, "%d:%d:%d:%d", v51, 0, v50, v50);
  v52 = *(_QWORD *)(v3 + 1288) + 360;
  LOBYTE(__p) = 0;
  sub_1C971D338(v52, 0x89E9C01960F4C582, "ref", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  sub_1C97A56C8(*(_QWORD *)(v3 + 1288), 0x8984E07B541C091uLL, "fr", *(double *)(v3 + 40));
  v53 = CVPixelBufferGetPixelFormatType(v2);
  v54 = *(const __CFString **)(v3 + 1224);
  if (v54)
  {
    CFStringGetCString(v54, buffer, 50, 0x8000100u);
    v55 = *(_QWORD *)(v3 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1C971D338(v55, 0x3DC4253E192FDEDuLL, "max-cll", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  v56 = *(const __CFString **)(v3 + 1232);
  if (v56)
  {
    CFStringGetCString(v56, buffer, 200, 0x8000100u);
    v57 = *(_QWORD *)(v3 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1C971D338(v57, 0x90898E7CB0F4FE00, "master-display", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  v58 = *(const __CFData **)(v3 + 96);
  if (v58)
  {
    memset(buffer, 0, sizeof(buffer));
    v390 = 0;
    v392 = 0;
    v393 = 0;
    v394 = 0;
    BytePtr = (unsigned int *)CFDataGetBytePtr(v58);
    if (CFDataGetLength(*(CFDataRef *)(v3 + 96)) == 4 && !sub_1C971B944((uint64_t)buffer, BytePtr, 4))
    {
      v60 = (unsigned int *)(v392 + ((unint64_t)(SHIDWORD(v394) + 16) >> 3));
      if ((unint64_t)v60 >= v393)
      {
        if ((unint64_t)v60 > v393)
          v60 = (unsigned int *)v393;
        v61 = v394;
      }
      else
      {
        v61 = bswap32(*v60);
      }
      v62 = WORD1(v394);
      v63 = v61 << (BYTE4(v394) & 7);
      v394 = __PAIR64__(HIDWORD(v394), v63) & 0x7FFFFFFFFLL;
      if ((unint64_t)v60 + 2 > v393)
        v392 = v393;
      snprintf((char *)&__p, 0x32uLL, "%u:%u", v62, HIWORD(v63));
      v64 = *(_QWORD *)(v3 + 1288) + 360;
      LOBYTE(v398[0]) = 0;
      sub_1C971D338(v64, 0x3DC4253E192FDEDuLL, "max-cll", (char *)&__p, 0xFFFFFFFFLL, (uint64_t)v398);
    }
    if (*(_QWORD *)buffer)
      operator delete(*(void **)buffer);
  }
  v65 = *(const __CFData **)(v3 + 104);
  if (v65)
  {
    v401 = 0;
    __p = 0;
    v402 = 0;
    v403 = 0;
    v405 = 0;
    v404 = 0;
    v66 = (unsigned int *)CFDataGetBytePtr(v65);
    if (CFDataGetLength(*(CFDataRef *)(v3 + 104)) == 24 && !sub_1C971B944((uint64_t)&__p, v66, 24))
    {
      v67 = 0;
      v68 = v405;
      v69 = HIDWORD(v405);
      v70 = (unint64_t)v404;
      v71 = v403;
      v72 = BYTE4(v405) & 7;
      do
      {
        HIDWORD(v405) = v72;
        v73 = (unsigned int *)((char *)v71 + ((unint64_t)(v69 + 16) >> 3));
        v403 = v73;
        if ((unint64_t)v73 >= v70)
        {
          if ((unint64_t)v73 > v70)
            v73 = (unsigned int *)v70;
          v74 = v68;
        }
        else
        {
          v74 = bswap32(*v73);
        }
        *(_WORD *)((char *)v398 + v67 * 2) = HIWORD(v68);
        v75 = v74 << v72;
        v405 = __PAIR64__(v72, v75);
        v71 = (unsigned int *)((char *)v73 + 2);
        v403 = v71;
        if ((unint64_t)v71 >= v70)
        {
          if ((unint64_t)v71 > v70)
          {
            v403 = (unsigned int *)v70;
            v71 = (unsigned int *)v70;
          }
          v76 = v75;
        }
        else
        {
          v76 = bswap32(*v71);
        }
        v68 = v76 << v72;
        LODWORD(v405) = v68;
        v387[v67++] = HIWORD(v75);
        v69 = v72;
      }
      while (v67 != 3);
      HIDWORD(v405) = v72;
      v77 = (unsigned int *)((char *)v71 + 2);
      v403 = (unsigned int *)((char *)v71 + 2);
      if ((unint64_t)v71 + 2 >= v70)
      {
        if ((unint64_t)v71 + 2 > v70)
          v77 = (unsigned int *)v70;
        v78 = v68;
      }
      else
      {
        v78 = bswap32(*v77);
      }
      v79 = v78 << v72;
      v405 = __PAIR64__(v72, v79);
      v80 = (unsigned int *)((char *)v77 + 2);
      v403 = v80;
      if ((unint64_t)v80 >= v70)
      {
        if ((unint64_t)v80 > v70)
          v80 = (unsigned int *)v70;
        v81 = v79;
      }
      else
      {
        v81 = bswap32(*v80);
      }
      v82 = v81 << v72;
      v405 = __PAIR64__(v72, v82);
      v83 = (unsigned int *)((char *)v80 + 2);
      v403 = (unsigned int *)((char *)v80 + 2);
      if ((unint64_t)v80 + 2 >= v70)
      {
        if ((unint64_t)v80 + 2 > v70)
          v83 = (unsigned int *)v70;
        v84 = v82;
      }
      else
      {
        v84 = bswap32(*v83);
      }
      v85 = v84 << v72;
      v405 = __PAIR64__(v72, v85);
      v86 = (unsigned int *)((char *)v83 + 2);
      v403 = v86;
      if ((unint64_t)v86 >= v70)
      {
        if ((unint64_t)v86 > v70)
          v86 = (unsigned int *)v70;
        v87 = v85;
      }
      else
      {
        v87 = bswap32(*v86);
      }
      v88 = v82 & 0xFFFF0000;
      v89 = v87 << v72;
      v405 = __PAIR64__(v72, v89);
      v90 = (unsigned int *)((char *)v86 + 2);
      v403 = v90;
      if ((unint64_t)v90 >= v70)
      {
        if ((unint64_t)v90 > v70)
          v90 = (unsigned int *)v70;
        v91 = v89;
      }
      else
      {
        v91 = bswap32(*v90);
      }
      v92 = HIWORD(v68);
      v93 = HIWORD(v79);
      v94 = v89 & 0xFFFF0000;
      v95 = v91 << v72;
      v405 = __PAIR64__(v72, v95);
      if ((unint64_t)v90 + 2 > v70)
        v403 = (unsigned int *)v70;
      snprintf(buffer, 0xC8uLL, "%hu:%hu:%hu:%hu:%hu:%hu:%hu:%hu:%u:%u", LOWORD(v398[0]), v387[0], WORD1(v398[0]), v387[1], WORD2(v398[0]), v387[2], v92, v93, v88 | HIWORD(v85), v94 | HIWORD(v95));
      v96 = *(_QWORD *)(v3 + 1288) + 360;
      v388 = 0;
      sub_1C971D338(v96, 0x90898E7CB0F4FE00, "master-display", buffer, 0xFFFFFFFFLL, (uint64_t)&v388);
    }
    if (__p)
      operator delete(__p);
  }
  if (*(_QWORD *)(v3 + 112))
  {
    v401 = 0;
    __p = 0;
    v402 = 0;
    v403 = 0;
    v405 = 0;
    v404 = 0;
    sub_1C972D15C((uint64_t)buffer);
    v97 = (unsigned int *)CFDataGetBytePtr(*(CFDataRef *)(v3 + 112));
    if (CFDataGetLength(*(CFDataRef *)(v3 + 112)) == 8 && !sub_1C971B944((uint64_t)&__p, v97, 8))
    {
      v98 = BYTE4(v405) & 7;
      v99 = (unsigned int *)((char *)v403 + ((unint64_t)(SHIDWORD(v405) + 32) >> 3));
      if (v99 >= v404)
      {
        if (v99 > v404)
          v99 = v404;
        v100 = v405;
      }
      else
      {
        v100 = bswap32(*v99);
      }
      v101 = (unsigned int *)((char *)v99 + 2);
      if (v101 >= v404)
      {
        if (v101 > v404)
          v101 = v404;
        v102 = v100 << v98;
      }
      else
      {
        v102 = bswap32(*v101);
      }
      LODWORD(v405) = v102 << v98;
      HIDWORD(v405) = BYTE4(v405) & 7;
      v103 = (unsigned int *)((char *)v101 + 2);
      v403 = v103;
      if (v103 >= v404)
      {
        if (v103 > v404)
          v403 = v404;
        v104 = v102 << v98;
      }
      else
      {
        v104 = bswap32(*v103);
      }
      LODWORD(v405) = v104 << v98;
      v105 = (_QWORD *)std::ostream::operator<<();
      sub_1C972D288(v105);
      v106 = (_QWORD *)std::ostream::operator<<();
      sub_1C972D288(v106);
      std::ostream::operator<<();
      v107 = *(_QWORD *)(v3 + 1288);
      std::stringbuf::str();
      if (v399 >= 0)
        v108 = (char *)v398;
      else
        v108 = (char *)v398[0];
      LOBYTE(v387[0]) = 0;
      sub_1C971D338(v107 + 360, 0x6FFBA4D618E54C5DuLL, "ambient-viewing", v108, 0xFFFFFFFFLL, (uint64_t)v387);
      if (v399 < 0)
        operator delete(v398[0]);
    }
    *(_QWORD *)buffer = *MEMORY[0x1E0DE4F50];
    v109 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&buffer[*(_QWORD *)(*(_QWORD *)buffer - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v390 = v109;
    v391 = MEMORY[0x1E0DE4FB8] + 16;
    if (v396 < 0)
      operator delete(v395);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA43B3C](&v397);
    if (__p)
      operator delete(__p);
  }
  v110 = *(_DWORD *)(v3 + 1220);
  if (v110 == -1)
    goto LABEL_223;
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x272E34E2BFB32E6CuLL, "hdr-type", v110);
  v111 = *(_DWORD *)(v3 + 1220);
  if (v111 < 3)
  {
    v112 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v112, 0xB5C61104404590D6, "hdr-pq-deblock", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v113 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v113, 0x240E0E991FD2AE9BuLL, "hdr-pq-banding", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v114 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v114, 0xA8EDB06A6EA3063ELL, "hdr-pq-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v115 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v115, 0xE7A385CA7BF9D2E1, "hdr-pq-chroma-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v116 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v116, 0xEBAEEC9A08259398, "adaptive-hdr-chroma-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    goto LABEL_220;
  }
  if (v111 == 3)
  {
    v117 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v117, 0xB71C8689F9C18CECLL, "hdr-hlg-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    goto LABEL_220;
  }
  if (dword_1ED1ACCC0 < 4)
  {
LABEL_223:
    v120 = *(_QWORD *)(v3 + 1288);
    Attachment = CVBufferGetAttachment(v2, (CFStringRef)*MEMORY[0x1E0CA8CE8], 0);
    v122 = CVBufferGetAttachment(v2, (CFStringRef)*MEMORY[0x1E0CA8CE0], 0);
    if (Attachment)
      v123 = Attachment;
    else
      v123 = v122;
    if (v123)
    {
      if (v122 && !CFEqual(v123, v122) && dword_1ED1ACCC0 >= 4)
      {
        fwrite("Chroma siting for bottom field differs from top\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(28, "Chroma siting for bottom field differs from top\n");
      }
      if (!CFEqual(v123, (CFTypeRef)*MEMORY[0x1E0CA8D10]))
      {
        if (CFEqual(v123, (CFTypeRef)*MEMORY[0x1E0CA8D00]))
        {
          v124 = 1;
          goto LABEL_233;
        }
        if (CFEqual(v123, (CFTypeRef)*MEMORY[0x1E0CA8D20]))
        {
          v124 = 2;
          goto LABEL_233;
        }
        if (CFEqual(v123, (CFTypeRef)*MEMORY[0x1E0CA8D18]))
        {
          v124 = 3;
          goto LABEL_233;
        }
        if (CFEqual(v123, (CFTypeRef)*MEMORY[0x1E0CA8CF8]))
        {
          v124 = 4;
          goto LABEL_233;
        }
        if (CFEqual(v123, (CFTypeRef)*MEMORY[0x1E0CA8CF0]))
        {
          v124 = 5;
          goto LABEL_233;
        }
      }
    }
    v124 = 0;
LABEL_233:
    sub_1C97A5630(v120, 0xEADA4767E797268BLL, "vui-chroma-loc", v124);
    v125 = *(_QWORD *)(v3 + 1288);
    v126 = CVColorPrimariesGetIntegerCodePointForString(*(CFStringRef *)(v3 + 72));
    sub_1C97A5630(v125, 0x9FFE593DC10E7CC4, "vui-primaries", v126);
    v127 = *(_QWORD *)(v3 + 1288);
    v128 = CVTransferFunctionGetIntegerCodePointForString(*(CFStringRef *)(v3 + 80));
    sub_1C97A5630(v127, 0x2660BA38B42FDFB5uLL, "vui-transfer", v128);
    v129 = *(_QWORD *)(v3 + 1288);
    v130 = CVYCbCrMatrixGetIntegerCodePointForString(*(CFStringRef *)(v3 + 88));
    sub_1C97A5630(v129, 0xE961BACE8A163BCBLL, "vui-matrix-coeff", v130);
    goto LABEL_234;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "None of the hdr tuning parameters is enabled for hdr_type=%d.\n", *(_DWORD *)(v3 + 1220));
  syslog(28, "None of the hdr tuning parameters is enabled for hdr_type=%d.\n", *(_DWORD *)(v3 + 1220));
LABEL_220:
  v118 = *(_DWORD *)(v3 + 1220);
  if (v118 > 2)
    goto LABEL_223;
  if (v118 >= 2)
  {
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xEADA4767E797268BLL, "vui-chroma-loc", 2);
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x9FFE593DC10E7CC4, "vui-primaries", 9);
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x2660BA38B42FDFB5uLL, "vui-transfer", 16);
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xE961BACE8A163BCBLL, "vui-matrix-coeff", 9);
  }
  else
  {
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xEADA4767E797268BLL, "vui-chroma-loc", 0);
    snprintf(buffer, 0x28uLL, "%d/%lld", v7, v6);
    v119 = *(_QWORD *)(v3 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1C971D338(v119, 0x8984E07B541C091uLL, "fr", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
LABEL_234:
  if (v53 <= 1278226735)
  {
    if (v53 != 875704422)
    {
      v131 = 12344;
      goto LABEL_242;
    }
LABEL_241:
    v132 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v132, 0x3BEB44829B7A4FABuLL, "vui-full-range", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v131 = 12592;
LABEL_242:
    if (v53 != (v131 | 0x4C300000))
      goto LABEL_245;
    goto LABEL_243;
  }
  switch(v53)
  {
    case 1278226736:
LABEL_243:
      v133 = *(_QWORD *)(v3 + 1288) + 360;
      buffer[0] = 0;
      sub_1C971D338(v133, 0x3BEB44829B7A4FABuLL, "vui-full-range", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      v134 = *(_QWORD *)(v3 + 1288) + 360;
      buffer[0] = 0;
      sub_1C971D338(v134, 0xD1603A6EC53E98DFLL, "chroma", "mono", 0xFFFFFFFFLL, (uint64_t)buffer);
      break;
    case 1496395842:
      v135 = *(_QWORD *)(v3 + 1288) + 360;
      buffer[0] = 0;
      sub_1C971D338(v135, 0x9FA17F231CA2208DLL, "legacy-pixfmt", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      break;
    case 2019963440:
      goto LABEL_241;
  }
LABEL_245:
  if (*(_DWORD *)(v3 + 1220) <= 1u)
  {
    v136 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v136, 0x3BEB44829B7A4FABuLL, "vui-full-range", "false", 0xFFFFFFFFLL, (uint64_t)buffer);
  }
  snprintf(buffer, 0x40uLL, "%d:%d", *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 68));
  v137 = *(_QWORD *)(v3 + 1288) + 360;
  LOBYTE(__p) = 0;
  sub_1C971D338(v137, 0x4179B3C137C3CEB0uLL, "vui-sar", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  if (*(_BYTE *)(v3 + 14))
  {
    *(_DWORD *)(v3 + 1196) = 1;
    v138 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v138, 0x32468D84F55FB2A7uLL, "number-gop", "1", 0xFFFFFFFFLL, (uint64_t)buffer);
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xA72E681EA6EA2FFDLL, "gop-size", *(_DWORD *)(v3 + 1196));
    v139 = sub_1C972D038();
    snprintf(buffer, 0x80uLL, "1 P 1 %d 1 1 1 -1 1 0", v139);
    v140 = *(_QWORD *)(v3 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1C971D338(v140, 0x50F6C19BB163CD98uLL, "ref-struct", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  else if (*(_BYTE *)(v3 + 13) && *(int *)(v3 + 1196) >= 2)
  {
    v142 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v142, 0x32468D84F55FB2A7uLL, "number-gop", "1", 0xFFFFFFFFLL, (uint64_t)buffer);
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xA72E681EA6EA2FFDLL, "gop-size", *(_DWORD *)(v3 + 1196));
    snprintf(buffer, 0x80uLL, "0 L %d 3 0 2 2 %d %d 1 1 0", *(_DWORD *)(v3 + 1196), -*(_DWORD *)(v3 + 1196), -2 * *(_DWORD *)(v3 + 1196));
    v143 = *(_QWORD *)(v3 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1C971D338(v143, 0x50F6C19BB163CD98uLL, "ref-struct", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
    v144 = *(_DWORD *)(v3 + 1196);
    if (*(_DWORD *)(v3 + 144))
    {
      if (v144 >= 2)
      {
        v145 = 1;
        v146 = -1;
        do
        {
          snprintf(buffer, 0x80uLL, "%d R %d 4 1 2 2 %d %d 1 1 0", v145, v145, v146, v144 + v146);
          v147 = *(_QWORD *)(v3 + 1288) + 360;
          LOBYTE(__p) = 0;
          sub_1C971D338(v147, 0x50F6C19BB163CD98uLL, "ref-struct", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
          ++v145;
          v144 = *(_DWORD *)(v3 + 1196);
          --v146;
        }
        while (v145 < v144);
      }
    }
    else
    {
      if (v144 == 2)
      {
        v264 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v264, 0x50F6C19BB163CD98uLL, "ref-struct", "1 R 1 4 1 2 2 -1 1 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v144 = *(_DWORD *)(v3 + 1196);
      }
      if (v144 == 4)
      {
        v265 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v265, 0x50F6C19BB163CD98uLL, "ref-struct", "1 R 2 3 1 2 2 -2 2 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v266 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v266, 0x50F6C19BB163CD98uLL, "ref-struct", "2 R 1 4 2 3 2 -1 1 3 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v267 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v267, 0x50F6C19BB163CD98uLL, "ref-struct", "3 R 3 4 2 3 2 -1 1 -3 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v144 = *(_DWORD *)(v3 + 1196);
      }
      if (v144 == 8)
      {
        v268 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v268, 0x50F6C19BB163CD98uLL, "ref-struct", "1 R 4 2 1 2 2 -4 4 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v269 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v269, 0x50F6C19BB163CD98uLL, "ref-struct", "2 R 2 3 2 3 2 -2 2 6 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v270 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v270, 0x50F6C19BB163CD98uLL, "ref-struct", "3 R 1 4 3 4 2 -1 1 3 7 1 1 0 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v271 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v271, 0x50F6C19BB163CD98uLL, "ref-struct", "4 R 3 4 3 4 2 -3 -1 1 5 0 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v272 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v272, 0x50F6C19BB163CD98uLL, "ref-struct", "5 R 6 3 2 3 2 -6 -2 2 0 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v273 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v273, 0x50F6C19BB163CD98uLL, "ref-struct", "6 R 5 4 3 4 2 -5 -1 1 3 0 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        v274 = *(_QWORD *)(v3 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1C971D338(v274, 0x50F6C19BB163CD98uLL, "ref-struct", "7 R 7 4 3 3 2 -7 -1 1 0 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
      }
    }
  }
  v141 = *(_DWORD *)(v3 + 24);
  if (!v141)
  {
    if ((*(_DWORD *)(v3 + 144) - 33) > 4)
    {
      sub_1C971FF04();
      v141 = dword_1ED1ACCA0;
    }
    else
    {
      if (*(_DWORD *)(v3 + 1300) / 256 <= 1)
        v141 = 1;
      else
        v141 = *(_DWORD *)(v3 + 1300) / 256;
      *(_DWORD *)(v3 + 24) = v141;
      sub_1C971FF04();
      if (dword_1ED1ACCA4 < v141)
        v141 = dword_1ED1ACCA4;
    }
    *(_DWORD *)(v3 + 24) = v141;
  }
  sub_1C971FF04();
  if (dword_1ED1ACCA0 >= v141)
    v148 = v141;
  else
    v148 = dword_1ED1ACCA0;
  *(_DWORD *)(v3 + 24) = v148;
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xC0AB56BF45863635, "max-threads", v148);
  v149 = *(_DWORD *)(v3 + 144);
  if (v149 == 40 || !v149 && *(_BYTE *)(v3 + 1440))
    v150 = "auto";
  else
    v150 = "wavefront";
  v151 = *(_QWORD *)(v3 + 1288) + 360;
  buffer[0] = 0;
  sub_1C971D338(v151, 0xFE31B357AB72A0FuLL, "threading", v150, 0xFFFFFFFFLL, (uint64_t)buffer);
  v152 = *(_DWORD *)(v3 + 148);
  v153 = "low";
  if (v152 > 29)
  {
    if (v152 == 31)
      goto LABEL_282;
    if (v152 == 30)
    {
      v153 = "high";
      goto LABEL_282;
    }
  }
  else
  {
    if (v152 == 8)
      goto LABEL_282;
    if (v152 == 25)
    {
      v153 = "background";
      goto LABEL_282;
    }
  }
  v153 = "medium";
LABEL_282:
  v154 = *(_QWORD *)(v3 + 1288) + 360;
  buffer[0] = 0;
  sub_1C971D338(v154, 0xF5B6EA8C35AC1E89, "priority", v153, 0xFFFFFFFFLL, (uint64_t)buffer);
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x907E5BC0BE3F5F7FLL, "scene-idr", *(unsigned __int8 *)(v3 + 1194));
  if (dword_1ED1ACCC0 >= 7)
  {
    v155 = (FILE *)*MEMORY[0x1E0C80C10];
    v156 = *(_DWORD *)(v3 + 144);
    v157 = (const char *)sub_1C977F7DC((uint64_t)&unk_1E82924A0, v156);
    fprintf(v155, "glob->usage = %d (%s)\n", v156, v157);
    LODWORD(v155) = *(_DWORD *)(v3 + 144);
    v158 = (const char *)sub_1C977F7DC((uint64_t)&unk_1E82924A0, (int)v155);
    syslog(31, "glob->usage = %d (%s)\n", (_DWORD)v155, v158);
  }
  v159 = *(_DWORD *)(v3 + 144);
  if ((v159 - 33) <= 4)
  {
    v160 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v160, 0xBE27DAD503ACC303, "ref_selection", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v161 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v161, 0x9163BFEE0B8BBC39, "dec-reorder", "4", 0xFFFFFFFFLL, (uint64_t)buffer);
    v162 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v162, 0x8931489410D7395BLL, "global-threadpool", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v159 = *(_DWORD *)(v3 + 144);
  }
  if (!v159)
  {
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x9163BFEE0B8BBC39, "dec-reorder", *(_DWORD *)(v3 + 1200));
    if (dword_1ED1ACCC0 > 6 || *(_BYTE *)(v3 + 1216))
    {
      v163 = *(_QWORD *)(v3 + 1288) + 360;
      buffer[0] = 0;
      sub_1C971D338(v163, 0x7E8D690E31D04174uLL, "psnr", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      if (dword_1ED1ACCC0 >= 7)
      {
        v164 = *(_QWORD *)(v3 + 1288) + 360;
        buffer[0] = 0;
        sub_1C971D338(v164, 0x1E5485EF2E9F9384uLL, "time", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      }
    }
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xAF63DB4C8601EAD9, "f", *(_DWORD *)(v3 + 48));
  }
  if (*(_BYTE *)(v3 + 1216))
  {
    v165 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v165, 0x81988191775D1F3uLL, "md5", "1", 0xFFFFFFFFLL, (uint64_t)buffer);
  }
  v166 = *(_DWORD *)(v3 + 16);
  if (v166)
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x5C8E300840CF1DCCuLL, "idr-interval", v166);
  v167 = *(float *)(v3 + 20);
  if (v167 != 0.0)
    sub_1C97A56C8(*(_QWORD *)(v3 + 1288), 0x25B0C33846144F91uLL, "idr-duration", v167);
  if (*(_BYTE *)(v3 + 1240))
  {
    v168 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v168, 0xFC7DFD8BC570D29ELL, "noise-level-control", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    v169 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v169, 0x1E2005B3F5BEB950uLL, "satd-merge", "false", 0xFFFFFFFFLL, (uint64_t)buffer);
    v170 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v170, 0xC4BF903204850796, "fast-merge", "false", 0xFFFFFFFFLL, (uint64_t)buffer);
    v171 = *(_QWORD *)(v3 + 1288) + 360;
    buffer[0] = 0;
    sub_1C971D338(v171, 0x799736CC586FE042uLL, "num-merge-candidate", "3", 0xFFFFFFFFLL, (uint64_t)buffer);
  }
  v172 = *(const __CFData **)(v3 + 120);
  if (v172)
  {
    if (CFDataGetLength(*(CFDataRef *)(v3 + 120)) > 999)
    {
      LOBYTE(__p) = 0;
      v176 = CFDataGetBytePtr(v172);
      v177 = 0;
      v178 = 0;
      while (2)
      {
        v179 = 0;
        if (v177)
          v180 = byte_1C9861A00;
        else
          v180 = byte_1C98619D8;
        if (v177)
          v181 = 64;
        else
          v181 = 16;
        if (v177 == 3)
          v182 = 3;
        else
          v182 = 1;
        v384 = v182;
        v386 = v177;
        v385 = 4 << v177;
        do
        {
          v183 = v179 - 3;
          if (v179 < 3)
            v183 = v179;
          snprintf((char *)&__p, 0x100uLL, "%s%dX%d_%s", off_1E8292330[v179 > 2], v385, v385, off_1E8292340[v183]);
          if (v386 >= 2)
          {
            v184 = v178 + snprintf(&buffer[v178], 0x4000 - v178, "%s_DC =\n", (const char *)&__p);
            if (v184 >= 0x4000 || (v178 = v184 + snprintf(&buffer[v184], 0x4000 - v184, "%d\n", *v176), v178 >= 0x4000))
            {
LABEL_337:
              if (dword_1ED1ACCC0 <= 2)
                goto LABEL_341;
LABEL_340:
              fwrite("Buffer is too small\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(27, "Buffer is too small\n");
              goto LABEL_341;
            }
            ++v176;
          }
          v185 = v178 + snprintf(&buffer[v178], 0x4000 - v178, "%s =\n", (const char *)&__p);
          v186 = v185 >> 14;
          if (v185 >> 14)
            goto LABEL_337;
          do
          {
            *((_BYTE *)v398 + v180[v186]) = v176[v186];
            ++v186;
          }
          while (v181 != v186);
          v187 = 0;
          v176 += v186;
          do
            v185 += snprintf(&buffer[v185], 0x4000 - v185, "%d, ", *((unsigned __int8 *)v398 + v187++));
          while (v181 != v187);
          if (v185 >= 0x4000 || (v178 = v185 + snprintf(&buffer[v185], 0x4000 - v185, "\n\n"), v178 >= 0x4000))
          {
            if (dword_1ED1ACCC0 <= 2)
              goto LABEL_341;
            goto LABEL_340;
          }
          v179 += v384;
        }
        while (v179 < 6);
        v177 = v386 + 1;
        if (v386 != 3)
          continue;
        break;
      }
    }
    else if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("kVTCompressionPropertyKey_QuantizationScalingLists too small\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "kVTCompressionPropertyKey_QuantizationScalingLists too small\n");
    }
LABEL_341:
    v188 = *(_QWORD *)(v3 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1C971D338(v188, 0x92F39F846EC10A99, "scaling-list", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  else
  {
    v173 = *(_DWORD *)(v3 + 128);
    if (v173)
    {
      if (v173 == 1)
        v174 = "default";
      else
        v174 = "flat";
      v175 = *(_QWORD *)(v3 + 1288) + 360;
      buffer[0] = 0;
      sub_1C971D338(v175, 0x92F39F846EC10A99, "scaling-list", v174, 0xFFFFFFFFLL, (uint64_t)buffer);
    }
  }
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xA4FAC089B047A575, "schedule-policy", *(_DWORD *)(v3 + 1244));
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x818A639346385C5uLL, "required-sps-id", *(_DWORD *)(v3 + 160));
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xEC4CA737CBED8456, "required-pps-id", *(_DWORD *)(v3 + 164));
  sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x4BD00B7E61081A2BuLL, "alpha-layer-id", *(_DWORD *)(v3 + 168));
  if (*(_BYTE *)(v3 + 1441))
  {
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0x5ED5212C9D566C9DuLL, "use-cra", 1);
    sub_1C97A5630(*(_QWORD *)(v3 + 1288), 0xC4D0FEC7CD579487, "reencode-anti-pop", 0);
  }
  v189 = *(_QWORD *)(v3 + 1288);
  *(_DWORD *)(v189 + 11016) = 0;
  sub_1C96FC1D0(v189 + 360);
  v190 = *(_DWORD *)(v189 + 520);
  if (v190 <= 1)
    v190 = 1;
  *(_DWORD *)(v189 + 520) = v190;
  v191 = *(_DWORD *)(v189 + 544);
  if ((v191 & 4) != 0 && 2 << *(_BYTE *)(v189 + 538) >= *(__int16 *)(v189 + 466))
  {
    v191 &= ~4u;
    *(_DWORD *)(v189 + 544) = v191;
  }
  v192 = *(_DWORD *)(v189 + 524);
  if (!v192)
  {
    v192 = v190;
    if (v191 != 4)
    {
      v193 = *(_BYTE *)(v189 + 538);
      v194 = *(__int16 *)(v189 + 466) / (5 << v193);
      v192 = *(__int16 *)(v189 + 468) / (2 << v193);
      if (v192 >= v194)
        v192 = v194;
    }
  }
  if (v192 < v190)
    v190 = v192;
  if (v192 <= 1)
    v190 = 1;
  *(_DWORD *)(v189 + 524) = v190;
  v195 = *(unsigned __int8 *)(v189 + 429);
  if (*(_BYTE *)(v189 + 429))
  {
    if (*(char *)(v189 + 856) >= 1)
      *(_DWORD *)(v189 + 576) = 8;
    if (!*(_BYTE *)(v189 + 430))
      goto LABEL_367;
  }
  else if (!*(_BYTE *)(v189 + 430))
  {
    goto LABEL_370;
  }
  *(_BYTE *)(v189 + 492) = 0;
  *(_BYTE *)(v189 + 561) = 0;
  *(_BYTE *)(v189 + 572) = 0;
  *(_BYTE *)(v189 + 508) = 0;
  if (!v195 && dword_1ED1ACCC0 >= 4)
  {
    fwrite("Lossless inter coding is broken, disabling inter frames\n", 0x38uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(28, "Lossless inter coding is broken, disabling inter frames\n");
  }
  *(_BYTE *)(v189 + 429) = 1;
LABEL_367:
  if (*(_BYTE *)(v189 + 584))
  {
    *(_BYTE *)(v189 + 584) = 0;
    if (dword_1ED1ACCC0 >= 4)
    {
      fwrite("Reencode for IDR anti popping doesn't work for I only. Force disabled\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(28, "Reencode for IDR anti popping doesn't work for I only. Force disabled\n");
    }
  }
LABEL_370:
  if (!*(_DWORD *)(v189 + 656))
  {
    if (!*(_BYTE *)(v189 + 429) && dword_1ED1ACCC0 >= 4)
    {
      fwrite("Monochrome inter coding is broken, disabling inter frames\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(28, "Monochrome inter coding is broken, disabling inter frames\n");
    }
    *(_BYTE *)(v189 + 429) = 1;
  }
  if (*(_QWORD *)(v189 + 8136))
  {
    if (*(_BYTE *)(v189 + 497) && dword_1ED1ACCC0 >= 4)
    {
      fwrite("RDOQ not implemented for scaling lists, disabling RDOQ\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(28, "RDOQ not implemented for scaling lists, disabling RDOQ\n");
    }
    *(_BYTE *)(v189 + 497) = 0;
  }
  v196 = *(_DWORD *)(v189 + 544);
  if ((v196 & 2) != 0)
  {
    if (*(_BYTE *)(v189 + 446)
      || *(_BYTE *)(v189 + 447)
      || *(_BYTE *)(v189 + 585)
      || *(_BYTE *)(v189 + 529)
      || (v290 = *(_DWORD *)(v189 + 456)) != 0 && v290 != 40)
    {
      if (dword_1ED1ACCC0 >= 4)
      {
        fwrite("MPT isn't supported/tested with another enabled options; disabling MPT\n",
          0x47uLL,
          1uLL,
          (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(28, "MPT isn't supported/tested with another enabled options; disabling MPT\n");
        v196 = *(_DWORD *)(v189 + 544);
      }
      *(_DWORD *)(v189 + 544) = v196 & 0xFFFFFFFD;
    }
    else if (*(_BYTE *)(v189 + 572))
    {
      if (!*(_BYTE *)(v189 + 429))
      {
        *(_BYTE *)(v189 + 572) = 0;
        if (dword_1ED1ACCC0 >= 4)
        {
          fwrite("mpt does not support sao for now. Force disabled\n", 0x31uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(28, "mpt does not support sao for now. Force disabled\n");
        }
      }
    }
  }
  if (!*(_BYTE *)(v189 + 652) || !*(_BYTE *)(v189 + 653))
    *(_WORD *)(v189 + 652) = *(_WORD *)(v189 + 650);
  v197 = *(_DWORD *)(v189 + 656);
  if (v197 >= 2)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unsupported chroma format idc %d\n", *(_DWORD *)(v189 + 656));
      syslog(27, "Unsupported chroma format idc %d\n", *(_DWORD *)(v189 + 656));
LABEL_555:
      LOWORD(v289) = -12902;
      goto LABEL_556;
    }
    goto LABEL_705;
  }
  if (!v197)
    *(_BYTE *)(v189 + 908) = 1;
  if (*(_BYTE *)(v189 + 952))
  {
    *(_BYTE *)(v189 + 594) = 1;
  }
  else
  {
    *(_QWORD *)(v189 + 7868) = 0x100000000;
    *(_DWORD *)(v189 + 608) = 1;
    *(_DWORD *)(v189 + 640) = 1;
    *(_BYTE *)(v189 + 956) = 0;
    if (*(_BYTE *)(v189 + 594))
      v198 = 76;
    else
      v198 = 80;
    *(_BYTE *)(v189 + 957) = v198;
    *(_BYTE *)(v189 + 960) = *(_BYTE *)(v189 + 489) - *(_BYTE *)(v189 + 488);
    *(_WORD *)(v189 + 958) = 256;
    v199 = *(unsigned __int8 *)(v189 + 528);
    *(_BYTE *)(v189 + 961) = v199;
    *(_BYTE *)(v189 + 962) = *(_BYTE *)(v189 + 530);
    *(_BYTE *)(v189 + 1044) = 0;
    if (v199)
    {
      v200 = 0;
      v201 = v189 + 1028;
      v202 = -1;
      do
      {
        *(_DWORD *)(v201 + 4 * v200 - 64) = v202;
        *(_BYTE *)(v201 + v200) = 1;
        --v202;
        ++v200;
      }
      while (v199 != v200);
    }
  }
  if (!*(_BYTE *)(v189 + 429))
  {
    v251 = *(unsigned int *)(v189 + 604);
    if ((int)v251 >= 1)
    {
      v252 = 0;
      v253 = 0;
      v254 = 0;
      while (1)
      {
        v255 = *(_DWORD *)(v189 + 4 * v252 + 608);
        if (v255 >= 1)
          break;
LABEL_465:
        v253 = ++v252 >= v251;
        if (v252 == v251)
          goto LABEL_554;
      }
      v256 = 0;
      v257 = v254 + v255;
      v258 = (unsigned __int8 *)(v189 + 962 + 108 * v254);
      while (1)
      {
        v259 = !*(v258 - 3) || v255 < *(v258 - 3);
        if (v259)
          break;
        v260 = *(v258 - 5) - 76;
        v259 = v260 > 6;
        v261 = (1 << v260) & 0x51;
        if (v259 || v261 == 0)
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("(gop_list_[frm_num].frame_type == 'P') || (gop_list_[frm_num].frame_type == 'R') || (gop_list_[frm_num].frame_type == 'L') failed!\n", 0x83uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "(gop_list_[frm_num].frame_type == 'P') || (gop_list_[frm_num].frame_type == 'R') || (gop_list_[frm_num].frame_type == 'L') failed!\n");
          }
          goto LABEL_554;
        }
        if (*v258 > *(v258 - 1))
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("gop_list_[frm_num].number_ref_active <= gop_list_[frm_num].number_ref_all failed!\n", 0x52uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "gop_list_[frm_num].number_ref_active <= gop_list_[frm_num].number_ref_all failed!\n");
          }
          goto LABEL_554;
        }
        ++v256;
        v258 += 108;
        if (v255 == v256)
        {
          v254 = v257;
          goto LABEL_465;
        }
      }
      if (dword_1ED1ACCC0 > 2)
      {
        fwrite("(gop_list_[frm_num].poc > 0) && (gop_list_[frm_num].poc <= gop_size_[gop_id]) failed!\n", 0x56uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "(gop_list_[frm_num].poc > 0) && (gop_list_[frm_num].poc <= gop_size_[gop_id]) failed!\n");
      }
LABEL_554:
      if (!v253)
        goto LABEL_555;
    }
  }
  *(_DWORD *)(v189 + 7868) = 0;
  v203 = *(_DWORD *)(v189 + 604);
  if (v203 >= 1)
  {
    v204 = 0;
    v205 = 0;
    v206 = 0;
    while (1)
    {
      *(_DWORD *)buffer = 0;
      v207 = v189 + 4 * v205;
      v208 = *(_DWORD *)(v207 + 608);
      if (v208 >= 1)
        break;
      v211 = v204;
LABEL_446:
      v206 += v208;
      *(_DWORD *)(v207 + 7876) = v211 - v204;
      ++v205;
      v204 = v211;
      if (v205 >= v203)
        goto LABEL_467;
    }
    v209 = 0;
    v210 = 0;
    v211 = v204;
    v212 = 1;
    while (1)
    {
      v213 = v210 / v208 * v208;
      v214 = v210 - v213 + v206;
      v215 = v189 + 108 * v214;
      v216 = v213 + *(unsigned __int8 *)(v215 + 959);
      v217 = *(unsigned __int8 *)(v215 + 961);
      if (*(_BYTE *)(v215 + 961))
      {
        v218 = 0;
        v219 = (unsigned __int8 *)(v215 + 961);
        v220 = 4 * v212;
        while (2)
        {
          v221 = *(_DWORD *)(v189 + 108 * (int)v214 + 4 * v218 + 964) + v216;
          if (v221 < 0)
          {
            v228 = 0;
            v229 = 0;
            v230 = *(int *)(v189 + 7872) + (uint64_t)(int)v211;
            v231 = v189 + 956 + 108 * v230;
            *(_BYTE *)(v231 + 3) = v216;
            v232 = (_BYTE *)(v231 + 3);
            v233 = v189 + 956 + 108 * (int)v214;
            *((_WORD *)v232 - 1) = *(_WORD *)(v233 + 1);
            v232[1] = *(_BYTE *)(v233 + 4);
            v234 = v189 + 108 * (int)v214;
            do
            {
              v235 = *(_DWORD *)(v234 + 4 * v228 + 964);
              if (v235 > ~v216)
              {
                v217 = v189 + 108 * v230 + 956;
                *(_DWORD *)(v217 + 4 * v229 + 8) = v235;
                *(_BYTE *)(v217 + v229++ + 72) = *(_BYTE *)(v234 + v228 + 1028);
                LODWORD(v217) = *v219;
              }
              ++v228;
            }
            while (v228 < v217);
            v236 = *(_DWORD *)(v189 + 7868);
            v237 = v189 + 956;
            v238 = v189 + 956 + 108 * v230;
            *(_BYTE *)(v238 + 5) = v229;
            *(_BYTE *)(v238 + 6) = *(_BYTE *)(v189 + 956 + 108 * (int)v214 + 6);
            if (v236)
            {
              v239 = 0;
              v240 = (int)v230 - 1;
              v241 = v237 + 108 * v240;
              v242 = *(unsigned __int8 *)(v241 + 5);
              v243 = (_BYTE *)(v237 + 108 * v230);
              v243[90] = v242 + 1;
              v244 = *(unsigned __int8 *)(v241 + 3);
              v243[88] = 1;
              v243[89] = v244 - *v232;
              v245 = v189 + 108 * v230;
              do
              {
                v246 = v244;
                if (v239 != v242)
                  v246 = *(_DWORD *)(v189 + 108 * v240 + 4 * v239 + 964) + v244;
                if ((_BYTE)v229)
                {
                  v247 = 0;
                  v248 = 0;
                  do
                  {
                    if (v246 == *(_DWORD *)(v245 + 4 * v247 + 964) + v216)
                    {
                      if (*(_BYTE *)(v245 + v247 + 1028))
                        v248 = 1;
                      else
                        v248 = 2;
                    }
                    ++v247;
                  }
                  while (v229 != v247);
                }
                else
                {
                  v248 = 0;
                }
                *(_BYTE *)(v189 + 108 * v230 + v239 + 1047) = v248;
                v5 = v239++ == v242;
              }
              while (!v5);
              v249 = *(_DWORD *)(v189 + 7868);
            }
            else
            {
              v249 = 0;
              v250 = v189 + 108 * v230;
              *(_BYTE *)(v250 + 1044) = 0;
              *(_BYTE *)(v250 + 1046) = 0;
            }
            v211 = (v249 + 1);
            *(_DWORD *)(v189 + 7868) = v211;
            v214 = *(_DWORD *)(v189 + 7872) + v249;
            LODWORD(v217) = *(unsigned __int8 *)(v189 + 108 * v214 + 961);
            goto LABEL_418;
          }
          v222 = 0;
          while (v221 != *(_DWORD *)&buffer[v222])
          {
            v222 += 4;
            if (v220 == v222)
            {
              if (dword_1ED1ACCC0 >= 3)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "Reference %d not avail for frame %d of gop %d\n", v221, v216, v205);
                syslog(27, "Reference %d not avail for frame %d of gop %d\n", v221, v216, v205);
              }
              goto LABEL_555;
            }
          }
          if (++v218 != v217)
            continue;
          break;
        }
      }
      ++v209;
LABEL_418:
      v223 = v217;
      if ((_DWORD)v217)
      {
        v224 = (int *)(v189 + 964 + 108 * (int)v214);
        v225 = buffer;
        v226 = v223;
        do
        {
          v227 = *v224++;
          *(_DWORD *)v225 = v227 + v216;
          v225 += 4;
          --v226;
        }
        while (v226);
      }
      *(_DWORD *)&buffer[4 * v223] = v216;
      v212 = v223 + 1;
      ++v210;
      v208 = *(_DWORD *)(v207 + 608);
      if (v209 >= v208)
      {
        v203 = *(_DWORD *)(v189 + 604);
        goto LABEL_446;
      }
    }
  }
LABEL_467:
  v263 = *(_BYTE *)(v189 + 898) && !*(_BYTE *)(v189 + 429) || (*(_BYTE *)(v189 + 887) & 6) != 0;
  *(_BYTE *)(v189 + 897) = v263;
  v275 = *(unsigned __int8 *)(v189 + 481);
  *(_BYTE *)(v189 + 482) = v275 < 3;
  if (v275 >= 3)
  {
    v277 = 0;
    *(_BYTE *)(v189 + 483) = 0;
  }
  else
  {
    v276 = *(unsigned __int8 *)(v189 + 494);
    *(_BYTE *)(v189 + 483) = *(_BYTE *)(v189 + 494) == 0;
    if (v276)
      v277 = 0;
    else
      v277 = *(_BYTE *)(v189 + 493) == 0;
  }
  *(_BYTE *)(v189 + 484) = v277;
  v278 = (v275 | 2) == 2 && *(char *)(v189 + 492) > 0;
  v279 = 0;
  *(_BYTE *)(v189 + 485) |= v278;
  if (v275 == 3 && *(_BYTE *)(v189 + 487))
  {
    if (*(_BYTE *)(v189 + 494))
      v279 = 0;
    else
      v279 = *(_BYTE *)(v189 + 493) == 0;
  }
  *(_BYTE *)(v189 + 487) = v279;
  if (*(_DWORD *)(v189 + 756))
    *(_BYTE *)(v189 + 737) = 1;
  if (*(_BYTE *)(v189 + 912))
    v280 = 1;
  else
    v280 = *(_BYTE *)(v189 + 914) != 0;
  *(_BYTE *)(v189 + 913) |= v280;
  if (*(_BYTE *)(v189 + 910)
    && *(char *)(v189 + 868) >= (int)*(unsigned __int8 *)(v189 + 538)
    && !*(_BYTE *)(v189 + 892))
  {
    if (dword_1ED1ACCC0 >= 7)
    {
      fwrite("Turn off CU combine since full mode is always checked\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(31, "Turn off CU combine since full mode is always checked\n");
    }
    *(_BYTE *)(v189 + 910) = 0;
  }
  if (*(_BYTE *)(v189 + 911) && *(_BYTE *)(v189 + 856) != 4)
  {
    if (dword_1ED1ACCC0 >= 7)
    {
      fwrite("Turn off auto recon skip, it's only supported in full RD\n", 0x39uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(31, "Turn off auto recon skip, it's only supported in full RD\n");
    }
    *(_BYTE *)(v189 + 911) = 0;
  }
  v281 = -6 * *(char *)(v189 + 650) + 48;
  v282 = *(char *)(v189 + 488);
  if (v281 > v282)
    v282 = -6 * *(char *)(v189 + 650) + 48;
  if (v282 >= 51)
    LOBYTE(v282) = 51;
  *(_BYTE *)(v189 + 488) = v282;
  if (v281 <= *(char *)(v189 + 489))
    v281 = *(char *)(v189 + 489);
  if (v281 >= 51)
    LOBYTE(v281) = 51;
  *(_BYTE *)(v189 + 489) = v281;
  if (*(_BYTE *)(v189 + 552) && !*(_DWORD *)(v189 + 548))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("bps_ > 0 failed!\n", 0x11uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "bps_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(_WORD *)(v189 + 464))
  {
    v283 = 0;
    v284 = word_1C9833364;
LABEL_525:
    v285 = 0;
    while (!v284[v285] || v284[v285] != *(unsigned __int16 *)(v189 + 464))
    {
      if (++v285 == 3)
      {
        ++v283;
        v284 += 3;
        if (v283 != 6)
          goto LABEL_525;
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("ProfileTierLevel::IsLevelIdcValid(level_) failed!\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "ProfileTierLevel::IsLevelIdcValid(level_) failed!\n");
          goto LABEL_555;
        }
        goto LABEL_705;
      }
    }
  }
  if (*(__int16 *)(v189 + 466) < 1 || *(__int16 *)(v189 + 468) <= 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("width_ > 0 && height_ > 0 failed!\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "width_ > 0 && height_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(double *)(v189 + 472) <= 0.0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("expected_fps_ > 0 failed!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "expected_fps_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(int *)(v189 + 512) <= 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("number_frames_ > 0 failed!\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "number_frames_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if ((*(_DWORD *)(v189 + 516) & 0x80000000) != 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("frame_skip_interval_ >= 0 failed!\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "frame_skip_interval_ >= 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v287 = *(unsigned __int8 *)(v189 + 537);
  if ((v287 - 3) >= 4)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2_min_cu_size_ of %lld is out of range (%lld, %lld)\n", v287, 3, 6);
      syslog(27, "log2_min_cu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v189 + 537), 3, 6);
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v288 = *(unsigned __int8 *)(v189 + 538);
  if ((v288 - 4) >= 3)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2_max_cu_size_ of %lld is out of range (%lld, %lld)\n", v288, 4, 6);
      syslog(27, "log2_max_cu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v189 + 538), 4, 6);
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (v288 < v287)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("log2_max_cu_size_ >= log2_min_cu_size_ failed!\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "log2_max_cu_size_ >= log2_min_cu_size_ failed!\n");
      goto LABEL_555;
    }
LABEL_705:
    LOWORD(v289) = -12902;
    return (__int16)v289;
  }
  v291 = *(unsigned __int8 *)(v189 + 539);
  if ((v291 - 2) >= 4)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2_min_tu_size_ of %lld is out of range (%lld, %lld)\n", v291, 2, 5);
      syslog(27, "log2_min_tu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v189 + 539), 2, 5);
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v292 = *(unsigned __int8 *)(v189 + 540);
  if ((v292 - 2) >= 4)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "log2_max_tu_size_ of %lld is out of range (%lld, %lld)\n", v292, 2, 5);
      syslog(27, "log2_max_tu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v189 + 540), 2, 5);
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (v292 < v291)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("log2_max_tu_size_ >= log2_min_tu_size_ failed!\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "log2_max_tu_size_ >= log2_min_tu_size_ failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v293 = *(unsigned __int8 *)(v189 + 541);
  v294 = v288 - v291;
  if (v294 < v293)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "max_hierarchy_tu_intra_ of %lld is out of range (%lld, %lld)\n", v293, 0, v294);
      syslog(27, "max_hierarchy_tu_intra_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v189 + 541), 0, *(unsigned __int8 *)(v189 + 538) - (unint64_t)*(unsigned __int8 *)(v189 + 539));
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v295 = *(unsigned __int8 *)(v189 + 542);
  if (v294 < v295)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "max_hierarchy_tu_inter_ of %lld is out of range (%lld, %lld)\n", v295, 0, v294);
      syslog(27, "max_hierarchy_tu_inter_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v189 + 542), 0, *(unsigned __int8 *)(v189 + 538) - (unint64_t)*(unsigned __int8 *)(v189 + 539));
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (v288 < v292)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("log2_max_cu_size_ >= log2_max_tu_size_ failed!\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "log2_max_cu_size_ >= log2_max_tu_size_ failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  HIDWORD(v297) = *(_DWORD *)(v189 + 576);
  LODWORD(v297) = HIDWORD(v297) - 4;
  v296 = v297 >> 2;
  if (v296 > 7 || ((1 << v296) & 0x8B) == 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("max_satd_luma_size_ == 4 || max_satd_luma_size_ == 8 || max_satd_luma_size_ == 16 || max_satd_luma_size_ == 32 failed!\n", 0x77uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "max_satd_luma_size_ == 4 || max_satd_luma_size_ == 8 || max_satd_luma_size_ == 16 || max_satd_luma_size_ == 32 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(unsigned __int8 *)(v189 + 857) >= 2u)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("fast_intra_ == 0 || fast_intra_ == 1 failed!\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "fast_intra_ == 0 || fast_intra_ == 1 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v298 = *(unsigned __int8 *)(v189 + 858);
  if (v298 >= 4)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("intra_early_termination_ >= kNoIntraET && intra_early_termination_ <= kIntraETALLLimited failed!\n", 0x61uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "intra_early_termination_ >= kNoIntraET && intra_early_termination_ <= kIntraETALLLimited failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (v298 >= 2)
  {
    if ((*(_BYTE *)(v189 + 889) & 8) != 0)
      goto LABEL_605;
LABEL_628:
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("((intra_early_termination_ >= kIntraETAll) && (skip_mode_bias_ & kBypassIntraWhenSkip)) || ((intra_early_termination_ < kIntraETAll) && !(skip_mode_bias_ & kBypassIntraWhenSkip)) failed!\n", 0xBBuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "((intra_early_termination_ >= kIntraETAll) && (skip_mode_bias_ & kBypassIntraWhenSkip)) || ((intra_early_termination_ < kIntraETAll) && !(skip_mode_bias_ & kBypassIntraWhenSkip)) failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if ((*(_BYTE *)(v189 + 889) & 8) != 0)
    goto LABEL_628;
LABEL_605:
  if (*(char *)(v189 + 861) >= 5)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("num_intra_rd_candidate_ <= 4 failed!\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "num_intra_rd_candidate_ <= 4 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(unsigned __int8 *)(v189 + 859) >= 3u)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("fast_intra_chroma_ >= kNoFastIntraChroma && fast_intra_chroma_ <= kFastIntraChromaLimited failed!\n", 0x62uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "fast_intra_chroma_ >= kNoFastIntraChroma && fast_intra_chroma_ <= kFastIntraChromaLimited failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(unsigned __int8 *)(v189 + 572) >= 4u)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("sao_ >= kSaoOff && sao_ <= kSaoChromaOnly failed!\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "sao_ >= kSaoOff && sao_ <= kSaoChromaOnly failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v299 = *(char *)(v189 + 492);
  if (v299 >= 6)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "qpm_ of %lld is out of range (%lld, %lld)\n", v299, 0, 5);
      syslog(27, "qpm_ of %lld is out of range (%lld, %lld)\n", *(char *)(v189 + 492), 0, 5);
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(_BYTE *)(v189 + 492))
  {
    v300 = *(char *)(v189 + 496);
    v301 = v288 - v287;
    if (v300 < 0 || v301 < v300)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "dqp_depth_ of %lld is out of range (%lld, %lld)\n", v300, 0, v301);
        syslog(27, "dqp_depth_ of %lld is out of range (%lld, %lld)\n", *(char *)(v189 + 496), 0, *(unsigned __int8 *)(v189 + 538) - (unint64_t)*(unsigned __int8 *)(v189 + 537));
        goto LABEL_555;
      }
      goto LABEL_705;
    }
    v302 = *(char *)(v189 + 493);
    if (v302 >= 5)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "qpm_param_ of %lld is out of range (%lld, %lld)\n", v302, 0, 4);
        syslog(27, "qpm_param_ of %lld is out of range (%lld, %lld)\n", *(char *)(v189 + 493), 0, 4);
        goto LABEL_555;
      }
      goto LABEL_705;
    }
    v303 = *(char *)(v189 + 494);
    if (v303 >= 4)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "qpm_eq_ of %lld is out of range (%lld, %lld)\n", v303, 0, 3);
        syslog(27, "qpm_eq_ of %lld is out of range (%lld, %lld)\n", *(char *)(v189 + 494), 0, 3);
        goto LABEL_555;
      }
      goto LABEL_705;
    }
  }
  if (*(_BYTE *)(v189 + 585) && *(char *)(v189 + 529) + *(char *)(v189 + 528) >= 5)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("number_short_term_ref_in_dpb_+number_long_term_ref_in_dpb_+2 <= kMaxDpbSizeFrameAck failed!\n", 0x5CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "number_short_term_ref_in_dpb_+number_long_term_ref_in_dpb_+2 <= kMaxDpbSizeFrameAck failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  v304 = *(char *)(v189 + 444);
  if (v304 >= 4)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "adaptive_cudepth_ of %lld is out of range (%lld, %lld)\n", v304, 0, 3);
      syslog(27, "adaptive_cudepth_ of %lld is out of range (%lld, %lld)\n", *(char *)(v189 + 444), 0, 3);
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (!*(_BYTE *)(v189 + 492) && *(_BYTE *)(v189 + 714))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("qpm_ > 0 failed!\n", 0x11uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "qpm_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(_BYTE *)(v189 + 898) && !*(_BYTE *)(v189 + 429) && !*(_BYTE *)(v189 + 897))
  {
    if (dword_1ED1ACCC0 < 3)
      goto LABEL_705;
    goto LABEL_661;
  }
  if ((*(_BYTE *)(v189 + 887) & 6) != 0 && !*(_BYTE *)(v189 + 897))
  {
    if (dword_1ED1ACCC0 < 3)
      goto LABEL_705;
LABEL_661:
    fwrite("update_enc_md_info_ failed!\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "update_enc_md_info_ failed!\n");
    goto LABEL_555;
  }
  if (*(_BYTE *)(v189 + 712) && *(_BYTE *)(v189 + 713))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("!(isp_driven_wp_ && en_analyze_wp_) failed!\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "!(isp_driven_wp_ && en_analyze_wp_) failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (*(unsigned __int8 *)(v189 + 450) < *(unsigned __int8 *)(v189 + 451))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("dpmd_on_ >= dpmd_enable_ failed!\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "dpmd_on_ >= dpmd_enable_ failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if ((_DWORD)v299 == 5 && *(char *)(v189 + 856) <= 1)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("qpm 5 mode does not work with mdmode smaller than 2.", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "qpm 5 mode does not work with mdmode smaller than 2.");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (!*(_DWORD *)(v189 + 456) && *(_BYTE *)(v189 + 584) && *(_BYTE *)(v189 + 536))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("!(reencode_idr_anti_popping_ && use_cra_for_force_idr_) failed!\n", 0x40uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "!(reencode_idr_anti_popping_ && use_cra_for_force_idr_) failed!\n");
      goto LABEL_555;
    }
    goto LABEL_705;
  }
  if (dword_1ED1ACCC0 >= 7)
  {
    v305 = *(_QWORD **)(v189 + 368);
    if (v305 != (_QWORD *)(v189 + 376))
    {
      v306 = *MEMORY[0x1E0C80C10];
      do
      {
        (**(void (***)(_QWORD, uint64_t, _QWORD, _QWORD))v305[6])(v305[6], v306, v305[4], v305[5]);
        v307 = (_QWORD *)v305[1];
        if (v307)
        {
          do
          {
            v308 = v307;
            v307 = (_QWORD *)*v307;
          }
          while (v307);
        }
        else
        {
          do
          {
            v308 = (_QWORD *)v305[2];
            v5 = *v308 == (_QWORD)v305;
            v305 = v308;
          }
          while (!v5);
        }
        v305 = v308;
      }
      while (v308 != (_QWORD *)(v189 + 376));
    }
  }
  v309 = sub_1C96FCC5C(v189, *(char **)(v189 + 680));
  v310 = v309;
  if (!v309)
  {
    if (*(unsigned __int8 *)(v189 + 34) != 255 && !*(_BYTE *)(v189 + 447))
      goto LABEL_555;
    sub_1C9746CCC(buffer);
    v318 = *(_OWORD *)buffer;
    memset(buffer, 0, sizeof(buffer));
    v319 = *(std::__shared_weak_count **)(v189 + 8160);
    *(_OWORD *)(v189 + 8152) = v318;
    if (v319)
    {
      p_shared_owners = (unint64_t *)&v319->__shared_owners_;
      do
        v321 = __ldaxr(p_shared_owners);
      while (__stlxr(v321 - 1, p_shared_owners));
      if (!v321)
      {
        ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
        std::__shared_weak_count::__release_weak(v319);
      }
    }
    v322 = *(std::__shared_weak_count **)&buffer[8];
    if (*(_QWORD *)&buffer[8])
    {
      v323 = (unint64_t *)(*(_QWORD *)&buffer[8] + 8);
      do
        v324 = __ldaxr(v323);
      while (__stlxr(v324 - 1, v323));
      if (!v324)
      {
        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
        std::__shared_weak_count::__release_weak(v322);
      }
    }
    v325 = *(int *)(v189 + 940);
    if ((int)v325 >= 16 || (v326 = *(int *)(v189 + 944), (int)v326 >= 64))
    {
      if (dword_1ED1ACCC0 > 2)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "SPS ID %d not valid\n", *(_DWORD *)(v189 + 940));
        syslog(27, "SPS ID %d not valid\n", v325);
        goto LABEL_555;
      }
      goto LABEL_705;
    }
    v328 = operator new(0x888uLL);
    v328[1] = 0;
    v328[2] = 0;
    *v328 = &off_1E8291B48;
    *(_QWORD *)&v329 = sub_1C971BCE0((uint64_t)(v328 + 3), v189 + 8152, v325);
    *((_QWORD *)&v329 + 1) = v328;
    v330 = v189 + 16 * v325;
    v331 = *(std::__shared_weak_count **)(v330 + 8416);
    *(_OWORD *)(v330 + 8408) = v329;
    if (v331)
    {
      v332 = (unint64_t *)&v331->__shared_owners_;
      do
        v333 = __ldaxr(v332);
      while (__stlxr(v333 - 1, v332));
      if (!v333)
      {
        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
        std::__shared_weak_count::__release_weak(v331);
      }
    }
    v334 = operator new(0x708uLL);
    v334[1] = 0;
    v334[2] = 0;
    *v334 = &off_1E8291B10;
    *(_QWORD *)&v335 = sub_1C96FDC78((uint64_t)(v334 + 3), v189 + 8152, v326, v325);
    *((_QWORD *)&v335 + 1) = v334;
    v336 = v189 + 16 * v326;
    v337 = *(std::__shared_weak_count **)(v336 + 8672);
    *(_OWORD *)(v336 + 8664) = v335;
    if (v337)
    {
      v338 = (unint64_t *)&v337->__shared_owners_;
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
        std::__shared_weak_count::__release_weak(v337);
      }
    }
    v340 = v189 + 8152;
    sub_1C9746DB4((_QWORD *)(v189 + 9736), *(_QWORD *)(v189 + 8152), *(_QWORD *)(v189 + 8160));
    v341 = *(unsigned int *)(v189 + 940);
    v342 = (uint64_t *)(v341 <= 0xF ? v340 + 16 * v341 + 256 : v189 + 9704);
    sub_1C9746DB4((_QWORD *)(v189 + 9752), *v342, v342[1]);
    v343 = *(unsigned int *)(v189 + 944);
    v344 = (uint64_t *)(v343 <= 0x3F ? v340 + 16 * v343 + 512 : v189 + 9720);
    sub_1C9746DB4((_QWORD *)(v189 + 9768), *v344, v344[1]);
    v345 = *(_QWORD *)(v189 + 9736);
    v346 = *(_DWORD *)(v189 + 948);
    *(_BYTE *)(v345 + 196) = 0;
    *(_WORD *)(v345 + 200) = 256;
    v347 = sub_1C979E5E8(v345, v189 + 360);
    v310 = v347;
    if (!v347)
    {
      LOBYTE(v349) = 0;
      *(_BYTE *)(v345 + 202) = 0;
      v350 = *(unsigned __int8 *)(v345 + 200);
      if (*(int *)(v189 + 640) >= 2)
        v349 = *(_DWORD *)(v189 + 644);
      v351 = *(char *)(v189 + 529) + *(char *)(v189 + 528);
      v352 = v351 + 1;
      v353 = *(unsigned __int8 *)(v345 + 12 * *(unsigned __int8 *)(v345 + 200) + 76);
      if (v351 + 1 > v353)
      {
        if (dword_1ED1ACCC0 < 3)
        {
          LOWORD(v289) = -12909;
          return (__int16)v289;
        }
        v354 = v345 + v350;
        LOBYTE(v348) = *(_BYTE *)(v345 + v350 + 57);
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "MaxDpbSize constraint violated, level %1.1f specifies %d, we have %d\n", (float)((float)v348 / 30.0), *(unsigned __int8 *)(v345 + 12 * *(unsigned __int8 *)(v345 + 200) + 76), v351 + 1);
        LOBYTE(v355) = *(_BYTE *)(v354 + 57);
        syslog(27, "MaxDpbSize constraint violated, level %1.1f specifies %d, we have %d\n", (float)((float)v355 / 30.0), v353, v352);
        LOWORD(v289) = -12909;
        goto LABEL_556;
      }
      if (*(_BYTE *)(v189 + 585))
        LOBYTE(v351) = 6;
      v361 = v345 + v350;
      *(_BYTE *)(v361 + 203) = v351;
      *(_BYTE *)(v361 + 210) = v349;
      *(_DWORD *)(v345 + 4 * v350 + 220) = 0;
      *(_BYTE *)(v345 + 248) = 0;
      *(_WORD *)(v345 + 250) = 0;
      *(_BYTE *)(v345 + 280) = 0;
      if (v346)
      {
        v362 = 1;
        *(_BYTE *)(v345 + 199) = 1;
        *(_BYTE *)(v345 + 304) = 0;
        *(_WORD *)(v345 + 306) = 8;
        *(_BYTE *)(v345 + 308) = 0;
        *(_BYTE *)(v345 + 340) = 1;
        *(_WORD *)(v345 + 356) = 1;
        *(_BYTE *)(v345 + 358) = v346;
        *(_BYTE *)(v345 + 359) = 0;
        *(_BYTE *)(v345 + 364) = 1;
        *(_BYTE *)(v345 + 366) = 1;
        *(_QWORD *)(v345 + 369) = 0x100000001000000;
        *(_BYTE *)(v345 + 377) = 1;
        *(_BYTE *)(v345 + 404) = 0;
        *(_DWORD *)(v345 + 380) = 0;
        *(_WORD *)(v345 + 384) = 0;
      }
      else
      {
        v362 = 0;
      }
      *(_BYTE *)(v345 + 302) = v362;
      v363 = sub_1C97A5760(v189, *(_QWORD *)(v189 + 9752), *(_DWORD *)(v189 + 940));
      v310 = v363;
      if (!v363)
      {
        sub_1C97A6140(v189, *(_QWORD *)(v189 + 9768), *(_DWORD *)(v189 + 944));
        sub_1C9701D54(buffer, *(_DWORD *)(v189 + 520), *(_DWORD *)(v189 + 556));
        sub_1C974C5FC(v189 + 296, (__int128 *)buffer);
        sub_1C972CFE0((uint64_t)buffer);
        v364 = (_QWORD *)operator new();
        *v364 = &off_1E8291790;
        v364[531] = 0;
        *(_QWORD *)buffer = v364;
        sub_1C977EF28((_QWORD *)(v189 + 168), (uint64_t *)buffer);
        if (*(_QWORD *)buffer)
          (*(void (**)(_QWORD))(**(_QWORD **)buffer + 8))(*(_QWORD *)buffer);
        if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v189 + 168) + 16))(*(_QWORD *)(v189 + 168), *(unsigned __int8 *)(v189 + 736))&& dword_1ED1ACCC0 >= 7)
        {
          fwrite("VideoProcessorLRP init failed, ignoring\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(31, "VideoProcessorLRP init failed, ignoring\n");
        }
        sub_1C97A6420(buffer, *(_QWORD *)(v189 + 168), *(_QWORD *)(v189 + 176));
        sub_1C974C5FC(v189 + 10408, (__int128 *)buffer);
        sub_1C972CFE0((uint64_t)buffer);
        v365 = sub_1C974B8D8((uint64_t *)(v189 + 9752), *(unsigned __int8 *)(v189 + 872), (_QWORD *)(v189 + 9784));
        v310 = v365;
        if (!v365)
        {
          if (*(unsigned __int8 *)(v189 + 34) != 255)
            *(_BYTE *)(*(_QWORD *)(v189 + 9784) + 25) = 1;
          if (*(_BYTE *)(v189 + 552))
          {
            v366 = operator new(0x720uLL, MEMORY[0x1E0DE4E10]);
            if (!v366)
            {
              *(_QWORD *)(v189 + 10400) = 0;
              if (dword_1ED1ACCC0 >= 3)
              {
                fwrite("Rate control creation failed.\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                syslog(27, "Rate control creation failed.\n");
LABEL_807:
                LOWORD(v289) = -12904;
LABEL_556:
                if (dword_1ED1ACCC0 >= 3)
                {
                  fwrite("Encoder initialization failed\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                  syslog(27, "Encoder initialization failed\n");
                }
                return (__int16)v289;
              }
LABEL_808:
              LOWORD(v289) = -12904;
              return (__int16)v289;
            }
            v367 = sub_1C97EDA54((uint64_t)v366);
            *(_QWORD *)(v189 + 10400) = v367;
            v368 = sub_1C97EDAE0(v367, v189);
            v310 = v368;
            if (v368)
            {
              if (dword_1ED1ACCC0 >= 3)
              {
                fwrite("Rate control initialization failed.\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                syslog(27, "Rate control initialization failed.\n");
              }
              goto LABEL_677;
            }
            sub_1C9746DB4((_QWORD *)(*(_QWORD *)(v189 + 10400) + 8), *(_QWORD *)(v189 + 10408), *(_QWORD *)(v189 + 10416));
          }
          *(_QWORD *)(v189 + 10752) = 0;
          *(_OWORD *)(v189 + 10736) = 0u;
          *(_OWORD *)(v189 + 10720) = 0u;
          *(_OWORD *)(v189 + 10704) = 0u;
          *(_OWORD *)(v189 + 10688) = 0u;
          *(_OWORD *)(v189 + 10672) = 0u;
          *(_OWORD *)(v189 + 10656) = 0u;
          *(_OWORD *)(v189 + 10640) = 0u;
          *(_OWORD *)(v189 + 10624) = 0u;
          *(_OWORD *)(v189 + 10608) = 0u;
          *(_OWORD *)(v189 + 10592) = 0u;
          *(_OWORD *)(v189 + 10576) = 0u;
          *(_OWORD *)(v189 + 10560) = 0u;
          *(_OWORD *)(v189 + 10544) = 0u;
          *(_OWORD *)(v189 + 10528) = 0u;
          *(_OWORD *)(v189 + 10512) = 0u;
          *(_OWORD *)(v189 + 10496) = 0u;
          *(_OWORD *)(v189 + 10480) = 0u;
          *(_OWORD *)(v189 + 10464) = 0u;
          *(_DWORD *)(v189 + 10492) = -1;
          *(_QWORD *)(v189 + 10512) = -1;
          *(_QWORD *)(v189 + 10536) = 0xFFFFFF800000007FLL;
          *(_QWORD *)(v189 + 10552) = 0x4202A05F20000000;
          *(_QWORD *)(v189 + 10576) = 0x800000007FFFFFFFLL;
          v369 = *(_DWORD *)(v189 + 640) << *(_BYTE *)(v189 + 536);
          *(_BYTE *)(v189 + 9960) = v369;
          *(_QWORD *)(v189 + 10592) = 0x800000007FFFFFFFLL;
          sub_1C97A64FC((__int128 *)(v189 + 9920), v369);
          if (*(_BYTE *)(v189 + 9960))
          {
            v370 = 0;
            v371 = 0;
            while (1)
            {
              sub_1C97A6654((uint64_t *)buffer);
              v372 = (_QWORD *)(*(_QWORD *)(v189 + 9920) + v370);
              v373 = *(_QWORD *)buffer;
              *(_QWORD *)buffer = 0;
              sub_1C97A0E28(v372, v373);
              sub_1C97A0E28(buffer, 0);
              sub_1C97B0704(*(_QWORD *)(*(_QWORD *)(v189 + 9920) + 8 * v371), v189, (uint64_t *)(v189 + 9752), (uint64_t *)(v189 + 9768));
              v310 = v374;
              if (v374)
                break;
              ++v371;
              v370 += 8;
              if (v371 >= *(unsigned __int8 *)(v189 + 9960))
                goto LABEL_783;
            }
            if (dword_1ED1ACCC0 >= 3)
            {
              fwrite("Internal frame array initialization failed.\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(27, "Internal frame array initialization failed.\n");
            }
            goto LABEL_677;
          }
LABEL_783:
          if ((*(_BYTE *)(v189 + 544) & 2) == 0)
          {
LABEL_784:
            *(_QWORD *)(v189 + 10376) = 0xFFFFFFFFLL;
            *(_DWORD *)(v189 + 10424) = 500;
            *(_WORD *)(v189 + 10432) = 0;
            *(_BYTE *)(v189 + 10434) = 0;
            *(_QWORD *)(v189 + 10436) = 0;
            if (*(_BYTE *)(v189 + 897))
              sub_1C97A6D78(v189);
            *(_BYTE *)(v189 + 224) = 1;
            sub_1C97A6EC0(v189);
            if (*(_BYTE *)(v189 + 484))
            {
              sub_1C97480EC((char **)(v189 + 10760), 1 << *(_BYTE *)(v189 + 650));
              sub_1C97A7280((unint64_t *)(v189 + 10784), 1 << *(_BYTE *)(v189 + 650));
              sub_1C97A73A4(v189, *(_BYTE *)(v189 + 650));
            }
            if (*(_BYTE *)(v189 + 424))
              *(_BYTE *)(v189 + 11012) = CC_MD5_Init((CC_MD5_CTX *)(v189 + 10920)) != 0;
            *(_QWORD *)(v189 + 312) = 1092616192;
            *(_QWORD *)(v189 + 320) = 0;
            v310 = sub_1C97A7424((int64x2_t *)v189);
            goto LABEL_677;
          }
          v375 = dispatch_group_create();
          *(_QWORD *)(v189 + 9912) = v375;
          if (v375)
          {
            *(_QWORD *)(v189 + 9840) = dispatch_get_global_queue(*(int *)(v189 + 556), 0);
            v376 = *(_DWORD *)(v189 + 520);
            *(_DWORD *)(v189 + 9816) = v376;
            if ((*(_BYTE *)(v189 + 544) & 4) != 0)
            {
              v377 = *(_DWORD *)(v189 + 524);
              if (v377 >= 2)
              {
                v376 = v376 / v377 + 1;
                *(_DWORD *)(v189 + 9816) = v376;
              }
            }
            v378 = 2 * (v376 + *(unsigned __int8 *)(v189 + 9960));
            sub_1C97A64FC((__int128 *)(v189 + 9792), v378);
            *(_QWORD *)(v189 + 9832) = dispatch_semaphore_create(v378);
            v379 = dispatch_semaphore_create(*(int *)(v189 + 9816));
            *(_QWORD *)(v189 + 9824) = v379;
            if (v379 && *(_QWORD *)(v189 + 9832))
            {
              v380 = *(uint64_t **)(v189 + 9792);
              v381 = *(uint64_t **)(v189 + 9800);
              while (v380 != v381)
              {
                sub_1C97A6654((uint64_t *)buffer);
                v382 = *(_QWORD *)buffer;
                *(_QWORD *)buffer = 0;
                sub_1C97A0E28(v380, v382);
                sub_1C97A0E28(buffer, 0);
                sub_1C97B0704(*v380, v189, (uint64_t *)(v189 + 9752), (uint64_t *)(v189 + 9768));
                v310 = v383;
                if (v383)
                {
                  if (dword_1ED1ACCC0 >= 3)
                  {
                    fwrite("Internal MPT frame array initialization failed.\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                    syslog(27, "Internal MPT frame array initialization failed.\n");
                  }
                  goto LABEL_677;
                }
                ++v380;
              }
              goto LABEL_784;
            }
            if (dword_1ED1ACCC0 >= 3)
            {
              fwrite("Failed to allocate MPT data\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(27, "Failed to allocate MPT data\n");
              goto LABEL_807;
            }
          }
          else if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("Failed to allocate MPT group\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "Failed to allocate MPT group\n");
            goto LABEL_807;
          }
          goto LABEL_808;
        }
      }
    }
  }
LABEL_677:
  LOWORD(v289) = v310;
  if (v310)
    goto LABEL_556;
  *(_DWORD *)(*(_QWORD *)(v3 + 1288) + 8144) = 4;
  *(_QWORD *)buffer = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v312 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v289 = 52632;
  if (!v312 || !Mutable)
    goto LABEL_745;
  v313 = sub_1C97A8F38(*(_QWORD *)(v3 + 1288), (CFDataRef *)buffer);
  if (v313)
  {
    v289 = (unsigned __int16)v313;
    if (dword_1ED1ACCC0 >= 3)
    {
      v314 = (FILE *)*MEMORY[0x1E0C80C10];
      v315 = "hvcC creation failed\n";
      v316 = "hvcC creation failed\n";
      v317 = 21;
LABEL_744:
      fwrite(v316, v317, 1uLL, v314);
      syslog(27, v315);
      goto LABEL_745;
    }
    goto LABEL_745;
  }
  v356 = *(const void **)buffer;
  if (*(_DWORD *)(v3 + 1296) == 1718908520)
    CFDictionaryAddValue(v312, CFSTR("ftvH"), *(const void **)buffer);
  CFDictionaryAddValue(v312, CFSTR("hvcC"), v356);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA21C8], CFSTR("HEVC"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA2240], v312);
  v357 = *(const void **)(v3 + 72);
  if (v357)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], v357);
  v358 = *(const void **)(v3 + 80);
  if (v358)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8E98], v358);
  v359 = *(const void **)(v3 + 88);
  if (v359)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], v359);
  if (*(_QWORD *)(v3 + 1264))
  {
    VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
    goto LABEL_741;
  }
  if (*(_QWORD *)(v3 + 1272))
  {
    VideoFormatDescription = VTTileEncoderSessionCreateVideoFormatDescription();
LABEL_741:
    v289 = VideoFormatDescription;
    if (!VideoFormatDescription)
      goto LABEL_745;
    goto LABEL_742;
  }
  v289 = 52626;
LABEL_742:
  if (dword_1ED1ACCC0 >= 3)
  {
    v314 = (FILE *)*MEMORY[0x1E0C80C10];
    v315 = "VTEncoderSessionCreateVideoFormatDescription failed";
    v316 = "VTEncoderSessionCreateVideoFormatDescription failed";
    v317 = 51;
    goto LABEL_744;
  }
LABEL_745:
  if (*(_QWORD *)buffer)
    CFRelease(*(CFTypeRef *)buffer);
  if (v312)
    CFRelease(v312);
  if (Mutable)
    CFRelease(Mutable);
  if (v289)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("CreateAndSetHeaders failed\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "CreateAndSetHeaders failed\n");
    }
  }
  else
  {
    *(_BYTE *)(v3 + 1313) = 1;
  }
  return (__int16)v289;
}

void sub_1C972BD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1C972BDE0(uint64_t a1, uint64_t *a2, uint64_t a3, CFDictionaryRef theDict)
{
  uint64_t result;
  int v8;
  _QWORD *v9;
  const __CFNumber *Value;
  const __CFNumber *v11;
  CFTypeID v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  CFTypeRef *v17;
  _BOOL4 v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  CFTypeID v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  CFTypeID v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  const void *v37;
  _BOOL4 v38;
  const __CFDictionary *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  CFTypeID v48;
  int v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  CFTypeID v52;
  int v53;
  const void *v54;
  const __CFDictionary *v55;
  const __CFDictionary *v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  CFTypeID v59;
  int v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  CFTypeID v63;
  int v64;
  _DWORD *v65;
  const __CFData *v66;
  CFTypeID TypeID;
  const UInt8 *BytePtr;
  unint64_t v69;
  const __CFData *v70;
  CFTypeID v71;
  const UInt8 *v72;
  unint64_t v73;
  const __CFData *v74;
  CFTypeID v75;
  const UInt8 *v76;
  unint64_t v77;
  const __CFNumber *v78;
  CFTypeID v79;
  const __CFArray *v80;
  CFTypeID v81;
  unsigned int Count;
  int v83;
  unint64_t v84;
  char *v85;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v87;
  const __CFNumber *v88;
  const __CFNumber *v89;
  CFTypeID v90;
  const __CFNumber *v91;
  const __CFNumber *v92;
  CFTypeID v93;
  const __CFNumber *v94;
  const __CFNumber *v95;
  CFTypeID v96;
  const __CFNumber *v97;
  const __CFNumber *v98;
  CFTypeID v99;
  const __CFNumber *v100;
  const __CFNumber *v101;
  CFTypeID v102;
  const __CFNumber *v103;
  const __CFNumber *v104;
  CFTypeID v105;
  const __CFDictionary *v106;
  const __CFDictionary *v107;
  const __CFNumber *v108;
  const __CFNumber *v109;
  CFTypeID v110;
  const __CFNumber *v111;
  const __CFNumber *v112;
  CFTypeID v113;
  const __CFNumber *v114;
  const __CFNumber *v115;
  CFTypeID v116;
  const __CFNumber *v117;
  const __CFNumber *v118;
  CFTypeID v119;
  const __CFNumber *v120;
  const __CFNumber *v121;
  CFTypeID v122;
  const __CFNumber *v123;
  const __CFNumber *v124;
  CFTypeID v125;
  const __CFNumber *v126;
  const __CFNumber *v127;
  CFTypeID v128;
  const __CFNumber *v129;
  const __CFNumber *v130;
  CFTypeID v131;
  const __CFNumber *v132;
  const __CFNumber *v133;
  CFTypeID v134;
  const __CFNumber *v135;
  const __CFNumber *v136;
  CFTypeID v137;
  const __CFNumber *v138;
  const __CFNumber *v139;
  CFTypeID v140;
  int v141;
  int v142;
  int v143;
  int v144;
  BOOL v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  const void *v152;
  _QWORD *v153;
  uint64_t v154;
  const void *v155;
  uint64_t v156;
  uint64_t v157;
  const UInt8 *v158;
  CFIndex Length;
  CFIndex v160;
  uint64_t (***v161)();
  uint64_t v162;
  uint64_t (***v163)();
  uint64_t v164;
  const void *v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  const void *v172;
  _BOOL4 v173;
  int v175;
  uint64_t (**valuePtr)();
  const UInt8 *v177;
  uint64_t v178;
  uint64_t (***p_valuePtr)();
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 1312))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Session was invalidated\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Session was invalidated\n");
    }
    return 4294954393;
  }
  *(_DWORD *)(a3 + 712) = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a3 + 88) = *(_DWORD *)(a1 + 144);
  v8 = *(_DWORD *)(a1 + 28);
  if (v8 >= 1)
    *(_DWORD *)(a3 + 92) = v8;
  v9 = (_QWORD *)(a3 + 284);
  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey010"));
    if (Value)
    {
      v11 = Value;
      v12 = CFGetTypeID(Value);
      if (v12 == CFNumberGetTypeID())
        CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)(a1 + 1308));
    }
  }
  *(_DWORD *)(a3 + 144) = 0;
  *(_DWORD *)(a3 + 292) = 0;
  *(_DWORD *)(a3 + 312) = 0;
  *(_DWORD *)(a3 + 332) = 0;
  *(_DWORD *)(a3 + 352) = 0;
  *(_DWORD *)(a3 + 360) = 0;
  *(_QWORD *)(a3 + 476) = -1;
  *(_QWORD *)(a3 + 436) = 0;
  *(_QWORD *)(a3 + 444) = 0;
  *(_QWORD *)(a3 + 428) = 0;
  *(_DWORD *)(a3 + 484) = -1;
  *(_DWORD *)(a3 + 696) = 0;
  *(_BYTE *)(a3 + 136) = 0;
  *(_BYTE *)(a3 + 148) = 0;
  *(_WORD *)(a3 + 186) = 0;
  *v9 = 0xFFFFFFFFLL;
  *(_BYTE *)(a3 + 188) = 0;
  v13 = *(const void **)(a3 + 208);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a3 + 208) = 0;
  }
  *(_QWORD *)(a3 + 200) = 0;
  v14 = *(const void **)(a3 + 272);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a3 + 272) = 0;
  }
  *(_QWORD *)(a3 + 256) = 0;
  v15 = *(const void **)(a3 + 176);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a3 + 176) = 0;
  }
  *(_QWORD *)(a3 + 168) = 0;
  if (theDict)
  {
    v16 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5B8]);
    v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (v16)
      v173 = CFEqual(v16, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
    else
      v173 = 0;
    v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey006"));
    if (v19)
    {
      v20 = v19;
      v21 = CFGetTypeID(v19);
      if (v21 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v20, kCFNumberSInt32Type, (void *)(a3 + 140));
        *(_BYTE *)(a3 + 136) = 1;
      }
    }
    v22 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey014"));
    if (v22 && (v23 = v22, v24 = CFGetTypeID(v22), v24 == CFNumberGetTypeID()))
      CFNumberGetValue(v23, kCFNumberSInt32Type, (void *)(a3 + 144));
    else
      *(_DWORD *)(a3 + 144) = 0;
    v25 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey025"));
    if (v25 && (v26 = v25, v27 = CFGetTypeID(v25), v27 == CFNumberGetTypeID()))
      CFNumberGetValue(v26, kCFNumberSInt32Type, (void *)(a3 + 284));
    else
      *(_DWORD *)v9 = -1;
    v28 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey043"));
    if (v28)
    {
      v29 = v28;
      v30 = CFGetTypeID(v28);
      if (v30 == CFNumberGetTypeID())
        CFNumberGetValue(v29, kCFNumberSInt32Type, (void *)(a3 + 288));
    }
    v31 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey009"));
    if (v31)
    {
      v32 = v31;
      v33 = CFGetTypeID(v31);
      if (v33 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v32, kCFNumberSInt32Type, (void *)(a3 + 152));
        *(_BYTE *)(a3 + 148) = 1;
      }
    }
    v34 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey015"));
    if (v34)
    {
      v35 = v34;
      v36 = CFGetTypeID(v34);
      if (v36 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v35, kCFNumberSInt32Type, (void *)(a3 + 160));
        *(_BYTE *)(a3 + 156) = 1;
      }
    }
    v37 = CFDictionaryGetValue(theDict, CFSTR("PrivateKey016"));
    if (v37)
    {
      v38 = CFEqual(v37, *v17) != 0;
      *(_BYTE *)(a3 + 164) = v38;
      if (!v38)
        goto LABEL_53;
    }
    else if (!*(_BYTE *)(a3 + 164))
    {
      goto LABEL_53;
    }
    v39 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey017"));
    if (v39)
    {
      v40 = CFDictionaryGetValue(v39, CFSTR("PrivateKey018"));
      *(_QWORD *)(a3 + 176) = v40;
      if (v40)
      {
        CFRetain(v40);
        *(_QWORD *)(a3 + 168) = CFDataGetBytePtr(*(CFDataRef *)(a3 + 176));
      }
      else if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Delta QP data missing!\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Delta QP data missing!\n");
      }
    }
LABEL_53:
    v41 = CFDictionaryGetValue(theDict, CFSTR("PrivateKey007"));
    if (v41)
    {
      *(_BYTE *)(a3 + 184) = 1;
      *(_BYTE *)(a3 + 185) = CFEqual(v41, *v17) != 0;
    }
    v42 = CFDictionaryGetValue(theDict, CFSTR("PrivateKey008"));
    if (v42)
      *(_BYTE *)(a3 + 186) = CFEqual(v42, *v17) != 0;
    v43 = CFDictionaryGetValue(theDict, CFSTR("PrivateKey040"));
    if (v43)
      *(_BYTE *)(a3 + 187) = CFEqual(v43, *v17) != 0;
    v44 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey036"));
    if (v44)
    {
      v45 = v44;
      LODWORD(valuePtr) = -1;
      v46 = (const __CFNumber *)CFDictionaryGetValue(v44, CFSTR("PrivateKey037"));
      if (v46 && (v47 = v46, v48 = CFGetTypeID(v46), v48 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v47, kCFNumberSInt32Type, &valuePtr);
        v49 = (int)valuePtr;
      }
      else
      {
        v49 = -1;
      }
      *(_DWORD *)(a3 + 192) = v49;
      LODWORD(valuePtr) = -1;
      v50 = (const __CFNumber *)CFDictionaryGetValue(v45, CFSTR("PrivateKey038"));
      v51 = v50;
      if (v50 && (v52 = CFGetTypeID(v50), v52 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v51, kCFNumberSInt32Type, &valuePtr);
        v53 = (int)valuePtr;
        *(_DWORD *)(a3 + 196) = (_DWORD)valuePtr;
        if (*(int *)(a3 + 192) >= 1 && v53 >= 1)
        {
          v54 = CFDictionaryGetValue(v45, CFSTR("PrivateKey039"));
          *(_QWORD *)(a3 + 208) = v54;
          if (v54)
          {
            CFRetain(v54);
            *(_QWORD *)(a3 + 200) = CFDataGetBytePtr(*(CFDataRef *)(a3 + 208));
            *(_BYTE *)(a3 + 188) = 1;
          }
          else if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("Motion mask data missing!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "Motion mask data missing!\n");
          }
        }
      }
      else
      {
        *(_DWORD *)(a3 + 196) = -1;
      }
    }
    v55 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("PrivateKey019"));
    v56 = v55;
    if (!v55)
      goto LABEL_81;
    LODWORD(valuePtr) = -1;
    v57 = (const __CFNumber *)CFDictionaryGetValue(v55, CFSTR("PrivateKey020"));
    v58 = v57;
    if (v57 && (v59 = CFGetTypeID(v57), v59 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(v58, kCFNumberSInt32Type, &valuePtr);
      v60 = (int)valuePtr;
      *(_DWORD *)(a3 + 264) = (_DWORD)valuePtr;
      if (v60 == 16)
      {
        LODWORD(valuePtr) = 0;
        v61 = (const __CFNumber *)CFDictionaryGetValue(v56, CFSTR("PrivateKey021"));
        v62 = v61;
        if (v61 && (v63 = CFGetTypeID(v61), v63 == CFNumberGetTypeID()))
        {
          CFNumberGetValue(v62, kCFNumberSInt32Type, &valuePtr);
          v64 = (int)valuePtr;
        }
        else
        {
          v64 = 0;
        }
        *(_DWORD *)(a3 + 280) = v64;
        v172 = CFDictionaryGetValue(v56, CFSTR("PrivateKey022"));
        *(_QWORD *)(a3 + 272) = v172;
        if (v172)
        {
          CFRetain(v172);
          *(_QWORD *)(a3 + 256) = CFDataGetBytePtr(*(CFDataRef *)(a3 + 272));
        }
        else if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("MCM dQP map data missing!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "MCM dQP map data missing!\n");
        }
LABEL_81:
        if (*(_DWORD *)(a3 + 88) == 1)
        {
          *(_WORD *)(a3 + 352) = 2;
          v175 = 2;
          v66 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5A8]);
          if (v66)
          {
            TypeID = CFDataGetTypeID();
            if (TypeID == CFGetTypeID(v66))
            {
              BytePtr = CFDataGetBytePtr(v66);
              v69 = (unint64_t)CFDataGetLength(v66) >> 1;
              if ((int)v69 >= 8)
                LODWORD(v69) = 8;
              memcpy((void *)(a3 + 296), BytePtr, 2 * (int)v69);
              *(_BYTE *)(a3 + 354) = 1;
            }
          }
          v70 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5B0]);
          if (v70)
          {
            v71 = CFDataGetTypeID();
            if (v71 == CFGetTypeID(v70))
            {
              v72 = CFDataGetBytePtr(v70);
              v73 = (unint64_t)CFDataGetLength(v70) >> 1;
              if ((int)v73 >= 8)
                LODWORD(v73) = 8;
              memcpy((void *)(a3 + 316), v72, 2 * (int)v73);
            }
          }
          v74 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5A0]);
          if (v74)
          {
            v75 = CFDataGetTypeID();
            if (v75 == CFGetTypeID(v74))
            {
              v76 = CFDataGetBytePtr(v74);
              v77 = (unint64_t)CFDataGetLength(v74) >> 1;
              if ((int)v77 >= 8)
                LODWORD(v77) = 8;
              memcpy((void *)(a3 + 336), v76, 2 * (int)v77);
            }
          }
          v78 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5D8]);
          if (v78)
          {
            v79 = CFNumberGetTypeID();
            if (v79 == CFGetTypeID(v78))
            {
              CFNumberGetValue(v78, kCFNumberSInt32Type, &v175);
              *(_WORD *)(a3 + 352) = v175;
            }
          }
          v80 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED4A0]);
          if (v80)
          {
            v81 = CFArrayGetTypeID();
            if (v81 == CFGetTypeID(v80))
            {
              Count = CFArrayGetCount(v80);
              v83 = Count >= 0x10 ? 16 : Count;
              *(_DWORD *)(a3 + 360) = v83;
              if (v83)
              {
                v84 = 0;
                v85 = (char *)(a3 + 364);
                do
                {
                  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v80, v84);
                  CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v85);
                  ++v84;
                  v85 += 4;
                }
                while (v84 < *(unsigned int *)(a3 + 360));
              }
            }
          }
          *(_DWORD *)(a3 + 472) = 0;
          v87 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("queuelength"));
          if (v87)
          {
            *(_DWORD *)(a3 + 472) = 1;
            CFNumberGetValue(v87, kCFNumberSInt32Type, (void *)(a3 + 476));
          }
          v88 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("avgOutgoingRate"));
          v89 = v88;
          if (v88)
          {
            v90 = CFGetTypeID(v88);
            if (v90 == CFNumberGetTypeID())
              CFNumberGetValue(v89, kCFNumberSInt32Type, (void *)(a3 + 480));
          }
          v91 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("instantOutgoingRate"));
          v92 = v91;
          if (v91)
          {
            v93 = CFGetTypeID(v91);
            if (v93 == CFNumberGetTypeID())
              CFNumberGetValue(v92, kCFNumberSInt32Type, (void *)(a3 + 484));
          }
          v94 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("Use2GNetwork"));
          v95 = v94;
          if (v94)
          {
            v96 = CFGetTypeID(v94);
            if (v96 == CFNumberGetTypeID())
              CFNumberGetValue(v95, kCFNumberSInt32Type, (void *)(a3 + 488));
          }
          v97 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RemoteDisplayWidth"));
          v98 = v97;
          if (v97)
          {
            v99 = CFGetTypeID(v97);
            if (v99 == CFNumberGetTypeID())
              CFNumberGetValue(v98, kCFNumberSInt32Type, (void *)(a3 + 492));
          }
          v100 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RemoteDisplayHeight"));
          v101 = v100;
          if (v100)
          {
            v102 = CFGetTypeID(v100);
            if (v102 == CFNumberGetTypeID())
              CFNumberGetValue(v101, kCFNumberSInt32Type, (void *)(a3 + 496));
          }
          v103 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CameraFacingType"));
          v104 = v103;
          if (v103)
          {
            v105 = CFGetTypeID(v103);
            if (v105 == CFNumberGetTypeID())
              CFNumberGetValue(v104, kCFNumberSInt32Type, (void *)(a3 + 696));
          }
          v106 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED670]);
          v107 = v106;
          if (v106)
          {
            v108 = (const __CFNumber *)CFDictionaryGetValue(v106, (const void *)*MEMORY[0x1E0CA8D60]);
            v109 = v108;
            if (v108)
            {
              v110 = CFGetTypeID(v108);
              if (v110 == CFNumberGetTypeID())
                CFNumberGetValue(v109, kCFNumberSInt32Type, (void *)(a3 + 456));
            }
            v111 = (const __CFNumber *)CFDictionaryGetValue(v107, (const void *)*MEMORY[0x1E0CA8D40]);
            v112 = v111;
            if (v111)
            {
              v113 = CFGetTypeID(v111);
              if (v113 == CFNumberGetTypeID())
                CFNumberGetValue(v112, kCFNumberSInt32Type, (void *)(a3 + 460));
            }
            v114 = (const __CFNumber *)CFDictionaryGetValue(v107, (const void *)*MEMORY[0x1E0CA8D48]);
            v115 = v114;
            if (v114)
            {
              v116 = CFGetTypeID(v114);
              if (v116 == CFNumberGetTypeID())
                CFNumberGetValue(v115, kCFNumberSInt32Type, (void *)(a3 + 464));
            }
            v117 = (const __CFNumber *)CFDictionaryGetValue(v107, (const void *)*MEMORY[0x1E0CA8D58]);
            v118 = v117;
            if (v117)
            {
              v119 = CFGetTypeID(v117);
              if (v119 == CFNumberGetTypeID())
                CFNumberGetValue(v118, kCFNumberSInt32Type, (void *)(a3 + 468));
            }
          }
          else
          {
            *(_QWORD *)(a3 + 456) = 0;
            *(_QWORD *)(a3 + 464) = 0;
          }
          v120 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PadFrameToMinimumSize"));
          v121 = v120;
          if (v120)
          {
            v122 = CFGetTypeID(v120);
            if (v122 == CFNumberGetTypeID())
              CFNumberGetValue(v121, kCFNumberSInt32Type, (void *)(a3 + 452));
          }
          v123 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED630]);
          v124 = v123;
          if (v123)
          {
            v125 = CFGetTypeID(v123);
            if (v125 == CFNumberGetTypeID())
              CFNumberGetValue(v124, kCFNumberSInt32Type, (void *)(a3 + 428));
          }
          v126 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5E8]);
          v127 = v126;
          if (v126)
          {
            v128 = CFGetTypeID(v126);
            if (v128 == CFNumberGetTypeID())
              CFNumberGetValue(v127, kCFNumberDoubleType, (void *)(a3 + 432));
          }
          v129 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED4B8]);
          v130 = v129;
          if (v129)
          {
            v131 = CFGetTypeID(v129);
            if (v131 == CFNumberGetTypeID())
              CFNumberGetValue(v130, kCFNumberSInt32Type, (void *)(a3 + 440));
          }
          v132 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED590]);
          v133 = v132;
          if (v132)
          {
            v134 = CFGetTypeID(v132);
            if (v134 == CFNumberGetTypeID())
              CFNumberGetValue(v133, kCFNumberSInt32Type, (void *)(a3 + 444));
          }
          v135 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5F0]);
          v136 = v135;
          if (v135)
          {
            v137 = CFGetTypeID(v135);
            if (v137 == CFNumberGetTypeID())
              CFNumberGetValue(v136, kCFNumberSInt32Type, (void *)(a3 + 448));
          }
          LODWORD(valuePtr) = 1;
          v138 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("AutoExposureState"));
          v139 = v138;
          if (v138 && (v140 = CFGetTypeID(v138), v140 == CFNumberGetTypeID()))
          {
            CFNumberGetValue(v139, kCFNumberSInt32Type, &valuePtr);
            v141 = (int)valuePtr;
          }
          else
          {
            v141 = 1;
          }
          *(_DWORD *)(a3 + 356) = v141;
        }
        v18 = v173;
        goto LABEL_166;
      }
      v65 = (_DWORD *)(a3 + 264);
    }
    else
    {
      v65 = (_DWORD *)(a3 + 264);
      v60 = -1;
      *(_DWORD *)(a3 + 264) = -1;
    }
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "MCM map with granularity %d not supported\n", v60);
      syslog(27, "MCM map with granularity %d not supported\n", *v65);
    }
    goto LABEL_81;
  }
  v18 = 0;
  if (*(_DWORD *)(a3 + 88) == 1)
    *(_WORD *)(a3 + 352) = 2;
LABEL_166:
  *(_DWORD *)(a3 + 128) |= v18;
  *(_DWORD *)(a3 + 132) = 0;
  if (*(_DWORD *)(a1 + 1328) != 2)
    goto LABEL_198;
  v142 = *(_DWORD *)(a1 + 1300);
  v143 = *(_DWORD *)(a1 + 1304);
  v144 = *(_DWORD *)(a1 + 152);
  v146 = v142 + 63;
  v145 = v142 < -63;
  v147 = v142 + 126;
  if (v145)
    v148 = v147;
  else
    v148 = v146;
  v149 = v143 + 63;
  v145 = v143 < -63;
  v150 = v143 + 126;
  if (v145)
    v151 = v150;
  else
    v151 = v149;
  v152 = *(const void **)(a3 + 248);
  if (v152)
    CFRelease(v152);
  v153 = *(_QWORD **)(a3 + 240);
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(a3 + 248) = 0;
  if (v153 == (_QWORD *)(a3 + 216))
  {
    v154 = 4;
    v153 = (_QWORD *)(a3 + 216);
  }
  else
  {
    if (!v153)
      goto LABEL_180;
    v154 = 5;
  }
  (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_180:
  v155 = CFDictionaryGetValue(theDict, CFSTR("HEVCQPMap"));
  *(_QWORD *)(a3 + 248) = v155;
  if (!v155)
    goto LABEL_184;
  v156 = (v148 >> 6);
  v157 = 88 * (v151 >> 6) * (int)v156;
  CFRetain(v155);
  v158 = CFDataGetBytePtr(*(CFDataRef *)(a3 + 248));
  Length = CFDataGetLength(*(CFDataRef *)(a3 + 248));
  if (Length < v157)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v160 = Length;
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "External QP map is %zd, expected %zd!\n", Length, v157);
      syslog(27, "External QP map is %zd, expected %zd!\n", v160, v157);
    }
LABEL_184:
    valuePtr = &off_1E8291A30;
    LODWORD(v177) = v144;
    p_valuePtr = &valuePtr;
    sub_1C977F158(&valuePtr, (_QWORD *)(a3 + 216));
    v161 = p_valuePtr;
    if (p_valuePtr == &valuePtr)
    {
      v162 = 4;
      v161 = &valuePtr;
    }
    else
    {
      if (!p_valuePtr)
      {
LABEL_192:
        v165 = *(const void **)(a3 + 248);
        if (v165)
          CFRelease(v165);
        *(_QWORD *)(a3 + 248) = 0;
        goto LABEL_198;
      }
      v162 = 5;
    }
    (*v161)[v162]();
    goto LABEL_192;
  }
  valuePtr = &off_1E82919E8;
  v177 = v158;
  v178 = v156;
  p_valuePtr = &valuePtr;
  sub_1C977F158(&valuePtr, (_QWORD *)(a3 + 216));
  v163 = p_valuePtr;
  if (p_valuePtr == &valuePtr)
  {
    v164 = 4;
    v163 = &valuePtr;
  }
  else
  {
    if (!p_valuePtr)
      goto LABEL_198;
    v164 = 5;
  }
  (*v163)[v164]();
LABEL_198:
  if (*(_DWORD *)(a1 + 1204))
  {
    if (!*(_BYTE *)(a3 + 148))
    {
      if (dword_1ED1ACCC0 >= 4)
      {
        fwrite("Specified MaxReording but didn't set InputFrameNum, assuming no reorder\n", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(28, "Specified MaxReording but didn't set InputFrameNum, assuming no reorder\n");
      }
      *(_BYTE *)(a3 + 148) = 1;
      *(_DWORD *)(a3 + 152) = *(_DWORD *)(a1 + 1308);
    }
  }
  else if (!*(_BYTE *)(a3 + 148))
  {
    v167 = *(_DWORD *)(a1 + 1308);
    v170 = 1;
    goto LABEL_213;
  }
  v166 = *(_DWORD *)(a3 + 152);
  v167 = *(_DWORD *)(a1 + 1308);
  v168 = *(_DWORD *)(a1 + 1196);
  if (v166 - v167 >= v168)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Reordering for GOP size of %d, but specified a maximum of %d\n", v166 - v167 + 1, v168);
      syslog(27, "Reordering for GOP size of %d, but specified a maximum of %d\n", *(_DWORD *)(a3 + 152) - *(_DWORD *)(a1 + 1308) + 1, *(_DWORD *)(a1 + 1196));
    }
    return 4294954394;
  }
  v169 = *(_DWORD *)(a1 + 1204);
  if (v167 - v166 > v169)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Number of reordered pictures %d exceeds given maximum of %d\n", v167 - v166, v169);
      syslog(27, "Number of reordered pictures %d exceeds given maximum of %d\n", *(_DWORD *)(a1 + 1308) - *(_DWORD *)(a3 + 152), *(_DWORD *)(a1 + 1204));
    }
    return 4294954394;
  }
  v170 = 0;
LABEL_213:
  v171 = *a2;
  *(_DWORD *)(v171 + 8) = v167;
  *(_OWORD *)(v171 + 16) = *(_OWORD *)(a3 + 776);
  *(_DWORD *)(v171 + 32) = *(_DWORD *)(a3 + 792);
  result = 0;
  if (v170)
    *(_DWORD *)(a1 + 1308) = v167 + 1;
  return result;
}

uint64_t sub_1C972CFE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_1C972D038()
{
  uint64_t v0;
  const __CFString *v1;
  const __CFString *v2;
  const __CFArray *v3;
  const __CFArray *v4;
  CFPropertyListRef v5;
  const void *v6;
  CFTypeID v7;
  CFTypeID v8;
  unsigned int valuePtr;
  CFRange v11;

  v0 = 2;
  valuePtr = 2;
  CFPreferencesAppSynchronize(CFSTR("com.apple.videoprocessing"));
  v1 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v2 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v3 = CFPreferencesCopyKeyList(CFSTR("com.apple.videoprocessing"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v3)
  {
    v4 = v3;
    if (CFArrayGetCount(v3) >= 1
      && (v11.length = CFArrayGetCount(v4), v11.location = 0, CFArrayContainsValue(v4, v11, CFSTR("PFrameQpOffset")))
      && (v5 = CFPreferencesCopyValue(CFSTR("PFrameQpOffset"), CFSTR("com.apple.videoprocessing"), v1, v2)) != 0)
    {
      v6 = v5;
      v7 = CFGetTypeID(v5);
      if (v7 == CFNumberGetTypeID())
      {
        v8 = CFGetTypeID(v6);
        if (v8 == CFNumberGetTypeID())
          CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &valuePtr);
      }
      CFRelease(v4);
      CFRelease(v6);
      return valuePtr;
    }
    else
    {
      CFRelease(v4);
    }
  }
  return v0;
}

uint64_t sub_1C972D15C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C972D260(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1CAA43B3C](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C972D288(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  int v4;
  int v5;
  const std::locale::facet *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  size_t v11;
  std::locale::__imp *p_b;
  uint64_t v13;
  uint64_t v14;
  std::locale *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  std::locale __b;
  size_t v21;
  int64_t v22;

  MEMORY[0x1CAA43A34](v19, a1);
  if (v19[0])
  {
    v2 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v3 = *((_QWORD *)v2 + 5);
    v4 = *((_DWORD *)v2 + 2);
    v5 = *((_DWORD *)v2 + 36);
    if (v5 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v6 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v2 + 36) = v5;
    }
    if ((v4 & 0xB0) == 0x20)
      v7 = "";
    else
      v7 = ":";
    if (!v3)
      goto LABEL_29;
    v8 = *((_QWORD *)v2 + 3);
    v9 = v8 <= 1;
    v10 = v8 - 1;
    v11 = v9 ? 0 : v10;
    if (v7 - ":" >= 1
      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v3 + 96))(v3, ":", v7 - ":") != v7 - ":")
    {
      goto LABEL_29;
    }
    if ((uint64_t)v11 >= 1)
    {
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        sub_1C972D5B8();
      if (v11 >= 0x17)
      {
        v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v13 = v11 | 7;
        v14 = v13 + 1;
        p_b = (std::locale::__imp *)operator new(v13 + 1);
        v21 = v11;
        v22 = v14 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v22) = v11;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v5, v11);
      *((_BYTE *)p_b + v11) = 0;
      v15 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v16 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v3 + 96))(v3, v15, v11);
      if (SHIBYTE(v22) < 0)
        operator delete(__b.__locale_);
      if (v16 != v11)
        goto LABEL_29;
    }
    v17 = ":" - v7 + 1;
    if (v17 < 1
      || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v3 + 96))(v3, v7, ":" - v7 + 1) == v17)
    {
      *((_QWORD *)v2 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1CAA43A40](v19);
  return a1;
}

void sub_1C972D4AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1CAA43A40](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C972D480);
}

void sub_1C972D50C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1C972D520(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA43B3C](a1 + 128);
  return a1;
}

void sub_1C972D5A8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1C972D5B8()
{
  sub_1C972D5CC("basic_string");
}

void sub_1C972D5CC(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1C972D61C(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E8291378, MEMORY[0x1E0DE42D0]);
}

void sub_1C972D608(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1C972D61C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t sub_1C972D640(uint64_t a1, uint64_t a2, int a3, const void *a4, size_t dataLength, _BYTE *a6, uint64_t a7)
{
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (!a3 && a4 && dataLength)
  {
    v13 = *(_QWORD *)(a1 + 1288);
    if (*(_BYTE *)(v13 + 424))
      *(_BYTE *)(v13 + 11012) &= CC_MD5_Update((CC_MD5_CTX *)(v13 + 10920), a4, dataLength);
    sub_1C972D758(a1, a4, dataLength, 0, a7, a6, a2, (CMSampleBufferRef *)&cf);
  }
  VTEncoderSessionEmitEncodedTile();
  if (cf)
    CFRelease(cf);
  sub_1C977F0D4((_QWORD *)(a2 + 88));
  return MEMORY[0x1CAA43B9C](a2, 0x1070C40040150F9);
}

uint64_t sub_1C972D758(uint64_t a1, const void *a2, size_t dataLength, const CMSampleTimingInfo *a4, uint64_t a5, _BYTE *a6, uint64_t a7, CMSampleBufferRef *a8)
{
  size_t v13;
  const __CFData *v16;
  const __CFAllocator *v17;
  uint64_t DataPointer;
  const __CFData *v19;
  char *v20;
  const UInt8 *BytePtr;
  size_t Length;
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v25;
  uint64_t v26;
  unint64_t v28;
  const char *CStringPtr;
  uint64_t v30;
  CFIndex v31;
  CFDataRef v32;
  CFDataRef v33;
  int v34;
  BOOL v35;
  int v36;
  CFNumberRef v37;
  CFNumberRef v38;
  char v39;
  const void **v40;
  double v41;
  int v42;
  int v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  uint64_t v56;
  size_t sampleSizeArray;
  char *dataPointerOut;
  CMBlockBufferRef dataBuffer;
  UInt8 bytes[83];
  _BYTE v61[61];
  _BYTE __dst[40];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  dataPointerOut = 0;
  dataBuffer = 0;
  sampleSizeArray = dataLength;
  if (dataLength >> 31 || !*(_QWORD *)a5)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("No data / frame encoded!\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "No data / frame encoded!\n");
    }
    DataPointer = 4294954392;
    goto LABEL_16;
  }
  v13 = dataLength;
  v16 = *(const __CFData **)(a1 + 136);
  if (v16)
  {
    dataLength += CFDataGetLength(v16);
    sampleSizeArray = dataLength;
  }
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DataPointer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, dataLength, *(CFAllocatorRef *)(a1 + 1320), 0, 0, dataLength, 1u, &dataBuffer);
  if (!(_DWORD)DataPointer)
  {
    DataPointer = CMSampleBufferCreate(v17, dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 1280), 1, a4 != 0, a4, 1, &sampleSizeArray, a8);
    if (!(_DWORD)DataPointer)
    {
      DataPointer = CMBlockBufferGetDataPointer(dataBuffer, 0, 0, 0, &dataPointerOut);
      if (!(_DWORD)DataPointer)
      {
        memcpy(dataPointerOut, a2, v13);
        v19 = *(const __CFData **)(a1 + 136);
        if (v19)
        {
          v20 = &dataPointerOut[v13];
          BytePtr = CFDataGetBytePtr(v19);
          Length = CFDataGetLength(*(CFDataRef *)(a1 + 136));
          memcpy(v20, BytePtr, Length);
        }
        SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(*a8, 1u);
        ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        v25 = ValueAtIndex;
        if ((*(_DWORD *)(a1 + 144) - 33) <= 4)
        {
          sub_1C972DD94(ValueAtIndex, a5, (uint64_t)a6, *(_DWORD *)(a1 + 1308));
          if (*a6)
          {
            v26 = *(_QWORD *)a5;
            goto LABEL_33;
          }
          v28 = CFStringGetLength(*(CFStringRef *)(a1 + 1248));
          if (v28 >= 0x29)
          {
            if (dword_1ED1ACCC0 >= 4)
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "VersionString(%d) is longer than max length(%d), truncating..", v28, 40);
              syslog(28, "VersionString(%d) is longer than max length(%d), truncating..", v28, 40);
            }
            v28 = 40;
          }
          CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(a1 + 1248), 0x8000100u);
          memcpy(__dst, CStringPtr, v28);
          v56 = 61;
          v30 = sub_1C98186CC((uint64_t)__dst, v28, (uint64_t)v61, &v56);
          if ((_DWORD)v30)
          {
            DataPointer = v30;
            if (dword_1ED1ACCC0 >= 3)
            {
              fwrite("Error creating SEI user data unregistered\n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
              syslog(27, "Error creating SEI user data unregistered\n");
            }
            goto LABEL_16;
          }
          v31 = off_1ED1ACCC8(bytes);
          v32 = CFDataCreate(v17, bytes, v31);
          if (!v32)
            return 4294954385;
          v33 = v32;
          CFDictionaryAddValue(v25, CFSTR("PrivateKey041"), v32);
          CFRelease(v33);
        }
        v26 = *(_QWORD *)a5;
        if (!*a6)
        {
          v36 = 0;
          v34 = 1;
          goto LABEL_40;
        }
LABEL_33:
        v34 = 0;
        if (*(_BYTE *)(v26 + 40))
          v35 = *(_BYTE *)(a1 + 13) == 0;
        else
          v35 = 1;
        v36 = !v35;
LABEL_40:
        if (*(_DWORD *)(v26 + 36) == 1)
        {
          *(_DWORD *)bytes = *(_DWORD *)(v26 + 8);
          v37 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
          if (v37)
          {
            v38 = v37;
            CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E0CEDA98], v37);
            CFRelease(v38);
          }
          v26 = *(_QWORD *)a5;
        }
        if (*(_BYTE *)(v26 + 41))
          v39 = v34;
        else
          v39 = 1;
        v40 = (const void **)MEMORY[0x1E0C9AE50];
        if ((v39 & 1) != 0)
        {
          if ((v34 & 1) != 0)
          {
LABEL_64:
            v48 = (const void *)*MEMORY[0x1E0C9AE40];
            v49 = *v40;
            if (v34)
              v50 = (const void *)*MEMORY[0x1E0C9AE40];
            else
              v50 = *v40;
            CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CA2620], v50);
            if (!*(_BYTE *)(*(_QWORD *)a5 + 40))
              CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CA2618], v48);
            CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CA25C8], v50);
            if (v36)
              v51 = v49;
            else
              v51 = v48;
            CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CA25E0], v51);
            if (*(int *)(*(_QWORD *)a5 + 504) >= 1 && *(int *)(*(_QWORD *)a5 + 508) >= 1)
            {
              *(_DWORD *)bytes = *(_DWORD *)(*(_QWORD *)a5 + 504);
              v52 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
              if (v52)
              {
                v53 = v52;
                CFDictionaryAddValue(v25, CFSTR("VRAWidth"), v52);
                CFRelease(v53);
              }
              *(_DWORD *)bytes = *(_DWORD *)(*(_QWORD *)a5 + 508);
              v54 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
              if (v54)
              {
                v55 = v54;
                CFDictionaryAddValue(v25, CFSTR("VRAHeight"), v54);
                CFRelease(v55);
              }
            }
            DataPointer = 0;
            goto LABEL_16;
          }
        }
        else
        {
          CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CEDA90], (const void *)*MEMORY[0x1E0C9AE50]);
        }
        v41 = *(double *)(a7 + 432);
        if (v41 >= 1.0 && *(int *)(a7 + 92) >= 77000)
        {
          if (v41 >= 10.0)
            v42 = 3;
          else
            v42 = 2;
          if (v41 < 5.0)
            v43 = 1;
          else
            v43 = v42;
          *(_DWORD *)bytes = 0;
          v44 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
          if (v44)
          {
            v45 = v44;
            CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E0CEDA60], v44);
            CFRelease(v45);
          }
          *(_DWORD *)bytes = v43;
          v46 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
          if (v46)
          {
            v47 = v46;
            CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E0CEDA70], v46);
            CFRelease(v47);
          }
          CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CEDA68], *v40);
        }
        goto LABEL_64;
      }
    }
  }
LABEL_16:
  if (dataBuffer)
    CFRelease(dataBuffer);
  if ((_DWORD)DataPointer)
  {
    if (*a8)
      CFRelease(*a8);
    *a8 = 0;
  }
  return DataPointer;
}

void sub_1C972DD94(__CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  const void *v15;
  CFDataRef v16;
  CFDataRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  const UInt8 *v26;
  CFDataRef v27;
  CFDataRef v28;
  const UInt8 *v29;
  CFDataRef v30;
  CFDataRef v31;
  unsigned int v32;
  int valuePtr;
  char v34;
  int v35;

  v8 = *(_DWORD **)a2;
  v9 = 127;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 432))
    v9 = 131;
  v10 = v8[v9];
  v11 = 126;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 432))
    v11 = 130;
  v12 = v8[v11] * v10;
  v13 = v8[292];
  if (v12 >= 0)
    v14 = v8[v11] * v10;
  else
    v14 = v12 + 1;
  v15 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
  v16 = CFDataCreate(0, (const UInt8 *)(*(_QWORD *)a2 + 664), 24);
  v17 = v16;
  if (!v15)
  {
    if (!v16)
      return;
    goto LABEL_21;
  }
  if (!v16)
    return;
  v32 = (100 * v13 + (v14 >> 1)) / v12;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v32);
  if (v18)
  {
    v19 = v18;
    CFDictionaryAddValue(a1, CFSTR("PrivateKey026"), v18);
    CFRelease(v19);
    valuePtr = *(_DWORD *)(*(_QWORD *)a2 + 1164);
    v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v20)
    {
      v21 = v20;
      CFDictionaryAddValue(a1, CFSTR("PrivateKey028"), v20);
      CFRelease(v21);
      CFDictionaryAddValue(a1, CFSTR("PrivateKey027"), v15);
      v34 = *(_BYTE *)(a3 + 1);
      v22 = CFNumberCreate(0, kCFNumberSInt8Type, &v34);
      if (v22)
      {
        v23 = v22;
        CFDictionaryAddValue(a1, CFSTR("PrivateKey029"), v22);
        CFRelease(v23);
        v35 = a4;
        v24 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
        if (v24)
        {
          v25 = v24;
          CFDictionaryAddValue(a1, CFSTR("PrivateKey010"), v24);
          CFRelease(v25);
          CFDictionaryAddValue(a1, CFSTR("PrivateKey042"), v17);
          v26 = *(const UInt8 **)(a3 + 16);
          if (!v26)
            goto LABEL_17;
          v27 = CFDataCreate(0, v26, 208);
          if (v27)
          {
            v28 = v27;
            CFDictionaryAddValue(a1, CFSTR("PrivateKey031"), v27);
            CFRelease(v28);
LABEL_17:
            v29 = *(const UInt8 **)(a3 + 8);
            if (v29)
            {
              v30 = CFDataCreate(0, v29, 22);
              if (v30)
              {
                v31 = v30;
                CFDictionaryAddValue(a1, CFSTR("PrivateKey030"), v30);
                CFRelease(v31);
              }
            }
          }
        }
      }
    }
  }
LABEL_21:
  CFRelease(v17);
}

void sub_1C972DFF4()
{
  uint64_t DerivedStorage;
  const __CFAllocator *v1;
  CFDictionaryRef v2;
  CFDictionaryRef v3;
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  const void **v6;
  uint64_t v7;
  void *v8;
  CFDictionaryRef v9;
  BOOL v10;
  CFDictionaryRef v11;
  __CFDictionary *v12;
  uint64_t **v13;
  const void *v14;
  CFDictionaryRef v15;
  CFDictionaryRef Copy;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v2)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "CFDictionaryCreate failed");
    }
    goto LABEL_24;
  }
  v3 = v2;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("CFArrayCreate (CreateProfileLevelDict) failed!", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "CFArrayCreate (CreateProfileLevelDict) failed!");
    }
    goto LABEL_23;
  }
  v5 = Mutable;
  v6 = (const void **)MEMORY[0x1E0CED988];
  v7 = 0x10u;
  do
  {
    CFArrayAppendValue(v5, *v6);
    v6 = *(const void ***)((char *)&unk_1E82922C8 + v7);
    v7 += 16;
  }
  while (v7 != 96);
  v8 = (void *)*MEMORY[0x1E0CED9F0];
  values = v5;
  keys[0] = v8;
  v9 = CFDictionaryCreate(v1, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v9)
    v10 = 1;
  else
    v10 = dword_1ED1ACCC0 <= 2;
  if (!v10)
  {
    fwrite("CFDictionaryCreate (CreateProfileLevelDict) failed!", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "CFDictionaryCreate (CreateProfileLevelDict) failed!");
    CFRelease(v5);
LABEL_23:
    CFRelease(v3);
LABEL_24:
    Copy = 0;
    goto LABEL_25;
  }
  v11 = v9;
  CFRelease(v5);
  if (!v11)
    goto LABEL_23;
  v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v12)
  {
    v13 = *(uint64_t ***)(*(_QWORD *)(DerivedStorage + 1448) + 16);
    if (v13)
    {
      v14 = (const void *)*MEMORY[0x1E0CED180];
      do
      {
        if (CFEqual(v13[2], v14))
          v15 = v11;
        else
          v15 = v3;
        CFDictionaryAddValue(v12, v13[2], v15);
        v13 = (uint64_t **)*v13;
      }
      while (v13);
    }
    Copy = CFDictionaryCreateCopy(v1, v12);
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "CFDictionaryCreate failed");
    }
    Copy = 0;
  }
  CFRelease(v3);
  CFRelease(v11);
  if (v12)
    CFRelease(v12);
LABEL_25:
  qword_1EF920DE8 = (uint64_t)Copy;
}

uint64_t sub_1C972E2F4(uint64_t a1, uint64_t a2, int a3, const void *a4, size_t a5, _BYTE *a6, uint64_t a7)
{
  uint64_t v14;
  CFTypeRef cf;

  cf = 0;
  VTEncoderSessionDequeueDecodeTimeStamp();
  if (!a3 && a4 && a5)
  {
    v14 = *(_QWORD *)(a1 + 1288);
    if (*(_BYTE *)(v14 + 424))
      *(_BYTE *)(v14 + 11012) &= CC_MD5_Update((CC_MD5_CTX *)(v14 + 10920), a4, a5);
    sub_1C972D758(a1, a4, a5, (const CMSampleTimingInfo *)(a2 + 16), a7, a6, a2, (CMSampleBufferRef *)&cf);
  }
  VTEncoderSessionEmitEncodedFrame();
  if (cf)
    CFRelease(cf);
  sub_1C977F0D4((_QWORD *)(a2 + 88));
  return MEMORY[0x1CAA43B9C](a2, 0x1070C40040150F9);
}

uint64_t sub_1C972E428()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
    sub_1C9724B74(DerivedStorage);
  return 0;
}

void sub_1C972E448()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*(_BYTE *)(DerivedStorage + 1312))
  {
    v1 = CMBaseObjectGetDerivedStorage();
    if (v1)
      sub_1C9724B74(v1);
  }
}

__CFString *sub_1C972E48C(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<LRPVideoEncoder %p>"), a1);
  return Mutable;
}

uint64_t sub_1C972E4E0(uint64_t a1, const __CFString *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v7;
  FILE *v9;
  const char *CStringPtr;
  const char *v11;
  uint64_t v12;
  unsigned __int8 v13;
  const __CFString *v15;
  uint64_t v16;
  const __CFString *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = a2;
  v7 = *(const void **)(DerivedStorage + 1208);
  if (v7)
  {
    if (CFEqual(v7, CFSTR("debug")) && dword_1ED1ACCC0 >= 4)
    {
      v9 = (FILE *)*MEMORY[0x1E0C80C10];
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      fprintf(v9, "CopyProperty: %s\n", CStringPtr);
      v11 = CFStringGetCStringPtr(a2, 0x8000100u);
      syslog(28, "CopyProperty: %s\n", v11);
    }
  }
  if (sub_1C9725468(*(_QWORD **)(DerivedStorage + 1448), (CFTypeRef *)&v17))
  {
    v12 = *MEMORY[0x1E0CED140];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED140]))
    {
      v13 = atomic_load((unsigned __int8 *)&qword_1EF920DC0);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920DC0))
      {
        qword_1EF920DB8 = v12;
        __cxa_guard_release(&qword_1EF920DC0);
      }
      *a4 = 0;
      if (*(_DWORD *)(DerivedStorage + 64) == 1 && *(_DWORD *)(DerivedStorage + 68) == 1)
        return 0;
      v15 = (const __CFString *)qword_1EF920DB8;
      v16 = DerivedStorage;
    }
    else
    {
      v16 = DerivedStorage;
      v15 = a2;
    }
    return sub_1C97255D4(v16, v15, a4);
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("unrecognised property key", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "unrecognised property key");
    }
    return 4294954396;
  }
}

uint64_t sub_1C972E6A0(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  FILE *v8;
  const char *CStringPtr;
  const char *v10;
  FILE *v11;
  const char *v12;
  const char *v13;
  size_t v14;
  CFTypeID v15;
  uint64_t v16;
  CFTypeRef *v17;
  uint64_t *v18;
  CFTypeRef *v19;
  uint64_t v20;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t **v24;
  CFTypeRef *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t *v29;
  CFTypeRef v30;
  int v31;
  uint64_t v32;
  FILE *v33;
  const char *v34;
  const char *v35;
  size_t v36;
  uint64_t **v37;
  const __CFString *v38;
  uint64_t **v39;
  uint64_t *v40;
  FILE *v41;
  const char *v42;
  const void *Value;
  const void *v44;
  const void *v45;
  CFTypeID TypeID;
  CFTypeID v47;
  CFTypeID v48;
  CFTypeID v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  const __CFString *v54;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v54 = a2;
  v6 = *(const void **)(DerivedStorage + 1208);
  if (v6)
  {
    if (CFEqual(v6, CFSTR("debug")) && dword_1ED1ACCC0 >= 4)
    {
      v8 = (FILE *)*MEMORY[0x1E0C80C10];
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      fprintf(v8, "SetProperty: %s\n", CStringPtr);
      v10 = CFStringGetCStringPtr(a2, 0x8000100u);
      syslog(28, "SetProperty: %s\n", v10);
    }
  }
  if (!sub_1C9725468(*(_QWORD **)(DerivedStorage + 1448), (CFTypeRef *)&v54))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v11 = (FILE *)*MEMORY[0x1E0C80C10];
      v12 = "unrecognised property key";
      v13 = "unrecognised property key";
      v14 = 25;
      goto LABEL_29;
    }
    return 4294954396;
  }
  if (*(_QWORD *)(DerivedStorage + 1272))
  {
    if ((CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEB0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEC8]))
      && !CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE40]))
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v11 = (FILE *)*MEMORY[0x1E0C80C10];
        v12 = "Setting FrameReordering or TemporalCompression for tiles isn't supported\n";
        v13 = "Setting FrameReordering or TemporalCompression for tiles isn't supported\n";
        v14 = 73;
        goto LABEL_29;
      }
      return 4294954396;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEF0]))
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        v11 = (FILE *)*MEMORY[0x1E0C80C10];
        v12 = "Bitrate control for tile sessions isn't supported\n";
        v13 = "Bitrate control for tile sessions isn't supported\n";
        v14 = 50;
LABEL_29:
        fwrite(v13, v14, 1uLL, v11);
        syslog(27, v12);
        return 4294954396;
      }
      return 4294954396;
    }
  }
  if (CFEqual(a2, CFSTR("InitialQP")) || CFEqual(a2, CFSTR("InitialQPI")))
    *(_BYTE *)(DerivedStorage + 156) = 1;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED180]))
  {
    if (!a3)
    {
      v31 = 0;
LABEL_44:
      *(_DWORD *)(DerivedStorage + 8) = v31;
      if (*(_QWORD *)DerivedStorage)
        CFRelease(*(CFTypeRef *)DerivedStorage);
      *(_QWORD *)DerivedStorage = 0;
      if (a3)
        *(_QWORD *)DerivedStorage = CFRetain(a3);
      if (*(_QWORD *)(DerivedStorage + 1272))
        v32 = sub_1C974CF84(*(_DWORD *)(DerivedStorage + 8));
      else
        v32 = sub_1C974C7AC(*(_DWORD *)(DerivedStorage + 1300), *(_DWORD *)(DerivedStorage + 1304), *(_DWORD *)(DerivedStorage + 8));
      v20 = v32;
      if ((_DWORD)v32 && dword_1ED1ACCC0 >= 3)
      {
        fwrite("Error updating pixel format requirements for requested profile\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Error updating pixel format requirements for requested profile\n");
      }
      return v20;
    }
    v15 = CFGetTypeID(a3);
    if (v15 == CFStringGetTypeID())
    {
      v16 = 0;
      v17 = (CFTypeRef *)MEMORY[0x1E0CED988];
      v18 = &qword_1E82922D8;
      while (!CFEqual(a3, *v17))
      {
        ++v16;
        v19 = (CFTypeRef *)*v18;
        v18 += 2;
        v17 = v19;
        if (v16 == 5)
          goto LABEL_69;
      }
      if ((_DWORD)v16 != 5)
      {
        v31 = dword_1E82922C8[4 * v16 + 2];
        goto LABEL_44;
      }
LABEL_69:
      if (dword_1ED1ACCC0 >= 3)
      {
        v41 = (FILE *)*MEMORY[0x1E0C80C10];
        v42 = CFStringGetCStringPtr(a3, 0x8000100u);
        fprintf(v41, "Unsupported profile %s\n", v42);
        CFStringGetCStringPtr(a3, 0x8000100u);
        syslog(27, "Unsupported profile %s\n");
      }
      return 4294954394;
    }
    if (dword_1ED1ACCC0 < 3)
      return 4294954394;
    v33 = (FILE *)*MEMORY[0x1E0C80C10];
    v34 = "Profile argument not a string\n";
    v35 = "Profile argument not a string\n";
    v36 = 30;
LABEL_52:
    fwrite(v35, v36, 1uLL, v33);
    syslog(27, v34, v53);
    return 4294954394;
  }
  v22 = *MEMORY[0x1E0CED140];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED140]))
  {
    v23 = atomic_load((unsigned __int8 *)&qword_1EF920DB0);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920DB0))
    {
      qword_1EF920DA8 = v22;
      __cxa_guard_release(&qword_1EF920DB0);
    }
    v24 = sub_1C9725468(*(_QWORD **)(DerivedStorage + 1448), (CFTypeRef *)&qword_1EF920DA8);
    if (v24)
    {
      v25 = (CFTypeRef *)v24[4];
      v26 = sub_1C9725468(*(_QWORD **)(DerivedStorage + 1448), (CFTypeRef *)&qword_1EF920DA8);
      if (v26)
      {
        v27 = v26[3];
        if (v27 != (uint64_t *)CFDictionaryGetTypeID())
        {
          v20 = 4294954385;
          goto LABEL_98;
        }
        if (!a3)
        {
          v30 = *v25;
          if (*v25)
          {
            CFRelease(v30);
            v30 = 0;
          }
LABEL_76:
          *v25 = v30;
          v20 = *(_QWORD *)(DerivedStorage + 56);
          if (!v20)
          {
LABEL_101:
            *(_QWORD *)(DerivedStorage + 64) = 0x100000001;
            return v20;
          }
          Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 56), (const void *)*MEMORY[0x1E0CA8E60]);
          v44 = CFDictionaryGetValue((CFDictionaryRef)v20, (const void *)*MEMORY[0x1E0CA8E70]);
          if (Value)
          {
            v45 = v44;
            TypeID = CFNumberGetTypeID();
            if (TypeID == CFGetTypeID(Value))
            {
              if (v45)
              {
                v47 = CFNumberGetTypeID();
                if (v47 == CFGetTypeID(v45))
                {
                  valuePtr = 0;
                  v48 = CFGetTypeID(Value);
                  if (v48 == CFNumberGetTypeID())
                    CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, (char *)&valuePtr + 4);
                  v49 = CFGetTypeID(v45);
                  if (v49 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue((CFNumberRef)v45, kCFNumberIntType, &valuePtr);
                    if (SHIDWORD(valuePtr) >= 1)
                    {
                      v50 = valuePtr;
                      if ((int)valuePtr >= 1)
                      {
                        v51 = HIDWORD(valuePtr);
                        v52 = valuePtr;
                        do
                        {
                          if ((int)v51 <= (int)v52)
                            v52 %= v51;
                          else
                            v51 %= v52;
                        }
                        while (v51 && v52);
                        v20 = 0;
                        if (!v51)
                          v51 = v52;
                        *(_DWORD *)(DerivedStorage + 64) = SHIDWORD(valuePtr) / (int)v51;
                        *(_DWORD *)(DerivedStorage + 68) = v50 / (int)v51;
                        return v20;
                      }
                    }
                  }
                }
              }
            }
          }
          if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("Bad PASP\n", 9uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "Bad PASP\n");
          }
          v20 = 4294954394;
LABEL_98:
          if (*v25)
            CFRelease(*v25);
          *v25 = 0;
          goto LABEL_101;
        }
        v28 = sub_1C9725468(*(_QWORD **)(DerivedStorage + 1448), (CFTypeRef *)&qword_1EF920DA8);
        if (v28)
        {
          v29 = v28[3];
          if (v29 != (uint64_t *)CFGetTypeID(a3))
          {
            if (dword_1ED1ACCC0 < 3)
              return 4294954394;
            v33 = (FILE *)*MEMORY[0x1E0C80C10];
            v34 = "(PASP): bad\n";
            v35 = "(PASP): bad\n";
            v36 = 12;
            goto LABEL_52;
          }
          if (*v25)
            CFRelease(*v25);
          v30 = CFRetain(a3);
          goto LABEL_76;
        }
      }
    }
LABEL_104:
    sub_1C9725560();
  }
  if (CFEqual(a2, CFSTR("NegotiationDetails")))
  {
    v37 = sub_1C9725468(*(_QWORD **)(DerivedStorage + 1448), (CFTypeRef *)&off_1E8292328);
    if (!v37)
      goto LABEL_104;
    v38 = (const __CFString *)v37[4];
    v39 = sub_1C9725468(*(_QWORD **)(DerivedStorage + 1448), (CFTypeRef *)&off_1E8292328);
    if (!v39)
      goto LABEL_104;
    v40 = v39[3];
    if (v40 == (uint64_t *)CFStringGetTypeID())
    {
      v20 = sub_1C972521C(DerivedStorage, CFSTR("NegotiationDetails"), a3);
      if ((_DWORD)v20)
      {
LABEL_60:
        if (v38)
          CFRelease(v38);
        bzero((void *)(DerivedStorage + 192), 0x3E9uLL);
        return v20;
      }
      if (CFStringGetCString(v38, (char *)(DerivedStorage + 192), 1001, 0))
        return v20;
    }
    v20 = 4294954385;
    goto LABEL_60;
  }
  return sub_1C972521C(DerivedStorage, a2, a3);
}

uint64_t sub_1C972EDF4(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer)
{
  OSType PixelFormatType;
  OSType v7;
  OSType v8;
  CFTypeRef Attachment;
  size_t Width;
  size_t v11;
  size_t Height;
  size_t v13;
  uint64_t v15[2];
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v7 = CVPixelBufferGetPixelFormatType(a2);
  v8 = v7;
  if (v7 != 1278226736 && v7 != 2016686640 && v7 != 2019963440)
  {
    CVBufferGetAttachment(a2, CFSTR("VPImageBufferLSBAligned"), 0);
    return 4294954394;
  }
  Attachment = CVBufferGetAttachment(a2, CFSTR("VPImageBufferLSBAligned"), 0);
  if (PixelFormatType != 875704422 && PixelFormatType != 1278226488 && PixelFormatType != 875704438)
    return 4294954394;
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  Width = CVPixelBufferGetWidth(a2);
  v11 = CVPixelBufferGetWidth(pixelBuffer);
  if (v11 < Width)
    Width = v11;
  Height = CVPixelBufferGetHeight(a2);
  v13 = CVPixelBufferGetHeight(pixelBuffer);
  if (v13 < Height)
    Height = v13;
  v18[0] = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) >> 1;
  v18[1] = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL) >> 1;
  v17[0] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v17[1] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v16[0] = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v16[1] = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  v15[0] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  v15[1] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  if (v8 == 1278226736 || PixelFormatType == 1278226488)
    sub_1C972F084(Width, Height, Attachment != 0, v18, v17, v16, v15, (int *)a1);
  else
    (*(void (**)(size_t, size_t, BOOL, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(a1 + 8))(Width, Height, Attachment != 0, v18, v17, v16, v15, a1);
  *(_DWORD *)a1 &= 0xFFFu;
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  return 0;
}

size_t sub_1C972F084(size_t __len, unint64_t a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  size_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  int v21;
  unsigned int v22;
  int v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  char *v31;
  int v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  unsigned int v51;
  char *v52;
  int v53;

  v10 = __len;
  v11 = *a8;
  if (a3)
    v12 = 0;
  else
    v12 = 6;
  if (a5[1])
  {
    if (a2 >= 2)
    {
      v13 = 0;
      LOWORD(__len) = v11 + a2 * __len;
      v14 = a2 >> 1;
      v15 = *a8;
      do
      {
        v16 = __len & 0xFFF;
        if (v10)
        {
          v17 = 0;
          v18 = *a7;
          do
          {
            v19 = *(unsigned __int16 *)(*a5 + 2 * v17) >> v12;
            if (v19 <= 0x43)
              v20 = (char *)&unk_1C985FC3B;
            else
              v20 = (char *)&unk_1C985EC34;
            v21 = (int)(v19 + v20[v15]) >> 2;
            if (v21 >= 255)
              v21 = 255;
            *(_BYTE *)(v18 + v17) = v21 & ~(v21 >> 31);
            v22 = *(unsigned __int16 *)(a5[1] + 2 * v17) >> v12;
            if (*(unsigned __int8 *)(*a7 + v17) < 0x12u)
              goto LABEL_18;
            v23 = v22 - 512;
            if (v22 < 0x200)
              v23 = 512 - v22;
            v24 = (char *)&unk_1C985EC34;
            if (v23 <= 3)
LABEL_18:
              v24 = (char *)&unk_1C985FC3B;
            v15 = ((_WORD)v15 + 1) & 0xFFF;
            v25 = (int)(v22 + v24[v16]) >> 2;
            if (v25 >= 255)
              v25 = 255;
            *(_BYTE *)(a7[1] + v17) = v25 & ~(v25 >> 31);
            v18 = *a7;
            *a8 += (*(_BYTE *)(a7[1] + v17) & 1) + (*(_BYTE *)(*a7 + v17) & 1);
            ++v17;
            v16 = ((_WORD)v16 + 1) & 0xFFF;
          }
          while (v10 != v17);
        }
        v26 = *a4;
        *a5 += 2 * *a4;
        v27 = *a6;
        v28 = *a7 + *a6;
        *a7 = v28;
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v30 = *(unsigned __int16 *)(*a5 + 2 * i) >> v12;
            if (v30 <= 0x43)
              v31 = (char *)&unk_1C985FC3B;
            else
              v31 = (char *)&unk_1C985EC34;
            v32 = (int)(v30 + v31[v15]) >> 2;
            v15 = ((_WORD)v15 + 1) & 0xFFF;
            if (v32 >= 255)
              v32 = 255;
            *(_BYTE *)(v28 + i) = v32 & ~(v32 >> 31);
            v28 = *a7;
            *a8 += *(_BYTE *)(*a7 + i) & 1;
          }
          v26 = *a4;
          v27 = *a6;
        }
        v33 = dword_1C985AC18[((_WORD)v11 + (_WORD)v13) & 0xFFF];
        v34 = v33 + v15;
        __len = (v33 + v16);
        v35 = *a5 + 2 * v26;
        v36 = a5[1] + 2 * a4[1];
        v15 = v34 & 0xFFF;
        ++v13;
        *a5 = v35;
        a5[1] = v36;
        v37 = *a7 + v27;
        v38 = a7[1] + a6[1];
        *a7 = v37;
        a7[1] = v38;
      }
      while (v13 != v14);
    }
  }
  else if (a2 >= 2)
  {
    v39 = 0;
    if (a2 >> 1 <= 1)
      v40 = 1;
    else
      v40 = a2 >> 1;
    v41 = *a8;
    do
    {
      if (v10)
      {
        v42 = 0;
        v43 = *a7;
        do
        {
          v44 = *(unsigned __int16 *)(*a5 + 2 * v42) >> v12;
          if (v44 <= 0x43)
            v45 = (char *)&unk_1C985FC3B;
          else
            v45 = (char *)&unk_1C985EC34;
          v46 = (int)(v44 + v45[v41]) >> 2;
          v41 = ((_WORD)v41 + 1) & 0xFFF;
          if (v46 >= 255)
            v46 = 255;
          *(_BYTE *)(v43 + v42) = v46 & ~(v46 >> 31);
          v43 = *a7;
          *a8 += *(_BYTE *)(*a7 + v42++) & 1;
        }
        while (v10 != v42);
      }
      v47 = *a4;
      *a5 += 2 * *a4;
      v48 = *a6;
      v49 = *a7 + *a6;
      *a7 = v49;
      if (v10)
      {
        for (j = 0; j != v10; ++j)
        {
          v51 = *(unsigned __int16 *)(*a5 + 2 * j) >> v12;
          if (v51 <= 0x43)
            v52 = (char *)&unk_1C985FC3B;
          else
            v52 = (char *)&unk_1C985EC34;
          v53 = (int)(v51 + v52[v41]) >> 2;
          v41 = ((_WORD)v41 + 1) & 0xFFF;
          if (v53 >= 255)
            v53 = 255;
          *(_BYTE *)(v49 + j) = v53 & ~(v53 >> 31);
          v49 = *a7;
          *a8 += *(_BYTE *)(*a7 + j) & 1;
        }
        v47 = *a4;
        v48 = *a6;
      }
      v41 = ((unsigned __int16)dword_1C985AC18[((_WORD)v11 + (_WORD)v39++) & 0xFFF] + (_WORD)v41) & 0xFFF;
      *a5 += 2 * v47;
      *a7 += v48;
    }
    while (v39 != v40);
    __len = a7[1];
    if (__len)
    {
      do
      {
        memset((void *)__len, 128, v10);
        __len = a7[1] + a6[1];
        a7[1] = __len;
        --v40;
      }
      while (v40);
    }
  }
  return __len;
}

uint64_t sub_1C972F444(char *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  char *v9;
  size_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  unint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;

  if (a5)
  {
    v9 = &a1[a5];
  }
  else
  {
    v10 = (a2 + 2);
    bzero(a1, v10);
    a1[v10] = 1;
    v9 = &a1[v10 + 1];
  }
  *v9 = *a3;
  v11 = (int8x16_t *)(a3 + 2);
  v12 = (int8x16_t *)(v9 + 2);
  v9[1] = a3[1];
  v13 = a4 - 2;
  if ((unint64_t)(a4 - 2) < 0x10)
    goto LABEL_22;
  while (1)
  {
    v14 = *v11;
    *v12 = *v11;
    if (!vaddvq_s32((int32x4_t)vceqzq_s8(v14)))
    {
      ++v12;
      ++v11;
      v13 -= 16;
      goto LABEL_21;
    }
    v15 = 0;
    while (v12->u8[v15++])
      ;
    v12 = (int8x16_t *)((char *)v12 + v15);
    v17 = v13 - v15;
    if (!v17)
      break;
    v18 = &v11->u8[v15];
    v19 = 1;
    while (v19 != 2)
    {
      v19 = 2;
LABEL_14:
      v21 = *v18;
      v12->i8[0] = v21;
      v12 = (int8x16_t *)((char *)v12 + 1);
      if (v21)
      {
        v11 = (int8x16_t *)(v18 + 1);
        goto LABEL_20;
      }
      ++v18;
      if (!--v17)
        goto LABEL_32;
    }
    v20 = *v18;
    if (v20 < 4)
    {
      v12->i8[0] = 3;
      v12 = (int8x16_t *)((char *)v12 + 1);
      v19 = 1;
      goto LABEL_14;
    }
    v11 = (int8x16_t *)(v18 + 1);
    v12->i8[0] = v20;
    v12 = (int8x16_t *)((char *)v12 + 1);
LABEL_20:
    v13 = v17 - 1;
LABEL_21:
    if (v13 <= 0xF)
    {
LABEL_22:
      if (v13)
      {
        v22 = 0;
        do
        {
          v23 = v11->u8[0];
          if (v22 == 2)
          {
            if (v23 > 3)
            {
              v22 = 2;
            }
            else
            {
              v22 = 0;
              v12->i8[0] = 3;
              v12 = (int8x16_t *)((char *)v12 + 1);
              v23 = v11->u8[0];
            }
          }
          if (v23)
            v22 = 0;
          else
            ++v22;
          v11 = (int8x16_t *)((char *)v11 + 1);
          v12->i8[0] = v23;
          v12 = (int8x16_t *)((char *)v12 + 1);
          --v13;
        }
        while (v13);
      }
      break;
    }
  }
LABEL_32:
  if (a5)
  {
    v24 = (_DWORD)v12 - (_DWORD)a1 - a5;
    switch(a5)
    {
      case 4:
        *(_DWORD *)a1 = bswap32(v24);
        break;
      case 2:
        *(_WORD *)a1 = bswap32(v24) >> 16;
        break;
      case 1:
        *a1 = v24;
        break;
    }
  }
  return (char *)v12 - a1;
}

uint64_t sub_1C972F610(uint64_t a1)
{
  char v1;
  int v2;
  int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  unsigned int v19;

  if (*(_BYTE *)(a1 + 531))
    v1 = 2;
  else
    v1 = 3;
  v2 = *(_DWORD *)(a1 + 524);
  if (v2 < 1)
  {
    v4 = 0;
LABEL_20:
    v18 = 0;
    goto LABEL_21;
  }
  v3 = 0;
  v4 = 0;
  v5 = *(int *)(a1 + 520) >> v1;
  v6 = *(_QWORD *)(a1 + 400);
  do
  {
    v7 = 0uLL;
    if (v5 >= 4)
    {
      v8 = 0;
      v9 = 0uLL;
      do
      {
        v7 = veorq_s8(*(int8x16_t *)(v6 + v8), v7);
        v9 = veorq_s8(*(int8x16_t *)(v6 + v8 + 16), v9);
        v8 += 32;
      }
      while (32 * (v5 >> 2) != v8);
      v7 = veorq_s8(v9, v7);
    }
    v4 ^= *(_QWORD *)&veor_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
    ++v3;
    v6 += 8 * (*(uint64_t *)(a1 + 416) >> v1);
  }
  while (v3 != v2);
  if (v2 < 2)
    goto LABEL_20;
  v10 = 0;
  v11 = *(uint64_t *)(a1 + 424) >> v1;
  v12 = v2 >> 1;
  v13 = *(_QWORD *)(a1 + 408);
  v14 = 8 * v11;
  do
  {
    v15 = 0uLL;
    if (v5 >= 4)
    {
      v16 = 0;
      v17 = 0uLL;
      do
      {
        v15 = veorq_s8(*(int8x16_t *)(v13 + v16), v15);
        v17 = veorq_s8(*(int8x16_t *)(v13 + v16 + 16), v17);
        v16 += 32;
      }
      while (32 * (v5 >> 2) != v16);
      v15 = veorq_s8(v17, v15);
    }
    ++v10;
    v13 += v14;
  }
  while (v10 != v12);
  v18 = *(_QWORD *)&veor_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)) ^ v4;
LABEL_21:
  v19 = ((v4 ^ HIDWORD(v4)) >> 16) ^ (unsigned __int16)(v4 ^ WORD2(v4));
  return (((v18 ^ HIDWORD(v18)) >> 16) ^ (unsigned __int16)(v18 ^ WORD2(v18)) ^ (unsigned __int16)((((v18 ^ HIDWORD(v18)) >> 16) ^ (unsigned __int16)(v18 ^ WORD2(v18))) << 8)) & 0xFF00 | (unsigned __int16)(v19 ^ (unsigned __int16)(v19 >> 8));
}

int8x8_t *sub_1C972F770(int8x8_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12, uint64_t a13, int a14)
{
  int8x16_t v14;
  int v15;
  int8x8_t v16;
  const char *v17;
  int8x8_t v18;
  int8x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;

  v14 = *a3;
  v15 = a14 + 1;
  v16 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x200000000000001));
  v17 = a5;
  do
  {
    v18 = *result;
    __asm { PRFM            #0, [X0,#8] }
    v24 = vld1_dup_s8(v17++);
    v25 = (uint8x8_t)vext_s8(v24, *result, 7uLL);
    *a5 = HIBYTE(*(unint64_t *)result);
    a12.i8[0] = result->i8[(4 * a4) & 8];
    v26 = (uint8x8_t)vext_s8(v18, a12, 1uLL);
    a12 = (int8x8_t)vsqadd_u8((uint8x8_t)v18, vqtbl1_s8(v14, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v18, v25), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202), (int8x8_t)vcgt_u8(v25, (uint8x8_t)v18)), (int8x8_t)vcgt_u8((uint8x8_t)v18, v26)), (int8x8_t)vcgt_u8(v26, (uint8x8_t)v18))));
    *result = vbsl_s8(v16, a12, v18);
    result = (int8x8_t *)((char *)result + a2);
    --v15;
    a5 = (char *)v17;
  }
  while (v15 > 1);
  return result;
}

uint8x8_t *sub_1C972F80C(uint8x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _BYTE *a5, uint8x8_t *a6, int a7)
{
  int8x16_t v7;
  int v8;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v18;
  int v20;
  uint8x8_t v22;
  int8x8_t v24;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i8[7];
    a6 = result;
    result = (uint8x8_t *)((char *)result + a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i8[(v8 + 1) * a2 + 7];
  v10 = *a6;
  _X5 = a6 + 1;
  v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  v18 = *result;
  __asm { PRFM            #0, [X9] }
  v20 = v8 + 2;
  do
  {
    _X10 = (uint64_t)&result[1] + a2;
    v22 = *(uint8x8_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v18.i8[7];
    v24 = vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8(v18, v11), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202), (int8x8_t)vcgt_u8(v11, v18)), (int8x8_t)vcgt_u8(v18, v22)), (int8x8_t)vcgt_u8(v22, v18)));
    v11 = v18;
    *result = vsqadd_u8(v18, v24);
    --v20;
    v18 = v22;
    result = (uint8x8_t *)((char *)result + a2);
  }
  while (v20 > 1);
  return result;
}

char *sub_1C972F8C4(char *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  int8x8_t v7;
  int v8;
  int8x16_t v9;
  const char *v10;
  int8x8_t v11;
  const char *v12;
  unsigned int v13;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v23;
  int v25;
  int8x8_t v26;
  const char *v27;
  int8x8_t v29;
  uint8x8_t v31;
  uint8x8_t v32;

  v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (char *)sub_1C97E60B4(result, a2, (uint64_t)a3, a4, a5, a6, 8uLL, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = (const char *)(a6 - 1);
    v11 = (int8x8_t)vld1q_dup_s8(v12).u64[0];
  }
  else
  {
    v10 = a5;
    v11 = (int8x8_t)vld1q_dup_s8(v10++).u64[0];
    *a5 = result[7];
    a6 = (unsigned __int8 *)result;
    result += a2;
    v8 = a7 - 1;
    a5 = (char *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[(int)(v13 + 1) * a2 + 7];
  v15 = *(int8x8_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 8;
  v23 = *(int8x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v25 = v13 + 2;
  v26 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x200000000000001));
  v27 = a5;
  do
  {
    _X12 = (uint64_t)&result[a2 + 8];
    v29 = *(int8x8_t *)&result[a2];
    __asm { PRFM            #0, [X12] }
    v7.i8[0] = result[a2 + ((4 * a4) & 8)];
    v31 = (uint8x8_t)vext_s8(v11, v16, 7uLL);
    v32 = (uint8x8_t)vext_s8(v29, v7, 1uLL);
    v7 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v23, v31), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202);
    *(int8x8_t *)result = vbsl_s8(v26, (int8x8_t)vsqadd_u8((uint8x8_t)v23, vqtbl1_s8(v9, vadd_s8(vsub_s8(vadd_s8(v7, (int8x8_t)vcgt_u8(v31, (uint8x8_t)v23)), (int8x8_t)vcgt_u8((uint8x8_t)v23, v32)), (int8x8_t)vcgt_u8(v32, (uint8x8_t)v23)))), v23);
    v11 = (int8x8_t)vld1q_dup_s8(v27++).u64[0];
    --v25;
    v16 = v23;
    *a5 = v23.i8[7];
    v23 = v29;
    a5 = (char *)v27;
    result += a2;
  }
  while (v25 > 1);
  return result;
}

unsigned __int8 *sub_1C972FA18(unsigned __int8 *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x8_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x8_t v9;
  const char *v10;
  int8x8_t v17;
  int8x8_t v19;
  char *v20;
  signed int v21;
  int8x8_t v22;
  const char *v23;
  int8x8_t v25;
  int8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  const char *v30;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (unsigned __int8 *)sub_1C97E5C8C(result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[7];
    _X5 = (int8x8_t *)result;
    result += a2;
    v7 = a7 - 1;
  }
  v9 = *_X5;
  v10 = (const char *)&_X5[1];
  __asm { PRFM            #0, [X5,#8] }
  _X10 = result + 8;
  v17 = *(int8x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x8_t)vld1q_dup_s8(v10).u64[0];
  *a5 = HIBYTE(*(_QWORD *)result);
  v20 = (char *)(a5 + 1);
  v21 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v22 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x200000000000001));
  v23 = v20;
  do
  {
    _X11 = (uint64_t)&result[a2 + 8];
    v25 = *(int8x8_t *)&result[a2];
    __asm { PRFM            #0, [X11] }
    v27 = vld1_dup_s8(v23++);
    *v20 = v25.i8[7];
    v28 = (uint8x8_t)vext_s8(v9, v19, 1uLL);
    v29 = (uint8x8_t)vext_s8(v27, v25, 7uLL);
    *(int8x8_t *)result = vbsl_s8(v22, (int8x8_t)vsqadd_u8((uint8x8_t)v17, vqtbl1_s8(v8, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v17, v28), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202), (int8x8_t)vcgt_u8(v28, (uint8x8_t)v17)), (int8x8_t)vcgt_u8((uint8x8_t)v17, v29)), (int8x8_t)vcgt_u8(v29, (uint8x8_t)v17)))), v17);
    v30 = (const char *)(result + 8);
    --v21;
    v20 = (char *)v23;
    v19 = (int8x8_t)vld1q_dup_s8(v30).u64[0];
    v9 = v17;
    v17 = v25;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

uint8x8_t *sub_1C972FB58(uint8x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  uint8x8_t v10;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  do
  {
    v10 = *result;
    __asm { PRFM            #0, [X0,#8] }
    *a5++ = HIBYTE(*(unint64_t *)result);
    *result = vsqadd_u8(v10, vqtbl2_s8(*(int8x16x2_t *)&v7, (int8x8_t)vshr_n_u8(v10, 3uLL)));
    result = (uint8x8_t *)((char *)result + a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int8x16_t *sub_1C972FB90(int8x16_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12, uint64_t a13, int a14)
{
  int8x16_t v14;
  int v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  const char *v19;
  int8x16_t v20;
  int8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;

  v14 = *a3;
  v15 = a14 + 1;
  v16 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1C9862AC0));
  v17.i64[0] = 0x202020202020202;
  v17.i64[1] = 0x202020202020202;
  v18.i64[0] = 0x303030303030303;
  v18.i64[1] = 0x303030303030303;
  v19 = a5;
  do
  {
    v20 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    v26 = vld1q_dup_s8(v19++);
    v27 = (uint8x16_t)vextq_s8(v26, *result, 0xFuLL);
    *a5 = HIBYTE(*(unsigned __int128 *)result);
    a12.i8[0] = result->i8[(8 * a4) & 0x10];
    v28 = (uint8x16_t)vextq_s8(v20, a12, 1uLL);
    a12 = (int8x16_t)vsqaddq_u8((uint8x16_t)v20, vqtbl1q_s8(v14, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v20, v27), v18, v17), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v20)), (int8x16_t)vcgtq_u8((uint8x16_t)v20, v28)), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v20))));
    *result = vbslq_s8(v16, a12, v20);
    result = (int8x16_t *)((char *)result + a2);
    --v15;
    a5 = (char *)v19;
  }
  while (v15 > 1);
  return result;
}

uint8x16_t *sub_1C972FC2C(uint8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _BYTE *a5, uint8x16_t *a6, int a7)
{
  int8x16_t v7;
  int v8;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v18;
  int v20;
  int8x16_t v21;
  int8x16_t v22;
  uint8x16_t v24;
  int8x16_t v26;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i8[15];
    a6 = result;
    result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i8[(v8 + 1) * a2 + 15];
  v10 = *a6;
  _X5 = a6 + 1;
  v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  v18 = *result;
  __asm { PRFM            #0, [X9] }
  v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0x303030303030303;
  v22.i64[1] = 0x303030303030303;
  do
  {
    _X10 = (uint64_t)result[1].i64 + a2;
    v24 = *(uint8x16_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v18.i8[15];
    v26 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v18, v11), v22, v21), (int8x16_t)vcgtq_u8(v11, v18)), (int8x16_t)vcgtq_u8(v18, v24)), (int8x16_t)vcgtq_u8(v24, v18)));
    v11 = v18;
    *result = vsqaddq_u8(v18, v26);
    --v20;
    v18 = v24;
    result = (uint8x16_t *)((char *)result + a2);
  }
  while (v20 > 1);
  return result;
}

char *sub_1C972FCE4(char *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  int8x16_t v7;
  int v8;
  int8x16_t v9;
  const char *v10;
  int8x16_t v11;
  const char *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v23;
  int v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  const char *v29;
  int8x16_t v31;
  uint8x16_t v33;
  uint8x16_t v34;

  v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (char *)sub_1C97E60B4(result, a2, (uint64_t)a3, a4, a5, a6, 0x10uLL, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = (const char *)(a6 - 1);
    v11 = vld1q_dup_s8(v12);
  }
  else
  {
    v10 = a5;
    v11 = vld1q_dup_s8(v10++);
    *a5 = result[15];
    a6 = (unsigned __int8 *)result;
    result += a2;
    v8 = a7 - 1;
    a5 = (char *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[(int)(v13 + 1) * a2 + 15];
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 16;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 16;
  v23 = *(int8x16_t *)result;
  __asm { PRFM            #0, [X10] }
  v25 = v13 + 2;
  v26 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1C9862AC0));
  v27.i64[0] = 0x202020202020202;
  v27.i64[1] = 0x202020202020202;
  v28.i64[0] = 0x303030303030303;
  v28.i64[1] = 0x303030303030303;
  v29 = a5;
  do
  {
    _X12 = (uint64_t)&result[a2 + 16];
    v31 = *(int8x16_t *)&result[a2];
    __asm { PRFM            #0, [X12] }
    v7.i8[0] = result[a2 + ((8 * a4) & 0x10)];
    v33 = (uint8x16_t)vextq_s8(v11, v16, 0xFuLL);
    v34 = (uint8x16_t)vextq_s8(v31, v7, 1uLL);
    v7 = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v23, v33), v28, v27);
    *(int8x16_t *)result = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v23, vqtbl1q_s8(v9, vaddq_s8(vsubq_s8(vaddq_s8(v7, (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v23)), (int8x16_t)vcgtq_u8((uint8x16_t)v23, v34)), (int8x16_t)vcgtq_u8(v34, (uint8x16_t)v23)))), v23);
    v11 = vld1q_dup_s8(v29++);
    --v25;
    v16 = v23;
    *a5 = v23.i8[15];
    v23 = v31;
    a5 = (char *)v29;
    result += a2;
  }
  while (v25 > 1);
  return result;
}

unsigned __int8 *sub_1C972FE38(unsigned __int8 *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  const char *i8;
  int8x16_t v17;
  int8x16_t v19;
  char *v20;
  signed int v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  const char *v25;
  int8x16_t v27;
  int8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  const char *v32;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (unsigned __int8 *)sub_1C97E5C8C(result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[15];
    _X5 = (int8x16_t *)result;
    result += a2;
    v7 = a7 - 1;
  }
  v9 = *_X5;
  i8 = _X5[1].i8;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  v17 = *(int8x16_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = vld1q_dup_s8(i8);
  *a5 = HIBYTE(*(_OWORD *)result);
  v20 = (char *)(a5 + 1);
  v21 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v22 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1C9862AC0));
  v23.i64[0] = 0x202020202020202;
  v23.i64[1] = 0x202020202020202;
  v24.i64[0] = 0x303030303030303;
  v24.i64[1] = 0x303030303030303;
  v25 = v20;
  do
  {
    _X11 = (uint64_t)&result[a2 + 16];
    v27 = *(int8x16_t *)&result[a2];
    __asm { PRFM            #0, [X11] }
    v29 = vld1q_dup_s8(v25++);
    *v20 = v27.i8[15];
    v30 = (uint8x16_t)vextq_s8(v9, v19, 1uLL);
    v31 = (uint8x16_t)vextq_s8(v29, v27, 0xFuLL);
    *(int8x16_t *)result = vbslq_s8(v22, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v30), v24, v23), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v31)), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v17)))), v17);
    v32 = (const char *)(result + 16);
    --v21;
    v20 = (char *)v25;
    v19 = vld1q_dup_s8(v32);
    v9 = v17;
    v17 = v27;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

uint8x16_t *sub_1C972FF78(uint8x16_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  uint8x16_t v10;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  do
  {
    v10 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIBYTE(*(unsigned __int128 *)result);
    *result = vsqaddq_u8(v10, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v10, 3uLL)));
    result = (uint8x16_t *)((char *)result + a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int8x16_t *sub_1C972FFB0(int8x16_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;

  v8 = *a3;
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1C9862AE0));
  v13 = vceqzq_s8(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0x303030303030303;
  v15.i64[1] = 0x303030303030303;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v24 = vld1q_dup_s8(v16++);
    *a5 = v18.i8[15];
    v7.i8[0] = result->i8[(16 * a4) & 0x20];
    v25 = (uint8x16_t)vextq_s8(v24, v17, 0xFuLL);
    v26 = (uint8x16_t)vextq_s8(v17, v18, 0xFuLL);
    v27 = (uint8x16_t)vextq_s8(v17, v18, 1uLL);
    v28 = (uint8x16_t)vextq_s8(v18, v7, 1uLL);
    v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v26), v15, v14), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v28)), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v18))));
    *result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v27), v15, v14), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v25)), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v17)))), v17);
    result[1] = vbslq_s8(v12, v7, v18);
    result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (char *)v16;
  }
  while (v11 > 1);
  return result;
}

uint8x16_t *sub_1C9730094(uint8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _BYTE *a5, uint8x16_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v16;
  uint8x16_t v17;
  int v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i8[15];
    _X5 = result;
    result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i8[(v8 + 1) * a2 + 15];
  v10 = *_X5;
  v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v16 = *result;
  v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v19 = v8 + 2;
  v20.i64[0] = 0x202020202020202;
  v20.i64[1] = 0x202020202020202;
  v21.i64[0] = 0x303030303030303;
  v21.i64[1] = 0x303030303030303;
  do
  {
    v22 = v16;
    v23 = v17;
    _X9 = (uint64_t)result->i64 + a2;
    v16 = *(uint8x16_t *)((char *)result + a2);
    v17 = *(uint8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X9,#0x20] }
    *a5++ = v23.i8[15];
    v26 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v22, v10), v21, v20), (int8x16_t)vcgtq_u8(v10, v22)), (int8x16_t)vcgtq_u8(v22, v16)), (int8x16_t)vcgtq_u8(v16, v22)));
    v10 = v22;
    v27 = vsqaddq_u8(v22, v26);
    v28 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v23, v9), v21, v20), (int8x16_t)vcgtq_u8(v9, v23)), (int8x16_t)vcgtq_u8(v23, v17)), (int8x16_t)vcgtq_u8(v17, v23)));
    v9 = v23;
    *result = v27;
    result[1] = vsqaddq_u8(v23, v28);
    --v19;
    result = (uint8x16_t *)((char *)result + a2);
  }
  while (v19 > 1);
  return result;
}

int8x16_t *sub_1C9730174(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  int8x16_t v9;
  const char *v10;
  int8x16_t v11;
  const char *v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  const char *v32;
  uint8x16_t v33;
  int8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v38;
  uint8x16_t v39;
  int8x16_t v40;

  v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E60B4(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, 0x20uLL, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i8[15];
    v11 = vld1q_dup_s8(v12);
  }
  else
  {
    v10 = a5;
    v11 = vld1q_dup_s8(v10++);
    *a5 = result[1].i8[15];
    _X5 = result;
    result = (int8x16_t *)((char *)result + a2);
    v8 = a7 - 1;
    a5 = (char *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i8[(int)(v13 + 1) * a2 + 15];
  v14 = vdupq_n_s8(~a4);
  v15 = vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = vandq_s8(v14, (int8x16_t)xmmword_1C9862AE0);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *result;
  v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = vceqzq_s8(v16);
  v29 = vceqzq_s8(v15);
  v30.i64[0] = 0x202020202020202;
  v30.i64[1] = 0x202020202020202;
  v31.i64[0] = 0x303030303030303;
  v31.i64[1] = 0x303030303030303;
  v32 = a5;
  do
  {
    v33 = (uint8x16_t)vextq_s8(v17, v18, 0xFuLL);
    v34 = v25;
    v35 = (uint8x16_t)vextq_s8(v11, v17, 0xFuLL);
    v17 = v24;
    _X11 = &result->i8[a2];
    v24 = *(int8x16_t *)((char *)result + a2);
    v25 = *(int8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X11,#0x20] }
    v7.i8[0] = result->i8[a2 + ((16 * a4) & 0x20)];
    v38 = (uint8x16_t)vextq_s8(v24, v25, 1uLL);
    v39 = (uint8x16_t)vextq_s8(v25, v7, 1uLL);
    v40 = (int8x16_t)vcgtq_u8((uint8x16_t)v34, v39);
    v7 = (int8x16_t)vcgtq_u8(v39, (uint8x16_t)v34);
    *result = vbslq_s8(v29, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v9, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v35), v31, v30), (int8x16_t)vcgtq_u8(v35, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v38)), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v17)))), v17);
    result[1] = vbslq_s8(v28, (int8x16_t)vsqaddq_u8((uint8x16_t)v34, vqtbl1q_s8(v9, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v33), v31, v30), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v34)), v40), v7))), v34);
    v11 = vld1q_dup_s8(v32++);
    --v27;
    *a5 = v34.i8[15];
    v18 = v34;
    a5 = (char *)v32;
    result = (int8x16_t *)((char *)result + a2);
  }
  while (v27 > 1);
  return result;
}

int8x16_t *sub_1C973030C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  const char *i8;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v23;
  char *v24;
  signed int v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  const char *v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  const char *v40;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E5C8C((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u8[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u8[15];
    _X5 = result;
    result = (int8x16_t *)((char *)result + a2);
    v7 = a7 - 1;
  }
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = vandq_s8(v9, (int8x16_t)xmmword_1C9862AE0);
  v12 = *_X5;
  v13 = _X5[1];
  i8 = _X5[2].i8;
  __asm { PRFM            #0, [X5,#0x20] }
  v20 = *result;
  v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v23 = vld1q_dup_s8(i8);
  *a5 = v21.u8[15];
  v24 = (char *)(a5 + 1);
  v25 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v26 = vceqzq_s8(v11);
  v27 = vceqzq_s8(v10);
  v28.i64[0] = 0x202020202020202;
  v28.i64[1] = 0x202020202020202;
  v29.i64[0] = 0x303030303030303;
  v29.i64[1] = 0x303030303030303;
  v30 = v24;
  do
  {
    v31 = (uint8x16_t)vextq_s8(v12, v13, 1uLL);
    v32 = (uint8x16_t)vextq_s8(v13, v23, 1uLL);
    v33 = v21;
    v34 = v20;
    _X10 = &result->i8[a2];
    v20 = *(int8x16_t *)((char *)result + a2);
    v21 = *(int8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X10,#0x20] }
    v37 = vld1q_dup_s8(v30++);
    *v24 = v21.i8[15];
    v38 = (uint8x16_t)vextq_s8(v37, v20, 0xFuLL);
    v39 = (uint8x16_t)vextq_s8(v20, v21, 0xFuLL);
    *result = vbslq_s8(v27, (int8x16_t)vsqaddq_u8((uint8x16_t)v34, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v31), v29, v28), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v34)), (int8x16_t)vcgtq_u8((uint8x16_t)v34, v38)), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v34)))), v34);
    result[1] = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v33, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v33, v32), v29, v28), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v33)), (int8x16_t)vcgtq_u8((uint8x16_t)v33, v39)), (int8x16_t)vcgtq_u8(v39, (uint8x16_t)v33)))), v33);
    v40 = result[2].i8;
    --v25;
    v24 = (char *)v30;
    v23 = vld1q_dup_s8(v40);
    v12 = v34;
    v13 = v33;
    result = (int8x16_t *)((char *)result + a2);
  }
  while (v25 > 1);
  return result;
}

uint8x16_t *sub_1C9730494(uint8x16_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  uint8x16_t v11;
  uint8x16_t v12;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 1;
  v10 = a7 + 1;
  do
  {
    v11 = _X8[-1];
    v12 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIBYTE(*(unsigned __int128 *)_X8);
    _X8[-1] = vsqaddq_u8(v11, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v11, 3uLL)));
    *_X8 = vsqaddq_u8(v12, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v12, 3uLL)));
    _X8 = (uint8x16_t *)((char *)_X8 + a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1C97304DC(int8x16_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;

  v8 = *a3;
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1C9862AE0));
  v13 = vceqzq_s8(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0x303030303030303;
  v15.i64[1] = 0x303030303030303;
  v16 = a5;
  do
  {
    v18 = *result;
    v17 = result[1];
    v19 = result[2];
    v20 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v26 = vld1q_dup_s8(v16++);
    *a5 = v20.i8[15];
    v7.i8[0] = result->i8[(32 * a4) & 0x40];
    v27 = (uint8x16_t)vextq_s8(v26, v18, 0xFuLL);
    v28 = (uint8x16_t)vextq_s8(v18, v17, 0xFuLL);
    v29 = (uint8x16_t)vextq_s8(v17, v19, 0xFuLL);
    v30 = (uint8x16_t)vextq_s8(v19, v20, 0xFuLL);
    v31 = (uint8x16_t)vextq_s8(v18, v17, 1uLL);
    v32 = (uint8x16_t)vextq_s8(v17, v19, 1uLL);
    v33 = (uint8x16_t)vextq_s8(v19, v20, 1uLL);
    v34 = (uint8x16_t)vextq_s8(v20, v7, 1uLL);
    v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v20, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v20, v30), v15, v14), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v20)), (int8x16_t)vcgtq_u8((uint8x16_t)v20, v34)), (int8x16_t)vcgtq_u8(v34, (uint8x16_t)v20))));
    *result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v31), v15, v14), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v27)), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v18)))), v18);
    result[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v28), v15, v14), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v32)), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v17))));
    result[2] = (int8x16_t)vsqaddq_u8((uint8x16_t)v19, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v19, v29), v15, v14), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v19)), (int8x16_t)vcgtq_u8((uint8x16_t)v19, v33)), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v19))));
    result[3] = vbslq_s8(v12, v7, v20);
    result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (char *)v16;
  }
  while (v11 > 1);
  return result;
}

uint8x16_t *sub_1C9730628(uint8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _BYTE *a5, uint8x16_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  int v23;
  int8x16_t v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  int8x16_t v32;
  uint8x16_t v33;
  int8x16_t v34;
  uint8x16_t v35;
  int8x16_t v36;
  uint8x16_t v37;
  int8x16_t v38;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i8[15];
    _X5 = result;
    result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i8[(v8 + 1) * a2 + 15];
  v10 = *_X5;
  v9 = _X5[1];
  v11 = _X5[2];
  v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v18 = *result;
  v19 = result[1];
  v20 = result[2];
  v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v23 = v8 + 2;
  v24.i64[0] = 0x202020202020202;
  v24.i64[1] = 0x202020202020202;
  v25.i64[0] = 0x303030303030303;
  v25.i64[1] = 0x303030303030303;
  do
  {
    v26 = v18;
    v27 = v19;
    v28 = v20;
    v29 = v21;
    _X9 = (uint64_t)result->i64 + a2;
    v18 = *(uint8x16_t *)((char *)result + a2);
    v19 = *(uint8x16_t *)((char *)&result[1] + a2);
    v20 = *(uint8x16_t *)((char *)&result[2] + a2);
    v21 = *(uint8x16_t *)((char *)&result[3] + a2);
    __asm { PRFM            #0, [X9,#0x40] }
    *a5++ = v29.i8[15];
    v32 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v26, v10), v25, v24), (int8x16_t)vcgtq_u8(v10, v26)), (int8x16_t)vcgtq_u8(v26, v18)), (int8x16_t)vcgtq_u8(v18, v26)));
    v10 = v26;
    v33 = vsqaddq_u8(v26, v32);
    v34 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v27, v9), v25, v24), (int8x16_t)vcgtq_u8(v9, v27)), (int8x16_t)vcgtq_u8(v27, v19)), (int8x16_t)vcgtq_u8(v19, v27)));
    v9 = v27;
    v35 = vsqaddq_u8(v27, v34);
    v36 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v28, v11), v25, v24), (int8x16_t)vcgtq_u8(v11, v28)), (int8x16_t)vcgtq_u8(v28, v20)), (int8x16_t)vcgtq_u8(v20, v28)));
    v11 = v28;
    v37 = vsqaddq_u8(v28, v36);
    v38 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v29, v12), v25, v24), (int8x16_t)vcgtq_u8(v12, v29)), (int8x16_t)vcgtq_u8(v29, v21)), (int8x16_t)vcgtq_u8(v21, v29)));
    v12 = v29;
    *result = v33;
    result[1] = v35;
    result[2] = v37;
    result[3] = vsqaddq_u8(v29, v38);
    --v23;
    result = (uint8x16_t *)((char *)result + a2);
  }
  while (v23 > 1);
  return result;
}

int8x16_t *sub_1C9730778(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  const char *v9;
  int8x16_t v10;
  const char *v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  int8x16_t v29;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  const char *v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;

  v7 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E60B4(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, 0x40uLL, a7);
  }
  v8 = *a3;
  if ((a4 & 4) != 0)
  {
    v11 = &_X5[-1].i8[15];
    v10 = vld1q_dup_s8(v11);
  }
  else
  {
    v9 = a5;
    v10 = vld1q_dup_s8(v9++);
    *a5 = result[3].i8[15];
    _X5 = result;
    result = (int8x16_t *)((char *)result + a2);
    v7 = a7 - 1;
    a5 = (char *)v9;
  }
  v12 = v7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v12 + 1] = result[3].i8[(int)(v12 + 1) * a2 + 15];
  v13 = vdupq_n_s8(~a4);
  v14 = vandq_s8(v13, (int8x16_t)xmmword_1C9862AD0);
  v15 = vandq_s8(v13, (int8x16_t)xmmword_1C9862AE0);
  v16 = *_X5;
  v17 = _X5[1];
  v19 = _X5[2];
  v18 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v25 = *result;
  v26 = result[1];
  v27 = result + 2;
  v28 = result[2];
  v29 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v31 = v12 + 2;
  v32 = vceqzq_s8(v15);
  v33 = vceqzq_s8(v14);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0x303030303030303;
  v35.i64[1] = 0x303030303030303;
  v36 = a5;
  do
  {
    v37 = (uint8x16_t)vextq_s8(v19, v18, 0xFuLL);
    v18 = v29;
    v38 = (uint8x16_t)v28;
    v39 = (uint8x16_t)v26;
    v40 = (uint8x16_t)vextq_s8(v10, v16, 0xFuLL);
    v41 = (uint8x16_t)vextq_s8(v16, v17, 0xFuLL);
    v16 = v25;
    _X12 = &v27->i8[a2];
    v25 = *(int8x16_t *)((char *)&v27[-2] + a2);
    v26 = *(int8x16_t *)((char *)&v27[-1] + a2);
    v28 = *(int8x16_t *)((char *)v27 + a2);
    v29 = *(int8x16_t *)((char *)&v27[1] + a2);
    __asm { PRFM            #0, [X12,#0x20] }
    v10.i32[0] = v27[-2].u8[a2 + ((32 * a4) & 0x40)];
    v44 = (uint8x16_t)vextq_s8(v17, v19, 0xFuLL);
    v45 = (uint8x16_t)vextq_s8(v25, v26, 1uLL);
    v46 = (uint8x16_t)vextq_s8(v26, v28, 1uLL);
    v47 = (uint8x16_t)vextq_s8(v28, v29, 1uLL);
    v48 = (uint8x16_t)vextq_s8(v29, v10, 1uLL);
    v49 = (int8x16_t)vsqaddq_u8((uint8x16_t)v16, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v16, v40), v35, v34), (int8x16_t)vcgtq_u8(v40, (uint8x16_t)v16)), (int8x16_t)vcgtq_u8((uint8x16_t)v16, v45)), (int8x16_t)vcgtq_u8(v45, (uint8x16_t)v16))));
    v17 = (int8x16_t)v39;
    v50 = vsqaddq_u8(v39, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v39, v41), v35, v34), (int8x16_t)vcgtq_u8(v41, v39)), (int8x16_t)vcgtq_u8(v39, v46)), (int8x16_t)vcgtq_u8(v46, v39))));
    v51 = vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v38, v44), v35, v34), (int8x16_t)vcgtq_u8(v44, v38)), (int8x16_t)vcgtq_u8(v38, v47)), (int8x16_t)vcgtq_u8(v47, v38)));
    v19 = (int8x16_t)v38;
    v27[-2] = vbslq_s8(v33, v49, v16);
    v27[-1] = (int8x16_t)v50;
    *(uint8x16_t *)v27 = vsqaddq_u8(v38, v51);
    v27[1] = vbslq_s8(v32, (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v37), v35, v34), (int8x16_t)vcgtq_u8(v37, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v48)), (int8x16_t)vcgtq_u8(v48, (uint8x16_t)v18)))), v18);
    v10 = vld1q_dup_s8(v36++);
    --v31;
    v27 = (int8x16_t *)((char *)v27 + a2);
    *a5 = v18.i8[15];
    a5 = (char *)v36;
  }
  while (v31 > 1);
  return result;
}

int8x16_t *sub_1C973099C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const char *i8;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  const char *v26;
  int8x16_t v28;
  char *v29;
  signed int v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  const char *v35;
  uint8x16_t v36;
  int8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  int8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint8x16_t v52;
  int8x16_t v53;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E5C8C((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u8[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u8[15];
    _X5 = result;
    result = (int8x16_t *)((char *)result + a2);
    v7 = a7 - 1;
  }
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = vandq_s8(v9, (int8x16_t)xmmword_1C9862AE0);
  v13 = *_X5;
  v12 = _X5[1];
  v14 = _X5[2];
  v15 = _X5[3];
  i8 = _X5[4].i8;
  __asm { PRFM            #0, [X5,#0x40] }
  v22 = *result;
  v23 = result[1];
  v24 = result[2];
  v25 = result[3];
  v26 = result[4].i8;
  __asm { PRFM            #0, [X0,#0x40] }
  v28 = vld1q_dup_s8(i8);
  *a5 = v25.u8[15];
  v29 = (char *)(a5 + 1);
  v30 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v31 = vceqzq_s8(v11);
  v32 = vceqzq_s8(v10);
  v33.i64[0] = 0x202020202020202;
  v33.i64[1] = 0x202020202020202;
  v34.i64[0] = 0x303030303030303;
  v34.i64[1] = 0x303030303030303;
  v35 = v29;
  do
  {
    v36 = (uint8x16_t)vextq_s8(v14, v15, 1uLL);
    v37 = v25;
    v38 = (uint8x16_t)v24;
    v39 = (uint8x16_t)v23;
    v40 = (uint8x16_t)vextq_s8(v13, v12, 1uLL);
    v13 = v22;
    _X11 = &v26[a2];
    v22 = *(int8x16_t *)&v26[a2 - 64];
    v23 = *(int8x16_t *)&v26[a2 - 48];
    v24 = *(int8x16_t *)&v26[a2 - 32];
    v25 = *(int8x16_t *)&v26[a2 - 16];
    __asm { PRFM            #0, [X11] }
    v43 = vld1q_dup_s8(v35++);
    *v29 = v25.i8[15];
    v44 = (uint8x16_t)vextq_s8(v15, v28, 1uLL);
    v45 = (uint8x16_t)vextq_s8(v12, v14, 1uLL);
    v46 = (uint8x16_t)vextq_s8(v43, v22, 0xFuLL);
    v47 = (uint8x16_t)vextq_s8(v22, v23, 0xFuLL);
    v48 = (uint8x16_t)vextq_s8(v23, v24, 0xFuLL);
    v49 = (uint8x16_t)vextq_s8(v24, v25, 0xFuLL);
    v50 = (int8x16_t)vsqaddq_u8((uint8x16_t)v13, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v13, v40), v34, v33), (int8x16_t)vcgtq_u8(v40, (uint8x16_t)v13)), (int8x16_t)vcgtq_u8((uint8x16_t)v13, v46)), (int8x16_t)vcgtq_u8(v46, (uint8x16_t)v13))));
    v51 = vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v39, v45), v34, v33), (int8x16_t)vcgtq_u8(v45, v39)), (int8x16_t)vcgtq_u8(v39, v47)), (int8x16_t)vcgtq_u8(v47, v39)));
    v12 = (int8x16_t)v39;
    v52 = vsqaddq_u8(v39, v51);
    v14 = (int8x16_t)v38;
    v53 = vbslq_s8(v31, (int8x16_t)vsqaddq_u8((uint8x16_t)v37, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v37, v44), v34, v33), (int8x16_t)vcgtq_u8(v44, (uint8x16_t)v37)), (int8x16_t)vcgtq_u8((uint8x16_t)v37, v49)), (int8x16_t)vcgtq_u8(v49, (uint8x16_t)v37)))), v37);
    *((int8x16_t *)v26 - 4) = vbslq_s8(v32, v50, v13);
    *((uint8x16_t *)v26 - 3) = v52;
    v28 = vld1q_dup_s8(v26);
    --v30;
    *((uint8x16_t *)v26 - 2) = vsqaddq_u8(v38, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v38, v36), v34, v33), (int8x16_t)vcgtq_u8(v36, v38)), (int8x16_t)vcgtq_u8(v38, v48)), (int8x16_t)vcgtq_u8(v48, v38))));
    *((int8x16_t *)v26 - 1) = v53;
    v26 += a2;
    v29 = (char *)v35;
    v15 = v37;
  }
  while (v30 > 1);
  return result;
}

uint8x16_t *sub_1C9730BA0(uint8x16_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 2;
  v10 = a7 + 1;
  do
  {
    v11 = _X8[-2];
    v12 = _X8[-1];
    v13 = *_X8;
    v14 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v14.i8[15];
    _X8[-2] = vsqaddq_u8(v11, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v11, 3uLL)));
    _X8[-1] = vsqaddq_u8(v12, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v12, 3uLL)));
    *_X8 = vsqaddq_u8(v13, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v13, 3uLL)));
    _X8[1] = vsqaddq_u8(v14, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v14, 3uLL)));
    _X8 = (uint8x16_t *)((char *)_X8 + a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x8_t *sub_1C9730C08(int8x8_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12, uint64_t a13, int a14)
{
  int8x16_t v14;
  int v15;
  int8x8_t v16;
  const __int16 *v17;
  int8x8_t v18;
  int8x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;

  v14.i64[0] = *a3;
  v14.i64[1] = a3[4];
  v15 = a14 + 1;
  v16 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x202000000000101));
  v17 = a5;
  do
  {
    v18 = *result;
    __asm { PRFM            #0, [X0,#8] }
    v24 = (int8x8_t)vld1_dup_s16(v17++);
    v25 = (uint8x8_t)vext_s8(v24, *result, 6uLL);
    *a5 = HIWORD(*(unint64_t *)result);
    a12.i16[0] = *(__int16 *)((char *)result->i16 + ((4 * a4) & 8));
    v26 = (uint8x8_t)vext_s8(v18, a12, 2uLL);
    a12 = (int8x8_t)vsqadd_u8((uint8x8_t)v18, vqtbl1_s8(v14, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v18, v25), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v25, (uint8x8_t)v18)), (int8x8_t)vcgt_u8((uint8x8_t)v18, v26)), (int8x8_t)vcgt_u8(v26, (uint8x8_t)v18))));
    *result = vbsl_s8(v16, a12, v18);
    result = (int8x8_t *)((char *)result + a2);
    --v15;
    a5 = (__int16 *)v17;
  }
  while (v15 > 1);
  return result;
}

uint8x8_t *sub_1C9730CB4(uint8x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x8_t *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v19;
  int v21;
  uint8x8_t v23;
  int8x8_t v25;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[3];
    a6 = result;
    result = (uint8x8_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result->i16[3] + (v9 + 1) * a2);
  v11 = *a6;
  _X5 = a6 + 1;
  v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  v19 = *result;
  __asm { PRFM            #0, [X9] }
  v21 = v9 + 2;
  do
  {
    _X10 = (uint64_t)&result[1] + a2;
    v23 = *(uint8x8_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v19.i16[3];
    v25 = vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8(v19, v12), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v12, v19)), (int8x8_t)vcgt_u8(v19, v23)), (int8x8_t)vcgt_u8(v23, v19)));
    v12 = v19;
    *result = vsqadd_u8(v19, v25);
    --v21;
    v19 = v23;
    result = (uint8x8_t *)((char *)result + a2);
  }
  while (v21 > 1);
  return result;
}

int8x8_t *sub_1C9730D7C(int8x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  const __int16 *v9;
  int8x8_t v10;
  const __int16 *v11;
  unsigned int v12;
  int8x8_t v14;
  int8x8_t v15;
  int8x8_t v22;
  int v24;
  int8x8_t v25;
  const __int16 *v26;
  int8x8_t v28;
  uint8x8_t v30;
  uint8x8_t v31;

  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x8_t *)sub_1C97E4F30((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    v11 = (const __int16 *)(a6 - 2);
    v10 = (int8x8_t)vld1q_dup_s16(v11).u64[0];
  }
  else
  {
    v9 = (const __int16 *)a5;
    v10 = (int8x8_t)vld1q_dup_s16(v9++).u64[0];
    *(_WORD *)a5 = result->i16[3];
    a6 = (unsigned __int8 *)result;
    result = (int8x8_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v9;
  }
  v7.i64[1] = v8;
  v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v12 + 1)] = *(__int16 *)((char *)&result->i16[3] + (int)(v12 + 1) * a2);
  v14 = *(int8x8_t *)a6;
  _X5 = a6 + 8;
  v15 = v14;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 1;
  v22 = *result;
  __asm { PRFM            #0, [X10] }
  v24 = v12 + 2;
  v25 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x202000000000101));
  v26 = (const __int16 *)a5;
  do
  {
    _X12 = (uint64_t)&result[1] + a2;
    v28 = *(int8x8_t *)((char *)result + a2);
    __asm { PRFM            #0, [X12] }
    v30 = (uint8x8_t)vext_s8(v10, v15, 6uLL);
    v15.i16[0] = *(__int16 *)((char *)result->i16 + a2 + ((4 * a4) & 8));
    v31 = (uint8x8_t)vext_s8(v28, v15, 2uLL);
    *result = vbsl_s8(v25, (int8x8_t)vsqadd_u8((uint8x8_t)v22, vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v22, v30), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v30, (uint8x8_t)v22)), (int8x8_t)vcgt_u8((uint8x8_t)v22, v31)), (int8x8_t)vcgt_u8(v31, (uint8x8_t)v22)))), v22);
    v10 = (int8x8_t)vld1q_dup_s16(v26++).u64[0];
    --v24;
    v15 = v22;
    *(_WORD *)a5 = v22.i16[3];
    v22 = v28;
    a5 = (char *)v26;
    result = (int8x8_t *)((char *)result + a2);
  }
  while (v24 > 1);
  return result;
}

uint64_t sub_1C9730ED8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _BYTE *a5, int8x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x8_t v9;
  const __int16 *v10;
  int8x8_t v17;
  int8x8_t v19;
  __int16 *v20;
  signed int v21;
  int8x8_t v22;
  const __int16 *v23;
  int8x8_t v25;
  int8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  const __int16 *v30;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E4FA8((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 6);
    a5 += 2;
    _X5 = (int8x8_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = *_X5;
  v10 = (const __int16 *)&_X5[1];
  __asm { PRFM            #0, [X5,#8] }
  _X10 = result + 8;
  v17 = *(int8x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x8_t)vld1q_dup_s16(v10).u64[0];
  *(_WORD *)a5 = HIWORD(*(_QWORD *)result);
  v20 = (__int16 *)(a5 + 2);
  v21 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v22 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x202000000000101));
  v23 = v20;
  do
  {
    _X11 = result + a2 + 8;
    v25 = *(int8x8_t *)(result + a2);
    __asm { PRFM            #0, [X11] }
    v27 = (int8x8_t)vld1_dup_s16(v23++);
    *v20 = v25.i16[3];
    v28 = (uint8x8_t)vext_s8(v9, v19, 2uLL);
    v29 = (uint8x8_t)vext_s8(v27, v25, 6uLL);
    *(int8x8_t *)result = vbsl_s8(v22, (int8x8_t)vsqadd_u8((uint8x8_t)v17, vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v17, v28), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v28, (uint8x8_t)v17)), (int8x8_t)vcgt_u8((uint8x8_t)v17, v29)), (int8x8_t)vcgt_u8(v29, (uint8x8_t)v17)))), v17);
    v30 = (const __int16 *)(result + 8);
    --v21;
    v20 = (__int16 *)v23;
    v19 = (int8x8_t)vld1q_dup_s16(v30).u64[0];
    v9 = v17;
    v17 = v25;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1C9731020(int8x16_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12, uint64_t a13, int a14)
{
  int8x16_t v14;
  int v15;
  int8x16_t v16;
  const __int16 *v17;
  int8x16_t v18;
  int8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;

  v14.i64[0] = *a3;
  v14.i64[1] = a3[4];
  v15 = a14 + 1;
  v16 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1C9862AF0));
  v17 = a5;
  do
  {
    v18 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    v24 = (int8x16_t)vld1q_dup_s16(v17++);
    v25 = (uint8x16_t)vextq_s8(v24, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned __int128 *)result);
    a12.i16[0] = *(__int16 *)((char *)result->i16 + ((8 * a4) & 0x10));
    v26 = (uint8x16_t)vextq_s8(v18, a12, 2uLL);
    a12 = (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v14, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v25), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v26)), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v18))));
    *result = vbslq_s8(v16, a12, v18);
    result = (int8x16_t *)((char *)result + a2);
    --v15;
    a5 = (__int16 *)v17;
  }
  while (v15 > 1);
  return result;
}

uint64_t sub_1C97310CC(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _BYTE *a5, int8x16_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  const __int16 *i16;
  int8x16_t v17;
  int8x16_t v19;
  __int16 *v20;
  signed int v21;
  int8x16_t v22;
  const __int16 *v23;
  int8x16_t v25;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  const __int16 *v30;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E50FC((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 14);
    a5 += 2;
    _X5 = (int8x16_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  v17 = *(int8x16_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_s16(i16);
  *(_WORD *)a5 = HIWORD(*(_OWORD *)result);
  v20 = (__int16 *)(a5 + 2);
  v21 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v22 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1C9862AF0));
  v23 = v20;
  do
  {
    _X11 = result + a2 + 16;
    v25 = *(int8x16_t *)(result + a2);
    __asm { PRFM            #0, [X11] }
    v27 = (int8x16_t)vld1q_dup_s16(v23++);
    *v20 = v25.i16[7];
    v28 = (uint8x16_t)vextq_s8(v9, v19, 2uLL);
    v29 = (uint8x16_t)vextq_s8(v27, v25, 0xEuLL);
    *(int8x16_t *)result = vbslq_s8(v22, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v28), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v29)), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v17)))), v17);
    v30 = (const __int16 *)(result + 16);
    --v21;
    v20 = (__int16 *)v23;
    v19 = (int8x16_t)vld1q_dup_s16(v30);
    v9 = v17;
    v17 = v25;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1C9731214(int8x16_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862B20);
  v11 = a7 + 1;
  v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1C9862B30));
  v13 = vceqzq_s8(v10);
  v14 = a5;
  do
  {
    v15 = *result;
    v16 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v22 = (int8x16_t)vld1q_dup_s16(v14++);
    *a5 = v16.i16[7];
    v7.i16[0] = *(__int16 *)((char *)result->i16 + ((16 * a4) & 0x20));
    v23 = (uint8x16_t)vextq_s8(v22, v15, 0xEuLL);
    v24 = (uint8x16_t)vextq_s8(v15, v16, 0xEuLL);
    v25 = (uint8x16_t)vextq_s8(v15, v16, 2uLL);
    v26 = (uint8x16_t)vextq_s8(v16, v7, 2uLL);
    v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v16, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v16, v24), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v24, (uint8x16_t)v16)), (int8x16_t)vcgtq_u8((uint8x16_t)v16, v26)), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v16))));
    *result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v15, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v15, v25), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v15)), (int8x16_t)vcgtq_u8((uint8x16_t)v15, v23)), (int8x16_t)vcgtq_u8(v23, (uint8x16_t)v15)))), v15);
    result[1] = vbslq_s8(v12, v7, v16);
    result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (__int16 *)v14;
  }
  while (v11 > 1);
  return result;
}

uint8x16_t *sub_1C9731308(uint8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x16_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v17;
  uint8x16_t v18;
  int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int8x16_t v25;
  uint8x16_t v26;
  int8x16_t v27;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result[1].i16[7] + (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v17 = *result;
  v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v20 = v9 + 2;
  do
  {
    v21 = v17;
    v22 = v18;
    _X9 = (uint64_t)result->i64 + a2;
    v17 = *(uint8x16_t *)((char *)result + a2);
    v18 = *(uint8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X9,#0x20] }
    *a5++ = v22.i16[7];
    v25 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v21, v11), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v11, v21)), (int8x16_t)vcgtq_u8(v21, v17)), (int8x16_t)vcgtq_u8(v17, v21)));
    v11 = v21;
    v26 = vsqaddq_u8(v21, v25);
    v27 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v22, v10), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v10, v22)), (int8x16_t)vcgtq_u8(v22, v18)), (int8x16_t)vcgtq_u8(v18, v22)));
    v10 = v22;
    *result = v26;
    result[1] = vsqaddq_u8(v22, v27);
    --v20;
    result = (uint8x16_t *)((char *)result + a2);
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1C97313F8(int8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  int8x16_t v28;
  int8x16_t v29;
  const __int16 *v30;
  uint8x16_t v31;
  int8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v36;
  uint8x16_t v37;
  int8x16_t v38;

  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E5174((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = (const __int16 *)a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *(_WORD *)a5 = result[1].i16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v13 + 1)] = *(__int16 *)((char *)&result[1].i16[7] + (int)(v13 + 1) * a2);
  v14 = vdupq_n_s8(~a4);
  v15 = vandq_s8(v14, (int8x16_t)xmmword_1C9862B20);
  v16 = vandq_s8(v14, (int8x16_t)xmmword_1C9862B30);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *result;
  v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = vceqzq_s8(v16);
  v29 = vceqzq_s8(v15);
  v30 = (const __int16 *)a5;
  do
  {
    v31 = (uint8x16_t)vextq_s8(v17, v18, 0xEuLL);
    v32 = v25;
    v33 = (uint8x16_t)vextq_s8(v11, v17, 0xEuLL);
    v17 = v24;
    _X11 = &result->i8[a2];
    v24 = *(int8x16_t *)((char *)result + a2);
    v25 = *(int8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X11,#0x20] }
    v7.i16[0] = *(__int16 *)((char *)result->i16 + a2 + ((16 * a4) & 0x20));
    v36 = (uint8x16_t)vextq_s8(v24, v25, 2uLL);
    v37 = (uint8x16_t)vextq_s8(v25, v7, 2uLL);
    v38 = (int8x16_t)vcgtq_u8((uint8x16_t)v32, v37);
    v7 = (int8x16_t)vcgtq_u8(v37, (uint8x16_t)v32);
    *result = vbslq_s8(v29, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v33), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v36)), (int8x16_t)vcgtq_u8(v36, (uint8x16_t)v17)))), v17);
    result[1] = vbslq_s8(v28, (int8x16_t)vsqaddq_u8((uint8x16_t)v32, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v32, v31), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v32)), v38), v7))), v32);
    v11 = (int8x16_t)vld1q_dup_s16(v30++);
    --v27;
    *(_WORD *)a5 = v32.i16[7];
    v18 = v32;
    a5 = (char *)v30;
    result = (int8x16_t *)((char *)result + a2);
  }
  while (v27 > 1);
  return result;
}

uint64_t sub_1C9731598(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _BYTE *a5, int8x16_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *i16;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v23;
  __int16 *v24;
  signed int v25;
  int8x16_t v26;
  int8x16_t v27;
  const __int16 *v28;
  uint8x16_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  const __int16 *v38;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E51EC((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 30);
    a5 += 2;
    _X5 = (int8x16_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = vdupq_n_s8(~a4);
  v10 = vandq_s8(v9, (int8x16_t)xmmword_1C9862B20);
  v11 = vandq_s8(v9, (int8x16_t)xmmword_1C9862B30);
  v12 = *_X5;
  v13 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  v20 = *(int8x16_t *)result;
  v21 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v23 = (int8x16_t)vld1q_dup_s16(i16);
  *(_WORD *)a5 = v21.i16[7];
  v24 = (__int16 *)(a5 + 2);
  v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v26 = vceqzq_s8(v11);
  v27 = vceqzq_s8(v10);
  v28 = v24;
  do
  {
    v29 = (uint8x16_t)vextq_s8(v12, v13, 2uLL);
    v30 = (uint8x16_t)vextq_s8(v13, v23, 2uLL);
    v31 = v21;
    v32 = v20;
    _X10 = result + a2;
    v20 = *(int8x16_t *)(result + a2);
    v21 = *(int8x16_t *)(result + a2 + 16);
    __asm { PRFM            #0, [X10,#0x20] }
    v35 = (int8x16_t)vld1q_dup_s16(v28++);
    *v24 = v21.i16[7];
    v36 = (uint8x16_t)vextq_s8(v35, v20, 0xEuLL);
    v37 = (uint8x16_t)vextq_s8(v20, v21, 0xEuLL);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vsqaddq_u8((uint8x16_t)v32, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v32, v29), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v32)), (int8x16_t)vcgtq_u8((uint8x16_t)v32, v36)), (int8x16_t)vcgtq_u8(v36, (uint8x16_t)v32)))), v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v31, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v31, v30), (int8x16_t)xmmword_1C9862B10, (int8x16_t)xmmword_1C9862B00), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v31)), (int8x16_t)vcgtq_u8((uint8x16_t)v31, v37)), (int8x16_t)vcgtq_u8(v37, (uint8x16_t)v31)))), v31);
    v38 = (const __int16 *)(result + 32);
    --v25;
    v24 = (__int16 *)v28;
    v23 = (int8x16_t)vld1q_dup_s16(v38);
    v12 = v32;
    v13 = v31;
    result += a2;
  }
  while (v25 > 1);
  return result;
}

char *sub_1C9731728(char *result, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  const char *v13;
  char *v14;
  int8x16x2_t v22;
  int8x16x2_t v23;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  do
  {
    v13 = result;
    v22 = vld2q_s8(v13);
    v14 = (char *)&v13[a2];
    __asm { PRFM            #0, [X0,#0x20] }
    _X11 = v14;
    v23 = vld2q_s8(_X11);
    _X11 += 32;
    __asm { PRFM            #0, [X11] }
    *a5 = v22.val[0].i8[15];
    a5[1] = v22.val[1].i8[15];
    a5[2] = v23.val[0].i8[15];
    a5[3] = v23.val[1].i8[15];
    v22.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v22.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v22.val[0], 3uLL)));
    v22.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v22.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v22.val[1], 3uLL)));
    v23.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[0], 3uLL)));
    vst2q_s8(result, v22);
    v11 = 2 * a2;
    result += v11;
    v23.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[1], 3uLL)));
    vst2q_s8(v14, v23);
    v12 -= 2;
    a5 += 4;
  }
  while (v12 > 2);
  return result;
}

int8x16_t *sub_1C97317B8(int8x16_t *a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, uint64_t a6, int a7)
{
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  if ((a4 & 4) != 0)
    v12 = 34;
  else
    v12 = 2;
  v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0)
    v14 = 17;
  else
    v14 = 1;
  v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97176E4(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97176E4(a1 + 4, a2, a3, v15, a5, v16, a7);
}

uint8x16_t *sub_1C9731854(uint8x16_t *a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, uint8x16_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C972017C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C972017C(a1 + 4, a2, a3, v16, a5, a6 + 4, a7);
}

int8x16_t *sub_1C9731900(int8x16_t *a1, uint64_t a2, uint64_t *a3, int a4, char *a5, int8x16_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97186EC(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97186EC(a1 + 4, a2, a3, v16, a5, a6 + 4, a7);
}

uint64_t sub_1C97319AC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _BYTE *a5, int8x16_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97184E0(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97184E0(a1 + 64, a2, a3, v16, a5, a6 + 4, a7);
}

char *sub_1C9731A58(char *a1, uint64_t a2, __int128 *a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C97100A4(a1, a2, a3, a4, a5, a6, a7);
  return sub_1C97100A4(a1 + 64, a2, a3, v12, a5, v13, a7);
}

int8x16_t *sub_1C9731AAC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  const __int16 *v14;
  int16x8_t v15;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int16x8_t v24;

  v8 = *a3;
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xFF00FF00FF00FFLL;
  v13.i64[1] = 0xFF00FF00FF00FFLL;
  v14 = a5;
  do
  {
    v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v21 = (int8x16_t)vld1q_dup_s16(v14++);
    v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned __int128 *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C9731B5C(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v10;
  uint16x8_t v11;
  int16x8_t v18;
  uint64_t v20;
  int v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  uint16x8_t v26;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  v10 = *a6;
  _X5 = a6 + 1;
  v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v20 = 2 * a2;
  v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xFF00FF00FF00FFLL;
  v24.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v18;
    v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1C9731C30(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  int8x16_t v33;
  uint16x8_t v35;
  uint16x8_t v36;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E4AE4(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = (const __int16 *)(a6 - 1);
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v23 = *result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xFF00FF00FF00FFLL;
  v30.i64[1] = 0xFF00FF00FF00FFLL;
  v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C9731D98(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  const __int16 *i16;
  int16x8_t v17;
  int8x16_t v19;
  __int16 *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  const __int16 *v27;
  int8x16_t v29;
  int8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  const __int16 *v34;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E46C4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  v17 = *result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned __int128 *)result);
  v20 = (__int16 *)(a5 + 1);
  v21 = 2 * a2;
  v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B40));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *v20 = v29.i16[7];
    v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    v34 = result[1].i16;
    --v22;
    result = (int16x8_t *)((char *)result + v21);
    v19 = (int8x16_t)vld1q_dup_s16(v34);
    v20 = (__int16 *)v27;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C9731EEC(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v10;
  int16x8_t v11;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  v10.i64[0] = 0xFF00FF00FF00FFLL;
  v10.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)result);
    *result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 3uLL))), (int16x8_t)0), v10);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C9731F38(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int8x16_t v29;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFF00FF00FF00FFLL;
  v15.i64[1] = 0xFF00FF00FF00FFLL;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C973202C(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v16;
  uint16x8_t v17;
  uint64_t v19;
  int v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v16 = *result;
  v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v19 = 2 * a2;
  v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xFF00FF00FF00FFLL;
  v22.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v23 = (int16x8_t)v16;
    v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v19);
    v10 = (uint16x8_t)v23;
    v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1C9732128(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  const __int16 *v33;
  uint16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E4AE4(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *result;
  v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xFF00FF00FF00FFLL;
  v32.i64[1] = 0xFF00FF00FF00FFLL;
  v33 = a5;
  do
  {
    v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    v35 = (int16x8_t)v25;
    v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    v24 = *(int8x16_t *)((char *)result + 2 * a2);
    v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    v17 = (int8x16_t)v36;
    v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

int8x16_t *sub_1C97322D4(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *i16;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v23;
  __int16 *v24;
  uint64_t v25;
  signed int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  uint16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  const __int16 *v42;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E46C4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *_X5;
  v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  v20 = *result;
  v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  v24 = (__int16 *)(a5 + 1);
  v25 = 2 * a2;
  v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v27 = (int8x16_t)vceqzq_s16(v11);
  v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xFF00FF00FF00FFLL;
  v30.i64[1] = 0xFF00FF00FF00FFLL;
  v31 = v24;
  do
  {
    v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    v33 = (int16x8_t)v21;
    v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    v20 = *(int8x16_t *)((char *)result + 2 * a2);
    v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    v37 = (int8x16_t)vld1q_dup_s16(v31++);
    v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *v24 = v21.i16[7];
    v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    v42 = result[2].i16;
    --v26;
    result = (int8x16_t *)((char *)result + v25);
    v23 = (int8x16_t)vld1q_dup_s16(v42);
    v24 = (__int16 *)v31;
    v13 = (int8x16_t)v34;
    v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C973246C(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v19;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 1;
  v10 = a7 + 1;
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v12 = _X8[-1];
    v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)_X8);
    v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 3uLL), v13, 3uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C97324CC(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFF00FF00FF00FFLL;
  v15.i64[1] = 0xFF00FF00FF00FFLL;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    v20 = result[2];
    v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9732638(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int v23;
  uint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v18 = *result;
  v19 = result[1];
  v20 = result[2];
  v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v23 = v8 + 2;
  v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v27 = (int16x8_t)v18;
    v28 = (int16x8_t)v19;
    v29 = (int16x8_t)v20;
    v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    result = (uint16x8_t *)((char *)result + v24);
    v10 = (uint16x8_t)v27;
    v9 = (uint16x8_t)v28;
    v12 = (uint16x8_t)v29;
    v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int8x16_t *sub_1C97327B4(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  const __int16 *v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int8x16_t v51;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E4AE4(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *result;
  v27 = result[1];
  v28 = result + 2;
  v29 = result[2];
  v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFF00FF00FF00FFLL;
  v37.i64[1] = 0xFF00FF00FF00FFLL;
  v38 = a5;
  do
  {
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v30;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v29;
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    v17 = (int16x8_t)v27;
    v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

int8x16_t *sub_1C97329F0(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const __int16 *i16;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  const __int16 *v26;
  int8x16_t v28;
  __int16 *v29;
  uint64_t v30;
  signed int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x8_t v35;
  const __int16 *v36;
  int16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  uint16x8_t v40;
  int8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E46C4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v14 = _X5[2];
  v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  v22 = *result;
  v23 = result[1];
  v24 = result[2];
  v25 = result[3];
  v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  v29 = (__int16 *)(a5 + 1);
  v30 = a2;
  v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v32 = (int8x16_t)vceqzq_s16(v11);
  v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xFF00FF00FF00FFLL;
  v35.i64[1] = 0xFF00FF00FF00FFLL;
  v36 = v29;
  do
  {
    v37 = (int16x8_t)v25;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    v39 = (int16x8_t)v24;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v23;
    v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    v22 = *(int8x16_t *)&v26[v30 - 32];
    v23 = *(int8x16_t *)&v26[v30 - 24];
    v24 = *(int8x16_t *)&v26[v30 - 16];
    v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    v43 = (int8x16_t)vld1q_dup_s16(v36++);
    v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *v29 = v25.i16[7];
    v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    v26 = (const __int16 *)((char *)v26 + v30 * 2);
    v29 = (__int16 *)v36;
    v14 = (int8x16_t)v39;
    v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int16x8_t *sub_1C9732C10(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 2;
  v10 = a7 + 1;
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v12 = _X8[-2];
    v13 = _X8[-1];
    v14 = *_X8;
    v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 3uLL), v13, 3uLL));
    v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 3uLL), v15, 3uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C9732C9C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int8x16_t v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;

  v8 = *a3;
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862AD0);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B50);
  v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v18 = result[2];
    v19 = result[3];
    v20 = result[4];
    v21 = result[5];
    v23 = result[6];
    v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C9732F14(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int16x8_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int v34;
  uint64_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  v14 = _X5[4];
  v13 = _X5[5];
  v16 = _X5[6];
  v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v23 = *(uint16x8_t *)result;
  v24 = *(uint16x8_t *)(result + 16);
  v25 = *(uint16x8_t *)(result + 32);
  v26 = *(uint16x8_t *)(result + 48);
  v27 = *(uint16x8_t *)(result + 64);
  v28 = *(uint16x8_t *)(result + 80);
  v29 = (int16x8_t *)(result + 96);
  v30 = *(uint16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v34 = v8 + 2;
  v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFF00FF00FF00FFLL;
  v37.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v38 = (int16x8_t)v31;
    v39 = (int16x8_t)v30;
    v40 = (int16x8_t)v28;
    v41 = (int16x8_t)v27;
    v42 = (int16x8_t)v26;
    v43 = (int16x8_t)v25;
    v44 = (int16x8_t)v24;
    v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v29 = (int16x8_t *)((char *)v29 + v35);
    v10 = (uint16x8_t)v45;
    v9 = (uint16x8_t)v44;
    v12 = (uint16x8_t)v43;
    v11 = (uint16x8_t)v42;
    v14 = (uint16x8_t)v41;
    v13 = (uint16x8_t)v40;
    v16 = (uint16x8_t)v39;
    v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int8x16_t *sub_1C97331C4(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  const __int16 *v9;
  int8x16_t v10;
  const __int16 *v11;
  unsigned int v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  const __int16 *v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;

  v7 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E4AE4(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 4) != 0)
  {
    v11 = &_X5[-1].i16[7];
    v10 = (int8x16_t)vld1q_dup_s16(v11);
  }
  else
  {
    v9 = a5;
    v10 = (int8x16_t)vld1q_dup_s16(v9++);
    *a5 = result[7].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
    a5 = (__int16 *)v9;
  }
  v12 = v7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v12 + 1] = result[7].i16[(int)(v12 + 1) * a2 + 7];
  v13 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v14 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862AD0);
  v16 = *_X5;
  v15 = _X5[1];
  v17 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862B50);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *result;
  v31 = result[1];
  v32 = result[2];
  v33 = result[3];
  v34 = result[4];
  v35 = result[5];
  v36 = result + 6;
  v37 = result[6];
  v38 = result[7];
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = v12 + 2;
  v42 = 2 * a2;
  v43 = (int8x16_t)vceqzq_s16(v17);
  v44 = (int8x16_t)vceqzq_s16(v14);
  v45.i64[0] = 0x202020202020202;
  v45.i64[1] = 0x202020202020202;
  v46.i64[0] = 0xFF00FF00FF00FFLL;
  v46.i64[1] = 0xFF00FF00FF00FFLL;
  v47 = a5;
  do
  {
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v22 = (int16x8_t)v38;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xEuLL);
    v23 = (int16x8_t)v37;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v35;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xEuLL);
    v21 = (int16x8_t)v34;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v33;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v32;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xEuLL);
    v15 = (int16x8_t)v31;
    v55 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v16, 0xEuLL);
    v16 = (int16x8_t)v30;
    _X13 = &v36->i8[v42];
    v30 = *(int8x16_t *)((char *)&v36[-6] + v42);
    v31 = *(int8x16_t *)((char *)&v36[-5] + v42);
    v32 = *(int8x16_t *)((char *)&v36[-4] + v42);
    v33 = *(int8x16_t *)((char *)&v36[-3] + v42);
    v34 = *(int8x16_t *)((char *)&v36[-2] + v42);
    v35 = *(int8x16_t *)((char *)&v36[-1] + v42);
    v57 = (uint16x8_t)vextq_s8(v30, v31, 2uLL);
    v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v16));
    v60 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
    v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v15));
    v62 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
    v63 = vqmovn_high_s16(vqmovn_s16(v59), v61);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v19));
    v65 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v62));
    v37 = *(int8x16_t *)((char *)v36 + 2 * a2);
    v38 = *(int8x16_t *)((char *)&v36[1] + v42);
    v66 = vaddq_s16(v65, (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v18));
    v67 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v64), v66);
    v69 = (uint16x8_t)vextq_s8(v35, v37, 2uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v72 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v20));
    v73 = (uint16x8_t)vextq_s8(v37, v38, 2uLL);
    v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v21))), v72);
    v75 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v73);
    v76 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), v75);
    v75.i32[0] = v36[8 * ((a4 >> 1) & 1) - 6].u16[a2];
    v77 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v75, 2uLL);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v63, v45));
    v79 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v76, (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v77)), (int16x8_t)vcgtq_u16(v77, (uint16x8_t)v22)));
    v36[-6] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v78.i8), (int16x8_t)0), v46), (int8x16_t)v16);
    v36[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v78), (int16x8_t)0), v46);
    v80 = vqtbl1q_s8(v8, vaddq_s8(v68, v45));
    v36[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v80.i8), (int16x8_t)0), v46);
    v36[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v80), (int16x8_t)0), v46);
    v81 = vqtbl1q_s8(v8, vaddq_s8(v74, v45));
    v36[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v81.i8), (int16x8_t)0), v46);
    v36[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v81), (int16x8_t)0), v46);
    v82 = vqtbl1q_s8(v8, vaddq_s8(v79, v45));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v82.i8), (int16x8_t)0), v46);
    v36[1] = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v82), (int16x8_t)0), v46), (int8x16_t)v22);
    v10 = (int8x16_t)vld1q_dup_s16(v47++);
    --v41;
    v36 = (int8x16_t *)((char *)v36 + v42);
    *a5 = v22.i16[7];
    a5 = (__int16 *)v47;
  }
  while (v41 > 1);
  return result;
}

int8x16_t *sub_1C9733534(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const __int16 *i16;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  signed int v36;
  int8x16_t v37;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v42;
  int16x8_t v43;
  int8x16_t v44;
  __int16 *v45;
  const __int16 *v46;
  uint16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  const __int16 *v79;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E46C4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[7].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v15 = (int16x8_t)_X5[2];
  v14 = (int16x8_t)_X5[3];
  v17 = (int16x8_t)_X5[4];
  v16 = (int16x8_t)_X5[5];
  v18 = (int16x8_t)_X5[6];
  v19 = _X5[7];
  i16 = _X5[8].i16;
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *result;
  v28 = result[1];
  v29 = result[2];
  v30 = result[3];
  v31 = result + 6;
  v32 = result[6];
  v33 = result[4];
  v34 = result[5];
  v35 = 2 * a2;
  v36 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v37 = result[7];
  __asm { PRFM            #0, [X0,#0x80] }
  v39 = (int8x16_t)vceqzq_s16(v11);
  v40 = (int8x16_t)vceqzq_s16(v10);
  __asm { PRFM            #0, [X0,#0xC0] }
  v42.i64[0] = 0x202020202020202;
  v42.i64[1] = 0x202020202020202;
  v43.i64[0] = 0xFF00FF00FF00FFLL;
  v43.i64[1] = 0xFF00FF00FF00FFLL;
  v44 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v37.u16[7];
  v45 = (__int16 *)(a5 + 1);
  v46 = v45;
  do
  {
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v48 = (int16x8_t)v37;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 2uLL);
    v18 = (int16x8_t)v32;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 2uLL);
    v16 = (int16x8_t)v34;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 2uLL);
    v17 = (int16x8_t)v33;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 2uLL);
    v14 = (int16x8_t)v30;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 2uLL);
    v15 = (int16x8_t)v29;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = &v31->i8[v35];
    v27 = *(int8x16_t *)((char *)&v31[-6] + v35);
    v28 = *(int8x16_t *)((char *)&v31[-5] + v35);
    v29 = *(int8x16_t *)((char *)&v31[-4] + v35);
    v30 = *(int8x16_t *)((char *)&v31[-3] + v35);
    v33 = *(int8x16_t *)((char *)&v31[-2] + v35);
    v34 = *(int8x16_t *)((char *)&v31[-1] + v35);
    v32 = *(int8x16_t *)((char *)v31 + 2 * a2);
    v37 = *(int8x16_t *)((char *)&v31[1] + v35);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v58 = (int8x16_t)vld1q_dup_s16(v46++);
    v59 = (uint16x8_t)vextq_s8(v19, v44, 2uLL);
    v60 = (uint16x8_t)vextq_s8(v58, v27, 0xEuLL);
    v61 = (uint16x8_t)vextq_s8(v27, v28, 0xEuLL);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13));
    v63 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
    v64 = vqmovn_high_s16(vqmovn_s16(v62), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v12)));
    v65 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
    v66 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v15));
    v67 = (uint16x8_t)vextq_s8(v30, v33, 0xEuLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v66), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v14)));
    v69 = (uint16x8_t)vextq_s8(v33, v34, 0xEuLL);
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v16));
    v71 = (uint16x8_t)vextq_s8(v34, v32, 0xEuLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v17))), v70);
    v73 = (uint16x8_t)vextq_s8(v32, v37, 0xEuLL);
    *v45 = v37.i16[7];
    v74 = vqtbl1q_s8(v8, vaddq_s8(v64, v42));
    v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v59, (uint16x8_t)v48), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v59)), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v73)), (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v48)));
    v31[-6] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v74.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    v31[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v74), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v8, vaddq_s8(v68, v42));
    v31[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    v31[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v43);
    v77 = vqtbl1q_s8(v8, vaddq_s8(v72, v42));
    v31[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v77.i8), (int16x8_t)0), v43);
    v31[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v77), (int16x8_t)0), v43);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v75, v42));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v43);
    v31[1] = vbslq_s8(v39, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v48, v78), (int16x8_t)0), v43), (int8x16_t)v48);
    v79 = v31[2].i16;
    --v36;
    v31 = (int8x16_t *)((char *)v31 + v35);
    v45 = (__int16 *)v46;
    v19 = (int8x16_t)v48;
    v44 = (int8x16_t)vld1q_dup_s16(v79);
  }
  while (v36 > 1);
  return result;
}

int16x8_t *sub_1C9733894(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v12 = _X9[-6];
    v13 = _X9[-5];
    v14 = _X9[-4];
    v15 = _X9[-3];
    v16 = _X9[-2];
    v17 = _X9[-1];
    v18 = *_X9;
    v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 3uLL), v13, 3uLL));
    v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 3uLL), v15, 3uLL));
    v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 3uLL), v17, 3uLL));
    v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 3uLL), v19, 3uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C973397C(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  int i;
  uint64_t v5;
  int16x8_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        v5 = 0;
        v6 = result;
        do
        {
          v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 8uLL);
          v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 8uLL);
          *v6 = vshlq_n_s16(*v6, 8uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 8uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int8x16_t *sub_1C9733A04(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  const __int16 *v14;
  int16x8_t v15;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int16x8_t v24;

  v8 = *a3;
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xFE00FE00FE00FE00;
  v13.i64[1] = 0xFE00FE00FE00FE00;
  v14 = a5;
  do
  {
    v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v21 = (int8x16_t)vld1q_dup_s16(v14++);
    v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned __int128 *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C9733AB4(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v10;
  uint16x8_t v11;
  int16x8_t v18;
  uint64_t v20;
  int v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  uint16x8_t v26;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  v10 = *a6;
  _X5 = a6 + 1;
  v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v20 = 2 * a2;
  v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xFE00FE00FE00FE00;
  v24.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v18;
    v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1C9733B88(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  int8x16_t v33;
  uint16x8_t v35;
  uint16x8_t v36;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E3510(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = (const __int16 *)(a6 - 1);
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v23 = *result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xFE00FE00FE00FE00;
  v30.i64[1] = 0xFE00FE00FE00FE00;
  v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C9733CF0(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  const __int16 *i16;
  int16x8_t v17;
  int8x16_t v19;
  __int16 *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  const __int16 *v27;
  int8x16_t v29;
  int8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  const __int16 *v34;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E30F0(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  v17 = *result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned __int128 *)result);
  v20 = (__int16 *)(a5 + 1);
  v21 = 2 * a2;
  v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B40));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *v20 = v29.i16[7];
    v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    v34 = result[1].i16;
    --v22;
    result = (int16x8_t *)((char *)result + v21);
    v19 = (int8x16_t)vld1q_dup_s16(v34);
    v20 = (__int16 *)v27;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C9733E44(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v10;
  int16x8_t v11;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  v10.i64[0] = 0xFE00FE00FE00FE00;
  v10.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)result);
    *result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 4uLL))), (int16x8_t)0), v10);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C9733E90(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int8x16_t v29;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFE00FE00FE00FE00;
  v15.i64[1] = 0xFE00FE00FE00FE00;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9733F84(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v16;
  uint16x8_t v17;
  uint64_t v19;
  int v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v16 = *result;
  v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v19 = 2 * a2;
  v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xFE00FE00FE00FE00;
  v22.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v23 = (int16x8_t)v16;
    v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v19);
    v10 = (uint16x8_t)v23;
    v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1C9734080(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  const __int16 *v33;
  uint16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E3510(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *result;
  v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xFE00FE00FE00FE00;
  v32.i64[1] = 0xFE00FE00FE00FE00;
  v33 = a5;
  do
  {
    v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    v35 = (int16x8_t)v25;
    v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    v24 = *(int8x16_t *)((char *)result + 2 * a2);
    v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    v17 = (int8x16_t)v36;
    v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

int8x16_t *sub_1C973422C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *i16;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v23;
  __int16 *v24;
  uint64_t v25;
  signed int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  uint16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  const __int16 *v42;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E30F0(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *_X5;
  v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  v20 = *result;
  v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  v24 = (__int16 *)(a5 + 1);
  v25 = 2 * a2;
  v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v27 = (int8x16_t)vceqzq_s16(v11);
  v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xFE00FE00FE00FE00;
  v30.i64[1] = 0xFE00FE00FE00FE00;
  v31 = v24;
  do
  {
    v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    v33 = (int16x8_t)v21;
    v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    v20 = *(int8x16_t *)((char *)result + 2 * a2);
    v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    v37 = (int8x16_t)vld1q_dup_s16(v31++);
    v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *v24 = v21.i16[7];
    v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    v42 = result[2].i16;
    --v26;
    result = (int8x16_t *)((char *)result + v25);
    v23 = (int8x16_t)vld1q_dup_s16(v42);
    v24 = (__int16 *)v31;
    v13 = (int8x16_t)v34;
    v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C97343C4(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v19;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 1;
  v10 = a7 + 1;
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v12 = _X8[-1];
    v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)_X8);
    v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 4uLL), v13, 4uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C9734424(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFE00FE00FE00FE00;
  v15.i64[1] = 0xFE00FE00FE00FE00;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    v20 = result[2];
    v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9734590(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int v23;
  uint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v18 = *result;
  v19 = result[1];
  v20 = result[2];
  v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v23 = v8 + 2;
  v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v27 = (int16x8_t)v18;
    v28 = (int16x8_t)v19;
    v29 = (int16x8_t)v20;
    v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    result = (uint16x8_t *)((char *)result + v24);
    v10 = (uint16x8_t)v27;
    v9 = (uint16x8_t)v28;
    v12 = (uint16x8_t)v29;
    v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int8x16_t *sub_1C973470C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  const __int16 *v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int8x16_t v51;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E3510(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *result;
  v27 = result[1];
  v28 = result + 2;
  v29 = result[2];
  v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFE00FE00FE00FE00;
  v37.i64[1] = 0xFE00FE00FE00FE00;
  v38 = a5;
  do
  {
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v30;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v29;
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    v17 = (int16x8_t)v27;
    v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

int8x16_t *sub_1C9734948(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const __int16 *i16;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  const __int16 *v26;
  int8x16_t v28;
  __int16 *v29;
  uint64_t v30;
  signed int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x8_t v35;
  const __int16 *v36;
  int16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  uint16x8_t v40;
  int8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E30F0(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v14 = _X5[2];
  v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  v22 = *result;
  v23 = result[1];
  v24 = result[2];
  v25 = result[3];
  v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  v29 = (__int16 *)(a5 + 1);
  v30 = a2;
  v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v32 = (int8x16_t)vceqzq_s16(v11);
  v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xFE00FE00FE00FE00;
  v35.i64[1] = 0xFE00FE00FE00FE00;
  v36 = v29;
  do
  {
    v37 = (int16x8_t)v25;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    v39 = (int16x8_t)v24;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v23;
    v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    v22 = *(int8x16_t *)&v26[v30 - 32];
    v23 = *(int8x16_t *)&v26[v30 - 24];
    v24 = *(int8x16_t *)&v26[v30 - 16];
    v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    v43 = (int8x16_t)vld1q_dup_s16(v36++);
    v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *v29 = v25.i16[7];
    v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    v26 = (const __int16 *)((char *)v26 + v30 * 2);
    v29 = (__int16 *)v36;
    v14 = (int8x16_t)v39;
    v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int16x8_t *sub_1C9734B68(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 2;
  v10 = a7 + 1;
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v12 = _X8[-2];
    v13 = _X8[-1];
    v14 = *_X8;
    v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 4uLL), v13, 4uLL));
    v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 4uLL), v15, 4uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C9734BF4(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int8x16_t v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;

  v8 = *a3;
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862AD0);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B50);
  v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v18 = result[2];
    v19 = result[3];
    v20 = result[4];
    v21 = result[5];
    v23 = result[6];
    v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C9734E6C(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int16x8_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int v34;
  uint64_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  v14 = _X5[4];
  v13 = _X5[5];
  v16 = _X5[6];
  v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v23 = *(uint16x8_t *)result;
  v24 = *(uint16x8_t *)(result + 16);
  v25 = *(uint16x8_t *)(result + 32);
  v26 = *(uint16x8_t *)(result + 48);
  v27 = *(uint16x8_t *)(result + 64);
  v28 = *(uint16x8_t *)(result + 80);
  v29 = (int16x8_t *)(result + 96);
  v30 = *(uint16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v34 = v8 + 2;
  v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFE00FE00FE00FE00;
  v37.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v38 = (int16x8_t)v31;
    v39 = (int16x8_t)v30;
    v40 = (int16x8_t)v28;
    v41 = (int16x8_t)v27;
    v42 = (int16x8_t)v26;
    v43 = (int16x8_t)v25;
    v44 = (int16x8_t)v24;
    v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v29 = (int16x8_t *)((char *)v29 + v35);
    v10 = (uint16x8_t)v45;
    v9 = (uint16x8_t)v44;
    v12 = (uint16x8_t)v43;
    v11 = (uint16x8_t)v42;
    v14 = (uint16x8_t)v41;
    v13 = (uint16x8_t)v40;
    v16 = (uint16x8_t)v39;
    v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int8x16_t *sub_1C973511C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  const __int16 *v9;
  int8x16_t v10;
  const __int16 *v11;
  unsigned int v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  const __int16 *v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;

  v7 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E3510(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 4) != 0)
  {
    v11 = &_X5[-1].i16[7];
    v10 = (int8x16_t)vld1q_dup_s16(v11);
  }
  else
  {
    v9 = a5;
    v10 = (int8x16_t)vld1q_dup_s16(v9++);
    *a5 = result[7].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
    a5 = (__int16 *)v9;
  }
  v12 = v7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v12 + 1] = result[7].i16[(int)(v12 + 1) * a2 + 7];
  v13 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v14 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862AD0);
  v16 = *_X5;
  v15 = _X5[1];
  v17 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862B50);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *result;
  v31 = result[1];
  v32 = result[2];
  v33 = result[3];
  v34 = result[4];
  v35 = result[5];
  v36 = result + 6;
  v37 = result[6];
  v38 = result[7];
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = v12 + 2;
  v42 = 2 * a2;
  v43 = (int8x16_t)vceqzq_s16(v17);
  v44 = (int8x16_t)vceqzq_s16(v14);
  v45.i64[0] = 0x202020202020202;
  v45.i64[1] = 0x202020202020202;
  v46.i64[0] = 0xFE00FE00FE00FE00;
  v46.i64[1] = 0xFE00FE00FE00FE00;
  v47 = a5;
  do
  {
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v22 = (int16x8_t)v38;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xEuLL);
    v23 = (int16x8_t)v37;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v35;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xEuLL);
    v21 = (int16x8_t)v34;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v33;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v32;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xEuLL);
    v15 = (int16x8_t)v31;
    v55 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v16, 0xEuLL);
    v16 = (int16x8_t)v30;
    _X13 = &v36->i8[v42];
    v30 = *(int8x16_t *)((char *)&v36[-6] + v42);
    v31 = *(int8x16_t *)((char *)&v36[-5] + v42);
    v32 = *(int8x16_t *)((char *)&v36[-4] + v42);
    v33 = *(int8x16_t *)((char *)&v36[-3] + v42);
    v34 = *(int8x16_t *)((char *)&v36[-2] + v42);
    v35 = *(int8x16_t *)((char *)&v36[-1] + v42);
    v57 = (uint16x8_t)vextq_s8(v30, v31, 2uLL);
    v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v16));
    v60 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
    v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v15));
    v62 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
    v63 = vqmovn_high_s16(vqmovn_s16(v59), v61);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v19));
    v65 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v62));
    v37 = *(int8x16_t *)((char *)v36 + 2 * a2);
    v38 = *(int8x16_t *)((char *)&v36[1] + v42);
    v66 = vaddq_s16(v65, (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v18));
    v67 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v64), v66);
    v69 = (uint16x8_t)vextq_s8(v35, v37, 2uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v72 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v20));
    v73 = (uint16x8_t)vextq_s8(v37, v38, 2uLL);
    v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v21))), v72);
    v75 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v73);
    v76 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), v75);
    v75.i32[0] = v36[8 * ((a4 >> 1) & 1) - 6].u16[a2];
    v77 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v75, 2uLL);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v63, v45));
    v79 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v76, (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v77)), (int16x8_t)vcgtq_u16(v77, (uint16x8_t)v22)));
    v36[-6] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v78.i8), (int16x8_t)0), v46), (int8x16_t)v16);
    v36[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v78), (int16x8_t)0), v46);
    v80 = vqtbl1q_s8(v8, vaddq_s8(v68, v45));
    v36[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v80.i8), (int16x8_t)0), v46);
    v36[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v80), (int16x8_t)0), v46);
    v81 = vqtbl1q_s8(v8, vaddq_s8(v74, v45));
    v36[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v81.i8), (int16x8_t)0), v46);
    v36[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v81), (int16x8_t)0), v46);
    v82 = vqtbl1q_s8(v8, vaddq_s8(v79, v45));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v82.i8), (int16x8_t)0), v46);
    v36[1] = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v82), (int16x8_t)0), v46), (int8x16_t)v22);
    v10 = (int8x16_t)vld1q_dup_s16(v47++);
    --v41;
    v36 = (int8x16_t *)((char *)v36 + v42);
    *a5 = v22.i16[7];
    a5 = (__int16 *)v47;
  }
  while (v41 > 1);
  return result;
}

int8x16_t *sub_1C973548C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const __int16 *i16;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  signed int v36;
  int8x16_t v37;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v42;
  int16x8_t v43;
  int8x16_t v44;
  __int16 *v45;
  const __int16 *v46;
  uint16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  const __int16 *v79;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E30F0(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[7].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v15 = (int16x8_t)_X5[2];
  v14 = (int16x8_t)_X5[3];
  v17 = (int16x8_t)_X5[4];
  v16 = (int16x8_t)_X5[5];
  v18 = (int16x8_t)_X5[6];
  v19 = _X5[7];
  i16 = _X5[8].i16;
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *result;
  v28 = result[1];
  v29 = result[2];
  v30 = result[3];
  v31 = result + 6;
  v32 = result[6];
  v33 = result[4];
  v34 = result[5];
  v35 = 2 * a2;
  v36 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v37 = result[7];
  __asm { PRFM            #0, [X0,#0x80] }
  v39 = (int8x16_t)vceqzq_s16(v11);
  v40 = (int8x16_t)vceqzq_s16(v10);
  __asm { PRFM            #0, [X0,#0xC0] }
  v42.i64[0] = 0x202020202020202;
  v42.i64[1] = 0x202020202020202;
  v43.i64[0] = 0xFE00FE00FE00FE00;
  v43.i64[1] = 0xFE00FE00FE00FE00;
  v44 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v37.u16[7];
  v45 = (__int16 *)(a5 + 1);
  v46 = v45;
  do
  {
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v48 = (int16x8_t)v37;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 2uLL);
    v18 = (int16x8_t)v32;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 2uLL);
    v16 = (int16x8_t)v34;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 2uLL);
    v17 = (int16x8_t)v33;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 2uLL);
    v14 = (int16x8_t)v30;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 2uLL);
    v15 = (int16x8_t)v29;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = &v31->i8[v35];
    v27 = *(int8x16_t *)((char *)&v31[-6] + v35);
    v28 = *(int8x16_t *)((char *)&v31[-5] + v35);
    v29 = *(int8x16_t *)((char *)&v31[-4] + v35);
    v30 = *(int8x16_t *)((char *)&v31[-3] + v35);
    v33 = *(int8x16_t *)((char *)&v31[-2] + v35);
    v34 = *(int8x16_t *)((char *)&v31[-1] + v35);
    v32 = *(int8x16_t *)((char *)v31 + 2 * a2);
    v37 = *(int8x16_t *)((char *)&v31[1] + v35);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v58 = (int8x16_t)vld1q_dup_s16(v46++);
    v59 = (uint16x8_t)vextq_s8(v19, v44, 2uLL);
    v60 = (uint16x8_t)vextq_s8(v58, v27, 0xEuLL);
    v61 = (uint16x8_t)vextq_s8(v27, v28, 0xEuLL);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13));
    v63 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
    v64 = vqmovn_high_s16(vqmovn_s16(v62), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v12)));
    v65 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
    v66 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v15));
    v67 = (uint16x8_t)vextq_s8(v30, v33, 0xEuLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v66), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v14)));
    v69 = (uint16x8_t)vextq_s8(v33, v34, 0xEuLL);
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v16));
    v71 = (uint16x8_t)vextq_s8(v34, v32, 0xEuLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v17))), v70);
    v73 = (uint16x8_t)vextq_s8(v32, v37, 0xEuLL);
    *v45 = v37.i16[7];
    v74 = vqtbl1q_s8(v8, vaddq_s8(v64, v42));
    v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v59, (uint16x8_t)v48), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v59)), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v73)), (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v48)));
    v31[-6] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v74.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    v31[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v74), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v8, vaddq_s8(v68, v42));
    v31[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    v31[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v43);
    v77 = vqtbl1q_s8(v8, vaddq_s8(v72, v42));
    v31[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v77.i8), (int16x8_t)0), v43);
    v31[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v77), (int16x8_t)0), v43);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v75, v42));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v43);
    v31[1] = vbslq_s8(v39, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v48, v78), (int16x8_t)0), v43), (int8x16_t)v48);
    v79 = v31[2].i16;
    --v36;
    v31 = (int8x16_t *)((char *)v31 + v35);
    v45 = (__int16 *)v46;
    v19 = (int8x16_t)v48;
    v44 = (int8x16_t)vld1q_dup_s16(v79);
  }
  while (v36 > 1);
  return result;
}

int16x8_t *sub_1C97357EC(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v12 = _X9[-6];
    v13 = _X9[-5];
    v14 = _X9[-4];
    v15 = _X9[-3];
    v16 = _X9[-2];
    v17 = _X9[-1];
    v18 = *_X9;
    v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 4uLL), v13, 4uLL));
    v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 4uLL), v15, 4uLL));
    v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 4uLL), v17, 4uLL));
    v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 4uLL), v19, 4uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C97358D4(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  int i;
  uint64_t v5;
  int16x8_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        v5 = 0;
        v6 = result;
        do
        {
          v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 7uLL);
          v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 7uLL);
          *v6 = vshlq_n_s16(*v6, 7uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 7uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int8x16_t *sub_1C973595C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  const __int16 *v14;
  int16x8_t v15;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int16x8_t v24;

  v8 = *a3;
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  v14 = a5;
  do
  {
    v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v21 = (int8x16_t)vld1q_dup_s16(v14++);
    v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned __int128 *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C9735A0C(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v10;
  uint16x8_t v11;
  int16x8_t v18;
  uint64_t v20;
  int v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  uint16x8_t v26;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  v10 = *a6;
  _X5 = a6 + 1;
  v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v20 = 2 * a2;
  v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xFC00FC00FC00FC00;
  v24.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v18;
    v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1C9735AE0(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  int8x16_t v33;
  uint16x8_t v35;
  uint16x8_t v36;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E1F3C(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = (const __int16 *)(a6 - 1);
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v23 = *result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xFC00FC00FC00FC00;
  v30.i64[1] = 0xFC00FC00FC00FC00;
  v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C9735C48(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  const __int16 *i16;
  int16x8_t v17;
  int8x16_t v19;
  __int16 *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  const __int16 *v27;
  int8x16_t v29;
  int8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  const __int16 *v34;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E1B1C(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  v17 = *result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned __int128 *)result);
  v20 = (__int16 *)(a5 + 1);
  v21 = 2 * a2;
  v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B40));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *v20 = v29.i16[7];
    v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    v34 = result[1].i16;
    --v22;
    result = (int16x8_t *)((char *)result + v21);
    v19 = (int8x16_t)vld1q_dup_s16(v34);
    v20 = (__int16 *)v27;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C9735D9C(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v10;
  int16x8_t v11;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  v10.i64[0] = 0xFC00FC00FC00FC00;
  v10.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)result);
    *result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 5uLL))), (int16x8_t)0), v10);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C9735DE8(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int8x16_t v29;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFC00FC00FC00FC00;
  v15.i64[1] = 0xFC00FC00FC00FC00;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9735EDC(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v16;
  uint16x8_t v17;
  uint64_t v19;
  int v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v16 = *result;
  v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v19 = 2 * a2;
  v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xFC00FC00FC00FC00;
  v22.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v23 = (int16x8_t)v16;
    v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v19);
    v10 = (uint16x8_t)v23;
    v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1C9735FD8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  const __int16 *v33;
  uint16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E1F3C(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *result;
  v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xFC00FC00FC00FC00;
  v32.i64[1] = 0xFC00FC00FC00FC00;
  v33 = a5;
  do
  {
    v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    v35 = (int16x8_t)v25;
    v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    v24 = *(int8x16_t *)((char *)result + 2 * a2);
    v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    v17 = (int8x16_t)v36;
    v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

int8x16_t *sub_1C9736184(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *i16;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v23;
  __int16 *v24;
  uint64_t v25;
  signed int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  uint16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  const __int16 *v42;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E1B1C(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *_X5;
  v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  v20 = *result;
  v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  v24 = (__int16 *)(a5 + 1);
  v25 = 2 * a2;
  v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v27 = (int8x16_t)vceqzq_s16(v11);
  v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xFC00FC00FC00FC00;
  v30.i64[1] = 0xFC00FC00FC00FC00;
  v31 = v24;
  do
  {
    v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    v33 = (int16x8_t)v21;
    v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    v20 = *(int8x16_t *)((char *)result + 2 * a2);
    v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    v37 = (int8x16_t)vld1q_dup_s16(v31++);
    v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *v24 = v21.i16[7];
    v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    v42 = result[2].i16;
    --v26;
    result = (int8x16_t *)((char *)result + v25);
    v23 = (int8x16_t)vld1q_dup_s16(v42);
    v24 = (__int16 *)v31;
    v13 = (int8x16_t)v34;
    v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C973631C(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v19;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 1;
  v10 = a7 + 1;
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v12 = _X8[-1];
    v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)_X8);
    v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 5uLL), v13, 5uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C973637C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFC00FC00FC00FC00;
  v15.i64[1] = 0xFC00FC00FC00FC00;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    v20 = result[2];
    v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C97364E8(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int v23;
  uint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v18 = *result;
  v19 = result[1];
  v20 = result[2];
  v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v23 = v8 + 2;
  v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v27 = (int16x8_t)v18;
    v28 = (int16x8_t)v19;
    v29 = (int16x8_t)v20;
    v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    result = (uint16x8_t *)((char *)result + v24);
    v10 = (uint16x8_t)v27;
    v9 = (uint16x8_t)v28;
    v12 = (uint16x8_t)v29;
    v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int8x16_t *sub_1C9736664(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  const __int16 *v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int8x16_t v51;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E1F3C(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *result;
  v27 = result[1];
  v28 = result + 2;
  v29 = result[2];
  v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFC00FC00FC00FC00;
  v37.i64[1] = 0xFC00FC00FC00FC00;
  v38 = a5;
  do
  {
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v30;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v29;
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    v17 = (int16x8_t)v27;
    v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

int8x16_t *sub_1C97368A0(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const __int16 *i16;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  const __int16 *v26;
  int8x16_t v28;
  __int16 *v29;
  uint64_t v30;
  signed int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x8_t v35;
  const __int16 *v36;
  int16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  uint16x8_t v40;
  int8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E1B1C(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v14 = _X5[2];
  v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  v22 = *result;
  v23 = result[1];
  v24 = result[2];
  v25 = result[3];
  v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  v29 = (__int16 *)(a5 + 1);
  v30 = a2;
  v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v32 = (int8x16_t)vceqzq_s16(v11);
  v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xFC00FC00FC00FC00;
  v35.i64[1] = 0xFC00FC00FC00FC00;
  v36 = v29;
  do
  {
    v37 = (int16x8_t)v25;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    v39 = (int16x8_t)v24;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v23;
    v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    v22 = *(int8x16_t *)&v26[v30 - 32];
    v23 = *(int8x16_t *)&v26[v30 - 24];
    v24 = *(int8x16_t *)&v26[v30 - 16];
    v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    v43 = (int8x16_t)vld1q_dup_s16(v36++);
    v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *v29 = v25.i16[7];
    v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    v26 = (const __int16 *)((char *)v26 + v30 * 2);
    v29 = (__int16 *)v36;
    v14 = (int8x16_t)v39;
    v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int16x8_t *sub_1C9736AC0(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 2;
  v10 = a7 + 1;
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v12 = _X8[-2];
    v13 = _X8[-1];
    v14 = *_X8;
    v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 5uLL), v13, 5uLL));
    v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 5uLL), v15, 5uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C9736B4C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int8x16_t v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;

  v8 = *a3;
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862AD0);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B50);
  v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v18 = result[2];
    v19 = result[3];
    v20 = result[4];
    v21 = result[5];
    v23 = result[6];
    v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C9736DC4(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int16x8_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int v34;
  uint64_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  v14 = _X5[4];
  v13 = _X5[5];
  v16 = _X5[6];
  v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v23 = *(uint16x8_t *)result;
  v24 = *(uint16x8_t *)(result + 16);
  v25 = *(uint16x8_t *)(result + 32);
  v26 = *(uint16x8_t *)(result + 48);
  v27 = *(uint16x8_t *)(result + 64);
  v28 = *(uint16x8_t *)(result + 80);
  v29 = (int16x8_t *)(result + 96);
  v30 = *(uint16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v34 = v8 + 2;
  v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFC00FC00FC00FC00;
  v37.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v38 = (int16x8_t)v31;
    v39 = (int16x8_t)v30;
    v40 = (int16x8_t)v28;
    v41 = (int16x8_t)v27;
    v42 = (int16x8_t)v26;
    v43 = (int16x8_t)v25;
    v44 = (int16x8_t)v24;
    v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v29 = (int16x8_t *)((char *)v29 + v35);
    v10 = (uint16x8_t)v45;
    v9 = (uint16x8_t)v44;
    v12 = (uint16x8_t)v43;
    v11 = (uint16x8_t)v42;
    v14 = (uint16x8_t)v41;
    v13 = (uint16x8_t)v40;
    v16 = (uint16x8_t)v39;
    v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int8x16_t *sub_1C9737074(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  const __int16 *v9;
  int8x16_t v10;
  const __int16 *v11;
  unsigned int v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  const __int16 *v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;

  v7 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E1F3C(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 4) != 0)
  {
    v11 = &_X5[-1].i16[7];
    v10 = (int8x16_t)vld1q_dup_s16(v11);
  }
  else
  {
    v9 = a5;
    v10 = (int8x16_t)vld1q_dup_s16(v9++);
    *a5 = result[7].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
    a5 = (__int16 *)v9;
  }
  v12 = v7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v12 + 1] = result[7].i16[(int)(v12 + 1) * a2 + 7];
  v13 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v14 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862AD0);
  v16 = *_X5;
  v15 = _X5[1];
  v17 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862B50);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *result;
  v31 = result[1];
  v32 = result[2];
  v33 = result[3];
  v34 = result[4];
  v35 = result[5];
  v36 = result + 6;
  v37 = result[6];
  v38 = result[7];
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = v12 + 2;
  v42 = 2 * a2;
  v43 = (int8x16_t)vceqzq_s16(v17);
  v44 = (int8x16_t)vceqzq_s16(v14);
  v45.i64[0] = 0x202020202020202;
  v45.i64[1] = 0x202020202020202;
  v46.i64[0] = 0xFC00FC00FC00FC00;
  v46.i64[1] = 0xFC00FC00FC00FC00;
  v47 = a5;
  do
  {
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v22 = (int16x8_t)v38;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xEuLL);
    v23 = (int16x8_t)v37;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v35;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xEuLL);
    v21 = (int16x8_t)v34;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v33;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v32;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xEuLL);
    v15 = (int16x8_t)v31;
    v55 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v16, 0xEuLL);
    v16 = (int16x8_t)v30;
    _X13 = &v36->i8[v42];
    v30 = *(int8x16_t *)((char *)&v36[-6] + v42);
    v31 = *(int8x16_t *)((char *)&v36[-5] + v42);
    v32 = *(int8x16_t *)((char *)&v36[-4] + v42);
    v33 = *(int8x16_t *)((char *)&v36[-3] + v42);
    v34 = *(int8x16_t *)((char *)&v36[-2] + v42);
    v35 = *(int8x16_t *)((char *)&v36[-1] + v42);
    v57 = (uint16x8_t)vextq_s8(v30, v31, 2uLL);
    v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v16));
    v60 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
    v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v15));
    v62 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
    v63 = vqmovn_high_s16(vqmovn_s16(v59), v61);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v19));
    v65 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v62));
    v37 = *(int8x16_t *)((char *)v36 + 2 * a2);
    v38 = *(int8x16_t *)((char *)&v36[1] + v42);
    v66 = vaddq_s16(v65, (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v18));
    v67 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v64), v66);
    v69 = (uint16x8_t)vextq_s8(v35, v37, 2uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v72 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v20));
    v73 = (uint16x8_t)vextq_s8(v37, v38, 2uLL);
    v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v21))), v72);
    v75 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v73);
    v76 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), v75);
    v75.i32[0] = v36[8 * ((a4 >> 1) & 1) - 6].u16[a2];
    v77 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v75, 2uLL);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v63, v45));
    v79 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v76, (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v77)), (int16x8_t)vcgtq_u16(v77, (uint16x8_t)v22)));
    v36[-6] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v78.i8), (int16x8_t)0), v46), (int8x16_t)v16);
    v36[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v78), (int16x8_t)0), v46);
    v80 = vqtbl1q_s8(v8, vaddq_s8(v68, v45));
    v36[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v80.i8), (int16x8_t)0), v46);
    v36[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v80), (int16x8_t)0), v46);
    v81 = vqtbl1q_s8(v8, vaddq_s8(v74, v45));
    v36[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v81.i8), (int16x8_t)0), v46);
    v36[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v81), (int16x8_t)0), v46);
    v82 = vqtbl1q_s8(v8, vaddq_s8(v79, v45));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v82.i8), (int16x8_t)0), v46);
    v36[1] = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v82), (int16x8_t)0), v46), (int8x16_t)v22);
    v10 = (int8x16_t)vld1q_dup_s16(v47++);
    --v41;
    v36 = (int8x16_t *)((char *)v36 + v42);
    *a5 = v22.i16[7];
    a5 = (__int16 *)v47;
  }
  while (v41 > 1);
  return result;
}

int8x16_t *sub_1C97373E4(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const __int16 *i16;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  signed int v36;
  int8x16_t v37;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v42;
  int16x8_t v43;
  int8x16_t v44;
  __int16 *v45;
  const __int16 *v46;
  uint16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  const __int16 *v79;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E1B1C(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[7].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v15 = (int16x8_t)_X5[2];
  v14 = (int16x8_t)_X5[3];
  v17 = (int16x8_t)_X5[4];
  v16 = (int16x8_t)_X5[5];
  v18 = (int16x8_t)_X5[6];
  v19 = _X5[7];
  i16 = _X5[8].i16;
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *result;
  v28 = result[1];
  v29 = result[2];
  v30 = result[3];
  v31 = result + 6;
  v32 = result[6];
  v33 = result[4];
  v34 = result[5];
  v35 = 2 * a2;
  v36 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v37 = result[7];
  __asm { PRFM            #0, [X0,#0x80] }
  v39 = (int8x16_t)vceqzq_s16(v11);
  v40 = (int8x16_t)vceqzq_s16(v10);
  __asm { PRFM            #0, [X0,#0xC0] }
  v42.i64[0] = 0x202020202020202;
  v42.i64[1] = 0x202020202020202;
  v43.i64[0] = 0xFC00FC00FC00FC00;
  v43.i64[1] = 0xFC00FC00FC00FC00;
  v44 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v37.u16[7];
  v45 = (__int16 *)(a5 + 1);
  v46 = v45;
  do
  {
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v48 = (int16x8_t)v37;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 2uLL);
    v18 = (int16x8_t)v32;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 2uLL);
    v16 = (int16x8_t)v34;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 2uLL);
    v17 = (int16x8_t)v33;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 2uLL);
    v14 = (int16x8_t)v30;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 2uLL);
    v15 = (int16x8_t)v29;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = &v31->i8[v35];
    v27 = *(int8x16_t *)((char *)&v31[-6] + v35);
    v28 = *(int8x16_t *)((char *)&v31[-5] + v35);
    v29 = *(int8x16_t *)((char *)&v31[-4] + v35);
    v30 = *(int8x16_t *)((char *)&v31[-3] + v35);
    v33 = *(int8x16_t *)((char *)&v31[-2] + v35);
    v34 = *(int8x16_t *)((char *)&v31[-1] + v35);
    v32 = *(int8x16_t *)((char *)v31 + 2 * a2);
    v37 = *(int8x16_t *)((char *)&v31[1] + v35);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v58 = (int8x16_t)vld1q_dup_s16(v46++);
    v59 = (uint16x8_t)vextq_s8(v19, v44, 2uLL);
    v60 = (uint16x8_t)vextq_s8(v58, v27, 0xEuLL);
    v61 = (uint16x8_t)vextq_s8(v27, v28, 0xEuLL);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13));
    v63 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
    v64 = vqmovn_high_s16(vqmovn_s16(v62), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v12)));
    v65 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
    v66 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v15));
    v67 = (uint16x8_t)vextq_s8(v30, v33, 0xEuLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v66), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v14)));
    v69 = (uint16x8_t)vextq_s8(v33, v34, 0xEuLL);
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v16));
    v71 = (uint16x8_t)vextq_s8(v34, v32, 0xEuLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v17))), v70);
    v73 = (uint16x8_t)vextq_s8(v32, v37, 0xEuLL);
    *v45 = v37.i16[7];
    v74 = vqtbl1q_s8(v8, vaddq_s8(v64, v42));
    v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v59, (uint16x8_t)v48), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v59)), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v73)), (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v48)));
    v31[-6] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v74.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    v31[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v74), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v8, vaddq_s8(v68, v42));
    v31[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    v31[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v43);
    v77 = vqtbl1q_s8(v8, vaddq_s8(v72, v42));
    v31[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v77.i8), (int16x8_t)0), v43);
    v31[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v77), (int16x8_t)0), v43);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v75, v42));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v43);
    v31[1] = vbslq_s8(v39, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v48, v78), (int16x8_t)0), v43), (int8x16_t)v48);
    v79 = v31[2].i16;
    --v36;
    v31 = (int8x16_t *)((char *)v31 + v35);
    v45 = (__int16 *)v46;
    v19 = (int8x16_t)v48;
    v44 = (int8x16_t)vld1q_dup_s16(v79);
  }
  while (v36 > 1);
  return result;
}

int16x8_t *sub_1C9737744(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v12 = _X9[-6];
    v13 = _X9[-5];
    v14 = _X9[-4];
    v15 = _X9[-3];
    v16 = _X9[-2];
    v17 = _X9[-1];
    v18 = *_X9;
    v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 5uLL), v13, 5uLL));
    v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 5uLL), v15, 5uLL));
    v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 5uLL), v17, 5uLL));
    v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 5uLL), v19, 5uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C973782C(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  int i;
  uint64_t v5;
  int16x8_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        v5 = 0;
        v6 = result;
        do
        {
          v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 6uLL);
          v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 6uLL);
          *v6 = vshlq_n_s16(*v6, 6uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 6uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int8x16_t *sub_1C97378B4(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  const __int16 *v14;
  int16x8_t v15;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int16x8_t v24;

  v8 = *a3;
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xF800F800F800F800;
  v13.i64[1] = 0xF800F800F800F800;
  v14 = a5;
  do
  {
    v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v21 = (int8x16_t)vld1q_dup_s16(v14++);
    v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned __int128 *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C9737964(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v10;
  uint16x8_t v11;
  int16x8_t v18;
  uint64_t v20;
  int v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  uint16x8_t v26;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  v10 = *a6;
  _X5 = a6 + 1;
  v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v20 = 2 * a2;
  v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xF800F800F800F800;
  v24.i64[1] = 0xF800F800F800F800;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v18;
    v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1C9737A38(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  int8x16_t v33;
  uint16x8_t v35;
  uint16x8_t v36;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E0968(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = (const __int16 *)(a6 - 1);
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v23 = *result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xF800F800F800F800;
  v30.i64[1] = 0xF800F800F800F800;
  v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C9737BA0(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  const __int16 *i16;
  int16x8_t v17;
  int8x16_t v19;
  __int16 *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  const __int16 *v27;
  int8x16_t v29;
  int8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  const __int16 *v34;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97E0548(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  v17 = *result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned __int128 *)result);
  v20 = (__int16 *)(a5 + 1);
  v21 = 2 * a2;
  v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B40));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *v20 = v29.i16[7];
    v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    v34 = result[1].i16;
    --v22;
    result = (int16x8_t *)((char *)result + v21);
    v19 = (int8x16_t)vld1q_dup_s16(v34);
    v20 = (__int16 *)v27;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C9737CF4(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v10;
  int16x8_t v11;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  v10.i64[0] = 0xF800F800F800F800;
  v10.i64[1] = 0xF800F800F800F800;
  do
  {
    v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)result);
    *result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 6uLL))), (int16x8_t)0), v10);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C9737D40(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int8x16_t v29;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF800F800F800F800;
  v15.i64[1] = 0xF800F800F800F800;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9737E34(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v16;
  uint16x8_t v17;
  uint64_t v19;
  int v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v16 = *result;
  v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v19 = 2 * a2;
  v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xF800F800F800F800;
  v22.i64[1] = 0xF800F800F800F800;
  do
  {
    v23 = (int16x8_t)v16;
    v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v19);
    v10 = (uint16x8_t)v23;
    v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1C9737F30(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  const __int16 *v33;
  uint16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E0968(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *result;
  v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xF800F800F800F800;
  v32.i64[1] = 0xF800F800F800F800;
  v33 = a5;
  do
  {
    v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    v35 = (int16x8_t)v25;
    v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    v24 = *(int8x16_t *)((char *)result + 2 * a2);
    v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    v17 = (int8x16_t)v36;
    v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

int8x16_t *sub_1C97380DC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *i16;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v23;
  __int16 *v24;
  uint64_t v25;
  signed int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  uint16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  const __int16 *v42;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E0548(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *_X5;
  v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  v20 = *result;
  v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  v24 = (__int16 *)(a5 + 1);
  v25 = 2 * a2;
  v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v27 = (int8x16_t)vceqzq_s16(v11);
  v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xF800F800F800F800;
  v30.i64[1] = 0xF800F800F800F800;
  v31 = v24;
  do
  {
    v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    v33 = (int16x8_t)v21;
    v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    v20 = *(int8x16_t *)((char *)result + 2 * a2);
    v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    v37 = (int8x16_t)vld1q_dup_s16(v31++);
    v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *v24 = v21.i16[7];
    v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    v42 = result[2].i16;
    --v26;
    result = (int8x16_t *)((char *)result + v25);
    v23 = (int8x16_t)vld1q_dup_s16(v42);
    v24 = (__int16 *)v31;
    v13 = (int8x16_t)v34;
    v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C9738274(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v19;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 1;
  v10 = a7 + 1;
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  do
  {
    v12 = _X8[-1];
    v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)_X8);
    v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 6uLL), v13, 6uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C97382D4(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF800F800F800F800;
  v15.i64[1] = 0xF800F800F800F800;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    v20 = result[2];
    v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9738440(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int v23;
  uint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v18 = *result;
  v19 = result[1];
  v20 = result[2];
  v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v23 = v8 + 2;
  v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  do
  {
    v27 = (int16x8_t)v18;
    v28 = (int16x8_t)v19;
    v29 = (int16x8_t)v20;
    v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    result = (uint16x8_t *)((char *)result + v24);
    v10 = (uint16x8_t)v27;
    v9 = (uint16x8_t)v28;
    v12 = (uint16x8_t)v29;
    v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int8x16_t *sub_1C97385BC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  const __int16 *v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int8x16_t v51;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E0968(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *result;
  v27 = result[1];
  v28 = result + 2;
  v29 = result[2];
  v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF800F800F800F800;
  v37.i64[1] = 0xF800F800F800F800;
  v38 = a5;
  do
  {
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v30;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v29;
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    v17 = (int16x8_t)v27;
    v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

int8x16_t *sub_1C97387F8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const __int16 *i16;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  const __int16 *v26;
  int8x16_t v28;
  __int16 *v29;
  uint64_t v30;
  signed int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x8_t v35;
  const __int16 *v36;
  int16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  uint16x8_t v40;
  int8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E0548(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v14 = _X5[2];
  v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  v22 = *result;
  v23 = result[1];
  v24 = result[2];
  v25 = result[3];
  v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  v29 = (__int16 *)(a5 + 1);
  v30 = a2;
  v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v32 = (int8x16_t)vceqzq_s16(v11);
  v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xF800F800F800F800;
  v35.i64[1] = 0xF800F800F800F800;
  v36 = v29;
  do
  {
    v37 = (int16x8_t)v25;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    v39 = (int16x8_t)v24;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v23;
    v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    v22 = *(int8x16_t *)&v26[v30 - 32];
    v23 = *(int8x16_t *)&v26[v30 - 24];
    v24 = *(int8x16_t *)&v26[v30 - 16];
    v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    v43 = (int8x16_t)vld1q_dup_s16(v36++);
    v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *v29 = v25.i16[7];
    v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    v26 = (const __int16 *)((char *)v26 + v30 * 2);
    v29 = (__int16 *)v36;
    v14 = (int8x16_t)v39;
    v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int16x8_t *sub_1C9738A18(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 2;
  v10 = a7 + 1;
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  do
  {
    v12 = _X8[-2];
    v13 = _X8[-1];
    v14 = *_X8;
    v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 6uLL), v13, 6uLL));
    v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 6uLL), v15, 6uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C9738AA4(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int8x16_t v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;

  v8 = *a3;
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862AD0);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B50);
  v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v18 = result[2];
    v19 = result[3];
    v20 = result[4];
    v21 = result[5];
    v23 = result[6];
    v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C9738D1C(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int16x8_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int v34;
  uint64_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  v14 = _X5[4];
  v13 = _X5[5];
  v16 = _X5[6];
  v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v23 = *(uint16x8_t *)result;
  v24 = *(uint16x8_t *)(result + 16);
  v25 = *(uint16x8_t *)(result + 32);
  v26 = *(uint16x8_t *)(result + 48);
  v27 = *(uint16x8_t *)(result + 64);
  v28 = *(uint16x8_t *)(result + 80);
  v29 = (int16x8_t *)(result + 96);
  v30 = *(uint16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v34 = v8 + 2;
  v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF800F800F800F800;
  v37.i64[1] = 0xF800F800F800F800;
  do
  {
    v38 = (int16x8_t)v31;
    v39 = (int16x8_t)v30;
    v40 = (int16x8_t)v28;
    v41 = (int16x8_t)v27;
    v42 = (int16x8_t)v26;
    v43 = (int16x8_t)v25;
    v44 = (int16x8_t)v24;
    v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v29 = (int16x8_t *)((char *)v29 + v35);
    v10 = (uint16x8_t)v45;
    v9 = (uint16x8_t)v44;
    v12 = (uint16x8_t)v43;
    v11 = (uint16x8_t)v42;
    v14 = (uint16x8_t)v41;
    v13 = (uint16x8_t)v40;
    v16 = (uint16x8_t)v39;
    v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int8x16_t *sub_1C9738FCC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  const __int16 *v9;
  int8x16_t v10;
  const __int16 *v11;
  unsigned int v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  const __int16 *v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;

  v7 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E0968(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 4) != 0)
  {
    v11 = &_X5[-1].i16[7];
    v10 = (int8x16_t)vld1q_dup_s16(v11);
  }
  else
  {
    v9 = a5;
    v10 = (int8x16_t)vld1q_dup_s16(v9++);
    *a5 = result[7].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
    a5 = (__int16 *)v9;
  }
  v12 = v7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v12 + 1] = result[7].i16[(int)(v12 + 1) * a2 + 7];
  v13 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v14 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862AD0);
  v16 = *_X5;
  v15 = _X5[1];
  v17 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862B50);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *result;
  v31 = result[1];
  v32 = result[2];
  v33 = result[3];
  v34 = result[4];
  v35 = result[5];
  v36 = result + 6;
  v37 = result[6];
  v38 = result[7];
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = v12 + 2;
  v42 = 2 * a2;
  v43 = (int8x16_t)vceqzq_s16(v17);
  v44 = (int8x16_t)vceqzq_s16(v14);
  v45.i64[0] = 0x202020202020202;
  v45.i64[1] = 0x202020202020202;
  v46.i64[0] = 0xF800F800F800F800;
  v46.i64[1] = 0xF800F800F800F800;
  v47 = a5;
  do
  {
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v22 = (int16x8_t)v38;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xEuLL);
    v23 = (int16x8_t)v37;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v35;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xEuLL);
    v21 = (int16x8_t)v34;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v33;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v32;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xEuLL);
    v15 = (int16x8_t)v31;
    v55 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v16, 0xEuLL);
    v16 = (int16x8_t)v30;
    _X13 = &v36->i8[v42];
    v30 = *(int8x16_t *)((char *)&v36[-6] + v42);
    v31 = *(int8x16_t *)((char *)&v36[-5] + v42);
    v32 = *(int8x16_t *)((char *)&v36[-4] + v42);
    v33 = *(int8x16_t *)((char *)&v36[-3] + v42);
    v34 = *(int8x16_t *)((char *)&v36[-2] + v42);
    v35 = *(int8x16_t *)((char *)&v36[-1] + v42);
    v57 = (uint16x8_t)vextq_s8(v30, v31, 2uLL);
    v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v16));
    v60 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
    v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v15));
    v62 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
    v63 = vqmovn_high_s16(vqmovn_s16(v59), v61);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v19));
    v65 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v62));
    v37 = *(int8x16_t *)((char *)v36 + 2 * a2);
    v38 = *(int8x16_t *)((char *)&v36[1] + v42);
    v66 = vaddq_s16(v65, (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v18));
    v67 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v64), v66);
    v69 = (uint16x8_t)vextq_s8(v35, v37, 2uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v72 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v20));
    v73 = (uint16x8_t)vextq_s8(v37, v38, 2uLL);
    v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v21))), v72);
    v75 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v73);
    v76 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), v75);
    v75.i32[0] = v36[8 * ((a4 >> 1) & 1) - 6].u16[a2];
    v77 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v75, 2uLL);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v63, v45));
    v79 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v76, (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v77)), (int16x8_t)vcgtq_u16(v77, (uint16x8_t)v22)));
    v36[-6] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v78.i8), (int16x8_t)0), v46), (int8x16_t)v16);
    v36[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v78), (int16x8_t)0), v46);
    v80 = vqtbl1q_s8(v8, vaddq_s8(v68, v45));
    v36[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v80.i8), (int16x8_t)0), v46);
    v36[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v80), (int16x8_t)0), v46);
    v81 = vqtbl1q_s8(v8, vaddq_s8(v74, v45));
    v36[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v81.i8), (int16x8_t)0), v46);
    v36[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v81), (int16x8_t)0), v46);
    v82 = vqtbl1q_s8(v8, vaddq_s8(v79, v45));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v82.i8), (int16x8_t)0), v46);
    v36[1] = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v82), (int16x8_t)0), v46), (int8x16_t)v22);
    v10 = (int8x16_t)vld1q_dup_s16(v47++);
    --v41;
    v36 = (int8x16_t *)((char *)v36 + v42);
    *a5 = v22.i16[7];
    a5 = (__int16 *)v47;
  }
  while (v41 > 1);
  return result;
}

int8x16_t *sub_1C973933C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const __int16 *i16;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  signed int v36;
  int8x16_t v37;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v42;
  int16x8_t v43;
  int8x16_t v44;
  __int16 *v45;
  const __int16 *v46;
  uint16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  const __int16 *v79;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97E0548(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[7].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v15 = (int16x8_t)_X5[2];
  v14 = (int16x8_t)_X5[3];
  v17 = (int16x8_t)_X5[4];
  v16 = (int16x8_t)_X5[5];
  v18 = (int16x8_t)_X5[6];
  v19 = _X5[7];
  i16 = _X5[8].i16;
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *result;
  v28 = result[1];
  v29 = result[2];
  v30 = result[3];
  v31 = result + 6;
  v32 = result[6];
  v33 = result[4];
  v34 = result[5];
  v35 = 2 * a2;
  v36 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v37 = result[7];
  __asm { PRFM            #0, [X0,#0x80] }
  v39 = (int8x16_t)vceqzq_s16(v11);
  v40 = (int8x16_t)vceqzq_s16(v10);
  __asm { PRFM            #0, [X0,#0xC0] }
  v42.i64[0] = 0x202020202020202;
  v42.i64[1] = 0x202020202020202;
  v43.i64[0] = 0xF800F800F800F800;
  v43.i64[1] = 0xF800F800F800F800;
  v44 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v37.u16[7];
  v45 = (__int16 *)(a5 + 1);
  v46 = v45;
  do
  {
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v48 = (int16x8_t)v37;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 2uLL);
    v18 = (int16x8_t)v32;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 2uLL);
    v16 = (int16x8_t)v34;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 2uLL);
    v17 = (int16x8_t)v33;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 2uLL);
    v14 = (int16x8_t)v30;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 2uLL);
    v15 = (int16x8_t)v29;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = &v31->i8[v35];
    v27 = *(int8x16_t *)((char *)&v31[-6] + v35);
    v28 = *(int8x16_t *)((char *)&v31[-5] + v35);
    v29 = *(int8x16_t *)((char *)&v31[-4] + v35);
    v30 = *(int8x16_t *)((char *)&v31[-3] + v35);
    v33 = *(int8x16_t *)((char *)&v31[-2] + v35);
    v34 = *(int8x16_t *)((char *)&v31[-1] + v35);
    v32 = *(int8x16_t *)((char *)v31 + 2 * a2);
    v37 = *(int8x16_t *)((char *)&v31[1] + v35);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v58 = (int8x16_t)vld1q_dup_s16(v46++);
    v59 = (uint16x8_t)vextq_s8(v19, v44, 2uLL);
    v60 = (uint16x8_t)vextq_s8(v58, v27, 0xEuLL);
    v61 = (uint16x8_t)vextq_s8(v27, v28, 0xEuLL);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13));
    v63 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
    v64 = vqmovn_high_s16(vqmovn_s16(v62), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v12)));
    v65 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
    v66 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v15));
    v67 = (uint16x8_t)vextq_s8(v30, v33, 0xEuLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v66), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v14)));
    v69 = (uint16x8_t)vextq_s8(v33, v34, 0xEuLL);
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v16));
    v71 = (uint16x8_t)vextq_s8(v34, v32, 0xEuLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v17))), v70);
    v73 = (uint16x8_t)vextq_s8(v32, v37, 0xEuLL);
    *v45 = v37.i16[7];
    v74 = vqtbl1q_s8(v8, vaddq_s8(v64, v42));
    v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v59, (uint16x8_t)v48), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v59)), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v73)), (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v48)));
    v31[-6] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v74.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    v31[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v74), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v8, vaddq_s8(v68, v42));
    v31[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    v31[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v43);
    v77 = vqtbl1q_s8(v8, vaddq_s8(v72, v42));
    v31[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v77.i8), (int16x8_t)0), v43);
    v31[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v77), (int16x8_t)0), v43);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v75, v42));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v43);
    v31[1] = vbslq_s8(v39, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v48, v78), (int16x8_t)0), v43), (int8x16_t)v48);
    v79 = v31[2].i16;
    --v36;
    v31 = (int8x16_t *)((char *)v31 + v35);
    v45 = (__int16 *)v46;
    v19 = (int8x16_t)v48;
    v44 = (int8x16_t)vld1q_dup_s16(v79);
  }
  while (v36 > 1);
  return result;
}

int16x8_t *sub_1C973969C(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  do
  {
    v12 = _X9[-6];
    v13 = _X9[-5];
    v14 = _X9[-4];
    v15 = _X9[-3];
    v16 = _X9[-2];
    v17 = _X9[-1];
    v18 = *_X9;
    v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 6uLL), v13, 6uLL));
    v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 6uLL), v15, 6uLL));
    v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 6uLL), v17, 6uLL));
    v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 6uLL), v19, 6uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C9739784(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  int i;
  uint64_t v5;
  int16x8_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        v5 = 0;
        v6 = result;
        do
        {
          v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 5uLL);
          v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 5uLL);
          *v6 = vshlq_n_s16(*v6, 5uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 5uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int8x16_t *sub_1C973980C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  const __int16 *v14;
  int16x8_t v15;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int16x8_t v24;

  v8 = *a3;
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xF000F000F000F000;
  v13.i64[1] = 0xF000F000F000F000;
  v14 = a5;
  do
  {
    v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v21 = (int8x16_t)vld1q_dup_s16(v14++);
    v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned __int128 *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C97398BC(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v10;
  uint16x8_t v11;
  int16x8_t v18;
  uint64_t v20;
  int v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  uint16x8_t v26;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  v10 = *a6;
  _X5 = a6 + 1;
  v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v20 = 2 * a2;
  v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xF000F000F000F000;
  v24.i64[1] = 0xF000F000F000F000;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v18;
    v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1C9739990(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  int8x16_t v33;
  uint16x8_t v35;
  uint16x8_t v36;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97DF394(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = (const __int16 *)(a6 - 1);
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v23 = *result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B40));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xF000F000F000F000;
  v30.i64[1] = 0xF000F000F000F000;
  v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C9739AF8(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  const __int16 *i16;
  int16x8_t v17;
  int8x16_t v19;
  __int16 *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  const __int16 *v27;
  int8x16_t v29;
  int8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  const __int16 *v34;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1C97DEF74(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    result = (int16x8_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  v17 = *result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned __int128 *)result);
  v20 = (__int16 *)(a5 + 1);
  v21 = 2 * a2;
  v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B40));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *v20 = v29.i16[7];
    v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    v34 = result[1].i16;
    --v22;
    result = (int16x8_t *)((char *)result + v21);
    v19 = (int8x16_t)vld1q_dup_s16(v34);
    v20 = (__int16 *)v27;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C9739C4C(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v10;
  int16x8_t v11;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  v10.i64[0] = 0xF000F000F000F000;
  v10.i64[1] = 0xF000F000F000F000;
  do
  {
    v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)result);
    *result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 7uLL))), (int16x8_t)0), v10);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C9739C98(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int8x16_t v29;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF000F000F000F000;
  v15.i64[1] = 0xF000F000F000F000;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9739D8C(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v16;
  uint16x8_t v17;
  uint64_t v19;
  int v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v16 = *result;
  v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v19 = 2 * a2;
  v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xF000F000F000F000;
  v22.i64[1] = 0xF000F000F000F000;
  do
  {
    v23 = (int16x8_t)v16;
    v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v19);
    v10 = (uint16x8_t)v23;
    v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1C9739E88(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  const __int16 *v33;
  uint16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97DF394(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *result;
  v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xF000F000F000F000;
  v32.i64[1] = 0xF000F000F000F000;
  v33 = a5;
  do
  {
    v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    v35 = (int16x8_t)v25;
    v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    v24 = *(int8x16_t *)((char *)result + 2 * a2);
    v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    v17 = (int8x16_t)v36;
    v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

int8x16_t *sub_1C973A034(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  const __int16 *i16;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v23;
  __int16 *v24;
  uint64_t v25;
  signed int v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  const __int16 *v31;
  uint16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  const __int16 *v42;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97DEF74(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *_X5;
  v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  v20 = *result;
  v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  v24 = (__int16 *)(a5 + 1);
  v25 = 2 * a2;
  v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v27 = (int8x16_t)vceqzq_s16(v11);
  v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xF000F000F000F000;
  v30.i64[1] = 0xF000F000F000F000;
  v31 = v24;
  do
  {
    v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    v33 = (int16x8_t)v21;
    v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    v20 = *(int8x16_t *)((char *)result + 2 * a2);
    v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    v37 = (int8x16_t)vld1q_dup_s16(v31++);
    v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *v24 = v21.i16[7];
    v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    v42 = result[2].i16;
    --v26;
    result = (int8x16_t *)((char *)result + v25);
    v23 = (int8x16_t)vld1q_dup_s16(v42);
    v24 = (__int16 *)v31;
    v13 = (int8x16_t)v34;
    v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int16x8_t *sub_1C973A1CC(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v19;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 1;
  v10 = a7 + 1;
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  do
  {
    v12 = _X8[-1];
    v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned __int128 *)_X8);
    v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 7uLL), v13, 7uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C973A22C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;

  v8 = *a3;
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF000F000F000F000;
  v15.i64[1] = 0xF000F000F000F000;
  v16 = a5;
  do
  {
    v17 = *result;
    v18 = result[1];
    v20 = result[2];
    v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C973A398(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int v23;
  uint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v18 = *result;
  v19 = result[1];
  v20 = result[2];
  v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v23 = v8 + 2;
  v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  do
  {
    v27 = (int16x8_t)v18;
    v28 = (int16x8_t)v19;
    v29 = (int16x8_t)v20;
    v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    result = (uint16x8_t *)((char *)result + v24);
    v10 = (uint16x8_t)v27;
    v9 = (uint16x8_t)v28;
    v12 = (uint16x8_t)v29;
    v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int8x16_t *sub_1C973A514(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int v8;
  int8x16_t v9;
  const __int16 *v10;
  int8x16_t v11;
  const __int16 *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  const __int16 *v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int8x16_t v51;

  v8 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97DF394(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  v9 = *a3;
  if ((a4 & 4) != 0)
  {
    v12 = &_X5[-1].i16[7];
    v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    v10 = a5;
    v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862AD0);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B50);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *result;
  v27 = result[1];
  v28 = result + 2;
  v29 = result[2];
  v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF000F000F000F000;
  v37.i64[1] = 0xF000F000F000F000;
  v38 = a5;
  do
  {
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v30;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v29;
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    v17 = (int16x8_t)v27;
    v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

int8x16_t *sub_1C973A750(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  const __int16 *i16;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  const __int16 *v26;
  int8x16_t v28;
  __int16 *v29;
  uint64_t v30;
  signed int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x8_t v35;
  const __int16 *v36;
  int16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  uint16x8_t v40;
  int8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97DEF74(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v14 = _X5[2];
  v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  v22 = *result;
  v23 = result[1];
  v24 = result[2];
  v25 = result[3];
  v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  v29 = (__int16 *)(a5 + 1);
  v30 = a2;
  v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v32 = (int8x16_t)vceqzq_s16(v11);
  v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xF000F000F000F000;
  v35.i64[1] = 0xF000F000F000F000;
  v36 = v29;
  do
  {
    v37 = (int16x8_t)v25;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    v39 = (int16x8_t)v24;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v23;
    v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    v22 = *(int8x16_t *)&v26[v30 - 32];
    v23 = *(int8x16_t *)&v26[v30 - 24];
    v24 = *(int8x16_t *)&v26[v30 - 16];
    v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    v43 = (int8x16_t)vld1q_dup_s16(v36++);
    v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *v29 = v25.i16[7];
    v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    v26 = (const __int16 *)((char *)v26 + v30 * 2);
    v29 = (__int16 *)v36;
    v14 = (int8x16_t)v39;
    v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int16x8_t *sub_1C973A970(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;

  v7 = *a3;
  v8 = a3[1];
  _X8 = result + 2;
  v10 = a7 + 1;
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  do
  {
    v12 = _X8[-2];
    v13 = _X8[-1];
    v14 = *_X8;
    v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 7uLL), v13, 7uLL));
    v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 7uLL), v15, 7uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int16x8_t *sub_1C973A9FC(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int8x16_t v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;

  v8 = *a3;
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862AD0);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B50);
  v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v18 = result[2];
    v19 = result[3];
    v20 = result[4];
    v21 = result[5];
    v23 = result[6];
    v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C973AC74(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  int v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int16x8_t *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int v34;
  uint64_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  v10 = *_X5;
  v9 = _X5[1];
  v12 = _X5[2];
  v11 = _X5[3];
  v14 = _X5[4];
  v13 = _X5[5];
  v16 = _X5[6];
  v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v23 = *(uint16x8_t *)result;
  v24 = *(uint16x8_t *)(result + 16);
  v25 = *(uint16x8_t *)(result + 32);
  v26 = *(uint16x8_t *)(result + 48);
  v27 = *(uint16x8_t *)(result + 64);
  v28 = *(uint16x8_t *)(result + 80);
  v29 = (int16x8_t *)(result + 96);
  v30 = *(uint16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v34 = v8 + 2;
  v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF000F000F000F000;
  v37.i64[1] = 0xF000F000F000F000;
  do
  {
    v38 = (int16x8_t)v31;
    v39 = (int16x8_t)v30;
    v40 = (int16x8_t)v28;
    v41 = (int16x8_t)v27;
    v42 = (int16x8_t)v26;
    v43 = (int16x8_t)v25;
    v44 = (int16x8_t)v24;
    v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v29 = (int16x8_t *)((char *)v29 + v35);
    v10 = (uint16x8_t)v45;
    v9 = (uint16x8_t)v44;
    v12 = (uint16x8_t)v43;
    v11 = (uint16x8_t)v42;
    v14 = (uint16x8_t)v41;
    v13 = (uint16x8_t)v40;
    v16 = (uint16x8_t)v39;
    v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int8x16_t *sub_1C973AF24(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  const __int16 *v9;
  int8x16_t v10;
  const __int16 *v11;
  unsigned int v12;
  int8x16_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  const __int16 *v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;

  v7 = a7;
  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97DF394(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 4) != 0)
  {
    v11 = &_X5[-1].i16[7];
    v10 = (int8x16_t)vld1q_dup_s16(v11);
  }
  else
  {
    v9 = a5;
    v10 = (int8x16_t)vld1q_dup_s16(v9++);
    *a5 = result[7].i16[7];
    _X5 = (int16x8_t *)result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
    a5 = (__int16 *)v9;
  }
  v12 = v7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v12 + 1] = result[7].i16[(int)(v12 + 1) * a2 + 7];
  v13 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v14 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862AD0);
  v16 = *_X5;
  v15 = _X5[1];
  v17 = (int16x8_t)vandq_s8(v13, (int8x16_t)xmmword_1C9862B50);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *result;
  v31 = result[1];
  v32 = result[2];
  v33 = result[3];
  v34 = result[4];
  v35 = result[5];
  v36 = result + 6;
  v37 = result[6];
  v38 = result[7];
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = v12 + 2;
  v42 = 2 * a2;
  v43 = (int8x16_t)vceqzq_s16(v17);
  v44 = (int8x16_t)vceqzq_s16(v14);
  v45.i64[0] = 0x202020202020202;
  v45.i64[1] = 0x202020202020202;
  v46.i64[0] = 0xF000F000F000F000;
  v46.i64[1] = 0xF000F000F000F000;
  v47 = a5;
  do
  {
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    v22 = (int16x8_t)v38;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xEuLL);
    v23 = (int16x8_t)v37;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xEuLL);
    v20 = (int16x8_t)v35;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xEuLL);
    v21 = (int16x8_t)v34;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xEuLL);
    v18 = (int16x8_t)v33;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v19, 0xEuLL);
    v19 = (int16x8_t)v32;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xEuLL);
    v15 = (int16x8_t)v31;
    v55 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v16, 0xEuLL);
    v16 = (int16x8_t)v30;
    _X13 = &v36->i8[v42];
    v30 = *(int8x16_t *)((char *)&v36[-6] + v42);
    v31 = *(int8x16_t *)((char *)&v36[-5] + v42);
    v32 = *(int8x16_t *)((char *)&v36[-4] + v42);
    v33 = *(int8x16_t *)((char *)&v36[-3] + v42);
    v34 = *(int8x16_t *)((char *)&v36[-2] + v42);
    v35 = *(int8x16_t *)((char *)&v36[-1] + v42);
    v57 = (uint16x8_t)vextq_s8(v30, v31, 2uLL);
    v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v16));
    v60 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
    v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v15));
    v62 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
    v63 = vqmovn_high_s16(vqmovn_s16(v59), v61);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v19));
    v65 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v62));
    v37 = *(int8x16_t *)((char *)v36 + 2 * a2);
    v38 = *(int8x16_t *)((char *)&v36[1] + v42);
    v66 = vaddq_s16(v65, (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v18));
    v67 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v64), v66);
    v69 = (uint16x8_t)vextq_s8(v35, v37, 2uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v72 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v20));
    v73 = (uint16x8_t)vextq_s8(v37, v38, 2uLL);
    v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v21))), v72);
    v75 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v73);
    v76 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), v75);
    v75.i32[0] = v36[8 * ((a4 >> 1) & 1) - 6].u16[a2];
    v77 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v75, 2uLL);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v63, v45));
    v79 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v76, (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v77)), (int16x8_t)vcgtq_u16(v77, (uint16x8_t)v22)));
    v36[-6] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v78.i8), (int16x8_t)0), v46), (int8x16_t)v16);
    v36[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v78), (int16x8_t)0), v46);
    v80 = vqtbl1q_s8(v8, vaddq_s8(v68, v45));
    v36[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v80.i8), (int16x8_t)0), v46);
    v36[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v80), (int16x8_t)0), v46);
    v81 = vqtbl1q_s8(v8, vaddq_s8(v74, v45));
    v36[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v81.i8), (int16x8_t)0), v46);
    v36[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v81), (int16x8_t)0), v46);
    v82 = vqtbl1q_s8(v8, vaddq_s8(v79, v45));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v82.i8), (int16x8_t)0), v46);
    v36[1] = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v82), (int16x8_t)0), v46), (int8x16_t)v22);
    v10 = (int8x16_t)vld1q_dup_s16(v47++);
    --v41;
    v36 = (int8x16_t *)((char *)v36 + v42);
    *a5 = v22.i16[7];
    a5 = (__int16 *)v47;
  }
  while (v41 > 1);
  return result;
}

int8x16_t *sub_1C973B294(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const __int16 *i16;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  signed int v36;
  int8x16_t v37;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v42;
  int16x8_t v43;
  int8x16_t v44;
  __int16 *v45;
  const __int16 *v46;
  uint16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  const __int16 *v79;

  v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1C97DEF74(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  v8 = *a3;
  if ((a4 & 0x40) != 0)
    a5[a7] = result->u16[a7 * a2 - 1];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[7].u16[7];
    _X5 = result;
    result = (int8x16_t *)((char *)result + 2 * a2);
    v7 = a7 - 1;
  }
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862AD0);
  v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B50);
  v13 = *(int16x8_t *)_X5;
  v12 = (int16x8_t)_X5[1];
  v15 = (int16x8_t)_X5[2];
  v14 = (int16x8_t)_X5[3];
  v17 = (int16x8_t)_X5[4];
  v16 = (int16x8_t)_X5[5];
  v18 = (int16x8_t)_X5[6];
  v19 = _X5[7];
  i16 = _X5[8].i16;
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *result;
  v28 = result[1];
  v29 = result[2];
  v30 = result[3];
  v31 = result + 6;
  v32 = result[6];
  v33 = result[4];
  v34 = result[5];
  v35 = 2 * a2;
  v36 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v37 = result[7];
  __asm { PRFM            #0, [X0,#0x80] }
  v39 = (int8x16_t)vceqzq_s16(v11);
  v40 = (int8x16_t)vceqzq_s16(v10);
  __asm { PRFM            #0, [X0,#0xC0] }
  v42.i64[0] = 0x202020202020202;
  v42.i64[1] = 0x202020202020202;
  v43.i64[0] = 0xF000F000F000F000;
  v43.i64[1] = 0xF000F000F000F000;
  v44 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v37.u16[7];
  v45 = (__int16 *)(a5 + 1);
  v46 = v45;
  do
  {
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    v48 = (int16x8_t)v37;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 2uLL);
    v18 = (int16x8_t)v32;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 2uLL);
    v16 = (int16x8_t)v34;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 2uLL);
    v17 = (int16x8_t)v33;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 2uLL);
    v14 = (int16x8_t)v30;
    v53 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 2uLL);
    v15 = (int16x8_t)v29;
    v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = &v31->i8[v35];
    v27 = *(int8x16_t *)((char *)&v31[-6] + v35);
    v28 = *(int8x16_t *)((char *)&v31[-5] + v35);
    v29 = *(int8x16_t *)((char *)&v31[-4] + v35);
    v30 = *(int8x16_t *)((char *)&v31[-3] + v35);
    v33 = *(int8x16_t *)((char *)&v31[-2] + v35);
    v34 = *(int8x16_t *)((char *)&v31[-1] + v35);
    v32 = *(int8x16_t *)((char *)v31 + 2 * a2);
    v37 = *(int8x16_t *)((char *)&v31[1] + v35);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v58 = (int8x16_t)vld1q_dup_s16(v46++);
    v59 = (uint16x8_t)vextq_s8(v19, v44, 2uLL);
    v60 = (uint16x8_t)vextq_s8(v58, v27, 0xEuLL);
    v61 = (uint16x8_t)vextq_s8(v27, v28, 0xEuLL);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13));
    v63 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
    v64 = vqmovn_high_s16(vqmovn_s16(v62), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v12)));
    v65 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
    v66 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v15));
    v67 = (uint16x8_t)vextq_s8(v30, v33, 0xEuLL);
    v68 = vqmovn_high_s16(vqmovn_s16(v66), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v14)));
    v69 = (uint16x8_t)vextq_s8(v33, v34, 0xEuLL);
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v16));
    v71 = (uint16x8_t)vextq_s8(v34, v32, 0xEuLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v17))), v70);
    v73 = (uint16x8_t)vextq_s8(v32, v37, 0xEuLL);
    *v45 = v37.i16[7];
    v74 = vqtbl1q_s8(v8, vaddq_s8(v64, v42));
    v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v59, (uint16x8_t)v48), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v59)), (int16x8_t)vcgtq_u16((uint16x8_t)v48, v73)), (int16x8_t)vcgtq_u16(v73, (uint16x8_t)v48)));
    v31[-6] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v74.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    v31[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v74), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v8, vaddq_s8(v68, v42));
    v31[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    v31[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v43);
    v77 = vqtbl1q_s8(v8, vaddq_s8(v72, v42));
    v31[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v77.i8), (int16x8_t)0), v43);
    v31[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v77), (int16x8_t)0), v43);
    v78 = vqtbl1q_s8(v8, vaddq_s8(v75, v42));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v43);
    v31[1] = vbslq_s8(v39, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v48, v78), (int16x8_t)0), v43), (int8x16_t)v48);
    v79 = v31[2].i16;
    --v36;
    v31 = (int8x16_t *)((char *)v31 + v35);
    v45 = (__int16 *)v46;
    v19 = (int8x16_t)v48;
    v44 = (int8x16_t)vld1q_dup_s16(v79);
  }
  while (v36 > 1);
  return result;
}

int16x8_t *sub_1C973B5F4(int16x8_t *result, uint64_t a2, __int128 *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;

  v7 = *a3;
  v8 = a3[1];
  v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  do
  {
    v12 = _X9[-6];
    v13 = _X9[-5];
    v14 = _X9[-4];
    v15 = _X9[-3];
    v16 = _X9[-2];
    v17 = _X9[-1];
    v18 = *_X9;
    v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 7uLL), v13, 7uLL));
    v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 7uLL), v15, 7uLL));
    v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 7uLL), v17, 7uLL));
    v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 7uLL), v19, 7uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1C973B6DC(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  int i;
  uint64_t v5;
  int16x8_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        v5 = 0;
        v6 = result;
        do
        {
          v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 4uLL);
          v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 4uLL);
          *v6 = vshlq_n_s16(*v6, 4uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 4uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int8x16_t *sub_1C973B764(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int16x8_t v11;
  const float *v12;
  int16x8_t v13;
  int8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int16x8_t v22;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  v12 = a5;
  do
  {
    v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v19 = (int8x16_t)vld1q_dup_f32(v12++);
    v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned __int128 *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C973B824(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v11;
  uint16x8_t v12;
  int16x8_t v19;
  uint64_t v21;
  int v22;
  int16x8_t v23;
  uint16x8_t v25;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  v11 = *a6;
  _X5 = a6 + 1;
  v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v21 = 2 * a2;
  v22 = v9 + 2;
  v23.i64[0] = 0xFF00FF00FF00FFLL;
  v23.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    result = (uint16x8_t *)((char *)result + v21);
    v12 = (uint16x8_t)v19;
    v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1C973B910(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  int8x16_t v31;
  uint16x8_t v33;
  uint16x8_t v34;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E395C((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)(a6 - 2);
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v28.i64[0] = 0xFF00FF00FF00FFLL;
  v28.i64[1] = 0xFF00FF00FF00FFLL;
  v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint64_t sub_1C973BA88(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  const float *v10;
  int16x8_t v17;
  int8x16_t v19;
  float *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int16x8_t v24;
  const float *v25;
  int8x16_t v27;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  const float *v32;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E39D4((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = *(int8x16_t *)_X5;
  v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  v20 = (float *)(a5 + 2);
  v21 = 2 * a2;
  v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B60));
  v24.i64[0] = 0xFF00FF00FF00FFLL;
  v24.i64[1] = 0xFF00FF00FF00FFLL;
  v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *v20 = *(float *)&v27.i32[3];
    v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    v19 = (int8x16_t)vld1q_dup_f32(v32);
    v20 = (float *)v25;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C973BBEC(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C973BCEC(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v20;
  int v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v17 = *result;
  v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v20 = 2 * a2;
  v21 = v9 + 2;
  v22.i64[0] = 0xFF00FF00FF00FFLL;
  v22.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v23 = (int16x8_t)v17;
    v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1C9862B00));
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v23;
    v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

uint64_t sub_1C973BDFC(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  const float *v32;
  uint16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E3AB0((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *(int8x16_t *)result;
  v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xFF00FF00FF00FFLL;
  v31.i64[1] = 0xFF00FF00FF00FFLL;
  v32 = (const float *)a5;
  do
  {
    v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    v34 = (int16x8_t)v25;
    v35 = (int16x8_t)v24;
    _X12 = result + v28;
    v24 = *(int8x16_t *)(result + 2 * a2);
    v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    v17 = (int8x16_t)v35;
    v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint64_t sub_1C973BFB4(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  const float *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v22;
  float *v23;
  uint64_t v24;
  signed int v25;
  int8x16_t v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int8x16_t v39;
  const float *v40;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E3B28((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int8x16_t *)_X5;
  v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  v18 = (const float *)(_X5 + 2);
  v19 = *(int8x16_t *)result;
  v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  v23 = (float *)(a5 + 2);
  v24 = 2 * a2;
  v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xFF00FF00FF00FFLL;
  v28.i64[1] = 0xFF00FF00FF00FFLL;
  v29 = v23;
  do
  {
    v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    v31 = (int16x8_t)v20;
    v32 = (int16x8_t)v19;
    _X11 = result + v24;
    v19 = *(int8x16_t *)(result + 2 * a2);
    v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    v35 = (int8x16_t)vld1q_dup_f32(v29++);
    v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *v23 = *(float *)&v20.i32[3];
    v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    v22 = (int8x16_t)vld1q_dup_f32(v40);
    v23 = (float *)v29;
    v12 = (int8x16_t)v32;
    v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

int16x8_t *sub_1C973C158(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v19 = result[2];
    v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C973C2D0(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v19 = *result;
  v20 = result[1];
  v21 = result[2];
  v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v24 = v9 + 2;
  v25 = 2 * a2;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v27 = (int16x8_t)v19;
    v28 = (int16x8_t)v20;
    v29 = (int16x8_t)v21;
    v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1C9862B00));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    result = (uint16x8_t *)((char *)result + v25);
    v11 = (uint16x8_t)v27;
    v10 = (uint16x8_t)v28;
    v13 = (uint16x8_t)v29;
    v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

uint64_t sub_1C973C460(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  const float *v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int8x16_t v50;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E3BA0((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *(int8x16_t *)result;
  v27 = *(int8x16_t *)(result + 16);
  v28 = result + 32;
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xFF00FF00FF00FFLL;
  v36.i64[1] = 0xFF00FF00FF00FFLL;
  v37 = (const float *)a5;
  do
  {
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v30;
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v29;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    v17 = (int16x8_t)v27;
    v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    v26 = *(int8x16_t *)(v28 + v33 - 32);
    v27 = *(int8x16_t *)(v28 + v33 - 16);
    v29 = *(int8x16_t *)(v28 + 2 * a2);
    v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint64_t sub_1C973C6A8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int8x16_t v14;
  const float *v15;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v26;
  float *v27;
  const float *v28;
  uint64_t v29;
  signed int v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  const float *v34;
  int16x8_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  int8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int8x16_t v49;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E3C18((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int16x8_t *)_X5;
  v11 = *((int16x8_t *)_X5 + 1);
  v13 = *((int8x16_t *)_X5 + 2);
  v14 = *((int8x16_t *)_X5 + 3);
  v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  v21 = *(int8x16_t *)result;
  v22 = *(int8x16_t *)(result + 16);
  v23 = *(int8x16_t *)(result + 32);
  v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  v27 = (float *)(a5 + 2);
  v28 = (const float *)(result + 64);
  v29 = 2 * a2;
  v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xFF00FF00FF00FFLL;
  v33.i64[1] = 0xFF00FF00FF00FFLL;
  v34 = v27;
  do
  {
    v35 = (int16x8_t)v24;
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    v37 = (int16x8_t)v23;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    v11 = (int16x8_t)v22;
    v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    v41 = (int8x16_t)vld1q_dup_f32(v34++);
    v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *v27 = *(float *)&v24.i32[3];
    v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1C9862B00));
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1C9862B00));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    v28 = (const float *)((char *)v28 + v29);
    v27 = (float *)v34;
    v13 = (int8x16_t)v37;
    v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

int16x8_t *sub_1C973C8D4(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int16x8_t v13;
  const float *v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v12 = a7 + 1;
  v13.i64[0] = 0xFF00FF00FF00FFLL;
  v13.i64[1] = 0xFF00FF00FF00FFLL;
  v14 = a5;
  do
  {
    v15 = *result;
    v16 = result[1];
    v17 = result[2];
    v18 = result[3];
    v19 = result[4];
    v20 = result[5];
    v22 = result[6];
    v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1C9862B00));
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1C9862B00));
    v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C973CB58(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int16x8_t *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  v15 = _X5[4];
  v14 = _X5[5];
  v17 = _X5[6];
  v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v24 = *(uint16x8_t *)result;
  v25 = *(uint16x8_t *)(result + 16);
  v26 = *(uint16x8_t *)(result + 32);
  v27 = *(uint16x8_t *)(result + 48);
  v28 = *(uint16x8_t *)(result + 64);
  v29 = *(uint16x8_t *)(result + 80);
  v30 = (int16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 96);
  v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v35 = v9 + 2;
  v36 = 2 * a2;
  v37.i64[0] = 0xFF00FF00FF00FFLL;
  v37.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v38 = (int16x8_t)v32;
    v39 = (int16x8_t)v31;
    v40 = (int16x8_t)v29;
    v41 = (int16x8_t)v28;
    v42 = (int16x8_t)v27;
    v43 = (int16x8_t)v26;
    v44 = (int16x8_t)v25;
    v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1C9862B00));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1C9862B00));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1C9862B00));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1C9862B00));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v30 = (int16x8_t *)((char *)v30 + v36);
    v11 = (uint16x8_t)v45;
    v10 = (uint16x8_t)v44;
    v13 = (uint16x8_t)v43;
    v12 = (uint16x8_t)v42;
    v15 = (uint16x8_t)v41;
    v14 = (uint16x8_t)v40;
    v17 = (uint16x8_t)v39;
    v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

uint64_t sub_1C973CE1C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  const float *v9;
  int8x16_t v10;
  const float *v11;
  unsigned int v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v41;
  int v42;
  int8x16_t v43;
  int16x8_t v44;
  const float *v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E3C90((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    v11 = (const float *)&_X5[-1].i32[3];
    v10 = (int8x16_t)vld1q_dup_f32(v11);
  }
  else
  {
    v9 = (const float *)a5;
    v10 = (int8x16_t)vld1q_dup_f32(v9++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v9;
  }
  v7.i64[1] = v8;
  v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v12 + 1)] = *(_DWORD *)(result + 2 * (int)(v12 + 1) * a2 + 124);
  v13 = vdupq_n_s16(~(_DWORD)a4);
  v15 = *_X5;
  v14 = _X5[1];
  v16 = (int16x8_t)vandq_s8((int8x16_t)v13, (int8x16_t)xmmword_1C9862B90);
  v17 = (int8x16_t)vtstq_s16(v13, (int16x8_t)xmmword_1C9862BA0);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *(int8x16_t *)result;
  v31 = *(int8x16_t *)(result + 16);
  v32 = *(int8x16_t *)(result + 32);
  v33 = *(int8x16_t *)(result + 48);
  v34 = *(int8x16_t *)(result + 64);
  v35 = *(int8x16_t *)(result + 80);
  v36 = result + 96;
  v37 = *(int8x16_t *)(result + 96);
  v38 = *(int8x16_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = 2 * a2;
  v42 = v12 + 2;
  v43 = (int8x16_t)vceqzq_s16(v16);
  v44.i64[0] = 0xFF00FF00FF00FFLL;
  v44.i64[1] = 0xFF00FF00FF00FFLL;
  v45 = (const float *)a5;
  do
  {
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xCuLL);
    v22 = (int16x8_t)v38;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xCuLL);
    v23 = (int16x8_t)v37;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v35;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xCuLL);
    v21 = (int16x8_t)v34;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v33;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v32;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 0xCuLL);
    v14 = (int16x8_t)v31;
    v53 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v15, 0xCuLL);
    v15 = (int16x8_t)v30;
    _X13 = v36 + v41;
    v30 = *(int8x16_t *)(v36 + v41 - 96);
    v31 = *(int8x16_t *)(v36 + v41 - 80);
    v32 = *(int8x16_t *)(v36 + v41 - 64);
    v33 = *(int8x16_t *)(v36 + v41 - 48);
    v34 = *(int8x16_t *)(v36 + v41 - 32);
    v35 = *(int8x16_t *)(v36 + v41 - 16);
    v55 = (uint16x8_t)vextq_s8(v30, v31, 4uLL);
    v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
    v57 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v55)), (int16x8_t)vcgtq_u16(v55, (uint16x8_t)v15));
    v58 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v14));
    v60 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
    v61 = vqmovn_high_s16(vqmovn_s16(v57), v59);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v19));
    v63 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v60));
    v37 = *(int8x16_t *)(v36 + 2 * a2);
    v38 = *(int8x16_t *)(v36 + v41 + 16);
    v64 = vaddq_s16(v63, (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v18));
    v65 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v62), v64);
    v67 = (uint16x8_t)vextq_s8(v35, v37, 4uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v20));
    v71 = (uint16x8_t)vextq_s8(v37, v38, 4uLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v21))), v70);
    v73 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v71);
    v74 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), v73);
    v73.i32[0] = *(_DWORD *)(v36 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
    v75 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v73, 4uLL);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v61, (int8x16_t)xmmword_1C9862B00));
    v77 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v74, (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v75)), (int16x8_t)vcgtq_u16(v75, (uint16x8_t)v22)));
    *(int8x16_t *)(v36 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v44), (int8x16_t)v15);
    *(int16x8_t *)(v36 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v44);
    v78 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v78), (int16x8_t)0), v44);
    v79 = vqtbl1q_s8(v7, vaddq_s8(v72, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v79), (int16x8_t)0), v44);
    v80 = vqtbl1q_s8(v7, vaddq_s8(v77, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v80.i8), (int16x8_t)0), v44);
    *(int8x16_t *)(v36 + 16) = vbslq_s8(v17, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v80), (int16x8_t)0), v44));
    v10 = (int8x16_t)vld1q_dup_f32(v45++);
    --v42;
    v36 += v41;
    *(_DWORD *)a5 = v22.i32[3];
    a5 = (__int16 *)v45;
  }
  while (v42 > 1);
  return result;
}

uint64_t sub_1C973D194(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const float *v20;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v37;
  signed int v38;
  int8x16_t v40;
  float *v41;
  int8x16_t v42;
  int16x8_t v43;
  const float *v44;
  uint16x8_t v45;
  int16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  const float *v77;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E3D08((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v13 = *(int16x8_t *)_X5;
  v12 = *((int16x8_t *)_X5 + 1);
  v15 = *((int16x8_t *)_X5 + 2);
  v14 = *((int16x8_t *)_X5 + 3);
  v17 = *((int16x8_t *)_X5 + 4);
  v16 = *((int16x8_t *)_X5 + 5);
  v18 = *((int16x8_t *)_X5 + 6);
  v19 = *((int8x16_t *)_X5 + 7);
  v20 = (const float *)(_X5 + 8);
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *(int8x16_t *)result;
  v28 = *(int8x16_t *)(result + 16);
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  v31 = result + 96;
  v32 = *(int8x16_t *)(result + 96);
  v33 = *(int8x16_t *)(result + 64);
  v34 = *(int8x16_t *)(result + 80);
  v35 = *(int8x16_t *)(result + 112);
  __asm { PRFM            #0, [X0,#0x80] }
  v37 = 2 * a2;
  v38 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  __asm { PRFM            #0, [X0,#0xC0] }
  v40 = (int8x16_t)vld1q_dup_f32(v20);
  *(_DWORD *)a5 = v35.i32[3];
  v41 = (float *)(a5 + 2);
  v42 = (int8x16_t)vceqzq_s16(v10);
  v43.i64[0] = 0xFF00FF00FF00FFLL;
  v43.i64[1] = 0xFF00FF00FF00FFLL;
  v44 = v41;
  do
  {
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    v46 = (int16x8_t)v35;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 4uLL);
    v18 = (int16x8_t)v32;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 4uLL);
    v16 = (int16x8_t)v34;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 4uLL);
    v17 = (int16x8_t)v33;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 4uLL);
    v14 = (int16x8_t)v30;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 4uLL);
    v15 = (int16x8_t)v29;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 4uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = v31 + v37;
    v27 = *(int8x16_t *)(v31 + v37 - 96);
    v28 = *(int8x16_t *)(v31 + v37 - 80);
    v29 = *(int8x16_t *)(v31 + v37 - 64);
    v30 = *(int8x16_t *)(v31 + v37 - 48);
    v33 = *(int8x16_t *)(v31 + v37 - 32);
    v34 = *(int8x16_t *)(v31 + v37 - 16);
    v32 = *(int8x16_t *)(v31 + 2 * a2);
    v35 = *(int8x16_t *)(v31 + v37 + 16);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v56 = (int8x16_t)vld1q_dup_f32(v44++);
    v57 = (uint16x8_t)vextq_s8(v19, v40, 4uLL);
    v58 = (uint16x8_t)vextq_s8(v56, v27, 0xCuLL);
    v59 = (uint16x8_t)vextq_s8(v27, v28, 0xCuLL);
    v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v13));
    v61 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
    v62 = vqmovn_high_s16(vqmovn_s16(v60), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v12)));
    v63 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v15));
    v65 = (uint16x8_t)vextq_s8(v30, v33, 0xCuLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v64), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v14)));
    v67 = (uint16x8_t)vextq_s8(v33, v34, 0xCuLL);
    v68 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v16));
    v69 = (uint16x8_t)vextq_s8(v34, v32, 0xCuLL);
    v70 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v17))), v68);
    v71 = (uint16x8_t)vextq_s8(v32, v35, 0xCuLL);
    *v41 = *(float *)&v35.i32[3];
    v72 = vqtbl1q_s8(v7, vaddq_s8(v62, (int8x16_t)xmmword_1C9862B00));
    v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v57, (uint16x8_t)v46), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v57)), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v46)));
    *(int8x16_t *)(v31 - 96) = vbslq_s8(v42, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v72.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    *(int16x8_t *)(v31 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v72), (int16x8_t)0), v43);
    v74 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v74.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v74), (int16x8_t)0), v43);
    v75 = vqtbl1q_s8(v7, vaddq_s8(v70, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v75.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v75), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v73, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    *(int8x16_t *)(v31 + 16) = vbslq_s8(v11, (int8x16_t)v46, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v46, v76), (int16x8_t)0), v43));
    v77 = (const float *)(v31 + 32);
    --v38;
    v31 += v37;
    v41 = (float *)v44;
    v19 = (int8x16_t)v46;
    v40 = (int8x16_t)vld1q_dup_f32(v77);
  }
  while (v38 > 1);
  return result;
}

__int16 *sub_1C973D4FC(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v16;
  uint64_t v24;
  int16x8x2_t v25;
  int8x16x2_t v26;
  int16x8x2_t v27;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v13 = a7 + 2;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v15 = result;
    v25 = vld2q_s16(v15);
    v11 = a2;
    v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 3uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 3uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 3uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 3uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    v12 = 4 * a2;
    result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

__int16 *sub_1C973D5B8(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v23;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int8x16x2_t v30;
  int16x8x2_t v31;
  int16x8x2_t v32;
  int8x16x2_t v33;
  int16x8x2_t v34;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v15 = result;
    v32 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    v23 = _X11;
    v31 = vld2q_s16(v23);
    v23 += 16;
    v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v25;
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 3uLL), (int16x8_t)v33.val[0], 3uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 3uLL), (int16x8_t)v33.val[1], 3uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 3uLL), (int16x8_t)v30.val[0], 3uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 3uLL), (int16x8_t)v30.val[1], 3uLL));
    v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1C973D6C8(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v26;
  __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v34;
  int8x16_t v35;
  int16x8x2_t v36;
  int16x8x2_t v37;
  int16x8x2_t v38;
  int8x16x2_t v39;
  int16x8x2_t v40;
  int16x8x2_t v41;
  int16x8x2_t v42;
  int16x8x2_t v43;
  int8x16x2_t v44;
  int16x8x2_t v45;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    v15 = result;
    v42 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v36 = vld2q_s16(v17);
    v18 = result + 32;
    v45 = vld2q_s16(v18);
    v19 = result + 48;
    v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v26 = _X11;
    v41 = vld2q_s16(v26);
    v26 += 16;
    v40 = vld2q_s16(v26);
    v27 = _X11 + 32;
    v38 = vld2q_s16(v27);
    v28 = _X11 + 48;
    v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1C9862BB0).i32[1];
    v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 3uLL), v36.val[0], 3uLL));
    v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 3uLL), v36.val[1], 3uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 3uLL), (int16x8_t)v44.val[0], 3uLL));
    v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 3uLL), (int16x8_t)v44.val[1], 3uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 3uLL), v40.val[0], 3uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 3uLL), v40.val[1], 3uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 3uLL), (int16x8_t)v39.val[0], 3uLL));
    vst2q_s16(result, v42);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 3uLL), (int16x8_t)v39.val[1], 3uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

int16x8_t *sub_1C973D8B8(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  if ((a4 & 4) != 0)
    v12 = 34;
  else
    v12 = 2;
  v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0)
    v14 = 17;
  else
    v14 = 1;
  v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973C8D4(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973C8D4(a1 + 8, a2, a3, v15, a5, v16, a7);
}

uint64_t sub_1C973D954(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973CB58(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973CB58(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C973DA00(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973CE1C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973CE1C(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C973DAAC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973D194(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973D194(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

__int16 *sub_1C973DB58(__int16 *a1, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C973D6C8(a1, a2, a3, a4, a5, a6, a7);
  return sub_1C973D6C8(a1 + 64, a2, a3, v12, a5, v13, a7);
}

int8x16_t *sub_1C973DBAC(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int16x8_t v11;
  const float *v12;
  int16x8_t v13;
  int8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int16x8_t v22;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  v12 = a5;
  do
  {
    v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v19 = (int8x16_t)vld1q_dup_f32(v12++);
    v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned __int128 *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C973DC6C(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v11;
  uint16x8_t v12;
  int16x8_t v19;
  uint64_t v21;
  int v22;
  int16x8_t v23;
  uint16x8_t v25;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  v11 = *a6;
  _X5 = a6 + 1;
  v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v21 = 2 * a2;
  v22 = v9 + 2;
  v23.i64[0] = 0xFE00FE00FE00FE00;
  v23.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    result = (uint16x8_t *)((char *)result + v21);
    v12 = (uint16x8_t)v19;
    v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1C973DD58(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  int8x16_t v31;
  uint16x8_t v33;
  uint16x8_t v34;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E2388((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)(a6 - 2);
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v28.i64[0] = 0xFE00FE00FE00FE00;
  v28.i64[1] = 0xFE00FE00FE00FE00;
  v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint64_t sub_1C973DED0(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  const float *v10;
  int16x8_t v17;
  int8x16_t v19;
  float *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int16x8_t v24;
  const float *v25;
  int8x16_t v27;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  const float *v32;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E2400((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = *(int8x16_t *)_X5;
  v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  v20 = (float *)(a5 + 2);
  v21 = 2 * a2;
  v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B60));
  v24.i64[0] = 0xFE00FE00FE00FE00;
  v24.i64[1] = 0xFE00FE00FE00FE00;
  v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *v20 = *(float *)&v27.i32[3];
    v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    v19 = (int8x16_t)vld1q_dup_f32(v32);
    v20 = (float *)v25;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C973E034(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C973E134(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v20;
  int v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v17 = *result;
  v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v20 = 2 * a2;
  v21 = v9 + 2;
  v22.i64[0] = 0xFE00FE00FE00FE00;
  v22.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v23 = (int16x8_t)v17;
    v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1C9862B00));
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v23;
    v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

uint64_t sub_1C973E244(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  const float *v32;
  uint16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E24DC((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *(int8x16_t *)result;
  v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xFE00FE00FE00FE00;
  v31.i64[1] = 0xFE00FE00FE00FE00;
  v32 = (const float *)a5;
  do
  {
    v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    v34 = (int16x8_t)v25;
    v35 = (int16x8_t)v24;
    _X12 = result + v28;
    v24 = *(int8x16_t *)(result + 2 * a2);
    v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    v17 = (int8x16_t)v35;
    v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint64_t sub_1C973E3FC(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  const float *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v22;
  float *v23;
  uint64_t v24;
  signed int v25;
  int8x16_t v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int8x16_t v39;
  const float *v40;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E2554((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int8x16_t *)_X5;
  v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  v18 = (const float *)(_X5 + 2);
  v19 = *(int8x16_t *)result;
  v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  v23 = (float *)(a5 + 2);
  v24 = 2 * a2;
  v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xFE00FE00FE00FE00;
  v28.i64[1] = 0xFE00FE00FE00FE00;
  v29 = v23;
  do
  {
    v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    v31 = (int16x8_t)v20;
    v32 = (int16x8_t)v19;
    _X11 = result + v24;
    v19 = *(int8x16_t *)(result + 2 * a2);
    v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    v35 = (int8x16_t)vld1q_dup_f32(v29++);
    v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *v23 = *(float *)&v20.i32[3];
    v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    v22 = (int8x16_t)vld1q_dup_f32(v40);
    v23 = (float *)v29;
    v12 = (int8x16_t)v32;
    v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

int16x8_t *sub_1C973E5A0(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v19 = result[2];
    v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C973E718(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v19 = *result;
  v20 = result[1];
  v21 = result[2];
  v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v24 = v9 + 2;
  v25 = 2 * a2;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v27 = (int16x8_t)v19;
    v28 = (int16x8_t)v20;
    v29 = (int16x8_t)v21;
    v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1C9862B00));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    result = (uint16x8_t *)((char *)result + v25);
    v11 = (uint16x8_t)v27;
    v10 = (uint16x8_t)v28;
    v13 = (uint16x8_t)v29;
    v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

uint64_t sub_1C973E8A8(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  const float *v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int8x16_t v50;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E25CC((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *(int8x16_t *)result;
  v27 = *(int8x16_t *)(result + 16);
  v28 = result + 32;
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xFE00FE00FE00FE00;
  v36.i64[1] = 0xFE00FE00FE00FE00;
  v37 = (const float *)a5;
  do
  {
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v30;
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v29;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    v17 = (int16x8_t)v27;
    v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    v26 = *(int8x16_t *)(v28 + v33 - 32);
    v27 = *(int8x16_t *)(v28 + v33 - 16);
    v29 = *(int8x16_t *)(v28 + 2 * a2);
    v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint64_t sub_1C973EAF0(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int8x16_t v14;
  const float *v15;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v26;
  float *v27;
  const float *v28;
  uint64_t v29;
  signed int v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  const float *v34;
  int16x8_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  int8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int8x16_t v49;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E2644((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int16x8_t *)_X5;
  v11 = *((int16x8_t *)_X5 + 1);
  v13 = *((int8x16_t *)_X5 + 2);
  v14 = *((int8x16_t *)_X5 + 3);
  v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  v21 = *(int8x16_t *)result;
  v22 = *(int8x16_t *)(result + 16);
  v23 = *(int8x16_t *)(result + 32);
  v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  v27 = (float *)(a5 + 2);
  v28 = (const float *)(result + 64);
  v29 = 2 * a2;
  v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xFE00FE00FE00FE00;
  v33.i64[1] = 0xFE00FE00FE00FE00;
  v34 = v27;
  do
  {
    v35 = (int16x8_t)v24;
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    v37 = (int16x8_t)v23;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    v11 = (int16x8_t)v22;
    v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    v41 = (int8x16_t)vld1q_dup_f32(v34++);
    v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *v27 = *(float *)&v24.i32[3];
    v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1C9862B00));
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1C9862B00));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    v28 = (const float *)((char *)v28 + v29);
    v27 = (float *)v34;
    v13 = (int8x16_t)v37;
    v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

int16x8_t *sub_1C973ED1C(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int16x8_t v13;
  const float *v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v12 = a7 + 1;
  v13.i64[0] = 0xFE00FE00FE00FE00;
  v13.i64[1] = 0xFE00FE00FE00FE00;
  v14 = a5;
  do
  {
    v15 = *result;
    v16 = result[1];
    v17 = result[2];
    v18 = result[3];
    v19 = result[4];
    v20 = result[5];
    v22 = result[6];
    v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1C9862B00));
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1C9862B00));
    v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C973EFA0(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int16x8_t *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  v15 = _X5[4];
  v14 = _X5[5];
  v17 = _X5[6];
  v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v24 = *(uint16x8_t *)result;
  v25 = *(uint16x8_t *)(result + 16);
  v26 = *(uint16x8_t *)(result + 32);
  v27 = *(uint16x8_t *)(result + 48);
  v28 = *(uint16x8_t *)(result + 64);
  v29 = *(uint16x8_t *)(result + 80);
  v30 = (int16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 96);
  v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v35 = v9 + 2;
  v36 = 2 * a2;
  v37.i64[0] = 0xFE00FE00FE00FE00;
  v37.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v38 = (int16x8_t)v32;
    v39 = (int16x8_t)v31;
    v40 = (int16x8_t)v29;
    v41 = (int16x8_t)v28;
    v42 = (int16x8_t)v27;
    v43 = (int16x8_t)v26;
    v44 = (int16x8_t)v25;
    v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1C9862B00));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1C9862B00));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1C9862B00));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1C9862B00));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v30 = (int16x8_t *)((char *)v30 + v36);
    v11 = (uint16x8_t)v45;
    v10 = (uint16x8_t)v44;
    v13 = (uint16x8_t)v43;
    v12 = (uint16x8_t)v42;
    v15 = (uint16x8_t)v41;
    v14 = (uint16x8_t)v40;
    v17 = (uint16x8_t)v39;
    v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

uint64_t sub_1C973F264(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  const float *v9;
  int8x16_t v10;
  const float *v11;
  unsigned int v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v41;
  int v42;
  int8x16_t v43;
  int16x8_t v44;
  const float *v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E26BC((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    v11 = (const float *)&_X5[-1].i32[3];
    v10 = (int8x16_t)vld1q_dup_f32(v11);
  }
  else
  {
    v9 = (const float *)a5;
    v10 = (int8x16_t)vld1q_dup_f32(v9++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v9;
  }
  v7.i64[1] = v8;
  v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v12 + 1)] = *(_DWORD *)(result + 2 * (int)(v12 + 1) * a2 + 124);
  v13 = vdupq_n_s16(~(_DWORD)a4);
  v15 = *_X5;
  v14 = _X5[1];
  v16 = (int16x8_t)vandq_s8((int8x16_t)v13, (int8x16_t)xmmword_1C9862B90);
  v17 = (int8x16_t)vtstq_s16(v13, (int16x8_t)xmmword_1C9862BA0);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *(int8x16_t *)result;
  v31 = *(int8x16_t *)(result + 16);
  v32 = *(int8x16_t *)(result + 32);
  v33 = *(int8x16_t *)(result + 48);
  v34 = *(int8x16_t *)(result + 64);
  v35 = *(int8x16_t *)(result + 80);
  v36 = result + 96;
  v37 = *(int8x16_t *)(result + 96);
  v38 = *(int8x16_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = 2 * a2;
  v42 = v12 + 2;
  v43 = (int8x16_t)vceqzq_s16(v16);
  v44.i64[0] = 0xFE00FE00FE00FE00;
  v44.i64[1] = 0xFE00FE00FE00FE00;
  v45 = (const float *)a5;
  do
  {
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xCuLL);
    v22 = (int16x8_t)v38;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xCuLL);
    v23 = (int16x8_t)v37;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v35;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xCuLL);
    v21 = (int16x8_t)v34;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v33;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v32;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 0xCuLL);
    v14 = (int16x8_t)v31;
    v53 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v15, 0xCuLL);
    v15 = (int16x8_t)v30;
    _X13 = v36 + v41;
    v30 = *(int8x16_t *)(v36 + v41 - 96);
    v31 = *(int8x16_t *)(v36 + v41 - 80);
    v32 = *(int8x16_t *)(v36 + v41 - 64);
    v33 = *(int8x16_t *)(v36 + v41 - 48);
    v34 = *(int8x16_t *)(v36 + v41 - 32);
    v35 = *(int8x16_t *)(v36 + v41 - 16);
    v55 = (uint16x8_t)vextq_s8(v30, v31, 4uLL);
    v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
    v57 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v55)), (int16x8_t)vcgtq_u16(v55, (uint16x8_t)v15));
    v58 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v14));
    v60 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
    v61 = vqmovn_high_s16(vqmovn_s16(v57), v59);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v19));
    v63 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v60));
    v37 = *(int8x16_t *)(v36 + 2 * a2);
    v38 = *(int8x16_t *)(v36 + v41 + 16);
    v64 = vaddq_s16(v63, (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v18));
    v65 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v62), v64);
    v67 = (uint16x8_t)vextq_s8(v35, v37, 4uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v20));
    v71 = (uint16x8_t)vextq_s8(v37, v38, 4uLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v21))), v70);
    v73 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v71);
    v74 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), v73);
    v73.i32[0] = *(_DWORD *)(v36 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
    v75 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v73, 4uLL);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v61, (int8x16_t)xmmword_1C9862B00));
    v77 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v74, (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v75)), (int16x8_t)vcgtq_u16(v75, (uint16x8_t)v22)));
    *(int8x16_t *)(v36 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v44), (int8x16_t)v15);
    *(int16x8_t *)(v36 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v44);
    v78 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v78), (int16x8_t)0), v44);
    v79 = vqtbl1q_s8(v7, vaddq_s8(v72, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v79), (int16x8_t)0), v44);
    v80 = vqtbl1q_s8(v7, vaddq_s8(v77, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v80.i8), (int16x8_t)0), v44);
    *(int8x16_t *)(v36 + 16) = vbslq_s8(v17, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v80), (int16x8_t)0), v44));
    v10 = (int8x16_t)vld1q_dup_f32(v45++);
    --v42;
    v36 += v41;
    *(_DWORD *)a5 = v22.i32[3];
    a5 = (__int16 *)v45;
  }
  while (v42 > 1);
  return result;
}

uint64_t sub_1C973F5DC(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const float *v20;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v37;
  signed int v38;
  int8x16_t v40;
  float *v41;
  int8x16_t v42;
  int16x8_t v43;
  const float *v44;
  uint16x8_t v45;
  int16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  const float *v77;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E2734((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v13 = *(int16x8_t *)_X5;
  v12 = *((int16x8_t *)_X5 + 1);
  v15 = *((int16x8_t *)_X5 + 2);
  v14 = *((int16x8_t *)_X5 + 3);
  v17 = *((int16x8_t *)_X5 + 4);
  v16 = *((int16x8_t *)_X5 + 5);
  v18 = *((int16x8_t *)_X5 + 6);
  v19 = *((int8x16_t *)_X5 + 7);
  v20 = (const float *)(_X5 + 8);
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *(int8x16_t *)result;
  v28 = *(int8x16_t *)(result + 16);
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  v31 = result + 96;
  v32 = *(int8x16_t *)(result + 96);
  v33 = *(int8x16_t *)(result + 64);
  v34 = *(int8x16_t *)(result + 80);
  v35 = *(int8x16_t *)(result + 112);
  __asm { PRFM            #0, [X0,#0x80] }
  v37 = 2 * a2;
  v38 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  __asm { PRFM            #0, [X0,#0xC0] }
  v40 = (int8x16_t)vld1q_dup_f32(v20);
  *(_DWORD *)a5 = v35.i32[3];
  v41 = (float *)(a5 + 2);
  v42 = (int8x16_t)vceqzq_s16(v10);
  v43.i64[0] = 0xFE00FE00FE00FE00;
  v43.i64[1] = 0xFE00FE00FE00FE00;
  v44 = v41;
  do
  {
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    v46 = (int16x8_t)v35;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 4uLL);
    v18 = (int16x8_t)v32;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 4uLL);
    v16 = (int16x8_t)v34;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 4uLL);
    v17 = (int16x8_t)v33;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 4uLL);
    v14 = (int16x8_t)v30;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 4uLL);
    v15 = (int16x8_t)v29;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 4uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = v31 + v37;
    v27 = *(int8x16_t *)(v31 + v37 - 96);
    v28 = *(int8x16_t *)(v31 + v37 - 80);
    v29 = *(int8x16_t *)(v31 + v37 - 64);
    v30 = *(int8x16_t *)(v31 + v37 - 48);
    v33 = *(int8x16_t *)(v31 + v37 - 32);
    v34 = *(int8x16_t *)(v31 + v37 - 16);
    v32 = *(int8x16_t *)(v31 + 2 * a2);
    v35 = *(int8x16_t *)(v31 + v37 + 16);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v56 = (int8x16_t)vld1q_dup_f32(v44++);
    v57 = (uint16x8_t)vextq_s8(v19, v40, 4uLL);
    v58 = (uint16x8_t)vextq_s8(v56, v27, 0xCuLL);
    v59 = (uint16x8_t)vextq_s8(v27, v28, 0xCuLL);
    v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v13));
    v61 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
    v62 = vqmovn_high_s16(vqmovn_s16(v60), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v12)));
    v63 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v15));
    v65 = (uint16x8_t)vextq_s8(v30, v33, 0xCuLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v64), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v14)));
    v67 = (uint16x8_t)vextq_s8(v33, v34, 0xCuLL);
    v68 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v16));
    v69 = (uint16x8_t)vextq_s8(v34, v32, 0xCuLL);
    v70 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v17))), v68);
    v71 = (uint16x8_t)vextq_s8(v32, v35, 0xCuLL);
    *v41 = *(float *)&v35.i32[3];
    v72 = vqtbl1q_s8(v7, vaddq_s8(v62, (int8x16_t)xmmword_1C9862B00));
    v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v57, (uint16x8_t)v46), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v57)), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v46)));
    *(int8x16_t *)(v31 - 96) = vbslq_s8(v42, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v72.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    *(int16x8_t *)(v31 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v72), (int16x8_t)0), v43);
    v74 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v74.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v74), (int16x8_t)0), v43);
    v75 = vqtbl1q_s8(v7, vaddq_s8(v70, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v75.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v75), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v73, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    *(int8x16_t *)(v31 + 16) = vbslq_s8(v11, (int8x16_t)v46, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v46, v76), (int16x8_t)0), v43));
    v77 = (const float *)(v31 + 32);
    --v38;
    v31 += v37;
    v41 = (float *)v44;
    v19 = (int8x16_t)v46;
    v40 = (int8x16_t)vld1q_dup_f32(v77);
  }
  while (v38 > 1);
  return result;
}

__int16 *sub_1C973F944(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v16;
  uint64_t v24;
  int16x8x2_t v25;
  int8x16x2_t v26;
  int16x8x2_t v27;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v13 = a7 + 2;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v15 = result;
    v25 = vld2q_s16(v15);
    v11 = a2;
    v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 4uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 4uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 4uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 4uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    v12 = 4 * a2;
    result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

__int16 *sub_1C973FA00(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v23;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int8x16x2_t v30;
  int16x8x2_t v31;
  int16x8x2_t v32;
  int8x16x2_t v33;
  int16x8x2_t v34;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v15 = result;
    v32 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    v23 = _X11;
    v31 = vld2q_s16(v23);
    v23 += 16;
    v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v25;
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 4uLL), (int16x8_t)v33.val[0], 4uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 4uLL), (int16x8_t)v33.val[1], 4uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 4uLL), (int16x8_t)v30.val[0], 4uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 4uLL), (int16x8_t)v30.val[1], 4uLL));
    v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1C973FB10(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v26;
  __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v34;
  int8x16_t v35;
  int16x8x2_t v36;
  int16x8x2_t v37;
  int16x8x2_t v38;
  int8x16x2_t v39;
  int16x8x2_t v40;
  int16x8x2_t v41;
  int16x8x2_t v42;
  int16x8x2_t v43;
  int8x16x2_t v44;
  int16x8x2_t v45;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    v15 = result;
    v42 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v36 = vld2q_s16(v17);
    v18 = result + 32;
    v45 = vld2q_s16(v18);
    v19 = result + 48;
    v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v26 = _X11;
    v41 = vld2q_s16(v26);
    v26 += 16;
    v40 = vld2q_s16(v26);
    v27 = _X11 + 32;
    v38 = vld2q_s16(v27);
    v28 = _X11 + 48;
    v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1C9862BB0).i32[1];
    v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 4uLL), v36.val[0], 4uLL));
    v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 4uLL), v36.val[1], 4uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 4uLL), (int16x8_t)v44.val[0], 4uLL));
    v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 4uLL), (int16x8_t)v44.val[1], 4uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 4uLL), v40.val[0], 4uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 4uLL), v40.val[1], 4uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 4uLL), (int16x8_t)v39.val[0], 4uLL));
    vst2q_s16(result, v42);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 4uLL), (int16x8_t)v39.val[1], 4uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

int16x8_t *sub_1C973FD00(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  if ((a4 & 4) != 0)
    v12 = 34;
  else
    v12 = 2;
  v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0)
    v14 = 17;
  else
    v14 = 1;
  v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973ED1C(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973ED1C(a1 + 8, a2, a3, v15, a5, v16, a7);
}

uint64_t sub_1C973FD9C(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973EFA0(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973EFA0(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C973FE48(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973F264(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973F264(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C973FEF4(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C973F5DC(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C973F5DC(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

__int16 *sub_1C973FFA0(__int16 *a1, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C973FB10(a1, a2, a3, a4, a5, a6, a7);
  return sub_1C973FB10(a1 + 64, a2, a3, v12, a5, v13, a7);
}

int8x16_t *sub_1C973FFF4(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int16x8_t v11;
  const float *v12;
  int16x8_t v13;
  int8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int16x8_t v22;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  v12 = a5;
  do
  {
    v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v19 = (int8x16_t)vld1q_dup_f32(v12++);
    v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned __int128 *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C97400B4(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v11;
  uint16x8_t v12;
  int16x8_t v19;
  uint64_t v21;
  int v22;
  int16x8_t v23;
  uint16x8_t v25;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  v11 = *a6;
  _X5 = a6 + 1;
  v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v21 = 2 * a2;
  v22 = v9 + 2;
  v23.i64[0] = 0xFC00FC00FC00FC00;
  v23.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    result = (uint16x8_t *)((char *)result + v21);
    v12 = (uint16x8_t)v19;
    v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1C97401A0(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  int8x16_t v31;
  uint16x8_t v33;
  uint16x8_t v34;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E0DB4((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)(a6 - 2);
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v28.i64[0] = 0xFC00FC00FC00FC00;
  v28.i64[1] = 0xFC00FC00FC00FC00;
  v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint64_t sub_1C9740318(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  const float *v10;
  int16x8_t v17;
  int8x16_t v19;
  float *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int16x8_t v24;
  const float *v25;
  int8x16_t v27;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  const float *v32;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E0E2C((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = *(int8x16_t *)_X5;
  v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  v20 = (float *)(a5 + 2);
  v21 = 2 * a2;
  v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B60));
  v24.i64[0] = 0xFC00FC00FC00FC00;
  v24.i64[1] = 0xFC00FC00FC00FC00;
  v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *v20 = *(float *)&v27.i32[3];
    v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    v19 = (int8x16_t)vld1q_dup_f32(v32);
    v20 = (float *)v25;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C974047C(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C974057C(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v20;
  int v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v17 = *result;
  v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v20 = 2 * a2;
  v21 = v9 + 2;
  v22.i64[0] = 0xFC00FC00FC00FC00;
  v22.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v23 = (int16x8_t)v17;
    v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1C9862B00));
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v23;
    v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

uint64_t sub_1C974068C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  const float *v32;
  uint16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E0F08((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *(int8x16_t *)result;
  v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xFC00FC00FC00FC00;
  v31.i64[1] = 0xFC00FC00FC00FC00;
  v32 = (const float *)a5;
  do
  {
    v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    v34 = (int16x8_t)v25;
    v35 = (int16x8_t)v24;
    _X12 = result + v28;
    v24 = *(int8x16_t *)(result + 2 * a2);
    v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    v17 = (int8x16_t)v35;
    v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint64_t sub_1C9740844(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  const float *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v22;
  float *v23;
  uint64_t v24;
  signed int v25;
  int8x16_t v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int8x16_t v39;
  const float *v40;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E0F80((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int8x16_t *)_X5;
  v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  v18 = (const float *)(_X5 + 2);
  v19 = *(int8x16_t *)result;
  v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  v23 = (float *)(a5 + 2);
  v24 = 2 * a2;
  v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xFC00FC00FC00FC00;
  v28.i64[1] = 0xFC00FC00FC00FC00;
  v29 = v23;
  do
  {
    v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    v31 = (int16x8_t)v20;
    v32 = (int16x8_t)v19;
    _X11 = result + v24;
    v19 = *(int8x16_t *)(result + 2 * a2);
    v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    v35 = (int8x16_t)vld1q_dup_f32(v29++);
    v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *v23 = *(float *)&v20.i32[3];
    v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    v22 = (int8x16_t)vld1q_dup_f32(v40);
    v23 = (float *)v29;
    v12 = (int8x16_t)v32;
    v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

int16x8_t *sub_1C97409E8(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v19 = result[2];
    v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9740B60(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v19 = *result;
  v20 = result[1];
  v21 = result[2];
  v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v24 = v9 + 2;
  v25 = 2 * a2;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v27 = (int16x8_t)v19;
    v28 = (int16x8_t)v20;
    v29 = (int16x8_t)v21;
    v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1C9862B00));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    result = (uint16x8_t *)((char *)result + v25);
    v11 = (uint16x8_t)v27;
    v10 = (uint16x8_t)v28;
    v13 = (uint16x8_t)v29;
    v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

uint64_t sub_1C9740CF0(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  const float *v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int8x16_t v50;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E0FF8((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *(int8x16_t *)result;
  v27 = *(int8x16_t *)(result + 16);
  v28 = result + 32;
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xFC00FC00FC00FC00;
  v36.i64[1] = 0xFC00FC00FC00FC00;
  v37 = (const float *)a5;
  do
  {
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v30;
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v29;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    v17 = (int16x8_t)v27;
    v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    v26 = *(int8x16_t *)(v28 + v33 - 32);
    v27 = *(int8x16_t *)(v28 + v33 - 16);
    v29 = *(int8x16_t *)(v28 + 2 * a2);
    v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint64_t sub_1C9740F38(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int8x16_t v14;
  const float *v15;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v26;
  float *v27;
  const float *v28;
  uint64_t v29;
  signed int v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  const float *v34;
  int16x8_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  int8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int8x16_t v49;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E1070((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int16x8_t *)_X5;
  v11 = *((int16x8_t *)_X5 + 1);
  v13 = *((int8x16_t *)_X5 + 2);
  v14 = *((int8x16_t *)_X5 + 3);
  v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  v21 = *(int8x16_t *)result;
  v22 = *(int8x16_t *)(result + 16);
  v23 = *(int8x16_t *)(result + 32);
  v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  v27 = (float *)(a5 + 2);
  v28 = (const float *)(result + 64);
  v29 = 2 * a2;
  v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xFC00FC00FC00FC00;
  v33.i64[1] = 0xFC00FC00FC00FC00;
  v34 = v27;
  do
  {
    v35 = (int16x8_t)v24;
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    v37 = (int16x8_t)v23;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    v11 = (int16x8_t)v22;
    v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    v41 = (int8x16_t)vld1q_dup_f32(v34++);
    v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *v27 = *(float *)&v24.i32[3];
    v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1C9862B00));
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1C9862B00));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    v28 = (const float *)((char *)v28 + v29);
    v27 = (float *)v34;
    v13 = (int8x16_t)v37;
    v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

int16x8_t *sub_1C9741164(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int16x8_t v13;
  const float *v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v12 = a7 + 1;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  v14 = a5;
  do
  {
    v15 = *result;
    v16 = result[1];
    v17 = result[2];
    v18 = result[3];
    v19 = result[4];
    v20 = result[5];
    v22 = result[6];
    v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1C9862B00));
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1C9862B00));
    v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C97413E8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int16x8_t *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  v15 = _X5[4];
  v14 = _X5[5];
  v17 = _X5[6];
  v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v24 = *(uint16x8_t *)result;
  v25 = *(uint16x8_t *)(result + 16);
  v26 = *(uint16x8_t *)(result + 32);
  v27 = *(uint16x8_t *)(result + 48);
  v28 = *(uint16x8_t *)(result + 64);
  v29 = *(uint16x8_t *)(result + 80);
  v30 = (int16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 96);
  v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v35 = v9 + 2;
  v36 = 2 * a2;
  v37.i64[0] = 0xFC00FC00FC00FC00;
  v37.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v38 = (int16x8_t)v32;
    v39 = (int16x8_t)v31;
    v40 = (int16x8_t)v29;
    v41 = (int16x8_t)v28;
    v42 = (int16x8_t)v27;
    v43 = (int16x8_t)v26;
    v44 = (int16x8_t)v25;
    v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1C9862B00));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1C9862B00));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1C9862B00));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1C9862B00));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v30 = (int16x8_t *)((char *)v30 + v36);
    v11 = (uint16x8_t)v45;
    v10 = (uint16x8_t)v44;
    v13 = (uint16x8_t)v43;
    v12 = (uint16x8_t)v42;
    v15 = (uint16x8_t)v41;
    v14 = (uint16x8_t)v40;
    v17 = (uint16x8_t)v39;
    v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

uint64_t sub_1C97416AC(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  const float *v9;
  int8x16_t v10;
  const float *v11;
  unsigned int v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v41;
  int v42;
  int8x16_t v43;
  int16x8_t v44;
  const float *v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97E10E8((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    v11 = (const float *)&_X5[-1].i32[3];
    v10 = (int8x16_t)vld1q_dup_f32(v11);
  }
  else
  {
    v9 = (const float *)a5;
    v10 = (int8x16_t)vld1q_dup_f32(v9++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v9;
  }
  v7.i64[1] = v8;
  v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v12 + 1)] = *(_DWORD *)(result + 2 * (int)(v12 + 1) * a2 + 124);
  v13 = vdupq_n_s16(~(_DWORD)a4);
  v15 = *_X5;
  v14 = _X5[1];
  v16 = (int16x8_t)vandq_s8((int8x16_t)v13, (int8x16_t)xmmword_1C9862B90);
  v17 = (int8x16_t)vtstq_s16(v13, (int16x8_t)xmmword_1C9862BA0);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *(int8x16_t *)result;
  v31 = *(int8x16_t *)(result + 16);
  v32 = *(int8x16_t *)(result + 32);
  v33 = *(int8x16_t *)(result + 48);
  v34 = *(int8x16_t *)(result + 64);
  v35 = *(int8x16_t *)(result + 80);
  v36 = result + 96;
  v37 = *(int8x16_t *)(result + 96);
  v38 = *(int8x16_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = 2 * a2;
  v42 = v12 + 2;
  v43 = (int8x16_t)vceqzq_s16(v16);
  v44.i64[0] = 0xFC00FC00FC00FC00;
  v44.i64[1] = 0xFC00FC00FC00FC00;
  v45 = (const float *)a5;
  do
  {
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xCuLL);
    v22 = (int16x8_t)v38;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xCuLL);
    v23 = (int16x8_t)v37;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v35;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xCuLL);
    v21 = (int16x8_t)v34;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v33;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v32;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 0xCuLL);
    v14 = (int16x8_t)v31;
    v53 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v15, 0xCuLL);
    v15 = (int16x8_t)v30;
    _X13 = v36 + v41;
    v30 = *(int8x16_t *)(v36 + v41 - 96);
    v31 = *(int8x16_t *)(v36 + v41 - 80);
    v32 = *(int8x16_t *)(v36 + v41 - 64);
    v33 = *(int8x16_t *)(v36 + v41 - 48);
    v34 = *(int8x16_t *)(v36 + v41 - 32);
    v35 = *(int8x16_t *)(v36 + v41 - 16);
    v55 = (uint16x8_t)vextq_s8(v30, v31, 4uLL);
    v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
    v57 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v55)), (int16x8_t)vcgtq_u16(v55, (uint16x8_t)v15));
    v58 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v14));
    v60 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
    v61 = vqmovn_high_s16(vqmovn_s16(v57), v59);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v19));
    v63 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v60));
    v37 = *(int8x16_t *)(v36 + 2 * a2);
    v38 = *(int8x16_t *)(v36 + v41 + 16);
    v64 = vaddq_s16(v63, (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v18));
    v65 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v62), v64);
    v67 = (uint16x8_t)vextq_s8(v35, v37, 4uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v20));
    v71 = (uint16x8_t)vextq_s8(v37, v38, 4uLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v21))), v70);
    v73 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v71);
    v74 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), v73);
    v73.i32[0] = *(_DWORD *)(v36 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
    v75 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v73, 4uLL);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v61, (int8x16_t)xmmword_1C9862B00));
    v77 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v74, (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v75)), (int16x8_t)vcgtq_u16(v75, (uint16x8_t)v22)));
    *(int8x16_t *)(v36 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v44), (int8x16_t)v15);
    *(int16x8_t *)(v36 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v44);
    v78 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v78), (int16x8_t)0), v44);
    v79 = vqtbl1q_s8(v7, vaddq_s8(v72, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v79), (int16x8_t)0), v44);
    v80 = vqtbl1q_s8(v7, vaddq_s8(v77, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v80.i8), (int16x8_t)0), v44);
    *(int8x16_t *)(v36 + 16) = vbslq_s8(v17, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v80), (int16x8_t)0), v44));
    v10 = (int8x16_t)vld1q_dup_f32(v45++);
    --v42;
    v36 += v41;
    *(_DWORD *)a5 = v22.i32[3];
    a5 = (__int16 *)v45;
  }
  while (v42 > 1);
  return result;
}

uint64_t sub_1C9741A24(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const float *v20;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v37;
  signed int v38;
  int8x16_t v40;
  float *v41;
  int8x16_t v42;
  int16x8_t v43;
  const float *v44;
  uint16x8_t v45;
  int16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  const float *v77;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97E1160((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v13 = *(int16x8_t *)_X5;
  v12 = *((int16x8_t *)_X5 + 1);
  v15 = *((int16x8_t *)_X5 + 2);
  v14 = *((int16x8_t *)_X5 + 3);
  v17 = *((int16x8_t *)_X5 + 4);
  v16 = *((int16x8_t *)_X5 + 5);
  v18 = *((int16x8_t *)_X5 + 6);
  v19 = *((int8x16_t *)_X5 + 7);
  v20 = (const float *)(_X5 + 8);
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *(int8x16_t *)result;
  v28 = *(int8x16_t *)(result + 16);
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  v31 = result + 96;
  v32 = *(int8x16_t *)(result + 96);
  v33 = *(int8x16_t *)(result + 64);
  v34 = *(int8x16_t *)(result + 80);
  v35 = *(int8x16_t *)(result + 112);
  __asm { PRFM            #0, [X0,#0x80] }
  v37 = 2 * a2;
  v38 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  __asm { PRFM            #0, [X0,#0xC0] }
  v40 = (int8x16_t)vld1q_dup_f32(v20);
  *(_DWORD *)a5 = v35.i32[3];
  v41 = (float *)(a5 + 2);
  v42 = (int8x16_t)vceqzq_s16(v10);
  v43.i64[0] = 0xFC00FC00FC00FC00;
  v43.i64[1] = 0xFC00FC00FC00FC00;
  v44 = v41;
  do
  {
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    v46 = (int16x8_t)v35;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 4uLL);
    v18 = (int16x8_t)v32;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 4uLL);
    v16 = (int16x8_t)v34;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 4uLL);
    v17 = (int16x8_t)v33;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 4uLL);
    v14 = (int16x8_t)v30;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 4uLL);
    v15 = (int16x8_t)v29;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 4uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = v31 + v37;
    v27 = *(int8x16_t *)(v31 + v37 - 96);
    v28 = *(int8x16_t *)(v31 + v37 - 80);
    v29 = *(int8x16_t *)(v31 + v37 - 64);
    v30 = *(int8x16_t *)(v31 + v37 - 48);
    v33 = *(int8x16_t *)(v31 + v37 - 32);
    v34 = *(int8x16_t *)(v31 + v37 - 16);
    v32 = *(int8x16_t *)(v31 + 2 * a2);
    v35 = *(int8x16_t *)(v31 + v37 + 16);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v56 = (int8x16_t)vld1q_dup_f32(v44++);
    v57 = (uint16x8_t)vextq_s8(v19, v40, 4uLL);
    v58 = (uint16x8_t)vextq_s8(v56, v27, 0xCuLL);
    v59 = (uint16x8_t)vextq_s8(v27, v28, 0xCuLL);
    v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v13));
    v61 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
    v62 = vqmovn_high_s16(vqmovn_s16(v60), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v12)));
    v63 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v15));
    v65 = (uint16x8_t)vextq_s8(v30, v33, 0xCuLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v64), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v14)));
    v67 = (uint16x8_t)vextq_s8(v33, v34, 0xCuLL);
    v68 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v16));
    v69 = (uint16x8_t)vextq_s8(v34, v32, 0xCuLL);
    v70 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v17))), v68);
    v71 = (uint16x8_t)vextq_s8(v32, v35, 0xCuLL);
    *v41 = *(float *)&v35.i32[3];
    v72 = vqtbl1q_s8(v7, vaddq_s8(v62, (int8x16_t)xmmword_1C9862B00));
    v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v57, (uint16x8_t)v46), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v57)), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v46)));
    *(int8x16_t *)(v31 - 96) = vbslq_s8(v42, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v72.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    *(int16x8_t *)(v31 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v72), (int16x8_t)0), v43);
    v74 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v74.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v74), (int16x8_t)0), v43);
    v75 = vqtbl1q_s8(v7, vaddq_s8(v70, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v75.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v75), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v73, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    *(int8x16_t *)(v31 + 16) = vbslq_s8(v11, (int8x16_t)v46, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v46, v76), (int16x8_t)0), v43));
    v77 = (const float *)(v31 + 32);
    --v38;
    v31 += v37;
    v41 = (float *)v44;
    v19 = (int8x16_t)v46;
    v40 = (int8x16_t)vld1q_dup_f32(v77);
  }
  while (v38 > 1);
  return result;
}

__int16 *sub_1C9741D8C(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v16;
  uint64_t v24;
  int16x8x2_t v25;
  int8x16x2_t v26;
  int16x8x2_t v27;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v13 = a7 + 2;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v15 = result;
    v25 = vld2q_s16(v15);
    v11 = a2;
    v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 5uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 5uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 5uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 5uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    v12 = 4 * a2;
    result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

__int16 *sub_1C9741E48(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v23;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int8x16x2_t v30;
  int16x8x2_t v31;
  int16x8x2_t v32;
  int8x16x2_t v33;
  int16x8x2_t v34;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v15 = result;
    v32 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    v23 = _X11;
    v31 = vld2q_s16(v23);
    v23 += 16;
    v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v25;
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 5uLL), (int16x8_t)v33.val[0], 5uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 5uLL), (int16x8_t)v33.val[1], 5uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 5uLL), (int16x8_t)v30.val[0], 5uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 5uLL), (int16x8_t)v30.val[1], 5uLL));
    v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1C9741F58(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v26;
  __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v34;
  int8x16_t v35;
  int16x8x2_t v36;
  int16x8x2_t v37;
  int16x8x2_t v38;
  int8x16x2_t v39;
  int16x8x2_t v40;
  int16x8x2_t v41;
  int16x8x2_t v42;
  int16x8x2_t v43;
  int8x16x2_t v44;
  int16x8x2_t v45;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v15 = result;
    v42 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v36 = vld2q_s16(v17);
    v18 = result + 32;
    v45 = vld2q_s16(v18);
    v19 = result + 48;
    v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v26 = _X11;
    v41 = vld2q_s16(v26);
    v26 += 16;
    v40 = vld2q_s16(v26);
    v27 = _X11 + 32;
    v38 = vld2q_s16(v27);
    v28 = _X11 + 48;
    v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1C9862BB0).i32[1];
    v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 5uLL), v36.val[0], 5uLL));
    v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 5uLL), v36.val[1], 5uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 5uLL), (int16x8_t)v44.val[0], 5uLL));
    v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 5uLL), (int16x8_t)v44.val[1], 5uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 5uLL), v40.val[0], 5uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 5uLL), v40.val[1], 5uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 5uLL), (int16x8_t)v39.val[0], 5uLL));
    vst2q_s16(result, v42);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 5uLL), (int16x8_t)v39.val[1], 5uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

int16x8_t *sub_1C9742148(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  if ((a4 & 4) != 0)
    v12 = 34;
  else
    v12 = 2;
  v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0)
    v14 = 17;
  else
    v14 = 1;
  v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C9741164(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C9741164(a1 + 8, a2, a3, v15, a5, v16, a7);
}

uint64_t sub_1C97421E4(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97413E8(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97413E8(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C9742290(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97416AC(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97416AC(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C974233C(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C9741A24(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C9741A24(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

__int16 *sub_1C97423E8(__int16 *a1, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C9741F58(a1, a2, a3, a4, a5, a6, a7);
  return sub_1C9741F58(a1 + 64, a2, a3, v12, a5, v13, a7);
}

int8x16_t *sub_1C974243C(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int16x8_t v11;
  const float *v12;
  int16x8_t v13;
  int8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int16x8_t v22;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  v12 = a5;
  do
  {
    v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v19 = (int8x16_t)vld1q_dup_f32(v12++);
    v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned __int128 *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C97424FC(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v11;
  uint16x8_t v12;
  int16x8_t v19;
  uint64_t v21;
  int v22;
  int16x8_t v23;
  uint16x8_t v25;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  v11 = *a6;
  _X5 = a6 + 1;
  v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v21 = 2 * a2;
  v22 = v9 + 2;
  v23.i64[0] = 0xF800F800F800F800;
  v23.i64[1] = 0xF800F800F800F800;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    result = (uint16x8_t *)((char *)result + v21);
    v12 = (uint16x8_t)v19;
    v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1C97425E8(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  int8x16_t v31;
  uint16x8_t v33;
  uint16x8_t v34;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DF7E0((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)(a6 - 2);
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v28.i64[0] = 0xF800F800F800F800;
  v28.i64[1] = 0xF800F800F800F800;
  v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint64_t sub_1C9742760(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  const float *v10;
  int16x8_t v17;
  int8x16_t v19;
  float *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int16x8_t v24;
  const float *v25;
  int8x16_t v27;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  const float *v32;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DF858((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = *(int8x16_t *)_X5;
  v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  v20 = (float *)(a5 + 2);
  v21 = 2 * a2;
  v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B60));
  v24.i64[0] = 0xF800F800F800F800;
  v24.i64[1] = 0xF800F800F800F800;
  v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *v20 = *(float *)&v27.i32[3];
    v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    v19 = (int8x16_t)vld1q_dup_f32(v32);
    v20 = (float *)v25;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C97428C4(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C97429C4(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v20;
  int v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v17 = *result;
  v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v20 = 2 * a2;
  v21 = v9 + 2;
  v22.i64[0] = 0xF800F800F800F800;
  v22.i64[1] = 0xF800F800F800F800;
  do
  {
    v23 = (int16x8_t)v17;
    v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1C9862B00));
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v23;
    v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

uint64_t sub_1C9742AD4(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  const float *v32;
  uint16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DF934((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *(int8x16_t *)result;
  v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xF800F800F800F800;
  v31.i64[1] = 0xF800F800F800F800;
  v32 = (const float *)a5;
  do
  {
    v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    v34 = (int16x8_t)v25;
    v35 = (int16x8_t)v24;
    _X12 = result + v28;
    v24 = *(int8x16_t *)(result + 2 * a2);
    v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    v17 = (int8x16_t)v35;
    v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint64_t sub_1C9742C8C(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  const float *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v22;
  float *v23;
  uint64_t v24;
  signed int v25;
  int8x16_t v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int8x16_t v39;
  const float *v40;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DF9AC((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int8x16_t *)_X5;
  v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  v18 = (const float *)(_X5 + 2);
  v19 = *(int8x16_t *)result;
  v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  v23 = (float *)(a5 + 2);
  v24 = 2 * a2;
  v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xF800F800F800F800;
  v28.i64[1] = 0xF800F800F800F800;
  v29 = v23;
  do
  {
    v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    v31 = (int16x8_t)v20;
    v32 = (int16x8_t)v19;
    _X11 = result + v24;
    v19 = *(int8x16_t *)(result + 2 * a2);
    v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    v35 = (int8x16_t)vld1q_dup_f32(v29++);
    v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *v23 = *(float *)&v20.i32[3];
    v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    v22 = (int8x16_t)vld1q_dup_f32(v40);
    v23 = (float *)v29;
    v12 = (int8x16_t)v32;
    v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

int16x8_t *sub_1C9742E30(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v19 = result[2];
    v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9742FA8(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v19 = *result;
  v20 = result[1];
  v21 = result[2];
  v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v24 = v9 + 2;
  v25 = 2 * a2;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  do
  {
    v27 = (int16x8_t)v19;
    v28 = (int16x8_t)v20;
    v29 = (int16x8_t)v21;
    v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1C9862B00));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    result = (uint16x8_t *)((char *)result + v25);
    v11 = (uint16x8_t)v27;
    v10 = (uint16x8_t)v28;
    v13 = (uint16x8_t)v29;
    v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

uint64_t sub_1C9743138(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  const float *v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int8x16_t v50;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DFA24((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *(int8x16_t *)result;
  v27 = *(int8x16_t *)(result + 16);
  v28 = result + 32;
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xF800F800F800F800;
  v36.i64[1] = 0xF800F800F800F800;
  v37 = (const float *)a5;
  do
  {
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v30;
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v29;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    v17 = (int16x8_t)v27;
    v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    v26 = *(int8x16_t *)(v28 + v33 - 32);
    v27 = *(int8x16_t *)(v28 + v33 - 16);
    v29 = *(int8x16_t *)(v28 + 2 * a2);
    v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint64_t sub_1C9743380(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int8x16_t v14;
  const float *v15;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v26;
  float *v27;
  const float *v28;
  uint64_t v29;
  signed int v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  const float *v34;
  int16x8_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  int8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int8x16_t v49;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DFA9C((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int16x8_t *)_X5;
  v11 = *((int16x8_t *)_X5 + 1);
  v13 = *((int8x16_t *)_X5 + 2);
  v14 = *((int8x16_t *)_X5 + 3);
  v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  v21 = *(int8x16_t *)result;
  v22 = *(int8x16_t *)(result + 16);
  v23 = *(int8x16_t *)(result + 32);
  v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  v27 = (float *)(a5 + 2);
  v28 = (const float *)(result + 64);
  v29 = 2 * a2;
  v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xF800F800F800F800;
  v33.i64[1] = 0xF800F800F800F800;
  v34 = v27;
  do
  {
    v35 = (int16x8_t)v24;
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    v37 = (int16x8_t)v23;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    v11 = (int16x8_t)v22;
    v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    v41 = (int8x16_t)vld1q_dup_f32(v34++);
    v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *v27 = *(float *)&v24.i32[3];
    v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1C9862B00));
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1C9862B00));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    v28 = (const float *)((char *)v28 + v29);
    v27 = (float *)v34;
    v13 = (int8x16_t)v37;
    v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

int16x8_t *sub_1C97435AC(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int16x8_t v13;
  const float *v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v12 = a7 + 1;
  v13.i64[0] = 0xF800F800F800F800;
  v13.i64[1] = 0xF800F800F800F800;
  v14 = a5;
  do
  {
    v15 = *result;
    v16 = result[1];
    v17 = result[2];
    v18 = result[3];
    v19 = result[4];
    v20 = result[5];
    v22 = result[6];
    v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1C9862B00));
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1C9862B00));
    v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C9743830(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int16x8_t *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  v15 = _X5[4];
  v14 = _X5[5];
  v17 = _X5[6];
  v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v24 = *(uint16x8_t *)result;
  v25 = *(uint16x8_t *)(result + 16);
  v26 = *(uint16x8_t *)(result + 32);
  v27 = *(uint16x8_t *)(result + 48);
  v28 = *(uint16x8_t *)(result + 64);
  v29 = *(uint16x8_t *)(result + 80);
  v30 = (int16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 96);
  v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v35 = v9 + 2;
  v36 = 2 * a2;
  v37.i64[0] = 0xF800F800F800F800;
  v37.i64[1] = 0xF800F800F800F800;
  do
  {
    v38 = (int16x8_t)v32;
    v39 = (int16x8_t)v31;
    v40 = (int16x8_t)v29;
    v41 = (int16x8_t)v28;
    v42 = (int16x8_t)v27;
    v43 = (int16x8_t)v26;
    v44 = (int16x8_t)v25;
    v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1C9862B00));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1C9862B00));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1C9862B00));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1C9862B00));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v30 = (int16x8_t *)((char *)v30 + v36);
    v11 = (uint16x8_t)v45;
    v10 = (uint16x8_t)v44;
    v13 = (uint16x8_t)v43;
    v12 = (uint16x8_t)v42;
    v15 = (uint16x8_t)v41;
    v14 = (uint16x8_t)v40;
    v17 = (uint16x8_t)v39;
    v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

uint64_t sub_1C9743AF4(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  const float *v9;
  int8x16_t v10;
  const float *v11;
  unsigned int v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v41;
  int v42;
  int8x16_t v43;
  int16x8_t v44;
  const float *v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DFB14((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    v11 = (const float *)&_X5[-1].i32[3];
    v10 = (int8x16_t)vld1q_dup_f32(v11);
  }
  else
  {
    v9 = (const float *)a5;
    v10 = (int8x16_t)vld1q_dup_f32(v9++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v9;
  }
  v7.i64[1] = v8;
  v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v12 + 1)] = *(_DWORD *)(result + 2 * (int)(v12 + 1) * a2 + 124);
  v13 = vdupq_n_s16(~(_DWORD)a4);
  v15 = *_X5;
  v14 = _X5[1];
  v16 = (int16x8_t)vandq_s8((int8x16_t)v13, (int8x16_t)xmmword_1C9862B90);
  v17 = (int8x16_t)vtstq_s16(v13, (int16x8_t)xmmword_1C9862BA0);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *(int8x16_t *)result;
  v31 = *(int8x16_t *)(result + 16);
  v32 = *(int8x16_t *)(result + 32);
  v33 = *(int8x16_t *)(result + 48);
  v34 = *(int8x16_t *)(result + 64);
  v35 = *(int8x16_t *)(result + 80);
  v36 = result + 96;
  v37 = *(int8x16_t *)(result + 96);
  v38 = *(int8x16_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = 2 * a2;
  v42 = v12 + 2;
  v43 = (int8x16_t)vceqzq_s16(v16);
  v44.i64[0] = 0xF800F800F800F800;
  v44.i64[1] = 0xF800F800F800F800;
  v45 = (const float *)a5;
  do
  {
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xCuLL);
    v22 = (int16x8_t)v38;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xCuLL);
    v23 = (int16x8_t)v37;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v35;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xCuLL);
    v21 = (int16x8_t)v34;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v33;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v32;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 0xCuLL);
    v14 = (int16x8_t)v31;
    v53 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v15, 0xCuLL);
    v15 = (int16x8_t)v30;
    _X13 = v36 + v41;
    v30 = *(int8x16_t *)(v36 + v41 - 96);
    v31 = *(int8x16_t *)(v36 + v41 - 80);
    v32 = *(int8x16_t *)(v36 + v41 - 64);
    v33 = *(int8x16_t *)(v36 + v41 - 48);
    v34 = *(int8x16_t *)(v36 + v41 - 32);
    v35 = *(int8x16_t *)(v36 + v41 - 16);
    v55 = (uint16x8_t)vextq_s8(v30, v31, 4uLL);
    v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
    v57 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v55)), (int16x8_t)vcgtq_u16(v55, (uint16x8_t)v15));
    v58 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v14));
    v60 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
    v61 = vqmovn_high_s16(vqmovn_s16(v57), v59);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v19));
    v63 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v60));
    v37 = *(int8x16_t *)(v36 + 2 * a2);
    v38 = *(int8x16_t *)(v36 + v41 + 16);
    v64 = vaddq_s16(v63, (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v18));
    v65 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v62), v64);
    v67 = (uint16x8_t)vextq_s8(v35, v37, 4uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v20));
    v71 = (uint16x8_t)vextq_s8(v37, v38, 4uLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v21))), v70);
    v73 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v71);
    v74 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), v73);
    v73.i32[0] = *(_DWORD *)(v36 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
    v75 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v73, 4uLL);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v61, (int8x16_t)xmmword_1C9862B00));
    v77 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v74, (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v75)), (int16x8_t)vcgtq_u16(v75, (uint16x8_t)v22)));
    *(int8x16_t *)(v36 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v44), (int8x16_t)v15);
    *(int16x8_t *)(v36 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v44);
    v78 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v78), (int16x8_t)0), v44);
    v79 = vqtbl1q_s8(v7, vaddq_s8(v72, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v79), (int16x8_t)0), v44);
    v80 = vqtbl1q_s8(v7, vaddq_s8(v77, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v80.i8), (int16x8_t)0), v44);
    *(int8x16_t *)(v36 + 16) = vbslq_s8(v17, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v80), (int16x8_t)0), v44));
    v10 = (int8x16_t)vld1q_dup_f32(v45++);
    --v42;
    v36 += v41;
    *(_DWORD *)a5 = v22.i32[3];
    a5 = (__int16 *)v45;
  }
  while (v42 > 1);
  return result;
}

uint64_t sub_1C9743E6C(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const float *v20;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v37;
  signed int v38;
  int8x16_t v40;
  float *v41;
  int8x16_t v42;
  int16x8_t v43;
  const float *v44;
  uint16x8_t v45;
  int16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  const float *v77;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DFB8C((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v13 = *(int16x8_t *)_X5;
  v12 = *((int16x8_t *)_X5 + 1);
  v15 = *((int16x8_t *)_X5 + 2);
  v14 = *((int16x8_t *)_X5 + 3);
  v17 = *((int16x8_t *)_X5 + 4);
  v16 = *((int16x8_t *)_X5 + 5);
  v18 = *((int16x8_t *)_X5 + 6);
  v19 = *((int8x16_t *)_X5 + 7);
  v20 = (const float *)(_X5 + 8);
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *(int8x16_t *)result;
  v28 = *(int8x16_t *)(result + 16);
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  v31 = result + 96;
  v32 = *(int8x16_t *)(result + 96);
  v33 = *(int8x16_t *)(result + 64);
  v34 = *(int8x16_t *)(result + 80);
  v35 = *(int8x16_t *)(result + 112);
  __asm { PRFM            #0, [X0,#0x80] }
  v37 = 2 * a2;
  v38 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  __asm { PRFM            #0, [X0,#0xC0] }
  v40 = (int8x16_t)vld1q_dup_f32(v20);
  *(_DWORD *)a5 = v35.i32[3];
  v41 = (float *)(a5 + 2);
  v42 = (int8x16_t)vceqzq_s16(v10);
  v43.i64[0] = 0xF800F800F800F800;
  v43.i64[1] = 0xF800F800F800F800;
  v44 = v41;
  do
  {
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    v46 = (int16x8_t)v35;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 4uLL);
    v18 = (int16x8_t)v32;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 4uLL);
    v16 = (int16x8_t)v34;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 4uLL);
    v17 = (int16x8_t)v33;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 4uLL);
    v14 = (int16x8_t)v30;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 4uLL);
    v15 = (int16x8_t)v29;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 4uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = v31 + v37;
    v27 = *(int8x16_t *)(v31 + v37 - 96);
    v28 = *(int8x16_t *)(v31 + v37 - 80);
    v29 = *(int8x16_t *)(v31 + v37 - 64);
    v30 = *(int8x16_t *)(v31 + v37 - 48);
    v33 = *(int8x16_t *)(v31 + v37 - 32);
    v34 = *(int8x16_t *)(v31 + v37 - 16);
    v32 = *(int8x16_t *)(v31 + 2 * a2);
    v35 = *(int8x16_t *)(v31 + v37 + 16);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v56 = (int8x16_t)vld1q_dup_f32(v44++);
    v57 = (uint16x8_t)vextq_s8(v19, v40, 4uLL);
    v58 = (uint16x8_t)vextq_s8(v56, v27, 0xCuLL);
    v59 = (uint16x8_t)vextq_s8(v27, v28, 0xCuLL);
    v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v13));
    v61 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
    v62 = vqmovn_high_s16(vqmovn_s16(v60), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v12)));
    v63 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v15));
    v65 = (uint16x8_t)vextq_s8(v30, v33, 0xCuLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v64), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v14)));
    v67 = (uint16x8_t)vextq_s8(v33, v34, 0xCuLL);
    v68 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v16));
    v69 = (uint16x8_t)vextq_s8(v34, v32, 0xCuLL);
    v70 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v17))), v68);
    v71 = (uint16x8_t)vextq_s8(v32, v35, 0xCuLL);
    *v41 = *(float *)&v35.i32[3];
    v72 = vqtbl1q_s8(v7, vaddq_s8(v62, (int8x16_t)xmmword_1C9862B00));
    v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v57, (uint16x8_t)v46), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v57)), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v46)));
    *(int8x16_t *)(v31 - 96) = vbslq_s8(v42, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v72.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    *(int16x8_t *)(v31 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v72), (int16x8_t)0), v43);
    v74 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v74.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v74), (int16x8_t)0), v43);
    v75 = vqtbl1q_s8(v7, vaddq_s8(v70, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v75.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v75), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v73, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    *(int8x16_t *)(v31 + 16) = vbslq_s8(v11, (int8x16_t)v46, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v46, v76), (int16x8_t)0), v43));
    v77 = (const float *)(v31 + 32);
    --v38;
    v31 += v37;
    v41 = (float *)v44;
    v19 = (int8x16_t)v46;
    v40 = (int8x16_t)vld1q_dup_f32(v77);
  }
  while (v38 > 1);
  return result;
}

__int16 *sub_1C97441D4(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v16;
  uint64_t v24;
  int16x8x2_t v25;
  int8x16x2_t v26;
  int16x8x2_t v27;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v13 = a7 + 2;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  do
  {
    v15 = result;
    v25 = vld2q_s16(v15);
    v11 = a2;
    v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 6uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 6uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 6uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 6uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    v12 = 4 * a2;
    result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

__int16 *sub_1C9744290(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v23;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int8x16x2_t v30;
  int16x8x2_t v31;
  int16x8x2_t v32;
  int8x16x2_t v33;
  int16x8x2_t v34;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  do
  {
    v15 = result;
    v32 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    v23 = _X11;
    v31 = vld2q_s16(v23);
    v23 += 16;
    v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v25;
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 6uLL), (int16x8_t)v33.val[0], 6uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 6uLL), (int16x8_t)v33.val[1], 6uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 6uLL), (int16x8_t)v30.val[0], 6uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 6uLL), (int16x8_t)v30.val[1], 6uLL));
    v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1C97443A0(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v26;
  __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v34;
  int8x16_t v35;
  int16x8x2_t v36;
  int16x8x2_t v37;
  int16x8x2_t v38;
  int8x16x2_t v39;
  int16x8x2_t v40;
  int16x8x2_t v41;
  int16x8x2_t v42;
  int16x8x2_t v43;
  int8x16x2_t v44;
  int16x8x2_t v45;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  do
  {
    v15 = result;
    v42 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v36 = vld2q_s16(v17);
    v18 = result + 32;
    v45 = vld2q_s16(v18);
    v19 = result + 48;
    v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v26 = _X11;
    v41 = vld2q_s16(v26);
    v26 += 16;
    v40 = vld2q_s16(v26);
    v27 = _X11 + 32;
    v38 = vld2q_s16(v27);
    v28 = _X11 + 48;
    v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1C9862BB0).i32[1];
    v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 6uLL), v36.val[0], 6uLL));
    v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 6uLL), v36.val[1], 6uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 6uLL), (int16x8_t)v44.val[0], 6uLL));
    v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 6uLL), (int16x8_t)v44.val[1], 6uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 6uLL), v40.val[0], 6uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 6uLL), v40.val[1], 6uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 6uLL), (int16x8_t)v39.val[0], 6uLL));
    vst2q_s16(result, v42);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 6uLL), (int16x8_t)v39.val[1], 6uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

int16x8_t *sub_1C9744590(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  if ((a4 & 4) != 0)
    v12 = 34;
  else
    v12 = 2;
  v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0)
    v14 = 17;
  else
    v14 = 1;
  v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97435AC(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97435AC(a1 + 8, a2, a3, v15, a5, v16, a7);
}

uint64_t sub_1C974462C(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C9743830(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C9743830(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C97446D8(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C9743AF4(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C9743AF4(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C9744784(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C9743E6C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C9743E6C(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

__int16 *sub_1C9744830(__int16 *a1, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C97443A0(a1, a2, a3, a4, a5, a6, a7);
  return sub_1C97443A0(a1 + 64, a2, a3, v12, a5, v13, a7);
}

int8x16_t *sub_1C9744884(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int v9;
  int8x16_t v10;
  int16x8_t v11;
  const float *v12;
  int16x8_t v13;
  int8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int16x8_t v22;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = a7 + 1;
  v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  v12 = a5;
  do
  {
    v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    v19 = (int8x16_t)vld1q_dup_f32(v12++);
    v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned __int128 *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

uint16x8_t *sub_1C9744944(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v11;
  uint16x8_t v12;
  int16x8_t v19;
  uint64_t v21;
  int v22;
  int16x8_t v23;
  uint16x8_t v25;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  v11 = *a6;
  _X5 = a6 + 1;
  v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v21 = 2 * a2;
  v22 = v9 + 2;
  v23.i64[0] = 0xF000F000F000F000;
  v23.i64[1] = 0xF000F000F000F000;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    result = (uint16x8_t *)((char *)result + v21);
    v12 = (uint16x8_t)v19;
    v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1C9744A30(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v23;
  uint64_t v25;
  int v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  int8x16_t v31;
  uint16x8_t v33;
  uint16x8_t v34;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DE20C((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)(a6 - 2);
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  v25 = 2 * a2;
  v26 = v13 + 2;
  v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~(_DWORD)a4), (int8x16_t)xmmword_1C9862B60));
  v28.i64[0] = 0xF000F000F000F000;
  v28.i64[1] = 0xF000F000F000F000;
  v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70);
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    v16 = (int8x16_t)v23;
    v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint64_t sub_1C9744BA8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  const float *v10;
  int16x8_t v17;
  int8x16_t v19;
  float *v20;
  uint64_t v21;
  signed int v22;
  int8x16_t v23;
  int16x8_t v24;
  const float *v25;
  int8x16_t v27;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  const float *v32;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DE284((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = *(int8x16_t *)_X5;
  v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  v20 = (float *)(a5 + 2);
  v21 = 2 * a2;
  v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1C9862B60));
  v24.i64[0] = 0xF000F000F000F000;
  v24.i64[1] = 0xF000F000F000F000;
  v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *v20 = *(float *)&v27.i32[3];
    v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1C9862B80, (int8x16_t)xmmword_1C9862B70), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    v19 = (int8x16_t)vld1q_dup_f32(v32);
    v20 = (float *)v25;
    v9 = (int8x16_t)v17;
    v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1C9744D0C(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C9744E0C(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v20;
  int v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v27;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v17 = *result;
  v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  v20 = 2 * a2;
  v21 = v9 + 2;
  v22.i64[0] = 0xF000F000F000F000;
  v22.i64[1] = 0xF000F000F000F000;
  do
  {
    v23 = (int16x8_t)v17;
    v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1C9862B00));
    --v21;
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    result = (uint16x8_t *)((char *)result + v20);
    v11 = (uint16x8_t)v23;
    v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

uint64_t sub_1C9744F1C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v24;
  int8x16_t v25;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  const float *v32;
  uint16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DE360((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v17 = *_X5;
  v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  v24 = *(int8x16_t *)result;
  v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v27 = v13 + 2;
  v28 = 2 * a2;
  v29 = (int8x16_t)vceqzq_s16(v16);
  v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xF000F000F000F000;
  v31.i64[1] = 0xF000F000F000F000;
  v32 = (const float *)a5;
  do
  {
    v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    v34 = (int16x8_t)v25;
    v35 = (int16x8_t)v24;
    _X12 = result + v28;
    v24 = *(int8x16_t *)(result + 2 * a2);
    v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    v17 = (int8x16_t)v35;
    v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint64_t sub_1C97450D4(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  const float *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v22;
  float *v23;
  uint64_t v24;
  signed int v25;
  int8x16_t v26;
  int8x16_t v27;
  int16x8_t v28;
  const float *v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int8x16_t v39;
  const float *v40;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DE3D8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int8x16_t *)_X5;
  v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  v18 = (const float *)(_X5 + 2);
  v19 = *(int8x16_t *)result;
  v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  v23 = (float *)(a5 + 2);
  v24 = 2 * a2;
  v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xF000F000F000F000;
  v28.i64[1] = 0xF000F000F000F000;
  v29 = v23;
  do
  {
    v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    v31 = (int16x8_t)v20;
    v32 = (int16x8_t)v19;
    _X11 = result + v24;
    v19 = *(int8x16_t *)(result + 2 * a2);
    v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    v35 = (int8x16_t)vld1q_dup_f32(v29++);
    v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *v23 = *(float *)&v20.i32[3];
    v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    v22 = (int8x16_t)vld1q_dup_f32(v40);
    v23 = (float *)v29;
    v12 = (int8x16_t)v32;
    v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

int16x8_t *sub_1C9745278(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  const float *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v11 = a7 + 1;
  v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  v15 = a5;
  do
  {
    v16 = *result;
    v17 = result[1];
    v19 = result[2];
    v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint16x8_t *sub_1C97453F0(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v33;
  int8x16_t v34;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v19 = *result;
  v20 = result[1];
  v21 = result[2];
  v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  v24 = v9 + 2;
  v25 = 2 * a2;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  do
  {
    v27 = (int16x8_t)v19;
    v28 = (int16x8_t)v20;
    v29 = (int16x8_t)v21;
    v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1C9862B00));
    v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    result = (uint16x8_t *)((char *)result + v25);
    v11 = (uint16x8_t)v27;
    v10 = (uint16x8_t)v28;
    v13 = (uint16x8_t)v29;
    v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

uint64_t sub_1C9745580(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  uint64_t v9;
  const float *v10;
  int8x16_t v11;
  const float *v12;
  unsigned int v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  const float *v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int8x16_t v50;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DE450((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    v12 = (const float *)&_X5[-1].i32[3];
    v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    v10 = (const float *)a5;
    v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  v14 = (int8x16_t)vdupq_n_s16(~(_DWORD)a4);
  v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862B90);
  v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1C9862BA0);
  v18 = *_X5;
  v17 = _X5[1];
  v20 = _X5[2];
  v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  v26 = *(int8x16_t *)result;
  v27 = *(int8x16_t *)(result + 16);
  v28 = result + 32;
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v32 = v13 + 2;
  v33 = 2 * a2;
  v34 = (int8x16_t)vceqzq_s16(v16);
  v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xF000F000F000F000;
  v36.i64[1] = 0xF000F000F000F000;
  v37 = (const float *)a5;
  do
  {
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v30;
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v29;
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    v17 = (int16x8_t)v27;
    v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    v26 = *(int8x16_t *)(v28 + v33 - 32);
    v27 = *(int8x16_t *)(v28 + v33 - 16);
    v29 = *(int8x16_t *)(v28 + 2 * a2);
    v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1C9862B00));
    v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint64_t sub_1C97457C8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int8x16_t v14;
  const float *v15;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v26;
  float *v27;
  const float *v28;
  uint64_t v29;
  signed int v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  const float *v34;
  int16x8_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  int8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  int8x16_t v48;
  int8x16_t v49;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DE4C8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = (int8x16_t)vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862B90);
  v12 = *(int16x8_t *)_X5;
  v11 = *((int16x8_t *)_X5 + 1);
  v13 = *((int8x16_t *)_X5 + 2);
  v14 = *((int8x16_t *)_X5 + 3);
  v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  v21 = *(int8x16_t *)result;
  v22 = *(int8x16_t *)(result + 16);
  v23 = *(int8x16_t *)(result + 32);
  v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  v27 = (float *)(a5 + 2);
  v28 = (const float *)(result + 64);
  v29 = 2 * a2;
  v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1C9862BA0));
  v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xF000F000F000F000;
  v33.i64[1] = 0xF000F000F000F000;
  v34 = v27;
  do
  {
    v35 = (int16x8_t)v24;
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    v37 = (int16x8_t)v23;
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    v11 = (int16x8_t)v22;
    v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    v41 = (int8x16_t)vld1q_dup_f32(v34++);
    v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *v27 = *(float *)&v24.i32[3];
    v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1C9862B00));
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1C9862B00));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    v28 = (const float *)((char *)v28 + v29);
    v27 = (float *)v34;
    v13 = (int8x16_t)v37;
    v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

int16x8_t *sub_1C97459F4(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int16x8_t v13;
  const float *v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;

  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  v9 = vdupq_n_s16(~(_DWORD)a4);
  v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v12 = a7 + 1;
  v13.i64[0] = 0xF000F000F000F000;
  v13.i64[1] = 0xF000F000F000F000;
  v14 = a5;
  do
  {
    v15 = *result;
    v16 = result[1];
    v17 = result[2];
    v18 = result[3];
    v19 = result[4];
    v20 = result[5];
    v22 = result[6];
    v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1C9862B00));
    v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1C9862B00));
    v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1C9862B00));
    v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1C9862B00));
    *(int8x16_t *)result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

uint64_t sub_1C9745C78(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int16x8_t *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  v11 = *_X5;
  v10 = _X5[1];
  v13 = _X5[2];
  v12 = _X5[3];
  v15 = _X5[4];
  v14 = _X5[5];
  v17 = _X5[6];
  v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v24 = *(uint16x8_t *)result;
  v25 = *(uint16x8_t *)(result + 16);
  v26 = *(uint16x8_t *)(result + 32);
  v27 = *(uint16x8_t *)(result + 48);
  v28 = *(uint16x8_t *)(result + 64);
  v29 = *(uint16x8_t *)(result + 80);
  v30 = (int16x8_t *)(result + 96);
  v31 = *(uint16x8_t *)(result + 96);
  v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v35 = v9 + 2;
  v36 = 2 * a2;
  v37.i64[0] = 0xF000F000F000F000;
  v37.i64[1] = 0xF000F000F000F000;
  do
  {
    v38 = (int16x8_t)v32;
    v39 = (int16x8_t)v31;
    v40 = (int16x8_t)v29;
    v41 = (int16x8_t)v28;
    v42 = (int16x8_t)v27;
    v43 = (int16x8_t)v26;
    v44 = (int16x8_t)v25;
    v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1C9862B00));
    v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1C9862B00));
    v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1C9862B00));
    v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1C9862B00));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    v30 = (int16x8_t *)((char *)v30 + v36);
    v11 = (uint16x8_t)v45;
    v10 = (uint16x8_t)v44;
    v13 = (uint16x8_t)v43;
    v12 = (uint16x8_t)v42;
    v15 = (uint16x8_t)v41;
    v14 = (uint16x8_t)v40;
    v17 = (uint16x8_t)v39;
    v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

uint64_t sub_1C9745F3C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  const float *v9;
  int8x16_t v10;
  const float *v11;
  unsigned int v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v41;
  int v42;
  int8x16_t v43;
  int16x8_t v44;
  const float *v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;

  if (((~(_DWORD)a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~(_DWORD)a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1C97DE540((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    v11 = (const float *)&_X5[-1].i32[3];
    v10 = (int8x16_t)vld1q_dup_f32(v11);
  }
  else
  {
    v9 = (const float *)a5;
    v10 = (int8x16_t)vld1q_dup_f32(v9++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v9;
  }
  v7.i64[1] = v8;
  v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v12 + 1)] = *(_DWORD *)(result + 2 * (int)(v12 + 1) * a2 + 124);
  v13 = vdupq_n_s16(~(_DWORD)a4);
  v15 = *_X5;
  v14 = _X5[1];
  v16 = (int16x8_t)vandq_s8((int8x16_t)v13, (int8x16_t)xmmword_1C9862B90);
  v17 = (int8x16_t)vtstq_s16(v13, (int16x8_t)xmmword_1C9862BA0);
  v19 = _X5[2];
  v18 = _X5[3];
  v21 = _X5[4];
  v20 = _X5[5];
  v23 = _X5[6];
  v22 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v30 = *(int8x16_t *)result;
  v31 = *(int8x16_t *)(result + 16);
  v32 = *(int8x16_t *)(result + 32);
  v33 = *(int8x16_t *)(result + 48);
  v34 = *(int8x16_t *)(result + 64);
  v35 = *(int8x16_t *)(result + 80);
  v36 = result + 96;
  v37 = *(int8x16_t *)(result + 96);
  v38 = *(int8x16_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  v41 = 2 * a2;
  v42 = v12 + 2;
  v43 = (int8x16_t)vceqzq_s16(v16);
  v44.i64[0] = 0xF000F000F000F000;
  v44.i64[1] = 0xF000F000F000F000;
  v45 = (const float *)a5;
  do
  {
    v46 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xCuLL);
    v22 = (int16x8_t)v38;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v23, 0xCuLL);
    v23 = (int16x8_t)v37;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v20, 0xCuLL);
    v20 = (int16x8_t)v35;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v21, 0xCuLL);
    v21 = (int16x8_t)v34;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    v18 = (int16x8_t)v33;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v19, 0xCuLL);
    v19 = (int16x8_t)v32;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 0xCuLL);
    v14 = (int16x8_t)v31;
    v53 = (uint16x8_t)vextq_s8(v10, (int8x16_t)v15, 0xCuLL);
    v15 = (int16x8_t)v30;
    _X13 = v36 + v41;
    v30 = *(int8x16_t *)(v36 + v41 - 96);
    v31 = *(int8x16_t *)(v36 + v41 - 80);
    v32 = *(int8x16_t *)(v36 + v41 - 64);
    v33 = *(int8x16_t *)(v36 + v41 - 48);
    v34 = *(int8x16_t *)(v36 + v41 - 32);
    v35 = *(int8x16_t *)(v36 + v41 - 16);
    v55 = (uint16x8_t)vextq_s8(v30, v31, 4uLL);
    v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
    v57 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v55)), (int16x8_t)vcgtq_u16(v55, (uint16x8_t)v15));
    v58 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
    v59 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v14));
    v60 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
    v61 = vqmovn_high_s16(vqmovn_s16(v57), v59);
    v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v19));
    v63 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v60));
    v37 = *(int8x16_t *)(v36 + 2 * a2);
    v38 = *(int8x16_t *)(v36 + v41 + 16);
    v64 = vaddq_s16(v63, (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v18));
    v65 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v62), v64);
    v67 = (uint16x8_t)vextq_s8(v35, v37, 4uLL);
    __asm
    {
      PRFM            #0, [X13,#0x20]
      PRFM            #0, [X13,#0x60]
    }
    v70 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v20));
    v71 = (uint16x8_t)vextq_s8(v37, v38, 4uLL);
    v72 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v21))), v70);
    v73 = (int16x8_t)vcgtq_u16((uint16x8_t)v23, v71);
    v74 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), v73);
    v73.i32[0] = *(_DWORD *)(v36 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
    v75 = (uint16x8_t)vextq_s8(v38, (int8x16_t)v73, 4uLL);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v61, (int8x16_t)xmmword_1C9862B00));
    v77 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v74, (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v75)), (int16x8_t)vcgtq_u16(v75, (uint16x8_t)v22)));
    *(int8x16_t *)(v36 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v76.i8), (int16x8_t)0), v44), (int8x16_t)v15);
    *(int16x8_t *)(v36 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v76), (int16x8_t)0), v44);
    v78 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v78), (int16x8_t)0), v44);
    v79 = vqtbl1q_s8(v7, vaddq_s8(v72, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v36 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v21, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
    *(int16x8_t *)(v36 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v79), (int16x8_t)0), v44);
    v80 = vqtbl1q_s8(v7, vaddq_s8(v77, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v36 = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v80.i8), (int16x8_t)0), v44);
    *(int8x16_t *)(v36 + 16) = vbslq_s8(v17, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v80), (int16x8_t)0), v44));
    v10 = (int8x16_t)vld1q_dup_f32(v45++);
    --v42;
    v36 += v41;
    *(_DWORD *)a5 = v22.i32[3];
    a5 = (__int16 *)v45;
  }
  while (v42 > 1);
  return result;
}

uint64_t sub_1C97462B4(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  int8x16_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  const float *v20;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v37;
  signed int v38;
  int8x16_t v40;
  float *v41;
  int8x16_t v42;
  int16x8_t v43;
  const float *v44;
  uint16x8_t v45;
  int16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint16x8_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  const float *v77;

  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1C97DE5B8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  v8 = a3[4];
  if ((a4 & 0x40) != 0)
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 124);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  v9 = vdupq_n_s16(~a4);
  v10 = (int16x8_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1C9862B90);
  v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1C9862BA0);
  v13 = *(int16x8_t *)_X5;
  v12 = *((int16x8_t *)_X5 + 1);
  v15 = *((int16x8_t *)_X5 + 2);
  v14 = *((int16x8_t *)_X5 + 3);
  v17 = *((int16x8_t *)_X5 + 4);
  v16 = *((int16x8_t *)_X5 + 5);
  v18 = *((int16x8_t *)_X5 + 6);
  v19 = *((int8x16_t *)_X5 + 7);
  v20 = (const float *)(_X5 + 8);
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  v27 = *(int8x16_t *)result;
  v28 = *(int8x16_t *)(result + 16);
  v29 = *(int8x16_t *)(result + 32);
  v30 = *(int8x16_t *)(result + 48);
  v31 = result + 96;
  v32 = *(int8x16_t *)(result + 96);
  v33 = *(int8x16_t *)(result + 64);
  v34 = *(int8x16_t *)(result + 80);
  v35 = *(int8x16_t *)(result + 112);
  __asm { PRFM            #0, [X0,#0x80] }
  v37 = 2 * a2;
  v38 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  __asm { PRFM            #0, [X0,#0xC0] }
  v40 = (int8x16_t)vld1q_dup_f32(v20);
  *(_DWORD *)a5 = v35.i32[3];
  v41 = (float *)(a5 + 2);
  v42 = (int8x16_t)vceqzq_s16(v10);
  v43.i64[0] = 0xF000F000F000F000;
  v43.i64[1] = 0xF000F000F000F000;
  v44 = v41;
  do
  {
    v45 = (uint16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    v46 = (int16x8_t)v35;
    v47 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v18, 4uLL);
    v18 = (int16x8_t)v32;
    v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 4uLL);
    v16 = (int16x8_t)v34;
    v49 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v17, 4uLL);
    v17 = (int16x8_t)v33;
    v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v14, 4uLL);
    v14 = (int16x8_t)v30;
    v51 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v15, 4uLL);
    v15 = (int16x8_t)v29;
    v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 4uLL);
    v12 = (int16x8_t)v28;
    v13 = (int16x8_t)v27;
    _X12 = v31 + v37;
    v27 = *(int8x16_t *)(v31 + v37 - 96);
    v28 = *(int8x16_t *)(v31 + v37 - 80);
    v29 = *(int8x16_t *)(v31 + v37 - 64);
    v30 = *(int8x16_t *)(v31 + v37 - 48);
    v33 = *(int8x16_t *)(v31 + v37 - 32);
    v34 = *(int8x16_t *)(v31 + v37 - 16);
    v32 = *(int8x16_t *)(v31 + 2 * a2);
    v35 = *(int8x16_t *)(v31 + v37 + 16);
    __asm
    {
      PRFM            #0, [X12,#0x20]
      PRFM            #0, [X12,#0x60]
    }
    v56 = (int8x16_t)vld1q_dup_f32(v44++);
    v57 = (uint16x8_t)vextq_s8(v19, v40, 4uLL);
    v58 = (uint16x8_t)vextq_s8(v56, v27, 0xCuLL);
    v59 = (uint16x8_t)vextq_s8(v27, v28, 0xCuLL);
    v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v13));
    v61 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
    v62 = vqmovn_high_s16(vqmovn_s16(v60), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v12)));
    v63 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
    v64 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v15));
    v65 = (uint16x8_t)vextq_s8(v30, v33, 0xCuLL);
    v66 = vqmovn_high_s16(vqmovn_s16(v64), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v63)), (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v14)));
    v67 = (uint16x8_t)vextq_s8(v33, v34, 0xCuLL);
    v68 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v67)), (int16x8_t)vcgtq_u16(v67, (uint16x8_t)v16));
    v69 = (uint16x8_t)vextq_s8(v34, v32, 0xCuLL);
    v70 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v65)), (int16x8_t)vcgtq_u16(v65, (uint16x8_t)v17))), v68);
    v71 = (uint16x8_t)vextq_s8(v32, v35, 0xCuLL);
    *v41 = *(float *)&v35.i32[3];
    v72 = vqtbl1q_s8(v7, vaddq_s8(v62, (int8x16_t)xmmword_1C9862B00));
    v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v69)), (int16x8_t)vcgtq_u16(v69, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v57, (uint16x8_t)v46), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v57)), (int16x8_t)vcgtq_u16((uint16x8_t)v46, v71)), (int16x8_t)vcgtq_u16(v71, (uint16x8_t)v46)));
    *(int8x16_t *)(v31 - 96) = vbslq_s8(v42, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v72.i8), (int16x8_t)0), v43), (int8x16_t)v13);
    *(int16x8_t *)(v31 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v72), (int16x8_t)0), v43);
    v74 = vqtbl1q_s8(v7, vaddq_s8(v66, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v74.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v14, v74), (int16x8_t)0), v43);
    v75 = vqtbl1q_s8(v7, vaddq_s8(v70, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)(v31 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v75.i8), (int16x8_t)0), v43);
    *(int16x8_t *)(v31 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v75), (int16x8_t)0), v43);
    v76 = vqtbl1q_s8(v7, vaddq_s8(v73, (int8x16_t)xmmword_1C9862B00));
    *(int16x8_t *)v31 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v43);
    *(int8x16_t *)(v31 + 16) = vbslq_s8(v11, (int8x16_t)v46, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v46, v76), (int16x8_t)0), v43));
    v77 = (const float *)(v31 + 32);
    --v38;
    v31 += v37;
    v41 = (float *)v44;
    v19 = (int8x16_t)v46;
    v40 = (int8x16_t)vld1q_dup_f32(v77);
  }
  while (v38 > 1);
  return result;
}

__int16 *sub_1C974661C(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v16;
  uint64_t v24;
  int16x8x2_t v25;
  int8x16x2_t v26;
  int16x8x2_t v27;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v13 = a7 + 2;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  do
  {
    v15 = result;
    v25 = vld2q_s16(v15);
    v11 = a2;
    v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 7uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 7uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 7uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 7uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    v12 = 4 * a2;
    result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

__int16 *sub_1C97466D8(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v23;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int8x16x2_t v30;
  int16x8x2_t v31;
  int16x8x2_t v32;
  int8x16x2_t v33;
  int16x8x2_t v34;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  do
  {
    v15 = result;
    v32 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    v23 = _X11;
    v31 = vld2q_s16(v23);
    v23 += 16;
    v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1C9862BB0).i32[1];
    *a5++ = v25;
    v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 7uLL), (int16x8_t)v33.val[0], 7uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 7uLL), (int16x8_t)v33.val[1], 7uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 7uLL), (int16x8_t)v30.val[0], 7uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 7uLL), (int16x8_t)v30.val[1], 7uLL));
    v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1C97467E8(__int16 *result, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int16x8_t v14;
  const __int16 *v15;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v26;
  __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v34;
  int8x16_t v35;
  int16x8x2_t v36;
  int16x8x2_t v37;
  int16x8x2_t v38;
  int8x16x2_t v39;
  int16x8x2_t v40;
  int16x8x2_t v41;
  int16x8x2_t v42;
  int16x8x2_t v43;
  int8x16x2_t v44;
  int16x8x2_t v45;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a7 + 2;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  do
  {
    v15 = result;
    v42 = vld2q_s16(v15);
    v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    v17 = result + 16;
    v36 = vld2q_s16(v17);
    v18 = result + 32;
    v45 = vld2q_s16(v18);
    v19 = result + 48;
    v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    v26 = _X11;
    v41 = vld2q_s16(v26);
    v26 += 16;
    v40 = vld2q_s16(v26);
    v27 = _X11 + 32;
    v38 = vld2q_s16(v27);
    v28 = _X11 + 48;
    v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1C9862BC0).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1C9862BB0).i32[1];
    v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 7uLL), v36.val[0], 7uLL));
    v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 7uLL), v36.val[1], 7uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 7uLL), (int16x8_t)v44.val[0], 7uLL));
    v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 7uLL), (int16x8_t)v44.val[1], 7uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 7uLL), v40.val[0], 7uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 7uLL), v40.val[1], 7uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 7uLL), (int16x8_t)v39.val[0], 7uLL));
    vst2q_s16(result, v42);
    v13 = 4 * a2;
    result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 7uLL), (int16x8_t)v39.val[1], 7uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

int16x8_t *sub_1C97469D8(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  if ((a4 & 4) != 0)
    v12 = 34;
  else
    v12 = 2;
  v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0)
    v14 = 17;
  else
    v14 = 1;
  v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97459F4(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97459F4(a1 + 8, a2, a3, v15, a5, v16, a7);
}

uint64_t sub_1C9746A74(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C9745C78(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C9745C78(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C9746B20(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C9745F3C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C9745F3C(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1C9746BCC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  if ((a4 & 4) != 0)
    v13 = 34;
  else
    v13 = 2;
  v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0)
    v15 = 17;
  else
    v15 = 1;
  v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1C97462B4(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1C97462B4(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

__int16 *sub_1C9746C78(__int16 *a1, uint64_t a2, __int128 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C97467E8(a1, a2, a3, a4, a5, a6, a7);
  return sub_1C97467E8(a1 + 64, a2, a3, v12, a5, v13, a7);
}

char *sub_1C9746CCC(_QWORD *a1)
{
  char *v2;
  _QWORD *v3;
  char *v4;
  char *result;

  v2 = (char *)operator new(0x1D0uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E8291AD8;
  *(_QWORD *)(v2 + 31) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_WORD *)v2 + 44) = 0;
  *(_OWORD *)(v2 + 92) = 0u;
  *(_OWORD *)(v2 + 108) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_OWORD *)(v2 + 140) = 0u;
  *(_OWORD *)(v2 + 156) = 0u;
  *(_OWORD *)(v2 + 172) = 0u;
  *((_WORD *)v2 + 94) = 0;
  *((_QWORD *)v2 + 24) = 0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_QWORD *)(v2 + 213) = 0;
  *(_WORD *)(v2 + 221) = 257;
  *((_WORD *)v2 + 137) = 0;
  v3 = v2 + 308;
  *((_DWORD *)v2 + 80) = 0;
  *((_WORD *)v2 + 162) = 0;
  v2[326] = 0;
  v2[328] = 0;
  v4 = v2 + 330;
  *(_OWORD *)(v2 + 223) = 0u;
  *(_WORD *)(v2 + 239) = 0;
  *(_OWORD *)(v2 + 244) = 0u;
  *((_QWORD *)v2 + 37) = 0;
  v2[304] = 0;
  v2[316] = 0;
  v2[456] = 0;
  *((_QWORD *)v2 + 56) = 0;
  *((_OWORD *)v2 + 27) = 0u;
  a1[1] = v2;
  *((_QWORD *)v2 + 3) = 0;
  result = v2 + 24;
  *(_QWORD *)(result + 236) = 0;
  *(_QWORD *)(result + 241) = 0;
  *((_OWORD *)result + 16) = 0u;
  *v3 = 0;
  *(_DWORD *)(v4 + 95) = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *a1 = result;
  return result;
}

_QWORD *sub_1C9746DB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_1C9746E28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9746E38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C9746E68(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t result;

  v2 = (void *)a1[218];
  if (v2)
  {
    a1[219] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[215];
  if (v3)
  {
    a1[216] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[212];
  if (v4)
  {
    a1[213] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[209];
  if (v5)
  {
    a1[210] = v5;
    operator delete(v5);
  }
  result = a1[203];
  a1[203] = 0;
  if (result)
    JUMPOUT(0x1CAA43B6CLL);
  return result;
}

_QWORD *sub_1C9746EF0(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 < 0)
      sub_1C9747024();
    result = sub_1C974707C(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 2 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C9746F64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1C9746F80(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x1555555555555556)
      sub_1C9747024();
    result = sub_1C9747038(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C9747008(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C9747024()
{
  sub_1C972D5CC("vector");
}

void *sub_1C9747038(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    sub_1C9724B4C();
  return operator new(12 * a1);
}

void *sub_1C974707C(uint64_t a1)
{
  if (a1 < 0)
    sub_1C9724B4C();
  return operator new(2 * a1);
}

void sub_1C97470AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C97470BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C97470EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 2072);
  sub_1C9747160(&v4);
  v2 = *(_QWORD *)(a1 + 2000);
  *(_QWORD *)(a1 + 2000) = 0;
  if (v2)
    MEMORY[0x1CAA43B6C](v2, 0x1000C8052888210);
  v3 = *(void **)(a1 + 320);
  if (v3)
  {
    *(_QWORD *)(a1 + 328) = v3;
    operator delete(v3);
  }
}

void sub_1C9747160(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        sub_1C97471D0(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C97471D0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_1C9747214(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C9747224(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

void sub_1C9747254(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void **v7;

  v2 = a1[54];
  if (v2)
  {
    v3 = a1[55];
    v4 = (void *)a1[54];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        v7 = (void **)(v3 - 24);
        sub_1C9747160(&v7);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[54];
    }
    a1[55] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[35];
  if (v6)
  {
    a1[36] = v6;
    operator delete(v6);
  }
}

void sub_1C97472EC()
{
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C9747300(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 16) < 0x16uLL) & (0x3F03FFu >> *(_BYTE *)(a1 + 16));
}

uint64_t sub_1C9747320(char *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  char *v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;

  if (a5)
  {
    v9 = &a1[a5];
  }
  else
  {
    v10 = (a2 + 2);
    bzero(a1, v10);
    a1[v10] = 1;
    v9 = &a1[v10 + 1];
  }
  *v9 = *a3;
  v11 = v9 + 2;
  v9[1] = a3[1];
  v12 = a4 - 2;
  if (a4 != 2)
  {
    v13 = 0;
    v14 = a3 + 2;
    do
    {
      v15 = *v14;
      if (v13 == 2)
      {
        if (v15 > 3)
        {
          v13 = 2;
        }
        else
        {
          v13 = 0;
          *v11++ = 3;
          v15 = *v14;
        }
      }
      if (v15)
        v13 = 0;
      else
        ++v13;
      ++v14;
      *v11++ = v15;
      --v12;
    }
    while (v12);
  }
  if (a5)
  {
    v16 = (_DWORD)v11 - (_DWORD)a1 - a5;
    switch(a5)
    {
      case 4:
        *(_DWORD *)a1 = bswap32(v16);
        break;
      case 2:
        *(_WORD *)a1 = bswap32(v16) >> 16;
        break;
      case 1:
        *a1 = v16;
        break;
    }
  }
  return v11 - a1;
}

void sub_1C9747430()
{
  off_1ED1ACCE8 = sub_1C971BB68;
  off_1ED1ACCC8 = (uint64_t (*)(void *))sub_1C972F444;
}

void sub_1C9747458(uint64_t a1)
{
  sub_1C9747750(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

void *sub_1C974747C(void *result, int a2, int a3, int a4)
{
  int v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 *v13;
  __int16 *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;

  v5 = *((int *)result + 130) >> a4;
  v6 = *((int *)result + 131) >> a4;
  v7 = *((int *)result + 186) >> a4;
  v8 = (char *)result + 8 * a4;
  v9 = *((_QWORD *)v8 + 50);
  v10 = *((_QWORD *)v8 + 52);
  v11 = a2 & ~(a2 >> 31);
  if (a3 >= v6)
    v12 = *((int *)result + 131) >> a4;
  else
    v12 = a3;
  if (*((_BYTE *)result + 531))
  {
    if (v12 > (int)v11)
    {
      v13 = (__int16 *)(v9 + 2 * v10 * v11);
      v14 = &v13[v5 - 1];
      do
      {
        if (v7)
        {
          v15 = *v13;
          v16 = -(uint64_t)v7;
          do
            v13[v16] = v15;
          while (!__CFADD__(v16++, 1));
          v18 = *v14;
          v19 = v5;
          result = (void *)v7;
          do
          {
            v13[v19++] = v18;
            result = (char *)result - 1;
          }
          while (result);
        }
        LODWORD(v11) = v11 + 1;
        v13 += v10;
        v14 += v10;
      }
      while ((_DWORD)v11 != v12);
    }
    if (a2 < 1 && v7 >= 1)
    {
      v20 = (v7 + 1) - 1;
      v21 = (char *)(v9 + -2 * v10 - 2 * v7);
      do
      {
        result = memcpy(v21, (const void *)(v9 - 2 * v7), 2 * (v5 + 2 * v7));
        v21 -= 2 * v10;
        --v20;
      }
      while (v20);
    }
    if (v6 <= a3 && v7 >= 1)
    {
      v22 = v6 - 1;
      v23 = (const void *)(v9 - 2 * v7 + 2 * v10 * v22);
      v24 = (v7 + 1) - 1;
      v25 = (char *)(v9 + v10 * (2 * v22 + 2) - 2 * v7);
      v26 = 2 * v10;
      do
      {
        result = memcpy(v25, v23, 2 * (v5 + 2 * v7));
        v25 += v26;
        --v24;
      }
      while (v24);
    }
  }
  else
  {
    v35 = *((int *)result + 130) >> a4;
    v36 = v9;
    v27 = v12 - v11;
    if (v12 > (int)v11)
    {
      v28 = (unsigned __int8 *)(v9 + v10 * v11);
      do
      {
        memset(&v28[-v7], *v28, v7);
        result = memset(&v28[v35], v28[v35 - 1], v7);
        v28 += v10;
        --v27;
      }
      while (v27);
    }
    if (a2 < 1 && v7 >= 1)
    {
      v29 = (v7 + 1) - 1;
      v30 = (char *)(v36 + -v10 - v7);
      do
      {
        result = memcpy(v30, (const void *)(v36 - v7), v35 + 2 * v7);
        v30 -= v10;
        --v29;
      }
      while (v29);
    }
    if (v6 <= a3 && v7 >= 1)
    {
      v31 = v6 - 1;
      v32 = (const void *)(v36 - v7 + v10 * v31);
      v33 = (v7 + 1) - 1;
      v34 = (char *)(v36 + v10 + v10 * v31 - v7);
      do
      {
        result = memcpy(v34, v32, v35 + 2 * v7);
        v34 += v10;
        --v33;
      }
      while (v33);
    }
  }
  return result;
}

uint64_t sub_1C9747740()
{
  return 0;
}

uint64_t sub_1C9747748()
{
  return 0;
}

uint64_t sub_1C9747750(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  *(_QWORD *)a1 = &off_1E8291810;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1104));
  std::mutex::~mutex((std::mutex *)(a1 + 1040));
  v2 = *(void **)(a1 + 1000);
  if (v2)
  {
    *(_QWORD *)(a1 + 1008) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 968);
  if (v3)
  {
    *(_QWORD *)(a1 + 976) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 944);
  if (v4)
  {
    *(_QWORD *)(a1 + 952) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 904);
  if (v5)
  {
    *(_QWORD *)(a1 + 912) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 880);
  if (v6)
  {
    *(_QWORD *)(a1 + 888) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 856);
  if (v7)
  {
    *(_QWORD *)(a1 + 864) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 808);
  if (v8)
  {
    *(_QWORD *)(a1 + 816) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 776);
  if (v9)
  {
    *(_QWORD *)(a1 + 784) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 720);
  if (v10)
  {
    *(_QWORD *)(a1 + 728) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 688);
  if (v11)
  {
    *(_QWORD *)(a1 + 696) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 376);
  if (v12)
  {
    *(_QWORD *)(a1 + 384) = v12;
    operator delete(v12);
  }
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v13 = *(void **)(a1 + 64);
  if (v13)
  {
    *(_QWORD *)(a1 + 72) = v13;
    operator delete(v13);
  }
  return a1;
}

unsigned int *sub_1C9747864(unsigned int *result)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((unsigned __int8 *)result + 530) >= 2u)
  {
    if (*((_BYTE *)result + 531))
    {
      v1 = 1 << (*((_BYTE *)result + 529) - 1);
      if (*((_BYTE *)result + 534))
        LOWORD(v1) = 0x8000;
      v2 = result[131];
      if (v2 >= 1)
      {
        v3 = 0;
        v4 = *((_QWORD *)result + 51);
        v5 = result[130];
        v6 = 2 * *((_QWORD *)result + 53);
        do
        {
          if ((int)v5 >= 1)
          {
            v7 = 0;
            do
            {
              *(_WORD *)(v4 + v7) = v1;
              v7 += 2;
            }
            while (2 * v5 != v7);
          }
          v3 += 2;
          v4 += v6;
        }
        while (v3 < v2);
      }
    }
    else
    {
      return (unsigned int *)memset(*((void **)result + 51), 128, *((_QWORD *)result + 53) * (int)result[131] / 2);
    }
  }
  return result;
}

uint64_t sub_1C9747914(uint64_t result)
{
  int v1;
  _QWORD *v2;
  char v3;
  char v4;

  v1 = *(_DWORD *)(result + 8);
  v2 = *(_QWORD **)result;
  v3 = 16;
  if (!v1
    || ((64 - v1) >= 0x10uLL ? (v4 = 16) : (v4 = 64 - v1),
        *v2 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1)),
        ++v2,
        *(_QWORD *)result = v2,
        (v3 = (16 - v4) & 0x3F) != 0))
  {
    *(_QWORD *)result = v2;
    *v2 &= ~(0xFFFFFFFFFFFFFFFFLL >> -v3);
  }
  return result;
}

uint64_t sub_1C9747984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(unsigned int *)(a1 + 504);
  v5 = *(unsigned int *)(a1 + 508);
  v6 = *(unsigned int *)(a1 + 520);
  v7 = *(unsigned int *)(a1 + 524);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v4, v5, v6, v7, v8, v9);
  if ((_DWORD)result)
  {
    v11 = 0;
    *(_DWORD *)(a1 + 512) = 0;
  }
  else
  {
    v12 = *(unsigned __int8 *)(a1 + 530);
    if (*(_BYTE *)(a1 + 530))
    {
      v13 = (_QWORD *)(a1 + 488);
      do
      {
        *(v13 - 11) = *(v13 - 2);
        *(v13 - 9) = *v13;
        ++v13;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 520);
    v11 = *(_DWORD *)(a1 + 524);
  }
  *(_DWORD *)(a1 + 516) = v11;
  return result;
}

uint64_t sub_1C9747A5C(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  BOOL v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  char v27;
  _WORD *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _WORD *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _WORD *v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  __int16 v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char v74;
  char v75;
  int v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unsigned __int16 *v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  __int128 v91;
  int v92;
  char v93;
  int v94;
  int v95;
  int v96;
  void *__ptr;
  uint64_t v98;
  uint64_t v99;

  v7 = 0;
  if (a3 && *(_BYTE *)(a1 + 432))
  {
    if (*(_DWORD *)(a1 + 504) == *(_DWORD *)(a1 + 520) && *(_DWORD *)(a1 + 508) == *(_DWORD *)(a1 + 524))
    {
      v7 = 0;
    }
    else
    {
      result = sub_1C9747984(a1, a3);
      if ((_DWORD)result)
        return result;
      v7 = 1;
    }
  }
  v9 = *(_DWORD *)(a1 + 648);
  v10 = (*(_DWORD *)(a1 + 520) - (v9 + *(_DWORD *)(a1 + 656)));
  v11 = *(_DWORD *)(a1 + 524);
  v12 = *(_DWORD *)(a1 + 652);
  v13 = *(_DWORD *)(a1 + 660);
  v14 = v11 - (v12 + v13);
  v15 = v11 - v13;
  if (*(_BYTE *)(a1 + 531) != 1)
  {
    if (a4)
    {
      v96 = v7;
      v18 = *(unsigned __int8 *)(a1 + 532);
      v19 = v18 < 3;
      v20 = v18 < 2;
      if (v18 >= 2)
        v21 = v18 < 3;
      else
        v21 = v19 + 1;
      v22 = (2 * (int)v10 * v14) >> v21;
      v93 = v20;
      if (v22)
      {
        v23 = v22;
        if (v22 < 0)
          sub_1C9747024();
        v24 = v14;
        v25 = (char *)sub_1C974707C(v22);
        bzero(v25, 2 * v23);
        v9 = *(_DWORD *)(a1 + 648);
        v12 = *(_DWORD *)(a1 + 652);
      }
      else
      {
        v24 = v14;
        v25 = 0;
      }
      if (v12 < v15)
      {
        v53 = v12;
        v54 = v15;
        v55 = *(_QWORD *)(a1 + 400) + v9;
        do
        {
          if ((int)v10 >= 1)
          {
            v56 = (unsigned __int8 *)(v55 + *(_QWORD *)(a1 + 416) * v53);
            v57 = v25;
            v58 = v10;
            do
            {
              v59 = *v56++;
              *v57++ = v59;
              --v58;
            }
            while (v58);
          }
          fwrite(v25, 2uLL, (int)v10, __stream);
          ++v53;
        }
        while (v53 < v54);
      }
      if (*(unsigned __int8 *)(a1 + 530) > 1u)
      {
        v60 = (int)v10 >> v19;
        v61 = (v24 >> v93);
        v62 = ((int)v10 >> v19) * v61;
        if ((int)v61 >= 1)
        {
          v63 = *(_QWORD *)(a1 + 424);
          v64 = &v25[2 * v62];
          v65 = 2 * v60;
          v66 = v63 * (*(int *)(a1 + 652) >> v93) + v65 + 2 * (*(int *)(a1 + 648) >> v19) + *(_QWORD *)(a1 + 408) - 1;
          v67 = v25;
          do
          {
            if (v60 >= 1)
            {
              v68 = (unsigned __int8 *)v66;
              v69 = v60 - 1;
              do
              {
                *(_WORD *)&v67[2 * v69] = *(v68 - 1);
                v70 = *v68;
                v68 -= 2;
                *(_WORD *)&v64[2 * v69] = v70;
                v71 = v69-- + 1;
              }
              while (v71 > 1);
            }
            v64 += v65;
            v67 += v65;
            v66 += v63;
            v52 = v61-- <= 1;
          }
          while (!v52);
        }
        fwrite(v25, 2uLL, 2 * v62, __stream);
      }
      v7 = v96;
    }
    else
    {
      __ptr = 0;
      v98 = 0;
      v99 = 0;
      if (*(unsigned __int8 *)(a1 + 530) >= 2u)
      {
        v34 = 2 * v10 * v14;
        if (v34)
        {
          sub_1C971BA44((unint64_t *)&__ptr, v34);
          v9 = *(_DWORD *)(a1 + 648);
          v12 = *(_DWORD *)(a1 + 652);
        }
      }
      v35 = v14;
      if (v12 < v15)
      {
        v36 = *(_QWORD *)(a1 + 400) + v9;
        v37 = v12;
        do
          fwrite((const void *)(v36 + *(_QWORD *)(a1 + 416) * v37++), 1uLL, (int)v10, __stream);
        while (v37 < v15);
      }
      v25 = (char *)__ptr;
      if (*(unsigned __int8 *)(a1 + 530) >= 2u)
      {
        v38 = *(unsigned __int8 *)(a1 + 532);
        v39 = v38 < 2;
        v40 = (v35 >> (v38 < 2));
        v41 = v38 < 3;
        v42 = (int)v10 >> (v38 < 3);
        v43 = v42 * (uint64_t)(int)v40;
        if ((int)v40 >= 1)
        {
          v44 = *(_QWORD *)(a1 + 424);
          v45 = (char *)__ptr + v43;
          v46 = v44 * (*(int *)(a1 + 652) >> v39)
              + 2 * v42
              + 2 * (*(int *)(a1 + 648) >> v41)
              + *(_QWORD *)(a1 + 408)
              - 1;
          v47 = __ptr;
          do
          {
            if (v42 >= 1)
            {
              v48 = (char *)v46;
              v49 = v42 - 1;
              do
              {
                v47[v49] = *(v48 - 1);
                v50 = *v48;
                v48 -= 2;
                v45[v49] = v50;
                v51 = v49-- + 1;
              }
              while (v51 > 1);
            }
            v47 += v42;
            v45 += v42;
            v46 += v44;
            v52 = v40-- <= 1;
          }
          while (!v52);
        }
        fwrite(v25, 1uLL, 2 * v43, __stream);
      }
    }
    goto LABEL_75;
  }
  __ptr = 0;
  v98 = 0;
  v99 = 0;
  v16 = *(unsigned __int8 *)(a1 + 534);
  v94 = v11 - (v12 + v13);
  v95 = v7;
  v92 = v16;
  if (*(unsigned __int8 *)(a1 + 530) >= 2u)
  {
    sub_1C97480EC((char **)&__ptr, 2 * (int)v10 * v14);
    v17 = *(_QWORD *)(a1 + 400) + 2 * *(int *)(a1 + 648);
    if (!v16)
    {
      v12 = *(_DWORD *)(a1 + 652);
      goto LABEL_61;
    }
LABEL_21:
    v26 = *(int *)(a1 + 652);
    if ((int)v26 < v15)
    {
      v27 = 16 - *(_BYTE *)(a1 + 528);
      v28 = __ptr;
      v29 = 2 * v26;
      do
      {
        if ((int)v10 >= 1)
        {
          v30 = (unsigned __int16 *)(v17 + *(_QWORD *)(a1 + 416) * v29);
          v31 = v28;
          v32 = v10;
          do
          {
            v33 = *v30++;
            *v31++ = v33 >> v27;
            --v32;
          }
          while (v32);
        }
        fwrite(v28, 1uLL, 2 * (int)v10, __stream);
        ++v26;
        v29 += 2;
      }
      while (v26 < v15);
    }
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 534))
  {
    sub_1C97480EC((char **)&__ptr, (int)v10);
    v17 = *(_QWORD *)(a1 + 400) + 2 * *(int *)(a1 + 648);
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(a1 + 400) + 2 * v9;
LABEL_61:
  if (v12 < v15)
  {
    v72 = v12;
    do
      fwrite((const void *)(v17 + 2 * *(_QWORD *)(a1 + 416) * v72++), 1uLL, 2 * (int)v10, __stream);
    while (v72 < v15);
  }
LABEL_64:
  v25 = (char *)__ptr;
  v7 = v95;
  if (*(unsigned __int8 *)(a1 + 530) >= 2u)
  {
    v73 = *(unsigned __int8 *)(a1 + 532);
    v74 = v73 < 3;
    v75 = v73 < 2;
    v76 = (int)v10 >> (v73 < 3);
    v77 = (v94 >> (v73 < 2));
    v78 = 16 - *(_BYTE *)(a1 + 529);
    if (!v92)
      v78 = 0;
    v79 = v76 * (int)v77;
    if ((int)v77 >= 1)
    {
      v80 = *(_QWORD *)(a1 + 424);
      v81 = (char *)__ptr + 2 * v79;
      v82 = 2 * (*(int *)(a1 + 648) >> v74);
      v83 = 2 * v76;
      v84 = 2 * v80 * (*(int *)(a1 + 652) >> v75) + 4 * v76 + 2 * v82 + *(_QWORD *)(a1 + 408) - 2;
      v85 = 2 * v80;
      v86 = (char *)__ptr;
      do
      {
        if (v76 >= 1)
        {
          v87 = (unsigned __int16 *)v84;
          v88 = v76 - 1;
          do
          {
            *(_WORD *)&v86[2 * v88] = *(v87 - 1) >> v78;
            v89 = *v87;
            v87 -= 2;
            *(_WORD *)&v81[2 * v88] = v89 >> v78;
            v90 = v88-- + 1;
          }
          while (v90 > 1);
        }
        v81 += v83;
        v86 += v83;
        v84 += v85;
        v52 = v77-- <= 1;
      }
      while (!v52);
    }
    fwrite(v25, 1uLL, 4 * v79, __stream);
  }
LABEL_75:
  if (v25)
    operator delete(v25);
  if (!v7 || !*(_BYTE *)(a1 + 432))
    return 0;
  result = 0;
  v91 = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 416) = v91;
  *(_QWORD *)(a1 + 512) = 0;
  return result;
}

void sub_1C97480A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C97480EC(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    sub_1C9747024();
  v8 = v7 - v3;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_1C974707C(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[2 * v5];
  v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

uint64_t sub_1C97481E4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  int v5;
  char v6;
  uint64_t j;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  void **v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned __int16 *v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int v26;
  CC_LONG v27;
  uint64_t v28;
  _WORD *v29;
  unsigned __int16 *v30;
  _WORD *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  BOOL v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void **v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned __int8 *v64;
  _BYTE *v65;
  uint64_t v66;
  unsigned int v67;
  char v68;
  unint64_t v69;
  char v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  CC_LONG v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unint64_t v85;
  CC_MD5_CTX *v86;
  char v87;
  BOOL v88;
  uint64_t result;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  CC_LONG v99;
  char v100;
  unint64_t v101;
  CC_MD5_CTX *p_c;
  char v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  char *v110;
  char *data;
  int dataa;
  CC_MD5_CTX c;
  char v114;
  CC_MD5_CTX v115;
  char v116;
  CC_MD5_CTX v117;
  char v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 531) == 1)
  {
    for (i = 0; i != 288; i += 96)
    {
      *((_BYTE *)&c + i + 92) = 1;
      *((_BYTE *)&c + i + 92) = CC_MD5_Init((CC_MD5_CTX *)((char *)&c + i)) != 0;
    }
    if (*(_BYTE *)(a1 + 534))
    {
      v5 = 16 - *(unsigned __int8 *)(a1 + 528);
      v6 = 16 - *(_BYTE *)(a1 + 529);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v10 = *(unsigned __int8 *)(a1 + 530);
    v11 = *(int *)(a1 + 520);
    v12 = *(unsigned int *)(a1 + 520);
    v13 = *(unsigned int *)(a1 + 524);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    v14 = (const void **)(a1 + 400);
    v15 = (void **)(a1 + 408);
    if (*(_BYTE *)(a1 + 432))
      v16 = (uint64_t *)(a1 + 456);
    else
      v16 = (uint64_t *)(a1 + 416);
    if (*(_BYTE *)(a1 + 432))
      v17 = (uint64_t *)(a1 + 464);
    else
      v17 = (uint64_t *)(a1 + 424);
    if (*(_BYTE *)(a1 + 432))
    {
      v15 = (void **)(a1 + 448);
      v14 = (const void **)(a1 + 440);
    }
    v18 = (unsigned __int16 *)*v14;
    v109 = *v15;
    v107 = *v16;
    v106 = *v17;
    v19 = 4 * (int)v13 * (int)v12;
    data = *(char **)(a1 + 376);
    v20 = *(_QWORD *)(a1 + 384) - (_QWORD)data;
    if (v19 <= v20)
    {
      if (v19 < v20)
        *(_QWORD *)(a1 + 384) = &data[v19];
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 376), v19 - v20);
      data = *(char **)(a1 + 376);
    }
    if (*(_BYTE *)(a1 + 528) == 8)
    {
      if ((int)v13 >= 1)
      {
        v21 = 0;
        v22 = data;
        do
        {
          v23 = v18;
          v24 = v22;
          v25 = v12;
          if ((int)v11 >= 1)
          {
            do
            {
              v26 = *v23++;
              *v24++ = v26 >> v5;
              --v25;
            }
            while (v25);
          }
          ++v21;
          v22 += v11;
          v18 += v107;
        }
        while (v21 != v13);
      }
      v27 = v13 * v12;
    }
    else
    {
      if (!v5)
      {
        if (*(_DWORD *)(a1 + 524))
        {
          v104 = 0;
          do
          {
            v105 = CC_MD5_Update(&c, v18, 2 * v12);
            v114 &= v105;
            ++v104;
            v18 += v107;
          }
          while (v104 < *(int *)(a1 + 524));
        }
LABEL_38:
        if (v109)
        {
          v35 = *(unsigned __int8 *)(a1 + 532);
          v36 = ((int)v13 >> (v35 < 2));
          v37 = *(unsigned __int8 *)(a1 + 529);
          v38 = (int)v12 >> (v35 < 3);
          v39 = v38 * (int)v36;
          if (v37 == 8)
          {
            if ((int)v36 >= 1)
            {
              v40 = data;
              v41 = (uint64_t)v109 + 4 * v38 - 2;
              v42 = &data[v39];
              do
              {
                if ((int)v38 >= 1)
                {
                  v43 = (unsigned __int16 *)v41;
                  v44 = v38 - 1;
                  do
                  {
                    v40[v44] = *(v43 - 1) >> v6;
                    v45 = *v43;
                    v43 -= 2;
                    v42[v44] = v45 >> v6;
                    v46 = v44-- + 1;
                  }
                  while (v46 > 1);
                }
                v40 += v38;
                v42 += v38;
                v41 += 2 * v106;
                v47 = v36-- <= 1;
              }
              while (!v47);
            }
            v48 = CC_MD5_Update(&v115, data, v39);
            v116 &= v48;
            v49 = CC_MD5_Update(&v117, &data[v39], v39);
          }
          else
          {
            v90 = &data[2 * v39];
            if ((int)v36 >= 1)
            {
              v91 = data;
              v92 = 2 * v38;
              v93 = (uint64_t)v109 + 4 * v38 - 2;
              v94 = &data[2 * v39];
              do
              {
                if ((int)v38 >= 1)
                {
                  v95 = (unsigned __int16 *)v93;
                  v96 = v38 - 1;
                  do
                  {
                    *(_WORD *)&v91[2 * v96] = *(v95 - 1) >> v6;
                    v97 = *v95;
                    v95 -= 2;
                    *(_WORD *)&v94[2 * v96] = v97 >> v6;
                    v98 = v96-- + 1;
                  }
                  while (v98 > 1);
                }
                v94 += v92;
                v91 += v92;
                v93 += 2 * v106;
                v47 = v36-- <= 1;
              }
              while (!v47);
            }
            v99 = 2 * v39;
            v100 = CC_MD5_Update(&v115, data, v99);
            v116 &= v100;
            v49 = CC_MD5_Update(&v117, v90, v99);
          }
          v118 &= v49;
        }
        v101 = 0;
        p_c = &c;
        while (1)
        {
          v103 = CC_MD5_Final((unsigned __int8 *)a2, p_c);
          v88 = (v103 & p_c[1].A) == 0;
          LOBYTE(p_c[1].A) &= v103;
          if (v88)
            break;
          result = 0;
          if (v10 != 1)
          {
            p_c = (CC_MD5_CTX *)((char *)p_c + 96);
            a2 += 16;
            v47 = v101++ > 1;
            if (!v47)
              continue;
          }
          return result;
        }
        return 4294954385;
      }
      if ((int)v13 >= 1)
      {
        v28 = 0;
        v29 = data;
        do
        {
          v30 = v18;
          v31 = v29;
          v32 = v12;
          if ((int)v11 >= 1)
          {
            do
            {
              v33 = *v30++;
              *v31++ = v33 >> v5;
              --v32;
            }
            while (v32);
          }
          ++v28;
          v29 += v11;
          v18 += v107;
        }
        while (v28 != v13);
      }
      v27 = 2 * v13 * v12;
    }
    v34 = CC_MD5_Update(&c, data, v27);
    v114 &= v34;
    goto LABEL_38;
  }
  for (j = 0; j != 288; j += 96)
  {
    *((_BYTE *)&c + j + 92) = 1;
    *((_BYTE *)&c + j + 92) = CC_MD5_Init((CC_MD5_CTX *)((char *)&c + j)) != 0;
  }
  if (*(_BYTE *)(a1 + 534))
  {
    v8 = 16 - *(unsigned __int8 *)(a1 + 528);
    v9 = 16 - *(_BYTE *)(a1 + 529);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  dataa = *(unsigned __int8 *)(a1 + 530);
  v50 = *(int *)(a1 + 520);
  v51 = *(unsigned int *)(a1 + 520);
  v52 = *(unsigned int *)(a1 + 524);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (*(_BYTE *)(a1 + 432))
    v53 = (const void **)(a1 + 440);
  else
    v53 = (const void **)(a1 + 400);
  if (*(_BYTE *)(a1 + 432))
    v54 = (uint64_t *)(a1 + 448);
  else
    v54 = (uint64_t *)(a1 + 408);
  if (*(_BYTE *)(a1 + 432))
    v55 = (uint64_t *)(a1 + 456);
  else
    v55 = (uint64_t *)(a1 + 416);
  if (*(_BYTE *)(a1 + 432))
    v56 = (uint64_t *)(a1 + 464);
  else
    v56 = (uint64_t *)(a1 + 424);
  v57 = *v56;
  v58 = *v55;
  v59 = (unsigned __int8 *)*v53;
  v60 = 2 * (int)v52 * (int)v51;
  v108 = *v54;
  v110 = *(char **)(a1 + 376);
  v61 = *(_QWORD *)(a1 + 384) - (_QWORD)v110;
  if (v60 <= v61)
  {
    if (v60 < v61)
      *(_QWORD *)(a1 + 384) = &v110[v60];
  }
  else
  {
    sub_1C971BA44((unint64_t *)(a1 + 376), v60 - v61);
    v110 = *(char **)(a1 + 376);
  }
  if (v8)
  {
    if ((int)v52 >= 1)
    {
      v62 = 0;
      v63 = v110;
      do
      {
        v64 = v59;
        v65 = v63;
        v66 = v51;
        if ((int)v50 >= 1)
        {
          do
          {
            v67 = *v64++;
            *v65++ = v67 >> v8;
            --v66;
          }
          while (v66);
        }
        ++v62;
        v63 += v50;
        v59 += v58;
      }
      while (v62 != v52);
    }
    v68 = CC_MD5_Update(&c, v110, v52 * v51);
    v114 &= v68;
  }
  else if (*(_DWORD *)(a1 + 524))
  {
    v69 = 0;
    do
    {
      v70 = CC_MD5_Update(&c, v59, v51);
      v114 &= v70;
      ++v69;
      v59 += v58;
    }
    while (v69 < *(int *)(a1 + 524));
  }
  if (v108)
  {
    v71 = *(unsigned __int8 *)(a1 + 532);
    v72 = (int)v50 >> (v71 < 3);
    v73 = ((int)v52 >> (v71 < 2));
    v74 = v72 * v73;
    v75 = &v110[v72 * (uint64_t)(int)v73];
    if ((int)v73 >= 1)
    {
      v76 = v110;
      v77 = v108 + 2 * v72 - 1;
      v78 = &v110[v72 * (uint64_t)(int)v73];
      do
      {
        if (v72 >= 1)
        {
          v79 = (unsigned __int8 *)v77;
          v80 = v72 - 1;
          do
          {
            v76[v80] = *(v79 - 1) >> v9;
            v81 = *v79;
            v79 -= 2;
            v78[v80] = v81 >> v9;
            v82 = v80-- + 1;
          }
          while (v82 > 1);
        }
        v76 += v72;
        v78 += v72;
        v77 += v57;
        v47 = v73-- <= 1;
      }
      while (!v47);
    }
    v83 = CC_MD5_Update(&v115, v110, v74);
    v116 &= v83;
    v84 = CC_MD5_Update(&v117, v75, v74);
    v118 &= v84;
  }
  v85 = 0;
  v86 = &c;
  while (1)
  {
    v87 = CC_MD5_Final((unsigned __int8 *)a2, v86);
    v88 = (v87 & v86[1].A) == 0;
    LOBYTE(v86[1].A) &= v87;
    if (v88)
      break;
    result = 0;
    if (dataa != 1)
    {
      v86 = (CC_MD5_CTX *)((char *)v86 + 96);
      a2 += 16;
      v47 = v85++ > 1;
      if (!v47)
        continue;
    }
    return result;
  }
  return 4294954385;
}

void sub_1C974899C(uint64_t a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = (double)(unint64_t)(65025 * *(int *)(a1 + 520) * (uint64_t)*(int *)(a1 + 524));
  v6 = 999.0;
  v7 = 999.0;
  if (*a2 > 0.0)
    v7 = log10(v5 / *a2) * 10.0;
  *a3 = v7;
  v8 = a2[1];
  v9 = 999.0;
  if (v8 > 0.0)
    v9 = log10(v5 * 0.25 / v8) * 10.0;
  a3[1] = v9;
  v10 = a2[2];
  v11 = 999.0;
  if (v10 > 0.0)
    v11 = log10(v5 * 0.25 / v10) * 10.0;
  a3[2] = v11;
  v12 = *a2 + a2[1] + a2[2];
  if (v12 > 0.0)
    v6 = log10(v5 * 1.5 / v12) * 10.0;
  a3[3] = v6;
}

void sub_1C9748A94(uint64_t a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = (double)(unint64_t)(261121 * *(int *)(a1 + 520) * (uint64_t)*(int *)(a1 + 524));
  v6 = 999.0;
  v7 = 999.0;
  if (*a2 > 0.0)
    v7 = log10(v5 / *a2) * 10.0;
  *a3 = v7;
  v8 = a2[1];
  v9 = 999.0;
  if (v8 > 0.0)
    v9 = log10(v5 * 0.25 / v8) * 10.0;
  a3[1] = v9;
  v10 = a2[2];
  v11 = 999.0;
  if (v10 > 0.0)
    v11 = log10(v5 * 0.25 / v10) * 10.0;
  a3[2] = v11;
  v12 = *a2 + a2[1] + a2[2];
  if (v12 > 0.0)
    v6 = log10(v5 * 1.5 / v12) * 10.0;
  a3[3] = v6;
}

void sub_1C9748B90(uint64_t a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = (double)(unint64_t)(1046529 * *(int *)(a1 + 520) * (uint64_t)*(int *)(a1 + 524));
  v6 = 999.0;
  v7 = 999.0;
  if (*a2 > 0.0)
    v7 = log10(v5 / *a2) * 10.0;
  *a3 = v7;
  v8 = a2[1];
  v9 = 999.0;
  if (v8 > 0.0)
    v9 = log10(v5 * 0.25 / v8) * 10.0;
  a3[1] = v9;
  v10 = a2[2];
  v11 = 999.0;
  if (v10 > 0.0)
    v11 = log10(v5 * 0.25 / v10) * 10.0;
  a3[2] = v11;
  v12 = *a2 + a2[1] + a2[2];
  if (v12 > 0.0)
    v6 = log10(v5 * 1.5 / v12) * 10.0;
  a3[3] = v6;
}

void sub_1C9748C8C(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[2 * a2];
    goto LABEL_19;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v16 = &v3[2 * v6];
LABEL_19:
    a1[1] = v16;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    sub_1C9747024();
  v8 = v7 - v4;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 < 0)
    sub_1C9724B4C();
  v11 = (char *)operator new(2 * v10);
  v12 = &v11[2 * v5];
  v13 = &v11[2 * v10];
  bzero(v12, 2 * v6);
  v14 = &v12[2 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_WORD *)v3 - 1);
      v3 -= 2;
      *((_WORD *)v12 - 1) = v15;
      v12 -= 2;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void sub_1C9748D90(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v17 = &v4[16 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v17 = &v3[16 * v6];
LABEL_18:
    a1[1] = v17;
    return;
  }
  if (a2 >> 60)
    sub_1C9747024();
  v8 = v7 - v4;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 60)
    sub_1C9724B4C();
  v11 = (char *)operator new(16 * v10);
  v12 = &v11[16 * v5];
  v13 = &v11[16 * v10];
  bzero(v12, 16 * v6);
  v14 = &v12[16 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 2);
      v3 -= 16;
      v16 = *(_QWORD *)(v3 + 6);
      *((_QWORD *)v12 - 2) = v15;
      v12 -= 16;
      *(_QWORD *)(v12 + 6) = v16;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void *sub_1C9748EA8(void *result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v10 = (int)result;
  v38 = *(_QWORD *)(a7 + 400);
  v11 = *(_QWORD *)(a7 + 416);
  if ((int)result <= 2)
  {
    if (a2 <= 3)
      v12 = 3;
    else
      v12 = a2;
    v13 = a2 + a6 + 4;
    v14 = *(_DWORD *)(a7 + 524);
    if (v13 < v14)
      v14 = a2 + a6 + 4;
    if ((int)v12 - 3 < v14)
    {
      v15 = (3 - (_DWORD)result);
      v16 = v12 - 3;
      v17 = (unsigned __int8 *)(v38 + v11 * (v12 - 3));
      do
      {
        result = memset(&v17[-v15], *v17, v15);
        v18 = *(_DWORD *)(a7 + 524);
        ++v16;
        if (v13 < v18)
          v18 = v13;
        v17 += v11;
      }
      while (v16 < v18);
    }
  }
  v19 = v10 + a5 + 4;
  v20 = *(int *)(a7 + 520);
  if (v19 > (int)v20)
  {
    if (a2 <= 3)
      v21 = 3;
    else
      v21 = a2;
    v22 = a2 + a6 + 4;
    v23 = *(_DWORD *)(a7 + 524);
    if (v22 < v23)
      v23 = a2 + a6 + 4;
    if ((int)v21 - 3 < v23)
    {
      v24 = v21 - 3;
      v25 = v19 - (int)v20;
      v26 = (char *)(v20 + v11 * (v21 - 3) + v38);
      do
      {
        result = memset(v26, *(v26 - 1), v25);
        ++v24;
        v27 = *(_DWORD *)(a7 + 524);
        if (v22 < v27)
          v27 = a2 + a6 + 4;
        v26 += v11;
      }
      while (v24 < v27);
    }
  }
  v28 = v38 + v10;
  if (a2 <= 2)
  {
    v29 = a2 - 3;
    v30 = (char *)(v28 - 3);
    do
    {
      v31 = &v30[-v11];
      result = memcpy(&v30[-v11], v30, a5 + 7);
      v30 = v31;
    }
    while (!__CFADD__(v29++, 1));
  }
  v33 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v33)
  {
    v34 = v11 * (v33 - 1);
    v35 = a6 + a2 - v33 + 4;
    v36 = v28 - 3;
    v37 = v11 * v33;
    do
    {
      result = memcpy((void *)(v36 + v37), (const void *)(v36 + v34), a5 + 7);
      v36 += v11;
      --v35;
    }
    while (v35);
  }
  return result;
}

void *sub_1C97490A0(void *result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  _WORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  size_t v34;
  char *v35;
  uint64_t v37;
  size_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v11 = *(_QWORD *)(a7 + 400);
  v12 = *(_QWORD *)(a7 + 416);
  if ((int)result <= 2)
  {
    v13 = a2 <= 3 ? 3 : a2;
    LODWORD(v14) = *(_DWORD *)(a7 + 524);
    v15 = a2 + a6 + 4;
    v14 = v15 >= (int)v14 ? v14 : v15;
    if ((int)v13 - 3 < (int)v14)
    {
      v16 = v13 - 3;
      v17 = v11 + 2 * v12 * v16 - 2;
      do
      {
        v18 = *(_WORD *)(v11 + 2 * v12 * v16);
        v19 = (_WORD *)v17;
        v20 = (3 - (_DWORD)result);
        do
        {
          *v19-- = v18;
          --v20;
        }
        while (v20);
        ++v16;
        v17 += 2 * v12;
      }
      while (v16 != v14);
    }
  }
  v21 = (_DWORD)result + a5 + 4;
  v22 = *(int *)(a7 + 520);
  if (v21 > (int)v22)
  {
    v23 = a2 <= 3 ? 3 : a2;
    LODWORD(v24) = *(_DWORD *)(a7 + 524);
    v25 = a2 + a6 + 4;
    v24 = v25 >= (int)v24 ? v24 : v25;
    if ((int)v23 - 3 < (int)v24)
    {
      v26 = v23 - 3;
      v27 = 2 * v12 * v26 + 2 * (v22 - 1) + v11 + 2;
      do
      {
        if (v21 != (_DWORD)v22)
        {
          v28 = *(_WORD *)(v11 + 2 * (v22 - 1 + v12 * v26));
          v29 = (_WORD *)v27;
          v30 = v21 - (int)v22;
          do
          {
            *v29++ = v28;
            --v30;
          }
          while (v30);
        }
        ++v26;
        v27 += 2 * v12;
      }
      while (v26 != v24);
    }
  }
  v31 = v11 + 2 * (int)result;
  if (a2 <= 2)
  {
    v32 = a2 - 3;
    v33 = (char *)(v31 - 6);
    v34 = 2 * (a5 + 7);
    do
    {
      v35 = &v33[-2 * v12];
      result = memcpy(v35, v33, v34);
      v33 = v35;
    }
    while (!__CFADD__(v32++, 1));
  }
  v37 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v37)
  {
    v38 = 2 * (a5 + 7);
    v39 = a6 + a2 - v37 + 4;
    v40 = 2 * v12 * (v37 - 1);
    v41 = v31 - 6;
    v42 = v12 * (2 * (v37 - 1) + 2);
    do
    {
      result = memcpy((void *)(v41 + v42), (const void *)(v41 + v40), v38);
      v41 += 2 * v12;
      --v39;
    }
    while (v39);
  }
  return result;
}

unint64_t sub_1C97492A4(unint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  size_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  _WORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  _WORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  char *v56;
  char *v57;
  BOOL v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;

  v10 = *(_QWORD *)(a7 + 400);
  v11 = *(_QWORD *)(a7 + 408);
  v12 = *(_QWORD *)(a7 + 416);
  v13 = *(_QWORD *)(a7 + 424);
  v14 = v13;
  v77 = v11;
  if ((int)result <= 2)
  {
    if (a2 <= 3)
      v15 = 3;
    else
      v15 = a2;
    v16 = a2 + a6 + 4;
    v17 = *(_DWORD *)(a7 + 524);
    if (v16 >= v17)
      v18 = *(_DWORD *)(a7 + 524);
    else
      v18 = a2 + a6 + 4;
    if ((int)v15 - 3 < v18)
    {
      v78 = a2;
      v75 = result;
      v19 = (3 - result);
      v20 = v15 - 3;
      v73 = *(_QWORD *)(a7 + 400);
      v21 = (unsigned __int8 *)(v10 + v12 * (v15 - 3));
      do
      {
        memset(&v21[-v19], *v21, v19);
        v17 = *(_DWORD *)(a7 + 524);
        ++v20;
        if (v16 >= v17)
          v22 = *(_DWORD *)(a7 + 524);
        else
          v22 = v16;
        v21 += v12;
      }
      while (v20 < v22);
      v14 = *(_QWORD *)(a7 + 424);
      a2 = v78;
      result = v75;
      v10 = v73;
    }
    if (a4 <= 1)
      v23 = 1;
    else
      v23 = a4;
    v24 = a4 + (a6 >> 1) + 2;
    if (v24 >= v17 >> 1)
      v25 = (v17 >> 1);
    else
      v25 = v24;
    if ((int)v23 <= (int)v25)
    {
      v26 = v14 >> 1;
      v27 = v23 - 1;
      if (v25 > v23)
        v23 = v25;
      v28 = v11 + 2 * v26 * v27 - 2;
      do
      {
        if (a3 <= 0)
        {
          v29 = *(_WORD *)(v11 + 2 * v26 * v27);
          v30 = (_WORD *)v28;
          v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
        }
        ++v27;
        v28 += 2 * v26;
      }
      while (v27 != v23);
    }
  }
  v32 = result + a5 + 4;
  v33 = *(_DWORD *)(a7 + 520);
  v34 = v32 - v33;
  if (v32 > v33)
  {
    if (a2 <= 3)
      v35 = 3;
    else
      v35 = a2;
    v36 = a2 + a6 + 4;
    v37 = *(_DWORD *)(a7 + 524);
    if (v36 >= v37)
      v38 = *(_DWORD *)(a7 + 524);
    else
      v38 = a2 + a6 + 4;
    if ((int)v35 - 3 < v38)
    {
      v76 = result;
      v79 = a2;
      v39 = v35 - 3;
      v40 = v34;
      v74 = v10;
      v41 = (char *)(v33 + v12 * (v35 - 3) + v10);
      do
      {
        memset(v41, *(v41 - 1), v40);
        ++v39;
        v37 = *(_DWORD *)(a7 + 524);
        if (v36 >= v37)
          v42 = *(_DWORD *)(a7 + 524);
        else
          v42 = v36;
        v41 += v12;
      }
      while (v39 < v42);
      v33 = *(_DWORD *)(a7 + 520);
      v14 = *(_QWORD *)(a7 + 424);
      a2 = v79;
      result = v76;
      v10 = v74;
    }
    if (a4 <= 1)
      v43 = 1;
    else
      v43 = a4;
    v44 = a4 + (a6 >> 1) + 2;
    if (v44 >= v37 >> 1)
      v45 = (v37 >> 1);
    else
      v45 = v44;
    if ((int)v43 <= (int)v45)
    {
      v46 = v33 - 2;
      v47 = v14 >> 1;
      v48 = a3 + (a5 >> 1) - (v33 >> 1) + 2;
      v49 = v43 - 1;
      if (v45 > v43)
        v43 = v45;
      v50 = v46 + 2 * v47 * v49 + v11 + 2;
      do
      {
        if (v48 >= 1)
        {
          v51 = *(_WORD *)(v11 + v46 + 2 * v47 * v49);
          v52 = (_WORD *)v50;
          v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
        }
        ++v49;
        v50 += 2 * v47;
      }
      while (v49 != v43);
    }
  }
  v80 = v10 + (int)result;
  v54 = a2;
  if (a2 <= 2)
  {
    v55 = a2 - 3;
    v56 = (char *)(v80 - 3);
    do
    {
      v57 = &v56[-v12];
      result = (unint64_t)memcpy(&v56[-v12], v56, a5 + 7);
      v56 = v57;
      v58 = __CFADD__(v55++, 1);
    }
    while (!v58);
    if (a4 <= 0)
    {
      v59 = a4 - 1;
      v60 = (char *)(v11 + 2 * a3 - 2);
      do
      {
        v61 = &v60[-v13];
        result = (unint64_t)memcpy(&v60[-v13], v60, (int)((a5 & 0xFFFFFFFE) + 6));
        v60 = v61;
        v58 = __CFADD__(v59++, 1);
      }
      while (!v58);
    }
  }
  v62 = *(int *)(a7 + 524);
  if (v54 + a6 + 4 > (int)v62)
  {
    v63 = v12 * (v62 - 1);
    v64 = v62 - v54 - 4;
    v65 = v80 - 3;
    v66 = v12 * v62;
    do
    {
      result = (unint64_t)memcpy((void *)(v65 + v66), (const void *)(v65 + v63), a5 + 7);
      ++v64;
      v65 += v12;
    }
    while (a6 != v64);
    v67 = *(int *)(a7 + 524) >> 1;
    if (v67 < a4 + (a6 >> 1) + 2)
    {
      v68 = v13 * (v67 - 1);
      v69 = 2 * a3 - 2;
      v70 = (a6 >> 1) + a4 - v67 + 2;
      v71 = v77 + v69;
      v72 = v13 * v67;
      do
      {
        result = (unint64_t)memcpy((void *)(v71 + v72), (const void *)(v71 + v68), (int)((a5 & 0xFFFFFFFE) + 6));
        v71 += v13;
        --v70;
      }
      while (v70);
    }
  }
  return result;
}

void *sub_1C97496DC(void *result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  char *v56;
  size_t v57;
  char *v58;
  BOOL v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v13 = *(_QWORD *)(a7 + 400);
  v12 = *(_QWORD *)(a7 + 408);
  v14 = *(_QWORD *)(a7 + 416);
  v76 = *(_QWORD *)(a7 + 424);
  v15 = v76 >> 1;
  if ((int)result <= 2)
  {
    if (a2 <= 3)
      v16 = 3;
    else
      v16 = a2;
    v17 = *(_DWORD *)(a7 + 524);
    LODWORD(v18) = a2 + a6 + 4;
    if ((int)v18 >= v17)
      v18 = v17;
    else
      v18 = v18;
    if ((int)v16 - 3 < (int)v18)
    {
      v19 = v16 - 3;
      v20 = v13 + 2 * v14 * v19 - 2;
      do
      {
        v21 = *(_WORD *)(v13 + 2 * v14 * v19);
        v22 = (_WORD *)v20;
        v23 = (3 - (_DWORD)result);
        do
        {
          *v22-- = v21;
          --v23;
        }
        while (v23);
        ++v19;
        v20 += 2 * v14;
      }
      while (v19 != v18);
    }
    if (a4 <= 1)
      v24 = 1;
    else
      v24 = a4;
    v25 = a4 + (a6 >> 1) + 2;
    v26 = v17 >> 1;
    if (v25 < v17 >> 1)
      v26 = a4 + (a6 >> 1) + 2;
    if ((int)v24 <= v26)
    {
      v27 = v24 - 1;
      v28 = v12 + 4 * v15 * v27 - 4;
      do
      {
        if (a3 <= 0)
        {
          v29 = *(_DWORD *)(v12 + 4 * v15 * v27);
          v30 = (_DWORD *)v28;
          v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
          v17 = *(_DWORD *)(a7 + 524);
        }
        ++v27;
        v32 = v17 >> 1;
        if (v25 < v17 >> 1)
          v32 = a4 + (a6 >> 1) + 2;
        v28 += 4 * v15;
      }
      while (v27 < v32);
    }
  }
  v33 = (_DWORD)result + a5 + 4;
  v34 = *(int *)(a7 + 520);
  if (v33 > (int)v34)
  {
    if (a2 <= 3)
      v35 = 3;
    else
      v35 = a2;
    v36 = *(_DWORD *)(a7 + 524);
    LODWORD(v37) = a2 + a6 + 4;
    if ((int)v37 >= v36)
      v37 = v36;
    else
      v37 = v37;
    if ((int)v35 - 3 < (int)v37)
    {
      v38 = v35 - 3;
      v39 = 2 * v14 * v38 + 2 * (v34 - 1) + v13 + 2;
      do
      {
        if (v33 != (_DWORD)v34)
        {
          v40 = *(_WORD *)(v13 + 2 * (v34 - 1 + v14 * v38));
          v41 = (_WORD *)v39;
          v42 = v33 - (int)v34;
          do
          {
            *v41++ = v40;
            --v42;
          }
          while (v42);
        }
        ++v38;
        v39 += 2 * v14;
      }
      while (v38 != v37);
    }
    if (a4 <= 1)
      v43 = 1;
    else
      v43 = a4;
    v44 = a4 + (a6 >> 1) + 2;
    v45 = v36 >> 1;
    if (v44 < v36 >> 1)
      v45 = a4 + (a6 >> 1) + 2;
    if ((int)v43 <= v45)
    {
      v46 = (int)v34 - 2;
      v47 = v12 + 2 * v46;
      v48 = a3 + (a5 >> 1) - ((int)v34 >> 1) + 2;
      v49 = v43 - 1;
      v50 = 4 * v15 * v49 + 2 * v46 + v12 + 4;
      do
      {
        if (v48 >= 1)
        {
          v51 = *(_DWORD *)(v47 + 4 * v15 * v49);
          v52 = (_DWORD *)v50;
          v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
          v36 = *(_DWORD *)(a7 + 524);
        }
        ++v49;
        v54 = v36 >> 1;
        if (v44 < v36 >> 1)
          v54 = a4 + (a6 >> 1) + 2;
        v50 += 4 * v15;
      }
      while (v49 < v54);
    }
  }
  v75 = v12;
  v77 = v13 + 2 * (int)result;
  if (a2 <= 2)
  {
    v55 = a2 - 3;
    v56 = (char *)(v77 - 6);
    v57 = 2 * (a5 + 7);
    do
    {
      v58 = &v56[-2 * v14];
      result = memcpy(v58, v56, v57);
      v56 = v58;
      v59 = __CFADD__(v55++, 1);
    }
    while (!v59);
    if (a4 <= 0)
    {
      v60 = a4 - 1;
      v61 = (char *)(v75 + 2 * (2 * a3 - 2));
      do
      {
        v62 = &v61[-2 * v76];
        result = memcpy(v62, v61, 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        v61 = v62;
        v59 = __CFADD__(v60++, 1);
      }
      while (!v59);
    }
  }
  v63 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v63)
  {
    v64 = a4;
    v65 = v63 - a2 - 4;
    v66 = 2 * v14 * (v63 - 1);
    v67 = v77 - 6;
    v68 = 2 * v14;
    v69 = v14 * (2 * (v63 - 1) + 2);
    do
    {
      result = memcpy((void *)(v67 + v69), (const void *)(v67 + v66), 2 * (a5 + 7));
      ++v65;
      v67 += v68;
    }
    while (a6 != v65);
    v70 = *(int *)(a7 + 524) >> 1;
    if (v70 < v64 + (a6 >> 1) + 2)
    {
      v71 = (a6 >> 1) + v64 - v70 + 2;
      v72 = 2 * v76 * (v70 - 1);
      v73 = v75 + 2 * (2 * a3 - 2);
      v74 = 2 * v76 * v70;
      do
      {
        result = memcpy((void *)(v73 + v74), (const void *)(v73 + v72), 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        v73 += 2 * v76;
        --v71;
      }
      while (v71);
    }
  }
  return result;
}

unint64_t sub_1C9749B14(unint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  size_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _WORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  char *v55;
  BOOL v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int v75;

  v10 = *(_QWORD *)(a7 + 400);
  v11 = *(_QWORD *)(a7 + 408);
  v12 = *(_QWORD *)(a7 + 416);
  v13 = *(_QWORD *)(a7 + 424);
  v14 = v13;
  v75 = a6;
  if ((int)result <= 2)
  {
    if (a2 <= 3)
      v15 = 3;
    else
      v15 = a2;
    v16 = a2 + a6 + 4;
    LODWORD(v17) = *(_DWORD *)(a7 + 524);
    if (v16 >= (int)v17)
      v18 = *(_DWORD *)(a7 + 524);
    else
      v18 = a2 + a6 + 4;
    if ((int)v15 - 3 < v18)
    {
      v73 = result;
      v19 = (3 - result);
      v20 = v15 - 3;
      v71 = *(_QWORD *)(a7 + 400);
      v21 = (unsigned __int8 *)(v10 + v12 * (v15 - 3));
      do
      {
        memset(&v21[-v19], *v21, v19);
        LODWORD(v17) = *(_DWORD *)(a7 + 524);
        ++v20;
        if (v16 >= (int)v17)
          v22 = *(_DWORD *)(a7 + 524);
        else
          v22 = v16;
        v21 += v12;
      }
      while (v20 < v22);
      v14 = *(_QWORD *)(a7 + 424);
      a6 = v75;
      result = v73;
      v10 = v71;
    }
    if (a4 <= 1)
      v23 = 1;
    else
      v23 = a4;
    v24 = a4 + a6 + 2;
    if (v24 >= (int)v17)
      v17 = v17;
    else
      v17 = v24;
    if ((int)v23 <= (int)v17)
    {
      v25 = v23 - 1;
      v26 = v11 + 2 * (v14 >> 1) * v25 - 2;
      do
      {
        if (a3 <= 0)
        {
          v27 = *(_WORD *)(v11 + 2 * (v14 >> 1) * v25);
          v28 = (_WORD *)v26;
          v29 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v28-- = v27;
            --v29;
          }
          while (v29);
        }
        ++v25;
        v26 += 2 * (v14 >> 1);
      }
      while (v25 != v17);
    }
  }
  v30 = result + a5 + 4;
  v31 = *(_DWORD *)(a7 + 520);
  v32 = v30 - v31;
  if (v30 > v31)
  {
    if (a2 <= 3)
      v33 = 3;
    else
      v33 = a2;
    v34 = a2 + a6 + 4;
    LODWORD(v35) = *(_DWORD *)(a7 + 524);
    if (v34 >= (int)v35)
      v36 = *(_DWORD *)(a7 + 524);
    else
      v36 = a2 + a6 + 4;
    if ((int)v33 - 3 < v36)
    {
      v74 = result;
      v37 = v33 - 3;
      v38 = v32;
      v72 = v10;
      v39 = (char *)(v31 + v12 * (v33 - 3) + v10);
      do
      {
        memset(v39, *(v39 - 1), v38);
        ++v37;
        LODWORD(v35) = *(_DWORD *)(a7 + 524);
        if (v34 >= (int)v35)
          v40 = *(_DWORD *)(a7 + 524);
        else
          v40 = v34;
        v39 += v12;
      }
      while (v37 < v40);
      v31 = *(_DWORD *)(a7 + 520);
      v14 = *(_QWORD *)(a7 + 424);
      a6 = v75;
      result = v74;
      v10 = v72;
    }
    if (a4 <= 1)
      v41 = 1;
    else
      v41 = a4;
    v42 = a4 + a6 + 2;
    if (v42 >= (int)v35)
      v35 = v35;
    else
      v35 = v42;
    if ((int)v41 <= (int)v35)
    {
      v43 = v31 - 2;
      v44 = v11 + v43;
      v45 = v14 >> 1;
      v46 = a3 + (a5 >> 1) - (v31 >> 1) + 2;
      v47 = v41 - 1;
      v48 = v43 + 2 * v45 * v47 + v11 + 2;
      do
      {
        if (v46 >= 1)
        {
          v49 = *(_WORD *)(v44 + 2 * v45 * v47);
          v50 = (_WORD *)v48;
          v51 = v46 & ~(v46 >> 31);
          do
          {
            *v50++ = v49;
            --v51;
          }
          while (v51);
        }
        ++v47;
        v48 += 2 * v45;
      }
      while (v47 != v35);
    }
  }
  v52 = v10 + (int)result;
  if (a2 <= 2)
  {
    v53 = a2 - 3;
    v54 = (char *)(v52 - 3);
    do
    {
      v55 = &v54[-v12];
      result = (unint64_t)memcpy(&v54[-v12], v54, a5 + 7);
      v54 = v55;
      v56 = __CFADD__(v53++, 1);
    }
    while (!v56);
    if (a4 <= 0)
    {
      v57 = a4 - 1;
      v58 = (char *)(v11 + 2 * a3 - 2);
      do
      {
        v59 = &v58[-v13];
        result = (unint64_t)memcpy(&v58[-v13], v58, (int)((a5 & 0xFFFFFFFE) + 6));
        v58 = v59;
        v56 = __CFADD__(v57++, 1);
      }
      while (!v56);
    }
  }
  v60 = *(int *)(a7 + 524);
  if (a2 + v75 + 4 > (int)v60)
  {
    v61 = v12 * (v60 - 1);
    v62 = v75 + a2 - v60 + 4;
    v63 = v52 - 3;
    v64 = v12 * v60;
    do
    {
      result = (unint64_t)memcpy((void *)(v63 + v64), (const void *)(v63 + v61), a5 + 7);
      v63 += v12;
      --v62;
    }
    while (v62);
    v65 = *(int *)(a7 + 524);
    if ((int)v65 < a4 + v75 + 2)
    {
      v66 = v13 * (v65 - 1);
      v67 = 2 * a3 - 2;
      v68 = v75 + a4 - v65 + 2;
      v69 = v13 * v65;
      v70 = v11 + v67;
      do
      {
        result = (unint64_t)memcpy((void *)(v70 + v69), (const void *)(v70 + v66), (int)((a5 & 0xFFFFFFFE) + 6));
        v70 += v13;
        --v68;
      }
      while (v68);
    }
  }
  return result;
}

void *sub_1C9749F14(void *result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  char *v56;
  size_t v57;
  char *v58;
  BOOL v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v13 = *(_QWORD *)(a7 + 400);
  v12 = *(_QWORD *)(a7 + 408);
  v14 = *(_QWORD *)(a7 + 416);
  v76 = *(_QWORD *)(a7 + 424);
  v15 = v76 >> 1;
  if ((int)result <= 2)
  {
    if (a2 <= 3)
      v16 = 3;
    else
      v16 = a2;
    v17 = *(_DWORD *)(a7 + 524);
    LODWORD(v18) = a2 + a6 + 4;
    if ((int)v18 >= v17)
      v18 = v17;
    else
      v18 = v18;
    if ((int)v16 - 3 < (int)v18)
    {
      v19 = v16 - 3;
      v20 = v13 + 2 * v14 * v19 - 2;
      do
      {
        v21 = *(_WORD *)(v13 + 2 * v14 * v19);
        v22 = (_WORD *)v20;
        v23 = (3 - (_DWORD)result);
        do
        {
          *v22-- = v21;
          --v23;
        }
        while (v23);
        ++v19;
        v20 += 2 * v14;
      }
      while (v19 != v18);
    }
    if (a4 <= 1)
      v24 = 1;
    else
      v24 = a4;
    v25 = a4 + a6 + 2;
    if (v25 >= v17)
      v26 = v17;
    else
      v26 = a4 + a6 + 2;
    if ((int)v24 <= v26)
    {
      v27 = v24 - 1;
      v28 = v12 + 4 * v15 * v27 - 4;
      do
      {
        if (a3 <= 0)
        {
          v29 = *(_DWORD *)(v12 + 4 * v15 * v27);
          v30 = (_DWORD *)v28;
          v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
          v17 = *(_DWORD *)(a7 + 524);
        }
        ++v27;
        if (v25 >= v17)
          v32 = v17;
        else
          v32 = a4 + a6 + 2;
        v28 += 4 * v15;
      }
      while (v27 < v32);
    }
  }
  v33 = (_DWORD)result + a5 + 4;
  v34 = *(int *)(a7 + 520);
  if (v33 > (int)v34)
  {
    if (a2 <= 3)
      v35 = 3;
    else
      v35 = a2;
    v36 = *(_DWORD *)(a7 + 524);
    LODWORD(v37) = a2 + a6 + 4;
    if ((int)v37 >= v36)
      v37 = v36;
    else
      v37 = v37;
    if ((int)v35 - 3 < (int)v37)
    {
      v38 = v35 - 3;
      v39 = 2 * v14 * v38 + 2 * (v34 - 1) + v13 + 2;
      do
      {
        if (v33 != (_DWORD)v34)
        {
          v40 = *(_WORD *)(v13 + 2 * (v34 - 1 + v14 * v38));
          v41 = (_WORD *)v39;
          v42 = v33 - (int)v34;
          do
          {
            *v41++ = v40;
            --v42;
          }
          while (v42);
        }
        ++v38;
        v39 += 2 * v14;
      }
      while (v38 != v37);
    }
    if (a4 <= 1)
      v43 = 1;
    else
      v43 = a4;
    v44 = a4 + a6 + 2;
    if (v44 >= v36)
      v45 = v36;
    else
      v45 = a4 + a6 + 2;
    if ((int)v43 <= v45)
    {
      v46 = (int)v34 - 2;
      v47 = v12 + 2 * v46;
      v48 = a3 + (a5 >> 1) - ((int)v34 >> 1) + 2;
      v49 = v43 - 1;
      v50 = 4 * v15 * v49 + 2 * v46 + v12 + 4;
      do
      {
        if (v48 >= 1)
        {
          v51 = *(_DWORD *)(v47 + 4 * v15 * v49);
          v52 = (_DWORD *)v50;
          v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
          v36 = *(_DWORD *)(a7 + 524);
        }
        ++v49;
        if (v44 >= v36)
          v54 = v36;
        else
          v54 = a4 + a6 + 2;
        v50 += 4 * v15;
      }
      while (v49 < v54);
    }
  }
  v75 = v12;
  v77 = v13 + 2 * (int)result;
  if (a2 <= 2)
  {
    v55 = a2 - 3;
    v56 = (char *)(v77 - 6);
    v57 = 2 * (a5 + 7);
    do
    {
      v58 = &v56[-2 * v14];
      result = memcpy(v58, v56, v57);
      v56 = v58;
      v59 = __CFADD__(v55++, 1);
    }
    while (!v59);
    if (a4 <= 0)
    {
      v60 = a4 - 1;
      v61 = (char *)(v75 + 2 * (2 * a3 - 2));
      do
      {
        v62 = &v61[-2 * v76];
        result = memcpy(v62, v61, 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        v61 = v62;
        v59 = __CFADD__(v60++, 1);
      }
      while (!v59);
    }
  }
  v63 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v63)
  {
    v64 = a4;
    v65 = a6 + a2 - v63 + 4;
    v66 = 2 * v14 * (v63 - 1);
    v67 = v77 - 6;
    v68 = 2 * v14;
    v69 = v14 * (2 * (v63 - 1) + 2);
    do
    {
      result = memcpy((void *)(v67 + v69), (const void *)(v67 + v66), 2 * (a5 + 7));
      v67 += v68;
      --v65;
    }
    while (v65);
    v70 = *(int *)(a7 + 524);
    if ((int)v70 < v64 + a6 + 2)
    {
      v71 = a6 + v64 - v70 + 2;
      v72 = 2 * v76 * (v70 - 1);
      v73 = v75 + 2 * (2 * a3 - 2);
      v74 = v76 * (2 * (v70 - 1) + 2);
      do
      {
        result = memcpy((void *)(v73 + v74), (const void *)(v73 + v72), 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        v73 += 2 * v76;
        --v71;
      }
      while (v71);
    }
  }
  return result;
}

unint64_t sub_1C974A330(unint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  size_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _WORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  int v52;
  int v53;
  char *v54;
  char *v55;
  BOOL v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;

  v79 = a6;
  v10 = *(_QWORD *)(a7 + 400);
  v11 = *(_QWORD *)(a7 + 408);
  v12 = *(_QWORD *)(a7 + 416);
  v13 = *(_QWORD *)(a7 + 424);
  v14 = v13;
  v75 = v11;
  if ((int)result <= 2)
  {
    if (a2 <= 3)
      v15 = 3;
    else
      v15 = a2;
    v16 = a2 + a6 + 4;
    LODWORD(v17) = *(_DWORD *)(a7 + 524);
    if (v16 >= (int)v17)
      v18 = *(_DWORD *)(a7 + 524);
    else
      v18 = a2 + a6 + 4;
    if ((int)v15 - 3 < v18)
    {
      v76 = a5;
      v72 = result;
      v19 = (3 - result);
      v20 = v15 - 3;
      v70 = *(_QWORD *)(a7 + 400);
      v21 = (unsigned __int8 *)(v10 + v12 * (v15 - 3));
      do
      {
        memset(&v21[-v19], *v21, v19);
        LODWORD(v17) = *(_DWORD *)(a7 + 524);
        ++v20;
        if (v16 >= (int)v17)
          v22 = *(_DWORD *)(a7 + 524);
        else
          v22 = v16;
        v21 += v12;
      }
      while (v20 < v22);
      v14 = *(_QWORD *)(a7 + 424);
      a6 = v79;
      a5 = v76;
      result = v72;
      v10 = v70;
    }
    if (a4 <= 1)
      v23 = 1;
    else
      v23 = a4;
    v24 = a4 + a6 + 2;
    if (v24 >= (int)v17)
      v17 = v17;
    else
      v17 = v24;
    if ((int)v23 <= (int)v17)
    {
      v25 = v23 - 1;
      v26 = v11 + 2 * (v14 >> 1) * v25 - 2;
      do
      {
        if (a3 <= 0)
        {
          v27 = *(_WORD *)(v11 + 2 * (v14 >> 1) * v25);
          v28 = (_WORD *)v26;
          v29 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v28-- = v27;
            --v29;
          }
          while (v29);
        }
        ++v25;
        v26 += 2 * (v14 >> 1);
      }
      while (v25 != v17);
    }
  }
  v30 = result + a5 + 4;
  v31 = *(_DWORD *)(a7 + 520);
  v32 = v30 - v31;
  if (v30 > v31)
  {
    if (a2 <= 3)
      v33 = 3;
    else
      v33 = a2;
    v34 = a2 + a6 + 4;
    LODWORD(v35) = *(_DWORD *)(a7 + 524);
    if (v34 >= (int)v35)
      v36 = *(_DWORD *)(a7 + 524);
    else
      v36 = a2 + a6 + 4;
    if ((int)v33 - 3 < v36)
    {
      v73 = result;
      v77 = a5;
      v37 = v33 - 3;
      v38 = v32;
      v71 = v10;
      v39 = (char *)(v31 + v12 * (v33 - 3) + v10);
      do
      {
        memset(v39, *(v39 - 1), v38);
        ++v37;
        LODWORD(v35) = *(_DWORD *)(a7 + 524);
        if (v34 >= (int)v35)
          v40 = *(_DWORD *)(a7 + 524);
        else
          v40 = v34;
        v39 += v12;
      }
      while (v37 < v40);
      v31 = *(_DWORD *)(a7 + 520);
      v14 = *(_QWORD *)(a7 + 424);
      a6 = v79;
      a5 = v77;
      result = v73;
      v10 = v71;
    }
    if (a4 <= 1)
      v41 = 1;
    else
      v41 = a4;
    v42 = a4 + a6 + 2;
    if (v42 >= (int)v35)
      v35 = v35;
    else
      v35 = v42;
    if ((int)v41 <= (int)v35)
    {
      v43 = 2 * v31 - 2;
      v44 = v11 + v43;
      v45 = v14 >> 1;
      v46 = a3 + a5 - v31 + 2;
      v47 = v41 - 1;
      v48 = v43 + 2 * v45 * v47 + v11 + 2;
      do
      {
        if (v46 >= 1)
        {
          v49 = *(_WORD *)(v44 + 2 * v45 * v47);
          v50 = (_WORD *)v48;
          v51 = v46 & ~(v46 >> 31);
          do
          {
            *v50++ = v49;
            --v51;
          }
          while (v51);
        }
        ++v47;
        v48 += 2 * v45;
      }
      while (v47 != v35);
    }
  }
  v52 = a5;
  v74 = 2 * a5;
  v78 = v10 + (int)result;
  if (a2 <= 2)
  {
    v53 = a2 - 3;
    v54 = (char *)(v78 - 3);
    do
    {
      v55 = &v54[-v12];
      result = (unint64_t)memcpy(&v54[-v12], v54, v52 + 7);
      v54 = v55;
      v56 = __CFADD__(v53++, 1);
    }
    while (!v56);
    if (a4 <= 0)
    {
      v57 = a4 - 1;
      v58 = (char *)(v11 + 2 * a3 - 2);
      do
      {
        v59 = &v58[-v13];
        result = (unint64_t)memcpy(&v58[-v13], v58, v74 + 6);
        v58 = v59;
        v56 = __CFADD__(v57++, 1);
      }
      while (!v56);
    }
  }
  v60 = *(int *)(a7 + 524);
  if (a2 + v79 + 4 > (int)v60)
  {
    v61 = v12 * (v60 - 1);
    v62 = v79 + a2 - v60 + 4;
    v63 = v78 - 3;
    v64 = v12 * v60;
    do
    {
      result = (unint64_t)memcpy((void *)(v63 + v64), (const void *)(v63 + v61), v52 + 7);
      v63 += v12;
      --v62;
    }
    while (v62);
    v65 = *(int *)(a7 + 524);
    if ((int)v65 < a4 + v79 + 2)
    {
      v66 = v13 * (v65 - 1);
      v67 = v79 + a4 - v65 + 2;
      v68 = v75 + 2 * a3 - 2;
      v69 = v13 * v65;
      do
      {
        result = (unint64_t)memcpy((void *)(v68 + v69), (const void *)(v68 + v66), v74 + 6);
        v68 += v13;
        --v67;
      }
      while (v67);
    }
  }
  return result;
}

void *sub_1C974A740(void *result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  char *v56;
  size_t v57;
  char *v58;
  BOOL v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v13 = *(_QWORD *)(a7 + 400);
  v12 = *(_QWORD *)(a7 + 408);
  v14 = *(_QWORD *)(a7 + 416);
  v76 = *(_QWORD *)(a7 + 424);
  v15 = v76 >> 1;
  if ((int)result <= 2)
  {
    if (a2 <= 3)
      v16 = 3;
    else
      v16 = a2;
    v17 = *(_DWORD *)(a7 + 524);
    LODWORD(v18) = a2 + a6 + 4;
    if ((int)v18 >= v17)
      v18 = v17;
    else
      v18 = v18;
    if ((int)v16 - 3 < (int)v18)
    {
      v19 = v16 - 3;
      v20 = v13 + 2 * v14 * v19 - 2;
      do
      {
        v21 = *(_WORD *)(v13 + 2 * v14 * v19);
        v22 = (_WORD *)v20;
        v23 = (3 - (_DWORD)result);
        do
        {
          *v22-- = v21;
          --v23;
        }
        while (v23);
        ++v19;
        v20 += 2 * v14;
      }
      while (v19 != v18);
    }
    if (a4 <= 1)
      v24 = 1;
    else
      v24 = a4;
    v25 = a4 + a6 + 2;
    if (v25 >= v17)
      v26 = v17;
    else
      v26 = a4 + a6 + 2;
    if ((int)v24 <= v26)
    {
      v27 = v24 - 1;
      v28 = v12 + 4 * v15 * v27 - 4;
      do
      {
        if (a3 <= 0)
        {
          v29 = *(_DWORD *)(v12 + 4 * v15 * v27);
          v30 = (_DWORD *)v28;
          v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
          v17 = *(_DWORD *)(a7 + 524);
        }
        ++v27;
        if (v25 >= v17)
          v32 = v17;
        else
          v32 = a4 + a6 + 2;
        v28 += 4 * v15;
      }
      while (v27 < v32);
    }
  }
  v33 = (_DWORD)result + a5 + 4;
  v34 = *(int *)(a7 + 520);
  if (v33 > (int)v34)
  {
    if (a2 <= 3)
      v35 = 3;
    else
      v35 = a2;
    v36 = *(_DWORD *)(a7 + 524);
    LODWORD(v37) = a2 + a6 + 4;
    if ((int)v37 >= v36)
      v37 = v36;
    else
      v37 = v37;
    if ((int)v35 - 3 < (int)v37)
    {
      v38 = v35 - 3;
      v39 = 2 * v14 * v38 + 2 * (v34 - 1) + v13 + 2;
      do
      {
        if (v33 != (_DWORD)v34)
        {
          v40 = *(_WORD *)(v13 + 2 * (v34 - 1 + v14 * v38));
          v41 = (_WORD *)v39;
          v42 = v33 - (int)v34;
          do
          {
            *v41++ = v40;
            --v42;
          }
          while (v42);
        }
        ++v38;
        v39 += 2 * v14;
      }
      while (v38 != v37);
    }
    if (a4 <= 1)
      v43 = 1;
    else
      v43 = a4;
    v44 = a4 + a6 + 2;
    if (v44 >= v36)
      v45 = v36;
    else
      v45 = a4 + a6 + 2;
    if ((int)v43 <= v45)
    {
      v46 = 2 * (int)v34 - 2;
      v47 = v12 + 2 * v46;
      v48 = a3 + a5 - v34 + 2;
      v49 = v43 - 1;
      v50 = 4 * v15 * v49 + 2 * v46 + v12 + 4;
      do
      {
        if (v48 >= 1)
        {
          v51 = *(_DWORD *)(v47 + 4 * v15 * v49);
          v52 = (_DWORD *)v50;
          v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
          v36 = *(_DWORD *)(a7 + 524);
        }
        ++v49;
        if (v44 >= v36)
          v54 = v36;
        else
          v54 = a4 + a6 + 2;
        v50 += 4 * v15;
      }
      while (v49 < v54);
    }
  }
  v75 = v12;
  v77 = v13 + 2 * (int)result;
  if (a2 <= 2)
  {
    v55 = a2 - 3;
    v56 = (char *)(v77 - 6);
    v57 = 2 * (a5 + 7);
    do
    {
      v58 = &v56[-2 * v14];
      result = memcpy(v58, v56, v57);
      v56 = v58;
      v59 = __CFADD__(v55++, 1);
    }
    while (!v59);
    if (a4 <= 0)
    {
      v60 = a4 - 1;
      v61 = (char *)(v75 + 2 * (2 * a3 - 2));
      do
      {
        v62 = &v61[-2 * v76];
        result = memcpy(v62, v61, 2 * (2 * a5 + 6));
        v61 = v62;
        v59 = __CFADD__(v60++, 1);
      }
      while (!v59);
    }
  }
  v63 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v63)
  {
    v64 = a4;
    v65 = a6 + a2 - v63 + 4;
    v66 = 2 * v14 * (v63 - 1);
    v67 = v77 - 6;
    v68 = 2 * v14;
    v69 = v14 * (2 * (v63 - 1) + 2);
    do
    {
      result = memcpy((void *)(v67 + v69), (const void *)(v67 + v66), 2 * (a5 + 7));
      v67 += v68;
      --v65;
    }
    while (v65);
    v70 = *(int *)(a7 + 524);
    if ((int)v70 < v64 + a6 + 2)
    {
      v71 = a6 + v64 - v70 + 2;
      v72 = 2 * v76 * (v70 - 1);
      v73 = v75 + 2 * (2 * a3 - 2);
      v74 = v76 * (2 * (v70 - 1) + 2);
      do
      {
        result = memcpy((void *)(v73 + v74), (const void *)(v73 + v72), 2 * (2 * a5 + 6));
        v73 += 2 * v76;
        --v71;
      }
      while (v71);
    }
  }
  return result;
}

void sub_1C974AB60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 - 8);
  if (v2)
  {
    v3 = 120 * v2;
    do
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(a1 + v3 - 56));
      std::mutex::~mutex((std::mutex *)(a1 + v3 - 120));
      v3 -= 120;
    }
    while (v3);
  }
  JUMPOUT(0x1CAA43B6CLL);
}

uint64_t sub_1C974ABC8(uint64_t a1)
{
  std::mutex *v2;
  std::unique_lock<std::mutex>::mutex_type *m;
  uint64_t v4;
  std::unique_lock<std::mutex> v6;

  v2 = (std::mutex *)(a1 + 200);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  v6.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 200));
  m = v2;
  if (*(_DWORD *)(a1 + 196))
  {
    do
      std::condition_variable::wait((std::condition_variable *)(a1 + 264), &v6);
    while (*(_DWORD *)(a1 + 196));
    if (!v6.__owns_)
      goto LABEL_6;
    m = v6.__m_;
  }
  std::mutex::unlock(m);
LABEL_6:
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 264));
  std::mutex::~mutex(v2);
  sub_1C972CFE0(a1 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    sub_1C974AB60(v4);
  return a1;
}

void sub_1C974AC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::mutex *v15;
  char v16;

  atomic_store(0, (unsigned int *)(a1 + 128));
  atomic_store(0, (unsigned int *)(a1 + 192));
  v4 = *(int *)(a2 + 2124);
  *(_DWORD *)(a1 + 68) = v4;
  if (*(unsigned __int8 *)(a2 + 2117) > 0x10u)
    v5 = 1;
  else
    v5 = 2;
  *(_DWORD *)(a1 + 64) = v5;
  v6 = v4 + 1;
  v7 = (_QWORD *)operator new[]();
  *v7 = 120;
  v7[1] = v6;
  v8 = v7 + 2;
  if ((_DWORD)v6)
  {
    v9 = &v8[15 * v6];
    v10 = v7 + 2;
    do
    {
      *v10 = 850045863;
      *(_OWORD *)(v10 + 1) = 0u;
      *(_OWORD *)(v10 + 3) = 0u;
      *(_OWORD *)(v10 + 5) = 0u;
      v10[7] = 0;
      v10[8] = 1018212795;
      *(_OWORD *)(v10 + 9) = 0u;
      *(_OWORD *)(v10 + 11) = 0u;
      v10[13] = 0;
      atomic_store(0, (unsigned __int8 *)v10 + 114);
      atomic_store(0, (unsigned __int16 *)v10 + 56);
      std::condition_variable::notify_all((std::condition_variable *)(v10 + 8));
      v10 += 15;
    }
    while (v10 != v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v11)
    sub_1C974AB60(v11);
  *(_QWORD *)a1 = v8 + 15;
  atomic_store(2u, (unsigned __int8 *)v8 + 114);
  v15 = (std::mutex *)v8;
  v16 = 1;
  std::mutex::lock((std::mutex *)v8);
  atomic_store(0xFFFFu, (unsigned __int16 *)v8 + 56);
  sub_1C971138C((uint64_t)&v15);
  std::condition_variable::notify_all((std::condition_variable *)(v8 + 8));
  if (v16)
    std::mutex::unlock(v15);
  if (*(int *)(a2 + 2124) >= 1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)a1 + v12;
      atomic_store(0, (unsigned __int8 *)(v14 + 114));
      atomic_store(0, (unsigned __int16 *)(v14 + 112));
      std::condition_variable::notify_all((std::condition_variable *)(v14 + 64));
      ++v13;
      v12 += 120;
    }
    while (v13 < *(int *)(a2 + 2124));
  }
}

void sub_1C974AE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C974AE5C(uint64_t a1, _QWORD *a2, signed int *a3)
{
  signed int v3;
  unsigned int *v4;
  signed int v5;
  signed int v6;
  signed int v7;
  signed int v8;
  int v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t i;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v23;

  v3 = *(_DWORD *)(a1 + 68);
  *a2 = 0;
  *a3 = -1;
  v4 = (unsigned int *)(a1 + 192);
  while (1)
  {
    while (1)
    {
      v5 = atomic_load((unsigned int *)(a1 + 128));
      v6 = v5;
      v7 = v5;
      v8 = v3 - v5;
      if (v3 > v5)
      {
        v9 = v3 - 1 - v5;
        v10 = 120 * v5;
        v7 = v5;
        while (1)
        {
          if (!atomic_load((unsigned __int8 *)(*(_QWORD *)a1 + v10 + 114)))
          {
            v12 = atomic_load((unsigned __int16 *)(*(_QWORD *)a1 + v10 + 112));
            v13 = atomic_load((unsigned __int16 *)(*(_QWORD *)a1 + v10 - 8));
            if (v13 - *(_DWORD *)(a1 + 64) > v12)
              break;
          }
          v14 = atomic_load((unsigned __int16 *)(*(_QWORD *)a1 + v10 + 112));
          ++v7;
          if (v14)
            v15 = v9 == 0;
          else
            v15 = 1;
          --v9;
          v10 += 120;
          if (v15)
            goto LABEL_13;
        }
      }
      if (v7 < v3)
        break;
LABEL_13:
      v16 = atomic_load(v4);
      if ((int)(v16 + 1) < v8)
      {
        v7 = v5;
        if (v3 > v5)
        {
          for (i = 120 * v5 + 114; atomic_load((unsigned __int8 *)(*(_QWORD *)a1 + i)); i += 120)
          {
            ++v6;
            if (!--v8)
              return 0;
          }
          v7 = v6;
        }
        break;
      }
      v19 = __ldaxr(v4);
      if (v19 != v16)
        goto LABEL_25;
      if (!__stlxr(v16 - 1, v4))
        return 1;
    }
    if (v7 >= v3)
      return 0;
    v20 = (unsigned __int8 *)(*(_QWORD *)a1 + 120 * v7 + 114);
    if (__ldaxr(v20))
    {
LABEL_25:
      __clrex();
    }
    else if (!__stlxr(1u, v20))
    {
      v23 = 0;
      *a2 = *(_QWORD *)a1 + 120 * v7;
      *a3 = v7;
      return v23;
    }
  }
}

void sub_1C974AFE8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  std::unique_lock<std::mutex> v7;

  *(_DWORD *)(a1 + 196) = a2;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  sub_1C97B9C40(*(_QWORD *)(a1 + 16), a2, a3, a1);
  m = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  v7.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 200));
  if (!*(_DWORD *)(a1 + 196))
    goto LABEL_5;
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 264), &v7);
  while (*(_DWORD *)(a1 + 196));
  if (v7.__owns_)
  {
    m = v7.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
}

void sub_1C974B06C(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  char v6;
  std::mutex *v7;
  unsigned int *v8;
  int v9;
  std::mutex *v10;
  int v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  std::condition_variable *opaque;
  int v16;
  int v17;
  int v18;
  std::mutex *v19;
  int v20;
  int v21;
  unsigned int v22;
  std::mutex *v23;
  std::mutex *v24;
  unsigned int v25;
  int v26;
  void (*v27)(_QWORD);
  int v28;
  uint64_t v29;
  std::mutex *v30;
  std::unique_lock<std::mutex> __lk;

  v29 = 0;
  v30 = 0;
  v4 = (unsigned int *)(a1 + 192);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = sub_1C974AE5C(a1, &v30, (signed int *)&v29 + 1);
  v7 = v30;
  if (v30)
  {
    v8 = (unsigned int *)(a1 + 128);
    do
    {
      v9 = atomic_load((unsigned __int16 *)&v7[1].__m_.__opaque[40]);
      LODWORD(v29) = v9;
      v10 = v30;
      v11 = *(_DWORD *)(a1 + 64) + v9;
      v12 = (unsigned __int16 *)&v30[-1].__m_.__opaque[48];
      v13 = atomic_load((unsigned __int16 *)&v30[-1].__m_.__opaque[48]);
      if (v11 >= v13)
      {
        __lk.__m_ = (std::mutex *)((char *)v30 - 120);
        __lk.__owns_ = 1;
        std::mutex::lock((std::mutex *)((char *)v30 - 120));
        v14 = atomic_load(v12);
        if (v11 >= v14)
        {
          opaque = (std::condition_variable *)v10[-1].__m_.__opaque;
          do
          {
            std::condition_variable::wait(opaque, &__lk);
            v16 = atomic_load(v12);
          }
          while (v11 >= v16);
        }
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
      }
      v28 = HIDWORD(v29);
      while (1)
      {
        v17 = *(_DWORD *)(a1 + 64) + v29;
        v18 = atomic_load(v12);
        if (v17 >= v18)
          break;
        (*(void (**)(_QWORD, uint64_t, uint64_t *, int *))(a1 + 40))(*(_QWORD *)(a1 + 32), a2, &v29, &v28);
        if ((int)v29 >= 1)
        {
          v19 = v30;
          atomic_store(v29, (unsigned __int16 *)&v30[1].__m_.__opaque[40]);
          std::condition_variable::notify_all((std::condition_variable *)&v19[1]);
        }
        v20 = v28;
        v21 = HIDWORD(v29);
        if (v28 > SHIDWORD(v29))
          goto LABEL_18;
      }
      v20 = v28;
      v21 = HIDWORD(v29);
LABEL_18:
      if (v20 <= v21)
      {
        v24 = v30;
        atomic_store(0, (unsigned __int8 *)&v30[1].__m_.__opaque[42]);
        std::condition_variable::notify_all((std::condition_variable *)&v24[1]);
      }
      else
      {
        do
          v22 = __ldaxr(v8);
        while (__stlxr(v22 + 1, v8));
        v23 = v30;
        atomic_store(2u, (unsigned __int8 *)&v30[1].__m_.__opaque[42]);
        __lk.__m_ = v23;
        __lk.__owns_ = 1;
        std::mutex::lock(v23);
        atomic_store(0xFFFFu, (unsigned __int16 *)&v23[1].__m_.__opaque[40]);
        sub_1C971138C((uint64_t)&__lk);
        std::condition_variable::notify_all((std::condition_variable *)&v23[1]);
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
      }
      v30 = 0;
      v6 = sub_1C974AE5C(a1, &v30, (signed int *)&v29 + 1);
      v7 = v30;
    }
    while (v30);
  }
  if ((v6 & 1) == 0)
  {
    do
      v25 = __ldaxr(v4);
    while (__stlxr(v25 - 1, v4));
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 200));
  v26 = *(_DWORD *)(a1 + 196) - 1;
  *(_DWORD *)(a1 + 196) = v26;
  if (!v26)
  {
    v27 = *(void (**)(_QWORD))(a1 + 56);
    if (v27)
      v27(*(_QWORD *)(a1 + 48));
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 264));
  }
  sub_1C971138C((uint64_t)&__lk);
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_1C974B2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a14)
    std::mutex::unlock(a13);
  _Unwind_Resume(exception_object);
}

void sub_1C974B2F0(uint64_t a1)
{
  sub_1C974B798(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C974B314(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  std::mutex *v45;

  v45 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  *a4 = 0;
  v44 = (_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 48))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((*(_QWORD *)(a1 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(_QWORD *)(a1 + 40) & 0x1FFLL));
    *a4 = v8;
    *(_QWORD *)(v8 + 992) = 0;
    *(_BYTE *)(v8 + 40) = 0;
    *(_WORD *)(v8 + 42) = 0;
    *(_BYTE *)(v8 + 44) = 0;
    *(_DWORD *)(v8 + 1024) = 0;
    *(_DWORD *)(v8 + 36) = 0;
    *(_BYTE *)(v8 + 548) = 0;
    *(_BYTE *)(v8 + 597) = 0;
    *(_BYTE *)(v8 + 1172) = 0;
    *(_OWORD *)(v8 + 648) = 0u;
    *(_BYTE *)(v8 + 748) = 0;
    *(_QWORD *)(v8 + 752) = 0;
    *(_OWORD *)(v8 + 760) = 0u;
    *(_QWORD *)(v8 + 832) = 0;
    *(_OWORD *)(v8 + 840) = 0u;
    *(_OWORD *)(v8 + 928) = 0u;
    *(_QWORD *)(v8 + 672) = -1;
    *(_QWORD *)(v8 + 664) = -1;
    *(_BYTE *)(v8 + 680) = 0;
    *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_1C9862BD0);
    sub_1C974B74C(a1 + 8);
    v9 = (void *)*a4;
  }
  else
  {
    v10 = operator new(0x498uLL, MEMORY[0x1E0DE4E10]);
    if (!v10)
    {
      v12 = 4294954392;
      goto LABEL_43;
    }
    v9 = v10;
    sub_1C97182D0((uint64_t)v10);
    *a4 = v11;
  }
  *((_BYTE *)v9 + 432) = a3;
  if (a3)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("VRA not implemented without CoreVideo\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "VRA not implemented without CoreVideo\n");
    }
    v12 = 4294954386;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 8);
    v42 = a2;
    if (*((_BYTE *)v9 + 528) == 8)
    {
      if (*((_BYTE *)v9 + 529) == 8)
        v14 = 1;
      else
        v14 = 2;
    }
    else
    {
      v14 = 2;
    }
    v43 = v14;
    v15 = *(unsigned __int8 *)(v13 + 2117);
    sub_1C971FF04();
    v16 = v43 * v15;
    if ((int)(v43 * v15) >= (int)qword_1ED1ACCA8)
      v16 = qword_1ED1ACCA8;
    if (v16 <= 32)
      v17 = 32;
    else
      v17 = v16;
    v18 = *(_DWORD *)(v13 + 208);
    v19 = *(int *)(v13 + 204);
    v20 = v17 - 1;
    v21 = -v17;
    v22 = (v17 - 1 + (v19 + 142) * v43) & -v17;
    if ((v22 & 0x3FF) == 0 && v22 > 0x3FF)
      v24 = v17;
    else
      v24 = 0;
    v25 = v24 + v22;
    v26 = v17 + (v24 + v22) * (v18 + 143);
    v27 = *(unsigned __int8 *)(v13 + 201);
    v28 = (2 * (v24 + v22)) >> (v27 < 3);
    v29 = v17 + v28 * ((v18 >> (v27 < 2)) + 143);
    if (!*(_BYTE *)(v13 + 201))
    {
      v29 = 0;
      v28 = 0;
    }
    v40 = v28;
    v41 = v26;
    v30 = v29 + v26;
    v31 = *((_QWORD *)v9 + 90);
    v32 = *((_QWORD *)v9 + 91) - v31;
    if (v30 <= v32)
    {
      if (v30 < v32)
        *((_QWORD *)v9 + 91) = v31 + v30;
      v33 = v27;
    }
    else
    {
      sub_1C971BA44((unint64_t *)v9 + 90, v30 - v32);
      LODWORD(v19) = *(_DWORD *)(v13 + 204);
      v18 = *(_DWORD *)(v13 + 208);
      v33 = *(unsigned __int8 *)(v13 + 201);
      v31 = *((_QWORD *)v9 + 90);
    }
    v34 = (v17 + 71 * v43 - 1) & -(int)v17;
    *((_DWORD *)v9 + 130) = v19;
    *((_DWORD *)v9 + 131) = v18;
    if (v33)
      v35 = 2;
    else
      v35 = 1;
    *((_BYTE *)v9 + 530) = v35;
    *((_DWORD *)v9 + 186) = 71;
    v36 = v31 + v34 + 71 * v25;
    v37 = v31 + v41 + v40 * (0x47u >> (v27 < 2)) + ((unint64_t)(2 * v34) >> (v27 < 3));
    if (!v33)
      v37 = 0;
    v38 = v40 / v43;
    if (!v33)
      v38 = 0;
    *((_QWORD *)v9 + 52) = v25 / v43;
    *((_QWORD *)v9 + 53) = v38;
    *((_QWORD *)v9 + 50) = (v20 + v36) & v21;
    *((_QWORD *)v9 + 51) = (v20 + v37) & v21;
    *((_QWORD *)v9 + 63) = 0;
    *((_QWORD *)v9 + 64) = 0;
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a4 + 40))(*a4, *(_QWORD *)(v42 + 8), *(unsigned __int8 *)(v42 + 24));
    if (!(_DWORD)v12)
      goto LABEL_44;
  }
  if (*a4)
  {
    sub_1C9716408(v44, a4);
LABEL_43:
    *a4 = 0;
  }
LABEL_44:
  std::mutex::unlock(v45);
  return v12;
}

void sub_1C974B6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16)
{
  std::mutex::unlock(a16);
  _Unwind_Resume(a1);
}

void sub_1C974B6C0(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_1C9716408((_QWORD *)(a1 + 8), &v4);
  std::mutex::unlock(v3);
}

void sub_1C974B704(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_1C974B718(unint64_t a1)
{
  if (a1 >> 61)
    sub_1C9724B4C();
  return operator new(8 * a1);
}

void sub_1C974B74C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
}

uint64_t sub_1C974B798(uint64_t a1)
{
  void **v2;
  uint64_t i;
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E8291970;
  v2 = (void **)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 48); i; i = *(_QWORD *)(a1 + 48))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((*(_QWORD *)(a1 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(_QWORD *)(a1 + 40) & 0x1FFLL));
    ++*(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 48) = i - 1;
    sub_1C974B74C((uint64_t)v2);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v5 = *(void ***)(a1 + 16);
  v6 = *(void ***)(a1 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (char *)v6 - (char *)v5;
  if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
  {
    do
    {
      operator delete(*v5);
      v6 = *(void ***)(a1 + 24);
      v5 = (void **)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v5;
      v7 = (char *)v6 - (char *)v5;
    }
    while ((unint64_t)((char *)v6 - (char *)v5) > 0x10);
  }
  v8 = v7 >> 3;
  if (v8 == 1)
  {
    v9 = 256;
    goto LABEL_11;
  }
  if (v8 == 2)
  {
    v9 = 512;
LABEL_11:
    *(_QWORD *)(a1 + 40) = v9;
  }
  if (v5 != v6)
  {
    do
    {
      v10 = *v5++;
      operator delete(v10);
    }
    while (v5 != v6);
    v12 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    if (v11 != v12)
      *(_QWORD *)(a1 + 24) = v11 + ((v12 - v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  return a1;
}

uint64_t sub_1C974B8D0()
{
  return 0;
}

uint64_t sub_1C974B8D8(uint64_t *a1, int a2, _QWORD *a3)
{
  CFNumberRef v5;
  void *v6;
  const __CFDictionary *v7;
  int valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (a2)
  {
    valuePtr = 1496395842;
    v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v6 = (void *)*MEMORY[0x1E0CA9040];
    values = v5;
    keys[0] = v6;
    v7 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(v5);
  }
  else
  {
    v7 = 0;
  }
  return sub_1C96FC98C(a1, 1, v7, a3);
}

void sub_1C974B9B8(_QWORD *a1)
{
  sub_1C974C200(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C974B9DC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 432))
  {
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * a4 + 1200);
    v5 = a3;
    goto LABEL_5;
  }
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * a4 + 1200);
  v5 = a3;
  if (*(_QWORD *)(a1 + 400) == *(_QWORD *)(a1 + 440))
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 1176);
    return v4(a2, v5, v6);
  }
  v6 = *(_QWORD *)(a1 + 1192);
  return v4(a2, v5, v6);
}

uint64_t sub_1C974BA24(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1192);
}

unint64_t sub_1C974BA2C(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  size_t v8;
  size_t v9;
  char *BaseAddressOfPlane;
  unint64_t result;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v8 = a1 & ~(a1 >> 31);
  v33 = 0u;
  v34 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, (size_t *)&v33, (size_t *)&v33 + 1, (size_t *)&v34, (size_t *)&v34 + 1);
  if (Height >= a2)
    v9 = a2;
  else
    v9 = Height;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v12 = result >> 1;
  if (v9 > v8)
  {
    v13 = &BaseAddressOfPlane[2 * v12 * v8];
    v14 = &v13[2 * Width - 2];
    v15 = v33;
    v16 = -(uint64_t)v33;
    do
    {
      if ((_QWORD)v15)
      {
        v17 = *(_WORD *)v13;
        v18 = v16;
        do
          *(_WORD *)&v13[2 * v18] = v17;
        while (!__CFADD__(v18++, 1));
      }
      if (*((_QWORD *)&v15 + 1))
      {
        v20 = *(_WORD *)v14;
        v21 = 2 * Width;
        v22 = *((_QWORD *)&v15 + 1);
        do
        {
          *(_WORD *)&v13[v21] = v20;
          v21 += 2;
          --v22;
        }
        while (v22);
      }
      ++v8;
      v13 += 2 * v12;
      v14 += 2 * v12;
    }
    while (v8 != v9);
  }
  if (a1 < 1)
  {
    v23 = v34;
    if ((_QWORD)v34)
    {
      v24 = 0;
      v25 = &BaseAddressOfPlane[-2 * v34];
      v26 = &BaseAddressOfPlane[-2 * v34 + -2 * v12];
      do
      {
        result = (unint64_t)memcpy(v26, v25, 2 * Width + 4 * v23);
        v23 = v34;
        ++v24;
        v26 -= 2 * v12;
      }
      while ((unint64_t)v34 > v24);
    }
  }
  if (Height <= a2)
  {
    v27 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v28 = 0;
      v29 = &BaseAddressOfPlane[-2 * *((_QWORD *)&v34 + 1)];
      v30 = &v29[2 * v12 * (Height - 1)];
      v31 = 2 * Width;
      v32 = &v29[2 * Height * v12];
      do
      {
        result = (unint64_t)memcpy(v32, v30, v31 + 4 * v27);
        v27 = *((_QWORD *)&v34 + 1);
        ++v28;
        v32 += 2 * v12;
      }
      while (*((_QWORD *)&v34 + 1) > v28);
    }
  }
  return result;
}

uint64_t sub_1C974BC28(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  size_t v8;
  size_t v9;
  char *BaseAddressOfPlane;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  size_t __len[2];
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v8 = a1 & ~(a1 >> 31);
  *(_OWORD *)__len = 0u;
  v25 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, __len, &__len[1], (size_t *)&v25, (size_t *)&v25 + 1);
  if (Height >= a2)
    v9 = a2;
  else
    v9 = Height;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v12 = result;
  v13 = v9 > v8;
  v14 = v9 - v8;
  if (v13)
  {
    v15 = &BaseAddressOfPlane[result * v8];
    do
    {
      memset(&v15[-__len[0]], *v15, __len[0]);
      result = (uint64_t)memset(&v15[Width], v15[Width - 1], __len[1]);
      v15 += v12;
      --v14;
    }
    while (v14);
  }
  if (a1 < 1)
  {
    v16 = v25;
    if ((_QWORD)v25)
    {
      v17 = 0;
      v18 = &BaseAddressOfPlane[-v25];
      v19 = &BaseAddressOfPlane[-v12 - v25];
      do
      {
        result = (uint64_t)memcpy(v19, v18, Width + 2 * v16);
        v16 = v25;
        ++v17;
        v19 -= v12;
      }
      while ((unint64_t)v25 > v17);
    }
  }
  if (Height <= a2)
  {
    v20 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v21 = 0;
      v22 = &BaseAddressOfPlane[v12 * (Height - 1) - *((_QWORD *)&v25 + 1)];
      v23 = &BaseAddressOfPlane[v12 * Height - *((_QWORD *)&v25 + 1)];
      do
      {
        result = (uint64_t)memcpy(v23, v22, Width + 2 * v20);
        v20 = *((_QWORD *)&v25 + 1);
        ++v21;
        v23 += v12;
      }
      while (*((_QWORD *)&v25 + 1) > v21);
    }
  }
  return result;
}

unint64_t sub_1C974BDDC(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  char *BaseAddressOfPlane;
  unint64_t result;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64x2_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64x2_t v34;
  uint64x2_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v34 = 0u;
  v35 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, (size_t *)&v34, &v34.u64[1], (size_t *)&v35, &v35.u64[1]);
  v8 = a1 & ~(a1 >> 31);
  v34 = vshrq_n_u64(v34, 1uLL);
  v35 = vshrq_n_u64(v35, 1uLL);
  v9 = Width >> 1;
  v10 = Height >> 1;
  if (v10 >= a2)
    v11 = a2;
  else
    v11 = v10;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  v14 = result >> 2;
  if (v11 > v8)
  {
    v15 = &BaseAddressOfPlane[4 * v14 * v8];
    v16 = &v15[4 * v9 - 4];
    v17 = v34;
    v18 = -v34.i64[0];
    do
    {
      if (v17.i64[0])
      {
        v19 = *(_DWORD *)v15;
        v20 = v18;
        do
          *(_DWORD *)&v15[4 * v20] = v19;
        while (!__CFADD__(v20++, 1));
      }
      if (v17.i64[1])
      {
        v22 = *(_DWORD *)v16;
        v23 = 4 * v9;
        v24 = v17.i64[1];
        do
        {
          *(_DWORD *)&v15[v23] = v22;
          v23 += 4;
          --v24;
        }
        while (v24);
      }
      ++v8;
      v15 += 4 * v14;
      v16 += 4 * v14;
    }
    while (v8 != v11);
  }
  if (a1 < 1)
  {
    v25 = v35.i64[0];
    if (v35.i64[0])
    {
      v26 = 0;
      v27 = &BaseAddressOfPlane[-4 * v35.i64[0]];
      v28 = &BaseAddressOfPlane[-4 * v35.i64[0] + -4 * v14];
      do
      {
        result = (unint64_t)memcpy(v28, v27, 4 * v9 + 8 * v25);
        v25 = v35.i64[0];
        ++v26;
        v28 -= 4 * v14;
      }
      while (v35.i64[0] > v26);
    }
  }
  if (v10 <= a2)
  {
    v29 = v35.i64[1];
    if (v35.i64[1])
    {
      v30 = 0;
      v31 = &BaseAddressOfPlane[-4 * v35.i64[1]];
      v32 = &v31[4 * v14 * (v10 - 1)];
      v33 = &v31[4 * v14 * v10];
      do
      {
        result = (unint64_t)memcpy(v33, v32, 4 * v9 + 8 * v29);
        v29 = v35.i64[1];
        ++v30;
        v33 += 4 * v14;
      }
      while (v35.i64[1] > v30);
    }
  }
  return result;
}

unint64_t sub_1C974BFF0(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  size_t v8;
  size_t v9;
  size_t v10;
  char *BaseAddressOfPlane;
  unint64_t result;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64x2_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  uint64x2_t v34;
  uint64x2_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v34 = 0u;
  v35 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, (size_t *)&v34, &v34.u64[1], (size_t *)&v35, &v35.u64[1]);
  v8 = a1 & ~(a1 >> 31);
  v34 = vshrq_n_u64(v34, 1uLL);
  v35 = vshrq_n_u64(v35, 1uLL);
  v9 = Height >> 1;
  if (Height >> 1 >= a2)
    v10 = a2;
  else
    v10 = Height >> 1;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  v13 = result >> 1;
  if (v10 > v8)
  {
    v14 = &BaseAddressOfPlane[2 * v13 * v8];
    v15 = &v14[(Width & 0xFFFFFFFFFFFFFFFELL) - 2];
    v16 = v34;
    v17 = -v34.i64[0];
    do
    {
      if (v16.i64[0])
      {
        v18 = *(_WORD *)v14;
        v19 = v17;
        do
          *(_WORD *)&v14[2 * v19] = v18;
        while (!__CFADD__(v19++, 1));
      }
      if (v16.i64[1])
      {
        v21 = *(_WORD *)v15;
        v22 = Width & 0xFFFFFFFFFFFFFFFELL;
        v23 = v16.i64[1];
        do
        {
          *(_WORD *)&v14[v22] = v21;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      ++v8;
      v14 += 2 * v13;
      v15 += 2 * v13;
    }
    while (v8 != v10);
  }
  if (a1 < 1)
  {
    v24 = v35.i64[0];
    if (v35.i64[0])
    {
      v25 = 0;
      v26 = &BaseAddressOfPlane[-2 * v35.i64[0]];
      v27 = &BaseAddressOfPlane[-2 * v35.i64[0] + -2 * v13];
      do
      {
        result = (unint64_t)memcpy(v27, v26, (Width & 0xFFFFFFFFFFFFFFFELL) + 4 * v24);
        v24 = v35.i64[0];
        ++v25;
        v27 -= 2 * v13;
      }
      while (v35.i64[0] > v25);
    }
  }
  if (v9 <= a2)
  {
    v28 = v35.i64[1];
    if (v35.i64[1])
    {
      v29 = 0;
      v30 = &BaseAddressOfPlane[-2 * v35.i64[1]];
      v31 = &v30[2 * v13 * (v9 - 1)];
      v32 = Width & 0xFFFFFFFFFFFFFFFELL;
      v33 = &v30[2 * v13 * v9];
      do
      {
        result = (unint64_t)memcpy(v33, v31, v32 + 4 * v28);
        v28 = v35.i64[1];
        ++v29;
        v33 += 2 * v13;
      }
      while (v35.i64[1] > v29);
    }
  }
  return result;
}

uint64_t sub_1C974C200(_QWORD *a1)
{
  *a1 = &off_1E82916F0;
  sub_1C97170AC((uint64_t)a1);
  return sub_1C9747750((uint64_t)a1);
}

void sub_1C974C238(uint64_t a1)
{
  sub_1C974C328(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C974C25C(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = sub_1C971648C(a1, a2, 0, a3, &v6, 0, 0, 0, 0);
  *a4 = v6;
  return result;
}

void sub_1C974C2AC(_QWORD *a1)
{
  if (dword_1ED1ACCC0 >= 4)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Stride of %zd bytes is very aligned, this may cause slowdown\n", *a1);
    syslog(28, "Stride of %zd bytes is very aligned, this may cause slowdown\n", *a1);
  }
}

uint64_t sub_1C974C318(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t sub_1C974C328(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E82914B0;
  CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a1 + 120));
  return sub_1C974B798(a1);
}

void sub_1C974C364(_QWORD *a1)
{
  sub_1C974C6D4(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C974C388(uint64_t a1, __CVBuffer *a2, int64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = 0;
  v8 = sub_1C971648C(*(_QWORD *)(a1 + 48), a1, 1, *(unsigned __int8 *)(a1 + 25), &v23, a2, a3, a4, a5);
  if (!(_DWORD)v8)
  {
    v10 = v23;
    v12 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_QWORD *)&v21 = v12;
    *((_QWORD *)&v21 + 1) = v11;
    sub_1C974C55C(&v22, v10, &v21);
    sub_1C974C5FC(a6, &v22);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  return v8;
}

void sub_1C974C4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_1C972CFE0((uint64_t)va1);
  sub_1C972CFE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C974C4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, 0, 0, a3);
}

uint64_t sub_1C974C510(uint64_t a1, CVBufferRef buffer)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;

  v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4)
    CVBufferSetAttachments(buffer, v4, kCVAttachmentMode_ShouldPropagate);
  v5 = *(const __CFDictionary **)(a1 + 40);
  if (v5)
    CVBufferSetAttachments(buffer, v5, kCVAttachmentMode_ShouldNotPropagate);
  return 0;
}

_QWORD *sub_1C974C55C(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  *a1 = a2;
  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)v6 = &off_1E8291BF0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_OWORD *)(v6 + 32) = v7;
  a1[1] = v6;
  return a1;
}

void sub_1C974C5C8(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 24))(*v2, v1);
  __cxa_rethrow();
}

void sub_1C974C5E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1C974C5FC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1C974C660(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291BF0;
  sub_1C972CFE0((uint64_t)&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

void sub_1C974C690(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8291BF0;
  sub_1C972CFE0((uint64_t)&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C974C6D4(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_1E82917D0;
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = off_1E82913F8;
  sub_1C972CFE0((uint64_t)(a1 + 1));
  return a1;
}

void sub_1C974C76C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C974C790(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C974C7AC(int a1, int a2, int a3)
{
  unint64_t v6;
  __CFDictionary *v7;
  uint64_t v8;
  uint64_t v10;
  __CFDictionary *v11;
  _QWORD *v12;
  _QWORD v13[2];

  v10 = 0;
  v11 = 0;
  v6 = atomic_load(&qword_1EF920E00);
  if (v6 != -1)
  {
    v13[0] = sub_1C974C884;
    v13[1] = &v10;
    v12 = v13;
    std::__call_once(&qword_1EF920E00, &v12, (void (__cdecl *)(void *))sub_1C974CC9C);
  }
  sub_1C96FDD98(a1, a2, 0, 0, &v11);
  v7 = v11;
  v8 = sub_1C974CCAC(a3, v11);
  if (!(_DWORD)v8)
  {
    v8 = VTEncoderSessionSetPixelBufferAttributes();
    if (!v7)
      return v8;
    goto LABEL_5;
  }
  if (v7)
LABEL_5:
    CFRelease(v7);
  return v8;
}

void sub_1C974C884()
{
  const __CFAllocator *v0;
  CFDataRef v1;
  CFDataRef v2;
  CFDataRef v3;
  CFDataRef v4;
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  CFArrayRef v10;
  CFArrayRef v11;
  BOOL v12;
  CFNumberRef v19;
  CFNumberRef v20;
  const void *v21;
  const void *v22;
  const void *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  const void *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  const __CFData *value;
  const __CFData *v34;
  int valuePtr;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v1 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)"@", 2, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v2 = CFDataCreateWithBytesNoCopy(0, byte_1C983221E, 4, v0);
  v3 = CFDataCreateWithBytesNoCopy(0, byte_1E8291FE0, 24, v0);
  v4 = CFDataCreateWithBytesNoCopy(0, byte_1E8291FF8, 24, v0);
  v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = CFDictionaryCreateMutable(0, 0, v5, v6);
  v9 = CFDictionaryCreateMutable(0, 0, v5, v6);
  values[0] = v8;
  values[1] = v9;
  v10 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E0C9B378]);
  v11 = v10;
  if (v1)
    v12 = v2 == 0;
  else
    v12 = 1;
  if (v12 || v3 == 0 || v4 == 0 || Mutable == 0 || v8 == 0 || v9 == 0 || v10 == 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Failed to register 10-bit pixel format; 10-bit decodes will fail.\n",
        0x42uLL,
        1uLL,
        (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Failed to register 10-bit pixel format; 10-bit decodes will fail.\n");
    }
    if (!v1)
    {
      if (!v2)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  else
  {
    value = v2;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9168], (const void *)*MEMORY[0x1E0C9AE40]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA91B0], v11);
    valuePtr = 1496395842;
    v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v19)
    {
      v20 = v19;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9160], v19);
      CFRelease(v20);
    }
    v21 = (const void *)*MEMORY[0x1E0CA90F8];
    v34 = v1;
    CFDictionaryAddValue(v8, (const void *)*MEMORY[0x1E0CA90F8], v1);
    v22 = (const void *)*MEMORY[0x1E0CA9198];
    CFDictionaryAddValue(v8, (const void *)*MEMORY[0x1E0CA9198], v3);
    v23 = (const void *)*MEMORY[0x1E0CA90E8];
    valuePtr = 16;
    v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v24)
    {
      v25 = v24;
      CFDictionaryAddValue(v8, v23, v24);
      CFRelease(v25);
    }
    v26 = v21;
    v2 = value;
    CFDictionaryAddValue(v9, v26, value);
    CFDictionaryAddValue(v9, v22, v4);
    valuePtr = 32;
    v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v27)
    {
      v28 = v27;
      CFDictionaryAddValue(v9, v23, v27);
      CFRelease(v28);
    }
    valuePtr = 2;
    v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v29)
    {
      v30 = v29;
      CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E0CA91A0], v29);
      CFRelease(v30);
    }
    valuePtr = 2;
    v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v1 = v34;
    if (v31)
    {
      v32 = v31;
      CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E0CA91B8], v31);
      CFRelease(v32);
    }
    CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(Mutable, 0x59313042u);
  }
  CFRelease(v1);
  if (v2)
LABEL_28:
    CFRelease(v2);
LABEL_29:
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v11)
    CFRelease(v11);
}

uint64_t sub_1C974CC9C(uint64_t (***a1)(_QWORD))
{
  return (**a1)(0);
}

uint64_t sub_1C974CCAC(int a1, __CFDictionary *a2)
{
  CFMutableArrayRef Mutable;
  uint64_t v5;
  __CFArray *v6;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  CFNumberRef v11;
  CFNumberRef v12;
  int v13;
  uint64_t v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  char v19;
  int v20;
  uint64_t v21;
  char v22;
  CFNumberRef v23;
  CFNumberRef v24;
  uint64_t v25;
  int v26;
  CFNumberRef v27;
  CFNumberRef v28;
  int valuePtr;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
    v5 = 0;
  else
    v5 = 4294954392;
  if (Mutable)
  {
    v6 = Mutable;
    if ((a1 & 0xFFFFFFFD) == 1)
    {
      v7 = 0;
      v8 = 875704422;
      v9 = 1;
      while (1)
      {
        v10 = v7;
        valuePtr = v8;
        v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (!v11)
          break;
        v12 = v11;
        CFArrayAppendValue(v6, v11);
        CFRelease(v12);
        v8 = *(_DWORD *)&aF024v024[4 * v9];
        v7 = 1;
        v9 = 2;
        if ((v10 & 1) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      switch(a1)
      {
        case 2020:
          valuePtr = 1278226488;
          v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v17)
          {
            v18 = v17;
            CFArrayAppendValue(v6, v17);
            CFRelease(v18);
LABEL_27:
            CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0CA9040], v6);
            goto LABEL_29;
          }
          break;
        case 1892:
          v19 = 0;
          v20 = 1278226736;
          v21 = 1;
          while (1)
          {
            v22 = v19;
            valuePtr = v20;
            v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (!v23)
              break;
            v24 = v23;
            CFArrayAppendValue(v6, v23);
            CFRelease(v24);
            v20 = *(_DWORD *)&a010l800l[4 * v21];
            v19 = 1;
            v21 = 2;
            if ((v22 & 1) != 0)
              goto LABEL_27;
          }
          break;
        case 2:
          v13 = 2016686640;
          v14 = 4u;
          while (1)
          {
            valuePtr = v13;
            v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (!v15)
              break;
            v16 = v15;
            CFArrayAppendValue(v6, v15);
            CFRelease(v16);
            v13 = *(_DWORD *)&a024x02fx612vv0[v14];
            v14 += 4;
            if (v14 == 28)
              goto LABEL_27;
          }
          break;
        default:
          v25 = 0;
          v26 = 2016686640;
          while (1)
          {
            valuePtr = v26;
            v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (!v27)
              break;
            v28 = v27;
            CFArrayAppendValue(v6, v27);
            CFRelease(v28);
            v26 = *(_DWORD *)&a024x02fx612vf0[v25 + 4];
            v25 += 4;
            if (v25 == 32)
              goto LABEL_27;
          }
          break;
      }
    }
    v5 = 4294954392;
LABEL_29:
    CFRelease(v6);
    return v5;
  }
  return 4294954392;
}

uint64_t sub_1C974CF1C(__CVBuffer *a1)
{
  size_t Height;

  Height = CVPixelBufferGetHeight(a1);
  sub_1C974BDDC(0, Height >> 1, a1);
  return 1;
}

uint64_t sub_1C974CF50(__CVBuffer *a1)
{
  size_t Height;

  Height = CVPixelBufferGetHeight(a1);
  sub_1C974BA2C(0, Height, a1);
  return 1;
}

uint64_t sub_1C974CF84(int a1)
{
  uint64_t v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  BOOL v8;
  uint64_t v9;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  uint64_t valuePtr;

  sub_1C971FF04();
  if ((unint64_t)qword_1ED1ACCA8 >= 0x40)
    v2 = 64;
  else
    v2 = qword_1ED1ACCA8;
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = CFDictionaryCreateMutable(0, 0, v3, v4);
  v7 = v6;
  if (Mutable)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    valuePtr = v2;
    v11 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v11)
    {
      v12 = v11;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8F68], v11);
      CFRelease(v12);
    }
    valuePtr = v2;
    v13 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v13)
    {
      v14 = v13;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9048], v13);
      CFRelease(v14);
    }
    v9 = sub_1C974CCAC(a1, Mutable);
    if (!(_DWORD)v9)
    {
      LODWORD(valuePtr) = 0xFFFFFFF;
      v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v15)
      {
        v16 = v15;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC48], v15);
        CFRelease(v16);
      }
      LODWORD(valuePtr) = 0xFFFFFFF;
      v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v17)
      {
        v18 = v17;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC50], v17);
        CFRelease(v18);
      }
      LODWORD(valuePtr) = 2;
      v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v19)
      {
        v20 = v19;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC58], v19);
        CFRelease(v20);
      }
      LODWORD(valuePtr) = 2;
      v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v21)
      {
        v22 = v21;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC60], v21);
        CFRelease(v22);
      }
      LODWORD(valuePtr) = 64;
      v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v23)
      {
        v24 = v23;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC78], v23);
        CFRelease(v24);
      }
      LODWORD(valuePtr) = 16;
      v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v25)
      {
        v26 = v25;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC70], v25);
        CFRelease(v26);
      }
      LODWORD(valuePtr) = 0x7FFFFFFF;
      v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v27)
      {
        v28 = v27;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC40], v27);
        CFRelease(v28);
      }
      LODWORD(valuePtr) = 0x7FFFFFFF;
      v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v29)
      {
        v30 = v29;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC30], v29);
        CFRelease(v30);
      }
      valuePtr = 0x7FFFFFFFFFFFFFFFLL;
      v31 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v31)
      {
        v32 = v31;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC38], v31);
        CFRelease(v32);
      }
      valuePtr = v2;
      v33 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v33)
      {
        v34 = v33;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC68], v33);
        CFRelease(v34);
      }
      CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CEDC18], (const void *)*MEMORY[0x1E0C9AE40]);
      v9 = VTTileEncoderSessionSetTileEncodeRequirements();
    }
LABEL_39:
    CFRelease(Mutable);
    if (!v7)
      return v9;
    goto LABEL_11;
  }
  v9 = 4294954392;
  if (Mutable)
    goto LABEL_39;
  if (v6)
LABEL_11:
    CFRelease(v7);
  return v9;
}

void sub_1C974D380(_QWORD *a1)
{
  sub_1C974D3A4(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C974D3A4(_QWORD *a1)
{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = off_1E8291850;
  sub_1C972CFE0((uint64_t)(a1 + 273));
  for (i = 271; i != 207; i -= 2)
    sub_1C972CFE0((uint64_t)&a1[i]);
  v3 = (void *)a1[201];
  if (v3)
  {
    a1[202] = v3;
    operator delete(v3);
  }
  sub_1C972CFE0((uint64_t)(a1 + 198));
  v4 = (void *)a1[148];
  if (v4)
  {
    a1[149] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[76];
  if (v5)
  {
    a1[77] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[72];
  if (v6)
  {
    a1[73] = v6;
    operator delete(v6);
  }
  sub_1C972CFE0((uint64_t)(a1 + 4));
  sub_1C972CFE0((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_1C974D448(uint64_t result, __int16 *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  __int16 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  unsigned int v21;

  v10 = result;
  v11 = *(_QWORD **)(result + 8);
  v12 = v11[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    v13 = (unsigned __int8 *)(v11[118] + v11[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    v14 = a5 >> 2;
    v15 = &a2[-6 * v12];
    do
    {
      result = sub_1C974D928(a2, v15, v10 + 2224);
      v16 = *v13;
      if (v16 <= result)
        LOBYTE(v16) = result;
      *v13++ = v16;
      v15 += 6;
      --v14;
    }
    while (v14);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    v17 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 968)
                            + *(_QWORD *)(*(_QWORD *)(v10 + 8) + 936) * ((uint64_t)a3 >> 3)
                            + (a4 >> 2));
    v18 = a6 >> 2;
    v19 = v10 + 2224;
    v20 = a2 - 6;
    do
    {
      result = sub_1C974D928(a2, v20, v19);
      v21 = *v17;
      if (v21 <= result)
        LOBYTE(v21) = result;
      *v17++ = v21;
      v20 += 6 * v12;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C974D57C(uint64_t result, __int16 *a2, int a3, int a4, int a5, int a6)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int16 *v10;
  int v11;
  unsigned int v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;

  v6 = *(_QWORD **)(result + 8);
  v7 = v6[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    v8 = (_BYTE *)(v6[118] + v6[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    v9 = a5 >> 2;
    v10 = &a2[-6 * v7];
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result + 2224 + (v10[4] & 0xF)))
        goto LABEL_9;
      v11 = *a2 - *v10;
      if (v11 < 0)
        v11 = *v10 - *a2;
      if (v11 <= 3)
      {
        v13 = a2[1] - v10[1];
        if (v13 < 0)
          v13 = v10[1] - a2[1];
        v12 = v13 > 3;
      }
      else
      {
LABEL_9:
        v12 = 1;
      }
      v10 += 6;
      if (*v8 > v12)
        LOBYTE(v12) = *v8;
      *v8++ = v12;
      --v9;
    }
    while (v9);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 968)
                  + *(_QWORD *)(*(_QWORD *)(result + 8) + 936) * ((uint64_t)a3 >> 3)
                  + (a4 >> 2));
    v15 = a6 >> 2;
    v16 = a2 - 2;
    v17 = 12 * v7;
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result
                                                                                     + 2224
                                                                                     + (*(_BYTE *)v16 & 0xF)))
        goto LABEL_24;
      v18 = *a2 - *(v16 - 4);
      if (v18 < 0)
        v18 = *(v16 - 4) - *a2;
      if (v18 <= 3)
      {
        v20 = a2[1] - *(v16 - 3);
        if (v20 < 0)
          v20 = *(v16 - 3) - a2[1];
        v19 = v20 > 3;
      }
      else
      {
LABEL_24:
        v19 = 1;
      }
      v16 = (__int16 *)((char *)v16 + v17);
      if (*v14 > v19)
        LOBYTE(v19) = *v14;
      *v14++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_1C974D6F8(uint64_t result, __int16 *a2, int a3, int a4, int a5, int a6)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int16 *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;

  v6 = *(_QWORD **)(result + 8);
  v7 = v6[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    v8 = (_BYTE *)(v6[118] + v6[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    v9 = a5 >> 2;
    v10 = &a2[-6 * v7 + 2];
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result + 2224 + (v10[2] & 0xF))
        || *(unsigned __int8 *)(result + 2240 + (*((_BYTE *)a2 + 9) & 0xF)) != *(unsigned __int8 *)(result
                                                                                                  + 2240
                                                                                                  + (*((_BYTE *)v10 + 5) & 0xF)))
      {
        goto LABEL_16;
      }
      v11 = *(v10 - 2) - *a2;
      if (v11 < 0)
        v11 = *a2 - *(v10 - 2);
      if (v11 > 3)
        goto LABEL_16;
      v12 = *(v10 - 1) - a2[1];
      if (v12 < 0)
        v12 = a2[1] - *(v10 - 1);
      if (v12 > 3)
        goto LABEL_16;
      v13 = *v10 - a2[2];
      if (v13 < 0)
        v13 = a2[2] - *v10;
      if (v13 <= 3)
      {
        v15 = v10[1] - a2[3];
        if (v15 < 0)
          v15 = a2[3] - v10[1];
        v14 = v15 > 3;
      }
      else
      {
LABEL_16:
        v14 = 1;
      }
      if (*v8 > v14)
        LOBYTE(v14) = *v8;
      *v8++ = v14;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    v16 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 968)
                  + *(_QWORD *)(*(_QWORD *)(result + 8) + 936) * ((uint64_t)a3 >> 3)
                  + (a4 >> 2));
    v17 = a6 >> 2;
    v18 = a2 - 3;
    v19 = 12 * v7;
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result + 2224 + (v18[1] & 0xF))
        || *(unsigned __int8 *)(result + 2240 + (*((_BYTE *)a2 + 9) & 0xF)) != *(unsigned __int8 *)(result
                                                                                                  + 2240
                                                                                                  + (*((_BYTE *)v18 + 3) & 0xF)))
      {
        goto LABEL_39;
      }
      v20 = *(v18 - 3) - *a2;
      if (v20 < 0)
        v20 = *a2 - *(v18 - 3);
      if (v20 > 3)
        goto LABEL_39;
      v21 = *(v18 - 2) - a2[1];
      if (v21 < 0)
        v21 = a2[1] - *(v18 - 2);
      if (v21 > 3)
        goto LABEL_39;
      v22 = *(v18 - 1) - a2[2];
      if (v22 < 0)
        v22 = a2[2] - *(v18 - 1);
      if (v22 <= 3)
      {
        v24 = *v18 - a2[3];
        if (v24 < 0)
          v24 = a2[3] - *v18;
        v23 = v24 > 3;
      }
      else
      {
LABEL_39:
        v23 = 1;
      }
      if (*v16 > v23)
        LOBYTE(v23) = *v16;
      *v16++ = v23;
      v18 = (__int16 *)((char *)v18 + v19);
      --v17;
    }
    while (v17);
  }
  return result;
}

BOOL sub_1C974D928(__int16 *a1, __int16 *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int16 *v20;
  int v21;
  int v22;
  int v23;
  int v25;

  v3 = *(unsigned __int8 *)(a3 + (a1[4] & 0xF));
  v4 = *(unsigned __int8 *)(a3 + 16 + (*((_BYTE *)a1 + 9) & 0xF));
  v5 = *(unsigned __int8 *)(a3 + (a2[4] & 0xF));
  v6 = *(unsigned __int8 *)(a3 + 16 + (*((_BYTE *)a2 + 9) & 0xF));
  if (v3 != v5 || v4 != v6)
  {
    if (v3 != v6 || v4 != v5)
      return 1;
    if (v3 != v4)
    {
      v9 = a2[2] - *a1;
      if (v9 < 0)
        v9 = *a1 - a2[2];
      if (v9 > 3)
        return 1;
      v10 = a2[3] - a1[1];
      if (v10 < 0)
        v10 = a1[1] - a2[3];
      if (v10 > 3)
        return 1;
      v11 = *a2;
LABEL_37:
      v19 = v11 - a1[2];
      if (v19 < 0)
        v19 = -v19;
      if (v19 > 3)
        return 1;
      v20 = a2 + 1;
      goto LABEL_52;
    }
LABEL_19:
    v11 = *a2;
    v12 = *a1;
    v13 = v11 - v12;
    if (v11 - v12 < 0)
      v13 = v12 - v11;
    if (v13 <= 3)
    {
      v14 = a2[1] - a1[1];
      if (v14 < 0)
        v14 = a1[1] - a2[1];
      if (v14 <= 3)
      {
        v15 = a2[2] - a1[2];
        if (v15 < 0)
          v15 = a1[2] - a2[2];
        if (v15 <= 3)
        {
          v16 = a2[3] - a1[3];
          if (v16 < 0)
            v16 = a1[3] - a2[3];
          if (v16 < 4)
            return 0;
        }
      }
    }
    v17 = a2[2] - v12;
    if (v17 < 0)
      v17 = -v17;
    if (v17 > 3)
      return 1;
    v18 = a2[3] - a1[1];
    if (v18 < 0)
      v18 = a1[1] - a2[3];
    if (v18 > 3)
      return 1;
    goto LABEL_37;
  }
  if (v3 == v4)
    goto LABEL_19;
  v21 = *a2 - *a1;
  if (v21 < 0)
    v21 = *a1 - *a2;
  if (v21 > 3)
    return 1;
  v22 = a2[1] - a1[1];
  if (v22 < 0)
    v22 = a1[1] - a2[1];
  if (v22 > 3)
    return 1;
  v23 = a2[2] - a1[2];
  if (v23 < 0)
    v23 = a1[2] - a2[2];
  if (v23 > 3)
    return 1;
  v20 = a2 + 3;
LABEL_52:
  v25 = *v20 - a1[3];
  if (v25 < 0)
    v25 = -v25;
  return v25 > 3;
}

uint64_t sub_1C974DADC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  BOOL v78;
  uint64_t result;
  int v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  int v102;
  uint64_t (**v103)(uint64_t, __int16 *, int, int, int, int);
  int v104;
  uint64_t (*v106)(uint64_t, __int16 *, int, int, int, int);
  uint64_t v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _BYTE v117[2];
  _OWORD v118[16];
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2 <= *(char *)(a1 + 516))
    v6 = *(char *)(a1 + 516);
  else
    v6 = *a2;
  if (*(_BYTE *)(a1 + 48))
  {
    if (v5 > 0)
    {
      v112 = a3;
      v7 = 15;
      v6 = 15;
      goto LABEL_7;
    }
LABEL_117:
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("No active refs but we expect them\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "No active refs but we expect them\n");
    }
    return 4294954387;
  }
  result = 0;
  v80 = *(char *)(a1 + 517);
  if (v5 > v80)
    v80 = *a2;
  if (*(_BYTE *)(a1 + 58))
    v7 = 0;
  else
    v7 = v80;
  if (*(_BYTE *)(a1 + 58) == 2)
    return result;
  if (v5 < 1)
    goto LABEL_117;
  if (v6 >= 16)
  {
    if (dword_1ED1ACCC0 >= 3)
      goto LABEL_170;
    return 4294954387;
  }
  if (v7 >= 16)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
LABEL_170:
      fwrite("Too many active refs!\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Too many active refs!\n");
    }
    return 4294954387;
  }
  v112 = a3;
LABEL_7:
  v8 = (_QWORD *)(a1 + 2200);
  *(_QWORD *)&v118[0] = a1 + 2200;
  DWORD2(v118[0]) = 0;
  sub_1C9747914((uint64_t)v118);
  v9 = (_QWORD *)(a1 + 2208);
  *(_QWORD *)&v118[0] = a1 + 2208;
  DWORD2(v118[0]) = 0;
  sub_1C9747914((uint64_t)v118);
  v113 = v7;
  if (v6 >= 1)
  {
    LODWORD(v10) = 0;
    v114 = a1 + 1672;
    v11 = v6;
    v115 = v6;
    do
    {
      if ((int)a2[1] >= 1)
      {
        v12 = 0;
        v13 = (int)v10;
        v14 = (_QWORD *)(v114 + 16 * (int)v10);
        v15 = (uint64_t *)(a2 + 8);
        do
        {
          v16 = sub_1C9746DB4(v14, *(v15 - 1), *v15);
          ++v12;
          v10 = v13 + v12;
          v14 = v16 + 2;
          v15 += 2;
        }
        while (v12 < (int)a2[1] && v10 < v11);
        v6 = v115;
      }
      if ((int)a2[2] >= 1 && (int)v10 < v6)
      {
        v19 = 0;
        v20 = (int)v10;
        v21 = (_QWORD *)(v114 + 16 * (int)v10);
        v22 = (uint64_t *)(a2 + 72);
        do
        {
          v23 = sub_1C9746DB4(v21, *(v22 - 1), *v22);
          ++v19;
          v10 = v20 + v19;
          v21 = v23 + 2;
          v22 += 2;
        }
        while (v19 < (int)a2[2] && v10 < v11);
        v6 = v115;
      }
      if ((int)a2[3] >= 1 && (int)v10 < v6)
      {
        v26 = 0;
        v27 = (int)v10;
        v28 = (_QWORD *)(v114 + 16 * (int)v10);
        v29 = (uint64_t *)(a2 + 136);
        do
        {
          v30 = v27 + v26;
          v31 = sub_1C9746DB4(v28, *(v29 - 1), *v29);
          *v8 |= 1 << (v27 + v26++);
          v28 = v31 + 2;
          v29 += 2;
        }
        while (v26 < (int)a2[3] && v30 + 1 < v11);
        LODWORD(v10) = v27 + v26;
        v7 = v113;
        v6 = v115;
      }
    }
    while ((int)v10 < v6);
  }
  if (v7 >= 1)
  {
    LODWORD(v33) = 0;
    v116 = a1 + 1928;
    v34 = v7;
    do
    {
      if ((int)a2[2] >= 1)
      {
        v35 = 0;
        v36 = (int)v33;
        v37 = (uint64_t *)(a2 + 72);
        v38 = (_QWORD *)(v116 + 16 * (int)v33);
        do
        {
          v39 = sub_1C9746DB4(v38, *(v37 - 1), *v37);
          ++v35;
          v33 = v36 + v35;
          v38 = v39 + 2;
          v37 += 2;
        }
        while (v35 < (int)a2[2] && v33 < v34);
      }
      if ((int)a2[1] >= 1 && (int)v33 < v7)
      {
        v42 = 0;
        v43 = (int)v33;
        v44 = (_QWORD *)(v116 + 16 * (int)v33);
        v45 = (uint64_t *)(a2 + 8);
        do
        {
          v46 = sub_1C9746DB4(v44, *(v45 - 1), *v45);
          ++v42;
          v33 = v43 + v42;
          v44 = v46 + 2;
          v45 += 2;
        }
        while (v42 < (int)a2[1] && v33 < v34);
      }
      if ((int)a2[3] >= 1 && (int)v33 < v7)
      {
        v49 = 0;
        v50 = (int)v33;
        v51 = (_QWORD *)(v116 + 16 * (int)v33);
        v52 = (uint64_t *)(a2 + 136);
        do
        {
          v53 = v50 + v49;
          v54 = sub_1C9746DB4(v51, *(v52 - 1), *v52);
          *v9 |= 1 << (v50 + v49++);
          v51 = v54 + 2;
          v52 += 2;
        }
        while (v49 < (int)a2[3] && v53 + 1 < v34);
        LODWORD(v33) = v50 + v49;
        v7 = v113;
      }
    }
    while ((int)v33 < v7);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    *(_OWORD *)(v112 + 232) = 0u;
    *(_OWORD *)(v112 + 328) = 0u;
    *(_OWORD *)(v112 + 344) = 0u;
    *(_OWORD *)(v112 + 296) = 0u;
    *(_OWORD *)(v112 + 312) = 0u;
    *(_OWORD *)(v112 + 264) = 0u;
    *(_OWORD *)(v112 + 280) = 0u;
    *(_OWORD *)(v112 + 248) = 0u;
    v56 = (uint64_t *)(v112 + 360);
    *(_QWORD *)&v118[0] = v112 + 360;
    DWORD2(v118[0]) = 0;
    sub_1C9747914((uint64_t)v118);
    v57 = (uint64_t *)(v112 + 368);
    *(_QWORD *)&v118[0] = v112 + 368;
    DWORD2(v118[0]) = 0;
    sub_1C9747914((uint64_t)v118);
    v58 = 0;
    v59 = (_DWORD *)(v112 + 296);
    v60 = a1 + 1928;
    do
    {
      v61 = *(_QWORD *)(v60 - 256);
      if (v61)
      {
        *(v59 - 16) = *(_DWORD *)(v61 + 1024);
        v62 = 1 << v58;
        if ((*v8 & (1 << v58)) != 0)
          v63 = *v56 | v62;
        else
          v63 = *v56 & ~v62;
        *v56 = v63;
      }
      if (*(_QWORD *)v60)
      {
        *v59 = *(_DWORD *)(*(_QWORD *)v60 + 1024);
        v64 = 1 << v58;
        if ((*v9 & (1 << v58)) != 0)
          v65 = *v57 | v64;
        else
          v65 = *v57 & ~v64;
        *v57 = v65;
      }
      ++v58;
      ++v59;
      v60 += 16;
    }
    while (v58 != 16);
    v66 = 0;
    v67 = 0;
    v68 = 1;
    v69 = 1;
    do
    {
      v70 = 0;
      v71 = v68;
      do
      {
        v72 = *(_QWORD *)(a1 + (v67 << 8) + 16 * v70 + 1672);
        if (v72)
        {
          if (v70)
          {
            v73 = 0;
            v74 = (_QWORD *)(a1 + 1672 + (v67 << 8));
            while (v72 != *v74)
            {
              ++v73;
              v74 += 2;
              if (v70 == v73)
                goto LABEL_89;
            }
            v75 = *(unsigned __int8 *)(a1 + 16 * v67 + v73 + 2224);
          }
          else
          {
LABEL_89:
            v75 = 0;
          }
          if (v75 == 0 && (v66 & 1) != 0)
          {
            v76 = 0;
            v77 = (_QWORD *)(a1 + 1672);
            while (v72 != *v77)
            {
              ++v76;
              v77 += 2;
              if (v76 == 16)
              {
                v75 = 0;
                goto LABEL_97;
              }
            }
            v75 = *(unsigned __int8 *)(a1 + 2224 + v76);
          }
LABEL_97:
          if (v75)
            LOBYTE(v72) = v75;
          else
            LOBYTE(v72) = v69;
          if (!v75)
            ++v69;
        }
        *(_BYTE *)(a1 + 16 * v67 + v70++ + 2224) = v72;
      }
      while (v70 != 16);
      v68 = 0;
      v66 = 1;
      v67 = 1;
    }
    while ((v71 & 1) != 0);
    *(_BYTE *)(a1 + 2255) = 0;
    *(_BYTE *)(a1 + 2239) = 0;
  }
  memset(v118, 0, sizeof(v118));
  v117[0] = *(_BYTE *)(a1 + 518);
  if (*(_BYTE *)(a1 + 58))
    v78 = 0;
  else
    v78 = *(_BYTE *)(a1 + 519) != 0;
  v81 = 0;
  v117[1] = v78;
  v82 = 1;
  do
  {
    v83 = v82;
    if (v117[v81])
    {
      if (*(char *)(a1 + v81 + 516) >= 1)
      {
        v84 = 0;
        v85 = v118;
        do
        {
          v86 = a1 + (v81 << 8) + 16 * *(unsigned __int8 *)(a1 + 520 + 16 * v81 + v84++);
          v85 = sub_1C9746DB4(v85, *(_QWORD *)(v86 + 1672), *(_QWORD *)(v86 + 1680)) + 2;
        }
        while (v84 < *(char *)(a1 + v81 + 516));
      }
      v87 = 0;
      v88 = a1 + 1672 + (v81 << 8);
      do
      {
        sub_1C9746DB4((_QWORD *)(v88 + v87 * 16), *(_QWORD *)&v118[v87], *((_QWORD *)&v118[v87] + 1));
        ++v87;
      }
      while (v87 != 16);
    }
    else
    {
      *(_OWORD *)(a1 + 16 * v81 + 520) = xmmword_1C9862BE0;
    }
    v82 = 0;
    v81 = 1;
  }
  while ((v83 & 1) != 0);
  *(_BYTE *)(a1 + 659) = 1;
  if (*(char *)(a1 + 516) < 1)
  {
LABEL_135:
    if (*(_BYTE *)(a1 + 58) || *(char *)(a1 + 517) < 1)
      goto LABEL_143;
    v91 = *(unsigned __int8 *)(a1 + 517);
    v92 = a1 + 1928;
    while (!*(_QWORD *)v92 || *(_DWORD *)(*(_QWORD *)v92 + 1024) <= *(_DWORD *)(a1 + 640))
    {
      v92 += 16;
      if (!--v91)
        goto LABEL_143;
    }
  }
  else
  {
    v89 = *(unsigned __int8 *)(a1 + 516);
    v90 = a1 + 1672;
    while (!*(_QWORD *)v90 || *(_DWORD *)(*(_QWORD *)v90 + 1024) <= *(_DWORD *)(a1 + 640))
    {
      v90 += 16;
      if (!--v89)
        goto LABEL_135;
    }
  }
  *(_BYTE *)(a1 + 659) = 0;
LABEL_143:
  for (i = 15; i != -1; --i)
    sub_1C972CFE0((uint64_t)&v118[i]);
  if (*(_BYTE *)(a1 + 514))
  {
    v94 = *(_BYTE *)(a1 + 58) ? 0 : *(unsigned __int8 *)(a1 + 554) ^ 1;
    v95 = a1 + (v94 << 8) + 16 * *(unsigned __int8 *)(a1 + 555);
    sub_1C9746DB4((_QWORD *)(a1 + 2184), *(_QWORD *)(v95 + 1672), *(_QWORD *)(v95 + 1680));
    if (!*(_QWORD *)(a1 + 2184))
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Temporal MVP enabled but pointing to invalid reference\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Temporal MVP enabled but pointing to invalid reference\n");
      }
      return 4294954387;
    }
  }
  v96 = 0;
  v97 = *(unsigned __int8 *)(a1 + 58);
  v98 = 1;
  do
  {
    if (*(char *)(a1 + v96 + 516) >= 1)
    {
      v99 = *(unsigned __int8 *)(a1 + v96 + 516);
      v100 = (_QWORD *)(a1 + 1672 + (v96 << 8));
      while (*v100)
      {
        v100 += 2;
        if (!--v99)
          goto LABEL_155;
      }
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "L%d found too few reference frames\n", v96);
        syslog(27, "L%d found too few reference frames\n", v96);
      }
      return 4294954387;
    }
LABEL_155:
    v101 = (v97 == 0) & v98;
    v96 = 1;
    v98 = 0;
  }
  while ((v101 & 1) != 0);
  if (!*(_BYTE *)(a1 + 48))
  {
    if (v97 == 1)
    {
      v104 = *(_DWORD *)(a1 + 2256);
      v102 = v104 == 1 || v104 == 4;
      goto LABEL_181;
    }
    result = 0;
    *(_DWORD *)(a1 + 2256) = 0;
    v111 = sub_1C974D448;
LABEL_205:
    *(_QWORD *)(a1 + 2264) = v111;
    *(_QWORD *)(a1 + 2272) = 0;
    return result;
  }
  if (*(_BYTE *)(a1 + 58) || *(char *)(a1 + 516) < 1)
    goto LABEL_158;
  v107 = 0;
  v108 = 1;
  do
  {
    if (*(char *)(a1 + 517) >= 1)
    {
      v109 = (_QWORD *)(a1 + 1928);
      v110 = *(char *)(a1 + 517);
      while (*(_QWORD *)(a1 + 1672 + 16 * v107) != *v109)
      {
        v109 += 2;
        if (!--v110)
          goto LABEL_192;
      }
      v108 = 0;
    }
LABEL_192:
    ++v107;
  }
  while (v107 != *(unsigned __int8 *)(a1 + 516));
  if ((v108 & 1) != 0)
LABEL_158:
    v102 = 3;
  else
    v102 = 0;
  if (v97 == 1)
  {
    if (*(_BYTE *)(a1 + 516) == 1)
      v102 = 4;
    else
      v102 = 1;
    *(_DWORD *)(a1 + 2256) = v102;
    v103 = (uint64_t (**)(uint64_t, __int16 *, int, int, int, int))(a1 + 2264);
    *(_QWORD *)(a1 + 2264) = sub_1C974D448;
    *(_QWORD *)(a1 + 2272) = 0;
LABEL_183:
    v106 = sub_1C974D57C;
LABEL_197:
    *v103 = v106;
    goto LABEL_198;
  }
LABEL_181:
  *(_DWORD *)(a1 + 2256) = v102;
  v103 = (uint64_t (**)(uint64_t, __int16 *, int, int, int, int))(a1 + 2264);
  *(_QWORD *)(a1 + 2264) = sub_1C974D448;
  *(_QWORD *)(a1 + 2272) = 0;
  if (v102 == 3)
  {
    v106 = sub_1C974D6F8;
    goto LABEL_197;
  }
  if (v102 == 1)
    goto LABEL_183;
LABEL_198:
  switch(v102)
  {
    case 4:
      v111 = sub_1C980D7B8;
LABEL_204:
      result = 0;
      goto LABEL_205;
    case 3:
      v111 = sub_1C980D944;
      goto LABEL_204;
    case 1:
      v111 = sub_1C980D5C4;
      goto LABEL_204;
  }
  return 0;
}

void sub_1C974E55C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1C974E5B8(uint64_t a1, int a2)
{
  signed int v2;
  unsigned int *v3;
  signed int v4;
  signed int v6;
  signed int v7;
  std::unique_lock<std::mutex> v8;

  v2 = a2 + 8;
  v3 = (unsigned int *)(a1 + 1032);
  v4 = atomic_load((unsigned int *)(a1 + 1032));
  if (v4 < a2 + 8)
  {
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    v6 = atomic_load(v3);
    if (v6 < v2)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v8);
        v7 = atomic_load((unsigned int *)(a1 + 1032));
      }
      while (v7 < v2);
    }
    if (v8.__owns_)
      std::mutex::unlock(v8.__m_);
  }
}

uint64_t sub_1C974E648(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9)
{
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v12 = -3 - a6;
  v13 = *(_DWORD *)(a2 + 520);
  v14 = v13 + 2;
  v15 = a4 + ((__int16)a3 >> 2);
  if (v15 < v13 + 2)
    v14 = a4 + ((__int16)a3 >> 2);
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = -3 - a7;
  v18 = *(_DWORD *)(a2 + 524);
  v19 = v18 + 2;
  v20 = a5 + (a3 >> 18);
  if (v20 < v18 + 2)
    v19 = a5 + (a3 >> 18);
  if (v20 <= v17)
    v21 = v17;
  else
    v21 = v19;
  v22 = *(_BYTE *)(a2 + 531);
  *a8 = *(_QWORD *)(a2 + 400) + ((*(_QWORD *)(a2 + 416) * (int)v21 + (int)v16) << v22);
  v23 = ((__int16)a3 >> 3) + (a4 >> 1);
  if (v23 >= v13 >> 1)
    v24 = v13 >> 1;
  else
    v24 = ((__int16)a3 >> 3) + (a4 >> 1);
  if (v23 <= ~((int)a6 >> 1))
    v25 = ~((int)a6 >> 1);
  else
    v25 = v24;
  v26 = (a5 >> 1) + (a3 >> 19);
  if (v26 >= v18 >> 1)
    v27 = v18 >> 1;
  else
    v27 = (a5 >> 1) + (a3 >> 19);
  if (v26 <= ~((int)a7 >> 1))
    v28 = ~((int)a7 >> 1);
  else
    v28 = v27;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 201))
    *a9 = *(_QWORD *)(a2 + 408) + ((*(_QWORD *)(a2 + 424) * (int)v28 + 2 * (int)v25) << v22);
  sub_1C974E5B8(a2, v21 + a7);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1E8292028[2 * *(unsigned __int8 *)(a2 + 532)]
                                                                                                 + *(unsigned __int8 *)(a2 + 531)))(v16, v21, v25, v28, a6, a7, a2);
}

uint64_t sub_1C974E7B0(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if ((a6 & 0xF) != 0)
    v8 = *(_QWORD *)(*(_QWORD *)(result + 8) + 856)
       + 12 * (*(_QWORD *)(*(_QWORD *)(result + 8) + 848) * ((uint64_t)(a5 + a3) >> 2) + ((a2 - 1) >> 2));
  else
    v8 = 0;
  v9 = *(_BYTE *)(*(_QWORD *)(result + 16) + 2112);
  *a7 = v8;
  if ((a6 & 0xF0) != 0)
    v10 = *(_QWORD *)(*(_QWORD *)(result + 8) + 856)
        + 12 * (*(_QWORD *)(*(_QWORD *)(result + 8) + 848) * ((uint64_t)(a3 + a5 - 1) >> 2) + ((a2 - 1) >> 2));
  else
    v10 = 0;
  v11 = v9 - 1;
  a7[1] = v10;
  if ((a6 & 0x1E000) != 0)
    v12 = *(_QWORD *)(*(_QWORD *)(result + 8) + 856)
        + 12 * (*(_QWORD *)(*(_QWORD *)(result + 8) + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a4 + a2) >> 2));
  else
    v12 = 0;
  v13 = 1 << v11;
  *a8 = v12;
  if ((a6 & 0x1E00) != 0)
    v14 = *(_QWORD *)(*(_QWORD *)(result + 8) + 856)
        + 12 * (*(_QWORD *)(*(_QWORD *)(result + 8) + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a4 + a2 - v13) >> 2));
  else
    v14 = 0;
  a8[1] = v14;
  if ((a6 & 0x100) != 0)
    v15 = *(_QWORD *)(*(_QWORD *)(result + 8) + 856)
        + 12 * (*(_QWORD *)(*(_QWORD *)(result + 8) + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a2 - v13) >> 2));
  else
    v15 = 0;
  a8[2] = v15;
  return result;
}

uint64_t sub_1C974E90C(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  char v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  __int32 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v17;
  signed int v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;

  if (a4 && *(_BYTE *)(a4 + 10) != 1)
  {
    v6 = a2;
    if (!*(_BYTE *)(a1 + 659))
      v6 = *(unsigned __int8 *)(a1 + 554);
    v7 = v6;
    v8 = *(_BYTE *)(a4 + v6 + 8) & 0xF;
    if (v8 == 15)
    {
      v7 = 1 - v6;
      v8 = *(_BYTE *)(a4 + v7 + 8) & 0xF;
    }
    v9 = (1 << *(_BYTE *)(a1 + 16 * a2 + a3 + 520)) & *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2 + 360);
    v10 = (v9 != 0) ^ (*(_QWORD *)(*(_QWORD *)(a1 + 2184) + 8 * v7 + 360) >> v8);
    if ((v10 & 1) == 0)
    {
      v11 = *(_DWORD *)(a4 + 4 * v7);
      *(_DWORD *)a5 = v11;
      if (!v9)
      {
        v12 = *(_QWORD *)(a1 + 2184);
        v13 = *(_DWORD *)(v12 + (v7 << 6) + 4 * v8 + 232);
        v14 = *(_DWORD *)(a1 + 640)
            - *(_DWORD *)(*(_QWORD *)(a1 + ((unint64_t)a2 << 8) + 16 * a3 + 1672) + 1024);
        v15 = *(_DWORD *)(v12 + 1024) - v13;
        if (v15 && v15 != v14)
        {
          if (v15 >= 127)
            v15 = 127;
          if (v15 <= -128)
            v15 = -128;
          if (v14 >= 127)
            v14 = 127;
          if (v14 <= -128)
            v14 = -128;
          if (v15)
          {
            if (v15 >= 0)
              v17 = v15;
            else
              v17 = -v15;
            v15 = (__int16)((__int16)((v17 >> 1) + 0x4000) / (__int16)v15);
          }
          v18 = (v15 * v14 + 32) >> 6;
          if (v18 >= 4095)
            v18 = 4095;
          if (v18 <= -4096)
            v18 = -4096;
          v19.i32[0] = v11 << 16;
          v19.i32[1] = v11;
          v20 = vmul_s32(vdup_n_s32(v18), vshr_n_s32(v19, 0x10uLL));
          v21 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v20), (int32x2_t)0x7F0000007FLL), 8uLL);
          v22 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v20), (int8x8_t)vneg_s32(v21), (int8x8_t)v21), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          *(_WORD *)(a5 + 2) = v22.i16[2];
          *(_WORD *)a5 = v22.i16[0];
        }
      }
    }
    v5 = v10 ^ 1;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1C974EAC0(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, int a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int v10;
  int v17;
  signed int v18;
  uint64_t v19;
  signed int v20;
  signed int v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  std::unique_lock<std::mutex> __lk;

  v9 = *(_QWORD *)(a1 + 2184);
  if (*(_BYTE *)(v9 + 712))
    return 0;
  v10 = a7;
  v17 = a5 + a3;
  v18 = atomic_load((unsigned int *)(v9 + 1032));
  if (v18 < a5 + a3)
  {
    v19 = a8;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v9 + 1040);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v9 + 1040));
    v20 = atomic_load((unsigned int *)(v9 + 1032));
    if (v20 < v17)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(v9 + 1104), &__lk);
        v21 = atomic_load((unsigned int *)(v9 + 1032));
      }
      while (v21 < v17);
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    a8 = v19;
    v10 = a7;
  }
  v22 = *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2113);
  v23 = a3 >> v22;
  v24 = v17 >> v22;
  v25 = *(_QWORD *)(a1 + 2184);
  if (v23 == v24 && a4 + a2 < *(_DWORD *)(v25 + 520) && v17 < *(_DWORD *)(v25 + 524))
  {
    v26 = *(_QWORD *)(v25 + 848) * (int)((v17 >> 2) & 0xFFFFFFFC) + (int)(((a4 + a2) >> 2) & 0xFFFFFFFC);
    if (a9)
      v27 = *(_QWORD *)(v25 + 880) + 16 * v26;
    else
      v27 = *(_QWORD *)(v25 + 856) + 12 * v26;
    v28 = a8;
    if ((sub_1C974E90C(a1, a6, v10, v27, a8) & 1) != 0)
      return 1;
    v25 = *(_QWORD *)(a1 + 2184);
    a8 = v28;
  }
  v30 = a2 + (a4 >> 1);
  if (v30 >= *(_DWORD *)(v25 + 520))
    return 0;
  v31 = a3 + (a5 >> 1);
  if (v31 >= *(_DWORD *)(v25 + 524))
    return 0;
  v32 = *(_QWORD *)(v25 + 848) * (int)((v31 >> 2) & 0xFFFFFFFC) + (int)((v30 >> 2) & 0xFFFFFFFC);
  if (a9)
    v33 = *(_QWORD *)(v25 + 880) + 16 * v32;
  else
    v33 = *(_QWORD *)(v25 + 856) + 12 * v32;
  return sub_1C974E90C(a1, a6, v10, v33, a8);
}

uint64_t sub_1C974ECB8(uint64_t result, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8, _QWORD *a9, uint64_t a10, char a11)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  char v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int32 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v49;
  unsigned int v50;
  int v51;
  signed int v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  signed int v76;
  __int16 *v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  int32x2_t v81;
  uint64_t v82;
  uint64_t v83;

  v14 = a4;
  v15 = result + 1672 + ((unint64_t)a4 << 8);
  v16 = a4 == 0;
  v17 = result + 1672 + (v16 << 8);
  v18 = 1 - a4;
  v19 = *(_QWORD *)(result + 8);
  v20 = *(_QWORD *)(v19 + 8 * a4 + 360);
  v21 = (1 << *(_BYTE *)(result + 16 * a4 + a5 + 520)) & v20;
  if (*a9 && *(unsigned __int8 *)(*a9 + 10) > 1u)
  {
    v22 = 1;
  }
  else
  {
    v23 = a9[1];
    if (v23)
      v22 = *(unsigned __int8 *)(v23 + 10) > 1u;
    else
      v22 = 0;
  }
  v24 = 0;
  v25 = v15 + 16 * a5;
  v26 = *(_DWORD *)(*(_QWORD *)v25 + 1024);
  *((_BYTE *)a8 + 48) = 0;
  v27 = 1;
  do
  {
    v28 = v27;
    v29 = a9[v24];
    if (v29 && *(unsigned __int8 *)(v29 + 10) >= 2u)
    {
      v30 = (unint64_t)*(unsigned __int8 *)(v29 + v14 + 8) >> 4;
      if ((_DWORD)v30 != 15 && v26 == *(_DWORD *)(*(_QWORD *)(v15 + 16 * v30) + 1024))
      {
        LOBYTE(v32) = 0;
        LODWORD(v39) = 1;
        *((_BYTE *)a8 + 48) = 1;
        v43 = *(_DWORD *)(v29 + 4 * v14);
LABEL_30:
        *a8 = v43;
        goto LABEL_57;
      }
      v31 = (unint64_t)*(unsigned __int8 *)(v29 + v18 + 8) >> 4;
      if ((_DWORD)v31 != 15 && v26 == *(_DWORD *)(*(_QWORD *)(v17 + 16 * v31) + 1024))
      {
        LOBYTE(v32) = 0;
        LODWORD(v39) = 1;
        *((_BYTE *)a8 + 48) = 1;
        v43 = *(_DWORD *)(v29 + 4 * v18);
        goto LABEL_30;
      }
    }
    v27 = 0;
    v24 = 1;
  }
  while ((v28 & 1) != 0);
  v32 = 0;
  v33 = (_QWORD *)(v19 + 8 * v18 + 360);
  v34 = 1;
  while (1)
  {
    v35 = v34;
    v36 = a9[v32];
    if (v36)
    {
      if (*(unsigned __int8 *)(v36 + 10) >= 2u)
      {
        v37 = *(unsigned __int8 *)(v36 + v14 + 8);
        if (v37 <= 0xEF && (((v21 != 0) ^ (v20 >> (v37 & 0xF))) & 1) == 0)
        {
          v40 = v14;
          v41 = v14;
          goto LABEL_26;
        }
        v38 = *(unsigned __int8 *)(v36 + v18 + 8);
        if (v38 <= 0xEF && (((v21 != 0) ^ (*v33 >> (v38 & 0xF))) & 1) == 0)
          break;
      }
    }
    v34 = 0;
    v32 = 1;
    if ((v35 & 1) == 0)
    {
      LODWORD(v39) = 0;
      goto LABEL_57;
    }
  }
  v40 = 1 - a4;
  v41 = a4 == 0;
LABEL_26:
  LODWORD(v39) = 1;
  *((_BYTE *)a8 + 48) = 1;
  v42 = *(_DWORD *)(v36 + 4 * v40);
  *a8 = v42;
  if (v21)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v44 = *(_DWORD *)(*(_QWORD *)(result + (v41 << 8) + (*(_BYTE *)(a9[v32] + v40 + 8) & 0xF0) + 1672) + 1024);
    v45 = *(_DWORD *)(result + 640);
    v46 = *(_DWORD *)(*(_QWORD *)v25 + 1024);
    v47 = v45 - v44;
    if (v45 == v44 || v46 == v44)
    {
      LOBYTE(v32) = 0;
    }
    else
    {
      v49 = v45 - v46;
      if (v47 >= 127)
        v47 = 127;
      if (v47 <= -128)
        v47 = -128;
      if (v49 >= 127)
        v49 = 127;
      if (v49 <= -128)
        v49 = -128;
      if (v47)
      {
        if (v47 >= 0)
          v50 = v47;
        else
          v50 = -v47;
        v51 = (__int16)((__int16)((v50 >> 1) + 0x4000) / (__int16)v47);
      }
      else
      {
        v51 = 0;
      }
      LOBYTE(v32) = 0;
      v52 = (v51 * v49 + 32) >> 6;
      if (v52 >= 4095)
        v52 = 4095;
      if (v52 <= -4096)
        v52 = -4096;
      v53.i32[0] = v42 << 16;
      v53.i32[1] = v42;
      v54 = vmul_s32(vdup_n_s32(v52), vshr_n_s32(v53, 0x10uLL));
      v55 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v54), (int32x2_t)0x7F0000007FLL), 8uLL);
      v56 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v54), (int8x8_t)vneg_s32(v55), (int8x8_t)v55), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
      *((_WORD *)a8 + 1) = v56.i16[2];
      *(_WORD *)a8 = v56.i16[0];
    }
    LODWORD(v39) = 1;
  }
LABEL_57:
  v57 = 0;
  while (1)
  {
    v58 = *(_QWORD *)(a10 + v57);
    if (v58 && *(unsigned __int8 *)(v58 + 10) >= 2u)
    {
      v59 = (unint64_t)*(unsigned __int8 *)(v58 + v14 + 8) >> 4;
      if ((_DWORD)v59 != 15 && v26 == *(_DWORD *)(*(_QWORD *)(v15 + 16 * v59) + 1024))
      {
        v66 = v14;
        if ((v32 & 1) != 0)
          goto LABEL_80;
        v67 = *a8;
        v68 = *(_DWORD *)(v58 + 4 * v14);
        v66 = v14;
        goto LABEL_79;
      }
      v60 = (unint64_t)*(unsigned __int8 *)(v58 + v18 + 8) >> 4;
      if ((_DWORD)v60 != 15 && v26 == *(_DWORD *)(*(_QWORD *)(v17 + 16 * v60) + 1024))
        break;
    }
    v57 += 8;
    if (v57 == 24)
      goto LABEL_65;
  }
  v66 = 1 - a4;
  if ((v32 & 1) != 0)
    goto LABEL_80;
  v67 = *a8;
  v68 = *(_DWORD *)(v58 + 4 * v18);
  v66 = 1 - a4;
LABEL_79:
  if (v67 == v68)
    goto LABEL_65;
LABEL_80:
  *((_BYTE *)a8 + 48) = v39 + 1;
  a8[v39] = *(_DWORD *)(v58 + 4 * v66);
  LODWORD(v39) = v39 + 1;
LABEL_65:
  if (!v22)
  {
    v61 = 0;
    while (1)
    {
      v62 = *(_QWORD *)(a10 + 8 * v61);
      if (v62 && *(unsigned __int8 *)(v62 + 10) >= 2u)
      {
        v63 = *(_QWORD *)(result + 8);
        v64 = *(unsigned __int8 *)(v62 + v14 + 8);
        if (v64 <= 0xEF && (((v21 != 0) ^ (*(_QWORD *)(v63 + 8 * v14 + 360) >> (v64 & 0xF))) & 1) == 0)
        {
          v16 = v14;
          goto LABEL_83;
        }
        v65 = *(unsigned __int8 *)(v62 + v18 + 8);
        if (v65 <= 0xEF && (((v21 != 0) ^ (*(_QWORD *)(v63 + 8 * v18 + 360) >> (v65 & 0xF))) & 1) == 0)
          break;
      }
      if (++v61 == 3)
        goto LABEL_108;
    }
    v14 = 1 - a4;
LABEL_83:
    a8[v39] = *(_DWORD *)(v62 + 4 * v14);
    v69 = *(_DWORD *)(*(_QWORD *)(result + (v16 << 8) + (*(_BYTE *)(*(_QWORD *)(a10 + 8 * v61) + v14 + 8) & 0xF0) + 1672)
                    + 1024);
    v70 = *(_DWORD *)(*(_QWORD *)v25 + 1024);
    v39 = *((unsigned __int8 *)a8 + 48);
    if (v69 != v70 && v21 == 0)
    {
      v72 = *(_DWORD *)(result + 640);
      v73 = v72 - v69;
      if (v73)
      {
        v74 = v72 - v70;
        if (v73 >= 127)
          v73 = 127;
        if (v73 <= -128)
          v73 = -128;
        if (v74 >= 127)
          v74 = 127;
        if (v74 <= -128)
          v74 = -128;
        if (v73 >= 0)
          v75 = v73;
        else
          v75 = -v73;
        v76 = ((__int16)((__int16)((v75 >> 1) + 0x4000) / (__int16)v73) * v74 + 32) >> 6;
        if (v76 >= 4095)
          v76 = 4095;
        if (v76 <= -4096)
          v76 = -4096;
        v77 = (__int16 *)&a8[v39];
        v78.i32[0] = *v77;
        v78.i32[1] = v77[1];
        v79 = vmul_s32(vdup_n_s32(v76), v78);
        v80 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v79), (int32x2_t)0x7F0000007FLL), 8uLL);
        v81 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v79), (int8x8_t)vneg_s32(v80), (int8x8_t)v80), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
        *v77 = v81.i16[0];
        v77[1] = v81.i16[2];
        LODWORD(v39) = *((unsigned __int8 *)a8 + 48);
      }
    }
    if (!(_DWORD)v39 || *a8 != a8[1])
    {
      LOBYTE(v39) = v39 + 1;
      *((_BYTE *)a8 + 48) = v39;
    }
  }
LABEL_108:
  if (*(_BYTE *)(result + 514))
  {
    if (v39 > 1u)
      return result;
    result = sub_1C974EAC0(result, a2, a3, a6, a7, a4, a5, (uint64_t)&a8[v39], a11);
    LOBYTE(v39) = *((_BYTE *)a8 + 48) + result;
    *((_BYTE *)a8 + 48) = v39;
  }
  if (v39 <= 1u)
  {
    v82 = v39;
    do
    {
      v83 = v82;
      *((_BYTE *)a8 + 48) = v82 + 1;
      a8[v82] = 0;
      v82 = 1;
    }
    while (!v83);
  }
  return result;
}

uint64_t sub_1C974F30C(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, unsigned int a7, uint64_t *a8, uint64_t *a9, char a10)
{
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39;
  unsigned __int8 v40;
  char v41;
  unsigned __int8 v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  int v68;
  int v69;

  v16 = (_BYTE *)result;
  *(_BYTE *)(a6 + 60) = 0;
  v17 = a8[1];
  if (v17 && *(unsigned __int8 *)(v17 + 10) >= 2u && (a4 >= a5 || ((a5 - 1) & a2) <= 0))
  {
    v56 = *(unsigned __int8 *)(v17 + 8) >> 4;
    v57 = *(unsigned __int8 *)(v17 + 9) >> 4;
    *(_QWORD *)(a6 + 4) = *(_QWORD *)v17;
    *(_BYTE *)a6 = v56;
    *(_BYTE *)(a6 + 1) = v57;
    *(_BYTE *)(a6 + 60) = 1;
    if (a7 == 1)
      return result;
  }
  else
  {
    a8[1] = 0;
  }
  v18 = a9[1];
  if (v18 && *(unsigned __int8 *)(v18 + 10) >= 2u && (a4 <= a5 || ((a4 - 1) & a3) <= 0))
  {
    v58 = a8[1];
    if (!v58
      || *(unsigned __int8 *)(v58 + 10) < 2u
      || (*(unsigned __int8 *)(v18 + 8) ^ *(unsigned __int8 *)(v58 + 8)) > 0xF
      || *(_DWORD *)v58 != *(_DWORD *)v18
      || (*(unsigned __int8 *)(v18 + 9) ^ *(unsigned __int8 *)(v58 + 9)) > 0xF
      || *(_DWORD *)(v58 + 4) != *(_DWORD *)(v18 + 4))
    {
      v59 = *(unsigned __int8 *)(v18 + 8) >> 4;
      v60 = *(unsigned __int8 *)(v18 + 9) >> 4;
      v61 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
      *(_QWORD *)(v61 + 4) = *(_QWORD *)v18;
      *(_BYTE *)v61 = v59;
      v62 = *(_BYTE *)(a6 + 60);
      *(_BYTE *)(a6 + 12 * v62++ + 1) = v60;
      *(_BYTE *)(a6 + 60) = v62;
      if (a7 == v62)
        return result;
    }
  }
  else
  {
    a9[1] = 0;
  }
  v19 = *a9;
  if (!*a9)
    goto LABEL_96;
  if (*(unsigned __int8 *)(v19 + 10) < 2u)
    goto LABEL_96;
  v20 = a9[1];
  if (v20)
  {
    if (*(unsigned __int8 *)(v20 + 10) >= 2u
      && (*(unsigned __int8 *)(v19 + 8) ^ *(unsigned __int8 *)(v20 + 8)) <= 0xF
      && *(_DWORD *)v20 == *(_DWORD *)v19
      && (*(unsigned __int8 *)(v19 + 9) ^ *(unsigned __int8 *)(v20 + 9)) <= 0xF
      && *(_DWORD *)(v20 + 4) == *(_DWORD *)(v19 + 4))
    {
      goto LABEL_96;
    }
  }
  v21 = *(unsigned __int8 *)(v19 + 8) >> 4;
  v22 = *(unsigned __int8 *)(v19 + 9) >> 4;
  v23 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
  *(_QWORD *)(v23 + 4) = *(_QWORD *)v19;
  *(_BYTE *)v23 = v21;
  v24 = *(_BYTE *)(a6 + 60);
  *(_BYTE *)(a6 + 12 * v24++ + 1) = v22;
  *(_BYTE *)(a6 + 60) = v24;
  if (a7 != v24)
  {
LABEL_96:
    v25 = *a8;
    if (!*a8
      || *(unsigned __int8 *)(v25 + 10) < 2u
      || (v26 = a8[1]) != 0
      && *(unsigned __int8 *)(v26 + 10) >= 2u
      && (*(unsigned __int8 *)(v25 + 8) ^ *(unsigned __int8 *)(v26 + 8)) <= 0xF
      && *(_DWORD *)v26 == *(_DWORD *)v25
      && (*(unsigned __int8 *)(v25 + 9) ^ *(unsigned __int8 *)(v26 + 9)) <= 0xF
      && *(_DWORD *)(v26 + 4) == *(_DWORD *)(v25 + 4))
    {
      v27 = *(_BYTE *)(a6 + 60);
    }
    else
    {
      v43 = *(unsigned __int8 *)(v25 + 8) >> 4;
      v44 = *(unsigned __int8 *)(v25 + 9) >> 4;
      v45 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
      *(_QWORD *)(v45 + 4) = *(_QWORD *)v25;
      *(_BYTE *)v45 = v43;
      v46 = *(_BYTE *)(a6 + 60);
      *(_BYTE *)(a6 + 12 * v46 + 1) = v44;
      v27 = v46 + 1;
      *(_BYTE *)(a6 + 60) = v27;
      if (a7 == v27)
        return result;
    }
    if (v27 > 3u)
      goto LABEL_97;
    v28 = a9[2];
    if (!v28)
      goto LABEL_97;
    if (*(unsigned __int8 *)(v28 + 10) < 2u)
      goto LABEL_97;
    v29 = a8[1];
    if (v29)
    {
      if (*(unsigned __int8 *)(v29 + 10) >= 2u
        && (*(unsigned __int8 *)(v28 + 8) ^ *(unsigned __int8 *)(v29 + 8)) <= 0xF
        && *(_DWORD *)v29 == *(_DWORD *)v28
        && (*(unsigned __int8 *)(v28 + 9) ^ *(unsigned __int8 *)(v29 + 9)) <= 0xF
        && *(_DWORD *)(v29 + 4) == *(_DWORD *)(v28 + 4))
      {
        goto LABEL_97;
      }
    }
    v30 = a9[1];
    if (v30)
    {
      if (*(unsigned __int8 *)(v30 + 10) >= 2u
        && (*(unsigned __int8 *)(v28 + 8) ^ *(unsigned __int8 *)(v30 + 8)) <= 0xF
        && *(_DWORD *)v30 == *(_DWORD *)v28
        && (*(unsigned __int8 *)(v28 + 9) ^ *(unsigned __int8 *)(v30 + 9)) <= 0xF
        && *(_DWORD *)(v30 + 4) == *(_DWORD *)(v28 + 4))
      {
        goto LABEL_97;
      }
    }
    v31 = *(unsigned __int8 *)(v28 + 8) >> 4;
    v32 = *(unsigned __int8 *)(v28 + 9) >> 4;
    v33 = a6 + 12 * v27;
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v28;
    *(_BYTE *)v33 = v31;
    LOBYTE(v31) = *(_BYTE *)(a6 + 60);
    *(_BYTE *)(a6 + 12 * v31 + 1) = v32;
    LOBYTE(v31) = v31 + 1;
    *(_BYTE *)(a6 + 60) = v31;
    if (a7 != v31)
    {
LABEL_97:
      if (!*(_BYTE *)(result + 514))
        goto LABEL_98;
      v34 = sub_1C974EAC0(result, a2, a3, a4, a5, 0, 0, (uint64_t)&v69, a10);
      result = 0;
      if (!v16[58])
        result = sub_1C974EAC0((uint64_t)v16, a2, a3, a4, a5, 1u, 0, (uint64_t)&v68, a10);
      if ((v34 | result) != 1)
        goto LABEL_98;
      v36 = v68;
      v35 = v69;
      if (v34)
      {
        v37 = 0;
      }
      else
      {
        v35 = 0;
        v37 = 15;
      }
      if ((_DWORD)result)
      {
        v38 = 0;
      }
      else
      {
        v36 = 0;
        v38 = 15;
      }
      v39 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
      *(_DWORD *)(v39 + 4) = v35;
      *(_DWORD *)(v39 + 8) = v36;
      *(_BYTE *)v39 = v37;
      v40 = *(_BYTE *)(a6 + 60);
      *(_BYTE *)(a6 + 12 * v40++ + 1) = v38;
      *(_BYTE *)(a6 + 60) = v40;
      if (a7 != v40)
      {
LABEL_98:
        if (v16[58])
        {
          v41 = v16[516];
          v42 = *(_BYTE *)(a6 + 60);
        }
        else
        {
          LODWORD(v47) = *(unsigned __int8 *)(a6 + 60);
          v48 = ((v47 - 1) * v47);
          if ((int)v48 <= 0)
          {
            v41 = v16[516];
          }
          else
          {
            v49 = &byte_1C9832288;
            v50 = &byte_1C983227C;
            do
            {
              if (v47 > 4u)
                break;
              v51 = *(char *)(a6 + 12 * *v50);
              if (v51 != 15)
              {
                v52 = *(char *)(a6 + 12 * *v49 + 1);
                if (v52 != 15)
                {
                  result = a6 + 12 * *v49;
                  v53 = *(_DWORD *)(a6 + 12 * *v50 + 4);
                  v54 = *(_DWORD *)(result + 8);
                  if (v53 != v54
                    || (result = *(unsigned int *)(*(_QWORD *)&v16[16 * v51 + 1672] + 1024),
                        (_DWORD)result != *(_DWORD *)(*(_QWORD *)&v16[16 * v52 + 1928] + 1024)))
                  {
                    v47 = a6 + 12 * v47;
                    *(_DWORD *)(v47 + 4) = v53;
                    *(_BYTE *)v47 = v51;
                    LOBYTE(v47) = *(_BYTE *)(a6 + 60);
                    v55 = a6 + 12 * v47;
                    *(_DWORD *)(v55 + 8) = v54;
                    *(_BYTE *)(v55 + 1) = v52;
                    LOBYTE(v47) = v47 + 1;
                    *(_BYTE *)(a6 + 60) = v47;
                    if (a7 == v47)
                      return result;
                  }
                }
              }
              ++v49;
              ++v50;
              --v48;
            }
            while (v48);
            v41 = v16[516];
            v42 = v47;
            if (v16[58])
              goto LABEL_85;
          }
          if ((char)v16[517] < v41)
            v41 = v16[517];
          v42 = v47;
        }
LABEL_85:
        if (a7 > v42)
        {
          v63 = 0;
          do
          {
            v64 = a6 + 12 * v42;
            *(_DWORD *)(v64 + 4) = 0;
            *(_DWORD *)(v64 + 8) = 0;
            if (v63 >= v41)
              v65 = 0;
            else
              v65 = v63;
            *(_BYTE *)v64 = v65;
            v66 = *(_BYTE *)(a6 + 60);
            if (v16[58])
              v67 = 15;
            else
              v67 = *(_BYTE *)(a6 + 12 * *(unsigned __int8 *)(a6 + 60));
            *(_BYTE *)(a6 + 12 * *(unsigned __int8 *)(a6 + 60) + 1) = v67;
            ++v63;
            v42 = v66 + 1;
            *(_BYTE *)(a6 + 60) = v42;
          }
          while (a7 > v42);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C974F980(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned __int8 a8)
{
  __int16 v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v22;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  sub_1C974E7B0(a1, a2, a3, a4, a5, a6, &v30, &v27);
  v15 = *(_WORD *)(*(_QWORD *)(a1 + 32) + 1610);
  if (v15)
  {
    v16 = v15 + 2;
    v17 = a2 >> (v15 + 2);
    v18 = (a2 - 1) >> v16;
    v19 = a3 >> v16;
    if (v17 == v18 && v19 == (a5 + a3) >> v16)
      v30 = 0;
    if (v17 == v18 && v19 == (a3 - 1 + a5) >> v16)
      v31 = 0;
    v22 = (a3 - 1) >> v16;
    if (v17 == (a4 + a2) >> v16 && v19 == v22)
      v27 = 0;
    if (v17 == (a2 - 1 + a4) >> v16 && v19 == v22)
      v28 = 0;
    if (v17 == v18 && v19 == v22)
      v29 = 0;
  }
  return sub_1C974F30C(a1, a2, a3, a4, a5, a7, a8, &v30, &v27, 0);
}

uint64_t sub_1C974FAE0(uint64_t result, FILE *__stream)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t i;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  int v37;
  int v38;
  uint64_t v39;

  v3 = result;
  if (dword_1ED1ACCC0 >= 6)
  {
    result = fwrite("=========== Slice ===========\n", 0x1EuLL, 1uLL, __stream);
    if (dword_1ED1ACCC0 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "first_slice_in_pic_flag", *(unsigned __int8 *)(v3 + 48));
      if (dword_1ED1ACCC0 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "no_output_of_prior_pics_flag", *(unsigned __int8 *)(v3 + 49));
        if (dword_1ED1ACCC0 >= 6)
          result = fprintf(__stream, "  %-44s : %lld\n", "slice_pic_parameter_set_id", *(unsigned __int8 *)(v3 + 50));
      }
    }
  }
  if (!*(_BYTE *)(v3 + 48))
  {
    v4 = dword_1ED1ACCC0;
    if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + 2))
      v5 = dword_1ED1ACCC0 < 6;
    else
      v5 = 1;
    if (!v5)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "dependent_slice_flag", *(unsigned __int8 *)(v3 + 56));
      v4 = dword_1ED1ACCC0;
    }
    if (v4 >= 6)
      result = fprintf(__stream, "  %-44s : %lld\n", "slice_segment_address", *(int *)(v3 + 52));
  }
  if (!*(_BYTE *)(v3 + 56))
  {
    v8 = dword_1ED1ACCC0;
    if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + 4))
    {
      v9 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 32) + 4) + 1;
      do
      {
        if (v8 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "slice_reserved_flag", ((unint64_t)*(unsigned __int8 *)(v3 + 57) >> (v9 - 2)) & 1);
          v8 = dword_1ED1ACCC0;
        }
        --v9;
      }
      while (v9 > 1);
    }
    if (v8 <= 5)
    {
      v11 = v3 + 16;
    }
    else
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "slice_type", *(unsigned __int8 *)(v3 + 58));
      v8 = dword_1ED1ACCC0;
      if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + 3))
        v10 = dword_1ED1ACCC0 < 6;
      else
        v10 = 1;
      if (!v10)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "pic_output_flag", *(unsigned __int8 *)(v3 + 59));
        v8 = dword_1ED1ACCC0;
      }
      v11 = v3 + 16;
      if (*(_BYTE *)(*(_QWORD *)(v3 + 16) + 202))
        v12 = v8 < 6;
      else
        v12 = 1;
      if (!v12)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "colour_plane_id", *(unsigned __int8 *)(v3 + 60));
        v8 = dword_1ED1ACCC0;
      }
    }
    if (*(_BYTE *)(v3 + 632))
    {
LABEL_96:
      if (*(_BYTE *)(*(_QWORD *)v11 + 277))
        v28 = v8 < 6;
      else
        v28 = 1;
      if (!v28)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "slice_sao_luma_flag", *(unsigned __int8 *)(v3 + 512));
        v8 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "  %-44s : %lld\n", "slice_sao_chroma_flag", *(unsigned __int8 *)(v3 + 513));
          v8 = dword_1ED1ACCC0;
        }
      }
      if (*(unsigned __int8 *)(v3 + 58) > 1u)
        goto LABEL_151;
      if (v8 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_active_override_flag", *(unsigned __int8 *)(v3 + 515));
        v8 = dword_1ED1ACCC0;
        if (*(_BYTE *)(v3 + 515))
        {
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_active", *(char *)(v3 + 516));
            v8 = dword_1ED1ACCC0;
            if (!*(_BYTE *)(v3 + 58) && dword_1ED1ACCC0 >= 6)
            {
              result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_active", *(char *)(v3 + 517));
              v8 = dword_1ED1ACCC0;
            }
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + 1608))
      {
        if (v8 >= 6)
          result = fprintf(__stream, "  %-44s : %lld\n", "ref_pic_list_modification_flag_l0", *(unsigned __int8 *)(v3 + 518));
        if (*(_BYTE *)(v3 + 518))
        {
          v29 = *(char *)(v3 + 516);
          v8 = dword_1ED1ACCC0;
          if (v29 >= 1)
          {
            v30 = 0;
            do
            {
              if (v8 >= 6)
              {
                result = fprintf(__stream, "    %-42s : %lld\n", "list_entry", *(unsigned __int8 *)(v3 + 520 + v30));
                v8 = dword_1ED1ACCC0;
                LOBYTE(v29) = *(_BYTE *)(v3 + 516);
              }
              ++v30;
            }
            while (v30 < (char)v29);
          }
        }
        else
        {
          v8 = dword_1ED1ACCC0;
        }
        if (!*(_BYTE *)(v3 + 58))
        {
          if (v8 >= 6)
            result = fprintf(__stream, "  %-44s : %lld\n", "ref_pic_list_modification_flag_l1", *(unsigned __int8 *)(v3 + 519));
          if (*(_BYTE *)(v3 + 519))
          {
            v38 = *(char *)(v3 + 517);
            v8 = dword_1ED1ACCC0;
            if (v38 >= 1)
            {
              v39 = 0;
              do
              {
                if (v8 >= 6)
                {
                  result = fprintf(__stream, "    %-42s : %lld\n", "list_entry", *(unsigned __int8 *)(v3 + 536 + v39));
                  v8 = dword_1ED1ACCC0;
                  LOBYTE(v38) = *(_BYTE *)(v3 + 517);
                }
                ++v39;
              }
              while (v39 < (char)v38);
            }
          }
          else
          {
            v8 = dword_1ED1ACCC0;
          }
        }
      }
      if (*(_BYTE *)(v3 + 58))
        v31 = 1;
      else
        v31 = v8 < 6;
      if (!v31)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "mvd_l1_zero_flag", *(unsigned __int8 *)(v3 + 552));
        v8 = dword_1ED1ACCC0;
      }
      if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + 6))
        v32 = v8 < 6;
      else
        v32 = 1;
      if (!v32)
        result = fprintf(__stream, "  %-44s : %lld\n", "cabac_init_flag", *(unsigned __int8 *)(v3 + 553));
      if (*(_BYTE *)(v3 + 514))
      {
        v33 = dword_1ED1ACCC0;
        if (!*(_BYTE *)(v3 + 58) && dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "  %-44s : %lld\n", "collocated_from_l0_flag", *(unsigned __int8 *)(v3 + 554));
          v33 = dword_1ED1ACCC0;
        }
        if (*(_BYTE *)(v3 + 554))
        {
          if (*(char *)(v3 + 516) < 2 || v33 <= 5)
            goto LABEL_142;
LABEL_141:
          result = fprintf(__stream, "  %-44s : %lld\n", "collocated_ref_idx", *(unsigned __int8 *)(v3 + 555));
          goto LABEL_142;
        }
        if (*(char *)(v3 + 517) >= 2 && v33 >= 6)
          goto LABEL_141;
      }
LABEL_142:
      v34 = *(_QWORD *)(v3 + 32);
      if (*(_BYTE *)(v34 + 17) && *(_BYTE *)(v3 + 58) == 1 || *(_BYTE *)(v34 + 18) && !*(_BYTE *)(v3 + 58))
      {
        if (dword_1ED1ACCC0 < 6)
          goto LABEL_159;
        result = fprintf(__stream, "  %-44s : %lld\n", "luma_log2_weight_denom", *(unsigned __int8 *)(v3 + 556));
        if (dword_1ED1ACCC0 < 6)
          goto LABEL_159;
        result = fprintf(__stream, "  %-44s : %lld\n", "delta_chroma_log2_weight_denom", *(char *)(v3 + 557));
      }
      if (dword_1ED1ACCC0 < 6)
        goto LABEL_159;
      result = fprintf(__stream, "  %-44s : %lld\n", "five_minus_max_num_merge_cand", *(unsigned __int8 *)(v3 + 558));
      v8 = dword_1ED1ACCC0;
LABEL_151:
      if (v8 >= 6)
      {
        result = fprintf(__stream, "  %-44s : %lld\n", "slice_qp_delta", *(char *)(v3 + 559));
        v35 = dword_1ED1ACCC0;
        v36 = *(_BYTE **)(v3 + 32);
        if (v36[16] && dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "  %-44s : %lld\n", "slice_cb_qp_offset", *(char *)(v3 + 560));
          if (dword_1ED1ACCC0 < 6)
            goto LABEL_159;
          result = fprintf(__stream, "  %-44s : %lld\n", "slice_cr_qp_offset", *(char *)(v3 + 561));
          v35 = dword_1ED1ACCC0;
          v36 = *(_BYTE **)(v3 + 32);
        }
        if (!v36[1617] || v35 < 6)
        {
LABEL_160:
          if (v36[29])
          {
            if (dword_1ED1ACCC0 >= 6)
            {
              result = fprintf(__stream, "  %-44s : %lld\n", "deblocking_filter_override_flag", *(unsigned __int8 *)(v3 + 563));
              if (*(_BYTE *)(v3 + 563))
              {
                if (dword_1ED1ACCC0 >= 6)
                {
                  result = fprintf(__stream, "  %-44s : %lld\n", "slice_deblocking_filter_disabled_flag", *(unsigned __int8 *)(v3 + 564));
                  if (!*(_BYTE *)(v3 + 564) && dword_1ED1ACCC0 >= 6)
                  {
                    result = fprintf(__stream, "  %-44s : %lld\n", "slice_beta_offset_div2", *(char *)(v3 + 565));
                    if (dword_1ED1ACCC0 >= 6)
                      result = fprintf(__stream, "  %-44s : %lld\n", "slice_tc_offset_div2", *(char *)(v3 + 566));
                  }
                }
              }
            }
          }
          if (!*(_BYTE *)(*(_QWORD *)(v3 + 32) + 28))
            goto LABEL_15;
          if (*(_BYTE *)(v3 + 512))
          {
            v37 = dword_1ED1ACCC0;
          }
          else
          {
            v37 = dword_1ED1ACCC0;
            if (!*(_BYTE *)(v3 + 513))
            {
              if (*(_BYTE *)(v3 + 564) || dword_1ED1ACCC0 <= 5)
                goto LABEL_15;
LABEL_173:
              result = fprintf(__stream, "  %-44s : %lld\n", "slice_loop_filter_across_slices_enabled_flag", *(unsigned __int8 *)(v3 + 567));
              goto LABEL_15;
            }
          }
          if (v37 < 6)
            goto LABEL_15;
          goto LABEL_173;
        }
        result = fprintf(__stream, "  %-44s : %lld\n", "cu_chroma_qp_offset_enabled_flag", *(unsigned __int8 *)(v3 + 562));
      }
LABEL_159:
      v36 = *(_BYTE **)(v3 + 32);
      goto LABEL_160;
    }
    if (v8 >= 6)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "slice_pic_order_cnt_lsb", *(int *)(v3 + 64));
      if (dword_1ED1ACCC0 >= 6)
        result = fprintf(__stream, "  %-44s : %lld\n", "short_term_ref_pic_set_sps_flag", *(unsigned __int8 *)(v3 + 68));
    }
    if (*(_BYTE *)(v3 + 68))
    {
      v17 = *(_DWORD *)(*(_QWORD *)v11 + 288);
      if (v17)
      {
        v18 = __clz(v17) ^ 0x1F;
        if ((v17 & (v17 - 1)) != 0)
          v19 = -1;
        else
          v19 = 0;
        v8 = dword_1ED1ACCC0;
        if (v18 == v19 || dword_1ED1ACCC0 < 6)
          goto LABEL_66;
        result = fprintf(__stream, "  %-44s : %lld\n", "short_term_ref_pic_set_idx", *(int *)(v3 + 320));
      }
    }
    else
    {
      result = sub_1C982F2E4(v3 + 72, __stream, *(_QWORD *)(v3 + 16), *(_DWORD *)(*(_QWORD *)(v3 + 16) + 288));
    }
    v8 = dword_1ED1ACCC0;
LABEL_66:
    v21 = *(_QWORD *)v11;
    if (*(_BYTE *)(*(_QWORD *)v11 + 320))
    {
      if (v8 >= 6)
      {
        result = fwrite("  long_term_ref_pic_set {\n", 0x1AuLL, 1uLL, __stream);
        v8 = dword_1ED1ACCC0;
        if (dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "num_long_term_sps", *(unsigned int *)(v3 + 324));
          v8 = dword_1ED1ACCC0;
          if (dword_1ED1ACCC0 >= 6)
          {
            result = fprintf(__stream, "    %-42s : %lld\n", "num_long_term_pics", *(unsigned int *)(v3 + 328));
            v8 = dword_1ED1ACCC0;
          }
        }
      }
      LODWORD(v22) = *(_DWORD *)(v3 + 324);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = v3 + 332;
        do
        {
          if (v8 >= 6)
          {
            result = fprintf(__stream, "      %-40s : %lld\n", "lt_idx_sps", *(unsigned __int8 *)(v24 + v23));
            v8 = dword_1ED1ACCC0;
            if (dword_1ED1ACCC0 >= 6)
            {
              result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_present_flag", (*(unsigned __int16 *)(v3 + 510) >> v23) & 1);
              v8 = dword_1ED1ACCC0;
              if (((*(unsigned __int16 *)(v3 + 510) >> v23) & 1) != 0 && dword_1ED1ACCC0 >= 6)
              {
                result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_cycle_lt", *(int *)(v24 + 4 * v23 + 48));
                v8 = dword_1ED1ACCC0;
              }
            }
          }
          ++v23;
          v22 = *(unsigned int *)(v3 + 324);
        }
        while (v23 < v22);
      }
      if (v22 < *(_DWORD *)(v3 + 328) + (int)v22)
      {
        v25 = (int)v22;
        v26 = v3 + 348;
        do
        {
          if (v8 >= 6)
          {
            result = fprintf(__stream, "      %-40s : %lld\n", "poc_lsb_lt", *(unsigned __int16 *)(v26 + 2 * v25));
            v8 = dword_1ED1ACCC0;
            if (dword_1ED1ACCC0 >= 6)
            {
              result = fprintf(__stream, "      %-40s : %lld\n", "used_by_curr_pic_lt_flag", ((unint64_t)*(unsigned __int16 *)(v3 + 508) >> v25) & 1);
              v8 = dword_1ED1ACCC0;
              if (dword_1ED1ACCC0 >= 6)
              {
                result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_present_flag", ((unint64_t)*(unsigned __int16 *)(v3 + 510) >> v25) & 1);
                v8 = dword_1ED1ACCC0;
                if (((*(unsigned __int16 *)(v3 + 510) >> v25) & 1) != 0 && dword_1ED1ACCC0 >= 6)
                {
                  result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_cycle_lt", *(int *)(v26 + 4 * v25 + 32));
                  v8 = dword_1ED1ACCC0;
                }
              }
            }
          }
          ++v25;
        }
        while (*(_DWORD *)(v3 + 328) + *(_DWORD *)(v3 + 324) > v25);
      }
      if (v8 > 5)
      {
        result = fwrite("  }\n", 4uLL, 1uLL, __stream);
        v8 = dword_1ED1ACCC0;
      }
      v21 = *(_QWORD *)v11;
    }
    if (*(_BYTE *)(v21 + 396))
      v27 = v8 < 6;
    else
      v27 = 1;
    if (!v27)
    {
      result = fprintf(__stream, "  %-44s : %lld\n", "slice_temporal_mvp_enable_flag", *(unsigned __int8 *)(v3 + 514));
      v8 = dword_1ED1ACCC0;
    }
    goto LABEL_96;
  }
LABEL_15:
  v6 = *(_QWORD *)(v3 + 32);
  if (*(_BYTE *)(v6 + 20))
  {
    v7 = dword_1ED1ACCC0;
  }
  else
  {
    v13 = *(unsigned __int8 *)(v6 + 21);
    v7 = dword_1ED1ACCC0;
    if (!v13)
      goto LABEL_43;
  }
  if (v7 >= 6)
  {
    result = fprintf(__stream, "  %-44s : %lld\n", "num_entry_point_offsets", *(int *)(v3 + 568));
    v7 = dword_1ED1ACCC0;
  }
  v14 = *(_DWORD *)(v3 + 568);
  if (v14 >= 1)
  {
    if (v7 < 6
      || (result = fprintf(__stream, "  %-44s : %lld\n", "offset_len_minus1", *(unsigned __int8 *)(v3 + 572)),
          v14 = *(_DWORD *)(v3 + 568),
          v7 = dword_1ED1ACCC0,
          v14 >= 1))
    {
      for (i = 0; i < v14; ++i)
      {
        if (v7 >= 6)
        {
          result = fprintf(__stream, "    %-42s : %lld\n", "entry_point_offset_minus1", *(unsigned int *)(*(_QWORD *)(v3 + 576) + 4 * i));
          v7 = dword_1ED1ACCC0;
          v14 = *(_DWORD *)(v3 + 568);
        }
      }
    }
  }
LABEL_43:
  if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + 1612))
    v16 = v7 < 6;
  else
    v16 = 1;
  if (!v16)
    return fprintf(__stream, "  %-44s : %lld\n", "slice_segment_header_extension_length", *(unsigned __int16 *)(v3 + 600));
  return result;
}

double sub_1C9750790(uint64_t a1, double result)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  unsigned int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 1568);
  v3 = *(_DWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_QWORD *)(a1 + 8);
  if (v3 <= *(_DWORD *)(v5 + 520))
  {
    v6 = v4 < 17 || v3 < 17;
    if (!v6 && v4 <= *(_DWORD *)(v5 + 524))
    {
      if (*(_BYTE *)(a1 + 58) == 2 || *(char *)(a1 + 516) < 1)
      {
LABEL_37:
        *(_DWORD *)(v5 + 504) = v3;
        *(_DWORD *)(v5 + 508) = v4;
        result = 0.0;
        *(_QWORD *)(v5 + 512) = 0;
        return result;
      }
      v9 = 0;
      v29 = a1 + 1672;
      while (1)
      {
        v10 = *(_QWORD *)(v29 + 16 * v9);
        if (*(_DWORD *)(v10 + 512) == v3 && *(_DWORD *)(v10 + 516) == v4)
        {
          if (*(_QWORD *)(v10 + 400) != *(_QWORD *)(v10 + 472))
            *(_BYTE *)(v10 + 48) = 1;
          v11 = *(_OWORD *)(v10 + 472);
          v12 = *(_OWORD *)(v10 + 488);
        }
        else
        {
          if (*(_DWORD *)(v10 + 504) != v3 || *(_DWORD *)(v10 + 508) != v4)
          {
            v13 = *(int *)(v10 + 524);
            if ((_DWORD)v13)
            {
              v14 = *(_QWORD *)(v10 + 488);
              v15 = *(int *)(v10 + 520);
              v16 = *(char **)(v10 + 472);
              do
              {
                --v13;
                memset(v16, 128, v15);
                v16 += v14;
              }
              while (v13);
              v17 = *(_DWORD *)(v10 + 524);
              if (v17 >= 2)
              {
                v18 = *(int *)(v10 + 520);
                v19 = *(_QWORD *)(v10 + 496);
                v20 = (uint64_t)(int)v17 >> 1;
                v21 = *(char **)(v10 + 480);
                do
                {
                  --v20;
                  memset(v21, 128, v18);
                  v21 += v19;
                }
                while (v20);
              }
            }
            v22 = 0;
            v23 = *(_QWORD *)(a1 + 1584);
            v24 = 1;
            do
            {
              v25 = v24;
              v26 = (_QWORD *)(v10 + 8 * v22);
              *(_QWORD *)(v23 + 8 * v22 + 8) = v26[55];
              *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 8 * v22 + 24) = v26[59];
              v23 = *(_QWORD *)(a1 + 1584);
              v27 = v23 + 8 * v22;
              *(_QWORD *)(v27 + 40) = v26[57];
              *(_QWORD *)(v27 + 56) = v26[61];
              v22 = 1;
              v24 = 0;
            }
            while ((v25 & 1) != 0);
            *(_QWORD *)(v23 + 72) = *(_QWORD *)(v10 + 504);
            *(_DWORD *)(v23 + 80) = v3;
            *(_DWORD *)(v23 + 84) = v4;
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
            v28 = *(_OWORD *)(v10 + 488);
            *(_OWORD *)(v10 + 400) = *(_OWORD *)(v10 + 472);
            *(_OWORD *)(v10 + 416) = v28;
            *(_DWORD *)(v10 + 512) = v3;
            *(_DWORD *)(v10 + 516) = v4;
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0, *(unsigned int *)(v10 + 524), 0);
            *(_BYTE *)(v10 + 48) = 1;
            goto LABEL_35;
          }
          if (*(_QWORD *)(v10 + 400) != *(_QWORD *)(v10 + 440))
            *(_BYTE *)(v10 + 48) = 1;
          v11 = *(_OWORD *)(v10 + 440);
          v12 = *(_OWORD *)(v10 + 456);
        }
        *(_OWORD *)(v10 + 400) = v11;
        *(_OWORD *)(v10 + 416) = v12;
LABEL_35:
        if (++v9 >= *(char *)(a1 + 516))
        {
          v5 = *(_QWORD *)(a1 + 8);
          goto LABEL_37;
        }
      }
    }
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid VRA parameters %dx%d!\n", v3, v4);
    syslog(27, "Invalid VRA parameters %dx%d!\n", v3, v4);
  }
  return result;
}

void sub_1C9750A20(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  size_t v22;

  v3 = *(_DWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)a1) >> 2);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v21 = &v3[3 * a2];
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
  {
    v22 = 12 * ((12 * v6 - 12) / 0xC) + 12;
    bzero(*(void **)(a1 + 8), v22);
    v21 = (_DWORD *)(v4 + v22);
LABEL_17:
    *(_QWORD *)(a1 + 8) = v21;
    return;
  }
  if (a2 > 0x1555555555555555)
    sub_1C9747024();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 2);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v10 = 0x1555555555555555;
  else
    v10 = v9;
  v11 = (char *)sub_1C9747038(v10);
  v12 = &v11[12 * v5];
  v14 = &v11[12 * v13];
  v15 = 12 * ((12 * v6 - 12) / 0xC) + 12;
  bzero(v12, v15);
  v16 = &v12[v15];
  v18 = *(_DWORD **)a1;
  v17 = *(_DWORD **)(a1 + 8);
  if (v17 != *(_DWORD **)a1)
  {
    do
    {
      v19 = *(_QWORD *)(v17 - 3);
      v17 -= 3;
      v20 = v17[2];
      *(_QWORD *)(v12 - 12) = v19;
      v12 -= 12;
      *((_DWORD *)v12 + 2) = v20;
    }
    while (v17 != v18);
    v17 = *(_DWORD **)a1;
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v14;
  if (v17)
    operator delete(v17);
}

uint64_t sub_1C9750B90(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = a4 + 8;
  while (v5 < a1)
  {
    v8 = 0;
    v9 = *(unsigned __int16 *)(a3 + 2 * v4);
    v10 = (_DWORD *)(v7 + 12 * v5);
    do
    {
      *(v10 - 2) = v4;
      *(v10 - 1) = v6;
      *v10 = v6 + v9 + 1;
      v11 = v8;
      v12 = v8 + 1;
      if (v8 >= v9)
        break;
      v13 = v5 + 1 + v8;
      v10 += 3;
      ++v8;
    }
    while (v13 < a1);
    if (v11 < v9)
      break;
    v5 += v12;
    ++v4;
    v6 += v9 + 1;
    if (v4 == a2)
      return 0;
  }
  return 4294954387;
}

uint64_t sub_1C9750C28(uint64_t a1, int a2, int a3)
{
  int v5;
  int v6;

  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *(_DWORD *)(a1 + 96);
    if (v5 > a2 && *(_DWORD *)(a1 + 100) > a3)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 12 * a3);
      return (v6
                          + v6 * *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12 * (v5 - 1))
                          + *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12 * a2));
    }
    if (dword_1ED1ACCC0 >= 7)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid ctb [%d][%d]\n", a3, a2);
      syslog(31, "Invalid ctb [%d][%d]\n", a3, a2);
    }
  }
  return 0;
}

uint64_t sub_1C9750CF0(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  BOOL v7;
  size_t v8;
  uint64_t result;

  v4 = a2 + 4;
  v5 = *(unsigned int **)a1;
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v7 = v4 >= v6;
  v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_1C971BA44((unint64_t *)a1, v8);
    v5 = *(unsigned int **)a1;
  }
  else if (!v7)
  {
    *(_QWORD *)(a1 + 8) = (char *)v5 + v4;
  }
  result = sub_1C971B944(a1, v5, a2);
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1C9750D54(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v3 = (a2 << (-(char)a3 - *(_DWORD *)(result + 52))) | *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 48) = v3;
  **(_DWORD **)(result + 32) = bswap32(v3);
  v4 = *(int *)(result + 52) + (uint64_t)a3;
  v5 = *(_DWORD *)(result + 48) << (v4 & 0xF8);
  v6 = *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 32) + (v4 >> 3);
  *(_QWORD *)(result + 32) = v7;
  *(_DWORD *)(result + 48) = v5;
  *(_DWORD *)(result + 52) = v4 & 7;
  if (v7 >= v6)
  {
    *(_BYTE *)(result + 56) = 1;
    *(_QWORD *)(result + 32) = v6;
  }
  return result;
}

uint64_t sub_1C9750DB8(uint64_t a1, unsigned int a2, int a3)
{
  unsigned __int16 v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  if (a3 > 25)
  {
    sub_1C9750D54(a1, HIWORD(a2), a3 - 16);
    a2 = v3;
    a1 = v4;
    a3 = 16;
  }
  return sub_1C9750D54(a1, a2, a3);
}

uint64_t sub_1C9750E08(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a2 + 1;
  if (a2 == -1)
  {
    sub_1C9750D54(a1, 0, 16);
    sub_1C9750D54(a1, 0, 16);
    sub_1C9750D54(a1, 1, 1);
    sub_1C9750D54(a1, 0, 16);
    return sub_1C9750D54(a1, 0, 16);
  }
  else
  {
    v5 = __clz(v3);
    v6 = v5 ^ 0x1F;
    v7 = (v5 ^ 0x1F) >> 1;
    if ((v5 ^ 0x1F) >= 2)
      sub_1C9750D54(a1, 0, v6 >> 1);
    if (v6 != v7)
      sub_1C9750D54(a1, 0, v6 - (v6 >> 1));
    result = sub_1C9750D54(a1, 1, 1);
    v8 = v3 - (0x80000000 >> v5);
    if (v6 >= 2)
      result = sub_1C9750D54(a1, v8 >> (v6 - (v6 >> 1)), v6 >> 1);
    if (v6 != v7)
      return sub_1C9750D54(a1, v8, v6 - (v6 >> 1));
  }
  return result;
}

uint64_t sub_1C9750F28(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;

  if (a2 <= 0)
    v2 = -2 * a2;
  else
    v2 = 2 * a2 - 1;
  v3 = v2 + 1;
  v4 = __clz(v3);
  return sub_1C9750D54(a1, (v3 - (0x80000000 >> v4)) | (0x80000000 >> v4), 63 - 2 * v4);
}

uint64_t sub_1C9750F5C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _BYTE *v4;

  result = sub_1C9750D54(a1, 1, 1);
  v3 = *(int *)(a1 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(_BYTE **)(a1 + 32);
    if ((unint64_t)v4 < *(_QWORD *)(a1 + 40))
    {
      *v4 &= byte_1C9832294[v3];
      v4 = *(_BYTE **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 32) = v4 + 1;
  }
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1C9750FC0(uint64_t a1)
{
  unsigned int *v1;
  BOOL v2;
  uint64_t v3;
  signed int v4;

  v1 = (unsigned int *)(*(_QWORD *)(a1 + 40) - 1);
  while (!*(_BYTE *)v1)
  {
    v2 = (unint64_t)v1 > *(_QWORD *)(a1 + 32);
    v1 = (unsigned int *)((char *)v1 - 1);
    if (!v2)
      goto LABEL_4;
  }
  v4 = __clz(__rbit32(*(unsigned __int8 *)v1)) ^ 7;
  if (v1 != *(unsigned int **)(a1 + 32) || *(_DWORD *)(a1 + 52) <= v4)
  {
    v3 = 0;
    *(_DWORD *)(a1 + 52) = v4;
    *(_QWORD *)(a1 + 32) = v1;
    *(_DWORD *)(a1 + 48) = bswap32(*v1) << v4;
    return v3;
  }
LABEL_4:
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("Failed to find terminating bit\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Failed to find terminating bit\n");
  }
  return 4294954387;
}

uint64_t sub_1C9751088(uint64_t a1)
{
  uint64_t i;

  sub_1C972CFE0(a1 + 1568);
  sub_1C972CFE0(a1 + 1552);
  sub_1C972CFE0(a1 + 1536);
  for (i = 1520; i != 496; i -= 16)
    sub_1C972CFE0(a1 + i);
  do
  {
    sub_1C972CFE0(a1 + i);
    i -= 16;
  }
  while (i != 240);
  do
  {
    sub_1C972CFE0(a1 + i);
    i -= 16;
  }
  while (i != -16);
  return a1;
}

uint64_t sub_1C9751100(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  char v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  char *__s2;
  uint64_t v42;
  size_t __n;

  v4 = 0;
  v5 = a1;
  do
  {
    v6 = 0;
    if (v4)
      v7 = byte_1C9861A00;
    else
      v7 = byte_1C98619D8;
    if (v4)
      v8 = 64;
    else
      v8 = 16;
    if (v4 == 3)
      v9 = 3;
    else
      v9 = 1;
    v37 = v8;
    v38 = v7;
    __n = v8 | 1;
    v10 = v9 | (v9 << 6);
    v36 = v5;
    v39 = v10;
    v40 = v9;
    __s2 = (char *)(v5 - v10);
    v42 = -(uint64_t)v10;
    do
    {
      if (v4)
        v11 = (char *)&unk_1C98324C0 + ((v6 > 2) | ((unint64_t)(v6 > 2) << 6));
      else
        v11 = (char *)&unk_1C98324AF;
      v12 = (unsigned __int8 *)(a1 + 390 * v4 + 65 * v6);
      v13 = memcmp(v12, v11, __n);
      if (v6 >= v9)
      {
        v14 = __s2;
        v15 = v9;
        while (memcmp(v12, v14, __n))
        {
          v15 += v9;
          v14 += v42;
          if (v15 > v6)
            goto LABEL_19;
        }
        v21 = v15 / v9;
        sub_1C9750D54(a2, 0, 1);
        goto LABEL_27;
      }
LABEL_19:
      sub_1C9750D54(a2, v13 != 0, 1);
      if (!v13)
      {
        v21 = 0;
LABEL_27:
        v22 = __clz(v21 + 1);
        result = sub_1C9750D54(a2, (v21 + 1 - (0x80000000 >> v22)) | (0x80000000 >> v22), 63 - 2 * v22);
        goto LABEL_34;
      }
      if (v4 < 2)
      {
        v20 = 8;
      }
      else
      {
        v16 = *v12;
        if (v16 <= 8)
          v17 = 16 - 2 * v16;
        else
          v17 = 2 * v16 - 17;
        v18 = v17 + 1;
        v19 = __clz(v18);
        sub_1C9750D54(a2, (v18 - (0x80000000 >> v19)) | (0x80000000 >> v19), 63 - 2 * v19);
        v20 = *v12;
      }
      v25 = v37;
      v24 = v38;
      do
      {
        v26 = *v24++;
        v27 = v26 + 65 * v6 + a1 + 390 * v4;
        v28 = *(unsigned __int8 *)(v27 + 1);
        v29 = __OFSUB__(v28, v20);
        v31 = v28 - v20;
        v30 = (v31 < 0) ^ v29 | (v31 == 0);
        v32 = 2 * v31;
        if (v30)
          v33 = -v32;
        else
          v33 = v32 - 1;
        v34 = v33 + 1;
        v35 = __clz(v34);
        result = sub_1C9750D54(a2, (v34 - (0x80000000 >> v35)) | (0x80000000 >> v35), 63 - 2 * v35);
        v20 = *(unsigned __int8 *)(v27 + 1);
        --v25;
      }
      while (v25);
LABEL_34:
      v9 = v40;
      v6 += v40;
      __s2 += v39;
    }
    while (v6 < 6);
    ++v4;
    v5 = v36 + 390;
  }
  while (v4 != 4);
  return result;
}

uint64_t sub_1C975137C(char *__dst, const char *a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  size_t v11;
  uint64_t i;
  int v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t j;
  char *v39;
  const char *v41;
  unsigned int v42;
  char *__stringp;
  char *v45;

  v3 = 0;
  v4 = __dst;
  do
  {
    v5 = 0;
    if (v3)
      v6 = 65;
    else
      v6 = 17;
    v7 = v4;
    do
    {
      if (v3)
        v8 = (char *)&unk_1C98324C0 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
      else
        v8 = (char *)&unk_1C98324AF;
      memcpy(v7, v8, v6);
      ++v5;
      v7 += 65;
    }
    while (v5 != 6);
    ++v3;
    v4 += 390;
  }
  while (v3 != 4);
  if (!a2)
    return 0;
  v9 = strdup(a2);
  if (!v9)
    return 4294954392;
  v10 = v9;
  __stringp = v9;
  v45 = 0;
  v11 = strlen(v9);
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = __stringp[i];
      if (v13 == 61 || v13 == 44)
        __stringp[i] = 32;
    }
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
LABEL_20:
    v17 = strsep(&__stringp, "\r\n");
    v45 = v17;
    if (!v17)
    {
      for (j = 0; j != 390; j += 65)
      {
        v39 = &__dst[j];
        *v39 = __dst[j + 1];
        v39[390] = __dst[j + 391];
      }
      v37 = 0;
      goto LABEL_66;
    }
  }
  while (*v17 == 35);
  while (1)
  {
    while (1)
    {
      do
      {
        v35 = strsep(&v45, " ");
        v36 = v35;
        if (!v35)
          goto LABEL_20;
      }
      while (!*v35);
      if (*(_WORD *)v35 == 20041 && v35[2] == 84)
        break;
      if (!v14)
      {
        if (dword_1ED1ACCC0 < 3)
          goto LABEL_77;
        v41 = "Unexpected token (expected coeff): '%s'\n";
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unexpected token (expected coeff): '%s'\n");
LABEL_71:
        syslog(27, v41, v36);
        goto LABEL_77;
      }
      if (v16 >= v15)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("coeff_idx exceeded num_coeff\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "coeff_idx exceeded num_coeff\n");
        }
        v37 = 4294954385;
        goto LABEL_66;
      }
      v19 = atoi(v35);
      v20 = v19;
      if (v19 >= 0x100)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid coeff %d\n", v19);
          syslog(27, "Invalid coeff %d\n", v20);
        }
        goto LABEL_77;
      }
      v14[v16++] = v19;
      if (v16 >= v15)
        v14 = 0;
    }
    if (v14)
    {
      if (dword_1ED1ACCC0 <= 2)
        goto LABEL_77;
      v41 = "Unexpected token '%s' (expected more coefficients)\n";
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unexpected token '%s' (expected more coefficients)\n");
      goto LABEL_71;
    }
    if (strlen(v35) <= 0xC
      || (v21 = strncmp(v36, "INTRA", 5uLL), v22 = strncmp(v36, "INTER", 5uLL), v23 = v22, v21) && v22)
    {
LABEL_78:
      if (dword_1ED1ACCC0 > 2)
        goto LABEL_79;
      goto LABEL_77;
    }
    v24 = strchr(v36, 88);
    if (!v24)
      break;
    v25 = v24;
    v26 = atoi(v36 + 5);
    if (v26 != atoi(v25 + 1)
      || (HIDWORD(v28) = v26, LODWORD(v28) = v26 - 4, v27 = v28 >> 2, v27 > 7)
      || ((1 << v27) & 0x8B) == 0)
    {
      if (dword_1ED1ACCC0 >= 3)
        goto LABEL_85;
      goto LABEL_86;
    }
    v29 = strchr(v36, 95);
    if (!v29)
      goto LABEL_78;
    v30 = v29;
    v31 = __clz(__rbit32(v26)) - 2;
    v42 = v26;
    if (v26)
      v32 = v31;
    else
      v32 = -2;
    if (v23)
      v33 = 0;
    else
      v33 = 3;
    if (strncmp(v29, "_LUMA", 5uLL))
    {
      if (!strncmp(v30, "_CHROMAU", 8uLL))
      {
        ++v33;
      }
      else
      {
        if (strncmp(v30, "_CHROMAV", 8uLL))
          goto LABEL_78;
        v33 += 2;
      }
    }
    v34 = strchr(v30 + 1, 95);
    if (v34)
    {
      if (strncmp(v34, "_DC", 3uLL))
      {
        if (dword_1ED1ACCC0 >= 3)
        {
LABEL_79:
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid token '%s'\n", v36);
          syslog(27, "Invalid token '%s'\n", v36);
        }
LABEL_77:
        v37 = 4294954394;
        goto LABEL_66;
      }
      v16 = 0;
      v14 = &__dst[390 * v32 + (v33 | ((unint64_t)v33 << 6))];
      v15 = 1;
    }
    else
    {
      v16 = 0;
      v14 = &__dst[390 * v32 + 1 + (v33 | ((unint64_t)v33 << 6))];
      if (v42 == 4)
        v15 = 16;
      else
        v15 = 64;
    }
  }
  if (dword_1ED1ACCC0 > 2)
  {
LABEL_85:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid token '%s'\n", v36);
    syslog(27, "Invalid token '%s'\n", v36);
  }
LABEL_86:
  v37 = 4294954387;
LABEL_66:
  free(v10);
  return v37;
}

void sub_1C97518D0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C97518F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1CAA439F8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1C97519C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1CAA43B3C](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C97519FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1CAA43A04](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1CAA43B3C](a1 + 53);
  return a1;
}

uint64_t sub_1C9751A54(uint64_t result, FILE *__stream)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = 0;
  v4 = dword_1ED1ACCC0;
  v12 = result;
  v5 = result + 1;
  do
  {
    v6 = 0;
    v7 = 16 << (2 * v3);
    if (v7 >= 0x40)
      v7 = 64;
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    if (v3 == 3)
      v9 = 3;
    else
      v9 = 1;
    v14 = v9;
    v13 = 65 * v9;
    v11 = v5;
    do
    {
      if (v4 > 5)
      {
        result = fprintf(__stream, "  scalingList[%d][%d] {", v3, v6);
        v4 = dword_1ED1ACCC0;
        if (v3 >= 2 && dword_1ED1ACCC0 >= 6)
        {
          result = fprintf(__stream, "\n    scaling_list_dc_coeff : %d", *(unsigned __int8 *)(v12 + 390 * v3 + 65 * v6));
          v4 = dword_1ED1ACCC0;
        }
      }
      for (i = 0; i != v8; ++i)
      {
        if (!(i & 3 | v3))
        {
          if (v4 < 6)
            continue;
LABEL_22:
          result = fwrite("\n   ", 4uLL, 1uLL, __stream);
          v4 = dword_1ED1ACCC0;
          goto LABEL_23;
        }
        if (v3 && (i & 7) == 0 && v4 > 5)
          goto LABEL_22;
LABEL_23:
        if (v4 >= 6)
        {
          result = fprintf(__stream, " %3d", *(unsigned __int8 *)(v5 + i));
          v4 = dword_1ED1ACCC0;
        }
      }
      if (v4 > 5)
      {
        result = fwrite("\n  }\n", 5uLL, 1uLL, __stream);
        v4 = dword_1ED1ACCC0;
      }
      v6 += v14;
      v5 += v13;
    }
    while (v6 < 6);
    ++v3;
    v5 = v11 + 390;
  }
  while (v3 != 4);
  return result;
}

_QWORD *sub_1C9751C1C(_QWORD *result, int a2, _BYTE *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;

  v3 = *a3;
  v4 = byte_1C98326D3[(result[2] & 0xC0) + (v3 >> 1)];
  v5 = result[3];
  v6 = result[2] - v4;
  v7 = v3 & 1 ^ a2;
  if (v7)
    v8 = result[2] - v4;
  else
    v8 = 0;
  v9 = v8 + result[1];
  if (v7)
    v6 = byte_1C98326D3[(result[2] & 0xC0) + (v3 >> 1)];
  *a3 = byte_1C98326D3[(v7 | (2 * v3)) + 256];
  v10 = __clz(v6) - 55;
  v11 = v6 << v10;
  v12 = v9 << v10;
  v13 = v5 + v10;
  result[2] = v11;
  v14 = v13 - 32;
  if (v13 >= 32)
  {
    v15 = (_DWORD *)result[4];
    if ((unint64_t)v15 < result[5])
    {
      v16 = result[58];
      v17 = v13 - 22;
      v18 = v12 >> v17;
      result[4] = v15 + 1;
      *v15 = bswap32(v12 >> v17);
      v12 &= ~(-1 << v17);
      if ((v18 & 0x100000000) != 0)
      {
        v19 = v15 - 1;
        do
        {
          if ((unint64_t)v19 < v16)
            break;
          v20 = *v19;
          *v19 = bswap32(bswap32(*v19) + 1);
          --v19;
        }
        while (v20 == -1);
      }
      v13 = v14;
    }
  }
  result[1] = v12;
  result[3] = v13;
  return result;
}

_QWORD *sub_1C9751CF8(_QWORD *result, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = 2 * result[1];
  if (a2)
    v2 += result[2];
  v3 = result[3];
  v4 = v3 + 1;
  v5 = v3 - 31;
  if (v3 >= 31)
  {
    v6 = (_DWORD *)result[4];
    if ((unint64_t)v6 < result[5])
    {
      v7 = result[58];
      v8 = v3 - 21;
      v9 = v2 >> v8;
      result[4] = v6 + 1;
      *v6 = bswap32(v2 >> v8);
      v2 &= ~(-1 << v8);
      if ((v9 & 0x100000000) != 0)
      {
        v10 = v6 - 1;
        do
        {
          if ((unint64_t)v10 < v7)
            break;
          v11 = *v10;
          *v10 = bswap32(bswap32(*v10) + 1);
          --v10;
        }
        while (v11 == -1);
      }
      v4 = v5;
    }
  }
  result[1] = v2;
  result[3] = v4;
  return result;
}

_QWORD *sub_1C9751D8C(_QWORD *result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  v2 = result[2] - 2;
  v3 = 1 - ((int)v2 >> 8);
  v4 = 2;
  if (!a2)
  {
    v4 = result[2] - 2;
    v2 = 0;
  }
  v5 = v2 + result[1];
  if (a2)
    v6 = 7;
  else
    v6 = v3;
  v7 = v5 << v6;
  v8 = result[3] + v6;
  result[2] = v4 << v6;
  v9 = v8 - 32;
  if (v8 >= 32)
  {
    v10 = (_DWORD *)result[4];
    if ((unint64_t)v10 < result[5])
    {
      v11 = result[58];
      v12 = v8 - 22;
      v13 = v7 >> v12;
      result[4] = v10 + 1;
      *v10 = bswap32(v7 >> v12);
      v7 &= ~(-1 << v12);
      if ((v13 & 0x100000000) != 0)
      {
        v14 = v10 - 1;
        do
        {
          if ((unint64_t)v14 < v11)
            break;
          v15 = *v14;
          *v14 = bswap32(bswap32(*v14) + 1);
          --v14;
        }
        while (v15 == -1);
      }
      v8 = v9;
    }
  }
  result[1] = v7;
  result[3] = v8;
  return result;
}

_QWORD *sub_1C9751E44(_QWORD *a1, unsigned int a2, int a3)
{
  _QWORD *result;
  unsigned int v6;

  if (a3 < 23)
    return sub_1C9751EB0(a1, a2, a3);
  v6 = a3 + 1;
  do
    result = sub_1C9751CF8(a1, (a2 >> (v6-- - 2)) & 1);
  while (v6 > 1);
  return result;
}

_QWORD *sub_1C9751EB0(_QWORD *result, int a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  if (a3)
  {
    v3 = result[1];
    v4 = result[3] + a3;
    if (a3 >= 1)
    {
      v5 = a2 << -(char)a3;
      v6 = a3 + 1;
      do
      {
        if (v5 >= 0)
          v7 = 0;
        else
          v7 = result[2];
        v3 = v7 + 2 * v3;
        v5 *= 2;
        --v6;
      }
      while (v6 > 1);
    }
    v8 = v4 - 32;
    if (v4 >= 32)
    {
      v9 = (_DWORD *)result[4];
      if ((unint64_t)v9 < result[5])
      {
        v10 = result[58];
        v11 = v4 - 22;
        v12 = v3 >> v11;
        result[4] = v9 + 1;
        *v9 = bswap32(v3 >> v11);
        v3 &= ~(-1 << v11);
        if ((v12 & 0x100000000) != 0)
        {
          v13 = v9 - 1;
          do
          {
            if ((unint64_t)v13 < v10)
              break;
            v14 = *v13;
            *v13 = bswap32(bswap32(*v13) + 1);
            --v13;
          }
          while (v14 == -1);
        }
        v4 = v8;
      }
    }
    result[1] = v3;
    result[3] = v4;
  }
  return result;
}

_QWORD *sub_1C9751F6C(_QWORD *a1, int a2, int a3)
{
  int v6;
  int v7;
  int v8;
  _QWORD *result;

  if (a3 >= a2)
    v6 = a2;
  else
    v6 = a3;
  if (v6 >= 22)
  {
    do
    {
      result = sub_1C9751CF8(a1, 1);
      --v6;
    }
    while (v6);
    if (a2 < a3)
      return sub_1C9751CF8(a1, 0);
  }
  else
  {
    v7 = ~(a2 < a3);
    if (a2 >= a3)
      v8 = v6;
    else
      v8 = v6 + 1;
    return sub_1C9751EB0(a1, v7, v8);
  }
  return result;
}

_QWORD *sub_1C9752000(_QWORD *a1, unsigned int a2, int a3)
{
  return sub_1C9751EB0(a1, a2 & ~(-1 << a3) | (-2 << a3), a3 + (a2 >> a3) + 1);
}

_QWORD *sub_1C9752028(_QWORD *a1, unsigned int a2, int a3)
{
  int v3;
  int i;

  v3 = 1 << a3;
  for (i = a3; a2 >= 1 << i; v3 = 1 << i)
  {
    ++i;
    a2 -= v3;
  }
  return sub_1C9751E44(a1, a2 | (-2 << i), 2 * i - a3 + 1);
}

_QWORD *sub_1C975206C(_QWORD *result, signed int a2, _BYTE *a3, signed int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;

  v7 = result;
  if (a4 >= a2)
    v8 = a2;
  else
    v8 = a4;
  if ((int)v8 >= 1)
  {
    v9 = a3;
    do
    {
      result = sub_1C9751C1C(v7, 1, v9++);
      --v8;
    }
    while (v8);
  }
  if (a2 < a4)
    return sub_1C9751C1C(v7, 0, &a3[a2]);
  return result;
}

_QWORD *sub_1C97520FC(_QWORD *result, int a2, _BYTE *a3, int a4, int a5)
{
  _QWORD *v9;
  _BYTE *v10;
  int v11;

  if (a5)
  {
    v9 = result;
    result = sub_1C9751C1C(result, a2 != 0, a3);
    if (a2)
    {
      v10 = &a3[a4];
      v11 = a2 - 1;
      if (a2 != 1)
      {
        do
        {
          result = sub_1C9751C1C(v9, 1, v10);
          --v11;
        }
        while (v11);
      }
      if (a5 > a2)
        return sub_1C9751C1C(v9, 0, v10);
    }
  }
  return result;
}

uint64_t sub_1C9752198(_DWORD *a1)
{
  return (((a1[6] + 8 * (a1[8] - a1[116])) << 8) - a1[4] + 510);
}

__n128 sub_1C97521C0(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  uint64_t v8;

  v1 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 408) = v1;
  v2 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 440) = v2;
  v3 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 344) = v3;
  v4 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 376) = v4;
  v5 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 280) = v5;
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 312) = v6;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a1 + 248) = result;
  v8 = 8 * (*(_DWORD *)(a1 + 464) - *(_DWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 510;
  *(_QWORD *)(a1 + 24) = v8;
  return result;
}

__n128 sub_1C9752240(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 248);
  v1 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 184) = v1;
  v2 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 216) = v2;
  v3 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 120) = v3;
  v4 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 152) = v4;
  v5 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 56) = v5;
  result = *(__n128 *)(a1 + 296);
  v7 = *(_OWORD *)(a1 + 312);
  *(__n128 *)(a1 + 72) = result;
  *(_OWORD *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_1C97522A0(uint64_t result, char a2, _BYTE *a3)
{
  *(_DWORD *)(result + 228) += dword_1C9860D8C[(*a3 ^ a2)];
  return result;
}

uint64_t sub_1C97522C8(uint64_t result)
{
  *(_DWORD *)(result + 228) += 256;
  return result;
}

uint64_t sub_1C97522D8(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 1792;
  else
    v2 = 2;
  *(_DWORD *)(result + 228) += v2;
  return result;
}

uint64_t sub_1C97522F8(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 228) += a3 << 8;
  return result;
}

uint64_t sub_1C9752308(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 228) += a3 << 8;
  return result;
}

uint64_t sub_1C9752318(uint64_t result, int a2, int a3)
{
  int v3;

  if (a3 >= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < a3)
    ++v3;
  *(_DWORD *)(result + 228) += v3 << 8;
  return result;
}

uint64_t sub_1C9752338(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(result + 228) += ((a3 + (a2 >> a3)) << 8) + 256;
  return result;
}

uint64_t sub_1C9752354(uint64_t result, unsigned int a2, int a3)
{
  int v3;
  int v4;

  v3 = 1 << a3;
  v4 = a3;
  if (1 << a3 <= a2)
  {
    v4 = a3;
    do
    {
      ++v4;
      a2 -= v3;
      v3 = 1 << v4;
    }
    while (a2 >= 1 << v4);
  }
  *(_DWORD *)(result + 228) = *(_DWORD *)(result + 228) - (a3 << 8) + (v4 << 9) + 256;
  return result;
}

uint64_t sub_1C9752398(uint64_t result, signed int a2, unsigned __int8 *a3, signed int a4)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;

  if (a4 >= a2)
    v4 = a2;
  else
    v4 = a4;
  if ((int)v4 >= 1)
  {
    v5 = *(_DWORD *)(result + 228);
    v6 = a3;
    do
    {
      v7 = *v6++;
      v5 += dword_1C9860D8C[v7 ^ 1];
      *(_DWORD *)(result + 228) = v5;
      --v4;
    }
    while (v4);
  }
  if (a2 < a4)
    *(_DWORD *)(result + 228) += dword_1C9860D8C[a3[a2]];
  return result;
}

uint64_t sub_1C97523F4(uint64_t result, int a2, _BYTE *a3, int a4, int a5)
{
  int v5;
  int v6;

  if (a5)
  {
    v5 = *(_DWORD *)(result + 228) + dword_1C9860D8C[(*a3 ^ (a2 != 0))];
    *(_DWORD *)(result + 228) = v5;
    if (a2)
    {
      v6 = a2 - 1;
      if (a2 != 1)
      {
        do
        {
          v5 += dword_1C9860D8C[a3[a4] ^ 1];
          *(_DWORD *)(result + 228) = v5;
          --v6;
        }
        while (v6);
      }
      if (a5 > a2)
        *(_DWORD *)(result + 228) = v5 + dword_1C9860D8C[a3[a4]];
    }
  }
  return result;
}

uint64_t sub_1C975246C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 228);
}

uint64_t sub_1C9752474(uint64_t result)
{
  *(_DWORD *)(result + 228) = 0;
  return result;
}

uint64_t sub_1C9752480(_DWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, int a6)
{
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  int v36;
  int v37;
  _BYTE *v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  unint64_t v44;
  int v45;
  _BYTE *v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  int v55;
  int v56;
  _QWORD v59[2];
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;

  v6 = a1;
  v61 = 0;
  v62 = a2;
  v59[0] = &v60;
  v59[1] = &v62;
  v60 = 0;
  if (!a5)
  {
    LODWORD(v12) = 0;
    a1[5] = 0;
    a1[3] = 0;
    goto LABEL_37;
  }
  v8 = (*(_DWORD *)(a5 + 4) + *(_DWORD *)a5);
  if ((int)v8 < 1)
  {
    LODWORD(v12) = 0;
    v11 = 0;
LABEL_36:
    v6[3] = v12;
    v6[5] = v11;
LABEL_37:
    v34 = a4;
    if (a4)
    {
      if (a4[160])
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = a4 + 2;
        while (1)
        {
          v39 = *((__int16 *)v38 - 1) + a6;
          v40 = (uint64_t *)sub_1C9752908(v62, v39);
          sub_1C9746DB4(&v60, *v40, v40[1]);
          v29 = sub_1C97529C4((uint64_t)v59, v39, *v38);
          if ((_DWORD)v29)
            goto LABEL_69;
          v41 = v60;
          if (v60 && (sub_1C9752B14(v62, v39) & 1) == 0)
          {
            if (*v38)
              v42 = &v6[4 * v37 + 6];
            else
              v42 = &v6[4 * v36 + 198];
            v37 += *v38;
            if (!*v38)
              ++v36;
            sub_1C9746DB4(v42, v41, (uint64_t)v61);
          }
          v34 = a4;
          ++v35;
          v38 += 4;
          if (v35 >= a4[160])
            goto LABEL_53;
        }
      }
      v37 = 0;
      v36 = 0;
LABEL_53:
      v6[1] = v37;
      if (v34[161])
      {
        v44 = 0;
        v45 = 0;
        v46 = v34 + 66;
        while (1)
        {
          v47 = *((__int16 *)v46 - 1) + a6;
          v48 = (uint64_t *)sub_1C9752908(v62, v47);
          sub_1C9746DB4(&v60, *v48, v48[1]);
          v29 = sub_1C97529C4((uint64_t)v59, v47, *v46);
          if ((_DWORD)v29)
            goto LABEL_69;
          v49 = v60;
          if (v60 && (sub_1C9752B14(v62, v47) & 1) == 0)
          {
            if (*v46)
              v50 = &v6[4 * v45 + 70];
            else
              v50 = &v6[4 * v36 + 198];
            v45 += *v46;
            if (!*v46)
              ++v36;
            sub_1C9746DB4(v50, v49, (uint64_t)v61);
          }
          ++v44;
          v46 += 4;
          if (v44 >= a4[161])
          {
            v37 = v6[1];
            goto LABEL_67;
          }
        }
      }
      v45 = 0;
LABEL_67:
      v6[2] = v45;
      v6[4] = v36;
      v43 = v45 + v37;
      LODWORD(v12) = v6[3];
    }
    else
    {
      v43 = 0;
      v6[4] = 0;
      v6[1] = 0;
      v6[2] = 0;
    }
    v29 = 0;
    *v6 = v43 + v12;
    goto LABEL_69;
  }
  v9 = a3;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v55 = -*(_DWORD *)(*(_QWORD *)a3 + 2108) & a6;
  while (1)
  {
    v13 = *(unsigned __int16 *)(a5 + 2 * v10 + 24);
    v14 = 1 << v10;
    if (((1 << v10) & *(unsigned __int16 *)(a5 + 186)) != 0)
    {
      v15 = *(_DWORD *)(a5 + 4 * v10 + 120);
      v16 = *(_DWORD *)(*(_QWORD *)v9 + 2108);
      v17 = v55 + v13;
      v13 = v55 + v13 - v16 * v15;
      v18 = (uint64_t *)sub_1C9752908(v62, v17 - v16 * v15);
    }
    else
    {
      v56 = v11;
      v19 = v12;
      v20 = v6;
      v21 = v8;
      v22 = v62;
      v23 = v9;
      v24 = *(_BYTE *)(*(_QWORD *)v9 + 224);
      v25 = atomic_load((unsigned __int8 *)&qword_1EF920E30);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920E30))
      {
        __cxa_atexit((void (*)(void *))sub_1C9752BB8, &qword_1EF920E20, &dword_1C96FA000);
        __cxa_guard_release(&qword_1EF920E30);
      }
      v26 = ~(-16 << v24);
      v27 = 32;
      v9 = v23;
      v8 = v21;
      v6 = v20;
      v12 = v19;
      v11 = v56;
      while (1)
      {
        v28 = *(_QWORD *)(v22 + v27);
        if (v28)
        {
          if (((*(_DWORD *)(v28 + 1024) ^ v13) & v26) == 0)
            break;
        }
        v27 += 16;
        if (v27 == 304)
        {
          v18 = &qword_1EF920E20;
          goto LABEL_13;
        }
      }
      v18 = (uint64_t *)(v22 + v27);
    }
LABEL_13:
    sub_1C9746DB4(&v60, *v18, v18[1]);
    v29 = sub_1C97529C4((uint64_t)v59, v13, (unsigned __int16)(v14 & *(_WORD *)(a5 + 184)) != 0);
    if ((_DWORD)v29)
      break;
    if (v60)
    {
      v30 = *(unsigned __int16 *)(a5 + 184);
      if ((v14 & v30) != 0)
        v31 = &v6[4 * (int)v12 + 134];
      else
        v31 = &v6[4 * v11 + 262];
      if ((v14 & v30) != 0)
        v12 = (v12 + 1);
      else
        v12 = v12;
      if ((v14 & v30) == 0)
        ++v11;
      sub_1C9746DB4(v31, v60, (uint64_t)v61);
      v32 = 0;
      v33 = v62 + 32;
      while (!*(_QWORD *)v33 || *(_DWORD *)(*(_QWORD *)v33 + 1024) != v13)
      {
        ++v32;
        v33 += 16;
        if (v32 == 17)
          goto LABEL_30;
      }
      if ((v32 & 0x80000000) == 0)
        *(_BYTE *)(v62 + v32 + 304) = 2;
    }
LABEL_30:
    if (++v10 == v8)
      goto LABEL_36;
  }
LABEL_69:
  v51 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return v29;
}

void sub_1C97528EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1C972CFE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1C9752908(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = atomic_load((unsigned __int8 *)&qword_1EF920E18);
  if ((v2 & 1) == 0)
  {
    v10 = a1;
    v9 = a2;
    v7 = __cxa_guard_acquire(&qword_1EF920E18);
    a2 = v9;
    v8 = v7;
    a1 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))sub_1C9752BB8, &unk_1EF920E08, &dword_1C96FA000);
      __cxa_guard_release(&qword_1EF920E18);
      a2 = v9;
      a1 = v10;
    }
  }
  v3 = 32;
  v4 = &unk_1EF920E08;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + v3);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 1024) == a2)
        break;
    }
    v3 += 16;
    if (v3 == 304)
      return v4;
  }
  return (void *)(a1 + v3);
}

uint64_t sub_1C97529C4(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  int v13;

  if (**(_QWORD **)a1)
    return 0;
  if (!a3)
  {
    if (dword_1ED1ACCC0 >= 6)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unused reference with POC %d not found!\n", a2);
      syslog(30, "Unused reference with POC %d not found!\n", a2);
    }
    return 0;
  }
  v6 = **(_QWORD **)(a1 + 8);
  v13 = a2;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    sub_1C9752B60();
  (*(void (**)(__int128 *__return_ptr, uint64_t, int *))(*(_QWORD *)v7 + 48))(&v12, v7, &v13);
  sub_1C974C5FC(*(_QWORD *)a1, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (**(_QWORD **)a1)
    return 0;
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Failed to create missing reference for poc %d\n", a2);
    syslog(27, "Failed to create missing reference for poc %d\n", a2);
  }
  return 4294954387;
}

uint64_t sub_1C9752B14(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = 0;
  for (i = a1 + 32; !*(_QWORD *)i || *(_DWORD *)(*(_QWORD *)i + 1024) != a2; i += 16)
  {
    if (++v2 == 17)
      return 0;
  }
  if ((v2 & 0x80000000) == 0)
    return (*(unsigned __int8 *)(a1 + v2 + 304) >> 1) & 1;
  return 0;
}

void sub_1C9752B60()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1E8291A78;
  __cxa_throw(exception, (struct type_info *)&unk_1E8291348, (void (*)(void *))std::exception::~exception);
}

void sub_1C9752B94(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C9752BBC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1C9752D24(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1C972D5A8(a1);
}

void sub_1C9752D34()
{
  JUMPOUT(0x1CAA43B9CLL);
}

_QWORD *sub_1C9752D48()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8292368;
  return result;
}

void sub_1C9752D6C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8292368;
}

void sub_1C9752D84(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

unsigned __int16 *sub_1C9752D8C(unsigned __int16 *result, unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  char *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  char *v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;

  if (a3 >= 2)
  {
    v6 = (char *)result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *result;
      if (v7 < v8)
      {
        *result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[a3 >> 1];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C9752F90(result, v21, v22, a4);
        v23 = (unsigned __int16 *)&v19[2 * v20];
        result = sub_1C9752F90((unsigned __int16 *)&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        v24 = (unsigned __int16 *)&v19[2 * a3];
        v25 = v23;
        while (v25 != v24)
        {
          v26 = *v25;
          v27 = *(unsigned __int16 *)v19;
          v28 = v26 < v27;
          v29 = v26 >= v27;
          if (v26 >= v27)
            LOWORD(v26) = *(_WORD *)v19;
          v19 += 2 * v29;
          v25 += v28;
          *(_WORD *)v6 = v26;
          v6 += 2;
          if (v19 == (char *)v23)
          {
            if (v25 != v24)
            {
              v30 = 0;
              do
              {
                *(_WORD *)&v6[v30 * 2] = v25[v30];
                ++v30;
              }
              while (&v25[v30] != v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v31 = 0;
          do
          {
            *(_WORD *)&v6[v31] = *(_WORD *)&v19[v31];
            v31 += 2;
          }
          while (&v19[v31] != (char *)v23);
        }
      }
      else
      {
        sub_1C9752D8C(result, v21, v22, a4, a5);
        sub_1C9752D8C(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return (unsigned __int16 *)sub_1C9753158(v6, &v6[2 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 1;
      if (result + 1 != a2)
      {
        v11 = 2;
        v12 = result;
        do
        {
          v13 = v12[1];
          v14 = *v12;
          v12 = v10;
          if (v13 < v14)
          {
            v15 = v11;
            while (1)
            {
              *(unsigned __int16 *)((char *)result + v15) = v14;
              v16 = v15 - 2;
              if (v15 == 2)
                break;
              v14 = *(unsigned __int16 *)((char *)result + v15 - 4);
              v15 -= 2;
              if (v13 >= v14)
              {
                v17 = (unsigned __int16 *)((char *)result + v16);
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *v17 = v13;
          }
          v10 = v12 + 1;
          v11 += 2;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

unsigned __int16 *sub_1C9752F90(unsigned __int16 *result, unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v6;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v9 = *(a2 - 1);
      v8 = *(a2 - 1);
      v10 = *result;
      v11 = v9 >= v10;
      if (v9 >= v10)
        v8 = *result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v11)
        v6 = a2 - 1;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v22 = &result[a3 >> 1];
      sub_1C9752D8C(result, v22, a3 >> 1, a4, a3 >> 1);
      result = (unsigned __int16 *)sub_1C9752D8C(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v23 = &v6[a3 >> 1];
      while (v23 != a2)
      {
        v24 = *v23;
        v25 = *v6;
        v26 = v24 >= v25;
        v27 = v24 < v25;
        if (v24 >= v25)
          LOWORD(v24) = *v6;
        v23 += v27;
        v6 += v26;
        *v4++ = v24;
        if (v6 == v22)
        {
          if (v23 != a2)
          {
            v28 = 0;
            do
            {
              v4[v28] = v23[v28];
              ++v28;
            }
            while (&v23[v28] != a2);
          }
          return result;
        }
      }
      if (v6 != v22)
      {
        v29 = 0;
        do
        {
          v4[v29] = v6[v29];
          ++v29;
        }
        while (&v6[v29] != v22);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a4;
        v15 = a4;
        do
        {
          v17 = *v15++;
          v16 = v17;
          v18 = *v12;
          if (v18 >= v17)
          {
            *v15 = v18;
          }
          else
          {
            v14[1] = v16;
            v19 = a4;
            if (v14 != a4)
            {
              v20 = v13;
              while (1)
              {
                v19 = (unsigned __int16 *)((char *)a4 + v20);
                v21 = *(unsigned __int16 *)((char *)a4 + v20 - 2);
                if (*v12 >= v21)
                  break;
                *v19 = v21;
                v20 -= 2;
                if (!v20)
                {
                  v19 = a4;
                  break;
                }
              }
            }
            *v19 = *v12;
          }
          ++v12;
          v13 += 2;
          v14 = v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1C9753158(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v37;
  char *v38;
  unsigned __int16 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  char *v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  _BOOL4 v69;
  uint64_t v70;
  unsigned __int16 v71;
  unsigned __int16 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v12 = *(unsigned __int16 *)a2;
      while (1)
      {
        v13 = *(unsigned __int16 *)v11;
        if (v12 < v13)
          break;
        v11 += 2;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_WORD *)v11 = v12;
          *(_WORD *)a2 = v13;
          return result;
        }
        if (a4 >= 0)
          v24 = a4;
        else
          v24 = a4 + 1;
        v16 = (unsigned __int16 *)&v11[v24 & 0xFFFFFFFFFFFFFFFELL];
        v15 = a3;
        if (a3 != a2)
        {
          v25 = (a3 - a2) >> 1;
          v15 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = (unsigned __int16 *)&v15[2 * (v25 >> 1)];
            v29 = *v27;
            v28 = v27 + 1;
            v25 += ~(v25 >> 1);
            if (v29 < *v16)
              v15 = (char *)v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v23 = v24 >> 1;
        v22 = (v15 - a2) >> 1;
      }
      else
      {
        if (v8 >= 0)
          v14 = v8;
        else
          v14 = v8 + 1;
        v15 = &a2[v14 & 0xFFFFFFFFFFFFFFFELL];
        v16 = (unsigned __int16 *)a2;
        if (a2 != v11)
        {
          v17 = (a2 - v11) >> 1;
          v16 = (unsigned __int16 *)v11;
          do
          {
            v18 = v17 >> 1;
            v19 = &v16[v17 >> 1];
            v21 = *v19;
            v20 = v19 + 1;
            v17 += ~(v17 >> 1);
            if (*(unsigned __int16 *)v15 < v21)
              v17 = v18;
            else
              v16 = v20;
          }
          while (v17);
        }
        v22 = v14 >> 1;
        v23 = ((char *)v16 - v11) >> 1;
      }
      v30 = (unsigned __int16 *)v15;
      if (v16 != (unsigned __int16 *)a2)
      {
        v30 = v16;
        if (a2 != v15)
        {
          if (v16 + 1 == (unsigned __int16 *)a2)
          {
            v71 = *v16;
            v37 = v15 - a2;
            v73 = v22;
            v75 = a6;
            v38 = a3;
            memmove(v16, a2, v15 - a2);
            v22 = v73;
            a6 = v75;
            a3 = v38;
            v30 = (unsigned __int16 *)((char *)v16 + v37);
            *v30 = v71;
          }
          else if (a2 + 2 == v15)
          {
            v39 = *((_WORD *)v15 - 1);
            v30 = v16 + 1;
            if (v15 - 2 != (char *)v16)
            {
              v74 = v22;
              v76 = a6;
              v40 = a3;
              v72 = *((_WORD *)v15 - 1);
              memmove(v16 + 1, v16, v15 - 2 - (char *)v16);
              v39 = v72;
              v22 = v74;
              a6 = v76;
              a3 = v40;
            }
            *v16 = v39;
          }
          else
          {
            v31 = (a2 - (char *)v16) >> 1;
            if (v31 == (v15 - a2) >> 1)
            {
              v32 = 0;
              do
              {
                v33 = v16[v32];
                v16[v32] = *(_WORD *)&a2[v32 * 2];
                v34 = (uint64_t)&v16[v32 + 1];
                *(_WORD *)&a2[v32 * 2] = v33;
                v35 = (uint64_t)&a2[v32 * 2 + 2];
                ++v32;
              }
              while ((char *)v34 != a2 && v35 != (_QWORD)v15);
              v30 = (unsigned __int16 *)a2;
            }
            else
            {
              v41 = (v15 - a2) >> 1;
              v42 = (a2 - (char *)v16) >> 1;
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &v16[v42];
                do
                {
                  v46 = *--v44;
                  v45 = v46;
                  v47 = &v44[v31];
                  v48 = v44;
                  do
                  {
                    v49 = v48;
                    v48 = v47;
                    *v49 = *v47;
                    v50 = __OFSUB__(v31, (v15 - (char *)v47) >> 1);
                    v52 = v31 - ((v15 - (char *)v47) >> 1);
                    v51 = (v52 < 0) ^ v50;
                    v47 = &v16[v52];
                    if (v51)
                      v47 = &v48[v31];
                  }
                  while (v47 != v44);
                  *v48 = v45;
                }
                while (v44 != v16);
              }
              v30 = &v16[(v15 - a2) >> 1];
            }
          }
        }
      }
      a4 -= v23;
      v8 -= v22;
      if (v23 + v22 >= a4 + v8)
      {
        v56 = a4;
        v57 = v22;
        v54 = a6;
        result = (char *)sub_1C9753158(v30, v15, a3, v56, v8, a6, a7);
        v15 = (char *)v16;
        v8 = v57;
        a4 = v23;
        a3 = (char *)v30;
      }
      else
      {
        v53 = v11;
        v54 = a6;
        v55 = a3;
        result = (char *)sub_1C9753158(v53, v16, v30, v23, v22, a6, a7);
        a3 = v55;
        v11 = (char *)v30;
      }
      a2 = v15;
      a6 = v54;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v64 = 0;
        do
        {
          *(_WORD *)&a6[v64] = *(_WORD *)&v11[v64];
          v64 += 2;
        }
        while (&v11[v64] != a2);
        v65 = &a6[v64];
        if (v65 != a6)
        {
          while (a2 != a3)
          {
            v66 = *(unsigned __int16 *)a2;
            v67 = *(unsigned __int16 *)a6;
            v68 = v66 < v67;
            v69 = v66 >= v67;
            if (v66 >= v67)
              LOWORD(v66) = *(_WORD *)a6;
            a6 += 2 * v69;
            a2 += 2 * v68;
            *(_WORD *)v11 = v66;
            v11 += 2;
            if (a6 == v65)
              return result;
          }
          return (char *)memmove(v11, a6, v65 - a6);
        }
      }
    }
    else if (a2 != a3)
    {
      v58 = 0;
      do
      {
        *(_WORD *)&a6[v58] = *(_WORD *)&a2[v58];
        v58 += 2;
      }
      while (&a2[v58] != a3);
      v59 = &a6[v58];
      if (v59 != a6)
      {
        v60 = a3 - 2;
        while (a2 != v11)
        {
          v61 = *((unsigned __int16 *)v59 - 1);
          v62 = *((unsigned __int16 *)a2 - 1);
          v63 = v61 >= v62;
          if (v61 <= v62)
            LOWORD(v61) = *((_WORD *)a2 - 1);
          if (v63)
            v59 -= 2;
          else
            a2 -= 2;
          *(_WORD *)v60 = v61;
          v60 -= 2;
          if (v59 == a6)
            return result;
        }
        v70 = 0;
        do
        {
          *(_WORD *)&v60[v70] = *(_WORD *)&v59[v70 - 2];
          v70 -= 2;
        }
        while (&v59[v70] != a6);
      }
    }
  }
  return result;
}

void *sub_1C97535CC(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;

  v2 = atomic_load((unsigned __int8 *)&qword_1EF920E70);
  if ((v2 & 1) == 0)
  {
    v12 = a1;
    v11 = a2;
    v9 = __cxa_guard_acquire(&qword_1EF920E70);
    a2 = v11;
    v10 = v9;
    a1 = v12;
    if (v10)
    {
      __cxa_atexit((void (*)(void *))sub_1C9752BB8, &unk_1EF920E60, &dword_1C96FA000);
      __cxa_guard_release(&qword_1EF920E70);
      a2 = v11;
      a1 = v12;
    }
  }
  v3 = 0;
  v4 = (uint64_t *)(a1 + 32);
  v5 = -1;
  v6 = -1;
  do
  {
    v7 = *v4;
    if (*v4 && *(_DWORD *)(v7 + 1024) > v6 && *(_DWORD *)(v7 + 36) == a2)
    {
      v6 = *(_DWORD *)(v7 + 1024);
      v5 = v3;
    }
    ++v3;
    v4 += 2;
  }
  while (v3 != 17);
  if (v5 == -1)
    return &unk_1EF920E60;
  else
    return (void *)(a1 + 16 * v5 + 32);
}

void sub_1C97536B0(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t k;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t m;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t n;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_BYTE *)(a1 + 320) = 0;
    v2 = a2[1];
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = 0;
        v5 = a1 + 32;
        while (!*(_QWORD *)v5 || *(_DWORD *)(*(_QWORD *)v5 + 1024) != *(_DWORD *)(*(_QWORD *)&a2[4 * i + 6] + 1024))
        {
          ++v4;
          v5 += 16;
          if (v4 == 17)
            goto LABEL_11;
        }
        if ((v4 & 0x80000000) == 0)
        {
          *(_BYTE *)(a1 + v4 + 304) = 1;
          v2 = a2[1];
        }
LABEL_11:
        ;
      }
    }
    v6 = a2[2];
    if (v6 >= 1)
    {
      for (j = 0; j < v6; ++j)
      {
        v8 = 0;
        v9 = a1 + 32;
        while (!*(_QWORD *)v9
             || *(_DWORD *)(*(_QWORD *)v9 + 1024) != *(_DWORD *)(*(_QWORD *)&a2[4 * j + 70] + 1024))
        {
          ++v8;
          v9 += 16;
          if (v8 == 17)
            goto LABEL_21;
        }
        if ((v8 & 0x80000000) == 0)
        {
          *(_BYTE *)(a1 + v8 + 304) = 1;
          v6 = a2[2];
        }
LABEL_21:
        ;
      }
    }
    v10 = a2[4];
    if (v10 >= 1)
    {
      for (k = 0; k < v10; ++k)
      {
        v12 = 0;
        v13 = a1 + 32;
        while (!*(_QWORD *)v13
             || *(_DWORD *)(*(_QWORD *)v13 + 1024) != *(_DWORD *)(*(_QWORD *)&a2[4 * k + 198] + 1024))
        {
          ++v12;
          v13 += 16;
          if (v12 == 17)
            goto LABEL_31;
        }
        if ((v12 & 0x80000000) == 0)
        {
          *(_BYTE *)(a1 + v12 + 304) = 1;
          v10 = a2[4];
        }
LABEL_31:
        ;
      }
    }
    v14 = a2[3];
    if (v14 >= 1)
    {
      for (m = 0; m < v14; ++m)
      {
        v16 = 0;
        v17 = a1 + 32;
        while (!*(_QWORD *)v17
             || *(_DWORD *)(*(_QWORD *)v17 + 1024) != *(_DWORD *)(*(_QWORD *)&a2[4 * m + 134] + 1024))
        {
          ++v16;
          v17 += 16;
          if (v16 == 17)
            goto LABEL_41;
        }
        if ((v16 & 0x80000000) == 0)
        {
          *(_BYTE *)(a1 + v16 + 304) = 2;
          v14 = a2[3];
        }
LABEL_41:
        ;
      }
    }
    v18 = a2[5];
    if (v18 >= 1)
    {
      for (n = 0; n < v18; ++n)
      {
        v20 = 0;
        v21 = a1 + 32;
        while (!*(_QWORD *)v21
             || *(_DWORD *)(*(_QWORD *)v21 + 1024) != *(_DWORD *)(*(_QWORD *)&a2[4 * n + 262] + 1024))
        {
          ++v20;
          v21 += 16;
          if (v20 == 17)
            goto LABEL_51;
        }
        if ((v20 & 0x80000000) == 0)
        {
          *(_BYTE *)(a1 + v20 + 304) = 2;
          v18 = a2[5];
        }
LABEL_51:
        ;
      }
    }
  }
  else if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("MarkRefs gets invalid combined RPS!\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "MarkRefs gets invalid combined RPS!\n");
  }
}

uint64_t sub_1C9753948(uint64_t a1)
{
  int v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  int *v10;
  BOOL v11;
  int *v12;
  uint64_t (*v14)(int *, int *);

  v1 = 0;
  for (i = 32; i != 304; i += 16)
  {
    v3 = *(_QWORD *)(a1 + i);
    if (v3)
    {
      v4 = a1 + 4 * v1++;
      *(_DWORD *)(v4 + 324) = *(_DWORD *)(v3 + 1024);
    }
  }
  v5 = a1 + 324;
  v6 = v1;
  v7 = (int *)(a1 + 324 + 4 * v1);
  v14 = (uint64_t (*)(int *, int *))sub_1C9753A44;
  if (v1 < 129)
  {
LABEL_9:
    v12 = 0;
    v9 = 0;
  }
  else
  {
    v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v9 = v1;
    while (1)
    {
      v10 = (int *)operator new(4 * v9, v8);
      if (v10)
        break;
      v11 = v9 > 1;
      v9 >>= 1;
      if (!v11)
        goto LABEL_9;
    }
    v12 = v10;
  }
  sub_1C9753A58(v5, v7, &v14, v6, v12, v9);
  if (v12)
    operator delete(v12);
  return v5;
}

void sub_1C9753A2C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_1C9753A44(_DWORD *a1, _DWORD *a2)
{
  return *a1 > *a2;
}

uint64_t sub_1C9753A58(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5, uint64_t a6)
{
  int *v8;
  int *v9;
  int v10;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  char *v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  int *v23;
  char *v24;
  int *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  if (a4 >= 2)
  {
    v8 = (int *)result;
    if (a4 == 2)
    {
      v9 = a2 - 1;
      result = (*a3)(a2 - 1, (int *)result);
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *v9;
        *v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v19 = (char *)a5;
      v20 = a4 >> 1;
      v21 = (int *)(result + 4 * (a4 >> 1));
      v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C9753CBC((int *)result, v21, a3, v22, a5);
        v23 = (int *)&v19[4 * v20];
        result = (uint64_t)sub_1C9753CBC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        v24 = &v19[4 * a4];
        v25 = v23;
        while (v25 != (int *)v24)
        {
          result = (*a3)(v25, (int *)v19);
          if ((_DWORD)result)
            v26 = (char *)v25;
          else
            v26 = v19;
          v19 += 4 * (result ^ 1);
          v25 += result;
          *v8++ = *(_DWORD *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (int *)v24)
            {
              v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (int *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v28 = 0;
          do
          {
            v8[v28] = *(_DWORD *)&v19[v28 * 4];
            ++v28;
          }
          while (&v19[v28 * 4] != (char *)v23);
        }
      }
      else
      {
        sub_1C9753A58(result, v21, a3, v22, a5, a6);
        sub_1C9753A58(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_1C9753EC4((uint64_t)v8, &v8[a4 >> 1], a2, (uint64_t (**)(_QWORD, _QWORD))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((int *)result != a2)
    {
      v12 = (int *)(result + 4);
      if ((int *)(result + 4) != a2)
      {
        v13 = 0;
        v14 = (int *)result;
        do
        {
          v15 = v14;
          v14 = v12;
          result = (*a3)(v12, v15);
          if ((_DWORD)result)
          {
            v29 = *v14;
            v16 = v13;
            while (1)
            {
              *(int *)((char *)v8 + v16 + 4) = *(int *)((char *)v8 + v16);
              if (!v16)
                break;
              v16 -= 4;
              result = (*a3)(&v29, (int *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                v17 = (int *)((char *)v8 + v16 + 4);
                goto LABEL_15;
              }
            }
            v17 = v8;
LABEL_15:
            *v17 = v29;
          }
          v12 = v14 + 1;
          v13 += 4;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

int *sub_1C9753CBC(int *result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5)
{
  int *v5;
  int *v7;
  int *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (int *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v19 = &result[a4 >> 1];
      sub_1C9753A58(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      result = (int *)sub_1C9753A58(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        result = (int *)(*a3)(v20, v7);
        if ((_DWORD)result)
          v21 = v20;
        else
          v21 = v7;
        v20 += result;
        v7 += result ^ 1;
        *v5++ = *v21;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            v22 = 0;
            do
            {
              v5[v22] = v20[v22];
              ++v22;
            }
            while (&v20[v22] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        v23 = 0;
        do
        {
          v5[v23] = v7[v23];
          ++v23;
        }
        while (&v7[v23] != v19);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14++;
          result = (int *)(*a3)(v12, v15);
          v16 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v16 = v5;
            if (v15 != v5)
            {
              v17 = v13;
              while (1)
              {
                v16 = (int *)((char *)v5 + v17);
                result = (int *)(*a3)(v12, (int *)((char *)v5 + v17 - 4));
                if (!(_DWORD)result)
                  break;
                *(int *)((char *)v5 + v17) = *(int *)((char *)v5 + v17 - 4);
                v17 -= 4;
                if (!v17)
                {
                  v16 = v5;
                  break;
                }
              }
            }
          }
          v18 = *v12++;
          *v16 = v18;
          v13 += 4;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C9753EC4(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_DWORD *, _DWORD *);
  unint64_t v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  int64_t v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _DWORD *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (_DWORD *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = (*a4)(a2, v15);
      if ((result & 1) != 0)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v78 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v68 = *v15;
        *v15 = *a2;
        *a2 = v68;
        return result;
      }
      if (a5 >= 0)
        v23 = a5;
      else
        v23 = a5 + 1;
      v24 = v23 >> 1;
      v21 = &v15[v23 >> 1];
      if (a3 == a2)
      {
        v18 = a3;
        v29 = a3;
      }
      else
      {
        v74 = v23 >> 1;
        v76 = a8;
        v70 = a7;
        v25 = (uint64_t (*)(_DWORD *, _DWORD *))*a4;
        v26 = a3 - a2;
        v18 = a2;
        do
        {
          v27 = &v18[v26 >> 1];
          v28 = v25(v27, v21);
          if (v28)
            v26 += ~(v26 >> 1);
          else
            v26 >>= 1;
          if (v28)
            v18 = v27 + 1;
        }
        while (v26);
        v29 = a2;
        a7 = v70;
        v24 = v74;
        a8 = v76;
      }
      v17 = v18 - v29;
    }
    else
    {
      if (v10 >= 0)
        v16 = v10;
      else
        v16 = v10 + 1;
      v17 = v16 >> 1;
      v18 = &a2[v16 >> 1];
      if (a2 == v15)
      {
        v21 = a2;
        v22 = a2;
      }
      else
      {
        v73 = v16 >> 1;
        v72 = a3;
        v19 = a7;
        v20 = a2 - v15;
        v21 = v15;
        do
        {
          if ((*a4)(v18, &v21[v20 >> 1]))
          {
            v20 >>= 1;
          }
          else
          {
            v21 += (v20 >> 1) + 1;
            v20 += ~(v20 >> 1);
          }
        }
        while (v20);
        v22 = v15;
        a7 = v19;
        a3 = v72;
        v17 = v73;
      }
      v24 = v21 - v22;
    }
    v30 = v18;
    if (v21 != a2)
    {
      v30 = v21;
      if (a2 != v18)
      {
        if (v21 + 1 == a2)
        {
          v77 = a8;
          v71 = a7;
          v37 = *v21;
          v38 = (char *)v18 - (char *)a2;
          v39 = a2;
          v40 = (char *)v18 - (char *)a2;
          v41 = v17;
          v42 = v24;
          memmove(v21, v39, v40);
          v24 = v42;
          v17 = v41;
          v30 = (_DWORD *)((char *)v21 + v38);
          *v30 = v37;
        }
        else
        {
          if (a2 + 1 != v18)
          {
            v31 = a2 - v21;
            if (v31 == v18 - a2)
            {
              v32 = 0;
              do
              {
                v33 = v21[v32];
                v21[v32] = a2[v32];
                v34 = (uint64_t)&v21[v32 + 1];
                a2[v32] = v33;
                v35 = (uint64_t)&a2[++v32];
              }
              while ((_DWORD *)v34 != a2 && v35 != (_QWORD)v18);
              v30 = a2;
            }
            else
            {
              v46 = v18 - a2;
              v47 = a2 - v21;
              do
              {
                v48 = v47;
                v47 = v46;
                v46 = v48 % v46;
              }
              while (v46);
              if (v47)
              {
                v49 = &v21[v47];
                do
                {
                  v51 = *--v49;
                  v50 = v51;
                  v52 = &v49[v31];
                  v53 = v49;
                  do
                  {
                    v54 = v53;
                    v53 = v52;
                    *v54 = *v52;
                    v55 = __OFSUB__(v31, v18 - v52);
                    v57 = v31 - (v18 - v52);
                    v56 = (v57 < 0) ^ v55;
                    v52 = &v21[v57];
                    if (v56)
                      v52 = &v53[v31];
                  }
                  while (v52 != v49);
                  *v53 = v50;
                }
                while (v49 != v21);
              }
              v30 = &v21[v18 - a2];
            }
            goto LABEL_64;
          }
          v77 = a8;
          v71 = a7;
          v43 = *(v18 - 1);
          v30 = v21 + 1;
          if (v18 - 1 != v21)
          {
            v44 = v17;
            v45 = v24;
            memmove(v21 + 1, v21, (char *)(v18 - 1) - (char *)v21);
            v24 = v45;
            v17 = v44;
          }
          *v21 = v43;
        }
        a7 = v71;
        a8 = v77;
      }
    }
LABEL_64:
    a5 -= v24;
    v58 = v78 - v17;
    if (v24 + v17 >= a5 + v78 - v17)
    {
      v59 = a3;
      v75 = v24;
      v60 = v17;
      result = sub_1C9753EC4(v30, v18, v59, a4, a5, v78 - v17, a7, a8);
      v18 = v21;
      v10 = v60;
      a5 = v75;
      a3 = v30;
    }
    else
    {
      result = sub_1C9753EC4(v15, v21, v30, a4, v24, v17, a7, a8);
      v15 = v30;
      v10 = v58;
    }
    a2 = v18;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v65 = 0;
      do
      {
        *(_DWORD *)&a7[v65 * 4] = v15[v65];
        ++v65;
      }
      while (&v15[v65] != a2);
      v66 = &a7[v65 * 4];
      if (&a7[v65 * 4] != a7)
      {
        while (a2 != a3)
        {
          result = (*a4)(a2, a7);
          if ((_DWORD)result)
            v67 = (char *)a2;
          else
            v67 = a7;
          a7 += 4 * (result ^ 1);
          a2 += result;
          *v15++ = *(_DWORD *)v67;
          if (a7 == v66)
            return result;
        }
        return (uint64_t)memmove(v15, a7, v66 - a7);
      }
    }
  }
  else if (a2 != a3)
  {
    v61 = 0;
    do
    {
      *(_DWORD *)&a7[v61 * 4] = a2[v61];
      ++v61;
    }
    while (&a2[v61] != a3);
    v62 = &a7[v61 * 4];
    if (&a7[v61 * 4] != a7)
    {
      v63 = a3 - 1;
      while (a2 != v15)
      {
        result = (*a4)(v62 - 4, a2 - 1);
        if ((_DWORD)result)
          v64 = (char *)a2;
        else
          v64 = v62;
        if ((_DWORD)result)
          --a2;
        else
          v62 -= 4;
        *v63-- = *((_DWORD *)v64 - 1);
        if (v62 == a7)
          return result;
      }
      v69 = 0;
      do
      {
        v63[v69] = *(_DWORD *)&v62[v69 * 4 - 4];
        --v69;
      }
      while (&v62[v69 * 4] != a7);
    }
  }
  return result;
}

uint64_t sub_1C97543D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  uint64_t v9;
  uint64_t (**v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = a1 + 8 * a7;
  v10 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (a9 == 1)
    v10 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 64);
  v11 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 296);
  if (!a8)
    v11 = v10;
  return (*v11)(a2, a3, a4, a5, a6);
}

void (**sub_1C9754414(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755974;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97559A0;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97551B4;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755224;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755AC4;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B12C;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B184;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B1FC;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B254;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B2AC;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B36C;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B490;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B500;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B5C4;
  *result = sub_1C981B710;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B684;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B808;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981B9E8;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981BBA4;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9819A00;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9819A14;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9819A28;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755188;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981BD50;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981BDA8;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981BDC4;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981BDE0;
  return result;
}

_QWORD *sub_1C9754534(_QWORD *result)
{
  result[43] = sub_1C9754DD8;
  result[44] = sub_1C9754E44;
  result[45] = sub_1C9754EB0;
  result[28] = sub_1C9755974;
  result[29] = sub_1C97559A0;
  result[49] = sub_1C9755AC4;
  result[13] = sub_1C98236A8;
  result[14] = sub_1C982377C;
  result[15] = sub_1C98237E8;
  result[16] = sub_1C9824084;
  result[17] = sub_1C9824108;
  result[18] = sub_1C9824610;
  result[19] = sub_1C9824BB8;
  result[21] = sub_1C9819A00;
  result[26] = sub_1C9819A14;
  result[27] = sub_1C9819A28;
  result[35] = sub_1C98251BC;
  result[36] = sub_1C98252D8;
  result[37] = sub_1C9825400;
  result[38] = sub_1C97559CC;
  return result;
}

void (**sub_1C9754608(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755710;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C975573C;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97551B4;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755224;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755858;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C0A0;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C0F8;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C170;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C1C8;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C220;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C2E0;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C404;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C474;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C538;
  *result = sub_1C981C728;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C5F8;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981C820;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CA00;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CBBC;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CD68;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CD7C;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CD90;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755188;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CDB4;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CE0C;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CE28;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981CE44;
  return result;
}

_QWORD *sub_1C9754728(_QWORD *result)
{
  result[43] = sub_1C9754DD8;
  result[44] = sub_1C9754E44;
  result[45] = sub_1C9754EB0;
  result[28] = sub_1C9755710;
  result[29] = sub_1C975573C;
  result[49] = sub_1C9755858;
  result[13] = sub_1C9825528;
  result[14] = sub_1C98255FC;
  result[15] = sub_1C9825668;
  result[16] = sub_1C98256D4;
  result[17] = sub_1C9825758;
  result[18] = sub_1C9825C60;
  result[19] = sub_1C9826208;
  result[21] = sub_1C981CD68;
  result[26] = sub_1C981CD7C;
  result[27] = sub_1C981CD90;
  result[35] = sub_1C982680C;
  result[36] = sub_1C9826928;
  result[37] = sub_1C9826A50;
  result[38] = sub_1C9755760;
  return result;
}

void (**sub_1C97547FC(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97554D4;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))nullsub_8;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97551B4;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755224;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97555F4;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981DDE8;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981DE40;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981DEB8;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981DF10;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981DF68;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E028;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E14C;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E1BC;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E280;
  *result = sub_1C981E470;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E340;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E568;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E748;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981E904;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981EAB0;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981EAC4;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981EAD8;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755188;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981EAFC;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981EB54;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981EB70;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981EB8C;
  return result;
}

_QWORD *sub_1C975491C(_QWORD *result)
{
  result[43] = sub_1C9754DD8;
  result[44] = sub_1C9754E44;
  result[45] = sub_1C9754EB0;
  result[28] = sub_1C97554D4;
  result[29] = nullsub_8;
  result[49] = sub_1C97555F4;
  result[13] = sub_1C9826B78;
  result[14] = sub_1C9826C4C;
  result[15] = sub_1C9826CB8;
  result[16] = sub_1C9826D24;
  result[17] = sub_1C9826DA8;
  result[18] = sub_1C98272B0;
  result[19] = sub_1C9827858;
  result[21] = sub_1C981EAB0;
  result[26] = sub_1C981EAC4;
  result[27] = sub_1C981EAD8;
  result[35] = sub_1C9827E5C;
  result[36] = sub_1C9827F78;
  result[37] = sub_1C98280A0;
  result[38] = sub_1C97554FC;
  return result;
}

void (**sub_1C97549F0(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))nullsub_7;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755294;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97551B4;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755224;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97553B8;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FB30;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FB88;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FC00;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FC58;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FCB0;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FD70;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FE94;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FF04;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C981FFC8;
  *result = sub_1C98201B8;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9820088;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98202B0;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9820490;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C982064C;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98207F8;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C982080C;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9820820;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755188;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9820844;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C982089C;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98208B8;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98208D4;
  return result;
}

_QWORD *sub_1C9754B10(_QWORD *result)
{
  result[43] = sub_1C9754DD8;
  result[44] = sub_1C9754E44;
  result[45] = sub_1C9754EB0;
  result[28] = nullsub_7;
  result[29] = sub_1C9755294;
  result[49] = sub_1C97553B8;
  result[13] = sub_1C98281C8;
  result[14] = sub_1C982829C;
  result[15] = sub_1C9828308;
  result[16] = sub_1C9828374;
  result[17] = sub_1C98283F8;
  result[18] = sub_1C9828900;
  result[19] = sub_1C9828EA8;
  result[21] = sub_1C98207F8;
  result[26] = sub_1C982080C;
  result[27] = sub_1C9820820;
  result[35] = sub_1C98294AC;
  result[36] = sub_1C98295C8;
  result[37] = sub_1C98296F0;
  result[38] = sub_1C97552C0;
  return result;
}

void (**sub_1C9754BE4(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9754F1C;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9754F48;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C97551B4;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755224;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C975506C;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821878;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98218D0;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821948;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98219A0;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98219F8;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821AB8;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821BDC;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821C4C;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821D10;
  *result = sub_1C9821F00;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821DD0;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9821FF8;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98221D8;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9822394;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9822540;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9822554;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9822568;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9755188;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9822580;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98225D8;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C98225F4;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1C9822610;
  return result;
}

_QWORD *sub_1C9754D04(_QWORD *result)
{
  result[43] = sub_1C9754DD8;
  result[44] = sub_1C9754E44;
  result[45] = sub_1C9754EB0;
  result[28] = sub_1C9754F1C;
  result[29] = sub_1C9754F48;
  result[49] = sub_1C975506C;
  result[13] = sub_1C9829818;
  result[14] = sub_1C98298EC;
  result[15] = sub_1C9829958;
  result[16] = sub_1C98299C4;
  result[17] = sub_1C9829A48;
  result[18] = sub_1C9829F50;
  result[19] = sub_1C982A4F8;
  result[21] = sub_1C9822540;
  result[26] = sub_1C9822554;
  result[27] = sub_1C9822568;
  result[35] = sub_1C982AAFC;
  result[36] = sub_1C982AC18;
  result[37] = sub_1C982AD40;
  result[38] = sub_1C9754F74;
  return result;
}

uint64_t sub_1C9754DD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  v6 = 0;
  v7 = (__int16 *)(result + 2);
  v8 = (__int16 *)(a3 + 2);
  do
  {
    v9 = 0;
    v10 = v8;
    v11 = v7;
    do
    {
      *(_WORD *)(a5 + v9) = *(v11 - 1) - *(v10 - 1);
      v13 = *v11;
      v11 += 2;
      v12 = v13;
      v14 = *v10;
      v10 += 2;
      *(_WORD *)(a6 + v9) = v12 - v14;
      v9 += 2;
    }
    while (v9 != 8);
    ++v6;
    a6 += 8;
    a5 += 8;
    v7 += a2;
    v8 += a4;
  }
  while (v6 != 4);
  return result;
}

uint64_t sub_1C9754E44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  v6 = 0;
  v7 = (__int16 *)(result + 2);
  v8 = (__int16 *)(a3 + 2);
  do
  {
    v9 = 0;
    v10 = v8;
    v11 = v7;
    do
    {
      *(_WORD *)(a5 + v9) = *(v11 - 1) - *(v10 - 1);
      v13 = *v11;
      v11 += 2;
      v12 = v13;
      v14 = *v10;
      v10 += 2;
      *(_WORD *)(a6 + v9) = v12 - v14;
      v9 += 2;
    }
    while (v9 != 16);
    ++v6;
    a6 += 16;
    a5 += 16;
    v7 += a2;
    v8 += a4;
  }
  while (v6 != 8);
  return result;
}

uint64_t sub_1C9754EB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  v6 = 0;
  v7 = (__int16 *)(result + 2);
  v8 = (__int16 *)(a3 + 2);
  do
  {
    v9 = 0;
    v10 = v8;
    v11 = v7;
    do
    {
      *(_WORD *)(a5 + v9) = *(v11 - 1) - *(v10 - 1);
      v13 = *v11;
      v11 += 2;
      v12 = v13;
      v14 = *v10;
      v10 += 2;
      *(_WORD *)(a6 + v9) = v12 - v14;
      v9 += 2;
    }
    while (v9 != 32);
    ++v6;
    a6 += 32;
    a5 += 32;
    v7 += a2;
    v8 += a4;
  }
  while (v6 != 16);
  return result;
}

int16x8_t sub_1C9754F1C(uint64_t a1)
{
  uint64_t i;
  int16x8_t result;

  for (i = 0; i != 512; i += 16)
  {
    result = vqmovn_high_s32(vqmovn_s32(vshll_n_s16(*(int16x4_t *)(a1 + i), 1uLL)), vshll_high_n_s16(*(int16x8_t *)(a1 + i), 1uLL));
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

int16x8_t sub_1C9754F48(uint64_t a1)
{
  uint64_t i;
  int16x8_t result;

  for (i = 0; i != 2048; i += 16)
  {
    result = vqmovn_high_s32(vqmovn_s32(vshll_n_s16(*(int16x4_t *)(a1 + i), 2uLL)), vshll_high_n_s16(*(int16x8_t *)(a1 + i), 2uLL));
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

void sub_1C9754F74(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _WORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v8 = 0;
  v9 = 0;
  v10 = a3 - 2048;
  v11 = (_WORD *)(a1 + 2);
  v12 = 2 * a2;
  do
  {
    v13 = 0;
    v14 = &a3[v8];
    v15 = v11;
    do
    {
      v16 = *(__int16 *)&v14[v13];
      v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        v18 = *(__int16 *)&v14[v13 - 2048] << 12 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 4095)
        v19 = 4095;
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 4095)
        v20 = 4095;
      *v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5)
    bzero(v10, 0x800uLL);
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1C975506C(uint64_t result, int a2, int a3)
{
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v3 = 1 << a2;
  v4 = a2 - 3;
  v5 = 3 - a2;
  v6 = 1 << (2 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      v7 = 0;
      if (v3 <= 1)
        v8 = 1;
      else
        v8 = 1 << a2;
      v9 = 2 * v3;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *(__int16 *)(result + v10);
          v13 = (v6 + v12) >> v5;
          v14 = v12 << v4;
          if (a2 < 3)
            v14 = v13;
          v11 += v14;
          if (v11 >= 0x7FFF)
            v15 = 0x7FFF;
          else
            v15 = v11;
          if (v15 <= -32768)
            LOWORD(v15) = 0x8000;
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    v16 = 0;
    if (v3 <= 1)
      v17 = 1;
    else
      v17 = 1 << a2;
    do
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (v18 << a2) + v16;
        v21 = *(__int16 *)(result + 2 * v20);
        v22 = (v6 + v21) >> v5;
        v23 = v21 << v4;
        if (a2 < 3)
          v23 = v22;
        v19 += v23;
        if (v19 >= 0x7FFF)
          v24 = 0x7FFF;
        else
          v24 = v19;
        if (v24 <= -32768)
          LOWORD(v24) = 0x8000;
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

uint64_t sub_1C9755188(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  __int16 v3;

  v1 = 0;
  for (i = 30; i != 14; i -= 2)
  {
    v3 = *(_WORD *)(result + v1);
    *(_WORD *)(result + v1) = *(_WORD *)(result + i);
    *(_WORD *)(result + i) = v3;
    v1 += 2;
  }
  return result;
}

uint64_t sub_1C97551B4(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;

  if (a2 != 31)
  {
    v2 = 0;
    if (1 << a2 <= 1)
      v3 = 1;
    else
      v3 = 1 << a2;
    do
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v5 += *(__int16 *)(result + v4);
        if (v5 >= 0x7FFF)
          v6 = 0x7FFF;
        else
          v6 = v5;
        if (v6 <= -32768)
          LOWORD(v6) = 0x8000;
        *(_WORD *)(result + v4) = v6;
        v4 += 2;
      }
      while (2 * v3 != v4);
      ++v2;
      result += 2 * (1 << a2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_1C9755224(uint64_t result, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (a2 != 31)
  {
    v2 = 0;
    v3 = 1 << a2;
    if (1 << a2 <= 1)
      v3 = 1;
    do
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = (v4 << a2) + v2;
        v5 += *(__int16 *)(result + 2 * v6);
        if (v5 >= 0x7FFF)
          v7 = 0x7FFF;
        else
          v7 = v5;
        if (v7 <= -32768)
          LOWORD(v7) = 0x8000;
        *(_WORD *)(result + 2 * v6) = v7;
        ++v4;
      }
      while (v3 != v4);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

int16x8_t sub_1C9755294(uint64_t a1)
{
  uint64_t i;
  int16x8_t result;

  for (i = 0; i != 2048; i += 16)
  {
    result = vqmovn_high_s32(vqmovn_s32(vshll_n_s16(*(int16x4_t *)(a1 + i), 1uLL)), vshll_high_n_s16(*(int16x8_t *)(a1 + i), 1uLL));
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

void sub_1C97552C0(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _WORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v8 = 0;
  v9 = 0;
  v10 = a3 - 2048;
  v11 = (_WORD *)(a1 + 2);
  v12 = 2 * a2;
  do
  {
    v13 = 0;
    v14 = &a3[v8];
    v15 = v11;
    do
    {
      v16 = *(__int16 *)&v14[v13];
      v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        v18 = *(__int16 *)&v14[v13 - 2048] << 11 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 2047)
        v19 = 2047;
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 2047)
        v20 = 2047;
      *v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5)
    bzero(v10, 0x800uLL);
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1C97553B8(uint64_t result, int a2, int a3)
{
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v3 = 1 << a2;
  v4 = a2 - 4;
  v5 = 4 - a2;
  v6 = 1 << (3 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      v7 = 0;
      if (v3 <= 1)
        v8 = 1;
      else
        v8 = 1 << a2;
      v9 = 2 * v3;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *(__int16 *)(result + v10);
          v13 = (v6 + v12) >> v5;
          v14 = v12 << v4;
          if (a2 < 4)
            v14 = v13;
          v11 += v14;
          if (v11 >= 0x7FFF)
            v15 = 0x7FFF;
          else
            v15 = v11;
          if (v15 <= -32768)
            LOWORD(v15) = 0x8000;
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    v16 = 0;
    if (v3 <= 1)
      v17 = 1;
    else
      v17 = 1 << a2;
    do
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (v18 << a2) + v16;
        v21 = *(__int16 *)(result + 2 * v20);
        v22 = (v6 + v21) >> v5;
        v23 = v21 << v4;
        if (a2 < 4)
          v23 = v22;
        v19 += v23;
        if (v19 >= 0x7FFF)
          v24 = 0x7FFF;
        else
          v24 = v19;
        if (v24 <= -32768)
          LOWORD(v24) = 0x8000;
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

uint64_t sub_1C97554D4(uint64_t result)
{
  uint64_t v1;
  int16x8_t v2;

  v1 = 0;
  v2.i64[0] = 0x1000100010001;
  v2.i64[1] = 0x1000100010001;
  do
  {
    *(int16x8_t *)(result + v1) = vhaddq_s16(*(int16x8_t *)(result + v1), v2);
    v1 += 16;
  }
  while (v1 != 512);
  return result;
}

void sub_1C97554FC(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _WORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v8 = 0;
  v9 = 0;
  v10 = a3 - 2048;
  v11 = (_WORD *)(a1 + 2);
  v12 = 2 * a2;
  do
  {
    v13 = 0;
    v14 = &a3[v8];
    v15 = v11;
    do
    {
      v16 = *(__int16 *)&v14[v13];
      v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        v18 = *(__int16 *)&v14[v13 - 2048] << 10 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 1023)
        v19 = 1023;
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 1023)
        v20 = 1023;
      *v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5)
    bzero(v10, 0x800uLL);
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1C97555F4(uint64_t result, int a2, int a3)
{
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v3 = 1 << a2;
  v4 = a2 - 5;
  v5 = 5 - a2;
  v6 = 1 << (4 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      v7 = 0;
      if (v3 <= 1)
        v8 = 1;
      else
        v8 = 1 << a2;
      v9 = 2 * v3;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *(__int16 *)(result + v10);
          v13 = (v6 + v12) >> v5;
          v14 = v12 << v4;
          if (a2 < 5)
            v14 = v13;
          v11 += v14;
          if (v11 >= 0x7FFF)
            v15 = 0x7FFF;
          else
            v15 = v11;
          if (v15 <= -32768)
            LOWORD(v15) = 0x8000;
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    v16 = 0;
    if (v3 <= 1)
      v17 = 1;
    else
      v17 = 1 << a2;
    do
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (v18 << a2) + v16;
        v21 = *(__int16 *)(result + 2 * v20);
        v22 = (v6 + v21) >> v5;
        v23 = v21 << v4;
        if (a2 < 5)
          v23 = v22;
        v19 += v23;
        if (v19 >= 0x7FFF)
          v24 = 0x7FFF;
        else
          v24 = v19;
        if (v24 <= -32768)
          LOWORD(v24) = 0x8000;
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

int16x8_t sub_1C9755710(uint64_t a1)
{
  uint64_t i;
  int16x8_t result;

  for (i = 0; i != 512; i += 16)
  {
    result = vrshrn_high_n_s32(vrshrn_n_s32(vmovl_s16(*(int16x4_t *)(a1 + i)), 2uLL), vmovl_high_s16(*(int16x8_t *)(a1 + i)), 2uLL);
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

uint64_t sub_1C975573C(uint64_t result)
{
  uint64_t v1;
  int16x8_t v2;

  v1 = 0;
  v2.i64[0] = 0x1000100010001;
  v2.i64[1] = 0x1000100010001;
  do
  {
    *(int16x8_t *)(result + v1) = vhaddq_s16(*(int16x8_t *)(result + v1), v2);
    v1 += 16;
  }
  while (v1 != 2048);
  return result;
}

void sub_1C9755760(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _WORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v8 = 0;
  v9 = 0;
  v10 = a3 - 2048;
  v11 = (_WORD *)(a1 + 2);
  v12 = 2 * a2;
  do
  {
    v13 = 0;
    v14 = &a3[v8];
    v15 = v11;
    do
    {
      v16 = *(__int16 *)&v14[v13];
      v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        v18 = *(__int16 *)&v14[v13 - 2048] << 9 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 511)
        v19 = 511;
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 511)
        v20 = 511;
      *v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5)
    bzero(v10, 0x800uLL);
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1C9755858(uint64_t result, int a2, int a3)
{
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v3 = 1 << a2;
  v4 = a2 - 6;
  v5 = 6 - a2;
  v6 = 1 << (5 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      v7 = 0;
      if (v3 <= 1)
        v8 = 1;
      else
        v8 = 1 << a2;
      v9 = 2 * v3;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *(__int16 *)(result + v10);
          v13 = (v6 + v12) >> v5;
          v14 = v12 << v4;
          if (a2 < 6)
            v14 = v13;
          v11 += v14;
          if (v11 >= 0x7FFF)
            v15 = 0x7FFF;
          else
            v15 = v11;
          if (v15 <= -32768)
            LOWORD(v15) = 0x8000;
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    v16 = 0;
    if (v3 <= 1)
      v17 = 1;
    else
      v17 = 1 << a2;
    do
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (v18 << a2) + v16;
        v21 = *(__int16 *)(result + 2 * v20);
        v22 = (v6 + v21) >> v5;
        v23 = v21 << v4;
        if (a2 < 6)
          v23 = v22;
        v19 += v23;
        if (v19 >= 0x7FFF)
          v24 = 0x7FFF;
        else
          v24 = v19;
        if (v24 <= -32768)
          LOWORD(v24) = 0x8000;
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

int16x8_t sub_1C9755974(uint64_t a1)
{
  uint64_t i;
  int16x8_t result;

  for (i = 0; i != 512; i += 16)
  {
    result = vrshrn_high_n_s32(vrshrn_n_s32(vmovl_s16(*(int16x4_t *)(a1 + i)), 3uLL), vmovl_high_s16(*(int16x8_t *)(a1 + i)), 3uLL);
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

int16x8_t sub_1C97559A0(uint64_t a1)
{
  uint64_t i;
  int16x8_t result;

  for (i = 0; i != 2048; i += 16)
  {
    result = vrshrn_high_n_s32(vrshrn_n_s32(vmovl_s16(*(int16x4_t *)(a1 + i)), 2uLL), vmovl_high_s16(*(int16x8_t *)(a1 + i)), 2uLL);
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

void sub_1C97559CC(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _WORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v8 = 0;
  v9 = 0;
  v10 = a3 - 2048;
  v11 = (_WORD *)(a1 + 2);
  v12 = 2 * a2;
  do
  {
    v13 = 0;
    v14 = &a3[v8];
    v15 = v11;
    do
    {
      v16 = *(__int16 *)&v14[v13];
      v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        v18 = *(__int16 *)&v14[v13 - 2048] << 8 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 255)
        v19 = 255;
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 255)
        v20 = 255;
      *v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5)
    bzero(v10, 0x800uLL);
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1C9755AC4(uint64_t result, int a2, int a3)
{
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v3 = 1 << a2;
  v4 = a2 - 7;
  v5 = 7 - a2;
  v6 = 1 << (6 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      v7 = 0;
      if (v3 <= 1)
        v8 = 1;
      else
        v8 = 1 << a2;
      v9 = 2 * v3;
      do
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *(__int16 *)(result + v10);
          v13 = (v6 + v12) >> v5;
          v14 = v12 << v4;
          if (a2 < 7)
            v14 = v13;
          v11 += v14;
          if (v11 >= 0x7FFF)
            v15 = 0x7FFF;
          else
            v15 = v11;
          if (v15 <= -32768)
            LOWORD(v15) = 0x8000;
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    v16 = 0;
    if (v3 <= 1)
      v17 = 1;
    else
      v17 = 1 << a2;
    do
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (v18 << a2) + v16;
        v21 = *(__int16 *)(result + 2 * v20);
        v22 = (v6 + v21) >> v5;
        v23 = v21 << v4;
        if (a2 < 7)
          v23 = v22;
        v19 += v23;
        if (v19 >= 0x7FFF)
          v24 = 0x7FFF;
        else
          v24 = v19;
        if (v24 <= -32768)
          LOWORD(v24) = 0x8000;
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1C9755BE0(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;

  v8 = 0;
  for (i = 0; i != 32; ++i)
  {
    v10 = 0;
    v11 = &a3[v8];
    do
    {
      v12 = *(__int16 *)&v11[v10];
      v13 = *(__int16 *)&a4[v8 + v10];
      if (a5)
      {
        v14 = *(__int16 *)&v11[v10 - 2048] << 8 >> a5[2];
        v12 += (v14 * *a5) >> 3;
        v13 += (v14 * a5[1]) >> 3;
      }
      v15 = (_BYTE *)(a1 + v10);
      v16 = v12 + *(unsigned __int8 *)(a1 + v10);
      if (v16 >= 255)
        v16 = 255;
      *v15 = v16 & ~(v16 >> 31);
      v17 = v13 + v15[1];
      if (v17 >= 255)
        v17 = 255;
      v15[1] = v17 & ~(v17 >> 31);
      v10 += 2;
    }
    while (v10 != 64);
    a1 += a2;
    v8 += 64;
  }
  if (a5)
    bzero(a3 - 2048, 0x800uLL);
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1C9755CD0(uint64_t result)
{
  int v1;
  void *v2;

  *(_QWORD *)result = sub_1C975CC10;
  *(_QWORD *)(result + 16) = sub_1C975CE28;
  v1 = *(unsigned __int8 *)(result + 537);
  *(_QWORD *)(result + 208) = sub_1C975D164;
  *(_QWORD *)(result + 216) = sub_1C975D188;
  *(_QWORD *)(result + 224) = sub_1C975D1AC;
  *(_QWORD *)(result + 232) = sub_1C975D1D8;
  *(_QWORD *)(result + 128) = sub_1C975D23C;
  *(_QWORD *)(result + 136) = sub_1C975D264;
  *(_QWORD *)(result + 144) = sub_1C975D290;
  *(_QWORD *)(result + 152) = sub_1C975D2C8;
  *(_QWORD *)(result + 520) = sub_1C975D300;
  *(_QWORD *)(result + 32) = sub_1C9791BF8;
  *(_QWORD *)(result + 40) = sub_1C9791C80;
  v2 = sub_1C9791E08;
  if (!v1)
    v2 = sub_1C9791D44;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 320) = sub_1C9791EFC;
  *(_QWORD *)(result + 328) = sub_1C9791F74;
  *(_QWORD *)(result + 160) = sub_1C9792180;
  *(_QWORD *)(result + 168) = sub_1C97921E8;
  *(_QWORD *)(result + 176) = sub_1C97922BC;
  *(_QWORD *)(result + 184) = sub_1C979236C;
  *(_QWORD *)(result + 192) = sub_1C9792398;
  *(_QWORD *)(result + 200) = sub_1C975D144;
  *(_QWORD *)(result + 80) = sub_1C97923D4;
  *(_QWORD *)(result + 88) = sub_1C9792430;
  *(_QWORD *)(result + 96) = sub_1C97924C8;
  *(_QWORD *)(result + 104) = sub_1C979256C;
  *(_QWORD *)(result + 112) = sub_1C979259C;
  *(_QWORD *)(result + 120) = sub_1C975D214;
  *(_QWORD *)(result + 240) = sub_1C97925D4;
  *(_QWORD *)(result + 248) = sub_1C9792764;
  *(_QWORD *)(result + 256) = sub_1C97929DC;
  *(_QWORD *)(result + 264) = sub_1C9792D00;
  *(_QWORD *)(result + 272) = sub_1C97930D4;
  *(_QWORD *)(result + 280) = sub_1C9792050;
  *(_QWORD *)(result + 352) = sub_1C9793650;
  *(_QWORD *)(result + 288) = sub_1C97920E8;
  *(_QWORD *)(result + 296) = sub_1C97936EC;
  *(_QWORD *)(result + 336) = sub_1C97934EC;
  *(_QWORD *)(result + 344) = sub_1C979378C;
  *(_QWORD *)(result + 304) = sub_1C97937EC;
  *(_QWORD *)(result + 312) = sub_1C9758210;
  return result;
}

uint64_t sub_1C9755E8C(uint64_t result)
{
  int v1;
  void (*v2)(int, unsigned int, uint64_t, uint64_t, uint64_t);
  void (*v3)(int, unsigned int, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(result + 8) = sub_1C975C058;
  v1 = *(unsigned __int8 *)(result + 538);
  v2 = sub_1C975C560;
  if (v1 == 2)
    v2 = sub_1C975C26C;
  if (v1 == 3)
    v3 = sub_1C975C7F0;
  else
    v3 = v2;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 56) = sub_1C9757630;
  *(_QWORD *)(result + 64) = sub_1C97576D8;
  *(_QWORD *)(result + 72) = sub_1C9757780;
  *(_QWORD *)(result + 528) = sub_1C975CB08;
  *(_QWORD *)(result + 456) = sub_1C9795B20;
  *(_QWORD *)(result + 464) = sub_1C9795B5C;
  *(_QWORD *)(result + 360) = sub_1C9795BA8;
  *(_QWORD *)(result + 368) = sub_1C9795C58;
  *(_QWORD *)(result + 392) = sub_1C9795CF8;
  *(_QWORD *)(result + 400) = sub_1C9795D20;
  *(_QWORD *)(result + 408) = sub_1C9795D50;
  *(_QWORD *)(result + 416) = sub_1C9795D7C;
  *(_QWORD *)(result + 424) = sub_1C9795DB8;
  *(_QWORD *)(result + 432) = sub_1C9795DF8;
  *(_QWORD *)(result + 440) = sub_1C9795E38;
  *(_QWORD *)(result + 448) = sub_1C9795E68;
  *(_QWORD *)(result + 488) = sub_1C9795EA0;
  *(_QWORD *)(result + 496) = sub_1C97960A8;
  *(_QWORD *)(result + 504) = sub_1C97963AC;
  *(_QWORD *)(result + 512) = sub_1C97966F8;
  *(_QWORD *)(result + 472) = sub_1C9796A7C;
  *(_QWORD *)(result + 480) = sub_1C9796BD8;
  *(_QWORD *)(result + 376) = sub_1C9796AD8;
  *(_QWORD *)(result + 384) = sub_1C9796C6C;
  return result;
}

uint64_t sub_1C9755FC0(uint64_t result)
{
  int v1;
  void *v2;

  *(_QWORD *)result = sub_1C975B8D0;
  *(_QWORD *)(result + 16) = sub_1C975BAE8;
  v1 = *(unsigned __int8 *)(result + 537);
  *(_QWORD *)(result + 208) = sub_1C975BE24;
  *(_QWORD *)(result + 216) = sub_1C975BE48;
  *(_QWORD *)(result + 224) = sub_1C975BE6C;
  *(_QWORD *)(result + 232) = sub_1C975BE98;
  *(_QWORD *)(result + 128) = sub_1C975BEFC;
  *(_QWORD *)(result + 136) = sub_1C975BF24;
  *(_QWORD *)(result + 144) = sub_1C975BF50;
  *(_QWORD *)(result + 152) = sub_1C975BF88;
  *(_QWORD *)(result + 520) = sub_1C975BFC0;
  *(_QWORD *)(result + 32) = sub_1C9791BF8;
  *(_QWORD *)(result + 40) = sub_1C9791C80;
  v2 = sub_1C97938EC;
  if (!v1)
    v2 = sub_1C9791D44;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 320) = sub_1C9791EFC;
  *(_QWORD *)(result + 328) = sub_1C9791F74;
  *(_QWORD *)(result + 160) = sub_1C97939E0;
  *(_QWORD *)(result + 168) = sub_1C9793A48;
  *(_QWORD *)(result + 176) = sub_1C9793B1C;
  *(_QWORD *)(result + 184) = sub_1C979236C;
  *(_QWORD *)(result + 192) = sub_1C9792398;
  *(_QWORD *)(result + 200) = sub_1C975BE04;
  *(_QWORD *)(result + 80) = sub_1C9793BCC;
  *(_QWORD *)(result + 88) = sub_1C9793C28;
  *(_QWORD *)(result + 96) = sub_1C9793CC0;
  *(_QWORD *)(result + 104) = sub_1C979256C;
  *(_QWORD *)(result + 112) = sub_1C979259C;
  *(_QWORD *)(result + 120) = sub_1C975BED4;
  *(_QWORD *)(result + 240) = sub_1C97925D4;
  *(_QWORD *)(result + 248) = sub_1C9792764;
  *(_QWORD *)(result + 256) = sub_1C97929DC;
  *(_QWORD *)(result + 264) = sub_1C9792D00;
  *(_QWORD *)(result + 272) = sub_1C97930D4;
  *(_QWORD *)(result + 280) = sub_1C9792050;
  *(_QWORD *)(result + 352) = sub_1C9793650;
  *(_QWORD *)(result + 288) = sub_1C97920E8;
  *(_QWORD *)(result + 296) = sub_1C97936EC;
  *(_QWORD *)(result + 336) = sub_1C97934EC;
  *(_QWORD *)(result + 344) = sub_1C979378C;
  *(_QWORD *)(result + 304) = sub_1C97937EC;
  *(_QWORD *)(result + 312) = sub_1C9758210;
  return result;
}

uint64_t sub_1C975617C(uint64_t result)
{
  int v1;
  void (*v2)(int, unsigned int, uint64_t, uint64_t, uint64_t);
  void (*v3)(int, unsigned int, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(result + 8) = sub_1C975AD18;
  v1 = *(unsigned __int8 *)(result + 538);
  v2 = sub_1C975B220;
  if (v1 == 2)
    v2 = sub_1C975AF2C;
  if (v1 == 3)
    v3 = sub_1C975B4B0;
  else
    v3 = v2;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 56) = sub_1C9757630;
  *(_QWORD *)(result + 64) = sub_1C97576D8;
  *(_QWORD *)(result + 72) = sub_1C9757780;
  *(_QWORD *)(result + 528) = sub_1C975B7C8;
  *(_QWORD *)(result + 456) = sub_1C9795B20;
  *(_QWORD *)(result + 464) = sub_1C9795B5C;
  *(_QWORD *)(result + 360) = sub_1C9795BA8;
  *(_QWORD *)(result + 368) = sub_1C9795C58;
  *(_QWORD *)(result + 392) = sub_1C9795CF8;
  *(_QWORD *)(result + 400) = sub_1C9795D20;
  *(_QWORD *)(result + 408) = sub_1C9795D50;
  *(_QWORD *)(result + 416) = sub_1C9795D7C;
  *(_QWORD *)(result + 424) = sub_1C9795DB8;
  *(_QWORD *)(result + 432) = sub_1C9795DF8;
  *(_QWORD *)(result + 440) = sub_1C9795E38;
  *(_QWORD *)(result + 448) = sub_1C9795E68;
  *(_QWORD *)(result + 488) = sub_1C9795EA0;
  *(_QWORD *)(result + 496) = sub_1C97960A8;
  *(_QWORD *)(result + 504) = sub_1C97963AC;
  *(_QWORD *)(result + 512) = sub_1C97966F8;
  *(_QWORD *)(result + 472) = sub_1C9796A7C;
  *(_QWORD *)(result + 480) = sub_1C9796BD8;
  *(_QWORD *)(result + 376) = sub_1C9796AD8;
  *(_QWORD *)(result + 384) = sub_1C9796C6C;
  return result;
}

uint64_t sub_1C97562B0(uint64_t result)
{
  int v1;
  void *v2;

  *(_QWORD *)result = sub_1C975A590;
  *(_QWORD *)(result + 16) = sub_1C975A7A8;
  v1 = *(unsigned __int8 *)(result + 537);
  *(_QWORD *)(result + 208) = sub_1C975AAE4;
  *(_QWORD *)(result + 216) = sub_1C975AB08;
  *(_QWORD *)(result + 224) = sub_1C975AB2C;
  *(_QWORD *)(result + 232) = sub_1C975AB58;
  *(_QWORD *)(result + 128) = sub_1C975ABBC;
  *(_QWORD *)(result + 136) = sub_1C975ABE4;
  *(_QWORD *)(result + 144) = sub_1C975AC10;
  *(_QWORD *)(result + 152) = sub_1C975AC48;
  *(_QWORD *)(result + 520) = sub_1C975AC80;
  *(_QWORD *)(result + 32) = sub_1C9791BF8;
  *(_QWORD *)(result + 40) = sub_1C9791C80;
  v2 = sub_1C9793D64;
  if (!v1)
    v2 = sub_1C9791D44;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 320) = sub_1C9791EFC;
  *(_QWORD *)(result + 328) = sub_1C9791F74;
  *(_QWORD *)(result + 160) = sub_1C9793E58;
  *(_QWORD *)(result + 168) = sub_1C9793EC0;
  *(_QWORD *)(result + 176) = sub_1C9793F94;
  *(_QWORD *)(result + 184) = sub_1C979236C;
  *(_QWORD *)(result + 192) = sub_1C9792398;
  *(_QWORD *)(result + 200) = sub_1C975AAC4;
  *(_QWORD *)(result + 80) = sub_1C9794044;
  *(_QWORD *)(result + 88) = sub_1C97940A0;
  *(_QWORD *)(result + 96) = sub_1C9794138;
  *(_QWORD *)(result + 104) = sub_1C979256C;
  *(_QWORD *)(result + 112) = sub_1C979259C;
  *(_QWORD *)(result + 120) = sub_1C975AB94;
  *(_QWORD *)(result + 240) = sub_1C97925D4;
  *(_QWORD *)(result + 248) = sub_1C9792764;
  *(_QWORD *)(result + 256) = sub_1C97929DC;
  *(_QWORD *)(result + 264) = sub_1C9792D00;
  *(_QWORD *)(result + 272) = sub_1C97930D4;
  *(_QWORD *)(result + 280) = sub_1C9792050;
  *(_QWORD *)(result + 352) = sub_1C9793650;
  *(_QWORD *)(result + 288) = sub_1C97920E8;
  *(_QWORD *)(result + 296) = sub_1C97936EC;
  *(_QWORD *)(result + 336) = sub_1C97934EC;
  *(_QWORD *)(result + 344) = sub_1C979378C;
  *(_QWORD *)(result + 304) = sub_1C97937EC;
  *(_QWORD *)(result + 312) = sub_1C9758210;
  return result;
}

uint64_t sub_1C975646C(uint64_t result)
{
  int v1;
  void (*v2)(int, unsigned int, uint64_t, uint64_t, uint64_t);
  void (*v3)(int, unsigned int, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(result + 8) = sub_1C97599D8;
  v1 = *(unsigned __int8 *)(result + 538);
  v2 = sub_1C9759EE0;
  if (v1 == 2)
    v2 = sub_1C9759BEC;
  if (v1 == 3)
    v3 = sub_1C975A170;
  else
    v3 = v2;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 56) = sub_1C9757630;
  *(_QWORD *)(result + 64) = sub_1C97576D8;
  *(_QWORD *)(result + 72) = sub_1C9757780;
  *(_QWORD *)(result + 528) = sub_1C975A488;
  *(_QWORD *)(result + 456) = sub_1C9795B20;
  *(_QWORD *)(result + 464) = sub_1C9795B5C;
  *(_QWORD *)(result + 360) = sub_1C9795BA8;
  *(_QWORD *)(result + 368) = sub_1C9795C58;
  *(_QWORD *)(result + 392) = sub_1C9795CF8;
  *(_QWORD *)(result + 400) = sub_1C9795D20;
  *(_QWORD *)(result + 408) = sub_1C9795D50;
  *(_QWORD *)(result + 416) = sub_1C9795D7C;
  *(_QWORD *)(result + 424) = sub_1C9795DB8;
  *(_QWORD *)(result + 432) = sub_1C9795DF8;
  *(_QWORD *)(result + 440) = sub_1C9795E38;
  *(_QWORD *)(result + 448) = sub_1C9795E68;
  *(_QWORD *)(result + 488) = sub_1C9795EA0;
  *(_QWORD *)(result + 496) = sub_1C97960A8;
  *(_QWORD *)(result + 504) = sub_1C97963AC;
  *(_QWORD *)(result + 512) = sub_1C97966F8;
  *(_QWORD *)(result + 472) = sub_1C9796A7C;
  *(_QWORD *)(result + 480) = sub_1C9796BD8;
  *(_QWORD *)(result + 376) = sub_1C9796AD8;
  *(_QWORD *)(result + 384) = sub_1C9796C6C;
  return result;
}

uint64_t sub_1C97565A0(uint64_t result)
{
  int v1;
  void *v2;

  *(_QWORD *)result = sub_1C9759250;
  *(_QWORD *)(result + 16) = sub_1C9759468;
  v1 = *(unsigned __int8 *)(result + 537);
  *(_QWORD *)(result + 304) = sub_1C97581A0;
  *(_QWORD *)(result + 312) = sub_1C9758210;
  *(_QWORD *)(result + 208) = sub_1C97597A4;
  *(_QWORD *)(result + 216) = sub_1C97597C8;
  *(_QWORD *)(result + 224) = sub_1C97597EC;
  *(_QWORD *)(result + 232) = sub_1C9759818;
  *(_QWORD *)(result + 128) = sub_1C975987C;
  *(_QWORD *)(result + 136) = sub_1C97598A4;
  *(_QWORD *)(result + 144) = sub_1C97598D0;
  *(_QWORD *)(result + 152) = sub_1C9759908;
  *(_QWORD *)(result + 520) = sub_1C9759940;
  *(_QWORD *)(result + 32) = sub_1C9791BF8;
  *(_QWORD *)(result + 40) = sub_1C9791C80;
  v2 = sub_1C97941DC;
  if (!v1)
    v2 = sub_1C9791D44;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 320) = sub_1C9791EFC;
  *(_QWORD *)(result + 328) = sub_1C9791F74;
  *(_QWORD *)(result + 160) = sub_1C97942D0;
  *(_QWORD *)(result + 168) = sub_1C9794338;
  *(_QWORD *)(result + 176) = sub_1C979440C;
  *(_QWORD *)(result + 184) = sub_1C979236C;
  *(_QWORD *)(result + 192) = sub_1C9792398;
  *(_QWORD *)(result + 200) = sub_1C9759784;
  *(_QWORD *)(result + 80) = sub_1C97944BC;
  *(_QWORD *)(result + 88) = sub_1C9794518;
  *(_QWORD *)(result + 96) = sub_1C97945B0;
  *(_QWORD *)(result + 104) = sub_1C979256C;
  *(_QWORD *)(result + 112) = sub_1C979259C;
  *(_QWORD *)(result + 120) = sub_1C9759854;
  *(_QWORD *)(result + 240) = sub_1C97925D4;
  *(_QWORD *)(result + 248) = sub_1C9792764;
  *(_QWORD *)(result + 256) = sub_1C97929DC;
  *(_QWORD *)(result + 264) = sub_1C9792D00;
  *(_QWORD *)(result + 272) = sub_1C97930D4;
  *(_QWORD *)(result + 280) = sub_1C9792050;
  *(_QWORD *)(result + 336) = sub_1C97934EC;
  *(_QWORD *)(result + 344) = sub_1C9758508;
  *(_QWORD *)(result + 352) = sub_1C9793650;
  *(_QWORD *)(result + 288) = sub_1C97920E8;
  *(_QWORD *)(result + 296) = sub_1C97936EC;
  return result;
}

uint64_t sub_1C975675C(uint64_t result)
{
  int v1;
  void (*v2)(int, unsigned int, uint64_t, uint64_t, uint64_t);
  void (*v3)(int, unsigned int, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(result + 8) = sub_1C9758698;
  v1 = *(unsigned __int8 *)(result + 538);
  v2 = sub_1C9758BA0;
  if (v1 == 2)
    v2 = sub_1C97588AC;
  if (v1 == 3)
    v3 = sub_1C9758E30;
  else
    v3 = v2;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 56) = sub_1C9757630;
  *(_QWORD *)(result + 64) = sub_1C97576D8;
  *(_QWORD *)(result + 72) = sub_1C9757780;
  *(_QWORD *)(result + 528) = sub_1C9759148;
  *(_QWORD *)(result + 456) = sub_1C9795B20;
  *(_QWORD *)(result + 464) = sub_1C9795B5C;
  *(_QWORD *)(result + 360) = sub_1C9795BA8;
  *(_QWORD *)(result + 368) = sub_1C9795C58;
  *(_QWORD *)(result + 392) = sub_1C9795CF8;
  *(_QWORD *)(result + 400) = sub_1C9795D20;
  *(_QWORD *)(result + 408) = sub_1C9795D50;
  *(_QWORD *)(result + 416) = sub_1C9795D7C;
  *(_QWORD *)(result + 424) = sub_1C9795DB8;
  *(_QWORD *)(result + 432) = sub_1C9795DF8;
  *(_QWORD *)(result + 440) = sub_1C9795E38;
  *(_QWORD *)(result + 448) = sub_1C9795E68;
  *(_QWORD *)(result + 488) = sub_1C9795EA0;
  *(_QWORD *)(result + 496) = sub_1C97960A8;
  *(_QWORD *)(result + 504) = sub_1C97963AC;
  *(_QWORD *)(result + 512) = sub_1C97966F8;
  *(_QWORD *)(result + 472) = sub_1C9796A7C;
  *(_QWORD *)(result + 480) = sub_1C9757A2C;
  *(_QWORD *)(result + 376) = sub_1C9796AD8;
  *(_QWORD *)(result + 384) = sub_1C97578D0;
  return result;
}

uint64_t sub_1C9756890(uint64_t result)
{
  int v1;
  void *v2;

  *(_QWORD *)result = sub_1C9757BFC;
  *(_QWORD *)(result + 16) = sub_1C9757E14;
  v1 = *(unsigned __int8 *)(result + 537);
  *(_QWORD *)(result + 304) = sub_1C97581A0;
  *(_QWORD *)(result + 312) = sub_1C9758210;
  *(_QWORD *)(result + 208) = sub_1C97582A0;
  *(_QWORD *)(result + 216) = sub_1C97582C4;
  *(_QWORD *)(result + 224) = sub_1C97582E8;
  *(_QWORD *)(result + 232) = sub_1C9758314;
  *(_QWORD *)(result + 128) = sub_1C9758378;
  *(_QWORD *)(result + 136) = sub_1C97583A0;
  *(_QWORD *)(result + 144) = sub_1C97583CC;
  *(_QWORD *)(result + 152) = sub_1C9758404;
  *(_QWORD *)(result + 336) = sub_1C975843C;
  *(_QWORD *)(result + 344) = sub_1C9758508;
  *(_QWORD *)(result + 352) = sub_1C9758584;
  *(_QWORD *)(result + 520) = sub_1C9758600;
  *(_QWORD *)(result + 32) = sub_1C9791BF8;
  *(_QWORD *)(result + 40) = sub_1C9791C80;
  v2 = sub_1C9791D44;
  if (v1)
    v2 = sub_1C9794654;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 320) = sub_1C9791EFC;
  *(_QWORD *)(result + 328) = sub_1C9791F74;
  *(_QWORD *)(result + 288) = sub_1C97920E8;
  *(_QWORD *)(result + 296) = sub_1C9758130;
  *(_QWORD *)(result + 160) = sub_1C9794748;
  *(_QWORD *)(result + 168) = sub_1C97947B0;
  *(_QWORD *)(result + 176) = sub_1C9794884;
  *(_QWORD *)(result + 184) = sub_1C979236C;
  *(_QWORD *)(result + 192) = sub_1C9792398;
  *(_QWORD *)(result + 200) = sub_1C9758280;
  *(_QWORD *)(result + 80) = sub_1C9794934;
  *(_QWORD *)(result + 88) = sub_1C9794990;
  *(_QWORD *)(result + 96) = sub_1C9794A28;
  *(_QWORD *)(result + 104) = sub_1C979256C;
  *(_QWORD *)(result + 112) = sub_1C979259C;
  *(_QWORD *)(result + 120) = sub_1C9758350;
  *(_QWORD *)(result + 240) = sub_1C9794ACC;
  *(_QWORD *)(result + 248) = sub_1C9794C74;
  *(_QWORD *)(result + 256) = sub_1C9794EFC;
  *(_QWORD *)(result + 264) = sub_1C979525C;
  *(_QWORD *)(result + 272) = sub_1C97956A0;
  *(_QWORD *)(result + 280) = sub_1C9792050;
  return result;
}

uint64_t sub_1C9756A4C(uint64_t result)
{
  int v1;
  void (*v2)(int, unsigned int, uint64_t, uint64_t, uint64_t);
  void (*v3)(int, unsigned int, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(result + 8) = sub_1C9756B80;
  v1 = *(unsigned __int8 *)(result + 538);
  v2 = sub_1C9757088;
  if (v1 == 2)
    v2 = sub_1C9756D94;
  if (v1 == 3)
    v3 = sub_1C9757318;
  else
    v3 = v2;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 56) = sub_1C9757630;
  *(_QWORD *)(result + 64) = sub_1C97576D8;
  *(_QWORD *)(result + 72) = sub_1C9757780;
  *(_QWORD *)(result + 376) = sub_1C9757828;
  *(_QWORD *)(result + 384) = sub_1C97578D0;
  *(_QWORD *)(result + 472) = sub_1C9757978;
  *(_QWORD *)(result + 480) = sub_1C9757A2C;
  *(_QWORD *)(result + 528) = sub_1C9757AF4;
  *(_QWORD *)(result + 456) = sub_1C9795B20;
  *(_QWORD *)(result + 464) = sub_1C9795B5C;
  *(_QWORD *)(result + 360) = sub_1C9795BA8;
  *(_QWORD *)(result + 368) = sub_1C9795C58;
  *(_QWORD *)(result + 392) = sub_1C9795CF8;
  *(_QWORD *)(result + 400) = sub_1C9795D20;
  *(_QWORD *)(result + 408) = sub_1C9795D50;
  *(_QWORD *)(result + 416) = sub_1C9795D7C;
  *(_QWORD *)(result + 424) = sub_1C9795DB8;
  *(_QWORD *)(result + 432) = sub_1C9795DF8;
  *(_QWORD *)(result + 440) = sub_1C9795E38;
  *(_QWORD *)(result + 448) = sub_1C9795E68;
  *(_QWORD *)(result + 488) = sub_1C9796DA4;
  *(_QWORD *)(result + 496) = sub_1C9796FE4;
  *(_QWORD *)(result + 504) = sub_1C9797350;
  *(_QWORD *)(result + 512) = sub_1C9797718;
  return result;
}

void sub_1C9756B80(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_DWORD *)(a4 + 4 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_DWORD *)(a4 - 4);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630B0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C9756D94(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 + 9 + v7] - a3;
    v9 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      LODWORD(v11) = ((int)v5 + 4) >> 3;
      v12 = 2 << a1;
      if ((int)v11 <= 1)
        v11 = 1;
      else
        v11 = v11;
      if ((int)v5 >= 8)
        v13 = 8;
      else
        v13 = 1 << a1;
      v14 = v13;
      v15 = a5 + 4 * v12;
      v16 = -4 * v13;
      v17 = a4 + 4 * a3 * (v12 - 1);
      v18 = a3 * v13;
      v19 = (unsigned int *)(v15 - 4);
      v20 = (unsigned int *)(v17 - 4);
      v21 = v6 + 1;
      v22 = -(uint64_t)v13;
      do
      {
        if (((a2 >> v10) & 1) != 0)
        {
          v23 = v21;
          v24 = v20;
          v25 = v19;
          do
          {
            v9 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v15 + 4 * v26) = v9;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v10;
        v19 = (unsigned int *)((char *)v19 + v16);
        v20 -= v18;
        v15 += v16;
      }
      while (v10 != v11);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v14;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (unsigned int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v18;
      v35 = v31 + 1;
      v36 = -v14;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (unsigned int *)v33;
          v39 = v32;
          do
          {
            v9 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v9;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (unsigned int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v11);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      LODWORD(v42) = (int)v5 >> 2;
      v43 = 2 << a1;
      if ((int)v5 >> 2 <= 1)
        v42 = 1;
      else
        v42 = v42;
      v44 = a4 - 4 * a3;
      v45 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v44 + i);
            *(_DWORD *)(v45 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v43 + 4 * v41)) = vdupq_n_s32(v9);
        }
        ++v41;
        v45 += 16;
        v44 += 16;
      }
      while (v41 != v42);
      v47 = 0;
      v48 = a5 + 4 * (v43 + v5);
      v49 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v47) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v49 + j);
            *(_DWORD *)(v48 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v47 + v43)) = vdupq_n_s32(v9);
        }
        ++v47;
        v48 += 16;
        v49 += 16;
      }
      while (v47 != v42);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630B0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C9757088(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    v6 = __clz(__rbit32(a2));
    if (v6 < 9)
      v7 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 + 18 + v6]) * a3 - 1;
    else
      v7 = byte_1C9832564[9 * a1 + 9 + v6] - a3;
    LODWORD(v8) = (int)v5 >> 2;
    v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      v11 = 2 << a1;
      v12 = a5 + 4 * v11;
      if ((int)v8 <= 1)
        v13 = 1;
      else
        v13 = v8;
      v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        v15 = v10 + 1;
        if (((a2 >> v10) & 1) != 0)
        {
          v16 = -4;
          v17 = (unsigned int *)v14;
          do
          {
            v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        v10 = v15;
      }
      while (v15 != v13);
      v18 = 0;
      v19 = a5 + 4 * v5;
      v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          v22 = -4;
          v23 = (unsigned int *)v20;
          do
          {
            v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v24 = 0;
      v25 = 2 << a1;
      if ((int)v8 <= 1)
        v8 = 1;
      else
        v8 = v8;
      v26 = a5 + 4 * v25;
      v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      v29 = 0;
      v30 = a5 + 4 * (v25 + (unint64_t)v5);
      v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630B0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C9757318(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  int *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int *v58;
  int *v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 4 * v12;
      v17 = -4 * v14;
      v18 = a4 + 4 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (int *)(v16 - 4);
      v21 = (int *)(v18 - 4);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v16 + 4 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (int *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 4 * (int)v6;
      v47 = (int *)(a4 - 4 * a3);
      v48 = v47;
      v49 = (_DWORD *)(a5 + 4 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_DWORD *)((char *)v49 + v46);
        v48 = (int *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_DWORD *)(a5 + 4 * (v45 + v5));
      v57 = 4 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_DWORD *)((char *)v56 + v57);
        v58 = (int *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630B0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

unsigned __int16 *sub_1C9757630(unsigned __int16 *result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  _WORD *v8;
  int v9;

  v2 = 1;
  do
  {
    v3 = 0;
    v4 = *(result - 2);
    v5 = v2;
    *(_WORD *)(a2 - 4) = (*result + 2 * v4 + result[32] + 2) >> 2;
    *(_WORD *)(a2 + 124) = result[62];
    *(_WORD *)(a2 + 60) = result[30];
    v6 = v4;
    do
    {
      v7 = result[v3];
      v8 = (_WORD *)(a2 + v3 * 2);
      *v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      v9 = result[v3 + 32];
      v8[32] = (v6 + 2 * v9 + result[v3 + 34] + 2) >> 2;
      v3 += 2;
      v4 = v7;
      v6 = v9;
    }
    while (v3 != 30);
    v2 = 0;
    ++result;
    a2 += 2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int16 *sub_1C97576D8(unsigned __int16 *result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  _WORD *v8;
  int v9;

  v2 = 1;
  do
  {
    v3 = 0;
    v4 = *(result - 2);
    v5 = v2;
    *(_WORD *)(a2 - 4) = (*result + 2 * v4 + result[64] + 2) >> 2;
    *(_WORD *)(a2 + 252) = result[126];
    *(_WORD *)(a2 + 124) = result[62];
    v6 = v4;
    do
    {
      v7 = result[v3];
      v8 = (_WORD *)(a2 + v3 * 2);
      *v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      v9 = result[v3 + 64];
      v8[64] = (v6 + 2 * v9 + result[v3 + 66] + 2) >> 2;
      v3 += 2;
      v4 = v7;
      v6 = v9;
    }
    while (v3 != 62);
    v2 = 0;
    ++result;
    a2 += 2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int16 *sub_1C9757780(unsigned __int16 *result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  _WORD *v8;
  int v9;

  v2 = 1;
  do
  {
    v3 = 0;
    v4 = *(result - 2);
    v5 = v2;
    *(_WORD *)(a2 - 4) = (*result + 2 * v4 + result[128] + 2) >> 2;
    *(_WORD *)(a2 + 508) = result[254];
    *(_WORD *)(a2 + 252) = result[126];
    v6 = v4;
    do
    {
      v7 = result[v3];
      v8 = (_WORD *)(a2 + v3 * 2);
      *v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      v9 = result[v3 + 128];
      v8[128] = (v6 + 2 * v9 + result[v3 + 130] + 2) >> 2;
      v3 += 2;
      v4 = v7;
      v6 = v9;
    }
    while (v3 != 126);
    v2 = 0;
    ++result;
    a2 += 2;
  }
  while ((v5 & 1) != 0);
  return result;
}

uint64_t sub_1C9757828(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  int v10;
  _WORD *v11;
  uint64_t result;

  v4 = 0;
  v5 = a2 + 64;
  do
  {
    v6 = 0;
    v7 = &a2[2 * v4];
    v8 = 15;
    v9 = 15 - v4++;
    v10 = 1;
    do
    {
      v11 = (_WORD *)(a4 + v6 * 2);
      *v11 = (v10 * a2[96] + v8 * *v7 + v9 * v5[v6] + v4 * a2[32] + 16) >> 5;
      result = v5[v6 + 1];
      v11[1] = (v10 * a2[97] + v8 * v7[1] + v9 * (_DWORD)result + v4 * a2[33] + 16) >> 5;
      --v8;
      v6 += 2;
      ++v10;
    }
    while (v6 != 32);
    a4 += 2 * a3;
  }
  while (v4 != 16);
  return result;
}

uint64_t sub_1C97578D0(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  int v10;
  _WORD *v11;
  uint64_t result;

  v4 = 0;
  v5 = a2 + 128;
  do
  {
    v6 = 0;
    v7 = &a2[2 * v4];
    v8 = 31;
    v9 = 31 - v4++;
    v10 = 1;
    do
    {
      v11 = (_WORD *)(a4 + v6 * 2);
      *v11 = (v10 * a2[192] + v8 * *v7 + v9 * v5[v6] + v4 * a2[64] + 32) >> 6;
      result = v5[v6 + 1];
      v11[1] = (v10 * a2[193] + v8 * v7[1] + v9 * (_DWORD)result + v4 * a2[65] + 32) >> 6;
      --v8;
      v6 += 2;
      ++v10;
    }
    while (v6 != 64);
    a4 += 2 * a3;
  }
  while (v4 != 32);
  return result;
}

__n128 sub_1C9757978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  const __int16 *v9;
  const __int16 *v10;
  uint64_t v11;
  int32x4_t v12;
  int v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int16x8x2_t v18;
  int16x8x2_t v19;

  v4 = 0;
  v5 = (int32x4_t)xmmword_1C9862C00;
  v6 = 0uLL;
  v7 = (int32x4_t)xmmword_1C9862C00;
  v8 = 0uLL;
  do
  {
    v9 = (const __int16 *)(a2 + v4);
    v10 = (const __int16 *)(a2 + v4 + 128);
    v18 = vld2q_s16(v10);
    v19 = vld2q_s16(v9);
    v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, (uint16x8_t)v18.val[0]), (uint16x8_t)v19.val[0]);
    v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v18.val[0].i8), *(uint16x4_t *)v19.val[0].i8);
    v8 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v8, (uint16x8_t)v18.val[1]), (uint16x8_t)v19.val[1]);
    v7 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v7, *(uint16x4_t *)v18.val[1].i8), *(uint16x4_t *)v19.val[1].i8);
    v4 += 32;
  }
  while (v4 != 64);
  v11 = 0;
  v12 = vdupq_n_s32((vaddvq_s32(vaddq_s32(v7, v8)) << 11) & 0xFFFF0000 | (unsigned __int16)(vaddvq_s32(vaddq_s32(v5, v6)) >> 5));
  do
  {
    *(int32x4_t *)(a4 + v11) = v12;
    v11 += 16;
  }
  while (v11 != 64);
  v13 = 15;
  do
  {
    result = *(__n128 *)a4;
    v15 = *(_OWORD *)(a4 + 16);
    v16 = *(_OWORD *)(a4 + 32);
    v17 = *(_OWORD *)(a4 + 48);
    a4 += 2 * a3;
    *(_OWORD *)(a4 + 32) = v16;
    *(_OWORD *)(a4 + 48) = v17;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v15;
    --v13;
  }
  while (v13);
  return result;
}

__n128 sub_1C9757A2C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  const __int16 *v9;
  const __int16 *v10;
  uint64_t v11;
  int32x4_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __int128 v21;
  int16x8x2_t v22;
  int16x8x2_t v23;

  v4 = 0;
  v5 = (int32x4_t)xmmword_1C9862C10;
  v6 = 0uLL;
  v7 = (int32x4_t)xmmword_1C9862C10;
  v8 = 0uLL;
  do
  {
    v9 = (const __int16 *)(a2 + v4);
    v10 = (const __int16 *)(a2 + v4 + 256);
    v22 = vld2q_s16(v10);
    v23 = vld2q_s16(v9);
    v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, (uint16x8_t)v22.val[0]), (uint16x8_t)v23.val[0]);
    v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v22.val[0].i8), *(uint16x4_t *)v23.val[0].i8);
    v8 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v8, (uint16x8_t)v22.val[1]), (uint16x8_t)v23.val[1]);
    v7 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v7, *(uint16x4_t *)v22.val[1].i8), *(uint16x4_t *)v23.val[1].i8);
    v4 += 32;
  }
  while (v4 != 128);
  v11 = 0;
  v12 = vdupq_n_s32((vaddvq_s32(vaddq_s32(v7, v8)) << 10) & 0xFFFF0000 | (unsigned __int16)(vaddvq_s32(vaddq_s32(v5, v6)) >> 6));
  do
    a4[v11++] = (__int128)v12;
  while (v11 != 8);
  v13 = 2 * a3;
  v14 = 31;
  do
  {
    v15 = (uint64_t)a4 + v13;
    v16 = *a4;
    v17 = a4[1];
    v18 = a4[3];
    *(_OWORD *)(v15 + 32) = a4[2];
    *(_OWORD *)(v15 + 48) = v18;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    result = (__n128)a4[4];
    v20 = a4[5];
    v21 = a4[7];
    *(_OWORD *)(v15 + 96) = a4[6];
    *(_OWORD *)(v15 + 112) = v21;
    *(__n128 *)(v15 + 64) = result;
    *(_OWORD *)(v15 + 80) = v20;
    a4 = (__int128 *)((char *)a4 + v13);
    --v14;
  }
  while (v14);
  return result;
}

uint64_t sub_1C9757AF4(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 1)
  {
    v6 = a6;
    v9 = result;
    v10 = 0;
    v11 = a6 + 2;
    v18 = a2;
    v12 = 12 - a4;
    v13 = 4 * a2;
    v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        v15 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v6 + v15) = (_DWORD)result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        v17 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v11 + v17) = (_DWORD)result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C9757BFC(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  __int16 v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_WORD *)(a4 + 2 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_WORD *)(a4 - 2);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630B0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C9757E14(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  __int16 *v58;
  __int16 *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_WORD *)(a4 + 2 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 2 * v12;
      v17 = -2 * v14;
      v18 = a4 + 2 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (__int16 *)(v16 - 2);
      v21 = (__int16 *)(v18 - 2);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_WORD *)(v16 + 2 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (__int16 *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 2 * v5;
      v30 = -2 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (__int16 *)(v29 - 2);
      v33 = a4 + 2 * a3 * (v5 - 1) - 2;
      v34 = -2 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (__int16 *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_WORD *)(v29 + 2 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (__int16 *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_WORD *)(a4 + 2 * ~a3);
    *(_WORD *)(a5 - 2) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 2 * (int)v6;
      v47 = (__int16 *)(a4 - 2 * a3);
      v48 = v47;
      v49 = (_WORD *)(a5 + 2 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_WORD *)((char *)v49 + v46);
        v48 = (__int16 *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_WORD *)(a5 + 2 * (v45 + v5));
      v57 = 2 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_WORD *)((char *)v56 + v57);
        v58 = (__int16 *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1C98630B0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

uint64_t sub_1C9758130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v4 = 0;
  do
  {
    v5 = 0;
    v6 = v4 + 1;
    v7 = 15;
    do
    {
      result = *(unsigned __int16 *)(a2 + 64 + 2 * v5);
      *(_WORD *)(a4 + 2 * v5) = (((_DWORD)v5 + 1) * *(unsigned __int16 *)(a2 + 96)
                               + v7 * *(unsigned __int16 *)(a2 + 2 * v4)
                               + (15 - (_DWORD)v4) * (_DWORD)result
                               + v6 * *(unsigned __int16 *)(a2 + 32)
                               + 16) >> 5;
      --v7;
      ++v5;
    }
    while (v5 != 16);
    a4 += 2 * a3;
    ++v4;
  }
  while (v6 != 16);
  return result;
}

uint64_t sub_1C97581A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v4 = 0;
  do
  {
    v5 = 0;
    v6 = v4 + 1;
    v7 = 31;
    do
    {
      result = *(unsigned __int16 *)(a2 + 128 + 2 * v5);
      *(_WORD *)(a4 + 2 * v5) = (((_DWORD)v5 + 1) * *(unsigned __int16 *)(a2 + 192)
                               + v7 * *(unsigned __int16 *)(a2 + 2 * v4)
                               + (31 - (_DWORD)v4) * (_DWORD)result
                               + v6 * *(unsigned __int16 *)(a2 + 64)
                               + 32) >> 6;
      --v7;
      ++v5;
    }
    while (v5 != 32);
    a4 += 2 * a3;
    ++v4;
  }
  while (v6 != 32);
  return result;
}

uint64_t sub_1C9758210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v4 = 0;
  do
  {
    v5 = 0;
    v6 = v4 + 1;
    v7 = 63;
    do
    {
      result = *(unsigned __int16 *)(a2 + 256 + 2 * v5);
      *(_WORD *)(a4 + 2 * v5) = (((_DWORD)v5 + 1) * *(unsigned __int16 *)(a2 + 384)
                               + v7 * *(unsigned __int16 *)(a2 + 2 * v4)
                               + (63 - (_DWORD)v4) * (_DWORD)result
                               + v6 * *(unsigned __int16 *)(a2 + 128)
                               + 64) >> 7;
      --v7;
      ++v5;
    }
    while (v5 != 64);
    a4 += 2 * a3;
    ++v4;
  }
  while (v6 != 64);
  return result;
}

void sub_1C9758280(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v4;

  v4 = 4;
  do
  {
    *a4 = *(_QWORD *)(a2 + 16);
    a4 = (_QWORD *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

__n128 sub_1C97582A0(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;

  v4 = a2 + 2;
  v5 = 8;
  do
  {
    result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C97582C4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;

  v4 = a2 + 4;
  v5 = 16;
  do
  {
    result = *v4;
    v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C97582E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = 32;
  do
  {
    result = *(__n128 *)(a2 + 128);
    v6 = *(_OWORD *)(a2 + 144);
    v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1C9758314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = 64;
  do
  {
    v5 = *(_OWORD *)(a2 + 256);
    v6 = *(_OWORD *)(a2 + 272);
    v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    result = *(__n128 *)(a2 + 320);
    v9 = *(_OWORD *)(a2 + 336);
    v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

int16x4_t sub_1C9758350(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x4_t result;

  for (i = 0; i != 8; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C9758378(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x8_t result;

  for (i = 0; i != 16; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C97583A0(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 1;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-1] = result;
    *v5 = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

void sub_1C97583CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 32; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

void sub_1C9758404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 64; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

void sub_1C975843C(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  unsigned int v9;
  int v10;
  _WORD *v11;
  uint64_t i;
  unsigned __int16 *v13;
  uint64_t j;

  v4 = 0;
  v5 = (int32x4_t)xmmword_1C9862C00;
  v6 = 0uLL;
  do
  {
    v7 = *(uint16x8_t *)&a2[v4 + 32];
    v8 = *(uint16x8_t *)&a2[v4];
    v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, v7), v8);
    v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8);
    v4 += 8;
  }
  while (v4 != 16);
  v9 = vaddvq_s32(vaddq_s32(v5, v6)) >> 5;
  *a4 = (*a2 + 2 * v9 + a2[32] + 2) >> 2;
  v10 = 3 * v9 + 2;
  v11 = &a4[a3];
  for (i = 1; i != 16; ++i)
  {
    v13 = &a2[i];
    a4[i] = (v10 + v13[32]) >> 2;
    a4[i * a3] = (v10 + *v13) >> 2;
    for (j = 1; j != 16; ++j)
      v11[j] = v9;
    v11 += a3;
  }
}

void sub_1C9758508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint64_t i;

  v4 = 0;
  v5 = (int32x4_t)xmmword_1C9862C10;
  v6 = 0uLL;
  do
  {
    v7 = *(uint16x8_t *)(a2 + v4 + 128);
    v8 = *(uint16x8_t *)(a2 + v4);
    v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, v7), v8);
    v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8);
    v4 += 16;
  }
  while (v4 != 64);
  v9 = 0;
  v10 = vdupq_n_s16(vaddvq_s32(vaddq_s32(v5, v6)) >> 6);
  do
  {
    for (i = 0; i != 64; i += 16)
      *(int16x8_t *)(a4 + i) = v10;
    ++v9;
    a4 += 2 * a3;
  }
  while (v9 != 32);
}

void sub_1C9758584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint64_t i;

  v4 = 0;
  v5 = (int32x4_t)xmmword_1C9862C20;
  v6 = 0uLL;
  do
  {
    v7 = *(uint16x8_t *)(a2 + v4 + 256);
    v8 = *(uint16x8_t *)(a2 + v4);
    v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, v7), v8);
    v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8);
    v4 += 16;
  }
  while (v4 != 128);
  v9 = 0;
  v10 = vdupq_n_s16(vaddvq_s32(vaddq_s32(v5, v6)) >> 7);
  do
  {
    for (i = 0; i != 128; i += 16)
      *(int16x8_t *)(a4 + i) = v10;
    ++v9;
    a4 += 2 * a3;
  }
  while (v9 != 64);
}

uint64_t sub_1C9758600(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = 12 - a3;
    v11 = 2 * a2;
    v12 = 2 * a4;
    do
    {
      v13 = 0;
      do
      {
        result = sub_1C971C898(v8, a3);
        *(_WORD *)(a5 + v13) = (_DWORD)result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1C9758698(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_DWORD *)(a4 + 4 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_DWORD *)(a4 - 4);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C97588AC(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 + 9 + v7] - a3;
    v9 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      LODWORD(v11) = ((int)v5 + 4) >> 3;
      v12 = 2 << a1;
      if ((int)v11 <= 1)
        v11 = 1;
      else
        v11 = v11;
      if ((int)v5 >= 8)
        v13 = 8;
      else
        v13 = 1 << a1;
      v14 = v13;
      v15 = a5 + 4 * v12;
      v16 = -4 * v13;
      v17 = a4 + 4 * a3 * (v12 - 1);
      v18 = a3 * v13;
      v19 = (unsigned int *)(v15 - 4);
      v20 = (unsigned int *)(v17 - 4);
      v21 = v6 + 1;
      v22 = -(uint64_t)v13;
      do
      {
        if (((a2 >> v10) & 1) != 0)
        {
          v23 = v21;
          v24 = v20;
          v25 = v19;
          do
          {
            v9 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v15 + 4 * v26) = v9;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v10;
        v19 = (unsigned int *)((char *)v19 + v16);
        v20 -= v18;
        v15 += v16;
      }
      while (v10 != v11);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v14;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (unsigned int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v18;
      v35 = v31 + 1;
      v36 = -v14;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (unsigned int *)v33;
          v39 = v32;
          do
          {
            v9 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v9;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (unsigned int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v11);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      LODWORD(v42) = (int)v5 >> 2;
      v43 = 2 << a1;
      if ((int)v5 >> 2 <= 1)
        v42 = 1;
      else
        v42 = v42;
      v44 = a4 - 4 * a3;
      v45 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v44 + i);
            *(_DWORD *)(v45 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v43 + 4 * v41)) = vdupq_n_s32(v9);
        }
        ++v41;
        v45 += 16;
        v44 += 16;
      }
      while (v41 != v42);
      v47 = 0;
      v48 = a5 + 4 * (v43 + v5);
      v49 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v47) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v49 + j);
            *(_DWORD *)(v48 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v47 + v43)) = vdupq_n_s32(v9);
        }
        ++v47;
        v48 += 16;
        v49 += 16;
      }
      while (v47 != v42);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C9758BA0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    v6 = __clz(__rbit32(a2));
    if (v6 < 9)
      v7 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 + 18 + v6]) * a3 - 1;
    else
      v7 = byte_1C9832564[9 * a1 + 9 + v6] - a3;
    LODWORD(v8) = (int)v5 >> 2;
    v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      v11 = 2 << a1;
      v12 = a5 + 4 * v11;
      if ((int)v8 <= 1)
        v13 = 1;
      else
        v13 = v8;
      v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        v15 = v10 + 1;
        if (((a2 >> v10) & 1) != 0)
        {
          v16 = -4;
          v17 = (unsigned int *)v14;
          do
          {
            v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        v10 = v15;
      }
      while (v15 != v13);
      v18 = 0;
      v19 = a5 + 4 * v5;
      v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          v22 = -4;
          v23 = (unsigned int *)v20;
          do
          {
            v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v24 = 0;
      v25 = 2 << a1;
      if ((int)v8 <= 1)
        v8 = 1;
      else
        v8 = v8;
      v26 = a5 + 4 * v25;
      v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      v29 = 0;
      v30 = a5 + 4 * (v25 + (unint64_t)v5);
      v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C9758E30(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  int *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int *v58;
  int *v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 4 * v12;
      v17 = -4 * v14;
      v18 = a4 + 4 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (int *)(v16 - 4);
      v21 = (int *)(v18 - 4);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v16 + 4 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (int *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 4 * (int)v6;
      v47 = (int *)(a4 - 4 * a3);
      v48 = v47;
      v49 = (_DWORD *)(a5 + 4 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_DWORD *)((char *)v49 + v46);
        v48 = (int *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_DWORD *)(a5 + 4 * (v45 + v5));
      v57 = 4 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_DWORD *)((char *)v56 + v57);
        v58 = (int *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1C9759148(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 1)
  {
    v6 = a6;
    v9 = result;
    v10 = 0;
    v11 = a6 + 2;
    v18 = a2;
    v12 = 11 - a4;
    v13 = 4 * a2;
    v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        v15 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v6 + v15) = (_DWORD)result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        v17 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v11 + v17) = (_DWORD)result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C9759250(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  __int16 v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_WORD *)(a4 + 2 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_WORD *)(a4 - 2);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630C0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C9759468(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  __int16 *v58;
  __int16 *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_WORD *)(a4 + 2 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 2 * v12;
      v17 = -2 * v14;
      v18 = a4 + 2 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (__int16 *)(v16 - 2);
      v21 = (__int16 *)(v18 - 2);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_WORD *)(v16 + 2 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (__int16 *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 2 * v5;
      v30 = -2 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (__int16 *)(v29 - 2);
      v33 = a4 + 2 * a3 * (v5 - 1) - 2;
      v34 = -2 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (__int16 *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_WORD *)(v29 + 2 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (__int16 *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_WORD *)(a4 + 2 * ~a3);
    *(_WORD *)(a5 - 2) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 2 * (int)v6;
      v47 = (__int16 *)(a4 - 2 * a3);
      v48 = v47;
      v49 = (_WORD *)(a5 + 2 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_WORD *)((char *)v49 + v46);
        v48 = (__int16 *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_WORD *)(a5 + 2 * (v45 + v5));
      v57 = 2 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_WORD *)((char *)v56 + v57);
        v58 = (__int16 *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1C98630C0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C9759784(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v4;

  v4 = 4;
  do
  {
    *a4 = *(_QWORD *)(a2 + 16);
    a4 = (_QWORD *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

__n128 sub_1C97597A4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;

  v4 = a2 + 2;
  v5 = 8;
  do
  {
    result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C97597C8(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;

  v4 = a2 + 4;
  v5 = 16;
  do
  {
    result = *v4;
    v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C97597EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = 32;
  do
  {
    result = *(__n128 *)(a2 + 128);
    v6 = *(_OWORD *)(a2 + 144);
    v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1C9759818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = 64;
  do
  {
    v5 = *(_OWORD *)(a2 + 256);
    v6 = *(_OWORD *)(a2 + 272);
    v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    result = *(__n128 *)(a2 + 320);
    v9 = *(_OWORD *)(a2 + 336);
    v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

int16x4_t sub_1C9759854(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x4_t result;

  for (i = 0; i != 8; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C975987C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x8_t result;

  for (i = 0; i != 16; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C97598A4(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 1;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-1] = result;
    *v5 = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

void sub_1C97598D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 32; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

void sub_1C9759908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 64; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

uint64_t sub_1C9759940(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = 11 - a3;
    v11 = 2 * a2;
    v12 = 2 * a4;
    do
    {
      v13 = 0;
      do
      {
        result = sub_1C971C898(v8, a3);
        *(_WORD *)(a5 + v13) = (_DWORD)result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1C97599D8(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_DWORD *)(a4 + 4 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_DWORD *)(a4 - 4);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C9759BEC(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 + 9 + v7] - a3;
    v9 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      LODWORD(v11) = ((int)v5 + 4) >> 3;
      v12 = 2 << a1;
      if ((int)v11 <= 1)
        v11 = 1;
      else
        v11 = v11;
      if ((int)v5 >= 8)
        v13 = 8;
      else
        v13 = 1 << a1;
      v14 = v13;
      v15 = a5 + 4 * v12;
      v16 = -4 * v13;
      v17 = a4 + 4 * a3 * (v12 - 1);
      v18 = a3 * v13;
      v19 = (unsigned int *)(v15 - 4);
      v20 = (unsigned int *)(v17 - 4);
      v21 = v6 + 1;
      v22 = -(uint64_t)v13;
      do
      {
        if (((a2 >> v10) & 1) != 0)
        {
          v23 = v21;
          v24 = v20;
          v25 = v19;
          do
          {
            v9 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v15 + 4 * v26) = v9;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v10;
        v19 = (unsigned int *)((char *)v19 + v16);
        v20 -= v18;
        v15 += v16;
      }
      while (v10 != v11);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v14;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (unsigned int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v18;
      v35 = v31 + 1;
      v36 = -v14;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (unsigned int *)v33;
          v39 = v32;
          do
          {
            v9 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v9;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (unsigned int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v11);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      LODWORD(v42) = (int)v5 >> 2;
      v43 = 2 << a1;
      if ((int)v5 >> 2 <= 1)
        v42 = 1;
      else
        v42 = v42;
      v44 = a4 - 4 * a3;
      v45 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v44 + i);
            *(_DWORD *)(v45 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v43 + 4 * v41)) = vdupq_n_s32(v9);
        }
        ++v41;
        v45 += 16;
        v44 += 16;
      }
      while (v41 != v42);
      v47 = 0;
      v48 = a5 + 4 * (v43 + v5);
      v49 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v47) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v49 + j);
            *(_DWORD *)(v48 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v47 + v43)) = vdupq_n_s32(v9);
        }
        ++v47;
        v48 += 16;
        v49 += 16;
      }
      while (v47 != v42);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C9759EE0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    v6 = __clz(__rbit32(a2));
    if (v6 < 9)
      v7 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 + 18 + v6]) * a3 - 1;
    else
      v7 = byte_1C9832564[9 * a1 + 9 + v6] - a3;
    LODWORD(v8) = (int)v5 >> 2;
    v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      v11 = 2 << a1;
      v12 = a5 + 4 * v11;
      if ((int)v8 <= 1)
        v13 = 1;
      else
        v13 = v8;
      v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        v15 = v10 + 1;
        if (((a2 >> v10) & 1) != 0)
        {
          v16 = -4;
          v17 = (unsigned int *)v14;
          do
          {
            v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        v10 = v15;
      }
      while (v15 != v13);
      v18 = 0;
      v19 = a5 + 4 * v5;
      v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          v22 = -4;
          v23 = (unsigned int *)v20;
          do
          {
            v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v24 = 0;
      v25 = 2 << a1;
      if ((int)v8 <= 1)
        v8 = 1;
      else
        v8 = v8;
      v26 = a5 + 4 * v25;
      v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      v29 = 0;
      v30 = a5 + 4 * (v25 + (unint64_t)v5);
      v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C975A170(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  int *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int *v58;
  int *v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 4 * v12;
      v17 = -4 * v14;
      v18 = a4 + 4 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (int *)(v16 - 4);
      v21 = (int *)(v18 - 4);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v16 + 4 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (int *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 4 * (int)v6;
      v47 = (int *)(a4 - 4 * a3);
      v48 = v47;
      v49 = (_DWORD *)(a5 + 4 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_DWORD *)((char *)v49 + v46);
        v48 = (int *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_DWORD *)(a5 + 4 * (v45 + v5));
      v57 = 4 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_DWORD *)((char *)v56 + v57);
        v58 = (int *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1C975A488(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 1)
  {
    v6 = a6;
    v9 = result;
    v10 = 0;
    v11 = a6 + 2;
    v18 = a2;
    v12 = 10 - a4;
    v13 = 4 * a2;
    v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        v15 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v6 + v15) = (_DWORD)result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        v17 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v11 + v17) = (_DWORD)result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C975A590(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  __int16 v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_WORD *)(a4 + 2 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_WORD *)(a4 - 2);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630D0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C975A7A8(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  __int16 *v58;
  __int16 *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_WORD *)(a4 + 2 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 2 * v12;
      v17 = -2 * v14;
      v18 = a4 + 2 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (__int16 *)(v16 - 2);
      v21 = (__int16 *)(v18 - 2);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_WORD *)(v16 + 2 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (__int16 *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 2 * v5;
      v30 = -2 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (__int16 *)(v29 - 2);
      v33 = a4 + 2 * a3 * (v5 - 1) - 2;
      v34 = -2 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (__int16 *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_WORD *)(v29 + 2 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (__int16 *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_WORD *)(a4 + 2 * ~a3);
    *(_WORD *)(a5 - 2) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 2 * (int)v6;
      v47 = (__int16 *)(a4 - 2 * a3);
      v48 = v47;
      v49 = (_WORD *)(a5 + 2 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_WORD *)((char *)v49 + v46);
        v48 = (__int16 *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_WORD *)(a5 + 2 * (v45 + v5));
      v57 = 2 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_WORD *)((char *)v56 + v57);
        v58 = (__int16 *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1C98630D0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C975AAC4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v4;

  v4 = 4;
  do
  {
    *a4 = *(_QWORD *)(a2 + 16);
    a4 = (_QWORD *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

__n128 sub_1C975AAE4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;

  v4 = a2 + 2;
  v5 = 8;
  do
  {
    result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975AB08(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;

  v4 = a2 + 4;
  v5 = 16;
  do
  {
    result = *v4;
    v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975AB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = 32;
  do
  {
    result = *(__n128 *)(a2 + 128);
    v6 = *(_OWORD *)(a2 + 144);
    v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1C975AB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = 64;
  do
  {
    v5 = *(_OWORD *)(a2 + 256);
    v6 = *(_OWORD *)(a2 + 272);
    v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    result = *(__n128 *)(a2 + 320);
    v9 = *(_OWORD *)(a2 + 336);
    v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

int16x4_t sub_1C975AB94(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x4_t result;

  for (i = 0; i != 8; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C975ABBC(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x8_t result;

  for (i = 0; i != 16; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C975ABE4(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 1;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-1] = result;
    *v5 = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

void sub_1C975AC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 32; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

void sub_1C975AC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 64; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

uint64_t sub_1C975AC80(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = 10 - a3;
    v11 = 2 * a2;
    v12 = 2 * a4;
    do
    {
      v13 = 0;
      do
      {
        result = sub_1C971C898(v8, a3);
        *(_WORD *)(a5 + v13) = (_DWORD)result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1C975AD18(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_DWORD *)(a4 + 4 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_DWORD *)(a4 - 4);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C975AF2C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 + 9 + v7] - a3;
    v9 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      LODWORD(v11) = ((int)v5 + 4) >> 3;
      v12 = 2 << a1;
      if ((int)v11 <= 1)
        v11 = 1;
      else
        v11 = v11;
      if ((int)v5 >= 8)
        v13 = 8;
      else
        v13 = 1 << a1;
      v14 = v13;
      v15 = a5 + 4 * v12;
      v16 = -4 * v13;
      v17 = a4 + 4 * a3 * (v12 - 1);
      v18 = a3 * v13;
      v19 = (unsigned int *)(v15 - 4);
      v20 = (unsigned int *)(v17 - 4);
      v21 = v6 + 1;
      v22 = -(uint64_t)v13;
      do
      {
        if (((a2 >> v10) & 1) != 0)
        {
          v23 = v21;
          v24 = v20;
          v25 = v19;
          do
          {
            v9 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v15 + 4 * v26) = v9;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v10;
        v19 = (unsigned int *)((char *)v19 + v16);
        v20 -= v18;
        v15 += v16;
      }
      while (v10 != v11);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v14;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (unsigned int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v18;
      v35 = v31 + 1;
      v36 = -v14;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (unsigned int *)v33;
          v39 = v32;
          do
          {
            v9 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v9;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (unsigned int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v11);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      LODWORD(v42) = (int)v5 >> 2;
      v43 = 2 << a1;
      if ((int)v5 >> 2 <= 1)
        v42 = 1;
      else
        v42 = v42;
      v44 = a4 - 4 * a3;
      v45 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v44 + i);
            *(_DWORD *)(v45 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v43 + 4 * v41)) = vdupq_n_s32(v9);
        }
        ++v41;
        v45 += 16;
        v44 += 16;
      }
      while (v41 != v42);
      v47 = 0;
      v48 = a5 + 4 * (v43 + v5);
      v49 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v47) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v49 + j);
            *(_DWORD *)(v48 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v47 + v43)) = vdupq_n_s32(v9);
        }
        ++v47;
        v48 += 16;
        v49 += 16;
      }
      while (v47 != v42);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C975B220(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    v6 = __clz(__rbit32(a2));
    if (v6 < 9)
      v7 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 + 18 + v6]) * a3 - 1;
    else
      v7 = byte_1C9832564[9 * a1 + 9 + v6] - a3;
    LODWORD(v8) = (int)v5 >> 2;
    v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      v11 = 2 << a1;
      v12 = a5 + 4 * v11;
      if ((int)v8 <= 1)
        v13 = 1;
      else
        v13 = v8;
      v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        v15 = v10 + 1;
        if (((a2 >> v10) & 1) != 0)
        {
          v16 = -4;
          v17 = (unsigned int *)v14;
          do
          {
            v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        v10 = v15;
      }
      while (v15 != v13);
      v18 = 0;
      v19 = a5 + 4 * v5;
      v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          v22 = -4;
          v23 = (unsigned int *)v20;
          do
          {
            v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v24 = 0;
      v25 = 2 << a1;
      if ((int)v8 <= 1)
        v8 = 1;
      else
        v8 = v8;
      v26 = a5 + 4 * v25;
      v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      v29 = 0;
      v30 = a5 + 4 * (v25 + (unint64_t)v5);
      v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C975B4B0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  int *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int *v58;
  int *v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 4 * v12;
      v17 = -4 * v14;
      v18 = a4 + 4 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (int *)(v16 - 4);
      v21 = (int *)(v18 - 4);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v16 + 4 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (int *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 4 * (int)v6;
      v47 = (int *)(a4 - 4 * a3);
      v48 = v47;
      v49 = (_DWORD *)(a5 + 4 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_DWORD *)((char *)v49 + v46);
        v48 = (int *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_DWORD *)(a5 + 4 * (v45 + v5));
      v57 = 4 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_DWORD *)((char *)v56 + v57);
        v58 = (int *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1C975B7C8(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 1)
  {
    v6 = a6;
    v9 = result;
    v10 = 0;
    v11 = a6 + 2;
    v18 = a2;
    v12 = 9 - a4;
    v13 = 4 * a2;
    v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        v15 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v6 + v15) = (_DWORD)result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        v17 = 0;
        do
        {
          result = sub_1C971C898(v9, a4);
          *(_WORD *)(v11 + v17) = (_DWORD)result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C975B8D0(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  __int16 v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  _WORD *v29;
  __int16 v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_WORD *)(a4 + 2 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_WORD *)(a4 - 2);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630E0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C975BAE8(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  __int16 *v48;
  _WORD *v49;
  __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  __int16 *v58;
  __int16 *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_WORD *)(a4 + 2 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 2 * v12;
      v17 = -2 * v14;
      v18 = a4 + 2 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (__int16 *)(v16 - 2);
      v21 = (__int16 *)(v18 - 2);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_WORD *)(v16 + 2 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (__int16 *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 2 * v5;
      v30 = -2 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (__int16 *)(v29 - 2);
      v33 = a4 + 2 * a3 * (v5 - 1) - 2;
      v34 = -2 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (__int16 *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_WORD *)(v29 + 2 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (__int16 *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_WORD *)(a4 + 2 * ~a3);
    *(_WORD *)(a5 - 2) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 2 * (int)v6;
      v47 = (__int16 *)(a4 - 2 * a3);
      v48 = v47;
      v49 = (_WORD *)(a5 + 2 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_WORD *)((char *)v49 + v46);
        v48 = (__int16 *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_WORD *)(a5 + 2 * (v45 + v5));
      v57 = 2 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_WORD *)((char *)v56 + v57);
        v58 = (__int16 *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1C98630E0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1C975BE04(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v4;

  v4 = 4;
  do
  {
    *a4 = *(_QWORD *)(a2 + 16);
    a4 = (_QWORD *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

__n128 sub_1C975BE24(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;

  v4 = a2 + 2;
  v5 = 8;
  do
  {
    result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975BE48(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 *v4;
  int v5;
  __n128 result;
  __n128 v7;

  v4 = a2 + 4;
  v5 = 16;
  do
  {
    result = *v4;
    v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1C975BE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = 32;
  do
  {
    result = *(__n128 *)(a2 + 128);
    v6 = *(_OWORD *)(a2 + 144);
    v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1C975BE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = 64;
  do
  {
    v5 = *(_OWORD *)(a2 + 256);
    v6 = *(_OWORD *)(a2 + 272);
    v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    result = *(__n128 *)(a2 + 320);
    v9 = *(_OWORD *)(a2 + 336);
    v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

int16x4_t sub_1C975BED4(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x4_t result;

  for (i = 0; i != 8; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C975BEFC(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t i;
  const __int16 *v5;
  int16x8_t result;

  for (i = 0; i != 16; i += 2)
  {
    v5 = (const __int16 *)(a2 + i);
    result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x8_t sub_1C975BF24(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4;
  int16x8_t *v5;
  const __int16 *v6;
  int16x8_t result;

  v4 = 0;
  v5 = a4 + 1;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    result = vld1q_dup_s16(v6);
    v5[-1] = result;
    *v5 = result;
    v4 += 2;
    v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

void sub_1C975BF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 32; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

void sub_1C975BF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;

  for (i = 0; i != 64; ++i)
  {
    v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

uint64_t sub_1C975BFC0(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = 9 - a3;
    v11 = 2 * a2;
    v12 = 2 * a4;
    do
    {
      v13 = 0;
      do
      {
        result = sub_1C971C898(v8, a3);
        *(_WORD *)(a5 + v13) = (_DWORD)result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1C975C058(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0)
        v14 = -a3;
      if ((a2 & 0x100) != 0)
        v14 = ~a3;
      if ((a2 & 0xF0) != 0)
        v14 = (v10 - 1) * a3 - 1;
      v15 = *(_DWORD *)(a4 + 4 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1)
          v18 = 1;
        else
          v18 = v10;
        v19 = (_DWORD *)(a4 - 4);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0)
      v24 = a5;
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1C98630F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C975C26C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 + 9 + v7] - a3;
    v9 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      LODWORD(v11) = ((int)v5 + 4) >> 3;
      v12 = 2 << a1;
      if ((int)v11 <= 1)
        v11 = 1;
      else
        v11 = v11;
      if ((int)v5 >= 8)
        v13 = 8;
      else
        v13 = 1 << a1;
      v14 = v13;
      v15 = a5 + 4 * v12;
      v16 = -4 * v13;
      v17 = a4 + 4 * a3 * (v12 - 1);
      v18 = a3 * v13;
      v19 = (unsigned int *)(v15 - 4);
      v20 = (unsigned int *)(v17 - 4);
      v21 = v6 + 1;
      v22 = -(uint64_t)v13;
      do
      {
        if (((a2 >> v10) & 1) != 0)
        {
          v23 = v21;
          v24 = v20;
          v25 = v19;
          do
          {
            v9 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v15 + 4 * v26) = v9;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v10;
        v19 = (unsigned int *)((char *)v19 + v16);
        v20 -= v18;
        v15 += v16;
      }
      while (v10 != v11);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v14;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (unsigned int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v18;
      v35 = v31 + 1;
      v36 = -v14;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (unsigned int *)v33;
          v39 = v32;
          do
          {
            v9 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v9;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (unsigned int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v11);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      LODWORD(v42) = (int)v5 >> 2;
      v43 = 2 << a1;
      if ((int)v5 >> 2 <= 1)
        v42 = 1;
      else
        v42 = v42;
      v44 = a4 - 4 * a3;
      v45 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v44 + i);
            *(_DWORD *)(v45 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v43 + 4 * v41)) = vdupq_n_s32(v9);
        }
        ++v41;
        v45 += 16;
        v44 += 16;
      }
      while (v41 != v42);
      v47 = 0;
      v48 = a5 + 4 * (v43 + v5);
      v49 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v47) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v49 + j);
            *(_DWORD *)(v48 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v47 + v43)) = vdupq_n_s32(v9);
        }
        ++v47;
        v48 += 16;
        v49 += 16;
      }
      while (v47 != v42);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C975C560(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;

  if (a2)
  {
    v5 = (1 << a1);
    v6 = __clz(__rbit32(a2));
    if (v6 < 9)
      v7 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 + 18 + v6]) * a3 - 1;
    else
      v7 = byte_1C9832564[9 * a1 + 9 + v6] - a3;
    LODWORD(v8) = (int)v5 >> 2;
    v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      v10 = 0;
      v11 = 2 << a1;
      v12 = a5 + 4 * v11;
      if ((int)v8 <= 1)
        v13 = 1;
      else
        v13 = v8;
      v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        v15 = v10 + 1;
        if (((a2 >> v10) & 1) != 0)
        {
          v16 = -4;
          v17 = (unsigned int *)v14;
          do
          {
            v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        v10 = v15;
      }
      while (v15 != v13);
      v18 = 0;
      v19 = a5 + 4 * v5;
      v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          v22 = -4;
          v23 = (unsigned int *)v20;
          do
          {
            v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0)
      v9 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      v24 = 0;
      v25 = 2 << a1;
      if ((int)v8 <= 1)
        v8 = 1;
      else
        v8 = v8;
      v26 = a5 + 4 * v25;
      v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (i = 0; i != 16; i += 4)
          {
            v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      v29 = 0;
      v30 = a5 + 4 * (v25 + (unint64_t)v5);
      v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (j = 0; j != 16; j += 4)
          {
            v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1C975C7F0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int *v48;
  _DWORD *v49;
  int *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int *v58;
  int *v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  if (a2)
  {
    v5 = (1 << a1);
    if ((int)v5 >= 8)
      v6 = 8;
    else
      v6 = v5;
    v7 = __clz(__rbit32(a2));
    if (v7 < 9)
      v8 = ((2 << a1) + (char)~byte_1C9832564[9 * a1 - 18 + v7]) * a3 - 1;
    else
      v8 = byte_1C9832564[9 * a1 - 27 + v7] - a3;
    LODWORD(v9) = ((int)v5 + 4) >> 3;
    v10 = *(_DWORD *)(a4 + 4 * v8);
    if ((int)v5 >= 4)
    {
      v11 = 0;
      v12 = 2 << a1;
      if ((int)v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 >= 8)
        v14 = 8;
      else
        v14 = 1 << a1;
      v15 = v14;
      v16 = a5 + 4 * v12;
      v17 = -4 * v14;
      v18 = a4 + 4 * a3 * (v12 - 1);
      v19 = a3 * v14;
      v20 = (int *)(v16 - 4);
      v21 = (int *)(v18 - 4);
      v22 = -(uint64_t)v14;
      do
      {
        if (((a2 >> v11) & 1) != 0)
        {
          v23 = v6 + 1;
          v24 = v21;
          v25 = v20;
          do
          {
            v10 = *v24;
            *v25-- = *v24;
            v24 -= a3;
            --v23;
          }
          while (v23 > 1);
        }
        else
        {
          v26 = v22;
          do
          {
            *(_DWORD *)(v16 + 4 * v26) = v10;
            v27 = __CFADD__(v26++, 1);
          }
          while (!v27);
        }
        ++v11;
        v20 = (int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v13);
      v28 = 0;
      v29 = a5 + 4 * v5;
      v30 = -4 * v15;
      if ((1 << a1) >= 8uLL)
        v31 = 8;
      else
        v31 = (1 << a1);
      v32 = (int *)(v29 - 4);
      v33 = a4 + 4 * a3 * (v5 - 1) - 4;
      v34 = -4 * v19;
      v35 = v31 + 1;
      v36 = -v15;
      do
      {
        if (((a2 >> v28) & 0x10) != 0)
        {
          v37 = v35;
          v38 = (int *)v33;
          v39 = v32;
          do
          {
            v10 = *v38;
            *v39-- = *v38;
            v38 -= a3;
            --v37;
          }
          while (v37 > 1);
        }
        else
        {
          v40 = v36;
          do
          {
            *(_DWORD *)(v29 + 4 * v40) = v10;
            v27 = __CFADD__(v40++, 1);
          }
          while (!v27);
        }
        ++v28;
        v32 = (int *)((char *)v32 + v30);
        v33 += v34;
        v29 += v30;
      }
      while (v28 != v13);
    }
    if ((a2 & 0x100) != 0)
      v10 = *(_DWORD *)(a4 + 4 * ~a3);
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v5 >= 4)
    {
      v41 = 0;
      v42 = 2 << a1;
      v43 = (int)v6;
      if ((int)v6 <= 1)
        v44 = 1;
      else
        v44 = v6;
      v45 = v42;
      if ((int)v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      v46 = 4 * (int)v6;
      v47 = (int *)(a4 - 4 * a3);
      v48 = v47;
      v49 = (_DWORD *)(a5 + 4 * v42);
      do
      {
        if (((a2 >> v41) & 0x200) != 0)
        {
          v50 = v48;
          v51 = v49;
          v52 = v44;
          do
          {
            v53 = *v50++;
            v10 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          v54 = 0;
          do
            v49[v54++] = v10;
          while (v43 != v54);
        }
        ++v41;
        v49 = (_DWORD *)((char *)v49 + v46);
        v48 = (int *)((char *)v48 + v46);
      }
      while (v41 != v9);
      v55 = 0;
      v56 = (_DWORD *)(a5 + 4 * (v45 + v5));
      v57 = 4 * v43;
      v58 = &v47[v5];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          v61 = v44;
          do
          {
            v62 = *v59++;
            v10 = v62;
            *v60++ = v62;
            --v61;
          }
          while (v61);
        }
        else
        {
          v63 = 0;
          do
            v56[v63++] = v10;
          while (v43 != v63);
        }
        ++v55;
        v56 = (_DWORD *)((char *)v56 + v57);
        v58 = (int *)((char *)v58 + v57);
      }
      while (v55 != v9);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1C98630F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

