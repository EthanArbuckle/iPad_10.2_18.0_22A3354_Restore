void sub_1C97B47E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C97B4834(int32x2_t *a1)
{
  int32x2_t v2;
  __int32 v3;
  int v4;
  int v5;
  __int32 v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int32x2_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int32 v22;
  int32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int32x2_t *v42;
  int32x2_t v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  FILE *v49;
  const char *v50;
  const char *v51;
  size_t v52;
  int v54;
  __int32 v55;
  int32x2_t v56;
  int32x2_t *v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  __int32 v61;
  int v62;

  v2 = a1[72];
  v54 = *(char *)(*(_QWORD *)&v2 + 480);
  v56 = v2;
  if (*(_BYTE *)(*(_QWORD *)&v2 + 897))
  {
    bzero(*(void **)(*(_QWORD *)&v2 + 192), 32 * *(unsigned int *)(*(_QWORD *)&v2 + 220));
    v2 = v56;
  }
  if (!a1[807].i8[1])
  {
    if (*(char *)(*(_QWORD *)&v2 + 444) >= 2)
    {
      v3 = a1[100].i32[0];
      v55 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&a1[379] + 576) + 538);
      if (v3 < v55)
      {
        v4 = a1[691].i32[0];
        v5 = a1[691].i32[1];
        v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&a1[379] + 576) + 538);
        do
        {
          if (v5 >= 1)
          {
            v7 = 0;
            v8 = 1 << v6;
            v58 = ((1 << v6) + v4 - 1) >> v6;
            v9 = (1 << v6) >> 1;
            v10 = (1 << (2 * v6 - 3));
            v11 = 2 * v6 - 2;
            v59 = (1 << (2 * v6 - 1));
            v60 = 2 * v6;
            v12 = (1 << v6) >> (v3 + 1);
            v57 = &a1[3 * (v55 - v6) + 740];
            v61 = v6;
            do
            {
              v13 = v7 + v8;
              if (v4 >= 1)
              {
                v14 = 0;
                v15 = (v7 >> v6) * v58;
                v16 = *v57;
                v62 = v7;
                do
                {
                  v17 = v14 + v8;
                  if (v14 + v8 <= v4 && v13 <= a1[691].i32[1])
                  {
                    if (v7 >= v13)
                    {
                      v21 = 0;
                      v20 = 0;
                      v19 = 0;
                    }
                    else
                    {
                      v19 = 0;
                      v20 = 0;
                      v21 = 0;
                      do
                      {
                        if (v14 < v17)
                        {
                          v22 = a1[100].i32[0];
                          v23 = a1[704];
                          v24 = *(_QWORD *)&v23 * (v7 >> v22);
                          v25 = 4 * *(_QWORD *)&v23;
                          v26 = 8 * *(_QWORD *)&v23;
                          v27 = v14;
                          do
                          {
                            if ((int)v12 < 1)
                            {
                              v29 = 0;
                              v37 = 0;
                            }
                            else
                            {
                              v28 = 0;
                              v29 = 0;
                              v30 = v24 + (v27 >> v22);
                              v31 = *(_QWORD *)&a1[722] + 4 * v30;
                              v32 = *(_QWORD *)&a1[725] + 8 * v30;
                              do
                              {
                                v33 = (int *)v31;
                                v34 = v12;
                                do
                                {
                                  v35 = *v33++;
                                  v29 += v35;
                                  --v34;
                                }
                                while (v34);
                                ++v28;
                                v31 += v25;
                              }
                              while (v28 != v12);
                              v36 = 0;
                              v37 = 0;
                              do
                              {
                                v38 = (int *)v32;
                                v39 = v12;
                                do
                                {
                                  v40 = *v38;
                                  v38 += 2;
                                  v37 += v40;
                                  --v39;
                                }
                                while (v39);
                                ++v36;
                                v32 += v26;
                              }
                              while (v36 != v12);
                            }
                            v19 += (v10 + v37 - ((v29 * (unint64_t)v29) >> v11)) >> v11;
                            v21 += v29;
                            v20 += v37;
                            v27 += v9;
                          }
                          while (v27 < v17);
                        }
                        v7 += v9;
                      }
                      while (v7 < v13);
                    }
                    v41 = (v20 + v59 - ((unint64_t)(v21 * v21) >> v60)) >> v60;
                    v18 = (v41 - ((unint64_t)(v19 + 2) >> 2)) & ~((int)(v41 - ((unint64_t)(v19 + 2) >> 2)) >> 31);
                    v6 = v61;
                    v7 = v62;
                  }
                  else
                  {
                    v18 = 0;
                  }
                  *(_DWORD *)(*(_QWORD *)&v16 + 4 * ((v14 >> v6) + v15)) = v18;
                  v4 = a1[691].i32[0];
                  v14 += v8;
                }
                while ((int)v17 < v4);
                v5 = a1[691].i32[1];
              }
              v7 = v13;
            }
            while ((int)v13 < v5);
            v3 = a1[100].i32[0];
          }
          --v6;
        }
        while (v6 > v3);
      }
    }
    if (*(_BYTE *)(*(_QWORD *)&v56 + 870))
    {
      v42 = *(int32x2_t **)(*(_QWORD *)&a1[127] + 632);
      a1[300].i32[0] = v42[145].i32[0];
      v43 = v42[144];
      a1[299] = v43;
      a1[298] = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmul_s32(a1[298], (int32x2_t)0xA0000000DLL), v43, (int32x2_t)0x600000003), (int32x2_t)0x800000008), 4uLL);
    }
  }
  v44 = a1[79];
  *(_DWORD *)(*(_QWORD *)&v44 + 1168) = 0;
  if (v54 < 1)
    return 0;
  v45 = 0;
  while (1)
  {
    *(_BYTE *)(*(_QWORD *)&v44 + 48) = *(_BYTE *)(*(_QWORD *)&v44 + 40) != 0;
    atomic_store(0x80000000, (unsigned int *)(*(_QWORD *)&v44 + 1032));
    std::condition_variable::notify_all((std::condition_variable *)(*(_QWORD *)&v44 + 1104));
    sub_1C98025A0(*(_QWORD **)(*(_QWORD *)&a1[804] + 8 * v45), (uint64_t)a1, v45, 0);
    if ((_DWORD)v46)
    {
      v48 = v46;
      if (dword_1ED1ACCC0 < 3)
        return v48;
      v49 = (FILE *)*MEMORY[0x1E0C80C10];
      v50 = "Slice initialization failed\n";
      v51 = "Slice initialization failed\n";
      v52 = 28;
      goto LABEL_51;
    }
    v47 = sub_1C98049DC(*(_QWORD *)(*(_QWORD *)&a1[804] + 8 * v45), *(unsigned __int8 *)(*(_QWORD *)&v56 + 428));
    if ((_DWORD)v47)
      break;
    v44 = a1[79];
    *(_DWORD *)(*(_QWORD *)&v44 + 1168) += *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[804] + 8 * v45++) + 5424);
    if (v54 == v45)
      return 0;
  }
  v48 = v47;
  if (dword_1ED1ACCC0 < 3)
    return v48;
  v49 = (FILE *)*MEMORY[0x1E0C80C10];
  v50 = "Slice encode failed\n";
  v51 = "Slice encode failed\n";
  v52 = 20;
LABEL_51:
  fwrite(v51, v52, 1uLL, v49);
  syslog(27, v50);
  return v48;
}

uint64_t sub_1C97B4C80(unsigned __int8 *a1)
{
  _BYTE *v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v6;
  int32x2_t v7;
  float v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *i;
  void *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  unsigned int v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  double v55;
  uint64_t v56;
  double v57;
  int v58;
  double v59;
  int v60;
  int v61;
  int v62;
  int v63;
  float v64;
  float v65;
  double v66;
  unint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  BOOL v75;
  BOOL v77;
  float v78;
  uint64_t v79;
  double v80;
  float v81;
  int v82;
  int v83;
  _DWORD *v84;
  unsigned int v85;
  int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  int v89;
  float v90;
  uint64_t v91;
  _BYTE *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  int v125;
  int v126;
  _BYTE *v127;
  unint64_t v128;
  unsigned int v129;
  _DWORD *v130;
  unint64_t v131;
  unsigned int v132;
  _DWORD *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v140;
  _DWORD *v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int v146;
  _DWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  unsigned __int8 *v153;
  int v154;
  int v155;
  int v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  size_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  __int128 v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  signed int v174;
  uint64_t v175;
  BOOL v176;
  _DWORD *v177;
  float v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  _BYTE *v185;
  double v186;
  int v187;
  double v188;
  float v189;
  float v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *__p[132];
  __int128 v196;
  __int128 v197;
  _BYTE v198[25];
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)*((_QWORD *)a1 + 72);
  v3 = (char)v2[480];
  if (a1[648])
    v4 = 0;
  else
    v4 = a1[757] != 0;
  v5 = (char)v2[480];
  v6 = v2[481];
  if (v6 == 1)
  {
    v7 = (int32x2_t)0x300000003;
    goto LABEL_6;
  }
  if (v2[486])
  {
    if (*(_BYTE *)(*((_QWORD *)a1 + 79) + 528) == 10)
      sub_1C97B6678((uint64_t)a1);
    else
      sub_1C97B6C28((uint64_t)a1);
    goto LABEL_16;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 7) + 16))
  {
    if (v2[481])
    {
      if (v6 == 3)
      {
        v7 = (int32x2_t)0xFFFFFFF800000000;
        goto LABEL_6;
      }
      if (v6 != 2)
        goto LABEL_16;
    }
    v8 = *((float *)a1 + 1619) * -0.46 + 9.26;
    v7 = vmax_s32(vmin_s32(vcvt_s32_f32(vmul_n_f32((float32x2_t)0x3FB1EB853F851EB8, v8)), 0), (int32x2_t)0xB0000000BLL);
LABEL_6:
    *((int32x2_t *)a1 + 57) = v7;
  }
LABEL_16:
  v9 = (uint64_t *)*((_QWORD *)a1 + 805);
  v10 = (_QWORD *)*((_QWORD *)a1 + 804);
  v11 = v9 - v10;
  v185 = v2;
  v193 = v3;
  if ((int)v3 <= v11)
  {
    if ((int)v3 >= v11)
    {
      v22 = (uint64_t *)*((_QWORD *)a1 + 805);
    }
    else
    {
      v22 = &v10[(int)v3];
      while (v9 != v22)
      {
        v24 = *--v9;
        v23 = v24;
        *v9 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      }
      *((_QWORD *)a1 + 805) = v22;
    }
  }
  else
  {
    v12 = (int)v3 - v11;
    v13 = *((_QWORD *)a1 + 806);
    if (v5 - v11 <= (v13 - (uint64_t)v9) >> 3)
    {
      bzero(v9, 8 * v12);
      v22 = &v9[v12];
      *((_QWORD *)a1 + 805) = v22;
      v3 = v193;
    }
    else
    {
      if ((v5 & 0x80000000) != 0)
        sub_1C9747024();
      v14 = v13 - (_QWORD)v10;
      v15 = v14 >> 2;
      if (v14 >> 2 <= v5)
        v15 = v5;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16 >> 61)
        sub_1C9724B4C();
      v17 = (char *)operator new(8 * v16);
      v18 = &v17[8 * v11];
      v19 = &v17[8 * v16];
      bzero(v18, 8 * v12);
      v20 = &v18[8 * v12];
      if (v9 == v10)
      {
        v3 = v193;
      }
      else
      {
        v3 = v193;
        do
        {
          v21 = *--v9;
          *v9 = 0;
          *((_QWORD *)v18 - 1) = v21;
          v18 -= 8;
        }
        while (v9 != v10);
      }
      v25 = *((_OWORD *)a1 + 402);
      *((_QWORD *)a1 + 804) = v18;
      *((_QWORD *)a1 + 805) = v20;
      *((_QWORD *)a1 + 806) = v19;
      v26 = (_QWORD *)*((_QWORD *)&v25 + 1);
      v27 = (_QWORD *)v25;
      v2 = v185;
      while (v26 != v27)
      {
        v29 = *--v26;
        v28 = v29;
        *v26 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
      }
      if (v27)
        operator delete(v27);
      v22 = (uint64_t *)*((_QWORD *)a1 + 805);
    }
  }
  for (i = (uint64_t *)*((_QWORD *)a1 + 804); i != v22; ++i)
  {
    if (!*i)
    {
      v31 = operator new(0x1580uLL, (std::align_val_t)0x40uLL);
      v32 = sub_1C980241C((uint64_t)v31);
      v33 = *i;
      *i = (uint64_t)v31;
      if (v33)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v33 + 16))(v33, v32);
    }
  }
  if (v4)
  {
    a1[648] = 4;
    v34 = sub_1C97B4834((int32x2_t *)a1);
    if ((_DWORD)v34)
      return v34;
    sub_1C97B7184((_QWORD *)a1 + 77, (uint64_t)(a1 + 632), 0);
    v35 = *((_QWORD *)a1 + 79);
    bzero(*(void **)(v35 + 944), *(_QWORD *)(v35 + 928) * *(_QWORD *)(v35 + 760));
    bzero(*(void **)(v35 + 968), *(_QWORD *)(v35 + 936) * *(_QWORD *)(v35 + 752));
    bzero(*(void **)(v35 + 800), 2 * *(_QWORD *)(v35 + 760) * *(_QWORD *)(v35 + 768));
    bzero(*(void **)(v35 + 880), 16 * *(_QWORD *)(v35 + 840) * *(_QWORD *)(v35 + 848));
    a1[648] = 0;
    if (*((_DWORD *)v2 + 114) == 34)
      *((float *)a1 + 1619) = *((float *)a1 + 1619) + -6.0;
  }
  v192 = 0;
  v36 = a1 + 6457;
  v37 = (unint64_t *)(a1 + 6664);
  v38 = 1.0;
  v191 = v5;
  while (1)
  {
    v39 = sub_1C97B4834((int32x2_t *)a1);
    if ((_DWORD)v39)
      return v39;
    v40 = *((_QWORD *)a1 + 808);
    if (v40)
      break;
    v49 = *((_QWORD *)a1 + 18);
    if (!v49)
      goto LABEL_152;
    *v37 = 0;
    v37[1] = 0;
    if ((int)v3 < 1)
    {
      v51 = 0;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v52 = (_QWORD *)*((_QWORD *)a1 + 804);
      v53 = v3;
      do
      {
        v54 = (_QWORD *)*v52++;
        v51 += 8 * (v54[205] - v54[204]);
        v50 += v54[677] >> 8;
        --v53;
      }
      while (v53);
      *((_QWORD *)a1 + 833) = v51;
      *((_QWORD *)a1 + 834) = v50;
    }
    if (v49 >= v51 >> 3)
      goto LABEL_152;
    if (*v36)
    {
      v77 = v192 <= v51 || v192 > 32 * (v192 - v51);
      if (dword_1ED1ACCC0 >= 6)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Stop-recompress - last_bits=%zu, curr_bits=%zu\n", v192, v51);
        syslog(30, "Stop-recompress - last_bits=%zu, curr_bits=%zu\n", v192, *v37);
        v3 = v193;
        v37 = (unint64_t *)(a1 + 6664);
      }
    }
    else
    {
      v77 = 0;
    }
    v78 = *((float *)a1 + 1619);
    if (v78 >= 51.0 || v77)
    {
LABEL_152:
      ++*v36;
      v86 = *a1;
      goto LABEL_155;
    }
    *((float *)a1 + 1674) = v78;
    *(_OWORD *)(a1 + 6680) = *(_OWORD *)(a1 + 6664);
    v79 = *((_QWORD *)a1 + 79);
    bzero(*(void **)(v79 + 944), *(_QWORD *)(v79 + 928) * *(_QWORD *)(v79 + 760));
    bzero(*(void **)(v79 + 968), *(_QWORD *)(v79 + 936) * *(_QWORD *)(v79 + 752));
    bzero(*(void **)(v79 + 800), 2 * *(_QWORD *)(v79 + 760) * *(_QWORD *)(v79 + 768));
    bzero(*(void **)(v79 + 880), 16 * *(_QWORD *)(v79 + 840) * *(_QWORD *)(v79 + 848));
    *((float *)a1 + 1619) = *((float *)a1 + 1619) + v38;
    if (dword_1ED1ACCC0 >= 6)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Recompressing, try %d (encoded %zu with limit %zu)\n", *v36 + 1, *((_QWORD *)a1 + 833) >> 3, *((_QWORD *)a1 + 18));
      syslog(30, "Recompressing, try %d (encoded %zu with limit %zu)\n", *v36 + 1, *((_QWORD *)a1 + 833) >> 3, *((_QWORD *)a1 + 18));
      v3 = v193;
      v37 = (unint64_t *)(a1 + 6664);
    }
    v192 = *v37;
LABEL_151:
    ++*v36;
  }
  v41 = *((float *)a1 + 1619);
  v42 = *v36;
  v43 = v41;
  if (*v36)
    v43 = *((float *)a1 + 1674);
  *v37 = 0;
  v37[1] = 0;
  if ((int)v5 < 1)
  {
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v46 = (_QWORD *)*((_QWORD *)a1 + 804);
    v47 = v3;
    do
    {
      v48 = (_QWORD *)*v46++;
      v45 += 8 * (v48[205] - v48[204]);
      v44 += v48[677] >> 8;
      --v47;
    }
    while (v47);
    *((_QWORD *)a1 + 833) = v45;
    *((_QWORD *)a1 + 834) = v44;
  }
  v55 = *(double *)(v40 + 320);
  v56 = *(_QWORD *)(v40 + 1688);
  if (*(_BYTE *)(v40 + 1776))
    v57 = *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 1800)
                                            + 8 * (*((_DWORD *)a1 + 150) % *(_DWORD *)(v40 + 1780)))
                                + 8)
                    + 56 * *((int *)a1 + 151)
                    + 16);
  else
    v57 = *(double *)(v40 + 512) / *(double *)(v40 + 520);
  v58 = *((_DWORD *)a1 + 163);
  v59 = (double)v45;
  v60 = (int)((*(double *)(v40 + 696) + 1.0) * (double)v45 + (double)*(int *)(v40 + 704));
  *a1 = 0;
  v61 = *(unsigned __int8 *)(v56 + 446);
  if (*(_BYTE *)(v56 + 446))
  {
    v61 = 0;
    if (v42 <= 1)
    {
      v62 = *(_DWORD *)(*(_QWORD *)(v40 + 1760) + 28);
      if (v45 > v62)
      {
        v186 = v55;
        v187 = v60;
        v188 = v57;
        v189 = v43;
        v190 = v41;
        v63 = (int)(v41 + 0.5);
        v64 = (float)v63;
        v65 = (float)v63 + v38;
        v66 = v65;
        if (v65 < 50.0)
        {
          v67 = v45 - v44;
          v68 = exp2((v64 + -12.0) / 6.0) * 0.850000024;
          v69 = (double)v67;
          v3 = v193;
          v70 = (float)(v64 + 3.0);
          while (1)
          {
            v71 = exp2((v66 + -12.0) / 6.0) * 0.850000024;
            if (v71 < 0.100000001)
              v71 = 0.100000001;
            v72 = v68 / v71;
            v73 = pow(v68 / v71, 1.1) * (double)v44;
            v74 = fabs(sqrt(v72));
            if (v72 == -INFINITY)
              v74 = INFINITY;
            v75 = v73 + v74 * v69 >= (double)v62 && v66 < v70;
            if (!v75)
              break;
            v66 = v66 + 1.0;
            if (v66 >= 50.0)
              goto LABEL_108;
          }
          if (v66 > v70)
            v66 = v70;
        }
LABEL_108:
        v80 = 51.0;
        if (v66 <= 51.0)
          v80 = v66;
        v81 = v80;
        v61 = (int)v81;
        if (*(_BYTE *)(v56 + 447))
        {
          *(_BYTE *)(v40 + 1629) = *(_BYTE *)(v40 + 1628);
          v38 = 1.0;
          v43 = v189;
          v41 = v190;
          v57 = v188;
          v60 = v187;
          v55 = v186;
          if (v58 >= 1)
          {
            v82 = *(_DWORD *)(v40 + 1668);
            if (v82 < v61)
            {
              *(_BYTE *)(v40 + 1628) = 1;
              v61 = v82;
            }
          }
        }
        else
        {
          v38 = 1.0;
          v43 = v189;
          v41 = v190;
          v57 = v188;
          v60 = v187;
          v55 = v186;
        }
        if (v61 > v63)
        {
          *((float *)a1 + 1619) = (float)v61;
          v83 = 1;
          v37 = (unint64_t *)(a1 + 6664);
          goto LABEL_127;
        }
        v37 = (unint64_t *)(a1 + 6664);
      }
    }
  }
  v83 = 0;
  if (*(_BYTE *)(v56 + 447))
  {
    v84 = *(_DWORD **)(v40 + 1760);
    if ((float)v61 >= (float)*(int *)(v40 + 1668) || v84[3])
      v85 = v84[7];
    else
      v85 = v84[7] - v84[8];
    v83 = 0;
    if (v85 < v60 && v58 >= 1)
    {
      LODWORD(v5) = v191;
      if (a1[648] == 3)
      {
        *a1 = 1;
        v83 = 0;
        if (v84[6] >= v60)
        {
          *(_BYTE *)(v40 + 1653) = 0;
          v86 = 1;
        }
        else
        {
          v86 = 1;
          *(_BYTE *)(v40 + 1653) = 1;
        }
      }
      else
      {
        v86 = 0;
        v83 = 0;
      }
      goto LABEL_147;
    }
  }
LABEL_127:
  if (*(_DWORD *)(v40 + 312) | v58)
  {
    v86 = 0;
    LODWORD(v5) = v191;
  }
  else
  {
    v87 = v55 * 1.3 >= v59;
    if (v41 >= 30.0)
      v87 = 1;
    v88 = v55 * 0.7 <= v59;
    if (v41 <= 12.0)
      v88 = 1;
    if (v41 < v43)
      v87 = 1;
    if (v41 > v43)
      v88 = 1;
    v89 = v88 && v87;
    if (!v89)
      v83 = 1;
    LODWORD(v5) = v191;
    if ((v89 & 1) != 0)
    {
      v86 = 0;
    }
    else
    {
      v86 = 0;
      v90 = -1.0;
      if (v88)
        v90 = v38;
      *((float *)a1 + 1619) = v41 + v90;
    }
  }
LABEL_147:
  if (!*(_BYTE *)(v40 + 1776))
    *(_BYTE *)(v40 + 1652) = (int)v57 + ((int)v57 >> 2) < v60;
  if (v83)
  {
    *(_OWORD *)(a1 + 6680) = *(_OWORD *)(a1 + 6664);
    *((float *)a1 + 1674) = v41;
    v91 = *((_QWORD *)a1 + 79);
    bzero(*(void **)(v91 + 944), *(_QWORD *)(v91 + 928) * *(_QWORD *)(v91 + 760));
    bzero(*(void **)(v91 + 968), *(_QWORD *)(v91 + 936) * *(_QWORD *)(v91 + 752));
    bzero(*(void **)(v91 + 800), 2 * *(_QWORD *)(v91 + 760) * *(_QWORD *)(v91 + 768));
    bzero(*(void **)(v91 + 880), 16 * *(_QWORD *)(v91 + 840) * *(_QWORD *)(v91 + 848));
    goto LABEL_151;
  }
  *v36 = v42 + 1;
LABEL_155:
  v92 = v185;
  if (!v86)
  {
    if (v185[424])
    {
      v34 = sub_1C97481E4(*((_QWORD *)a1 + 79), *((_QWORD *)a1 + 79) + 598);
      *(_BYTE *)(*((_QWORD *)a1 + 79) + 597) = (_DWORD)v34 == 0;
    }
    else
    {
      v34 = 0;
    }
    v93 = *((_DWORD *)a1 + 191);
    v94 = *((_DWORD *)a1 + 163);
    if (v93 != v94)
    {
      if (a1[768] == 2)
        *((_DWORD *)a1 + 190) = v93;
      ++*((_DWORD *)a1 + 193);
    }
    if (v185[481] > 1u)
    {
LABEL_186:
      if ((int)v3 < 1)
      {
        v105 = 0;
      }
      else
      {
        v105 = 0;
        v106 = (uint64_t *)*((_QWORD *)a1 + 804);
        v107 = v3;
        do
        {
          v108 = *v106++;
          v105 = v105 + *(_QWORD *)(v108 + 1640) - *(_QWORD *)(v108 + 1632);
          --v107;
        }
        while (v107);
      }
      v109 = v92[481];
      if (v109 >= 2)
      {
        v110 = v3;
      }
      else
      {
        v105 += 10;
        v110 = v3 + 1;
      }
      if (v92[424])
        v105 += 54;
      if (v92[780])
        v105 += 29;
      if (v92[812])
        v105 += 9;
      v111 = ((unint64_t)(3 * v105) >> 1)
           + 6 * (v110 + v92[424] + v92[780] + v92[812])
           + 64;
      if (v111 <= *((_QWORD *)a1 + 17) + 8)
        v111 = *((_QWORD *)a1 + 17) + 8;
      v112 = *((_QWORD *)a1 + 845);
      v113 = *((_QWORD *)a1 + 846) - v112;
      if (v111 <= v113)
      {
        if (v111 < v113)
          *((_QWORD *)a1 + 846) = v112 + v111;
      }
      else
      {
        sub_1C971BA44((unint64_t *)a1 + 845, v111 - v113);
        v109 = v92[481];
      }
      if (v109 < 2)
      {
        WORD4(v196) = 0;
        *(_QWORD *)&v196 = 0;
        v114 = *(unsigned __int8 *)(**((_QWORD **)a1 + 804) + 58);
        *(_OWORD *)__p = 0uLL;
        if (v114 == 1)
          v115 = 0x20000000;
        else
          v115 = 0x40000000;
        if (v114 == 2)
          v116 = 0;
        else
          v116 = v115;
        LOWORD(v196) = 326;
        *(_DWORD *)((char *)&v196 + 2) = HIBYTE(v116);
        __p[2] = 0;
        __p[3] = (char *)&v196 + 2;
        LOBYTE(__p[7]) = 0;
        __p[4] = (char *)&v196 + 2;
        __p[5] = (char *)&v196 + 3;
        __p[6] = (void *)(v116 | 0x300000000);
        sub_1C9750F5C((uint64_t)__p);
        if (__p[0])
          operator delete(__p[0]);
        *((_QWORD *)a1 + 16) += off_1ED1ACCC8((void *)(*((_QWORD *)a1 + 845) + *((_QWORD *)a1 + 16)));
        v92 = v185;
        if (v185[481] <= 1u)
        {
          v117 = *((_QWORD *)a1 + 72);
          v118 = *(unsigned __int8 **)(v117 + 8408);
          v119 = v118[v118[1] + 233];
          v120 = *((_DWORD *)a1 + 163);
          if (*(_BYTE *)(**((_QWORD **)a1 + 804) + 58) == 2)
          {
            v197 = 0u;
            memset(v198, 0, sizeof(v198));
            v196 = 0u;
            v194 = 57;
            memset(&__p[3], 255, 0x3FCuLL);
            WORD2(__p[0]) = 0;
            BYTE6(__p[0]) = 0;
            HIBYTE(__p[0]) = *((_DWORD *)a1 + 193) == 0;
            __p[1] = 0;
            LODWORD(__p[2]) = 0;
            if (!v118[2032] || v118[2033] || v118[2034])
              return 4294954394;
            v121 = (float)(*((_DWORD *)a1 + 197) + *((_DWORD *)a1 + 196)) / (float)*((int *)a1 + 194);
            v122 = v121 * 90000.0;
            if (v121 >= 1.0)
              v122 = 90000.0;
            v75 = v121 > 0.0;
            v123 = 0.0;
            if (v75)
              v123 = v122;
            v124 = *((float *)a1 + 198);
            HIDWORD(__p[2]) = (int)(float)(v124 * v123);
            HIDWORD(__p[34]) = (int)(float)((float)(v124 * 90000.0) - (float)SHIDWORD(__p[2]));
            sub_1C98188D4((uint64_t)__p, (uint64_t)&v196, &v194, v117 + 8152);
            *((_QWORD *)a1 + 16) += off_1ED1ACCC8((void *)(*((_QWORD *)a1 + 845) + *((_QWORD *)a1 + 16)));
            v117 = *((_QWORD *)a1 + 72);
          }
          v197 = 0u;
          memset(v198, 0, sizeof(v198));
          v196 = 0u;
          v125 = *((_DWORD *)a1 + 193);
          v126 = *((_DWORD *)a1 + 190);
          memset(__p, 0, 24);
          memset(&__p[4], 0, 24);
          LOWORD(v196) = 334;
          BYTE2(v196) = 1;
          if (!sub_1C971B944((uint64_t)__p, (unsigned int *)&v196 + 1, 53))
          {
            v127 = *(_BYTE **)(v117 + 8408);
            if (v127[398] && v127[2028])
            {
              if (v127[1999])
              {
                *(_DWORD *)__p[4] = bswap32(__p[6]);
                v128 = SHIDWORD(__p[6]) + 4;
                v129 = LODWORD(__p[6]) << (v128 & 0xF8);
                v130 = (char *)__p[4] + (v128 >> 3);
                HIDWORD(__p[6]) = v128 & 7;
                __p[4] = v130;
                if (v130 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v130 = __p[5];
                }
                LODWORD(__p[6]) <<= v128 & 0xF8;
                *v130 = bswap32(v129);
                v131 = SHIDWORD(__p[6]) + 2;
                v132 = LODWORD(__p[6]) << (v131 & 0xF8);
                v133 = (char *)__p[4] + (v131 >> 3);
                HIDWORD(__p[6]) = v131 & 7;
                __p[4] = v133;
                if (v133 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v133 = __p[5];
                }
                LODWORD(__p[6]) <<= v131 & 0xF8;
                *v133 = bswap32(v132);
                v134 = SHIDWORD(__p[6]) + 1;
                __p[4] = (char *)__p[4] + (v134 >> 3);
                LODWORD(__p[6]) <<= v134 & 0xF8;
                HIDWORD(__p[6]) = v134 & 7;
                if (__p[4] >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                }
              }
              if (v127[2032] || v127[2033])
              {
                v135 = v127[2043] + 1;
                LODWORD(__p[6]) |= (v125 + ~v126) << (-BYTE4(__p[6]) - v135);
                *(_DWORD *)__p[4] = bswap32(__p[6]);
                v136 = SHIDWORD(__p[6]) + v135;
                v137 = (char *)__p[4] + (v136 >> 3);
                __p[4] = v137;
                HIDWORD(__p[6]) = v136 & 7;
                if (v137 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v137 = __p[5];
                }
                v138 = v127[2044] + 1;
                LODWORD(__p[6]) = ((v120 + v119 - v125) << (-(char)v138 - (v136 & 7))) | (LODWORD(__p[6]) << (v136 & 0xF8));
                *v137 = bswap32(__p[6]);
                v139 = SHIDWORD(__p[6]) + v138;
                v140 = LODWORD(__p[6]) << (v139 & 0xF8);
                v141 = (char *)__p[4] + (v139 >> 3);
                __p[4] = v141;
                v142 = v139 & 7;
                __p[6] = (void *)__PAIR64__(v142, v140);
                if (v141 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v141 = __p[5];
                }
                if (v127[2034])
                {
                  v143 = v127[2038] + 1;
                  LODWORD(__p[6]) = (-1 << (-(char)v143 - v142)) | v140;
                  *v141 = bswap32(__p[6]);
                  v144 = SHIDWORD(__p[6]) + v143;
                  __p[4] = (char *)__p[4] + (v144 >> 3);
                  LODWORD(__p[6]) <<= v144 & 0xF8;
                  HIDWORD(__p[6]) = v144 & 7;
                  if (__p[4] >= __p[5])
                  {
                    LOBYTE(__p[7]) = 1;
                    __p[4] = __p[5];
                  }
                  if (v127[2034] && v127[2037])
                  {
                    v145 = SHIDWORD(__p[6]) - 1;
                    v146 = LODWORD(__p[6]) << (v145 & 0xF8);
                    v147 = (char *)__p[4] + (v145 >> 3);
                    __p[4] = v147;
                    HIDWORD(__p[6]) = v145 & 7;
                    if (v147 >= __p[5])
                    {
                      LOBYTE(__p[7]) = 1;
                      __p[4] = __p[5];
                      v147 = __p[5];
                    }
                    LODWORD(__p[6]) <<= v145 & 0xF8;
                    *v147 = bswap32(v146);
                    v148 = SHIDWORD(__p[6]) + 1;
                    __p[4] = (char *)__p[4] + (v148 >> 3);
                    LODWORD(__p[6]) <<= v148 & 0xF8;
                    HIDWORD(__p[6]) = v148 & 7;
                    if (__p[4] >= __p[5])
                    {
                      LOBYTE(__p[7]) = 1;
                      __p[4] = __p[5];
                    }
                  }
                }
              }
            }
            if ((BYTE4(__p[6]) & 7) != 0)
              sub_1C9750F5C((uint64_t)__p);
            sub_1C9750F5C((uint64_t)__p);
            BYTE3(v196) = LOBYTE(__p[4]) - LOBYTE(__p[3]) - 1;
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          *((_QWORD *)a1 + 16) += off_1ED1ACCC8((void *)(*((_QWORD *)a1 + 845) + *((_QWORD *)a1 + 16)));
          v92 = v185;
        }
      }
      if (v92[780] && *(_BYTE *)(**((_QWORD **)a1 + 804) + 58) == 2)
      {
        memset(__p, 0, 32);
        *(_QWORD *)&v196 = 32;
        sub_1C9818FAC((uint64_t)(v92 + 784), (uint64_t)__p, &v196);
        *((_QWORD *)a1 + 16) += off_1ED1ACCC8((void *)(*((_QWORD *)a1 + 845) + *((_QWORD *)a1 + 16)));
        v92 = v185;
      }
      if (v92[812] && *(_BYTE *)(**((_QWORD **)a1 + 804) + 58) == 2)
      {
        LODWORD(__p[1]) = 0;
        __p[0] = 0;
        *(_QWORD *)&v196 = 12;
        sub_1C9818E58((uint64_t)(v185 + 816), (uint64_t)__p, &v196);
        *((_QWORD *)a1 + 16) += off_1ED1ACCC8((void *)(*((_QWORD *)a1 + 845) + *((_QWORD *)a1 + 16)));
      }
      if ((int)v5 >= 1)
      {
        v149 = 0;
        do
        {
          v150 = *(_QWORD *)(*((_QWORD *)a1 + 804) + 8 * v149);
          v151 = *((_QWORD *)a1 + 1);
          if (*(_BYTE *)(v151 + 33))
            v152 = (_DWORD)v193 - 1 == (_DWORD)v149;
          else
            v152 = 0;
          if (v152)
          {
            v153 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
            if (*(__int16 *)(v151 + 36) != -1)
              *((_WORD *)v153 + 8) = sub_1C972F610(*((_QWORD *)a1 + 79));
            if (*v153 == 255)
            {
              v154 = 0;
            }
            else
            {
              sub_1C9750D54(v150 + 1608, *((int *)v153 + 2) >> 3, 8);
              sub_1C9750D54(v150 + 1608, *((int *)v153 + 3) >> 3, 8);
              v154 = (1 << *v153);
            }
            if (v153[3] != 255)
            {
              sub_1C9750D54(v150 + 1608, *((int *)v153 + 5) >> 4, 8);
              sub_1C9750D54(v150 + 1608, *((int *)v153 + 6) >> 4, 8);
              sub_1C9750D54(v150 + 1608, *((int *)v153 + 7) >> 4, 8);
              sub_1C9750D54(v150 + 1608, *((int *)v153 + 8) >> 4, 8);
              v154 |= (1 << v153[3]);
            }
            if (v153[2] != 255)
            {
              sub_1C9750D54(v150 + 1608, *((unsigned __int16 *)v153 + 8), 16);
              v154 |= (1 << v153[2]);
            }
            v155 = v153[4];
            if (v155 != 255)
            {
              v156 = v154 | (1 << v155);
              if (v153[52])
                v154 = v156;
            }
            sub_1C9750D54(v150 + 1608, v154, 8);
          }
          *((_QWORD *)a1 + 16) += off_1ED1ACCC8((void *)(*((_QWORD *)a1 + 845) + *((_QWORD *)a1 + 16)));
          ++v149;
        }
        while (v193 != v149);
      }
      v157 = v185;
      if (*(_BYTE *)(*((_QWORD *)a1 + 1) + 33))
      {
        v158 = *((_QWORD *)a1 + 845);
        v159 = *((_QWORD *)a1 + 17);
        if (*((_QWORD *)a1 + 846) - v158 > (unint64_t)(v159 + 2))
        {
          v160 = *((_QWORD *)a1 + 16);
          v161 = v159 - v160;
          v162 = v159 - v160 - 1;
          if (v159 - v160 < 1)
          {
            v166 = 0;
          }
          else
          {
            v163 = *(_BYTE *)(v160 + v158 - 1);
            if (*(unsigned __int8 *)(v160 + v158 - 3) | *(unsigned __int8 *)(v160 + v158 - 2))
            {
              v165 = 0;
              v164 = *((_QWORD *)a1 + 16);
            }
            else
            {
              *(_BYTE *)(v158 + v160) = 0;
              v164 = v160 + 1;
              v165 = 3;
            }
            *(_BYTE *)(v158 + v160 - 1) = v165;
            memset((void *)(v158 + v164), 128, v162);
            *(_BYTE *)(v158 + v164 + v162) = v163 | 0x80;
            v166 = v161 - v160 + v164;
            v160 = *((_QWORD *)a1 + 16);
            v157 = v185;
          }
          *((_QWORD *)a1 + 16) = v160 + v166;
        }
      }
      if (v157[424])
      {
        v167 = *((_QWORD *)a1 + 79);
        if (*(_BYTE *)(v167 + 597))
        {
          v168 = (_OWORD *)(v167 + 598);
          LODWORD(__p[0]) = 830734672;
          v169 = v168[1];
          *(_OWORD *)((char *)__p + 5) = *v168;
          BYTE4(__p[0]) = 0;
          *(_OWORD *)((char *)&__p[2] + 5) = v169;
          *(_OWORD *)((char *)&__p[4] + 5) = v168[2];
          BYTE5(__p[6]) = 0x80;
          v34 = 0;
          *((_QWORD *)a1 + 16) += off_1ED1ACCC8((void *)(*((_QWORD *)a1 + 845) + *((_QWORD *)a1 + 16)));
        }
      }
      *((_QWORD *)a1 + 833) = 8 * *((_QWORD *)a1 + 16);
      v170 = *((_QWORD *)a1 + 808);
      if (!v170 || !*(_BYTE *)(v170 + 1776))
      {
LABEL_315:
        a1[768] = *(_BYTE *)(**((_QWORD **)a1 + 804) + 58);
        *((_DWORD *)a1 + 191) = *((_DWORD *)a1 + 163);
        goto LABEL_316;
      }
      v171 = *((_DWORD *)a1 + 163);
      v172 = *((_DWORD *)a1 + 150);
      if (v172 < 0
        || (v173 = *(_QWORD *)(*(_QWORD *)(v170 + 1800) + 8 * (v172 % *(_DWORD *)(v170 + 1780)))) == 0
        || ((v174 = *((_DWORD *)a1 + 151),
             v175 = *(_QWORD *)(v173 + 8),
             v174 < (int)(-1227133513 * ((unint64_t)(*(_QWORD *)(v173 + 16) - v175) >> 3)))
          ? (v176 = v175 == 0)
          : (v176 = 1),
            v176))
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Unable to access RcMptFrameInfo buffer for frame %d\n", *((_DWORD *)a1 + 163));
          syslog(27, "mpt_rc: Unable to access RcMptFrameInfo buffer for frame %d\n", v171);
          goto LABEL_307;
        }
      }
      else
      {
        v177 = (_DWORD *)(v175 + 56 * v174);
        if (*v177 == 1)
        {
          v178 = *((float *)a1 + 1619);
          v179 = v175 + 56 * v174;
          *(float *)(v179 + 4) = v178;
          *(_OWORD *)(v179 + 40) = *(_OWORD *)(a1 + 6664);
          if (v171)
          {
LABEL_314:
            *v177 = 2;
            std::mutex::lock((std::mutex *)(v173 + 40));
            --*(_DWORD *)(v173 + 32);
            std::condition_variable::notify_all((std::condition_variable *)(v173 + 104));
            std::mutex::unlock((std::mutex *)(v173 + 40));
            v34 = 0;
            goto LABEL_315;
          }
          *(float *)(v170 + 1792) = v178;
          if (*(_QWORD *)(v170 + 488) == 1)
          {
            *(float *)(*(_QWORD *)(*(_QWORD *)(v170 + 456) + 8 * (*(_QWORD *)(v170 + 480) / 0x155uLL))
                     + 12 * (*(_QWORD *)(v170 + 480) % 0x155uLL)) = v178;
            *(double *)(v170 + 584) = v178;
            goto LABEL_314;
          }
          if (dword_1ED1ACCC0 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Invalid rc_frame_stats_ queue size %d for the first IDR\n", *(_QWORD *)(v170 + 488));
            syslog(27, "mpt_rc: Invalid rc_frame_stats_ queue size %d for the first IDR\n", *(_QWORD *)(v170 + 488));
LABEL_307:
            if (dword_1ED1ACCC0 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Error storing frame coding results for frame %d\n", *((_DWORD *)a1 + 163));
              syslog(27, "mpt_rc: Error storing frame coding results for frame %d\n", *((_DWORD *)a1 + 163));
            }
          }
        }
        else if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Invalid RcMptFrameInfo buffer state %d for frame %d\n", *v177, v171);
          syslog(27, "mpt_rc: Invalid RcMptFrameInfo buffer state %d for frame %d\n", *v177, v171);
          goto LABEL_307;
        }
      }
      return 4294954385;
    }
    if (v93 < 0)
    {
      v95 = *((_DWORD *)a1 + 194);
    }
    else
    {
      if (v93 == v94)
      {
        v95 = *((_DWORD *)a1 + 195);
LABEL_181:
        if (v95 < 0)
        {
          if (dword_1ED1ACCC0 >= 7)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Buffer underflow!!! Display idx %d, bp_cpb_size_prev %d,  bp_cpb_size_ %d \n", v94, *((_DWORD *)a1 + 196), v95);
            syslog(31, "Buffer underflow!!! Display idx %d, bp_cpb_size_prev %d,  bp_cpb_size_ %d \n", *((_DWORD *)a1 + 163), *((_DWORD *)a1 + 196), *((_DWORD *)a1 + 195));
            v92 = v185;
            v3 = v193;
          }
          v95 = 0;
          *((_DWORD *)a1 + 195) = 0;
        }
        *((_DWORD *)a1 + 196) = v95;
        goto LABEL_186;
      }
      if ((int)v5 < 1)
      {
        v96 = 0;
      }
      else
      {
        v96 = 0;
        v97 = (uint64_t *)*((_QWORD *)a1 + 804);
        v98 = v3;
        do
        {
          v99 = *v97++;
          v96 += *(_DWORD *)(v99 + 1640) - *(_DWORD *)(v99 + 1632);
          --v98;
        }
        while (v98);
      }
      v100 = *((_DWORD *)a1 + 194);
      v101 = *((_DWORD *)a1 + 196);
      v102 = v100 - v101;
      v103 = *((_DWORD *)a1 + 197);
      v104 = v103 + v101;
      if (v102 > v103)
        v100 = v104;
      v95 = v100 - 8 * v96;
    }
    *((_DWORD *)a1 + 195) = v95;
    goto LABEL_181;
  }
  if (dword_1ED1ACCC0 >= 7)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Frame %d: dropped after encoding\n", *((_DWORD *)a1 + 163));
    syslog(31, "Frame %d: dropped after encoding\n", *((_DWORD *)a1 + 163));
  }
  v34 = 0;
LABEL_316:
  v180 = *((_QWORD *)a1 + 808);
  if (v180 && !*(_BYTE *)(v180 + 1776))
  {
    v181 = *(int *)(v180 + 1608);
    v182 = vcvts_n_s32_f32(flt_1C9857F0C[v181], 8uLL);
    v183 = *(_QWORD *)(v180 + 8);
    *(_BYTE *)(v183 + 1) = 1;
    *(_BYTE *)v183 = (unint64_t)(v181 - 4) < 0x13;
    *(_DWORD *)(v183 + 4) = v182;
  }
  return v34;
}

void sub_1C97B6640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C97B6678(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  int v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  signed int v47;
  signed int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  int v65;
  int v66;
  signed int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  size_t v87;
  unsigned int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _QWORD v108[3];

  v108[1] = *MEMORY[0x1E0C80C00];
  v2 = 2 * (0x20uLL >> *(_DWORD *)(a1 + 804)) * (0x20uLL >> *(_DWORD *)(a1 + 804));
  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 2096);
  v4 = 10 - v3;
  v5 = v3 >= 0xA;
  v6 = v3 - 10;
  if (!v5)
    v6 = v4;
  v93 = v6;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 632) + 520);
  result = MEMORY[0x1E0C80A78]((4 * v2 + 15) & 0x7FFFFFFF0);
  v15 = (char *)&v73 - result;
  v74 = v16;
  if (v16 >= 1)
  {
    v94 = 0;
    v102 = 1 << v9;
    v17 = 1 << v9 >> 1;
    v18 = 2 * v9 - 2;
    v19 = 1 << (2 * v9 - 3);
    v85 = 0x1FCu >> v93;
    v78 = 0x40u >> v93;
    v77 = 0x3ACu >> v93;
    v75 = *(_QWORD *)(v14 + 408);
    v87 = (8 * v13);
    result = 2 * v10;
    if (v11 <= 1)
      v20 = 1;
    else
      v20 = v11;
    v76 = v20;
    v92 = v7 - 1;
    v73 = 32 * v12;
    v82 = v15;
    v95 = a1;
    v103 = v9;
    v83 = v7;
    v81 = 1 << v9 >> 1;
    v80 = 2 * v9 - 2;
    v79 = 1 << (2 * v9 - 3);
    v88 = 0x204u >> v93;
    v99 = result;
    v86 = 2 * v12;
    while (v7 < 1)
    {
LABEL_65:
      v75 += v73;
      v94 += 32;
      if (v94 >= v74)
        return result;
    }
    v21 = 0;
    v22 = v74 - v94;
    v84 = v74 - v94;
    if (v74 - v94 >= 32)
      v22 = 32;
    v100 = v22;
    v23 = v22 >> 1;
    if (v23 <= 1)
      v24 = 1;
    else
      v24 = v23;
    v91 = v75;
    v25 = v7;
    v89 = v24;
    while (1)
    {
      v90 = v25 - 32;
      if (v25 >= 32)
        v25 = 32;
      v26 = v25 <= 1 ? 1 : v25;
      v107 = 0;
      v97 = v21;
      v27 = v7 - v21;
      v28 = v7 - (int)v21 >= 32 ? 32 : v7 - v21;
      v96 = v28;
      bzero(v15, v87);
      v31 = v88;
      v30 = v89;
      v32 = v86;
      result = v99;
      v33 = v103;
      if (v100 >= 2)
        break;
LABEL_64:
      v21 = v97 + 32;
      v91 += 64;
      v25 = v90;
      if (v7 <= (int)v97 + 32)
        goto LABEL_65;
    }
    v34 = v27;
    v35 = 0;
    v36 = 0;
    v37 = v91;
    v38 = v15;
    v39 = v85;
    while (v27 < 1)
    {
LABEL_33:
      if (v36 + 1 == v17)
        v44 = result;
      else
        v44 = 0;
      v38 += 4 * v44;
      if (v36 + 1 == v17)
        v36 = 0;
      else
        ++v36;
      ++v35;
      v37 += v32;
      if (v35 == v30)
      {
        if (BYTE2(v107) && (_BYTE)v107 || HIBYTE(v107) && BYTE1(v107))
        {
          v45 = (int *)v15;
          v46 = v76;
          v47 = v78;
          v48 = v77;
          if (v33 <= 5)
          {
            do
            {
              v49 = (*v45 + v19) >> v18;
              if (v49 >= v48)
                v50 = v48;
              else
                v50 = (*v45 + v19) >> v18;
              if (v49 <= v47)
                v51 = v47;
              else
                v51 = v50;
              *v45++ = v51;
              --v46;
            }
            while (v46);
          }
          if (v84 < 1)
          {
            v55 = 0;
            v54 = 0;
            v53 = 0;
          }
          else
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = v15;
            v57 = v102;
            v98 = v34;
            do
            {
              v101 = v52;
              if (v34 >= 1)
              {
                v58 = 0;
                v59 = v52 + v94;
                v60 = *(_QWORD *)(v95 + 5896);
                v61 = *(_QWORD *)(v95 + 808);
                v62 = *(unsigned int *)(*(_QWORD *)(v95 + 56) + 1636);
                v63 = v93;
                v105 = *(_QWORD *)(v95 + 8 * ((int)v62 - 3) + 6136)
                     + 4 * ((v92 + (1 << v62)) >> v62) * (uint64_t)(v59 >> v62);
                v106 = v62;
                v104 = v60 + v61 * (v59 >> v33);
                v64 = v97;
                v65 = v96;
                do
                {
                  LOBYTE(v29) = *(_BYTE *)(v104 + ((v64 + v58) >> v33));
                  v66 = (int)((double)v29 * -0.46 + 9.26);
                  v67 = *(_DWORD *)(v105 + 4 * ((v64 + v58) >> v106));
                  v108[0] = *(_QWORD *)&v56[8 * (v58 >> v33)];
                  v55 += sub_1C97B72CC(v67, (uint64_t)v108, v66, v63, 0);
                  v68 = v66;
                  v57 = v102;
                  v69 = sub_1C97B72CC(v67, (uint64_t)v108, v68, v63, 1u);
                  LOBYTE(v33) = v103;
                  v54 += v69;
                  ++v53;
                  v58 += v57;
                }
                while (v58 < v65);
              }
              result = v99;
              v56 += 4 * v99;
              v52 = v101 + v57;
              v34 = v98;
            }
            while (v101 + v57 < v100);
          }
          v70 = (v55 + (v53 >> 1)) / v53;
          v71 = v95;
          if (v70 < *(_DWORD *)(v95 + 456))
            *(_DWORD *)(v95 + 456) = v70;
          v72 = (v54 + (v53 >> 1)) / v53;
          v7 = v83;
          v15 = v82;
          v17 = v81;
          v18 = v80;
          v19 = v79;
          if (v72 < *(_DWORD *)(v71 + 460))
            *(_DWORD *)(v71 + 460) = v72;
        }
        goto LABEL_64;
      }
    }
    v40 = 0;
    while (1)
    {
      v41 = *(unsigned __int16 *)(v37 + 2 * v40);
      if (v31 >= v41)
        break;
      if (v39 <= v41)
      {
        v42 = (char *)&v107;
LABEL_31:
        v42[v40 & 1] = 1;
      }
      v43 = v40 & 1 | (2 * (v40 >> v33));
      *(_DWORD *)&v38[4 * v43] += v41;
      if (v26 == ++v40)
        goto LABEL_33;
    }
    v42 = (char *)&v107 + 2;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_1C97B6C28(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  int v41;
  unsigned int v42;
  int *v43;
  uint64_t v44;
  int v45;
  signed int v46;
  signed int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  int v65;
  signed int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  char *v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  size_t v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _QWORD v104[3];

  v104[1] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 804);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 2096);
  v4 = 10 - v3;
  v5 = v3 >= 0xA;
  v6 = v3 - 10;
  if (!v5)
    v6 = v4;
  v90 = v6;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 632) + 520);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 424);
  result = MEMORY[0x1E0C80A78](v2);
  v15 = (char *)&v71 - v14;
  v72 = v16;
  if (v16 >= 1)
  {
    v91 = 0;
    v98 = 1 << result;
    v17 = 1 << result >> 1;
    v18 = 2 * result - 2;
    v76 = 1 << (2 * result - 3);
    v83 = 0x1FCu >> v90;
    v75 = 0x40u >> v90;
    v74 = 0x3ACu >> v90;
    v84 = *(_QWORD *)(v13 + 408);
    v85 = (8 * v12);
    v71 = 16 * v8;
    if (v10 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v73 = v10;
    v89 = v7 - 1;
    v79 = (char *)&v71 - v14;
    v92 = a1;
    v99 = result;
    v81 = v7;
    v80 = v8;
    v78 = 1 << result >> 1;
    v77 = 2 * result - 2;
    v86 = 0x204u >> v90;
    v95 = 2 * v11;
    while (v7 < 1)
    {
LABEL_65:
      v84 += v71;
      v91 += 32;
      if (v91 >= v72)
        return result;
    }
    v19 = 0;
    v20 = v72 - v91;
    v82 = v72 - v91;
    if (v72 - v91 >= 32)
      v20 = 32;
    v96 = v20;
    v21 = v20 >> 1;
    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v21;
    v23 = v7;
    v87 = v22;
    while (1)
    {
      v100 = v19;
      v88 = v23 - 32;
      if (v23 >= 32)
        v23 = 32;
      v24 = v23 <= 1 ? 1 : v23;
      v103 = 0;
      v25 = v7 - v19;
      v26 = v7 - (int)v19 >= 32 ? 32 : v7 - v19;
      v93 = v26;
      bzero(v15, v85);
      v29 = v86;
      v28 = v87;
      result = v99;
      v30 = v100;
      v31 = v95;
      if (v96 >= 2)
        break;
LABEL_64:
      v19 = v30 + 32;
      v23 = v88;
      if (v7 <= (int)v19)
        goto LABEL_65;
    }
    v32 = v25;
    v33 = 0;
    v34 = 0;
    v35 = v84 + v100;
    v36 = v15;
    v37 = v83;
    while (v25 < 1)
    {
LABEL_33:
      if (v34 + 1 == v17)
        v42 = v31;
      else
        v42 = 0;
      v36 += 4 * v42;
      if (v34 + 1 == v17)
        v34 = 0;
      else
        ++v34;
      v35 += v8;
      if (++v33 == v28)
      {
        if (BYTE2(v103) && (_BYTE)v103 || HIBYTE(v103) && BYTE1(v103))
        {
          v43 = (int *)v15;
          v44 = v73;
          v45 = v76;
          v46 = v75;
          v47 = v74;
          if (result <= 5)
          {
            do
            {
              v48 = (*v43 + v45) >> v18;
              if (v48 >= v47)
                v49 = v47;
              else
                v49 = (*v43 + v45) >> v18;
              if (v48 <= v46)
                v50 = v46;
              else
                v50 = v49;
              *v43++ = v50;
              --v44;
            }
            while (v44);
          }
          if (v82 < 1)
          {
            v54 = 0;
            v53 = 0;
            v52 = 0;
          }
          else
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = v15;
            v56 = v98;
            v94 = v32;
            do
            {
              v97 = v51;
              if (v32 >= 1)
              {
                v57 = 0;
                v58 = v51 + v91;
                v59 = *(_QWORD *)(v92 + 5896);
                v60 = *(_QWORD *)(v92 + 808);
                v61 = *(unsigned int *)(*(_QWORD *)(v92 + 56) + 1636);
                v62 = v90;
                v101 = *(_QWORD *)(v92 + 8 * ((int)v61 - 3) + 6136)
                     + 4 * ((v89 + (1 << v61)) >> v61) * (uint64_t)(v58 >> v61);
                v102 = v61;
                v63 = v59 + v60 * (v58 >> result);
                v64 = v93;
                do
                {
                  LOBYTE(v27) = *(_BYTE *)(v63 + (((int)v30 + v57) >> result));
                  v65 = (int)((double)v27 * -0.46 + 9.26);
                  v66 = *(_DWORD *)(v101 + 4 * (((int)v30 + v57) >> v102));
                  v104[0] = *(_QWORD *)&v55[8 * (v57 >> result)];
                  v54 += sub_1C97B72CC(v66, (uint64_t)v104, v65, v62, 0);
                  v67 = v65;
                  v56 = v98;
                  v53 += sub_1C97B72CC(v66, (uint64_t)v104, v67, v62, 1u);
                  result = v99;
                  v30 = v100;
                  ++v52;
                  v57 += v56;
                }
                while (v57 < v64);
              }
              v55 += 4 * v95;
              v51 = v97 + v56;
              v32 = v94;
            }
            while (v97 + v56 < v96);
          }
          v68 = (v54 + (v52 >> 1)) / v52;
          v69 = v92;
          if (v68 < *(_DWORD *)(v92 + 456))
            *(_DWORD *)(v92 + 456) = v68;
          v70 = (v53 + (v52 >> 1)) / v52;
          v7 = v81;
          v8 = v80;
          v15 = v79;
          v17 = v78;
          v18 = v77;
          if (v70 < *(_DWORD *)(v69 + 460))
            *(_DWORD *)(v69 + 460) = v70;
        }
        goto LABEL_64;
      }
    }
    v38 = 0;
    while (1)
    {
      v39 = *(unsigned __int8 *)(v35 + v38);
      if (v29 >= v39)
        break;
      if (v37 <= v39)
      {
        v40 = (char *)&v103;
LABEL_31:
        v40[v38 & 1] = 1;
        v39 = *(unsigned __int8 *)(v35 + v38);
      }
      v41 = v38 & 1 | (2 * (v38 >> result));
      *(_DWORD *)&v36[4 * v41] += v39;
      if (v24 == ++v38)
        goto LABEL_33;
    }
    v40 = (char *)&v103 + 2;
    goto LABEL_31;
  }
  return result;
}

_QWORD *sub_1C97B7184(_QWORD *result, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v4 = result;
  if (a3)
  {
    v5 = 0;
    v6 = *result;
    v7 = 1;
    do
    {
      v8 = v7;
      if (*(int *)(v6 + 524) >> v5 >= 1)
      {
        v9 = 0;
        do
        {
          result = memcpy((void *)(*(_QWORD *)(v6 + 8 * v5 + 400) + *(_QWORD *)(v6 + 8 * v5 + 416) * v9), (const void *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v5 + 472)+ *(_QWORD *)(*(_QWORD *)a2 + 8 * v5 + 416) * v9), *(int *)(v6 + 520));
          ++v9;
          v6 = *v4;
        }
        while (v9 < *(int *)(*v4 + 524) >> v5);
      }
      v7 = 0;
      v5 = 1;
    }
    while ((v8 & 1) != 0);
  }
  else
  {
    v10 = 0;
    v11 = *(_BYTE *)(*(_QWORD *)a2 + 531) == 1;
    v12 = *result;
    v13 = 1;
    do
    {
      v14 = v13;
      if (*(int *)(v12 + 524) >> v10 >= 1)
      {
        v15 = 0;
        do
        {
          result = memcpy((void *)(*(_QWORD *)(v12 + 8 * v10 + 400) + ((*(_QWORD *)(v12 + 8 * v10 + 416) * v15) << v11)), (const void *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v10 + 400)+ ((*(_QWORD *)(*(_QWORD *)a2 + 8 * v10 + 416) * v15) << v11)), (int)(*(_DWORD *)(v12 + 520) << v11));
          ++v15;
          v12 = *v4;
        }
        while (v15 < *(int *)(*v4 + 524) >> v10);
      }
      v13 = 0;
      v10 = 1;
    }
    while ((v14 & 1) != 0);
  }
  return result;
}

uint64_t sub_1C97B72CC(signed int a1, uint64_t a2, int a3, char a4, unsigned int a5)
{
  signed int v5;
  double v6;
  float v7;
  float v8;
  signed int v9;
  float v10;
  float v11;
  BOOL v12;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  int v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v5 = 0x200u >> a4;
  v6 = (double)(1 << a4);
  v24[0] = vshl_u32((uint32x2_t)0xC80000012CLL, (uint32x2_t)vneg_s32(vdup_n_s32(a4)));
  v7 = v6 * 0.01;
  v8 = v6 * 0.03125;
  v9 = *(_DWORD *)(a2 + 4 * (1 - a5));
  if ((int)(0x200u >> a4) <= a1)
  {
    v11 = (float)(int)(a1 - (0x2BCu >> a4));
    v10 = v8;
  }
  else
  {
    v10 = (float)(*((_DWORD *)v24 + a5) - a1);
    v11 = v7;
  }
  v12 = v9 < v5;
  if (v9 >= v5)
    v7 = v8;
  v13 = 0x172u >> a4;
  if (!v12)
  {
    v13 = *(_DWORD *)(a2 + 4 * (1 - a5));
    v9 = 0x226u >> a4;
  }
  v14 = 1.0;
  v15 = 1.0 - (float)(v7 * (float)(int)(v13 - v9));
  if (v15 < 1.0)
    v16 = v15;
  else
    v16 = 1.0;
  v12 = v15 > 0.0;
  v17 = 0.0;
  if (!v12)
    v16 = 0.0;
  v18 = 1.0 - (float)(v11 * v10);
  if (v18 < 1.0)
    v14 = v18;
  if (v18 > 0.0)
    v17 = v14;
  v19 = v16;
  v20 = v17;
  v21 = *((float *)&qword_1C9831FF0 + a5)
      * (float)((float)((float)(dword_1C9854084[877 * a5 + ((*(_DWORD *)(a2 + 4 * a5) - (0x40u >> a4)) << a4)] + a3)
                      * v19)
              * v20);
  v22 = (int)v21 & ((int)v21 >> 31);
  if (v22 <= -12)
    return 4294967284;
  else
    return v22;
}

void sub_1C97B7468(uint64_t a1, uint64_t a2, double a3, double a4, uint8x8_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v26;
  uint64_t v27;
  int v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint16x4_t *v47;
  uint64_t v48;
  uint64_t j;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v64;
  int v65;
  unsigned __int8 v66;
  uint64_t v67;
  _BYTE *v68;
  int v69;
  uint64_t v70;
  _BYTE *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  char v76;
  uint64_t v77;
  char v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  __int32 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  int32x4_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 576);
  if ((_DWORD)a2)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 536);
    v7 = *(_QWORD *)(a1 + 576);
    goto LABEL_94;
  }
  v8 = *(_QWORD *)(a1 + 576);
  if (*(_BYTE *)(v5 + 570))
  {
    v9 = mach_absolute_time();
    if (*(_BYTE *)(v5 + 288))
    {
      *(_BYTE *)(v5 + 288) = 0;
      *(double *)(v5 + 272) = *(double *)(v5 + 272)
                            + (double)((v9 - *(_QWORD *)(v5 + 280))
                                     * qword_1EF920E90
                                     / HIDWORD(qword_1EF920E90))
                            / 1000000000.0;
    }
    v8 = *(_QWORD *)(a1 + 576);
  }
  if (*(_BYTE *)(v8 + 482) || *(_BYTE *)(v8 + 450))
  {
    v10 = *(_QWORD *)(a1 + 632);
    v11 = *(unsigned __int8 *)(v10 + 531);
    v12 = 504;
    if (!*(_BYTE *)(v10 + 432))
      v12 = 520;
    v13 = *(_DWORD *)(v10 + v12);
    v14 = 508;
    if (!*(_BYTE *)(v10 + 432))
      v14 = 524;
    v91 = *(_DWORD *)(v10 + v14);
    v15 = *(_QWORD *)(a1 + 616);
    v16 = *(_QWORD *)(v15 + 400);
    v17 = *(_QWORD *)(v15 + 416);
    *(_OWORD *)(a1 + 248) = 0u;
    v96 = (int)*(float *)(a1 + 6476);
    v97 = v13;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 440) = 0u;
    v98 = v8;
    v88 = v5;
    if (v11 == 1)
    {
      if (*(_BYTE *)(v8 + 482))
      {
        for (i = 0; i != 22; i += 2)
          *(_WORD *)(a1 + i + 224) = -32641;
      }
      if (v91 >= 1)
      {
        v19 = 0;
        v99 = 0;
        v94 = 0;
        v89 = (uint64_t)(v13 + 7) >> 3;
        do
        {
          v92 = v16;
          if (v13 >= 1)
          {
            v20 = 0;
            v21 = *(_QWORD *)(a1 + 5752);
            do
            {
              v22 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 800)
                               + 2 * (*(_QWORD *)(*(_QWORD *)(a1 + 632) + 768) * (v94 >> 3) + (v20 >> 3)));
              v23 = *(int *)(v21 + 4 * ((*(int *)(a1 + 5528) >> 3) * ((int)v94 >> 3) + ((int)v20 >> 3)));
              v24 = *(_DWORD *)(a1 + 4 * v23 + 152);
              if ((int)v23 <= 3 && v24 == 0)
              {
                v24 = sub_1C97DAC98(a1 + 800, v20, v94);
                v13 = v97;
                v8 = v98;
              }
              if (v24 <= 0x1F)
              {
                v26 = v96 - (v22 >> 9) + dword_1C9857BF4[v24];
                if (v26 >= 51)
                  v26 = 51;
                v27 = a1 + 4 * (v26 & ~(v26 >> 31));
                ++*(_DWORD *)(v27 + 248);
                if (v24 <= 0xA && *(_BYTE *)(v8 + 482) != 0)
                {
                  v29 = *(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 10784)
                                + *(int *)(*(_QWORD *)(a1 + 6136)
                                         + 4 * (int)v89 * (uint64_t)((int)v94 >> 3)
                                         + 4 * ((int)v20 >> 3)));
                  if (v29 < 0)
                  {
                    v30 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 5896)
                                             + *(_QWORD *)(a1 + 808) * (v94 >> *(_DWORD *)(a1 + 804))
                                             + ((unint64_t)v20 >> *(_DWORD *)(a1 + 804)))
                        - (int)(*(float *)(a1 + 6476) + 0.5);
                    v31 = ~(_BYTE)v29;
                    v32 = a1 + 2 * v31;
                    v34 = *(char *)(v32 + 224);
                    v33 = (_BYTE *)(v32 + 224);
                    if (v30 < v34)
                      *v33 = v30;
                    v35 = a1 + 2 * v31;
                    v37 = *(char *)(v35 + 225);
                    v36 = (_BYTE *)(v35 + 225);
                    if (v30 > v37)
                      *v36 = v30;
                  }
                }
              }
              v38 = 0;
              LODWORD(v39) = 0;
              v40 = 0;
              v41 = 1;
              do
              {
                v42 = 0;
                v43 = v41;
                v39 = (int)v39;
                v44 = v39 + 2;
                v45 = v17 * v38;
                do
                {
                  v46 = 0;
                  v47 = (uint16x4_t *)(v16 + 2 * (v45 + v42));
                  v48 = 4;
                  do
                  {
                    v46 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v46, *v47));
                    v40 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v40, *v47));
                    v47 = (uint16x4_t *)((char *)v47 + 2 * v17);
                    --v48;
                  }
                  while (v48);
                  v101.i32[v39++] = v46;
                  v42 = 4;
                }
                while (v44 != (_DWORD)v39);
                v41 = 0;
                v38 = 4;
              }
              while ((v43 & 1) != 0);
              ++v99;
              if (vaddvq_s32(vabdq_s32(v101, vdupq_n_s32((int)(v40 + 2) >> 2))) < 0x82)
                ++v19;
              v20 += 8;
              v16 += 16;
            }
            while (v13 > (int)v20);
          }
          v16 = v92 + 16 * v17;
          v94 += 8;
        }
        while (v91 > (int)v94);
        goto LABEL_87;
      }
    }
    else
    {
      if (*(_BYTE *)(v8 + 482))
      {
        for (j = 0; j != 22; j += 2)
          *(_WORD *)(a1 + j + 224) = -32641;
      }
      if (v91 >= 1)
      {
        v19 = 0;
        v99 = 0;
        v95 = 0;
        v90 = (uint64_t)(v13 + 7) >> 3;
        do
        {
          v93 = v16;
          if (v13 >= 1)
          {
            v50 = 0;
            v51 = v95 >> 3;
            v52 = *(_QWORD *)(a1 + 5752);
            v53 = v16;
            do
            {
              v54 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 800)
                               + 2 * (*(_QWORD *)(*(_QWORD *)(a1 + 632) + 768) * v51 + (v50 >> 3)));
              v55 = *(int *)(v52 + 4 * ((*(int *)(a1 + 5528) >> 3) * ((int)v95 >> 3) + ((int)v50 >> 3)));
              v56 = *(_DWORD *)(a1 + 4 * v55 + 152);
              if ((int)v55 <= 3 && v56 == 0)
              {
                v58 = v52;
                v59 = v19;
                v60 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 800)
                                 + 2 * (*(_QWORD *)(*(_QWORD *)(a1 + 632) + 768) * v51 + (v50 >> 3)));
                v56 = sub_1C97DAC98(a1 + 800, v50, v95);
                v54 = v60;
                v19 = v59;
                v52 = v58;
                v13 = v97;
                v8 = v98;
              }
              if (v56 <= 0x1F)
              {
                v61 = v96 - (v54 >> 9) + dword_1C9857BF4[v56];
                if (v61 >= 51)
                  v61 = 51;
                v62 = a1 + 4 * (v61 & ~(v61 >> 31));
                ++*(_DWORD *)(v62 + 248);
                if (v56 <= 0xA && *(_BYTE *)(v8 + 482) != 0)
                {
                  v64 = *(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 10784)
                                + *(int *)(*(_QWORD *)(a1 + 6136)
                                         + 4 * (int)v90 * (uint64_t)((int)v95 >> 3)
                                         + 4 * ((int)v50 >> 3)));
                  if (v64 < 0)
                  {
                    v65 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 5896)
                                             + *(_QWORD *)(a1 + 808) * (v95 >> *(_DWORD *)(a1 + 804))
                                             + ((unint64_t)v50 >> *(_DWORD *)(a1 + 804)))
                        - (int)(*(float *)(a1 + 6476) + 0.5);
                    v66 = ~(_BYTE)v64;
                    v67 = a1 + 2 * v66;
                    v69 = *(char *)(v67 + 224);
                    v68 = (_BYTE *)(v67 + 224);
                    if (v65 < v69)
                      *v68 = v65;
                    v70 = a1 + 2 * v66;
                    v72 = *(char *)(v70 + 225);
                    v71 = (_BYTE *)(v70 + 225);
                    if (v65 > v72)
                      *v71 = v65;
                  }
                }
              }
              v73 = 0;
              LODWORD(v74) = 0;
              v75 = 0;
              v76 = 1;
              do
              {
                v77 = 0;
                v78 = v76;
                v74 = (int)v74;
                v79 = v74 + 2;
                v80 = v53 + v17 * v73;
                do
                {
                  v81 = 0;
                  v82 = (__int32 *)(v80 + v77);
                  v83 = 4;
                  do
                  {
                    a5.i32[0] = *v82;
                    a5 = (uint8x8_t)vmovl_u8(a5).u64[0];
                    v81 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v81, (uint16x4_t)a5));
                    v75 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v75, (uint16x4_t)a5));
                    v82 = (__int32 *)((char *)v82 + v17);
                    --v83;
                  }
                  while (v83);
                  v101.i32[v74++] = v81;
                  v77 = 4;
                }
                while (v79 != (_DWORD)v74);
                v76 = 0;
                v73 = 4;
              }
              while ((v78 & 1) != 0);
              ++v99;
              if (vaddvq_s32(vabdq_s32(v101, vdupq_n_s32((int)(v75 + 2) >> 2))) < 0x82)
                ++v19;
              v50 += 8;
              v53 += 8;
            }
            while (v13 > (int)v50);
          }
          v16 = v93 + 8 * v17;
          v95 += 8;
        }
        while (v91 > (int)v95);
        goto LABEL_87;
      }
    }
    v99 = 0;
    v19 = 0;
LABEL_87:
    *(_DWORD *)(a1 + 220) = v19 <= v99 >> 3;
    v5 = v88;
  }
  v84 = *(_QWORD *)(a1 + 632);
  if (v84)
  {
    *(_DWORD *)(v84 + 1164) = (int)*(float *)(a1 + 6476);
    v85 = *(_QWORD *)(a1 + 616);
    v86 = *(_OWORD *)(v85 + 664);
    *(_QWORD *)(v84 + 680) = *(_QWORD *)(v85 + 680);
    *(_OWORD *)(v84 + 664) = v86;
    sub_1C97D8F6C(a1 + 800);
  }
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a1 + 648);
  *(_BYTE *)(a1 + 545) = *(_DWORD *)(a1 + 220);
  if (*(_BYTE *)(v5 + 482))
    v87 = a1 + 224;
  else
    v87 = 0;
  *(_QWORD *)(a1 + 552) = v87;
  *(_QWORD *)(a1 + 560) = a1 + 248;
  v7 = *(_QWORD *)(a1 + 576);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 536);
  a2 = 0;
LABEL_94:
  sub_1C97A5478(v7, a2, a1, v6);
}

void sub_1C97B7C5C(unsigned __int8 *a1, void (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unsigned __int8 *, unsigned __int8 *), uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double *v13;
  double v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  unsigned int v25;
  FILE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  int v36;
  double v37;
  int v38;
  int v39;
  int v40;
  uint64_t j;
  uint64_t k;
  uint64_t v43;
  uint64_t v44;
  FILE *v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  int v68;
  _BOOL4 v69;
  double v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  _BYTE *v76;
  int v77;
  double v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  int v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  char v90;
  char v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int16 *v98;
  unsigned __int16 *v99;
  unsigned __int16 *v100;
  unsigned __int16 *v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int16 *v127;
  unsigned __int16 *v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  BOOL v134;
  uint64x2_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unsigned int v139;
  int v140;
  int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  int32x2_t v146;
  int32x2_t v147;
  int32x2_t v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  uint64_t v153;
  unsigned __int8 *v154;
  double v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t i;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  uint64_t v173;
  unsigned __int8 *v174;
  const char *v175;
  int v176;
  int v177;
  uint64_t v178;
  const char *v179;
  unsigned __int8 *v180;
  int v181;
  uint64_t v182;
  unsigned __int8 *v183;
  int v184;
  unsigned int v185;
  BOOL v186;
  _BYTE *v187;
  _QWORD v188[2];
  FILE *__stream;
  _BYTE *v190;
  _QWORD **v191;
  _QWORD *v192;

  v6 = a1 + 6292;
  v7 = *((_QWORD *)a1 + 72);
  if (*(_BYTE *)(v7 + 426))
    goto LABEL_2;
  if (*((_DWORD *)a1 + 148))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error %d encoding frame\n", *((_DWORD *)a1 + 148));
      syslog(27, "Error %d encoding frame\n", *((_DWORD *)a1 + 148));
    }
    goto LABEL_2;
  }
  __stream = *(FILE **)(v7 + 248);
  v190 = (_BYTE *)(v7 + 360);
  v188[0] = &v190;
  v188[1] = &__stream;
  v17 = atomic_load(&qword_1EF920E98);
  if (v17 != -1)
  {
    v192 = v188;
    v191 = &v192;
    std::__call_once(&qword_1EF920E98, &v191, (void (__cdecl *)(void *))sub_1C97B908C);
  }
  if (v190[377])
  {
    if (dword_1ED1ACCC0 < 6)
      goto LABEL_23;
    v18 = *((_QWORD *)a1 + 77);
    v19 = *(_DWORD *)(v18 + 32);
    if (!v19)
      v19 = 1;
    fprintf(__stream, "%10.3f ", (double)*(uint64_t *)(v18 + 16) / (double)v19);
  }
  if (dword_1ED1ACCC0 >= 6)
    fprintf(__stream, "%6d", *((_DWORD *)a1 + 163));
LABEL_23:
  v187 = v6;
  if (!*a1)
  {
    v49 = *((_QWORD *)a1 + 79);
    v50 = 520;
    if (*(_BYTE *)(v49 + 432))
      v50 = 504;
    v51 = 508;
    if (!*(_BYTE *)(v49 + 432))
      v51 = 524;
    v52 = *(unsigned int *)(v49 + v51);
    v53 = a1[648];
    if (v53 > 5)
      v54 = "???";
    else
      v54 = off_1E8292468[v53];
    v55 = *(_DWORD *)(v49 + v50);
    if ((int)v52 < 1)
    {
      v57 = 0;
    }
    else
    {
      v56 = 0;
      v57 = 0;
      v58 = *(__int16 **)(v49 + 800);
      LODWORD(v59) = (v55 + 7) >> 3;
      if ((int)v59 <= 1)
        v59 = 1;
      else
        v59 = v59;
      do
      {
        if (v55 >= 1)
          v57 += ((uint64_t)*v58 >> 9) * v59;
        v56 += 8;
        v58 += *(_QWORD *)(v49 + 768);
      }
      while (v56 < v52);
    }
    if (dword_1ED1ACCC0 >= 6)
    {
      fprintf(__stream, " (%6d) %4dx%4d %4s", *(_DWORD *)(v49 + 1024), v55, v52, v54);
      v68 = dword_1ED1ACCC0;
      if (dword_1ED1ACCC0 <= 6)
        goto LABEL_138;
      if (*v6)
        v69 = 1;
      else
        v69 = v6[1] != 0;
      fprintf(__stream, " %4d", v69);
      if (dword_1ED1ACCC0 >= 6)
      {
        fprintf(__stream, " (%4.1f, %4d, %4d)", *((double *)a1 + 787), *((_DWORD *)a1 + 1568), *((_DWORD *)a1 + 1569));
        v68 = dword_1ED1ACCC0;
LABEL_138:
        if (v68 < 6)
          goto LABEL_161;
        v72 = *((_QWORD *)a1 + 808);
        if (v72)
        {
          v73 = *(_QWORD *)(v72 + 1760);
          if (v73)
            v74 = (int)((double)(1000 * *(_DWORD *)(v73 + 12)) / *(double *)(v72 + 512));
          else
            v74 = -1;
          v78 = (double)*(int *)(*((_QWORD *)a1 + 77) + 32) / (double)*(uint64_t *)(*((_QWORD *)a1 + 77) + 24);
          if (!*(_BYTE *)(v72 + 1776))
          {
            v79 = (double *)(v72 + 520);
            goto LABEL_160;
          }
        }
        else
        {
          v78 = (double)*(int *)(*((_QWORD *)a1 + 77) + 32) / (double)*(uint64_t *)(*((_QWORD *)a1 + 77) + 24);
          v74 = -1;
        }
        v79 = (double *)(*((_QWORD *)a1 + 72) + 472);
LABEL_160:
        fprintf(__stream, " %5.1f/%5.1f %6lu %4d %5.1f/%5.1f", *((float *)a1 + 1619), (double)v57 / (double)((((int)v52 + 7) >> 3) * ((v55 + 7) >> 3)), *((_QWORD *)a1 + 16), v74, v78, *v79);
      }
    }
LABEL_161:
    if (!v190[65])
      goto LABEL_258;
    v80 = *((_QWORD *)a1 + 79);
    if (*(_BYTE *)(v80 + 432))
    {
      v81 = 0;
      v82 = *((_QWORD *)a1 + 77);
      v83 = 1;
      do
      {
        v84 = v83;
        *(_QWORD *)(v82 + 8 * v81 + 400) = *(_QWORD *)(v82 + 8 * v81 + 440);
        v82 = *((_QWORD *)a1 + 77);
        *(_QWORD *)(v82 + 8 * v81 + 416) = *(_QWORD *)(v82 + 8 * v81 + 456);
        v81 = 1;
        v83 = 0;
      }
      while ((v84 & 1) != 0);
      v80 = *((_QWORD *)a1 + 79);
      v85 = *(_DWORD *)(v80 + 520);
      if (*(_DWORD *)(v80 + 504) == v85 && *(_DWORD *)(v80 + 508) == *(_DWORD *)(v80 + 524))
      {
        v86 = 0;
        v87 = 1;
        do
        {
          v88 = v87;
          *(_QWORD *)(v80 + 8 * v86 + 400) = *(_QWORD *)(v80 + 8 * v86 + 440);
          v80 = *((_QWORD *)a1 + 79);
          *(_QWORD *)(v80 + 8 * v86 + 416) = *(_QWORD *)(v80 + 8 * v86 + 456);
          v86 = 1;
          v87 = 0;
        }
        while ((v88 & 1) != 0);
      }
      else
      {
        if (*(_DWORD *)(v80 + 512) != v85 || *(_DWORD *)(v80 + 516) != *(_DWORD *)(v80 + 524))
        {
          v92 = sub_1C9747984(*((_QWORD *)a1 + 79), *((_QWORD *)a1 + 3));
          v93 = dword_1ED1ACCC0;
          if (v92 && dword_1ED1ACCC0 >= 3)
          {
            fwrite("ScaleReconFrameToInputDimension failed for PSNR\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "ScaleReconFrameToInputDimension failed for PSNR\n");
            v93 = dword_1ED1ACCC0;
          }
          else if (!v92)
          {
            v80 = *((_QWORD *)a1 + 79);
            goto LABEL_182;
          }
          if (v93 >= 6)
            fprintf(__stream, "%-24s");
          goto LABEL_258;
        }
        v89 = 0;
        v90 = 1;
        do
        {
          v91 = v90;
          *(_QWORD *)(v80 + 8 * v89 + 400) = *(_QWORD *)(v80 + 8 * v89 + 472);
          v80 = *((_QWORD *)a1 + 79);
          *(_QWORD *)(v80 + 8 * v89 + 416) = *(_QWORD *)(v80 + 8 * v89 + 488);
          v89 = 1;
          v90 = 0;
        }
        while ((v91 & 1) != 0);
      }
    }
LABEL_182:
    v94 = *((_QWORD *)a1 + 77);
    if (*(_BYTE *)(v80 + 531) == 1)
    {
      if (*(_BYTE *)(v80 + 534))
      {
        if (dword_1ED1ACCC0 < 3)
        {
LABEL_186:
          v95 = *(unsigned int *)(v94 + 524);
          if ((int)v95 < 1)
          {
            v97 = 0;
          }
          else
          {
            v96 = 0;
            v97 = 0;
            v98 = *(unsigned __int16 **)(v80 + 400);
            v99 = *(unsigned __int16 **)(v94 + 400);
            do
            {
              if (*(int *)(v94 + 520) >= 1)
              {
                v100 = v99;
                v101 = v98;
                v102 = *(unsigned int *)(v94 + 520);
                do
                {
                  v104 = *v100++;
                  v103 = v104;
                  v105 = *v101++;
                  v97 += ((v103 - v105) * (v103 - v105));
                  --v102;
                }
                while (v102);
              }
              ++v96;
              v98 += *(_QWORD *)(v80 + 416);
              v99 += *(_QWORD *)(v94 + 416);
            }
            while (v96 != v95);
          }
          if (*(_BYTE *)(v94 + 532) && (int)v95 >= 2)
          {
            v118 = 0;
            v119 = 0;
            v120 = 0;
            v121 = v95 >> 1;
            v122 = *(_DWORD *)(v94 + 520);
            if (v122 >= 0)
              v123 = *(_DWORD *)(v94 + 520);
            else
              v123 = v122 + 1;
            v124 = (v123 >> 1);
            v125 = *(_QWORD *)(v80 + 408) + 2;
            v126 = *(_QWORD *)(v94 + 408) + 2;
            do
            {
              if (v122 >= 2)
              {
                v127 = (unsigned __int16 *)v126;
                v128 = (unsigned __int16 *)v125;
                v129 = v124;
                do
                {
                  v130 = *(v127 - 1) - *(v128 - 1);
                  v132 = *v127;
                  v127 += 2;
                  v131 = v132;
                  v133 = *v128;
                  v128 += 2;
                  v120 += (v130 * v130);
                  v119 += ((v131 - v133) * (v131 - v133));
                  --v129;
                }
                while (v129);
              }
              ++v118;
              v125 += 2 * *(_QWORD *)(v80 + 424);
              v126 += 2 * *(_QWORD *)(v94 + 424);
            }
            while (v118 != v121);
          }
          else
          {
            v120 = 0;
            v119 = 0;
          }
          *((double *)a1 + 9) = (double)v97;
          *((double *)a1 + 10) = (double)v120;
          *((double *)a1 + 11) = (double)v119;
          goto LABEL_241;
        }
      }
      else
      {
        if (*(_BYTE *)(v94 + 534))
          v117 = dword_1ED1ACCC0 <= 2;
        else
          v117 = 1;
        if (v117)
          goto LABEL_186;
      }
      fwrite("SSE calculation on MSB-aligned buffers not implemented\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "SSE calculation on MSB-aligned buffers not implemented\n");
      goto LABEL_186;
    }
    if (*(_BYTE *)(v80 + 534))
    {
      if (dword_1ED1ACCC0 < 3)
      {
LABEL_196:
        v106 = *(unsigned int *)(v94 + 524);
        if ((int)v106 < 1)
        {
          v108 = 0;
        }
        else
        {
          v107 = 0;
          v108 = 0;
          v109 = *(unsigned __int8 **)(v80 + 400);
          v110 = *(unsigned __int8 **)(v94 + 400);
          do
          {
            if (*(int *)(v94 + 520) >= 1)
            {
              v111 = v110;
              v112 = v109;
              v113 = *(unsigned int *)(v94 + 520);
              do
              {
                v115 = *v111++;
                v114 = v115;
                v116 = *v112++;
                v108 += ((v114 - v116) * (v114 - v116));
                --v113;
              }
              while (v113);
            }
            ++v107;
            v109 += *(_QWORD *)(v80 + 416);
            v110 += *(_QWORD *)(v94 + 416);
          }
          while (v107 != v106);
        }
        v135 = 0uLL;
        if (*(_BYTE *)(v94 + 532) && (int)v106 >= 2)
        {
          v136 = 0;
          v137 = *(unsigned __int8 **)(v80 + 408);
          v138 = *(unsigned __int8 **)(v94 + 408);
          v139 = v106 >> 1;
          v140 = *(_DWORD *)(v94 + 520);
          if (v140 >= 0)
            v141 = *(_DWORD *)(v94 + 520);
          else
            v141 = v140 + 1;
          v142 = (v141 >> 1);
          do
          {
            if (v140 >= 2)
            {
              v143 = v138;
              v144 = v137;
              v145 = v142;
              do
              {
                v146.i32[0] = *v143;
                v146.i32[1] = v143[1];
                v147.i32[0] = *v144;
                v147.i32[1] = v144[1];
                v148 = vsub_s32(v146, v147);
                v135 = vaddw_u32(v135, (uint32x2_t)vmul_s32(v148, v148));
                v144 += 2;
                v143 += 2;
                --v145;
              }
              while (v145);
            }
            ++v136;
            v137 += *(_QWORD *)(v80 + 424);
            v138 += *(_QWORD *)(v94 + 424);
          }
          while (v136 != v139);
        }
        *((double *)a1 + 9) = (double)v108;
        *((float64x2_t *)a1 + 5) = vcvtq_f64_u64(v135);
LABEL_241:
        v149 = *((_QWORD *)a1 + 79);
        v150 = *(unsigned __int8 *)(v149 + 528);
        v151 = *(unsigned __int8 *)(v149 + 529);
        if (v150 == v151)
        {
          if (v150 < 0xB || dword_1ED1ACCC0 <= 3)
          {
LABEL_250:
            ((void (*)(uint64_t, unsigned __int8 *, unsigned __int8 *))off_1E8292010[v150 - 8])(v149, a1 + 72, a1 + 96);
            v153 = 0;
            v154 = a1 + 96;
            do
            {
              v155 = *(double *)&v154[v153];
              if ((*(_QWORD *)&v155 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                if (v155 > 99.99)
                  v155 = 99.99;
                *(double *)&v154[v153] = v155;
              }
              v153 += 8;
            }
            while (v153 != 32);
            v156 = dword_1ED1ACCC0;
            if (dword_1ED1ACCC0 <= 5)
            {
LABEL_259:
              v76 = v190;
              if (v190[64])
              {
                if (v156 >= 6)
                  fwrite(" [", 2uLL, 1uLL, __stream);
                v157 = *((_QWORD *)a1 + 79);
                if (*(_BYTE *)(v157 + 597))
                {
                  v158 = 0;
                  if (*(_BYTE *)(v157 + 532))
                    v159 = 3;
                  else
                    v159 = 1;
                  v160 = dword_1ED1ACCC0;
                  v161 = 598;
                  do
                  {
                    for (i = 0; i != 16; ++i)
                    {
                      if (v160 >= 6)
                      {
                        fprintf(__stream, "%02x", *(unsigned __int8 *)(*((_QWORD *)a1 + 79) + v161 + i));
                        v160 = dword_1ED1ACCC0;
                      }
                    }
                    if (v158 < (v159 - 1) && v160 > 5)
                    {
                      fputc(44, __stream);
                      v160 = dword_1ED1ACCC0;
                    }
                    ++v158;
                    v161 += 16;
                  }
                  while (v158 != v159);
                }
                else
                {
                  if (dword_1ED1ACCC0 < 6)
                    goto LABEL_285;
                  fprintf(__stream, "-%32s", "MD5 calculation error");
                  v160 = dword_1ED1ACCC0;
                }
                v6 = v187;
                if (v160 < 6)
                  goto LABEL_285;
                fputc(93, __stream);
                v156 = dword_1ED1ACCC0;
                v76 = v190;
              }
              if (v76[377])
                v163 = v156 < 6;
              else
                v163 = 1;
              if (v163)
              {
LABEL_286:
                if (v76[65])
                {
                  v164 = *((_QWORD *)a1 + 79);
                  if (*(_BYTE *)(v164 + 432))
                  {
                    v165 = *((_QWORD *)a1 + 77);
                    v166 = *(_OWORD *)(v164 + 456);
                    *(_OWORD *)(v164 + 400) = *(_OWORD *)(v164 + 440);
                    *(_OWORD *)(v164 + 416) = v166;
                    *(_QWORD *)(v164 + 512) = 0;
                    if (v165)
                    {
                      if (*(int *)(v165 + 512) >= 1)
                      {
                        v167 = *(_OWORD *)(v165 + 488);
                        *(_OWORD *)(v165 + 400) = *(_OWORD *)(v165 + 472);
                        *(_OWORD *)(v165 + 416) = v167;
                      }
                    }
                  }
                }
                goto LABEL_291;
              }
              fprintf(__stream, " %3d/%5d %3d %4d/%4d", v6[461], v6[460], *(_BYTE *)(*((_QWORD *)a1 + 79) + 40) & 2, *((_DWORD *)a1 + 1625), *((_DWORD *)a1 + 1626));
LABEL_285:
              v76 = v190;
              goto LABEL_286;
            }
            fprintf(__stream, " %5.2f/%5.2f/%5.2f/%5.2f");
LABEL_258:
            v156 = dword_1ED1ACCC0;
            goto LABEL_259;
          }
        }
        else if (dword_1ED1ACCC0 < 4)
        {
          goto LABEL_250;
        }
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "PSNR calculation for bitdepth %d/%d not supported\n", *(unsigned __int8 *)(v149 + 528), v151);
        syslog(28, "PSNR calculation for bitdepth %d/%d not supported\n", *(unsigned __int8 *)(v149 + 528), *(unsigned __int8 *)(v149 + 529));
        v150 = *(unsigned __int8 *)(v149 + 528);
        goto LABEL_250;
      }
    }
    else
    {
      if (*(_BYTE *)(v94 + 534))
        v134 = dword_1ED1ACCC0 <= 2;
      else
        v134 = 1;
      if (v134)
        goto LABEL_196;
    }
    fwrite("SSE calculation on MSB-aligned buffers not implemented\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "SSE calculation on MSB-aligned buffers not implemented\n");
    goto LABEL_196;
  }
  if (dword_1ED1ACCC0 < 6
    || (v6[165] ? (v20 = " AFTER") : (v20 = "BEFORE"),
        fprintf(__stream, " -------- dropped: %s encoding --------", v20),
        dword_1ED1ACCC0 < 6))
  {
LABEL_154:
    v76 = v190;
    goto LABEL_291;
  }
  v21 = *((_QWORD *)a1 + 808);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 1760);
    if (v22)
      v23 = (int)((double)(1000 * *(_DWORD *)(v22 + 12)) / *(double *)(v21 + 512));
    else
      v23 = -1;
    v70 = (double)*(int *)(*((_QWORD *)a1 + 77) + 32) / (double)*(uint64_t *)(*((_QWORD *)a1 + 77) + 24);
    if (!*(_BYTE *)(v21 + 1776))
    {
      v71 = (double *)(v21 + 520);
      goto LABEL_143;
    }
  }
  else
  {
    v70 = (double)*(int *)(*((_QWORD *)a1 + 77) + 32) / (double)*(uint64_t *)(*((_QWORD *)a1 + 77) + 24);
    v23 = -1;
  }
  v71 = (double *)(*((_QWORD *)a1 + 72) + 472);
LABEL_143:
  fprintf(__stream, " %4d %4.1f/%4.1f", v23, v70, *v71);
  v75 = dword_1ED1ACCC0;
  v76 = v190;
  if (v190[65] && dword_1ED1ACCC0 >= 6)
  {
    fwrite(" --.--/--.--/--.--/--.--", 0x18uLL, 1uLL, __stream);
    v76 = v190;
    v75 = dword_1ED1ACCC0;
  }
  if (v76[64] && v75 >= 6)
  {
    fwrite(" --------------------------------", 0x21uLL, 1uLL, __stream);
    v76 = v190;
    v75 = dword_1ED1ACCC0;
  }
  if (v76[377] && v75 >= 6)
  {
    v77 = v6[165];
    if (v6[165])
      v77 = *(_BYTE *)(*((_QWORD *)a1 + 79) + 40) & 2;
    fprintf(__stream, " %3d/%5d %3d %4d/%4d", v6[461], v6[460], v77, *((_DWORD *)a1 + 1625), *((_DWORD *)a1 + 1626));
    goto LABEL_154;
  }
LABEL_291:
  v168 = v76[210];
  v169 = dword_1ED1ACCC0;
  if (v168 && dword_1ED1ACCC0 >= 6)
  {
    fprintf(__stream, " %8.0f", *(double *)(*((_QWORD *)a1 + 72) + 272) * 1000.0);
    v169 = dword_1ED1ACCC0;
  }
  if (v169 >= 6)
    fwrite(" [", 2uLL, 1uLL, __stream);
  if (*((int *)a1 + 764) <= 0)
  {
    v171 = dword_1ED1ACCC0;
  }
  else
  {
    v170 = *((_DWORD *)a1 + 765);
    v171 = dword_1ED1ACCC0;
    v172 = v170 < 1;
    if (v170 >= 1)
    {
      v173 = 0;
      v174 = a1 + 3080;
      v175 = "%d";
      v176 = *((_DWORD *)a1 + 765);
      do
      {
        if (v171 >= 6)
        {
          fprintf(__stream, v175, *(unsigned int *)(*(_QWORD *)v174 + 1024));
          v171 = dword_1ED1ACCC0;
          v176 = *((_DWORD *)a1 + 765);
        }
        ++v173;
        v174 += 16;
        v175 = ";%d";
      }
      while (v173 < v176);
    }
    v177 = *((_DWORD *)a1 + 766);
    if (v177 >= 1)
    {
      v178 = 0;
      if (v170 >= 1)
        v179 = ";%d";
      else
        v179 = "%d";
      v180 = a1 + 3336;
      do
      {
        if (v171 >= 6)
        {
          fprintf(__stream, v179, *(unsigned int *)(*(_QWORD *)v180 + 1024));
          v171 = dword_1ED1ACCC0;
          v177 = *((_DWORD *)a1 + 766);
        }
        ++v178;
        v180 += 16;
        v179 = ";%d";
      }
      while (v178 < v177);
      v172 = 0;
    }
    v181 = *((_DWORD *)a1 + 767);
    if (v181 >= 1)
    {
      v182 = 0;
      v183 = a1 + 3592;
      do
      {
        if (v171 >= 6)
        {
          if (v172)
            fprintf(__stream, "%d");
          else
            fprintf(__stream, ";%d");
          v171 = dword_1ED1ACCC0;
          v181 = *((_DWORD *)a1 + 767);
        }
        v172 = 0;
        ++v182;
        v183 += 16;
      }
      while (v182 < v181);
    }
  }
  v6 = v187;
  if (v171 >= 6)
  {
    fputc(93, __stream);
    v184 = dword_1ED1ACCC0;
    if (dword_1ED1ACCC0 <= 6)
      goto LABEL_332;
    if (!v190[192] || !*(_QWORD *)(*((_QWORD *)a1 + 72) + 10400))
    {
LABEL_333:
      fputc(10, __stream);
      goto LABEL_2;
    }
    fprintf(__stream, "         %8.3f", *((double *)a1 + 71));
    v185 = a1[648];
    v186 = v185 == 4;
    if (v185 >= 4)
    {
      v184 = dword_1ED1ACCC0;
      if (!v186 || dword_1ED1ACCC0 <= 5)
      {
LABEL_332:
        if (v184 < 6)
          goto LABEL_2;
        goto LABEL_333;
      }
    }
    else if (dword_1ED1ACCC0 < 6)
    {
      goto LABEL_2;
    }
    fprintf(__stream, "            %8.3f            %8.3f", *(double *)(*(_QWORD *)(*((_QWORD *)a1 + 72) + 10400) + 440), *(double *)(*(_QWORD *)(*((_QWORD *)a1 + 72) + 10400)+ 8 * *(int *)(*(_QWORD *)(*((_QWORD *)a1 + 72) + 10400) + 432)+ 408));
    v184 = dword_1ED1ACCC0;
    goto LABEL_332;
  }
LABEL_2:
  v8 = (uint64_t *)(a1 + 616);
  v9 = (uint64_t *)(a1 + 632);
  a2(a3, *(_QWORD *)(*((_QWORD *)a1 + 77) + 536), *((unsigned int *)a1 + 148), *((_QWORD *)a1 + 845), *((_QWORD *)a1 + 16), a1 + 544, a1 + 632);
  v10 = *((_QWORD *)a1 + 72);
  if (*((_DWORD *)a1 + 148))
  {
    v11 = *a1;
    if (*a1)
      goto LABEL_85;
    goto LABEL_81;
  }
  v12 = *((_QWORD *)a1 + 808);
  if (v12)
  {
    if (*(_BYTE *)(v12 + 1776))
      v13 = (double *)(v10 + 472);
    else
      v13 = (double *)(v12 + 520);
    v14 = *v13;
    v15 = *(_QWORD *)(v12 + 1760);
    if (v15)
    {
      v16 = (int)((double)(1000 * *(_DWORD *)(v15 + 12)) / *(double *)(v12 + 512));
      goto LABEL_34;
    }
  }
  else
  {
    v14 = *(double *)(v10 + 472);
  }
  v16 = -1;
LABEL_34:
  v24 = *((float *)a1 + 1619);
  v25 = v6[165];
  *(_BYTE *)(v10 + 10434) = 0;
  v11 = *a1;
  if (*a1)
  {
    ++*(_DWORD *)(v10 + 10468);
    if (!v25)
    {
      v34 = (_DWORD *)(v10 + 10476);
      goto LABEL_80;
    }
    ++*(_DWORD *)(v10 + 10472);
    if (v25 != 1)
      ++*(_DWORD *)(v10 + 10484);
    *(_BYTE *)(v10 + 10434) = 1;
  }
  else
  {
    ++*(_DWORD *)(v10 + 10464);
  }
  if (v25 >= 2)
    ++*(_DWORD *)(v10 + 10480);
  if (v11)
  {
    v26 = *(FILE **)(v10 + 264);
    goto LABEL_86;
  }
  v27 = (int)(v24 + 0.5);
  v28 = *v9;
  v29 = 504;
  if (!*(_BYTE *)(*v9 + 432))
    v29 = 520;
  v30 = *(_DWORD *)(v28 + v29);
  v31 = 508;
  if (!*(_BYTE *)(*v9 + 432))
    v31 = 524;
  v32 = *(_DWORD *)(v28 + v31);
  *(double *)(v10 + 10496) = *(double *)(v10 + 10496) + (double)v30;
  *(double *)(v10 + 10504) = *(double *)(v10 + 10504) + (double)v32;
  *(uint32x2_t *)(v10 + 10512) = vmin_u32(*(uint32x2_t *)(v10 + 10512), (uint32x2_t)__PAIR64__(v32, v30));
  *(uint32x2_t *)(v10 + 10520) = vmax_u32((uint32x2_t)__PAIR64__(v32, v30), *(uint32x2_t *)(v10 + 10520));
  if (v30 == *(_DWORD *)(v10 + 10744) && v32 == *(_DWORD *)(v10 + 10748))
  {
    v33 = *(_DWORD *)(v10 + 10752) + 1;
  }
  else
  {
    ++*(_DWORD *)(v10 + 10488);
    if (*((int *)a1 + 163) >= 1)
    {
      v35 = *(_DWORD *)(v10 + 10492);
      if (v35 >= *(_DWORD *)(v10 + 10752))
        v35 = *(_DWORD *)(v10 + 10752);
      *(_DWORD *)(v10 + 10492) = v35;
    }
    v33 = 1;
  }
  *(_DWORD *)(v10 + 10752) = v33;
  *(_DWORD *)(v10 + 10744) = v30;
  *(_DWORD *)(v10 + 10748) = v32;
  *(double *)(v10 + 10528) = *(double *)(v10 + 10528) + (double)v27;
  v36 = *(_DWORD *)(v10 + 10536);
  if (v36 >= v27)
    v36 = (int)(v24 + 0.5);
  *(_DWORD *)(v10 + 10536) = v36;
  if (*(_DWORD *)(v10 + 10540) > v27)
    v27 = *(_DWORD *)(v10 + 10540);
  *(_DWORD *)(v10 + 10540) = v27;
  *(double *)(v10 + 10544) = v14 + *(double *)(v10 + 10544);
  v37 = *(double *)(v10 + 10552);
  if (v37 >= v14)
    v37 = v14;
  *(double *)(v10 + 10552) = v37;
  if (v14 < *(double *)(v10 + 10560))
    v14 = *(double *)(v10 + 10560);
  *(double *)(v10 + 10560) = v14;
  *(double *)(v10 + 10568) = *(double *)(v10 + 10568) + (double)v16;
  v38 = *(_DWORD *)(v10 + 10576);
  if (v38 >= v16)
    v38 = v16;
  *(_DWORD *)(v10 + 10576) = v38;
  v39 = *(_DWORD *)(v10 + 10580);
  if (v16 > v39)
    v39 = v16;
  *(_DWORD *)(v10 + 10580) = v39;
  if (*(int *)(v28 + 1024) >= 10)
  {
    *(double *)(v10 + 10584) = *(double *)(v10 + 10584) + (double)v16;
    v40 = *(_DWORD *)(v10 + 10592);
    if (v40 >= v16)
      v40 = v16;
    *(_DWORD *)(v10 + 10592) = v40;
    if (v16 <= *(_DWORD *)(v10 + 10596))
      v16 = *(_DWORD *)(v10 + 10596);
    *(_DWORD *)(v10 + 10596) = v16;
  }
  for (j = 0; j != 24; j += 8)
    *(double *)(v10 + 10600 + j) = *(double *)&a1[j + 72] + *(double *)(v10 + 10600 + j);
  for (k = 0; k != 32; k += 8)
    *(double *)(v10 + 10624 + k) = *(double *)&a1[k + 96] + *(double *)(v10 + 10624 + k);
  v43 = *((_QWORD *)a1 + 16);
  *(_QWORD *)(v10 + 10656) += v43;
  v44 = (char)a1[648];
  *(_QWORD *)(v10 + 10464 + 8 * v44 + 208) += v43;
  v34 = (_DWORD *)(v10 + 10464 + 4 * v44 + 256);
LABEL_80:
  ++*v34;
  if (v11)
    goto LABEL_85;
LABEL_81:
  v45 = *(FILE **)(v10 + 240);
  if (v45)
  {
    if (fwrite(*((const void **)a1 + 845), 1uLL, *((_QWORD *)a1 + 16), v45) != *((_QWORD *)a1 + 16))
      __error();
    v11 = *a1;
    v10 = *((_QWORD *)a1 + 72);
  }
LABEL_85:
  v26 = *(FILE **)(v10 + 264);
  if (!v11)
  {
    if (!v26)
      goto LABEL_125;
    sub_1C9747A5C(*v9, *(FILE **)(v10 + 264), *(_QWORD *)(v10 + 168), 0);
    if (*(_BYTE *)(v10 + 575))
    {
      if (!*((_QWORD *)a1 + 848))
        sub_1C97A87F4(*((_QWORD *)a1 + 72), (uint64_t)(a1 + 6784), 0, 0, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a1 + 72) + 9752) + 204), *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a1 + 72) + 9752) + 208));
      v47 = (_DWORD *)*v9;
      if (*(_BYTE *)(*v9 + 432) && *(_QWORD *)(v10 + 168))
        v48 = v47[126] != v47[130] || v47[127] != v47[131];
      else
        v48 = 0;
      sub_1C97B7184((_QWORD *)a1 + 848, (uint64_t)(a1 + 632), v48);
    }
    goto LABEL_117;
  }
LABEL_86:
  if (*(_BYTE *)(v10 + 575))
  {
    v46 = *((_QWORD *)a1 + 848);
    if (v46)
      sub_1C9747A5C(v46, v26, 0, 0);
  }
  if (v26)
  {
LABEL_117:
    v60 = *v9;
    if (*v9)
    {
      if (*(_BYTE *)(v60 + 432))
      {
        v61 = 0;
        v62 = 1;
        do
        {
          v63 = v62;
          *(_QWORD *)(v60 + 8 * v61 + 400) = *(_QWORD *)(v60 + 8 * v61 + 440);
          v60 = *v9;
          *(_QWORD *)(*v9 + 8 * v61 + 416) = *(_QWORD *)(*v9 + 8 * v61 + 456);
          v61 = 1;
          v62 = 0;
        }
        while ((v63 & 1) != 0);
        *(_QWORD *)(v60 + 512) = 0;
        v64 = *v8;
        if (*v8)
        {
          if (*(int *)(v64 + 512) >= 1)
          {
            v65 = 0;
            v66 = 1;
            do
            {
              v67 = v66;
              *(_QWORD *)(v64 + 8 * v65 + 400) = *(_QWORD *)(v64 + 8 * v65 + 472);
              v64 = *v8;
              *(_QWORD *)(*v8 + 8 * v65 + 416) = *(_QWORD *)(*v8 + 8 * v65 + 488);
              v65 = 1;
              v66 = 0;
            }
            while ((v67 & 1) != 0);
          }
        }
      }
    }
  }
LABEL_125:
  sub_1C974E55C((_QWORD *)a1 + 79);
  sub_1C974E55C((_QWORD *)a1 + 77);
  *((_QWORD *)a1 + 16) = 0;
  *((_WORD *)a1 + 330) = -1;
  *((_DWORD *)a1 + 167) = 0;
  *((_DWORD *)a1 + 171) = 0;
  a1[596] = 0;
  atomic_store(0, (unsigned int *)a1 + 147);
}

size_t sub_1C97B908C(size_t result)
{
  FILE ***v1;
  int v2;
  BOOL v3;
  FILE *v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  FILE *v10;
  BOOL v11;
  BOOL v12;

  v1 = **(FILE *****)result;
  v2 = dword_1ED1ACCC0;
  if (BYTE1((**v1)[2]._seek))
    v3 = dword_1ED1ACCC0 < 6;
  else
    v3 = 1;
  if (!v3)
  {
    result = fprintf(*v1[1], "%10s ", "Time stamp");
    v2 = dword_1ED1ACCC0;
  }
  if (v2 < 6)
    goto LABEL_49;
  result = fprintf(*v1[1], "%10s%15s%5s", "Frame", "Dimension", "Type");
  v2 = dword_1ED1ACCC0;
  if (dword_1ED1ACCC0 > 6)
  {
    result = fprintf(*v1[1], "%5s %18s", "SC", "Complexities");
    v2 = dword_1ED1ACCC0;
  }
  if (v2 < 6)
    goto LABEL_49;
  result = fprintf(*v1[1], "%8s%11s%5s%8s    ", "QP", "Bytes", "Dlay", "FPS");
  v2 = dword_1ED1ACCC0;
  v4 = **v1;
  if (BYTE1(v4->_read))
    v5 = dword_1ED1ACCC0 < 6;
  else
    v5 = 1;
  if (!v5)
  {
    result = fwrite("           PSNR         ", 0x18uLL, 1uLL, *v1[1]);
    v4 = **v1;
    v2 = dword_1ED1ACCC0;
  }
  if (LOBYTE(v4->_read))
    v6 = v2 < 6;
  else
    v6 = 1;
  if (!v6)
  {
    result = fprintf(*v1[1], "%15s%s%15s", (const char *)&unk_1C986A1CD, "MD5", (const char *)&unk_1C986A1CD);
    v4 = **v1;
    v2 = dword_1ED1ACCC0;
  }
  if (BYTE1(v4[2]._seek))
    v7 = v2 < 6;
  else
    v7 = 1;
  if (!v7)
  {
    result = fprintf(*v1[1], " %-9s%12s  ", "force", "Bits");
    v4 = **v1;
    v2 = dword_1ED1ACCC0;
  }
  if (BYTE2(v4[1]._close))
    v8 = v2 < 6;
  else
    v8 = 1;
  if (!v8)
  {
    result = fwrite(" Enc Time", 9uLL, 1uLL, *v1[1]);
    v2 = dword_1ED1ACCC0;
  }
  if (v2 < 6)
    goto LABEL_49;
  result = fwrite(" Ref POCs", 9uLL, 1uLL, *v1[1]);
  v2 = dword_1ED1ACCC0;
  if (dword_1ED1ACCC0 > 6)
  {
    if (!LOBYTE((**v1)[1]._lbfsize))
      goto LABEL_37;
    result = fwrite("    BitErrRatio", 0xFuLL, 1uLL, *v1[1]);
    v2 = dword_1ED1ACCC0;
    if (dword_1ED1ACCC0 < 6
      || (result = fwrite("    PrevRcFrameBitRatio", 0x17uLL, 1uLL, *v1[1]), v2 = dword_1ED1ACCC0, dword_1ED1ACCC0 < 6))
    {
LABEL_49:
      v10 = **v1;
      goto LABEL_50;
    }
    result = fwrite("    WAvgRcFrameBitRatio", 0x17uLL, 1uLL, *v1[1]);
    v2 = dword_1ED1ACCC0;
  }
  if (v2 < 6)
    goto LABEL_49;
LABEL_37:
  result = fputc(10, *v1[1]);
  v2 = dword_1ED1ACCC0;
  if (BYTE1((**v1)[2]._seek))
    v9 = dword_1ED1ACCC0 < 6;
  else
    v9 = 1;
  if (!v9)
  {
    result = fprintf(*v1[1], "%10s ", "(seconds)");
    v2 = dword_1ED1ACCC0;
  }
  if (v2 < 6)
    goto LABEL_49;
  result = fprintf(*v1[1], "%6s (%6s) %4sx%-4s%4s%4s", "Src #", "POC", "W", "H", (const char *)&unk_1C986A1CD, (const char *)&unk_1C986A1CD);
  v2 = dword_1ED1ACCC0;
  if (dword_1ED1ACCC0 > 6)
  {
    result = fprintf(*v1[1], "%5s %-18s", (const char *)&unk_1C986A1CD, "Frm/Intra/Inter");
    v2 = dword_1ED1ACCC0;
  }
  if (v2 < 6)
    goto LABEL_49;
  result = fprintf(*v1[1], "%7s%12s%6s/%5s", "Frm/  avg", "(ms)", "cur", "targ");
  v2 = dword_1ED1ACCC0;
  v10 = **v1;
  if (BYTE1(v10->_read) && dword_1ED1ACCC0 >= 6)
  {
    result = fprintf(*v1[1], " %5s/%5s/%5s/%5s", "Y", "Cb", "Cr", "comp");
    v10 = **v1;
    v2 = dword_1ED1ACCC0;
  }
LABEL_50:
  if (!BYTE1(v10[2]._seek))
  {
LABEL_58:
    if (BYTE2(v10[1]._close))
      v12 = v2 < 6;
    else
      v12 = 1;
    if (!v12)
    {
      result = fwrite("     (ms)", 9uLL, 1uLL, *v1[1]);
      v2 = dword_1ED1ACCC0;
    }
    if (v2 >= 6)
      return fputc(10, *v1[1]);
    return result;
  }
  if (LOBYTE(v10->_read))
    v11 = v2 < 6;
  else
    v11 = 1;
  if (!v11)
  {
    result = fprintf(*v1[1], " %14s%3s%15s", (const char *)&unk_1C986A1CD, (const char *)&unk_1C986A1CD, (const char *)&unk_1C986A1CD);
    v2 = dword_1ED1ACCC0;
  }
  if (v2 >= 6)
  {
    result = fprintf(*v1[1], " %3s/%5s %3s %4s/%4s", "IDR", "Rfrsh", "LTR", "FEC", "Hdr");
    v2 = dword_1ED1ACCC0;
    v10 = **v1;
    goto LABEL_58;
  }
  return result;
}

void sub_1C97B95E8(char *a1, uint64_t a2, int a3, int a4, __int16 *a5, int a6)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  __int16 *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  void *__p[3];
  void *v53[3];

  sub_1C97B9974(v53, a6 * a4);
  sub_1C97B9974(__p, (int)((a6 & 0xFFFFFFFE) + a4));
  v11 = a6 >> 1;
  v48 = a6 >> 1;
  v49 = a2;
  if (a6 < 0)
  {
    v47 = 0;
  }
  else
  {
    v12 = v11;
    v13 = ((a6 >> 1) & ~(a6 >> 31)) + 1;
    v14 = v11 * (uint64_t)a4;
    v15 = a1;
    do
    {
      memcpy((char *)v53[0] + v14, v15, a4);
      v15 += a2;
      v14 += a4;
      --v13;
    }
    while (v13);
    if (a6 <= 1)
    {
      v47 = 0;
    }
    else
    {
      v16 = 0;
      if (v48 <= 1)
        v17 = 1;
      else
        v17 = v48;
      v18 = &a1[a2 * v12];
      do
      {
        memcpy((char *)v53[0] + v16, v18, a4);
        v18 -= a2;
        v16 += a4;
        --v17;
      }
      while (v17);
      v47 = 1;
    }
    v11 = a6 >> 1;
  }
  if (a3 >= 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = v11;
    v22 = v11 + (uint64_t)a4;
    if (v11 >= 0)
      v23 = v11;
    else
      v23 = -v11;
    v45 = ~v11 + a3;
    if (v11 <= 1)
      v24 = 1;
    else
      v24 = v11;
    v46 = v11 + 1;
    v25 = v11 + 1 + v23;
    do
    {
      if (a4 >= 1)
      {
        v26 = 0;
        v27 = (unsigned __int8 *)v53[0];
        v28 = __p[0];
        do
        {
          if (a6 < 1)
          {
            LOBYTE(v31) = 0;
          }
          else
          {
            v29 = 0;
            v30 = 0;
            do
            {
              v30 += v27[v26 + (v20 + (int)v29) % a6 * a4] * a5[v29];
              ++v29;
            }
            while (a6 != v29);
            if (v30 > 32639)
              LOBYTE(v31) = -1;
            else
              v31 = (v30 >> 7) & ~(v30 >> 31);
          }
          v28[v26 + v21] = v31;
          ++v26;
        }
        while (v26 != a4);
      }
      if (v47)
      {
        v32 = 0;
        v33 = a6 - 1;
        v34 = v22 - 2;
        do
        {
          *((_BYTE *)__p[0] + v32) = *((_BYTE *)__p[0] + v33);
          *((_BYTE *)__p[0] + v22 + v32++) = *((_BYTE *)__p[0] + v34--);
          --v33;
        }
        while (v24 != v32);
      }
      if (a4 >= 1)
      {
        v35 = (unsigned __int8 *)__p[0];
        v36 = v21;
        do
        {
          v37 = 0;
          if ((a6 & 0x80000000) == 0)
          {
            v38 = a5;
            v39 = v35;
            v40 = v25;
            do
            {
              v42 = *v38++;
              v41 = v42;
              v43 = *v39++;
              v37 += v43 * v41;
              --v40;
            }
            while (v40);
            if (v37 > 32639)
              LOBYTE(v37) = -1;
            else
              v37 = (v37 >> 7) & ~(v37 >> 31);
          }
          a1[v19 * v49 + v36 - v21] = v37;
          ++v36;
          ++v35;
        }
        while (v36 < v22);
      }
      v44 = v46 + v19;
      if (v19 >= v45)
        v44 = 2 * a3 - 3 - (v11 + v19);
      v51 = v19;
      memcpy((char *)v53[0] + a4 * (uint64_t)v20, &a1[v44 * v49], a4);
      v11 = a6 >> 1;
      v20 = (v20 + 1) % a6;
      v19 = v51 + 1;
    }
    while (v51 + 1 != a3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
}

void sub_1C97B9954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1C97B9974(_QWORD *a1, size_t __sz)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_1C9747024();
    v4 = (char *)operator new(__sz);
    *a1 = v4;
    v5 = &v4[__sz];
    a1[2] = &v4[__sz];
    bzero(v4, __sz);
    a1[1] = v5;
  }
  return a1;
}

void sub_1C97B99D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1C97B99F4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL4 v6;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a2 + 20);
  if (v2 < 0 && v3 < 0)
    return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a2 + 16);
  v6 = v3 < 0 || v2 < v3;
  return v2 >= 0 && v6;
}

void sub_1C97B9A30(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  dispatch_group_wait(*(dispatch_group_t *)(a1 + 128), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 128));
  if (*(_QWORD *)(a1 + 80))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v2 = *(uint64_t **)(a1 + 72);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 80) = 0;
    if (v2 != (uint64_t *)(a1 + 64))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 64));
    }
  }
  std::mutex::~mutex((std::mutex *)a1);
}

_QWORD *sub_1C97B9AB0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E8291B80;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1C97B9B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C97B9B24((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97B9B24(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1C97B9A30(result);
    JUMPOUT(0x1CAA43B90);
  }
  return result;
}

void sub_1C97B9B58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C97B9B7C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1C97B9A30(result);
    JUMPOUT(0x1CAA43B90);
  }
  return result;
}

void sub_1C97B9BAC()
{
  std::__shared_weak_count *v0;
  unint64_t *v1;
  unint64_t v2;
  __int128 v3;

  sub_1C971FF04();
  sub_1C9701D54(&v3, dword_1ED1ACCA0 + 2, 0);
  sub_1C974C5FC((uint64_t)&qword_1EF920EA0, &v3);
  v0 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  if (*((_QWORD *)&v3 + 1))
  {
    v1 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  *(_BYTE *)(qword_1EF920EA0 + 148) = 1;
}

void sub_1C97B9C40(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  std::mutex *v13;
  char v14;
  BOOL (*v15)(uint64_t, uint64_t);

  v13 = (std::mutex *)a1;
  v14 = 1;
  std::mutex::lock((std::mutex *)a1);
  v8 = operator new(0x28uLL);
  v8[2] = a4;
  v8[3] = sub_1C974B06C;
  *((_DWORD *)v8 + 8) = a2;
  *((_DWORD *)v8 + 9) = a3;
  v9 = *(_QWORD *)(a1 + 64);
  *v8 = v9;
  v8[1] = a1 + 64;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(a1 + 64) = v8;
  v10 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v10;
  if (*(_BYTE *)(a1 + 148))
  {
    v15 = sub_1C97B99F4;
    sub_1C97B9D60(*(uint64_t ***)(a1 + 72), (uint64_t *)(a1 + 64), v10, (unsigned int (**)(uint64_t, uint64_t))&v15);
  }
  v11 = *(_DWORD *)(a1 + 112);
  if (*(_DWORD *)(a1 + 144) - v11 >= a2)
    v12 = a2;
  else
    v12 = *(_DWORD *)(a1 + 144) - v11;
  if (v12 >= 1)
    *(_DWORD *)(a1 + 112) = v12 + v11;
  sub_1C971138C((uint64_t)&v13);
  if (v12 >= 1)
  {
    do
    {
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 128), *(dispatch_queue_t *)(a1 + 136), (void *)a1, (dispatch_function_t)sub_1C97B9F6C);
      --v12;
    }
    while (v12);
  }
  if (v14)
    std::mutex::unlock(v13);
}

void sub_1C97B9D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  if (a11)
    std::mutex::unlock(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1C97B9D60(uint64_t **a1, uint64_t *a2, unint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t **v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v4 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = (uint64_t *)*a2;
      if ((*a4)(*a2 + 16, (uint64_t)(a1 + 2)))
      {
        v8 = *v7;
        *(_QWORD *)(v8 + 8) = v7[1];
        *(_QWORD *)v7[1] = v8;
        v9 = *v4;
        v9[1] = (uint64_t)v7;
        *v7 = (uint64_t)v9;
        *v4 = v7;
        v7[1] = (uint64_t)v4;
        return v7;
      }
    }
    else
    {
      v11 = a3 >> 1;
      v12 = (a3 >> 1) + 1;
      v13 = a1;
      do
      {
        v13 = (uint64_t **)v13[1];
        --v12;
      }
      while (v12 > 1);
      v14 = (uint64_t **)sub_1C97B9D60(a1, v13, a3 >> 1, a4);
      v4 = (uint64_t **)sub_1C97B9D60(v13, a2, a3 - v11, a4);
      if ((*a4)((uint64_t)(v4 + 2), (uint64_t)(v14 + 2)))
      {
        for (i = v4[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (!(*a4)((uint64_t)(i + 2), (uint64_t)(v14 + 2)))
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v17 = *i;
        v18 = *v4;
        v18[1] = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v17 + 8) = v18;
        v19 = *v14;
        v16 = v14[1];
        v19[1] = (uint64_t)v4;
        *v4 = v19;
        *v14 = (uint64_t *)v17;
        *(_QWORD *)(v17 + 8) = v14;
      }
      else
      {
        v16 = v14[1];
        i = (uint64_t *)v4;
        v4 = v14;
      }
      if (v16 != i && i != a2)
      {
        v20 = i;
        do
        {
          if ((*a4)((uint64_t)(i + 2), (uint64_t)(v16 + 2)))
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (!(*a4)((uint64_t)(j + 2), (uint64_t)(v16 + 2)))
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v22 = *j;
            v23 = *i;
            *(_QWORD *)(v23 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v22 + 8) = v23;
            if (v20 == i)
              v20 = j;
            v25 = *v16;
            v24 = (uint64_t *)v16[1];
            *(_QWORD *)(v25 + 8) = i;
            *i = v25;
            *v16 = v22;
            *(_QWORD *)(v22 + 8) = v16;
            v16 = v24;
            i = j;
          }
          else
          {
            v16 = (uint64_t *)v16[1];
          }
        }
        while (v16 != v20 && i != a2);
      }
    }
  }
  return (uint64_t *)v4;
}

void sub_1C97B9F6C(std::mutex *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  std::mutex *v11;
  char v12;

  v2 = &this[1].__m_.__opaque[16];
  while (1)
  {
    v11 = this;
    v12 = 1;
    std::mutex::lock(this);
    v3 = *(_DWORD *)&this[1].__m_.__opaque[32];
    if (v3 <= 0)
    {
      v4 = *(_QWORD *)&this[1].__m_.__opaque[8];
      if (!v4)
        break;
      v5 = *(_QWORD **)this[1].__m_.__opaque;
      v6 = v5[4];
      *(_OWORD *)v2 = *((_OWORD *)v5 + 1);
      *((_QWORD *)v2 + 2) = v6;
      v7 = *v5;
      *(_QWORD *)(v7 + 8) = v5[1];
      *(_QWORD *)v5[1] = v7;
      *(_QWORD *)&this[1].__m_.__opaque[8] = v4 - 1;
      operator delete(v5);
      v3 = *(_DWORD *)&this[1].__m_.__opaque[32];
      if (v3 < 1)
        break;
    }
    v8 = (v3 - 1);
    *(_DWORD *)&this[1].__m_.__opaque[32] = v8;
    v9 = *(void (**)(uint64_t, uint64_t))&this[1].__m_.__opaque[24];
    if (!v9)
      break;
    v10 = *(_QWORD *)&this[1].__m_.__opaque[16];
    sub_1C971138C((uint64_t)&v11);
    v9(v10, v8);
    if (v12)
      std::mutex::unlock(v11);
  }
  --*(_DWORD *)&this[1].__m_.__opaque[40];
  std::mutex::unlock(v11);
}

void sub_1C97BA054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C97BA070(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = MEMORY[0x1E0DE4FD0];
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  v6 = a1 + 16;
  v7 = a1 + 24;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[4];
  v13 = v8[5];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v6 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = v8[1];
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = v8[6];
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  std::string::operator=((std::string *)(a1 + 88), a2);
  sub_1C97BABC0(v7);
  return a1;
}

void sub_1C97BA190(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1CAA43B3C](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C97BA1D8(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1CAA43A10](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1C97BA304(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C97BA2D0);
  }
  __cxa_rethrow();
}

void sub_1C97BA348(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_1C97BA35C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x1CAA43A10](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1C97BA510(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C97BA4DCLL);
  }
  __cxa_rethrow();
}

void sub_1C97BA574(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1C97BA588(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  _BYTE v28[24];
  _QWORD *v29;
  _QWORD v30[3];
  char v31;
  __int128 v32;
  __int128 v33;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v21 = v4 + 72 * a2;
      while (v5 != v21)
      {
        if (*(char *)(v5 - 41) < 0)
          operator delete(*(void **)(v5 - 64));
        v5 -= 72;
      }
      a1[1] = v21;
    }
  }
  else
  {
    v8 = a1[2];
    if (0x8E38E38E38E38E39 * ((v8 - v5) >> 3) >= v7)
    {
      v22 = v5 + 72 * v7;
      v23 = 72 * a2 - 8 * ((v5 - *a1) >> 3);
      do
      {
        sub_1C97BAB34(v5);
        v5 += 72;
        v23 -= 72;
      }
      while (v23);
      a1[1] = v22;
    }
    else
    {
      if (a2 > 0x38E38E38E38E38ELL)
        sub_1C9747024();
      v29 = a1 + 2;
      v9 = 0x8E38E38E38E38E39 * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x1C71C71C71C71C7)
        v11 = 0x38E38E38E38E38ELL;
      else
        v11 = v10;
      v12 = (char *)sub_1C97BAF90(v11);
      v13 = (uint64_t)&v12[72 * v6];
      v27 = v12;
      *(_QWORD *)v28 = v13;
      *(_QWORD *)&v28[8] = v13;
      *(_QWORD *)&v28[16] = &v12[72 * v14];
      v15 = 9 * a2;
      v16 = &v12[72 * a2];
      v17 = 8 * v15 - 72 * v6;
      do
      {
        sub_1C97BAB34(v13);
        v13 += 72;
        v17 -= 72;
      }
      while (v17);
      *(_QWORD *)&v28[8] = v16;
      v19 = *a1;
      v18 = a1[1];
      v20 = *(_QWORD *)v28;
      *(_QWORD *)&v33 = *(_QWORD *)v28;
      *((_QWORD *)&v33 + 1) = *(_QWORD *)v28;
      v32 = v33;
      v30[0] = a1 + 2;
      v30[1] = &v32;
      v30[2] = &v33;
      v31 = 0;
      while (v18 != v19)
      {
        v18 -= 72;
        sub_1C97BAE98(v20 - 72, v18);
        v20 = *((_QWORD *)&v33 + 1) - 72;
        *((_QWORD *)&v33 + 1) -= 72;
      }
      v31 = 1;
      sub_1C97BB038((uint64_t)v30);
      v24 = a1[2];
      v25 = *(_OWORD *)&v28[8];
      v26 = *(_OWORD *)a1;
      *a1 = v20;
      *(_OWORD *)v28 = v26;
      *(_OWORD *)(a1 + 1) = v25;
      *(_QWORD *)&v28[16] = v24;
      v27 = (char *)v26;
      sub_1C97BAFD8((uint64_t)&v27);
    }
  }
}

void sub_1C97BA790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_1C97BB038((uint64_t)va1);
  sub_1C97BAFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97BA7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  result = sub_1C97BAD30(v3 + 8, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_1C97BA828(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1C97BA830(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  char *v20;
  int64x2_t v21;
  char *v22;
  int64x2_t *v23;

  v2 = (a1->i64[1] - a1->i64[0]) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_1C9747024();
  v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v23 = a1 + 1;
  if (v7)
  {
    if (v7 >> 59)
      sub_1C9724B4C();
    v8 = (char *)operator new(32 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[32 * v2];
  v20 = v8;
  v21.i64[0] = (uint64_t)v9;
  v21.i64[1] = (uint64_t)v9;
  v22 = &v8[32 * v7];
  *(_DWORD *)v9 = *(_DWORD *)a2;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = 0;
  *((_QWORD *)v9 + 1) = 0;
  sub_1C97BAD30((uint64_t)(v9 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  v10 = v21.i64[0];
  v11 = v21.i64[1] + 32;
  v21.i64[1] += 32;
  v13 = a1->i64[0];
  v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    v17 = vdupq_n_s64(v12);
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = v10 + v14;
      v16 = v12 + v14;
      *(_DWORD *)(v15 - 32) = *(_DWORD *)(v12 + v14 - 32);
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      *(_OWORD *)(v15 - 24) = *(_OWORD *)(v12 + v14 - 24);
      *(_QWORD *)(v15 - 8) = *(_QWORD *)(v12 + v14 - 8);
      *(_QWORD *)(v16 - 24) = 0;
      *(_QWORD *)(v16 - 16) = 0;
      *(_QWORD *)(v16 - 8) = 0;
      v14 -= 32;
    }
    while (v12 + v14 != v13);
    v10 += v14;
    v17 = *a1;
    v11 = v21.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  v21 = v17;
  v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  v22 = v18;
  v20 = (char *)v17.i64[0];
  sub_1C97BAE38((uint64_t)&v20);
  return v11;
}

void sub_1C97BA9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1C97BAE38((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1C97BA9BC(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  MEMORY[0x1CAA43A10](&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_1C97BAA68(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C97BAA34);
  }
  __cxa_rethrow();
}

void sub_1C97BAAA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1C97BAABC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C97BAB34(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = -1;
  std::string::erase((std::string *)(a1 + 8), 0, 0xFFFFFFFFFFFFFFFFLL);
  *(_WORD *)(a1 + 32) = 257;
  *(_BYTE *)(a1 + 34) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = -1;
  *(_DWORD *)(a1 + 68) = -1;
  return a1;
}

void sub_1C97BABA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1C97BABC0(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t sub_1C97BACD0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C97BAD30(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  if (a4)
  {
    if (a4 >= 0x38E38E38E38E38FLL)
      sub_1C9747024();
    v6 = (_QWORD *)result;
    v7 = (char *)sub_1C97BAF90(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[72 * v9];
    v14 = v7;
    v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    v11[2] = &v14;
    v12 = 0;
    if (a2 != a3)
    {
      do
      {
        sub_1C97BAE98((uint64_t)v7, a2);
        a2 += 72;
        v10 = v14;
        v7 = v14 + 72;
        v14 += 72;
      }
      while (a2 != a3);
      v8 = v10 + 72;
    }
    v12 = 1;
    result = sub_1C97BAF34((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1C97BAE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1C97A0D10(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97BAE38(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v5 = (void **)(i - 24);
    sub_1C97A0D10(&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C97BAE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C97BAB34(a1);
  *(_DWORD *)v4 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(v4 + 8), (const std::string *)(a2 + 8));
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

void sub_1C97BAF18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C97BAF34(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 41) < 0)
        operator delete(*(void **)(v3 - 64));
      v3 -= 72;
    }
  }
  return a1;
}

void *sub_1C97BAF90(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    sub_1C9724B4C();
  return operator new(72 * a1);
}

uint64_t sub_1C97BAFD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 72;
      *(_QWORD *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 41) < 0)
      {
        operator delete(*(void **)(v2 - 64));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C97BB038(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      v3 += 72;
    }
  }
  return a1;
}

uint64_t sub_1C97BB094(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v8;
  char *v9;

  v8 = 0;
  if (a4)
  {
    v9 = 0;
    if (sub_1C97BD210(a4, (_DWORD *)&v8 + 1, &v9, 0x80000000)
      || *v9 != 58
      || sub_1C97BD210(v9 + 1, &v8, &v9, 0x80000000)
      || *v9)
    {
      return 4294954394;
    }
  }
  result = 0;
  if (a2 <= 0x8C84307B56AD1A1)
  {
    if (a2 == 0x3DC4253E192FDEDLL)
    {
      result = 0;
      *(_BYTE *)(a1 + 452) = a4 != 0;
      *(_WORD *)(a1 + 460) = WORD2(v8);
      *(_WORD *)(a1 + 462) = v8;
    }
    else if (a2 == 0x8A24307B54A0265)
    {
      result = 0;
      *(_BYTE *)(a1 + 177) = BYTE4(v8);
      *(_BYTE *)(a1 + 178) = v8;
    }
  }
  else
  {
    switch(a2)
    {
      case 0x8C84307B56AD1A2:
        result = 0;
        *(_BYTE *)(a1 + 179) = BYTE4(v8);
        *(_BYTE *)(a1 + 180) = v8;
        break;
      case 0x4179B3C137C3CEB0:
        result = 0;
        *(_DWORD *)(a1 + 412) = HIDWORD(v8);
        *(_DWORD *)(a1 + 416) = v8;
        break;
      case 0x571BB01944827A3ELL:
        result = 0;
        *(_BYTE *)(a1 + 181) = BYTE4(v8);
        *(_BYTE *)(a1 + 182) = v8;
        break;
    }
  }
  return result;
}

uint64_t sub_1C97BB23C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  char *v6;

  if (a4)
  {
    v6 = 0;
    if (sub_1C97BD33C(a4, (_WORD *)(a1 + 106), &v6)
      || *v6 != 120
      || sub_1C97BD33C(v6 + 1, (_WORD *)(a1 + 108), &v6)
      || *v6)
    {
      return 4294954394;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 106) = 0;
  }
  return 0;
}

uint64_t sub_1C97BB2BC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  int v7;
  double v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;

  if (!a4)
    return 4294954394;
  v11 = 0;
  v12 = 0;
  if (sub_1C97BD210(a4, (_DWORD *)&v12 + 1, &v11, 0x80000000))
    return 4294954394;
  v7 = *v11;
  if (v7 == 47)
  {
    if (sub_1C97BD210(v11 + 1, &v12, &v11, 0x80000000) || *v11)
      return 4294954394;
    v9 = v12;
    v10 = HIDWORD(v12);
    *(_DWORD *)(a1 + 568) = v12;
    v8 = (double)v10 / (double)v9;
  }
  else if (v7 == 46)
  {
    *__error() = 0;
    v8 = strtod(a4, 0);
    if (*__error() || v8 < 2.22507386e-308 || v8 > 1.79769313e308)
      return 4294954394;
  }
  else
  {
    if (*v11)
      return 4294954394;
    v8 = (double)SHIDWORD(v12);
  }
  result = 0;
  *(double *)(a1 + 112) = v8;
  return result;
}

uint64_t sub_1C97BB3CC(_BYTE *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  char *v6;

  if (a4)
  {
    v6 = 0;
    if (sub_1C97BD2A0(a4, a1 + 168, &v6, 0, 0x7Fu)
      || *v6 != 58
      || sub_1C97BD2A0(v6 + 1, a1 + 169, &v6, 0, 0x7Fu)
      || *v6 != 58
      || sub_1C97BD2A0(v6 + 1, a1 + 170, &v6, 0, 0x7Fu)
      || *v6 != 58
      || sub_1C97BD2A0(v6 + 1, a1 + 171, &v6, 0, 0x7Fu)
      || *v6)
    {
      return 4294954394;
    }
  }
  else
  {
    *((_DWORD *)a1 + 42) = 16842753;
  }
  return 0;
}

uint64_t sub_1C97BB4BC(_BYTE *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  int v10;
  char *v12;

  if (a2 != 0x81C3B0CF315BC925)
  {
    if (a2 != 0x8C49EF6ED9F28EA0)
      return 4294954394;
    v7 = a1 + 290;
    v8 = a1 + 291;
    if (a4)
      goto LABEL_3;
LABEL_10:
    *v7 = 0;
    *v8 = 0;
    goto LABEL_11;
  }
  v7 = a1 + 292;
  v8 = a1 + 293;
  if (!a4)
    goto LABEL_10;
LABEL_3:
  v12 = 0;
  if (sub_1C97BD2A0(a4, v7, &v12, 8, 0xEu))
    return 4294954394;
  if (!*v12)
  {
    *v8 = *v7;
    goto LABEL_11;
  }
  if (*v12 != 58 || sub_1C97BD2A0(a4, v8, &v12, 8, 0xEu))
    return 4294954394;
LABEL_11:
  if (a2 == 0x81C3B0CF315BC925)
    return 0;
  v9 = a1[290];
  v10 = a1[291];
  if (v9 == v10 && (a1[290] | 2) == 0xA)
    return 0;
  if (dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bit depths %d/%d not supported; luma and chroma must match and be 8 or 10\n",
      (char)v9,
      (char)v10);
    syslog(27, "Bit depths %d/%d not supported; luma and chroma must match and be 8 or 10\n",
      (char)a1[290],
      (char)a1[291]);
  }
  return 4294954386;
}

uint64_t sub_1C97BB644(int *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const char *v5;
  uint64_t v6;
  int *i;
  uint64_t result;
  int *v9;
  char *v10;

  a1[1878] = 0;
  a1[70] = 0;
  if (a4)
  {
    v10 = 0;
    if (a1[61] >= 1)
    {
      v5 = a4;
      v6 = 0;
      for (i = a1 + 62; !sub_1C97BD210(v5, i, &v10, 0) && (*v10 == 58 || v6 >= a1[61] - 1); ++i)
      {
        a1[1878] += *i;
        if (*i > a1[70])
          a1[70] = *i;
        ++v6;
        v5 += 2;
        if (v6 >= a1[61])
          return 0;
      }
    }
    return 4294954394;
  }
  else
  {
    result = 0;
    a1[62] = 1;
    v9 = a1 + 62;
    *(_QWORD *)(v9 + 1) = 0;
    *(_QWORD *)(v9 + 5) = 0;
    *(_QWORD *)(v9 + 3) = 0;
    *(_QWORD *)(v9 + 7) = 0x100000000;
  }
  return result;
}

uint64_t sub_1C97BB73C(uint64_t a1, int a2, int a3, char *__s1)
{
  int v4;
  unsigned __int8 *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  char v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  _BYTE *v21;
  const char *v22;
  const char **v23;
  _DWORD *v24;
  const char *v25;
  unint64_t v26;
  const char *v27;
  int v28;
  const char *v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  int v39;
  FILE **v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t i;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  unsigned int v58;
  char *__stringp;
  char *__s[2];
  __int128 v61;
  __int128 v62;
  _OWORD v63[26];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 240);
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)__s = 0u;
  v61 = 0u;
  if (!__s1)
    return 0;
  v6 = (unsigned __int8 *)(a1 + 108 * v4 + 596);
  *(_BYTE *)(a1 + 592) = 1;
  v7 = strdup(__s1);
  v8 = 0;
  __stringp = v7;
  while (1)
  {
    v9 = strsep(&__stringp, ", \t");
    if (!v9)
      break;
    if (*v9)
    {
      __s[v8++] = v9;
      if (v8 == 57)
        goto LABEL_8;
    }
  }
  __s[v8] = 0;
LABEL_8:
  v58 = 0;
  while (v9)
  {
    if (*v9)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("Too many parameters to ref-struct\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "Too many parameters to ref-struct\n");
      }
      goto LABEL_24;
    }
    v9 = strsep(&__stringp, ", \t");
  }
  v11 = __s[0];
  v10 = sub_1C97BD00C(__s[0], v6);
  if ((_DWORD)v10)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid frame_idx_in_gop '%s'\n", v11);
      syslog(27, "Invalid frame_idx_in_gop '%s'\n", v11);
    }
    goto LABEL_16;
  }
  v14 = __s[1];
  if (!__s[1] || strlen(__s[1]) >= 2)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid frame_type '%s'\n", __s[1]);
      syslog(27, "Invalid frame_type '%s'\n", v14);
    }
LABEL_24:
    v10 = 0;
LABEL_25:
    v12 = 0;
    goto LABEL_26;
  }
  v16 = a1 + 108 * v4;
  *(_BYTE *)(v16 + 597) = *__s[1];
  v17 = (const char *)v61;
  v10 = sub_1C97BD00C((const char *)v61, (_BYTE *)(v16 + 599));
  if ((_DWORD)v10)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid poc '%s'\n", v17);
      syslog(27, "Invalid poc '%s'\n", v17);
    }
    goto LABEL_16;
  }
  v18 = (const char *)*((_QWORD *)&v61 + 1);
  v57 = (char *)(a1 + 108 * v4 + 600);
  v10 = sub_1C97BD08C(*((const char **)&v61 + 1), v57);
  if ((_DWORD)v10)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid qp_offset '%s'\n", v18);
      syslog(27, "Invalid qp_offset '%s'\n", v18);
    }
    goto LABEL_16;
  }
  v19 = (const char *)v62;
  v56 = (char *)(a1 + 108 * v4 + 598);
  v10 = sub_1C97BD08C((const char *)v62, v56);
  if ((_DWORD)v10)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid hbf_layer_id '%s'\n", v19);
      syslog(27, "Invalid hbf_layer_id '%s'\n", v19);
    }
    goto LABEL_16;
  }
  v20 = (const char *)*((_QWORD *)&v62 + 1);
  v21 = (_BYTE *)(a1 + 108 * v4 + 601);
  v10 = sub_1C97BD00C(*((const char **)&v62 + 1), v21);
  if ((_DWORD)v10 || *v21 >= 0x11u)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid number_ref_all '%s'\n", v20);
      syslog(27, "Invalid number_ref_all '%s'\n", v20);
    }
    goto LABEL_25;
  }
  v22 = *(const char **)&v63[0];
  v52 = (unsigned __int8 *)(a1 + 108 * v4 + 602);
  v10 = sub_1C97BD00C(*(const char **)&v63[0], v52);
  if ((_DWORD)v10 || *v52 > *v21)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid number_ref_active '%s'\n", v22);
      syslog(27, "Invalid number_ref_active '%s'\n", v22);
    }
    goto LABEL_25;
  }
  v53 = (unsigned __int8 *)(a1 + 108 * v4 + 601);
  if (*v21)
  {
    v23 = (const char **)v63 + 1;
    v24 = (_DWORD *)(a1 + 108 * v4 + 604);
    v54 = 7;
    do
    {
      v25 = *v23;
      v10 = sub_1C97BD110(*v23, v24);
      if ((_DWORD)v10)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid ref.ref_frames[%d] '%s'\n", v54 - 7, v25);
          syslog(27, "Invalid ref.ref_frames[%d] '%s'\n", v54 - 7, v25);
        }
        goto LABEL_16;
      }
      ++v23;
      ++v54;
      ++v24;
    }
    while (v54 - 7 < (unint64_t)*v53);
    if (!*v53)
      goto LABEL_59;
    v26 = 0;
    while (1)
    {
      v27 = *v23;
      v10 = sub_1C97BD00C(*v23, (_BYTE *)(a1 + 108 * v4 + 668 + v26));
      if ((_DWORD)v10)
        break;
      ++v26;
      ++v23;
      if (v26 >= *v53)
      {
        v28 = v54 + v26;
        goto LABEL_58;
      }
    }
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid ref.ref_used[%d] '%s'\n", v26, v27);
      syslog(27, "Invalid ref.ref_used[%d] '%s'\n", v26, v27);
    }
LABEL_16:
    v12 = 0;
    v13 = v10;
    if (!v7)
      goto LABEL_28;
    goto LABEL_27;
  }
  v28 = 7;
LABEL_58:
  LODWORD(v54) = v28;
LABEL_59:
  v29 = __s[v54];
  v10 = sub_1C97BD190(v29, &v58);
  v30 = v58;
  if ((_DWORD)v10)
    v31 = 1;
  else
    v31 = v58 >= 3;
  if (v31)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid rps scheme '%s'\n", v29);
      syslog(27, "Invalid rps scheme '%s'\n", v29);
    }
    goto LABEL_25;
  }
  v32 = v54 + 1;
  v51 = a1 + 108 * v4;
  *(_BYTE *)(v51 + 684) = v58 != 0;
  if (v30)
  {
    v33 = __s[v32];
    v10 = sub_1C97BD08C(v33, (_BYTE *)(a1 + 108 * v4 + 685));
    if ((_DWORD)v10)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid delta_rps '%s'\n", v33);
        syslog(27, "Invalid delta_rps '%s'\n", v33);
      }
      goto LABEL_16;
    }
    v34 = v54;
    v35 = __s[(v54 + 2)];
    v55 = (_BYTE *)(a1 + 108 * v4 + 686);
    v10 = sub_1C97BD00C(v35, v55);
    if ((_DWORD)v10 || *v55 > 0x10u)
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid num_ref_predict '%s'\n", v35);
        syslog(27, "Invalid num_ref_predict '%s'\n", v35);
      }
      goto LABEL_25;
    }
    if (*v55)
    {
      v36 = 0;
      v50 = a1 + 108 * v4 + 687;
      while (1)
      {
        v37 = (const char *)*((_QWORD *)&v61 + v34 + v36 + 1);
        v10 = sub_1C97BD00C(v37, (_BYTE *)(v50 + v36));
        if ((_DWORD)v10)
          break;
        if (*(unsigned __int8 *)(v50 + v36) >= 3u)
        {
          v10 = 0;
          break;
        }
        if (++v36 >= (unint64_t)*v55)
        {
          v32 = v34 + 3 + v36;
          goto LABEL_85;
        }
      }
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid ref.predict_flag[%d] '%s'\n", v36, v37);
        syslog(27, "Invalid ref.predict_flag[%d] '%s'\n", v36, v37);
      }
      goto LABEL_25;
    }
    v32 = v34 + 3;
  }
LABEL_85:
  v38 = __s[v32];
  v39 = dword_1ED1ACCC0;
  if (v38)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Trailing parameters in reference structure, starting with '%s'\n", v38);
      syslog(27, "Trailing parameters in reference structure, starting with '%s'\n", v38);
    }
    goto LABEL_24;
  }
  v40 = (FILE **)MEMORY[0x1E0C80C20];
  if (dword_1ED1ACCC0 >= 6)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C20], "ref-struct: %d %c %d %d %d %d %d ", *v6, *(char *)(v16 + 597), *(unsigned __int8 *)(v16 + 599), *v57, *v56, *v53, *v52);
    v39 = dword_1ED1ACCC0;
  }
  v41 = (unsigned __int8 *)(v51 + 684);
  v42 = *v53;
  if (*v53)
  {
    v43 = 0;
    do
    {
      if (v39 >= 6)
      {
        fprintf(*v40, " %d", *(_DWORD *)(a1 + 108 * v4 + 604 + 4 * v43));
        v39 = dword_1ED1ACCC0;
        v42 = *v53;
      }
      ++v43;
    }
    while (v43 < v42);
    if (v42)
    {
      for (i = 0; i < v42; ++i)
      {
        if (v39 >= 6)
        {
          fprintf(*v40, " %d", *(unsigned __int8 *)(a1 + 108 * v4 + 668 + i));
          v39 = dword_1ED1ACCC0;
          v42 = *v53;
        }
      }
    }
  }
  v45 = *v41;
  if (v39 > 5)
  {
    fprintf(*v40, " %d", *v41);
    v45 = *v41;
    v39 = dword_1ED1ACCC0;
  }
  if (v45)
  {
    if (v39 >= 6)
    {
      fprintf(*v40, " %d %d", *(char *)(a1 + 108 * v4 + 685), *(unsigned __int8 *)(a1 + 108 * v4 + 686));
      v39 = dword_1ED1ACCC0;
    }
    v46 = a1 + 108 * v4;
    v47 = *(unsigned __int8 *)(v46 + 686);
    if (*(_BYTE *)(v46 + 686))
    {
      v48 = 0;
      v49 = (unsigned __int8 *)(v46 + 686);
      do
      {
        if (v39 >= 6)
        {
          fprintf(*v40, " %d", *(unsigned __int8 *)(a1 + 108 * v4 + 687 + v48));
          v39 = dword_1ED1ACCC0;
          v47 = *v49;
        }
        ++v48;
      }
      while (v48 < v47);
    }
  }
  if (v39 >= 6)
    fputc(10, *v40);
  v10 = 0;
  ++*(_DWORD *)(a1 + 240);
  v12 = 1;
LABEL_26:
  v13 = 4294954394;
  if (!v7)
    goto LABEL_28;
LABEL_27:
  free(v7);
LABEL_28:
  if ((v12 & 1) != 0)
    return v10;
  return v13;
}

void sub_1C97BC1C0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C97BC228(uint64_t a1, int a2, int a3, char *a4)
{
  uint64_t result;

  *(_BYTE *)(a1 + 420) = 0;
  if (!a4)
    return 0;
  if (sscanf(a4, "%hu:%hu:%hu:%hu:%hu:%hu:%hu:%hu:%u:%u", a1 + 428, a1 + 434, a1 + 430, a1 + 436, a1 + 432, a1 + 438, a1 + 440, a1 + 442, a1 + 444, a1 + 448) != 10)return 4294954394;
  result = 0;
  *(_BYTE *)(a1 + 420) = 1;
  return result;
}

uint64_t sub_1C97BC2C8(uint64_t a1, int a2, int a3, char *a4)
{
  uint64_t result;

  *(_BYTE *)(a1 + 464) = 0;
  if (!a4)
    return 0;
  if (sscanf(a4, "%u:%hu:%hu", a1 + 472, a1 + 476, a1 + 478) != 3)
    return 4294954394;
  result = 0;
  *(_BYTE *)(a1 + 464) = 1;
  return result;
}

uint64_t sub_1C97BC340(uint64_t a1, int a2, int a3, char *__s1)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *__s1a;

  v6 = *(_QWORD *)(a1 + 7776);
  *(_QWORD *)(a1 + 7776) = 0;
  if (v6)
    sub_1C97A0D88(v6);
  if (!__s1)
    return 0;
  result = strcmp(__s1, "flat");
  if ((_DWORD)result)
  {
    __s1a = __s1;
    v8 = operator new();
    v9 = 0;
    *(_QWORD *)(v8 + 1560) = 0;
    v16 = v8;
    v10 = (char *)v8;
    do
    {
      v11 = 0;
      if (v9)
        v12 = 65;
      else
        v12 = 17;
      v13 = v10;
      do
      {
        if (v9)
          v14 = (char *)&unk_1C98324C0 + ((v11 > 2) | ((unint64_t)(v11 > 2) << 6));
        else
          v14 = (char *)&unk_1C98324AF;
        memcpy(v13, v14, v12);
        ++v11;
        v13 += 65;
      }
      while (v11 != 6);
      ++v9;
      v10 += 390;
    }
    while (v9 != 4);
    v15 = *(_QWORD *)(a1 + 7776);
    *(_QWORD *)(a1 + 7776) = v16;
    if (v15)
      sub_1C97A0D88(v15);
    if (!strcmp(__s1a, "default"))
      return 0;
    result = sub_1C975137C(*(char **)(a1 + 7776), __s1a);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t sub_1C97BC488(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  const char *p_p;
  uint64_t v16;
  char *v18;
  void *__p;
  char v21;
  _QWORD v22[13];
  char v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[51];
  _QWORD v27[21];

  v4 = (uint64_t)a4;
  v27[19] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 7776);
  *(_QWORD *)(a1 + 7776) = 0;
  if (v6)
    sub_1C97A0D88(v6);
  if (a4)
  {
    v7 = operator new();
    v8 = 0;
    *(_QWORD *)(v7 + 1560) = 0;
    v18 = (char *)v7;
    v9 = (char *)v7;
    do
    {
      v10 = 0;
      if (v8)
        v11 = 65;
      else
        v11 = 17;
      v12 = v9;
      do
      {
        if (v8)
          v13 = (char *)&unk_1C98324C0 + ((v10 > 2) | ((unint64_t)(v10 > 2) << 6));
        else
          v13 = (char *)&unk_1C98324AF;
        memcpy(v12, v13, v11);
        ++v10;
        v12 += 65;
      }
      while (v10 != 6);
      ++v8;
      v9 += 390;
    }
    while (v8 != 4);
    v14 = *(_QWORD *)(a1 + 7776);
    *(_QWORD *)(a1 + 7776) = v18;
    if (v14)
      sub_1C97A0D88(v14);
    sub_1C97518F4(v25);
    if (v26[15])
    {
      sub_1C972D15C((uint64_t)v22);
      std::ostream::operator<<();
      std::stringbuf::str();
      if (v21 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      v4 = sub_1C975137C(v18, p_p);
      if (v21 < 0)
        operator delete(__p);
      v22[0] = *MEMORY[0x1E0DE4F50];
      v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v22[2] = v16;
      v22[3] = MEMORY[0x1E0DE4FB8] + 16;
      if (v23 < 0)
        operator delete((void *)v22[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1CAA43B3C](&v24);
    }
    else
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open scaling list file '%s'\n", a4);
        syslog(27, "Unable to open scaling list file '%s'\n", a4);
      }
      v4 = 4294954394;
    }
    v25[0] = *MEMORY[0x1E0DE4F40];
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1CAA43A04](v26);
    std::istream::~istream();
    MEMORY[0x1CAA43B3C](v27);
  }
  return v4;
}

void sub_1C97BC71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  a57 = *MEMORY[0x1E0DE4F40];
  *(uint64_t *)((char *)&a57 + *(_QWORD *)(a57 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1CAA43A04](&a59);
  std::istream::~istream();
  MEMORY[0x1CAA43B3C](&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97BC7F4(uint64_t a1, int a2, int a3, char *__str)
{
  _DWORD *v5;
  char *v7;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t result;
  char *__endptr;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v5 = (_DWORD *)(a1 + 533);
  if (__str)
  {
    if (*__str)
    {
      v7 = __str + 1;
      while (*v7++)
        ;
    }
    v9 = 0xEDB2D39755161F73;
    v10 = (char *)&unk_1E82924A0;
    while (1)
    {
      v11 = 0xCBF29CE484222325;
      if (*__str)
      {
        v12 = __str + 1;
        v13 = *__str;
        do
        {
          v11 = 0x100000001B3 * (v11 ^ v13);
          v14 = *v12++;
          v13 = v14;
        }
        while (v14);
      }
      if (v11 <= 1)
        v11 = 1;
      if (v9 == v11)
        break;
      v15 = *((_QWORD *)v10 + 3);
      v10 += 24;
      v9 = v15;
      if (!v15)
        goto LABEL_15;
    }
    v16 = *((_DWORD *)v10 + 4);
    if (v16 != -1)
      goto LABEL_18;
LABEL_15:
    __endptr = 0;
    v17 = strtol(__str, &__endptr, 10);
    if (__endptr == __str)
      v16 = -1;
    else
      v16 = v17;
LABEL_18:
    v18 = *(_DWORD *)(a1 + 96);
    v19 = v18 == 3 || v16 == -1;
    if (!v19 && v18 != v16 && dword_1ED1ACCC0 >= 4)
    {
      fwrite("Multiple usage modes specified, this might not result in the options you expect!\n", 0x51uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(28, "Multiple usage modes specified, this might not result in the options you expect!\n");
    }
    switch(v16)
    {
      case '!':
        *(_DWORD *)(a1 + 96) = 33;
        v24 = 0;
        sub_1C971D338(a1, 0x89E9C01960F4C582, "ref", "1:0:2:1", 0xFFFFFFFFLL, (uint64_t)&v24);
        result = 0;
        *(_BYTE *)(a1 + 132) = 5;
        *(_BYTE *)(a1 + 136) = 3;
        *(_BYTE *)(a1 + 212) = 0;
        *(_BYTE *)(a1 + 234) = 1;
        *(_BYTE *)(a1 + 223) = 1;
        *(_BYTE *)(a1 + 239) = 1;
        *(_BYTE *)(a1 + 92) = 1;
        *(_BYTE *)(a1 + 90) = 1;
        break;
      case '"':
        sub_1C97BCED0(a1);
        result = 0;
        *(_DWORD *)(a1 + 96) = 34;
        *(_BYTE *)(a1 + 552) = 1;
        *(_WORD *)(a1 + 541) = 0;
        *(_DWORD *)(a1 + 544) = 2;
        *(_BYTE *)(a1 + 554) = 3;
        *(_DWORD *)(a1 + 556) = 0x40000000;
        *(_BYTE *)(a1 + 227) = 0;
        break;
      case '#':
        sub_1C97BCED0(a1);
        v25 = 0;
        sub_1C971D338(a1, 0x571BB01944827A3EuLL, "tuh", "0:0", 0xFFFFFFFFLL, (uint64_t)&v25);
        result = 0;
        *(_DWORD *)(a1 + 72) = 0;
        *(_BYTE *)(a1 + 227) = 0;
        *(_BYTE *)(a1 + 554) = 3;
        *(_DWORD *)(a1 + 556) = 0x40000000;
        *(_DWORD *)(a1 + 544) = 5;
        *(_DWORD *)(a1 + 96) = 35;
        break;
      case '$':
        sub_1C97BCED0(a1);
        v26 = 0;
        sub_1C971D338(a1, 0x571BB01944827A3EuLL, "tuh", "1:0", 0xFFFFFFFFLL, (uint64_t)&v26);
        result = 0;
        *(_DWORD *)(a1 + 504) = 6;
        *(_BYTE *)(a1 + 508) = 6;
        *(_DWORD *)(a1 + 72) = 4;
        *(_BYTE *)(a1 + 548) = 1;
        *(_DWORD *)(a1 + 96) = 36;
        *(_BYTE *)(a1 + 132) = 5;
        *(_BYTE *)(a1 + 136) = 2;
        *(_BYTE *)(a1 + 223) = 0;
        *(_BYTE *)(a1 + 239) = 0;
        *(_BYTE *)(a1 + 90) = 0;
        *(_WORD *)(a1 + 550) = 0;
        *(_BYTE *)(a1 + 528) = 0;
        *(_BYTE *)(a1 + 530) = 0;
        *(_BYTE *)(a1 + 532) = 0;
        *(_WORD *)(a1 + 94) = 0;
        break;
      case '%':
        *(_BYTE *)(a1 + 205) = 1;
        *(_DWORD *)(a1 + 96) = 34;
        v27 = 0;
        sub_1C971D338(a1, 0x89E9C01960F4C582, "ref", "1:0:2:1", 0xFFFFFFFFLL, (uint64_t)&v27);
        v28 = 0;
        sub_1C971D338(a1, 0x571BB01944827A3EuLL, "tuh", "1:1", 0xFFFFFFFFLL, (uint64_t)&v28);
        result = 0;
        *(_BYTE *)(a1 + 132) = 5;
        *(_BYTE *)(a1 + 234) = 1;
        *(_DWORD *)(a1 + 504) = 5;
        *(_WORD *)(a1 + 212) = 771;
        *(_BYTE *)(a1 + 236) = 2;
        *(_BYTE *)(a1 + 89) = 1;
        *(_BYTE *)(a1 + 148) = 0;
        *(_BYTE *)(a1 + 92) = 1;
        *(_BYTE *)(a1 + 238) = 1;
        *(_BYTE *)(a1 + 527) = 0;
        *(_BYTE *)(a1 + 136) = 2;
        *(_BYTE *)(a1 + 224) = 1;
        break;
      case '&':
      case '\'':
LABEL_31:
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Usage %s is un-supported\n", __str);
          syslog(27, "Usage %s is un-supported\n", __str);
        }
        result = 4294954394;
        break;
      case '(':
        sub_1C97BCE30(a1);
        v23 = 0;
        sub_1C971D338(a1, 0x89E9C01960F4C582, "ref", "0:0:0:0", 0xFFFFFFFFLL, (uint64_t)&v23);
        result = 0;
        *(_DWORD *)(a1 + 96) = 40;
        *(_BYTE *)(a1 + 192) = 0;
        *(_BYTE *)(a1 + 69) = 1;
        *(_BYTE *)(a1 + 136) = 3;
        *(_BYTE *)(a1 + 224) = 0;
        *(_BYTE *)(a1 + 496) = 2;
        break;
      default:
        switch(v16)
        {
          case 0:
            sub_1C97BCE30(a1);
            return 0;
          case 1:
            *(_DWORD *)(a1 + 96) = 1;
            v22 = 0;
            sub_1C971D338(a1, 0x571BB01944827A3EuLL, "tuh", "0:0", 0xFFFFFFFFLL, (uint64_t)&v22);
            result = 0;
            *(_BYTE *)(a1 + 202) = 1;
            *(_BYTE *)(a1 + 192) = 1;
            *(_QWORD *)(a1 + 112) = 0x402E000000000000;
            *(_WORD *)(a1 + 87) = 257;
            *(_BYTE *)(a1 + 234) = 0;
            *(_BYTE *)(a1 + 236) = 1;
            *(_BYTE *)(a1 + 232) = 0;
            *(_WORD *)(a1 + 135) = 512;
            *(_BYTE *)(a1 + 148) = 0;
            *(_WORD *)(a1 + 496) = 258;
            *(_DWORD *)(a1 + 504) = 6;
            *(_BYTE *)(a1 + 500) = 1;
            *(_BYTE *)(a1 + 529) = 4;
            *(_QWORD *)(a1 + 72) = 0x100000000;
            *(_WORD *)(a1 + 525) = 257;
            *v5 = 16843009;
            *(_DWORD *)(a1 + 80) = 2;
            *(_BYTE *)(a1 + 84) = 2;
            *(_DWORD *)((char *)v5 + 5) = 65793;
            *(_BYTE *)(a1 + 213) = 1;
            *(_BYTE *)(a1 + 222) = 1;
            *(_WORD *)(a1 + 548) = 257;
            *(_BYTE *)(a1 + 230) = 1;
            *(_WORD *)(a1 + 237) = 7;
            *(_BYTE *)(a1 + 564) = 1;
            *(_BYTE *)(a1 + 233) = 0;
            goto LABEL_41;
          case 2:
            result = 0;
            *(_DWORD *)(a1 + 96) = 2;
            *v5 = 16843009;
            *(_BYTE *)(a1 + 496) = 3;
            *(_BYTE *)(a1 + 84) = 2;
            *(_BYTE *)(a1 + 538) = 1;
            *(_BYTE *)(a1 + 204) = 0;
            *(_BYTE *)(a1 + 232) = 0;
            *(_BYTE *)(a1 + 135) = 0;
            *(_DWORD *)(a1 + 504) = 6;
            *(_BYTE *)(a1 + 500) = 1;
            *(_BYTE *)(a1 + 529) = 0;
            *(_BYTE *)(a1 + 541) = 0;
            *(_BYTE *)(a1 + 238) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            *(_DWORD *)(a1 + 80) = 3;
LABEL_41:
            *(_BYTE *)(a1 + 220) = 0;
            break;
          case 3:
            goto LABEL_29;
          default:
            goto LABEL_31;
        }
        break;
    }
  }
  else
  {
LABEL_29:
    result = 0;
    *(_DWORD *)(a1 + 96) = 3;
    *(_BYTE *)(a1 + 238) = 1;
    *(_WORD *)(a1 + 525) = 256;
    *(_WORD *)(a1 + 539) = 0;
    *(_BYTE *)(a1 + 549) = 0;
    *(_WORD *)(a1 + 564) = 0;
    *v5 = 0;
  }
  return result;
}

uint64_t sub_1C97BCE30(uint64_t a1)
{
  char v3;

  sub_1C97BCED0(a1);
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 192) = *(_DWORD *)(a1 + 188) != 0;
  *(_WORD *)(a1 + 212) = 771;
  *(_WORD *)(a1 + 94) = 0;
  *(_WORD *)(a1 + 223) = 256;
  *(_BYTE *)(a1 + 239) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  *(_BYTE *)(a1 + 136) = 2;
  *(_WORD *)(a1 + 576) = 257;
  *(_BYTE *)(a1 + 176) = 0;
  v3 = 0;
  return sub_1C971D338(a1, 0x571BB01944827A3EuLL, "tuh", "1:1", 0xFFFFFFFFLL, (uint64_t)&v3);
}

double sub_1C97BCED0(uint64_t a1)
{
  double result;
  char v3;
  char v4;
  char v5;

  v3 = 0;
  sub_1C971D338(a1, 0x89E9C01960F4C582, "ref", "1:0:2:1", 0xFFFFFFFFLL, (uint64_t)&v3);
  v4 = 0;
  sub_1C971D338(a1, 0x571BB01944827A3EuLL, "tuh", "1:1", 0xFFFFFFFFLL, (uint64_t)&v4);
  *(_BYTE *)(a1 + 132) = 5;
  *(_BYTE *)(a1 + 136) = 3;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 234) = 1;
  *(_BYTE *)(a1 + 236) = 2;
  *(_BYTE *)(a1 + 89) = 1;
  *(_BYTE *)(a1 + 148) = 0;
  *(_WORD *)(a1 + 94) = 0;
  *(_DWORD *)(a1 + 496) = 33685764;
  *(_DWORD *)(a1 + 504) = 5;
  *(_BYTE *)(a1 + 508) = 5;
  v5 = 0;
  sub_1C971D338(a1, 0x8A24307B54A0265uLL, "cu", "3:6", 0xFFFFFFFFLL, (uint64_t)&v5);
  *(_BYTE *)(a1 + 542) = 1;
  *(_BYTE *)(a1 + 238) = 2;
  *(_BYTE *)(a1 + 205) = 1;
  *(_WORD *)(a1 + 550) = 258;
  *(_QWORD *)&result = 17498368;
  *(_DWORD *)(a1 + 527) = 17498368;
  *(_BYTE *)(a1 + 532) = 1;
  *(_BYTE *)(a1 + 92) = 1;
  *(_BYTE *)(a1 + 136) = 2;
  *(_BYTE *)(a1 + 224) = 1;
  return result;
}

uint64_t sub_1C97BD00C(const char *a1, _BYTE *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (!a1 || !*a1)
    return 4294954394;
  v3 = strtoimax(a1, &__endptr, 0);
  v4 = v3;
  if (!__endptr)
  {
    if (v3 <= 0xFF)
    {
LABEL_10:
      result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && v4 <= 0xFF)
    goto LABEL_10;
  return result;
}

uint64_t sub_1C97BD08C(const char *a1, _BYTE *a2)
{
  intmax_t v3;
  uint64_t v4;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (!a1 || !*a1)
    return 4294954394;
  v3 = strtoimax(a1, &__endptr, 0);
  v4 = v3;
  if (!__endptr)
  {
    if (v3 == (char)v3)
    {
LABEL_10:
      result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  result = 4294954394;
  if (!*__endptr && v4 >= -128 && v4 <= 127)
    goto LABEL_10;
  return result;
}

uint64_t sub_1C97BD110(const char *a1, _DWORD *a2)
{
  intmax_t v3;
  int v4;
  BOOL v5;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (a1 && *a1)
  {
    v3 = strtoimax(a1, &__endptr, 0);
    v4 = v3;
    if (__endptr)
    {
      if (*__endptr)
        v5 = 1;
      else
        v5 = v3 < (uint64_t)0xFFFFFFFF80000000;
      if (v5 || v3 > 0x7FFFFFFF)
        return 4294954394;
LABEL_14:
      result = 0;
      *a2 = v4;
      return result;
    }
    if (v3 == (int)v3)
      goto LABEL_14;
  }
  return 4294954394;
}

uint64_t sub_1C97BD190(const char *a1, _DWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  if (!a1 || !*a1)
    return 4294954394;
  v3 = strtoimax(a1, &__endptr, 0);
  v4 = v3;
  if (!__endptr)
  {
    if (!HIDWORD(v3))
    {
LABEL_10:
      result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && !HIDWORD(v4))
    goto LABEL_10;
  return result;
}

uint64_t sub_1C97BD210(const char *a1, _DWORD *a2, char **a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  int *v10;

  *__error() = 0;
  v8 = strtol(a1, a3, 10);
  if (v8)
  {
    result = 4294954394;
    if (v8 < a4 || v8 > 0x7FFFFFFF)
      return result;
LABEL_7:
    result = 0;
    *a2 = v8;
    return result;
  }
  v10 = __error();
  result = 4294954394;
  if (a4 <= 0 && !*v10)
    goto LABEL_7;
  return result;
}

uint64_t sub_1C97BD2A0(const char *a1, _BYTE *a2, char **a3, int a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t result;
  int *v12;

  *__error() = 0;
  v10 = strtol(a1, a3, 10);
  if (v10)
  {
    result = 4294954394;
    if (v10 < a4)
      return result;
    goto LABEL_6;
  }
  v12 = __error();
  result = 4294954394;
  if (a4 <= 0 && !*v12)
  {
LABEL_6:
    if (v10 <= a5)
    {
      result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t sub_1C97BD33C(const char *a1, _WORD *a2, char **a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t result;

  *__error() = 0;
  v6 = strtol(a1, a3, 10);
  if (v6)
  {
    v7 = v6;
    if ((unint64_t)(v6 - 0x8000) >= 0xFFFFFFFFFFFF8001)
    {
      result = 0;
      *a2 = v7;
      return result;
    }
  }
  else
  {
    __error();
  }
  return 4294954394;
}

void *sub_1C97BD3AC(void *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v9;
  unsigned __int8 *v10;
  int8x8_t *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  int16x8_t v15;
  unint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int8x8_t v19;

  if (a3 < a4)
  {
    v7 = a3;
    v9 = *(_QWORD *)(a2 + 416);
    v10 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    v11 = (int8x8_t *)(*(_QWORD *)(a2 + 400) + ((v9 * a3 - 8) << *(_BYTE *)(a2 + 531)));
    v12 = -3 - (int)result;
    v13 = (int)result - 2;
    v14 = (_DWORD)result + 7;
    v15.i64[0] = 0xA000A000A000ALL;
    v15.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 520) < -7)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v16 = 0;
        v17 = *v11;
        do
        {
          v18 = v16;
          v19 = v11[v16 / 8 + 1];
          *(int8x8_t *)&v10[v16] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8(v17, v19, 7uLL), (uint8x8_t)v17)), (int16x8_t)vaddl_u8((uint8x8_t)vext_s8(v17, v19, 5uLL), (uint8x8_t)vext_s8(v17, v19, 2uLL)), v15), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8(v17, v19, 6uLL), (uint8x8_t)vext_s8(v17, v19, 1uLL)), (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v17, v19, 4uLL), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), (uint8x8_t)vext_s8(v17, v19, 3uLL),
                                                        (uint8x8_t)0xA0A0A0A0A0A0A0ALL)),
                                         2uLL)),
                                     6uLL);
          v16 += 8;
          v17 = v19;
        }
        while (v18 < *(int *)(a2 + 520));
      }
      memset(&v10[v12 + 5], *v10, v13);
      result = memset(&v10[v16], v10[(int)v16 - 1], v14 - (int)v16 + *(_DWORD *)(a2 + 520));
      ++v7;
      v11 = (int8x8_t *)((char *)v11 + v9);
      v10 += a5;
      v15.i64[0] = 0xA000A000A000ALL;
      v15.i64[1] = 0xA000A000A000ALL;
    }
    while (v7 != a4);
  }
  return result;
}

void *sub_1C97BD530(void *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  int v13;
  int16x8_t v14;
  uint64_t v15;
  uint8x8_t *v16;
  uint8x8_t v17;
  uint8x8_t *v18;
  uint8x8_t v19;
  uint8x8_t *v20;

  if (a3 < a4)
  {
    v7 = a3;
    v9 = *(_QWORD *)(a2 + 416);
    v10 = (unsigned __int8 *)(a6 + a3 * a5);
    v11 = *(_QWORD *)(a2 + 400) + ((v9 * (a3 - 3)) << *(_BYTE *)(a2 + 531));
    v12 = (int)result + 3;
    v13 = (_DWORD)result + 2;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 520) < 1)
      {
        LODWORD(v15) = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v16 = (uint8x8_t *)(v11 + v15 + v9);
          v17 = *v16;
          v18 = (uint8x8_t *)((char *)v16 + v9);
          v19 = *v18;
          v20 = (uint8x8_t *)((char *)v18 + v9);
          *(int8x8_t *)&v10[v15] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v20 + v9 + v9 + v9 + v9), *(uint8x8_t *)(v11 + v15))), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v20 + v9 + v9), v19), v14), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v20 + v9 + v9 + v9), v17), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v20 + v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *v20, (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL)), 6uLL);
          v15 += 8;
        }
        while (v15 < *(int *)(a2 + 520));
      }
      memset(&v10[-v12], *v10, v12);
      result = memset(&v10[v15], v10[(int)v15 - 1], v13 - (int)v15 + *(_DWORD *)(a2 + 520));
      ++v7;
      v11 += v9;
      v10 += a5;
      v14.i64[0] = 0xA000A000A000ALL;
      v14.i64[1] = 0xA000A000A000ALL;
    }
    while (v7 != a4);
  }
  return result;
}

void *sub_1C97BD6B8(void *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v9;
  unsigned __int8 *v10;
  uint8x8_t *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  int16x8_t v15;
  int16x8_t v16;
  uint8x8_t *v17;
  unint64_t v18;
  int16x8_t v19;
  uint64_t v20;
  uint8x8_t *v21;
  uint8x8_t v22;
  uint8x8_t *v23;
  int8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;

  if (a3 < a4)
  {
    v7 = a3;
    v9 = *(_QWORD *)(a2 + 416);
    v10 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    v11 = (uint8x8_t *)(*(_QWORD *)(a2 + 400) + ((v9 * (a3 - 3) - 8) << *(_BYTE *)(a2 + 531)));
    v12 = -3 - (int)result;
    v13 = (int)result - 2;
    v14 = (_DWORD)result + 7;
    v15.i64[0] = 0xA000A000A000ALL;
    v15.i64[1] = 0xA000A000A000ALL;
    v16.i64[0] = 0xA000A000A000ALL;
    v16.i64[1] = 0xA000A000A000ALL;
    do
    {
      v17 = (uint8x8_t *)((char *)v11 + v9);
      if (*(int *)(a2 + 520) < -7)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v18 = 0;
        v19 = vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v11 + 7 * v9), *v11)), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v11 + 5 * v9), *(uint8x8_t *)((char *)v11 + 2 * v9)), v15), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v11 + 6 * v9), *v17), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v11 + 4 * v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *(uint8x8_t *)((char *)v11 + 3 * v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
        do
        {
          v20 = v18;
          v18 += 8;
          v21 = (uint8x8_t *)((char *)&v11[v18 / 8] + v9);
          v22 = *v21;
          v23 = (uint8x8_t *)((char *)v21 + v9);
          v24 = (int8x16_t)vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v9 + v9 + v9 + v9 + v9), v11[v18 / 8])), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v9 + v9 + v9), *v23), v15), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v9 + v9 + v9 + v9), v22), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v23 + v9 + v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *(uint8x8_t *)((char *)v23 + v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
          v25 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 2uLL);
          v26 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 4uLL);
          v27 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 6uLL);
          v28 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 8uLL);
          v29 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 0xAuLL);
          v30 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 0xCuLL);
          v31 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 0xEuLL);
          *(int8x8_t *)&v10[v20] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vaddq_s32(vsubq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v26.i8, (int16x4_t)0xA000A000A000ALL), vaddl_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v19.i8)), vshlq_n_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v25.i8), vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v27.i8, (int16x4_t)0xA000A000A000ALL)), 2uLL)), 6uLL), vaddq_s32(
                                         vsubq_s32(vmlal_high_s16(vmull_high_s16(v29, v15), v26, v15), vaddl_high_s16(v31, v19)), vshlq_n_s32(vaddq_s32(vaddl_high_s16(v30, v25), vmlal_high_s16(vmull_high_s16(v28, v16), v27, v16)), 2uLL)), 6uLL), 6uLL);
          v19 = (int16x8_t)v24;
        }
        while (v20 < *(int *)(a2 + 520));
      }
      memset(&v10[v12 + 5], *v10, v13);
      result = memset(&v10[v18], v10[(int)v18 - 1], v14 - (int)v18 + *(_DWORD *)(a2 + 520));
      ++v7;
      v10 += a5;
      v11 = v17;
      v15.i64[0] = 0xA000A000A000ALL;
      v15.i64[1] = 0xA000A000A000ALL;
      v16.i64[0] = 0xA000A000A000ALL;
      v16.i64[1] = 0xA000A000A000ALL;
    }
    while (v7 != a4);
  }
  return result;
}

uint64_t sub_1C97BD974(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  int16x8_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint16x8_t v18;
  unint64_t v19;
  int16x8_t v20;
  int v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  unsigned int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a3 < a4)
  {
    v6 = *(_QWORD *)(a2 + 416);
    v7 = *(int *)(a2 + 520);
    v8 = a3 * a5;
    v9 = (__int16 *)(a6 + 2 * v8 - 10);
    v10 = (int16x8_t *)(*(_QWORD *)(a2 + 400) + ((v6 * a3 - 8) << *(_BYTE *)(a2 + 531)));
    v11 = (int)result - 2;
    v12 = result + v7 + 7;
    v13 = 2 * a5;
    v14 = 2 * v6;
    v15 = a6 - 2 * (int)result + 2 * v8 - 6;
    v16.i64[0] = 0xA000A000A000ALL;
    v16.i64[1] = 0xA000A000A000ALL;
    v17.i64[0] = 0x28002800280028;
    v17.i64[1] = 0x28002800280028;
    v18.i64[0] = 0xFC00FC00FC00FC00;
    v18.i64[1] = 0xFC00FC00FC00FC00;
    while ((int)v7 < -7)
    {
      v32 = 0;
      if ((_DWORD)v11)
        goto LABEL_9;
LABEL_11:
      LODWORD(v35) = v12 - v32;
      if (v12 != v32)
      {
        v35 = (int)v35;
        result = (unsigned __int16)v9[v32 - 1];
        v36 = v32;
        do
        {
          v9[v36++] = result;
          --v35;
        }
        while (v35);
      }
      ++a3;
      v10 = (int16x8_t *)((char *)v10 + v14);
      v9 = (__int16 *)((char *)v9 + v13);
      v15 += v13;
      if (a3 == a4)
        return result;
    }
    v19 = 0;
    v20 = *v10;
    for (result = -8; result < v7; result += 8)
    {
      v21 = result;
      v22 = (int8x16_t)v10[v19 / 8 + 1];
      v23 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 2uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 4uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 6uLL);
      v26 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 8uLL);
      v27 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 0xCuLL);
      v29 = vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v20, v22, 0xEuLL), v20);
      v30 = vaddq_s16(v26, v25);
      v31 = vmlaq_s16(vshlq_n_s16(vaddq_s16(v28, v23), 2uLL), vaddq_s16(v27, v24), v16);
      *(uint16x8_t *)&v9[v19] = vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v30.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v29.i8), *(int16x4_t *)v31.i8), 6uLL), vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v30, v17), v29), v31), 6uLL), v18);
      v19 += 8;
      v20 = (int16x8_t)v22;
    }
    v32 = v21 + 16;
    if (!(_DWORD)v11)
      goto LABEL_11;
LABEL_9:
    v33 = *v9;
    result = v15;
    v34 = v11;
    do
    {
      *(_WORD *)result = v33;
      result += 2;
      --v34;
    }
    while (v34);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C97BDAE4(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint16x8_t v16;
  uint64_t v17;
  uint64_t i;
  int16x8_t *v19;
  int16x8_t v20;
  int16x8_t *v21;
  int16x8_t v22;
  int16x8_t *v23;
  int16x8_t v24;
  int16x8_t *v25;
  int16x8_t v26;
  int16x8_t *v27;
  int16x8_t v28;
  int16x8_t *v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  if (a3 < a4)
  {
    v6 = *(_QWORD *)(a2 + 416);
    v7 = *(int *)(a2 + 520);
    v8 = (unsigned __int16 *)(a6 + 2 * a3 * a5);
    v9 = *(_QWORD *)(a2 + 400) + ((v6 * (a3 - 3)) << *(_BYTE *)(a2 + 531));
    v10 = 2 * v6;
    v11 = result + 3;
    v12 = (int)result + 2;
    v13 = 2 * a5;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0x28002800280028;
    v15.i64[1] = 0x28002800280028;
    v16.i64[0] = 0xFC00FC00FC00FC00;
    v16.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      if ((int)v7 >= 1)
      {
        v17 = 0;
        for (i = 0; i < v7; i += 8)
        {
          v19 = (int16x8_t *)(v9 + v17 * 2 + v10);
          v20 = *v19;
          v21 = (int16x8_t *)((char *)v19 + v10);
          v22 = *v21;
          v23 = (int16x8_t *)((char *)v21 + v10);
          v24 = *v23;
          v25 = (int16x8_t *)((char *)v23 + v10);
          v26 = *v25;
          v27 = (int16x8_t *)((char *)v25 + v10);
          v28 = *v27;
          v29 = (int16x8_t *)((char *)v27 + v10);
          v30 = vaddq_s16(*(int16x8_t *)((char *)v29 + v10), *(int16x8_t *)(v9 + v17 * 2));
          v31 = vaddq_s16(v26, v24);
          v32 = vmlaq_s16(vshlq_n_s16(vaddq_s16(*v29, v20), 2uLL), vaddq_s16(v28, v22), v14);
          *(uint16x8_t *)&v8[v17] = vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v31.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v30.i8), *(int16x4_t *)v32.i8), 6uLL), vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v31, v15), v30), v32), 6uLL), v16);
          v17 += 8;
        }
      }
      if (!v11)
        goto LABEL_11;
      result = *v8;
      v33 = -(uint64_t)v11;
      do
        v8[v33] = result;
      while (!__CFADD__(v33++, 1));
      if ((_DWORD)v12)
      {
LABEL_11:
        result = v8[v7 - 1];
        v35 = v7;
        v36 = v12;
        do
        {
          v8[v35++] = result;
          --v36;
        }
        while (v36);
      }
      ++a3;
      v8 = (unsigned __int16 *)((char *)v8 + v13);
      v9 += v10;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t sub_1C97BDC3C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint16x8_t v18;
  unint64_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint64_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int8x16_t *v50;
  int8x16_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int8x16_t *v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int8x16_t *v64;
  int8x16_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int8x16_t *v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int8x16_t *v78;
  int8x16_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  unsigned int v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  if (a3 < a4)
  {
    v6 = *(_QWORD *)(a2 + 416);
    v7 = *(int *)(a2 + 520);
    v8 = a3 * a5;
    v9 = (__int16 *)(a6 + 2 * v8 - 10);
    v10 = 2 * v6;
    v11 = (int)result - 2;
    v12 = result + v7 + 7;
    v13 = 2 * a5;
    v14 = *(_QWORD *)(a2 + 400) + ((v6 * a3 - 8) << *(_BYTE *)(a2 + 531)) - 6 * v6;
    v15 = a6 - 2 * (int)result + 2 * v8 - 6;
    v16.i64[0] = 0xA000A000A000ALL;
    v16.i64[1] = 0xA000A000A000ALL;
    v17.i64[0] = 0x28002800280028;
    v17.i64[1] = 0x28002800280028;
    v18.i64[0] = 0xFC00FC00FC00FC00;
    v18.i64[1] = 0xFC00FC00FC00FC00;
    while ((int)v7 < -7)
    {
      v83 = 0;
      if ((_DWORD)v11)
        goto LABEL_9;
LABEL_11:
      LODWORD(v86) = v12 - v83;
      if (v12 != v83)
      {
        v86 = (int)v86;
        result = (unsigned __int16)v9[v83 - 1];
        v87 = v83;
        do
        {
          v9[v87++] = result;
          --v86;
        }
        while (v86);
      }
      ++a3;
      v9 = (__int16 *)((char *)v9 + v13);
      v14 += v10;
      v15 += v13;
      if (a3 == a4)
        return result;
    }
    v19 = 0;
    result = -8;
    do
    {
      v20 = *(int16x8_t *)(v14 + v19);
      v21 = *(int8x16_t *)(v14 + v19 + 16);
      v22 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 2uLL);
      v23 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 4uLL);
      v24 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 6uLL);
      v25 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 8uLL);
      v26 = result;
      v27 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xAuLL);
      v28 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xCuLL);
      v29 = vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xEuLL), v20);
      v30 = vaddq_s16(v28, v22);
      v31 = vaddq_s16(v27, v23);
      v32 = vaddq_s16(v25, v24);
      v33 = vmlaq_s16(vshlq_n_s16(v30, 2uLL), v31, v16);
      v34 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v32.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v29.i8), *(int16x4_t *)v33.i8);
      v35 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v32, v17), v29), v33);
      *(int16x4_t *)v33.i8 = vqshrn_n_s32(v34, 2uLL);
      v36 = (int8x16_t *)(v14 + v19 + v10);
      v37 = v36[1];
      v38 = vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 0xEuLL), *(int16x8_t *)v36);
      v39 = vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 8uLL), (int16x8_t)vextq_s8(*v36, v37, 6uLL));
      v40 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 0xCuLL), (int16x8_t)vextq_s8(*v36, v37, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 0xAuLL), (int16x8_t)vextq_s8(*v36, v37, 4uLL)), v16);
      v41 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v39.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v38.i8), *(int16x4_t *)v40.i8);
      v42 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v39, v17), v38), v40);
      *(int16x4_t *)v38.i8 = vqshrn_n_s32(v41, 2uLL);
      v43 = (int8x16_t *)((char *)v36 + v10);
      v44 = v43[1];
      v45 = vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 0xEuLL), *(int16x8_t *)v43);
      v46 = vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 8uLL), (int16x8_t)vextq_s8(*v43, v44, 6uLL));
      v47 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 0xCuLL), (int16x8_t)vextq_s8(*v43, v44, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 0xAuLL), (int16x8_t)vextq_s8(*v43, v44, 4uLL)), v16);
      v48 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v46.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v45.i8), *(int16x4_t *)v47.i8);
      v49 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v46, v17), v45), v47);
      *(int16x4_t *)v47.i8 = vqshrn_n_s32(v48, 2uLL);
      v50 = (int8x16_t *)((char *)v43 + v10);
      v51 = v50[1];
      v52 = vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 0xEuLL), *(int16x8_t *)v50);
      v53 = vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 8uLL), (int16x8_t)vextq_s8(*v50, v51, 6uLL));
      v54 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 0xCuLL), (int16x8_t)vextq_s8(*v50, v51, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 0xAuLL), (int16x8_t)vextq_s8(*v50, v51, 4uLL)), v16);
      v55 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v53.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v52.i8), *(int16x4_t *)v54.i8);
      v56 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v53, v17), v52), v54);
      *(int16x4_t *)v54.i8 = vqshrn_n_s32(v55, 2uLL);
      v57 = (int8x16_t *)((char *)v50 + v10);
      v58 = v57[1];
      v59 = vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 0xEuLL), *(int16x8_t *)v57);
      v60 = vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 8uLL), (int16x8_t)vextq_s8(*v57, v58, 6uLL));
      v61 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 0xCuLL), (int16x8_t)vextq_s8(*v57, v58, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 0xAuLL), (int16x8_t)vextq_s8(*v57, v58, 4uLL)), v16);
      v62 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v60.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v59.i8), *(int16x4_t *)v61.i8);
      v63 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v60, v17), v59), v61);
      *(int16x4_t *)v61.i8 = vqshrn_n_s32(v62, 2uLL);
      v64 = (int8x16_t *)((char *)v57 + v10);
      v65 = v64[1];
      v66 = vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 0xEuLL), *(int16x8_t *)v64);
      v67 = vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 8uLL), (int16x8_t)vextq_s8(*v64, v65, 6uLL));
      v68 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 0xCuLL), (int16x8_t)vextq_s8(*v64, v65, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 0xAuLL), (int16x8_t)vextq_s8(*v64, v65, 4uLL)), v16);
      v69 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v67.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v66.i8), *(int16x4_t *)v68.i8);
      v70 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v67, v17), v66), v68);
      *(int16x4_t *)v68.i8 = vqshrn_n_s32(v69, 2uLL);
      v71 = (int8x16_t *)((char *)v64 + v10);
      v72 = v71[1];
      v73 = vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 0xEuLL), *(int16x8_t *)v71);
      v74 = vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 8uLL), (int16x8_t)vextq_s8(*v71, v72, 6uLL));
      v75 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 0xCuLL), (int16x8_t)vextq_s8(*v71, v72, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 0xAuLL), (int16x8_t)vextq_s8(*v71, v72, 4uLL)), v16);
      v76 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v74.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v73.i8), *(int16x4_t *)v75.i8);
      v77 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v74, v17), v73), v75);
      *(int16x4_t *)v75.i8 = vqshrn_n_s32(v76, 2uLL);
      v78 = (int8x16_t *)((char *)v71 + v10);
      v79 = v78[1];
      v80 = vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 0xEuLL), *(int16x8_t *)v78);
      v81 = vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 8uLL), (int16x8_t)vextq_s8(*v78, v79, 6uLL));
      v82 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 0xCuLL), (int16x8_t)vextq_s8(*v78, v79, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 0xAuLL), (int16x8_t)vextq_s8(*v78, v79, 4uLL)), v16);
      *(uint16x8_t *)&v9[v19 / 2] = vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vsubw_s16(vaddq_s32(vsubw_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v54.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v33.i8), vaddq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v47.i8, (int16x4_t)0xA000A000A000ALL),
                                                            vshlq_n_s32(vaddl_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v38.i8), 2uLL))), vqshrn_n_s32(vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v81.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v80.i8), *(int16x4_t *)v82.i8), 2uLL)), 0xAuLL), vsubw_s16(vaddq_s32(vsubw_s16(vmlal_s16(vmull_s16(vqshrn_n_s32(v63, 2uLL), (int16x4_t)0x28002800280028),
                                                            vqshrn_n_s32(v56, 2uLL),
                                                            (int16x4_t)0x28002800280028),
                                                          vqshrn_n_s32(v35, 2uLL)),
                                                        vaddq_s32(vmlal_s16(vmull_s16(vqshrn_n_s32(v70, 2uLL), (int16x4_t)0xA000A000A000ALL), vqshrn_n_s32(v49, 2uLL), (int16x4_t)0xA000A000A000ALL), vshlq_n_s32(vaddl_s16(vqshrn_n_s32(v77, 2uLL), vqshrn_n_s32(v42, 2uLL)), 2uLL))), vqshrn_n_s32(vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v81, v17), v80), v82), 2uLL)), 0xAuLL), v18);
      result = v26 + 8;
      v19 += 16;
    }
    while (v26 + 8 < v7);
    v83 = v26 + 16;
    if (!(_DWORD)v11)
      goto LABEL_11;
LABEL_9:
    v84 = *v9;
    result = v15;
    v85 = v11;
    do
    {
      *(_WORD *)result = v84;
      result += 2;
      --v85;
    }
    while (v85);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C97BE09C(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  signed int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  signed int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *(*v26)(void *, int, int, int, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;

  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 400);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 416);
  *(_DWORD *)(a1 + 104) = a2;
  v3 = *(unsigned __int8 *)(v2 + 528);
  if (v3 != *(unsigned __int8 *)(v2 + 529))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Bitdepth mismatch not supported\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Bitdepth mismatch not supported\n");
    }
    return 4294954386;
  }
  if (v3 == 10)
  {
    v15 = (uint64_t *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 16);
    *(_BYTE *)(a1 + 108) = 1;
    v16 = a2 + 3;
    v17 = a2 + a2 + 3 + 2;
    v18 = (int)((v17 + *(_DWORD *)(v2 + 520) + 7) & 0xFFFFFFF8);
    v19 = (a2 + 10) & 0xFFFFFFF8;
    v20 = v18 * (*(int *)(v2 + 524) + (uint64_t)v17);
    v21 = 2 * (3 * v20 + (v19 | 5));
    v22 = *(_QWORD *)(a1 + 24) - v14;
    if (v21 <= v22)
    {
      if (v21 < v22)
        *(_QWORD *)(a1 + 24) = v14 + v21;
    }
    else
    {
      sub_1C971BA44((unint64_t *)(a1 + 16), v21 - v22);
      v14 = *v15;
    }
    result = 0;
    v28 = v14 + 2 * v19 + 2 * (int)v18 * (uint64_t)v16;
    v29 = v28 + 2 * v20 + 10;
    *(_QWORD *)(a1 + 48) = v29;
    *(_QWORD *)(a1 + 56) = v28;
    *(_QWORD *)(a1 + 64) = v29 + 2 * v20;
    *(_QWORD *)(a1 + 88) = v18;
    *(_QWORD *)(a1 + 96) = v18;
    *(_QWORD *)(a1 + 80) = v18;
    v26 = sub_1C97BE354;
    *(_QWORD *)(a1 + 112) = sub_1C97BD974;
    *(_QWORD *)(a1 + 120) = sub_1C97BDAE4;
    v27 = sub_1C97BDC3C;
    goto LABEL_19;
  }
  if (v3 != 8)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bit depth %d not supported\n", v3);
      syslog(27, "Bit depth %d not supported\n");
    }
    return 4294954386;
  }
  v6 = (uint64_t *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 108) = 0;
  v7 = a2 + 3;
  v8 = a2 + a2 + 3 + 2;
  v9 = (int)((v8 + *(_DWORD *)(v2 + 520) + 15) & 0xFFFFFFF0);
  v10 = (a2 + 18) & 0xFFFFFFF0;
  v11 = v9 * (*(int *)(v2 + 524) + (uint64_t)v8);
  v12 = 3 * v11 + (v10 | 0xD);
  v13 = *(_QWORD *)(a1 + 24) - v5;
  if (v12 <= v13)
  {
    if (v12 < v13)
      *(_QWORD *)(a1 + 24) = v5 + v12;
  }
  else
  {
    sub_1C971BA44((unint64_t *)(a1 + 16), v12 - v13);
    v5 = *v6;
  }
  result = 0;
  v24 = v5 + v10 + (int)v9 * (uint64_t)v7;
  v25 = v24 + v11 + 13;
  *(_QWORD *)(a1 + 48) = v25;
  *(_QWORD *)(a1 + 56) = v24;
  *(_QWORD *)(a1 + 64) = v25 + v11;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 80) = v9;
  v26 = sub_1C97BE3E8;
  *(_QWORD *)(a1 + 112) = sub_1C97BD3AC;
  *(_QWORD *)(a1 + 120) = sub_1C97BD530;
  v27 = sub_1C97BD6B8;
LABEL_19:
  *(_QWORD *)(a1 + 128) = v27;
  *(_QWORD *)(a1 + 136) = v26;
  return result;
}

void *sub_1C97BE354(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  const void *v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  if (a4 >= 1)
  {
    v6 = (const void *)(a6 + 2 * (-3 - (int)result) + 2 * a3 * a5);
    v7 = 2 * (a2 + 2 * (int)result + 5);
    v8 = (a4 + 1) - 1;
    v9 = (char *)(a5 * (2 * a3 + 2) - 2 * (int)result + a6 - 6);
    v10 = 2 * a5;
    do
    {
      result = memcpy(v9, v6, v7);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *sub_1C97BE3E8(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  size_t v8;
  uint64_t v9;
  char *v10;

  if (a4 >= 1)
  {
    v7 = (const void *)(a6 + -3 - (int)result + a3 * a5);
    v8 = a2 + 2 * (int)result + 5;
    v9 = (a4 + 1) - 1;
    v10 = (char *)(a5 + a5 * a3 - (int)result + a6 - 3);
    do
    {
      result = memcpy(v10, v7, v8);
      v10 += a5;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1C97BE470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  v3 = a3;
  v4 = a2;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 112))(*(unsigned int *)(a1 + 104), *(_QWORD *)(a1 + 8), a2, a3, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48));
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 524);
  if (v6 <= v3)
    v7 = (v6 + 3);
  else
    v7 = (v3 - 4);
  (*(void (**)(_QWORD))(a1 + 120))(*(unsigned int *)(a1 + 104));
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(a1 + 128))(*(unsigned int *)(a1 + 104), *(_QWORD *)(a1 + 8), (v4 - 4), v7, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64));
  if (!v4)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 520), 0, (*(_DWORD *)(a1 + 104) + 3), -*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48));
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 520), 4, (*(_DWORD *)(a1 + 104) - 1), -*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 56));
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 520), 4, (*(_DWORD *)(a1 + 104) - 1), -*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64));
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v9 + 524);
  if ((_DWORD)v7 == v10 + 3)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(v9 + 520), (v10 - 1), (*(_DWORD *)(a1 + 104) + 2), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48));
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 520), (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 524) + 2), (*(_DWORD *)(a1 + 104) - 1), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 56));
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 520), (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 524) + 2), (*(_DWORD *)(a1 + 104) - 1), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64));
  }
  return result;
}

void sub_1C97BE624(_QWORD *a1)
{
  sub_1C97BEBC4(a1);
  JUMPOUT(0x1CAA43B9CLL);
}

uint64_t sub_1C97BE648(uint64_t a1, int a2, int a3, int a4, int a5, __CVBuffer *a6, __CVBuffer *a7)
{
  uint64_t v10;
  IOSurfaceRef IOSurface;
  IOSurfaceRef v12;

  v10 = sub_1C97BE794((_DWORD *)a1, a2, a3, a4, a5, a6, a7);
  if (!(_DWORD)v10)
  {
    if (*(_BYTE *)(a1 + 4244)
      && (*(_QWORD *)(a1 + 4248) || !IOSurfaceAcceleratorCreate())
      && (IOSurface = CVPixelBufferGetIOSurface(a6), v12 = CVPixelBufferGetIOSurface(a7), IOSurface)
      && v12
      && !IOSurfaceAcceleratorTransformSurface())
    {
      v10 = 0;
    }
    else
    {
      v10 = sub_1C97BE944(a1, a6, a7);
    }
    CVBufferPropagateAttachments(a6, a7);
  }
  return v10;
}

uint64_t sub_1C97BE73C(_DWORD *a1, int a2, int a3, int a4, int a5, __CVBuffer *a6, __CVBuffer *a7)
{
  uint64_t result;
  uint64_t v11;

  result = sub_1C97BE794(a1, a2, a3, a4, a5, a6, a7);
  if (!(_DWORD)result)
  {
    v11 = sub_1C97BE944((uint64_t)a1, a6, a7);
    CVBufferPropagateAttachments(a6, a7);
    return v11;
  }
  return result;
}

uint64_t sub_1C97BE794(_DWORD *a1, int a2, int a3, int a4, int a5, CVPixelBufferRef pixelBuffer, __CVBuffer *a7)
{
  OSType PixelFormatType;
  FILE *v15;
  const char *v16;
  const char *v17;
  size_t v18;
  uint64_t result;

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if ((PixelFormatType & 0xFFFFFFEF) != 0x34323066)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v15 = (FILE *)*MEMORY[0x1E0C80C10];
      v16 = "LanczosScaling only supports 4:2:0 biplanar\n";
      v17 = "LanczosScaling only supports 4:2:0 biplanar\n";
      v18 = 44;
LABEL_17:
      fwrite(v17, v18, 1uLL, v15);
      syslog(27, v16);
    }
    return 4294954394;
  }
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a7))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v15 = (FILE *)*MEMORY[0x1E0C80C10];
      v16 = "Pixel format mismatch between src and dst!\n";
      v17 = "Pixel format mismatch between src and dst!\n";
      v18 = 43;
      goto LABEL_17;
    }
    return 4294954394;
  }
  if (a2 < 16
    || a3 < 16
    || a4 < 16
    || a5 < 16
    || CVPixelBufferGetWidth(pixelBuffer) < a2
    || CVPixelBufferGetHeight(pixelBuffer) < a3
    || CVPixelBufferGetWidth(a7) < a4
    || CVPixelBufferGetHeight(a7) < a5)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Invalid scaling dimensions %dx%d -> %dx%d\n", a2, a3, a4, a5);
      syslog(27, "Invalid scaling dimensions %dx%d -> %dx%d\n");
    }
    return 4294954394;
  }
  result = 0;
  a1[18] = a2;
  a1[19] = a3;
  a1[20] = a4;
  a1[21] = a5;
  return result;
}

uint64_t sub_1C97BE944(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  uint64_t v6;
  uint64_t v7;
  __CVBuffer *v8;
  CVPixelBufferLockFlags v9;
  void *BaseAddressOfPlane;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  if (!(_DWORD)v6)
  {
    v7 = CVPixelBufferLockBaseAddress(a3, 0);
    if ((_DWORD)v7)
    {
      v6 = v7;
      v8 = pixelBuffer;
      v9 = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      *(_QWORD *)(a1 + 16) = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      *(_QWORD *)(a1 + 24) = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL);
      *(_QWORD *)(a1 + 32) = BaseAddressOfPlane;
      if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 16) && *(_QWORD *)(a1 + 24) && BaseAddressOfPlane)
      {
        *(_QWORD *)(a1 + 40) = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
        *(_QWORD *)(a1 + 48) = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
        *(_QWORD *)(a1 + 56) = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
        *(_QWORD *)(a1 + 64) = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL);
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(_QWORD *)(a1 + 24);
        if (v11 == v12 || *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 32))
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("source and dst buffer cannot be the same so far!", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "source and dst buffer cannot be the same so far!");
          }
          v6 = 0xFFFFFFFFLL;
        }
        else
        {
          v13 = *(unsigned int *)(a1 + 80);
          v14 = *(unsigned int *)(a1 + 72);
          v15 = 8 * (int)v13 / (int)v14;
          if (v15 >= 8)
            v15 = 8;
          if (v15 <= 1)
            v15 = 1;
          v16 = a1 + ((unint64_t)(v15 - 1) << 8);
          v17 = v16 + 144;
          v18 = v16 + 2192;
          sub_1C97FF20C(0, v11, *(_QWORD *)(a1 + 40), v14, *(_DWORD *)(a1 + 76), v12, *(_QWORD *)(a1 + 56), v13, *(_DWORD *)(a1 + 84), v16 + 144, v16 + 2192, *(_DWORD *)(a1 + 4240), *(void (**)(char *, __int128 *, uint64_t, uint64_t, _QWORD))(a1 + 112), *(void (**)(uint64_t, char *, _QWORD, uint64_t, char *, void *, _QWORD))(a1 + 128));
          sub_1C97FF20C(1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 72), *(int *)(a1 + 76) >> 1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 80), *(int *)(a1 + 84) >> 1, v17, v18, *(_DWORD *)(a1 + 4240), *(void (**)(char *, __int128 *, uint64_t, uint64_t, _QWORD))(a1 + 112), *(void (**)(uint64_t, char *, _QWORD, uint64_t, char *, void *, _QWORD))(a1 + 136));
          v6 = 0;
        }
      }
      else
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("NULL plane!\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "NULL plane!\n");
        }
        v6 = 4294954394;
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      v8 = a3;
      v9 = 0;
    }
    CVPixelBufferUnlockBaseAddress(v8, v9);
  }
  return v6;
}

_QWORD *sub_1C97BEBC4(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E8291790;
  v2 = (const void *)a1[531];
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1C97BEC00(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  signed int v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  int v36;
  int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;

  v5 = *(_QWORD *)(a4 + 14840);
  v6 = *(int **)(a4 + 976);
  v7 = v6[1210];
  v8 = *(char *)(v5 + 653);
  if (!v7)
    return *(char *)(v5 + 653);
  v12 = *(_QWORD *)(v5 + 4760);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 16) + 2113) - (uint64_t)a3;
  v47 = *(unsigned __int8 *)(v12 + 124);
  v46 = *(_QWORD *)(v5 + 5320);
  v45 = *(_BYTE *)(*(_QWORD *)(v46 + 40) + 2096);
  v14 = sub_1C97DAE74(v6, a1, a2, v13, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(char *)(v12 + 133));
  v15 = *(_QWORD *)(a4 + 976);
  if (*(_BYTE *)(v15 + 17))
    v8 = sub_1C97DB504(*(_QWORD *)(a4 + 976), a1, a2, v13) + v8;
  v16 = sub_1C97DB5D0(a1, a2, a3, v8, v14, v7, *(_QWORD *)(v5 + 4760), v15);
  v17 = *(_QWORD *)(a4 + 14840);
  v18 = *(_QWORD *)(v17 + 5248);
  if (v18)
  {
    v19 = *(_BYTE *)(*(_QWORD *)(v17 + 16) + 2113) - a3;
    v20 = *(_DWORD *)(v17 + 5256);
    v21 = *(int *)(v17 + 5260);
    v22 = __clz(__rbit32(v20));
    v23 = a2 >> v22;
    v24 = a1 >> v22;
    if (1 << v19 > v20)
    {
      v25 = 1 << (v19 - (v22 & 0x1F));
      v26 = *(_DWORD *)(a4 + 20) / v20;
      if (v25 + v23 >= v26)
        v27 = v26;
      else
        v27 = v25 + v23;
      v28 = v47;
      v29 = 0;
      if (v23 < v27)
      {
        v30 = v25 + v24;
        if (v30 >= (int)v21)
          v30 = v21;
        v31 = v23;
        v32 = (char *)(v18 + v24 + (int)v21 * (uint64_t)v23);
        do
        {
          v33 = v32;
          v34 = v30 - (uint64_t)v24;
          if (v24 < v30)
          {
            do
            {
              v36 = *v33++;
              v35 = v36;
              if (v29 >= v36)
                v29 = v35;
              --v34;
            }
            while (v34);
          }
          ++v31;
          v32 += v21;
        }
        while (v31 != v27);
      }
      goto LABEL_23;
    }
    v29 = *(_BYTE *)(v18 + v24 + v23 * (int)v21);
  }
  else
  {
    v29 = 0;
  }
  v28 = v47;
LABEL_23:
  v38 = v16 + v29;
  if (v28)
  {
    v39 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 16) + 2097);
    v40 = v38
        + *(char *)(*(_QWORD *)(*(_QWORD *)(v46 + 576) + 10784)
                  + *(int *)(*(_QWORD *)(*(_QWORD *)(a4 + 976) + 8 * v13 + 5312)
                           + 4 * ((*(_DWORD *)(a4 + 16) + (1 << v13) - 1) >> v13) * (uint64_t)(a2 >> v13)
                           + 4 * (a1 >> v13)));
    if (v40 >= 51)
      v41 = 51;
    else
      v41 = v38
          + *(char *)(*(_QWORD *)(*(_QWORD *)(v46 + 576) + 10784)
                    + *(int *)(*(_QWORD *)(*(_QWORD *)(a4 + 976) + 8 * v13 + 5312)
                             + 4 * ((*(_DWORD *)(a4 + 16) + (1 << v13) - 1) >> v13) * (uint64_t)(a2 >> v13)
                             + 4 * (a1 >> v13)));
    if (v40 <= -v39)
      v38 = -v39;
    else
      v38 = v41;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 4760) + 127))
      v42 = (_DWORD)v13 == 4;
    else
      v42 = 0;
    if (v42)
    {
      v43 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 16) + 2097);
      v38 = sub_1C97DB26C(*(_QWORD *)(a4 + 976), a1, a2, v38, *(_DWORD *)(a4 + 16), v45, v43, -v43);
    }
  }
  v44 = *(_DWORD *)(v5 + 5428);
  if (v44 >= v38)
    return v38;
  else
    return v44;
}

uint64_t sub_1C97BEEA4(int a1, int a2, char a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t result;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  v4 = *(_QWORD *)(a4 + 976);
  v5 = *(_DWORD *)(v4 + 4);
  v6 = 1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 14840) + 16) + 2113) - a3);
  v7 = *(_DWORD *)(a4 + 20) - a2;
  if (v6 < v7)
    v7 = 1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 14840) + 16) + 2113) - a3);
  v8 = (v7 >> v5);
  if ((int)v8 < 1)
    return 51;
  v9 = 0;
  v10 = *(_QWORD *)(v4 + 5096);
  v11 = *(_QWORD *)(v4 + 8);
  v12 = (unsigned __int8 *)(v10 + v11 * (a2 >> v5) + (a1 >> v5));
  if (v6 >= *(_DWORD *)(a4 + 16) - a1)
    v6 = *(_DWORD *)(a4 + 16) - a1;
  v13 = (v6 >> v5);
  result = 51;
  do
  {
    v15 = v12;
    v16 = v13;
    if ((int)v13 >= 1)
    {
      do
      {
        v18 = *v15++;
        v17 = v18;
        if ((int)result >= v18)
          result = v17;
        else
          result = result;
        --v16;
      }
      while (v16);
    }
    ++v9;
    v12 += v11;
  }
  while (v9 != v8);
  return result;
}

uint64_t sub_1C97BEF58(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = *(_QWORD *)(a4 + 14840);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 16) + 2113) - a3;
  v6 = *(_QWORD *)(v4 + 5320);
  v11 = a1;
  v9 = v5;
  v10 = a2;
  v7 = *(_QWORD *)(v6 + 536);
  if (!v7)
    sub_1C9752B60();
  return (*(uint64_t (**)(uint64_t, int *, int *, int *))(*(_QWORD *)v7 + 48))(v7, &v11, &v10, &v9);
}

void sub_1C97BEFB0(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v3[2 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v16 = &v4[2 * v6];
LABEL_17:
    a1[1] = v16;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    sub_1C9747024();
  v8 = v7 - v3;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 < 0)
    sub_1C9724B4C();
  v11 = (char *)operator new(2 * v10);
  v12 = &v11[2 * v5];
  v13 = &v11[2 * v10];
  bzero(v12, 2 * v6);
  v14 = &v12[2 * v6];
  while (v4 != v3)
  {
    v15 = *((_WORD *)v4 - 1);
    v4 -= 2;
    *((_WORD *)v12 - 1) = v15;
    v12 -= 2;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void *sub_1C97BF0AC(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  if (a2)
  {
    v8 = 2 * a5;
    v9 = 2 * a3;
    v10 = 2 * (int)result;
    v11 = a2;
    do
    {
      --v11;
      result = memcpy(__dst, __src, v10);
      __dst += v8;
      __src += v9;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C97BF110(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int i;
  uint64_t v7;

  if (a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        v7 = 0;
        do
        {
          *(_WORD *)(a6 + 2 * v7) = *(_WORD *)(a4 + 2 * v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a6 += 2 * a5;
      a4 += 2 * a3;
    }
  }
  return result;
}

uint64_t sub_1C97BF160(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8, char *a9)
{
  uint64_t v10;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  const void *v22;
  _WORD *v23;
  uint64_t v24;
  int v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  _BOOL8 v39;
  unsigned __int8 *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _WORD *v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _BOOL8 v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  _WORD *v61;
  uint64_t v62;
  _WORD *v63;
  uint64_t v64;
  const void *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _BOOL8 v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned __int8 *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _BOOL8 v85;
  unsigned __int8 *v86;
  char v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned __int8 *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  _BOOL8 v102;
  int v103;
  _WORD *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned __int8 *v113;
  char *v114;
  __int16 v115;
  uint64_t v116;
  _WORD *v117;
  uint64_t v118;
  __int16 v119;
  _WORD *v120;
  uint64_t v121;
  __int16 v122;
  char *v123;
  uint64_t v124;
  char *v125;
  __int16 v126;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  _BOOL4 v131;
  int v132;
  int v133;
  int v134;
  _DWORD *v135;
  unsigned __int8 *v136;

  v10 = result;
  if (!a7)
  {
    v24 = (4 << a8) | 1;
    v25 = 128 << *(_BYTE *)(*(_QWORD *)(result + 14848) + 222);
    v26 = a9 - 2;
    do
    {
      *(_WORD *)v26 = v25;
      v26 += 2;
      --v24;
    }
    while (v24);
    return result;
  }
  v15 = (int *)(result + 24524);
  v16 = 2 << a8;
  v136 = (unsigned __int8 *)a5;
  if (!*(_BYTE *)(result + 24792) && (*v15 == a2 || *(_DWORD *)(result + 24528) == a3))
  {
    sub_1C97C08C0(result, 0);
    a5 = (uint64_t)v136;
  }
  v17 = 1 << a8;
  result = sub_1C97C09F8(v10, a2, a3, a4, a5, a8, a7, 0);
  v18 = *(_QWORD *)(v10 + 14848);
  v129 = *(unsigned __int8 *)(v18 + 2117);
  v135 = (_DWORD *)(v10 + 24524);
  v19 = *(_QWORD *)(v10 + 24760);
  v134 = *(_DWORD *)(v10 + 24528);
  v132 = *v15;
  v133 = a3 - v134;
  v20 = a2 - *v15;
  v128 = v19;
  if (a2 == v132)
  {
    v131 = (a7 & 0xF0) != 0;
    if ((a7 & 0xF0) != 0)
      result = (uint64_t)memcpy(a9, (const void *)(v19 + 2 * v133), 2 * v17);
    v21 = &a9[2 * v16];
    if ((a7 & 0xF) != 0)
    {
      v22 = (const void *)(v19 + 2 * v133 + 2 * v17);
      v23 = a9;
      result = (uint64_t)memcpy(&a9[2 * v17], v22, 2 * v17);
      v130 = 1;
    }
    else
    {
      v130 = 0;
      v23 = a9;
    }
    v27 = v136;
  }
  else
  {
    v27 = v136;
    if ((a7 & 0xF) != 0)
    {
      v28 = a2 - 1;
      v29 = v17 + a3;
      v30 = *((_DWORD *)v136 + 1);
      if (v30 >= a2 || (v31 = *v136, v30 + v31 < a2) || (v38 = *((_DWORD *)v136 + 2), v38 > v29) || v38 + v31 <= v29)
      {
        v32 = v28 - v132;
        v33 = v29 - v134;
        v34 = *(unsigned __int8 *)(v18 + 2113);
        if (a4 < 0)
        {
LABEL_22:
          v37 = -1;
        }
        else
        {
          v35 = v34 - a4;
          result = v133;
          while (v20 >> v35 != v32 >> v35 || v133 >> v35 != v33 >> v35)
          {
            v36 = v35++ < v34;
            if (!v36)
              goto LABEL_22;
          }
          v41 = v34 - v35;
          if (v41 >= a4)
            v37 = v41;
          else
            v37 = v41 + 1;
        }
        v39 = 0;
        v40 = *(unsigned __int8 **)(v10
                                  + 32 * v37
                                  + 8
                                  * ((v32 >> (v34 - v37)) & 1 | (2
                                                                             * ((v33 >> (v34 - v37)) & 1)))
                                  + 24552);
        v30 = *((_DWORD *)v40 + 1);
        v38 = *((_DWORD *)v40 + 2);
      }
      else
      {
        v39 = a6 != 3;
        v40 = v136;
      }
      if (v17 < v16)
      {
        v42 = **((unsigned __int8 **)v40 + 17);
        v43 = *(unsigned __int8 **)&v40[8 * v39 + 136];
        v44 = *((_QWORD *)v43 + 7);
        result = *(_QWORD *)v44;
        v45 = (_WORD *)(*(_QWORD *)v44
                      + (*((_QWORD *)v43 + 8) + v28 - v30 + *v43 * (uint64_t)(v29 - v38)) * *(int *)(v44 + 16));
        v46 = v16 - (uint64_t)v17;
        v47 = &a9[2 * v17];
        do
        {
          *(_WORD *)v47 = *v45;
          v47 += 2;
          v45 += v42;
          --v46;
        }
        while (v46);
      }
    }
    v130 = (a7 & 0xF) != 0;
    if ((a7 & 0xF0) != 0)
    {
      v48 = a2 - 1;
      v49 = *((_DWORD *)v136 + 1);
      v21 = &a9[2 * v16];
      if (v49 >= a2 || (v50 = *v136, v49 + v50 < a2) || (v58 = *((_DWORD *)v136 + 2), v58 > a3) || v58 + v50 <= a3)
      {
        v51 = v48 - v132;
        v52 = *(unsigned __int8 *)(v18 + 2113);
        if (a4 < 0)
        {
          v54 = -1;
          v23 = a9;
        }
        else
        {
          v53 = v52 - a4;
          v23 = a9;
          while (v20 >> v53 != v51 >> v53)
          {
            v36 = v53++ < v52;
            if (!v36)
            {
              v54 = -1;
              goto LABEL_48;
            }
          }
          v55 = v52 - v53;
          if (v55 >= a4)
            v54 = v55;
          else
            v54 = v55 + 1;
        }
LABEL_48:
        v56 = 0;
        v57 = *(unsigned __int8 **)(v10
                                  + 32 * v54
                                  + 8
                                  * ((v51 >> (v52 - v54)) & 1 | (2
                                                                             * ((v133 >> (v52 - v54)) & 1)))
                                  + 24552);
        v49 = *((_DWORD *)v57 + 1);
        v58 = *((_DWORD *)v57 + 2);
      }
      else
      {
        v56 = a6 != 3;
        v57 = v136;
        v23 = a9;
      }
      if (a8 != 31)
      {
        v59 = **((unsigned __int8 **)v57 + 17);
        v60 = *(unsigned __int8 **)&v57[8 * v56 + 136];
        v61 = (_WORD *)(**((_QWORD **)v60 + 7)
                      + (*((_QWORD *)v60 + 8) + v48 - v49 + *v60 * (uint64_t)(a3 - v58))
                      * *(int *)(*((_QWORD *)v60 + 7) + 16));
        if (v17 <= 1)
          v62 = 1;
        else
          v62 = v17;
        v63 = v23;
        do
        {
          *v63++ = *v61;
          v61 += v59;
          --v62;
        }
        while (v62);
      }
      v131 = 1;
    }
    else
    {
      v131 = 0;
      v21 = &a9[2 * v16];
      v23 = a9;
    }
  }
  if (a3 == v134)
  {
    if ((a7 & 0x1E00) != 0)
    {
      result = (uint64_t)memcpy(v21, (const void *)(v128 + 4 * v129 + 2 * v20), 2 * v17);
      v27 = v136;
    }
    if ((a7 & 0x1E000) != 0)
    {
      v64 = v17;
      v65 = (const void *)(v128 + 4 * v129 + 2 * v20 + 2 * v17);
      goto LABEL_99;
    }
LABEL_83:
    v87 = 0;
    if ((a7 & 0x100) != 0)
      goto LABEL_100;
    goto LABEL_122;
  }
  if ((a7 & 0x1E00) != 0)
  {
    v66 = a3 - 1;
    v67 = *((_DWORD *)v27 + 1);
    if (v67 > a2 || (v68 = *v27, v67 + v68 <= a2) || (v69 = *((_DWORD *)v27 + 2), v69 >= a3) || v69 + v68 < a3)
    {
      v72 = *(_DWORD *)(v10 + 24528);
      v73 = v66 - v72;
      v74 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
      if (a4 < 0)
      {
LABEL_71:
        v77 = -1;
      }
      else
      {
        v75 = a3 - v72;
        v76 = v74 - a4;
        while (v75 >> v76 != v73 >> v76)
        {
          v36 = v76++ < v74;
          if (!v36)
            goto LABEL_71;
        }
        if (v74 - v76 >= a4)
          v77 = v74 - v76;
        else
          v77 = v74 - v76 + 1;
      }
      v70 = 0;
      v71 = *(unsigned __int8 **)(v10
                                + 32 * v77
                                + 8
                                * (((a2 - *v135) >> (v74 - v77)) & 1 | (2
                                                                                    * ((v73 >> (v74 - v77)) & 1)))
                                + 24552);
      v67 = *((_DWORD *)v71 + 1);
      v69 = *((_DWORD *)v71 + 2);
    }
    else
    {
      v70 = a6 != 3;
      v71 = v27;
    }
    v78 = v66 - v69;
    v79 = *(unsigned __int8 **)&v71[8 * v70 + 136];
    result = (uint64_t)memcpy(v21, (const void *)(**((_QWORD **)v79 + 7)+ (*((_QWORD *)v79 + 8) + a2 - v67 + *v79 * (uint64_t)v78)* *(int *)(*((_QWORD *)v79 + 7) + 16)), 2 * v17);
    v27 = v136;
  }
  if ((a7 & 0x1E000) == 0)
    goto LABEL_83;
  v80 = v17 + a2;
  v81 = a3 - 1;
  v82 = *((_DWORD *)v27 + 1);
  if (v82 > v17 + a2 || (v83 = *v27, v82 + v83 <= v80) || (v84 = *((_DWORD *)v27 + 2), v84 >= a3) || v84 + v83 < a3)
  {
    v88 = *(_DWORD *)(v10 + 24528);
    v89 = v80 - *v135;
    v90 = v81 - v88;
    v91 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
    if (a4 < 0)
    {
LABEL_90:
      v94 = -1;
    }
    else
    {
      v92 = a3 - v88;
      v93 = v91 - a4;
      while ((a2 - *v135) >> v93 != v89 >> v93 || v92 >> v93 != v90 >> v93)
      {
        v36 = v93++ < v91;
        if (!v36)
          goto LABEL_90;
      }
      if (v91 - v93 >= a4)
        v94 = v91 - v93;
      else
        v94 = v91 - v93 + 1;
    }
    v85 = 0;
    v86 = *(unsigned __int8 **)(v10
                              + 32 * v94
                              + 8
                              * ((v89 >> (v91 - v94)) & 1 | (2 * ((v90 >> (v91 - v94)) & 1)))
                              + 24552);
    v82 = *((_DWORD *)v86 + 1);
    v84 = *((_DWORD *)v86 + 2);
  }
  else
  {
    v85 = a6 != 3;
    v86 = v27;
  }
  v95 = v80 - v82;
  v96 = *(unsigned __int8 **)&v86[8 * v85 + 136];
  v65 = (const void *)(**((_QWORD **)v96 + 7)
                     + (*((_QWORD *)v96 + 8) + v95 + *v96 * (uint64_t)(v81 - v84))
                     * *(int *)(*((_QWORD *)v96 + 7) + 16));
  v64 = v17;
LABEL_99:
  result = (uint64_t)memcpy(&v21[2 * v64], v65, 2 * v64);
  v87 = 1;
  v27 = v136;
  if ((a7 & 0x100) != 0)
  {
LABEL_100:
    if (a2 == v132 || a3 == v134)
    {
      v103 = v20 + 2 * v129;
      if (v20 <= 0)
        v103 = 0;
      v104 = (_WORD *)(v128 + 2 * v133 + 2 * v103 - 2);
    }
    else
    {
      v97 = a2 - 1;
      v98 = a3 - 1;
      v99 = *((_DWORD *)v27 + 1);
      if (v99 >= a2 || (v100 = *v27, v99 + v100 < a2) || (v101 = *((_DWORD *)v27 + 2), v101 >= a3) || v101 + v100 < a3)
      {
        v105 = *(_DWORD *)(v10 + 24528);
        v106 = v97 - *v135;
        v107 = v98 - v105;
        v108 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_115:
          v111 = -1;
        }
        else
        {
          v109 = a3 - v105;
          v110 = v108 - a4;
          while (1)
          {
            result = (v106 >> v110);
            if ((a2 - *v135) >> v110 == (_DWORD)result)
            {
              result = (v107 >> v110);
              if (v109 >> v110 == (_DWORD)result)
                break;
            }
            v36 = v110++ < v108;
            if (!v36)
              goto LABEL_115;
          }
          if (v108 - v110 >= a4)
            v111 = v108 - v110;
          else
            v111 = v108 - v110 + 1;
        }
        v102 = 0;
        v27 = *(unsigned __int8 **)(v10
                                  + 32 * v111
                                  + 8
                                  * ((v106 >> (v108 - v111)) & 1 | (2
                                                                                * ((v107 >> (v108 - v111)) & 1)))
                                  + 24552);
        v99 = *((_DWORD *)v27 + 1);
        v101 = *((_DWORD *)v27 + 2);
      }
      else
      {
        v102 = a6 != 3;
      }
      v112 = v97 - v99;
      v113 = *(unsigned __int8 **)&v27[8 * v102 + 136];
      v104 = (_WORD *)(**((_QWORD **)v113 + 7)
                     + (*((_QWORD *)v113 + 8) + v112 + *v113 * (uint64_t)(v98 - v101))
                     * *(int *)(*((_QWORD *)v113 + 7) + 16));
    }
    *(v23 - 1) = *v104;
  }
LABEL_122:
  if (!v130)
  {
    if (v131)
    {
      v114 = (char *)&v23[v17 - 1];
    }
    else if ((a7 & 0x100) != 0)
    {
      v114 = (char *)(v23 - 1);
    }
    else
    {
      v114 = v21;
      if ((a7 & 0x1E00) == 0)
        v114 = &v21[2 * v17];
    }
    v115 = *(_WORD *)v114;
    v116 = v17;
    v117 = &v23[v17];
    do
    {
      *v117++ = v115;
      --v116;
    }
    while (v116);
  }
  if (!v131)
  {
    v118 = v17;
    v119 = v23[v17];
    v120 = v23;
    do
    {
      *v120++ = v119;
      --v118;
    }
    while (v118);
  }
  if ((a7 & 0x100) == 0)
    *(v23 - 1) = *v23;
  if ((a7 & 0x1E00) == 0)
  {
    v121 = v17;
    v122 = *(v23 - 1);
    v123 = v21;
    do
    {
      *(_WORD *)v123 = v122;
      v123 += 2;
      --v121;
    }
    while (v121);
  }
  if ((v87 & 1) == 0)
  {
    v124 = v17;
    v125 = &v21[2 * v17];
    v126 = *((_WORD *)v125 - 1);
    do
    {
      *(_WORD *)v125 = v126;
      v125 += 2;
      --v124;
    }
    while (v124);
  }
  *(_BYTE *)(v10 + 24794) = 1;
  return result;
}

uint64_t sub_1C97BFA74(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8, int a9, char *__dst)
{
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  BOOL v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  int *v42;
  _DWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _WORD *v84;
  char *v85;
  uint64_t v86;
  int v87;
  BOOL v88;
  int v89;
  int v90;
  int v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _WORD *v101;
  uint64_t v102;
  char *v103;
  int v104;
  int v105;
  BOOL v106;
  unsigned __int8 *v107;
  char v108;
  unsigned __int8 *v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  const void *v115;
  int v116;
  unsigned __int8 *v117;
  int v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  BOOL v122;
  unsigned int v123;
  unsigned __int8 *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned __int8 *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  unsigned __int8 *v161;
  int v162;
  uint64_t v163;
  _WORD *v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  __int16 *v179;
  __int16 v180;
  int v181;
  char *v182;
  uint64_t v183;
  int v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  _BOOL4 v203;
  int v204;
  int v205;
  int v206;
  uint64_t v208;
  int v209;
  int v210;
  int v212;

  v10 = result;
  v11 = a9;
  if (!a8)
  {
    v32 = (8 << a9) | 2;
    v33 = 128 << *(_BYTE *)(*(_QWORD *)(result + 14848) + 223);
    v34 = __dst - 4;
    do
    {
      *(_WORD *)v34 = v33;
      v34 += 2;
      --v32;
    }
    while (v32);
    return result;
  }
  v12 = a8;
  v14 = a3;
  v16 = result + 24524;
  if (!*(_BYTE *)(result + 24793) && (*(_DWORD *)v16 == a2 || *(_DWORD *)(result + 24528) == a3))
    result = sub_1C97C08C0(result, 1u);
  v17 = 4 << a9;
  v18 = 2 << (a9 + 1);
  v19 = *(_DWORD *)(v10 + 16);
  v20 = v18 + a2 - v19;
  v21 = v18 + v14 - *(_DWORD *)(v10 + 20);
  v204 = v12 & 0x1E000;
  v22 = v20 > 1 && (v12 & 0x1E000) != 0;
  v23 = (v12 & 0xF) != 0;
  v24 = v21 > 1 && (v12 & 0xF) != 0;
  if (v22 || v24)
  {
    v25 = *(_DWORD *)v16;
    if (v22)
    {
      v26 = *(_DWORD *)(v10 + 24528);
      v27 = v14 - v26;
      if (v14 != v26)
      {
        v28 = (v20 >> 1);
        v29 = v19 - 2;
        v30 = v14 - 1;
        if (*(_BYTE *)(v10 + 8) && *((_DWORD *)a5 + 2) == v14)
        {
          v31 = (uint64_t *)(v10 + 24552);
        }
        else
        {
          v35 = v29 - v25;
          v36 = v30 - v26;
          v37 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_27:
            v40 = -1;
          }
          else
          {
            v38 = v37 - a4;
            while ((a2 - v25) >> v38 != v35 >> v38 || v27 >> v38 != v36 >> v38)
            {
              v39 = v38++ < v37;
              if (!v39)
                goto LABEL_27;
            }
            v40 = v37 - v38;
            if (v37 - v38 < a4)
              ++v40;
          }
          result = (v37 - v40);
          v31 = (uint64_t *)(v10
                          + 32 * v40
                          + 8 * ((v35 >> result) & 1 | (2 * ((v36 >> result) & 1)))
                          + 24552);
        }
        v41 = *v31;
        v42 = (int *)(**(_QWORD **)(*(_QWORD *)(v41 + 136) + 72)
                    + (*(_QWORD *)(*(_QWORD *)(v41 + 136) + 80)
                     - *(int *)(v41 + 4)
                     + v29
                     + 2
                     * *(unsigned __int8 *)(*(_QWORD *)(v41 + 136) + 1)
                     * (uint64_t)((v30 - *(_DWORD *)(v41 + 8)) >> 1))
                    * *(int *)(*(_QWORD *)(*(_QWORD *)(v41 + 136) + 72) + 16));
        v45 = *v42;
        v43 = v42 + 1;
        v44 = v45;
        do
        {
          *v43++ = v44;
          --v28;
        }
        while (v28);
      }
    }
    if (a2 == v25)
      v24 = 0;
    if (v24)
    {
      v46 = (v21 >> 1);
      v47 = a2 - 2;
      v48 = *(_DWORD *)(v10 + 20) - 1;
      if (*(_BYTE *)(v10 + 8) && *((_DWORD *)a5 + 1) == a2)
      {
        v49 = (uint64_t *)(v10 + 24552);
      }
      else
      {
        v50 = *(_DWORD *)(v10 + 24528);
        v51 = v47 - *(_DWORD *)v16;
        v52 = v48 - v50;
        v53 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_44:
          v56 = -1;
        }
        else
        {
          v54 = v14 - v50;
          v55 = v53 - a4;
          while (1)
          {
            if ((a2 - *(_DWORD *)v16) >> v55 == v51 >> v55)
            {
              result = (v54 >> v55);
              if ((_DWORD)result == v52 >> v55)
                break;
            }
            result = (v55 + 1);
            v39 = v55++ < v53;
            if (!v39)
              goto LABEL_44;
          }
          v56 = v53 - v55;
          if (v53 - v55 < a4)
            ++v56;
        }
        v49 = (uint64_t *)(v10
                        + 32 * v56
                        + 8
                        * ((v51 >> (v53 - v56)) & 1 | (2 * ((v52 >> (v53 - v56)) & 1)))
                        + 24552);
      }
      v57 = *v49;
      v58 = *(_QWORD *)(v57 + 136);
      v59 = *(unsigned __int8 *)(v58 + 1);
      v60 = (_DWORD *)(**(_QWORD **)(v58 + 72)
                     + (*(_QWORD *)(v58 + 80) - *(int *)(v57 + 4) + v47 + 2 * v59 * ((v48 - *(_DWORD *)(v57 + 8)) >> 1))
                     * *(int *)(*(_QWORD *)(v58 + 72) + 16));
      v61 = &v60[v59];
      do
      {
        *v61 = *v60;
        v61 += v59;
        --v46;
      }
      while (v46);
    }
  }
  v62 = &__dst[2 * v17];
  v63 = *(_QWORD *)(v10 + 14848);
  v202 = *(unsigned __int8 *)(v63 + 2117);
  v208 = *(_QWORD *)(v10 + 24768);
  v209 = *(_DWORD *)(v10 + 24528);
  v212 = v14 - v209;
  v201 = *(_DWORD *)v16;
  v64 = a2 - *(_DWORD *)v16;
  v205 = v64;
  if (a2 == *(_DWORD *)v16)
  {
    v203 = (v12 & 0xF0) != 0;
    if ((v12 & 0xF0) != 0)
    {
      result = (uint64_t)memcpy(__dst, (const void *)(v208 + 2 * v212), 2 * (2 << a9));
      v64 = v205;
    }
    if ((v12 & 0xF) != 0)
    {
      result = (uint64_t)memcpy(&__dst[2 * (2 << a9)], (const void *)(v208 + 2 * v212 + 2 * (2 << a9)), 2 * (2 << a9));
      v64 = v205;
      v23 = 1;
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    if ((v12 & 0xF) != 0)
    {
      v65 = a2 - 2;
      v66 = 2 << a9;
      v67 = (2 << a9) + v14;
      v68 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(v10 + 8) && v68 == a2)
      {
        v69 = 0;
        v70 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        if (v68 > (int)v65
          || (v71 = *a5, v68 + v71 <= (int)v65)
          || (v72 = *((_DWORD *)a5 + 2), v72 > v67)
          || (v73 = v72 + v71, v70 = a5, v73 <= v67))
        {
          v74 = v65 - v201;
          v75 = v67 - v209;
          v76 = *(unsigned __int8 *)(v63 + 2113);
          if (a4 < 0)
          {
LABEL_67:
            v78 = -1;
          }
          else
          {
            v77 = v76 - a4;
            while (1)
            {
              result = (v74 >> v77);
              if (v64 >> v77 == (_DWORD)result)
              {
                result = (v75 >> v77);
                if (v212 >> v77 == (_DWORD)result)
                  break;
              }
              v39 = v77++ < v76;
              if (!v39)
                goto LABEL_67;
            }
            v78 = v76 - v77;
            if (v78 < a4)
              ++v78;
          }
          v70 = *(unsigned __int8 **)(v10
                                    + 32 * v78
                                    + 8
                                    * ((v74 >> (v76 - v78)) & 1 | (2
                                                                               * ((v75 >> (v76 - v78)) & 1)))
                                    + 24552);
        }
        v69 = a6;
        if (v70 != a5)
          v69 = 0;
      }
      if (v66 < v17)
      {
        v79 = *(unsigned __int8 *)(*((_QWORD *)v70 + 17) + 1);
        v80 = *(_QWORD *)&v70[8 * v69 + 136];
        v81 = *(_QWORD *)(v80 + 72);
        result = *(_QWORD *)v81;
        v82 = *(_QWORD *)(v80 + 80)
            + v65
            - *((int *)v70 + 1)
            + 2 * *(unsigned __int8 *)(v80 + 1) * (uint64_t)((v67 - *((_DWORD *)v70 + 2)) >> 1);
        v83 = v66;
        v84 = (_WORD *)(*(_QWORD *)v81 + v82 * *(int *)(v81 + 16) + 2);
        v85 = &__dst[2 * v66 + 2];
        do
        {
          *((_WORD *)v85 - 1) = *(v84 - 1);
          *(_WORD *)v85 = *v84;
          v85 += 4;
          v83 += 2;
          v84 += 2 * v79;
        }
        while (v83 < v17);
      }
    }
    if ((v12 & 0xF0) != 0)
    {
      v86 = a2 - 2;
      v87 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(v10 + 8))
        v88 = v87 == a2;
      else
        v88 = 0;
      if (v88)
      {
        v97 = 0;
        v92 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        if (v87 > (int)v86
          || (v89 = *a5, v87 + v89 <= (int)v86)
          || (v90 = *((_DWORD *)a5 + 2), v90 > v14)
          || (v91 = v90 + v89, v92 = a5, v91 <= v14))
        {
          v93 = v86 - v201;
          v94 = *(unsigned __int8 *)(v63 + 2113);
          if (a4 < 0)
          {
LABEL_92:
            v96 = -1;
          }
          else
          {
            v95 = v94 - a4;
            while (v64 >> v95 != v93 >> v95)
            {
              v39 = v95++ < v94;
              if (!v39)
                goto LABEL_92;
            }
            v96 = v94 - v95;
            if (v96 < a4)
              ++v96;
          }
          v92 = *(unsigned __int8 **)(v10
                                    + 32 * v96
                                    + 8
                                    * ((v93 >> (v94 - v96)) & 1 | (2
                                                                               * ((v212 >> (v94 - v96)) & 1)))
                                    + 24552);
        }
        if (v92 == a5)
          v97 = a6;
        else
          v97 = 0;
      }
      v98 = (2 << a9);
      if ((int)v98 >= 1)
      {
        v99 = 0;
        v100 = *(_QWORD *)&v92[8 * v97 + 136];
        v101 = (_WORD *)(**(_QWORD **)(v100 + 72)
                       + (*(_QWORD *)(v100 + 80)
                        + v86
                        - *((int *)v92 + 1)
                        + 2 * *(unsigned __int8 *)(v100 + 1) * (uint64_t)((v14 - *((_DWORD *)v92 + 2)) >> 1))
                       * *(int *)(*(_QWORD *)(v100 + 72) + 16)
                       + 2);
        v102 = 4 * *(unsigned __int8 *)(*((_QWORD *)v92 + 17) + 1);
        do
        {
          v103 = &__dst[2 * v99];
          *(_WORD *)v103 = *(v101 - 1);
          *((_WORD *)v103 + 1) = *v101;
          v99 += 2;
          v101 = (_WORD *)((char *)v101 + v102);
        }
        while (v99 < v98);
      }
      v203 = 1;
    }
    else
    {
      v203 = 0;
    }
  }
  v210 = a2;
  v104 = v12 & 0x1E00;
  if (v14 != v209)
  {
    v206 = a9;
    v107 = a5;
    if ((v12 & 0x1E00) != 0)
    {
      v116 = v14 - 1;
      if (*(_BYTE *)(v10 + 8) && *((_DWORD *)a5 + 2) == v14)
      {
        v117 = a5;
        v118 = v14;
        v119 = v12 & 0x1E00;
        v120 = v12;
        v12 = a4;
        v121 = v10 + 24524;
        v122 = v23;
        v123 = 0;
        v124 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        v125 = *((_DWORD *)a5 + 1);
        if (v125 > a2
          || (v126 = *a5, v125 + v126 <= a2)
          || (v127 = *((_DWORD *)a5 + 2), v127 >= v14)
          || (v128 = v127 + v126, v124 = a5, v128 < v14))
        {
          v129 = *(_DWORD *)(v10 + 24528);
          v130 = v116 - v129;
          v131 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_122:
            v134 = -1;
          }
          else
          {
            v132 = v14 - v129;
            v133 = v131 - a4;
            while (v132 >> v133 != v130 >> v133)
            {
              v39 = v133++ < v131;
              if (!v39)
                goto LABEL_122;
            }
            v134 = v131 - v133;
            if (v131 - v133 < a4)
              ++v134;
          }
          v124 = *(unsigned __int8 **)(v10
                                     + 32 * v134
                                     + 8
                                     * (((a2 - *(_DWORD *)v16) >> (v131 - v134)) & 1 | (2 * ((v130 >> (v131 - v134)) & 1)))
                                     + 24552);
        }
        v118 = v14;
        v119 = v12 & 0x1E00;
        v120 = v12;
        v12 = a4;
        v121 = v10 + 24524;
        v122 = v23;
        v117 = a5;
        v123 = a6;
        if (v124 != a5)
          v123 = 0;
      }
      v136 = *((_DWORD *)v124 + 2);
      v137 = *((int *)v124 + 1);
      v138 = *(_QWORD *)&v124[8 * v123 + 136];
      result = (uint64_t)memcpy(v62, (const void *)(**(_QWORD **)(v138 + 72)+ (*(_QWORD *)(v138 + 80)- v137+ v210+ 2 * *(unsigned __int8 *)(v138 + 1) * (uint64_t)((v116 - v136) >> 1))* *(int *)(*(_QWORD *)(v138 + 72) + 16)), 2 * (2 << a9));
      v23 = v122;
      v16 = v121;
      a4 = v12;
      LOWORD(v12) = v120;
      v104 = v119;
      v14 = v118;
      v107 = v117;
    }
    v108 = v204;
    if (!v204)
    {
      v135 = v210;
LABEL_152:
      v11 = v206;
      goto LABEL_153;
    }
    LODWORD(v114) = 2 << a9;
    v139 = (2 << a9) + v210;
    v140 = v14 - 1;
    if (*(_BYTE *)(v10 + 8) && *((_DWORD *)v107 + 2) == v14)
    {
      v105 = v14;
      v110 = v104;
      v111 = v12;
      v12 = a4;
      v112 = v16;
      v141 = 0;
      v142 = *(unsigned __int8 **)(v10 + 24552);
    }
    else
    {
      v143 = *((_DWORD *)v107 + 1);
      if (v143 > v139
        || (v144 = *v107, v143 + v144 <= v139)
        || (v145 = *((_DWORD *)v107 + 2), v145 >= v14)
        || (v146 = v145 + v144, v142 = v107, v146 < v14))
      {
        v147 = *(_DWORD *)(v16 + 4);
        v148 = v139 - *(_DWORD *)v16;
        v149 = v140 - v147;
        v150 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_143:
          v153 = -1;
        }
        else
        {
          v151 = v14 - v147;
          v152 = v150 - a4;
          while ((v210 - *(_DWORD *)v16) >> v152 != v148 >> v152 || v151 >> v152 != v149 >> v152)
          {
            v39 = v152++ < v150;
            if (!v39)
              goto LABEL_143;
          }
          v153 = v150 - v152;
          if (v150 - v152 < a4)
            ++v153;
        }
        v142 = *(unsigned __int8 **)(v10
                                   + 32 * v153
                                   + 8
                                   * ((v148 >> (v150 - v153)) & 1 | (2
                                                                                 * ((v149 >> (v150 - v153)) & 1)))
                                   + 24552);
      }
      v105 = v14;
      v110 = v104;
      v111 = v12;
      v12 = a4;
      v112 = v16;
      v141 = a6;
      if (v142 != v107)
        v141 = 0;
    }
    v109 = v107;
    v113 = v23;
    v154 = *((_DWORD *)v142 + 2);
    v155 = *((int *)v142 + 1);
    v156 = *(_QWORD *)&v142[8 * v141 + 136];
    v115 = (const void *)(**(_QWORD **)(v156 + 72)
                        + (*(_QWORD *)(v156 + 80)
                         - v155
                         + v139
                         + 2 * *(unsigned __int8 *)(v156 + 1) * (uint64_t)((v140 - v154) >> 1))
                        * *(int *)(*(_QWORD *)(v156 + 72) + 16));
    v114 = (int)v114;
LABEL_151:
    result = (uint64_t)memcpy(&v62[2 * v114], v115, 2 * v114);
    v108 = 1;
    v23 = v113;
    v16 = v112;
    a4 = v12;
    LOWORD(v12) = v111;
    v104 = v110;
    v14 = v105;
    v135 = v210;
    v107 = v109;
    goto LABEL_152;
  }
  v105 = v14;
  if ((v12 & 0x1E00) != 0)
  {
    v106 = v23;
    result = (uint64_t)memcpy(v62, (const void *)(v208 + 4 * v202 + 2 * v64), 2 * (2 << a9));
    v104 = v12 & 0x1E00;
    v64 = v205;
    v23 = v106;
  }
  v107 = a5;
  v108 = 0;
  if (v204)
  {
    v109 = a5;
    v110 = v104;
    v111 = v12;
    v12 = a4;
    v112 = v10 + 24524;
    v113 = v23;
    v206 = a9;
    v114 = 2 << a9;
    v115 = (const void *)(v208 + 4 * v202 + 2 * v64 + 2 * v114);
    goto LABEL_151;
  }
  v135 = v210;
LABEL_153:
  if ((v12 & 0x100) != 0)
  {
    if (v135 == v201 || v14 == v209)
    {
      v162 = v205 + 2 * v202;
      if (v205 <= 0)
        v162 = 0;
      v163 = v208 + 2 * v212 + 2 * v162;
      *((_WORD *)__dst - 2) = *(_WORD *)(v163 - 4);
      v164 = (_WORD *)(v163 - 2);
    }
    else
    {
      v157 = v135 - 2;
      v158 = v14 - 1;
      v159 = *((_DWORD *)v107 + 1);
      if (*(_BYTE *)(v10 + 8) && (v159 == v135 || *((_DWORD *)v107 + 2) == v14))
      {
        v160 = 0;
        v161 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        if (v159 > (int)v157
          || (v165 = *v107, v159 + v165 <= (int)v157)
          || (v166 = *((_DWORD *)v107 + 2), v166 >= v14)
          || (v167 = v166 + v165, v161 = v107, v167 < v14))
        {
          v168 = *(_DWORD *)(v16 + 4);
          v169 = v157 - *(_DWORD *)v16;
          v170 = v158 - v168;
          v171 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_172:
            v175 = -1;
          }
          else
          {
            v172 = v135 - *(_DWORD *)v16;
            v173 = v14 - v168;
            v174 = v171 - a4;
            while (1)
            {
              if (v172 >> v174 == v169 >> v174)
              {
                result = (v173 >> v174);
                if ((_DWORD)result == v170 >> v174)
                  break;
              }
              result = (v174 + 1);
              v39 = v174++ < v171;
              if (!v39)
                goto LABEL_172;
            }
            v175 = v171 - v174;
            if (v171 - v174 < a4)
              ++v175;
          }
          v161 = *(unsigned __int8 **)(v10
                                     + 32 * v175
                                     + 8
                                     * ((v169 >> (v171 - v175)) & 1 | (2
                                                                                   * ((v170 >> (v171 - v175)) & 1)))
                                     + 24552);
        }
        v160 = a6;
        if (v161 != v107)
          v160 = 0;
      }
      v176 = *((_DWORD *)v161 + 2);
      v177 = *((int *)v161 + 1);
      v178 = *(_QWORD *)&v161[8 * v160 + 136];
      v179 = (__int16 *)(**(_QWORD **)(v178 + 72)
                       + (*(_QWORD *)(v178 + 80)
                        + v157
                        - v177
                        + 2 * *(unsigned __int8 *)(v178 + 1) * (uint64_t)((v158 - v176) >> 1))
                       * *(int *)(*(_QWORD *)(v178 + 72) + 16));
      v180 = *v179;
      v164 = v179 + 1;
      *((_WORD *)__dst - 2) = v180;
    }
    *((_WORD *)__dst - 1) = *v164;
  }
  v181 = 1 << v11;
  if (!v23)
  {
    if (v203)
    {
      v182 = &__dst[2 * (2 << v11) - 4];
    }
    else if ((v12 & 0x100) != 0)
    {
      v182 = __dst - 4;
    }
    else
    {
      v182 = v62;
      if (!v104)
        v182 = &v62[2 * (2 << v11)];
    }
    if (v181 < 2 << v11)
    {
      v183 = (2 << v11) - (uint64_t)v181;
      v184 = 2 * v181;
      do
      {
        *(_WORD *)&__dst[2 * v184] = *(_WORD *)v182;
        *(_WORD *)&__dst[2 * v184 + 2] = *((_WORD *)v182 + 1);
        v184 += 2;
        --v183;
      }
      while (v183);
    }
  }
  v185 = v11 == 31 || v203;
  if ((v185 & 1) == 0)
  {
    v186 = 0;
    v187 = 0;
    v188 = 2 << v11;
    if (v181 <= 1)
      v189 = 1;
    else
      v189 = 1 << v11;
    v190 = 2 * v189;
    do
    {
      *(_WORD *)&__dst[v186 >> 31] = *(_WORD *)&__dst[2 * v188];
      *(_WORD *)&__dst[2 * (int)v187 + 2] = *(_WORD *)&__dst[2 * (v188 | 1)];
      v187 += 2;
      v186 += 0x200000000;
    }
    while (v190 != v187);
  }
  if ((v12 & 0x100) == 0)
    *((_DWORD *)__dst - 1) = *(_DWORD *)__dst;
  if (v11 != 31 && !v104)
  {
    v191 = 0;
    v192 = 0;
    if (v181 <= 1)
      v193 = 1;
    else
      v193 = 1 << v11;
    v194 = 2 * v193;
    do
    {
      *(_WORD *)&v62[v191 >> 31] = *((_WORD *)__dst - 2);
      *(_WORD *)&v62[2 * (int)v192 + 2] = *((_WORD *)__dst - 1);
      v192 += 2;
      v191 += 0x200000000;
    }
    while (v194 != v192);
  }
  if ((v108 & 1) == 0)
  {
    v195 = 2 << v11;
    if (v181 < 2 << v11)
    {
      v196 = v195;
      v197 = v195 - 2;
      v198 = v196 - 1;
      v199 = v196 - v181;
      v200 = 2 * v181;
      do
      {
        *(_WORD *)&v62[2 * v200] = *(_WORD *)&v62[2 * v197];
        *(_WORD *)&v62[2 * v200 + 2] = *(_WORD *)&v62[2 * v198];
        v200 += 2;
        --v199;
      }
      while (v199);
    }
  }
  *(_BYTE *)(v16 + 271) = 1;
  return result;
}

uint64_t sub_1C97C08C0(uint64_t a1, unsigned int a2)
{
  int *v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = (int *)(a1 + 24524);
  v5 = *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113);
  v6 = v5 - a2;
  ((void (*)(_QWORD, _QWORD, _QWORD, BOOL, BOOL))*(&off_1E8292208[2
                                                                           * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8)
                                                                                                + 531)]
                                                            + a2))((*(int *)(a1 + 24524) >> a2), (*(int *)(a1 + 24528) >> a2), (2 << (v5 - a2)), (*(_DWORD *)(a1 + 24532) & 0xF) != 0, (*(_DWORD *)(a1 + 24532) & 0x1E000) != 0);
  ((void (*)(_QWORD, _QWORD, _QWORD, BOOL, BOOL))*(&off_1E8292208[2
                                                                           * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8)
                                                                                                + 531)]
                                                            + a2))((*v4 >> a2), (v4[1] >> a2), (1 << v6), (v4[2] & 0xF0) != 0, (v4[2] & 0x1E00) != 0);
  v7 = *(_QWORD *)(a1 + 14840);
  v8 = v7 + 8 * a2;
  v9 = *(_QWORD *)(v7 + 8);
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, _QWORD))(v8 + 2280))(v6, v4[2], *(uint64_t *)(v9 + 8 * a2 + 416) >> a2, *(_QWORD *)(v9 + 8 * a2 + 400)+ (((*v4 & (unint64_t)(-1 << a2)) + *(_QWORD *)(v9 + 8 * a2 + 416) * (v4[1] >> a2)) << *(_BYTE *)(v9 + 531)), *(_QWORD *)(a1 + 8 * a2 + 24760));
  *(_BYTE *)(a1 + a2 + 24792) = 1;
  return result;
}

uint64_t sub_1C97C09F8(uint64_t result, int a2, int a3, int a4, uint64_t a5, char a6, int a7, unsigned int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 *v31;
  _WORD *v32;
  __int16 v33;
  __int16 v34;
  int v35;
  int v37;
  int v38;
  uint64_t *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _WORD *v50;
  _WORD *v51;

  v9 = *(_DWORD *)(result + 16);
  v8 = *(_DWORD *)(result + 20);
  v10 = (((2 << a6) + a2 - v9) >> a8);
  v11 = (((2 << a6) + a3 - v8) >> a8);
  v12 = (a7 & 0x1E000) == 0 || (int)v10 <= 0;
  v13 = !v12;
  v15 = (a7 & 0xF) != 0 && (int)v11 > 0;
  if ((v13 & 1) != 0 || v15)
  {
    v16 = *(_DWORD *)(result + 24524);
    if (v13)
    {
      v17 = *(_DWORD *)(result + 24528);
      v18 = a3 - v17;
      if (a3 != v17)
      {
        v19 = v9 + (-1 << a8);
        v20 = a3 - 1;
        if (a8 && *(_BYTE *)(result + 8) && *(_DWORD *)(a5 + 8) == a3)
        {
          v21 = (uint64_t *)(result + 24552);
        }
        else
        {
          v22 = v19 - v16;
          v23 = v20 - v17;
          v24 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_26:
            v26 = -1;
          }
          else
          {
            v25 = v24 - a4;
            while ((a2 - v16) >> v25 != v22 >> v25 || v18 >> v25 != v23 >> v25)
            {
              v12 = v25++ < v24;
              if (!v12)
                goto LABEL_26;
            }
            v26 = v24 - v25;
            if (v24 - v25 < a4)
              ++v26;
          }
          v21 = (uint64_t *)(result
                          + 32 * v26
                          + 8
                          * ((v22 >> (v24 - v26)) & 1 | (2 * ((v23 >> (v24 - v26)) & 1)))
                          + 24552);
        }
        v27 = *v21;
        v28 = *(int *)(v27 + 4);
        v29 = v20 - *(_DWORD *)(v27 + 8);
        v30 = *(_QWORD *)(v27 + 136);
        v31 = (__int16 *)(**(_QWORD **)(v30 + 16 * a8 + 56)
                        + (*(_QWORD *)(v30 + 16 * a8 + 64)
                         - v28
                         + v19
                         + (*(unsigned __int8 *)(v30 + a8) << a8) * (uint64_t)(v29 >> a8))
                        * *(int *)(*(_QWORD *)(v30 + 16 * a8 + 56) + 16));
        v34 = *v31;
        v32 = v31 + 1;
        v33 = v34;
        do
        {
          *v32++ = v33;
          --v10;
        }
        while (v10);
      }
    }
    v35 = a2 - v16;
    if (a2 != v16 && v15)
    {
      v37 = (-1 << a8) + a2;
      v38 = v8 - 1;
      if (a8 && *(_BYTE *)(result + 8) && *(_DWORD *)(a5 + 4) == a2)
      {
        v39 = (uint64_t *)(result + 24552);
      }
      else
      {
        v40 = *(_DWORD *)(result + 24528);
        v41 = v37 - v16;
        v42 = v38 - v40;
        v43 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_45:
          v46 = -1;
        }
        else
        {
          v44 = a3 - v40;
          v45 = v43 - a4;
          while (v35 >> v45 != v41 >> v45 || v44 >> v45 != v42 >> v45)
          {
            v12 = v45++ < v43;
            if (!v12)
              goto LABEL_45;
          }
          v46 = v43 - v45;
          if (v43 - v45 < a4)
            ++v46;
        }
        v39 = (uint64_t *)(result
                        + 32 * v46
                        + 8
                        * ((v41 >> (v43 - v46)) & 1 | (2 * ((v42 >> (v43 - v46)) & 1)))
                        + 24552);
      }
      v47 = *v39;
      v48 = *(_QWORD *)(v47 + 136);
      v49 = *(unsigned __int8 *)(v48 + a8) << a8;
      v50 = (_WORD *)(**(_QWORD **)(v48 + 16 * a8 + 56)
                    + (*(_QWORD *)(v48 + 16 * a8 + 64)
                     - *(int *)(v47 + 4)
                     + v37
                     + v49 * ((v38 - *(_DWORD *)(v47 + 8)) >> a8))
                    * *(int *)(*(_QWORD *)(v48 + 16 * a8 + 56) + 16));
      v51 = &v50[v49 >> a8];
      do
      {
        *v51 = *v50;
        v51 += v49 >> a8;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void *sub_1C97C0CB0(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  size_t v10;
  uint64_t v11;

  if (a2)
  {
    v10 = (int)result;
    v11 = a2;
    do
    {
      --v11;
      result = memcpy(__dst, __src, v10);
      __dst += a5;
      __src += a3;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C97C0D14(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int i;
  uint64_t v7;

  if (a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        v7 = 0;
        do
        {
          *(_BYTE *)(a6 + v7) = *(_BYTE *)(a4 + v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a4 += a3;
      a6 += a5;
    }
  }
  return result;
}

uint64_t sub_1C97C0D5C(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, _BYTE *a9)
{
  uint64_t v10;
  int *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  char *v37;
  _BYTE *v38;
  char v39;
  char v40;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _BOOL8 v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  _BOOL8 v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t v89;
  unsigned __int8 *v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  BOOL v94;
  BOOL v95;
  char v96;
  int v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  _BOOL8 v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unsigned __int8 *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  _BOOL8 v117;
  unsigned __int8 *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  unsigned __int8 *v130;
  int v131;
  int v132;
  int v133;
  _BOOL8 v134;
  int v135;
  _BYTE *v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unsigned __int8 *v145;
  char *v146;
  BOOL v147;
  int v149;
  uint64_t v150;
  _BOOL4 v151;
  int v152;
  char *v153;
  unsigned int v154;
  unsigned __int8 *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v10 = result;
  if (!a7)
    return (uint64_t)memset(a9 - 1, 128 << *(_BYTE *)(*(_QWORD *)(result + 14848) + 222), (4 << a8) | 1);
  v14 = (int *)(result + 24524);
  v15 = 2 << a8;
  v16 = 2 << a8;
  v154 = a4;
  v155 = a5;
  if (!*(_BYTE *)(result + 24792) && (*v14 == a2 || *(_DWORD *)(result + 24528) == a3))
  {
    result = sub_1C97C08C0(result, 0);
    a5 = v155;
    a4 = v154;
  }
  v17 = *(_DWORD *)(v10 + 16);
  v18 = (v16 + a2 - v17);
  v19 = (v16 + a3 - *(_DWORD *)(v10 + 20));
  v152 = a7 & 0x1E000;
  v20 = (int)v18 > 0 && (a7 & 0x1E000) != 0;
  v21 = (a7 & 0xF) != 0;
  v22 = (int)v19 > 0 && (a7 & 0xF) != 0;
  if (v20 || v22)
  {
    v23 = *v14;
    if (v20)
    {
      v24 = *(_DWORD *)(v10 + 24528);
      result = (a3 - v24);
      if (a3 != v24)
      {
        v25 = v17 - 1;
        v26 = a3 - 1;
        v27 = v25 - v23;
        v28 = v26 - v24;
        v29 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_21:
          v32 = -1;
        }
        else
        {
          v30 = v29 - a4;
          while ((a2 - v23) >> v30 != v27 >> v30 || (int)result >> v30 != v28 >> v30)
          {
            v31 = v30++ < v29;
            if (!v31)
              goto LABEL_21;
          }
          v32 = v29 - v30;
          if (v29 - v30 < a4)
            ++v32;
        }
        v33 = *(_QWORD *)(v10
                        + 32 * v32
                        + 8
                        * ((v27 >> (v29 - v32)) & 1 | (2 * ((v28 >> (v29 - v32)) & 1)))
                        + 24552);
        v34 = *(int *)(v33 + 4);
        v35 = v26 - *(int *)(v33 + 8);
        v36 = *(unsigned __int8 **)(v33 + 136);
        result = *((_QWORD *)v36 + 7);
        v37 = (char *)(*(_QWORD *)result + (*((_QWORD *)v36 + 8) - v34 + v25 + *v36 * v35) * *(int *)(result + 16));
        v40 = *v37;
        v38 = v37 + 1;
        v39 = v40;
        do
        {
          *v38++ = v39;
          --v18;
        }
        while (v18);
      }
    }
    if (a2 != v23 && v22)
    {
      v42 = *(int *)(v10 + 20) - 1;
      v43 = *(_DWORD *)(v10 + 24528);
      v44 = a2 - 1 - *v14;
      v45 = v42 - v43;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
      if (a4 < 0)
      {
LABEL_36:
        v49 = -1;
      }
      else
      {
        v47 = a3 - v43;
        v48 = v46 - a4;
        while (1)
        {
          if ((a2 - *v14) >> v48 == v44 >> v48)
          {
            result = (v47 >> v48);
            if ((_DWORD)result == v45 >> v48)
              break;
          }
          result = (v48 + 1);
          v31 = v48++ < v46;
          if (!v31)
            goto LABEL_36;
        }
        v49 = v46 - v48;
        if (v46 - v48 < a4)
          ++v49;
      }
      v50 = *(_QWORD *)(v10
                      + 32 * v49
                      + 8 * ((v44 >> (v46 - v49)) & 1 | (2 * ((v45 >> (v46 - v49)) & 1)))
                      + 24552);
      v51 = *(unsigned __int8 **)(v50 + 136);
      v52 = *v51;
      v53 = (_BYTE *)(**((_QWORD **)v51 + 7)
                    + (*((_QWORD *)v51 + 8) - *(int *)(v50 + 4) + a2 - 1 + v52 * (v42 - *(int *)(v50 + 8)))
                    * *(int *)(*((_QWORD *)v51 + 7) + 16));
      v54 = &v53[v52];
      do
      {
        *v54 = *v53;
        v54 += v52;
        --v19;
      }
      while (v19);
    }
  }
  v55 = 1 << a8;
  v153 = &a9[v15];
  v56 = *(_QWORD *)(v10 + 14848);
  v150 = *(unsigned __int8 *)(v56 + 2117);
  v57 = *v14;
  v156 = *(_QWORD *)(v10 + 24760);
  v157 = *(int *)(v10 + 24528);
  v58 = a2 - v57;
  v158 = a3 - v157;
  v149 = *v14;
  if ((_DWORD)v57 != a2)
  {
    if ((a7 & 0xF) != 0)
    {
      v61 = a2 - 1;
      v62 = v55 + a3;
      v63 = *((_DWORD *)a5 + 1);
      if (v63 >= a2 || (v64 = *a5, v63 + v64 < a2) || (v70 = *((_DWORD *)a5 + 2), v70 > v62) || v70 + v64 <= v62)
      {
        v65 = v61 - v149;
        v66 = v62 - v157;
        v67 = *(unsigned __int8 *)(v56 + 2113);
        if (a4 < 0)
        {
LABEL_52:
          v69 = -1;
        }
        else
        {
          v68 = v67 - a4;
          while ((int)v58 >> v68 != v65 >> v68 || (int)v158 >> v68 != v66 >> v68)
          {
            v31 = v68++ < v67;
            if (!v31)
              goto LABEL_52;
          }
          v73 = v67 - v68;
          if (v73 >= a4)
            v69 = v73;
          else
            v69 = v73 + 1;
        }
        v71 = 0;
        v72 = *(unsigned __int8 **)(v10
                                  + 32 * v69
                                  + 8
                                  * ((v65 >> (v67 - v69)) & 1 | (2
                                                                             * ((v66 >> (v67 - v69)) & 1)))
                                  + 24552);
        v63 = *((_DWORD *)v72 + 1);
        v70 = *((_DWORD *)v72 + 2);
      }
      else
      {
        v71 = a6 != 3;
        v72 = a5;
      }
      if (v55 < (int)v16)
      {
        v74 = **((unsigned __int8 **)v72 + 17);
        v75 = *(unsigned __int8 **)&v72[8 * v71 + 136];
        v76 = (_BYTE *)(**((_QWORD **)v75 + 7)
                      + (*((_QWORD *)v75 + 8) + v61 - v63 + *v75 * (uint64_t)(v62 - v70))
                      * *(int *)(*((_QWORD *)v75 + 7) + 16));
        v77 = v16 - v55;
        v78 = &a9[v55];
        do
        {
          *v78++ = *v76;
          v76 += v74;
          --v77;
        }
        while (v77);
      }
    }
    if ((a7 & 0xF0) != 0)
    {
      v79 = a2 - 1;
      v80 = *((_DWORD *)a5 + 1);
      if (v80 >= a2 || (v81 = *a5, v80 + v81 < a2) || (v88 = *((_DWORD *)a5 + 2), v88 > a3) || v88 + v81 <= a3)
      {
        v82 = v79 - *v14;
        v83 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
        v59 = a9;
        if (a4 < 0)
        {
LABEL_71:
          v85 = -1;
        }
        else
        {
          v84 = v83 - a4;
          while ((a2 - *v14) >> v84 != v82 >> v84)
          {
            v31 = v84++ < v83;
            if (!v31)
              goto LABEL_71;
          }
          if (v83 - v84 >= a4)
            v85 = v83 - v84;
          else
            v85 = v83 - v84 + 1;
        }
        v86 = 0;
        v87 = *(unsigned __int8 **)(v10
                                  + 32 * v85
                                  + 8
                                  * ((v82 >> (v83 - v85)) & 1 | (2
                                                                             * (((a3
                                                                                              - *(_DWORD *)(v10 + 24528)) >> (v83 - v85)) & 1)))
                                  + 24552);
        v80 = *((_DWORD *)v87 + 1);
        v88 = *((_DWORD *)v87 + 2);
      }
      else
      {
        v86 = a6 != 3;
        v87 = a5;
        v59 = a9;
      }
      if (a8 != 31)
      {
        v89 = **((unsigned __int8 **)v87 + 17);
        v90 = *(unsigned __int8 **)&v87[8 * v86 + 136];
        v91 = (_BYTE *)(**((_QWORD **)v90 + 7)
                      + (*((_QWORD *)v90 + 8) + v79 - v80 + *v90 * (uint64_t)(a3 - v88))
                      * *(int *)(*((_QWORD *)v90 + 7) + 16));
        if (v55 <= 1)
          v92 = 1;
        else
          v92 = v55;
        v93 = v59;
        v60 = v153;
        do
        {
          *v93++ = *v91;
          v91 += v89;
          --v92;
        }
        while (v92);
        v151 = 1;
        goto LABEL_86;
      }
      v151 = 1;
    }
    else
    {
      v151 = 0;
      v59 = a9;
    }
    v60 = v153;
    goto LABEL_86;
  }
  v151 = (a7 & 0xF0) != 0;
  v59 = a9;
  if ((a7 & 0xF0) != 0)
  {
    result = (uint64_t)memcpy(a9, (const void *)(v156 + (int)v158), v55);
    a5 = v155;
    a4 = v154;
  }
  v60 = v153;
  if ((a7 & 0xF) != 0)
  {
    result = (uint64_t)memcpy(&a9[v55], (const void *)(v156 + v158 + v55), v55);
    a5 = v155;
    a4 = v154;
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
LABEL_86:
  if ((_DWORD)v157 == a3)
  {
    if ((a7 & 0x1E00) != 0)
    {
      v94 = v21;
      result = (uint64_t)memcpy(v60, (const void *)(v156 + 2 * v150 + (int)v58), v55);
      v21 = v94;
    }
    if (v152)
    {
      v95 = v21;
      result = (uint64_t)memcpy(&v60[v55], (const void *)(v156 + 2 * v150 + v58 + v55), v55);
      v21 = v95;
      v96 = 1;
      if ((a7 & 0x100) == 0)
        goto LABEL_155;
      goto LABEL_130;
    }
LABEL_114:
    v96 = 0;
    if ((a7 & 0x100) == 0)
      goto LABEL_155;
    goto LABEL_130;
  }
  if ((a7 & 0x1E00) != 0)
  {
    v97 = a3 - 1;
    v98 = *((_DWORD *)a5 + 1);
    if (v98 > a2 || (v99 = *a5, v98 + v99 <= a2) || (v100 = *((_DWORD *)a5 + 2), v100 >= a3) || v100 + v99 < a3)
    {
      v104 = *(_DWORD *)(v10 + 24528);
      v105 = v97 - v104;
      v106 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
      if (a4 < 0)
      {
LABEL_102:
        v109 = -1;
      }
      else
      {
        v107 = a3 - v104;
        v108 = v106 - a4;
        while (v107 >> v108 != v105 >> v108)
        {
          v31 = v108++ < v106;
          if (!v31)
            goto LABEL_102;
        }
        if (v106 - v108 >= a4)
          v109 = v106 - v108;
        else
          v109 = v106 - v108 + 1;
      }
      v101 = v21;
      v102 = 0;
      v103 = *(unsigned __int8 **)(v10
                                 + 32 * v109
                                 + 8
                                 * (((a2 - *v14) >> (v106 - v109)) & 1 | (2
                                                                                      * ((v105 >> (v106 - v109)) & 1)))
                                 + 24552);
      v98 = *((_DWORD *)v103 + 1);
      v100 = *((_DWORD *)v103 + 2);
    }
    else
    {
      v101 = v21;
      v102 = a6 != 3;
      v103 = a5;
    }
    v110 = v97 - v100;
    v111 = *(unsigned __int8 **)&v103[8 * v102 + 136];
    result = (uint64_t)memcpy(v60, (const void *)(**((_QWORD **)v111 + 7)+ (*((_QWORD *)v111 + 8) + a2 - v98 + *v111 * (uint64_t)v110)* *(int *)(*((_QWORD *)v111 + 7) + 16)), v55);
    v21 = v101;
    a4 = v154;
    a5 = v155;
  }
  if (!v152)
    goto LABEL_114;
  v112 = v55 + a2;
  v113 = a3 - 1;
  v114 = *((_DWORD *)a5 + 1);
  v147 = v21;
  if (v114 > v55 + a2
    || (v115 = *a5, v114 + v115 <= v112)
    || (v116 = *((_DWORD *)a5 + 2), v116 >= a3)
    || v116 + v115 < a3)
  {
    v119 = *(_DWORD *)(v10 + 24528);
    v120 = v112 - *v14;
    v121 = v113 - v119;
    v122 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
    if (a4 < 0)
    {
LABEL_121:
      v125 = -1;
    }
    else
    {
      v123 = a3 - v119;
      v124 = v122 - a4;
      while ((a2 - *v14) >> v124 != v120 >> v124 || v123 >> v124 != v121 >> v124)
      {
        v31 = v124++ < v122;
        if (!v31)
          goto LABEL_121;
      }
      if (v122 - v124 >= a4)
        v125 = v122 - v124;
      else
        v125 = v122 - v124 + 1;
    }
    v117 = 0;
    v118 = *(unsigned __int8 **)(v10
                               + 32 * v125
                               + 8
                               * ((v120 >> (v122 - v125)) & 1 | (2
                                                                             * ((v121 >> (v122 - v125)) & 1)))
                               + 24552);
    v114 = *((_DWORD *)v118 + 1);
    v116 = *((_DWORD *)v118 + 2);
  }
  else
  {
    v117 = a6 != 3;
    v118 = a5;
  }
  v126 = v112 - v114;
  v127 = *(unsigned __int8 **)&v118[8 * v117 + 136];
  v60 = v153;
  result = (uint64_t)memcpy(&v153[v55], (const void *)(**((_QWORD **)v127 + 7)+ (*((_QWORD *)v127 + 8) + v126 + *v127 * (uint64_t)(v113 - v116))* *(int *)(*((_QWORD *)v127 + 7) + 16)), v55);
  v96 = 1;
  v21 = v147;
  if ((a7 & 0x100) != 0)
  {
LABEL_130:
    if (v149 == a2 || (_DWORD)v157 == a3)
    {
      v135 = v58 + 2 * v150;
      if ((int)v58 <= 0)
        v135 = 0;
      v136 = (_BYTE *)(v156 + (int)v158 + v135 - 1);
    }
    else
    {
      v128 = a2 - 1;
      v129 = a3 - 1;
      v130 = v155;
      v131 = *((_DWORD *)v155 + 1);
      if (v131 >= a2
        || (v132 = *v155, v131 + v132 < a2)
        || (v133 = *((_DWORD *)v155 + 2), v133 >= a3)
        || v133 + v132 < a3)
      {
        v137 = *(_DWORD *)(v10 + 24528);
        v138 = v128 - *v14;
        v139 = v129 - v137;
        v140 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 14848) + 2113);
        result = v154;
        if ((v154 & 0x80000000) != 0)
        {
LABEL_145:
          v143 = -1;
        }
        else
        {
          v141 = a3 - v137;
          v142 = v140 - v154;
          while ((a2 - *v14) >> v142 != v138 >> v142 || v141 >> v142 != v139 >> v142)
          {
            v31 = v142++ < v140;
            if (!v31)
              goto LABEL_145;
          }
          if (v140 - v142 >= (int)v154)
            v143 = v140 - v142;
          else
            v143 = v140 - v142 + 1;
        }
        v134 = 0;
        v130 = *(unsigned __int8 **)(v10
                                   + 32 * v143
                                   + 8
                                   * ((v138 >> (v140 - v143)) & 1 | (2
                                                                                 * ((v139 >> (v140 - v143)) & 1)))
                                   + 24552);
        v131 = *((_DWORD *)v130 + 1);
        v133 = *((_DWORD *)v130 + 2);
      }
      else
      {
        v134 = a6 != 3;
      }
      v144 = v128 - v131;
      v145 = *(unsigned __int8 **)&v130[8 * v134 + 136];
      v136 = (_BYTE *)(**((_QWORD **)v145 + 7)
                     + (*((_QWORD *)v145 + 8) + v144 + *v145 * (uint64_t)(v129 - v133))
                     * *(int *)(*((_QWORD *)v145 + 7) + 16));
    }
    *(v59 - 1) = *v136;
  }
LABEL_155:
  if (v21)
  {
    if (v151)
      goto LABEL_157;
  }
  else
  {
    if (v151)
    {
      v146 = &v59[v55 - 1];
    }
    else if ((a7 & 0x100) != 0)
    {
      v146 = v59 - 1;
    }
    else
    {
      v146 = v60;
      if ((a7 & 0x1E00) == 0)
        v146 = &v60[v55];
    }
    result = (uint64_t)memset(&v59[v55], *v146, v55);
    if (v151)
    {
LABEL_157:
      if ((a7 & 0x100) != 0)
        goto LABEL_159;
      goto LABEL_158;
    }
  }
  result = (uint64_t)memset(v59, v59[v55], v55);
  if ((a7 & 0x100) == 0)
LABEL_158:
    *(v59 - 1) = *v59;
LABEL_159:
  if ((a7 & 0x1E00) == 0)
  {
    result = (uint64_t)memset(v60, *(v59 - 1), v55);
    if ((v96 & 1) != 0)
      goto LABEL_162;
    goto LABEL_161;
  }
  if ((v96 & 1) == 0)
LABEL_161:
    result = (uint64_t)memset(&v60[v55], v60[v55 - 1], v55);
LABEL_162:
  *((_BYTE *)v14 + 270) = 1;
  return result;
}

uint64_t sub_1C97C18A0(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, int a8, int a9, _WORD *a10)
{
  int *v15;
  int v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  size_t v61;
  const void *v62;
  char *v63;
  int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned __int8 *v84;
  char v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  _BYTE *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char v122;
  int v123;
  char *v124;
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v145;
  BOOL v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;

  if (!a8)
    return (uint64_t)memset(a10 - 1, 128 << *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 223), (8 << a9) | 2);
  v15 = (int *)(a1 + 24524);
  v16 = 4 << a9;
  v151 = a4;
  if (!*(_BYTE *)(a1 + 24793) && (*v15 == a2 || *(_DWORD *)(a1 + 24528) == a3))
  {
    sub_1C97C08C0(a1, 1u);
    a4 = v151;
  }
  v17 = (char *)a10 + v16;
  result = sub_1C97C09F8(a1, a2, a3, a4, (uint64_t)a5, a9 + 1, a8, 1u);
  v19 = *(_QWORD *)(a1 + 14848);
  v145 = *(unsigned __int8 *)(v19 + 2117);
  v20 = *v15;
  v149 = *(_QWORD *)(a1 + 24768);
  v150 = *(int *)(a1 + 24528);
  v147 = (_DWORD *)(a1 + 24524);
  v148 = a2 - v20;
  v152 = a3 - v150;
  v143 = *v15;
  if ((_DWORD)v20 == a2)
  {
    v21 = (a8 & 0xF0) != 0;
    if ((a8 & 0xF0) != 0)
      result = (uint64_t)memcpy(a10, (const void *)(v149 + (int)v152), 2 << a9);
    v22 = a5;
    if ((a8 & 0xF) != 0)
    {
      result = (uint64_t)memcpy((char *)a10 + (2 << a9), (const void *)(v149 + v152 + (2 << a9)), 2 << a9);
      v146 = 1;
    }
    else
    {
      v146 = 0;
    }
    v30 = a1 + 24524;
    v23 = v151;
  }
  else
  {
    v146 = (a8 & 0xF) != 0;
    v22 = a5;
    v23 = v151;
    if ((a8 & 0xF) != 0)
    {
      v24 = a2 - 2;
      LODWORD(v25) = 2 << a9;
      v26 = (2 << a9) + a3;
      v27 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(a1 + 8) && v27 == a2)
      {
        v28 = 0;
        v29 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        result = a6;
        if (v27 > (int)v24
          || (v31 = *a5, v27 + v31 <= (int)v24)
          || (v32 = *((_DWORD *)a5 + 2), v32 > v26)
          || (v33 = v32 + v31, v29 = a5, v33 <= v26))
        {
          v34 = v24 - v143;
          v35 = v26 - v150;
          v36 = *(unsigned __int8 *)(v19 + 2113);
          if (v151 < 0)
          {
LABEL_27:
            v39 = -1;
          }
          else
          {
            v37 = v36 - v151;
            while ((int)v148 >> v37 != v34 >> v37 || (int)v152 >> v37 != v35 >> v37)
            {
              v38 = v37++ < v36;
              if (!v38)
                goto LABEL_27;
            }
            v39 = v36 - v37;
            if (v39 < v151)
              ++v39;
          }
          v29 = *(unsigned __int8 **)(a1
                                    + 32 * v39
                                    + 8
                                    * ((v34 >> (v36 - v39)) & 1 | (2
                                                                               * ((v35 >> (v36 - v39)) & 1)))
                                    + 24552);
        }
        if (v29 == a5)
          v28 = a6;
        else
          v28 = 0;
      }
      if ((int)v25 < v16)
      {
        v40 = 2 * *(unsigned __int8 *)(*((_QWORD *)v29 + 17) + 1);
        v41 = *(_QWORD *)&v29[8 * v28 + 136];
        result = *((int *)v29 + 1);
        v25 = (int)v25;
        v42 = (_BYTE *)(**(_QWORD **)(v41 + 72)
                      + (*(_QWORD *)(v41 + 80)
                       + v24
                       - (int)result
                       + 2 * *(unsigned __int8 *)(v41 + 1) * (uint64_t)((v26 - *((_DWORD *)v29 + 2)) >> 1))
                      * *(int *)(*(_QWORD *)(v41 + 72) + 16)
                      + 1);
        do
        {
          v43 = (char *)a10 + v25;
          *v43 = *(v42 - 1);
          v43[1] = *v42;
          v25 += 2;
          v42 += v40;
        }
        while (v25 < v16);
      }
    }
    if ((a8 & 0xF0) != 0)
    {
      v44 = a2 - 2;
      v45 = *((_DWORD *)a5 + 1);
      if (*(_BYTE *)(a1 + 8))
        v46 = v45 == a2;
      else
        v46 = 0;
      if (v46)
      {
        v54 = 0;
        v49 = *(unsigned __int8 **)(a1 + 24552);
        v30 = a1 + 24524;
      }
      else
      {
        v30 = a1 + 24524;
        if (v45 > (int)v44
          || (v47 = *v22, v45 + v47 <= (int)v44)
          || (v48 = *((_DWORD *)v22 + 2), v48 > a3)
          || (v49 = v22, v48 + v47 <= a3))
        {
          v50 = v44 - *v147;
          v51 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
          if (v151 < 0)
          {
LABEL_50:
            v53 = -1;
          }
          else
          {
            v52 = v51 - v151;
            while ((a2 - *v147) >> v52 != v50 >> v52)
            {
              v38 = v52++ < v51;
              if (!v38)
                goto LABEL_50;
            }
            v53 = v51 - v52;
            if (v51 - v52 < v151)
              ++v53;
          }
          v49 = *(unsigned __int8 **)(a1
                                    + 32 * v53
                                    + 8
                                    * ((v50 >> (v51 - v53)) & 1 | (2
                                                                               * (((a3
                                                                                                - *(_DWORD *)(a1 + 24528)) >> (v51 - v53)) & 1)))
                                    + 24552);
        }
        if (v49 == v22)
          v54 = a6;
        else
          v54 = 0;
      }
      v55 = (2 << a9);
      if ((int)v55 >= 1)
      {
        v56 = 0;
        v57 = 2 * *(unsigned __int8 *)(*((_QWORD *)v49 + 17) + 1);
        v58 = *(_QWORD *)&v49[8 * v54 + 136];
        v59 = (_BYTE *)(**(_QWORD **)(v58 + 72)
                      + (*(_QWORD *)(v58 + 80)
                       + v44
                       - *((int *)v49 + 1)
                       + 2 * *(unsigned __int8 *)(v58 + 1) * (uint64_t)((a3 - *((_DWORD *)v49 + 2)) >> 1))
                      * *(int *)(*(_QWORD *)(v58 + 72) + 16)
                      + 1);
        do
        {
          v60 = &a10[v56 / 2];
          *v60 = *(v59 - 1);
          v60[1] = *v59;
          v56 += 2;
          v59 += v57;
        }
        while (v56 < v55);
      }
      v21 = 1;
    }
    else
    {
      v21 = 0;
      v30 = a1 + 24524;
    }
  }
  if ((_DWORD)v150 == a3)
  {
    if ((a8 & 0x1E00) != 0)
      result = (uint64_t)memcpy(v17, (const void *)(v149 + 2 * v145 + (int)v148), 2 << a9);
    if ((a8 & 0x1E000) != 0)
    {
      v61 = 2 << a9;
      v62 = (const void *)(v149 + 2 * v145 + v148 + v61);
      v63 = &v17[v61];
LABEL_108:
      result = (uint64_t)memcpy(v63, v62, v61);
      v85 = 1;
      goto LABEL_109;
    }
  }
  else
  {
    if ((a8 & 0x1E00) != 0)
    {
      v64 = a3 - 1;
      if (*(_BYTE *)(a1 + 8) && *((_DWORD *)v22 + 2) == a3)
      {
        v65 = 0;
        v66 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        v67 = *((_DWORD *)v22 + 1);
        if (v67 > a2
          || (v68 = *v22, v67 + v68 <= a2)
          || (v69 = *((_DWORD *)v22 + 2), v69 >= a3)
          || (v70 = v69 + v68, v66 = v22, v70 < a3))
        {
          v71 = *(_DWORD *)(v30 + 4);
          v72 = v64 - v71;
          v73 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
          if (v23 < 0)
          {
LABEL_80:
            v76 = -1;
          }
          else
          {
            v74 = a3 - v71;
            v75 = v73 - v23;
            while (v74 >> v75 != v72 >> v75)
            {
              v38 = v75++ < v73;
              if (!v38)
                goto LABEL_80;
            }
            v76 = v73 - v75;
            if (v73 - v75 < v23)
              ++v76;
          }
          v66 = *(unsigned __int8 **)(a1
                                    + 32 * v76
                                    + 8
                                    * (((a2 - *(_DWORD *)v30) >> (v73 - v76)) & 1 | (2
                                                                                                 * ((v72 >> (v73 - v76)) & 1)))
                                    + 24552);
        }
        v65 = a6;
        if (v66 != v22)
          v65 = 0;
      }
      v77 = *((_DWORD *)v66 + 2);
      v78 = *((int *)v66 + 1);
      v79 = *(_QWORD *)&v66[8 * v65 + 136];
      result = (uint64_t)memcpy(v17, (const void *)(**(_QWORD **)(v79 + 72)+ (*(_QWORD *)(v79 + 80)- v78+ a2+ 2 * *(unsigned __int8 *)(v79 + 1) * (uint64_t)((v64 - v77) >> 1))* *(int *)(*(_QWORD *)(v79 + 72) + 16)), 2 << a9);
      v23 = v151;
    }
    if ((a8 & 0x1E000) != 0)
    {
      v80 = 2 << a9;
      v81 = (2 << a9) + a2;
      v82 = a3 - 1;
      if (*(_BYTE *)(a1 + 8) && *((_DWORD *)v22 + 2) == a3)
      {
        v83 = 0;
        v84 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        v86 = *((_DWORD *)v22 + 1);
        if (v86 > v81
          || (v87 = *v22, v86 + v87 <= v81)
          || (v88 = *((_DWORD *)v22 + 2), v88 >= a3)
          || (v89 = v88 + v87, v84 = v22, v89 < a3))
        {
          v90 = *(_DWORD *)(v30 + 4);
          v91 = v81 - *(_DWORD *)v30;
          v92 = v82 - v90;
          v93 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
          if (v23 < 0)
          {
LABEL_101:
            v96 = -1;
          }
          else
          {
            v94 = a3 - v90;
            v95 = v93 - v23;
            while ((a2 - *(_DWORD *)v30) >> v95 != v91 >> v95 || v94 >> v95 != v92 >> v95)
            {
              v38 = v95++ < v93;
              if (!v38)
                goto LABEL_101;
            }
            v96 = v93 - v95;
            if (v93 - v95 < v23)
              ++v96;
          }
          v84 = *(unsigned __int8 **)(a1
                                    + 32 * v96
                                    + 8
                                    * ((v91 >> (v93 - v96)) & 1 | (2
                                                                               * ((v92 >> (v93 - v96)) & 1)))
                                    + 24552);
        }
        v83 = a6;
        if (v84 != v22)
          v83 = 0;
      }
      v97 = *((_DWORD *)v84 + 2);
      v98 = *((int *)v84 + 1);
      v99 = *(_QWORD *)&v84[8 * v83 + 136];
      v62 = (const void *)(**(_QWORD **)(v99 + 72)
                         + (*(_QWORD *)(v99 + 80)
                          - v98
                          + v81
                          + 2 * *(unsigned __int8 *)(v99 + 1) * (uint64_t)((v82 - v97) >> 1))
                         * *(int *)(*(_QWORD *)(v99 + 72) + 16));
      v61 = v80;
      v63 = &v17[v80];
      goto LABEL_108;
    }
  }
  v85 = 0;
LABEL_109:
  if ((a8 & 0x100) != 0)
  {
    if (v143 == a2 || (_DWORD)v150 == a3)
    {
      v105 = v148 + 2 * v145;
      if ((int)v148 <= 0)
        v105 = 0;
      v106 = v149 + (int)v152 + v105;
      *((_BYTE *)a10 - 2) = *(_BYTE *)(v106 - 2);
      v107 = (_BYTE *)(v106 - 1);
    }
    else
    {
      v100 = a2 - 2;
      v101 = a3 - 1;
      v102 = *((_DWORD *)v22 + 1);
      if (*(_BYTE *)(a1 + 8) && (v102 == a2 || *((_DWORD *)v22 + 2) == a3))
      {
        v103 = 0;
        v104 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        if (v102 > (int)v100
          || (v108 = *v22, v102 + v108 <= (int)v100)
          || (v109 = *((_DWORD *)v22 + 2), v109 >= a3)
          || (v110 = v109 + v108, v104 = v22, v110 < a3))
        {
          v111 = *(_DWORD *)(v30 + 4);
          v112 = v100 - *(_DWORD *)v30;
          v113 = v101 - v111;
          v114 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
          if (v151 < 0)
          {
LABEL_128:
            v117 = -1;
          }
          else
          {
            v115 = a3 - v111;
            v116 = v114 - v151;
            while (1)
            {
              if ((a2 - *(_DWORD *)v30) >> v116 == v112 >> v116)
              {
                result = (v115 >> v116);
                if ((_DWORD)result == v113 >> v116)
                  break;
              }
              result = (v116 + 1);
              v38 = v116++ < v114;
              if (!v38)
                goto LABEL_128;
            }
            v117 = v114 - v116;
            if (v114 - v116 < v151)
              ++v117;
          }
          v104 = *(unsigned __int8 **)(a1
                                     + 32 * v117
                                     + 8
                                     * ((v112 >> (v114 - v117)) & 1 | (2
                                                                                   * ((v113 >> (v114 - v117)) & 1)))
                                     + 24552);
        }
        v103 = a6;
        if (v104 != v22)
          v103 = 0;
      }
      v118 = *((_DWORD *)v104 + 2);
      v119 = *((int *)v104 + 1);
      v120 = *(_QWORD *)&v104[8 * v103 + 136];
      v121 = (char *)(**(_QWORD **)(v120 + 72)
                    + (*(_QWORD *)(v120 + 80)
                     + v100
                     - v119
                     + 2 * *(unsigned __int8 *)(v120 + 1) * (uint64_t)((v101 - v118) >> 1))
                    * *(int *)(*(_QWORD *)(v120 + 72) + 16));
      v122 = *v121;
      v107 = v121 + 1;
      *((_BYTE *)a10 - 2) = v122;
    }
    *((_BYTE *)a10 - 1) = *v107;
  }
  v123 = 1 << a9;
  if (!v146)
  {
    if (v21)
    {
      v124 = (char *)a10 + (2 << a9) - 2;
    }
    else if ((a8 & 0x100) != 0)
    {
      v124 = (char *)(a10 - 1);
    }
    else
    {
      v124 = v17;
      if ((a8 & 0x1E00) == 0)
        v124 = &v17[2 << a9];
    }
    if (v123 < 2 << a9)
    {
      v125 = (2 << a9) - (uint64_t)v123;
      v126 = v123;
      do
      {
        LOBYTE(a10[v126]) = *v124;
        HIBYTE(a10[v126++]) = v124[1];
        --v125;
      }
      while (v125);
    }
  }
  v127 = a9 == 31 || v21;
  if ((v127 & 1) == 0)
  {
    v128 = 0;
    v129 = 0;
    v130 = 2 << a9;
    if (v123 <= 1)
      v131 = 1;
    else
      v131 = 1 << a9;
    v132 = 2 * v131;
    do
    {
      *((_BYTE *)a10 + (v128 >> 32)) = *((_BYTE *)a10 + v130);
      *((_BYTE *)a10 + (int)v129 + 1) = *((_BYTE *)a10 + (v130 | 1));
      v129 += 2;
      v128 += 0x200000000;
    }
    while (v132 != v129);
  }
  if ((a8 & 0x100) == 0)
    *(a10 - 1) = *a10;
  if (a9 != 31 && (a8 & 0x1E00) == 0)
  {
    v133 = 0;
    v134 = 0;
    if (v123 <= 1)
      v135 = 1;
    else
      v135 = 1 << a9;
    v136 = 2 * v135;
    do
    {
      v17[v133 >> 32] = *((_BYTE *)a10 - 2);
      v17[(int)v134 + 1] = *((_BYTE *)a10 - 1);
      v134 += 2;
      v133 += 0x200000000;
    }
    while (v136 != v134);
  }
  if ((v85 & 1) == 0)
  {
    v137 = 2 << a9;
    if (v123 < 2 << a9)
    {
      v138 = v137;
      v139 = v137 - 2;
      v140 = v138 - 1;
      v141 = v138 - v123;
      v142 = 2 * v123;
      do
      {
        v17[v142] = v17[v139];
        v17[v142 + 1] = v17[v140];
        v142 += 2;
        --v141;
      }
      while (v141);
    }
  }
  *(_BYTE *)(v30 + 271) = 1;
  return result;
}

void sub_1C97C23C8(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, __int16 a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v10 = a3 - *(_DWORD *)(a1 + 24524);
  v11 = a4 - *(_DWORD *)(a1 + 24528);
  *((_DWORD *)a2 + 1) = a3;
  *((_DWORD *)a2 + 2) = a4;
  bzero(*((void **)a2 + 11), 2 * ((unint64_t)*a2 >> 3) * ((unint64_t)*a2 >> 3));
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFFC | a5 & 3;
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0x1FF | (a6 << 9);
  sub_1C97C2518((void **)a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 58) < 2u);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117);
  v13 = v10 + v11 * v12;
  v14 = *(_QWORD *)(a1 + 25008) + v13;
  *((_QWORD *)a2 + 3) = *(_QWORD *)(a1 + 25000);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *(_QWORD *)(a1 + 25040) + v13;
  *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 25032);
  *((_QWORD *)a2 + 8) = v15;
  v16 = v10 + (v11 >> 1) * v12;
  v17 = *(_QWORD *)(a1 + 25024) + v16;
  *((_QWORD *)a2 + 5) = *(_QWORD *)(a1 + 25016);
  *((_QWORD *)a2 + 6) = v17;
  v18 = *(_QWORD *)(a1 + 25056) + v16;
  *((_QWORD *)a2 + 9) = *(_QWORD *)(a1 + 25048);
  *((_QWORD *)a2 + 10) = v18;
  **((_BYTE **)a2 + 17) = *a2;
  if (1 << *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2116) <= *a2 >> 1)
    v19 = *a2 >> 1;
  else
    v19 = 1 << *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2116);
  *(_BYTE *)(*((_QWORD *)a2 + 17) + 1) = v19;
  *((_DWORD *)a2 + 48) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = -1;
  *((_WORD *)a2 + 98) = 2;
  *((_DWORD *)a2 + 56) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = -1;
  *((_WORD *)a2 + 114) = 0;
}

void sub_1C97C2518(void **a1, int a2)
{
  unint64_t v4;
  unsigned int v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;

  bzero(a1[12], 16 * ((unint64_t)*(unsigned __int8 *)a1 >> 2) * ((unint64_t)*(unsigned __int8 *)a1 >> 2));
  if (a2)
  {
    LODWORD(v4) = *(unsigned __int8 *)a1;
    if (v4 >= 4)
    {
      v5 = 0;
      v6 = (char *)a1[12];
      do
      {
        if (v4 >= 4)
        {
          v8 = 0;
          v9 = v6 + 8;
          do
          {
            *v9 = -1;
            v9 += 8;
            ++v8;
            v4 = *(unsigned __int8 *)a1;
          }
          while (v8 < v4 >> 2);
          v7 = v4 >> 2;
        }
        else
        {
          LODWORD(v7) = 0;
        }
        v6 += 16 * v7;
        ++v5;
      }
      while (v5 < v7);
    }
  }
}

void sub_1C97C25AC(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, char a6, __int16 a7)
{
  unint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unint64_t v12;
  _WORD *v13;
  _WORD *v14;
  unint64_t v15;

  sub_1C97C23C8(a1, a2, a3, a4, a5, a7);
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFF3 | (4 * (a6 & 3));
  v9 = *a2;
  if (v9 >= 8)
  {
    v10 = 0;
    v11 = (_WORD *)*((_QWORD *)a2 + 11);
    v12 = v9 >> 3;
    v13 = v11;
    do
    {
      v14 = v13;
      v15 = v12;
      do
      {
        *v14++ = *v11;
        --v15;
      }
      while (v15);
      ++v10;
      v13 += v12;
    }
    while (v10 != v12);
  }
}

_QWORD *sub_1C97C2634(_QWORD *result, _WORD *a2, char a3, char a4, int a5, uint64_t a6, __int16 a7)
{
  __int16 v7;
  __int16 v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;

  if (a5)
    v7 = 128;
  else
    v7 = 0;
  v8 = v7 & 0xFF8C | a3 & 3 | (16 * (a4 & 7)) | *a2 & 0x10C | (a7 << 9);
  *a2 = v8;
  v9 = *(unsigned __int8 *)(result[1857] + 19);
  if (*(_BYTE *)(result[1857] + 19))
    v9 = *(unsigned __int8 *)(result[121] + 70) << 8;
  *a2 = v9 | v8 & 0xFEFF;
  v10 = *(unsigned __int8 *)(result[1856] + 2117) >> a3;
  if (v10 >= 8)
  {
    v11 = 0;
    v12 = v10 >> 3;
    v13 = a2;
    do
    {
      v14 = v13;
      v15 = v12;
      do
      {
        *v14++ = *a2;
        --v15;
      }
      while (v15);
      ++v11;
      v13 += a6;
    }
    while (v11 != v12);
  }
  return result;
}

void *sub_1C97C26D4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5, int a6)
{
  void *result;
  unsigned int v13;
  char *v14;
  char *v15;
  size_t v16;

  result = sub_1C97C2858(a2, a3, a4, a5, a6);
  if (a6 >= 4)
  {
    v13 = a6 >> 2;
    v14 = (char *)(*((_QWORD *)a2 + 12)
                 + 16
                 * (((uint64_t)(a4 - *((_DWORD *)a2 + 1)) >> 2)
                  + ((unint64_t)*a2 >> 2) * ((a5 - *((_DWORD *)a2 + 2)) >> 2)));
    v15 = (char *)(*((_QWORD *)a3 + 12)
                 + 16
                 * (((uint64_t)(a4 - *((_DWORD *)a3 + 1)) >> 2)
                  + ((unint64_t)*a3 >> 2) * ((a5 - *((_DWORD *)a3 + 2)) >> 2)));
    v16 = 16 * v13;
    do
    {
      result = memcpy(v14, v15, v16);
      v14 += (4 * *a2) & 0x3F0;
      v15 += (4 * *a3) & 0x3F0;
      --v13;
    }
    while (v13);
  }
  if (!*(_BYTE *)(a1 + 27684))
  {
    result = sub_1C97C2920(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 29752), *((void ***)a2 + 17), *((const void ***)a3 + 17), a4 - *((_DWORD *)a2 + 1), a5 - *((_DWORD *)a2 + 2), a4 - *((_DWORD *)a3 + 1), a5 - *((_DWORD *)a3 + 2), **((unsigned __int8 **)a3 + 17));
    if (!*(_BYTE *)(a1 + 8))
      return sub_1C97C2AFC(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 29752), *((void ***)a2 + 17), *((const void ***)a3 + 17), a4 - *((_DWORD *)a2 + 1), a5 - *((_DWORD *)a2 + 2), a4 - *((_DWORD *)a3 + 1), a5 - *((_DWORD *)a3 + 2), *(unsigned __int8 *)(*((_QWORD *)a3 + 17) + 1));
  }
  return result;
}

unsigned __int8 *sub_1C97C2858(unsigned __int8 *result, unsigned __int8 *a2, int a3, int a4, int a5)
{
  unsigned __int8 *v6;
  unsigned int v7;
  char *v8;
  char *v9;
  size_t v10;

  if (a5 >= 8)
  {
    v6 = result;
    v7 = a5 >> 3;
    v8 = (char *)(*((_QWORD *)a2 + 11)
                + 2
                * (((uint64_t)(a3 - *((_DWORD *)a2 + 1)) >> 3)
                 + ((unint64_t)*a2 >> 3) * ((a4 - *((_DWORD *)a2 + 2)) >> 3)));
    v9 = (char *)(*((_QWORD *)result + 11)
                + 2
                * (((uint64_t)(a3 - *((_DWORD *)result + 1)) >> 3)
                 + ((unint64_t)*result >> 3) * ((a4 - *((_DWORD *)result + 2)) >> 3)));
    v10 = 2 * (a5 >> 3);
    do
    {
      result = (unsigned __int8 *)memcpy(v9, v8, v10);
      v9 += ((unint64_t)*v6 >> 2) & 0x3E;
      v8 += ((unint64_t)*a2 >> 2) & 0x3E;
      --v7;
    }
    while (v7);
  }
  return result;
}

void *sub_1C97C2920(uint64_t (*a1)(uint64_t, uint64_t), void **a2, const void **a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  int v8;
  void *result;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  int v33;

  v8 = a8;
  result = (void *)a1(a8, a8);
  v16 = *(unsigned __int8 *)a2;
  v17 = *(unsigned __int8 *)a3;
  v18 = v8 >> 2;
  if (v16 == v8 && (_DWORD)v17 == (_DWORD)v16)
  {
    memcpy(a2[1], a3[1], (v18 * v18));
    return memcpy(a2[4], a3[4], (2 * v8 * v8));
  }
  else
  {
    if (v8 >= 4)
    {
      v19 = v16 >> 2;
      v20 = v17 >> 2;
      v21 = v18;
      v32 = a5;
      v33 = a7;
      v31 = a6;
      v22 = (char *)a3[1] + ((uint64_t)a6 >> 2) + (int)(v17 >> 2) * (uint64_t)(a7 >> 2);
      v23 = (char *)a2[1] + ((uint64_t)a4 >> 2) + (int)(v16 >> 2) * (uint64_t)(a5 >> 2);
      v24 = v18;
      do
      {
        --v24;
        result = memcpy(v23, v22, v21);
        v23 += v19;
        v22 += v20;
      }
      while (v24);
      v16 = *(unsigned __int8 *)a2;
      LODWORD(v17) = *(unsigned __int8 *)a3;
      a5 = v32;
      a7 = v33;
      a6 = v31;
    }
    if (v8)
    {
      v25 = v8;
      v26 = 2 * v16;
      v27 = 2 * v17;
      v28 = 2 * v8;
      v29 = (char *)a3[4] + 2 * a6 + 2 * (int)v17 * (uint64_t)a7;
      v30 = (char *)a2[4] + 2 * a4 + 2 * (int)v16 * (uint64_t)a5;
      do
      {
        --v25;
        result = memcpy(v30, v29, v28);
        v30 += v26;
        v29 += v27;
      }
      while (v25);
    }
  }
  return result;
}

void *sub_1C97C2AFC(uint64_t (*a1)(_QWORD, uint64_t), void **a2, const void **a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  unsigned int v8;
  int v15;
  void *result;
  int v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;

  v8 = a8;
  v15 = 2 * a8;
  result = (void *)a1((2 * a8), a8);
  v17 = *(unsigned __int8 *)a2;
  if (v17 == v8 && *(unsigned __int8 *)a3 == v17)
  {
    memcpy(a2[2], a3[2], (v8 >> 2) * (v8 >> 2));
    memcpy(a2[3], a3[3], (v8 >> 2) * (v8 >> 2));
    v18 = v15 * v8;
    memcpy(a2[5], a3[5], v18);
    return memcpy(a2[6], a3[6], v18);
  }
  else
  {
    v19 = *((unsigned __int8 *)a2 + 1);
    v20 = *((unsigned __int8 *)a3 + 1);
    if (v8 >= 4)
    {
      v50 = a5;
      v21 = (uint64_t)a5 >> 3;
      v22 = v19 >> 2;
      v52 = a4;
      v54 = a6;
      v23 = (uint64_t)a4 >> 3;
      v24 = v20 >> 2;
      v25 = (uint64_t)a6 >> 3;
      v47 = (uint64_t)a7 >> 3;
      v48 = v23;
      v49 = v21;
      v26 = (char *)a3[2] + v25 + (int)(v20 >> 2) * (uint64_t)(int)v47;
      v27 = (char *)a2[2] + v23 + (int)v22 * (uint64_t)(int)v21;
      v28 = v8 >> 2;
      do
      {
        --v28;
        memcpy(v27, v26, v8 >> 2);
        v27 += v22;
        v26 += v24;
      }
      while (v28);
      v29 = (unint64_t)*((unsigned __int8 *)a2 + 1) >> 2;
      v30 = (unint64_t)*((unsigned __int8 *)a3 + 1) >> 2;
      v31 = (char *)a3[3] + v25 + (int)v30 * (uint64_t)(int)v47;
      v32 = (char *)a2[3] + v48 + (int)v29 * (uint64_t)v49;
      v33 = v8 >> 2;
      do
      {
        --v33;
        result = memcpy(v32, v31, v8 >> 2);
        v32 += v29;
        v31 += v30;
      }
      while (v33);
      LODWORD(v19) = *((unsigned __int8 *)a2 + 1);
      LODWORD(v20) = *((unsigned __int8 *)a3 + 1);
      a4 = v52;
      a6 = v54;
      a5 = v50;
    }
    if (v8)
    {
      v34 = v8;
      v35 = (uint64_t)a7 >> 1;
      v36 = 2 * v19;
      v37 = (uint64_t)a6 >> 1;
      v38 = 2 * v20;
      v53 = v35;
      v55 = (uint64_t)a5 >> 1;
      v51 = (uint64_t)a4 >> 1;
      v39 = (char *)a3[5] + 2 * v37 + 2 * (int)v20 * (uint64_t)(int)v35;
      v40 = (char *)a2[5] + 2 * v51 + 2 * (int)v19 * (uint64_t)(int)v55;
      v41 = v8;
      v42 = 2 * v8;
      do
      {
        --v41;
        memcpy(v40, v39, v42);
        v40 += v36;
        v39 += v38;
      }
      while (v41);
      v43 = 2 * *((unsigned __int8 *)a2 + 1);
      v44 = 2 * *((unsigned __int8 *)a3 + 1);
      v45 = (char *)a3[6] + 2 * v37 + 2 * *((unsigned __int8 *)a3 + 1) * (uint64_t)v53;
      v46 = (char *)a2[6] + 2 * v51 + 2 * *((unsigned __int8 *)a2 + 1) * (uint64_t)(int)v55;
      do
      {
        --v34;
        result = memcpy(v46, v45, v42);
        v46 += v43;
        v45 += v44;
      }
      while (v34);
    }
  }
  return result;
}

int *sub_1C97C2DE0(int *result, int a2)
{
  int v2;
  int *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  char *v19;
  int v20;
  char *v21;
  size_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;

  v2 = a2;
  v3 = result;
  v4 = (unsigned __int8 *)*((_QWORD *)result + 3069);
  v5 = *(_QWORD *)(*((_QWORD *)result + 1855) + 8);
  v6 = *(_QWORD *)(v5 + 768);
  v7 = *(_QWORD *)(v5 + 848);
  v8 = result[6131];
  v9 = result[6132];
  if ((v9 | v8) < 0 || *(_DWORD *)(v5 + 520) <= v8 || *(_DWORD *)(v5 + 524) <= v9)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = (char *)(*(_QWORD *)(v5 + 800) + 2 * (v6 * ((uint64_t)v9 >> 3) + (v8 >> 3)));
    v11 = (char *)(*(_QWORD *)(v5 + 880) + 16 * (v7 * ((uint64_t)v9 >> 2) + (v8 >> 2)));
  }
  v12 = v4[1];
  v13 = v8 + v12;
  if (result[4] < v8 + v12)
    v13 = result[4];
  v14 = v9 + v12;
  if (result[5] < v14)
    v14 = result[5];
  v15 = v14 - v9 + 7;
  if (v15 >= 8)
  {
    v30 = v7;
    v16 = v9 - *((_DWORD *)v4 + 2);
    v17 = *v4;
    v18 = v8 - *((_DWORD *)v4 + 1);
    v19 = (char *)(*((_QWORD *)v4 + 12) + 16 * (((uint64_t)v18 >> 2) + (int)(v17 >> 2) * (uint64_t)(v16 >> 2)));
    v20 = (v13 - v8 + 7) >> 3;
    v28 = 2 * v20;
    v29 = 2 * (v15 >> 3);
    v21 = (char *)(*((_QWORD *)v4 + 11) + 2 * (((uint64_t)v18 >> 3) + (int)(v17 >> 3) * (uint64_t)(v16 >> 3)));
    v22 = 2 * v20;
    if (v15 >> 3 <= 1)
      v23 = 1;
    else
      v23 = v15 >> 3;
    v24 = 2 * v6;
    do
    {
      memcpy(v10, v21, v22);
      v21 += ((unint64_t)*v4 >> 2) & 0x3E;
      v10 += v24;
      --v23;
    }
    while (v23);
    if (v29 <= 1)
      v25 = 1;
    else
      v25 = v29;
    v2 = a2;
    do
    {
      result = (int *)memcpy(v11, v19, 16 * v28);
      v19 += (4 * *v4) & 0x3F0;
      v11 += 16 * v30;
      --v25;
    }
    while (v25);
  }
  if (v2)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      result = (int *)(*((uint64_t (**)(_QWORD, _QWORD))v3 + 3719))(v4[1], v4[1] >> v26);
      if ((v27 & 1) == 0)
        break;
      v27 = 0;
      v26 = 1;
    }
    while (*(_BYTE *)(*((_QWORD *)v3 + 1856) + 201));
  }
  return result;
}

uint64_t sub_1C97C3078(uint64_t result, int a2, int a3, unsigned __int8 a4)
{
  int v4;
  int v5;
  int v6;

  switch(a2)
  {
    case 0:
      if ((((result & 0xF0) != 0) & a4) != 0)
        v4 = 15;
      else
        v4 = 0;
      if ((((result & 0x1E00) != 0) & a3) != 0)
        v5 = 122880;
      else
        v5 = 0;
      result = v5 | v4 | result;
      break;
    case 1:
      result = result & 0xFFFFFF00 | (((result & 0x1E00) != 0) << 8) | 0xF0;
      break;
    case 2:
      if (a3)
        v6 = 122880;
      else
        v6 = 0;
      result = v6 | (((result & 0xF0) != 0) << 8) | result | 0x1E00;
      break;
    case 3:
      result = result & 0xFFFE0000 | 0x1FF0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C97C3118(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  _BOOL4 v13;
  unsigned int v14;

  v3 = a2 - 1;
  if (((a2 - 1) | a3) < 0 || (v4 = *(_QWORD *)(a1 + 8), *(_DWORD *)(v4 + 520) < a2) || *(_DWORD *)(v4 + 524) <= a3)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v4 + 880) + 16 * (*(_QWORD *)(v4 + 848) * ((uint64_t)a3 >> 2) + (v3 >> 2));
  v6 = a3 - 1;
  if (((a3 - 1) | a2) < 0 || (v7 = *(_QWORD *)(a1 + 8), *(_DWORD *)(v7 + 520) <= a2) || *(_DWORD *)(v7 + 524) < a3)
    v8 = 0;
  else
    v8 = *(_QWORD *)(v7 + 880) + 16 * (*(_QWORD *)(v7 + 848) * ((uint64_t)v6 >> 2) + (a2 >> 2));
  if ((v6 | v3) < 0 || (v9 = *(_QWORD *)(a1 + 8), *(_DWORD *)(v9 + 520) < a2) || *(_DWORD *)(v9 + 524) < a3)
  {
    v10 = 0;
    if (v5)
      goto LABEL_14;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 880) + 16 * (*(_QWORD *)(v9 + 848) * ((uint64_t)v6 >> 2) + (v3 >> 2));
    if (v5)
    {
LABEL_14:
      v11 = *(_BYTE *)(v5 + 10) == 1;
      if (v8)
        goto LABEL_15;
LABEL_20:
      v12 = 1;
      if (v10)
        goto LABEL_16;
      goto LABEL_21;
    }
  }
  v11 = 1;
  if (!v8)
    goto LABEL_20;
LABEL_15:
  v12 = *(unsigned __int8 *)(v8 + 10) == 1;
  if (v10)
  {
LABEL_16:
    v13 = *(unsigned __int8 *)(v10 + 10) == 1;
    goto LABEL_22;
  }
LABEL_21:
  v13 = 1;
LABEL_22:
  v14 = v12 || v13;
  if (v11)
    return 1;
  else
    return v14;
}

uint64_t sub_1C97C3254(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;

  v8 = *(_QWORD *)(result + 14848);
  v9 = 1 << (*(_BYTE *)(v8 + 2112) - 1);
  v10 = a5 + a2;
  v11 = a6 + a3;
  v12 = a6 + a3 - 1;
  v13 = *((_DWORD *)a4 + 1);
  if (a2 == v13)
  {
    v14 = *((_DWORD *)a4 + 2);
    *a7 = *((_QWORD *)a4 + 15) + 16 * ((v11 - v14) >> 2);
    v15 = *((_QWORD *)a4 + 15) + 16 * ((v12 - v14) >> 2);
  }
  else
  {
    if (((word_1C986E238[(((*(unsigned __int8 *)(v8 + 2117) - 1) & v12) - *(unsigned __int8 *)(v8 + 2117) + 64) >> 2] >> (((*(unsigned __int8 *)(v8 + 2117) - 1) & a2) >> 2)) & 1) != 0)
    {
      v14 = *((_DWORD *)a4 + 2);
      v16 = (v11 - v14) >> 2;
      v17 = (unint64_t)*a4 >> 2;
      v18 = (uint64_t)(~v13 + a2) >> 2;
      v19 = *((_QWORD *)a4 + 12) + 16 * (v18 + (int)v17 * (uint64_t)v16);
    }
    else
    {
      v19 = 0;
      v14 = *((_DWORD *)a4 + 2);
      v17 = (unint64_t)*a4 >> 2;
      v18 = (uint64_t)(~v13 + a2) >> 2;
    }
    *a7 = v19;
    v15 = *((_QWORD *)a4 + 12) + 16 * (v18 + (int)v17 * (uint64_t)((v12 - v14) >> 2));
  }
  v20 = v10 - v9;
  a7[1] = v15;
  if (v14 == a3)
  {
    *a8 = *((_QWORD *)a4 + 16) + 16 * ((v10 - v13) >> 2);
    a8[1] = *((_QWORD *)a4 + 16) + 16 * ((v20 - v13) >> 2);
    v21 = *((_QWORD *)a4 + 16) + 16 * (((a2 - v13) >> 2) - 1);
  }
  else
  {
    v22 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2117);
    v23 = (((v22 - 1) & (v10 - 1)) - v22 + 64) >> 2;
    v24 = word_1C9860C64[((v22 - 1) & a3) >> 2];
    v25 = *a4;
    if (((v24 >> v23) & 1) != 0)
    {
      v26 = v10 - v13;
      v27 = ~v14 + a3;
      v28 = v27 >> 2;
      v29 = (uint64_t)v27 >> 2;
      v30 = (v25 >> 2) * (uint64_t)v28;
      v31 = *((_QWORD *)a4 + 12) + 16 * (((uint64_t)v26 >> 2) + v30);
    }
    else
    {
      v31 = 0;
      v32 = ~v14 + a3;
      v33 = v32 >> 2;
      v29 = (uint64_t)v32 >> 2;
      v30 = (int)(v25 >> 2) * (uint64_t)v33;
    }
    *a8 = v31;
    a8[1] = *((_QWORD *)a4 + 12) + 16 * (v30 + ((v20 - v13) >> 2));
    if (a2 == v13)
      v21 = *((_QWORD *)a4 + 15) + 16 * v29;
    else
      v21 = *((_QWORD *)a4 + 12) + 16 * (v30 + ((a2 - v13 - v9) >> 2));
  }
  a8[2] = v21;
  return result;
}

uint64_t sub_1C97C3470(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  if (*(_BYTE *)(a1 + 824))
    return sub_1C97C34D0(a1, a2, a3, *(unsigned __int8 **)(a1 + 872), a4, a5, a6, a7, a8);
  else
    return sub_1C980B03C(*(_QWORD *)(a1 + 14840), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1C97C34D0(uint64_t a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, int a8, __int32 *a9)
{
  uint64_t v17[3];
  uint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = 0;
  v18[1] = 0;
  memset(v17, 0, sizeof(v17));
  sub_1C97C3254(a1, a2, a3, a4, a7, a8, v18, v17);
  return sub_1C974ECB8(*(_QWORD *)(a1 + 14840), a2, a3, a5, a6, a7, a8, a9, v18, (uint64_t)v17, 1);
}

uint64_t sub_1C97C35B4(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14[3];
  uint64_t v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v15[0] = 0;
  v15[1] = 0;
  memset(v14, 0, sizeof(v14));
  sub_1C97C3254(a1, a2, a3, a4, a5, a6, v15, v14);
  return sub_1C974F30C(*(_QWORD *)(a1 + 14840), a2, a3, a5, a6, a7, 5u, v15, v14, 1);
}

uint64_t sub_1C97C367C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, unsigned int a7, int *a8, char *a9, int a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  _WORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned __int8 *v63;
  const void *v64;
  uint64_t v65;
  size_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned __int8 *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  uint64_t i;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  BOOL v100;
  _BOOL4 v101;
  _BOOL4 v102;
  unsigned __int8 *v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  __int16 *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  _BOOL4 v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  char v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  void **v134;
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  int *v155;
  int *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int *v162;
  uint64_t v163;
  int v164;
  uint64_t (*v165)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  char v171;
  char v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  int *v184;
  int *v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  uint64_t v191;
  int v192;
  uint64_t (*v193)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  char v200;
  char v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  int *v213;
  int *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int *v220;
  uint64_t v221;
  int v222;
  uint64_t (*v223)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  int *v235;
  _BYTE *v236;
  int *v237;
  int *v238;
  float v239;
  _BOOL4 v240;
  _DWORD *v241;
  _BYTE *v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  int v257;
  _BOOL4 v258;
  int v259;
  _BOOL4 v260;
  BOOL v261;
  BOOL v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  uint64_t v266;
  _BYTE *v267;
  int v268;
  _BYTE *v269;
  int v270;
  int v271;
  uint64_t v272;
  int v273;
  void ***v274;
  int v275;
  void **v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  _OWORD *v282;
  __int128 v283;
  void **v284;
  _BYTE *v285;
  unsigned int v286;
  _BYTE *v287;
  unsigned __int8 v288;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  _BOOL4 v307;
  int v308;
  uint64_t v309;
  char v310;
  int v311;
  uint64_t v312;
  int v313;
  int v314;
  int v315;
  int v316;
  _BOOL4 v317;
  int v318;
  int v319;
  uint64_t v320;
  signed int v321;
  int64x2_t *v322;
  uint64_t v323;
  int64x2_t *v324;
  int v325;
  int64x2_t v326;
  int v327;
  int64x2_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  unsigned int v332;
  uint64_t v333;
  int v334;
  _WORD *v335;
  _BOOL8 v336;
  int v337;
  BOOL v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _WORD *v342;
  _BOOL8 v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  int v348;
  int v349;
  uint64_t v350;
  int v351;
  int v352;
  int v353;
  unsigned __int8 *v354;
  char v355;
  char v356;
  int v357;
  __int16 v358;
  uint64_t v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  _BOOL4 v366;
  int v367;
  int v368;
  _BOOL4 v369;
  int v370;
  int v371;
  int v372;
  _BOOL4 v373;
  _BOOL4 v374;
  int64x2_t *v375;
  void **v376;
  uint64_t v377;
  char v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  _OWORD *v382;
  __int128 v383;
  int v384;
  char v385;
  char v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  void ***v397;
  uint64_t v398;
  uint64_t j;
  int v400;
  int v401;
  void **v402;
  __int128 v403;
  void **v404;
  __int128 v405;
  uint64_t result;
  uint64_t v407;
  int v408;
  char v409;
  int v410;
  uint64_t v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  char v419;
  int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  int v425;
  int v426;
  uint64_t v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  void **v435;
  int v436;
  int v437;
  unint64_t v438;
  uint64_t v439;
  _BYTE *v440;
  unsigned int v441;
  int v442;
  char v443;
  int v444;
  int v445;
  uint64_t v446;
  int v447;
  int v448;
  int v449;
  int v450;
  char v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  int v455;
  unint64_t v456;
  int v457;
  __int16 v458;
  _BYTE *v459;
  unint64_t v460;
  int v461;
  signed int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  int v466;
  int v467;
  uint64_t v468;
  BOOL v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  int v473;
  int v474;
  unsigned __int8 **v475;
  void **v476;
  __int128 v477;
  void **v478;
  int64x2_t v479;
  void **v480;
  int v481;
  int v482;
  int v483;
  uint64_t v484;
  int v485;
  _BYTE *v486;
  uint64_t v487;
  int v488;
  int v489;
  int v490;
  int v491;
  _BOOL4 v492;
  int v493;
  char v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  _BOOL4 v504;
  _BOOL4 v505;
  uint64_t v506;
  int v507;
  _BOOL4 v508;
  unsigned int *v509;
  int v510;
  int v511;
  _BOOL4 v512;
  int v513;
  _BOOL4 v514;
  int *v515;
  int v516;
  int v517;
  _BOOL4 v518;
  int v519;
  uint64_t v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  uint64_t v526;
  int v527;
  int v528;
  int v529;
  unsigned __int8 **v531;
  int v532;
  void ***v533;
  int v535;
  uint64_t v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  char v541;
  _DWORD v542[33];
  int64x2_t v543;
  __int128 v544;
  _BYTE v545[30];
  __int16 v546;
  int64x2_t v547;
  __int128 v548;
  int64x2_t v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  int v553;
  _QWORD v554[4];

  v12 = a3;
  v13 = a2;
  v554[1] = *MEMORY[0x1E0C80C00];
  v515 = (int *)(a1 + 24524);
  v15 = *(_QWORD *)(a1 + 14848);
  v16 = *(_BYTE *)(v15 + 2113) - a4;
  v519 = *(unsigned __int8 *)(v15 + 2113) - (_DWORD)a4;
  v17 = v16 - 1;
  v529 = 1 << v16;
  v518 = (1 << v16) + (int)a2 <= *(_DWORD *)(a1 + 16) && (1 << v16) + (int)a3 <= *(_DWORD *)(a1 + 20);
  v532 = 1 << v17;
  v526 = (int)a4;
  v537 = (int)a4 + 1;
  v522 = *(unsigned __int8 *)(v15 + 2112);
  sub_1C97C23C8(a1, *a5, a2, a3, a4, a10);
  sub_1C97C23C8(a1, *a6, v13, v12, a4, a10);
  v533 = (void ***)a6;
  *((_WORD *)*a6 + 115) = a10;
  v531 = a5;
  v18 = *a5;
  *((_WORD *)v18 + 115) = a10;
  v539 = v12;
  v540 = v13;
  if ((int)a4 >= 1)
  {
    v19 = v12;
    v21 = *v515;
    v20 = v515[1];
    v22 = v13 - *v515;
    v23 = v19 - v20;
    v24 = *v18;
    v25 = v24 >> 3;
    v26 = v13;
    v27 = v24 >> 2;
    v527 = *v18;
    if (v26 == *v515)
    {
      memcpy(*((void **)v18 + 13), (const void *)(*(_QWORD *)(a1 + 24800) + 2 * (v23 >> 3)), 2 * v25);
      memcpy(*((void **)v18 + 15), (const void *)(*(_QWORD *)(a1 + 24816) + 16 * (v23 >> 2)), 16 * v27 + 32);
      if (v19 == v20)
        v28 = *(_QWORD *)(a1 + 24824);
      else
        v28 = *(_QWORD *)(a1 + 24816) + 16 * ((uint64_t)v23 >> 2);
      v48 = *((_QWORD *)v18 + 16);
      v49 = *(_QWORD *)(v28 - 16);
      *(_QWORD *)(v48 - 10) = *(_QWORD *)(v28 - 10);
      *(_QWORD *)(v48 - 16) = v49;
    }
    else
    {
      v29 = v26 - 1;
      v30 = v26 - 1 - v21;
      v31 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
      v32 = v31 - a4;
      while (v22 >> v32 != v30 >> v32)
      {
        v100 = v32++ < v31;
        if (!v100)
        {
          v33 = -1;
          goto LABEL_14;
        }
      }
      v33 = v31 - v32;
      if (v33 < (int)a4)
        ++v33;
LABEL_14:
      v34 = *(unsigned __int8 **)(a1
                                + 32 * v33
                                + 8
                                * ((v30 >> (v31 - v33)) & 1 | (2 * ((v23 >> (v31 - v33)) & 1)))
                                + 24552);
      v35 = *v34;
      if (v24 >= 8)
      {
        v36 = 0;
        v37 = (_WORD *)(*((_QWORD *)v34 + 11)
                      + 2
                      * (((uint64_t)(v29 - *((_DWORD *)v34 + 1)) >> 3)
                       + (int)(v35 >> 3) * (uint64_t)(((int)v539 - *((_DWORD *)v34 + 2)) >> 3)));
        if (v25 <= 1)
          v38 = 1;
        else
          v38 = v24 >> 3;
        v39 = 2 * v38;
        do
        {
          *(_WORD *)(*((_QWORD *)v18 + 13) + v36) = *v37;
          LODWORD(v35) = *v34;
          v37 += v35 >> 3;
          v36 += 2;
        }
        while (v39 != v36);
      }
      v40 = (uint64_t *)(*((_QWORD *)v34 + 12)
                      + 16
                      * (((uint64_t)(v29 - *((_DWORD *)v34 + 1)) >> 2)
                       + (v35 >> 2) * (uint64_t)(((int)v539 - *((_DWORD *)v34 + 2)) >> 2)));
      if (v24 >= 4)
      {
        v41 = 0;
        if (v27 <= 1)
          v42 = 1;
        else
          v42 = v24 >> 2;
        v43 = 16 * v42;
        do
        {
          v44 = (_QWORD *)(*((_QWORD *)v18 + 15) + v41);
          v45 = *v40;
          *(_QWORD *)((char *)v44 + 6) = *(uint64_t *)((char *)v40 + 6);
          *v44 = v45;
          v40 = (uint64_t *)((char *)v40 + ((4 * *v34) & 0x3F0));
          v41 += 16;
        }
        while (v43 != v41);
      }
      if ((a7 & 0xF) != 0)
      {
        v46 = (_QWORD *)(*((_QWORD *)v18 + 15) + 16 * v27);
        v47 = *v40;
        *(_QWORD *)((char *)v46 + 6) = *(uint64_t *)((char *)v40 + 6);
        *v46 = v47;
      }
      else
      {
        v50 = (_QWORD *)(*((_QWORD *)v18 + 15) + 16 * v27);
        v51 = *(_QWORD *)(a1 + 24536);
        *(_QWORD *)((char *)v50 + 6) = *(_QWORD *)(a1 + 24542);
        *v50 = v51;
      }
    }
    v52 = (2 * v25);
    if ((_DWORD)v539 == v20)
    {
      memcpy(*((void **)v18 + 14), (const void *)(*(_QWORD *)(a1 + 24808) + 2 * (v22 >> 3)), v52);
      memcpy(*((void **)v18 + 16), (const void *)(*(_QWORD *)(a1 + 24824) + 16 * (v22 >> 2)), (16 * v27 + 32));
      v13 = v540;
      v262 = (_DWORD)v540 == v21;
      v12 = v539;
      if (!v262)
      {
        v53 = *(_QWORD *)(a1 + 24824) + 16 * ((uint64_t)v22 >> 2);
        v54 = *((_QWORD *)v18 + 16);
        v55 = *(_QWORD *)(v53 - 16);
        *(_QWORD *)(v54 - 10) = *(_QWORD *)(v53 - 10);
        *(_QWORD *)(v54 - 16) = v55;
      }
    }
    else
    {
      v56 = v539 - 1;
      v57 = v515[1];
      v58 = v539 - v57;
      v59 = v539 - 1 - v57;
      v60 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
      v61 = v60 - a4;
      while (v58 >> v61 != v59 >> v61)
      {
        v100 = v61++ < v60;
        if (!v100)
        {
          v62 = -1;
          goto LABEL_40;
        }
      }
      v62 = v60 - v61;
      if (v60 - v61 < (int)a4)
        ++v62;
LABEL_40:
      v63 = *(unsigned __int8 **)(a1
                                + 32 * v62
                                + 8
                                * (((v540 - *v515) >> (v60 - v62)) & 1 | (2
                                                                                      * ((v59 >> (v60 - v62)) & 1)))
                                + 24552);
      memcpy(*((void **)v18 + 14), (const void *)(*((_QWORD *)v63 + 11)+ 2* (((uint64_t)((int)v540 - *((_DWORD *)v63 + 1)) >> 3)+ ((unint64_t)*v63 >> 3) * ((v56 - *((_DWORD *)v63 + 2)) >> 3))), v52);
      v64 = (const void *)(*((_QWORD *)v63 + 12)
                         + 16
                         * (((uint64_t)((int)v540 - *((_DWORD *)v63 + 1)) >> 2)
                          + ((unint64_t)*v63 >> 2) * ((v56 - *((_DWORD *)v63 + 2)) >> 2)));
      v65 = v27;
      v66 = 16 * v27;
      v13 = v540;
      memcpy(*((void **)v18 + 16), v64, v66);
      v262 = (_DWORD)v540 == v21;
      v12 = v539;
      if (!v262)
      {
        v67 = v515[1];
        v68 = v539 - v67;
        v69 = v540 - 1 - *v515;
        v70 = v56 - v67;
        v71 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
        v72 = v71 - a4;
        while (((int)v540 - *v515) >> v72 != v69 >> v72 || v68 >> v72 != v70 >> v72)
        {
          v100 = v72++ < v71;
          if (!v100)
          {
            v73 = -1;
            goto LABEL_48;
          }
        }
        v73 = v71 - v72;
        if (v71 - v72 < (int)a4)
          ++v73;
LABEL_48:
        v74 = *(unsigned __int8 **)(a1
                                  + 32 * v73
                                  + 8
                                  * ((v69 >> (v71 - v73)) & 1 | (2
                                                                             * ((v70 >> (v71 - v73)) & 1)))
                                  + 24552);
        v75 = (uint64_t *)(*((_QWORD *)v74 + 12)
                        + 16
                        * (((uint64_t)((int)v540 - 1 - *((_DWORD *)v74 + 1)) >> 2)
                         + ((unint64_t)*v74 >> 2) * ((v56 - *((_DWORD *)v74 + 2)) >> 2)));
        v76 = *((_QWORD *)v18 + 16);
        v77 = *v75;
        *(_QWORD *)(v76 - 10) = *(uint64_t *)((char *)v75 + 6);
        *(_QWORD *)(v76 - 16) = v77;
      }
      if ((a7 & 0x1E000) != 0)
      {
        v78 = v515[1];
        v79 = v539 - v78;
        v80 = v527 + v540 - *v515;
        v81 = v56 - v78;
        v82 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
        v83 = v82 - a4;
        while (((int)v540 - *v515) >> v83 != v80 >> v83 || v79 >> v83 != v81 >> v83)
        {
          v100 = v83++ < v82;
          if (!v100)
          {
            v84 = -1;
            goto LABEL_58;
          }
        }
        v84 = v82 - v83;
        if (v82 - v83 < (int)a4)
          ++v84;
LABEL_58:
        v88 = *(unsigned __int8 **)(a1
                                  + 32 * v84
                                  + 8
                                  * ((v80 >> (v82 - v84)) & 1 | (2
                                                                             * ((v81 >> (v82 - v84)) & 1)))
                                  + 24552);
        v89 = (uint64_t *)(*((_QWORD *)v88 + 12)
                        + 16
                        * (((uint64_t)(v527 + (int)v540 - *((_DWORD *)v88 + 1)) >> 2)
                         + ((unint64_t)*v88 >> 2) * ((v56 - *((_DWORD *)v88 + 2)) >> 2)));
        v87 = *v89;
        v86 = *(uint64_t *)((char *)v89 + 6);
        v85 = (_QWORD *)(*((_QWORD *)v18 + 16) + 16 * v65);
      }
      else
      {
        v85 = (_QWORD *)(*((_QWORD *)v18 + 16) + 16 * v65);
        v86 = *(_QWORD *)(a1 + 24542);
        v87 = *(_QWORD *)(a1 + 24536);
      }
      *(_QWORD *)((char *)v85 + 6) = v86;
      *v85 = v87;
    }
  }
  for (i = 0; i != 32; i += 8)
  {
    v91 = &v542[i + 1];
    v91[38] = 0;
    *((_QWORD *)v91 + 16) = 0;
    *((_QWORD *)v91 + 17) = 0;
    *((_QWORD *)v91 + 18) = -1;
    *((_WORD *)v91 + 78) = 0;
  }
  DWORD2(v548) = 0;
  v547 = 0uLL;
  *(_QWORD *)&v548 = -1;
  WORD6(v548) = 2;
  DWORD2(v550) = 0;
  v549 = 0uLL;
  *(_QWORD *)&v550 = -1;
  WORD6(v550) = 0;
  v542[0] = *a8;
  v92 = *a9;
  v541 = *a9;
  v93 = *(_QWORD *)(a1 + 14856);
  v94 = v526;
  v95 = v518;
  if (*(_BYTE *)(v93 + 12))
  {
    v96 = *(_DWORD *)(v93 + 1636);
    v512 = v519 >= v96;
    v514 = v519 == v96;
  }
  else
  {
    v512 = 0;
    v514 = 0;
  }
  v97 = *(_QWORD *)(a1 + 968);
  v98 = a10;
  v528 = *(unsigned __int8 *)(v97 + 537);
  if (v518)
  {
    v99 = *(_DWORD *)(a1 + 220);
    v100 = v519 <= v522 || *(_DWORD *)(a1 + 224) <= (int)a4;
    v101 = !v100;
    v102 = v99 <= (int)a4;
    if (v99 <= (int)a4 && v101)
    {
      if (*(_BYTE *)(v97 + 534))
      {
        v103 = *(unsigned __int8 **)(a1 + 14848);
        v104 = v103[2113] - (uint64_t)(int)a4;
        if ((int)v104 <= v103[2112])
        {
          v112 = 0;
        }
        else if (*(_BYTE *)(*(_QWORD *)(a1 + 14840) + 58) == 2)
        {
          v105 = *(_DWORD *)(a1 + 24) + v103[2097];
          v106 = word_1C9857C74[2 * (6 - v104) + 1] + v105 * word_1C9857C74[2 * (6 - v104)];
          v107 = v106 & ~(v106 >> 31);
          v108 = (__int16 *)((char *)&unk_1C9857C80 + 4 * (6 - v104));
          v109 = *v108;
          v110 = v108[1];
          v111 = sub_1C97DADA4(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 976) + 184), *(_QWORD *)(*(_QWORD *)(a1 + 976) + 4920), v13, v12, v104, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
          if (v111 * v111 >= v107)
          {
            if (v111 * v111 > ((v110 + v105 * v109) & ~((v110 + v105 * v109) >> 31)))
              v112 = 1;
            else
              v112 = 2;
          }
          else
          {
            v112 = 0;
          }
          v94 = v526;
          v95 = v518;
        }
        else
        {
          v112 = 2;
        }
        v102 = v112 != 1;
        v101 = v112 != 0;
      }
      else
      {
        v101 = 1;
        v102 = 1;
      }
    }
  }
  else
  {
    v102 = 0;
    v101 = 1;
  }
  v113 = v101;
  v114 = sub_1C979817C(a1 + 1592, v13, v12, v529);
  v115 = v113;
  v116 = v114;
  if (!v102 || !v113 || !v114 || (v117 = *(_QWORD *)(a1 + 968), !*(_BYTE *)(v117 + 532)))
  {
    v513 = v95 && !v102;
    if (!v102)
    {
      v119 = 0;
      v118 = v528;
      goto LABEL_109;
    }
    v117 = *(_QWORD *)(a1 + 968);
    goto LABEL_105;
  }
  if (!*(_QWORD *)(v114 + 128))
  {
    v513 = 0;
LABEL_105:
    v118 = v528;
    goto LABEL_106;
  }
  v118 = v528;
  if (*(_BYTE *)(v114 + 136) && *(_QWORD *)(v114 + 8))
  {
    v119 = 0;
    v120 = *(_QWORD *)(v114 + 112) + (*(_QWORD *)(v114 + 112) >> 4);
    v121 = *(_QWORD *)(*(_QWORD *)(v114 + 88) + 16);
    v122 = v120 >= v121;
    v123 = v120 < v121 && v95;
    v513 = v123;
    if (!v122)
    {
      v115 = 1;
      goto LABEL_109;
    }
    v513 = 0;
  }
  else
  {
    v513 = 0;
  }
LABEL_106:
  if (*(_DWORD *)(v117 + 96) == 36)
    v115 = 0;
  v119 = 1;
LABEL_109:
  v509 = (unsigned int *)(a1 + 4 * v94 + 27648);
  *v509 = -1;
  *(_BYTE *)(a1 + 812) = 0;
  v520 = v114;
  if (v95 && *(_BYTE *)(a1 + 813))
  {
    v124 = v115;
    v125 = sub_1C97EF790(*(_DWORD **)(a1 + 992), v13, v12, v529);
    if (v125 == 1)
    {
      v291 = *(_DWORD *)(a1 + 224);
      v115 = v291 > (int)a4;
      v126 = v291 <= (int)a4;
      v116 = v520;
      v118 = v528;
      if (!v528)
        goto LABEL_121;
      goto LABEL_117;
    }
    v126 = v119;
    v116 = v520;
    v115 = v124;
    v118 = v528;
    if (!v125)
    {
      v115 = 0;
      v126 = 1;
      *(_BYTE *)(a1 + 812) = 1;
      if (!v528)
        goto LABEL_121;
      goto LABEL_117;
    }
  }
  else
  {
    v126 = v119;
  }
  if (!v118)
    goto LABEL_121;
LABEL_117:
  v127 = a1 + 32 * v94;
  *(_OWORD *)(v127 + 32) = 0u;
  *(_OWORD *)(v127 + 48) = 0u;
  if (v126)
    v128 = 0x80;
  else
    v128 = 0;
  *(_BYTE *)(v127 + 58) = v128 & 0x80 | *(_BYTE *)(v127 + 58) & 0x7F;
LABEL_121:
  if (v512)
  {
    v129 = v115;
    v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(v13, v12, a4, a1);
    v98 = v130;
    v131 = ((uint64_t)((int)v13 - *((_DWORD *)*v533 + 1)) >> 3)
         + ((unint64_t)*(unsigned __int8 *)*v533 >> 3) * (((int)v12 - *((_DWORD *)*v533 + 2)) >> 3);
    *((_WORD *)(*v533)[11] + v131) = ((_WORD)v130 << 9) | *((_WORD *)(*v533)[11] + v131) & 0x1FF;
    v132 = ((uint64_t)((int)v13 - *((_DWORD *)*v531 + 1)) >> 3)
         + ((unint64_t)**v531 >> 3) * (((int)v12 - *((_DWORD *)*v531 + 2)) >> 3);
    *(_WORD *)(*((_QWORD *)*v531 + 11) + 2 * v132) = ((_WORD)v130 << 9) | *(_WORD *)(*((_QWORD *)*v531 + 11) + 2 * v132) & 0x1FF;
    v133 = *(_DWORD *)(a1 + 12);
    if (v133 == 5 || v133 == 3)
    {
      *((_WORD *)*v533 + 115) = v130;
      *((_WORD *)*v531 + 115) = v130;
      if (!(_DWORD)a4)
        *(_DWORD *)(a1 + 28) = v130;
    }
    else if (v133 < 2)
    {
LABEL_129:
      v508 = 1;
      v116 = v520;
      v115 = v129;
      goto LABEL_130;
    }
    sub_1C97F1740(a1 + 1000, v130, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2097));
    goto LABEL_129;
  }
  v508 = v92 != 0;
LABEL_130:
  v134 = *v533;
  *((_DWORD *)v134 + 3) = v98;
  v135 = *v531;
  *((_DWORD *)v135 + 3) = v98;
  *((_DWORD *)v134 + 4) = *a8;
  *((_DWORD *)v135 + 4) = *a8;
  *((_DWORD *)v134 + 5) = *a8;
  *((_DWORD *)v135 + 5) = *a8;
  v136 = *(_QWORD *)(a1 + 14840);
  v538 = v98;
  if (*(_BYTE *)(v136 + 5264) && ((v126 ^ 1) & 1) == 0 && ((v115 ^ 1) & 1) == 0)
  {
    v516 = v115;
    v523 = v126;
    LODWORD(v551) = *(char *)(*(_QWORD *)(v136 + 5320) + 648);
    *(_QWORD *)((char *)&v551 + 4) = __PAIR64__(v98, a4);
    v137 = *(_QWORD *)(a1 + 976);
    v138 = *(_DWORD *)(v137 + 4728);
    v139 = v138 >> 3;
    v140 = v13;
    v141 = (uint64_t)v138 >> 3;
    v142 = 1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v137 + 2232) + 40) + 2113) - a4 - 3);
    v143 = (*(_DWORD *)(v137 + 4732) - (int)v12) >> 3;
    if (v143 >= v142)
      v144 = v142;
    else
      v144 = v143;
    v145 = (v138 - v140) >> 3;
    if (v145 >= v142)
      v146 = v142;
    else
      v146 = v145;
    v147 = *(_QWORD *)(v137 + 4920) + 4 * v139 * (uint64_t)((int)v12 >> 3) + 4 * (v140 >> 3);
    v148 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 184))(v147, v141, v146, v144);
    v149 = v144 * v146;
    v150 = (v144 * v146) >> 1;
    v151 = (v148 + (v149 >> 1)) / v149;
    if (((v146 | v144) & 3) != 0)
    {
      if ((int)v144 < 1)
      {
        v153 = 0;
        v160 = 0;
        v161 = v540;
      }
      else
      {
        v152 = 0;
        v153 = 0;
        v154 = 4 * v141;
        v155 = (int *)v147;
        do
        {
          v156 = v155;
          v157 = v146;
          if ((int)v146 >= 1)
          {
            do
            {
              v158 = *v156++;
              v153 += v158;
              --v157;
            }
            while (v157);
          }
          ++v152;
          v155 = (int *)((char *)v155 + v154);
        }
        while (v152 != v144);
        v159 = 0;
        v160 = 0;
        v161 = v540;
        do
        {
          v162 = (int *)v147;
          v163 = v146;
          if ((int)v146 >= 1)
          {
            do
            {
              v164 = *v162++;
              v160 += (v164 * v164);
              --v163;
            }
            while (v163);
          }
          ++v159;
          v147 += v154;
        }
        while (v159 != v144);
      }
      v167 = v160 - (uint64_t)(((uint64_t)(int)v149 >> 1) + v153 * (unint64_t)v153) / (int)v149;
    }
    else
    {
      v165 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 176);
      v166 = (v148 + (v149 >> 1)) / v149;
      v167 = v165(v147, v141, v146, v144);
      v150 = v149 >> 1;
      v151 = v166;
      v161 = v540;
    }
    HIDWORD(v551) = v151;
    LODWORD(v552) = (uint64_t)((sqrt((double)v167) + (double)v150) / (double)v149);
    v168 = *(_QWORD *)(a1 + 976);
    v169 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v168 + 2232) + 40) + 2113) - (_DWORD)a4;
    v170 = *(_DWORD *)(v168 + 5456);
    if (v170 > v169)
      LOBYTE(v169) = *(_DWORD *)(v168 + 5456);
    if (v170 <= 3)
      v171 = 3;
    else
      v171 = *(_DWORD *)(v168 + 5456);
    v172 = v171 - 3;
    v173 = 1 << (v169 - v170);
    v174 = (*(_DWORD *)(v168 + 4732) - (int)v539) >> v170;
    if (v174 >= v173)
      v175 = v173;
    else
      v175 = v174;
    v176 = (*(_DWORD *)(v168 + 4728) - v161) >> v170;
    if (v176 >= v173)
      v177 = v173;
    else
      v177 = v176;
    v178 = *(_QWORD *)(v168 + 5368) + 4 * *(_QWORD *)(v168 + 5416) * ((int)v539 >> v170) + 4 * (v161 >> v170);
    v179 = ((_DWORD)v175 << v172) * ((_DWORD)v177 << v172);
    v180 = ((*(unsigned int (**)(uint64_t))(v168 + 184))(v178) + (v179 >> 1)) / v179;
    if (((v177 | v175) & 3) != 0)
    {
      if ((int)v175 < 1)
      {
        v182 = 0;
        v189 = 0;
      }
      else
      {
        v181 = 0;
        v182 = 0;
        v183 = 4 * *(_QWORD *)(v168 + 5416);
        v184 = (int *)v178;
        do
        {
          v185 = v184;
          v186 = v177;
          if ((int)v177 >= 1)
          {
            do
            {
              v187 = *v185++;
              v182 += v187;
              --v186;
            }
            while (v186);
          }
          ++v181;
          v184 = (int *)((char *)v184 + v183);
        }
        while (v181 != v175);
        v188 = 0;
        v189 = 0;
        do
        {
          v190 = (int *)v178;
          v191 = v177;
          if ((int)v177 >= 1)
          {
            do
            {
              v192 = *v190++;
              v189 += (v192 * v192);
              --v191;
            }
            while (v191);
          }
          ++v188;
          v178 += v183;
        }
        while (v188 != v175);
      }
      v196 = v189
           - (uint64_t)(((uint64_t)((int)v175 * (int)v177) >> 1) + v182 * (unint64_t)v182)
           / ((int)v175
            * (int)v177);
    }
    else
    {
      v193 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 176);
      v194 = *(_QWORD *)(v168 + 5416);
      v195 = v180;
      v196 = v193(v178, v194, v177, v175);
      v180 = v195;
    }
    DWORD1(v552) = v180;
    DWORD2(v552) = (uint64_t)((sqrt((double)v196) + (double)(v179 >> 1)) / (double)v179);
    v197 = *(_QWORD *)(a1 + 976);
    v198 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v197 + 2232) + 40) + 2113) - (_DWORD)a4;
    v199 = *(_DWORD *)(v197 + 5456);
    if (v199 > v198)
      LOBYTE(v198) = *(_DWORD *)(v197 + 5456);
    if (v199 <= 3)
      v200 = 3;
    else
      v200 = *(_DWORD *)(v197 + 5456);
    v201 = v200 - 3;
    v202 = 1 << (v198 - v199);
    v203 = (*(_DWORD *)(v197 + 4732) - (int)v539) >> v199;
    if (v203 >= v202)
      v204 = v202;
    else
      v204 = v203;
    v205 = (*(_DWORD *)(v197 + 4728) - (int)v540) >> v199;
    if (v205 >= v202)
      v206 = v202;
    else
      v206 = v205;
    v207 = *(_QWORD *)(v197 + 5432) + 4 * *(_QWORD *)(v197 + 5416) * ((int)v539 >> v199) + 4 * ((int)v540 >> v199);
    v208 = ((_DWORD)v204 << v201) * ((_DWORD)v206 << v201);
    v209 = ((*(unsigned int (**)(uint64_t))(v197 + 184))(v207) + (v208 >> 1)) / v208;
    if (((v206 | v204) & 3) != 0)
    {
      if ((int)v204 < 1)
      {
        v211 = 0;
        v218 = 0;
        v219 = v523;
      }
      else
      {
        v210 = 0;
        v211 = 0;
        v212 = 4 * *(_QWORD *)(v197 + 5416);
        v213 = (int *)v207;
        do
        {
          v214 = v213;
          v215 = v206;
          if ((int)v206 >= 1)
          {
            do
            {
              v216 = *v214++;
              v211 += v216;
              --v215;
            }
            while (v215);
          }
          ++v210;
          v213 = (int *)((char *)v213 + v212);
        }
        while (v210 != v204);
        v217 = 0;
        v218 = 0;
        v219 = v523;
        do
        {
          v220 = (int *)v207;
          v221 = v206;
          if ((int)v206 >= 1)
          {
            do
            {
              v222 = *v220++;
              v218 += (v222 * v222);
              --v221;
            }
            while (v221);
          }
          ++v217;
          v207 += v212;
        }
        while (v217 != v204);
      }
      v226 = v218
           - (uint64_t)(((uint64_t)((int)v204 * (int)v206) >> 1) + v211 * (unint64_t)v211)
           / ((int)v204
            * (int)v206);
      v12 = v539;
    }
    else
    {
      v223 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v197 + 176);
      v224 = *(_QWORD *)(v197 + 5416);
      v225 = v209;
      v226 = v223(v207, v224, v206, v204);
      v209 = v225;
      v12 = v539;
      v219 = v523;
    }
    HIDWORD(v552) = v209;
    v553 = (uint64_t)((sqrt((double)v226) + (double)(v208 >> 1)) / (double)v208);
    v136 = *(_QWORD *)(a1 + 14840);
    v227 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v136 + 5320) + 576) + 336);
    v228 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v136 + 5320) + 576) + 344);
    v229 = v228 - v227;
    v98 = v538;
    if (v228 == v227)
    {
      v232 = 0.0;
      v13 = v540;
    }
    else
    {
      v230 = 0;
      v231 = v229 >> 5;
      if (v231 <= 1)
        v231 = 1;
      v232 = 0.0;
      v13 = v540;
      do
      {
        v233 = *(_QWORD *)(v227 + 32 * v230 + 8);
        if (*(_BYTE *)(v233 + 56))
        {
          LODWORD(v234) = 0;
        }
        else
        {
          v234 = 0;
          do
          {
            v235 = (int *)(v233 + 72 * v234);
            v236 = v235 + 8;
            if (*((double *)v235 + 5) <= (double)*((int *)&v551 + *v235))
              v236 = (char *)v235 + 33;
            v237 = v235 + 15;
            v238 = v235 + 16;
            if (*v236)
              v238 = v237;
            v234 = *v238;
          }
          while (!*(_BYTE *)(v233 + 72 * (int)v234 + 56));
        }
        v232 = v232 + *(double *)(v233 + 72 * (int)v234 + 48);
        ++v230;
      }
      while (v230 != v231);
    }
    v239 = 1.0 / (exp(-v232) + 1.0);
    v240 = v239 < 0.85;
    if (v239 > 0.25)
      v115 = v516;
    else
      v115 = 0;
    if (v239 <= 0.25)
      v240 = 1;
    v126 = v240 & v219;
    v116 = v520;
  }
  v517 = 0;
  v241 = (_DWORD *)(a1 + 4 * v94 + 27668);
  *v241 = 0;
  v242 = (_BYTE *)(a1 + v94);
  v242[27664] = 0;
  v242[205] = *(_BYTE *)(a1 + 204);
  v242[27685] = 0;
  *(_DWORD *)(a1 + 212) = 0;
  if (*(_BYTE *)(v136 + 5432) && v126)
  {
    if (v98 > *(char *)(v136 + 653))
      goto LABEL_254;
    v243 = *(_QWORD *)(a1 + 976);
    v244 = *(unsigned __int8 *)(*(_QWORD *)(v136 + 16) + 2113) - (_DWORD)a4;
    v245 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v243 + 2232) + 40) + 2096);
    if (v244 == 34)
    {
      v246 = 0;
    }
    else
    {
      v247 = 0;
      v246 = 0;
      v248 = 1 << (v244 - 3);
      v249 = *(int *)(v243 + 4728) >> 3;
      v250 = *(_QWORD *)(v243 + 4848) + 4 * v249 * ((int)v12 >> 3) + 4 * ((int)v13 >> 3);
      if (v248 <= 1)
        v248 = 1;
      v251 = 4 * v249;
      do
      {
        v252 = 0;
        do
        {
          v246 += *(_DWORD *)(v250 + v252);
          v252 += 4;
        }
        while (4 * v248 != v252);
        ++v247;
        v250 += v251;
      }
      while (v247 != v248);
    }
    if (v245 == 10)
      LOBYTE(v244) = v244 + 1;
    v253 = *(unsigned int *)(*(_QWORD *)(v136 + 5320)
                           + 4 * ((v246 + (1 << (2 * v244 - 1))) >> (2 * v244) >> 4)
                           + 152);
    if (v253 > 0x1F)
    {
LABEL_254:
      v517 = 0;
    }
    else
    {
      v254 = dword_1C9857BF4[v253];
      v255 = v254 + 3;
      v256 = v98 - (v254 + 3);
      v257 = v254 - 3 - v98;
      v258 = v254 - 3 < v98 && v98 <= v254 + 3;
      v259 = v254 + 6;
      v260 = v98 >= v254 - 6 && v254 - 3 > v98;
      v261 = v98 > v259 || v98 <= v255;
      v517 = v258;
      *(_DWORD *)(a1 + 212) = v258;
      v262 = v261 && !v260;
      if (!v262)
      {
        if (v260)
          v256 = v257;
        v517 = v256 + 1;
        *(_DWORD *)(a1 + 212) = v256 + 1;
      }
    }
  }
  v511 = *(_DWORD *)(a1 + 4);
  if (v126)
  {
    if (*(_BYTE *)(a1 + 197))
    {
      v263 = 257;
    }
    else
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - (_DWORD)a4 != 3
        || *(unsigned __int8 *)(v136 + 58) > 1u)
      {
        goto LABEL_264;
      }
      v264 = *v509;
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 968) + 227))
      {
        v264 &= 0xFFFFFFF9;
        *v241 |= 6u;
      }
      v263 = v264 & 0xFFFFFFF7;
    }
    *v509 = v263;
LABEL_264:
    if (*(unsigned __int8 *)(v136 + 58) <= 1u)
    {
      v265 = v115;
      if (*(_BYTE *)(a1 + 812) || *(_DWORD *)(*(_QWORD *)(v136 + 4760) + 96) == 36)
        *v509 = 256;
      sub_1C97CEDA4(a1, v13, v12, a4, v531, v533, a7, 0);
      v116 = v520;
      v115 = v265;
    }
    if (!*(_BYTE *)(a1 + 196)
      && *((_BYTE *)(*v533)[12]
         + 16 * ((uint64_t)((int)v13 - *((_DWORD *)*v533 + 1)) >> 2)
         + 16 * ((unint64_t)*(unsigned __int8 *)*v533 >> 2) * (((int)v12 - *((_DWORD *)*v533 + 2)) >> 2)
         + 10) == 2)
    {
      v115 = 0;
    }
  }
  v266 = *(_QWORD *)(a1 + 968);
  v267 = (_BYTE *)(v266 + 500);
  if (*(_BYTE *)(v266 + 530))
    v268 = v126;
  else
    v268 = 0;
  if ((v268 & v115 & (v116 != 0)) != 0)
    v269 = (_BYTE *)(v116 + 136);
  else
    v269 = v267;
  v270 = *v269;
  if (!*v269)
  {
    if (v126)
    {
      v273 = v115;
      if (*(int *)(a1 + 12) >= 2)
        sub_1C97F1740(a1 + 1000, v98, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2097));
      v274 = v533;
      v275 = sub_1C97C98A4(a1, v13, v12, a4, a7, v531, v533, 0);
      v116 = v520;
      v115 = v273;
      v118 = v528;
    }
    else
    {
      v275 = 0;
      v274 = v533;
    }
    v521 = *((_DWORD *)*v274 + 4);
    if (v118)
    {
      v277 = a1 + 32 * v94;
      v276 = *v274;
      v278 = *(_BYTE *)(v277 + 58) & 0xE7 | (8
                                           * (*((_BYTE *)v276[12]
                                              + 16 * ((uint64_t)((int)v13 - *((_DWORD *)v276 + 1)) >> 2)
                                              + 16
                                              * ((unint64_t)*(unsigned __int8 *)v276 >> 2)
                                              * (((int)v12 - *((_DWORD *)v276 + 2)) >> 2)
                                              + 10) & 3));
      *(_BYTE *)(v277 + 58) = v278;
      *(_BYTE *)(v277 + 58) = v278 & 0xF8 | (*((unsigned __int16 *)(*v274)[11]
                                             + ((uint64_t)((int)v13 - *((_DWORD *)*v274 + 1)) >> 3)
                                             + ((unint64_t)*(unsigned __int8 *)*v274 >> 3)
                                             * (((int)v12 - *((_DWORD *)*v274 + 2)) >> 3)) >> 4) & 7;
      *(_QWORD *)(v277 + 40) = (*v274)[4 * (v511 > 2) + 23];
      v279 = *(_QWORD *)(a1 + 14840);
      v280 = *(_QWORD *)(v279 + 16);
      v281 = *(_BYTE *)(v280 + 2113);
      v282 = (_OWORD *)(*(_QWORD *)(v279 + 5400)
                      + 32
                      * ((((*(unsigned __int8 *)(v280 + 2117) - 1) & v13) >> (v281 - a4))
                       + (((*(unsigned __int8 *)(v280 + 2117) - 1) & v12) >> (v281 - a4))
                       * byte_1C9857D2C[v94]
                       + *(_DWORD *)(v279 + 5408)
                       * ((v13 >> v281) + (v12 >> v281) * *(_DWORD *)(v280 + 2120))
                       + byte_1C9857D28[v94]));
      v283 = *(_OWORD *)(v277 + 48);
      *v282 = *(_OWORD *)(v277 + 32);
      v282[1] = v283;
    }
    if (!v115)
      goto LABEL_302;
    v284 = *v533;
    v285 = (*v533)[12];
    v286 = v285[10];
    v287 = *(_BYTE **)(a1 + 968);
    v288 = v287[529];
    if (v286 == 2 || (v288 & 1) == 0)
    {
      v290 = (v286 == 2) & v288;
      goto LABEL_299;
    }
    if ((v287[527] & 1) == 0)
      goto LABEL_298;
    v290 = 0;
    if (v286 == 3 && *((_BYTE *)v284 + 232))
    {
      if ((v285[11] & 1) != 0)
      {
LABEL_298:
        v290 = 0;
        goto LABEL_299;
      }
      v290 = (*(_WORD *)v284[11] & 0x70) == 0;
    }
LABEL_299:
    v115 = v290 ^ 1;
    if ((v275 & (v290 ^ 1)) == 1)
    {
      if (v286 < 2)
      {
        v115 = 1;
        if (v116)
          goto LABEL_303;
        goto LABEL_280;
      }
      v115 = (v287[554] & 2) == 0;
    }
LABEL_302:
    if (v116)
      goto LABEL_303;
    goto LABEL_280;
  }
  v521 = 0;
  if (!v116)
  {
LABEL_280:
    v271 = v115;
    v272 = sub_1C979817C(a1 + 1592, v13, v12, v529);
    v115 = v271;
    v116 = v272;
  }
LABEL_303:
  if ((v126 & v115) == 1 && *(_BYTE *)(*(_QWORD *)(a1 + 968) + 531) && v116)
  {
    if (*(_QWORD *)(v116 + 128)
      && !*(_BYTE *)(v116 + 136)
      && *(_QWORD *)(*(_QWORD *)(v116 + 88) + 16) + (*(_QWORD *)(*(_QWORD *)(v116 + 88) + 16) >> 2) < *(_QWORD *)(v116 + 112))
    {
      v292 = 0;
      v126 = 1;
      goto LABEL_447;
    }
  }
  else if (!v115)
  {
    v292 = 0;
    goto LABEL_447;
  }
  v510 = v270;
  v524 = v126;
  if (v514)
    v541 = 1;
  v293 = v532 + v13;
  v294 = v532 + v12;
  v295 = a1 + 32 * v537 + 24552;
  v296 = 1;
  v297 = -4;
  do
  {
    v298 = v297 + 4;
    v299 = ((((_DWORD)v297 + 4) & 1) << v17) + v13;
    v300 = *(_DWORD *)(a1 + 16);
    if ((int)v299 >= v300)
    {
      v296 = 0;
    }
    else
    {
      v301 = (v298 >> 1 << v17) + v539;
      v302 = *(_DWORD *)(a1 + 20);
      if ((int)v301 >= v302)
      {
        v296 = 0;
      }
      else
      {
        v303 = sub_1C97C3078(a7, v298, v293 < v300, v294 < v302);
        v296 &= sub_1C97C367C(a1, v299, v301, v537, a1 + 8 * v537 + 24680, v295, v303, v542, &v541, v538);
        v304 = *(_QWORD *)v295;
        v547 = vaddq_s64(v547, *(int64x2_t *)(*(_QWORD *)v295 + 168));
        DWORD2(v548) += *(_DWORD *)(v304 + 192);
        *(_QWORD *)&v548 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v548)) * (unint64_t)DWORD2(v548)) >> (8 * (WORD6(v548) == 0)))
                         + v547.i64[0];
        v549 = vaddq_s64(v549, *(int64x2_t *)(v304 + 200));
        DWORD2(v550) += *(_DWORD *)(v304 + 224);
        *(_QWORD *)&v550 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v550)) * (unint64_t)DWORD2(v550)) >> (8 * (WORD6(v550) == 0)))
                         + v549.i64[0];
      }
      v13 = v540;
    }
    v295 += 8;
    v122 = __CFADD__(v297++, 1);
  }
  while (!v122);
  v305 = *(_QWORD *)(a1 + 968);
  v306 = *(unsigned __int8 *)(v305 + 550);
  if (!*(_BYTE *)(v305 + 550))
  {
    v12 = v539;
    v98 = v538;
    v94 = v526;
    v307 = v518;
    v126 = v524;
    v270 = v510;
    goto LABEL_344;
  }
  v98 = v538;
  v94 = v526;
  v126 = v524;
  v270 = v510;
  if (((v513 ^ 1) & 1) != 0 || ((v296 ^ 1) & 1) != 0)
  {
    v12 = v539;
    v307 = v518;
    goto LABEL_344;
  }
  v307 = v518;
  if (*(int *)(a1 + 12) < 2
    || (sub_1C97F1740(a1 + 1000, v538, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2097)),
        v305 = *(_QWORD *)(a1 + 968),
        v306 = *(unsigned __int8 *)(v305 + 550),
        *(_BYTE *)(v305 + 550)))
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 58) <= 1u)
    {
      v308 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - (_DWORD)a4;
      if (v308 > *(unsigned __int8 *)(v305 + 177))
      {
        v309 = 0;
        v551 = 0u;
        v552 = 0u;
        v310 = 1;
        LOBYTE(v311) = 1;
        do
        {
          v312 = *(_QWORD *)(*(_QWORD *)(a1 + 32 * v537 + 24552 + v309) + 96);
          *(_QWORD *)((char *)&v551 + v309) = v312;
          LODWORD(v312) = *(unsigned __int8 *)(v312 + 10);
          v311 = v311 & ((_DWORD)v312 == 2);
          v310 &= v312 > 1;
          v309 += 8;
        }
        while (v309 != 32);
        if ((v310 & 1) != 0)
        {
          v313 = *(unsigned __int8 *)(v551 + 11);
          v314 = *(unsigned __int8 *)(v552 + 11);
          if (((v314 ^ v313) & 0x40) == 0
            && (v315 = *(unsigned __int8 *)(v551 + 8) >> 4, v315 == *(unsigned __int8 *)(v552 + 8) >> 4)
            && (v315 == 15 || *(_DWORD *)v551 == *(_DWORD *)v552)
            && (v316 = *(unsigned __int8 *)(v551 + 9) >> 4, v316 == *(unsigned __int8 *)(v552 + 9) >> 4))
          {
            v317 = v316 == 15 || *(_DWORD *)(v551 + 4) == *(_DWORD *)(v552 + 4);
          }
          else
          {
            v317 = 0;
          }
          v362 = *(unsigned __int8 *)(*((_QWORD *)&v551 + 1) + 11);
          v363 = *(unsigned __int8 *)(*((_QWORD *)&v552 + 1) + 11);
          if (((v363 ^ v362) & 0x40) == 0
            && (v364 = *(unsigned __int8 *)(*((_QWORD *)&v551 + 1) + 8) >> 4,
                v364 == *(unsigned __int8 *)(*((_QWORD *)&v552 + 1) + 8) >> 4)
            && (v364 == 15 || **((_DWORD **)&v551 + 1) == **((_DWORD **)&v552 + 1))
            && (v365 = *(unsigned __int8 *)(*((_QWORD *)&v551 + 1) + 9) >> 4,
                v365 == *(unsigned __int8 *)(*((_QWORD *)&v552 + 1) + 9) >> 4))
          {
            v366 = v365 == 15 || *(_DWORD *)(*((_QWORD *)&v551 + 1) + 4) == *(_DWORD *)(*((_QWORD *)&v552 + 1) + 4);
          }
          else
          {
            v366 = 0;
          }
          if (((v362 ^ v313) & 0x40) == 0
            && (v367 = *(unsigned __int8 *)(v551 + 8) >> 4,
                v367 == *(unsigned __int8 *)(*((_QWORD *)&v551 + 1) + 8) >> 4)
            && (v367 == 15 || *(_DWORD *)v551 == **((_DWORD **)&v551 + 1))
            && (v368 = *(unsigned __int8 *)(v551 + 9) >> 4,
                v368 == *(unsigned __int8 *)(*((_QWORD *)&v551 + 1) + 9) >> 4))
          {
            v369 = v368 == 15 || *(_DWORD *)(v551 + 4) == *(_DWORD *)(*((_QWORD *)&v551 + 1) + 4);
            HIDWORD(v506) = v369;
          }
          else
          {
            HIDWORD(v506) = 0;
          }
          v370 = 1 << v308;
          if (((v363 ^ v314) & 0x40) == 0
            && (v371 = *(unsigned __int8 *)(v552 + 8) >> 4,
                v371 == *(unsigned __int8 *)(*((_QWORD *)&v552 + 1) + 8) >> 4)
            && (v371 == 15 || *(_DWORD *)v552 == **((_DWORD **)&v552 + 1))
            && (v372 = *(unsigned __int8 *)(v552 + 9) >> 4,
                v372 == *(unsigned __int8 *)(*((_QWORD *)&v552 + 1) + 9) >> 4))
          {
            v373 = v372 == 15 || *(_DWORD *)(v552 + 4) == *(_DWORD *)(*((_QWORD *)&v552 + 1) + 4);
            LODWORD(v506) = v373;
          }
          else
          {
            LODWORD(v506) = 0;
          }
          v500 = v552;
          v501 = *((_QWORD *)&v551 + 1);
          v503 = v551;
          v502 = v317 && v366;
          v507 = v370;
          if (((v317 && v366) & HIDWORD(v506)) == 1)
          {
            v504 = v366;
            if (sub_1C97CD34C(a1, v13, v539, v370, v370, v311, v551, v531))
              v374 = sub_1C97CD78C(a1, v13, v539, a4, a7, 0, v531, v533);
            else
              v374 = 0;
            v94 = v526;
            v126 = v524;
            v370 = v507;
            v366 = v504;
          }
          else
          {
            v374 = 0;
          }
          v490 = v374;
          v505 = v374;
          if (!v374)
          {
            v490 = 0;
            if (v317 || v366)
            {
              v490 = 0;
              if (v506)
              {
                v491 = sub_1C97CD34C(a1, v540, v539, v370, v370, v311, *(_QWORD *)((unint64_t)&v551 | (8 * (v366 & v506))), v531);
                v374 = 0;
                v370 = v507;
                v490 = 0;
                if (v491)
                {
                  v492 = sub_1C97CD78C(a1, v540, v539, a4, a7, 0, v531, v533);
                  v374 = 0;
                  v370 = v507;
                  v490 = v492;
                }
              }
            }
          }
          v493 = v370 >> 1;
          if (v306 == 1)
            v494 = v490;
          else
            v494 = 0;
          if ((v494 & 1) == 0 && ((v311 ^ 1) & 1) == 0)
          {
            v495 = sub_1C97CDBA0(a1, v540, v539, a4, v531, v533, v370, v507, a7, 1);
            v374 = v505;
            v370 = v507;
            v490 |= v495;
          }
          if (v306 == 1)
            v496 = v490;
          else
            v496 = 0;
          if (((v374 | v496) & 1) != 0 || ((HIDWORD(v506) & v506 ^ 1) & 1) != 0)
          {
            v498 = v502;
          }
          else
          {
            v497 = v370;
            if (sub_1C97CD34C(a1, v540, v539, v370, v493, 0, v503, v531))
            {
              if (sub_1C97CD34C(a1, v540, v493 + (int)v539, v497, v493, 0, v500, v531))
                v490 |= sub_1C97CD78C(a1, v540, v539, a4, a7, 1, v531, v533);
              v94 = v526;
              v126 = v524;
              v370 = v507;
            }
            else
            {
              v94 = v526;
              v126 = v524;
              v370 = v497;
            }
            v498 = v502;
            v374 = v505;
          }
          if (v306 == 1)
            v499 = v490;
          else
            v499 = 0;
          v12 = v539;
          if (((v499 | v498 ^ 1 | v374) & 1) == 0
            && sub_1C97CD34C(a1, v540, v539, v493, v370, 0, v503, v531)
            && sub_1C97CD34C(a1, v493 + (int)v540, v539, v493, v507, 0, v501, v531))
          {
            if (((v490 | sub_1C97CD78C(a1, v540, v539, a4, a7, 2, v531, v533)) & 1) == 0)
            {
LABEL_651:
              v318 = 0;
              LODWORD(v13) = v540;
LABEL_654:
              v270 = v510;
              goto LABEL_341;
            }
          }
          else if (!v490)
          {
            goto LABEL_651;
          }
          LODWORD(v13) = v540;
          sub_1C97CE058(a1, v540, v539, a4, a7, v531, (unsigned __int8 **)v533, 0);
          v318 = 1;
          goto LABEL_654;
        }
      }
    }
  }
  v318 = 0;
  v12 = v539;
LABEL_341:
  v126 |= v318;
LABEL_344:
  v319 = *(_DWORD *)(a1 + 12);
  if (v319 >= 2)
  {
    sub_1C97F1740(a1 + 1000, v98, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2097));
    v320 = 0;
    v321 = *(_DWORD *)(a1 + 16);
    v322 = &v543;
    do
    {
      if ((int)(((v320 & 1) << v17) + v13) < v321
        && (signed int)((v320 >> 1 << v17) + v12) < *(_DWORD *)(a1 + 20))
      {
        v323 = *(_QWORD *)(a1 + 32 * v537 + 24552 + 8 * v320);
        *(_QWORD *)(v323 + 184) = ((*(unsigned __int16 *)(a1 + 1152 + 2 * *(__int16 *)(v323 + 196))
                                  * (unint64_t)*(unsigned int *)(v323 + 192)) >> (8
                                                                                       * (*(_WORD *)(v323 + 196) == 0)))
                                + *(_QWORD *)(v323 + 168);
        v324 = (int64x2_t *)(v323 + 200);
        *(_QWORD *)(v323 + 216) = ((*(unsigned __int16 *)(a1 + 1152 + 2 * *(__int16 *)(v323 + 228))
                                  * (unint64_t)*(unsigned int *)(v323 + 224)) >> (8
                                                                                       * (*(_WORD *)(v323 + 228) == 0)))
                                + *(_QWORD *)(v323 + 200);
        v325 = *(_DWORD *)(a1 + 12);
        if (v325 == 5)
        {
          if (!*(_BYTE *)(a1 + 27684))
          {
            v328 = *(int64x2_t *)(v323 + 216);
            *v322 = *v324;
            v322[1] = v328;
          }
        }
        else if (v325 == 3)
        {
          if (v126)
          {
            v326 = *(int64x2_t *)(v323 + 216);
            *v322 = *v324;
            v322[1] = v326;
            v327 = *(__int16 *)(v323 + 230) - v98;
            if (v327)
            {
              if (v327 >= 16)
                v327 = 16;
              if (v327 <= -15)
                v327 = -15;
              v322->i64[0] = (v322->i64[0] * (unint64_t)word_1C9858668[v327 + 15] + 128) >> 8;
            }
          }
          v322[1].i16[7] = v98;
          *(_WORD *)(v323 + 230) = v98;
        }
      }
      ++v320;
      v322 += 2;
    }
    while (v320 != 4);
    *(_QWORD *)&v548 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v548)) * (unint64_t)DWORD2(v548)) >> (8 * (WORD6(v548) == 0)))
                     + v547.i64[0];
    *(_QWORD *)&v550 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v550)) * (unint64_t)DWORD2(v550)) >> (8 * (WORD6(v550) == 0)))
                     + v549.i64[0];
    v319 = *(_DWORD *)(a1 + 12);
  }
  if ((v319 == 5 || v319 == 3) && v126 && !*(_BYTE *)(a1 + 27684))
  {
    v329 = 0;
    v330 = v543.i64[0];
    v331 = DWORD2(v544);
    do
    {
      v330 += *(_QWORD *)&v545[v329];
      v331 += *(_DWORD *)&v545[v329 + 24];
      v329 += 32;
    }
    while (v329 != 96);
    v543.i64[0] = v330;
    DWORD2(v544) = v331;
  }
  if (v307 && v519 > *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2112))
  {
    sub_1C97C6D7C(a1, v13, v12, (unsigned __int8 *)*v533, 1, 0, 0, 0, 0);
    v332 = ++DWORD2(v548);
    v333 = *(_QWORD *)(a1 + 944);
    v334 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2112);
    if ((int)v13 - (1 << v334) < 0)
    {
      v336 = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 824))
        v335 = *(_WORD **)(*(_QWORD *)(a1 + 872) + 104);
      else
        v335 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 800)
                       + 2
                       * (((v13 - (1 << v334)) >> 3)
                        + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 768) * ((uint64_t)(int)v12 >> 3)));
      v336 = (*v335 & 3) > (int)a4;
    }
    v337 = v12 - (1 << v334);
    if (v337 < 0)
    {
      v343 = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 824))
      {
        v338 = v334 == 31;
        v339 = 112;
        if (v338)
          v339 = 104;
        v340 = *(_QWORD *)(*(_QWORD *)(a1 + 872) + v339);
        v341 = -536870912;
        if (!v338)
          v341 = 0;
        v342 = (_WORD *)(v340 + v341);
      }
      else
      {
        v342 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 800)
                       + 2
                       * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 768) * (v337 >> 3)
                        + ((int)v13 >> 3)));
      }
      v343 = (*v342 & 3) > (int)a4;
    }
    v344 = v333 + v343 + v336;
    v345 = *(_QWORD *)(v333 + 16);
    v346 = *(unsigned __int8 *)(v344 + 50);
    if ((v346 & 1) != 0)
      v347 = v345 - byte_1C98326D3[(v345 & 0xC0) + (v346 >> 1)];
    else
      v347 = byte_1C98326D3[(v345 & 0xC0) + (v346 >> 1)];
    v348 = __clz(v347);
    v349 = v345 - (v347 << (v348 - 55)) + ((v348 - 55) << 8);
    DWORD2(v544) += v349;
    DWORD2(v550) += v349;
    *(_QWORD *)&v548 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v548)) * (unint64_t)v332) >> (8 * (WORD6(v548) == 0)))
                     + v547.i64[0];
    *(_QWORD *)&v550 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v550)) * (unint64_t)DWORD2(v550)) >> (8 * (WORD6(v550) == 0)))
                     + v549.i64[0];
  }
  if (!v514)
  {
    v292 = 1;
    v118 = v528;
    goto LABEL_447;
  }
  v525 = v126;
  v350 = 0;
  v351 = *(_DWORD *)(a1 + 16);
  do
  {
    v352 = ((v350 & 1) << v17) + v13;
    if (v352 < v351)
    {
      v353 = (v350 >> 1 << v17) + v12;
      if (v353 < *(_DWORD *)(a1 + 20))
      {
        v354 = *(unsigned __int8 **)(a1 + 32 * v537 + 24552 + 8 * v350);
        v355 = sub_1C97C93B0(((v350 & 1) << v17) + (int)v13, v353, v532, v354, 0);
        if (*(_BYTE *)(a1 + 8) || (v355 & 1) != 0)
        {
          v12 = v539;
          if ((v355 & 1) == 0)
            goto LABEL_408;
LABEL_416:
          v292 = 1;
LABEL_446:
          v94 = v526;
          v118 = v528;
          v126 = v525;
          v270 = v510;
          goto LABEL_447;
        }
        v292 = 1;
        if ((sub_1C97C93B0(v352, v353, v532, v354, 1u) & 1) != 0)
        {
          v12 = v539;
          v98 = v538;
          goto LABEL_446;
        }
        v356 = sub_1C97C93B0(v352, v353, v532, v354, 2u);
        v12 = v539;
        LODWORD(v13) = v540;
        v98 = v538;
        if ((v356 & 1) != 0)
          goto LABEL_416;
      }
    }
LABEL_408:
    ++v350;
  }
  while (v350 != 4);
  v357 = sub_1C97C9654(a1, v13, v12, a4, (unsigned __int8 *)*v533, *a8, 1);
  v358 = v357;
  v359 = 0;
  v542[0] = v357;
  v118 = v528;
  v270 = v510;
  do
  {
    v360 = ((v359 & 1) << v17) + v13;
    if (v360 < *(_DWORD *)(a1 + 16))
    {
      v361 = (v359 >> 1 << v17) + v12;
      if (v361 < *(_DWORD *)(a1 + 20))
        sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), v360, v361, v537, *(unsigned __int8 **)(a1 + 32 * v537 + 24552 + 8 * v359), v358);
    }
    ++v359;
  }
  while (v359 != 4);
  v292 = 1;
  v94 = v526;
  v126 = v525;
LABEL_447:
  *(_DWORD *)(a1 + 212) = v517;
  if (v270)
  {
    if (((v126 ^ 1 | v513) & 1) == 0)
    {
      if (*(int *)(a1 + 12) >= 2)
        sub_1C97F1740(a1 + 1000, v98, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2097));
      if (v292)
        v375 = &v547 + 2 * (v511 > 2);
      else
        v375 = 0;
      sub_1C97C98A4(a1, v540, v12, a4, a7, v531, v533, (uint64_t)v375);
    }
    v521 = *((_DWORD *)*v533 + 4);
    if (v118)
    {
      v377 = a1 + 32 * v94;
      v376 = *v533;
      v378 = *(_BYTE *)(v377 + 58) & 0xE7 | (8
                                           * (*((_BYTE *)v376[12]
                                              + 16 * ((uint64_t)((int)v540 - *((_DWORD *)v376 + 1)) >> 2)
                                              + 16
                                              * ((unint64_t)*(unsigned __int8 *)v376 >> 2)
                                              * (((int)v12 - *((_DWORD *)v376 + 2)) >> 2)
                                              + 10) & 3));
      *(_BYTE *)(v377 + 58) = v378;
      *(_BYTE *)(v377 + 58) = v378 & 0xF8 | (*((unsigned __int16 *)(*v533)[11]
                                             + ((uint64_t)((int)v540 - *((_DWORD *)*v533 + 1)) >> 3)
                                             + ((unint64_t)*(unsigned __int8 *)*v533 >> 3)
                                             * (((int)v12 - *((_DWORD *)*v533 + 2)) >> 3)) >> 4) & 7;
      *(_QWORD *)(v377 + 40) = (*v533)[4 * (v511 > 2) + 23];
      v379 = *(_QWORD *)(a1 + 14840);
      v380 = *(_QWORD *)(v379 + 16);
      v381 = *(_BYTE *)(v380 + 2113);
      v382 = (_OWORD *)(*(_QWORD *)(v379 + 5400)
                      + 32
                      * ((((*(unsigned __int8 *)(v380 + 2117) - 1) & v540) >> (v381 - a4))
                       + (((*(unsigned __int8 *)(v380 + 2117) - 1) & v12) >> (v381 - a4))
                       * byte_1C9857D2C[v94]
                       + *(_DWORD *)(v379 + 5408)
                       * ((v540 >> v381) + (v12 >> v381) * *(_DWORD *)(v380 + 2120))
                       + byte_1C9857D28[v94]));
      v383 = *(_OWORD *)(v377 + 48);
      *v382 = *(_OWORD *)(v377 + 32);
      v382[1] = v383;
    }
  }
  if ((v126 & 1) == 0)
  {
    for (j = 0; j != 4; ++j)
    {
      v400 = ((j & 1) << v17) + v540;
      if (v400 < *(_DWORD *)(a1 + 16))
      {
        v401 = (j >> 1 << v17) + v12;
        if (v401 < *(_DWORD *)(a1 + 20))
          sub_1C97C26D4(a1, (unsigned __int8 *)*v533, *(unsigned __int8 **)(a1 + 32 * (int)v537 + 24552 + 8 * j), v400, v401, v532);
      }
    }
    v402 = *v533;
    v403 = v548;
    *(int64x2_t *)(v402 + 21) = v547;
    *(_OWORD *)(v402 + 23) = v403;
    v404 = *v533;
    v405 = v550;
    *(int64x2_t *)(v404 + 25) = v549;
    *(_OWORD *)(v404 + 27) = v405;
    if (!*(_BYTE *)(a1 + 27684))
    {
LABEL_600:
      result = 0;
      *a8 = v542[0];
      *a9 = v541;
      return result;
    }
    return 0;
  }
  v384 = *(_DWORD *)(a1 + 200);
  v385 = v292 ^ 1;
  if (v384 != 1)
    v385 = 1;
  if ((v385 & 1) == 0)
  {
    v386 = *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 222);
    v387 = 500 << v386;
    v388 = 1 << (v519 - 3);
    if ((*(_DWORD *)(a1 + 20) - (int)v12) >> 3 >= v388)
      v389 = 1 << (v519 - 3);
    else
      v389 = (*(_DWORD *)(a1 + 20) - (int)v12) >> 3;
    if (v389 < 1)
    {
      v391 = 0;
      v397 = v533;
    }
    else
    {
      v390 = 0;
      v391 = 0;
      v392 = *(_DWORD *)(a1 + 16);
      v393 = (uint64_t)v392 >> 3;
      v394 = *(_QWORD *)(*(_QWORD *)(a1 + 976) + 4872)
           + 4 * (((uint64_t)(int)v540 >> 3) + (int)v393 * (uint64_t)((int)v12 >> 3));
      v395 = (v392 - (int)v540) >> 3;
      if (v395 < v388)
        v388 = v395;
      v396 = 4 * v393;
      v397 = v533;
      do
      {
        if (v388 >= 1)
        {
          v398 = 0;
          do
          {
            if (*(_DWORD *)(v394 + v398) > v391)
              v391 = *(_DWORD *)(v394 + v398);
            v398 += 4;
          }
          while (4 * v388 != v398);
        }
        ++v390;
        v394 += v396;
      }
      while (v390 != v389);
    }
    if (v391 > v387)
    {
      v433 = v387 + (v387 >> 1);
      if (v391 < 400 << v386)
        v434 = 2;
      else
        v434 = 3;
      if (v391 >= v433)
        v432 = v434;
      else
        v432 = 3;
      goto LABEL_519;
    }
LABEL_518:
    v432 = -1;
    goto LABEL_519;
  }
  v397 = v533;
  if (v384 != 2)
    goto LABEL_518;
  v407 = 0;
  v408 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - (_DWORD)a4;
  v409 = 1;
  v410 = 1 << (*(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113) - a4);
  *(_QWORD *)&v551 = 0;
  v554[0] = 0;
  v411 = *(_QWORD *)(a1 + 976);
  v412 = *(_DWORD *)(v411 + 4);
  v413 = (int)v12 >> v412;
  v414 = v410 + v540;
  if (*(_DWORD *)(a1 + 16) < v410 + (int)v540)
    v414 = *(_DWORD *)(a1 + 16);
  v415 = v414 >> v412;
  v416 = v410 + v12;
  if (*(_DWORD *)(a1 + 20) < v416)
    v416 = *(_DWORD *)(a1 + 20);
  v417 = v416 >> v412;
  v418 = *(_QWORD *)(v411 + 8);
  do
  {
    v419 = v409;
    v420 = v407 + v413;
    if (v407 + v413 < v417)
    {
      v421 = ((int)v540 >> v412) + (v419 & 1);
      v422 = *(_QWORD *)(v411 + 24 * v407 + 5192) + 2 * v418 * (v420 << v412 >> v412);
      v423 = v421;
      v424 = v415 - v421;
      do
      {
        if ((int)v423 < v415)
        {
          v425 = *((_DWORD *)&v551 + v407);
          v426 = *((_DWORD *)v554 + v407);
          v427 = v423;
          do
          {
            v428 = *(__int16 *)(v422 + 2 * v427);
            if (v428 < 0)
              v428 = -v428;
            if ((unsigned __int16)v428 > 5u)
              ++v425;
            ++v427;
          }
          while (v415 != v427);
          *((_DWORD *)&v551 + v407) = v425;
          *((_DWORD *)v554 + v407) = v424 + v426;
        }
        ++v420;
        v422 += 2 * v418;
      }
      while (v420 < (int)v417);
    }
    v409 = 0;
    v407 = 1;
  }
  while ((v419 & 1) != 0);
  if ((DWORD1(v551) + (int)v551 < 0) ^ __OFADD__(DWORD1(v551), (_DWORD)v551) | (DWORD1(v551) + (_DWORD)v551 == 0))
  {
    if (v408 != v412)
      goto LABEL_569;
    v446 = v418 * ((int)v12 >> v408);
    v447 = (int)v540 >> v408;
    v448 = *(__int16 *)(*(_QWORD *)(v411 + 5192) + 2 * v446 + 2 * v447);
    if (v448 < 0)
      v448 = -v448;
    if ((unsigned __int16)v448 > 5u)
      goto LABEL_536;
    v449 = *(__int16 *)(*(_QWORD *)(v411 + 5216) + 2 * v446 + 2 * v447);
    if (v449 < 0)
      v449 = -v449;
    if ((unsigned __int16)v449 >= 6u)
LABEL_536:
      v432 = 4;
    else
LABEL_569:
      v432 = 0;
  }
  else
  {
    if ((int)v551 <= SDWORD1(v551))
      v429 = DWORD1(v551);
    else
      v429 = v551;
    v430 = 8 * v429;
    if (v430 >= SLODWORD(v554[0]) >> 1)
      v431 = 2;
    else
      v431 = 3;
    if (v430 >= SLODWORD(v554[0]))
      v432 = 1;
    else
      v432 = v431;
  }
LABEL_519:
  v435 = *v397;
  v436 = v540 - *((_DWORD *)*v397 + 1);
  v437 = v12 - *((_DWORD *)*v397 + 2);
  v438 = *(unsigned __int8 *)*v397;
  v439 = (uint64_t)(*v397)[12] + 16 * ((uint64_t)v436 >> 2) + 16 * (int)(v438 >> 2) * (uint64_t)(v437 >> 2);
  v440 = (_BYTE *)(a1 + 27684);
  if (*(_BYTE *)(a1 + 27684))
  {
    v441 = 0;
    goto LABEL_545;
  }
  v442 = *((__int16 *)v435[11] + ((uint64_t)v436 >> 3) + (int)(v438 >> 3) * (uint64_t)(v437 >> 3));
  v441 = *(_DWORD *)(a1 + 192);
  if (*(_DWORD *)(a1 + 4) == 2 && *(unsigned __int8 *)(v439 + 10) >= 2u)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 968) + 549))
    {
      v443 = (unint64_t)v435[23] >= (unint64_t)v548 + ((unint64_t)v548 >> 3) ? v292 : 0;
      if ((v443 & 1) != 0)
      {
        v444 = 0;
        v445 = 0;
        *((_DWORD *)v435 + 56) = 0;
        v435[25] = 0;
        v435[26] = 0;
        v435[27] = (void *)-1;
        *((_WORD *)v435 + 114) = 0;
        v435 = *v533;
        goto LABEL_551;
      }
    }
    sub_1C97CA688(a1, v540, v12, a4, *v531, (unsigned __int8 *)v435, a7, v550);
    v435 = *v533;
    v521 = *((_DWORD *)*v533 + 4);
  }
  if (v508)
  {
    v450 = sub_1C97C93B0(v540, v12, v529, (unsigned __int8 *)v435, 0);
    if (*(_BYTE *)(a1 + 8) || (v450 & 1) != 0)
    {
      if (!v450)
        goto LABEL_543;
    }
    else if ((sub_1C97C93B0(v540, v12, v529, (unsigned __int8 *)v435, 1u) & 1) == 0
           && (sub_1C97C93B0(v540, v12, v529, (unsigned __int8 *)v435, 2u) & 1) == 0)
    {
LABEL_543:
      v444 = 0;
      v508 = 1;
      goto LABEL_546;
    }
    v521 = v442 >> 9;
    v462 = (v442 >> 9) - *a8;
    if (v462)
    {
      if (v462 < 0)
        v462 = *a8 - (v442 >> 9);
      v463 = 63 - 2 * __clz(v462);
    }
    else
    {
      v463 = 1;
    }
    v508 = 0;
    v464 = *((_DWORD *)v435 + 48) + v463;
    *((_DWORD *)v435 + 48) = v464;
    v465 = *((_DWORD *)v435 + 56) + (v463 << 8);
    *((_DWORD *)v435 + 56) = v465;
    v435[23] = (char *)v435[21]
             + ((*(unsigned __int16 *)(a1 + 1152 + 2 * *((__int16 *)v435 + 98)) * (unint64_t)v464) >> (8 * (*((_WORD *)v435 + 98) == 0)));
    v435[27] = (char *)v435[25]
             + ((*(unsigned __int16 *)(a1 + 1152 + 2 * *((__int16 *)v435 + 114)) * (unint64_t)v465) >> (8 * (*((_WORD *)v435 + 114) == 0)));
    v444 = 1;
  }
  else
  {
    v508 = 0;
LABEL_545:
    v444 = 0;
  }
LABEL_546:
  v451 = v292 ^ 1;
  v445 = 1;
  if (*(int *)(a1 + 200) < 1)
    v451 = 1;
  if ((v451 & 1) != 0 || v432 < 0)
  {
LABEL_551:
    v454 = 0;
    v452 = v441;
    v453 = (unint64_t)v435[4 * v441 + 23];
  }
  else
  {
    v452 = v441;
    v453 = (unint64_t)v435[4 * v441 + 23];
    v454 = v453 >> v432;
  }
  v455 = *(_DWORD *)(a1 + 12);
  if (v445 && v455 >= 3 && !*v440)
  {
    v457 = *(_DWORD *)(a1 + 28) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2097);
    if (v457 >= 63)
      v457 = 63;
    v458 = dword_1C985909C[70 * *(unsigned __int8 *)(a1 + 1172) + (v457 & ~(v457 >> 31))];
    *(_WORD *)(a1 + 1144) = v458;
    *(_WORD *)(a1 + 1152) = v458;
    v456 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v544)) * (unint64_t)DWORD2(v544)) >> (8 * (WORD6(v544) == 0)))
         + v543.i64[0];
    *(_QWORD *)&v544 = v456;
LABEL_556:
    if (v455 == 5)
    {
      if (*v440)
      {
        v455 = 5;
        if (v292)
          goto LABEL_588;
        goto LABEL_592;
      }
      v459 = v435[26];
      v460 = (_BYTE *)v435[25] - v459;
      if ((v292 & 1) != 0)
      {
        v535 = v444;
        v461 = *(_DWORD *)(a1 + 28);
        if (*(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2096) == 8)
          sub_1C97CAE50(a1, (uint64_t)v435, v461, a4, v540, v539);
        else
          sub_1C97CB1A8(a1, (uint64_t)v435, v461, a4, v540, v539);
        v435 = *v533;
        v453 = (unint64_t)(*v533)[25]
             + ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)*v533 + 114) + 1152)
               * (unint64_t)*((unsigned int *)*v533 + 56)) >> (8 * (*((_WORD *)*v533 + 114) == 0)));
        (*v533)[27] = (void *)v453;
        v444 = v535;
      }
      else
      {
        v453 = (unint64_t)v435[27];
      }
      v466 = v538 - *(_DWORD *)(a1 + 28);
      if (v466)
      {
        if (v466 >= 16)
          v466 = 16;
        if (v466 <= -15)
          v466 = -15;
        v460 = (v460 * word_1C98586E8[v466 + 15] + 128) >> 8;
      }
      v435[25] = (void *)((unint64_t)&v459[v460] & ~((uint64_t)&v459[v460] >> 63));
      v435[26] = v459;
      v455 = *(_DWORD *)(a1 + 12);
    }
    if (v455 < 3 || *v440)
      goto LABEL_587;
    v488 = v538 + *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2097);
    if (v488 >= 63)
      v488 = 63;
    v489 = dword_1C985909C[70 * *(unsigned __int8 *)(a1 + 1172) + (v488 & ~(v488 >> 31))];
    *(_WORD *)(a1 + 1144) = v489;
    *(_WORD *)(a1 + 1152) = v489;
    if (!v292)
      goto LABEL_592;
LABEL_588:
    if (v453 + v454 < v456)
      v467 = v445;
    else
      v467 = 0;
    if (v467 == 1)
      goto LABEL_592;
    v473 = v532 + v540;
    v474 = v532 + v539;
    if (v455 == 3)
    {
      v549 = v543;
      v550 = v544;
    }
    v475 = (unsigned __int8 **)(a1 + 32 * (int)v537);
    sub_1C97C26D4(a1, (unsigned __int8 *)v435, v475[3069], v540, v539, v532);
    sub_1C97C26D4(a1, (unsigned __int8 *)*v533, v475[3070], v473, v539, v532);
    sub_1C97C26D4(a1, (unsigned __int8 *)*v533, v475[3071], v540, v474, v532);
    sub_1C97C26D4(a1, (unsigned __int8 *)*v533, v475[3072], v473, v474, v532);
    v476 = *v533;
    v477 = v548;
    *(int64x2_t *)(v476 + 21) = v547;
    *(_OWORD *)(v476 + 23) = v477;
    v478 = *v533;
    v479 = v549;
    *(_OWORD *)(v478 + 27) = v550;
    *(int64x2_t *)(v478 + 25) = v479;
    if (*(_DWORD *)(a1 + 12) == 5)
    {
      v480 = *v533;
      *((_WORD *)v480 + 99) = HIWORD(v544);
      *((_WORD *)v480 + 115) = v546;
    }
    if (!*v440)
      goto LABEL_600;
    return 0;
  }
  v456 = *((_QWORD *)&v547 + 4 * v452 + 2);
  if (v445)
    goto LABEL_556;
LABEL_587:
  if (v292)
    goto LABEL_588;
LABEL_592:
  if (!*v440)
  {
    v468 = v439;
    v469 = v508;
    if (((v444 | !v508) & 1) != 0)
    {
      v471 = v539;
      v470 = v540;
      v472 = v521;
    }
    else
    {
      v471 = v539;
      v470 = v540;
      v481 = sub_1C97C9654(a1, v540, v539, a4, (unsigned __int8 *)v435, *a8, 1);
      sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), v540, v539, a4, (unsigned __int8 *)v435, v481);
      v472 = v521;
      if (v512)
        v472 = v481;
      v469 = v508;
    }
    if (*(int *)(a1 + 4) <= 1 && *(unsigned __int8 *)(v468 + 10) >= 2u)
      sub_1C97CB514(a1, v470, v471, a4, (unsigned __int8 *)*v533, 0, 0, 1, 0);
    *a8 = v472;
    *a9 = v469;
    v455 = *(_DWORD *)(a1 + 12);
  }
  if (v455 == 5 && v529 >= 8)
  {
    v482 = 0;
    v483 = *((_DWORD *)*v533 + 3);
    v484 = a1 + (((int)v540 - *v515) >> 3) + 748;
    v485 = v539 - v515[1];
    do
    {
      v486 = (_BYTE *)(v484 + (int)(v485 & 0xFFFFFFF8));
      v487 = v529 >> 3;
      do
      {
        *v486++ = v483;
        --v487;
      }
      while (v487);
      ++v482;
      v485 += 8;
    }
    while (v482 != v529 >> 3);
  }
  return 1;
}

uint64_t sub_1C97C6808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, _BYTE *a7)
{
  int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  unsigned __int8 *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  _BOOL4 v50;
  int v52;
  uint64_t v55[3];
  int v56;
  __int16 v57;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - (_DWORD)a4;
  v12 = *(_QWORD *)(a1 + 14856);
  if (*(_BYTE *)(v12 + 12))
  {
    v13 = *(_DWORD *)(v12 + 1636);
    v14 = v11 >= v13;
    v50 = v11 == v13;
  }
  else
  {
    v14 = 0;
    v50 = 0;
  }
  v15 = *(unsigned __int8 **)(a1 + 24552);
  result = sub_1C97C9654(a1, a2, a3, a4, 0, *a6, 0);
  v17 = result;
  if (((a3 | a2) & 0x80000000) != 0
    || (v18 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8), *(_DWORD *)(v18 + 520) <= (int)a2)
    || *(_DWORD *)(v18 + 524) <= (int)a3)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v19 = (unsigned __int16 *)(*(_QWORD *)(v18 + 800)
                             + 2 * (*(_QWORD *)(v18 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    v20 = *(_QWORD *)(v18 + 880) + 16 * (*(_QWORD *)(v18 + 848) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  if ((*v19 & 3) <= (int)a4)
  {
    if (v14)
    {
      *a7 = 1;
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(a2, a3, a4, a1);
      sub_1C97C81C4(a1, a2, a3, a4, 0, v28, 0);
    }
    result = sub_1C97C8C08(a1, a2, a3, a4, 0, 1, 1, 0, 0);
    v29 = *v19;
    if ((v29 & 0x80) == 0)
    {
      v52 = v11;
      v30 = (1 << v11);
      v48 = v14;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 968) + 204))
      {
        v31 = 0;
        v32 = 1;
        do
        {
          v33 = v32;
          (*(void (**)(uint64_t, _QWORD))(a1 + 29752))(v30, ((int)v30 >> v31));
          v32 = 0;
          v31 = 1;
        }
        while ((v33 & 1) != 0);
        v29 = *v19;
      }
      sub_1C97F1844(a1 + 14912, a1, a2, a3, a4, *(unsigned __int8 *)(v20 + 10), (v29 >> 4) & 7);
      if (*(_BYTE *)(a1 + 29745))
      {
        v34 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 968) + 229);
        if (v34 != 3)
        {
          v56 = 0;
          v55[0] = 0;
          v55[1] = 0;
          v55[2] = -1;
          v57 = 2;
          if (v34 == 2)
            sub_1C97F95A4(a1 + 14912, a2, a3, v15, v52, 0, (uint64_t)v55, 1);
          else
            sub_1C97F9C34(a1 + 14912, a2, a3, v15, v52, 0, 0, v55, 1);
        }
      }
      result = sub_1C97FD110((int *)(a1 + 14912), a2, a3, 0, v15, 0, 1, 1, 0, 0);
      v35 = *v19;
      if ((result & 1) != 0)
      {
        *a6 = v35 >> 9;
        goto LABEL_34;
      }
      v14 = v48;
      if ((v35 & 0x70) == 0 && (*(_BYTE *)(v20 + 11) & 1) != 0)
      {
        *v19 = v35 | 0x80;
        *(_BYTE *)(v20 + 11) &= ~1u;
        *(_BYTE *)(v20 + 10) = 2;
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8);
        if ((int)v30 >= 8)
        {
          v37 = 0;
          v38 = 2 * *(_QWORD *)(v36 + 768);
          v39 = v19;
          do
          {
            v40 = v39;
            v41 = v30 >> 3;
            do
            {
              *v40++ = *v19;
              --v41;
            }
            while (v41);
            ++v37;
            v39 = (_WORD *)((char *)v39 + v38);
          }
          while (v37 != v30 >> 3);
          v36 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8);
        }
        if ((int)v30 >= 4)
        {
          v42 = 0;
          v43 = 16 * *(_QWORD *)(v36 + 848);
          v44 = (_QWORD *)v20;
          do
          {
            v45 = v44;
            v46 = v30 >> 2;
            do
            {
              v47 = *(_QWORD *)v20;
              *(_QWORD *)((char *)v45 + 6) = *(_QWORD *)(v20 + 6);
              *v45 = v47;
              v45 += 2;
              --v46;
            }
            while (v46);
            ++v42;
            v44 = (_QWORD *)((char *)v44 + v43);
          }
          while (v42 != v30 >> 2);
        }
      }
    }
    if (*a7)
      result = sub_1C97C81C4(a1, a2, a3, a4, 0, v17, 0);
    if (v14)
      *a6 = v17;
  }
  else
  {
    v49 = result;
    v21 = v11 - 1;
    if (v50)
    {
      *a7 = 1;
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(a2, a3, a4, a1);
      result = sub_1C97C81C4(a1, a2, a3, a4, 0, v22, 0);
    }
    v23 = 0;
    v24 = (a4 + 1);
    do
    {
      v25 = *(_DWORD *)(a1 + 16);
      if ((int)(((v23 & 1) << v21) + a2) < v25)
      {
        v26 = *(_DWORD *)(a1 + 20);
        if ((int)((v23 >> 1 << v21) + a3) < v26)
        {
          v27 = sub_1C97C3078(a5, v23, (1 << (v11 - 1)) + (int)a2 < v25, (1 << (v11 - 1)) + (int)a3 < v26);
          result = sub_1C97C6808(a1, ((v23 & 1) << v21) + (int)a2, (v23 >> 1 << v21) + a3, v24, v27, a6, a7);
        }
      }
      ++v23;
    }
    while (v23 != 4);
    if (v50 && *a7)
    {
      *a6 = v49;
LABEL_34:
      *a7 = 0;
    }
  }
  return result;
}

uint64_t sub_1C97C6D7C(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, char a6, char a7, char a8, int a9)
{
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;

  *(_BYTE *)(result + 824) = a5;
  *(_BYTE *)(result + 825) = a6;
  *(_BYTE *)(result + 826) = a7;
  *(_BYTE *)(result + 827) = a8;
  *(_DWORD *)(result + 832) = a2;
  *(_DWORD *)(result + 836) = a3;
  if (a5)
  {
    *(_QWORD *)(result + 872) = a4;
    v9 = (unsigned __int8 *)*((_QWORD *)a4 + 17);
    *(_QWORD *)(result + 840) = *v9;
    *(_QWORD *)(result + 848) = v9[1];
    v10 = *a4;
    v11 = v10 >> 3;
    *(_QWORD *)(result + 856) = v10 >> 3;
    v12 = v10 >> 2;
    *(_QWORD *)(result + 864) = v10 >> 2;
    v13 = a2 - *((_DWORD *)a4 + 1);
    v14 = a3 - *((_DWORD *)a4 + 2);
    v15 = (uint64_t)v14 >> 3;
    v16 = (uint64_t)v13 >> 3;
    v17 = *((_QWORD *)a4 + 12);
    *(_QWORD *)(result + 880) = *((_QWORD *)a4 + 11) + 2 * (v16 + (int)v11 * (uint64_t)(v14 >> 3));
    v18 = (uint64_t)v14 >> 2;
    v19 = (uint64_t)v13 >> 2;
    *(_QWORD *)(result + 888) = v17 + 16 * (v19 + (int)v12 * (uint64_t)(v14 >> 2));
    v20 = v14;
  }
  else
  {
    *(_QWORD *)(result + 872) = 0;
    v21 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2117);
    *(_QWORD *)(result + 840) = v21;
    *(_QWORD *)(result + 848) = v21 >> 1;
    v22 = *(_QWORD *)(*(_QWORD *)(result + 14840) + 8);
    v23 = *(_QWORD *)(v22 + 768);
    *(_QWORD *)(result + 856) = v23;
    v24 = *(_QWORD *)(v22 + 848);
    *(_QWORD *)(result + 864) = v24;
    if ((a3 | a2) < 0 || *(_DWORD *)(v22 + 520) <= a2 || *(_DWORD *)(v22 + 524) <= a3)
    {
      v25 = 0;
      *(_QWORD *)(result + 880) = 0;
    }
    else
    {
      *(_QWORD *)(result + 880) = *(_QWORD *)(v22 + 800) + 2 * (v23 * ((uint64_t)a3 >> 3) + (a2 >> 3));
      v25 = *(_QWORD *)(v22 + 880) + 16 * (v24 * ((uint64_t)a3 >> 2) + (a2 >> 2));
    }
    v20 = a3 - *((_DWORD *)a4 + 2);
    v18 = (uint64_t)v20 >> 2;
    v13 = a2 - *((_DWORD *)a4 + 1);
    v19 = (uint64_t)v13 >> 2;
    *(_QWORD *)(result + 888) = v25;
    v15 = (uint64_t)v20 >> 3;
    v16 = (uint64_t)v13 >> 3;
  }
  v26 = &a4[8 * a9];
  *(_QWORD *)(result + 896) = *(_QWORD *)(*((_QWORD *)v26 + 17) + 32)
                            + 2 * (v13 + **((unsigned __int8 **)v26 + 17) * (uint64_t)v20);
  v27 = v20 >> 1;
  v28 = (uint64_t)v13 >> 1;
  *(_QWORD *)(result + 904) = *(_QWORD *)(*((_QWORD *)v26 + 17) + 40)
                            + 2 * (v28 + *(unsigned __int8 *)(*((_QWORD *)v26 + 17) + 1) * (uint64_t)v27);
  *(_QWORD *)(result + 912) = *(_QWORD *)(*((_QWORD *)v26 + 17) + 48)
                            + 2 * (v28 + *(unsigned __int8 *)(*((_QWORD *)v26 + 17) + 1) * (uint64_t)v27);
  *(_QWORD *)(result + 920) = *(_QWORD *)(*((_QWORD *)v26 + 17) + 8)
                            + v19
                            + (int)v18 * (uint64_t)((unint64_t)**((unsigned __int8 **)v26 + 17) >> 2);
  *(_QWORD *)(result + 928) = *(_QWORD *)(*((_QWORD *)v26 + 17) + 16)
                            + v16
                            + (int)v15
                            * (uint64_t)((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v26 + 17) + 1) >> 2);
  *(_QWORD *)(result + 936) = *(_QWORD *)(*((_QWORD *)v26 + 17) + 24)
                            + v16
                            + (int)v15
                            * (uint64_t)((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v26 + 17) + 1) >> 2);
  return result;
}

void sub_1C97C6F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7, _BYTE *a8)
{
  uint64_t v11;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unint64_t v18;
  _WORD *v19;
  unsigned int v20;
  char v21;
  int v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int i;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  _WORD *v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  char v67;
  unsigned __int8 *v68;
  int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int v72;
  int v75;
  unsigned int v78;

  v11 = a2;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - (_DWORD)a4;
  v14 = *(unsigned __int8 **)(a1 + 24552);
  v15 = *(unsigned __int8 **)(a1 + 8 * a4 + 24680);
  v16 = a2 - *((_DWORD *)v14 + 1);
  v17 = a3 - *((_DWORD *)v14 + 2);
  v18 = *v14;
  v19 = (_WORD *)(*((_QWORD *)v14 + 11) + 2 * (((uint64_t)v16 >> 3) + (int)(v18 >> 3) * (uint64_t)(v17 >> 3)));
  v20 = (unsigned __int16)*v19;
  v78 = a3;
  v70 = v15;
  if ((v20 & 3) <= (int)a4)
  {
    v26 = *((_QWORD *)v14 + 12) + 16 * (((uint64_t)v16 >> 2) + (int)(v18 >> 2) * (uint64_t)(v17 >> 2));
    v27 = *(_QWORD *)(a1 + 14856);
    if (*(_BYTE *)(v27 + 12) && v13 >= *(_DWORD *)(v27 + 1636))
    {
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(a2, a3, a4, a1);
      v72 = 1;
      *a8 = 1;
      v28 = v14;
      sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), a2, v78, a4, v14, v43);
      v11 = a2;
      LODWORD(a6) = v43;
      a3 = v78;
      v20 = (unsigned __int16)*v19;
    }
    else
    {
      v28 = *(unsigned __int8 **)(a1 + 24552);
      v72 = 0;
    }
    v44 = a3;
    v69 = a6;
    v45 = v11;
    sub_1C97C25AC(a1, v15, v11, a3, a4, (v20 >> 2) & 3, a6);
    if (*(_BYTE *)(v26 + 10) == 1)
    {
      *(_BYTE *)(a1 + 24795) = 0;
      v46 = *(unsigned __int8 **)(a1 + 872);
      sub_1C97F1844(a1 + 14912, a1, v45, v44, a4, 1, ((unsigned __int16)*v19 >> 4) & 7);
      v47 = v44;
      v48 = v28;
      sub_1C97C82FC(a1, v45, v47, a4, v15, v28, a5, ((unsigned __int16)*v19 >> 4) & 7);
      sub_1C97C6D7C(a1, *(_DWORD *)(a1 + 24524), *(_DWORD *)(a1 + 24528), v46, 1, 0, 0, 0, 0);
      v38 = a7;
    }
    else
    {
      v49 = v44;
      v48 = v28;
      sub_1C97C8C08(a1, v45, v49, a4, v28, 0, 1, 0, 0);
      v50 = (unsigned __int16)*v19;
      v38 = a7;
      if ((v50 & 0x80) == 0)
      {
        v75 = 1 << v13;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 968) + 204))
        {
          v51 = a2;
          v52 = v78;
          (*(void (**)(_QWORD, _QWORD))(a1 + 29752))((1 << v13), (1 << v13 >> 1));
          v50 = (unsigned __int16)*v19;
        }
        else
        {
          v52 = v78;
          v51 = a2;
        }
        sub_1C97F1844(a1 + 14912, a1, v51, v52, a4, *(unsigned __int8 *)(v26 + 10), (v50 >> 4) & 7);
        v53 = sub_1C97FE084(a1 + 14912, v51, v52, 0);
        v54 = sub_1C97FBED4((_QWORD *)(a1 + 14912), v51, v52, 0, v28, 0);
        v48 = v28;
        if ((v53 & 1) == 0 && (v54 & 1) == 0 && (*v19 & 0x70) == 0 && (*(_BYTE *)(v26 + 11) & 1) != 0)
        {
          *v19 |= 0x80u;
          *(_BYTE *)(v26 + 11) &= ~1u;
          *(_BYTE *)(v26 + 10) = 2;
          v55 = *v28;
          if (v75 >= 8)
          {
            v56 = 0;
            v57 = v19;
            do
            {
              v58 = v57;
              v59 = v75 >> 3;
              do
              {
                *v58++ = *v19;
                --v59;
              }
              while (v59);
              ++v56;
              v57 += v55 >> 3;
            }
            while (v56 != v75 >> 3);
            v55 = *v28;
          }
          if (v75 >= 4)
          {
            v60 = 0;
            v61 = (_QWORD *)v26;
            do
            {
              v62 = v61;
              v63 = v75 >> 2;
              do
              {
                v64 = *(_QWORD *)v26;
                *(_QWORD *)((char *)v62 + 6) = *(_QWORD *)(v26 + 6);
                *v62 = v64;
                v62 += 2;
                --v63;
              }
              while (v63);
              ++v60;
              v61 += 2 * (v55 >> 2);
            }
            while (v60 != v75 >> 2);
          }
        }
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 14856) + 12) && *a8)
    {
      v65 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117);
      if ((sub_1C97C93B0(a2, v78, v65 >> a4, v48, 0) & 1) != 0
        || (sub_1C97C93B0(a2, v78, v65 >> a4, v48, 1u) & 1) != 0
        || sub_1C97C93B0(a2, v78, v65 >> a4, v48, 2u))
      {
        v66 = v69;
        *v38 = v69;
        *a8 = 0;
      }
      else
      {
        v66 = sub_1C97C8104(a1, a2, v78, a4, v48, *v38);
      }
      sub_1C97C8088(v65, a2, v78, a4, v70, v66);
      sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), a2, v78, a4, v48, v66);
    }
    if (v72 && *a8)
    {
      v42 = sub_1C97C8104(a1, a2, v78, a4, v48, *v38);
      sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), a2, v78, a4, v70, v42);
      sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), a2, v78, a4, v48, v42);
      goto LABEL_49;
    }
  }
  else
  {
    v68 = *(unsigned __int8 **)(a1 + 24552);
    v21 = v13 - 1;
    v22 = 1 << (v13 - 1);
    v23 = *(_QWORD *)(a1 + 14856);
    v71 = a4;
    if (*(_BYTE *)(v23 + 12) && v13 == *(_DWORD *)(v23 + 1636))
    {
      v24 = a7;
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 984))(a2, a3, v71, a1);
      v67 = 1;
      *a8 = 1;
      sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), a2, v78, v71, v68, v25);
      LODWORD(v11) = a2;
      a6 = v25;
      LODWORD(a3) = v78;
      v20 = (unsigned __int16)*v19;
    }
    else
    {
      v24 = a7;
      v67 = 0;
    }
    v29 = a6;
    sub_1C97C25AC(a1, v15, v11, a3, v71, (v20 >> 2) & 3, a6);
    v30 = a2;
    v31 = v78;
    for (i = 0; i != 4; ++i)
    {
      v33 = ((i & 1) << v21) + v30;
      v34 = *(_DWORD *)(a1 + 16);
      if ((int)v33 < v34)
      {
        v35 = (i >> 1 << v21) + v31;
        v36 = *(_DWORD *)(a1 + 20);
        if ((int)v35 < v36)
        {
          v37 = sub_1C97C3078(a5, i, v22 + (int)a2 < v34, (int)(v22 + v78) < v36);
          sub_1C97C6F70(a1, v33, v35, v71 + 1, v37, v29, v24, a8);
          v30 = a2;
          v31 = v78;
        }
      }
    }
    if ((v67 & 1) != 0 && *a8)
    {
      v38 = v24;
      v39 = *v24;
      v40 = v31;
      v41 = v30;
      v42 = sub_1C97C8104(a1, v30, v31, v71, *(unsigned __int8 **)(a1 + 872), v39);
      sub_1C97C81C4(a1, v41, v40, v71, v70, v42, 1);
      sub_1C97C81C4(a1, v41, v40, v71, v68, v42, 1);
LABEL_49:
      *v38 = v42;
      *a8 = 0;
    }
  }
}

int8x8_t sub_1C97C76F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int8x8_t result)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int i;
  unsigned int j;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD *, uint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;

  while (1)
  {
    v9 = a2 - *(_DWORD *)(a1 + 832);
    v10 = a3 - *(_DWORD *)(a1 + 836);
    v11 = *(_QWORD *)(a1 + 880);
    v12 = *(_QWORD *)(a1 + 856) * ((uint64_t)v10 >> 3) + (v9 >> 3);
    v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117) >> a4;
    v14 = a2 + (v13 >> 1);
    v15 = a3 + (v13 >> 1);
    v16 = *(unsigned __int16 *)(v11 + 2 * v12);
    if (a4 >= (v16 & 3))
      break;
    sub_1C97C76F0(a1, a2, a3, (a4 + 1));
    v17 = *(_DWORD *)(a1 + 16);
    if ((int)v14 < v17 && *(_DWORD *)(a1 + 20) > (int)a3)
    {
      sub_1C97C76F0(a1, v14, a3, (a4 + 1));
      v17 = *(_DWORD *)(a1 + 16);
    }
    if (v17 > (int)a2 && (int)v15 < *(_DWORD *)(a1 + 20))
    {
      sub_1C97C76F0(a1, a2, v15, (a4 + 1));
      v17 = *(_DWORD *)(a1 + 16);
    }
    if ((int)v14 < v17)
    {
      ++a4;
      a2 = a2 + (v13 >> 1);
      a3 = a3 + (v13 >> 1);
      if ((int)v15 < *(_DWORD *)(a1 + 20))
        continue;
    }
    return result;
  }
  if (((a3 | a2) & 0x80000000) != 0)
  {
    v18 = 0;
    if (!v13)
    {
LABEL_13:
      if ((v16 & 0x80) == 0)
        goto LABEL_14;
LABEL_24:
      v29 = *(_QWORD *)(a1 + 14840);
      if (!*(_BYTE *)(v29 + 564))
      {
        v30 = *(_QWORD **)(v29 + 8);
        v31 = v30[106];
        if ((_DWORD)a3 && (a3 & 7) == 0 && v13 >= 4)
        {
          v32 = (unsigned __int8 *)(v30[118] + v30[116] * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 2));
          v33 = v13 >> 2;
          v34 = v18 - 16 * v31;
          do
          {
            v35 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v29 + 5272);
            v36 = *(_QWORD *)(v29 + 5280);
            v37 = (_QWORD *)(v29 + (v36 >> 1));
            if ((v36 & 1) != 0)
              v35 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v37 + v35);
            v38 = v35(v37, v18, v34);
            v39 = *v32;
            if (v39 <= v38)
              LOBYTE(v39) = v38;
            *v32++ = v39;
            v34 += 16;
            --v33;
          }
          while (v33);
        }
        if ((_DWORD)a2 && (a2 & 7) == 0 && v13 >= 4)
        {
          v40 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 968)
                                  + *(_QWORD *)(*(_QWORD *)(v29 + 8) + 936) * ((uint64_t)(int)a2 >> 3)
                                  + ((int)a3 >> 2));
          v41 = v13 >> 2;
          v42 = v18 - 16;
          do
          {
            v43 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v29 + 5272);
            v44 = *(_QWORD *)(v29 + 5280);
            v45 = (_QWORD *)(v29 + (v44 >> 1));
            if ((v44 & 1) != 0)
              v43 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v45 + v43);
            v46 = v43(v45, v18, v42);
            v47 = *v40;
            if (v47 <= v46)
              LOBYTE(v47) = v46;
            *v40++ = v47;
            v42 += 16 * v31;
            --v41;
          }
          while (v41);
        }
      }
      return result;
    }
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 888) + 16 * (*(_QWORD *)(a1 + 864) * ((uint64_t)v10 >> 2) + (v9 >> 2));
    if (!v13)
      goto LABEL_13;
  }
  for (i = 0; i < v13; i += 4)
  {
    for (j = 0; j < v13; j += 4)
    {
      v27 = *(_QWORD *)(a1 + 888)
          + 16
          * (*(_QWORD *)(a1 + 864) * ((uint64_t)(int)(i + a3 - *(_DWORD *)(a1 + 836)) >> 2)
           + ((int)(a2 + j - *(_DWORD *)(a1 + 832)) >> 2));
      v28 = *(_QWORD *)(a1 + 14840) + 520;
      *(_BYTE *)(v27 + 8) = (*(_BYTE *)(v27 + 8) & 0xF0)
                          + *(_BYTE *)(v28 + ((unint64_t)*(unsigned __int8 *)(v27 + 8) >> 4));
      *(_BYTE *)(v27 + 9) = (*(_BYTE *)(v27 + 9) & 0xF0)
                          + *(_BYTE *)(v28 + ((unint64_t)*(unsigned __int8 *)(v27 + 9) >> 4) + 16);
    }
  }
  v16 = *(unsigned __int16 *)(v11 + 2 * v12);
  if ((v16 & 0x80) != 0)
    goto LABEL_24;
LABEL_14:
  if (*(_BYTE *)(v18 + 10) != 1)
  {
    v19 = *(_QWORD *)(a1 + 14840);
    if (!*(_BYTE *)(v19 + 564))
    {
      v20 = v13 >> 1;
      switch((v16 >> 4) & 7)
      {
        case 0u:
          v21 = v18;
          v22 = a2;
          v23 = a3;
          v24 = v13;
          goto LABEL_46;
        case 1u:
          sub_1C97C7C38(v19, v18, a2, a3, v13, v13 >> 1);
          v52 = *(_QWORD *)(a1 + 14840);
          v21 = sub_1C97C7D84(a1 + 824, a2, a3 + (v13 >> 1));
          v19 = v52;
          v22 = a2;
          v23 = a3 + (v13 >> 1);
          v24 = v13;
          goto LABEL_48;
        case 2u:
          sub_1C97C7C38(v19, v18, a2, a3, v13 >> 1, v13);
          v53 = *(_QWORD *)(a1 + 14840);
          v21 = sub_1C97C7D84(a1 + 824, a2 + (v13 >> 1), a3);
          v19 = v53;
          v22 = a2 + (v13 >> 1);
          v23 = a3;
          v24 = v13 >> 1;
LABEL_46:
          v48 = v13;
          goto LABEL_49;
        case 3u:
          sub_1C97C7C38(v19, v18, a2, a3, v13 >> 1, v13 >> 1);
          v54 = *(_QWORD *)(a1 + 14840);
          v49 = sub_1C97C7D84(a1 + 824, v14, a3);
          sub_1C97C7C38(v54, v49, v14, a3, v20, v20);
          v55 = *(_QWORD *)(a1 + 14840);
          v50 = sub_1C97C7D84(a1 + 824, a2, v15);
          sub_1C97C7C38(v55, v50, a2, v15, v20, v20);
          v56 = *(_QWORD *)(a1 + 14840);
          v21 = sub_1C97C7D84(a1 + 824, v14, v15);
          v19 = v56;
          v22 = a2 + (v13 >> 1);
          v23 = a3 + (v13 >> 1);
          v24 = v13 >> 1;
LABEL_48:
          v48 = v13 >> 1;
LABEL_49:
          sub_1C97C7C38(v19, v21, v22, v23, v24, v48);
          break;
        default:
          break;
      }
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 14848) + 278) && !*(_BYTE *)(*(_QWORD *)(a1 + 14840) + 564))
  {
    if (*(_BYTE *)(v18 + 10) == 1)
    {
      v57 = 1;
      return sub_1C97C7DD0(a1, a2, a3, 0, &v57, 1, result);
    }
    if ((*(_BYTE *)(v18 + 11) & 1) != 0)
    {
      v51 = *(_WORD *)(v11 + 2 * v12) & 0x70;
      v57 = (*(_WORD *)(v11 + 2 * v12) & 0x70) == 0;
      if (!v51)
        return sub_1C97C7DD0(a1, a2, a3, 0, &v57, 1, result);
    }
    else
    {
      v57 = 0;
    }
    result = sub_1C97C7DD0(a1, a2, a3, 0, &v57, 0, result);
    if (!v57)
      return result;
    return sub_1C97C7DD0(a1, a2, a3, 0, &v57, 1, result);
  }
  return result;
}

uint64_t sub_1C97C7C38(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;

  v10 = (_QWORD *)result;
  v11 = *(_QWORD **)(result + 8);
  v12 = v11[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    v13 = (unsigned __int8 *)(v11[118] + v11[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    v14 = a5 >> 2;
    v15 = a2 - 16 * v12;
    do
    {
      v16 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v10[659];
      v17 = v10[660];
      v18 = (_QWORD *)((char *)v10 + (v17 >> 1));
      if ((v17 & 1) != 0)
        v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v18 + v16);
      result = v16(v18, a2, v15);
      v19 = *v13;
      if (v19 <= result)
        LOBYTE(v19) = result;
      *v13++ = v19;
      v15 += 16;
      --v14;
    }
    while (v14);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    v20 = (unsigned __int8 *)(*(_QWORD *)(v10[1] + 968) + *(_QWORD *)(v10[1] + 936) * ((uint64_t)a3 >> 3) + (a4 >> 2));
    v21 = a6 >> 2;
    v22 = a2 - 16;
    do
    {
      v23 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v10[659];
      v24 = v10[660];
      v25 = (_QWORD *)((char *)v10 + (v24 >> 1));
      if ((v24 & 1) != 0)
        v23 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v25 + v23);
      result = v23(v25, a2, v22);
      v26 = *v20;
      if (v26 <= result)
        LOBYTE(v26) = result;
      *v20++ = v26;
      v22 += 16 * v12;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t sub_1C97C7D84(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;

  if (((a3 | a2) & 0x80000000) == 0
    && ((v3 = a2 - *(_DWORD *)(a1 + 8), v4 = a3 - *(_DWORD *)(a1 + 12), v5 = *(unsigned __int8 *)(a1 + 4), v3 < v5)
      ? (v6 = v4 < v5)
      : (v6 = 0),
        v6))
  {
    return *(_QWORD *)(a1 + 64) + 16 * (*(_QWORD *)(a1 + 40) * ((uint64_t)v4 >> 2) + (v3 >> 2));
  }
  else
  {
    return 0;
  }
}

int8x8_t sub_1C97C7DD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, BOOL *a5, uint64_t a6, int8x8_t result)
{
  uint64_t v9;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  _QWORD *v27;
  int v28;
  int8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  _QWORD *v41;

  LODWORD(v9) = a4;
  v13 = -a4;
  if ((a6 & 1) == 0)
  {
LABEL_2:
    if (!*a5)
      goto LABEL_3;
    return result;
  }
LABEL_3:
  while (1)
  {
    v14 = a2 - *(_DWORD *)(a1 + 832);
    v15 = a3 - *(_DWORD *)(a1 + 836);
    v16 = (uint64_t)v15 >> 3;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 880) + 2 * (*(_QWORD *)(a1 + 856) * v16 + (v14 >> 3)));
    v18 = *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113) - (v17 & 3);
    if ((int)v9 >= (int)((v17 >> 2) & 3))
      break;
    LOBYTE(v13) = v13 - 1;
    v19 = 1 << (v13 + v18);
    v20 = (v19 + a2);
    v21 = (v19 + a3);
    v9 = (v9 + 1);
    sub_1C97C7DD0(a1, a2, a3, v9, a5, a6);
    sub_1C97C7DD0(a1, v20, a3, v9, a5, a6);
    sub_1C97C7DD0(a1, a2, v21, v9, a5, a6);
    a2 = v20;
    a3 = v21;
    if ((a6 & 1) == 0)
      goto LABEL_2;
  }
  v22 = (uint64_t)v15 >> 2;
  v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 920) + (*(uint64_t *)(a1 + 840) >> 2) * v22 + (v14 >> 2));
  v25 = *a5 | v23
     || (v24 = ((uint64_t)v14 >> 3) + (*(uint64_t *)(a1 + 848) >> 2) * v16, *(_BYTE *)(*(_QWORD *)(a1 + 928) + v24))
     || *(_BYTE *)(*(_QWORD *)(a1 + 936) + v24) != 0;
  *a5 = v25;
  if ((_DWORD)a6)
  {
    v26 = v13 + v18;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 888) + 16 * (((uint64_t)v14 >> 2) + *(_QWORD *)(a1 + 864) * v22) + 10) == 1)
    {
      v27 = *(_QWORD **)(*(_QWORD *)(a1 + 14840) + 8);
      v28 = 1 << v26;
      v29 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(_QWORD *)&vdup_n_s32((2 << v26) - 64));
      v30 = v27[117];
      v31 = (uint64_t)(int)a3 >> 2;
      v32 = v27[121];
      v33 = v27[116];
      v34 = (uint64_t)(int)a2 >> 2;
      v35 = v27[118];
      if (v28 > 4)
      {
LABEL_12:
        v36 = v34 + v33 * ((uint64_t)(int)a3 >> 3);
        v37 = vmax_s8(*(int8x8_t *)(v35 + v36), v29);
        *(int8x8_t *)(v32 + v31 + v30 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v32+ v31+ v30 * ((uint64_t)(int)a2 >> 3)), v29);
        *(int8x8_t *)(v35 + v36) = v37;
      }
    }
    else
    {
      if (!v23)
        return result;
      v41 = *(_QWORD **)(*(_QWORD *)(a1 + 14840) + 8);
      v28 = 1 << v26;
      v29 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(_QWORD *)&vdup_n_s32((2 << v26) - 64));
      v30 = v41[117];
      v31 = (uint64_t)(int)a3 >> 2;
      v32 = v41[121];
      v33 = v41[116];
      v34 = (uint64_t)(int)a2 >> 2;
      v35 = v41[118];
      if (v28 >= 5)
        goto LABEL_12;
    }
    v38 = v34 + v33 * ((uint64_t)(v28 + (int)a3) >> 3);
    v39 = v31 + v30 * ((uint64_t)(v28 + (int)a2) >> 3);
    v40 = vmax_s8(*(int8x8_t *)(v32 + v39), v29);
    result = vmax_s8(*(int8x8_t *)(v35 + v38), v29);
    *(int8x8_t *)(v32 + v39) = v40;
    *(int8x8_t *)(v35 + v38) = result;
  }
  return result;
}

uint64_t sub_1C97C8088(uint64_t result, int a2, int a3, char a4, unsigned __int8 *a5, __int16 a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v10;

  v6 = result >> (a4 + 3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *((_QWORD *)a5 + 11)
       + 2
       * (((uint64_t)(a2 - *((_DWORD *)a5 + 1)) >> 3) + ((unint64_t)*a5 >> 3) * ((a3 - *((_DWORD *)a5 + 2)) >> 3));
    do
    {
      for (i = 0; i != v6; ++i)
      {
        v10 = i + v7 * ((unint64_t)*a5 >> 3);
        *(_WORD *)(v8 + 2 * v10) = *(_WORD *)(v8 + 2 * v10) & 0x1FF | (a6 << 9);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_1C97C8104(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4;
  if (v6 <= *(_DWORD *)(*(_QWORD *)(a1 + 14856) + 1636))
    LOBYTE(v6) = *(_DWORD *)(*(_QWORD *)(a1 + 14856) + 1636);
  v7 = -1 << v6;
  v8 = v7 & a2;
  v9 = v7 & a3;
  v10 = a6;
  if (v8 != *(_DWORD *)(a1 + 24524))
    v10 = *(__int16 *)(*((_QWORD *)a5 + 11)
                     + 2
                     * (((uint64_t)(v8 + ~*((_DWORD *)a5 + 1)) >> 3)
                      + ((unint64_t)*a5 >> 3) * ((v9 - *((_DWORD *)a5 + 2)) >> 3))) >> 9;
  if (v9 != *(_DWORD *)(a1 + 24528))
    a6 = *(__int16 *)(*((_QWORD *)a5 + 11)
                    + 2
                    * (((uint64_t)(v8 - *((_DWORD *)a5 + 1)) >> 3)
                     + ((unint64_t)*a5 >> 3) * ((v9 + ~*((_DWORD *)a5 + 2)) >> 3))) >> 9;
  return ((v10 + a6 + 1) >> 1);
}

uint64_t sub_1C97C81C4(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, __int16 a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4 <= *(_DWORD *)(*(_QWORD *)(result + 14856)
                                                                                    + 1636))
    v7 = *(_DWORD *)(*(_QWORD *)(result + 14856) + 1636);
  else
    v7 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4;
  v8 = 1 << v7;
  v9 = -(1 << v7) & a2;
  v10 = -(1 << v7) & a3;
  if (a7)
  {
    v11 = v7 - 3;
    if (v7 != 34)
    {
      v12 = 0;
      v13 = (unint64_t)*a5 >> 3;
      v14 = *((_QWORD *)a5 + 11)
          + 2 * (((uint64_t)(v9 - *((_DWORD *)a5 + 1)) >> 3) + (int)v13 * (uint64_t)((v10 - *((_DWORD *)a5 + 2)) >> 3));
      LODWORD(v15) = 1 << v11;
      if ((int)v15 <= 1)
        v15 = 1;
      else
        v15 = v15;
      v16 = 2 * v13;
      do
      {
        v17 = (_WORD *)v14;
        v18 = v15;
        do
        {
          *v17 = *v17 & 0x1FF | (a6 << 9);
          ++v17;
          --v18;
        }
        while (v18);
        ++v12;
        v14 += v16;
      }
      while (v12 != v15);
    }
  }
  else
  {
    v19 = v9 + v8;
    if (v9 + v8 >= *(_DWORD *)(result + 16))
      v19 = *(_DWORD *)(result + 16);
    v20 = v10 + v8;
    if (v20 >= *(_DWORD *)(result + 20))
      v20 = *(_DWORD *)(result + 20);
    for (; v10 < v20; v10 += 8)
    {
      if (v9 < v19)
      {
        v21 = v9;
        do
        {
          v22 = *(_QWORD *)(*(_QWORD *)(result + 14840) + 8);
          v23 = *(_QWORD *)(v22 + 800);
          v24 = *(_QWORD *)(v22 + 768) * ((uint64_t)v10 >> 3) + (v21 >> 3);
          *(_WORD *)(v23 + 2 * v24) = *(_WORD *)(v23 + 2 * v24) & 0x1FF | (a6 << 9);
          v21 += 8;
        }
        while (v21 < v19);
      }
    }
  }
  return result;
}

uint64_t sub_1C97C82FC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned int a7, unsigned int a8)
{
  _BYTE *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t result;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void **v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  char v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t *v80;
  void **v81;
  uint64_t *v82;
  __int16 v83;
  _BOOL4 v84;
  int v85;
  uint64_t v88;
  char v89;
  int v91;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  char v98;
  _DWORD v99[8];
  uint64_t v100;

  v11 = (_BYTE *)a1;
  v12 = 0;
  v100 = *MEMORY[0x1E0C80C00];
  v13 = *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113) - a4;
  v14 = *(unsigned __int8 *)(a1 + 196);
  v15 = a2 - *((_DWORD *)a6 + 1);
  v16 = a3 - *((_DWORD *)a6 + 2);
  v91 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4;
  v98 = 35;
  v17 = *(unsigned __int8 *)(*((_QWORD *)a6 + 12)
                           + 16 * (((uint64_t)v15 >> 2) + ((unint64_t)*a6 >> 2) * (v16 >> 2)));
  v96 = 0;
  v97 = 17439232;
  if (a8 == 3)
    v18 = 4;
  else
    v18 = 1;
  v19 = v13 - (a8 == 3);
  do
  {
    v99[v12 + 4] = ((v12 & 1) << v19) + a2;
    v99[v12] = (v12 >> 1 << v19) + a3;
    ++v12;
  }
  while (v18 != v12);
  v20 = 0;
  v84 = a8 == 3;
  v21 = 1 << v19;
  while (*((unsigned __int8 *)&v97 + v20) != v17)
  {
    if (++v20 == 4)
      goto LABEL_11;
  }
  *((_BYTE *)&v97 + v20) = 34;
LABEL_11:
  v22 = *(char *)(*(_QWORD *)(a1 + 968) + 499);
  v81 = (void **)*((_QWORD *)a6 + 17);
  v85 = v17;
  if (v22 != 2)
  {
    if (v22 == 1)
    {
      v80 = (uint64_t *)(a1 + 8 * a4 + 24712);
      *((_QWORD *)a5 + 18) = *v80;
      v82 = (uint64_t *)(a5 + 144);
      goto LABEL_14;
    }
LABEL_18:
    v89 = 0;
    v80 = (uint64_t *)(a1 + 8 * a4 + 24712);
    *((_QWORD *)a5 + 18) = *v80;
    v82 = (uint64_t *)(a5 + 144);
    v23 = 2 * (v14 == 0);
    goto LABEL_19;
  }
  if (!v14)
    goto LABEL_18;
  v24 = *(_QWORD *)(a1 + 14840);
  if (*(unsigned __int8 *)(*(_QWORD *)(v24 + 5320) + 648) <= 2u)
  {
    v89 = 0;
    v23 = 0;
    v80 = (uint64_t *)&v11[8 * a4 + 24712];
    *((_QWORD *)a5 + 18) = *v80;
    v82 = (uint64_t *)(a5 + 144);
    goto LABEL_19;
  }
  v72 = v11;
  v73 = sub_1C97C3118(v24, a2, a3);
  v11 = v72;
  v80 = (uint64_t *)&v72[8 * a4 + 24712];
  *((_QWORD *)a5 + 18) = *v80;
  v82 = (uint64_t *)(a5 + 144);
  if ((v73 & 1) != 0)
  {
    v89 = 0;
    v23 = 0;
    goto LABEL_19;
  }
LABEL_14:
  v23 = 2;
  v89 = 1;
LABEL_19:
  v25 = 0;
  LODWORD(v26) = 0;
  v27 = *((_QWORD *)a5 + 17);
  *(_DWORD *)(v27 + 112) = 0;
  *(_QWORD *)(v27 + 88) = 0;
  *(_QWORD *)(v27 + 96) = 0;
  *(_QWORD *)(v27 + 104) = -1;
  *(_WORD *)(v27 + 116) = v23;
  v28 = v21 >> 2;
  v88 = (uint64_t)(v11 + 14912);
  v29 = *((_QWORD *)a5 + 18);
  v83 = v23;
  v94 = (uint64_t)v11;
  do
  {
    v93 = v26;
    v30 = 0;
    *(_DWORD *)(v29 + 112) = 0;
    *(_QWORD *)(v29 + 88) = 0;
    *(_QWORD *)(v29 + 96) = 0;
    *(_QWORD *)(v29 + 104) = -1;
    *(_WORD *)(v29 + 116) = v23;
    v95 = v25;
    v26 = *((unsigned __int8 *)&v97 + v25);
    do
    {
      v31 = *((_QWORD *)a5 + 12)
          + 16
          * (((uint64_t)(v99[v30 + 4] - *((_DWORD *)a5 + 1)) >> 2)
           + ((unint64_t)*a5 >> 2) * ((v99[v30] - *((_DWORD *)a5 + 2)) >> 2));
      *(_BYTE *)(v31 + 1) = v26;
      if (v21 >= 4)
      {
        v32 = 0;
        v33 = 16 * ((unint64_t)*a5 >> 2);
        v34 = (_QWORD *)v31;
        do
        {
          v35 = v34;
          v36 = v21 >> 2;
          do
          {
            v37 = *(_QWORD *)v31;
            *(_QWORD *)((char *)v35 + 6) = *(_QWORD *)(v31 + 6);
            *v35 = v37;
            v35 += 2;
            --v36;
          }
          while (v36);
          ++v32;
          v34 = (_QWORD *)((char *)v34 + v33);
        }
        while (v32 != v28);
      }
      ++v30;
    }
    while (v30 != v18);
    v38 = v89;
    if (!v11[196])
      v38 = 1;
    if ((v38 & 1) != 0)
    {
      v39 = sub_1C97F85D4(v88, a2, a3, a5, a6, a8, v26, v91, 0, 0, a7);
      v29 = *((_QWORD *)a5 + 18);
      *(_QWORD *)(v29 + 88) = v39;
      if ((_DWORD)v26 == 35)
        result = 1;
      else
        result = 3;
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)a5 + 18) + 88) = sub_1C97F8D0C(v88, a2, a3, a5, a6, 1u, a8, v26, v91, v84, 0, a7, &v96);
      v23 = v83;
      result = sub_1C97C946C(v94, a2, a3, a4, (uint64_t)a5, v26, v85);
      v29 = *((_QWORD *)a5 + 18);
      v39 = *(_QWORD *)(v29 + 88);
    }
    *(_DWORD *)(v29 + 112) = result;
    v11 = (_BYTE *)v94;
    v41 = ((*(unsigned __int16 *)(v94 + 2 * *(__int16 *)(v29 + 116) + 1152) * (unint64_t)result) >> (8 * (*(_WORD *)(v29 + 116) == 0)))
        + v39;
    *(_QWORD *)(v29 + 104) = v41;
    v42 = *((_QWORD *)a5 + 17);
    if (v41 >= *(_QWORD *)(v42 + 104))
    {
      v26 = v93;
    }
    else
    {
      *((_QWORD *)a5 + 17) = v29;
      *((_QWORD *)a5 + 18) = v42;
      v29 = v42;
    }
    v25 = v95 + 1;
  }
  while (v95 != 4);
  v43 = *((_QWORD *)a5 + 17);
  if ((v89 & 1) != 0)
  {
    v44 = 0;
    *(_DWORD *)(v43 + 112) = 0;
    *(_QWORD *)(v43 + 88) = 0;
    *(_QWORD *)(v43 + 96) = 0;
    *(_QWORD *)(v43 + 104) = -1;
    *(_WORD *)(v43 + 116) = 0;
    v45 = *v82;
    *(_DWORD *)(v45 + 112) = 0;
    *(_QWORD *)(v45 + 88) = 0;
    *(_QWORD *)(v45 + 96) = 0;
    *(_QWORD *)(v45 + 104) = -1;
    *(_WORD *)(v45 + 116) = 0;
    v46 = a3;
    do
    {
      v47 = *((_QWORD *)a5 + 12)
          + 16
          * (((uint64_t)(v99[v44 + 4] - *((_DWORD *)a5 + 1)) >> 2)
           + ((unint64_t)*a5 >> 2) * ((v99[v44] - *((_DWORD *)a5 + 2)) >> 2));
      *(_BYTE *)(v47 + 1) = v26;
      if (v21 >= 4)
      {
        v48 = 0;
        v49 = 16 * ((unint64_t)*a5 >> 2);
        v50 = (_QWORD *)v47;
        do
        {
          v51 = v50;
          v52 = v21 >> 2;
          do
          {
            v53 = *(_QWORD *)v47;
            *(_QWORD *)((char *)v51 + 6) = *(_QWORD *)(v47 + 6);
            *v51 = v53;
            v51 += 2;
            --v52;
          }
          while (v52);
          ++v48;
          v50 = (_QWORD *)((char *)v50 + v49);
        }
        while (v48 != v28);
      }
      ++v44;
    }
    while (v44 != v18);
    *(_QWORD *)(*((_QWORD *)a5 + 18) + 88) = sub_1C97F8D0C(v88, a2, a3, a5, a6, 1u, a8, v26, v91, v84, 0, a7, &v96);
    result = sub_1C97C946C(v94, a2, a3, a4, (uint64_t)a5, v26, v85);
    v11 = (_BYTE *)v94;
    v54 = *((_QWORD *)a5 + 18);
    *(_DWORD *)(v54 + 112) = result;
    v55 = ((*(unsigned __int16 *)(v94 + 2 * *(__int16 *)(v54 + 116) + 1152) * (unint64_t)result) >> (8 * (*(_WORD *)(v54 + 116) == 0)))
        + *(_QWORD *)(v54 + 88);
    *(_QWORD *)(v54 + 104) = v55;
    v43 = *((_QWORD *)a5 + 17);
    v56 = v81;
    if (v55 < *(_QWORD *)(v43 + 104))
    {
      *((_QWORD *)a5 + 17) = v54;
      *((_QWORD *)a5 + 18) = v43;
      v43 = v54;
    }
  }
  else
  {
    v46 = a3;
    v56 = v81;
  }
  v57 = 0;
  v58 = &a5[32 * v11[196]];
  *((_QWORD *)v58 + 21) += *(_QWORD *)(v43 + 88);
  *((_DWORD *)v58 + 48) += *(_DWORD *)(v43 + 112);
  do
  {
    v59 = *((_QWORD *)a6 + 12)
        + 16
        * (((uint64_t)(v99[v57 + 4] - *((_DWORD *)a6 + 1)) >> 2)
         + ((unint64_t)*a6 >> 2) * ((v99[v57] - *((_DWORD *)a6 + 2)) >> 2));
    *(_BYTE *)(v59 + 1) = v26;
    if (v21 >= 4)
    {
      v60 = 0;
      v61 = 16 * ((unint64_t)*a6 >> 2);
      v62 = (_QWORD *)v59;
      do
      {
        v63 = v62;
        v64 = v21 >> 2;
        do
        {
          v65 = *(_QWORD *)v59;
          result = *(_QWORD *)(v59 + 6);
          *(_QWORD *)((char *)v63 + 6) = result;
          *v63 = v65;
          v63 += 2;
          --v64;
        }
        while (v64);
        ++v60;
        v62 = (_QWORD *)((char *)v62 + v61);
      }
      while (v60 != v28);
    }
    ++v57;
  }
  while (v57 != v18);
  v96 = 0;
  if (v11[196])
  {
    v66 = *((_QWORD *)a5 + 17);
    goto LABEL_63;
  }
  if ((*(_WORD *)(*((_QWORD *)a6 + 11)
                 + 2
                 * (((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                  + ((unint64_t)*a6 >> 3) * (((int)v46 - *((_DWORD *)a6 + 2)) >> 3))) & 0xC) == 0
    || v11[29744])
  {
    v67 = v11;
    result = sub_1C97F8D0C(v88, a2, v46, a5, a6, 0, a8, v26, v91, 0, 0, a7, &v96);
    v11 = v67;
    v66 = *((_QWORD *)a5 + 17);
    if (!*v67)
      goto LABEL_63;
    v68 = result;
    *(_QWORD *)(v66 + 88) = result;
    v69 = *(_DWORD *)(v66 + 112) + v96;
    *(_DWORD *)(v66 + 112) = v69;
LABEL_62:
    *((_QWORD *)a5 + 25) += v68;
    *((_DWORD *)a5 + 56) += v69;
    goto LABEL_63;
  }
  v66 = *((_QWORD *)a5 + 17);
  if (*v11)
  {
    v74 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    v75 = ((int)v46 - *((_DWORD *)a5 + 2)) >> 1;
    v76 = *(unsigned __int8 *)(v66 + 1);
    v77 = **(_QWORD **)(v66 + 72)
        + (*(_QWORD *)(v66 + 80) + v74 + 2 * (int)v76 * (uint64_t)v75) * *(int *)(*(_QWORD *)(v66 + 72) + 16);
    v78 = ((uint64_t)(int)v74 >> 1) + v76 * v75;
    v79 = v11;
    result = sub_1C97F91AC(v88, a2, v46, a5, v77, 2 * v76, *(_QWORD *)(v66 + 40) + 2 * v78, *(_QWORD *)(v66 + 48) + 2 * v78, v76, 1 << v91 >> 1, &v96);
    v11 = v79;
    v68 = result;
    v66 = *((_QWORD *)a5 + 17);
    *(_QWORD *)(v66 + 88) = result;
    v69 = *(_DWORD *)(v66 + 112) + v96;
    *(_DWORD *)(v66 + 112) = v69;
    if (*v79)
      goto LABEL_62;
  }
LABEL_63:
  if (v56 != (void **)v66)
  {
    v70 = v11;
    result = (uint64_t)sub_1C97C2AFC(*((uint64_t (**)(_QWORD, uint64_t))v11 + 3719), v56, (const void **)v66, (int)a2 - *((_DWORD *)a6 + 1), (int)v46 - *((_DWORD *)a6 + 2), (int)a2 - *((_DWORD *)a5 + 1), (int)v46 - *((_DWORD *)a5 + 2), *a5 >> 1);
    if (!v70[8])
    {
      v71 = *((_QWORD *)a5 + 17);
      *((_QWORD *)a5 + 17) = *((_QWORD *)a5 + 18);
      *((_QWORD *)a5 + 18) = v71;
    }
  }
  *v80 = *v82;
  return result;
}

uint64_t sub_1C97C8C08(uint64_t a1, int a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, unsigned int *a9)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  unsigned int (*v77)(_QWORD, _QWORD, uint64_t);
  unint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t result;
  unsigned int v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v98;
  int v100;
  uint64_t v101;

  v11 = a3;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - (uint64_t)a4;
  v13 = 1 << (v12 - 1);
  v100 = v13 + a2;
  v98 = v13;
  v14 = (v13 + a3);
  if (a5)
  {
    v15 = *((_DWORD *)a5 + 1);
    v16 = *((_DWORD *)a5 + 2);
    v17 = a2 - v15;
    v18 = a3 - v16;
    v19 = *a5;
    v20 = *((_QWORD *)a5 + 12);
    v21 = (unsigned __int16 *)(*((_QWORD *)a5 + 11)
                             + 2 * (((uint64_t)(a2 - v15) >> 3) + (int)(v19 >> 3) * (uint64_t)(((int)a3 - v16) >> 3)));
    v19 >>= 2;
    v22 = (uint64_t)(a2 - v15) >> 2;
    v23 = (unsigned int *)(v20 + 16 * (v22 + (int)v19 * (uint64_t)(((int)a3 - v16) >> 2)));
    v24 = v100 - v15;
    v25 = (uint64_t)(v100 - v15) >> 2;
    v96 = (unsigned int *)(v20 + 16 * (v25 + (int)v19 * (uint64_t)(v18 >> 2)));
    v26 = v14 - v16;
    v27 = (unsigned int *)(v20 + 16 * (v22 + (int)v19 * (uint64_t)(((int)v14 - v16) >> 2)));
    v28 = v20 + 16 * (v25 + (int)v19 * (uint64_t)(((int)v14 - v16) >> 2));
    v29 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
    v30 = *v29;
    v31 = 2 * v29[1];
    if ((a6 & 1) == 0)
    {
      if (a8 || (a7 & 1) != 0)
      {
        v38 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v32 = v17;
        v39 = v24;
LABEL_39:
        v60 = v18 >> 1;
        v62 = (uint64_t *)*((_QWORD *)v29 + 9);
        v61 = *((_QWORD *)v29 + 10);
        v63 = v61 + v32;
        v64 = *((int *)v62 + 4);
        v65 = *v62;
        v52 = v65 + (v63 + (int)v31 * (uint64_t)v60) * v64;
        v66 = v61 + v39;
        v53 = v65 + (v66 + (int)v31 * (uint64_t)v60) * v64;
        v54 = v65 + (v63 + (int)v31 * (uint64_t)(v26 >> 1)) * v64;
        v55 = v65 + (v66 + (int)v31 * (uint64_t)(v26 >> 1)) * v64;
        goto LABEL_40;
      }
      v45 = 0;
      v43 = 0;
      v42 = 0;
      v41 = 0;
      v38 = 0;
LABEL_36:
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      goto LABEL_41;
    }
    v32 = v17;
    v33 = (uint64_t *)*((_QWORD *)v29 + 7);
    v34 = *((_QWORD *)v29 + 8);
    v35 = v34 + v17;
    v36 = *((int *)v33 + 4);
    v37 = *v33;
    v38 = v37 + (v35 + *v29 * (uint64_t)v18) * v36;
    v39 = v24;
    v40 = v34 + v24;
    v41 = v37 + (v40 + *v29 * (uint64_t)v18) * v36;
    v42 = v37 + (v35 + *v29 * (uint64_t)v26) * v36;
    v43 = v37 + (v40 + *v29 * (uint64_t)v26) * v36;
    if (a8 || (a7 & 1) != 0)
      goto LABEL_39;
LABEL_35:
    v45 = 0;
    goto LABEL_36;
  }
  if (((a3 | a2) & 0x80000000) != 0
    || (v44 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8), *(_DWORD *)(v44 + 520) <= a2))
  {
    v21 = 0;
  }
  else
  {
    if (*(_DWORD *)(v44 + 524) <= (int)a3)
      v21 = 0;
    else
      v21 = (unsigned __int16 *)(*(_QWORD *)(v44 + 800)
                               + 2 * (*(_QWORD *)(v44 + 768) * ((uint64_t)(int)a3 >> 3) + (a2 >> 3)));
    if (*(_DWORD *)(v44 + 524) > (int)a3)
    {
      v23 = (unsigned int *)(*(_QWORD *)(v44 + 880) + 16
                                                    * (*(_QWORD *)(v44 + 848) * ((uint64_t)(int)a3 >> 2) + (a2 >> 2)));
      goto LABEL_15;
    }
  }
  v23 = 0;
LABEL_15:
  if (((v100 | a3) & 0x80000000) != 0
    || (v46 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8), *(_DWORD *)(v46 + 520) <= v100)
    || *(_DWORD *)(v46 + 524) <= (int)a3)
  {
    v96 = 0;
  }
  else
  {
    v96 = (unsigned int *)(*(_QWORD *)(v46 + 880) + 16
                                                  * (*(_QWORD *)(v46 + 848) * ((uint64_t)(int)a3 >> 2) + (v100 >> 2)));
  }
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8);
  if (((v14 | a2) & 0x80000000) != 0
    || *(_DWORD *)(v47 + 520) <= a2
    || *(_DWORD *)(v47 + 524) <= (int)v14)
  {
    v27 = 0;
  }
  else
  {
    v27 = (unsigned int *)(*(_QWORD *)(v47 + 880) + 16 * (*(_QWORD *)(v47 + 848) * ((uint64_t)(int)v14 >> 2) + (a2 >> 2)));
  }
  if (((v14 | v100) & 0x80000000) != 0
    || *(_DWORD *)(v47 + 520) <= v100
    || *(_DWORD *)(v47 + 524) <= (int)v14)
  {
    v28 = 0;
  }
  else
  {
    v28 = *(_QWORD *)(v47 + 880) + 16 * (*(_QWORD *)(v47 + 848) * ((uint64_t)(int)v14 >> 2) + (v100 >> 2));
  }
  v30 = *(_QWORD *)(v47 + 416);
  v31 = *(_QWORD *)(v47 + 424);
  if (a6)
  {
    v48 = v30 * (int)a3;
    v49 = *(_QWORD *)(v47 + 400);
    v50 = *(_BYTE *)(v47 + 531);
    v38 = v49 + ((v48 + a2) << v50);
    v41 = v49 + ((v48 + v100) << v50);
    v51 = v30 * (int)v14;
    v42 = v49 + ((v51 + a2) << v50);
    v43 = v49 + ((v51 + v100) << v50);
    if (a8)
      goto LABEL_37;
  }
  else
  {
    v38 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    if (a8)
      goto LABEL_37;
  }
  if ((a7 & 1) == 0)
    goto LABEL_35;
LABEL_37:
  v56 = v31 * ((uint64_t)(int)v11 >> 1);
  v57 = *(_QWORD *)(v47 + 408);
  v58 = *(_BYTE *)(v47 + 531);
  v52 = v57 + ((v56 + (int)(a2 & 0xFFFFFFFE)) << v58);
  v53 = v57 + ((v56 + (int)(v100 & 0xFFFFFFFE)) << v58);
  v59 = v31 * ((uint64_t)(int)v14 >> 1);
  v54 = v57 + ((v59 + (int)(a2 & 0xFFFFFFFE)) << v58);
  v55 = v57 + ((v59 + (int)(v100 & 0xFFFFFFFE)) << v58);
LABEL_40:
  v45 = 1;
LABEL_41:
  v67 = (1 << v12);
  switch((*v21 >> 4) & 7)
  {
    case 0:
      v68 = v12;
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v23, a2, v11, v67, v67, v30, v38, v31, v52);
      v12 = v68;
      break;
    case 1:
      v90 = v42;
      v101 = v14;
      v95 = v12;
      v92 = v11;
      v69 = v54;
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v23, a2, v11, (1 << v12), v98, v30, v38, v31, v52);
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v27, a2, v101, v67, v98, v30, v90, v31, v69);
      goto LABEL_46;
    case 2:
      v95 = v12;
      v93 = v41;
      v70 = v53;
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v23, a2, v11, v98, v67, v30, v38, v31, v52);
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v96, v100, v11, v98, v67, v30, v93, v31, v70);
      goto LABEL_47;
    case 3:
      v91 = v42;
      v85 = v52;
      v88 = (unsigned int *)v28;
      v89 = v43;
      v86 = v27;
      v95 = v12;
      v71 = v98;
      v72 = v41;
      v73 = v53;
      v92 = v11;
      v74 = v54;
      v87 = v55;
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v23, a2, v11, v98, v98, v30, v38, v31, v85);
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v96, v100, v11, v71, v71, v30, v72, v31, v73);
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v86, a2, v14, v71, v71, v30, v91, v31, v74);
      sub_1C980B120(*(_QWORD *)(a1 + 14840), v88, v100, v14, v98, v98, v30, v89, v31, v87);
LABEL_46:
      LODWORD(v11) = v92;
LABEL_47:
      v12 = v95;
      break;
    default:
      break;
  }
  v75 = v45 ^ 1;
  if (!a5)
    v75 = 1;
  if ((v75 & 1) != 0)
    return 0;
  v76 = **((_QWORD **)a5 + 5)
      + (*((_QWORD *)a5 + 6) - *((int *)a5 + 1) + a2 + a5[1] * (uint64_t)(((int)v11 - *((_DWORD *)a5 + 2)) >> 1))
      * *(int *)(*((_QWORD *)a5 + 5) + 16);
  v77 = *(unsigned int (**)(_QWORD, _QWORD, uint64_t))(a1 + 8 * v12 + 1416);
  if (a8 == 1)
  {
    v78 = (*(unsigned __int16 *)(a1 + 1164) * (unint64_t)v77(v98, v98, v76)) >> 8;
    v79 = *a9;
    v80 = *(char *)(*(_QWORD *)(a1 + 968) + 203);
    v81 = v79 + (v79 >> 1);
    v82 = v79 - (v79 >> 2);
    if (v80 == 1)
      v79 = *a9 >> 1;
    if (v80 == 2)
      v79 = v82;
    if (v80 == 4)
      v79 = v81;
    return (v79 <= v78) | (2 * (v78 >= v79 >> 1));
  }
  else
  {
    result = 0;
    if (a9 && a7)
    {
      v84 = v77(v98, v98, v76);
      result = 0;
      *(_QWORD *)a9 += ((*(unsigned __int16 *)(a1 + 1164) * (unint64_t)v84) >> 8);
    }
  }
  return result;
}

uint64_t sub_1C97C93B0(int a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  int v5;
  char v6;
  uint64_t v7;
  _BOOL8 v8;
  int v9;
  int v10;

  if (a3 >= 1)
  {
    v5 = a3 + a2;
    if (a5)
      v6 = 3;
    else
      v6 = 2;
    v7 = a5;
    v8 = (int)a5 > 0;
    v9 = *((_DWORD *)a4 + 2);
    while (2)
    {
      v10 = a1;
      do
      {
        if (*(_BYTE *)(*((_QWORD *)a4 + 12)
                      + 16 * (((unint64_t)*a4 >> 2) * ((a2 - v9) >> 2) + ((v10 - *((_DWORD *)a4 + 1)) >> 2))
                      + 10) != 2
          && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a4 + 17) + 8 * v7 + 8)
                      + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a4 + 17) + v8) >> 2) * ((a2 - v9) >> v6)
                      + ((v10 - *((_DWORD *)a4 + 1)) >> v6)))
        {
          return 1;
        }
        v10 += 4;
      }
      while (v10 < a3 + a1);
      a2 += 4;
      if (a2 < v5)
        continue;
      break;
    }
  }
  return 0;
}

uint64_t sub_1C97C946C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  int v16;
  char v17;

  v17 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
  v16 = *(_DWORD *)(a5 + 20);
  sub_1C97C9564(*(char **)(a1 + 944), a7, a6);
  sub_1C97C6D7C(a1, a2, a3, (unsigned __int8 *)a5, 1, 0, 0, 0, 1);
  sub_1C97F46A4(a1 + 14912, a2, a3, a4, &v16, &v17, 0);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
  return v14;
}

uint64_t sub_1C97C9564(char *a1, int a2, uint64_t a3)
{
  char *v5;
  uint64_t (*v6)(char *, uint64_t, char *);
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;

  v5 = a1 + 65;
  v6 = **(uint64_t (***)(char *, uint64_t, char *))a1;
  if ((_DWORD)a3 == 35)
    return v6(a1, 0, v5);
  v6(a1, 1, v5);
  v9 = 0;
  v12 = 35;
  v11 = 17439232;
  while (*((unsigned __int8 *)&v11 + v9) != a2)
  {
    if (++v9 == 4)
      goto LABEL_8;
  }
  *((_BYTE *)&v11 + v9) = 34;
LABEL_8:
  v10 = 0;
  while (*((unsigned __int8 *)&v11 + v10) != (_DWORD)a3)
  {
    if (++v10 == 4)
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3, 2);
  }
  a3 = v10;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3, 2);
}

uint64_t sub_1C97C9654(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v17;

  v7 = a6;
  v9 = (int *)(a1 + 24524);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4;
  if (v10 <= *(_DWORD *)(*(_QWORD *)(a1 + 14856) + 1636))
    LOBYTE(v10) = *(_DWORD *)(*(_QWORD *)(a1 + 14856) + 1636);
  v11 = -1 << v10;
  v12 = v11 & a2;
  v13 = v11 & a3;
  v14 = *v9;
  if (a7)
  {
    v17 = a6;
    if (v12 != v14)
      v17 = sub_1C97C97B0(a1, v12, v13, a4, a5, v12 - 1, v13);
    if (v13 != v9[1])
      v7 = sub_1C97C97B0(a1, v12, v13, a4, a5, v12, v13 - 1);
  }
  else
  {
    v17 = a6;
    if (v12 != v14)
      v17 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 800)
                       + 2
                       * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 768) * ((uint64_t)v13 >> 3)
                        + ((v12 - 1) >> 3))) >> 9;
    if (v13 != *(_DWORD *)(a1 + 24528))
      v7 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 800)
                      + 2
                      * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 768) * ((uint64_t)(v13 - 1) >> 3)
                       + (v12 >> 3))) >> 9;
  }
  return ((v17 + v7 + 1) >> 1);
}

uint64_t sub_1C97C97B0(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v7 = *((_DWORD *)a5 + 1);
  if (v7 > a6
    || (v8 = *a5, (int)(v7 + v8) <= a6)
    || ((v9 = *((_DWORD *)a5 + 2), v9 <= a7) ? (v10 = (int)(v9 + v8) <= a7) : (v10 = 1), v10))
  {
    v11 = *(_DWORD *)(a1 + 24524);
    v12 = *(_DWORD *)(a1 + 24528);
    v13 = a6 - v11;
    v14 = a7 - v12;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
    if (a4 < 0)
    {
LABEL_13:
      v19 = -1;
    }
    else
    {
      v16 = a2 - v11;
      v17 = a3 - v12;
      v18 = v15 - a4;
      while (v16 >> v18 != v13 >> v18 || v17 >> v18 != v14 >> v18)
      {
        v10 = v18++ < v15;
        if (!v10)
          goto LABEL_13;
      }
      v19 = v15 - v18;
      if (v15 - v18 < a4)
        ++v19;
    }
    a5 = *(unsigned __int8 **)(a1
                             + 32 * v19
                             + 8
                             * ((v13 >> (v15 - v19)) & 1 | (2 * ((v14 >> (v15 - v19)) & 1)))
                             + 24552);
    v7 = *((_DWORD *)a5 + 1);
    v9 = *((_DWORD *)a5 + 2);
    v8 = *a5;
  }
  return (*(__int16 *)(*((_QWORD *)a5 + 11)
                                   + 2 * (((uint64_t)(a6 - v7) >> 3) + (v8 >> 3) * (uint64_t)((a7 - v9) >> 3))) >> 9);
}

uint64_t sub_1C97C98A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int8 **a6, void ***a7, uint64_t a8)
{
  void ***v8;
  unsigned __int8 **v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15;
  int v16;
  char v17;
  void **v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  __int16 *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  int v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  char *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  char v73;
  unsigned int *v74;
  unsigned int v75;
  void **v76;
  uint64_t v77;
  _BOOL4 v78;
  _WORD *v79;
  unsigned int *v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  void **v84;
  int v85;
  int v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int8x16_t v91;
  void **v92;
  __n128 v93;
  __int16 v95;
  int v96;
  __int16 v97;
  uint64_t v98;
  __int16 *v99;
  _BOOL4 v100;
  _BOOL4 v101;
  __int16 *v102;
  __int16 *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  _BOOL4 v109;
  unsigned int v110;
  void ***v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  unsigned __int8 **v122;
  unsigned __int8 **v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  unsigned int v135;
  int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _DWORD v141[2];
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;

  v8 = a7;
  v9 = a6;
  v11 = a4;
  v12 = a3;
  v13 = a2;
  v148 = *MEMORY[0x1E0C80C00];
  v134 = (_BYTE *)(a1 + 29744);
  v15 = *(unsigned __int8 **)(a1 + 14848);
  v16 = v15[2113] - a4;
  v136 = 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 58) >= 2u)
  {
    v21 = a4;
    goto LABEL_34;
  }
  v17 = *(_BYTE *)(a1 + 197);
  if (v17)
  {
    v18 = *a7;
    v19 = (*a7)[12];
    v20 = (unint64_t)*(unsigned __int8 *)*a7 >> 2;
    if (v19[16 * ((uint64_t)((int)a2 - *((_DWORD *)*a7 + 1)) >> 2)
           + 10
           + 16 * (int)v20 * (uint64_t)(((int)a3 - *((_DWORD *)*a7 + 2)) >> 2)] == 2)
    {
      v17 = 0;
      goto LABEL_32;
    }
    v22 = (int *)(a1 + 4 * a4 + 27648);
    v23 = *v22;
    v24 = *v22 | 6;
    *v22 = v24;
    if (v16 < 4)
    {
      if (v16 == 3)
      {
        v17 = *(_BYTE *)(*(_QWORD *)(a1 + 968) + 227);
        if (!v17)
        {
          v24 = v23 & 0xFFFFFFF9;
          *(_DWORD *)(a1 + 4 * a4 + 27668) |= 6u;
          goto LABEL_31;
        }
      }
    }
    else
    {
      v24 = v23 | 0xE;
      *v22 = v23 | 0xE;
    }
    v17 = 0;
    if (!a8 || v16 <= v15[2112])
      goto LABEL_31;
    v125 = v16;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = a4 + 1;
    v31 = v15[2117] >> a4;
    v144 = a2;
    v145 = a2 + (v31 >> 1);
    v146 = a2;
    v147 = v145;
    v32 = ((uint64_t)((int)a2 - *((_DWORD *)v18 + 1)) >> 2) + (int)v20 * (uint64_t)(((int)a3 - *((_DWORD *)v18 + 2)) >> 2);
    v141[0] = a3;
    v141[1] = a3;
    v33 = (__int16 *)&v19[16 * v32];
    v142 = a3 + (v31 >> 1);
    v143 = v142;
    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    do
    {
      v34 = *(unsigned __int8 **)(a1 + 32 * v30 + 24552 + 8 * v26);
      v35 = *(&v144 + v26) - *((_DWORD *)v34 + 1);
      v36 = v141[v26] - *((_DWORD *)v34 + 2);
      v37 = *v34;
      v39 = *((_QWORD *)v34 + 11);
      v38 = *((_QWORD *)v34 + 12);
      v40 = (_WORD *)(v39 + 2 * (((uint64_t)v35 >> 3) + (int)(v37 >> 3) * (uint64_t)(v36 >> 3)));
      *((_QWORD *)&v139 + v26) = v40;
      if ((int)v30 < (*v40 & 3))
        ++v29;
      v41 = v38 + 16 * (((uint64_t)v35 >> 2) + (int)(v37 >> 2) * (uint64_t)(v36 >> 2));
      *((_QWORD *)&v137 + v26) = v41;
      v42 = *(unsigned __int8 *)(v41 + 10);
      if (v42 == 2)
        ++v28;
      if (v42 == 1)
        ++v27;
      ++v26;
    }
    while (v26 != 4);
    v43 = *(_QWORD *)(a8 + 16);
    if ((unint64_t)v18[21] + *(unsigned __int16 *)(a1 + 1156) * (unint64_t)(*(_DWORD *)(a8 + 24) >> 2) < v43)
    {
      v24 &= 0xFFFFFFF9;
LABEL_22:
      v9 = a6;
      goto LABEL_30;
    }
    v9 = a6;
    if ((*((_BYTE *)v33 + 11) & 1) != 0 && v28 >= 4 && (unint64_t)v18[23] < v43)
    {
      v24 &= 0xFFFFFFF9;
      goto LABEL_30;
    }
    if (v29)
    {
      if (v43 < (unint64_t)v18[23])
        v24 &= 0xFFFFFFF9;
      goto LABEL_30;
    }
    if (v27 == 1)
    {
LABEL_30:
      v17 = 1;
      v16 = v125;
LABEL_31:
      *v22 = v24 | 0x1200;
      goto LABEL_32;
    }
    if (v27)
    {
      if (v43 > (unint64_t)v18[23])
        v24 &= 0xFFFFFFF9;
      goto LABEL_30;
    }
    v131 = v13;
    v95 = *(_WORD *)v139;
    v96 = *(_WORD *)v139 & 0x70;
    if (v96 == 16)
    {
      if ((**((_WORD **)&v139 + 1) & 0x70) == 0x10)
      {
LABEL_145:
        v24 &= ~4u;
LABEL_151:
        v13 = v131;
        goto LABEL_22;
      }
    }
    else if (!v96)
    {
      v97 = **((_WORD **)&v139 + 1);
      if ((**((_WORD **)&v139 + 1) & 0x70) == 0
        && (*(_WORD *)v140 & 0x70) == 0
        && (**((_WORD **)&v140 + 1) & 0x70) == 0)
      {
        v121 = *(_WORD *)v140;
        v119 = v12;
        v114 = v11;
        v98 = v137;
        v99 = (__int16 *)&v19[16 * v32];
        v100 = sub_1C97D63A0(v33, (__int16 *)v137, 0);
        v133 = *((_QWORD *)&v137 + 1);
        if (v100
          && sub_1C97D63A0(v99, *((__int16 **)&v137 + 1), 0)
          && (v116 = v138, sub_1C97D63A0(v99, (__int16 *)v138, 0))
          && sub_1C97D63A0(v99, *((__int16 **)&v138 + 1), 0)
          && ((v95 & 0x80) != 0
           || ((*(unsigned __int8 *)(v98 + 11) | ((v97 & 0x80) >> 7)) & 1) != 0
           || ((*(unsigned __int8 *)(v133 + 11) | ((v121 & 0x80) >> 7)) & 1) != 0
           || (*(_BYTE *)(v116 + 11) & 1) != 0))
        {
          v24 &= 0xFFFFFFF9;
        }
        else
        {
          v101 = sub_1C97D63A0((__int16 *)v98, (__int16 *)v133, 1u);
          v102 = (__int16 *)v138;
          if (v101
            && sub_1C97D63A0((__int16 *)v138, *((__int16 **)&v138 + 1), 1u)
            && !sub_1C97D63A0((__int16 *)v98, v102, 1u))
          {
            v24 = v24 & 0xFFFFFFF9 | 2;
          }
          else if (sub_1C97D63A0((__int16 *)v98, v102, 1u)
                 && ((v101 | !sub_1C97D63A0((__int16 *)v133, *((__int16 **)&v138 + 1), 1u)) & 1) == 0)
          {
            v24 = v24 & 0xFFFFFFF9 | 4;
          }
          else if (!sub_1C97D63A0((__int16 *)v98, (__int16 *)v133, 3u) && !sub_1C97D63A0((__int16 *)v98, v102, 3u))
          {
            v103 = (__int16 *)*((_QWORD *)&v138 + 1);
            if (!sub_1C97D63A0((__int16 *)v98, *((__int16 **)&v138 + 1), 3u)
              && !sub_1C97D63A0((__int16 *)v133, v102, 3u)
              && !sub_1C97D63A0((__int16 *)v133, v103, 3u)
              && !sub_1C97D63A0(v102, v103, 3u))
            {
              v24 &= 0xFFFFFFF9;
            }
          }
        }
        v11 = v114;
        v12 = v119;
        goto LABEL_151;
      }
    }
    v107 = *(_WORD *)v140 & 0x70;
    if (v107 == 16)
    {
      if ((**((_WORD **)&v140 + 1) & 0x70) == 0x10)
        goto LABEL_145;
    }
    else if (v96 == 32 && v107 == 32)
    {
LABEL_150:
      v24 &= ~2u;
      goto LABEL_151;
    }
    if ((**((_WORD **)&v139 + 1) & 0x70) != 0x20 || (**((_WORD **)&v140 + 1) & 0x70) != 0x20)
      goto LABEL_151;
    goto LABEL_150;
  }
LABEL_32:
  sub_1C97CEDA4(a1, v13, v12, v11, v9, v8, a5, v17);
  v21 = v11;
  if (*(_DWORD *)(a1 + 4 * v11 + 27668))
  {
    sub_1C97CE058(a1, v13, v12, v11, a5, v9, (unsigned __int8 **)v8, &v136);
    v21 = v11;
  }
LABEL_34:
  *(_QWORD *)(a1 + 32 * v21 + 32) = 0xFFFFFFFFLL;
  v44 = *(_QWORD *)(a1 + 14840);
  if (*(unsigned __int8 *)(v44 + 58) > 1u || (v45 = *(_BYTE *)(*(_QWORD *)(a1 + 968) + 554)) == 0)
  {
    v69 = 0;
    goto LABEL_69;
  }
  v126 = v16;
  v46 = *(_DWORD *)(v44 + 5440);
  if (v46 < 1)
  {
    v69 = 0;
LABEL_68:
    v16 = v126;
    goto LABEL_69;
  }
  v47 = (1 << v126) + v12;
  v48 = *(_DWORD *)(a1 + 20);
  v120 = v47;
  if (v47 >= v48)
    v47 = *(_DWORD *)(a1 + 20);
  if (v47 > (int)v12)
  {
    v112 = v21;
    v122 = v9;
    v110 = a5;
    v111 = v8;
    v49 = *v8;
    v50 = *((unsigned __int8 *)*v8 + 1);
    v51 = *(unsigned __int8 *)(*v8)[17];
    v52 = (1 << v126) + v13;
    v129 = v13;
    v53 = *(_DWORD *)(a1 + 16);
    v117 = v12;
    v12 = (int)v12;
    v115 = (int)v13;
    while (1)
    {
      v54 = v52 >= v53 ? v53 : v52;
      v55 = v115;
      if (v54 > (int)v129)
        break;
LABEL_59:
      v12 += 8;
      v68 = v120;
      if (v120 >= v48)
        v68 = v48;
      if ((int)v12 >= v68)
      {
        v45 = *(_BYTE *)(*(_QWORD *)(a1 + 968) + 554);
        v8 = v111;
        v21 = v112;
        a5 = v110;
        v12 = v117;
        v13 = v129;
        v9 = v122;
        goto LABEL_63;
      }
    }
    while (1)
    {
      v56 = *((int *)v49 + 1);
      v57 = *((int *)v49 + 2);
      v58 = v55 - v56;
      v59 = (int)v12 - v57;
      if ((v45 & 0x10) != 0
        || *((unsigned __int8 *)v49[12]
                         + 16 * ((uint64_t)v58 >> 2)
                         + 16 * ((unint64_t)*(unsigned __int8 *)v49 >> 2) * ((int)v59 >> 2)
                         + 10)
         - 1 < 2
        || !v134[1])
      {
        v60 = 1;
        v61 = v51;
      }
      else
      {
        v60 = 0;
        v61 = v50;
      }
      v62 = *((unsigned __int8 *)v49 + 1);
      v63 = v12 - v57;
      if (v60)
      {
        v64 = (unsigned __int8 *)v49[17];
        v65 = v64 + 56;
        v66 = (char *)(v55 + *((_QWORD *)v64 + 8) + v63 * *v64 - v56);
      }
      else
      {
        v66 = (char *)v49[8] + v59 * v62 + v58;
        v65 = (unsigned __int8 *)(v49 + 7);
      }
      if ((int)sub_1C97DAB24(*(_QWORD *)(a1 + 976), *(_QWORD *)v49[3] + ((_QWORD)v49[4] + v63 * v62 - v56 + v55) * *((int *)v49[3] + 4), v50, **(_QWORD **)v65 + (_QWORD)v66 * *(int *)(*(_QWORD *)v65 + 16), v61, 3) > v46)break;
      v55 += 8;
      v53 = *(_DWORD *)(a1 + 16);
      if (v52 >= v53)
        v67 = *(_DWORD *)(a1 + 16);
      else
        v67 = v52;
      if ((int)v55 >= v67)
      {
        v48 = *(_DWORD *)(a1 + 20);
        goto LABEL_59;
      }
    }
    v69 = 0;
    v8 = v111;
    v21 = v112;
    a5 = v110;
    v12 = v117;
    v13 = v129;
    v9 = v122;
    goto LABEL_68;
  }
LABEL_63:
  v69 = 1;
  v16 = v126;
  if ((v45 & 1) != 0)
    return v69;
LABEL_69:
  v70 = *(_QWORD *)(a1 + 14840);
  if (*(_DWORD *)(*(_QWORD *)(v70 + 4760) + 96) == 36 && *(unsigned __int8 *)(v70 + 58) < 2u)
    return v69;
  if (*(_DWORD *)(a1 + 228) > v11)
    return v69;
  v130 = v13;
  v71 = *(char **)(a1 + 968);
  v72 = v71[498];
  if (v72 >= 2 && (v71[529] & 8) != 0)
  {
    if (v72 != 3
      || *(_BYTE *)(*(_QWORD *)(v70 + 5320) + 648) == 5
      && (v113 = v21, v73 = sub_1C97C3118(v70, v130, v12), v21 = v113, (v73 & 1) == 0))
    {
      if ((*((_WORD *)(*v8)[11]
            + ((uint64_t)((int)v130 - *((_DWORD *)*v8 + 1)) >> 3)
            + ((unint64_t)*(unsigned __int8 *)*v8 >> 3) * (((int)v12 - *((_DWORD *)*v8 + 2)) >> 3)) & 0x80) != 0)
        return v69;
    }
  }
  v123 = v9;
  if (*(_BYTE *)(a1 + 196))
  {
    v136 = 3;
LABEL_90:
    *(_DWORD *)(a1 + 4 * v21 + 27648) |= 0x1200u;
    goto LABEL_91;
  }
  if ((v136 & 1) != 0)
    goto LABEL_90;
  v127 = v16;
  v74 = (unsigned int *)(a1 + 4 * v21 + 27648);
  v75 = *v74;
  if ((*v74 & 0x1200) == 0)
    return v69;
  if (*(unsigned __int8 *)(v70 + 58) <= 1u && *(_DWORD *)(a1 + 4 * v21 + 27668))
  {
    if (v71[536] && v127 > 4
      || (v76 = *v8,
          (*((_WORD *)(*v8)[11]
           + ((uint64_t)((int)v130 - *((_DWORD *)*v8 + 1)) >> 3)
           + ((unint64_t)*(unsigned __int8 *)*v8 >> 3) * (((int)v12 - *((_DWORD *)*v8 + 2)) >> 3)) & 0x80) != 0))
    {
      LOBYTE(v104) = 0;
    }
    else
    {
      if (v71[538])
      {
        v77 = v130;
        v78 = sub_1C97CFA08(a1, v130, v12, v11, a5) || sub_1C97CFC98(a1, v130, v12, v11, (unsigned __int8 *)v76, a5);
      }
      else
      {
        v78 = 1;
        v77 = v130;
      }
      v106 = 3;
      if (v127 <= *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2115) && v78)
      {
        v108 = (unsigned __int8 *)v76;
        v109 = v78;
        sub_1C97F17FC(a1 + 14912, a1, v77, v12, v11, v108);
        v106 = sub_1C97FA600(a1 + 14912, v77, v12, v127, (unsigned __int8 *)*v8);
        v78 = v109;
        v75 = *v74;
      }
      if (v78)
        v104 = v106;
      else
        v104 = 0;
      if (v104 >= 2)
      {
        v105 = v75 | 0x200;
        goto LABEL_137;
      }
    }
    v105 = v75 & 0xFFFFFDFF;
    LOBYTE(v106) = v104;
LABEL_137:
    *v74 = v105 & 0xFFFFEFFF | ((v106 & 1) << 12);
  }
LABEL_91:
  v79 = (_WORD *)(a1 + 24794);
  v80 = (unsigned int *)(a1 + 4 * v11 + 27648);
  v81 = *v80;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 269) == v11)
  {
    *v79 = 0;
    if ((v81 & 0x200) == 0)
      goto LABEL_97;
    v82 = (v81 >> 12) & 1;
  }
  else
  {
    v82 = 0;
    *v79 = 0;
    if ((v81 & 0x200) == 0)
      goto LABEL_99;
  }
  sub_1C97CFDC8((_QWORD *)a1, v130, v12, v11, v123, v8, a5, 0);
  if (v82)
  {
    v81 = *v80;
LABEL_97:
    if ((v81 & 0x1000) != 0)
    {
      *(_BYTE *)(a1 + 24795) = 0;
      sub_1C97CFDC8((_QWORD *)a1, v130, v12, v11, v123, v8, a5, 3);
      *(_BYTE *)v79 = 0;
    }
  }
LABEL_99:
  if (*(_DWORD *)(a1 + 4) == 2)
  {
    v83 = v12;
    v84 = *v8;
    v85 = v130 - *((_DWORD *)*v8 + 1);
    v118 = v83;
    v86 = v83 - *((_DWORD *)*v8 + 2);
    v87 = (*v8)[12];
    v88 = *(unsigned __int8 *)*v8;
    v89 = ((uint64_t)v85 >> 2) + (int)(v88 >> 2) * (uint64_t)(v86 >> 2);
    if (v87[16 * v89 + 10] == 1)
    {
      if (*v134)
      {
        if ((*((_WORD *)v84[11] + ((uint64_t)v85 >> 3) + (int)(v88 >> 3) * (uint64_t)(v86 >> 3)) & 0x70) != 0x30)
        {
          v128 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - v11;
          v90 = &v87[16 * v89];
          v135 = *v90;
          v124 = v90[1];
          *((_DWORD *)v84 + 56) = 0;
          v84[25] = 0;
          v84[26] = 0;
          v84[27] = (void *)-1;
          *((_WORD *)v84 + 114) = 0;
          v132 = a1 + 8 * v11;
          v84[18] = *(void **)(v132 + 24712);
          sub_1C97F1844(a1 + 14912, a1, v130, v118, v11, 1, 0);
          sub_1C97F5020((unsigned int *)(a1 + 14912), v130, v118, (unsigned __int8 *)v84, v128, 0, v135, 0, a5, (int64x2_t *)(v84 + 25));
          v91 = *(int8x16_t *)(v84 + 17);
          *(int8x16_t *)(v84 + 17) = vextq_s8(v91, v91, 8uLL);
          *(_QWORD *)(v132 + 24712) = v91.i64[0];
          if (!*(_BYTE *)(a1 + 8))
          {
            *(_BYTE *)(a1 + 24795) = 0;
            v84[25] = (char *)v84[25]
                    + sub_1C97F8D0C(a1 + 14912, v130, v118, (unsigned __int8 *)v84, (unsigned __int8 *)v84, 1u, 0, v124, v128, 0, 0, a5, &v139);
            sub_1C97C2AFC(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 29752), (void **)v84[17], (const void **)v84[18], v130 - *((_DWORD *)v84 + 1), v118 - *((_DWORD *)v84 + 2), v130 - *((_DWORD *)v84 + 1), v118 - *((_DWORD *)v84 + 2), *(unsigned __int8 *)v84 >> 1);
          }
        }
      }
      LOBYTE(v139) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
      sub_1C97C6D7C(a1, v130, v118, (unsigned __int8 *)*v8, 1, 0, 0, 0, 0);
      v92 = *v8;
      *((_DWORD *)v92 + 4) = *((_DWORD *)*v8 + 5);
      sub_1C97CBC8C(a1, v130, v118, v11, a5, (int *)v92 + 4, &v139, v93);
      *((_DWORD *)*v8 + 56) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
      (*v8)[27] = (char *)(*v8)[25]
                + ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)*v8 + 114) + 1152)
                  * (unint64_t)*((unsigned int *)*v8 + 56)) >> (8 * (*((_WORD *)*v8 + 114) == 0)));
    }
  }
  return v69;
}

uint64_t sub_1C97CA688(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned int a7, unint64_t a8)
{
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  int v21;
  __n128 v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v38;
  _WORD *v39;
  uint64_t v40;
  _WORD *v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  size_t v47;
  char *v48;
  size_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _WORD *v58;
  _WORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  char v70;
  _QWORD v71[3];
  int v72;
  __int16 v73;
  __int128 v74;
  __int128 v75;

  v68 = *(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113) - a4;
  *((_QWORD *)a6 + 25) = 0;
  v15 = (uint64_t)(a6 + 200);
  v72 = 0;
  v71[0] = 0;
  v71[1] = 0;
  v71[2] = -1;
  v73 = 0;
  *((_DWORD *)a6 + 56) = 0;
  *((_QWORD *)a6 + 26) = 0;
  *((_QWORD *)a6 + 27) = -1;
  *((_WORD *)a6 + 114) = 0;
  DWORD2(v75) = 0;
  v74 = 0uLL;
  *(_QWORD *)&v75 = -1;
  WORD6(v75) = 0;
  HIWORD(v75) = *((_WORD *)a6 + 115);
  sub_1C97C8088(*(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117), a2, a3, a4, a6, *((_DWORD *)a6 + 3));
  if (*(_BYTE *)(a1 + 196) || !*(_BYTE *)(a1 + 29745) || *(char *)(*(_QWORD *)(a1 + 968) + 229) >= 1)
  {
    result = sub_1C97CB514(a1, a2, a3, a4, a6, v15, (uint64_t)&v74, 1, (uint64_t)v71);
    goto LABEL_3;
  }
  result = sub_1C97CB514(a1, a2, a3, a4, a6, v15, (uint64_t)&v74, 0, (uint64_t)v71);
  v17 = result;
  *((_DWORD *)a6 + 56) = v72;
  v31 = a2 - *((_DWORD *)a6 + 1);
  v32 = a3 - *((_DWORD *)a6 + 2);
  v33 = *a6;
  if (*(_BYTE *)(*((_QWORD *)a6 + 12) + 16 * (((uint64_t)v31 >> 2) + (int)(v33 >> 2) * (uint64_t)(v32 >> 2)) + 10) != 2)
  {
    if (!*(_BYTE *)(a1 + 29745) || !*(_BYTE *)(*(_QWORD *)(a1 + 968) + 228))
      goto LABEL_4;
    *((_DWORD *)a6 + 56) = 0;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *((_QWORD *)a6 + 27) = -1;
    *((_WORD *)a6 + 114) = 0;
    DWORD2(v75) = 0;
    v74 = 0uLL;
    *(_QWORD *)&v75 = -1;
    WORD6(v75) = 0;
    result = sub_1C97FC580(a1 + 14912, a2, a3, 0, a6, 0, v15, (uint64_t)&v74);
LABEL_3:
    v17 = result;
    goto LABEL_4;
  }
  v34 = *((_QWORD *)a6 + 11);
  v35 = ((uint64_t)v31 >> 3) + (int)(v33 >> 3) * (uint64_t)(v32 >> 3);
  v36 = *(_WORD *)(v34 + 2 * v35);
  if ((v36 & 0x80) == 0)
  {
    *(_WORD *)(v34 + 2 * v35) = v36 | 0x80;
    if (1 << v68 >= 8)
    {
      v37 = 0;
      v38 = (unint64_t)*a6 >> 3;
      v39 = (_WORD *)(*((_QWORD *)a6 + 11)
                    + 2
                    * (((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                     + (int)v38 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 3)));
      v40 = 2 * v38;
      v41 = v39;
      do
      {
        v42 = v41;
        v43 = (1 << v68) >> 3;
        do
        {
          *v42++ = *v39;
          --v43;
        }
        while (v43);
        ++v37;
        v41 = (_WORD *)((char *)v41 + v40);
      }
      while (v37 != (1 << v68) >> 3);
    }
  }
LABEL_4:
  v18 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 >= a8)
  {
    *((_DWORD *)a6 + 56) = 1;
    *((_QWORD *)a6 + 27) = ((unint64_t)*(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 114) + 1152) >> (8 * (*((_WORD *)a6 + 114) == 0)))
                         + v18;
    return result;
  }
  v70 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
  sub_1C97C6D7C(a1, a2, a3, a6, 1, 0, 0, 1, 0);
  *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
  sub_1C97CBC8C(a1, a2, a3, a4, a7, (int *)a6 + 4, &v70, v19);
  *((_DWORD *)a6 + 56) += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
  v20 = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 114) + 1152) * (unint64_t)*((unsigned int *)a6 + 56)) >> (8 * (*((_WORD *)a6 + 114) == 0)))
      + *((_QWORD *)a6 + 25);
  *((_QWORD *)a6 + 27) = v20;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 968) + 204))
  {
    v21 = (unint64_t)v74 < v20 ? v17 : 0;
    if (v21 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 14856) + 12))
        sub_1C97C2858(a5, a6, a2, a3, *a6);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
      sub_1C97C6D7C(a1, a2, a3, a6, 1, 1, 0, 1, 0);
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
      sub_1C97CBC8C(a1, a2, a3, a4, a7, (int *)a6 + 4, &v70, v22);
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
      DWORD2(v75) += v23;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
      *(_QWORD *)&v75 = ((*(unsigned __int16 *)(a1 + 2 * SWORD6(v75) + 1152) * (unint64_t)DWORD2(v75)) >> (8 * (WORD6(v75) == 0)))
                      + v74;
      if ((unint64_t)v75 >= *((_QWORD *)a6 + 27))
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 14856) + 12))
          return result;
        result = (uint64_t)sub_1C97C2858(a6, a5, a2, a3, *a5);
        goto LABEL_56;
      }
      v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4;
      v25 = 1 << (*(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113) - a4 - 2);
      v26 = (unsigned __int8 *)*((_QWORD *)a6 + 17);
      v27 = (unint64_t)*v26 >> 2;
      v28 = (char *)(*((_QWORD *)v26 + 1)
                   + ((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 2)
                   + (int)v27 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 2));
      v29 = v25;
      v30 = v25;
      do
      {
        --v30;
        bzero(v28, v29);
        v28 += v27;
      }
      while (v30);
      if (!*(_BYTE *)(a1 + 8))
      {
        if (v24 <= 2)
        {
          if ((a2 & 7) == 0 || (a3 & 7) == 0)
            goto LABEL_40;
        }
        else
        {
          v29 = (uint64_t)(int)v29 >> 1;
        }
        v44 = *((_QWORD *)a6 + 17);
        v45 = (unint64_t)*(unsigned __int8 *)(v44 + 1) >> 2;
        v46 = (char *)(*(_QWORD *)(v44 + 16)
                     + ((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                     + (int)v45 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 3));
        v47 = v29;
        do
        {
          --v47;
          bzero(v46, v29);
          v46 += v45;
        }
        while (v47);
        v48 = (char *)(*(_QWORD *)(*((_QWORD *)a6 + 17) + 24)
                     + ((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a6 + 17) + 1) >> 2)
                     * (((int)a3 - *((_DWORD *)a6 + 2)) >> 3));
        v49 = v29;
        do
        {
          --v49;
          bzero(v48, v29);
          v48 += v45;
        }
        while (v49);
      }
LABEL_40:
      v50 = a2 - *((_DWORD *)a6 + 1);
      v51 = a3 - *((_DWORD *)a6 + 2);
      v52 = *a6;
      v53 = (_WORD *)(*((_QWORD *)a6 + 11) + 2 * (((uint64_t)v50 >> 3) + (int)(v52 >> 3) * (uint64_t)(v51 >> 3)));
      if ((*v53 & 0x70) == 0)
      {
        v54 = *((_QWORD *)a6 + 12) + 16 * (((uint64_t)v50 >> 2) + (int)(v52 >> 2) * (uint64_t)(v51 >> 2));
        if ((*(_BYTE *)(v54 + 11) & 1) != 0)
        {
          *v53 |= 0x80u;
          *(_BYTE *)(v54 + 10) = 2;
          *(_BYTE *)(v54 + 11) &= ~1u;
          v55 = *a6;
          if (v55 >= 8)
          {
            v56 = 0;
            v57 = v55 >> 3;
            v58 = v53;
            do
            {
              v59 = v58;
              v60 = v57;
              do
              {
                *v59++ = *v53;
                --v60;
              }
              while (v60);
              ++v56;
              v58 += v57;
            }
            while (v56 != v57);
            LODWORD(v55) = *a6;
          }
          if (v55 >= 4)
          {
            v61 = 0;
            v62 = v55 >> 2;
            v63 = (_QWORD *)v54;
            do
            {
              v64 = v63;
              v65 = v55 >> 2;
              do
              {
                v66 = *(_QWORD *)v54;
                *(_QWORD *)((char *)v64 + 6) = *(_QWORD *)(v54 + 6);
                *v64 = v66;
                v64 += 2;
                --v65;
              }
              while (v65);
              ++v61;
              v63 += 2 * v62;
            }
            while (v61 != v62);
          }
        }
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 29752))((1 << v68), (1 << v68));
      if (!*(_BYTE *)(a1 + 8))
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 29752))((1 << v68), (1 << v68 >> 1));
      v67 = v75;
      *(_OWORD *)v15 = v74;
      *(_OWORD *)(v15 + 16) = v67;
LABEL_56:
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
    }
  }
  return result;
}

uint64_t sub_1C97CAE50(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v6 = result;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4;
  if (v7 >= *(_DWORD *)(*(_QWORD *)(result + 14856) + 1636))
    v8 = *(_DWORD *)(*(_QWORD *)(result + 14856) + 1636);
  else
    v8 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4;
  if (v7 == 31)
  {
    v9 = 0;
  }
  else
  {
    v10 = a6;
    v11 = 0;
    v9 = 0;
    v12 = (1 << v8);
    v36 = *(_DWORD *)(a2 + 12) & ~(*(int *)(a2 + 12) >> 31);
    v13 = a5 - (uint64_t)*(int *)(a2 + 4);
    v14 = (int)a6 - (uint64_t)*(int *)(a2 + 8);
    v15 = **(_QWORD **)(a2 + 24)
        + (*(_QWORD *)(a2 + 32) + v13 + v14 * *(unsigned __int8 *)(a2 + 1)) * *(int *)(*(_QWORD *)(a2 + 24) + 16);
    v16 = *(unsigned __int8 **)(a2 + 136);
    v17 = **((_QWORD **)v16 + 7) + (*((_QWORD *)v16 + 8) + v13 + *v16 * v14) * *(int *)(*((_QWORD *)v16 + 7) + 16);
    LODWORD(v14) = (int)v14 >> 1;
    v29 = **(_QWORD **)(a2 + 40)
        + (v13 + *(unsigned __int8 *)(a2 + 1) * (uint64_t)(int)v14 + *(_QWORD *)(a2 + 48))
        * *(int *)(*(_QWORD *)(a2 + 40) + 16);
    v28 = **((_QWORD **)v16 + 9)
        + (*((_QWORD *)v16 + 10) + v13 + 2 * v16[1] * (uint64_t)(int)v14) * *(int *)(*((_QWORD *)v16 + 9) + 16);
    v44 = (1 << v7);
    v37 = v8;
    v38 = result + 1176;
    v39 = v8 - 2;
    v40 = *v16;
    v41 = *(unsigned __int8 *)(a2 + 1);
    v30 = a5;
    do
    {
      v18 = 0;
      v35 = v29 + v11;
      v34 = v28 + v11;
      v32 = v15;
      v33 = v11;
      v19 = v11 + a5;
      v31 = v17;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 8 * v39))(v12, v12, v15, v41, v17, v40);
        v47 = result;
        v20 = v10;
        v21 = v10 + v18;
        v22 = *(char *)(v6
                      + (int)(((v10 + v18 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)
                            + ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))
                      + 748);
        if (*(_BYTE *)(*(_QWORD *)(v6 + 14840) + 5432))
          result = sub_1C97CB9CC(v6, a2, v36, *(char *)(v6+ (int)(((v21 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)+ ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))+ 748), v19, v21, v37, (uint64_t *)&v47);
        if (*(_BYTE *)(v6 + 8))
        {
          v23 = v47;
        }
        else
        {
          v24 = *(unsigned __int8 *)(a2 + 1);
          v25 = *(_QWORD *)(a2 + 136);
          v26 = v34 + 2 * *(unsigned __int8 *)(v25 + 1) * (uint64_t)((int)v18 >> 1);
          v45 = 0;
          v46 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, uint64_t *))(v6 + 1568))(v35 + v24 * ((int)v18 >> 1), v24, v26, 2 * *(unsigned __int8 *)(v25 + 1), ((int)v12 >> 1), ((int)v12 >> 1), &v46, &v45);
          v23 = v47
              + ((v46 * (unint64_t)*(unsigned __int16 *)(v6 + 1162)) >> 8)
              + ((v45 * (unint64_t)*(unsigned __int16 *)(v6 + 1166)) >> 8);
          v47 = v23;
        }
        v27 = v22 - a3;
        if (v22 != a3)
        {
          if (v27 >= 16)
            v27 = 16;
          if (v27 <= -15)
            v27 = -15;
          v23 = (v23 * word_1C98586E8[v27 + 15] + 128) >> 8;
          v47 = v23;
        }
        v10 = v20;
        v9 += v23;
        v18 += (int)v12;
        v17 += v40 * (int)v12;
        v15 += v41 * (int)v12;
      }
      while (v18 < v44);
      v11 = v33 + (int)v12;
      a5 = v30;
      v17 = v31 + (int)v12;
      v15 = v32 + (int)v12;
    }
    while (v11 < v44);
  }
  *(_QWORD *)(a2 + 200) = v9;
  if (*(_BYTE *)(*(_QWORD *)(v6 + 14840) + 5433))
    *(_QWORD *)(a2 + 200) = *(_QWORD *)(a2 + 208) + v9;
  return result;
}

uint64_t sub_1C97CB1A8(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v6 = result;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4;
  if (v7 >= *(_DWORD *)(*(_QWORD *)(result + 14856) + 1636))
    v8 = *(_DWORD *)(*(_QWORD *)(result + 14856) + 1636);
  else
    v8 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4;
  if (v7 == 31)
  {
    v9 = 0;
  }
  else
  {
    v10 = a6;
    v11 = 0;
    v9 = 0;
    v12 = (1 << v8);
    v37 = *(_DWORD *)(a2 + 12) & ~(*(int *)(a2 + 12) >> 31);
    v13 = a5 - (uint64_t)*(int *)(a2 + 4);
    v14 = (int)a6 - (uint64_t)*(int *)(a2 + 8);
    v15 = **(_QWORD **)(a2 + 24)
        + (*(_QWORD *)(a2 + 32) + v13 + v14 * *(unsigned __int8 *)(a2 + 1)) * *(int *)(*(_QWORD *)(a2 + 24) + 16);
    v16 = *(unsigned __int8 **)(a2 + 136);
    v17 = **((_QWORD **)v16 + 7) + (*((_QWORD *)v16 + 8) + v13 + *v16 * v14) * *(int *)(*((_QWORD *)v16 + 7) + 16);
    LODWORD(v14) = (int)v14 >> 1;
    v30 = **(_QWORD **)(a2 + 40)
        + (v13 + *(unsigned __int8 *)(a2 + 1) * (uint64_t)(int)v14 + *(_QWORD *)(a2 + 48))
        * *(int *)(*(_QWORD *)(a2 + 40) + 16);
    v29 = **((_QWORD **)v16 + 9)
        + (*((_QWORD *)v16 + 10) + v13 + 2 * v16[1] * (uint64_t)(int)v14) * *(int *)(*((_QWORD *)v16 + 9) + 16);
    v45 = (1 << v7);
    v38 = v8;
    v39 = result + 1176;
    v40 = v8 - 2;
    v28 = 2 * (int)v12;
    v41 = *v16;
    v42 = *(unsigned __int8 *)(a2 + 1);
    v31 = a5;
    do
    {
      v18 = 0;
      v19 = v11 + a5;
      v32 = v17;
      v33 = v15;
      v34 = v11;
      v35 = v29 + 2 * v11;
      v36 = v30 + 2 * v11;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 8 * v40))(v12, v12, v15, v42, v17, v41);
        v48 = result;
        v20 = v10;
        v21 = v10 + v18;
        v22 = *(char *)(v6
                      + (int)(((v10 + v18 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)
                            + ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))
                      + 748);
        if (*(_BYTE *)(*(_QWORD *)(v6 + 14840) + 5432))
          result = sub_1C97CB9CC(v6, a2, v37, *(char *)(v6+ (int)(((v21 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)+ ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))+ 748), v19, v21, v38, (uint64_t *)&v48);
        if (*(_BYTE *)(v6 + 8))
        {
          v23 = v48;
        }
        else
        {
          v24 = *(unsigned __int8 *)(a2 + 1);
          v25 = *(_QWORD *)(a2 + 136);
          v26 = v35 + 4 * *(unsigned __int8 *)(v25 + 1) * (uint64_t)((int)v18 >> 1);
          v46 = 0;
          v47 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, uint64_t *))(v6 + 1568))(v36 + 2 * v24 * ((int)v18 >> 1), v24, v26, 2 * *(unsigned __int8 *)(v25 + 1), ((int)v12 >> 1), ((int)v12 >> 1), &v47, &v46);
          v23 = v48
              + ((v47 * (unint64_t)*(unsigned __int16 *)(v6 + 1162)) >> 8)
              + ((v46 * (unint64_t)*(unsigned __int16 *)(v6 + 1166)) >> 8);
          v48 = v23;
        }
        v27 = v22 - a3;
        if (v22 != a3)
        {
          if (v27 >= 16)
            v27 = 16;
          if (v27 <= -15)
            v27 = -15;
          v23 = (v23 * word_1C98586E8[v27 + 15] + 128) >> 8;
          v48 = v23;
        }
        v10 = v20;
        v9 += v23;
        v18 += (int)v12;
        v17 += 2 * v41 * (int)v12;
        v15 += 2 * v42 * (int)v12;
      }
      while (v18 < v45);
      v11 = v34 + (int)v12;
      a5 = v31;
      v17 = v32 + v28;
      v15 = v33 + v28;
    }
    while (v11 < v45);
  }
  *(_QWORD *)(a2 + 200) = v9;
  if (*(_BYTE *)(*(_QWORD *)(v6 + 14840) + 5433))
    *(_QWORD *)(a2 + 200) = *(_QWORD *)(a2 + 208) + v9;
  return result;
}

uint64_t sub_1C97CB514(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  _WORD *v26;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  uint64_t v45;

  v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - (uint64_t)a4;
  v16 = (1 << v15);
  v17 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  v18 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  v19 = *a5;
  v20 = *((_QWORD *)a5 + 12) + 16 * (((uint64_t)(int)v17 >> 2) + (int)(v19 >> 2) * (uint64_t)((int)v18 >> 2));
  if (*(_BYTE *)(v20 + 10) == 2)
  {
    result = 0;
    if (a6 && a7)
    {
      *(_QWORD *)a7 = (*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(a1 + 8 * v15 + 1160))((1 << v15), (1 << v15), **((_QWORD **)a5 + 3)+ (*((_QWORD *)a5 + 4) + v17 + a5[1] * v18) * *(int *)(*((_QWORD *)a5 + 3) + 16));
      if (!*(_BYTE *)(a1 + 8))
      {
        v41.i64[0] = 0;
        v45 = 0;
        (*(void (**)(uint64_t))(a1 + 1568))(**((_QWORD **)a5 + 5)+ (*((_QWORD *)a5 + 6)+ (int)a2- (uint64_t)*((int *)a5 + 1)+ a5[1] * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*((_QWORD *)a5 + 5) + 16));
        *(_QWORD *)a7 = *(_QWORD *)a7;
      }
      *(_DWORD *)(a7 + 24) = 0;
      v22 = *(_OWORD *)(a7 + 16);
      *(_OWORD *)a6 = *(_OWORD *)a7;
      *(_OWORD *)(a6 + 16) = v22;
      if (a9)
      {
        result = 0;
        v23 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)a9 = *(_OWORD *)a7;
        *(_OWORD *)(a9 + 16) = v23;
        return result;
      }
      return 0;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 29745))
      a8 = 1;
    v26 = (_WORD *)(*((_QWORD *)a5 + 11) + 2 * (((uint64_t)(int)v17 >> 3) + (int)(v19 >> 3) * (uint64_t)((int)v18 >> 3)));
    if (a8 != 1 || *(_BYTE *)(*(_QWORD *)(a1 + 968) + 204) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(a1 + 29752))(v16, v16);
      if (!*(_BYTE *)(a1 + 8))
        (*(void (**)(uint64_t, _QWORD))(a1 + 29752))(v16, ((int)v16 >> 1));
    }
    sub_1C97F1844(a1 + 14912, a1, a2, a3, a4, *(unsigned __int8 *)(v20 + 10), ((unsigned __int16)*v26 >> 4) & 7);
    if ((a8 & 1) != 0)
    {
      result = sub_1C97FD110((int *)(a1 + 14912), a2, a3, 0, a5, 0, *(_BYTE *)(a1 + 8) == 0, 0, a6, a7);
    }
    else if (a9)
    {
      result = sub_1C97FA760((int *)(a1 + 14912), a2, a3, 0, a5, 0, (int64x2_t *)a6, (int64x2_t *)a9, (int64x2_t *)a7);
    }
    else
    {
      v43 = 0;
      v41 = 0uLL;
      v42 = -1;
      v44 = 0;
      result = sub_1C97FA760((int *)(a1 + 14912), a2, a3, 0, a5, 0, (int64x2_t *)a6, &v41, (int64x2_t *)a7);
    }
    if (!*(_BYTE *)(a1 + 8) || *(char *)(*(_QWORD *)(a1 + 968) + 203) <= 0)
    {
      v28 = *(_BYTE *)(v20 + 10) == 3 ? result : 1;
      if ((v28 & 1) == 0)
      {
        if ((*v26 & 0x70) != 0)
          return 0;
        v29 = *(_BYTE *)(v20 + 11);
        if ((v29 & 1) == 0)
          return 0;
        *(_BYTE *)(v20 + 10) = 2;
        *(_BYTE *)(v20 + 11) = v29 & 0xFE;
        *v26 |= 0x80u;
        *(_DWORD *)(a6 + 24) = 0;
        v30 = *a5;
        if ((int)v16 >= 8)
        {
          v31 = 0;
          v32 = v26;
          do
          {
            v33 = v32;
            v34 = v16 >> 3;
            do
            {
              *v33++ = *v26;
              --v34;
            }
            while (v34);
            ++v31;
            v32 += v30 >> 3;
          }
          while (v31 != v16 >> 3);
          v30 = *a5;
        }
        if ((int)v16 < 4)
          return 0;
        v35 = 0;
        v36 = (_QWORD *)v20;
        do
        {
          v37 = v36;
          v38 = v16 >> 2;
          do
          {
            v39 = *(_QWORD *)v20;
            *(_QWORD *)((char *)v37 + 6) = *(_QWORD *)(v20 + 6);
            *v37 = v39;
            v37 += 2;
            --v38;
          }
          while (v38);
          result = 0;
          ++v35;
          v36 += 2 * (v30 >> 2);
        }
        while (v35 != v16 >> 2);
      }
    }
  }
  return result;
}

BOOL sub_1C97CB9CC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t *a8)
{
  uint64_t v8;
  char v9;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v23;
  int v24;
  int32x2_t *v26;
  unsigned __int8 *v27;
  uint64_t v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  char v38;
  uint64_t v40;
  int v41;
  int32x2_t v42[2];

  v42[1] = *(int32x2_t *)MEMORY[0x1E0C80C00];
  v8 = *a8;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 528) == 8)
    v9 = 10;
  else
    v9 = 8;
  v29 = *a8;
  if (a7 != 31)
  {
    v14 = 0;
    v37 = (_DWORD *)(a1 + 24524);
    v38 = v9;
    v36 = (1 << v9) >> 1;
    v41 = 1 << a7;
    v35 = **(unsigned __int8 **)(a2 + 136);
    v40 = a6;
    v33 = a3 + 12;
    v34 = a5;
    v32 = (char *)&dword_1C9855BF4[32 * a4 + 384];
    v30 = a6;
    do
    {
      v16 = 0;
      v31 = v14;
      v17 = v14 + a6;
      v18 = (v14 + a6) >> 3;
      do
      {
        v19 = *(_QWORD *)(a1 + 976);
        v20 = *(int *)(*(_QWORD *)(v19 + 4952) + 4 * ((*(int *)(v19 + 4728) >> 3) * v18 + ((a5 + (int)v16) >> 3)));
        v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 5320) + 4 * v20 + 152);
        if ((int)v20 <= 3 && v21 == 0)
          v21 = sub_1C97DAC98(v19, a5 + (int)v16, v17);
        if (a3 == a4)
        {
          if ((v21 & 0x80000000) != 0)
            goto LABEL_28;
          v23 = dword_1C9855BF4[32 * v33 + v21];
        }
        else
        {
          if ((v21 & 0x80000000) != 0)
          {
            v23 = 0;
            v24 = 0;
LABEL_21:
            if (v24 <= v23 || a3 >= a4)
              v23 = v24;
            goto LABEL_26;
          }
          v24 = dword_1C9855BF4[32 * v33 + v21];
          v23 = *(_DWORD *)&v32[4 * v21];
          if (a3 <= a4 || v24 >= v23)
            goto LABEL_21;
        }
LABEL_26:
        if (v23 >= 1)
        {
          v26 = (int32x2_t *)(a1 + ((uint64_t)(a5 + (int)v16 - *v37) >> 3 << 8) + 32 * ((uint64_t)(v17 - v37[1]) >> 3));
          v27 = *(unsigned __int8 **)(a2 + 136);
          (*(void (**)(uint64_t, uint64_t, int32x2_t *))(a1 + 1000))(**((_QWORD **)v27 + 7)+ (v34 + v16 + *((_QWORD *)v27 + 8) + (v40 - *(int *)(a2 + 8)) * *v27 - *(int *)(a2 + 4))* *(int *)(*((_QWORD *)v27 + 7) + 16), v35, v42);
          v8 = *a8
             + ((int)(v36 + vaba_s32(vdup_lane_s32(vabd_s32(v26[3462], v42[0]), 1), v26[3462], v42[0]).u32[0] * v23) >> v38);
          *a8 = v8;
        }
LABEL_28:
        v16 += 8;
      }
      while ((int)v16 < v41);
      v14 = v31 + 8;
      v40 += 8;
      a6 = v30;
    }
    while (v31 + 8 < v41);
  }
  return v8 != v29;
}

uint64_t sub_1C97CBC8C(uint64_t result, int a2, int a3, int a4, unsigned int a5, int *a6, _BYTE *a7, __n128 a8)
{
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  _WORD *v21;
  _BOOL4 v22;
  _BOOL8 v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _BOOL8 v31;
  _BOOL8 v32;
  _BOOL8 v34;
  char v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  signed int v41;
  signed int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  char v47;
  int v48;

  v11 = result;
  v12 = *(unsigned __int8 **)(result + 14848);
  v13 = v12[2113] - a4;
  v14 = 1 << (v12[2113] - a4);
  v15 = v12[2112];
  v16 = v14 + a2;
  if (v14 + a2 > *(_DWORD *)(result + 16)
    || (v14 + a3 <= *(_DWORD *)(result + 20) ? (v17 = v13 <= v15) : (v17 = 1), v17))
  {
    if (v13 > v15)
    {
LABEL_43:
      v35 = v13 - 1;
      v36 = 1 << (v13 - 1);
      v37 = *(_QWORD *)(v11 + 14856);
      v48 = a4;
      if (*(_BYTE *)(v37 + 12) && v13 == *(_DWORD *)(v37 + 1636))
      {
        v47 = 1;
        *a7 = 1;
      }
      else
      {
        v47 = 0;
      }
      v38 = 0;
      v39 = v36 + a2;
      v40 = v36 + a3;
      do
      {
        v41 = *(_DWORD *)(v11 + 16);
        if ((int)(((v38 & 1) << v35) + a2) < v41)
        {
          v42 = *(_DWORD *)(v11 + 20);
          if ((int)((v38 >> 1 << v35) + a3) < v42)
          {
            v43 = sub_1C97C3078(a5, v38, v39 < v41, v40 < v42);
            result = sub_1C97CBC8C(v11, ((v38 & 1) << v35) + a2, (v38 >> 1 << v35) + a3, (v48 + 1), v43, a6, a7);
          }
        }
        ++v38;
      }
      while (v38 != 4);
      if ((v47 & 1) != 0)
      {
        if (*a7)
        {
          v44 = *(unsigned __int8 **)(v11 + 872);
          v45 = *(unsigned __int8 *)(v11 + 824);
          v46 = sub_1C97C9654(v11, a2, a3, v48, v44, *a6, v45);
          *a6 = v46;
          result = sub_1C97C81C4(v11, a2, a3, v48, v44, v46, v45);
          *a7 = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (a2 - (1 << v15) < 0)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(result + 824))
        v21 = *(_WORD **)(*(_QWORD *)(result + 872) + 104);
      else
        v21 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 14840) + 8) + 800)
                      + 2
                      * (((a2 - (1 << v15)) >> 3)
                       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 14840) + 8) + 768) * ((uint64_t)a3 >> 3)));
      v23 = (*v21 & 3) > a4;
    }
    v24 = v12[269];
    v25 = a3 - (1 << v15);
    if (v25 < 0)
    {
      v31 = 0;
    }
    else
    {
      if (*(_BYTE *)(result + 824))
      {
        v26 = v15 == 31;
        v27 = 112;
        if (v26)
          v27 = 104;
        v28 = *(_QWORD *)(*(_QWORD *)(result + 872) + v27);
        v29 = -536870912;
        if (!v26)
          v29 = 0;
        v30 = (_WORD *)(v28 + v29);
      }
      else
      {
        v30 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 14840) + 8) + 800)
                      + 2
                      * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 14840) + 8) + 768) * (v25 >> 3)
                       + (a2 >> 3)));
      }
      v31 = (*v30 & 3) > a4;
    }
    v32 = v31 + v23;
    v34 = (*(_WORD *)(*(_QWORD *)(result + 880)
                    + 2
                    * (*(_QWORD *)(result + 856) * ((uint64_t)(a3 - *(_DWORD *)(result + 836)) >> 3)
                     + ((a2 - *(_DWORD *)(result + 832)) >> 3))) & 3) > a4
       && v24 > a4;
    result = (***(uint64_t (****)(_QWORD, _BOOL8, uint64_t))(result + 944))(*(_QWORD *)(result + 944), v34, *(_QWORD *)(result + 944) + v32 + 50);
    if (v34)
      goto LABEL_43;
  }
  v18 = *(_QWORD *)(v11 + 14856);
  if (*(_BYTE *)(v18 + 12) && v13 >= *(_DWORD *)(v18 + 1636))
    *a7 = 1;
  result = sub_1C97CC06C(v11, a2, a3, a4, a6, a7, 0, a8);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 14848) + 2117) - 1;
  v20 = (v19 & v16) != 0 && v16 < *(_DWORD *)(v11 + 16);
  v22 = (v19 & (v14 + a3)) != 0 && v14 + a3 < *(_DWORD *)(v11 + 20);
  if (!v20 && !v22 && *(_DWORD *)(v11 + 24512) != *(_DWORD *)(*(_QWORD *)(v11 + 14840) + 5412))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 944) + 16))(*(_QWORD *)(v11 + 944), 0);
  return result;
}

uint64_t sub_1C97CC06C(uint64_t a1, int a2, int a3, int a4, int *a5, _BYTE *a6, char a7, __n128 a8)
{
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t i;
  BOOL v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  int v57;
  char v58;
  int v59;
  int v60;
  int v61;
  char v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  int v82;
  int v83;
  int v84;
  char v85;
  int v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  int v115;
  _WORD *v116;
  _BYTE v118[4];
  _BYTE v119[4];
  _BYTE v120[4];
  _BYTE v121[16];

  v13 = a3 | a2;
  if (((a3 | a2) & 0x80000000) == 0
    && ((v14 = a2 - *(_DWORD *)(a1 + 832),
         v15 = a3 - *(_DWORD *)(a1 + 836),
         v16 = *(unsigned __int8 *)(a1 + 828),
         v14 < v16)
      ? (v17 = v15 < v16)
      : (v17 = 0),
        v17))
  {
    v18 = (unsigned __int16 *)(*(_QWORD *)(a1 + 880) + 2 * (*(_QWORD *)(a1 + 856) * ((uint64_t)v15 >> 3) + (v14 >> 3)));
    v19 = *(_QWORD *)(a1 + 888) + 16 * (*(_QWORD *)(a1 + 864) * ((uint64_t)v15 >> 2) + (v14 >> 2));
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113);
  v21 = *(_QWORD *)(a1 + 944);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 14856) + 19))
    (**(void (***)(_QWORD, _QWORD, uint64_t))v21)(*(_QWORD *)(a1 + 944), HIBYTE(*v18) & 1, v21 + 53);
  v116 = v18;
  v22 = v20 - a4;
  v23 = *(_QWORD *)(a1 + 14840);
  v115 = v20 - a4;
  if (*(unsigned __int8 *)(v23 + 58) > 1u)
  {
LABEL_44:
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 58) <= 1u)
    {
      (**(void (***)(uint64_t, BOOL, uint64_t))v21)(v21, *(_BYTE *)(v19 + 10) == 1, v21 + 59);
      if (*(_BYTE *)(v19 + 10) != 1)
      {
        v35 = ((unsigned __int16)*v116 >> 4) & 7;
        if (!v35)
        {
          v42 = 0;
LABEL_65:
          (**(void (***)(uint64_t, uint64_t, uint64_t))v21)(v21, 1, v21 + v42 + 60);
          goto LABEL_66;
        }
        v111 = v19;
        v112 = a6;
        v110 = a4;
        v36 = v22;
        if (v22 != *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2112) || v22 <= 3)
          v38 = 2;
        else
          v38 = 3;
        v39 = v38 - 1;
        v40 = (v35 - 1);
        if (v39 >= v40)
          v41 = v40;
        else
          v41 = v38 - 1;
        v42 = v41 + 1;
        if (v39 >= v40)
          v43 = v40;
        else
          v43 = v38 - 1;
        for (i = -1; i != v43; ++i)
          (**(void (***)(uint64_t, _QWORD, uint64_t))v21)(v21, 0, v21 + i + 61);
        v45 = v42 >= v38;
        a4 = v110;
        v22 = v36;
        v19 = v111;
        a6 = v112;
        if (!v45)
          goto LABEL_65;
      }
    }
LABEL_66:
    v46 = *(unsigned __int8 **)(a1 + 14848);
    if (*(_BYTE *)(v19 + 10) != 1)
    {
      v113 = a6;
      v57 = a4;
      v58 = v46[2113] - a4;
      v59 = 1 << (v58 - 1);
      v60 = v59 + a2;
      v61 = v59 + a3;
      v62 = v58 - 2;
      v63 = 1 << v58;
      v64 = 1 << (v58 - 2);
      switch((*(unsigned __int16 *)(*(_QWORD *)(a1 + 880)
                                    + 2
                                    * (*(_QWORD *)(a1 + 856) * ((uint64_t)(a3 - *(_DWORD *)(a1 + 836)) >> 3)
                                     + ((a2 - *(_DWORD *)(a1 + 832)) >> 3))) >> 4) & 7)
      {
        case 0:
          v65 = a1;
          v66 = a2;
          v67 = a3;
          v68 = 1 << v58;
          v69 = 1 << v58;
          a4 = v57;
          v70 = v57;
          goto LABEL_121;
        case 1:
          a4 = v57;
          sub_1C97CCC24(a1, a2, a3, 1 << v58, 1 << (v58 - 1), v57);
          v65 = a1;
          v66 = a2;
          v67 = v59 + a3;
          v68 = v63;
          goto LABEL_113;
        case 2:
          a4 = v57;
          sub_1C97CCC24(a1, a2, a3, 1 << (v58 - 1), 1 << v58, v57);
          v65 = a1;
          v66 = v59 + a2;
          v67 = a3;
          v68 = v59;
          goto LABEL_119;
        case 4:
          v95 = v61 - v64;
          v96 = v57;
          sub_1C97CCC24(a1, a2, a3, 1 << v58, 1 << (v58 - 2), v57);
          v69 = 3 << v62;
          a4 = v96;
          v65 = a1;
          v66 = a2;
          v67 = v95;
          v68 = v63;
          goto LABEL_117;
        case 5:
          v97 = 3 << v62;
          a4 = v57;
          sub_1C97CCC24(a1, a2, a3, v63, v97, v57);
          v65 = a1;
          v66 = a2;
          v67 = v61 + v64;
          v68 = v63;
          v69 = v64;
          goto LABEL_120;
        case 6:
          v98 = v60 - v64;
          v96 = v57;
          sub_1C97CCC24(a1, a2, a3, 1 << (v58 - 2), 1 << v58, v57);
          v68 = 3 << v62;
          a4 = v96;
          v65 = a1;
          v66 = v98;
          v67 = a3;
          v69 = v63;
LABEL_117:
          v70 = v96;
          goto LABEL_121;
        case 7:
          v99 = 3 << v62;
          a4 = v57;
          sub_1C97CCC24(a1, a2, a3, v99, v63, v57);
          v65 = a1;
          v66 = v60 + v64;
          v67 = a3;
          v68 = v64;
LABEL_119:
          v69 = v63;
          goto LABEL_120;
        default:
          a4 = v57;
          sub_1C97CCC24(a1, a2, a3, 1 << (v58 - 1), 1 << (v58 - 1), v57);
          sub_1C97CCC24(a1, v59 + a2, a3, v59, v59, a4);
          sub_1C97CCC24(a1, a2, v59 + a3, v59, v59, a4);
          v65 = a1;
          v66 = v59 + a2;
          v67 = v59 + a3;
          v68 = v59;
LABEL_113:
          v69 = v59;
LABEL_120:
          v70 = a4;
LABEL_121:
          result = sub_1C97CCC24(v65, v66, v67, v68, v69, v70);
          a6 = v113;
          break;
      }
      goto LABEL_130;
    }
    if (v22 == v46[2112])
    {
      (**(void (***)(uint64_t, BOOL, uint64_t))v21)(v21, (*v116 & 0x70) == 0, v21 + 60);
      v46 = *(unsigned __int8 **)(a1 + 14848);
    }
    v47 = *(_DWORD *)(a1 + 832);
    v48 = a2 - v47;
    v49 = *(_DWORD *)(a1 + 836);
    v50 = a3 - v49;
    v51 = 0;
    if ((v13 & 0x80000000) == 0)
    {
      v52 = *(unsigned __int8 *)(a1 + 828);
      if (v48 < v52 && v50 < v52)
        v51 = (unsigned __int8 *)(*(_QWORD *)(a1 + 888) + 16
                                                        * (*(_QWORD *)(a1 + 864) * ((uint64_t)v50 >> 2) + (v48 >> 2)));
    }
    v53 = v46[2113];
    v121[0] = 1;
    v54 = *(unsigned __int8 *)(a1 + 824);
    if (((v46[2117] - 1) & a3) == 0)
      goto LABEL_84;
    if (*(_BYTE *)(a1 + 824))
    {
      v55 = *(_BYTE **)(*(_QWORD *)(a1 + 872) + 128);
      if (!v55)
        goto LABEL_84;
    }
    else
    {
      if (((a3 - 1) | a2) < 0)
        goto LABEL_84;
      v71 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8);
      if (*(_DWORD *)(v71 + 520) <= a2)
        goto LABEL_84;
      if (*(_DWORD *)(v71 + 524) < a3)
        goto LABEL_84;
      v55 = (_BYTE *)(*(_QWORD *)(v71 + 880) + 16 * (*(_QWORD *)(v71 + 848) * ((uint64_t)(a3 - 1) >> 2) + (a2 >> 2)));
      if (!v55)
        goto LABEL_84;
    }
    if (v55[10] == 1)
    {
      v56 = 0;
      goto LABEL_85;
    }
LABEL_84:
    v55 = v121;
    v56 = v121;
LABEL_85:
    v72 = a2 - 1;
    if (*(_BYTE *)(a1 + 824))
    {
      v73 = *(_BYTE **)(*(_QWORD *)(a1 + 872) + 120);
      if (!v73)
        goto LABEL_93;
    }
    else
    {
      if ((v72 | a3) < 0)
        goto LABEL_93;
      v75 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8);
      if (*(_DWORD *)(v75 + 520) < a2)
        goto LABEL_93;
      if (*(_DWORD *)(v75 + 524) <= a3)
        goto LABEL_93;
      v73 = (_BYTE *)(*(_QWORD *)(v75 + 880) + 16 * (*(_QWORD *)(v75 + 848) * ((uint64_t)a3 >> 2) + (v72 >> 2)));
      if (!v73)
        goto LABEL_93;
    }
    if (v73[10] == 1)
    {
      v74 = 0;
      goto LABEL_94;
    }
LABEL_93:
    v73 = v121;
    v74 = v121;
LABEL_94:
    if ((*(_WORD *)(*(_QWORD *)(a1 + 880) + 2 * (*(_QWORD *)(a1 + 856) * ((uint64_t)v50 >> 3) + (v48 >> 3))) & 0x70) != 0x30)
    {
      v120[0] = *v51;
      v119[0] = *v55;
      v118[0] = *v73;
      v91 = *(_QWORD *)(a1 + 944);
      v92 = 1;
      goto LABEL_128;
    }
    v76 = ~a4 + v53;
    v77 = *(_QWORD *)(a1 + 888);
    v78 = *(_QWORD *)(a1 + 864);
    v79 = v78 * ((uint64_t)v50 >> 2);
    v80 = v48 >> 2;
    v81 = *(_BYTE *)(v77 + 16 * (v79 + (v48 >> 2)));
    v82 = 1 << v76;
    v120[0] = v81;
    v83 = (1 << v76) + a2;
    v84 = (v83 - v47) >> 2;
    v85 = *(_BYTE *)(v77 + 16 * (v79 + v84));
    v120[1] = v85;
    v86 = (1 << v76) + a3;
    v87 = v78 * ((uint64_t)(v86 - v49) >> 2);
    v88 = *(_BYTE *)(v77 + 16 * (v87 + v80));
    v120[2] = v88;
    v120[3] = *(_BYTE *)(v77 + 16 * (v87 + v84));
    if (!v56)
    {
      if (v54)
      {
        v89 = *(_QWORD *)(a1 + 872);
        v90 = v82 >> 2;
        if (v76 == 31)
          v93 = -1;
        else
          v93 = v90;
        v56 = (_BYTE *)(*(_QWORD *)(v89 + 128) + 16 * v93);
        if (!v74)
          goto LABEL_105;
        goto LABEL_127;
      }
      if ((v83 | (a3 - 1)) < 0
        || (v100 = *(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8), *(_DWORD *)(v100 + 520) <= v83)
        || *(_DWORD *)(v100 + 524) < a3)
      {
        v56 = 0;
      }
      else
      {
        v56 = (_BYTE *)(*(_QWORD *)(v100 + 880) + 16 * (*(_QWORD *)(v100 + 848) * ((uint64_t)(a3 - 1) >> 2) + (v83 >> 2)));
      }
    }
    if (!v74)
    {
      if (v54)
      {
        v89 = *(_QWORD *)(a1 + 872);
        v90 = v82 >> 2;
LABEL_105:
        if (v76 == 31)
          v90 = -1;
        v94 = 120;
        if (v76 == 31)
          v94 = 128;
        v74 = (_BYTE *)(*(_QWORD *)(v89 + v94) + 16 * v90);
        goto LABEL_127;
      }
      v74 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 880)
                    + 16
                    * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 8) + 848) * ((uint64_t)v86 >> 2) + (v72 >> 2)));
    }
LABEL_127:
    v119[0] = *v55;
    v119[1] = *v56;
    v119[2] = v81;
    v119[3] = v85;
    v118[0] = *v73;
    v118[1] = v81;
    v118[2] = *v74;
    v118[3] = v88;
    v91 = *(_QWORD *)(a1 + 944);
    v92 = 4;
LABEL_128:
    result = sub_1C97CD14C(v91, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118, v92, a8);
    if (!*(_BYTE *)(a1 + 8))
      result = sub_1C97C9564(*(char **)(a1 + 944), *v51, v51[1]);
LABEL_130:
    if ((a7 & 1) != 0)
      return result;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 14848) + 278) && !*(_BYTE *)(a1 + 826))
    {
      sub_1C97F1844(a1 + 14912, a1, a2, a3, a4, *(unsigned __int8 *)(v19 + 10), ((unsigned __int16)*v116 >> 4) & 7);
      v101 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24384) + 2113) - *(_DWORD *)(a1 + 24432);
      v102 = *(_BYTE *)(a1 + 24416) ? 1 : 3;
      *(_DWORD *)(a1 + 24420) = v102;
      v103 = *(_BYTE *)(*(_QWORD *)(a1 + 24400) + 825)
           ? 0
           : sub_1C97F360C(a1 + 14912, *(unsigned int *)(a1 + 24424), *(unsigned int *)(a1 + 24428), v101, 0, 0);
      if (*(_BYTE *)(v19 + 10) == 1
        || (*(_BYTE *)(v19 + 11) & 1) != 0 && !*(_DWORD *)(a1 + 14920)
        || (result = (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 24400) + 944))(*(_QWORD *)(*(_QWORD *)(a1 + 24400) + 944), v103, *(_QWORD *)(*(_QWORD *)(a1 + 24400) + 944) + 78), (_DWORD)v103))
      {
        *(_DWORD *)(a1 + 14932) = *a5;
        *(_BYTE *)(a1 + 14928) = *a6;
        result = sub_1C97F39A8(a1 + 14912, *(unsigned int *)(a1 + 24424), *(_DWORD *)(a1 + 24428), v101, 0, 0);
        *a5 = *(_DWORD *)(a1 + 14932);
        *a6 = *(_BYTE *)(a1 + 14928);
      }
    }
    goto LABEL_144;
  }
  if (a2 < 1)
  {
    v25 = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 824))
      v24 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 872) + 104);
    else
      v24 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 800)
                               + 2
                               * (((a2 - 1) >> 3)
                                + *(_QWORD *)(*(_QWORD *)(v23 + 8) + 768) * ((uint64_t)a3 >> 3)));
    v25 = (*v24 >> 7) & 1;
  }
  if (a3 < 1)
  {
    v27 = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 824))
      v26 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 872) + 112);
    else
      v26 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 800)
                               + 2
                               * (*(_QWORD *)(*(_QWORD *)(v23 + 8) + 768) * ((a3 - 1) >> 3) + (a2 >> 3)));
    v27 = (*v26 >> 7) & 1;
  }
  v28 = v27 + (unint64_t)v25;
  if (!*(_BYTE *)(a1 + 824))
  {
    if ((*v116 & 0x80) == 0)
    {
      if ((*v116 & 0x70) == 0 && *(_BYTE *)(a1 + 825))
      {
        LOBYTE(v30) = *(_BYTE *)(v19 + 11);
        result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v21)(v21, v30 & 1, v21 + v28 + 54);
        goto LABEL_35;
      }
      goto LABEL_43;
    }
LABEL_37:
    result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v21)(v21, 1, v21 + v28 + 54);
    goto LABEL_38;
  }
  if (*(_BYTE *)(a1 + 8))
    v29 = *(char *)(*(_QWORD *)(a1 + 968) + 203) < 1;
  else
    v29 = 1;
  if ((*v116 & 0x80) != 0)
    goto LABEL_37;
  if ((*v116 & 0x70) != 0 || !*(_BYTE *)(a1 + 825))
  {
LABEL_43:
    (**(void (***)(uint64_t, _QWORD, uint64_t))v21)(v21, 0, v21 + v28 + 54);
    goto LABEL_44;
  }
  v30 = *(_BYTE *)(v19 + 11) & v29;
  result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v21)(v21, v30, v21 + v28 + 54);
LABEL_35:
  if ((v30 & 1) == 0)
    goto LABEL_44;
LABEL_38:
  v32 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 652);
  v33 = v32 - 2;
  if (v32 >= 2)
  {
    v34 = (*(unsigned __int8 *)(v19 + 11) >> 1) & 7;
    result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))v21)(v21, v34 != 0, v21 + 67);
    if (v34)
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 40))(v21, (v34 - 1), v33);
  }
  if ((a7 & 1) == 0)
  {
LABEL_144:
    v104 = *(_QWORD *)(a1 + 14856);
    if (*(_BYTE *)(v104 + 12) && v115 >= *(_DWORD *)(v104 + 1636))
    {
      if (*a6)
      {
        *a6 = 0;
        v105 = *(unsigned __int8 **)(a1 + 872);
        v106 = *(unsigned __int8 *)(a1 + 824);
        v107 = sub_1C97C9654(a1, a2, a3, a4, v105, *a5, v106);
        v108 = a4;
        v109 = v107;
        result = sub_1C97C81C4(a1, a2, a3, v108, v105, v107, v106);
        *a5 = v109;
      }
    }
  }
  return result;
}

uint64_t sub_1C97CCC24(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  char v25;
  int v26;
  __int32 *v27;
  int v28;
  int v29;
  __int32 *v30;
  __int16 v31;
  __int16 v32;
  __int32 v33[13];

  if (((a3 | a2) & 0x80000000) == 0
    && ((v12 = a2 - *(_DWORD *)(a1 + 832),
         v13 = a3 - *(_DWORD *)(a1 + 836),
         v14 = *(unsigned __int8 *)(a1 + 828),
         v12 < v14)
      ? (v15 = v13 < v14)
      : (v15 = 0),
        v15))
  {
    v16 = *(_QWORD *)(a1 + 888) + 16 * (*(_QWORD *)(a1 + 864) * ((uint64_t)v13 >> 2) + (v12 >> 2));
  }
  else
  {
    v16 = 0;
  }
  result = (***(uint64_t (****)(_QWORD, _QWORD, uint64_t))(a1 + 944))(*(_QWORD *)(a1 + 944), *(_BYTE *)(v16 + 11) & 1, *(_QWORD *)(a1 + 944) + 66);
  v18 = *(unsigned __int8 *)(v16 + 11);
  if ((v18 & 1) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 14840) + 58))
    {
      v19 = 1;
    }
    else
    {
      if (a5 + a4 != 12)
      {
        (***(void (****)(_QWORD, _QWORD, uint64_t))(a1 + 944))(*(_QWORD *)(a1 + 944), (v18 >> 6) & 1, *(_QWORD *)(a1 + 944) + a6 + 68);
        LOBYTE(v18) = *(_BYTE *)(v16 + 11);
      }
      if ((v18 & 0x40) != 0)
      {
        v19 = 0;
      }
      else
      {
        v24 = *(unsigned __int8 *)(v16 + 8);
        (***(void (****)(_QWORD, BOOL, uint64_t))(a1 + 944))(*(_QWORD *)(a1 + 944), v24 > 0xEF, *(_QWORD *)(a1 + 944) + 72);
        v19 = 1;
        v25 = 1;
        if (v24 > 0xEF)
        {
LABEL_21:
          v29 = *(_DWORD *)(v16 + 4);
          sub_1C97C3470(a1, a2, a3, 1u, *(unsigned __int8 *)(v16 + 9) >> 4, a4, a5, v33);
          v30 = &v33[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 5) & 1];
          v31 = *(_WORD *)v30;
          v32 = *((_WORD *)v30 + 1);
          sub_1C97CCF18(a1, *(unsigned __int8 *)(v16 + 9) >> 4, *(char *)(*(_QWORD *)(a1 + 14840) + 517));
          if ((v25 & 1) != 0 || !*(_BYTE *)(*(_QWORD *)(a1 + 14840) + 552))
            sub_1C97CCFD8(*(_QWORD *)(a1 + 944), (unsigned __int16)(v29 - v31) | ((unsigned __int16)(HIWORD(v29) - v32) << 16));
          return (***(uint64_t (****)(_QWORD, _QWORD, uint64_t))(a1 + 944))(*(_QWORD *)(a1 + 944), (*(unsigned __int8 *)(v16 + 11) >> 5) & 1, *(_QWORD *)(a1 + 944) + 77);
        }
      }
    }
    v26 = *(_DWORD *)v16;
    sub_1C97C3470(a1, a2, a3, 0, *(unsigned __int8 *)(v16 + 8) >> 4, a4, a5, v33);
    v27 = &v33[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 4) & 1];
    v28 = (unsigned __int16)(v26 - *(_WORD *)v27) | ((unsigned __int16)(HIWORD(v26) - *((_WORD *)v27 + 1)) << 16);
    sub_1C97CCF18(a1, *(unsigned __int8 *)(v16 + 8) >> 4, *(char *)(*(_QWORD *)(a1 + 14840) + 516));
    sub_1C97CCFD8(*(_QWORD *)(a1 + 944), v28);
    result = (***(uint64_t (****)(_QWORD, _QWORD, uint64_t))(a1 + 944))(*(_QWORD *)(a1 + 944), (*(unsigned __int8 *)(v16 + 11) >> 4) & 1, *(_QWORD *)(a1 + 944) + 77);
    v25 = 0;
    if ((v19 & 1) != 0)
      return result;
    goto LABEL_21;
  }
  v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 652);
  v21 = v20 - 2;
  if (v20 >= 2)
  {
    v22 = *(_QWORD *)(a1 + 944);
    v23 = (v18 >> 1) & 7;
    result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))v22)(v22, v23 != 0, v22 + 67);
    if (v23)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 40))(v22, (v23 - 1), v21);
  }
  return result;
}

uint64_t sub_1C97CCF18(uint64_t result, signed int a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  if (a3 >= 2)
  {
    v4 = a2;
    v5 = result;
    result = (***(uint64_t (****)(_QWORD, BOOL, uint64_t))(result + 944))(*(_QWORD *)(result + 944), a2 > 0, *(_QWORD *)(result + 944) + 73);
    if ((int)v4 >= 1)
    {
      v6 = a3 - 2;
      if (a3 != 2)
      {
        result = (***(uint64_t (****)(_QWORD, BOOL, uint64_t))(v5 + 944))(*(_QWORD *)(v5 + 944), v4 > 1, *(_QWORD *)(v5 + 944) + 74);
        if (v4 >= 2 && a3 >= 4)
        {
          do
          {
            result = (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(v5 + 944) + 8))(*(_QWORD *)(v5 + 944), v4 > 2);
            if (v4 < 3)
              break;
            --v4;
          }
          while (v6-- > 2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C97CCFD8(uint64_t a1, int a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  if ((a2 & 0x8000u) == 0)
    v4 = (__int16)a2;
  else
    v4 = -(__int16)a2;
  if (a2 >> 16 >= 0)
    v5 = a2 >> 16;
  else
    v5 = -(a2 >> 16);
  v6 = v4 << 16;
  v7 = v5 << 16;
  v8 = a1 + 75;
  (**(void (***)(uint64_t, BOOL, uint64_t))a1)(a1, v4 << 16 > 0, a1 + 75);
  result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))a1)(a1, v5 << 16 > 0, v8);
  if (v4 << 16 >= 1)
    result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))a1)(a1, v6 > 0x10000, a1 + 76);
  if (v7 >= 1)
    result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))a1)(a1, v7 > 0x10000, a1 + 76);
  if (v6 >= 1)
  {
    if (v6 > 0x10000)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 56))(a1, ((__int16)v4 - 2), 1);
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, (unsigned __int16)a2 >> 15);
  }
  if (v7 >= 1)
  {
    if (v7 > 0x10000)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 56))(a1, ((__int16)v5 - 2), 1);
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, a2 >> 31);
  }
  return result;
}

uint64_t sub_1C97CD14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t i;
  uint64_t v20;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v10 = a5;
  a6.n128_u64[0] = 0x100000000;
  do
  {
    v11 = *(unsigned __int8 *)(a4 + v7);
    v12 = *(unsigned __int8 *)(a3 + v7);
    if (v11 == v12)
    {
      if (v11 < 2)
      {
        v11 = 0;
        v23 = 0x100000000;
        v12 = 1;
        v13 = 26;
      }
      else
      {
        v12 = (((_BYTE)v11 + 29) & 0x1F) + 2;
        LODWORD(v23) = *(unsigned __int8 *)(a4 + v7);
        HIDWORD(v23) = v12;
        v13 = (((_BYTE)v11 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      LODWORD(v23) = *(unsigned __int8 *)(a4 + v7);
      HIDWORD(v23) = v12;
      if (v12 + v11 > 1)
        v14 = 1;
      else
        v14 = 26;
      if (v11)
        v15 = v12 == 0;
      else
        v15 = 1;
      if (v15)
        v13 = v14;
      else
        v13 = 0;
    }
    v16 = 0;
    v24 = v13;
    v17 = *(unsigned __int8 *)(a2 + v7);
    do
    {
      if (*((_DWORD *)&v23 + v16) == v17)
      {
        if ((_DWORD)v16)
          v9 = (v16 + 4 * v9 + 1);
        else
          v9 = (2 * v9);
        if ((_DWORD)v16)
          v8 = (v8 + 2);
        else
          v8 = (v8 + 1);
        *((_BYTE *)&v22 + v7) = 1;
        goto LABEL_37;
      }
      ++v16;
    }
    while (v16 != 3);
    if (!*((_BYTE *)&v22 + v7))
    {
      if ((int)v11 <= v12)
      {
        v18 = v12;
        v12 = v11;
      }
      else
      {
        v23 = __PAIR64__(v11, v12);
        v18 = v11;
      }
      if (v12 <= v13)
      {
        v12 = v13;
      }
      else
      {
        LODWORD(v23) = v13;
        v24 = v12;
      }
      if (v18 > v12)
      {
        HIDWORD(v23) = v12;
        v24 = v18;
      }
      for (i = 8; i != -4; i -= 4)
        v17 -= v17 > *(_DWORD *)((char *)&v23 + i);
      v9 = (v17 + 32 * v9);
      v8 = (v8 + 5);
    }
LABEL_37:
    ++v7;
  }
  while (v7 != a5);
  v20 = 0;
  do
    (**(void (***)(uint64_t, _QWORD, uint64_t, __n128))a1)(a1, *((unsigned __int8 *)&v22 + v20++), a1 + 64, a6);
  while (v10 != v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v9, v8);
}

uint64_t sub_1C97CD34C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned __int8 **a8)
{
  unsigned int v8;
  unsigned __int8 **v9;
  int v13;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  char v39;
  char v40;
  int v41;
  _BOOL4 v43;
  char v45;
  char v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 **v55;
  int v56;
  __int16 v59;
  uint64_t v60[3];
  uint64_t v61[3];

  v9 = a8;
  v13 = a4;
  v61[2] = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int8 *)(a1 + 25064);
  v16 = *((_QWORD *)*a8 + 12)
      + 16
      * (((uint64_t)(a2 - *((_DWORD *)*a8 + 1)) >> 2) + ((unint64_t)**a8 >> 2)
                                                     * ((a3 - *((_DWORD *)*a8 + 2)) >> 2));
  *(_BYTE *)(v16 + 11) = *(_BYTE *)(v16 + 11) & 0xBF | *(_BYTE *)(a7 + 11) & 0x40;
  sub_1C97C35B4(a1, a2, a3, *a8, a4, a5, a1 + 25064);
  if (v15[60])
  {
    v17 = 0;
    v18 = *(unsigned __int8 *)(a7 + 8) >> 4;
    v19 = *(unsigned __int8 *)(a7 + 9) >> 4;
    v20 = v15;
    while (v18 != *v20
         || v18 != 15 && *((_DWORD *)v20 + 1) != *(_DWORD *)a7
         || v19 != v20[1]
         || v19 != 15 && *((_DWORD *)v20 + 2) != *(_DWORD *)(a7 + 4))
    {
      ++v17;
      v20 += 12;
      if (v15[60] == v17)
        goto LABEL_10;
    }
    v45 = *(_BYTE *)(v16 + 11);
    if (a6)
      v46 = 2;
    else
      v46 = 3;
    *(_BYTE *)(v16 + 10) = v46;
    *(_BYTE *)(v16 + 11) = v45 & 0xF0 | (2 * (v17 & 7)) | 1;
    *(_BYTE *)(v16 + 8) = 16 * *v20;
    *(_BYTE *)(v16 + 9) = 16 * v20[1];
    v47 = &v15[12 * v17];
    *(_DWORD *)v16 = *((_DWORD *)v47 + 1);
    *(_DWORD *)(v16 + 4) = *((_DWORD *)v47 + 2);
  }
  else
  {
LABEL_10:
    *(_BYTE *)(v16 + 10) = 3;
    *(_BYTE *)(v16 + 11) &= 0xF0u;
    *(_BYTE *)(v16 + 8) = *(_BYTE *)(a7 + 8) & 0xF0;
    *(_BYTE *)(v16 + 9) = *(_BYTE *)(a7 + 9) & 0xF0;
    *(_DWORD *)v16 = *(_DWORD *)a7;
    *(_DWORD *)(v16 + 4) = *(_DWORD *)(a7 + 4);
    v61[0] = 0;
    v61[1] = 0;
    memset(v60, 0, sizeof(v60));
    v55 = v9;
    v56 = v13;
    sub_1C97C3254(a1, a2, a3, *v9, v13, a5, v61, v60);
    v21 = 0;
    v22 = *(unsigned __int8 *)(a1 + 204);
    v59 = 0;
    v23 = 1;
    while (1)
    {
      v24 = (unint64_t)*(unsigned __int8 *)(v16 + v21 + 8) >> 4;
      if ((_DWORD)v24 != 15)
      {
        v25 = a1 + 208 * v21 + 52 * v24 + 25128;
        sub_1C974ECB8(*(_QWORD *)(a1 + 14840), a2, a3, v21, v24, v56, a5, (__int32 *)v25, v61, (uint64_t)v60, 1);
        v26 = *(unsigned __int8 *)(v25 + 48);
        if (*(_BYTE *)(v25 + 48))
        {
          v27 = 0;
          v28 = *(_DWORD *)(v16 + 4 * v21);
          v30 = -1;
          do
          {
            v31 = *(_DWORD *)(v25 + 4 * v27);
            v32 = (__int16)v28 - (__int16)v31;
            if ((v32 + 64) >= 0x80)
            {
              if (v32 >= 0)
                v34 = (__int16)v28 - (__int16)v31;
              else
                v34 = (__int16)v31 - (__int16)v28;
              v33 = 63 - 2 * __clz((v32 < 1) | (2 * v34));
            }
            else
            {
              v33 = byte_1C9858728[v32 + 64];
            }
            v29 = v28 >> 16;
            v35 = (v28 >> 16) - (v31 >> 16);
            if ((v35 + 64) >= 0x80)
            {
              if (v35 >= 0)
                v37 = v29 - (v31 >> 16);
              else
                v37 = (v31 >> 16) - v29;
              v36 = 63 - 2 * __clz((v35 < 1) | (2 * v37));
            }
            else
            {
              v36 = byte_1C9858728[v35 + 64];
            }
            v38 = v36 + v33;
            if (v38 < v30)
            {
              *((_BYTE *)&v59 + v21) = v27;
              v8 = (v28 - (v31 & 0xFFFF0000)) & 0xFFFF0000 | (unsigned __int16)(v28 - v31);
              v30 = v38;
            }
            ++v27;
          }
          while (v26 != v27);
        }
        if ((v23 & 1) == 0)
          break;
      }
      v39 = (v22 != 0) & v23;
      v21 = 1;
      v23 = 0;
      if ((v39 & 1) == 0)
      {
        v40 = *(_BYTE *)(v16 + 11);
        v41 = 1;
        goto LABEL_41;
      }
    }
    v40 = *(_BYTE *)(v16 + 11);
    v43 = (v40 & 0x40) == 0 || v8 == 0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 14840) + 552))
      v41 = v43;
    else
      v41 = 1;
LABEL_41:
    *(_BYTE *)(v16 + 11) = (32 * (HIBYTE(v59) & 1)) | v40 & 0xCF | (16 * (v59 & 1));
    v13 = v56;
    v9 = v55;
    if (!v41)
      return 0;
  }
  if (a5 >= 4)
  {
    v48 = 0;
    LODWORD(v49) = v13 >> 2;
    if (v13 >> 2 <= 1)
      v49 = 1;
    else
      v49 = v49;
    v50 = 16 * ((unint64_t)**v9 >> 2);
    v51 = (_QWORD *)v16;
    do
    {
      v52 = v51;
      v53 = v49;
      if (v13 >= 4)
      {
        do
        {
          v54 = *(_QWORD *)v16;
          *(_QWORD *)((char *)v52 + 6) = *(_QWORD *)(v16 + 6);
          *v52 = v54;
          v52 += 2;
          --v53;
        }
        while (v53);
      }
      ++v48;
      v51 = (_QWORD *)((char *)v51 + v50);
    }
    while (v48 != a5 >> 2);
  }
  return 1;
}

BOOL sub_1C97CD78C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, unsigned __int8 **a7, void ***a8)
{
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _WORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  __int16 v24;
  int v25;
  BOOL v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  int v46;
  void ***v47;
  unsigned __int8 *v48;
  __n128 v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  char *v63;
  char v65;
  _QWORD v66[3];
  int v67;
  __int16 v68;

  v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4;
  v14 = *a7;
  v15 = (int)a2 - (uint64_t)*((int *)*a7 + 1);
  v16 = a2 - *((_DWORD *)*a7 + 1);
  v17 = (int)a3 - (uint64_t)*((int *)*a7 + 2);
  v18 = **a7;
  v19 = (_WORD *)(*((_QWORD *)*a7 + 11) + 2 * (((uint64_t)v16 >> 3) + (int)(v18 >> 3) * (uint64_t)((int)v17 >> 3)));
  v20 = (unsigned __int8 *)*((_QWORD *)*a7 + 17);
  v21 = *((_QWORD *)*a7 + 12) + 16 * (((uint64_t)v16 >> 2) + (int)(v18 >> 2) * (uint64_t)((int)v17 >> 2));
  v22 = (uint64_t *)*((_QWORD *)v20 + 7);
  v23 = (uint64_t *)*((_QWORD *)v20 + 9);
  v63 = (char *)(a1 + 29745);
  if (*(_BYTE *)(a1 + 29745))
  {
    v24 = 0;
  }
  else
  {
    v25 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 968) + 180);
    v26 = __OFSUB__(v13, v25);
    v28 = v13 - v25;
    v27 = (v28 < 0) ^ v26 | (v28 == 0);
    v24 = 4 * (v28 & 3);
    if (v27)
      v24 = 0;
  }
  v29 = v20[1];
  v30 = *v20;
  v31 = *((_QWORD *)v20 + 8);
  v32 = *((_QWORD *)v20 + 10);
  v33 = *((int *)v22 + 4);
  v34 = *v22;
  v35 = (1 << v13);
  v36 = *((int *)v23 + 4);
  v37 = *v23;
  v38 = *v19 & 0xFFF3 | v24;
  *v19 = v38;
  v59 = (unsigned int *)v21;
  v60 = v15;
  v57 = v29;
  v58 = v30;
  v55 = v37;
  v56 = v36;
  v53 = v32;
  v54 = v33;
  v51 = v31;
  v52 = v34;
  if (a6)
    v39 = 0;
  else
    v39 = (*(_BYTE *)(v21 + 10) == 2) << 7;
  v40 = v14 + 200;
  *v19 = v39 | v38 & 0xFF7F;
  sub_1C97C2634((_QWORD *)a1, v19, a4, a6, v39 != 0, (unint64_t)**a7 >> 3, *((_DWORD *)*a7 + 3));
  if ((int)v35 >= 8)
  {
    v41 = 0;
    v42 = 2 * ((unint64_t)**a7 >> 3);
    v43 = v19;
    do
    {
      v44 = v43;
      v45 = v35 >> 3;
      do
      {
        *v44++ = *v19;
        --v45;
      }
      while (v45);
      ++v41;
      v43 = (_WORD *)((char *)v43 + v42);
    }
    while (v41 != v35 >> 3);
  }
  if (a6)
  {
    *((_DWORD *)v14 + 56) = 0;
    *v40 = 0;
    *((_QWORD *)v14 + 26) = 0;
    *((_QWORD *)v14 + 27) = -1;
    *((_WORD *)v14 + 114) = 2;
    v46 = a4;
    sub_1C97C8C08(a1, a2, a3, a4, *a7, 1, *(_BYTE *)(a1 + 8) == 0, 0, (unsigned int *)v14 + 50);
    v47 = a8;
    if (!*v63)
    {
      *((_DWORD *)v14 + 56) = 0;
      *v40 = 0;
      *((_QWORD *)v14 + 26) = 0;
      *((_QWORD *)v14 + 27) = -1;
      *((_WORD *)v14 + 114) = 2;
      sub_1C97CE654(a1, a2, a3, a4, *a7, (uint64_t)(v14 + 200));
    }
  }
  else
  {
    sub_1C980B120(*(_QWORD *)(a1 + 14840), v59, a2, a3, v35, v35, v58, v52 + (v51 + v60 + v58 * v17) * v54, 2 * v57, v55 + (v53 + v60 + 2 * (int)v57 * (uint64_t)((int)v17 >> 1)) * v56);
    v47 = a8;
    v46 = a4;
  }
  v67 = 0;
  v66[0] = 0;
  v66[1] = 0;
  v66[2] = -1;
  v68 = 0;
  *((_DWORD *)v14 + 56) = 0;
  *v40 = 0;
  *((_QWORD *)v14 + 26) = 0;
  *((_QWORD *)v14 + 27) = -1;
  *((_WORD *)v14 + 114) = 0;
  sub_1C97CB514(a1, a2, a3, v46, *a7, (uint64_t)(v14 + 200), (uint64_t)v66, 0, 0);
  v65 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
  sub_1C97C6D7C(a1, a2, a3, *a7, 1, 0, *v63, 1, 0);
  v48 = *a7;
  *((_DWORD *)v48 + 4) = *((_DWORD *)*a7 + 5);
  sub_1C97CBC8C(a1, a2, a3, v46, a5, (int *)v48 + 4, &v65, v49);
  *((_DWORD *)v14 + 56) += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
  sub_1C97CE36C(a1, a2, a3, v46, (uint64_t)*a7);
  *((_QWORD *)v14 + 27) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v14 + 114) + 1152)
                          * (unint64_t)*((unsigned int *)v14 + 56)) >> (8 * (*((_WORD *)v14 + 114) == 0)))
                        + *((_QWORD *)v14 + 25);
  return sub_1C97CECB4(a1, (void ***)a7, v47, 1u);
}

uint64_t sub_1C97CDBA0(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 **a5, void ***a6, int a7, int a8, unsigned int a9, char a10)
{
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  char v33;
  int v34;
  BOOL v35;
  signed int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  BOOL v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v52;
  char v55;
  uint64_t v56;
  __int16 v59[3];
  BOOL v60;
  unint64_t v61;
  _QWORD v62[3];

  v62[1] = *MEMORY[0x1E0C80C00];
  v13 = a1 + 25064;
  v14 = *a6;
  *((_DWORD *)v14 + 56) = 0;
  v14[25] = 0;
  v14[26] = 0;
  v14[27] = (void *)-1;
  *((_WORD *)v14 + 114) = 0;
  sub_1C97C35B4(a1, a2, a3, *a5, a7, a8, a1 + 25064);
  v52 = a7;
  v56 = a1;
  v15 = *(_DWORD *)(a1 + 4 * a4 + 27648);
  if ((a7 < 8 || a8 <= 7) && *(unsigned __int8 *)(*(_QWORD *)(v56 + 14848) + 2113) - a4 == 3)
  {
    v16 = *(unsigned __int8 *)(v13 + 60);
    if (*(_BYTE *)(v13 + 60))
    {
      v17 = v13;
      do
      {
        if (*(_BYTE *)v17 != 15 && *(_BYTE *)(v17 + 1) != 15)
        {
          *(_BYTE *)(v17 + 1) = 15;
          *(_DWORD *)(v17 + 8) = 0;
        }
        v17 += 12;
        --v16;
      }
      while (v16);
    }
  }
  v62[0] = 0x300000002;
  v18 = *(_QWORD *)(v56 + 968);
  if (*(_BYTE *)(v18 + 541))
    v62[0] = 0x200000003;
  v61 = -1;
  LODWORD(v18) = *(_DWORD *)(v18 + 544);
  if ((int)v18 >= *(unsigned __int8 *)(v13 + 60))
    v18 = *(unsigned __int8 *)(v13 + 60);
  else
    v18 = v18;
  v50 = v18;
  if ((int)v18 < 1)
  {
    v55 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v55 = 0;
    v48 = v56 + 1576;
    v49 = v13;
    do
    {
      v60 = 0;
      if (!sub_1C97CE868(v13, v19))
      {
        if (!*(_BYTE *)(*(_QWORD *)(v56 + 968) + 232))
          goto LABEL_23;
        v22 = *(char *)(v13 + 12 * v19);
        if (v22 == 15
          || (v23 = *(_QWORD *)(*(_QWORD *)(v56 + 14520) + 16 * v22 + 1672),
              *(_BYTE *)(v56 + 14266) = *(_BYTE *)(v13 + 12 * v19),
              *(_DWORD *)(v56 + 14268) = *(_DWORD *)(v23 + 520),
              *(_DWORD *)(v56 + 14276) = *(_DWORD *)(v23 + 524),
              *(_DWORD *)v59 = *(_DWORD *)(v13 + 12 * v19 + 4),
              v24 = *(_DWORD *)v59,
              sub_1C979DC5C(v48, a2, a3, v52, a8, 0, v59),
              *(_DWORD *)v59 == v24))
        {
          v25 = *(char *)(v13 + 12 * v19 + 1);
          if (v25 == 15
            || (v26 = *(_QWORD *)(*(_QWORD *)(v56 + 14520) + 16 * v25 + 1928),
                *(_BYTE *)(v56 + 14267) = *(_BYTE *)(v13 + 12 * v19 + 1),
                *(_DWORD *)(v56 + 14272) = *(_DWORD *)(v26 + 520),
                *(_DWORD *)(v56 + 14280) = *(_DWORD *)(v26 + 524),
                *(_DWORD *)v59 = *(_DWORD *)(v13 + 12 * v19 + 8),
                v27 = *(_DWORD *)v59,
                sub_1C979DC5C(v48, a2, a3, v52, a8, 1u, v59),
                *(_DWORD *)v59 == v27))
          {
LABEL_23:
            v28 = 0;
            v29 = 0;
            v30 = v13 + 12 * v19;
            v31 = (_BYTE *)(v30 + 1);
            v32 = 1;
            do
            {
              v33 = v32;
              v34 = *((_DWORD *)v62 + v28);
              if (((v15 & 0x100) != 0 || v34 != 2) && (!a10 || v34 == 2))
              {
                if ((v21 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v56 + 968) + 541) ? (v35 = v34 == 3) : (v35 = 0), v35))
                {
                  v21 = 1;
                }
                else
                {
                  v36 = a2 - *((_DWORD *)*a5 + 1);
                  v37 = a3 - *((_DWORD *)*a5 + 2);
                  v38 = **a5;
                  v39 = *((_QWORD *)*a5 + 11);
                  v40 = *((_QWORD *)*a5 + 12) + 16 * (((uint64_t)v36 >> 2) + (int)(v38 >> 2) * (uint64_t)(v37 >> 2));
                  v41 = *(_BYTE *)(v40 + 11);
                  *(_BYTE *)(v40 + 10) = v34;
                  v42 = v41 & 0xF0 | (2 * (v20 & 7)) | 1;
                  *(_BYTE *)(v40 + 11) = v42;
                  *(_DWORD *)v40 = *(_DWORD *)(v30 + 4);
                  *(_BYTE *)(v40 + 8) = 16 * *(_BYTE *)v30;
                  *(_DWORD *)(v40 + 4) = *(_DWORD *)(v30 + 8);
                  *(_BYTE *)(v40 + 9) = 16 * *v31;
                  if (*(_BYTE *)v30 == 15)
                    v43 = 0;
                  else
                    v43 = (*v31 != 15) << 6;
                  v44 = ((uint64_t)v36 >> 3) + (int)(v38 >> 3) * (uint64_t)(v37 >> 3);
                  *(_BYTE *)(v40 + 11) = v43 | v42 & 0xBF;
                  *(_WORD *)(v39 + 2 * v44) = *(_WORD *)(v39 + 2 * v44) & 0xFF73 | ((v34 == 2) << 7);
                  v29 = sub_1C97CE904(v56, a2, a3, a4, a5, a6, v52, a8, a9, (v32 | v29) & 1 | (v34 == 2), &v60, &v61);
                  v55 |= v29;
                  v46 = v34 != 2 && v60;
                  v21 |= v46;
                }
              }
              v32 = 0;
              v28 = 1;
            }
            while ((v33 & 1) != 0);
          }
        }
      }
      ++v19;
      ++v20;
      v13 = v49;
    }
    while (v19 != v50);
  }
  return v55 & 1;
}

uint64_t sub_1C97CE058(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int8 **a6, unsigned __int8 **a7, _DWORD *a8)
{
  unsigned int v11;
  uint64_t v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  _WORD *v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  _WORD *v31;
  uint64_t v32;

  v11 = a5;
  v15 = result;
  v16 = (_BYTE *)(result + 27684);
  v17 = *a7;
  v18 = *(unsigned __int8 *)(result + 196);
  if (!*(_BYTE *)(result + 196) || *(_BYTE *)(result + 29745))
  {
    if (*(_BYTE *)(result + 8))
    {
      if (*(char *)(*(_QWORD *)(result + 968) + 203) >= 1)
        v19 = v18 ^ 1;
      else
        v19 = 0;
    }
    else
    {
      v19 = 0;
    }
    v20 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4;
    v21 = a2 - *((_DWORD *)v17 + 1);
    v22 = a3 - *((_DWORD *)v17 + 2);
    v23 = *v17;
    v24 = *(unsigned __int8 *)(*((_QWORD *)v17 + 12)
                             + 16 * (((uint64_t)v21 >> 2) + (int)(v23 >> 2) * (uint64_t)(v22 >> 2))
                             + 10);
    if (v24 == 2 || (*(_BYTE *)(*(_QWORD *)(result + 968) + 536) ? (v25 = v20 < 5) : (v25 = 1), !v25))
      v19 = 0;
    if (*v16 && *(_BYTE *)(*(_QWORD *)(result + 968) + 229) != 3)
    {
      v27 = (_WORD *)(*((_QWORD *)v17 + 11) + 2 * (((uint64_t)v21 >> 3) + (int)(v23 >> 3) * (uint64_t)(v22 >> 3)));
      if (v24 == 2)
      {
        if ((*v27 & 0x80) == 0)
        {
          *v27 |= 0x80u;
          if (1 << v20 >= 8)
          {
            v28 = 0;
            v29 = 2 * ((unint64_t)*v17 >> 3);
            v30 = v27;
            do
            {
              v31 = v30;
              v32 = (1 << v20) >> 3;
              do
              {
                *v31++ = *v27;
                --v32;
              }
              while (v32);
              ++v28;
              v30 = (_WORD *)((char *)v30 + v29);
            }
            while (v28 != (1 << v20) >> 3);
          }
        }
      }
      else
      {
        sub_1C97F1844(result + 14912, result, a2, a3, a4, v24, ((unsigned __int16)*v27 >> 4) & 7);
        return sub_1C97F93A8(v15 + 14912, a2, a3, 0, v20, v17);
      }
    }
    else
    {
      if (v24 != 2 || !*(_BYTE *)(result + 8) || *(_BYTE *)(result + 812))
      {
        result = sub_1C97C8C08(result, a2, a3, a4, v17, 1, *(unsigned __int8 *)(result + 8) == 0, v19, (unsigned int *)&v17[32 * v18 + 168]);
        v11 = a5;
        if (a8)
          *a8 = result;
      }
      if (*(int *)(v15 + 4) < 3)
      {
        if (!v16[2061] || *(char *)(*(_QWORD *)(v15 + 968) + 229) >= 1)
          return sub_1C97CE654(v15, a2, a3, a4, *a7, (uint64_t)(*a7 + 168));
      }
      else
      {
        sub_1C97CA688(v15, a2, a3, a4, *a6, *a7, v11, 0xFFFFFFFFuLL);
        result = sub_1C97CE36C(v15, a2, a3, a4, (uint64_t)*a7);
        if ((_DWORD)result)
          *((_QWORD *)*a7 + 27) = ((*(unsigned __int16 *)(v15 + 2 * *((__int16 *)*a7 + 114) + 1152)
                                  * (unint64_t)*((unsigned int *)*a7 + 56)) >> (8 * (*((_WORD *)*a7 + 114) == 0)))
                                + *((_QWORD *)*a7 + 25);
      }
    }
  }
  return result;
}

uint64_t sub_1C97CE36C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  LODWORD(v6) = a3;
  v7 = a2;
  v45 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 14840);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 16) + 2113) - a4;
  if (*(_BYTE *)(v9 + 5432))
  {
    v11 = *(_DWORD *)(a5 + 12) & ~(*(int *)(a5 + 12) >> 31);
    result = sub_1C97CB9CC(a1, a5, v11, v11, a2, a3, v10, (uint64_t *)(a5 + 200));
    v9 = *(_QWORD *)(a1 + 14840);
  }
  else
  {
    result = 0;
  }
  if (*(_BYTE *)(v9 + 5433))
  {
    v38 = result;
    v13 = atomic_load((unsigned __int8 *)&qword_1EF920EC8);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920EC8))
    {
      dword_1EF920EC0 = 10;
      __cxa_guard_release(&qword_1EF920EC8);
    }
    v40 = v10;
    v14 = 1 << v10;
    v15 = *(_QWORD *)(a1 + 14840);
    v16 = *(_DWORD *)(v15 + 5456);
    v17 = *(_DWORD *)(v15 + 5460);
    if (v17 >= v16)
      v17 = v16;
    v39 = v17 * (uint64_t)v17;
    v18 = v14 + v6;
    v19 = *(_DWORD *)(a1 + 20);
    v42 = v14 + v6;
    if (v14 + (int)v6 >= v19)
      v18 = *(_DWORD *)(a1 + 20);
    if (v18 <= (int)v6)
    {
      v20 = 0;
    }
    else
    {
      v20 = 0;
      v21 = **(unsigned __int8 **)(a5 + 136);
      v22 = v14 + v7;
      v23 = *(_DWORD *)(a1 + 16);
      v6 = (int)v6;
      v41 = (int)v7;
      do
      {
        if (v22 >= v23)
          v24 = v23;
        else
          v24 = v22;
        v25 = v41;
        v26 = v7;
        if (v24 > (int)v7)
        {
          do
          {
            v43 = *(int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 14840) + 5320) + 616) + 672);
            v44 = 0;
            v27 = *(unsigned __int8 **)(a5 + 136);
            v28 = *(_QWORD *)(a1
                            + ((uint64_t)((int)v25 - *(_DWORD *)(a1 + 24524)) >> 3 << 8)
                            + 32 * ((uint64_t)((int)v6 - *(_DWORD *)(a1 + 24528)) >> 3)
                            + 27712);
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(a1 + 1008))(**((_QWORD **)v27 + 7)+ (v25 + *((_QWORD *)v27 + 8) + (v6 - *(int *)(a5 + 8)) * *v27 - *(int *)(a5 + 4))* *(int *)(*((_QWORD *)v27 + 7) + 16), v21, &v43);
            v29 = v28 - v44;
            if (v28 - v44 < 0)
              v29 = v44 - v28;
            v20 += v29;
            v25 += 8;
            v23 = *(_DWORD *)(a1 + 16);
            if (v22 >= v23)
              v30 = *(_DWORD *)(a1 + 16);
            else
              v30 = v22;
          }
          while ((int)v25 < v30);
          v19 = *(_DWORD *)(a1 + 20);
        }
        v6 += 8;
        v31 = v42;
        if (v42 >= v19)
          v31 = v19;
        v7 = v26;
      }
      while ((int)v6 < v31);
    }
    v32 = v39 << 6;
    v33 = (v20 + 32) >> 6;
    if (v40 == 3)
    {
      v33 += 2 * (v32 >> dword_1EF920EC0);
      LODWORD(result) = v38;
    }
    else
    {
      LODWORD(result) = v38;
      if (v40 == 4)
        v33 += 4 * (v32 >> dword_1EF920EC0);
    }
    v34 = v33 * *(int *)(*(_QWORD *)(a1 + 14840) + 5444);
    v35 = *(_QWORD *)(a5 + 200);
    if ((v34 + 512) >> 10 <= -v35)
      v36 = -v35;
    else
      v36 = (v34 + 512) >> 10;
    if (v34 >= -512)
      v37 = (v34 + 512) >> 10;
    else
      v37 = v36;
    *(_QWORD *)(a5 + 200) = v35 + v37;
    *(_QWORD *)(a5 + 208) = v37;
    if (v37)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t sub_1C97CE654(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  __int16 v22;
  _QWORD v23[3];
  int v24;
  __int16 v25;

  v8 = result;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113) - a4;
  v10 = a2 - *((_DWORD *)a5 + 1);
  v11 = a3 - *((_DWORD *)a5 + 2);
  v12 = *a5;
  v13 = (_WORD *)(*((_QWORD *)a5 + 11) + 2 * (((uint64_t)v10 >> 3) + (int)(v12 >> 3) * (uint64_t)(v11 >> 3)));
  v14 = *(unsigned __int8 *)(*((_QWORD *)a5 + 12)
                           + 16 * (((uint64_t)v10 >> 2) + (int)(v12 >> 2) * (uint64_t)(v11 >> 2))
                           + 10);
  if (v14 == 2)
  {
    *(_QWORD *)(a6 + 16) = ((*(unsigned __int16 *)(result + 2 * *(__int16 *)(a6 + 28) + 1152)
                           * (unint64_t)*(unsigned int *)(a6 + 24)) >> (8 * (*(_WORD *)(a6 + 28) == 0)))
                         + *(_QWORD *)a6;
    if ((*v13 & 0x80) == 0)
    {
      *v13 |= 0x80u;
      if (1 << v9 >= 8)
      {
        v15 = 0;
        v16 = 2 * ((unint64_t)*a5 >> 3);
        v17 = v13;
        do
        {
          v18 = v17;
          v19 = (1 << v9) >> 3;
          do
          {
            *v18++ = *v13;
            --v19;
          }
          while (v19);
          ++v15;
          v17 = (_WORD *)((char *)v17 + v16);
        }
        while (v15 != (1 << v9) >> 3);
      }
    }
  }
  else
  {
    sub_1C97F1844(result + 14912, result, a2, a3, a4, v14, ((unsigned __int16)*v13 >> 4) & 7);
    if (*(_BYTE *)(v8 + 29745) && *(char *)(*(_QWORD *)(v8 + 968) + 229) >= 2)
    {
      v22 = *(_WORD *)(a6 + 28);
      v24 = 0;
      v23[0] = 0;
      v23[1] = 0;
      v23[2] = -1;
      v25 = v22;
      result = sub_1C97F95A4(v8 + 14912, a2, a3, a5, v9, 0, (uint64_t)v23, 0);
      *(_QWORD *)(a6 + 16) = ((*(unsigned __int16 *)(v8 + 2 * *(__int16 *)(a6 + 28) + 1152)
                             * (unint64_t)*(unsigned int *)(a6 + 24)) >> (8 * (*(_WORD *)(a6 + 28) == 0)))
                           + *(_QWORD *)a6;
    }
    else
    {
      *(_QWORD *)a6 = 0;
      return sub_1C97F9C34(v8 + 14912, a2, a3, a5, v9, 0, 0, (uint64_t *)a6, 0);
    }
  }
  return result;
}

BOOL sub_1C97CE868(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  _DWORD *v8;
  BOOL v9;

  if (a2 < 1)
  {
    return 0;
  }
  else
  {
    v2 = 0;
    v3 = (unsigned __int8 *)(a1 + 12 * a2);
    v4 = v3 + 4;
    v7 = *v3;
    v5 = v3 + 1;
    v6 = v7;
    v8 = (_DWORD *)(a1 + 4);
    v9 = 1;
    do
    {
      if (v6 == *((unsigned __int8 *)v8 - 4)
        && *v4 == *v8
        && *v5 == *((unsigned __int8 *)v8 - 3)
        && *(_DWORD *)(a1 + 12 * a2 + 8) == v8[1])
      {
        break;
      }
      v9 = ++v2 < a2;
      v8 += 3;
    }
    while (a2 != v2);
  }
  return v9;
}

BOOL sub_1C97CE904(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, uint64_t a7, int a8, unsigned int a9, char a10, BOOL *a11, unint64_t *a12)
{
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  __n128 v41;
  int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  __int16 v53;

  v18 = *a5;
  v19 = *((_DWORD *)*a5 + 3);
  v53 = v19;
  v20 = a2 - *((_DWORD *)v18 + 1);
  v21 = a3 - *((_DWORD *)v18 + 2);
  v22 = *v18;
  v23 = v22 >> 3;
  v24 = (_WORD *)(*((_QWORD *)v18 + 11) + 2 * (((uint64_t)v20 >> 3) + (int)(v22 >> 3) * (uint64_t)(v21 >> 3)));
  v25 = *((_QWORD *)v18 + 12) + 16 * (((uint64_t)v20 >> 2) + (int)(v22 >> 2) * (uint64_t)(v21 >> 2));
  v26 = *v24 & 0x80;
  if (a8 < 4)
  {
    v34 = *v24 & 0x80;
  }
  else
  {
    v27 = 0;
    LODWORD(v28) = (int)a7 >> 2;
    if ((int)a7 >> 2 <= 1)
      v28 = 1;
    else
      v28 = v28;
    v29 = 16 * (v22 >> 2);
    v30 = (_QWORD *)v25;
    do
    {
      v31 = v30;
      v32 = v28;
      if ((int)a7 >= 4)
      {
        do
        {
          v33 = *(_QWORD *)v25;
          *(_QWORD *)((char *)v31 + 6) = *(_QWORD *)(v25 + 6);
          *v31 = v33;
          v31 += 2;
          --v32;
        }
        while (v32);
      }
      ++v27;
      v30 = (_QWORD *)((char *)v30 + v29);
    }
    while (v27 != a8 >> 2);
    v19 = *((_DWORD *)*a5 + 3);
    v34 = *v24 & 0x80;
    v23 = (unint64_t)**a5 >> 3;
  }
  sub_1C97C2634((_QWORD *)a1, v24, a4, 0, v34 != 0, v23, v19);
  if (a10)
  {
    v35 = (unsigned __int8 *)*((_QWORD *)*a5 + 17);
    v36 = (int)a2 - (uint64_t)*((int *)*a5 + 1);
    v37 = (int)a3 - (uint64_t)*((int *)*a5 + 2);
    sub_1C980B120(*(_QWORD *)(a1 + 14840), (unsigned int *)v25, a2, a3, a7, a7, *v35, **((_QWORD **)v35 + 7) + (*((_QWORD *)v35 + 8) + v36 + *v35 * v37) * *(int *)(*((_QWORD *)v35 + 7) + 16), 2 * v35[1], **((_QWORD **)v35 + 9)+ (*((_QWORD *)v35 + 10) + v36 + 2 * v35[1] * (uint64_t)((int)v37 >> 1)) * *(int *)(*((_QWORD *)v35 + 9) + 16));
  }
  v38 = *a5;
  *((_DWORD *)v38 + 56) = 0;
  *((_QWORD *)v38 + 25) = 0;
  *((_QWORD *)v38 + 26) = 0;
  *((_QWORD *)v38 + 27) = -1;
  *((_WORD *)v38 + 114) = 0;
  if (!*(_BYTE *)(a1 + 29745))
  {
    v51 = 0;
    v48 = 0;
    v49 = 0;
    v50 = -1;
    v52 = 2;
    sub_1C97CE654(a1, a2, a3, a4, *a5, (uint64_t)&v48);
  }
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v50 = -1;
  v52 = 0;
  sub_1C97CB514(a1, a2, a3, a4, *a5, (uint64_t)(*a5 + 200), (uint64_t)&v48, 0, 0);
  sub_1C97CE36C(a1, a2, a3, a4, (uint64_t)*a5);
  if (a11)
    *a11 = (*(_WORD *)(*((_QWORD *)*a5 + 11)
                     + 2
                     * (((uint64_t)((int)a2 - *((_DWORD *)*a5 + 1)) >> 3)
                      + ((unint64_t)**a5 >> 3) * (((int)a3 - *((_DWORD *)*a5 + 2)) >> 3))) & 0x80) != 0;
  if (!a12 || !v26)
    goto LABEL_21;
  v39 = *((_QWORD *)*a5 + 25);
  if (v39 < *a12)
  {
    *a12 = v39;
LABEL_21:
    v47 = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
    sub_1C97C6D7C(a1, a2, a3, *a5, 1, 0, *(_BYTE *)(a1 + 29745), 1, 0);
    v40 = *a5;
    *((_DWORD *)v40 + 4) = *((_DWORD *)*a5 + 5);
    sub_1C97CBC8C(a1, a2, a3, a4, a9, (int *)v40 + 4, &v47, v41);
    v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
    v43 = *a5;
    v44 = *((_DWORD *)*a5 + 56) + v42;
    *((_DWORD *)v43 + 56) = v44;
    *((_QWORD *)v43 + 27) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v43 + 114) + 1152) * (unint64_t)v44) >> (8 * (*((_WORD *)v43 + 114) == 0)))
                          + *((_QWORD *)v43 + 25);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
    return sub_1C97CECB4(a1, (void ***)a5, a6, 1u);
  }
  return 0;
}

BOOL sub_1C97CECB4(uint64_t a1, void ***a2, void ***a3, unsigned int a4)
{
  void **v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  __int16 *v10;
  __int16 v11;
  void **v12;
  void **v13;

  v6 = *a2;
  v7 = (*a2)[4 * a4 + 23];
  v8 = (*a3)[4 * a4 + 23];
  if (v7 < v8)
  {
    *a2 = *a3;
    *a3 = v6;
    v6 = *a2;
  }
  v9 = v7 < v8;
  v10 = (__int16 *)v6[11];
  v11 = *v10;
  bzero(v10, 2 * ((unint64_t)*(unsigned __int8 *)v6 >> 3) * ((unint64_t)*(unsigned __int8 *)v6 >> 3));
  *(_WORD *)v6[11] = *(_WORD *)v6[11] & 0xFFFC | v11 & 3;
  *(_WORD *)v6[11] = v11 & 0xFE00 | *(_WORD *)v6[11] & 0x1FF;
  sub_1C97C2518(*a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 58) < 2u);
  v12 = *a2;
  *((_DWORD *)v12 + 48) = 0;
  v12[21] = 0;
  v12[22] = 0;
  v12[23] = (void *)-1;
  *((_WORD *)v12 + 98) = 2;
  v13 = *a2;
  *((_DWORD *)v13 + 56) = 0;
  v13[25] = 0;
  v13[26] = 0;
  v13[27] = (void *)-1;
  *((_WORD *)v13 + 114) = 0;
  return v9;
}

uint64_t sub_1C97CEDA4(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7, char a8)
{
  unsigned int v9;
  unsigned __int8 **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  _BOOL4 v30;
  int v31;
  _BYTE *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _DWORD *v42;
  int v43;
  void **v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 **v55;
  void ***v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  __n128 v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  _WORD *v74;
  uint64_t v75;
  _WORD *v76;
  _WORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned __int16 *v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  _WORD *v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  _BYTE *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  _DWORD *v105;
  unsigned int v106;
  char v107;
  _QWORD v108[3];
  int v109;
  __int16 v110;

  v9 = a7;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = result;
  v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 14848) + 2113);
  v17 = a4;
  v105 = (_DWORD *)(result + 4 * a4 + 27648);
  if ((*v105 & 0x101) != 0)
  {
    v102 = a4;
    LOBYTE(v18) = 1;
    result = sub_1C97D254C(result, a2, a3, a4, a5, a6, 0, a7, 1u);
    v24 = *(_QWORD *)(v15 + 968);
    if (*(_BYTE *)(v24 + 234) && (*(_BYTE *)(v24 + 237) & 1) != 0)
      v18 = (*((unsigned __int8 *)(*a6)[12]
             + 16 * ((uint64_t)((int)a2 - *((_DWORD *)*a6 + 1)) >> 2)
             + 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)a3 - *((_DWORD *)*a6 + 2)) >> 2)
             + 11) >> 6) & 1;
    *(_BYTE *)(v15 + v102 + 205) = v18;
    v11 = a5;
    v13 = a3;
    v14 = a2;
    v9 = a7;
    v12 = a4;
    v17 = v102;
  }
  v25 = v16 - v12;
  if ((a8 & 1) != 0)
    goto LABEL_7;
  v27 = *(_QWORD *)(v15 + 968);
  v29 = (*(_BYTE *)(v27 + 529) & 6) == 0;
  v28 = *(unsigned __int8 *)(v27 + 528);
  v29 = !v29
     && *((_BYTE *)(*a6)[12]
        + 16 * ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 2)
        + 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 2)
        + 10) == 2;
  v30 = !v29;
  if (!v28)
    goto LABEL_7;
  v31 = *(_DWORD *)(v15 + 4 * v17 + 27668);
  if ((v31 & 6) == 6 || !v30)
    goto LABEL_7;
  if ((v31 & 2) == 0)
  {
    v32 = v105;
    v33 = (*(_BYTE *)v105 & 2) == 0;
    if ((v31 & 4) != 0)
      goto LABEL_22;
LABEL_37:
    v34 = (*v32 & 4) == 0;
    if (!v33)
      goto LABEL_39;
    goto LABEL_38;
  }
  v33 = 0;
  v32 = v105;
  if ((v31 & 4) == 0)
    goto LABEL_37;
LABEL_22:
  v34 = 0;
  if (v33)
LABEL_38:
    *(_DWORD *)v32 |= 2u;
LABEL_39:
  if (v34)
    *(_DWORD *)v32 |= 4u;
  result = sub_1C979817C(v15 + 1592, v14, v13, 1 << v25);
  if (!result)
    goto LABEL_7;
  v38 = result;
  v39 = *(_QWORD *)(result + 8);
  if (!v39)
    goto LABEL_7;
  v103 = *(_QWORD *)(result + 16);
  if (!v103)
    goto LABEL_7;
  v99 = *(_QWORD *)(result + 24);
  if (!v99)
    goto LABEL_7;
  v94 = *(_QWORD *)(result + 32);
  if (!v94)
    goto LABEL_7;
  v97 = (unsigned __int8 *)(v39 + 40);
  v89 = (unsigned __int16 *)((char *)(*a6)[12]
                           + 16 * ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 2)
                           + 16
                           * ((unint64_t)*(unsigned __int8 *)*a6 >> 2)
                           * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 2));
  v92 = *(_QWORD *)(result + 8);
  if (sub_1C9797BD0((unsigned __int8 *)(v39 + 40), v89))
  {
    if (sub_1C9797BD0((unsigned __int8 *)(v103 + 40), v89))
    {
      if (sub_1C9797BD0((unsigned __int8 *)(v99 + 40), v89))
      {
        result = sub_1C9797BD0((unsigned __int8 *)(v94 + 40), v89);
        if ((result & 1) != 0)
        {
LABEL_67:
          v42 = v105;
          *v105 &= ~2u;
          v43 = -5;
LABEL_104:
          *v42 &= v43;
          goto LABEL_7;
        }
      }
    }
  }
  v90 = (unsigned __int8 *)(v103 + 40);
  v87 = sub_1C9797B10(v97, (unsigned __int8 *)(v103 + 40), 1u);
  if (v87)
  {
    if (sub_1C9797B10((unsigned __int8 *)(v99 + 40), (unsigned __int8 *)(v94 + 40), 1u))
    {
      result = sub_1C9797B10(v97, (unsigned __int8 *)(v99 + 40), 1u);
      if (!(_DWORD)result)
      {
        v43 = -5;
        goto LABEL_103;
      }
    }
  }
  v85 = (unsigned __int8 *)(v99 + 40);
  if (sub_1C9797B10(v97, (unsigned __int8 *)(v99 + 40), 1u))
  {
    result = sub_1C9797B10(v90, (unsigned __int8 *)(v94 + 40), 1u);
    if ((v87 | result ^ 1) != 1)
    {
      v43 = -3;
LABEL_103:
      v42 = v105;
      goto LABEL_104;
    }
  }
  result = sub_1C9797B10(v97, v90, 3u);
  v40 = v92;
  if ((result & 1) == 0)
  {
    result = sub_1C9797B10(v97, v85, 3u);
    v40 = v92;
    if ((result & 1) == 0)
    {
      v41 = v97;
      v98 = (unsigned __int8 *)(v94 + 40);
      result = sub_1C9797B10(v41, (unsigned __int8 *)(v94 + 40), 3u);
      v40 = v92;
      if ((result & 1) == 0)
      {
        result = sub_1C9797B10(v90, v85, 3u);
        v40 = v92;
        if ((result & 1) == 0)
        {
          result = sub_1C9797B10(v90, v98, 3u);
          v40 = v92;
          if ((result & 1) == 0)
          {
            result = sub_1C9797B10(v85, v98, 3u);
            v40 = v92;
            if (!(_DWORD)result)
              goto LABEL_67;
          }
        }
      }
    }
  }
  if (*(_QWORD *)(v38 + 112) > **(_QWORD **)(v38 + 88)
                              + *(unsigned __int16 *)(v15 + 1154) * (unint64_t)(*(_DWORD *)(v38 + 120) >> 2)
    || (*(_BYTE *)(v40 + 136) || *(_BYTE *)(v103 + 136) || *(_BYTE *)(v99 + 136) || *(_BYTE *)(v94 + 136))
    && *(_BYTE *)(v38 + 136))
  {
    goto LABEL_67;
  }
LABEL_7:
  v26 = *v105;
  if ((*v105 & 2) == 0)
  {
    if ((v26 & 4) == 0)
      goto LABEL_9;
LABEL_28:
    if (*(_BYTE *)(v15 + 197))
      v36 = *(_BYTE *)(v15 + v17 + 27685) != 0;
    else
      v36 = 1;
    result = sub_1C97D254C(v15, v14, v13, v12, v11, a6, 2, v9, v36);
    if ((*v105 & 8) == 0)
      goto LABEL_70;
    goto LABEL_32;
  }
  if (*(_BYTE *)(v15 + 197))
    v35 = *(_BYTE *)(v15 + v17 + 27685) != 0;
  else
    v35 = 1;
  result = sub_1C97D254C(v15, v14, v13, v12, v11, a6, 1, v9, v35);
  v26 = *v105;
  if ((*v105 & 4) != 0)
    goto LABEL_28;
LABEL_9:
  if ((v26 & 8) == 0)
    goto LABEL_70;
LABEL_32:
  if (v25 >= 4 && v25 == *(unsigned __int8 *)(*(_QWORD *)(v15 + 14848) + 2112))
  {
    if (*(_BYTE *)(v15 + 197))
      v37 = *(_BYTE *)(v15 + v17 + 27685) != 0;
    else
      v37 = 1;
    result = sub_1C97D254C(v15, v14, v13, v12, v11, a6, 3, v9, v37);
  }
LABEL_70:
  if (!*(_BYTE *)(v15 + 197))
    return result;
  if (*(_BYTE *)(v15 + v17 + 27685))
    return result;
  v44 = *a6;
  if ((*((_WORD *)(*a6)[11]
        + ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 3)
        + ((unint64_t)*(unsigned __int8 *)*a6 >> 3) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 3)) & 0x70) == 0
    || *(_BYTE *)(v15 + v17 + 27664))
  {
    return result;
  }
  v100 = (_BYTE *)(v15 + v17 + 27664);
  v106 = v9;
  *((_DWORD *)v44 + 48) = 0;
  v44[21] = 0;
  v44[22] = 0;
  v44[23] = (void *)-1;
  *((_WORD *)v44 + 98) = 2;
  v45 = (*((unsigned __int16 *)(*a6)[11]
         + ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 3)
         + ((unint64_t)*(unsigned __int8 *)*a6 >> 3) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 3)) >> 4) & 7;
  v46 = 1 << (*(_BYTE *)(*(_QWORD *)(v15 + 14848) + 2113) - v12);
  v95 = v46 >> 1;
  v47 = *v11;
  v88 = v13 - *((_DWORD *)*v11 + 2);
  v84 = **v11;
  v91 = v14 - *((_DWORD *)*v11 + 1);
  v86 = *((_QWORD *)*v11 + 12);
  v93 = (_WORD *)(*((_QWORD *)*v11 + 11) + 2 * (((uint64_t)v91 >> 3) + (int)(v84 >> 3) * (uint64_t)(v88 >> 3)));
  sub_1C97C2634((_QWORD *)v15, v93, v12, (*((unsigned __int16 *)(*a6)[11]+ ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 3)+ ((unint64_t)*(unsigned __int8 *)*a6 >> 3) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 3)) >> 4) & 7, 0, v84 >> 3, *((_DWORD *)*v11 + 3));
  *((_QWORD *)v47 + 21) = 0;
  *((_DWORD *)v47 + 48) = 0;
  *((_QWORD *)v47 + 22) = 0;
  *((_QWORD *)v47 + 23) = -1;
  v48 = (v14 + (v46 >> 1));
  v101 = v13;
  v104 = v46;
  v49 = v13 + (v46 >> 1);
  *((_WORD *)v47 + 98) = 2;
  v96 = v14;
  switch(v45)
  {
    case 3:
      v58 = v13;
      v59 = v48;
      v82 = v49;
      v83 = v48;
      v50 = v95;
      sub_1C97D2F2C(v15, v96, v58, v12, v11, a6, v95, v95, 3, v106, (uint64_t)(v47 + 168), 1, 0);
      sub_1C97D2F2C(v15, v59, v58, v12, v11, a6, v50, v50, 3, v106, (uint64_t)(v47 + 168), 1, 0);
      sub_1C97D2F2C(v15, v96, v82, v12, v11, a6, v50, v50, 3, v106, (uint64_t)(v47 + 168), 1, 0);
      v80 = (uint64_t)(v47 + 168);
      HIDWORD(v79) = v106;
      LODWORD(v79) = 3;
      v51 = v15;
      v52 = v83;
      v53 = v82;
      v54 = v12;
      v55 = v11;
      v56 = a6;
      v57 = v95;
      goto LABEL_80;
    case 2:
      sub_1C97D2F2C(v15, v14, v13, v12, v11, a6, v95, v46, 2, v106, (uint64_t)(v47 + 168), 1, 0);
      v80 = (uint64_t)(v47 + 168);
      HIDWORD(v79) = v106;
      LODWORD(v79) = 2;
      v51 = v15;
      v52 = (v14 + (v46 >> 1));
      v53 = v13;
      v54 = v12;
      v55 = v11;
      v56 = a6;
      v57 = v95;
      v60 = v46;
      goto LABEL_82;
    case 1:
      v81 = v13 + (v46 >> 1);
      LODWORD(v50) = v46 >> 1;
      sub_1C97D2F2C(v15, v14, v13, v12, v11, a6, v104, v95, 1, v106, (uint64_t)(v47 + 168), 1, 0);
      v80 = (uint64_t)(v47 + 168);
      LODWORD(v79) = 1;
      HIDWORD(v79) = v106;
      v51 = v15;
      v52 = v14;
      v53 = v81;
      v54 = v12;
      v55 = v11;
      v56 = a6;
      v57 = v104;
LABEL_80:
      v60 = v50;
LABEL_82:
      sub_1C97D2F2C(v51, v52, v53, v54, v55, v56, v57, v60, v79, HIDWORD(v79), v80, 1, 0);
      break;
  }
  if (*(_BYTE *)(v15 + 196))
  {
    v61 = v101;
    if (v45)
    {
      v62 = v47 + 200;
      *((_DWORD *)v47 + 56) = 0;
      *((_QWORD *)v47 + 25) = 0;
      *((_QWORD *)v47 + 26) = 0;
      *((_QWORD *)v47 + 27) = -1;
      *((_WORD *)v47 + 114) = 2;
      sub_1C97C8C08(v15, v96, v101, v12, *v11, 1, *(_BYTE *)(v15 + 8) == 0, 0, (unsigned int *)v47 + 50);
      if (!*(_BYTE *)(v15 + 29745))
      {
        *((_DWORD *)v47 + 56) = 0;
        *v62 = 0;
        *((_QWORD *)v47 + 26) = 0;
        *((_QWORD *)v47 + 27) = -1;
        *((_WORD *)v47 + 114) = 2;
        sub_1C97CE654(v15, v96, v101, v12, *v11, (uint64_t)(v47 + 200));
      }
      v109 = 0;
      v108[0] = 0;
      v108[1] = 0;
      v108[2] = -1;
      v110 = 0;
      *((_DWORD *)v47 + 56) = 0;
      *v62 = 0;
      *((_QWORD *)v47 + 26) = 0;
      *((_QWORD *)v47 + 27) = -1;
      *((_WORD *)v47 + 114) = 0;
      sub_1C97CB514(v15, v96, v101, v12, *v11, (uint64_t)(v47 + 200), (uint64_t)v108, 0, 0);
      v107 = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 944) + 88))(*(_QWORD *)(v15 + 944));
      sub_1C97C6D7C(v15, v96, v101, *v11, 1, 0, *(_BYTE *)(v15 + 29745), 1, 0);
      v63 = *v11;
      *((_DWORD *)v63 + 4) = *((_DWORD *)*v11 + 5);
      sub_1C97CBC8C(v15, v96, v101, v12, v106, (int *)v63 + 4, &v107, v64);
      *((_DWORD *)v47 + 56) += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 944) + 80))(*(_QWORD *)(v15 + 944));
      (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 944) + 96))(*(_QWORD *)(v15 + 944));
      *((_QWORD *)v47 + 27) = ((*(unsigned __int16 *)(v15 + 2 * *((__int16 *)v47 + 114) + 1152)
                              * (unint64_t)*((unsigned int *)v47 + 56)) >> (8 * (*((_WORD *)v47 + 114) == 0)))
                            + *((_QWORD *)v47 + 25);
      v65 = *(unsigned __int8 *)(v15 + 196);
    }
    else
    {
      v65 = 1;
    }
  }
  else
  {
    v65 = 0;
    v66 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 14848) + 269);
    v67 = *(unsigned __int8 *)(v86 + 16 * (((uint64_t)v91 >> 2) + (int)(v84 >> 2) * (uint64_t)(v88 >> 2)) + 10) - 1;
    v68 = *((_DWORD *)v47 + 48) + byte_1C98587A8[3 * *(unsigned __int8 *)(*(_QWORD *)(v15 + 14840) + 58) + v67];
    *((_DWORD *)v47 + 48) = v68;
    v69 = byte_1C98587B1[12 * (v66 == v12) + 4 * v67 + (((unint64_t)(unsigned __int16)*v93 >> 4) & 7)];
    if (v66 <= v12)
      v70 = v68;
    else
      v70 = v68 + 1;
    v71 = v70 + v69;
    *((_DWORD *)v47 + 48) = v71;
    *((_QWORD *)v47 + 23) = ((*(unsigned __int16 *)(v15 + 2 * *((__int16 *)v47 + 98) + 1152) * (unint64_t)v71) >> (8 * (*((_WORD *)v47 + 98) == 0)))
                          + *((_QWORD *)v47 + 21);
    v61 = v101;
  }
  result = sub_1C97CECB4(v15, (void ***)v11, a6, v65);
  if ((_DWORD)result && !*(_BYTE *)(v15 + 196) && (int)v104 >= 8)
  {
    v72 = 0;
    v73 = (unint64_t)*(unsigned __int8 *)*a6 >> 3;
    v74 = (char *)(*a6)[11]
        + 2 * ((uint64_t)(int)(v96 - *((_DWORD *)*a6 + 1)) >> 3)
        + 2 * (int)v73 * (uint64_t)((int)(v61 - *((_DWORD *)*a6 + 2)) >> 3);
    v75 = 2 * v73;
    v76 = v74;
    do
    {
      v77 = v76;
      v78 = v104 >> 3;
      do
      {
        *v77++ = *v74;
        --v78;
      }
      while (v78);
      ++v72;
      v76 = (_WORD *)((char *)v76 + v75);
    }
    while (v72 != v104 >> 3);
  }
  *v100 = 1;
  return result;
}

BOOL sub_1C97CFA08(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117) >> a4;
  if ((a5 & 0xF0) != 0)
  {
    v6 = *(_QWORD *)(a1 + 14840);
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_BYTE *)(v7 + 2113);
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v7 + 2117) - 1) & (a2 - v5)) >> (v8 - a4))
                    + (((*(unsigned __int8 *)(v7 + 2117) - 1) & a3) >> (v8 - a4)) * byte_1C9857D2C[a4]
                    + *(_DWORD *)(v6 + 5408) * (((a2 - v5) >> v8) + (a3 >> v8) * *(_DWORD *)(v7 + 2120))
                    + byte_1C9857D28[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0x1E00) != 0)
  {
    v9 = *(_QWORD *)(a1 + 14840);
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_BYTE *)(v10 + 2113);
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v10 + 2117) - 1) & a2) >> (v11 - a4))
                    + (((*(unsigned __int8 *)(v10 + 2117) - 1) & (a3 - v5)) >> (v11 - a4)) * byte_1C9857D2C[a4]
                    + *(_DWORD *)(v9 + 5408) * ((a2 >> v11) + ((a3 - v5) >> v11) * *(_DWORD *)(v10 + 2120))
                    + byte_1C9857D28[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0x1E000) != 0)
  {
    v12 = *(_QWORD *)(a1 + 14840);
    v13 = *(_QWORD *)(v12 + 16);
    v14 = *(_BYTE *)(v13 + 2113);
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v13 + 2117) - 1) & (v5 + a2)) >> (v14 - a4))
                    + (((*(unsigned __int8 *)(v13 + 2117) - 1) & (a3 - v5)) >> (v14 - a4)) * byte_1C9857D2C[a4]
                    + *(_DWORD *)(v12 + 5408) * (((v5 + a2) >> v14) + ((a3 - v5) >> v14) * *(_DWORD *)(v13 + 2120))
                    + byte_1C9857D28[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0x100) != 0)
  {
    v15 = *(_QWORD *)(a1 + 14840);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = *(_BYTE *)(v16 + 2113);
    if ((*(_BYTE *)(*(_QWORD *)(v15 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v16 + 2117) - 1) & (a2 - v5)) >> (v17 - a4))
                    + (((*(unsigned __int8 *)(v16 + 2117) - 1) & (a3 - v5)) >> (v17 - a4)) * byte_1C9857D2C[a4]
                    + *(_DWORD *)(v15 + 5408) * (((a2 - v5) >> v17) + ((a3 - v5) >> v17) * *(_DWORD *)(v16 + 2120))
                    + byte_1C9857D28[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0xF) == 0)
    return 0;
  v19 = *(_QWORD *)(a1 + 14840);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_BYTE *)(v20 + 2113);
  return (*(_BYTE *)(*(_QWORD *)(v19 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v20 + 2117) - 1) & (a2 - v5)) >> (v21 - a4))
                    + (((*(unsigned __int8 *)(v20 + 2117) - 1) & (v5 + a3)) >> (v21 - a4)) * byte_1C9857D2C[a4]
                    + *(_DWORD *)(v19 + 5408) * (((a2 - v5) >> v21) + ((v5 + a3) >> v21) * *(_DWORD *)(v20 + 2120))
                    + byte_1C9857D28[a4])
                   + 26) & 0x98) == 136;
}

BOOL sub_1C97CFC98(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v12;
  _BOOL8 result;

  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117) >> a4;
  if (((a6 & 0xF0) == 0 || (result = sub_1C97D2298(a1, a2, a3, a4, a2 - v12, a3, a5)))
    && ((a6 & 0x1E00) == 0 || (result = sub_1C97D2298(a1, a2, a3, a4, a2, a3 - v12, a5)))
    && ((a6 & 0x1E000) == 0 || (result = sub_1C97D2298(a1, a2, a3, a4, v12 + a2, a3 - v12, a5)))
    && ((a6 & 0x100) == 0 || (result = sub_1C97D2298(a1, a2, a3, a4, a2 - v12, a3 - v12, a5))))
  {
    if ((a6 & 0xF) == 0)
      return 1;
    result = sub_1C97D2298(a1, a2, a3, a4, a2 - v12, v12 + a3, a5);
    if (result)
      return 1;
  }
  return result;
}

void sub_1C97CFDC8(_QWORD *a1, int a2, int a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  _WORD *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  char v31;
  uint64_t *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  BOOL v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _BYTE *v101;
  void (*v102)(unsigned __int8 *, uint64_t, uint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  _BOOL4 v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  BOOL v131;
  uint64_t v133;
  int v134;
  uint64_t v135;
  _BOOL4 v137;
  int v138;
  int v139;
  _BOOL4 v140;
  unsigned int v141;
  uint64_t v142;
  _BOOL4 v143;
  BOOL v144;
  char v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int8 v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  _BOOL4 v155;
  int v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  uint64_t v165;
  char v166;
  char v167;
  char v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  _BOOL4 v173;
  int v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  int *v188;
  int v189;
  uint64_t v190;
  int64x2_t *v191;
  int64x2_t *v192;
  int64x2_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (**v199)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v200)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v201)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  int v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned __int8 *v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  __int16 *v224;
  __int16 v225;
  int v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  signed int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  int v259;
  signed int v260;
  signed int v261;
  signed int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  _WORD *v277;
  _WORD *v278;
  uint64_t v279;
  unsigned __int8 *v280;
  __n128 v281;
  unsigned __int8 *v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  int v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  char v291;
  unsigned __int8 *v292;
  unint64_t v293;
  void **v294;
  unsigned int v295;
  int v296;
  unsigned __int8 *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  int v302;
  int v303;
  char *v304;
  _BYTE *v305;
  uint64_t v306;
  char v307;
  int v308;
  char *v309;
  _BYTE *v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  unsigned __int8 *v316;
  _BYTE *v317;
  uint64_t v318;
  unsigned int v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  unsigned __int8 *v323;
  _BYTE *v324;
  unsigned int v325;
  __int16 *v326;
  __int16 v327;
  unsigned __int8 *v328;
  unsigned __int8 *v329;
  unsigned __int8 **v330;
  unsigned __int8 *v331;
  unsigned __int8 *v332;
  unsigned int v333;
  int v335;
  int v336;
  _QWORD *v337;
  uint64_t v338;
  signed int v339;
  int v340;
  int v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  char v347;
  _BOOL4 v348;
  uint64_t v349;
  void **v350;
  signed int v351;
  unsigned int v352;
  _BOOL4 v353;
  unsigned int v354;
  _WORD *v355;
  unsigned int *v356;
  int v357;
  char v358;
  uint64_t v359;
  unsigned int v360;
  int *v361;
  uint64_t v362;
  int v363;
  int v364;
  uint64_t v365;
  unint64_t v366;
  int v367;
  _BOOL4 v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int v372;
  uint64_t (*v373)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v374)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  int v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  uint64_t v385;
  signed int v386;
  uint64_t v387;
  int v388;
  unsigned __int8 *v389;
  uint64_t v390;
  unsigned int v391;
  unsigned __int8 *v392;
  _QWORD v393[3];
  int v394;
  __int16 v395;
  _QWORD v396[3];
  unsigned int v397;
  __int16 v398;
  _QWORD v399[3];
  int v400;
  __int16 v401;
  _QWORD v402[3];
  int v403;
  __int16 v404;
  int v405;
  char v406;
  int v407;
  char v408;
  _DWORD v409[2];
  int v410;
  _BYTE v411[12];
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  __int128 v415;
  unint64_t v416;
  int v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  _QWORD v422[3];
  int v423;
  __int16 v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  __int16 v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  __int16 v434;
  _BYTE v435[160];
  uint64_t v436;

  v8 = a8;
  v11 = a3;
  v12 = a2;
  v13 = (unsigned __int8 *)a1;
  v436 = *MEMORY[0x1E0C80C00];
  v356 = (unsigned int *)(a1 + 3054);
  v14 = (unint64_t)**a5 >> 3;
  v15 = (_WORD *)(*((_QWORD *)*a5 + 11)
                + 2
                * (((uint64_t)(a2 - *((_DWORD *)*a5 + 1)) >> 3) + (int)v14 * (uint64_t)((a3 - *((_DWORD *)*a5 + 2)) >> 3)));
  sub_1C97C2634(a1, v15, a4, a8, 0, v14, *((_DWORD *)*a5 + 3));
  v16 = *((_QWORD *)*a5 + 12)
      + 16
      * (((uint64_t)(v12 - *((_DWORD *)*a5 + 1)) >> 2)
       + ((unint64_t)**a5 >> 2) * ((v11 - *((_DWORD *)*a5 + 2)) >> 2));
  v17 = 1;
  *(_BYTE *)(v16 + 10) = 1;
  *(_BYTE *)(v16 + 11) &= ~0x40u;
  v18 = **a5;
  if (v18 >= 4)
  {
    v19 = 0;
    v20 = v18 >> 2;
    v21 = (_QWORD *)v16;
    do
    {
      v22 = v21;
      v23 = v20;
      do
      {
        v24 = *(_QWORD *)v16;
        *(_QWORD *)((char *)v22 + 6) = *(_QWORD *)(v16 + 6);
        *v22 = v24;
        v22 += 2;
        --v23;
      }
      while (v23);
      ++v19;
      v21 += 2 * v20;
    }
    while (v19 != v20);
    v17 = *(unsigned __int8 *)(v16 + 10);
  }
  v361 = (int *)(v13 + 14912);
  sub_1C97F1844((uint64_t)(v13 + 14912), (uint64_t)v13, v12, v11, a4, v17, ((unsigned __int16)*v15 >> 4) & 7);
  if (v13[198])
    v25 = (*(_DWORD *)&v13[4 * a4 + 27648] >> 12) & 1;
  else
    LOBYTE(v25) = 0;
  v26 = 0;
  *((_BYTE *)v356 + 48) = v25;
  v27 = *a5;
  *((_DWORD *)v27 + 48) = 0;
  *((_QWORD *)v27 + 21) = 0;
  *((_QWORD *)v27 + 22) = 0;
  *((_QWORD *)v27 + 23) = -1;
  *((_WORD *)v27 + 98) = 2;
  v28 = *a5;
  *((_DWORD *)v28 + 56) = 0;
  *((_QWORD *)v28 + 25) = 0;
  *((_QWORD *)v28 + 26) = 0;
  *((_QWORD *)v28 + 27) = -1;
  *((_WORD *)v28 + 114) = 0;
  v29 = *((_QWORD *)v13 + 1856);
  LODWORD(v28) = byte_1C98587B1[12 * (*(unsigned __int8 *)(v29 + 269) == a4) + v8]
               + byte_1C98587A8[3 * *(unsigned __int8 *)(*((_QWORD *)v13 + 1855) + 58)];
  v30 = *a5;
  *((_DWORD *)v30 + 48) = *((_DWORD *)*a5 + 48) + (_DWORD)v28;
  *((_DWORD *)v30 + 56) += (_DWORD)v28 << 8;
  v350 = *a6;
  v31 = 1;
  v390 = *(unsigned __int8 *)(v29 + 2113) - a4 - ((_DWORD)v8 == 3);
  v343 = *(unsigned __int8 *)(*((_QWORD *)v13 + 121) + 497);
  v331 = &v13[8 * a4 + 24712];
  *((_QWORD *)v30 + 18) = *(_QWORD *)v331;
  v420 = 0u;
  v421 = 0u;
  v418 = 0u;
  v419 = 0u;
  v417 = 0;
  v416 = 0;
  *((_QWORD *)&v415 + 1) = -1;
  *(_QWORD *)&v415 = -1;
  v414 = 0;
  v413 = 0;
  v412 = 0;
  *(_DWORD *)&v411[8] = 0;
  v410 = v12;
  v336 = (1 << v390) + v12;
  *(_QWORD *)v411 = v336;
  v391 = 1 << v390;
  v409[0] = v11;
  v335 = (1 << v390) + v11;
  v409[1] = v335;
  v32 = (uint64_t *)(v30 + 128);
  v33 = v13 + 24536;
  v34 = v356[24];
  do
  {
    v35 = v409[v26];
    v36 = v35 < v11;
    v37 = (v35 - v11) >> 2;
    if (v36)
      v37 = -1;
    if (v36)
      v38 = (uint64_t *)(v30 + 128);
    else
      v38 = (uint64_t *)(v30 + 120);
    v39 = *v38;
    v40 = v39 + 16 * v37;
    *(&v413 + v26) = v40;
    if (!v39 || *(_BYTE *)(v40 + 10) != 1)
      *(&v413 + v26) = (uint64_t)v33;
    if (v34 == v11)
    {
      v41 = (uint64_t *)&v411[8 * v26 + 4];
LABEL_27:
      *v41 = (uint64_t)v33;
      goto LABEL_28;
    }
    v42 = *(_DWORD *)&v411[4 * v26 - 4];
    v36 = v42 < v12;
    v43 = (v42 - v12) >> 2;
    if (v36)
      v43 = -1;
    v44 = *v32;
    v45 = *v32 + 16 * v43;
    v41 = (uint64_t *)&v411[8 * v26 + 4];
    *v41 = v45;
    if (!v44 || *(_BYTE *)(v45 + 10) != 1)
      goto LABEL_27;
LABEL_28:
    v46 = ((_DWORD)v8 == 3) & v31;
    v26 = 1;
    v31 = 0;
  }
  while ((v46 & 1) != 0);
  *(_QWORD *)&v418 = v413;
  *((_QWORD *)&v418 + 1) = *(_QWORD *)&v411[4];
  v330 = a5;
  if ((_DWORD)v8 == 3)
  {
    v47 = *((_DWORD *)v30 + 1);
    v48 = *((_DWORD *)v30 + 2);
    v49 = *((_QWORD *)v30 + 12);
    v50 = (v11 - v48) >> 2;
    v51 = (unint64_t)*v30 >> 2;
    v52 = (uint64_t)(v12 - v47) >> 2;
    *(_QWORD *)&v419 = v49 + 16 * (v52 + (int)v51 * (uint64_t)v50);
    *((_QWORD *)&v419 + 1) = v412;
    *(_QWORD *)&v420 = v414;
    *((_QWORD *)&v420 + 1) = v419;
    *(_QWORD *)&v421 = v49 + 16 * (v52 + (int)v51 * (uint64_t)((v335 - v48) >> 2));
    *((_QWORD *)&v421 + 1) = v49 + 16 * (((uint64_t)(v336 - v47) >> 2) + (int)v51 * (uint64_t)v50);
    v53 = 4;
  }
  else
  {
    v53 = 1;
  }
  v338 = v53;
  v54 = 0;
  v347 = 0;
  v353 = v8 == 3;
  v342 = (int)v390 - 2;
  v341 = **(unsigned __int8 **)(*((_QWORD *)v13 + 1855) + 1568);
  v345 = (v390 - 3);
  v354 = v390 == 2;
  if ((_DWORD)v390 == 2)
    v55 = 2;
  else
    v55 = 8;
  v359 = v55;
  v333 = v55 >> 1;
  v344 = (uint64_t)(v13 + 14976);
  LODWORD(v55) = (int)v391 >> 2;
  if ((int)v391 >> 2 <= 1)
    v55 = 1;
  else
    v55 = v55;
  v365 = v55;
  v337 = v30 + 168;
  v332 = v13 + 14978;
  v352 = v8;
  v392 = v13;
  v389 = v30;
  v340 = v12;
  v339 = v11;
  do
  {
    if (v343)
    {
      v56 = **((unsigned __int8 **)&v418 + 2 * v54);
      v57 = **(unsigned __int8 **)((char *)&v418 + ((16 * v54) | 8));
      v415 = xmmword_1C9862EC0;
      if ((v56 & 1) != 0)
        v58 = 0;
      else
        v58 = v56;
      if (v56 <= 1 || (_DWORD)v8 != 3)
        v58 = v56;
      if ((v57 & 1) != 0)
        v59 = 0;
      else
        v59 = v57;
      if (v57 > 1 && (_DWORD)v8 == 3)
        v60 = v59;
      else
        v60 = v57;
      if (v58 < 2)
      {
        v61 = 2;
      }
      else
      {
        DWORD2(v415) = v58;
        v61 = 3;
      }
      if (v60 >= 2 && v58 != v60)
        *(_DWORD *)((unint64_t)&v415 | (4 * v61)) = v60;
    }
    else
    {
      v56 = **((unsigned __int8 **)&v418 + 2 * v54);
      v57 = **(unsigned __int8 **)((char *)&v418 + ((16 * v54) | 8));
    }
    if (v56 == v57)
    {
      if (v57 < 2)
      {
        v416 = 0x100000000;
        v63 = 26;
        v57 = 1;
      }
      else
      {
        v57 = (((_BYTE)v56 + 29) & 0x1F) + 2;
        v416 = __PAIR64__(v57, v56);
        v63 = (((_BYTE)v56 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      v416 = __PAIR64__(v57, v56);
      if (v57 + v56 > 1)
        v64 = 1;
      else
        v64 = 26;
      if (v56)
        v65 = v57 == 0;
      else
        v65 = 1;
      if (v65)
        v63 = v64;
      else
        v63 = 0;
    }
    v357 = v63;
    v417 = v63;
    v360 = a7;
    if ((_DWORD)v8 == 3)
    {
      *((_BYTE *)v356 + 362) = 0;
      v66 = v57;
      v67 = sub_1C97C3078(a7, v54, v336 < *((_DWORD *)v13 + 4), v335 < *((_DWORD *)v13 + 5));
      v57 = v66;
      v360 = v67;
    }
    v68 = *((_QWORD *)v13 + 1855);
    if (v341 != 255)
    {
      if (*(_BYTE *)(v68 + 58) != 1)
        goto LABEL_85;
      v69 = *(_QWORD *)(v68 + 1568);
      v70 = *((_QWORD *)v13 + 1856);
      v72 = *(_DWORD *)(v69 + 8);
      v71 = *(_DWORD *)(v69 + 12);
      v73 = *(_DWORD *)(v70 + 204);
      v74 = *(_DWORD *)(v70 + 208);
      v75 = *(unsigned __int8 *)(v70 + 2113) - a4;
      v76 = v72 < v73 && v71 < v74;
      if (!v76 || v75 < 4)
      {
LABEL_85:
        v347 = 0;
      }
      else
      {
        v415 = xmmword_1C9862EC0;
        v347 = 1;
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(v68 + 4760) + 96) == 36)
    {
      v415 = xmmword_1C9862BD0;
      v347 = 1;
    }
    v79 = *((int *)v30 + 1);
    v78 = *((int *)v30 + 2);
    v80 = *v30;
    v82 = *((_QWORD *)v30 + 11);
    v81 = *((_QWORD *)v30 + 12);
    v379 = v30[1];
    v83 = (unsigned __int8 *)*((_QWORD *)v30 + 17);
    v387 = *v83;
    v85 = (uint64_t *)*((_QWORD *)v30 + 3);
    v84 = *((_QWORD *)v30 + 4);
    v86 = *((int *)v85 + 4);
    v87 = *v85;
    v88 = (uint64_t *)*((_QWORD *)v83 + 7);
    v89 = *((_QWORD *)v83 + 8);
    v90 = *((int *)v88 + 4);
    v91 = *v88;
    v92 = (_BYTE *)*((_QWORD *)v13 + 3049);
    if (v92[206] == 1)
      v93 = 4;
    else
      v93 = 2;
    v377 = v93;
    v94 = v92[497];
    v95 = (unsigned __int8 *)*((_QWORD *)v13 + 3050);
    v381 = *v95;
    if (*((_BYTE *)v356 + 48))
    {
      v96 = *((_QWORD *)v13 + 3048);
      v368 = *((_DWORD *)v13 + 3728) == *(unsigned __int8 *)(v96 + 2112) && *((_DWORD *)v13 + 3730) == 0;
    }
    else
    {
      v368 = 0;
      v96 = *((_QWORD *)v13 + 3048);
    }
    v371 = (char)v92[501];
    v406 = -1;
    v405 = -1;
    v351 = v57;
    if (*(_BYTE *)(v96 + 273))
      v348 = *((_DWORD *)v95 + 1) > 2;
    else
      v348 = 0;
    v97 = 0;
    v369 = (v54 >> 1 << v390) + v11;
    v370 = ((v54 & 1) << v390) + v12;
    v98 = (int)v370 - v79;
    v99 = (int)v369 - v78;
    v355 = (_WORD *)(v82 + 2 * (((uint64_t)(int)v98 >> 3) + (int)(v80 >> 3) * (uint64_t)((int)v99 >> 3)));
    v100 = (_QWORD *)(v81 + 16 * (((uint64_t)(int)v98 >> 2) + (int)(v80 >> 2) * (uint64_t)((int)v99 >> 2)));
    v376 = v87 + (v98 + v379 * v99 + v84) * v86;
    v385 = v91 + (v89 + v98 + v387 * v99) * v90;
    do
    {
      v101 = &v435[v97];
      *((_DWORD *)v101 + 6) = 0;
      *(_QWORD *)v101 = 0;
      *((_QWORD *)v101 + 1) = 0;
      *((_QWORD *)v101 + 2) = -1;
      v97 += 32;
      *((_WORD *)v101 + 14) = 2;
    }
    while (v97 != 160);
    v423 = 0;
    v422[1] = 0;
    v422[0] = 0;
    v422[2] = -1;
    v424 = 2;
    v428 = 0;
    v425 = 0;
    v426 = 0;
    v427 = -1;
    v429 = 2;
    v433 = 0;
    v430 = 0;
    v431 = 0;
    v432 = -1;
    v434 = 2;
    if (!v95[24794])
    {
      v102 = (void (*)(unsigned __int8 *, uint64_t, uint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD, uint64_t, _QWORD))*((_QWORD *)v95 + 3721);
      v103 = *((_QWORD *)v95 + 3722);
      v104 = &v95[v103 >> 1];
      if ((v103 & 1) != 0)
        v102 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v104 + v102);
      v102(v104, v370, v369, *v356, v30, v8, v360, v390, *((_QWORD *)v30 + 19));
    }
    if (v345 <= 2)
      (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)v13 + 3047) + 8 * v345 + 2312))(*((_QWORD *)v30 + 19), *((_QWORD *)v30 + 20));
    if (*(_BYTE *)(*((_QWORD *)v13 + 3049) + 525))
      v367 = 2 * ((*((unsigned int (**)(void))v13 + 3015))() < 0xA);
    else
      v367 = 0;
    v349 = v54;
    if ((_DWORD)v94)
    {
      v105 = 0;
      v106 = 0;
      while (1)
      {
        v107 = *((_DWORD *)&v415 + v105);
        if (v107 < 0)
          break;
        v106 |= 1 << v107;
        if (++v105 == 4)
        {
          v373 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v13 + 3051)
                                                                                              + 8 * v342
                                                                                              + 256);
          LODWORD(v105) = 4;
          goto LABEL_160;
        }
      }
      v373 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v13 + 3051)
                                                                                          + 8 * v342
                                                                                          + 256);
      if (!(_DWORD)v105)
      {
        v372 = 0;
        v121 = 0;
        v366 = 0;
        v375 = 0;
        v383 = -1;
        goto LABEL_192;
      }
LABEL_160:
      v133 = 0;
      v375 = 0;
      v366 = 0;
      v121 = 0;
      v372 = 0;
      v362 = v105;
      v383 = -1;
      do
      {
        v134 = *((_DWORD *)&v415 + v133);
        v135 = *((_QWORD *)v392 + 3047);
        if (v134 != 1 && *(_BYTE *)(v135 + 2816) == 0)
        {
          v138 = 10 - v134;
          if (v134 >= 10)
            v138 = v134 - 10;
          v139 = 26 - v134;
          if (v134 >= 26)
            v139 = v134 - 26;
          if (v138 >= v139)
            v138 = v139;
          v137 = v138 > byte_1C985A0AA[(int)v390];
        }
        else
        {
          v137 = 0;
        }
        v140 = v367 != 0;
        sub_1C975E4BC(v135 + 2280, *((unsigned int *)&v415 + v133), v390, *(_QWORD *)&v389[8 * v137 + 152], v387, v385);
        v141 = v373(v391, v391, v376, v379, v385, v387);
        v142 = 0;
        v143 = v134 == 0;
        v144 = !v140 || !v143;
        if (v140 && v143)
          v145 = v367;
        else
          v145 = 0;
        v146 = (unint64_t)v141 >> v145;
        v147 = v375;
        if (!v144)
          v147 = v141;
        v375 = v147;
        while (*((_DWORD *)&v416 + v142) != v134)
        {
          if (++v142 == 3)
          {
            v148 = v121;
            v149 = 6;
            goto LABEL_185;
          }
        }
        v148 = v121;
        if ((_DWORD)v142)
          v149 = 3;
        else
          v149 = 2;
LABEL_185:
        v150 = v146
             + *(unsigned __int16 *)(*((_QWORD *)v392 + 3051) + 2 * v377 + 152) * (unint64_t)v149;
        if (v381)
        {
          v402[0] = v146;
          v402[1] = 0;
          v402[2] = v150;
          v403 = v149;
          v404 = 2;
          sub_1C97F47BC((uint64_t)v402, v134, v371, (uint64_t)v435, &v405);
        }
        if (v150 < v383)
        {
          if (v368)
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v392 + 3050) + 29752))(v391, v391, v387, v385);
          v372 = v134;
          v148 = v149;
          v383 = v150;
          v366 = v146;
        }
        ++v133;
        v121 = v148;
      }
      while (v133 != v362);
LABEL_192:
      if ((v347 & 1) != 0)
      {
        v151 = 0;
        v13 = v392;
      }
      else
      {
        v151 = 0;
        v152 = 2;
        v153 = 2;
        v13 = v392;
        do
        {
          if (((v106 >> v152) & 1) == 0)
          {
            v154 = *((_QWORD *)v13 + 3047);
            if (*(_BYTE *)(v154 + 2816))
            {
              v155 = 0;
            }
            else
            {
              v156 = 10 - v153;
              if (v152 >= 0xA)
                v156 = v152 - 10;
              v157 = 26 - v153;
              if (v152 >= 0x1A)
                v157 = v152 - 26;
              if (v156 >= v157)
                v156 = v157;
              v155 = v156 > byte_1C985A0AA[(int)v390];
            }
            sub_1C975E4BC(v154 + 2280, v152, v390, *(_QWORD *)&v389[8 * v155 + 152], v387, v385);
            v158 = v373(v391, v391, v376, v379, v385, v387);
            v159 = 0;
            v160 = v158;
            while (v152 != *((_DWORD *)&v416 + v159))
            {
              if (++v159 == 3)
              {
                v161 = v121;
                v162 = 6;
                goto LABEL_212;
              }
            }
            v161 = v121;
            if ((_DWORD)v159)
              v162 = 3;
            else
              v162 = 2;
LABEL_212:
            v163 = v158
                 + *(unsigned __int16 *)(*((_QWORD *)v392 + 3051) + 2 * v377 + 152)
                 * (unint64_t)v162;
            if (v381)
            {
              v399[0] = v158;
              v399[1] = 0;
              v399[2] = v163;
              v400 = v162;
              v401 = 2;
              sub_1C97F47BC((uint64_t)v399, v152, v371, (uint64_t)v435, &v405);
            }
            if (v163 < v383)
            {
              if (v368)
                (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v392 + 3050) + 29752))(v391, v391, v387, v385);
              v372 = v152;
              v161 = v162;
              v383 = v163;
              v366 = v160;
            }
            v151 |= v152 == 34;
            v13 = v392;
            v121 = v161;
          }
          v152 += v359;
          v153 += v359;
        }
        while (v152 < 0x23);
      }
      if (v372 >= 2 && (int)v391 >= 5)
      {
        v164 = v333;
        if (v333 > v354)
        {
          v363 = v121;
          do
          {
            v165 = 0;
            v166 = v164 + v372;
            if ((int)(v164 + v372) >= 34)
              v166 = 34;
            v358 = v166;
            LOBYTE(v407) = v166;
            v167 = v372 - v164;
            if ((int)(v372 - v164) <= 2)
              v167 = 2;
            BYTE1(v407) = v167;
            v168 = 1;
            do
            {
              v169 = v168;
              v170 = *((char *)&v407 + v165);
              if (((v106 >> *((_BYTE *)&v407 + v165)) & 1) == 0
                && (_DWORD)v170 != 2
                && (v151 & ((_DWORD)v170 == 34)) == 0)
              {
                v171 = *((_QWORD *)v392 + 3047);
                if ((_DWORD)v170 != 1 && *(_BYTE *)(v171 + 2816) == 0)
                {
                  v174 = 10 - v170;
                  if ((int)v170 >= 10)
                    v174 = v170 - 10;
                  v175 = 26 - v170;
                  if ((int)v170 >= 26)
                    v175 = v170 - 26;
                  if (v174 >= v175)
                    v174 = v175;
                  v173 = v174 > byte_1C985A0AA[(int)v390];
                }
                else
                {
                  v173 = 0;
                }
                sub_1C975E4BC(v171 + 2280, v170, v390, *(_QWORD *)&v389[8 * v173 + 152], v387, v385);
                v176 = v373(v391, v391, v376, v379, v385, v387);
                v177 = 0;
                v178 = v176;
                while (*((_DWORD *)&v416 + v177) != (_DWORD)v170)
                {
                  if (++v177 == 3)
                  {
                    v179 = 6;
                    goto LABEL_253;
                  }
                }
                if ((_DWORD)v177)
                  v179 = 3;
                else
                  v179 = 2;
LABEL_253:
                v180 = v176 + *(unsigned __int16 *)(*((_QWORD *)v392 + 3051) + 2 * v377 + 152) * (unint64_t)v179;
                if (v381)
                {
                  v396[0] = v176;
                  v396[1] = 0;
                  v396[2] = v180;
                  v397 = v179;
                  v398 = 2;
                  sub_1C97F47BC((uint64_t)v396, v170, v371, (uint64_t)v435, &v405);
                }
                if (v180 < v383)
                {
                  if (v368)
                    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v392 + 3050) + 29752))(v391, v391, v387, v385);
                  v372 = v170;
                  v363 = v179;
                  v383 = v180;
                  v366 = v178;
                }
              }
              v168 = 0;
              v165 = 1;
            }
            while ((v169 & 1) != 0);
            v151 |= v358 == 34;
            v164 >>= 1;
          }
          while (v164 > v354);
          v13 = v392;
          LODWORD(v121) = v363;
        }
      }
      v130 = v366;
    }
    else
    {
      v108 = 0;
      v372 = 0;
      v109 = 0;
      v374 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v13 + 3051)
                                                                                          + 8 * v342
                                                                                          + 256);
      v375 = 0;
      v110 = -1;
      v111 = 1;
      do
      {
        v112 = 0;
        v113 = *((_QWORD *)v13 + 3047);
        v382 = v108;
        if ((_DWORD)v109 != 1 && !*(_BYTE *)(v113 + 2816))
        {
          v114 = 10 - v109;
          if ((int)v109 >= 10)
            v114 = v109 - 10;
          v115 = 26 - v109;
          if ((int)v109 >= 26)
            v115 = v109 - 26;
          if (v114 >= v115)
            v114 = v115;
          v112 = v114 > byte_1C985A0AA[(int)v390];
        }
        sub_1C975E4BC(v113 + 2280, v109, v390, *(_QWORD *)&v389[8 * v112 + 152], v387, v385);
        v116 = v374(v391, v391, v376, v379, v385, v387);
        v117 = 0;
        v118 = v367;
        if (v367 == 0 || (_DWORD)v109 != 0)
          v118 = 0;
        v119 = (unint64_t)v116 >> v118;
        v120 = v375;
        if (v367 != 0 && (_DWORD)v109 == 0)
          v120 = v116;
        v375 = v120;
        while (*((_DWORD *)&v416 + v117) != (_DWORD)v109)
        {
          if (++v117 == 3)
          {
            v121 = 6;
            goto LABEL_136;
          }
        }
        if ((_DWORD)v117)
          v121 = 3;
        else
          v121 = 2;
LABEL_136:
        v122 = *((_QWORD *)v13 + 3051);
        v123 = v119 + *(unsigned __int16 *)(v122 + 2 * v377 + 152) * (unint64_t)v121;
        if (v381)
        {
          v393[0] = v119;
          v393[1] = 0;
          v393[2] = v123;
          v394 = v121;
          v395 = 2;
          sub_1C97F47BC((uint64_t)v393, v109, v371, (uint64_t)v435, &v405);
        }
        v124 = *((_QWORD *)v392 + 3050);
        v125 = *(unsigned __int8 *)(v124 + 196);
        if (*(_BYTE *)(v124 + 196))
        {
          v126 = 0;
          while ((_DWORD)v109 != *((_DWORD *)&v416 + v126))
          {
            if (++v126 == 3)
              goto LABEL_144;
          }
          v127 = &v422[4 * v126];
          v128 = *v127 + v119;
          *v127 = v128;
          v129 = *((_DWORD *)v127 + 6) + v121;
          *((_DWORD *)v127 + 6) = v129;
          v127[2] = ((*(unsigned __int16 *)(v122 + 2 * *((__int16 *)v127 + 14) + 152) * (unint64_t)v129) >> (8 * (*((_WORD *)v127 + 14) == 0)))
                  + v128;
        }
LABEL_144:
        if (v123 >= v110)
        {
          v121 = v94;
          v123 = v110;
          v130 = v382;
        }
        else
        {
          if (v368)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v124 + 29752))(v391, v391, v387, v385);
            v125 = *(unsigned __int8 *)(*((_QWORD *)v392 + 3050) + 196);
          }
          v372 = v109;
          v130 = v119;
        }
        if (v125)
          v131 = 0;
        else
          v131 = (_DWORD)v109 == 2;
        if (v131 && (_DWORD)v390 == 2)
          v111 = 2;
        v109 = (v111 + v109);
        v108 = v130;
        v110 = v123;
        v94 = v121;
        v13 = v392;
      }
      while ((int)v109 < 35);
    }
    v181 = v130;
    v364 = v121;
    v8 = v352;
    if (*(_BYTE *)(*((_QWORD *)v13 + 3050) + 196))
    {
      v182 = 0;
      v30 = v389;
      v183 = v353;
      v184 = v344;
      v185 = v371;
      do
      {
        v186 = *((_DWORD *)&v416 + v182);
        if (v185 < 1)
        {
LABEL_268:
          *((_BYTE *)&v405 + v185) = v186;
          v190 = *((_QWORD *)v13 + 3051);
          v191 = (int64x2_t *)&v435[32 * v185];
          v192 = (int64x2_t *)&v422[4 * v182];
          v193 = vaddq_s64(*v191, *v192);
          *v191 = v193;
          LODWORD(v192) = v191[1].i32[2] + v192[1].i32[2];
          v191[1].i32[2] = (int)v192;
          v191[1].i64[0] = ((*(unsigned __int16 *)(v190 + 2 * v191[1].i16[6] + 152)
                           * (unint64_t)v192) >> (8 * (v191[1].i16[6] == 0)))
                         + v193.i64[0];
          ++v185;
        }
        else
        {
          v187 = v185;
          v188 = &v405;
          while (1)
          {
            v189 = *(unsigned __int8 *)v188;
            v188 = (int *)((char *)v188 + 1);
            if (v186 == v189)
              break;
            if (!--v187)
              goto LABEL_268;
          }
        }
        ++v182;
      }
      while (v182 != 3);
    }
    else
    {
      v30 = v389;
      v183 = v353;
      v184 = v344;
      v185 = v371;
    }
    if (v368)
    {
      v194 = *((_DWORD *)v13 + 3728);
      v195 = (int)v370 - (uint64_t)*((int *)v30 + 1);
      v196 = (int)v369 - (uint64_t)*((int *)v30 + 2);
      v198 = *((_QWORD *)v13 + 3047) + 8 * (v194 - 2);
      v199 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v198 + 2896);
      v200 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v198 + 3136);
      if ((*(_WORD *)(*((_QWORD *)v30 + 11)
                     + 2 * (((uint64_t)(int)v195 >> 3) + ((unint64_t)*v30 >> 3) * ((int)v196 >> 3))) & 0x100) != 0)
        v201 = v200;
      else
        v201 = v199;
      v197 = v30[1];
      (*v201)(**((_QWORD **)v30 + 3) + (v195 + v196 * v197 + *((_QWORD *)v30 + 4)) * *(int *)(*((_QWORD *)v30 + 3) + 16), v197, **((_QWORD **)v30 + 7) + (v195 + v196 * v197 + *((_QWORD *)v30 + 8)) * *(int *)(*((_QWORD *)v30 + 7) + 16), v197, v184);
      v202 = *((_QWORD *)v13 + 3050);
      v203 = *v356;
      v204 = *(_BYTE *)(*(_QWORD *)(v202 + 14848) + 2113) - *v356;
      v205 = (1 << v204);
      if ((int)v205 < 2)
      {
        v207 = 0;
      }
      else
      {
        v206 = 0;
        v207 = 0;
        do
        {
          v208 = *(__int16 *)&v332[2 * v206];
          if (v208 < 0)
            v208 = -v208;
          v209 = v207 + v208;
          v210 = *(__int16 *)(v184 + 2 * (int)((_DWORD)++v206 << v204));
          if (v210 < 0)
            v210 = -v210;
          v207 = v209 + v210;
        }
        while (v205 - 1 != v206);
        if ((int)v205 >= 4)
        {
          v211 = v205 >> 1;
          v212 = 1;
          do
          {
            v213 = &v332[2 * (v212 << v204)];
            v214 = v211 - 1;
            do
            {
              v216 = *(__int16 *)v213;
              v213 += 2;
              v215 = v216;
              if (v216 < 0)
                v215 = -v215;
              v207 += v215;
              --v214;
            }
            while (v214);
            ++v212;
          }
          while (v212 != v211);
        }
      }
      v217 = *((_QWORD *)v30 + 11);
      v218 = (unint64_t)*v30 >> 3;
      v219 = *(__int16 *)(v217
                        + 2
                        * (((uint64_t)((int)v370 - *((_DWORD *)v30 + 1)) >> 3)
                         + (int)v218 * (uint64_t)(((int)v369 - *((_DWORD *)v30 + 2)) >> 3))) >> 9;
      v220 = 173 * v219;
      if (173 * v219 >= 7865)
        v220 = 7865;
      if (v220 <= 2865)
        v220 = 2865;
      v221 = v220 - 2865;
      v222 = 200 * v219;
      if (v222 >= 8404)
        v222 = 8404;
      if (v222 <= 3404)
        v222 = 3404;
      v223 = v222 - 3404;
      if (!*(_BYTE *)(*(_QWORD *)(v202 + 968) + 212))
        v223 = v221;
      if (v207 < v223)
      {
        *(_DWORD *)(v202 + 4 * v203 + 27648) &= ~0x1000u;
        v203 = *v356;
      }
      if ((*(_DWORD *)(v202 + 4 * v203 + 27648) & 0x1000) != 0)
      {
        v224 = (__int16 *)(v217
                         + 2
                         * (((uint64_t)((int)v370 - *((_DWORD *)v30 + 1)) >> 3)
                          + (int)v218 * (uint64_t)(((int)v369 - *((_DWORD *)v30 + 2)) >> 3)));
        v225 = *v224;
        v226 = *v224 >> 9;
        if (v226 >= 47)
          LOWORD(v226) = 47;
        *v224 = (v225 & 0x1FF | ((_WORD)v226 << 9)) + 2048;
        v227 = sub_1C97F7724((uint64_t)v361, v370, v369, (uint64_t)v224, v344, 1 << v194, v344, 1 << v194, *v361, 0, 0, 0);
        *v224 = v225 & 0xFE00 | *v224 & 0x1FF;
        v183 = v353;
        if ((v227 & 1) == 0)
        {
          v228 = *((_QWORD *)v13 + 3050) + 4 * (int)*v356;
          *(_DWORD *)(v228 + 27648) &= ~0x1000u;
        }
      }
    }
    v230 = v365;
    v229 = v391 >> 2;
    if (*(int *)(*((_QWORD *)v13 + 3050) + 4) <= 2)
    {
      v231 = *(unsigned __int8 *)(*((_QWORD *)v13 + 3047) + 58) > 1u
          || *((_BYTE *)v350[12]
             + 16 * ((uint64_t)((int)v370 - *((_DWORD *)v350 + 1)) >> 2)
             + 16 * ((unint64_t)*(unsigned __int8 *)v350 >> 2) * (((int)v369 - *((_DWORD *)v350 + 2)) >> 2)
             + 10) == 1;
      if (!v231
        && *((_QWORD *)v30 + 21)
         + v181
         + (*((_DWORD *)v30 + 48) + v364) * *(unsigned __int16 *)(*((_QWORD *)v13 + 3051) + 146) >= (unint64_t)v350[23])
      {
LABEL_399:
        *(_QWORD *)v331 = *((_QWORD *)v30 + 18);
        return;
      }
    }
    if (!v381)
    {
      v384 = 0;
      LOBYTE(v380) = 0;
      goto LABEL_373;
    }
    v232 = *((_QWORD *)v30 + 17);
    *(_DWORD *)(v232 + 112) = 0;
    *(_QWORD *)(v232 + 88) = 0;
    *(_QWORD *)(v232 + 96) = 0;
    *(_QWORD *)(v232 + 104) = -1;
    *(_WORD *)(v232 + 116) = 0;
    if (*(char *)(*((_QWORD *)v13 + 3049) + 498) > 1
      && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v13 + 3047) + 5320) + 648) == 5
      && !sub_1C97C3118(*(_QWORD *)(*((_QWORD *)v13 + 3050) + 14840), v370, v369))
    {
      v185 = 1;
LABEL_320:
      v233 = 0;
      LOBYTE(v380) = 0;
      v384 = 0;
      v386 = v416;
      v234 = v185;
      v230 = v365;
      v229 = v391 >> 2;
      v378 = v185;
      while (1)
      {
        v235 = *((_QWORD *)v30 + 18);
        *(_DWORD *)(v235 + 112) = 0;
        *(_QWORD *)(v235 + 88) = 0;
        *(_QWORD *)(v235 + 96) = 0;
        *(_QWORD *)(v235 + 104) = -1;
        *(_WORD *)(v235 + 116) = 0;
        v236 = *((unsigned __int8 *)&v405 + v233);
        *(_BYTE *)v100 = v236;
        if ((int)v391 >= 4)
        {
          v237 = 0;
          v238 = 16 * ((unint64_t)*v30 >> 2);
          v239 = v100;
          do
          {
            v240 = v239;
            v241 = v230;
            do
            {
              v242 = *v100;
              *(_QWORD *)((char *)v240 + 6) = *(_QWORD *)((char *)v100 + 6);
              *v240 = v242;
              v240 += 2;
              --v241;
            }
            while (v241);
            ++v237;
            v239 = (_QWORD *)((char *)v239 + v238);
          }
          while (v237 != v229);
        }
        sub_1C97F48EC((uint64_t)v361, v370, v369, v30, v390, v183, v236, v8, v360, *((_QWORD *)v30 + 18) + 88);
        v243 = *((_QWORD *)v30 + 17);
        v244 = *((_QWORD *)v30 + 18);
        v245 = *(_QWORD *)(v244 + 88);
        if (v245 >= *(_QWORD *)(v243 + 104))
          goto LABEL_355;
        v246 = *((_QWORD *)v13 + 3050);
        if (!*(_BYTE *)(v246 + 196))
        {
          v250 = 0;
          v230 = v365;
          v229 = v391 >> 2;
          while (*((_DWORD *)&v416 + v250) != v236)
          {
            if (++v250 == 3)
            {
              v251 = 1536;
              goto LABEL_338;
            }
          }
          if ((_DWORD)v250)
            v251 = 768;
          else
            v251 = 512;
LABEL_338:
          v252 = *(_DWORD *)(v244 + 112) + v251;
          *(_DWORD *)(v244 + 112) = v252;
          goto LABEL_345;
        }
        v388 = *v356;
        v408 = 0;
        v247 = *(_QWORD *)(v246 + 944);
        (*(void (**)(uint64_t))(*(_QWORD *)v247 + 88))(v247);
        v407 = *((_DWORD *)v30 + 5);
        if (v386 == v236)
          break;
        v248 = v351;
        if (v351 == v236)
        {
          v249 = 0;
LABEL_341:
          (**(void (***)(uint64_t, uint64_t, uint64_t))v247)(v247, 1, v247 + 64);
          (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v247 + 8))(v247, v386 != v236);
          if (v386 != v236)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v247 + 8))(v247, v249);
          v254 = v357;
          goto LABEL_344;
        }
        v253 = v357;
        if (v357 == v236)
          break;
        if (v386 <= v351)
        {
          v260 = v351;
          v248 = v386;
        }
        else
        {
          v416 = __PAIR64__(v386, v351);
          v260 = v386;
        }
        if (v248 <= v357)
        {
          v261 = v357;
          v253 = v248;
        }
        else
        {
          LODWORD(v416) = v357;
          v417 = v248;
          v261 = v248;
        }
        if (v260 <= v261)
        {
          v254 = v261;
          v261 = v260;
        }
        else
        {
          HIDWORD(v416) = v261;
          v417 = v260;
          v254 = v260;
        }
        v262 = v253;
        v263 = 8;
        LODWORD(v264) = v236;
        do
        {
          v264 = v264 - ((int)v264 > *(_DWORD *)((char *)&v416 + v263));
          v263 -= 4;
        }
        while (v263 != -4);
        (**(void (***)(uint64_t, _QWORD, uint64_t))v247)(v247, 0, v247 + 64);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v247 + 24))(v247, v264, 5);
        v351 = v261;
        v386 = v262;
        v13 = v392;
LABEL_344:
        sub_1C97C6D7C(*((_QWORD *)v13 + 3050), v370, v369, v389, 1, 0, 0, 0, 1);
        sub_1C97F46A4((uint64_t)v361, v370, v369, v388, &v407, &v408, 1);
        v252 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v247 + 80))(v247);
        (*(void (**)(uint64_t))(*(_QWORD *)v247 + 96))(v247);
        v244 = *((_QWORD *)v389 + 18);
        *(_DWORD *)(v244 + 112) = v252;
        v245 = *(_QWORD *)(v244 + 88);
        v243 = *((_QWORD *)v389 + 17);
        v357 = v254;
        v30 = v389;
        v8 = v352;
        v183 = v353;
        v230 = v365;
        v229 = v391 >> 2;
        v234 = v378;
LABEL_345:
        v255 = ((*(unsigned __int16 *)(*((_QWORD *)v13 + 3051) + 2 * *(__int16 *)(v244 + 116) + 152)
               * (unint64_t)v252) >> (8 * (*(_WORD *)(v244 + 116) == 0)))
             + v245;
        *(_QWORD *)(v244 + 104) = v255;
        if (v255 < *(_QWORD *)(v243 + 104))
        {
          v380 = ((unsigned __int16)*v355 >> 2) & 3;
          if ((_DWORD)v8 == 3)
          {
            sub_1C97C2920(*(uint64_t (**)(uint64_t, uint64_t))(*((_QWORD *)v13 + 3050) + 29752), (void **)v243, (const void **)v244, v370 - *((_DWORD *)v30 + 1), v369 - *((_DWORD *)v30 + 2), v370 - *((_DWORD *)v30 + 1), v369 - *((_DWORD *)v30 + 2), v391);
            v230 = v365;
            v229 = v391 >> 2;
            v256 = *((_QWORD *)v30 + 17);
            v257 = *((_QWORD *)v30 + 18);
            v258 = *(_OWORD *)(v257 + 88);
            *(_OWORD *)(v256 + 104) = *(_OWORD *)(v257 + 104);
            *(_OWORD *)(v256 + 88) = v258;
          }
          else
          {
            *((_QWORD *)v30 + 17) = v244;
            *((_QWORD *)v30 + 18) = v243;
          }
          v372 = v236;
          v384 = v233;
        }
        if (v233)
          goto LABEL_357;
        v259 = *(char *)(*((_QWORD *)v13 + 3049) + 498);
        if (v259 < 1)
          goto LABEL_357;
        if (v259 != 3
          || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v13 + 3047) + 5320) + 648) == 5
          && (sub_1C97C3118(*(_QWORD *)(*((_QWORD *)v13 + 3050) + 14840), v370, v369) & 1) == 0)
        {
          v230 = v365;
          v229 = v391 >> 2;
          if (*(_QWORD *)(*((_QWORD *)v30 + 17) + 104) > (unint64_t)v350[27])
            goto LABEL_399;
          goto LABEL_357;
        }
LABEL_355:
        v230 = v365;
        v229 = v391 >> 2;
LABEL_357:
        if (++v233 == v234)
          goto LABEL_373;
      }
      v249 = 1;
      goto LABEL_341;
    }
    if (v185 >= 1)
      goto LABEL_320;
    v384 = 0;
    LOBYTE(v380) = 0;
    v230 = v365;
    v229 = v391 >> 2;
LABEL_373:
    if ((*v355 & 0xC) != 0)
      *(_BYTE *)(*((_QWORD *)v13 + 3050) + 24794) = 0;
    *(_BYTE *)v100 = v372;
    if ((int)v391 >= 4)
    {
      v265 = 0;
      v266 = 16 * ((unint64_t)*v30 >> 2);
      v267 = v100;
      do
      {
        v268 = v267;
        v269 = v230;
        do
        {
          v270 = *v100;
          *(_QWORD *)((char *)v268 + 6) = *(_QWORD *)((char *)v100 + 6);
          *v268 = v270;
          v268 += 2;
          --v269;
        }
        while (v269);
        ++v265;
        v267 = (_QWORD *)((char *)v267 + v266);
      }
      while (v265 != v229);
    }
    if ((_DWORD)v8 != 3 && v348)
    {
      v271 = *((_QWORD *)v30 + 18);
      *(_DWORD *)(v271 + 112) = 0;
      *(_QWORD *)(v271 + 88) = 0;
      *(_QWORD *)(v271 + 96) = 0;
      *(_QWORD *)(v271 + 104) = -1;
      *(_WORD *)(v271 + 116) = 0;
      sub_1C97F5020((unsigned int *)v361, v370, v369, v30, v390, 0, v372, v8, v360, (int64x2_t *)(*((_QWORD *)v30 + 18) + 88));
      *(int8x16_t *)(v30 + 136) = vextq_s8(*(int8x16_t *)(v30 + 136), *(int8x16_t *)(v30 + 136), 8uLL);
    }
    v12 = v340;
    v11 = v339;
    if (v381)
    {
      if (!v367 || v372)
      {
        v273 = v384;
        v272 = *v337 + *(_QWORD *)&v435[32 * v384];
      }
      else
      {
        v272 = *v337 + v375;
        v273 = v384;
      }
      *((_QWORD *)v30 + 21) = v272;
      *((_DWORD *)v30 + 48) += *(_DWORD *)&v435[32 * v273 + 24];
      v274 = *((_QWORD *)v30 + 17);
      *((_QWORD *)v30 + 25) += *(_QWORD *)(v274 + 88);
      *((_DWORD *)v30 + 56) += *(_DWORD *)(v274 + 112);
      if (!v348)
      {
        *v355 = *v355 & 0xFFF3 | (4 * (v380 & 3));
        if ((int)v391 >= 8)
        {
          v275 = 0;
          v276 = 2 * ((unint64_t)*v30 >> 3);
          v277 = v355;
          do
          {
            v278 = v277;
            v279 = v391 >> 3;
            do
            {
              *v278++ = *v355;
              --v279;
            }
            while (v279);
            ++v275;
            v277 = (_WORD *)((char *)v277 + v276);
          }
          while (v275 != v391 >> 3);
        }
      }
    }
    else
    {
      *((_DWORD *)v30 + 48) += v364;
      sub_1C97F5770((uint64_t)v361, v370, v369, v30, 0, v390, 0, v8, v360, (uint64_t)v337);
    }
    v54 = v349 + 1;
  }
  while (v349 + 1 != v338);
  *(_QWORD *)v331 = *((_QWORD *)v30 + 18);
  if (!v13[8])
    sub_1C97C82FC((uint64_t)v13, v340, v339, a4, *v330, *v330, a7, v8);
  if (*((int *)v13 + 1) < 3)
  {
    v285 = *(unsigned __int8 *)(*((_QWORD *)v13 + 1856) + 269);
    v36 = v285 <= a4;
    v286 = v285 > a4;
    v282 = *v330;
    v283 = *((_DWORD *)*v330 + 48);
    if (!v36)
      ++v283;
    *((_DWORD *)v282 + 48) = v283;
    v284 = *((_DWORD *)v282 + 56) + (v286 << 8);
    *((_DWORD *)v282 + 56) = v284;
  }
  else
  {
    v435[0] = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)v13 + 118) + 88))(*((_QWORD *)v13 + 118));
    sub_1C97C6D7C((uint64_t)v13, v340, v339, *v330, 1, 0, 0, 0, 0);
    v280 = *v330;
    *((_DWORD *)v280 + 4) = *((_DWORD *)*v330 + 5);
    sub_1C97CBC8C((uint64_t)v13, v340, v339, a4, a7, (int *)v280 + 4, v435, v281);
    *((_DWORD *)*v330 + 56) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v13 + 118) + 80))(*((_QWORD *)v13 + 118));
    (*(void (**)(_QWORD))(**((_QWORD **)v13 + 118) + 96))(*((_QWORD *)v13 + 118));
    sub_1C97CE36C((uint64_t)v13, v340, v339, a4, (uint64_t)*v330);
    v282 = *v330;
    v283 = *((_DWORD *)*v330 + 48);
    v284 = *((_DWORD *)*v330 + 56);
  }
  *((_QWORD *)v282 + 23) = ((*(unsigned __int16 *)&v13[2 * *((__int16 *)v282 + 98) + 1152] * (unint64_t)v283) >> (8 * (*((_WORD *)v282 + 98) == 0)))
                         + *((_QWORD *)v282 + 21);
  *((_QWORD *)v282 + 27) = ((*(unsigned __int16 *)&v13[2 * *((__int16 *)v282 + 114) + 1152] * (unint64_t)v284) >> (8 * (*((_WORD *)v282 + 114) == 0)))
                         + *((_QWORD *)v282 + 25);
  v287 = &v13[32 * a4];
  v290 = *((_QWORD *)v287 + 4);
  v288 = v287 + 32;
  v289 = v290;
  if ((_DWORD)v8)
    v291 = 64;
  else
    v291 = 32;
  v288[26] |= v291;
  v292 = *v330;
  v293 = *((_QWORD *)*v330 + 23);
  if (v293 < v289)
    *(_QWORD *)v288 = v293;
  v294 = *a6;
  if (v13[1] || v13[196])
  {
    v295 = 1;
  }
  else if (*((_BYTE *)v294[12]
            + 16 * ((uint64_t)(v340 - *((_DWORD *)v294 + 1)) >> 2)
            + 16 * ((unint64_t)*(unsigned __int8 *)v294 >> 2) * ((v339 - *((_DWORD *)v294 + 2)) >> 2)
            + 10) == 1)
  {
    v295 = *v13;
  }
  else
  {
    v295 = 0;
  }
  v296 = *((_DWORD *)v13 + 54);
  if (v296 < 1)
  {
    sub_1C97CECB4((uint64_t)v13, (void ***)v330, a6, v295);
  }
  else
  {
    if (*(_QWORD *)&v292[32 * v295 + 184] < (unint64_t)v294[4 * v295 + 23])
    {
      *v330 = (unsigned __int8 *)v294;
      *a6 = (void **)v292;
      v297 = *v330;
      v298 = **v330;
      v299 = v298 >> 2;
      v300 = *((_QWORD *)*v330 + 12)
           + 16
           * (((uint64_t)(v340 - *((_DWORD *)*v330 + 1)) >> 2)
            + (int)(v298 >> 2) * (uint64_t)((v339 - *((_DWORD *)*v330 + 2)) >> 2));
      v301 = *((_QWORD *)v292 + 12)
           + 16
           * (((uint64_t)(v340 - *((_DWORD *)v292 + 1)) >> 2)
            + ((unint64_t)*v292 >> 2) * ((v339 - *((_DWORD *)v292 + 2)) >> 2));
      v302 = *(unsigned __int8 *)(v300 + 10);
      if (v296 == 2)
      {
        if (v302 == 1)
        {
          if (v298 >= 4)
          {
            v303 = 0;
            if (v299 <= 1)
              v299 = 1;
            else
              v299 = v299;
            do
            {
              v304 = (char *)(v300 + 13);
              v305 = (_BYTE *)(v301 + 13);
              v306 = v299;
              do
              {
                *(_DWORD *)(v305 - 9) = *(_DWORD *)(v304 - 9);
                *(v305 - 1) = *(v304 - 1);
                v307 = *v304;
                v304 += 16;
                *v305 = v307;
                v305 += 16;
                --v306;
              }
              while (v306);
              v301 += (4 * *v292) & 0x3F0;
              v300 += (4 * *v297) & 0x3F0;
              ++v303;
            }
            while (v303 != (_DWORD)v299);
          }
        }
        else
        {
          v313 = *(_QWORD *)(*((_QWORD *)v13 + 1855) + 8);
          if ((v339 | v340) < 0 || *(_DWORD *)(v313 + 520) <= v340 || *(_DWORD *)(v313 + 524) <= v339)
            v314 = 0;
          else
            v314 = *(_QWORD *)(v313 + 904) + 4 * (*(_QWORD *)(v313 + 848) * ((uint64_t)v339 >> 2) + (v340 >> 2));
          if (v298 >= 4)
          {
            v320 = 0;
            if (v299 <= 1)
              LODWORD(v299) = 1;
            v321 = 4 * *(_QWORD *)(v313 + 848);
            do
            {
              v322 = 0;
              v323 = (unsigned __int8 *)(v300 + 9);
              v324 = (_BYTE *)(v301 + 12);
              do
              {
                *((_DWORD *)v324 - 2) = *(_DWORD *)(v323 - 9);
                *(_DWORD *)(v314 + v322) = *(_DWORD *)(v323 - 5);
                *v324 = *(v323 - 1) >> 4;
                v325 = *v323;
                v323 += 16;
                v324[1] = v325 >> 4;
                v322 += 4;
                v324 += 16;
              }
              while (4 * v299 != v322);
              v301 += (4 * *v292) & 0x3F0;
              v300 += (4 * *v297) & 0x3F0;
              ++v320;
              v314 += v321;
            }
            while (v320 != (_DWORD)v299);
          }
        }
      }
      else if (v302 == 1)
      {
        if (v298 >= 4)
        {
          v308 = 0;
          if (v299 <= 1)
            v299 = 1;
          else
            v299 = v299;
          do
          {
            v309 = (char *)(v300 + 13);
            v310 = (_BYTE *)(v301 + 13);
            v311 = v299;
            do
            {
              *(_DWORD *)(v310 - 9) = *(_DWORD *)(v309 - 9);
              *(v310 - 1) = *(v309 - 1);
              v312 = *v309;
              v309 += 16;
              *v310 = v312;
              v310 += 16;
              --v311;
            }
            while (v311);
            v301 += (4 * *v292) & 0x3F0;
            v300 += (4 * *v297) & 0x3F0;
            ++v308;
          }
          while (v308 != (_DWORD)v299);
        }
      }
      else if (v298 >= 4)
      {
        v315 = 0;
        if (v299 <= 1)
          v299 = 1;
        else
          v299 = v299;
        do
        {
          v316 = (unsigned __int8 *)(v300 + 9);
          v317 = (_BYTE *)(v301 + 12);
          v318 = v299;
          do
          {
            *((_DWORD *)v317 - 2) = *(_DWORD *)(v316 - 9);
            *v317 = *(v316 - 1) >> 4;
            v319 = *v316;
            v316 += 16;
            v317[1] = v319 >> 4;
            v317 += 16;
            --v318;
          }
          while (v318);
          v301 += (4 * *v292) & 0x3F0;
          v300 += (4 * *v297) & 0x3F0;
          ++v315;
        }
        while (v315 != (_DWORD)v299);
      }
      v292 = *v330;
    }
    v326 = (__int16 *)*((_QWORD *)v292 + 11);
    v327 = *v326;
    bzero(v326, 2 * ((unint64_t)*v292 >> 3) * ((unint64_t)*v292 >> 3));
    **((_WORD **)v292 + 11) = **((_WORD **)v292 + 11) & 0xFFFC | v327 & 3;
    **((_WORD **)v292 + 11) = v327 & 0xFE00 | **((_WORD **)v292 + 11) & 0x1FF;
    sub_1C97C2518((void **)*v330, *(unsigned __int8 *)(*((_QWORD *)v13 + 1855) + 58) < 2u);
    v328 = *v330;
    *((_DWORD *)v328 + 48) = 0;
    *((_QWORD *)v328 + 21) = 0;
    *((_QWORD *)v328 + 22) = 0;
    *((_QWORD *)v328 + 23) = -1;
    *((_WORD *)v328 + 98) = 2;
    v329 = *v330;
    *((_DWORD *)v329 + 56) = 0;
    *((_QWORD *)v329 + 25) = 0;
    *((_QWORD *)v329 + 26) = 0;
    *((_QWORD *)v329 + 27) = -1;
    *((_WORD *)v329 + 114) = 0;
  }
  *(_DWORD *)&v13[4 * a4 + 27648] &= ~(512 << v8);
}

BOOL sub_1C97D2298(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  char v22;
  int v23;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;

  v7 = *(_QWORD *)(a1 + 14840);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_BYTE *)(v8 + 2113);
  v10 = v9 - a4;
  v11 = *(unsigned __int8 *)(v8 + 2117) - 1;
  v12 = (a5 >> v9) + (a6 >> v9) * *(_DWORD *)(v8 + 2120);
  v13 = *(_QWORD *)(v7 + 5400);
  v14 = ((v11 & a5) >> v10)
      + ((v11 & a6) >> v10) * byte_1C9857D2C[a4]
      + *(_DWORD *)(v7 + 5408) * v12
      + byte_1C9857D28[a4];
  v15 = v13 + 32 * v14;
  v16 = 1;
  if ((*(_BYTE *)(v15 + 26) & 0x80) != 0 && (*(_BYTE *)(v15 + 26) & 0x18) != 8)
  {
    v18 = *((_QWORD *)a7 + 23);
    v19 = *(_QWORD *)(v13 + 32 * v14 + 8);
    v20 = v18 >= v19;
    v21 = 100 * (v18 - v19);
    if (!v20)
      v21 = 0;
    if (v21 / (v18 + 1) > 0x22)
      return 1;
    v22 = a4;
    v23 = a3;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117);
    if (sub_1C97D245C(a2, a3, a7, v15))
      return 0;
    v26 = v25 >> (v22 + 1);
    v27 = (*(unsigned __int16 *)(*((_QWORD *)a7 + 11)
                               + 2
                               * (((uint64_t)(a2 - *((_DWORD *)a7 + 1)) >> 3)
                                + ((unint64_t)*a7 >> 3) * ((v23 - *((_DWORD *)a7 + 2)) >> 3))) >> 4) & 7;
    switch(v27)
    {
      case 3:
        if (sub_1C97D245C(v26 + a2, v23, a7, v15))
          return 0;
        v23 += v26;
        if (sub_1C97D245C(a2, v23, a7, v15))
          return 0;
        v29 = v26 + a2;
        break;
      case 2:
        v29 = v26 + a2;
        break;
      case 1:
        v28 = v26 + v23;
        v29 = a2;
        return !sub_1C97D245C(v29, v28, a7, v15);
      default:
        return 1;
    }
    v28 = v23;
    return !sub_1C97D245C(v29, v28, a7, v15);
  }
  return v16;
}

BOOL sub_1C97D245C(int a1, int a2, unsigned __int8 *a3, uint64_t a4)
{
  __int16 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v11;
  int v12;
  _BOOL4 v13;
  int v15;

  v4 = (__int16 *)(*((_QWORD *)a3 + 12)
                 + 16
                 * (((uint64_t)(a1 - *((_DWORD *)a3 + 1)) >> 2)
                  + ((unint64_t)*a3 >> 2) * ((a2 - *((_DWORD *)a3 + 2)) >> 2)));
  v5 = *(unsigned __int8 *)(a4 + 24);
  if (v5 != *((unsigned __int8 *)v4 + 8) >> 4)
    return 0;
  v6 = *(unsigned __int8 *)(a4 + 25);
  if (v6 != *((unsigned __int8 *)v4 + 9) >> 4)
    return 0;
  if (v5 == 15)
    goto LABEL_10;
  v7 = *(__int16 *)(a4 + 16) - *v4;
  if (v7 < 0)
    v7 = *v4 - *(__int16 *)(a4 + 16);
  if (v7 > 5)
  {
LABEL_10:
    v9 = 0;
  }
  else
  {
    v8 = *(__int16 *)(a4 + 18) - v4[1];
    if (v8 < 0)
      v8 = v4[1] - *(__int16 *)(a4 + 18);
    v9 = v8 < 6;
  }
  if (v5 != 15 && !v9)
    return 0;
  if (v6 == 15)
    goto LABEL_23;
  v11 = *(__int16 *)(a4 + 20) - v4[2];
  if (v11 < 0)
    v11 = v4[2] - *(__int16 *)(a4 + 20);
  if (v11 > 5)
  {
LABEL_23:
    v13 = 0;
  }
  else
  {
    v12 = *(__int16 *)(a4 + 22) - v4[3];
    if (v12 < 0)
      v12 = -v12;
    v13 = v12 < 6;
  }
  v15 = v6 == 15 || v13;
  return v15 != 0;
}

BOOL sub_1C97D254C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, int a7, unsigned int a8, unsigned __int8 a9)
{
  int v9;
  int v11;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  unsigned __int8 **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 **v34;
  unsigned __int8 **v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 **v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  __n128 v67;
  _BOOL8 result;
  uint64_t v69;
  unint64_t v70;
  _WORD *v71;
  uint64_t v72;
  _WORD *v73;
  _WORD *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  _WORD *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  char v89;
  _QWORD v90[3];
  int v91;
  __int16 v92;

  v9 = a7;
  v11 = a4;
  v15 = (1 << (*(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113) - a4));
  v16 = a2 - *((_DWORD *)*a5 + 1);
  v17 = a3 - *((_DWORD *)*a5 + 2);
  v18 = **a5;
  v19 = *((_QWORD *)*a5 + 12) + 16 * (((uint64_t)v16 >> 2) + (int)(v18 >> 2) * (uint64_t)(v17 >> 2));
  v80 = (_WORD *)(*((_QWORD *)*a5 + 11) + 2 * (((uint64_t)v16 >> 3) + (int)(v18 >> 3) * (uint64_t)(v17 >> 3)));
  sub_1C97C2634((_QWORD *)a1, v80, a4, a7, 0, v18 >> 3, *((_DWORD *)*a5 + 3));
  v20 = *a5;
  v21 = *a5;
  *((_QWORD *)v21 + 21) = 0;
  v22 = v21 + 168;
  *((_DWORD *)v20 + 48) = 0;
  *((_QWORD *)v20 + 22) = 0;
  *((_QWORD *)v20 + 23) = -1;
  *((_WORD *)v20 + 98) = 2;
  v85 = v9;
  v86 = a2 + ((int)v15 >> 1);
  v81 = a3 + ((int)v15 >> 1);
  v23 = a5;
  v24 = a2;
  v25 = a3;
  v26 = a9;
  v27 = (unsigned __int8 **)((int)v15 >> 1);
  switch(v9)
  {
    case 0:
      v26 = v25;
      v25 = v24;
      v27 = v23;
      sub_1C97D2F2C(a1, v24, v26, v11, v23, a6, v15, v15, 0, a8, (uint64_t)v22, a9, 1u);
      v28 = a1 + 32 * v11;
      *(_DWORD *)(v28 + 48) = *(_DWORD *)v19;
      *(_BYTE *)(v28 + 56) = *(_BYTE *)(v19 + 8) >> 4;
      *(_DWORD *)(v28 + 52) = *(_DWORD *)(v19 + 4);
      *(_BYTE *)(v28 + 57) = *(_BYTE *)(v19 + 9) >> 4;
      break;
    case 1:
      v29 = v11;
      v30 = v24;
      v82 = v19;
      v31 = v23;
      sub_1C97D2F2C(a1, v24, v25, v29, v23, a6, v15, (int)v15 >> 1, 1, a8, (uint64_t)v22, a9, 1u);
      v26 = v25;
      v25 = v30;
      v11 = v29;
      v9 = v85;
      v32 = v31;
      v27 = v31;
      v19 = v82;
      sub_1C97D2F2C(a1, v25, v81, v11, v32, a6, v15, (int)v15 >> 1, 1, a8, (uint64_t)v22, a9, 1u);
      break;
    case 2:
      v83 = v19;
      v84 = v11;
      v33 = v24;
      v34 = v23;
      sub_1C97D2F2C(a1, v24, v25, v84, v23, a6, ((int)v15 >> 1), v15, 2, a8, (uint64_t)v22, a9, 1u);
      v26 = v25;
      v25 = v33;
      v11 = v84;
      v35 = v34;
      v27 = v34;
      v19 = v83;
      sub_1C97D2F2C(a1, v86, v26, v84, v35, a6, ((int)v15 >> 1), v15, 2, a8, (uint64_t)v22, a9, 1u);
      break;
    case 3:
      v79 = v24;
      v36 = v25;
      v37 = v25;
      v38 = v23;
      sub_1C97D2F2C(a1, v24, v37, v11, v23, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      sub_1C97D2F2C(a1, v86, v36, v11, v38, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      sub_1C97D2F2C(a1, v79, v81, v11, v38, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      v26 = v78;
      v9 = v85;
      v39 = v38;
      v27 = v38;
      v25 = v79;
      sub_1C97D2F2C(a1, v86, v81, v11, v39, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      break;
    default:
      break;
  }
  if (!*(_BYTE *)(a1 + 8) && !*(_BYTE *)(a1 + 196))
  {
    sub_1C97C8C08(a1, v25, v26, v11, *v27, 0, 1, 0, 0);
    v40 = *v27;
    v41 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) + ~v11;
    *v22 += ((*(unsigned __int16 *)(a1 + 1164)
                          * (unint64_t)(*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(a1 + 8 * v41 + 1424))((1 << v41), (1 << v41), **((_QWORD **)v40 + 5)+ (*((_QWORD *)v40 + 6)+ (int)v25- (uint64_t)*((int *)v40 + 1)+ v40[1] * (uint64_t)(((int)v26 - *((_DWORD *)v40 + 2)) >> 1))* *(int *)(*((_QWORD *)v40 + 5) + 16))) >> 8);
  }
  if (*(_BYTE *)(a1 + 196))
  {
    if (v9)
    {
      v42 = v20 + 200;
      v43 = *((_DWORD *)*v27 + 1);
      v44 = *((_DWORD *)*v27 + 2);
      v45 = *((_QWORD *)*v27 + 12);
      v46 = ((int)v26 - v44) >> 2;
      v47 = (unint64_t)**v27 >> 2;
      v48 = (uint64_t)((int)v25 - v43) >> 2;
      v49 = v45 + 16 * (v48 + (int)v47 * (uint64_t)v46);
      v50 = (uint64_t)(int)(v86 - v43) >> 2;
      v51 = v45 + 16 * (v50 + (int)v47 * (uint64_t)v46);
      v52 = *(unsigned __int8 *)(v49 + 11);
      if (((*(unsigned __int8 *)(v51 + 11) ^ v52) & 0x40) == 0
        && (v53 = *(unsigned __int8 *)(v49 + 8) >> 4, v53 == *(unsigned __int8 *)(v51 + 8) >> 4)
        && (v53 == 15 || *(_DWORD *)v49 == *(_DWORD *)v51)
        && (v54 = *(unsigned __int8 *)(v49 + 9) >> 4, v54 == *(unsigned __int8 *)(v51 + 9) >> 4)
        && (v54 == 15 || *(_DWORD *)(v49 + 4) == *(_DWORD *)(v51 + 4))
        && (v55 = (int)(v81 - v44) >> 2,
            v56 = v45 + 16 * (v48 + (int)v47 * (uint64_t)v55),
            ((*(unsigned __int8 *)(v56 + 11) ^ v52) & 0x40) == 0)
        && v53 == *(unsigned __int8 *)(v56 + 8) >> 4
        && (v53 == 15 || *(_DWORD *)v49 == *(_DWORD *)v56)
        && v54 == *(unsigned __int8 *)(v56 + 9) >> 4
        && (v54 == 15 || *(_DWORD *)(v49 + 4) == *(_DWORD *)(v56 + 4))
        && (v57 = v45 + 16 * ((int)v47 * (uint64_t)v55 + v50), ((*(unsigned __int8 *)(v57 + 11) ^ v52) & 0x40) == 0)
        && v53 == *(unsigned __int8 *)(v57 + 8) >> 4
        && (v53 == 15 || *(_DWORD *)v49 == *(_DWORD *)v57)
        && v54 == *(unsigned __int8 *)(v57 + 9) >> 4
        && (v54 != 15 ? (v58 = *(_DWORD *)(v49 + 4) != *(_DWORD *)(v57 + 4)) : (v58 = 0),
            *(_BYTE *)(*(_QWORD *)(a1 + 968) + 551) && !v58))
      {
        *((_DWORD *)v20 + 56) = 0;
        *v42 = 0;
        *((_QWORD *)v20 + 26) = 0;
        *((_QWORD *)v20 + 27) = -1;
        *((_WORD *)v20 + 114) = 2;
      }
      else
      {
        *((_DWORD *)v20 + 56) = 0;
        *v42 = 0;
        *((_QWORD *)v20 + 26) = 0;
        *((_QWORD *)v20 + 27) = -1;
        *((_WORD *)v20 + 114) = 2;
        sub_1C97C8C08(a1, v25, v26, v11, *v27, 1, *(_BYTE *)(a1 + 8) == 0, 0, (unsigned int *)v20 + 50);
        if (!*(_BYTE *)(a1 + 29745))
        {
          *((_DWORD *)v20 + 56) = 0;
          *v42 = 0;
          *((_QWORD *)v20 + 26) = 0;
          *((_QWORD *)v20 + 27) = -1;
          *((_WORD *)v20 + 114) = 2;
          sub_1C97CE654(a1, v25, v26, v11, *v27, (uint64_t)(v20 + 200));
        }
        v91 = 0;
        v90[0] = 0;
        v90[1] = 0;
        v90[2] = -1;
        v92 = 0;
        *((_DWORD *)v20 + 56) = 0;
        *v42 = 0;
        *((_QWORD *)v20 + 26) = 0;
        *((_QWORD *)v20 + 27) = -1;
        *((_WORD *)v20 + 114) = 0;
        sub_1C97CB514(a1, v25, v26, v11, *v27, (uint64_t)(v20 + 200), (uint64_t)v90, 0, 0);
        v89 = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
        sub_1C97C6D7C(a1, v25, v26, *v27, 1, 0, *(_BYTE *)(a1 + 29745), 1, 0);
        v66 = *v27;
        *((_DWORD *)v66 + 4) = *((_DWORD *)*v27 + 5);
        sub_1C97CBC8C(a1, v25, v26, v11, a8, (int *)v66 + 4, &v89, v67);
        *((_DWORD *)v20 + 56) += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
        sub_1C97CE36C(a1, v25, v26, v11, (uint64_t)*v27);
        *((_QWORD *)v20 + 27) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v20 + 114) + 1152)
                                * (unint64_t)*((unsigned int *)v20 + 56)) >> (8 * (*((_WORD *)v20 + 114) == 0)))
                              + *((_QWORD *)v20 + 25);
        v9 = v85;
      }
    }
  }
  else
  {
    v59 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 269);
    v60 = *(unsigned __int8 *)(v19 + 10) - 1;
    v61 = v59 <= v11;
    v62 = *((_DWORD *)v20 + 48) + byte_1C98587A8[3 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 58) + v60];
    *((_DWORD *)v20 + 48) = v62;
    v63 = byte_1C98587B1[12 * (v59 == v11) + 4 * v60 + (((unint64_t)(unsigned __int16)*v80 >> 4) & 7)];
    if (v61)
      v64 = v62;
    else
      v64 = v62 + 1;
    v65 = v64 + v63;
    *((_DWORD *)v20 + 48) = v65;
    *((_QWORD *)v20 + 23) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v20 + 98) + 1152) * (unint64_t)v65) >> (8 * (*((_WORD *)v20 + 98) == 0)))
                          + *((_QWORD *)v20 + 21);
  }
  result = sub_1C97CECB4(a1, (void ***)v27, a6, *(unsigned __int8 *)(a1 + 196));
  if (result && !*(_BYTE *)(a1 + 196) && (int)v15 >= 8)
  {
    v69 = 0;
    v70 = (unint64_t)*(unsigned __int8 *)*a6 >> 3;
    v71 = (char *)(*a6)[11]
        + 2 * ((uint64_t)((int)v25 - *((_DWORD *)*a6 + 1)) >> 3)
        + 2 * (int)v70 * (uint64_t)(((int)v26 - *((_DWORD *)*a6 + 2)) >> 3);
    v72 = 2 * v70;
    v73 = v71;
    do
    {
      v74 = v73;
      v75 = v15 >> 3;
      do
      {
        *v74++ = *v71;
        --v75;
      }
      while (v75);
      ++v69;
      v73 = (_WORD *)((char *)v73 + v72);
    }
    while (v69 != v15 >> 3);
  }
  v76 = a1 + 4 * v11;
  v77 = *(_DWORD *)(v76 + 27648) & ~(1 << v9);
  if (!v9)
    v77 &= ~0x100u;
  *(_DWORD *)(v76 + 27648) = v77;
  *(_DWORD *)(v76 + 27668) |= 1 << v9;
  return result;
}

uint64_t sub_1C97D2F2C(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, uint64_t a7, int a8, int a9, unsigned int a10, uint64_t a11, char a12, unsigned __int8 a13)
{
  int v13;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  char v27;
  uint64_t v28;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t *v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __n128 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  void **v52;
  _BYTE *v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  __int32 *v81;
  __int32 v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t *v90;
  BOOL v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _BOOL4 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  int v119;
  _WORD *v120;
  int v121;
  uint64_t v122;
  void ***v123;
  unsigned int v124;
  int v125;
  __int128 v128;
  uint64_t v129;
  __int16 v130;
  char v131;
  char v132;
  __int128 v133;
  __int128 v134;
  _QWORD v135[2];
  unint64_t v136;
  unsigned int v137;
  __int16 v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;

  v13 = a8;
  v16 = a4;
  v17 = a3;
  v18 = a2;
  v19 = result;
  v20 = a13;
  v21 = a9;
  v22 = a10;
  v137 = 0;
  v135[0] = 0;
  v135[1] = 0;
  v136 = -1;
  v138 = 2;
  DWORD2(v134) = 0;
  v133 = 0uLL;
  *(_QWORD *)&v134 = -1;
  WORD6(v134) = 2;
  v23 = *a5;
  v117 = *((_DWORD *)v23 + 1);
  v119 = *((_DWORD *)v23 + 2);
  v24 = *((_QWORD *)v23 + 12);
  v118 = *v23;
  v131 = 3;
  v130 = -1;
  BYTE10(v128) = 3;
  if (a9)
    v25 = 1;
  else
    v25 = *(_BYTE *)(result + 196) == 0;
  v26 = !v25;
  WORD4(v128) = -1;
  v125 = v26;
  if (a12)
  {
    if (v26)
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 968) + 542))
      {
        if (sub_1C97D3CA4(result, a2, a3, a4, v23, a7, a8, (uint64_t)&v129, (uint64_t)v135))
          v27 = *(_BYTE *)(v19 + 812) != 0;
        else
          v27 = 1;
        v64 = v18 - *((_DWORD *)*a5 + 1);
        v65 = v17 - *((_DWORD *)*a5 + 2);
        v66 = **a5;
        v67 = ((uint64_t)v64 >> 3) + (int)(v66 >> 3) * (uint64_t)(v65 >> 3);
        v68 = *((_QWORD *)*a5 + 12) + 16 * (((uint64_t)v64 >> 2) + (int)(v66 >> 2) * (uint64_t)(v65 >> 2));
        LOBYTE(v64) = v131;
        *(_WORD *)(*((_QWORD *)*a5 + 11) + 2 * v67) = *(_WORD *)(*((_QWORD *)*a5 + 11) + 2 * v67) & 0xFF73 | ((v131 == 2) << 7);
        LOBYTE(v65) = *(_BYTE *)(v68 + 11);
        *(_BYTE *)(v68 + 10) = v64;
        LOBYTE(v64) = v65 & 0xB0 | v132 & 0x4E;
        *(_BYTE *)(v68 + 8) = v130 & 0xF0;
        *(_QWORD *)v68 = v129;
        *(_BYTE *)(v68 + 9) = HIBYTE(v130) & 0xF0;
        *(_BYTE *)(v68 + 11) = v64 | 1;
        sub_1C97CE904(v19, v18, v17, v16, a5, a6, a7, v13, a10, v27, 0, 0);
      }
      else
      {
        sub_1C97CDBA0(result, a2, a3, a4, a5, a6, a7, a8, a10, 0);
      }
      result = sub_1C97D4428(v19, v16, *((unsigned __int8 *)(*a6)[12]+ 16 * ((uint64_t)((int)v18 - *((_DWORD *)*a6 + 1)) >> 2)+ 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)v17 - *((_DWORD *)*a6 + 2)) >> 2)+ 10) == 2);
      v26 = v125;
      if (!a13)
        goto LABEL_50;
      goto LABEL_14;
    }
    v28 = v24;
    result = sub_1C97D3CA4(result, a2, a3, a4, v23, a7, a8, (uint64_t)&v129, (uint64_t)v135);
    v20 = a13;
    v26 = 0;
    v13 = a8;
    v22 = a10;
    v16 = a4;
    v18 = a2;
    v24 = v28;
    v21 = a9;
    v17 = a3;
    v136 = ((*(unsigned __int16 *)(v19 + 2 * v138 + 1152) * (unint64_t)v137) >> (8 * (v138 == 0))) + v135[0];
  }
  if (!v20)
  {
LABEL_50:
    v69 = v24;
    v124 = v13;
    v70 = v19 + 14266;
    v128 = *((_OWORD *)(*a6)[12]
           + ((uint64_t)((int)v18 - *((_DWORD *)*a6 + 1)) >> 2)
           + ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)v17 - *((_DWORD *)*a6 + 2)) >> 2));
    v71 = *a5;
    v72 = (unsigned __int8 *)*((_QWORD *)*a5 + 17);
    v73 = *v72;
    v122 = v18;
    v115 = **((_QWORD **)v72 + 7)
         + (*((_QWORD *)v72 + 8) - *((int *)*a5 + 1) + (int)v18 + v73 * ((int)v17 - (uint64_t)*((int *)*a5 + 2)))
         * *(int *)(*((_QWORD *)v72 + 7) + 16);
    v74 = *(_QWORD *)(v19 + 14840);
    v112 = *(char *)(v74 + 516);
    v114 = *(char *)(v74 + 517);
    v75 = (unint64_t)BYTE8(v128) >> 4;
    v76 = BYTE9(v128);
    v77 = (unint64_t)BYTE9(v128) >> 4;
    LOBYTE(v140) = BYTE8(v128) >> 4;
    if ((_DWORD)v75 != 15)
    {
      sub_1C97C34D0(v19, v122, a3, v71, 0, (unint64_t)BYTE8(v128) >> 4, a7, v13, (__int32 *)(v19 + 52 * v75 + 25128));
      v70 = v19 + 14266;
      HIDWORD(v140) = v128;
      v78 = *(_QWORD *)(*(_QWORD *)(v19 + 14520) + 16 * v75 + 1672);
      *(_BYTE *)(v19 + 14266) = BYTE8(v128) >> 4;
      *(_DWORD *)(v19 + 14268) = *(_DWORD *)(v78 + 520);
      *(_DWORD *)(v19 + 14276) = *(_DWORD *)(v78 + 524);
    }
    v79 = v76 >> 4;
    BYTE1(v140) = v79;
    if ((_DWORD)v77 != 15)
    {
      v80 = v70;
      v81 = (__int32 *)(v19 + 52 * v77 + 25336);
      sub_1C97C34D0(v19, v122, a3, v71, 1u, v77, a7, v124, v81);
      if ((_DWORD)v75 == 15 || !*(_BYTE *)(*(_QWORD *)(v19 + 14840) + 552))
      {
        v82 = DWORD1(v128);
      }
      else
      {
        v82 = v81[((unint64_t)BYTE11(v128) >> 5) & 1];
        DWORD1(v128) = v82;
      }
      LODWORD(v141) = v82;
      v83 = *(_QWORD *)(*(_QWORD *)(v19 + 14520) + 16 * v77 + 1928);
      *(_BYTE *)(v80 + 1) = v79;
      *(_DWORD *)(v19 + 14272) = *(_DWORD *)(v83 + 520);
      *(_DWORD *)(v19 + 14280) = *(_DWORD *)(v83 + 524);
    }
    DWORD2(v143) = 0;
    v142 = 0uLL;
    *(_QWORD *)&v143 = -1;
    WORD6(v143) = 2;
    sub_1C979E35C((_QWORD *)(v19 + 1576), (char *)&v140, v122, a3, a7, v124, v73, v115);
    if ((int)v124 >= (int)a7)
      v84 = a7;
    else
      v84 = v124;
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v19 + 8 * __clz(__rbit32(v84)) + 1240))(a7, v124, **((_QWORD **)v71 + 3)+ (*((_QWORD *)v71 + 4) - *((int *)v71 + 1) + (int)v122 + ((int)a3 - (uint64_t)*((int *)v71 + 2)) * v71[1])* *(int *)(*((_QWORD *)v71 + 3) + 16));
    *(_QWORD *)&v142 = v142 + result;
    if ((BYTE11(v128) & 0x40) != 0)
      v85 = 2;
    else
      v85 = 3;
    if (*(_BYTE *)(v19 + 204))
      v86 = v85;
    else
      v86 = 1;
    v87 = DWORD2(v143) + v86;
    DWORD2(v143) = v87;
    if ((_DWORD)v75 != 15)
    {
      result = sub_1C979E1E8(v19 + 52 * v75 + 25128, (uint64_t)&v140, 0, 0xFFFFFFFFLL);
      BYTE11(v128) = (16 * (result & 1)) | BYTE11(v128) & 0xEF;
      if (v112 - 1 == (_DWORD)v75)
        v88 = v75;
      else
        v88 = v75 + 1;
      v87 = v88 + DWORD2(v143);
      DWORD2(v143) = v87;
    }
    v24 = v69;
    if ((_DWORD)v77 != 15)
    {
      if ((_DWORD)v75 == 15 || !*(_BYTE *)(*(_QWORD *)(v19 + 14840) + 552))
      {
        result = sub_1C979E1E8(v19 + 52 * v77 + 25336, (uint64_t)&v140, 1u, 0xFFFFFFFFLL);
        BYTE11(v128) = (32 * (result & 1)) | BYTE11(v128) & 0xDF;
        v87 = DWORD2(v143);
      }
      if (v114 - 1 == (_DWORD)v77)
        v89 = v77;
      else
        v89 = v77 + 1;
      v87 += v89;
      DWORD2(v143) = v87;
    }
    v13 = v124;
    LODWORD(v18) = v122;
    *(_QWORD *)&v143 = ((*(unsigned __int16 *)(v19 + 2 * SWORD6(v143) + 1152) * (unint64_t)v87) >> (8 * (WORD6(v143) == 0)))
                     + v142;
    v133 = v142;
    v134 = v143;
    LODWORD(v17) = a3;
    goto LABEL_84;
  }
LABEL_14:
  if (((*(_DWORD *)(v19 + 4 * v16 + 27648) >> v21) & 1) == 0)
    goto LABEL_85;
  if (v26)
  {
    v123 = a6;
    v116 = v24;
    sub_1C9797EB8(v19 + 1592, v18, v17, a7);
    v32 = *a5;
    v111 = (int)v18 - (uint64_t)*((int *)*a5 + 1);
    v33 = (int)v17 - (uint64_t)*((int *)*a5 + 2);
    v34 = **a5;
    v35 = *((_QWORD *)*a5 + 12) + 16 * (((uint64_t)(int)v111 >> 2) + (int)(v34 >> 2) * (uint64_t)((int)v33 >> 2));
    v120 = (_WORD *)(*((_QWORD *)*a5 + 11) + 2
                                           * (((uint64_t)(int)v111 >> 3) + (int)(v34 >> 3) * (uint64_t)((int)v33 >> 3)));
    v36 = (unsigned __int8 *)*((_QWORD *)*a5 + 17);
    v110 = *v36;
    v37 = (uint64_t *)*((_QWORD *)v36 + 7);
    v107 = *v37;
    v108 = *((int *)v37 + 4);
    v109 = v36[1];
    v38 = (uint64_t *)*((_QWORD *)v36 + 9);
    v103 = *((_QWORD *)v36 + 8);
    v104 = *((_QWORD *)v36 + 10);
    v105 = *v38;
    v106 = *((int *)v38 + 4);
    v113 = sub_1C97D448C(v19, v18, v17, v16, *a5, a7, v13, v35, (uint64_t)&v140, v22);
    v39 = *v32;
    if (v13 >= 4)
    {
      v40 = 0;
      LODWORD(v41) = (int)a7 >> 2;
      if ((int)a7 >> 2 <= 1)
        v41 = 1;
      else
        v41 = v41;
      v42 = (_QWORD *)v35;
      do
      {
        v43 = v42;
        v44 = v41;
        if ((int)a7 >= 4)
        {
          do
          {
            v45 = *(_QWORD *)v35;
            *(_QWORD *)((char *)v43 + 6) = *(_QWORD *)(v35 + 6);
            *v43 = v45;
            v43 += 2;
            --v44;
          }
          while (v44);
        }
        ++v40;
        v42 += 2 * (v39 >> 2);
      }
      while (v40 != v13 >> 2);
      v39 = *v32;
    }
    sub_1C97C2634((_QWORD *)v19, v120, v16, 0, 0, v39 >> 3, *((_DWORD *)v32 + 3));
    if (*(_BYTE *)(*(_QWORD *)(v19 + 968) + 551)
      && (v46 = (unint64_t)(*v123)[12]
              + 16 * ((uint64_t)((int)v18 - *((_DWORD *)*v123 + 1)) >> 2)
              + 16 * ((unint64_t)*(unsigned __int8 *)*v123 >> 2) * (((int)v17 - *((_DWORD *)*v123 + 2)) >> 2),
          ((*(unsigned __int8 *)(v46 + 11) ^ *(unsigned __int8 *)(v35 + 11)) & 0x40) == 0)
      && (v47 = *(unsigned __int8 *)(v35 + 8) >> 4, v47 == *(unsigned __int8 *)(v46 + 8) >> 4)
      && (v47 == 15 || *(_DWORD *)v35 == *(_DWORD *)v46)
      && (v48 = *(unsigned __int8 *)(v35 + 9) >> 4, v48 == *(unsigned __int8 *)(v46 + 9) >> 4)
      && (v48 == 15 || *(_DWORD *)(v35 + 4) == *(_DWORD *)(v46 + 4))
      && (v121 = sub_1C97D62D8(v19, v18, v17, v16, v32),
          v121 >= (int)sub_1C97D62D8(v19, v18, v17, v16, (unsigned __int8 *)*v123)))
    {
      v51 = 0;
      v53 = (_BYTE *)(v19 + 1592);
      v24 = v116;
    }
    else
    {
      sub_1C980B120(*(_QWORD *)(v19 + 14840), (unsigned int *)v35, v18, v17, a7, a7, v110, v107 + (v103 + v111 + v110 * v33) * v108, 2 * v109, v105 + (v104 + v111 + 2 * (int)v109 * (uint64_t)((int)v33 >> 1)) * v106);
      if (!*(_BYTE *)(v19 + 29745))
      {
        DWORD2(v142) = 0;
        v140 = 0;
        v141 = 0;
        *(_QWORD *)&v142 = -1;
        WORD6(v142) = 2;
        sub_1C97CE654(v19, v18, v17, v16, v32, (uint64_t)&v140);
      }
      DWORD2(v142) = 0;
      v140 = 0;
      v141 = 0;
      *(_QWORD *)&v142 = -1;
      WORD6(v142) = 0;
      *((_DWORD *)v32 + 56) = 0;
      *((_QWORD *)v32 + 25) = 0;
      *((_QWORD *)v32 + 26) = 0;
      *((_QWORD *)v32 + 27) = -1;
      *((_WORD *)v32 + 114) = 0;
      sub_1C97CB514(v19, v18, v17, v16, v32, (uint64_t)(v32 + 200), (uint64_t)&v140, 0, 0);
      v139 = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 944) + 88))(*(_QWORD *)(v19 + 944));
      sub_1C97C6D7C(v19, v18, v17, v32, 1, 0, *(_BYTE *)(v19 + 29745), 1, 0);
      *((_DWORD *)v32 + 4) = *((_DWORD *)v32 + 5);
      sub_1C97CBC8C(v19, v18, v17, v16, v22, (int *)v32 + 4, &v139, v49);
      *((_DWORD *)v32 + 56) += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 944) + 80))(*(_QWORD *)(v19 + 944));
      (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 944) + 96))(*(_QWORD *)(v19 + 944));
      sub_1C97CE36C(v19, v18, v17, v16, (uint64_t)v32);
      *((_QWORD *)v32 + 27) = ((*(unsigned __int16 *)(v19 + 2 * *((__int16 *)v32 + 114) + 1152)
                              * (unint64_t)*((unsigned int *)v32 + 56)) >> (8 * (*((_WORD *)v32 + 114) == 0)))
                            + *((_QWORD *)v32 + 25);
      v50 = sub_1C97CECB4(v19, (void ***)a5, v123, 1u);
      v51 = 0;
      v52 = *v123;
      v53 = (_BYTE *)(v19 + 1592);
      v24 = v116;
      if (v50 && v113)
      {
        v54 = v18 - *((_DWORD *)v52 + 1);
        v55 = a3 - *((_DWORD *)v52 + 2);
        v56 = (unsigned __int8 *)v52[17];
        v57 = *(unsigned __int8 *)(*((_QWORD *)v56 + 1)
                                 + ((uint64_t)v54 >> 2)
                                 + ((unint64_t)*v56 >> 2) * (v55 >> 2));
        if (!*(_BYTE *)(v19 + 8))
        {
          v58 = ((uint64_t)v54 >> 3) + ((unint64_t)v56[1] >> 2) * (v55 >> 3);
          v57 |= *(unsigned __int8 *)(*((_QWORD *)v56 + 2) + v58) | *(unsigned __int8 *)(*((_QWORD *)v56 + 3) + v58);
        }
        v51 = v57 == 0;
      }
      *((_BYTE *)v52 + 232) = v51;
    }
    if (*v53)
      sub_1C9797C78(v19 + 144 * *(int *)(v19 + 1648) + 1656, *(_QWORD *)(v19 + 14256));
    if (v51)
      v59 = *(_BYTE *)(*(_QWORD *)(v19 + 968) + 527) & 1;
    else
      v59 = 0;
    result = sub_1C97D4428(v19, v16, v59);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 2;
    LODWORD(v17) = a3;
  }
  else
  {
    result = sub_1C97D448C(v19, v18, v17, v16, *a5, a7, v13, (uint64_t)&v128, (uint64_t)&v133, v22);
    v60 = v133;
    v61 = DWORD2(v134);
    v62 = 8 * (WORD6(v134) == 0);
    v63 = SWORD6(v134);
  }
  *(_QWORD *)&v134 = ((v61 * (unint64_t)*(unsigned __int16 *)(v19 + 2 * v63 + 1152)) >> v62) + v60;
LABEL_84:
  LOBYTE(v26) = v125;
LABEL_85:
  if ((v26 & 1) == 0)
  {
    v90 = (uint64_t *)(v24
                    + 16 * (((uint64_t)((int)v18 - v117) >> 2) + (int)(v118 >> 2) * (uint64_t)(((int)v17 - v119) >> 2)));
    v91 = v136 >= (unint64_t)v134;
    if (v136 >= (unint64_t)v134)
      v92 = (uint64_t *)&v133;
    else
      v92 = v135;
    v93 = *v92;
    v94 = (uint64_t *)&v128;
    if (v136 < (unint64_t)v134)
      v94 = &v129;
    *(_QWORD *)a11 += v93;
    v95 = (unsigned int *)&v134 + 2;
    if (!v91)
      v95 = &v137;
    *(_DWORD *)(a11 + 24) += *v95;
    *(_OWORD *)v90 = *(_OWORD *)v94;
    if (v13 >= 4)
    {
      v96 = 0;
      LODWORD(v97) = (int)a7 >> 2;
      if ((int)a7 >> 2 <= 1)
        v97 = 1;
      else
        v97 = v97;
      v98 = 16 * ((unint64_t)**a5 >> 2);
      v99 = (_QWORD *)(v24
                     + 16 * (((uint64_t)((int)v18 - v117) >> 2) + (int)(v118 >> 2) * (uint64_t)(((int)v17 - v119) >> 2)));
      do
      {
        v100 = v99;
        v101 = v97;
        if ((int)a7 >= 4)
        {
          do
          {
            v102 = *v90;
            *(_QWORD *)((char *)v100 + 6) = *(uint64_t *)((char *)v90 + 6);
            *v100 = v102;
            v100 += 2;
            --v101;
          }
          while (v101);
        }
        ++v96;
        v99 = (_QWORD *)((char *)v99 + v98);
      }
      while (v96 != v13 >> 2);
    }
  }
  return result;
}

uint64_t sub_1C97D3CA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  char v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  int v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t (**v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  _BYTE *v76;
  _QWORD *v77;
  int v82;
  char v83;
  char v84;
  int v85;
  int v86;

  v11 = a1 + 25064;
  v12 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
  v13 = (uint64_t *)*((_QWORD *)v12 + 7);
  if (*(_BYTE *)(a1 + 27684))
    v62 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4 == *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848)
                                                                                            + 2112);
  else
    v62 = 0;
  v14 = *v12;
  v15 = *((int *)a5 + 1);
  v16 = *((int *)a5 + 2);
  v17 = *((_QWORD *)v12 + 8);
  v18 = *((int *)v13 + 4);
  v19 = *v13;
  v74 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14840) + 558);
  v63 = *a5;
  v64 = *((_QWORD *)a5 + 11);
  sub_1C97C35B4(a1, a2, a3, a5, a6, a7, a1 + 25064);
  if (*(_BYTE *)(a1 + 812))
  {
    *(_BYTE *)(a8 + 10) = 2;
    *(_BYTE *)(a8 + 11) &= 0xF0u;
    if (*(_BYTE *)v11 != 15
      && *(_BYTE *)(v11 + 1) != 15
      && (a6 < 8 || a7 <= 7)
      && *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4 == 3)
    {
      *(_BYTE *)(v11 + 1) = 15;
      *(_DWORD *)(v11 + 8) = 0;
    }
    *(_DWORD *)a8 = *(_DWORD *)(v11 + 4);
    *(_BYTE *)(a8 + 8) = 16 * *(_BYTE *)v11;
    *(_DWORD *)(a8 + 4) = *(_DWORD *)(v11 + 8);
    *(_BYTE *)(a8 + 9) = 16 * *(_BYTE *)(v11 + 1);
    *(_QWORD *)a9 = 0;
    *(_DWORD *)(a9 + 24) = 0;
    *(_DWORD *)(a1 + 4 * a4 + 27648) = 0;
  }
  else
  {
    v21 = v19 + (v17 + (int)a2 - v15 + v14 * ((int)a3 - v16)) * v18;
    v22 = *(unsigned __int8 *)(v11 + 60);
    v23 = a6;
    if (*(_BYTE *)(a1 + 204) && (a6 < 8 || a7 <= 7))
    {
      v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4 != 3 || (_DWORD)v22 == 0;
      if (!v24)
      {
        v25 = v11;
        v26 = *(unsigned __int8 *)(v11 + 60);
        do
        {
          if (*(_BYTE *)v25 != 15 && *(_BYTE *)(v25 + 1) != 15)
          {
            *(_BYTE *)(v25 + 1) = 15;
            *(_DWORD *)(v25 + 8) = 0;
          }
          v25 += 12;
          --v26;
        }
        while (v26);
      }
    }
    v73 = v14;
    v60 = a3 - v16;
    v61 = a2 - v15;
    if ((_DWORD)v22)
    {
      v27 = 0;
      v76 = (_BYTE *)(a1 + 14266);
      v77 = (_QWORD *)(a1 + 1576);
      if (a7 >= a6)
        v28 = a6;
      else
        v28 = a7;
      v70 = (4 - v74);
      v71 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * __clz(__rbit32(v28)) + 1240);
      v29 = (_DWORD *)(v11 + 8);
      v68 = -1;
      v69 = 0;
      v75 = -1;
      v67 = -1;
      v30 = v21;
      v72 = v22;
      do
      {
        if (!sub_1C97CE868(v11, v27))
        {
          v31 = *((char *)v29 - 8);
          v32 = *((unsigned __int8 *)v29 - 8);
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 968) + 232))
            goto LABEL_38;
          if (v32 == 15)
            goto LABEL_37;
          v33 = *(_QWORD *)(*(_QWORD *)(a1 + 14520) + 16 * v31 + 1672);
          *v76 = v32;
          *(_DWORD *)(a1 + 14268) = *(_DWORD *)(v33 + 520);
          *(_DWORD *)(a1 + 14276) = *(_DWORD *)(v33 + 524);
          v82 = *(v29 - 1);
          v34 = v82;
          sub_1C979DC5C((uint64_t)v77, a2, a3, a6, a7, 0, (__int16 *)&v82);
          v24 = v82 == v34;
          v23 = a6;
          if (v24)
          {
LABEL_37:
            v35 = *((char *)v29 - 7);
            if (v35 == 15)
              goto LABEL_38;
            v36 = *(_QWORD *)(*(_QWORD *)(a1 + 14520) + 16 * v35 + 1928);
            *(_BYTE *)(a1 + 14267) = *((_BYTE *)v29 - 7);
            *(_DWORD *)(a1 + 14272) = *(_DWORD *)(v36 + 520);
            *(_DWORD *)(a1 + 14280) = *(_DWORD *)(v36 + 524);
            v82 = *v29;
            v37 = v82;
            sub_1C979DC5C((uint64_t)v77, a2, a3, a6, a7, 1u, (__int16 *)&v82);
            v24 = v82 == v37;
            v23 = a6;
            if (v24)
            {
LABEL_38:
              v85 = *(v29 - 1);
              v83 = v32;
              if (v32 != 15)
              {
                v38 = *(_QWORD *)(*(_QWORD *)(a1 + 14520) + 16 * v31 + 1672);
                *v76 = v32;
                *(_DWORD *)(a1 + 14268) = *(_DWORD *)(v38 + 520);
                *(_DWORD *)(a1 + 14276) = *(_DWORD *)(v38 + 524);
              }
              if (*(_BYTE *)(a1 + 204))
              {
                v86 = *v29;
                v84 = *((_BYTE *)v29 - 7);
                if (v84 != 15)
                {
                  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 14520) + 16 * v84 + 1928);
                  *(_BYTE *)(a1 + 14267) = v84;
                  *(_DWORD *)(a1 + 14272) = *(_DWORD *)(v39 + 520);
                  *(_DWORD *)(a1 + 14280) = *(_DWORD *)(v39 + 524);
                }
                v40 = a2;
                v41 = v23;
                v42 = v23;
                v43 = a7;
                sub_1C979E35C(v77, &v83, a2, a3, v41, a7, v73, v30);
              }
              else
              {
                v40 = a2;
                v44 = v23;
                v42 = v23;
                v43 = a7;
                sub_1C979CBC8((uint64_t)v77, (uint64_t)&v83, a2, a3, v44, a7, v73, v30, 0);
              }
              v45 = (*v71)(v42, v43, **((_QWORD **)a5 + 3)+ (*((_QWORD *)a5 + 4) - *((int *)a5 + 1) + v40 + ((int)a3 - (uint64_t)*((int *)a5 + 2)) * a5[1])* *(int *)(*((_QWORD *)a5 + 3) + 16));
              if (v70 == v27)
                v46 = v27;
              else
                v46 = v27 + 1;
              v23 = v42;
              v22 = v72;
              if (*(unsigned __int16 *)(a1 + 1156) * v46 + (unint64_t)v45 < v75)
              {
                v68 = v46;
                v69 = v27;
                v75 = *(unsigned __int16 *)(a1 + 1156) * v46 + v45;
                v67 = v45;
              }
            }
          }
        }
        ++v27;
        v29 += 3;
      }
      while (v22 != v27);
    }
    else
    {
      v68 = -1;
      v69 = 0;
      v67 = -1;
      v75 = -1;
      v30 = v21;
    }
    *(_QWORD *)a9 = v67;
    *(_DWORD *)(a9 + 24) = v68 + 1;
    *(_BYTE *)(a8 + 10) = 3;
    v47 = *(_BYTE *)(a8 + 11) & 0xF0 | (2 * (v69 & 7)) | 1;
    *(_BYTE *)(a8 + 11) = v47;
    v48 = (unsigned __int8 *)(v11 + 12 * v69);
    *(_DWORD *)a8 = *((_DWORD *)v48 + 1);
    v49 = *v48;
    *(_BYTE *)(a8 + 8) = 16 * v49;
    *(_DWORD *)(a8 + 4) = *((_DWORD *)v48 + 2);
    LODWORD(v48) = v48[1];
    *(_BYTE *)(a8 + 9) = 16 * (_BYTE)v48;
    v50 = ~v49 & 0xF;
    if ((~(_DWORD)v48 & 0xF) == 0 || v50 == 0)
      v52 = 0;
    else
      v52 = 64;
    *(_BYTE *)(a8 + 11) = v52 | v47 & 0xBF;
    v53 = *(_QWORD *)(a1 + 968);
    if (!*(_BYTE *)(v53 + 85)
      || (*(_WORD *)(v64 + 2 * (((uint64_t)v61 >> 3) + (int)(v63 >> 3) * (uint64_t)(v60 >> 3))) & 0x70) != 0)
    {
      return 0;
    }
    v54 = v62;
    if ((*(_DWORD *)(a1 + 4 * a4 + 27648) & 0x100) == 0)
      v54 = 1;
    if ((v54 & 1) != 0)
      return 0;
    v55 = *(unsigned __int8 *)(v53 + 533);
    v56 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    v57 = a3 - *((_DWORD *)a5 + 2);
    if (v55)
    {
      if (v75 > (unsigned __int16)a12344566777777[(*(__int16 *)(*((_QWORD *)a5 + 11)
                                                               + 2
                                                               * (((uint64_t)(int)v56 >> 3)
                                                                + ((unint64_t)*a5 >> 3) * (v57 >> 3))) >> 9)
                                                 + 12] << (*(_BYTE *)(*(_QWORD *)(a1 + 14848) + 2113) - a4))
        return 0;
    }
    v59 = *((_QWORD *)a5 + 17);
    sub_1C980B120(*(_QWORD *)(a1 + 14840), (unsigned int *)a8, a2, a3, v23, v23, v73, v30, 2 * *(unsigned __int8 *)(v59 + 1), **(_QWORD **)(v59 + 72)+ (*(_QWORD *)(v59 + 80) + v56 + 2 * *(unsigned __int8 *)(v59 + 1) * (uint64_t)(v57 >> 1))* *(int *)(*(_QWORD *)(v59 + 72) + 16));
    sub_1C97F17FC(a1 + 14912, a1, a2, a3, a4, a5);
    if (sub_1C97FA19C((_QWORD *)(a1 + 14912), a2, a3, 0, a5, *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2113) - a4))
    {
      *(_BYTE *)(a8 + 10) = 2;
      *(_BYTE *)(a8 + 11) &= ~1u;
      --*(_DWORD *)(a9 + 24);
      v20 = 1;
      sub_1C97D4428(a1, a4, 1);
      return v20;
    }
  }
  return 1;
}

uint64_t sub_1C97D4428(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(result + 968) + 529) & 4) != 0)
    {
      v3 = a2;
      *(_DWORD *)(result + 4 * a2 + 27648) = 0;
      v4 = 15;
    }
    else
    {
      if ((*(_BYTE *)(*(_QWORD *)(result + 968) + 529) & 2) == 0)
        return result;
      v3 = a2;
      *(_DWORD *)(result + 4 * a2 + 27648) &= 0xFFFFFFF1;
      v4 = 14;
    }
    *(_DWORD *)(result + 4 * v3 + 27668) |= v4;
  }
  return result;
}

BOOL sub_1C97D448C(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v91;
  int v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _DWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  void (*v116)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *, uint64_t *, uint64_t *, uint64_t);
  uint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *, uint64_t *, uint64_t *, uint64_t);
  uint64_t v131;
  _QWORD *v132;
  _DWORD *v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int16 *v140;
  int v141;
  int v142;
  __int16 v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(_QWORD *, _QWORD, uint64_t);
  uint64_t v161;
  _QWORD *v162;
  unsigned int *v163;
  int v164;
  BOOL v165;
  int v166;
  int v167;
  int v168;
  unint64_t v169;
  unsigned int v170;
  _QWORD *v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t v175;
  BOOL v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  unint64_t v181;
  int v182;
  _BOOL8 v183;
  _QWORD *v184;
  unint64_t v185;
  char v186;
  _DWORD *v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  char v191;
  char v192;
  _BYTE *v194;
  int v195;
  int v196;
  __int128 v197;
  int v198;
  char v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _DWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  _BYTE *v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, int);
  uint64_t v218;
  _QWORD *v219;
  int v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v231;
  int v233;
  int v234;
  uint64_t v235;
  int v236;
  int v237;
  char v238;
  uint64_t v239;
  int v240;
  unint64_t v241;
  char v242;
  int v243;
  unsigned int *v244;
  uint64_t v245;
  int v246;
  int v247;
  int v248;
  int *v249;
  int v250;
  unint64_t v251;
  char v252;
  unint64_t v253;
  _BOOL4 v254;
  signed int v255;
  char v256;
  unint64_t v257;
  _DWORD *v258;
  unint64_t v259;
  _DWORD *v260;
  uint64_t v261;
  _BYTE *v262;
  int v263;
  uint64_t v264;
  void (**v265)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  unint64_t v270;
  int v271;
  uint64_t v272;
  unint64_t v273;
  unsigned int v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  __int16 v278;
  unsigned int *v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  int *v283;
  int *v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _DWORD *v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v292)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  _DWORD *v293;
  uint64_t v294;
  uint64_t (*v295)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *);
  uint64_t v296;
  uint64_t v297;
  _DWORD *v298;
  int v299;
  uint64_t v300;
  __int32 *v302;
  unint64_t v303;
  _QWORD *v304;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  int v314;
  int v315;
  char v316;
  char v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  int v322;
  __int16 v323;
  _DWORD v324[32];
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  __int128 v335;
  _DWORD v336[2];
  uint64_t v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  _BYTE v349[256];
  _QWORD v350[2];
  unint64_t v351;
  int v352;
  __int16 v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  int v357;
  __int16 v358;
  _BYTE v359[128];
  uint64_t v360;
  _OWORD v361[2];
  _DWORD v362[2];
  uint64_t v363;

  v10 = a6;
  v11 = a1;
  v363 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 14840);
  v13 = *(char *)(v12 + 517);
  v235 = *(char *)(v12 + 516);
  v362[0] = *(char *)(v12 + 516);
  v362[1] = v13;
  v227 = v13;
  v231 = a5[1];
  v14 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
  v307 = *v14;
  v15 = *((_DWORD *)a5 + 1);
  v16 = *((_DWORD *)a5 + 2);
  v17 = a3;
  v18 = (int)(a2 - v15);
  v19 = (uint64_t *)*((_QWORD *)v14 + 7);
  v20 = *((_QWORD *)v14 + 8);
  v21 = sub_1C979DBAC;
  if ((_DWORD)a6 == a7 && *(_BYTE *)(a1 + 1592))
    v21 = sub_1C979DBE8;
  v22 = 0;
  v241 = 0;
  v23 = *((int *)v19 + 4);
  v24 = *v19;
  v25 = v20 + (int)(a2 - v15);
  *(_QWORD *)(a1 + 14824) = v21;
  *(_QWORD *)(a1 + 14832) = 0;
  *(_QWORD *)(a1 + 14432) = **((_QWORD **)a5 + 3)
                          + (*((_QWORD *)a5 + 4) + v18 + ((int)a3 - v16) * (uint64_t)(int)v231)
                          * *(int *)(*((_QWORD *)a5 + 3) + 16);
  *(_QWORD *)(a1 + 14440) = v231;
  v234 = *(unsigned __int8 *)(a1 + 204);
  v26 = *(_BYTE **)(a1 + 968);
  v238 = v26[237];
  v250 = v26[238];
  v247 = *(unsigned __int8 *)(v12 + 5184);
  v233 = *(unsigned __int8 *)(v12 + 552);
  v315 = 0;
  v314 = 0;
  memset(v361, 0, sizeof(v361));
  v360 = 0;
  v27 = *(_QWORD *)(a1 + 1576);
  v352 = 0;
  v350[1] = 0;
  v350[0] = 0;
  v351 = -1;
  v356 = -1;
  v353 = 2;
  v357 = 0;
  v355 = 0;
  v354 = 0;
  v358 = 2;
  v335 = 0uLL;
  v333 = 0uLL;
  v334 = 0;
  v332 = 0uLL;
  v330 = 0uLL;
  v331 = 0;
  v329 = 0;
  v328 = 0;
  v326 = 0;
  v325 = 0;
  v327 = 0;
  v28 = v26[537];
  v29 = v26[527];
  v290 = v27;
  if (v28 && (v29 & 6) != 0)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v241 = 0;
    v33 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14848) + 2117) >> a4;
    v336[0] = 240;
    v336[1] = -v33;
    v337 = 0x1E0000000000;
    v338 = 0;
    v339 = -v33;
    v340 = 122880;
    v341 = v33;
    v342 = -v33;
    v343 = 256;
    v344 = -v33;
    v345 = -v33;
    v346 = 15;
    v347 = -v33;
    v348 = v33;
    do
    {
      if ((v336[v30] & a10) != 0)
      {
        v34 = v336[v30 + 1] + a2;
        v35 = v336[v30 + 2] + v17;
        if (((v35 | v34) & 0x80000000) == 0)
        {
          v36 = v10;
          v37 = *(_QWORD *)(v12 + 16);
          if (*(_DWORD *)(v37 + 204) > (signed int)v34
            && *(_DWORD *)(v37 + 208) > (signed int)v35
            && (v38 = *(_QWORD *)(v12 + 5400)) != 0)
          {
            v39 = *(_BYTE *)(v37 + 2113);
            v40 = (unint64_t *)(v38
                                     + 32
                                     * ((((*(unsigned __int8 *)(v37 + 2117) - 1) & v34) >> (v39 - a4))
                                      + (((*(unsigned __int8 *)(v37 + 2117) - 1) & v35) >> (v39 - a4))
                                      * byte_1C9857D2C[a4]
                                      + *(_DWORD *)(v12 + 5408)
                                      * ((v34 >> v39) + (v35 >> v39) * *(_DWORD *)(v37 + 2120))
                                      + byte_1C9857D28[a4]));
            ++v31;
            if ((*((_BYTE *)v40 + 26) & 0x98) == 0x88)
            {
              ++v32;
              v41 = *v40;
              v42 = v241;
              if (v41 > v241)
                v42 = v41;
              v241 = v42;
            }
            v10 = a6;
            v17 = a3;
            v27 = v290;
          }
          else
          {
            v10 = v36;
          }
        }
      }
      v30 += 3;
    }
    while (v30 != 15);
    v43 = v31 > 1 && v32 == v31;
    v22 = v43;
  }
  v44 = v25 + (int)v307 * (uint64_t)((int)a3 - v16);
  v304 = (_QWORD *)(v11 + 1576);
  v248 = v22 & (v29 >> 1);
  v240 = v22 & (v29 >> 2);
  v45 = *(_DWORD *)(v11 + 216);
  v308 = v11;
  if (v45 < 1)
  {
    sub_1C97C3254(v11, a2, v17, a5, v10, a7, (uint64_t *)&v332, (uint64_t *)&v330);
  }
  else
  {
    v46 = *(_QWORD *)(v11 + 14848);
    v47 = 1 << (*(_BYTE *)(v46 + 2112) - 1);
    v48 = v10 + a2;
    v49 = a7 + v17;
    v50 = a7 + v17 - 1;
    if (a2 == v15)
    {
      v51 = *((_QWORD *)a5 + 15);
      *(_QWORD *)&v335 = v51 + 16 * ((v49 - v16) >> 2);
      v52 = v51 + 16 * ((v50 - v16) >> 2);
    }
    else
    {
      if (((word_1C986E238[(((*(unsigned __int8 *)(v46 + 2117) - 1) & v50) - *(unsigned __int8 *)(v46 + 2117) + 64) >> 2] >> ((int)((*(unsigned __int8 *)(v46 + 2117) - 1) & a2) >> 2)) & 1) != 0)
      {
        v54 = *((_QWORD *)a5 + 12);
        v55 = (unint64_t)*a5 >> 2;
        v56 = (uint64_t)(int)(~v15 + a2) >> 2;
        v57 = v54 + 16 * (v56 + (int)v55 * (uint64_t)((v49 - v16) >> 2));
      }
      else
      {
        v57 = 0;
        v55 = (unint64_t)*a5 >> 2;
        v56 = (uint64_t)(int)(~v15 + a2) >> 2;
        v54 = *((_QWORD *)a5 + 12);
      }
      *(_QWORD *)&v335 = v57;
      v52 = v54 + 16 * (v56 + (int)v55 * (uint64_t)((v50 - v16) >> 2));
    }
    v58 = v48 - v47;
    *((_QWORD *)&v335 + 1) = v52;
    if ((_DWORD)v17 == v16)
    {
      v59 = *((_QWORD *)a5 + 16);
      *(_QWORD *)&v333 = v59 + 16 * ((v48 - v15) >> 2);
      *((_QWORD *)&v333 + 1) = v59 + 16 * ((v58 - v15) >> 2);
      v60 = v59 + 16 * (((int)v18 >> 2) - 1);
    }
    else
    {
      v61 = *(unsigned __int8 *)(v46 + 2117);
      v62 = (((v61 - 1) & (v48 - 1)) - v61 + 64) >> 2;
      v63 = word_1C9860C64[(int)((v61 - 1) & v17) >> 2];
      v64 = *a5;
      if (((v63 >> v62) & 1) != 0)
      {
        v65 = ~v16 + v17;
        v66 = *((_QWORD *)a5 + 12);
        v67 = v65 >> 2;
        v68 = (uint64_t)v65 >> 2;
        v69 = (v64 >> 2) * (uint64_t)v67;
        v70 = v66 + 16 * (((uint64_t)(v48 - v15) >> 2) + v69);
      }
      else
      {
        v70 = 0;
        v71 = ~v16 + v17;
        v72 = v71 >> 2;
        v68 = (uint64_t)v71 >> 2;
        v69 = (int)(v64 >> 2) * (uint64_t)v72;
        v66 = *((_QWORD *)a5 + 12);
      }
      *(_QWORD *)&v333 = v70;
      *((_QWORD *)&v333 + 1) = v66 + 16 * (v69 + ((v58 - v15) >> 2));
      if (a2 == v15)
        v60 = *((_QWORD *)a5 + 15) + 16 * v68;
      else
        v60 = *((_QWORD *)a5 + 12) + 16 * (v69 + ((int)(a2 - v15 - v47) >> 2));
    }
    v334 = v60;
    if (v45 == 2)
    {
      v73 = 0;
      v74 = *(unsigned __int8 *)(v46 + 2117);
      v75 = v17 - 1;
      v76 = v74 - 1;
      v77 = a2 - 1;
      if (((word_1C986E238[(int)((v76 & (v17 - 1 + a7)) - v74 + 64) >> 2] >> ((int)(v76 & a2) >> 2)) & 1) != 0
        && ((v49 | v77) & 0x80000000) == 0)
      {
        v78 = *(_QWORD *)(v12 + 8);
        if (*(_DWORD *)(v78 + 520) < (signed int)a2 || *(_DWORD *)(v78 + 524) <= v49)
          v73 = 0;
        else
          v73 = *(_QWORD *)(v78 + 904) + 4 * (*(_QWORD *)(v78 + 848) * ((uint64_t)v49 >> 2) + (v77 >> 2));
      }
      v328 = v73;
      if ((v50 | v77) < 0
        || (v79 = *(_QWORD *)(v12 + 8), *(_DWORD *)(v79 + 520) < (signed int)a2)
        || *(_DWORD *)(v79 + 524) < v49)
      {
        v80 = 0;
      }
      else
      {
        v80 = *(_QWORD *)(v79 + 904) + 4 * (*(_QWORD *)(v79 + 848) * ((uint64_t)v50 >> 2) + (v77 >> 2));
      }
      v81 = 0;
      v329 = v80;
      if (((word_1C9860C64[(int)(v76 & v17) >> 2] >> (((v76 & (v77 + (int)v10)) - v74 + 64) >> 2)) & 1) != 0
        && ((v48 | v75) & 0x80000000) == 0)
      {
        v82 = *(_QWORD *)(v12 + 8);
        if (*(_DWORD *)(v82 + 520) <= v48 || *(_DWORD *)(v82 + 524) <= v75)
          v81 = 0;
        else
          v81 = *(_QWORD *)(v82 + 904) + 4 * (*(_QWORD *)(v82 + 848) * ((uint64_t)v75 >> 2) + (v48 >> 2));
      }
      v83 = a2 - v47;
      v325 = v81;
      if ((v58 | v75) < 0
        || (v84 = *(_QWORD *)(v12 + 8), *(_DWORD *)(v84 + 520) <= v58)
        || *(_DWORD *)(v84 + 524) <= v75)
      {
        v85 = 0;
      }
      else
      {
        v85 = *(_QWORD *)(v84 + 904) + 4 * (*(_QWORD *)(v84 + 848) * ((uint64_t)v75 >> 2) + (v58 >> 2));
      }
      v326 = v85;
      if ((v83 | v75) < 0
        || (v86 = *(_QWORD *)(v12 + 8), *(_DWORD *)(v86 + 520) <= v83)
        || *(_DWORD *)(v86 + 524) <= v75)
      {
        v87 = 0;
      }
      else
      {
        v87 = *(_QWORD *)(v86 + 904) + 4 * (*(_QWORD *)(v86 + 848) * ((uint64_t)v75 >> 2) + (v83 >> 2));
      }
      v327 = v87;
    }
    v332 = v335;
    HIDWORD(v53) = DWORD1(v333);
    v330 = v333;
    v331 = v60;
  }
  v252 = 0;
  v255 = 0;
  v243 = 0;
  v88 = v24 + v44 * v23;
  v89 = 0;
  v306 = v88;
  v239 = v11 + 25128;
  v285 = v11 + 25544;
  v287 = (_QWORD *)(v27 + 16);
  v228 = __clz(__rbit32(v10));
  v268 = v228 - 2;
  v284 = &v318;
  v91 = (int)v10 > 4 && (_DWORD)v10 == a7;
  v254 = v91;
  v244 = (unsigned int *)(v11 + 13896);
  v245 = v11 + 1592;
  v237 = -1;
  v92 = v234;
  v256 = 1;
  v246 = -1;
  v253 = -1;
  do
  {
    v312 = 0uLL;
    *(_QWORD *)&v313 = -1;
    v93 = v12 + 24 * v89;
    v94 = *(unsigned int **)(v93 + 5192);
    if (v94 == *(unsigned int **)(v93 + 5200))
    {
      v169 = 0;
      v125 = 0;
      v276 = 0;
      goto LABEL_179;
    }
    v273 = 0;
    v251 = 0;
    v274 = 0;
    v276 = 0;
    v266 = v89 ^ 1;
    v283 = (int *)(v27 + 4 * v89 + 4);
    v249 = (int *)&v311 + v89 + 1;
    v262 = (_BYTE *)(v11 + 1576 + v89 + 12690);
    v95 = v11 + 1576 + 4 * v89;
    v260 = (_DWORD *)(v95 + 12692);
    v258 = (_DWORD *)(v95 + 12700);
    v270 = -1;
    v272 = -1;
    v277 = v89;
    while ((v276 & 1) == 0 || (int)v94[2] <= v255)
    {
      v279 = v94;
      v96 = *v94;
      *(_DWORD *)(v27 + 40) = 0;
      *v287 = 0;
      v287[1] = 0;
      *(_QWORD *)(v27 + 32) = -1;
      *(_WORD *)(v27 + 44) = 2;
      v97 = *(_QWORD *)(*(_QWORD *)(v11 + 14520) + (v89 << 8) + 16 * (int)v96 + 1672);
      *v262 = v96;
      *v260 = *(_DWORD *)(v97 + 520);
      *v258 = *(_DWORD *)(v97 + 524);
      *(_BYTE *)(*(_QWORD *)(v11 + 1584) + v89) = v96;
      v98 = (int)v96;
      *(_BYTE *)(*(_QWORD *)(v11 + 1584) + v266) = 15;
      *(_BYTE *)(v27 + v89) = v96;
      *(_BYTE *)(v27 + v266) = 15;
      v99 = v17;
      v288 = v96;
      v302 = (__int32 *)(v11 + 208 * v89 + 52 * (int)v96 + 25128);
      sub_1C974ECB8(*(_QWORD *)(v11 + 14840), a2, v17, v89, v96, v10, a7, v302, &v332, (uint64_t)&v330, 1);
      v281 = v98;
      if (((v233 != 0) & v252) != 0)
      {
        v317 = *(_BYTE *)(v27 + 1);
        v294 = *(_QWORD *)(v11 + 14440);
        v296 = *(_QWORD *)(v11 + 14432);
        v291 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 14528)
                                                                                             + 8 * v268
                                                                                             + 216);
        v319 = 0;
        v320 = 0;
        v321 = -1;
        v323 = 1;
        v100 = (_BYTE *)(v11 + 208 * v89 + 52 * (int)v98 + 25176);
        v101 = v11;
        if (*v100)
        {
          v102 = 0;
          v103 = 0;
          v104 = (_DWORD *)(v239 + 52 * (int)v98);
          v105 = (uint64_t *)&v336[24 * (int)v98];
          v106 = (uint64_t)v302;
          while (1)
          {
            v107 = *(_DWORD *)(v106 + 4 * v102);
            v318 = v107;
            v322 = 1;
            if (v107 == *v104)
            {
              v108 = *v105;
            }
            else
            {
              if (v107 != v104[1])
              {
                v299 = v103;
                sub_1C979DC5C((uint64_t)v304, a2, a3, a6, a7, 1u, (__int16 *)&v318);
                sub_1C979CBC8((uint64_t)v304, (uint64_t)&v316, a2, a3, a6, a7, v307, v306, 1);
                v106 = (uint64_t)v302;
                v27 = v290;
                v110 = v291(a6, a7, v296, v294, v306, v307);
                v103 = v299;
                v101 = v308;
                v108 = v110;
                v319 = v110;
                v109 = v322;
                goto LABEL_90;
              }
              v108 = v105[1];
            }
            v319 = v108;
            v109 = 1;
LABEL_90:
            v321 = ((*(unsigned __int16 *)(*(_QWORD *)(v101 + 14528) + 2 * v323 + 152) * (unint64_t)v109) >> (8 * (v323 == 0)))
                 + v108;
            if (v321 < *(_QWORD *)(v27 + 32))
            {
              v318 = v107;
              *(_BYTE *)(v27 + 1) = v317;
              *(_DWORD *)(v27 + 8) = v107;
              *(_QWORD *)(v27 + 16) = v319;
              *(_DWORD *)(v27 + 40) = v322;
              *(_QWORD *)(v27 + 32) = v321;
              v103 = v102;
            }
            if (++v102 >= (unint64_t)*v100)
              goto LABEL_96;
          }
        }
        v103 = 0;
        v106 = (uint64_t)v302;
LABEL_96:
        if (*(_QWORD *)(v27 + 32) < v253)
        {
          v242 = *(_BYTE *)(v27 + 1);
          v236 = *(_DWORD *)(v27 + 8);
          v237 = v103;
          v253 = *(_QWORD *)(v27 + 32);
        }
        *(_DWORD *)(v27 + 40) = 0;
        *v287 = 0;
        v287[1] = 0;
        *(_QWORD *)(v27 + 32) = -1;
        *(_WORD *)(v27 + 44) = 2;
        v10 = a6;
        v99 = a3;
        v89 = v277;
        v98 = v281;
      }
      else
      {
        v101 = v11;
        v106 = (uint64_t)v302;
      }
      v111 = *(_OWORD *)v106;
      v112 = *(_OWORD *)(v106 + 16);
      v113 = *(_OWORD *)(v106 + 32);
      *(_DWORD *)(v285 + 48) = *(_DWORD *)(v106 + 48);
      *(_OWORD *)(v285 + 16) = v112;
      *(_OWORD *)(v285 + 32) = v113;
      *(_OWORD *)v285 = v111;
      v114 = *(_DWORD *)(v101 + 216);
      if (((v250 != 0) & v252) != 0)
      {
        if (v114 == 2)
        {
          v115 = *(_QWORD *)(v308 + 14840);
          v116 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *, uint64_t *, uint64_t *, uint64_t))(v115 + 5304);
          v117 = *(_QWORD *)(v115 + 5312);
          v118 = (_QWORD *)(v115 + (v117 >> 1));
          if ((v117 & 1) != 0)
            v116 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *, uint64_t *, uint64_t *, uint64_t))(*v118 + v116);
          v116(v118, a2, v99, v288, v10, a7, &v335, &v333, &v328, &v325, v285);
        }
        sub_1C979DCE0(v304, a2, v99, v10, a7, 1u, v285, v106, v307, v306, v27, &v315, 0);
        v119 = *v283;
        v120 = v315;
        v121 = *(_DWORD *)(v106 + 4 * v315);
        *(_DWORD *)(v27 + 40) = 0;
        *v287 = 0;
        v287[1] = 0;
        *(_QWORD *)(v27 + 32) = -1;
        *(_WORD *)(v27 + 44) = 2;
        *(_DWORD *)(*(_QWORD *)(v308 + 1584) + 4 * v89 + 4) = (((v119 - ((v119 >> 15) & 0x10001)) & 0xFFFEFFFE) + 131074) & 0xFFFCFFFC;
        if (v247)
        {
          if (v250 == 2)
          {
            LODWORD(v122) = v288;
          }
          else
          {
            if (*(_DWORD *)(*(_QWORD *)(v308 + 1584) + 4 * v89 + 4) != v324[v98 + 16])
              goto LABEL_130;
            LODWORD(v122) = v288;
            if (v121 != v324[v98])
              goto LABEL_130;
          }
        }
        else
        {
          if ((int)v235 < 1)
            goto LABEL_130;
          v122 = 0;
          v135 = *(_QWORD *)(v308 + 14840);
          v136 = *(_DWORD *)(*(_QWORD *)(v135 + 16 * v98 + 1928) + 1024);
          v137 = v135 + 1672;
          while (*(_DWORD *)(*(_QWORD *)v137 + 1024) != v136
               || v250 != 2
               && (*(_DWORD *)(*(_QWORD *)(v308 + 1584) + 4 * v89 + 4) != v324[v122 + 16] || v121 != v324[v122]))
          {
            ++v122;
            v137 += 16;
            if (v235 == v122)
              goto LABEL_130;
          }
        }
        if ((v122 & 0x80000000) == 0)
        {
          *v283 = *(_DWORD *)&v359[64 * v266 + 4 * v122];
          *(_QWORD *)(v27 + 16) = *(_QWORD *)&v349[128 * v266 + 8 * v122];
          v123 = sub_1C979E1E8(v106, v27, v89, v120);
          v11 = v308;
          v124 = v362[v89];
          v315 = v123;
          v43 = v124 - 1 == (_DWORD)v288;
          v125 = *(_DWORD *)(v27 + 40) + v288;
          if (!v43)
            ++v125;
          *(_DWORD *)(v27 + 40) = v125;
          v126 = *(_QWORD *)(v27 + 16);
          v127 = ((*(unsigned __int16 *)(v308 + 2 * *(__int16 *)(v27 + 44) + 1152) * (unint64_t)v125) >> (8 * (*(_WORD *)(v27 + 44) == 0)))
               + v126;
          *(_QWORD *)(v27 + 32) = v127;
          v10 = a6;
          v17 = a3;
          goto LABEL_159;
        }
      }
      else
      {
        if (v114 == 2 || (v256 & (v114 == 1)) != 0)
        {
          v128 = *(_QWORD *)(v308 + 14840);
          v129 = v128 + 16 * v89;
          v130 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *, uint64_t *, uint64_t *, uint64_t))(v129 + 5288);
          v131 = *(_QWORD *)(v129 + 5296);
          v132 = (_QWORD *)(v128 + (v131 >> 1));
          if ((v131 & 1) != 0)
            v130 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *, uint64_t *, uint64_t *, uint64_t))(*v132 + v130);
          v130(v132, a2, v99, v288, v10, a7, &v335, &v333, &v328, &v325, v285);
        }
        v133 = &v336[24 * (int)v98];
        if ((v252 & 1) != 0)
          v133 = 0;
        sub_1C979DCE0(v304, a2, v99, v10, a7, v89, v285, v106, v307, v306, v27, &v315, (uint64_t)v133);
        v134 = *v283;
        v121 = *(_DWORD *)(v106 + 4 * v315);
        *(_DWORD *)(v27 + 40) = 0;
        *v287 = 0;
        v287[1] = 0;
        *(_QWORD *)(v27 + 32) = -1;
        *(_WORD *)(v27 + 44) = 2;
        *(_DWORD *)(*(_QWORD *)(v308 + 1584) + 4 * v89 + 4) = (((v134 - ((v134 >> 15) & 0x10001)) & 0xFFFEFFFE) + 131074) & 0xFFFCFFFC;
        if ((v256 & 1) != 0)
        {
          v324[v98 + 16] = *(_DWORD *)(*(_QWORD *)(v308 + 1584) + 4);
          v324[v98] = v121;
        }
      }
LABEL_130:
      v297 = *(_QWORD *)(v308 + 14432);
      v300 = *(_QWORD *)(v308 + 14440);
      v138 = *(_QWORD *)(v308 + 14528) + 8 * v268;
      v292 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 216);
      v295 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v138 + 528);
      v139 = *(_QWORD *)(v308 + 1584);
      *(_DWORD *)(v139 + 40) = 0;
      *(_QWORD *)(v139 + 16) = 0;
      *(_QWORD *)(v139 + 24) = 0;
      *(_QWORD *)(v139 + 32) = -1;
      *(_WORD *)(v139 + 44) = 1;
      v140 = (__int16 *)(*(_QWORD *)(v308 + 1584) + 4 * v89);
      v141 = v140[2];
      v140 += 2;
      v142 = v140[1];
      sub_1C979DC5C((uint64_t)v304, a2, a3, a6, a7, v89, v140);
      sub_1C979CBC8((uint64_t)v304, *(_QWORD *)(v308 + 1584), a2, a3, a6, a7, v307, v306, v89);
      v143 = v141;
      v144 = v141 - (__int16)v121;
      if ((v144 + 64) >= 0x80)
      {
        if (v144 >= 0)
          v146 = v144;
        else
          v146 = -v144;
        v145 = 63 - 2 * __clz((v144 < 1) | (2 * v146));
      }
      else
      {
        v145 = byte_1C9858728[v144 + 64];
      }
      v147 = v142 - (v121 >> 16);
      if ((v147 + 64) >= 0x80)
      {
        if (v147 >= 0)
          v149 = v142 - (v121 >> 16);
        else
          v149 = (v121 >> 16) - v142;
        v148 = 63 - 2 * __clz((v147 < 1) | (2 * v149));
      }
      else
      {
        v148 = byte_1C9858728[v147 + 64];
      }
      *(_DWORD *)(*(_QWORD *)(v308 + 1584) + 40) = v148 + v145;
      if (v254)
      {
        if (*(_QWORD *)(v308 + 14240))
          v150 = *(unsigned int **)(v308 + 14240);
        else
          v150 = v244;
        v151 = v295(v297, v300, v306, v307, v150);
        v152 = *(_QWORD *)(v308 + 1584);
        *(_QWORD *)(v152 + 16) = v151;
        if (*(_QWORD *)(v308 + 14240))
          v153 = *(unsigned int **)(v308 + 14240);
        else
          v153 = v244;
        sub_1C9798050(v245, (char *)v152, v153);
        v154 = *(_QWORD *)(v308 + 1584);
        v155 = *(_QWORD *)(v154 + 16);
      }
      else
      {
        v155 = v292(a6, a7, v297, v300, v306, v307);
        v154 = *(_QWORD *)(v308 + 1584);
        *(_QWORD *)(v154 + 16) = v155;
      }
      v17 = a3;
      v156 = ((*(unsigned __int16 *)(*(_QWORD *)(v308 + 14528) + 2 * *(__int16 *)(v154 + 44) + 152)
             * (unint64_t)*(unsigned int *)(v154 + 40)) >> (8 * (*(_WORD *)(v154 + 44) == 0)))
           + v155;
      *(_QWORD *)(v154 + 32) = v156;
      v98 = v281;
      if (v156 < *(_QWORD *)(*(_QWORD *)(v308 + 1576) + 32))
      {
        v157 = v154 + 4 * v277;
        *(_WORD *)(v157 + 4) = v143;
        *(_WORD *)(v157 + 6) = v142;
        v158 = *(_QWORD *)(v308 + 1584);
        v159 = *(_QWORD *)(v308 + 1576);
        *(_BYTE *)(v159 + v277) = *(_BYTE *)(v158 + v277);
        *(_DWORD *)(v159 + 4 * v277 + 4) = *(_DWORD *)(v158 + 4 * v277 + 4);
        *(_QWORD *)(v159 + 16) = *(_QWORD *)(v158 + 16);
        *(_DWORD *)(v159 + 40) = *(_DWORD *)(v158 + 40);
        *(_QWORD *)(v159 + 32) = *(_QWORD *)(v158 + 32);
      }
      v160 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v308 + 14760);
      v161 = *(_QWORD *)(v308 + 14768);
      v162 = (_QWORD *)((char *)v304 + (v161 >> 1));
      if ((v161 & 1) != 0)
        v160 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*v162 + v160);
      v89 = v277;
      v160(v162, a2, a3);
      sub_1C979E0C8(*(_QWORD *)(v308 + 14528), (uint64_t)v302, v27, (unsigned int *)&v315, v277);
      v11 = v308;
      v125 = *(_DWORD *)(v27 + 40) + v288;
      if (v362[v277] - 1 != (_DWORD)v288)
        ++v125;
      *(_DWORD *)(v27 + 40) = v125;
      v126 = *(_QWORD *)(v27 + 16);
      v127 = ((*(unsigned __int16 *)(v308 + 2 * *(__int16 *)(v27 + 44) + 1152) * (unint64_t)v125) >> (8 * (*(_WORD *)(v27 + 44) == 0)))
           + v126;
      *(_QWORD *)(v27 + 32) = v127;
      if (*(_BYTE *)(v308 + 204))
      {
        LOBYTE(v123) = v315;
        v10 = a6;
LABEL_159:
        v163 = v279;
        *((_BYTE *)&v361[v89] + v98) = v123;
        *(_DWORD *)&v359[64 * v89 + 4 * v98] = *v283;
        *(_QWORD *)&v349[128 * v89 + 8 * v98] = v126;
        goto LABEL_161;
      }
      v10 = a6;
      v163 = v279;
LABEL_161:
      if (v127 >= v270)
      {
        v127 = v272;
        v126 = v273;
        v125 = v274;
      }
      else
      {
        *((_DWORD *)&v360 + v89) = v125;
        *((_BYTE *)&v311 + v89) = *(_BYTE *)(v27 + v89);
        v164 = *v283;
        *v249 = *v283;
        *((_BYTE *)&v314 + v89 + 2) = v315;
        v165 = v248;
        if (v248)
        {
          v166 = *(_DWORD *)(v308 + 14320);
          if ((__int16)v164 > v166 >> 16)
            goto LABEL_173;
          if ((__int16)v164 < (__int16)v166)
            goto LABEL_173;
          v167 = *(_DWORD *)(v308 + 14324);
          if (v164 >> 16 < (__int16)v167)
            goto LABEL_173;
          v165 = v164 >> 16 > v167 >> 16;
        }
        v168 = v240;
        if (v126 < v241)
          v168 = 0;
        if (v165 || v168)
        {
LABEL_173:
          v246 = v163[1];
          v255 = v163[2];
          v276 = 1;
          v251 = v126;
          v270 = v127;
          v243 = v164;
          goto LABEL_174;
        }
        v276 = 0;
        v251 = v126;
        v270 = v127;
      }
LABEL_174:
      v94 = v163 + 3;
      v12 = *(_QWORD *)(v308 + 14840);
      v272 = v127;
      v273 = v126;
      v274 = v125;
      if (v94 == *(unsigned int **)(v12 + 24 * v89 + 5200))
        goto LABEL_178;
    }
    v276 = 1;
    v127 = v272;
    v126 = v273;
    v125 = v274;
LABEL_178:
    *(_QWORD *)&v312 = v126;
    *(_QWORD *)&v313 = v127;
    v92 = *(unsigned __int8 *)(v11 + 204);
    v169 = v251;
LABEL_179:
    if (v92)
      v170 = v125 + 3;
    else
      v170 = v125 + 1;
    v171 = &v350[4 * v89];
    v172 = *v171 + v169;
    *v171 = v172;
    v173 = *((_DWORD *)v171 + 6) + v170;
    *((_DWORD *)v171 + 6) = v173;
    v171[2] = ((*(unsigned __int16 *)(v11 + 2 * *((__int16 *)v171 + 14) + 1152) * (unint64_t)v173) >> (8 * (*((_WORD *)v171 + 14) == 0)))
            + v172;
    if ((v234 == 0) | v252 & 1)
      break;
    v256 = 0;
    v252 = 1;
    v89 = 1;
  }
  while ((v276 & 1) == 0);
  WORD6(v313) = 2;
  DWORD2(v313) = v170;
  v174 = v356;
  v175 = v351;
  if (v233)
    v176 = 0;
  else
    v176 = v356 >= v351;
  v177 = !v176;
  if (!v92)
  {
LABEL_205:
    v286 = 0;
    v180 = 0;
LABEL_210:
    v181 = -1;
    v182 = v236;
    goto LABEL_211;
  }
  if ((int)v10 >= 8 && (int)a7 > 7)
  {
    if (v233)
    {
      v178 = 1;
      goto LABEL_198;
    }
LABEL_197:
    v178 = *(char *)(*(_QWORD *)(v12 + 4760) + 235);
    goto LABEL_198;
  }
  v179 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 14848) + 2113) - a4;
  v178 = v179 != 3;
  if (!v233 && v179 != 3)
    goto LABEL_197;
LABEL_198:
  if (v178 >= 1 && (v238 & 1) != 0 && !*(_BYTE *)(v11 + a4 + 205))
    v178 = 0;
  if (v178 < 1 || (v238 & 2) == 0)
  {
    if (v178 >= 1)
      goto LABEL_207;
    goto LABEL_205;
  }
  if (9 * v350[4 * (v356 < v351)] / 0xAuLL
     + *(unsigned __int16 *)(v11 + 1156)
     * (unint64_t)(2 * *(_DWORD *)((unint64_t)&v360 | (4 * (v356 < v351))) + 2) >= v350[4 * (v356 < v351) + 2])
    goto LABEL_205;
LABEL_207:
  if (v233 && v237 < 0)
  {
    v286 = 0;
    v180 = 0;
    LOBYTE(v314) = BYTE2(v314);
    BYTE1(v314) = v237;
    goto LABEL_210;
  }
  v257 = v356;
  v259 = v351;
  if (v233)
  {
    *(_BYTE *)(v27 + 1) = v242;
    v195 = v236;
    *(_DWORD *)(v27 + 8) = v236;
    *(_QWORD *)(v27 + 16) = 0;
    *(_DWORD *)(v27 + 40) = 0;
    *(_QWORD *)(v27 + 32) = -1;
    v196 = v242;
    if (v227 - 1 != v242)
      v196 = v242 + 1;
    HIDWORD(v360) = v196 + 1;
  }
  else
  {
    v197 = v312;
    *(_OWORD *)v27 = v311;
    *(_OWORD *)(v27 + 16) = v197;
    HIDWORD(v53) = DWORD1(v313);
    *(_OWORD *)(v27 + 32) = v313;
    v195 = v236;
  }
  v198 = 0;
  v286 = 0;
  v275 = 0;
  v280 = 0;
  v199 = HIBYTE(v314);
  if (v233)
    v199 = v237;
  LOBYTE(v314) = BYTE2(v314);
  v269 = v177 ^ 1;
  LODWORD(v53) = v195;
  v282 = v53;
  BYTE1(v314) = v199;
  v200 = v228 - 3;
  if (!(_DWORD)v10)
    v200 = -3;
  v265 = (void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v11 + 8 * v200 + 14792);
  v267 = (int)v10;
  v261 = v11 + 25128;
  v264 = (int)v17;
  v278 = 2;
  v303 = -1;
  v263 = v178;
  while (2)
  {
    v271 = v198;
    v201 = v27;
    if (v178 == 1)
      v202 = v269;
    else
      v202 = v198 & 1;
    v203 = v10;
    v204 = v202 ^ 1;
    v205 = (_DWORD *)((unint64_t)&v360 | (4 * (v202 ^ 1)));
    *(_DWORD *)(v11 + 14248) = *v205;
    sub_1C979CBC8((uint64_t)v304, v201, a2, v17, v203, a7, v307, v306, v202 ^ 1);
    (*v265)(a7, v231, **((_QWORD **)a5 + 3)+ (*((_QWORD *)a5 + 4) - *((int *)a5 + 1) + (int)a2 + (v264 - *((int *)a5 + 2)) * a5[1])* *(int *)(*((_QWORD *)a5 + 3) + 16), v307, v306, v267, *(_QWORD *)(v308 + 14448));
    v11 = v308;
    *(_QWORD *)(v308 + 14432) = *(_QWORD *)(v308 + 14448);
    *(_QWORD *)(v308 + 14440) = v267;
    *(_BYTE *)(*(_QWORD *)(v308 + 1584) + v204) = *(_BYTE *)(v201 + v204);
    *(_DWORD *)(*(_QWORD *)(v308 + 1584) + 4 * v204 + 4) = *(_DWORD *)(v201 + 4 * v204 + 4);
    v206 = v362[v202];
    if ((int)v206 >= 1)
    {
      v207 = 0;
      v298 = (_DWORD *)(v201 + 4 * v202 + 4);
      v208 = v308 + 1576 + 4 * v202;
      v293 = (_DWORD *)(v208 + 12692);
      v289 = (_DWORD *)(v208 + 12700);
      v209 = (v202 << 8) | 0x688;
      v210 = v261 + 208 * v202;
      v211 = &v361[v202];
      v212 = &v359[64 * v202];
      do
      {
        if ((v238 & 4) == 0 || !v207 || v207 == *(char *)((unint64_t)&v311 | v202))
        {
          v213 = *(_DWORD *)&v212[4 * v207];
          if (!(v248 | v240))
            goto LABEL_246;
          v214 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v308 + 14840) + v209) + 1024);
          if ((v276 & 1) != 0)
          {
            v213 = v243;
            if (v214 == v246)
              goto LABEL_246;
          }
          else if (v214 != v246)
          {
LABEL_246:
            *(_DWORD *)(v290 + 40) = 0;
            *v287 = 0;
            v287[1] = 0;
            *(_QWORD *)(v290 + 32) = -1;
            *(_WORD *)(v290 + 44) = 2;
            v215 = *(_QWORD *)(*(_QWORD *)(v308 + 14520) + v209);
            *(_BYTE *)(v308 + 14266 + v202) = v207;
            *v293 = *(_DWORD *)(v215 + 520);
            *v289 = *(_DWORD *)(v215 + 524);
            *(_BYTE *)(*(_QWORD *)(v308 + 1584) + v202) = v207;
            *(_BYTE *)(v290 + v202) = v207;
            v216 = *(unsigned int *)(v210 + 4 * *((unsigned __int8 *)v211 + v207));
            v315 = *((unsigned __int8 *)v211 + v207);
            *(_DWORD *)(*(_QWORD *)(v308 + 1584) + 4 * v202 + 4) = (((v213 - ((v213 >> 15) & 0x10001)) & 0xFFFEFFFE)
                                                                  + 131074) & 0xFFFCFFFC;
            v217 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, int))(v308 + 14776);
            v218 = *(_QWORD *)(v308 + 14784);
            v219 = (_QWORD *)((char *)v304 + (v218 >> 1));
            if ((v218 & 1) != 0)
              v217 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, int))(*v219 + v217);
            LOBYTE(v226) = 1;
            v217(v219, a2, a3, a6, a7, v202, v216, v307, v306, v226);
            sub_1C979E0C8(*(_QWORD *)(v308 + 14528), v210, v290, (unsigned int *)&v315, v202);
            v11 = v308;
            if ((_DWORD)v206 - 1 == v207)
              v220 = *(_DWORD *)(v290 + 40);
            else
              v220 = *(_DWORD *)(v290 + 40) + 1;
            v221 = v207 + v220 + *v205;
            *(_DWORD *)(v290 + 40) = v221;
            v222 = *(_QWORD *)(v290 + 16);
            v223 = *(__int16 *)(v290 + 44);
            v224 = ((*(unsigned __int16 *)(v308 + 2 * v223 + 1152) * (unint64_t)v221) >> (8
                                                                                               * (*(_WORD *)(v290 + 44) == 0)))
                 + v222;
            *(_QWORD *)(v290 + 32) = v224;
            v225 = v315;
            *((_BYTE *)v211 + v207) = v315;
            *(_DWORD *)&v212[4 * v207] = *v298;
            if (v224 < v303)
            {
              *(_DWORD *)((unint64_t)&v360 | (4 * v202)) = v207 + v220;
              v278 = v223;
              LOBYTE(v284) = *(_BYTE *)v290;
              v242 = *(_BYTE *)(v290 + 1);
              LOWORD(v273) = *(_WORD *)(v290 + 2);
              LODWORD(v283) = *(_DWORD *)(v290 + 4);
              v282 = *(_QWORD *)(v290 + 8);
              v275 = *(_QWORD *)(v290 + 24);
              LOWORD(v272) = *(_WORD *)(v290 + 46);
              v280 = v221;
              v303 = v224;
              v286 = v222;
              *(_BYTE *)((unint64_t)&v314 | v202) = v225;
            }
          }
        }
        ++v207;
        v209 += 16;
        v210 += 52;
      }
      while (v206 != v207);
    }
    v27 = v290;
    *(_BYTE *)v290 = (_BYTE)v284;
    *(_BYTE *)(v290 + 1) = v242;
    *(_WORD *)(v290 + 2) = v273;
    *(_DWORD *)(v290 + 4) = (_DWORD)v283;
    *(_QWORD *)(v290 + 8) = v282;
    *(_QWORD *)(v290 + 16) = v286;
    *(_QWORD *)(v290 + 24) = v275;
    v17 = a3;
    *(_QWORD *)(v290 + 32) = v303;
    *(_DWORD *)(v290 + 40) = v280;
    *(_WORD *)(v290 + 44) = v278;
    v198 = v271 + 1;
    *(_WORD *)(v290 + 46) = v272;
    v178 = v263;
    v10 = a6;
    if (v271 + 1 != v263)
      continue;
    break;
  }
  v180 = v280 + 2;
  v181 = ((*(unsigned __int16 *)(v308 + 2 * v278 + 1152) * (unint64_t)(v280 + 2)) >> (8 * (v278 == 0))) + v286;
  v182 = v282;
  v174 = v257;
  v175 = v259;
LABEL_211:
  v183 = v174 < v175;
  *(_DWORD *)(v11 + 14248) = 0;
  *(_BYTE *)(a8 + 10) = 3;
  v184 = &v350[4 * v183];
  v185 = v184[2];
  v176 = v181 >= v185;
  v186 = *(_BYTE *)(a8 + 11) & 0xBE | ((v181 < v185) << 6);
  if (v176)
  {
    if (v174 >= v175)
    {
      v191 = 16 * (BYTE2(v314) & 1);
      v192 = -18;
    }
    else
    {
      v191 = 32 * (HIBYTE(v314) & 1);
      v192 = -34;
    }
    *(_BYTE *)(a8 + 11) = v191 | v186 & v192;
    *(_BYTE *)(a8 + 8 + v183) = 16 * *(_BYTE *)((unint64_t)&v311 | v183);
    v187 = (_DWORD *)(a8 + 4 * v183);
    *v187 = *(_DWORD *)(((unint64_t)&v311 | (4 * v183)) + 4);
    *(_DWORD *)(a8 + 4 * (v174 >= v175)) = 0;
    v194 = (_BYTE *)(a8 + 9);
    if (v174 < v175)
      v194 = (_BYTE *)(a8 + 8);
    *v194 = -16;
    *(_QWORD *)a9 = *v184;
    *(_DWORD *)(a9 + 24) = *(&v352 + 8 * v183);
    v189 = v11 + 208 * (v174 < v175) + 52 * ((unint64_t)*(unsigned __int8 *)(a8 + 8 + v183) >> 4) + 25128;
    v190 = *(unsigned __int8 *)(((unint64_t)&v314 + 2) | v183);
    return *v187 == *(_DWORD *)(v189 + 4 * v190);
  }
  else
  {
    *(_BYTE *)(a8 + 11) = v186 & 0xCE | (16 * (v314 & 1)) & 0xDF | (32 * (BYTE1(v314) & 1));
    *(_BYTE *)(a8 + 8) = 16 * (_BYTE)v284;
    *(_BYTE *)(a8 + 9) = 16 * v242;
    *(_DWORD *)a8 = (_DWORD)v283;
    *(_DWORD *)(a8 + 4) = v182;
    v187 = (_DWORD *)(a8 + 4);
    *(_QWORD *)a9 = v286;
    *(_DWORD *)(a9 + 24) = v180;
    v188 = *(unsigned __int8 *)(a8 + 11);
    if (*(_DWORD *)a8 == *(_DWORD *)(v239
                                    + 52 * ((unint64_t)*(unsigned __int8 *)(a8 + 8) >> 4)
                                    + 4 * ((v188 >> 4) & 1)))
    {
      v189 = v11 + 52 * ((unint64_t)*(unsigned __int8 *)(a8 + 9) >> 4) + 25336;
      v190 = (v188 >> 5) & 1;
      return *v187 == *(_DWORD *)(v189 + 4 * v190);
    }
    return 0;
  }
}

uint64_t sub_1C97D62D8(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5)
{
  __n128 v10;
  uint64_t v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 88))(*(_QWORD *)(a1 + 944));
  sub_1C97C6D7C(a1, a2, a3, a5, 1, 0, *(_BYTE *)(a1 + 29745), 1, 0);
  sub_1C97CC06C(a1, a2, a3, a4, 0, 0, 1, v10);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 80))(*(_QWORD *)(a1 + 944));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 944) + 96))(*(_QWORD *)(a1 + 944));
  return v11;
}

BOOL sub_1C97D63A0(__int16 *a1, __int16 *a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v9;
  _BOOL4 v10;
  int v12;
  int v13;

  v3 = *((unsigned __int8 *)a1 + 8) >> 4;
  if (v3 != *((unsigned __int8 *)a2 + 8) >> 4)
    return 0;
  v4 = *((unsigned __int8 *)a1 + 9) >> 4;
  if (v4 != *((unsigned __int8 *)a2 + 9) >> 4)
    return 0;
  if (v3 == 15)
    goto LABEL_7;
  v5 = *a1 - *a2;
  if (v5 < 0)
    v5 = *a2 - *a1;
  if (v5 > a3)
  {
LABEL_7:
    v6 = 0;
  }
  else
  {
    v7 = a1[1] - a2[1];
    if (v7 < 0)
      v7 = a2[1] - a1[1];
    v6 = v7 <= a3;
  }
  if (v3 != 15 && !v6)
    return 0;
  if (v4 == 15)
    goto LABEL_19;
  v9 = a1[2] - a2[2];
  if (v9 < 0)
    v9 = a2[2] - a1[2];
  if (v9 > a3)
  {
LABEL_19:
    v10 = 0;
  }
  else
  {
    v12 = a1[3] - a2[3];
    if (v12 < 0)
      v12 = a2[3] - a1[3];
    v10 = v12 <= a3;
  }
  v13 = v4 == 15 || v10;
  return v13 != 0;
}

uint64_t sub_1C97D6470(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = 0;
  v42 = 0;
  LODWORD(v8) = a8 - 1;
  if (a8)
    v8 = v8;
  else
    v8 = 0;
  if (a8)
    v9 = 3;
  else
    v9 = 2;
  v10 = a3 >> v9;
  v11 = a4 >> v9;
  v12 = v10 * v11;
  v13 = v10 << (a8 != 0);
  if (a8)
    v14 = 2;
  else
    v14 = 1;
  v15 = result + v8;
  v16 = a2 + v8;
  do
  {
    v17 = v43;
    v43 += 4;
    v40 = v16;
    v41 = v15;
    do
    {
      v18 = (uint64_t *)(a7 + 48 * v17);
      v19 = v18 + 3;
      v20 = v18 + 2;
      v21 = v18 + 1;
      v22 = v18 + 4;
      if ((_DWORD)v11)
      {
        v23 = 0;
        v24 = v16;
        v25 = v15;
        do
        {
          if (v13 > v8)
          {
            v26 = 0;
            v27 = *v21;
            v28 = *v18;
            v29 = *v20;
            v30 = *v19;
            v31 = v8;
            v32 = *v22;
            do
            {
              v27 += *(unsigned __int8 *)(v24 + v26);
              *v21 = v27;
              v28 += *(unsigned __int8 *)(v25 + v26);
              *v18 = v28;
              v29 += *(unsigned __int8 *)(v25 + v26) * *(unsigned __int8 *)(v25 + v26);
              *v20 = v29;
              v30 += *(unsigned __int8 *)(v24 + v26) * *(unsigned __int8 *)(v24 + v26);
              *v19 = v30;
              result = *(unsigned __int8 *)(v25 + v26);
              v32 += *(unsigned __int8 *)(v24 + v26) * result;
              *v22 = v32;
              v31 += v14;
              v26 += v14;
            }
            while (v31 < v13);
          }
          ++v23;
          v25 += a5;
          v24 += a6;
        }
        while (v23 != (_DWORD)v11);
      }
      v33 = *v21;
      v34 = *v19 * v12 - v33 * v33;
      v35 = *v18;
      v36 = *v20 * v12 - v35 * v35;
      if (v34 < 1 || *v20 * v12 - v35 * v35 <= 0)
      {
        if (v36 <= 0 && *v19 * v12 - v33 * v33 <= 0)
          v39 = 1.0;
        else
          v39 = 0.0;
      }
      else
      {
        v39 = (double)(*v22 * v12 - v35 * v33) / sqrt((double)v34 * (double)v36);
      }
      *(float *)(a7 + 48 * v17++ + 40) = v39;
      v15 += v13;
      v16 += v13;
    }
    while (v17 != v43);
    v15 = v41 + v11 * a5;
    v16 = v40 + v11 * a6;
    ++v42;
  }
  while (v42 != 4);
  return result;
}

uint64_t sub_1C97D6680(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v49 = 0;
  v8 = 0;
  if (a8)
    v9 = (a8 - 1);
  else
    v9 = 0;
  if (a8)
    v10 = 3;
  else
    v10 = 2;
  v11 = a3 >> v10;
  v12 = a4 >> v10;
  v13 = v11 * v12;
  v14 = v11 << (a8 != 0);
  if (a8)
    v15 = 2;
  else
    v15 = 1;
  v16 = a1 + 2 * v9;
  v17 = 2 * v14;
  result = 2 * a5;
  v19 = a2 + 2 * v9;
  v45 = 2 * a6 * v12;
  v20 = 2 * a6;
  do
  {
    v48 = v8;
    v21 = v49;
    v49 += 4;
    v46 = v19;
    v47 = v16;
    do
    {
      v22 = (uint64_t *)(a7 + 48 * v21);
      v23 = v22 + 3;
      v24 = v22 + 2;
      v25 = v22 + 1;
      v26 = v22 + 4;
      if ((_DWORD)v12)
      {
        v27 = 0;
        v28 = v19;
        v29 = v16;
        do
        {
          if (v14 > v9)
          {
            v30 = 0;
            v31 = *v25;
            v32 = *v22;
            v33 = *v24;
            v34 = *v23;
            v35 = *v26;
            do
            {
              v36 = *(unsigned __int16 *)(v28 + 2 * v30);
              v31 += v36;
              v37 = *(unsigned __int16 *)(v29 + 2 * v30);
              v32 += v37;
              v33 += (v37 * v37);
              v34 += (v36 * v36);
              v35 += v37 * v36;
              v30 += v15;
            }
            while (v9 + v30 < v14);
            *v25 = v31;
            *v22 = v32;
            *v24 = v33;
            *v23 = v34;
            *v26 = v35;
          }
          ++v27;
          v29 += result;
          v28 += v20;
        }
        while (v27 != (_DWORD)v12);
      }
      v38 = *v25;
      v39 = *v23 * v13 - v38 * v38;
      v40 = *v22;
      v41 = *v24 * v13 - v40 * v40;
      if (v39 < 1 || *v24 * v13 - v40 * v40 <= 0)
      {
        if (v41 <= 0 && *v23 * v13 - v38 * v38 <= 0)
          v44 = 1.0;
        else
          v44 = 0.0;
      }
      else
      {
        v44 = (double)(*v26 * v13 - v40 * v38) / sqrt((double)v39 * (double)v41);
      }
      *(float *)(a7 + 48 * v21++ + 40) = v44;
      v16 += v17;
      v19 += v17;
    }
    while (v21 != v49);
    v8 = v48 + 1;
    v16 = v47 + 2 * a5 * v12;
    v19 = v46 + v45;
  }
  while (v48 != 3);
  return result;
}

uint64_t sub_1C97D6898(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6, double a7, int32x4_t a8, int32x4_t a9)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int32 *v23;
  uint64_t v24;
  int32x4_t v25;
  uint64_t v26;
  int v27;

  if (a4 < 1)
    return 0;
  v10 = 0;
  result = 0;
  do
  {
    if (a3 >= 1)
    {
      v12 = 0;
      v13 = a1;
      do
      {
        v14 = 0;
        *a5 = 0;
        *a6 = 0;
        v15 = 1;
        do
        {
          v16 = 0;
          v17 = v15;
          v18 = v14 * a2;
          v19 = 1;
          do
          {
            v20 = 0;
            v21 = v19;
            v22 = v16 + v18;
            v23 = (unsigned __int32 *)(v13 + v18 + v16);
            v24 = 4;
            do
            {
              a8.i32[0] = *v23;
              a8.i64[0] = vmovl_u8(*(uint8x8_t *)a8.i8).u64[0];
              v20 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)a8.i8));
              v23 = (unsigned __int32 *)((char *)v23 + a2);
              --v24;
            }
            while (v24);
            v25 = vdupq_n_s32((int)(v20 + 8) >> 4);
            v26 = 4;
            do
            {
              a9.i32[0] = *(_DWORD *)(v13 + v22);
              a9 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a9.i8));
              a8 = vabaq_s32((int32x4_t)v24, a9, v25);
              LODWORD(v24) = vaddvq_s32(a8);
              v22 += a2;
              --v26;
            }
            while (v26);
            v19 = 0;
            *a6 += v24;
            *a5 += v20;
            v16 = 4;
          }
          while ((v21 & 1) != 0);
          v15 = 0;
          v14 = 4;
        }
        while ((v17 & 1) != 0);
        ++a5;
        v27 = *a6++;
        result = (v27 + result);
        v12 += 8;
        v13 += 8;
      }
      while (v12 < a3);
    }
    a1 += 8 * a2;
    v10 += 8;
  }
  while (v10 < a4);
  return result;
}

uint64_t sub_1C97D69D0(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6, _DWORD *a7, uint64_t a8, double a9, int32x4_t a10, int32x4_t a11)
{
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unsigned __int32 *v25;
  uint64_t v26;
  signed int v27;
  int32x4_t v28;
  uint64_t v29;
  int v30;
  int v31;

  if (a4 < 1)
    return 0;
  v12 = 0;
  result = 0;
  do
  {
    if (a3 >= 1)
    {
      v14 = 0;
      v15 = a1;
      do
      {
        v16 = 0;
        *a5 = 0;
        *a6 = 0;
        v17 = 1;
        *a7 = 0;
        do
        {
          v18 = 0;
          v19 = v17;
          v20 = v16 * a2;
          v21 = 1;
          do
          {
            v22 = 0;
            v23 = v21;
            v24 = v18 + v20;
            v25 = (unsigned __int32 *)(v15 + v20 + v18);
            v26 = 4;
            do
            {
              a10.i32[0] = *v25;
              a10.i64[0] = vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
              v22 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v22, *(uint16x4_t *)a10.i8));
              v25 = (unsigned __int32 *)((char *)v25 + a2);
              --v26;
            }
            while (v26);
            v27 = (int)(v22 + 8) >> 4;
            v28 = vdupq_n_s32(v27);
            v29 = 4;
            do
            {
              a11.i32[0] = *(_DWORD *)(v15 + v24);
              a11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.i8));
              a10 = vabaq_s32((int32x4_t)v26, a11, v28);
              LODWORD(v26) = vaddvq_s32(a10);
              v24 += a2;
              --v29;
            }
            while (v29);
            v21 = 0;
            *a6 += v26;
            v30 = *(unsigned __int16 *)(a8 + 2 * v27);
            *a5 += v22;
            *a7 += (v26 * v30) >> 8;
            v18 = 4;
          }
          while ((v23 & 1) != 0);
          v17 = 0;
          v16 = 4;
        }
        while ((v19 & 1) != 0);
        ++a5;
        ++a7;
        v31 = *a6++;
        result = (v31 + result);
        v14 += 8;
        v15 += 8;
      }
      while (v14 < a3);
    }
    a1 += 8 * a2;
    v12 += 8;
  }
  while (v12 < a4);
  return result;
}

uint64_t sub_1C97D6B34(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t j;
  int v20;

  if (a4 < 1)
    return 0;
  v7 = 0;
  result = 0;
  do
  {
    if (a3 >= 1)
    {
      v9 = 0;
      v10 = a1;
      do
      {
        v11 = 0;
        v12 = 0;
        v13 = v10;
        do
        {
          for (i = 0; i != 8; ++i)
            v12 += *(unsigned __int8 *)(v13 + i);
          ++v11;
          v13 += a2;
        }
        while (v11 != 8);
        v15 = 0;
        v16 = 0;
        v18 = v10;
        do
        {
          for (j = 0; j != 8; ++j)
          {
            v17 = (v12 + 32) >> 6;
            v20 = *(unsigned __int8 *)(v18 + j) - v17;
            if (v20 < 0)
              v20 = v17 - *(unsigned __int8 *)(v18 + j);
            v16 += v20;
          }
          ++v15;
          v18 += a2;
        }
        while (v15 != 8);
        *a5++ = v12;
        *a6++ = v16;
        result = (v16 + result);
        v9 += 8;
        v10 += 8;
      }
      while (v9 < a3);
    }
    a1 += 8 * a2;
    v7 += 8;
  }
  while (v7 < a4);
  return result;
}

uint64_t sub_1C97D6C18(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, _DWORD *a6, unsigned int *a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t j;
  int v22;

  if (a4 < 1)
    return 0;
  v9 = 0;
  result = 0;
  do
  {
    if (a3 >= 1)
    {
      v11 = 0;
      v12 = a1;
      do
      {
        v13 = 0;
        v14 = 0;
        v15 = v12;
        do
        {
          for (i = 0; i != 8; ++i)
            v14 += *(unsigned __int8 *)(v15 + i);
          ++v13;
          v15 += a2;
        }
        while (v13 != 8);
        v17 = 0;
        v18 = 0;
        v19 = (v14 + 32) >> 6;
        v20 = v12;
        do
        {
          for (j = 0; j != 8; ++j)
          {
            v22 = *(unsigned __int8 *)(v20 + j) - v19;
            if (v22 < 0)
              v22 = v19 - *(unsigned __int8 *)(v20 + j);
            v18 += v22;
          }
          ++v17;
          v20 += a2;
        }
        while (v17 != 8);
        *a5++ = v14;
        *a6++ = v18;
        result = (v18 + result);
        *a7++ = (v18 * *(unsigned __int16 *)(a8 + 2 * v19)) >> 8;
        v11 += 8;
        v12 += 8;
      }
      while (v11 < a3);
    }
    a1 += 8 * a2;
    v9 += 8;
  }
  while (v9 < a4);
  return result;
}

uint64_t sub_1C97D6D14(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint16x4_t *v21;
  uint64_t v22;
  unsigned int v23;
  int32x4_t v24;
  uint64_t v25;
  int v26;

  if (a4 < 1)
    return 0;
  v7 = 0;
  result = 0;
  v9 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      v10 = 0;
      v11 = a1;
      do
      {
        v12 = 0;
        *a5 = 0;
        *a6 = 0;
        v13 = 1;
        do
        {
          v14 = 0;
          v15 = v13;
          v16 = v12 * a2;
          v17 = 1;
          do
          {
            v18 = 0;
            v19 = v17;
            v20 = 2 * (v14 + v16);
            v21 = (uint16x4_t *)(v11 + v20);
            v22 = 4;
            do
            {
              v18 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v18, *v21));
              v21 = (uint16x4_t *)((char *)v21 + v9);
              --v22;
            }
            while (v22);
            v23 = 0;
            v24 = vdupq_n_s32((int)(v18 + 8) >> 4);
            v25 = 4;
            do
            {
              v23 = vaddvq_s32(vabaq_s32((int32x4_t)v23, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v11 + v20)), v24));
              v20 += v9;
              --v25;
            }
            while (v25);
            v17 = 0;
            *a6 += v23;
            *a5 += v18;
            v14 = 4;
          }
          while ((v19 & 1) != 0);
          v13 = 0;
          v12 = 4;
        }
        while ((v15 & 1) != 0);
        ++a5;
        v26 = *a6++;
        result = (v26 + result);
        v10 += 8;
        v11 += 16;
      }
      while (v10 < a3);
    }
    v7 += 8;
    a1 += 16 * a2;
  }
  while (v7 < a4);
  return result;
}

uint64_t sub_1C97D6E4C(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6, _DWORD *a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint16x4_t *v23;
  uint64_t v24;
  signed int v25;
  int32x4_t v26;
  uint64_t v27;
  int v28;
  int v29;

  if (a4 < 1)
    return 0;
  v9 = 0;
  result = 0;
  v11 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      v12 = 0;
      v13 = a1;
      do
      {
        v14 = 0;
        *a5 = 0;
        *a6 = 0;
        v15 = 1;
        *a7 = 0;
        do
        {
          v16 = 0;
          v17 = v15;
          v18 = v14 * a2;
          v19 = 1;
          do
          {
            v20 = 0;
            v21 = v19;
            v22 = 2 * (v16 + v18);
            v23 = (uint16x4_t *)(v13 + v22);
            v24 = 4;
            do
            {
              v20 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v20, *v23));
              v23 = (uint16x4_t *)((char *)v23 + v11);
              --v24;
            }
            while (v24);
            v25 = (int)(v20 + 8) >> 4;
            v26 = vdupq_n_s32(v25);
            v27 = 4;
            do
            {
              LODWORD(v24) = vaddvq_s32(vabaq_s32((int32x4_t)v24, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v13 + v22)), v26));
              v22 += v11;
              --v27;
            }
            while (v27);
            v19 = 0;
            *a6 += v24;
            v28 = *(unsigned __int16 *)(a8 + 2 * v25);
            *a5 += v20;
            *a7 += (v24 * v28) >> 8;
            v16 = 4;
          }
          while ((v21 & 1) != 0);
          v15 = 0;
          v14 = 4;
        }
        while ((v17 & 1) != 0);
        ++a5;
        ++a7;
        v29 = *a6++;
        result = (v29 + result);
        v12 += 8;
        v13 += 16;
      }
      while (v12 < a3);
    }
    v9 += 8;
    a1 += 16 * a2;
  }
  while (v9 < a4);
  return result;
}

uint64_t sub_1C97D6FAC(uint16x4_t *a1, uint64_t a2, int a3, int a4, unsigned int *a5, unsigned int *a6)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x4_t *v12;
  unsigned int v13;
  uint16x4_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint32x4_t v17;
  uint16x4_t *v18;
  uint64_t v19;

  if (a4 < 1)
    return 0;
  v7 = 0;
  result = 0;
  v9 = 16 * a2;
  v10 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      v11 = 0;
      v12 = a1;
      do
      {
        v13 = 0;
        v14 = v12;
        v15 = 8;
        do
        {
          v13 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v13, *v14), *(uint16x8_t *)v14->i8));
          v14 = (uint16x4_t *)((char *)v14 + v10);
          --v15;
        }
        while (v15);
        v16 = 0;
        v17 = (uint32x4_t)vdupq_n_s32((v13 + 32) >> 6);
        v18 = v12;
        v19 = 8;
        do
        {
          v16 = vaddvq_s32((int32x4_t)vabaq_u32(vabaq_u32((uint32x4_t)v16, v17, vmovl_u16(*v18)), v17, vmovl_high_u16(*(uint16x8_t *)v18->i8)));
          v18 = (uint16x4_t *)((char *)v18 + v10);
          --v19;
        }
        while (v19);
        *a5++ = v13;
        *a6++ = v16;
        result = v16 + result;
        v11 += 8;
        v12 += 2;
      }
      while (v11 < a3);
    }
    v7 += 8;
    a1 = (uint16x4_t *)((char *)a1 + v9);
  }
  while (v7 < a4);
  return result;
}

uint64_t sub_1C97D7090(uint16x4_t *a1, uint64_t a2, int a3, int a4, unsigned int *a5, _DWORD *a6, unsigned int *a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint16x4_t *v14;
  unsigned int v15;
  uint16x4_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint32x4_t v19;
  uint16x4_t *v20;
  uint64_t v21;

  if (a4 < 1)
    return 0;
  v9 = 0;
  result = 0;
  v11 = 16 * a2;
  v12 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      v13 = 0;
      v14 = a1;
      do
      {
        v15 = 0;
        v16 = v14;
        v17 = 8;
        do
        {
          v15 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v15, *v16), *(uint16x8_t *)v16->i8));
          v16 = (uint16x4_t *)((char *)v16 + v12);
          --v17;
        }
        while (v17);
        v18 = (v15 + 32) >> 6;
        v19 = (uint32x4_t)vdupq_n_s32(v18);
        v20 = v14;
        v21 = 8;
        do
        {
          LODWORD(v17) = vaddvq_s32((int32x4_t)vabaq_u32(vabaq_u32((uint32x4_t)v17, v19, vmovl_u16(*v20)), v19, vmovl_high_u16(*(uint16x8_t *)v20->i8)));
          v20 = (uint16x4_t *)((char *)v20 + v12);
          --v21;
        }
        while (v21);
        *a5++ = v15;
        *a6++ = v17;
        result = (v17 + result);
        *a7++ = (v17 * *(unsigned __int16 *)(a8 + 2 * v18)) >> 8;
        v13 += 8;
        v14 += 2;
      }
      while (v13 < a3);
    }
    v9 += 8;
    a1 = (uint16x4_t *)((char *)a1 + v11);
  }
  while (v9 < a4);
  return result;
}

unint64_t sub_1C97D7188(uint16x8_t *a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, uint64_t *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x8_t *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint64_t v20;
  uint16x8_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint64_t v24;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 16 * a2;
    v10 = 2 * a2;
    do
    {
      if (a3 >= 1)
      {
        v11 = 0;
        v12 = a1;
        v13 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v14) = (a3 - (int)v11) >> 3, (int)v14 >= 1) ? (v14 = 1) : (v14 = v14),
                a3 - (int)v11 < 8))
          {
            v15 = 0;
          }
          else
          {
            v15 = 0;
            v16 = v13;
            do
            {
              v17 = *v16++;
              v15 += v17;
              --v14;
            }
            while (v14);
          }
          v18 = 0;
          v19 = v12;
          v20 = 8;
          do
          {
            v21 = *v19;
            v22 = vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v21.i8);
            v23 = vmull_high_u16(v21, v21);
            v24 = vaddvq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v18, *(uint32x2_t *)v22.i8), *(uint32x2_t *)v23.i8), (int64x2_t)vaddl_high_u32(v22, v23)));
            v18 = v24;
            v19 = (uint16x8_t *)((char *)v19 + v10);
            --v20;
          }
          while (v20);
          *a6++ = v15;
          *a7++ = v24;
          v8 += (v24 - (unint64_t)((v15 * v15) >> 6) + 32) >> 6;
          v11 += 8;
          ++v13;
          ++v12;
        }
        while (v11 < a3);
      }
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
      a1 = (uint16x8_t *)((char *)a1 + v9);
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

unint64_t sub_1C97D72C4(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, _QWORD *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (a3 >= 1)
      {
        v9 = 0;
        v10 = a1;
        v11 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v12) = (a3 - (int)v9) >> 3, (int)v12 >= 1) ? (v12 = 1) : (v12 = v12),
                a3 - (int)v9 < 8))
          {
            v13 = 0;
          }
          else
          {
            v13 = 0;
            v14 = v11;
            do
            {
              v15 = *v14++;
              v13 += v15;
              --v12;
            }
            while (v12);
          }
          v16 = 0;
          v17 = 0;
          v18 = v10;
          do
          {
            for (i = 0; i != 8; ++i)
              v17 += *(unsigned __int8 *)(v18 + i) * *(unsigned __int8 *)(v18 + i);
            ++v16;
            v18 += a2;
          }
          while (v16 != 8);
          *a6++ = v13;
          *a7++ = v17;
          v8 += (v17 - (unint64_t)((v13 * v13) >> 6) + 32) >> 6;
          v9 += 8;
          ++v11;
          v10 += 8;
        }
        while (v9 < a3);
      }
      a1 += 8 * a2;
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

unint64_t sub_1C97D73F8(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, uint64_t *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint64_t v34;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)a3 >> 3;
    v10 = 8 * v9;
    v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2)
          v13 = 2;
        else
          v13 = v13;
        v14 = a1;
        v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            v17 = 0;
          }
          else
          {
            v16 = 0;
            v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2)
              v18 = 2;
            else
              v18 = v18;
            v19 = v15;
            do
            {
              v20 = v19;
              v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          v23 = 0;
          v24 = 0;
          v25 = v14;
          do
          {
            v26 = 0;
            v27 = 0uLL;
            v28 = (int64x2_t)(unint64_t)v24;
            v29 = 0uLL;
            v30 = 0uLL;
            do
            {
              v31 = *(uint16x8_t *)(v25 + v26);
              v32 = vmull_high_u16(v31, v31);
              v33 = vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v31.i8);
              v30 = (int64x2_t)vaddw_high_u32((uint64x2_t)v30, v32);
              v29 = (int64x2_t)vaddw_u32((uint64x2_t)v29, *(uint32x2_t *)v32.i8);
              v27 = (int64x2_t)vaddw_high_u32((uint64x2_t)v27, v33);
              v28 = (int64x2_t)vaddw_u32((uint64x2_t)v28, *(uint32x2_t *)v33.i8);
              v26 += 16;
            }
            while (v26 != 32);
            v34 = vaddvq_s64(vaddq_s64(vaddq_s64(v28, v29), vaddq_s64(v27, v30)));
            v24 = v34;
            ++v23;
            v25 += 2 * a2;
          }
          while (v23 != 16);
          *a6++ = v17;
          *a7++ = v34;
          v8 += (v34 - (unint64_t)((v17 * v17) >> 8) + 128) >> 8;
          v12 += 16;
          v15 += 2;
          v14 += 32;
        }
        while (v12 < a3);
      }
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
      a1 += 32 * a2;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

unint64_t sub_1C97D75A8(uint8x16_t *a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, uint64_t *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8x16_t *v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint8x16_t *v24;
  uint64_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint64_t v32;

  if (a4 < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)a3 >> 3;
    v10 = 8 * v9;
    v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2)
          v13 = 2;
        else
          v13 = v13;
        v14 = a1;
        v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            v17 = 0;
          }
          else
          {
            v16 = 0;
            v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2)
              v18 = 2;
            else
              v18 = v18;
            v19 = v15;
            do
            {
              v20 = v19;
              v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          v23 = 0;
          v24 = v14;
          v25 = 16;
          do
          {
            v26 = vmovl_high_u8(*v24);
            v27 = vmovl_u8(*(uint8x8_t *)v24->i8);
            v28 = vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v27.i8);
            v29 = vmull_high_u16(v27, v27);
            v30 = vmull_high_u16(v26, v26);
            v31 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v26.i8);
            v32 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v23, *(uint32x2_t *)v28.i8), *(uint32x2_t *)v31.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v30.i8)), vaddq_s64((int64x2_t)vaddl_high_u32(v28, v31), (int64x2_t)vaddl_high_u32(v29, v30))));
            v23 = v32;
            v24 = (uint8x16_t *)((char *)v24 + a2);
            --v25;
          }
          while (v25);
          *a6++ = v17;
          *a7++ = v32;
          v8 += (v32 - (unint64_t)((v17 * v17) >> 8) + 128) >> 8;
          v12 += 16;
          v15 += 2;
          ++v14;
        }
        while (v12 < a3);
      }
      a1 += a2;
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

uint64_t sub_1C97D7748(uint16x4_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint16x4_t *v5;
  uint64_t i;
  uint64_t j;

  v2 = 0;
  v3 = 2 * a2;
  v4 = 4;
  v5 = a1;
  do
  {
    v2 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v2, *v5));
    v5 = (uint16x4_t *)((char *)v5 + v3);
    --v4;
  }
  while (v4);
  for (i = 0; i != 4; ++i)
  {
    for (j = 0; j != 4; ++j)
      LODWORD(v4) = v4 + a1->u16[j] * a1->u16[j];
    a1 = (uint16x4_t *)((char *)a1 + v3);
  }
  return v4 - ((v2 * (unint64_t)v2 + 8) >> 4);
}

uint64_t sub_1C97D77C0(__int32 *a1, uint64_t a2, double a3, uint8x8_t a4)
{
  unsigned int v4;
  uint64_t v5;
  __int32 *v6;
  uint64_t i;
  uint64_t j;

  v4 = 0;
  v5 = 4;
  v6 = a1;
  do
  {
    a4.i32[0] = *v6;
    a4 = (uint8x8_t)vmovl_u8(a4).u64[0];
    v4 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v4, (uint16x4_t)a4));
    v6 = (__int32 *)((char *)v6 + a2);
    --v5;
  }
  while (v5);
  for (i = 0; i != 4; ++i)
  {
    for (j = 0; j != 4; ++j)
      LODWORD(v5) = v5 + *((unsigned __int8 *)a1 + j) * *((unsigned __int8 *)a1 + j);
    a1 = (__int32 *)((char *)a1 + a2);
  }
  return v5 - ((v4 * (unint64_t)v4 + 8) >> 4);
}

uint64_t sub_1C97D7838(uint16x4_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint16x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint16x8_t v8;
  uint32x4_t v9;
  uint32x4_t v10;
  uint64_t v11;

  v2 = 0;
  v3 = 2 * a2;
  v4 = 8;
  v5 = a1;
  do
  {
    v2 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v2, *v5), *(uint16x8_t *)v5->i8));
    v5 = (uint16x4_t *)((char *)v5 + v3);
    --v4;
  }
  while (v4);
  v6 = 0;
  v7 = 8;
  do
  {
    v8 = *(uint16x8_t *)a1->i8;
    v9 = vmull_u16(*(uint16x4_t *)v8.i8, *(uint16x4_t *)v8.i8);
    v10 = vmull_high_u16(v8, v8);
    v11 = vaddvq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v6, *(uint32x2_t *)v9.i8), *(uint32x2_t *)v10.i8), (int64x2_t)vaddl_high_u32(v9, v10)));
    v6 = v11;
    a1 = (uint16x4_t *)((char *)a1 + v3);
    --v7;
  }
  while (v7);
  return v11 - ((v2 * (unint64_t)v2 + 32) >> 6);
}

uint64_t sub_1C97D78C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  uint64_t j;

  v2 = 0;
  v3 = 0;
  v4 = a1;
  do
  {
    for (i = 0; i != 8; ++i)
      v3 += *(unsigned __int8 *)(v4 + i);
    ++v2;
    v4 += a2;
  }
  while (v2 != 8);
  v6 = 0;
  v7 = 0;
  do
  {
    for (j = 0; j != 8; ++j)
      v7 += *(unsigned __int8 *)(a1 + j) * *(unsigned __int8 *)(a1 + j);
    ++v6;
    a1 += a2;
  }
  while (v6 != 8);
  return v7 - ((v3 * (unint64_t)v3 + 32) >> 6);
}

uint64_t sub_1C97D7940(uint16x4_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint16x4_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  uint16x8_t v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint64_t v16;

  v2 = 0;
  v3 = a1 + 2;
  v4 = 2 * a2;
  v5 = 16;
  do
  {
    v2 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v2, v3[-2]), *v3), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)v3[-2].i8, *(uint16x8_t *)v3->i8)));
    v3 = (uint16x4_t *)((char *)v3 + v4);
    --v5;
  }
  while (v5);
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = 0;
    v9 = 0uLL;
    v10 = (int64x2_t)(unint64_t)v7;
    v11 = 0uLL;
    v12 = 0uLL;
    do
    {
      v13 = *(uint16x8_t *)a1[v8].i8;
      v14 = vmull_high_u16(v13, v13);
      v15 = vmull_u16(*(uint16x4_t *)v13.i8, *(uint16x4_t *)v13.i8);
      v12 = (int64x2_t)vaddw_high_u32((uint64x2_t)v12, v14);
      v11 = (int64x2_t)vaddw_u32((uint64x2_t)v11, *(uint32x2_t *)v14.i8);
      v9 = (int64x2_t)vaddw_high_u32((uint64x2_t)v9, v15);
      v10 = (int64x2_t)vaddw_u32((uint64x2_t)v10, *(uint32x2_t *)v15.i8);
      v8 += 2;
    }
    while (v8 != 4);
    v16 = vaddvq_s64(vaddq_s64(vaddq_s64(v10, v11), vaddq_s64(v9, v12)));
    v7 = v16;
    ++v6;
    a1 = (uint16x4_t *)((char *)a1 + v4);
  }
  while (v6 != 16);
  return v16 - ((v2 * (unint64_t)v2 + 128) >> 8);
}

uint64_t sub_1C97D7A00(uint8x16_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint8x16_t *v4;
  uint16x8_t v5;
  uint16x8_t v6;
  uint64_t v7;
  uint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint32x4_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  uint64_t v15;

  v2 = 0;
  v3 = 16;
  v4 = a1;
  do
  {
    v5 = vmovl_high_u8(*v4);
    v6 = vmovl_u8(*(uint8x8_t *)v4->i8);
    v2 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v2, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v5.i8), (int32x4_t)vaddl_high_u16(v6, v5)));
    v4 = (uint8x16_t *)((char *)v4 + a2);
    --v3;
  }
  while (v3);
  v7 = 0;
  v8 = 16;
  do
  {
    v9 = vmovl_high_u8(*a1);
    v10 = vmovl_u8(*(uint8x8_t *)a1->i8);
    v11 = vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v10.i8);
    v12 = vmull_high_u16(v10, v10);
    v13 = vmull_high_u16(v9, v9);
    v14 = vmull_u16(*(uint16x4_t *)v9.i8, *(uint16x4_t *)v9.i8);
    v15 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v7, *(uint32x2_t *)v11.i8), *(uint32x2_t *)v14.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v12.i8, *(uint32x2_t *)v13.i8)), vaddq_s64((int64x2_t)vaddl_high_u32(v11, v14), (int64x2_t)vaddl_high_u32(v12, v13))));
    v7 = v15;
    a1 = (uint8x16_t *)((char *)a1 + a2);
    --v8;
  }
  while (v8);
  return v15 - ((v2 * (unint64_t)v2 + 128) >> 8);
}

uint64_t sub_1C97D7AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint64_t v20;

  v2 = 0;
  v3 = 0;
  v4 = 2 * a2;
  v5 = a1;
  do
  {
    v6 = 0;
    v7 = 0uLL;
    v8 = (int32x4_t)v3;
    do
    {
      v9 = *(uint16x8_t *)(v5 + v6);
      v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v9);
      v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v9.i8);
      v6 += 16;
    }
    while (v6 != 64);
    v3 = vaddvq_s32(vaddq_s32(v8, v7));
    ++v2;
    v5 += v4;
  }
  while (v2 != 32);
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = 0;
    v13 = 0uLL;
    v14 = (int64x2_t)(unint64_t)v11;
    v15 = 0uLL;
    v16 = 0uLL;
    do
    {
      v17 = *(uint16x8_t *)(a1 + v12);
      v18 = vmull_high_u16(v17, v17);
      v19 = vmull_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v17.i8);
      v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v18);
      v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v18.i8);
      v13 = (int64x2_t)vaddw_high_u32((uint64x2_t)v13, v19);
      v14 = (int64x2_t)vaddw_u32((uint64x2_t)v14, *(uint32x2_t *)v19.i8);
      v12 += 16;
    }
    while (v12 != 64);
    v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v14, v15), vaddq_s64(v13, v16)));
    v11 = v20;
    ++v10;
    a1 += v4;
  }
  while (v10 != 32);
  return v20 - ((v3 * (unint64_t)v3 + 512) >> 10);
}

uint64_t sub_1C97D7B8C(uint8x8_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint8x8_t *v3;
  uint64_t v4;
  uint8x16_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  uint8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;

  v2 = 0;
  v3 = a1 + 2;
  v4 = 32;
  do
  {
    v5 = *(uint8x16_t *)v3[-2].i8;
    v6 = vmovl_high_u8(v5);
    v7 = vmovl_u8(*(uint8x8_t *)v5.i8);
    v8 = vmovl_u8(*v3);
    v9 = vmovl_high_u8(*(uint8x16_t *)v3->i8);
    v2 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v2, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8), vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v6.i8, *(uint16x4_t *)v9.i8), vaddq_s32((int32x4_t)vaddl_high_u16(v7, v8), (int32x4_t)vaddl_high_u16(v6, v9)))));
    v3 = (uint8x8_t *)((char *)v3 + a2);
    --v4;
  }
  while (v4);
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = 0;
    v13 = 0uLL;
    v14 = (int64x2_t)(unint64_t)v11;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    do
    {
      v21 = *(uint8x16_t *)a1[v12].i8;
      v22 = vmovl_u8(*(uint8x8_t *)v21.i8);
      v23 = vmovl_high_u8(v21);
      v24 = vmull_u16(*(uint16x4_t *)v23.i8, *(uint16x4_t *)v23.i8);
      v25 = vmull_high_u16(v22, v22);
      v26 = vmull_high_u16(v23, v23);
      v27 = vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)v22.i8);
      v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v25);
      v18 = (int64x2_t)vaddw_high_u32((uint64x2_t)v18, v24);
      v17 = (int64x2_t)vaddw_u32((uint64x2_t)v17, *(uint32x2_t *)v24.i8);
      v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v25.i8);
      v13 = (int64x2_t)vaddw_high_u32((uint64x2_t)v13, v27);
      v19 = (int64x2_t)vaddw_u32((uint64x2_t)v19, *(uint32x2_t *)v26.i8);
      v14 = (int64x2_t)vaddw_u32((uint64x2_t)v14, *(uint32x2_t *)v27.i8);
      v20 = (int64x2_t)vaddw_high_u32((uint64x2_t)v20, v26);
      v12 += 2;
    }
    while (v12 != 4);
    v28 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v14, v17), vaddq_s64(v15, v19)), vaddq_s64(vaddq_s64(v13, v18), vaddq_s64(v16, v20))));
    v11 = v28;
    ++v10;
    a1 = (uint8x8_t *)((char *)a1 + a2);
  }
  while (v10 != 32);
  return v28 - ((v2 * (unint64_t)v2 + 512) >> 10);
}

uint64_t sub_1C97D7CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint64_t v20;

  v2 = 0;
  v3 = 0;
  v4 = 2 * a2;
  v5 = a1;
  do
  {
    v6 = 0;
    v7 = 0uLL;
    v8 = (int32x4_t)v3;
    do
    {
      v9 = *(uint16x8_t *)(v5 + v6);
      v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v9);
      v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v9.i8);
      v6 += 16;
    }
    while (v6 != 128);
    v3 = vaddvq_s32(vaddq_s32(v8, v7));
    ++v2;
    v5 += v4;
  }
  while (v2 != 64);
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = 0;
    v13 = 0uLL;
    v14 = (int64x2_t)(unint64_t)v11;
    v15 = 0uLL;
    v16 = 0uLL;
    do
    {
      v17 = *(uint16x8_t *)(a1 + v12);
      v18 = vmull_high_u16(v17, v17);
      v19 = vmull_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v17.i8);
      v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v18);
      v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v18.i8);
      v13 = (int64x2_t)vaddw_high_u32((uint64x2_t)v13, v19);
      v14 = (int64x2_t)vaddw_u32((uint64x2_t)v14, *(uint32x2_t *)v19.i8);
      v12 += 16;
    }
    while (v12 != 128);
    v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v14, v15), vaddq_s64(v13, v16)));
    v11 = v20;
    ++v10;
    a1 += v4;
  }
  while (v10 != 64);
  return v20 - ((v3 * (unint64_t)v3 + 2048) >> 12);
}

uint64_t sub_1C97D7D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint8x16_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  uint8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint64_t v31;

  v2 = 0;
  v3 = 0;
  v4 = a1;
  do
  {
    v5 = 0;
    v6 = 0uLL;
    v7 = (int32x4_t)v3;
    v8 = 0uLL;
    v9 = 0uLL;
    do
    {
      v10 = *(uint8x16_t *)(v4 + v5);
      v11 = vmovl_u8(*(uint8x8_t *)v10.i8);
      v12 = vmovl_high_u8(v10);
      v9 = (int32x4_t)vaddw_high_u16((uint32x4_t)v9, v12);
      v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v12.i8);
      v6 = (int32x4_t)vaddw_high_u16((uint32x4_t)v6, v11);
      v7 = (int32x4_t)vaddw_u16((uint32x4_t)v7, *(uint16x4_t *)v11.i8);
      v5 += 16;
    }
    while (v5 != 64);
    v3 = vaddvq_s32(vaddq_s32(vaddq_s32(v7, v8), vaddq_s32(v6, v9)));
    ++v2;
    v4 += a2;
  }
  while (v2 != 64);
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = 0;
    v16 = 0uLL;
    v17 = (int64x2_t)(unint64_t)v14;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    do
    {
      v24 = *(uint8x16_t *)(a1 + v15);
      v25 = vmovl_u8(*(uint8x8_t *)v24.i8);
      v26 = vmovl_high_u8(v24);
      v27 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v26.i8);
      v28 = vmull_high_u16(v25, v25);
      v29 = vmull_high_u16(v26, v26);
      v30 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v25.i8);
      v19 = (int64x2_t)vaddw_high_u32((uint64x2_t)v19, v28);
      v21 = (int64x2_t)vaddw_high_u32((uint64x2_t)v21, v27);
      v20 = (int64x2_t)vaddw_u32((uint64x2_t)v20, *(uint32x2_t *)v27.i8);
      v18 = (int64x2_t)vaddw_u32((uint64x2_t)v18, *(uint32x2_t *)v28.i8);
      v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v30);
      v22 = (int64x2_t)vaddw_u32((uint64x2_t)v22, *(uint32x2_t *)v29.i8);
      v17 = (int64x2_t)vaddw_u32((uint64x2_t)v17, *(uint32x2_t *)v30.i8);
      v23 = (int64x2_t)vaddw_high_u32((uint64x2_t)v23, v29);
      v15 += 16;
    }
    while (v15 != 64);
    v31 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v17, v20), vaddq_s64(v18, v22)), vaddq_s64(vaddq_s64(v16, v21), vaddq_s64(v19, v23))));
    v14 = v31;
    ++v13;
    a1 += a2;
  }
  while (v13 != 64);
  return v31 - ((v3 * (unint64_t)v3 + 2048) >> 12);
}

uint64_t sub_1C97D7EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    for (i = 0; i != 8; i += 2)
    {
      v8 = *(unsigned __int16 *)(a1 + i) - (unint64_t)*(unsigned __int16 *)(a3 + i);
      v6 += v8;
      v5 += v8 * v8;
    }
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 4);
  return v5 - ((unint64_t)(v6 * v6 + 8) >> 4);
}

uint64_t sub_1C97D7F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    for (i = 0; i != 4; ++i)
    {
      v8 = *(unsigned __int8 *)(a1 + i) - (unint64_t)*(unsigned __int8 *)(a3 + i);
      v6 += v8;
      v5 += v8 * v8;
    }
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 4);
  return v5 - ((unint64_t)(v6 * v6 + 8) >> 4);
}

uint64_t sub_1C97D7F64(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  v5 = 0;
  v6 = 8;
  do
  {
    v7 = (int32x4_t)vsubl_high_u16(*a1, *a3);
    v8 = (int32x4_t)vsubl_u16(*(uint16x4_t *)a1->i8, *(uint16x4_t *)a3->i8);
    v9 = vaddvq_s64(vaddq_s64(vaddw_s32(vaddw_s32((int64x2_t)(unint64_t)v5, *(int32x2_t *)v8.i8), *(int32x2_t *)v7.i8), vaddl_high_s32(v8, v7)));
    v5 = v9;
    v10 = vaddvq_s64(vaddq_s64(vmlal_s32(vmlal_s32((int64x2_t)(unint64_t)v4, *(int32x2_t *)v8.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v7.i8, *(int32x2_t *)v7.i8), vmlal_high_s32(vmull_high_s32(v8, v8), v7, v7)));
    v4 = v10;
    a3 = (uint16x8_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
    --v6;
  }
  while (v6);
  return v10 - ((unint64_t)(v9 * v9 + 32) >> 6);
}

uint64_t sub_1C97D7FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    for (i = 0; i != 8; ++i)
    {
      v8 = *(unsigned __int8 *)(a1 + i) - (unint64_t)*(unsigned __int8 *)(a3 + i);
      v6 += v8;
      v5 += v8 * v8;
    }
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 8);
  return v5 - ((unint64_t)(v6 * v6 + 32) >> 6);
}

uint64_t sub_1C97D8048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = (int64x2_t)(unint64_t)v5;
    v9 = (int64x2_t)(unint64_t)v6;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = *(uint16x8_t *)(a1 + v7);
      v17 = *(uint16x8_t *)(a3 + v7);
      v18 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8);
      v19 = (int32x4_t)vsubl_high_u16(v16, v17);
      v15 = vaddw_high_s32(v15, v19);
      v14 = vaddw_s32(v14, *(int32x2_t *)v19.i8);
      v13 = vaddw_high_s32(v13, v18);
      v9 = vaddw_s32(v9, *(int32x2_t *)v18.i8);
      v12 = vmlal_high_s32(v12, v19, v19);
      v11 = vmlal_s32(v11, *(int32x2_t *)v19.i8, *(int32x2_t *)v19.i8);
      v10 = vmlal_high_s32(v10, v18, v18);
      v8 = vmlal_s32(v8, *(int32x2_t *)v18.i8, *(int32x2_t *)v18.i8);
      v7 += 16;
    }
    while (v7 != 32);
    v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v13, v15)));
    v6 = v20;
    v21 = vaddvq_s64(vaddq_s64(vaddq_s64(v8, v11), vaddq_s64(v10, v12)));
    v5 = v21;
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 16);
  return v21 - ((unint64_t)(v20 * v20 + 128) >> 8);
}

uint64_t sub_1C97D8114(uint8x16_t *a1, uint64_t a2, uint8x16_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;

  v4 = 0;
  v5 = 0;
  v6 = 16;
  do
  {
    v7 = (int16x8_t)vsubl_high_u8(*a1, *a3);
    v8 = vmovl_s16(*(int16x4_t *)v7.i8);
    v9 = vmovl_high_s16(v7);
    v10 = (int16x8_t)vsubl_u8(*(uint8x8_t *)a1->i8, *(uint8x8_t *)a3->i8);
    v11 = vmovl_high_s16(v10);
    v12 = vmovl_s16(*(int16x4_t *)v10.i8);
    v5 = vaddvq_s64(vaddq_s64(vaddw_s32(vaddw_s32((int64x2_t)(unint64_t)v5, *(int32x2_t *)v12.i8), *(int32x2_t *)v8.i8), vaddq_s64(vaddl_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v9.i8), vaddq_s64(vaddl_high_s32(v12, v8), vaddl_high_s32(v11, v9)))));
    v13 = vaddvq_s64(vaddq_s64(vaddq_s64(vmlal_s32(vmlal_s32((int64x2_t)(unint64_t)v4, *(int32x2_t *)v12.i8, *(int32x2_t *)v12.i8), *(int32x2_t *)v8.i8, *(int32x2_t *)v8.i8), vmlal_s32(vmull_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v9.i8, *(int32x2_t *)v9.i8)), vaddq_s64(vmlal_high_s32(vmull_high_s32(v12, v12), v8, v8), vmlal_high_s32(vmull_high_s32(v11, v11), v9, v9))));
    v4 = v13;
    a3 = (uint8x16_t *)((char *)a3 + a4);
    a1 = (uint8x16_t *)((char *)a1 + a2);
    --v6;
  }
  while (v6);
  return v13 - ((unint64_t)(v5 * v5 + 128) >> 8);
}

uint64_t sub_1C97D81D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = (int64x2_t)(unint64_t)v5;
    v9 = (int64x2_t)(unint64_t)v6;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = *(uint16x8_t *)(a1 + v7);
      v17 = *(uint16x8_t *)(a3 + v7);
      v18 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8);
      v19 = (int32x4_t)vsubl_high_u16(v16, v17);
      v15 = vaddw_high_s32(v15, v19);
      v14 = vaddw_s32(v14, *(int32x2_t *)v19.i8);
      v13 = vaddw_high_s32(v13, v18);
      v9 = vaddw_s32(v9, *(int32x2_t *)v18.i8);
      v12 = vmlal_high_s32(v12, v19, v19);
      v11 = vmlal_s32(v11, *(int32x2_t *)v19.i8, *(int32x2_t *)v19.i8);
      v10 = vmlal_high_s32(v10, v18, v18);
      v8 = vmlal_s32(v8, *(int32x2_t *)v18.i8, *(int32x2_t *)v18.i8);
      v7 += 16;
    }
    while (v7 != 64);
    v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v13, v15)));
    v6 = v20;
    v21 = vaddvq_s64(vaddq_s64(vaddq_s64(v8, v11), vaddq_s64(v10, v12)));
    v5 = v21;
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 32);
  return v21 - ((unint64_t)(v20 * v20 + 512) >> 10);
}

uint64_t sub_1C97D829C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = (int64x2_t)(unint64_t)v5;
    v9 = 0uLL;
    v10 = (int64x2_t)(unint64_t)v6;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    do
    {
      v24 = *(uint8x16_t *)(a1 + v7);
      v25 = *(uint8x16_t *)(a3 + v7);
      v26 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v25.i8);
      v27 = vmovl_s16(*(int16x4_t *)v26.i8);
      v28 = (int16x8_t)vsubl_high_u8(v24, v25);
      v29 = vmovl_high_s16(v28);
      v30 = vmovl_high_s16(v26);
      v31 = vmovl_s16(*(int16x4_t *)v28.i8);
      v19 = vaddw_high_s32(v19, v30);
      v21 = vaddw_high_s32(v21, v31);
      v20 = vaddw_s32(v20, *(int32x2_t *)v31.i8);
      v18 = vaddw_s32(v18, *(int32x2_t *)v30.i8);
      v17 = vaddw_high_s32(v17, v27);
      v22 = vaddw_s32(v22, *(int32x2_t *)v29.i8);
      v10 = vaddw_s32(v10, *(int32x2_t *)v27.i8);
      v23 = vaddw_high_s32(v23, v29);
      v12 = vmlal_high_s32(v12, v30, v30);
      v14 = vmlal_high_s32(v14, v31, v31);
      v13 = vmlal_s32(v13, *(int32x2_t *)v31.i8, *(int32x2_t *)v31.i8);
      v11 = vmlal_s32(v11, *(int32x2_t *)v30.i8, *(int32x2_t *)v30.i8);
      v9 = vmlal_high_s32(v9, v27, v27);
      v15 = vmlal_s32(v15, *(int32x2_t *)v29.i8, *(int32x2_t *)v29.i8);
      v8 = vmlal_s32(v8, *(int32x2_t *)v27.i8, *(int32x2_t *)v27.i8);
      v16 = vmlal_high_s32(v16, v29, v29);
      v7 += 16;
    }
    while (v7 != 32);
    v32 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v10, v20), vaddq_s64(v18, v22)), vaddq_s64(vaddq_s64(v17, v21), vaddq_s64(v19, v23))));
    v6 = v32;
    v33 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v8, v13), vaddq_s64(v11, v15)), vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v12, v16))));
    v5 = v33;
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 32);
  return v33 - ((unint64_t)(v32 * v32 + 512) >> 10);
}

uint64_t sub_1C97D83D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = (int64x2_t)(unint64_t)v5;
    v9 = (int64x2_t)(unint64_t)v6;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = *(uint16x8_t *)(a1 + v7);
      v17 = *(uint16x8_t *)(a3 + v7);
      v18 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8);
      v19 = (int32x4_t)vsubl_high_u16(v16, v17);
      v15 = vaddw_high_s32(v15, v19);
      v14 = vaddw_s32(v14, *(int32x2_t *)v19.i8);
      v13 = vaddw_high_s32(v13, v18);
      v9 = vaddw_s32(v9, *(int32x2_t *)v18.i8);
      v12 = vmlal_high_s32(v12, v19, v19);
      v11 = vmlal_s32(v11, *(int32x2_t *)v19.i8, *(int32x2_t *)v19.i8);
      v10 = vmlal_high_s32(v10, v18, v18);
      v8 = vmlal_s32(v8, *(int32x2_t *)v18.i8, *(int32x2_t *)v18.i8);
      v7 += 16;
    }
    while (v7 != 128);
    v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v13, v15)));
    v6 = v20;
    v21 = vaddvq_s64(vaddq_s64(vaddq_s64(v8, v11), vaddq_s64(v10, v12)));
    v5 = v21;
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 64);
  return v21 - ((unint64_t)(v20 * v20 + 2048) >> 12);
}

uint64_t sub_1C97D849C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = (int64x2_t)(unint64_t)v5;
    v9 = 0uLL;
    v10 = (int64x2_t)(unint64_t)v6;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    do
    {
      v24 = *(uint8x16_t *)(a1 + v7);
      v25 = *(uint8x16_t *)(a3 + v7);
      v26 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v25.i8);
      v27 = vmovl_s16(*(int16x4_t *)v26.i8);
      v28 = (int16x8_t)vsubl_high_u8(v24, v25);
      v29 = vmovl_high_s16(v28);
      v30 = vmovl_high_s16(v26);
      v31 = vmovl_s16(*(int16x4_t *)v28.i8);
      v19 = vaddw_high_s32(v19, v30);
      v21 = vaddw_high_s32(v21, v31);
      v20 = vaddw_s32(v20, *(int32x2_t *)v31.i8);
      v18 = vaddw_s32(v18, *(int32x2_t *)v30.i8);
      v17 = vaddw_high_s32(v17, v27);
      v22 = vaddw_s32(v22, *(int32x2_t *)v29.i8);
      v10 = vaddw_s32(v10, *(int32x2_t *)v27.i8);
      v23 = vaddw_high_s32(v23, v29);
      v12 = vmlal_high_s32(v12, v30, v30);
      v14 = vmlal_high_s32(v14, v31, v31);
      v13 = vmlal_s32(v13, *(int32x2_t *)v31.i8, *(int32x2_t *)v31.i8);
      v11 = vmlal_s32(v11, *(int32x2_t *)v30.i8, *(int32x2_t *)v30.i8);
      v9 = vmlal_high_s32(v9, v27, v27);
      v15 = vmlal_s32(v15, *(int32x2_t *)v29.i8, *(int32x2_t *)v29.i8);
      v8 = vmlal_s32(v8, *(int32x2_t *)v27.i8, *(int32x2_t *)v27.i8);
      v16 = vmlal_high_s32(v16, v29, v29);
      v7 += 16;
    }
    while (v7 != 64);
    v32 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v10, v20), vaddq_s64(v18, v22)), vaddq_s64(vaddq_s64(v17, v21), vaddq_s64(v19, v23))));
    v6 = v32;
    v33 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v8, v13), vaddq_s64(v11, v15)), vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v12, v16))));
    v5 = v33;
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 64);
  return v33 - ((unint64_t)(v32 * v32 + 2048) >> 12);
}

uint64_t sub_1C97D85D0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int32 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return result;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = ~(_DWORD)result;
  v8 = -(int)result;
  do
  {
    if ((int)result < 1)
      goto LABEL_18;
    v9 = 0;
    v10 = v6;
    v11 = a3 + 4 * v6;
    do
    {
      v12 = *(_DWORD *)(v11 + 4 * v9);
      v20 = xmmword_1C9863100;
      if (v9)
      {
        LODWORD(v20) = (*(_DWORD *)(a3 + 4 * (v4 + v9 - 1)) + 32) >> 6;
        v13 = v20 + 2;
        if (v5)
        {
          v14 = v8 + v9;
          v15 = (*(_DWORD *)(a3 + 4 * (v8 + v9)) + 32) >> 6;
          DWORD2(v20) = v15;
          v16 = (*(_DWORD *)(a3 + 4 * (v7 + v9)) + 32) >> 6;
          v17 = 1;
          v18 = v16;
          goto LABEL_10;
        }
        v19 = 128;
LABEL_15:
        v15 = 128;
        v18 = 128;
        goto LABEL_16;
      }
      if (!v5)
      {
        v19 = 128;
        v13 = 130;
        goto LABEL_15;
      }
      v14 = v5 * result - result;
      v16 = (*(_DWORD *)(a3 + 4 * v8) + 32) >> 6;
      v18 = 128;
      v13 = 130;
      v17 = 2;
      v15 = v16;
LABEL_10:
      *(_DWORD *)((unint64_t)&v20 | (4 * v17)) = v16;
      if (v9 >= (int)result - 1)
      {
        v19 = 128;
      }
      else
      {
        v19 = (*(_DWORD *)(a3 + 4 * (v14 + 1)) + 32) >> 6;
        HIDWORD(v20) = v19;
      }
LABEL_16:
      *(_DWORD *)(a4 + 4 * (v4 + v9++)) = vminvq_s32(vminq_s32(vabdq_s32((int32x4_t)v20, vdupq_n_s32((v12 + 32) >> 6)), vdupq_n_s32(((v19 + v18 + v13 + v15) >> 2)- ((v12 + 32) >> 6))));
    }
    while (result != v9);
    v6 = v10 + v9;
LABEL_18:
    ++v5;
    v4 += result;
    v7 += result;
    v8 += result;
  }
  while (v5 != a2);
  return result;
}

uint64_t sub_1C97D87B0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  signed int v24;

  if (a2 >= 1)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    if ((int)((a2 + 15) >> 4) >= ((int)result + 15) >> 4)
      v6 = ((int)result + 15) >> 4;
    else
      v6 = (a2 + 15) >> 4;
    v7 = -v6;
    do
    {
      if ((int)result >= 1)
      {
        v8 = 0;
        LODWORD(v9) = v4 + v6;
        if ((int)(v4 + v6) >= a2)
          v9 = a2;
        else
          v9 = v9;
        v5 = (int)v5;
        v10 = -v6;
        v11 = v6;
        do
        {
          if ((int)result >= v11)
            v12 = v11;
          else
            v12 = result;
          if ((int)((v4 - v6) & ~((int)(v4 - v6) >> 31)) >= (int)v9)
          {
            v14 = 0;
            v13 = 0;
          }
          else
          {
            v13 = 0;
            v14 = 0;
            v15 = v10 & ~(v10 >> 31);
            v16 = v12 - v15;
            v17 = (int *)(a3 + 4 * ((int)result * (unint64_t)(v7 & ~(v7 >> 31)) + v15));
            v18 = v6 + v8;
            if ((int)(v6 + v8) >= (int)result)
              v18 = result;
            v19 = (v8 - v6) & ~((int)(v8 - v6) >> 31);
            v20 = (v4 - v6) & ~((int)(v4 - v6) >> 31);
            do
            {
              if (v18 > v19)
              {
                v21 = v17;
                v22 = v16;
                do
                {
                  v23 = *v21++;
                  v14 += v23;
                  --v22;
                }
                while (v22);
                v13 += v18 - v19;
              }
              ++v20;
              v17 += (int)result;
            }
            while (v20 != v9);
          }
          v24 = ((*(_DWORD *)(a3 + 4 * v5) + 32) >> 6) - (((v14 + (v13 >> 1)) / v13 + 32) >> 6);
          if (v24 < 0)
            v24 = (((v14 + (v13 >> 1)) / v13 + 32) >> 6) - ((*(_DWORD *)(a3 + 4 * v5) + 32) >> 6);
          *(_DWORD *)(a4 + 4 * (v4 * result + v8)) = v24;
          ++v5;
          ++v8;
          ++v11;
          ++v10;
        }
        while (v8 != result);
      }
      ++v4;
      ++v7;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t sub_1C97D8940(int *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t result;
  int *v7;
  uint64_t v8;
  int v9;

  if (a4 < 1)
    return 0;
  v5 = 0;
  result = 0;
  do
  {
    v7 = a1;
    v8 = a3;
    if (a3 >= 1)
    {
      do
      {
        v9 = *v7++;
        result = (v9 + result);
        --v8;
      }
      while (v8);
    }
    ++v5;
    a1 += a2;
  }
  while (v5 != a4);
  return result;
}

uint64_t sub_1C97D899C(int *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;

  if (a4 < 1)
  {
    v5 = 0;
    v12 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 4 * a2;
    v7 = a1;
    do
    {
      v8 = v7;
      v9 = a3;
      if (a3 >= 1)
      {
        do
        {
          v10 = *v8++;
          v5 += v10;
          --v9;
        }
        while (v9);
      }
      ++v4;
      v7 = (int *)((char *)v7 + v6);
    }
    while (v4 != a4);
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = a1;
      v14 = a3;
      if (a3 >= 1)
      {
        do
        {
          v15 = *v13++;
          v12 += (v15 * v15);
          --v14;
        }
        while (v14);
      }
      ++v11;
      a1 = (int *)((char *)a1 + v6);
    }
    while (v11 != a4);
  }
  return v12 - (uint64_t)(((uint64_t)(a4 * a3) >> 1) + v5 * (unint64_t)v5) / (a4 * a3);
}

int *sub_1C97D8A50(int *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  if ((*(_BYTE *)(*(_QWORD *)a2 + 748) & 1) == 0)
  {
    v2 = (uint64_t)result;
    *(_BYTE *)(*(_QWORD *)a2 + 748) |= 1u;
    sub_1C97D8C6C(result, a2);
    v3 = *(_DWORD *)(v2 + 4728);
    v4 = (v3 >> 3);
    v5 = *(_DWORD *)(v2 + 4732);
    v6 = (v5 >> 3);
    if (*(_BYTE *)(v2 + 17))
    {
      if (*(int *)(v2 + 5548) >= 1 && v5 >= 8)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        if ((int)v4 <= 1)
          v11 = 1;
        else
          v11 = v3 >> 3;
        if ((int)v6 <= 1)
          v12 = 1;
        else
          v12 = v6;
        v13 = 8 * v11;
        do
        {
          if (v3 >= 8)
          {
            v14 = 0;
            do
            {
              if (!sub_1C97DABC8(v2, v14, 8 * v8, 8))
              {
                v10 += **(_DWORD **)(v2 + 4872);
                ++v9;
              }
              v14 += 8;
            }
            while (v13 != v14);
          }
          ++v8;
        }
        while (v8 != v12);
        v4 = (v3 >> 3);
        if (v9 >= 1)
        {
          v15 = (int)(v10 + (v9 >> 1)) / v9;
          if (v15 >= 2)
          {
            v16 = __clz(v15);
            v17 = ((byte_1C9860C84[(unint64_t)(v15 << (v16 + 1)) >> 24] << 12) | 0x200000u) >> ((v16 + 1) >> 1);
            if ((v16 & 1) == 0)
              v17 = (11585 * v17) >> 14;
            v15 = (v17 + 16) >> 5;
          }
          *(_DWORD *)(v2 + 5544) = v15;
        }
      }
    }
    result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v2 + 200))(v4, v6, *(_QWORD *)(v2 + 4848), *(_QWORD *)(v2 + 4928));
    v18 = *(_QWORD *)(v2 + 2232);
    v19 = *(_QWORD *)(v18 + 576);
    switch(*(_BYTE *)(v19 + 493))
    {
      case 0:
      case 1:
        v20 = *(_DWORD *)(v2 + 4820);
        goto LABEL_33;
      case 2:
      case 4:
        v20 = *(_DWORD *)(v2 + 4824);
        goto LABEL_33;
      case 3:
        v20 = *(_DWORD *)(v2 + 4824);
        if (v20 >= 2)
        {
          v21 = __clz(v20);
          v22 = ((byte_1C9860C84[(unint64_t)(v20 << (v21 + 1)) >> 24] << 12) | 0x200000u) >> ((v21 + 1) >> 1);
          if ((v21 & 1) == 0)
            v22 = (11585 * v22) >> 14;
          v20 = (v22 + 16) >> 5;
        }
LABEL_33:
        *(_DWORD *)(v2 + 4840) = v20;
        break;
      default:
        break;
    }
    if (*(_BYTE *)(v19 + 870))
      *(_DWORD *)(*(_QWORD *)(v18 + 632) + 1152) = *(_DWORD *)(v2 + 4812);
  }
  return result;
}

void sub_1C97D8C6C(int *a1, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  int *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v33;
  unsigned int v34;

  if ((*(_BYTE *)(*(_QWORD *)a2 + 748) & 4) == 0)
  {
    *(_BYTE *)(*(_QWORD *)a2 + 748) |= 4u;
    v2 = *(_BYTE **)(*((_QWORD *)a1 + 279) + 576);
    v25 = *(_QWORD *)(*(_QWORD *)a2 + 416);
    v26 = *(_QWORD *)(*(_QWORD *)a2 + 400);
    v3 = (*(uint64_t (**)(void))&a1[2 * (v2[493] != 0) + 16])();
    v4 = a1;
    v27 = v3;
    if (v2[484] || v2[487])
    {
      v5 = a1[1182];
      v30 = a1[1183];
      v6 = atomic_load((unsigned __int8 *)&qword_1EF920ED8);
      if ((v6 & 1) == 0)
      {
        v24 = __cxa_guard_acquire(&qword_1EF920ED8);
        v4 = a1;
        if (v24)
        {
          dword_1EF920ED0 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 279) + 40) + 2113) - 3;
          __cxa_guard_release(&qword_1EF920ED8);
          v4 = a1;
        }
      }
      v7 = dword_1EF920ED0;
      if ((dword_1EF920ED0 & 0x80000000) == 0)
      {
        v8 = 0;
        do
        {
          if (v30 >= 1)
          {
            v31 = 0;
            v9 = 8 << v8;
            v10 = v8 + 3;
            v28 = v8;
            v29 = (v5 - 1 + (8 << v8)) >> (v8 + 3);
            v11 = 1 << v8;
            v12 = &v4[2 * v8 + 1334];
            do
            {
              if (v5 >= 1)
              {
                v13 = 0;
                if ((v30 - v31) >> 3 >= v11)
                  v14 = v11;
                else
                  v14 = (v30 - v31) >> 3;
                v34 = v14;
                v33 = v14 << 6;
                v15 = v5;
                do
                {
                  if (v15 >> 3 >= v11)
                    v16 = v11;
                  else
                    v16 = (v15 >> 3);
                  v17 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))v4 + 23))(*((_QWORD *)v4 + 606) + 4 * (v5 >> 3) * (uint64_t)(v31 >> 3) + 4 * (v13 >> 3), (uint64_t)v5 >> 3, v16, v34);
                  v4 = a1;
                  *(_DWORD *)(*(_QWORD *)v12 + 4 * v29 * (uint64_t)(v31 >> v10) + 4 * (v13 >> v10)) = (v17 + ((v33 * v16) >> 1)) / (v33 * (int)v16);
                  v13 += v9;
                  v15 -= v9;
                }
                while (v13 < v5);
              }
              v31 += v9;
            }
            while (v31 < v30);
            v7 = dword_1EF920ED0;
            v8 = v28;
          }
        }
        while (v8++ < v7);
      }
    }
    if (*((_BYTE *)v4 + 16))
    {
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v4[2 * *v4 + 14])(v26, v25, v4[1182], v4[1183], *((_QWORD *)v4 + 606), *((_QWORD *)v4 + 622), *((_QWORD *)v4 + 625));
      v4 = a1;
      a1[1206] = v19;
    }
    v20 = (v4[1183] >> 3) * (v4[1182] >> 3);
    v21 = (v27 + (v20 >> 1)) / v20;
    v4[1203] = v21;
    if (v21 >= 2)
    {
      v22 = __clz(v21);
      v23 = ((byte_1C9860C84[(unint64_t)(v21 << (v22 + 1)) >> 24] << 12) | 0x200000u) >> ((v22 + 1) >> 1);
      if ((v22 & 1) == 0)
        v23 = (11585 * v23) >> 14;
      v21 = (v23 + 16) >> 5;
    }
    v4[1205] = v21;
  }
}

void sub_1C97D8F6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  _DWORD *v39;
  int v40;
  _DWORD v41[2048];
  uint64_t v42;

  v1 = MEMORY[0x1E0C80A78](a1);
  v4 = v2;
  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 2232) + 576) + 913))
  {
    v19 = *v2;
    *(_QWORD *)(v19 + 672) = -1;
    *(_QWORD *)(v19 + 664) = -1;
    *(_BYTE *)(v19 + 680) = 0;
    return;
  }
  v5 = v3;
  v6 = v1;
  sub_1C97D8C6C((int *)v1, (uint64_t)v2);
  v7 = *(char **)(v6 + 4976);
  v8 = *(int **)(v6 + 5000);
  v9 = *(char **)(v6 + 4984);
  bzero(v41, 0x2000uLL);
  v10 = v9 - v7;
  if (v9 == v7)
  {
    v18 = 0;
  }
  else
  {
    v11 = v10 >> 2;
    do
    {
      v12 = *(_DWORD *)v7;
      v7 += 4;
      v13 = (v12 * (unint64_t)v12 + 32) >> 6;
      v14 = *v8;
      v8 += 2;
      v15 = (16 * (v14 - v13) + 512) & 0xFFFFFC00;
      if (v15)
      {
        v16 = __clz(v15);
        v17 = ((byte_1C9860C84[(unint64_t)(v15 << (v16 + 1)) >> 24] << 12) | 0x200000u) >> ((v16 + 1) >> 1);
        if ((v16 & 1) == 0)
          v17 = (11585 * v17) >> 14;
        v15 = (v17 + 16) >> 5;
      }
      if (v15 >= 0x7FF)
        v15 = 2047;
      ++v41[v15];
      --v11;
    }
    while (v11);
    v18 = v41[0];
  }
  v20 = 30 * ((unint64_t)v10 >> 2);
  if (v18 >= v20 >> 7)
  {
    v23 = 0;
    if (v5)
    {
LABEL_19:
      *(_DWORD *)(*v4 + 676) = v23;
      return;
    }
  }
  else
  {
    v21 = 0;
    v22 = v20 >> 7;
    do
    {
      v23 = v21 + 1;
      if (v21 > 0x7FD)
        break;
      v18 += v41[++v21];
    }
    while (v18 < v22);
    if (v5)
      goto LABEL_19;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(v6 + 2232) + 648) >= 3u)
  {
    v25 = *(unsigned int *)(v6 + 5424);
    v26 = *(unsigned int *)(v6 + 5428);
    v27 = *(_QWORD *)(v6 + 5416);
    bzero(v41, 0x2000uLL);
    if ((_DWORD)v26)
    {
      v28 = 0;
      v29 = *(unsigned int **)(v6 + 5392);
      do
      {
        v30 = v29;
        v31 = v25;
        if ((_DWORD)v25)
        {
          do
          {
            v33 = *v30++;
            v32 = v33;
            if (v33 >= 0x7FF)
              v32 = 2047;
            ++v41[v32];
            --v31;
          }
          while (v31);
        }
        ++v28;
        v29 += v27;
      }
      while (v28 != v26);
      v34 = v41[0];
    }
    else
    {
      v34 = 0;
    }
    v35 = 30 * v25 * v26;
    if (v34 >= v35 >> 7)
    {
      v38 = 0;
    }
    else
    {
      v36 = 0;
      v37 = v35 >> 7;
      do
      {
        v38 = v36 + 1;
        if (v36 > 0x7FD)
          break;
        v34 += v41[++v36];
      }
      while (v34 < v37);
    }
    v39 = (_DWORD *)*v4;
    if (v38 >= v23)
      v40 = v23;
    else
      v40 = v38;
    v39[166] = v23;
    v39[167] = v38;
    v39[168] = v40;
  }
  else
  {
    v24 = (_DWORD *)*v4;
    v24[166] = v23;
    v24[167] = -1;
    v24[168] = v23;
  }
}

uint64_t sub_1C97D9248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  v3 = -1;
  v4 = a3;
  while (1)
  {
    v4 = *(_DWORD *)(a2 + 4 * v4);
    if (!v4)
      break;
    if (v4 >= (int)a3)
      a3 = a3;
    else
      a3 = v4;
    if (++v3 >= *(_DWORD *)(a1 + 4808))
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("FindMinInd Fails!\n", 0x12uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "FindMinInd Fails!\n");
      }
      return 0;
    }
  }
  return a3;
}

void sub_1C97D92D0(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;

  v5 = *(_DWORD *)(a2 + 4 * a5);
  if (a5 == a4)
    v6 = 0;
  else
    v6 = a4;
  *(_DWORD *)(a2 + 4 * a5) = v6;
  if (a3 >= 2)
  {
    v7 = a3 - 1;
    v8 = (int *)(a2 + 4);
    do
    {
      v9 = *v8;
      if (*v8 && (v9 == a5 || v9 == *(_DWORD *)(a2 + 4 * a5)))
        *v8 = a4;
      ++v8;
      --v7;
    }
    while (v7);
  }
  v10 = 0;
  while (v5)
  {
    v11 = *(_DWORD *)(a2 + 4 * v5);
    if (v5 == a4)
      v12 = 0;
    else
      v12 = a4;
    *(_DWORD *)(a2 + 4 * v5) = v12;
    if (a3 >= 2)
    {
      v13 = (int *)(a2 + 4);
      v14 = a3 - 1;
      do
      {
        v15 = *v13;
        if (*v13 && (v15 == v5 || v15 == *(_DWORD *)(a2 + 4 * v5)))
          *v13 = a4;
        ++v13;
        --v14;
      }
      while (v14);
    }
    v5 = v11;
    if (v10++ >= *(_DWORD *)(a1 + 4808))
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("InsertNewInd Fails!\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "InsertNewInd Fails!\n");
      }
      return;
    }
  }
}

uint64_t sub_1C97D93F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int i;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  float v74;
  uint64_t v75;
  float v76;
  int v77;
  int v78;
  float v79;
  int v80;
  float v81;
  int v82;
  int v83;
  float v84;
  float v85;
  float v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _QWORD *v99;
  std::mutex *v100;
  char v101;

  v2 = *(_QWORD **)(a1 + 2248);
  sub_1C97BE09C(*(_QWORD *)(a1 + 2216) + 48, *(unsigned __int8 *)(v2[2] + 2117));
  v3 = *(_QWORD *)(a1 + 2216);
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0, *(unsigned int *)(v3 + 524), 0);
  sub_1C97BE470(v3 + 48, 0, *(unsigned int *)(v3 + 524));
  v100 = (std::mutex *)(v3 + 1040);
  v101 = 1;
  std::mutex::lock((std::mutex *)(v3 + 1040));
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v3 + 1032));
  sub_1C971138C((uint64_t)&v100);
  std::condition_variable::notify_all((std::condition_variable *)(v3 + 1104));
  if (v101)
    std::mutex::unlock(v100);
  v4 = v2[209];
  v2[209] = *(_QWORD *)(a1 + 2216);
  *(_QWORD *)(a1 + 2216) = v4;
  v5 = v2[210];
  v2[210] = *(_QWORD *)(a1 + 2224);
  *(_QWORD *)(a1 + 2224) = v5;
  v6 = *(_QWORD *)(a1 + 2248);
  result = sub_1C97EF824(a1 + 4000, *(_DWORD *)(*(_QWORD *)(v6 + 4760) + 216), *(_BYTE *)(*(_QWORD *)(v6 + 4760) + 220), *(unsigned __int8 *)(*(_QWORD *)(v6 + 16) + 2096), *(_DWORD *)(*(_QWORD *)(v6 + 4760) + 96), *(unsigned __int8 *)(*(_QWORD *)(v6 + 16) + 2099), *(char *)(*(_QWORD *)(a1 + 2232) + 648), 0, v6 + 657);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + 4152) = 0;
    *(_QWORD *)(a1 + 4144) = 0;
    *(_QWORD *)(a1 + 4162) = 0x100010001000100;
    *(_WORD *)(a1 + 4160) = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 2248) + 4760);
    v9 = *(_DWORD *)(v8 + 160);
    *(_DWORD *)(a1 + 4600) = v9;
    if ((*(_BYTE *)(v8 + 184) & 4) != 0)
    {
      v9 = *(_DWORD *)(v8 + 164);
      *(_DWORD *)(a1 + 4600) = v9;
    }
    if (*(_BYTE *)(a1 + 17))
    {
      v9 = 1;
      *(_DWORD *)(a1 + 4600) = 1;
    }
    if (*(_DWORD *)(a1 + 4740) < v9)
      v9 = *(_DWORD *)(a1 + 4740);
    *(_DWORD *)(a1 + 4600) = v9;
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 4584);
    v12 = *(_QWORD *)(a1 + 4576);
    v13 = 0x4EC4EC4EC4EC4EC5 * ((v11 - v12) >> 10);
    v14 = v10 - v13;
    if (v10 <= v13)
    {
      if (v10 < v13)
      {
        v34 = v12 + 13312 * (int)v10;
        while (v11 != v34)
        {
          v11 -= 13312;
          sub_1C97A12F0(v11);
        }
        *(_QWORD *)(a1 + 4584) = v34;
      }
LABEL_41:
      if (*(int *)(a1 + 4600) <= 0)
      {
        *(_QWORD *)(a1 + 5536) = 0;
        v45 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 2232) + 40) + 2113);
        *(_DWORD *)(a1 + 5464) = 0;
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = *(_QWORD *)(a1 + 4576);
        do
        {
          sub_1C979821C(v41 + v39, *(_QWORD *)(a1 + 2248), a1 + 4000, 0, 0, 1, 0, 0);
          v42 = *(_QWORD *)(a1 + 4576) + v39;
          v43 = *(_QWORD *)(*(_QWORD *)(v42 + 12944) + 1672);
          *(_BYTE *)(v42 + 12690) = 0;
          *(_DWORD *)(v42 + 12692) = *(_DWORD *)(v43 + 520);
          *(_DWORD *)(v42 + 12700) = *(_DWORD *)(v43 + 524);
          v41 = *(_QWORD *)(a1 + 4576);
          *(_QWORD *)(v41 + v39 + 13264) = 0;
          ++v40;
          v44 = *(int *)(a1 + 4600);
          v39 += 13312;
        }
        while (v40 < v44);
        *(_QWORD *)(a1 + 5536) = 0;
        v45 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 2232) + 40) + 2113);
        *(_DWORD *)(a1 + 5464) = 0;
        if ((int)v44 > 1)
        {
          sub_1C974AC70(*(_QWORD *)(a1 + 2248) + 4800, *(_QWORD *)(*(_QWORD *)(a1 + 2248) + 16));
          v46 = *(_QWORD *)(a1 + 2248);
          *(_QWORD *)(v46 + 4832) = a1;
          *(_QWORD *)(v46 + 4840) = sub_1C97D9D70;
          sub_1C974AFE8(*(_QWORD *)(a1 + 2248) + 4800, *(_DWORD *)(a1 + 4600), -1, 0, 0);
          v47 = *(unsigned int *)(a1 + 4600);
          if ((int)v47 >= 1)
          {
            v48 = *(_DWORD *)(a1 + 5464);
            v49 = (_DWORD *)(*(_QWORD *)(a1 + 4576) + 13264);
            do
            {
              v48 += *v49;
              v49 += 3328;
              --v47;
            }
            while (v47);
            *(_DWORD *)(a1 + 5464) = v48;
          }
LABEL_57:
          v54 = *(_QWORD *)(a1 + 2232);
          v55 = 1 << (*(_BYTE *)(*(_QWORD *)(v54 + 40) + 2113) - *(_DWORD *)(a1 + 5460));
          v56 = (v55 - 1 + *(_DWORD *)(a1 + 4732)) / v55 * ((v55 - 1 + *(_DWORD *)(a1 + 4728)) / v55);
          if (v56 < 1)
          {
            *(_QWORD *)(a1 + 5472) = 0;
            *(_DWORD *)(a1 + 5468) = 0;
          }
          else
          {
            v57 = *(_DWORD *)(a1 + 5464);
            *(_DWORD *)(a1 + 5468) = fabs(sqrt((double)((v57 + (v56 >> 1)) / v56)));
            v58 = v56 << (2 * *(_BYTE *)(a1 + 5456) - 6);
            v59 = (v57 + (v58 >> 1)) / v58;
            v60 = *(_DWORD *)(a1 + 4812);
            *(_DWORD *)(a1 + 5472) = fabs(sqrt((double)v60));
            *(_DWORD *)(a1 + 5476) = fabs(sqrt((double)v59));
            if (v59 >= 3 * v60)
              *(_BYTE *)(*(_QWORD *)(v54 + 616) + 1172) = 1;
          }
          v61 = *(_QWORD *)(v54 + 576);
          if (*(_BYTE *)(v61 + 937))
          {
            v62 = *(_QWORD *)(a1 + 5432);
            v63 = *(_DWORD *)(a1 + 5428);
            if (v63)
            {
              v64 = 0;
              v65 = 0;
              v66 = 0;
              v67 = *(unsigned int *)(a1 + 5424);
              v68 = *(_QWORD *)(a1 + 5432);
              do
              {
                if ((_DWORD)v67)
                {
                  v69 = 0;
                  do
                  {
                    v70 = *(_DWORD *)(v68 + v69);
                    v66 += v70;
                    v64 += (v70 * v70);
                    v69 += 4;
                  }
                  while (4 * v67 != v69);
                }
                ++v65;
                v68 += 4 * *(_QWORD *)(a1 + 5416);
              }
              while (v65 != v63);
              v71 = v67 * v63;
              if ((int)v71 > 0)
              {
                v66 = (int)(v66 + (v71 >> 1)) / (int)v71;
                v64 = (v64 + (v71 >> 1)) / v71 - (v66 * v66);
              }
              if (v66 <= 1)
                v66 = 1;
              if (v64 >= 2)
              {
                v72 = __clz(v64);
                v73 = ((byte_1C9860C84[(unint64_t)((_DWORD)v64 << (v72 + 1)) >> 24] << 12) | 0x200000u) >> ((v72 + 1) >> 1);
                if ((v72 & 1) == 0)
                  v73 = (11585 * v73) >> 14;
                LODWORD(v64) = (v73 + 16) >> 5;
              }
            }
            else
            {
              LODWORD(v64) = 0;
              v66 = 1;
            }
            v74 = (float)v64;
            v75 = *(_QWORD *)(a1 + 5368);
            v76 = v74 / (float)v66;
            if (*(_BYTE *)(*(_QWORD *)(v54 + 616) + 1172))
            {
              v77 = 0;
              v78 = 0;
              *(_QWORD *)(v61 + 312) = 1092616192;
              *(_DWORD *)(v61 + 320) = 0;
              v79 = 10.0;
            }
            else
            {
              v79 = *(float *)(v61 + 312);
              v78 = *(_DWORD *)(v61 + 320);
              v77 = *(_DWORD *)(v61 + 316);
            }
            v80 = v78 + 1;
            v81 = (float)(v76 + (float)(v79 * (float)v78)) / (float)(v78 + 1);
            *(float *)(v61 + 312) = v81;
            v82 = (v66 + (v80 >> 1) + v77 * v78) / v80;
            *(_DWORD *)(v61 + 316) = v82;
            *(_DWORD *)(v61 + 320) = v80;
            if (v82 >= 90)
              v83 = 90;
            else
              v83 = v82;
            if (v83 <= 30)
              v83 = 30;
            *(_DWORD *)(a1 + 52) = v82;
            v84 = 1.0;
            v85 = (float)((float)(v83 - 30) * -0.005) + 1.0;
            *(_BYTE *)(a1 + 56) = v81 > v85;
            v86 = (float)(v81 - v85) * 10.0;
            if (v86 < 1.0)
              v84 = (float)(v81 - v85) * 10.0;
            if (v86 <= 0.0)
              v84 = 0.0;
            *(float *)(a1 + 60) = v84;
            if (v63 && !*(_BYTE *)(v54 + 648) && v81 > v85)
            {
              v87 = 0;
              v88 = *(unsigned int *)(a1 + 5424);
              v89 = 4 * *(_QWORD *)(a1 + 5416);
              v90 = v88;
              do
              {
                if (v90)
                {
                  v91 = 0;
                  do
                  {
                    v92 = *(_DWORD *)(v62 + 4 * v91);
                    v93 = v66 >= v92;
                    v94 = v66 - v92;
                    if (v94 != 0 && v93)
                    {
                      if (v94 >= 21)
                        v94 = 21;
                      *(_DWORD *)(v75 + 4 * v91) -= (*(_DWORD *)(v75 + 4 * v91) * v94) >> 6;
                      v88 = *(unsigned int *)(a1 + 5424);
                    }
                    ++v91;
                  }
                  while (v91 < v88);
                  v63 = *(_DWORD *)(a1 + 5428);
                  v90 = v88;
                }
                ++v87;
                v75 += v89;
                v62 += v89;
              }
              while (v87 < v63);
            }
          }
          v95 = *(_QWORD *)(a1 + 2216);
          if (!v95)
            return 0;
          result = 0;
          v96 = v2[209];
          v2[209] = v95;
          *(_QWORD *)(a1 + 2216) = v96;
          v97 = v2[210];
          v2[210] = *(_QWORD *)(a1 + 2224);
          *(_QWORD *)(a1 + 2224) = v97;
          return result;
        }
      }
      v50 = *(_DWORD *)(a1 + 4740);
      if (v50)
      {
        v51 = 0;
        v52 = *(_DWORD *)(a1 + 4736);
        do
        {
          if (v52)
          {
            for (i = 0; i < v52; ++i)
            {
              *(_DWORD *)(a1 + 5464) += sub_1C97D9E24(a1, i << v45, v51 << v45, 0, *(_QWORD *)(a1 + 4576));
              v52 = *(_DWORD *)(a1 + 4736);
            }
            v50 = *(_DWORD *)(a1 + 4740);
          }
          ++v51;
        }
        while (v51 < v50);
      }
      goto LABEL_57;
    }
    v15 = *(_QWORD *)(a1 + 4592);
    if (0x4EC4EC4EC4EC4EC5 * ((v15 - v11) >> 10) >= v14)
    {
      v35 = v11 + 13312 * v14;
      v36 = v11 + 16;
      do
      {
        bzero((void *)(v36 - 16), 0x3400uLL);
        sub_1C9797DA4(v36);
        v37 = (_OWORD *)(v36 + 12856);
        *(_QWORD *)(v36 + 12920) = 0;
        *(_OWORD *)(v36 + 12888) = 0u;
        *(_OWORD *)(v36 + 12904) = 0u;
        v38 = v36 + 13296;
        v36 += 13312;
        *v37 = 0u;
        v37[1] = 0u;
      }
      while (v38 != v35);
      *(_QWORD *)(a1 + 4584) = v35;
      goto LABEL_41;
    }
    if ((v10 & 0x80000000) != 0)
      sub_1C9747024();
    v99 = v2;
    v16 = 0x4EC4EC4EC4EC4EC5 * ((v15 - v12) >> 10);
    v17 = 2 * v16;
    if (2 * v16 <= v10)
      v17 = v10;
    if (v16 >= 0x2762762762762)
      v18 = 0x4EC4EC4EC4EC4;
    else
      v18 = v17;
    if (v18 > 0x4EC4EC4EC4EC4)
      sub_1C9724B4C();
    v19 = (char *)operator new(13312 * v18, (std::align_val_t)0x40uLL);
    v20 = &v19[13312 * v13];
    v21 = &v19[13312 * (int)v10];
    v22 = (uint64_t)(v20 + 16);
    do
    {
      bzero((void *)(v22 - 16), 0x3400uLL);
      sub_1C9797DA4(v22);
      v23 = (_OWORD *)(v22 + 12856);
      *(_QWORD *)(v22 + 12920) = 0;
      *(_OWORD *)(v22 + 12888) = 0u;
      *(_OWORD *)(v22 + 12904) = 0u;
      v24 = v22 + 13296;
      v22 += 13312;
      *v23 = 0u;
      v23[1] = 0u;
    }
    while ((char *)v24 != v21);
    v25 = &v19[13312 * v18];
    v26 = *(_QWORD *)(a1 + 4584);
    v27 = *(_QWORD *)(a1 + 4576);
    if (v26 == v27)
    {
      *(_QWORD *)(a1 + 4576) = v20;
      *(_QWORD *)(a1 + 4584) = v21;
      *(_QWORD *)(a1 + 4592) = v25;
    }
    else
    {
      v98 = v25;
      do
      {
        v28 = v20 - 13312;
        v29 = v26 - 13312;
        memcpy(v20 - 13312, (const void *)(v26 - 13312), 0x3248uLL);
        v30 = 0;
        *((_QWORD *)v28 + 1609) = 0;
        *((_OWORD *)v28 + 805) = 0u;
        *(_OWORD *)(v28 + 12872) = *(_OWORD *)(v26 - 440);
        *((_QWORD *)v28 + 1611) = *(_QWORD *)(v26 - 424);
        *(_OWORD *)(v26 - 440) = 0u;
        *(_QWORD *)(v26 - 424) = 0;
        do
        {
          v31 = &v20[v30 - 416];
          v32 = v26 + v30 - 416;
          *(_QWORD *)&v20[v30 - 408] = 0;
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v31 + 2) = 0;
          *(_OWORD *)v31 = *(_OWORD *)v32;
          *(_QWORD *)&v20[v30 - 400] = *(_QWORD *)(v26 + v30 - 400);
          *(_QWORD *)(v26 + v30 - 408) = 0;
          *(_QWORD *)v32 = 0;
          *(_QWORD *)(v32 + 16) = 0;
          v30 += 24;
        }
        while (v30 != 48);
        memcpy(v20 - 368, (const void *)(v26 - 368), 0x148uLL);
        v20 -= 13312;
        v26 -= 13312;
      }
      while (v29 != v27);
      v33 = *(_QWORD *)(a1 + 4576);
      v26 = *(_QWORD *)(a1 + 4584);
      *(_QWORD *)(a1 + 4576) = v28;
      *(_QWORD *)(a1 + 4584) = v21;
      *(_QWORD *)(a1 + 4592) = v98;
      if (v26 != v33)
      {
        v2 = v99;
        do
        {
          v26 -= 13312;
          sub_1C97A12F0(v26);
        }
        while (v26 != v33);
        v26 = v33;
LABEL_39:
        if (v26)
          MEMORY[0x1CAA43B90](v26, 64);
        goto LABEL_41;
      }
    }
    v2 = v99;
    goto LABEL_39;
  }
  return result;
}

void sub_1C97D9D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a14)
    std::mutex::unlock(a13);
  _Unwind_Resume(exception_object);
}

BOOL sub_1C97D9D70(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  char v8;
  unint64_t v9;
  uint64_t v10;

  v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 2232) + 40) + 2113);
  v9 = sub_1C97D9E24(a1, *a3 << v8, (*a4 << v8), 0, *(_QWORD *)(a1 + 4576) + 13312 * a2);
  v10 = *(_QWORD *)(a1 + 4576) + 13312 * a2;
  *(_QWORD *)(v10 + 13264) += v9;
  LODWORD(v10) = *a3 + 1;
  *a3 = v10;
  if ((int)v10 >= *(_DWORD *)(a1 + 4736))
  {
    ++*a4;
    *a3 = 0;
  }
  return *a4 < *(_DWORD *)(a1 + 4740);
}

unint64_t sub_1C97D9E24(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int16x8_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  unint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _BYTE *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  __int128 *v122;
  unint64_t v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t (*v138)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v153;
  int v154;
  uint64_t v156[2];
  uint64_t v157[6];
  unsigned __int8 v158;
  _DWORD v159[15];
  unsigned __int8 v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v154 = a2;
  if (*(_DWORD *)(a1 + 4728) <= a2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v5) = a4;
    v7 = 0;
    v8 = -a4;
    while (*(_DWORD *)(a1 + 4732) > (int)a3)
    {
      v10 = *(_QWORD **)(a1 + 2232);
      v11 = *(unsigned __int8 *)(v10[5] + 2113);
      v12 = v8 + v11;
      v13 = 1 << (v8 + v11);
      v153 = v7;
      if (v8 + v11 <= *(_DWORD *)(a1 + 5456))
      {
        v18 = a3 | v154;
        if ((((1 << (v11 - *(_DWORD *)(a1 + 5460))) - 1) & (a3 | v154)) != 0)
          break;
        v136 = 1 << (v11 - *(_DWORD *)(a1 + 5460));
        *(_DWORD *)(a5 + 12852) = 5;
        v19 = v10[77];
        v20 = *(_QWORD *)(v19 + 416);
        v21 = v10[79];
        v22 = *(_QWORD *)(v21 + 416);
        v23 = *(_QWORD *)(v19 + 400);
        v24 = (v20 * (int)a3 + v154) << *(_BYTE *)(v19 + 531);
        v25 = *(_BYTE *)(v21 + 531);
        v139 = v13;
        if (v18 < 0
          || (v26 = *(_QWORD *)(*(_QWORD *)(a1 + 2248) + 8), *(_DWORD *)(v26 + 520) <= v154)
          || *(_DWORD *)(v26 + 524) <= (int)a3)
        {
          v27 = 0;
          v28 = 0;
        }
        else
        {
          v27 = *(_QWORD *)(v26 + 800) + 2 * (*(_QWORD *)(v26 + 768) * ((uint64_t)(int)a3 >> 3) + (v154 >> 3));
          v28 = (__int16 *)(*(_QWORD *)(v26 + 880)
                          + 16 * (*(_QWORD *)(v26 + 848) * ((uint64_t)(int)a3 >> 2) + (v154 >> 2)));
        }
        v29 = *(_QWORD *)(v21 + 400);
        v30 = (v22 * (int)a3 + v154) << v25;
        v31 = v23 + v24;
        v32 = v5 & 3 | (*(unsigned __int8 *)(v27 + 1) << 8);
        *(_WORD *)v27 = v32;
        v33 = *(_QWORD *)(a1 + 2248);
        v34 = *(_QWORD *)(v33 + 16);
        v35 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 768);
        v36 = vdupq_n_s16(v32);
        v37 = *(unsigned __int8 *)(v34 + 2113) - v139;
        v149 = v22;
        switch(v37)
        {
          case 6u:
            *(int16x8_t *)v27 = v36;
            *(int16x8_t *)(v27 + 2 * v35) = v36;
            *(int16x8_t *)(v27 + 4 * v35) = v36;
            *(int16x8_t *)(v27 + 6 * v35) = v36;
            *(int16x8_t *)(v27 + 8 * v35) = v36;
            *(int16x8_t *)(v27 + 10 * v35) = v36;
            *(int16x8_t *)(v27 + 12 * v35) = v36;
            *(int16x8_t *)(v27 + 14 * v35) = v36;
            break;
          case 5u:
            *(_QWORD *)v27 = v36.i64[0];
            *(_QWORD *)(v27 + 2 * v35) = v36.i64[0];
            *(_QWORD *)(v27 + 4 * v35) = v36.i64[0];
            *(_QWORD *)(v27 + 6 * v35) = v36.i64[0];
            break;
          case 4u:
            *(_DWORD *)v27 = v36.i32[0];
            *(_DWORD *)(v27 + 2 * v35) = v36.i32[0];
            break;
        }
        v38 = v29 + v30;
        *(_QWORD *)(a5 + 12856) = v31;
        v134 = v31;
        v135 = v20;
        *(_QWORD *)(a5 + 12864) = v20;
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 2232) + 576) + 591))
        {
          sub_1C980B03C(*(_QWORD *)(a1 + 2248), v154, a3, 0, 0, v139, v139, (__int32 *)v157);
          if (v18 < 0)
          {
            v50 = 0;
            v49 = v149;
          }
          else
          {
            v48 = *(_QWORD *)(*(_QWORD *)(a5 + 12944) + 8);
            v49 = v149;
            if (*(_DWORD *)(v48 + 520) <= v154 || *(_DWORD *)(v48 + 524) <= (int)a3)
              v50 = 0;
            else
              v50 = *(_QWORD *)(v48 + 880) + 16 * (*(_QWORD *)(v48 + 848) * ((uint64_t)(int)a3 >> 2) + (v154 >> 2));
          }
          LODWORD(v156[0]) = 0;
          v141 = *(_QWORD *)(a5 + 12864);
          v143 = *(_QWORD *)(a5 + 12856);
          v138 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 12952)
                                                                                              + 8 * v12
                                                                                              + 200);
          v67 = *(_BYTE **)a5;
          *((_DWORD *)v67 + 10) = 0;
          *((_QWORD *)v67 + 2) = 0;
          *((_QWORD *)v67 + 3) = 0;
          *((_QWORD *)v67 + 4) = -1;
          *((_WORD *)v67 + 22) = 1;
          v68 = *(_QWORD *)(a5 + 8);
          *(_DWORD *)(v68 + 40) = 0;
          *(_QWORD *)(v68 + 16) = 0;
          *(_QWORD *)(v68 + 24) = 0;
          *(_QWORD *)(v68 + 32) = -1;
          *(_WORD *)(v68 + 44) = 1;
          **(_BYTE **)a5 = 0;
          *(_BYTE *)(*(_QWORD *)a5 + 1) = 15;
          **(_BYTE **)(a5 + 8) = 0;
          *(_BYTE *)(*(_QWORD *)(a5 + 8) + 1) = 15;
          sub_1C979DCE0((_QWORD *)a5, v154, a3, v139, v139, 0, (uint64_t)v157, (uint64_t)v157, v49, v38, *(_QWORD *)a5, v156, 0);
          v69 = *(_QWORD *)a5;
          if (*(_QWORD *)(*(_QWORD *)a5 + 32) >= 0x4B1uLL)
          {
            v70 = *(_DWORD *)(a5 + 12852);
          }
          else
          {
            v70 = 3;
            *(_DWORD *)(a5 + 12852) = 3;
          }
          v71 = 4 * *(_DWORD *)(a5 + 12708);
          while (1)
          {
            v72 = *(__int16 *)(v69 + 4);
            if (v72 >= 0)
              v73 = *(__int16 *)(v69 + 4);
            else
              v73 = -v72;
            if ((1 << v70) + v73 <= v71)
            {
              v74 = *(__int16 *)(v69 + 6);
              if (v74 < 0)
                v74 = -v74;
              v75 = (1 << v70) + v74;
              v76 = 4 * *(_DWORD *)(a5 + 12712);
              if (v70 < 3 || v75 <= v76)
              {
                if (v75 > v76)
                  goto LABEL_71;
                v110 = 0;
                v148 = v38;
                v133 = v50;
LABEL_109:
                v111 = 0;
                v151 = *(_DWORD *)(v69 + 4);
                if (v70 <= 2)
                  v112 = (char *)&unk_1C983327F;
                else
                  v112 = (char *)&unk_1C983326F;
                v113 = (char *)&unk_1C9833287;
                if (v70 > 2)
                  v113 = (char *)&unk_1C9833277;
                v145 = v113;
                v146 = v112;
                do
                {
                  *(_WORD *)(*(_QWORD *)(a5 + 8) + 4) = (v146[v111] << v70) + v151;
                  *(_WORD *)(*(_QWORD *)(a5 + 8) + 6) = (v145[v111] << v70) + HIWORD(v151);
                  v114 = *(char **)(a5 + 8);
                  if (v110 <= 0)
                  {
                    v117 = *((_DWORD *)v114 + 1);
LABEL_124:
                    v159[v110++ & 0x3F] = v117;
                    v119 = *v114;
                    v120 = *(_QWORD *)(*(_QWORD *)(a5 + 12944) + 16 * v119 + 1672);
                    *(_BYTE *)(a5 + 12690) = v119;
                    *(_DWORD *)(a5 + 12692) = *(_DWORD *)(v120 + 520);
                    *(_DWORD *)(a5 + 12700) = *(_DWORD *)(v120 + 524);
                    v114[1] = 15;
                    sub_1C979CBC8(a5, *(_QWORD *)(a5 + 8), v154, a3, v139, v139, v149, v148, 0);
                    v121 = v138(v139, v139, v143, v141, v148, v149);
                    v122 = *(__int128 **)(a5 + 8);
                    *((_QWORD *)v122 + 2) = v121;
                    v123 = ((*(unsigned __int16 *)(*(_QWORD *)(a5 + 12952) + 2 * *((__int16 *)v122 + 22) + 152)
                           * (unint64_t)*((unsigned int *)v122 + 10)) >> (8 * (*((_WORD *)v122 + 22) == 0)))
                         + v121;
                    *((_QWORD *)v122 + 4) = v123;
                    v124 = *(_OWORD **)a5;
                    if (v123 < *(_QWORD *)(*(_QWORD *)a5 + 32))
                    {
                      v125 = *v122;
                      v126 = v122[2];
                      v124[1] = v122[1];
                      v124[2] = v126;
                      *v124 = v125;
                    }
                  }
                  else
                  {
                    v115 = 0;
                    if (v110 >= 64)
                      v116 = 64;
                    else
                      v116 = v110;
                    v117 = *((_DWORD *)v114 + 1);
                    v118 = -v116;
                    while (v117 != v159[((_BYTE)v110 + (_BYTE)v115 - 1) & 0x3F])
                    {
                      if (v118 == --v115)
                        goto LABEL_124;
                    }
                  }
                  ++v111;
                }
                while (v111 != 8);
                v69 = *(_QWORD *)a5;
                v70 = *(_DWORD *)(a5 + 12852);
                v50 = v133;
                v38 = v148;
                v49 = v149;
                if (v151 == *(_DWORD *)(*(_QWORD *)a5 + 4))
                {
                  if (v70 == 2)
                    goto LABEL_71;
                  *(_DWORD *)(a5 + 12852) = --v70;
                }
                v127 = 4 * *(_DWORD *)(a5 + 12708);
                while (1)
                {
                  v128 = *(__int16 *)(v69 + 4);
                  if (v128 >= 0)
                    v129 = *(__int16 *)(v69 + 4);
                  else
                    v129 = -v128;
                  if ((1 << v70) + v129 <= v127)
                  {
                    v130 = *(__int16 *)(v69 + 6);
                    if (v130 < 0)
                      v130 = -v130;
                    v131 = (1 << v70) + v130;
                    v132 = 4 * *(_DWORD *)(a5 + 12712);
                    if (v70 < 3 || v131 <= v132)
                    {
                      if (v131 > v132)
                      {
LABEL_71:
                        *(_BYTE *)(v50 + 10) = 3;
                        *(_BYTE *)(v50 + 11) = *(_BYTE *)(v50 + 11) & 0xAE | (16 * (v156[0] & 1));
                        *(_BYTE *)(v50 + 8) = 16 * **(_BYTE **)a5;
                        *(_DWORD *)v50 = *(_DWORD *)(*(_QWORD *)a5 + 4);
                        *(_DWORD *)(v50 + 4) = 0;
                        *(_BYTE *)(v50 + 9) = -16;
                        v66 = *(_QWORD *)(*(_QWORD *)a5 + 32);
                        goto LABEL_72;
                      }
                      goto LABEL_109;
                    }
                  }
                  else if (v70 < 3)
                  {
                    goto LABEL_71;
                  }
                  *(_DWORD *)(a5 + 12852) = --v70;
                }
              }
            }
            else if (v70 < 3)
            {
              goto LABEL_71;
            }
            *(_DWORD *)(a5 + 12852) = --v70;
          }
        }
        v147 = v29 + v30;
        v39 = *(_QWORD *)(a1 + 2248);
        v156[0] = 0;
        v156[1] = 0;
        memset(v157, 0, 24);
        sub_1C980AE10(v39, v154, a3, v139, v139, v156, v157);
        sub_1C974F30C(v39, v154, a3, v139, v139, (uint64_t)v159, 5u, v156, v157, 1);
        if (v18 < 0
          || (v40 = *(_QWORD *)(*(_QWORD *)(a5 + 12944) + 8), *(_DWORD *)(v40 + 520) <= v154)
          || *(_DWORD *)(v40 + 524) <= (int)a3)
        {
          v41 = 0;
        }
        else
        {
          v41 = *(_QWORD *)(v40 + 880) + 16 * (*(_QWORD *)(v40 + 848) * ((uint64_t)(int)a3 >> 2) + (v154 >> 2));
        }
        v158 = 0;
        v42 = v160;
        if (v160)
        {
          v43 = 0;
          v44 = 0;
          do
          {
            if (!LOBYTE(v159[3 * v44]))
            {
              *((_DWORD *)v157 + v43) = v159[3 * v44 + 1] & 0xFFFEFFFE;
              v43 = v158;
              if (v158)
              {
                v45 = v157;
                v46 = v158;
                while (1)
                {
                  v47 = *(_DWORD *)v45;
                  v45 = (uint64_t *)((char *)v45 + 4);
                  if (v47 == *((_DWORD *)v157 + v158))
                    break;
                  if (!--v46)
                    goto LABEL_35;
                }
              }
              else
              {
LABEL_35:
                v43 = ++v158;
              }
            }
            ++v44;
          }
          while (v44 != v42);
        }
        else
        {
          v43 = 0;
        }
        v51 = *(_QWORD *)(a5 + 12856);
        v52 = *(_QWORD *)(a5 + 12864);
        v53 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 12952)
                                                                                           + 8 * v12
                                                                                           + 200);
        v54 = *(_QWORD *)(a5 + 8);
        *(_DWORD *)(v54 + 40) = 0;
        *(_QWORD *)(v54 + 16) = 0;
        *(_QWORD *)(v54 + 24) = 0;
        *(_QWORD *)(v54 + 32) = -1;
        *(_WORD *)(v54 + 44) = 1;
        **(_BYTE **)(a5 + 8) = 0;
        if (v43)
        {
          v137 = v41;
          v55 = 0;
          v144 = v51;
          v56 = v43;
          v57 = *(_QWORD *)(a5 + 8);
          v58 = -1;
          v59 = v157;
          v140 = v52;
          v142 = v53;
          do
          {
            v60 = *(_DWORD *)v59;
            v59 = (uint64_t *)((char *)v59 + 4);
            v150 = v60;
            *(_DWORD *)(v57 + 4) = v60;
            v61 = *(char **)(a5 + 8);
            v62 = *v61;
            v63 = *(_QWORD *)(*(_QWORD *)(a5 + 12944) + 16 * v62 + 1672);
            *(_BYTE *)(a5 + 12690) = v62;
            *(_DWORD *)(a5 + 12692) = *(_DWORD *)(v63 + 520);
            *(_DWORD *)(a5 + 12700) = *(_DWORD *)(v63 + 524);
            v61[1] = 15;
            sub_1C979E35C((_QWORD *)a5, *(char **)(a5 + 8), v154, a3, v139, v139, v149, v147);
            v64 = v142(v139, v139, v144, v140, v147, v149);
            v57 = *(_QWORD *)(a5 + 8);
            *(_QWORD *)(v57 + 16) = v64;
            v65 = v58 > v64;
            if (v58 >= v64)
              v58 = v64;
            if (v65)
              v55 = v150;
            --v56;
          }
          while (v56);
          v66 = (29 * v58) >> 5;
          v41 = v137;
        }
        else
        {
          v55 = 0;
          v66 = 0x7FFFFFFFFFFFFFFLL;
        }
        *(_BYTE *)(v41 + 11) &= 0xAEu;
        *(_BYTE *)(v41 + 8) = 0;
        *(_DWORD *)v41 = v55;
        *(_DWORD *)(v41 + 4) = 0;
        *(_WORD *)(v41 + 9) = 1008;
        v38 = v147;
        v49 = v149;
LABEL_72:
        if (v136 >= 4)
        {
          v77 = 0;
          LODWORD(v78) = v136 >> 2;
          if (v136 >> 2 <= 1)
            v78 = 1;
          else
            v78 = v78;
          v79 = 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2248) + 8) + 848);
          v80 = v28;
          do
          {
            v81 = v80;
            v82 = v78;
            do
            {
              v83 = *(_QWORD *)v28;
              *(_QWORD *)((char *)v81 + 6) = *(_QWORD *)(v28 + 3);
              *v81 = v83;
              v81 += 2;
              --v82;
            }
            while (v82);
            ++v77;
            v80 = (_QWORD *)((char *)v80 + v79);
          }
          while (v77 != v136 >> 2);
        }
        v84 = *(_DWORD *)(a1 + 5456);
        if (v84 == 34)
        {
          v85 = v38;
          v86 = 0;
        }
        else
        {
          v87 = 0;
          v88 = 0;
          v89 = (*(int *)(a1 + 4728) >> 3);
          v90 = (int)v89 * ((int)a3 >> 3) + (v154 >> 3);
          v91 = *(_QWORD *)(a1 + 4928) + 4 * v90;
          v92 = (1 << (v84 - 3));
          v93 = 4 * v89;
          do
          {
            v94 = (int *)v91;
            v95 = (1 << (v84 - 3));
            do
            {
              v96 = *v94++;
              v88 += v96;
              --v95;
            }
            while (v95);
            ++v87;
            v91 += v93;
          }
          while (v87 != v92);
          v97 = 0;
          v98 = 0;
          v99 = *(_QWORD *)(a1 + 4872) + 4 * v90;
          do
          {
            v100 = (int *)v99;
            v101 = (1 << (v84 - 3));
            do
            {
              v102 = *v100++;
              v98 += v102;
              --v101;
            }
            while (v101);
            ++v97;
            v99 += v93;
          }
          while (v97 != v92);
          v85 = v38;
          v86 = v98 + (v88 << 7);
        }
        v103 = (v154 >> v84) + ((int)a3 >> v84) * *(_DWORD *)(a1 + 5416);
        *(_DWORD *)(*(_QWORD *)(a1 + 5368) + 4 * v103) = v66;
        v104 = *(_BYTE **)(*(_QWORD *)(a1 + 2232) + 576);
        v7 = v153;
        if (v104[752] || v104[937])
        {
          v105 = *v28 * *v28 + v28[1] * v28[1];
          if (v105 >= 2)
          {
            v106 = __clz(v105);
            v107 = ((byte_1C9860C84[(unint64_t)(v105 << (v106 + 1)) >> 24] << 12) | 0x200000u) >> ((v106 + 1) >> 1);
            if ((v106 & 1) == 0)
              v107 = (11585 * v107) >> 14;
            v105 = (v107 + 16) >> 5;
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 5432) + 4 * v103) = v105;
        }
        if (v104[913])
        {
          v108 = v85;
          sub_1C979CBC8(a5, *(_QWORD *)a5, v154, a3, v139, v139, v49, v85, 0);
          v109 = sub_1C97DAB24(a1, v134, v135, v108, v49, *(_DWORD *)(a1 + 5456));
          v7 = v153;
          *(_DWORD *)(*(_QWORD *)(a1 + 5392) + 4 * v103) = v109;
        }
        if (v66 <= 3 * v86)
          v16 = v66;
        else
          v16 = v86;
        if (*(_BYTE *)(a1 + 17))
        {
          if (sub_1C97DABC8(a1, v154, a3, v139))
            *(_DWORD *)(a1 + 5536) += v16;
          else
            *(_DWORD *)(a1 + 5540) += v16;
          v7 = v153;
        }
        return v16 + v7;
      }
      v5 = (v5 + 1);
      v14 = sub_1C97D9E24(a1, v154, a3, v5, a5);
      v15 = sub_1C97D9E24(a1, (v154 + (v13 >> 1)), a3, v5, a5);
      a3 = (a3 + (v13 >> 1));
      v7 = v14 + v153 + v15 + sub_1C97D9E24(a1, v154, a3, v5, a5);
      --v8;
      v154 += v13 >> 1;
      if (*(_DWORD *)(a1 + 4728) <= v154)
        break;
    }
  }
  v16 = 0;
  return v16 + v7;
}

uint64_t sub_1C97DAB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v6 = ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a6 + 120))(a2, a3, a4, a5)
      + (1 << (2 * a6 - 1))) >> (2 * a6) << 10;
  if (!v6)
    return 0;
  v7 = __clz(v6);
  v8 = ((byte_1C9860C84[(unint64_t)(v6 << (v7 + 1)) >> 24] << 12) | 0x200000u) >> ((v7 + 1) >> 1);
  if ((v7 & 1) == 0)
    v8 = (11585 * v8) >> 14;
  return (v8 + 16) >> 5;
}

BOOL sub_1C97DABC8(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  BOOL v8;
  int v9;
  float v10;
  int v11;
  float v12;
  int v13;
  BOOL v14;

  v4 = *(unsigned int *)(a1 + 5548);
  if ((int)v4 < 1)
  {
    return 0;
  }
  else
  {
    v5 = 0;
    v6 = a2 + (a4 >> 1);
    v7 = (int *)(a1 + 5564);
    v8 = 1;
    v9 = a3 + (a4 >> 1);
    do
    {
      v10 = (float)*(v7 - 1);
      v11 = (*(v7 - 3) - (int)(float)((float)(v10 * 0.4) * 0.5)) & ~((*(v7 - 3) - (int)(float)((float)(v10 * 0.4) * 0.5)) >> 31);
      if (v6 > v11)
      {
        v12 = (float)*v7;
        v13 = (*(v7 - 2) - (int)(float)((float)(v12 * 0.0) * 0.5)) & ~((*(v7 - 2)
                                                                      - (int)(float)((float)(v12 * 0.0) * 0.5)) >> 31);
        v14 = v6 >= v11 + (int)(float)(v10 * 1.4) || v9 <= v13;
        if (!v14 && v9 < v13 + (int)v12)
          break;
      }
      v7 += 4;
      v8 = ++v5 < v4;
    }
    while (v4 != v5);
  }
  return v8;
}

uint64_t sub_1C97DAC98(uint64_t a1, int a2, int a3)
{
  signed int v3;
  signed int v4;
  int v5;
  signed int v6;
  signed int v7;
  BOOL v8;
  signed int v9;
  int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;

  v3 = a2 & 0xFFFFFFF0;
  v4 = a3 & 0xFFFFFFF0;
  v5 = *(_DWORD *)(a1 + 4728);
  v6 = (a3 & 0xFFFFFFF0) + 16;
  v7 = *(_DWORD *)(a1 + 4732);
  v8 = v7 < v6;
  if (v7 >= v6)
    v9 = (a3 & 0xFFFFFFF0) + 16;
  else
    v9 = *(_DWORD *)(a1 + 4732);
  if (v5 >= v3 + 16)
    v10 = v3 + 16;
  else
    v10 = *(_DWORD *)(a1 + 4728);
  v11 = v5 < v3 + 16 || v8;
  v12 = v9 - v4;
  if (v9 <= v4)
  {
    v14 = 0;
    v13 = 0;
    if ((v11 & 1) != 0)
    {
LABEL_17:
      v21 = (v13 + ((v12 * (v10 - v3)) >> 1) - v14 * v14 / (unint64_t)(v12 * (v10 - v3))) / (v12 * (v10 - v3));
      goto LABEL_20;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = v5 + 15;
    v16 = ((v5 + 15) >> 4) * (a3 >> 4) + (a2 >> 4);
    v17 = *(_QWORD *)(a1 + 5048) + 8 * v16;
    v18 = *(_QWORD *)(a1 + 5024) + 4 * v16;
    v19 = (uint64_t)v15 >> 4;
    do
    {
      if (v10 > v3)
      {
        v20 = 0;
        do
        {
          v14 += *(unsigned int *)(v18 + 4 * (v20 >> 4));
          v13 += *(_QWORD *)(v17 + 8 * (v20 >> 4));
          v20 += 16;
        }
        while (v3 + v20 < v10);
      }
      v18 += 4 * v19;
      v17 += 8 * v19;
      v4 += 16;
    }
    while (v4 < v9);
    if ((v11 & 1) != 0)
      goto LABEL_17;
  }
  v21 = (v13 - ((unint64_t)(v14 * v14) >> 8) + 128) >> 8;
LABEL_20:
  v22 = (int)sqrt((double)v21);
  if (v21 > 0x3C1)
    return 0xFFFFFFFFLL;
  else
    return v22;
}

uint64_t sub_1C97DADA4(unsigned int (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, int a4, char a5, int a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;

  v7 = 1 << (a5 - 3);
  v8 = (a7 - a4) >> 3;
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = (a6 - a3) >> 3;
  if (v10 >= v7)
    v11 = v7;
  else
    v11 = v10;
  result = (a1(a2 + 4 * (a6 >> 3) * (uint64_t)(a4 >> 3) + 4 * (a3 >> 3), (uint64_t)a6 >> 3, v11, v9)
          + ((v9 * v11) >> 1))
         / ((int)v9
          * (int)v11);
  if (result >= 2)
  {
    v13 = __clz(result);
    if ((v13 & 1) != 0)
      v14 = ((byte_1C9860C84[(unint64_t)((_DWORD)result << (v13 + 1)) >> 24] << 12) | 0x200000u) >> ((v13 + 1) >> 1);
    else
      v14 = (11585
           * (((byte_1C9860C84[(unint64_t)((_DWORD)result << (v13 + 1)) >> 24] << 12) | 0x200000u) >> ((v13 + 1) >> 1))) >> 14;
    return (v14 + 16) >> 5;
  }
  return result;
}

unint64_t sub_1C97DAE74(int *a1, int a2, int a3, char a4, int a5, int a6, int a7)
{
  unint64_t result;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  char v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t k;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;

  switch(a7)
  {
    case 0:
      return sub_1C97DADA4(*((unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1 + 23), *((_QWORD *)a1 + 615), a2, a3, a4, a5, a6);
    case 1:
      v8 = 1 << (a4 - 3);
      v9 = (a6 - a3) >> 3;
      if (v9 >= v8)
        v9 = 1 << (a4 - 3);
      if (v9 < 1)
      {
        LODWORD(result) = -1;
LABEL_63:
        v62 = __clz(result);
        v63 = v62 + 1;
        v64 = ((_DWORD)result << (v62 + 1));
        goto LABEL_67;
      }
      v10 = 0;
      v11 = (uint64_t)a5 >> 3;
      if ((a5 - a2) >> 3 < v8)
        v8 = (a5 - a2) >> 3;
      v12 = *((_QWORD *)a1 + 609) + 4 * (((uint64_t)a2 >> 3) + (int)v11 * (uint64_t)(a3 >> 3));
      v13 = 4 * v11;
      result = 0xFFFFFFFFLL;
      do
      {
        if (v8 >= 1)
        {
          v14 = 0;
          do
          {
            v15 = *(_DWORD *)(v12 + v14);
            if (v15 >= result)
              result = result;
            else
              result = v15;
            v14 += 4;
          }
          while (4 * v8 != v14);
        }
        ++v10;
        v12 += v13;
      }
      while (v10 != v9);
      if (result >= 2)
        goto LABEL_63;
      return result;
    case 2:
      v16 = *a1;
      LODWORD(v17) = 1 << (a4 - *a1);
      v18 = (a6 - a3) >> *a1;
      if (v18 >= (int)v17)
        v18 = 1 << (a4 - *a1);
      if (v18 < 1)
        return -1;
      v19 = 0;
      v20 = 2 * v16;
      v21 = (a5 - a2) >> v16;
      if (v21 >= (int)v17)
        v17 = v17;
      else
        v17 = v21;
      v22 = a5 >> v16;
      v23 = (a2 >> v16) + (int)v22 * (uint64_t)(a3 >> v16);
      v24 = *((_QWORD *)a1 + 625) + 8 * v23;
      v25 = *((_QWORD *)a1 + 622) + 4 * v23;
      v26 = 1 << (v20 - 1);
      v27 = 4 * v22;
      result = -1;
      v28 = 8 * v22;
      do
      {
        if ((int)v17 >= 1)
        {
          for (i = 0; i != v17; ++i)
          {
            v30 = (*(_DWORD *)(v25 + 4 * i) * *(_DWORD *)(v25 + 4 * i)) >> v20;
            if ((unint64_t)(*(_QWORD *)(v24 + 8 * i) + (int)v26 - v30) >> v20 < result)
              result = (unint64_t)(*(_QWORD *)(v24 + 8 * i) + v26 - v30) >> v20;
          }
        }
        ++v19;
        v25 += v27;
        v24 += v28;
      }
      while (v19 != v18);
      return result;
    case 3:
      v31 = *a1;
      LODWORD(v32) = 1 << (a4 - *a1);
      v33 = (a6 - a3) >> *a1;
      if (v33 >= (int)v32)
        v33 = 1 << (a4 - *a1);
      if (v33 < 1)
      {
        LODWORD(v43) = -1;
      }
      else
      {
        v34 = 0;
        v35 = 2 * v31;
        v36 = (a5 - a2) >> v31;
        if (v36 >= (int)v32)
          v32 = v32;
        else
          v32 = v36;
        v37 = a5 >> v31;
        v38 = (a2 >> v31) + (int)v37 * (uint64_t)(a3 >> v31);
        v39 = *((_QWORD *)a1 + 625) + 8 * v38;
        v40 = *((_QWORD *)a1 + 622) + 4 * v38;
        v41 = 1 << (v35 - 1);
        v42 = 4 * v37;
        v43 = -1;
        v44 = 8 * v37;
        do
        {
          if ((int)v32 >= 1)
          {
            for (j = 0; j != v32; ++j)
            {
              v46 = (*(_DWORD *)(v40 + 4 * j) * *(_DWORD *)(v40 + 4 * j)) >> v35;
              if ((unint64_t)(*(_QWORD *)(v39 + 8 * j) + (int)v41 - v46) >> v35 < v43)
                v43 = (unint64_t)(*(_QWORD *)(v39 + 8 * j) + v41 - v46) >> v35;
            }
          }
          ++v34;
          v40 += v42;
          v39 += v44;
        }
        while (v34 != v33);
        result = v43;
        if (v43 < 2)
          return result;
      }
      v62 = __clz(v43);
      v63 = v62 + 1;
      v64 = ((_DWORD)v43 << (v62 + 1));
LABEL_67:
      v65 = ((byte_1C9860C84[v64 >> 24] << 12) | 0x200000u) >> (v63 >> 1);
      if ((v62 & 1) != 0)
        v66 = v65;
      else
        v66 = (11585 * v65) >> 14;
      return (v66 + 16) >> 5;
    case 4:
      v47 = *a1;
      LODWORD(v48) = 1 << (a4 - *a1);
      if ((a6 - a3) >> *a1 >= (int)v48)
        v49 = 1 << (a4 - *a1);
      else
        v49 = (a6 - a3) >> *a1;
      if (v49 < 1)
        return 0;
      v50 = 0;
      v51 = 0;
      v52 = 2 * v47;
      v53 = (a5 - a2) >> v47;
      v48 = v53 >= (int)v48 ? v48 : v53;
      v54 = a5 >> v47;
      v55 = (a2 >> v47) + v54 * (a3 >> v47);
      v56 = *((_QWORD *)a1 + 625) + 8 * v55;
      v57 = *((_QWORD *)a1 + 622) + 4 * v55;
      v58 = 4 * v54;
      v59 = 8 * v54;
      do
      {
        if ((int)v48 >= 1)
        {
          for (k = 0; k != v48; ++k)
            v51 += (*(_QWORD *)(v56 + 8 * k)
                  + (1 << (v52 - 1))
                  - (unint64_t)((*(_DWORD *)(v57 + 4 * k) * *(_DWORD *)(v57 + 4 * k)) >> v52)) >> v52;
        }
        ++v50;
        v57 += v58;
        v56 += v59;
      }
      while (v50 != v49);
      v61 = (v48 & ~((int)v48 >> 31)) * v49;
      if (!(_DWORD)v61)
        return 0;
      return (v51 + (unint64_t)(v61 >> 1)) / v61;
    default:
      return 0;
  }
}

uint64_t sub_1C97DB26C(uint64_t a1, int a2, int a3, int a4, int a5, char a6, int a7, unsigned int a8)
{
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  unsigned int v20;

  v11 = (*(_DWORD *)(*(_QWORD *)(a1 + 5344) + 4 * ((a5 + 15) >> 4) * (uint64_t)(a3 >> 4) + 4 * (a2 >> 4))
                     + (1 << (a6 - 8) >> 1)) >> (a6 - 8);
  if (v11 <= 0xBE)
  {
    if (v11 <= 0x9D)
    {
      if (v11 <= 0x7C)
      {
        if (v11 <= 0x6B)
        {
          if (v11 <= 0x4A)
          {
            v13 = v11 > 0x31;
            if (v11 > 0x31)
              v12 = 5;
            else
              v12 = 6;
          }
          else
          {
            v12 = 4;
            v13 = 2;
          }
        }
        else
        {
          v12 = 3;
          v13 = 3;
        }
      }
      else
      {
        v12 = 2;
        v13 = 4;
      }
    }
    else
    {
      v12 = 1;
      v13 = 5;
    }
  }
  else
  {
    v12 = 0;
    v13 = 6;
  }
  v14 = (sub_1C97DB3E4((int *)a1, a2, a3, 4) + ((1 << (2 * (a6 - 8))) >> 1)) >> (2 * (a6 - 8));
  if (v14 >= 2)
  {
    if (v14 >= 6)
    {
      if (v14 >= 0x1E)
      {
        if (v14 > 0x31)
          goto LABEL_27;
        v15 = 3;
      }
      else
      {
        v15 = 2;
      }
    }
    else
    {
      v15 = 1;
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = dword_1C9857D58[4 * v13 + v15] + a7;
  v17 = v16 - a4;
  if (v16 - a4 >= v12)
    v17 = v12;
  v18 = __OFSUB__(v16, a4);
  v19 = v16 - a4;
  if (v19 < 0 != v18)
    v12 = v19;
  else
    v12 = v17;
LABEL_27:
  if (v12 + a4 >= 51)
    v20 = 51;
  else
    v20 = v12 + a4;
  if (v12 + a4 <= (int)a8)
    return a8;
  else
    return v20;
}

unint64_t sub_1C97DB3E4(int *a1, int a2, int a3, char a4)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v5 = 1 << *a1;
  v6 = 1 << a4;
  v7 = v5 + ~a3 + a1[1183];
  if (v7 >= 1 << a4)
    v7 = 1 << a4;
  v8 = v7 >> v4;
  if ((int)v8 < 1)
  {
    v10 = 0;
    v21 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = *((_QWORD *)a1 + 604);
    v12 = v11 * (a3 >> v4) + (a2 >> v4);
    v13 = *((_QWORD *)a1 + 622) + 4 * v12;
    v14 = *((_QWORD *)a1 + 625) + 8 * v12;
    v15 = v5 + ~a2 + a1[1182];
    if (v15 < v6)
      v6 = v15;
    v16 = v6 >> v4;
    do
    {
      v17 = (int *)v13;
      v18 = v16;
      if ((int)v16 >= 1)
      {
        do
        {
          v19 = *v17++;
          v10 += v19;
          --v18;
        }
        while (v18);
      }
      ++v9;
      v13 += 4 * v11;
    }
    while (v9 != v8);
    v20 = 0;
    v21 = 0;
    v22 = 8 * v11;
    do
    {
      v23 = (int *)v14;
      v24 = v16;
      if ((int)v16 >= 1)
      {
        do
        {
          v25 = *v23;
          v23 += 2;
          v21 += v25;
          --v24;
        }
        while (v24);
      }
      ++v20;
      v14 += v22;
    }
    while (v20 != v8);
  }
  return ((1 << (2 * a4 - 1)) + (unint64_t)v21 - ((v10 * v10) >> (2 * a4))) >> (2 * a4);
}

uint64_t sub_1C97DB504(uint64_t a1, signed int a2, signed int a3, int a4)
{
  signed int v4;
  signed int v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 *v11;
  __int16 *v12;
  signed int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v4 = a2 & 0xFFFFFFF8;
  if (a4 >= 3)
    v5 = a3;
  else
    v5 = a3 & 0xFFFFFFF8;
  if (a4 <= 3)
    v6 = 3;
  else
    v6 = a4;
  if (a4 >= 3)
    v4 = a2;
  v7 = 1 << v6;
  v8 = *(_QWORD *)(a1 + 2240);
  v9 = *(unsigned __int8 *)(v8 + 504);
  v10 = v8 + 8 * *(int *)(v8 + 44);
  v11 = (__int16 *)(v10 + 54);
  v12 = (__int16 *)(v10 + 52);
  if (!v9)
    v11 = v12;
  v13 = *(_DWORD *)(a1 + 4732);
  if (v13 >= v5 + v7)
    v13 = v5 + v7;
  if (v5 >= v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = *v11 >> 3;
    v16 = v4 + v7;
    if (*(_DWORD *)(a1 + 4728) < v16)
      v16 = *(_DWORD *)(a1 + 4728);
    do
    {
      if (v4 < v16)
      {
        v17 = v4;
        do
        {
          v14 += *(_DWORD *)(*(_QWORD *)(a1 + 5512) + 4 * ((v5 >> 3) * v15 + (v17 >> 3)));
          v17 += 8;
        }
        while (v17 < v16);
      }
      v5 += 8;
    }
    while (v5 < v13);
  }
  return (v14 >> (2 * v6 - 6));
}

uint64_t sub_1C97DB5D0(int a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  int v13;
  int v14;
  int v18;
  uint64_t v19;
  float v20;
  signed int v21;
  double v22;
  long double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  int v28;
  double v29;
  double v30;
  int v31;
  signed int v32;
  int v33;
  signed int v34;
  signed int v35;
  int v36;
  signed int v37;
  signed int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  BOOL v54;
  _BOOL4 v55;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int16 *v75;
  uint64_t v76;
  int v77;
  signed int v78;
  unsigned int v79;
  unsigned int v80;
  _BOOL4 v81;
  _BOOL4 v82;
  int v83;
  BOOL v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v95;
  int v96;

  v8 = a4;
  if (a6 < 1)
    return v8;
  if ((int)a4 <= 1)
    v11 = 1;
  else
    v11 = a4;
  v13 = a5;
  v14 = v11 << 6;
  switch(*(_BYTE *)(a7 + 134))
  {
    case 0:
      v18 = *(_DWORD *)(a7 + 96);
      v19 = *(_QWORD *)(a8 + 2232);
      if (*(_BYTE *)(v19 + 648) || !*(_BYTE *)(v19 + 757))
      {
        v20 = *(float *)(a8 + 60) * 0.5;
        if (!v18)
          goto LABEL_24;
LABEL_25:
        v31 = 4;
        goto LABEL_26;
      }
      v20 = *(float *)(a8 + 60);
      if (v18)
        goto LABEL_25;
LABEL_24:
      if (*(_BYTE *)(*(_QWORD *)(v19 + 616) + 1172) || !*(_BYTE *)(a8 + 56))
        goto LABEL_25;
      if ((int)a4 >= 38)
        v95 = 38;
      else
        v95 = a4;
      if (v95 <= 22)
        v95 = 22;
      v31 = (int)((1.0 - v20) * 4.0 + (float)(v20 * (float)(v95 - 18)));
LABEL_26:
      if (*(_BYTE *)(a7 + 92))
      {
        v32 = a2 & 0xFFFFFFF0;
        v33 = 1 << (*(_BYTE *)(*(_QWORD *)(v19 + 576) + 538) - a3);
        v34 = *(_DWORD *)(a8 + 4732);
        v35 = (int)(v33 - 1 + (a2 & 0xFFFFFFF0)) <= v34
            ? 1 << (*(_BYTE *)(*(_QWORD *)(v19 + 576) + 538) - a3)
            : v34 - (a2 & 0xFFFFFFF0);
        if (v35 >= 1)
        {
          v36 = 0;
          v37 = v35 + v32;
          v38 = *(_DWORD *)(a8 + 4728);
          if ((int)(v33 - 1 + (a1 & 0xFFFFFFF0)) > v38)
            v33 = v38 - (a1 & 0xFFFFFFF0);
          v39 = v33 >> 4;
          v40 = (v38 + 15) >> 4;
          v41 = *(_QWORD *)(a8 + 24) + 4 * (v40 * (a2 >> 4) + (a1 >> 4));
          if (v39 <= 1)
            v39 = 1;
          v42 = 4 * v39;
          v43 = 4 * v40;
          v44 = 4;
          do
          {
            v45 = 0;
            do
            {
              v46 = *(_DWORD *)(v41 + v45);
              if (v46 >= v44)
                v47 = v44;
              else
                v47 = *(_DWORD *)(v41 + v45);
              if (v46 > 0)
              {
                v44 = v47;
                ++v36;
              }
              v45 += 4;
            }
            while (v42 != v45);
            v32 += 16;
            v41 += v43;
          }
          while (v32 < v37);
          v48 = v44 - 1;
          if (v36)
            v49 = v48 >= 3;
          else
            v49 = 1;
          if (!v49)
          {
            v50 = dword_1C9857DC8[v48] * a6;
            v52 = v50 + 4;
            v51 = v50 < -4;
            v53 = v50 + 11;
            if (!v51)
              v53 = v52;
            v13 = (a5 - (v53 >> 3)) & ~((a5 - (v53 >> 3)) >> 31);
          }
        }
      }
      if (!v18)
      {
        v54 = *(unsigned __int8 *)(v19 + 648) <= 2u && *(_DWORD *)(a8 + 48) == *(_DWORD *)(v19 + 652) - 1;
        v55 = !v54;
        if (!*(_BYTE *)(*(_QWORD *)(v19 + 616) + 1172) && v55)
        {
          v57 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 40) + 2113) - a3;
          v58 = *(_DWORD *)(a8 + 5456);
          if (v58 > v57)
            LOBYTE(v57) = *(_DWORD *)(a8 + 5456);
          if (v58 <= 3)
            LOBYTE(v59) = 3;
          else
            v59 = *(_DWORD *)(a8 + 5456);
          v96 = v31;
          v60 = 1 << (v57 - v58);
          if ((*(_DWORD *)(a8 + 4732) - a2) >> v58 >= v60)
            v61 = v60;
          else
            v61 = (*(_DWORD *)(a8 + 4732) - a2) >> v58;
          if ((*(_DWORD *)(a8 + 4728) - a1) >> v58 >= v60)
            v62 = v60;
          else
            v62 = (*(_DWORD *)(a8 + 4728) - a1) >> v58;
          v63 = ((*(unsigned int (**)(uint64_t))(a8 + 184))(*(_QWORD *)(a8 + 5368)
                                                                    + 4 * *(_QWORD *)(a8 + 5416) * (a2 >> v58) + 4 * (a1 >> v58))
               + (((v61 << (v59 - 3)) * (v62 << (v59 - 3))) >> 1))
              / ((v61 << (v59 - 3))
               * (v62 << (v59 - 3)));
          if (v63 >= 2)
          {
            v64 = __clz(v63);
            v65 = ((byte_1C9860C84[(unint64_t)(v63 << (v64 + 1)) >> 24] << 12) | 0x200000u) >> ((v64 + 1) >> 1);
            if ((v64 & 1) == 0)
              v65 = (11585 * v65) >> 14;
            v63 = (v65 + 16) >> 5;
          }
          if (v13 < (int)v63)
            v63 = v13;
          v13 = (int)((1.0 - v20) * (float)v13 + (float)(v20 * (float)v63));
          v19 = *(_QWORD *)(a8 + 2232);
          v31 = v96;
          if (!*(_BYTE *)(v19 + 648) && v13 < a6 && *(_BYTE *)(v19 + 757))
            v31 = (int)(float)((float)v96 + 6.0);
        }
      }
      if (*(_BYTE *)(v19 + 465))
      {
        v66 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 40) + 2113) - a3;
        if (v66 <= 3)
          LOBYTE(v66) = 3;
        LODWORD(v67) = 1 << (v66 - 3);
        LODWORD(v68) = (*(_DWORD *)(a8 + 4732) - a2) >> 3;
        if ((int)v68 >= (int)v67)
          v68 = v67;
        else
          v68 = v68;
        v69 = (*(_DWORD *)(a8 + 4728) - a1) >> 3;
        if (v69 >= (int)v67)
          v67 = v67;
        else
          v67 = v69;
        if ((int)v68 < 1)
        {
          v71 = 0;
        }
        else
        {
          v70 = 0;
          v71 = 0;
          v72 = *(int *)(a8 + 4744);
          v73 = *(_QWORD *)(v19 + 480) + 2 * (int)v72 * (a2 >> 3) + 2 * (a1 >> 3);
          v74 = 2 * v72;
          do
          {
            v75 = (unsigned __int16 *)v73;
            v76 = v67;
            if ((int)v67 >= 1)
            {
              do
              {
                v77 = *v75++;
                v71 += v77;
                --v76;
              }
              while (v76);
            }
            ++v70;
            v73 += v74;
          }
          while (v70 != v68);
        }
        v78 = (v71 + ((v68 * v67) >> 1)) / ((int)v68 * (int)v67);
        if (v78 < v13)
        {
          v13 *= v78;
          if (v13 >= 2)
          {
            v79 = __clz(v13);
            if ((v79 & 1) != 0)
              v80 = ((byte_1C9860C84[(unint64_t)(v13 << (v79 + 1)) >> 24] << 12) | 0x200000u) >> ((v79 + 1) >> 1);
            else
              v80 = (11585
                   * (((byte_1C9860C84[(unint64_t)(v13 << (v79 + 1)) >> 24] << 12) | 0x200000u) >> ((v79 + 1) >> 1))) >> 14;
            v13 = (v80 + 16) >> 5;
          }
        }
      }
      v81 = *(_BYTE *)(a7 + 135) != 0;
      v82 = v13 < a6;
      if (v31 <= 8)
        v83 = 8;
      else
        v83 = v31;
      v84 = !v81 || !v82;
      if (v81 && v82)
        v85 = v83;
      else
        v85 = v31;
      if (v84)
        v86 = v11 << 6;
      else
        v86 = v11 << 7;
      v87 = (((v13 - a6) * v85) << 8) / a6;
      if (v87 >= v86)
        v88 = v86;
      else
        v88 = v87;
      if (v87 <= -v86)
        v89 = -v86;
      else
        v89 = v88;
      v90 = (v89 > 0) | (v89 >> 31);
      if (v89 < 0)
        v89 = -v89;
      v21 = v90 * ((v89 + 128) >> 8);
LABEL_123:
      v91 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a8 + 2232) + 40) + 2097);
      v92 = v21 + v8;
      if (v92 >= 51)
        v93 = 51;
      else
        v93 = v92;
      if (v92 <= -v91)
        return -v91;
      else
        return v93;
    case 1:
      v22 = (double)v14 * 0.00390625;
      v23 = exp2(v22 / 6.0);
      v24 = log2((v23 * (double)(v13 + 1) + (double)a6 + 1.0) / (v23 * (double)(a6 + 1) + (double)(v13 + 1))) * 6.0;
      v25 = (((int)v24 > 0) | ((int)v24 >> 31)) * (((int)fabs(v24) + 1) >> 1);
      v26 = (int)v22;
      if (v25 < (int)v22)
        v26 = v25;
      if (v25 <= (int)-((double)v14 * 0.00390625))
        v21 = (int)-((double)v14 * 0.00390625);
      else
        v21 = v26;
      goto LABEL_123;
    case 2:
      v27 = (double)v14 * 0.00390625;
      v21 = (int)-v27;
      v28 = (int)v27;
      v29 = (double)(a5 - a6)
          / (double)a6
          * ((double)(a5 - a6)
           / (double)a6)
          * (v27
           * (double)(((int)((double)(a5 - a6) / (double)a6) > 0) | ((int)((double)(a5 - a6) / (double)a6) >> 31)));
      goto LABEL_17;
    case 3:
      v30 = (double)v14 * 0.00390625;
      v21 = (int)-v30;
      v28 = (int)v30;
      v29 = v30 * ((double)(a5 - a6) / (double)a6 * ((double)(a5 - a6) / (double)a6 * ((double)(a5 - a6) / (double)a6)));
LABEL_17:
      if ((int)v29 < v28)
        v28 = (int)v29;
      if ((int)v29 > v21)
        v21 = v28;
      goto LABEL_123;
    default:
      v21 = 0;
      goto LABEL_123;
  }
}

uint64_t sub_1C97DBC94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  int v4;
  uint64_t v5;
  void (*v6)(uint64_t, unint64_t, _BYTE *, uint64_t, char *);
  void (*v7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  int v24;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(unint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int v66;
  char *v67;
  void (*v68)(unint64_t, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void (*v75)(unint64_t, uint64_t, uint64_t);
  unsigned int v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(uint64_t, unint64_t, _BYTE *, uint64_t, char *);
  _BYTE *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 24);
  if (v1 != *(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 16))
  {
    v88 = *(_QWORD *)(a1 + 8);
    v89 = v87;
    v2 = *(_QWORD *)(a1 + 56);
    v3 = (_BYTE *)*(unsigned int *)(a1 + 80);
    v4 = *(_DWORD *)(a1 + 84);
    v5 = *(_QWORD *)(a1 + 40);
    LODWORD(v92) = *(_DWORD *)(a1 + 76);
    v7 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 88);
    v6 = *(void (**)(uint64_t, unint64_t, _BYTE *, uint64_t, char *))(a1 + 96);
    v8 = MEMORY[0x1E0C80A78](a1);
    v91 = (char *)v87 - v9;
    v10 = MEMORY[0x1E0C80A78](v8);
    v11 = MEMORY[0x1E0C80A78](v10);
    v15 = (_BYTE *)(((unint64_t)&v87[1] - ((v13 + 15) & 0x1FFFFFFF0) + 7) & 0xFFFFFFFFFFFFFFF0);
    v90 = v11;
    if ((int)v3 < 1)
    {
      v19 = ((unint64_t)&v87[1] - ((v13 + 15) & 0x1FFFFFFF0) + 7) & 0xFFFFFFFFFFFFFFF0;
      v26 = v12;
      v18 = v14;
      if ((int)v3 < -15)
      {
LABEL_13:
        v93 = (char *)v19;
        v94 = (uint64_t)v26;
        v95 = v6;
        v96 = v3;
        v27 = v2;
        v28 = v88;
        if (v4 >= 1)
        {
          v29 = v18;
          v30 = 0;
          v31 = (_DWORD)v92 << 16;
          v32 = (unint64_t)(v91 + 30) & 0xFFFFFFFFFFFFFFF0;
          v33 = v92 - 1;
          v92 = (int)v18 - 1;
          LODWORD(v91) = v31 / v4;
          do
          {
            v34 = HIWORD(v30);
            v35 = (unsigned __int16)v30 >> 12;
            v30 += v91;
            v36 = v28 + v5 * v34;
            if (v33 >= (int)v34 + 1)
              v37 = v34 + 1;
            else
              v37 = v33;
            v38 = v27;
            v7(v32, v36, v28 + v5 * v37, v29, v35);
            v39 = v93;
            *(_WORD *)(v32 + 2 * v29) = *(_WORD *)(v32 + 2 * v92);
            v95(v1, v32, v96, v94, v39);
            v27 = v38;
            v1 += v38;
            --v4;
          }
          while (v4);
        }
        v87[1] = v87;
        v40 = *(_QWORD *)(v90 + 32);
        v41 = *(int *)(v90 + 80) >> 1;
        v42 = *(_DWORD *)(v90 + 76);
        v43 = MEMORY[0x1E0C80A78](*(_QWORD *)(v90 + 64));
        v45 = (char *)v87 - v44;
        v46 = MEMORY[0x1E0C80A78](v43);
        v48 = (char *)v87 - ((v47 + 15) & 0x1FFFFFFF0);
        v49 = MEMORY[0x1E0C80A78](v46);
        v59 = (_BYTE *)(((unint64_t)&v87[1] - ((v58 + 15) & 0x1FFFFFFF0) + 7) & 0xFFFFFFFFFFFFFFF0);
        v96 = v59;
        if (v60 <= 1)
        {
          v67 = v53;
          v68 = v50;
          LODWORD(v63) = 0;
        }
        else
        {
          v61 = 0;
          v62 = 0;
          if (v41 <= 1)
            v63 = 1;
          else
            v63 = v41;
          v64 = v48;
          v65 = v63;
          do
          {
            v66 = HIWORD(v61);
            *v59++ = (unsigned __int16)v61 >> 12;
            v61 += (int)(((_DWORD)v55 << 15) & 0xFFFF0000) / v41;
            *v64++ = 2 * (v66 - v62);
            v62 = v66;
            --v65;
          }
          while (v65);
          v67 = v53;
          v68 = v50;
        }
        v95 = (void (*)(uint64_t, unint64_t, _BYTE *, uint64_t, char *))v48;
        if ((int)v63 < v57)
        {
          v93 = v45;
          v94 = v49;
          v69 = &v48[v63];
          v70 = v51;
          v71 = v54;
          v72 = v52;
          v73 = v55;
          v74 = v56;
          bzero(v69, (v41 - v63 + 15) + 1);
          v56 = v74;
          v55 = v73;
          v52 = v72;
          v54 = v71;
          v51 = v70;
          v45 = v93;
          v49 = v94;
        }
        LODWORD(v94) = v41;
        v93 = v67;
        if (v56 >= 2)
        {
          v75 = v68;
          v76 = 0;
          v77 = (unint64_t)(v45 + 30) & 0xFFFFFFFFFFFFFFF0;
          v78 = (v42 >> 1) - 1;
          v91 = (char *)(int)v52;
          v92 = v52 - 2;
          v89 = (_QWORD *)((int)v52 - 1);
          v90 = v55 | 1;
          LODWORD(v88) = (v42 >> 1 << 16) / (v56 >> 1);
          if (v56 >> 1 <= 1)
            v79 = 1;
          else
            v79 = v56 >> 1;
          do
          {
            v80 = HIWORD(v76);
            v76 += v88;
            v81 = v51 + v54 * v80;
            if (v78 >= (int)v80 + 1)
              v82 = v80 + 1;
            else
              v82 = v78;
            v83 = v51;
            v84 = v49;
            v85 = v54;
            v86 = v52;
            v75(v77, v81, v51 + v54 * v82);
            *(_WORD *)(v77 + 2 * (_QWORD)v91) = *(_WORD *)(v77 + 2 * v92);
            *(_WORD *)(v77 + 2 * v90) = *(_WORD *)(v77 + 2 * (_QWORD)v89);
            ((void (*)(uint64_t, unint64_t, _QWORD, _QWORD, _BYTE *))v93)(v40, v77, v94, v95, v96);
            v52 = v86;
            v54 = v85;
            v51 = v83;
            v49 = v84;
            v40 += v84;
            --v79;
          }
          while (v79);
        }
        return 0;
      }
      v24 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = v14;
      v19 = (unint64_t)v15;
      v20 = v12;
      v21 = v3;
      v22 = ((_DWORD)v14 << 16) / (int)v3;
      do
      {
        v23 = HIWORD(v16);
        *v15++ = (unsigned __int16)v16 >> 12;
        v16 += v22;
        *v20++ = v23 - v17;
        v17 = v23;
        --v21;
      }
      while (v21);
      v24 = (int)v3;
    }
    v26 = v12;
    bzero(&v12[v24], ((_DWORD)v3 - v24 + 15) + 1);
    goto LABEL_13;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("src and dst being the same buffer not supported so far!", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "src and dst being the same buffer not supported so far!");
  }
  return 0xFFFFFFFFLL;
}

_WORD *sub_1C97DC1C8(_WORD *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, __int16 a5)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (a4 >= 1)
  {
    v5 = a4;
    do
    {
      v6 = *a2++;
      v7 = (16 - a5) * v6;
      v8 = *a3++;
      *result++ = v7 + v8 * a5;
      --v5;
    }
    while (v5);
  }
  return result;
}

_BYTE *sub_1C97DC1FC(_BYTE *result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;

  if (a3 >= 1)
  {
    v5 = a3;
    do
    {
      v7 = *a5++;
      v6 = v7;
      v8 = 16 - v7;
      v9 = *a4++;
      a2 += v9;
      *result++ = (unsigned __int16)(a2[1] * v6 + v8 * *a2 + 128) >> 8;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C97DC244(uint64_t result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  _BYTE *v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;

  if (a3 >= 1)
  {
    v5 = a3;
    v6 = (_BYTE *)(result + 1);
    do
    {
      v8 = *a5++;
      v7 = v8;
      v9 = *a4++;
      a2 += v9;
      *(v6 - 1) = (unsigned __int16)(a2[2] * v7 + (16 - v7) * *a2 + 128) >> 8;
      *v6 = (unsigned __int16)(a2[3] * v7 + (16 - v7) * a2[1] + 128) >> 8;
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C97DC2AC(void (**a1)(uint64_t), CVBufferRef buffer, unint64_t a3, __CVBuffer *a4, unint64_t a5)
{
  const __CFNumber *Attachment;
  const __CFNumber *v8;
  CFTypeID v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CFTypeID v12;
  int v13;
  int v14;
  size_t v15;
  char i;
  size_t v17;
  size_t v18;
  size_t v19;
  int v20;
  size_t v21;
  char *BaseAddressOfPlane;
  char *v23;
  size_t BytesPerRowOfPlane;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v34;
  char v35;
  uint64_t v36;
  size_t Width;
  size_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  unsigned int v47;
  size_t HeightOfPlane;
  unint64_t v50;
  unint64_t v51;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t valuePtr;

  valuePtr = 0;
  Attachment = (const __CFNumber *)CVBufferGetAttachment(buffer, CFSTR("VPImageBufferLSBAligned"), 0);
  if (Attachment)
  {
    v8 = Attachment;
    v9 = CFGetTypeID(Attachment);
    if (v9 == CFNumberGetTypeID())
      CFNumberGetValue(v8, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  }
  v10 = (const __CFNumber *)CVBufferGetAttachment(a4, CFSTR("VPImageBufferLSBAligned"), 0);
  if (v10)
  {
    v11 = v10;
    v12 = CFGetTypeID(v10);
    if (v12 == CFNumberGetTypeID())
      CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
  }
  if (CVPixelBufferGetPixelFormatType(buffer) == 1496395842)
    HIDWORD(valuePtr) = 10;
  v50 = HIDWORD(a5);
  v51 = HIDWORD(a3);
  if (CVPixelBufferGetPixelFormatType(a4) == 1496395842)
  {
    v13 = 10;
    LODWORD(valuePtr) = 10;
  }
  else
  {
    v13 = valuePtr;
  }
  v14 = HIDWORD(valuePtr);
  CVPixelBufferLockBaseAddress(buffer, 1uLL);
  CVPixelBufferLockBaseAddress(a4, 0);
  v57 = (int)a3;
  v54 = (int)a5;
  if (v14 == v13)
  {
    v15 = 0;
    for (i = 1; ; i = 0)
    {
      v56 = i;
      v17 = CVPixelBufferGetWidth(buffer) - v57;
      v18 = CVPixelBufferGetWidth(a4) - v54;
      v19 = CVPixelBufferGetHeightOfPlane(buffer, v15) - ((int)v51 >> v15);
      v20 = (int)v50 >> v15;
      v21 = CVPixelBufferGetHeightOfPlane(a4, v15) - ((int)v50 >> v15);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, v15);
      v23 = (char *)CVPixelBufferGetBaseAddressOfPlane(a4, v15);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(buffer, v15);
      v25 = CVPixelBufferGetBytesPerRowOfPlane(a4, v15);
      if (v18 >= v17)
        v26 = v17;
      else
        v26 = v18;
      if (v21 >= v19)
        v27 = v19;
      else
        v27 = v21;
      if (v23 && BaseAddressOfPlane)
      {
        if (v27)
        {
          v28 = &BaseAddressOfPlane[2 * (BytesPerRowOfPlane >> 1) * ((int)v51 >> v15) + 2 * v57];
          v29 = &v23[2 * (v25 >> 1) * v20 + 2 * v54];
          v30 = 2 * v26;
          v31 = 2 * (v25 >> 1);
          v32 = 2 * (BytesPerRowOfPlane >> 1);
          do
          {
            memcpy(v29, v28, v30);
            v29 += v31;
            v28 += v32;
            --v27;
          }
          while (v27);
        }
      }
      else if (v23)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fwrite("10bit mono to 420 copy not implemented", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "10bit mono to 420 copy not implemented");
        }
        return 4294954386;
      }
      v15 = 1;
      if ((v56 & 1) == 0)
      {
        CVPixelBufferUnlockBaseAddress(a4, 0);
        CVPixelBufferUnlockBaseAddress(buffer, 1uLL);
        return 0;
      }
    }
  }
  v34 = 0;
  v47 = 0;
  v35 = 1;
  v36 = (int)a5;
  do
  {
    v55 = v35;
    CVPixelBufferGetWidth(buffer);
    Width = CVPixelBufferGetWidth(a4);
    v38 = Width - v36;
    CVPixelBufferGetHeightOfPlane(buffer, v34);
    v39 = (int)v50 >> v34;
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(a4, v34);
    v40 = CVPixelBufferGetBaseAddressOfPlane(buffer, v34);
    v41 = CVPixelBufferGetBaseAddressOfPlane(a4, v34);
    CVPixelBufferGetBytesPerRowOfPlane(buffer, v34);
    v42 = CVPixelBufferGetBytesPerRowOfPlane(a4, v34) >> 1;
    v36 = v54;
    v43 = (uint64_t)v41 + 2 * v42 * v39 + 2 * v54;
    if (v41 && v40)
    {
      if ((_DWORD)valuePtr)
      {
        if (HIDWORD(valuePtr))
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            fwrite("Conversion between bitdepths not supported\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            syslog(27, "Conversion between bitdepths not supported\n");
          }
          v47 = -12910;
        }
        else if ((_DWORD)valuePtr == 10)
        {
          a1[3](v43);
        }
        else if ((_DWORD)valuePtr == 9)
        {
          a1[2](v43);
        }
      }
      else if (HIDWORD(valuePtr) == 10)
      {
        a1[1](v43);
      }
      else if (HIDWORD(valuePtr) == 9)
      {
        (*a1)(v43);
      }
    }
    else if (v41 && HeightOfPlane != v39)
    {
      v44 = 0;
      if ((_DWORD)valuePtr)
        v45 = 1 << (valuePtr - 1);
      else
        v45 = 0x8000;
      do
      {
        if (Width != v54)
        {
          v46 = 0;
          do
            *(_WORD *)(v43 + 2 * v46++) = v45;
          while (v38 != v46);
        }
        ++v44;
        v43 += 2 * v42;
      }
      while (v44 != HeightOfPlane - v39);
    }
    v35 = 0;
    v34 = 1;
  }
  while ((v55 & 1) != 0);
  CVPixelBufferUnlockBaseAddress(a4, 0);
  CVPixelBufferUnlockBaseAddress(buffer, 1uLL);
  return v47;
}

uint64_t sub_1C97DC7DC(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  int Width;
  int Height;
  size_t v8;
  void *BaseAddress;
  CFNumberRef v10;
  int valuePtr;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v8 = CVPixelBufferGetBytesPerRow(pixelBuffer) >> 1;
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  v14[0] = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) >> 1;
  v14[1] = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL) >> 1;
  v13[0] = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
  v13[1] = CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL);
  (*(void (**)(_QWORD *, _QWORD *, void *, size_t, _QWORD, _QWORD))(a1 + 40))(v13, v14, BaseAddress, v8, Width, Height);
  valuePtr = 10;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CVBufferSetAttachment(a3, CFSTR("VPImageBufferLSBAligned"), v10, kCVAttachmentMode_ShouldNotPropagate);
  CFRelease(v10);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  return CVPixelBufferUnlockBaseAddress(a3, 0);
}

uint64_t sub_1C97DC950(void (**a1)(uint64_t), CVPixelBufferRef pixelBuffer, __CVBuffer *a3, int64_t a4)
{
  unsigned int Width;
  int Height;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  return sub_1C97DC9BC(a1, pixelBuffer, 0, Width, Height, a3, a4, 0);
}

uint64_t sub_1C97DC9BC(void (**a1)(uint64_t), CVPixelBufferRef pixelBuffer, unint64_t a3, unsigned int a4, int a5, __CVBuffer *a6, int64_t a7, int a8)
{
  int64_t v10;
  unint64_t v14;
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  unsigned int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  char v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  char *v31;
  char *v32;
  size_t BytesPerRowOfPlane;
  size_t v34;
  uint64_t v35;
  size_t v36;
  char *v37;
  size_t v38;
  size_t v39;
  char *v40;
  char v41;
  char *v42;
  uint64_t result;
  FILE *v44;
  const char *v45;
  char v46;
  size_t v47;
  size_t v48;
  size_t v49;
  uint64_t v50;
  size_t v51;
  void *BaseAddressOfPlane;
  char *v53;
  size_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  int v58;
  const char *v59;
  size_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  OSType v67;
  int v68;
  size_t HeightOfPlane;
  uint64_t v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  int v78[2];
  int v79;
  __CVBuffer *v80;
  __CVBuffer *v81;

  LODWORD(v10) = a5;
  v14 = HIDWORD(a3);
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v67 = CVPixelBufferGetPixelFormatType(a6);
  Width = CVPixelBufferGetWidth(a6);
  v81 = a6;
  Height = CVPixelBufferGetHeight(a6);
  v18 = CVPixelBufferGetWidth(pixelBuffer) - a3;
  if ((int)v18 >= (int)a4)
    v19 = a4;
  else
    v19 = v18;
  v80 = pixelBuffer;
  v79 = v14;
  v20 = CVPixelBufferGetHeight(pixelBuffer) - v14;
  if (v20 >= (int)v10)
    v10 = v10;
  else
    v10 = v20;
  if ((v19 & 0x80000000) != 0
    || (v10 & 0x80000000) != 0
    || (v21 = Width - (int)a7, v21 < 0)
    || (v22 = Height - (a7 >> 32), v22 < 0))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Invalid offset\n", 0xFuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Invalid offset\n");
    }
    return 4294954394;
  }
  if ((sub_1C97DD178(PixelFormatType) & 1) == 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Source format 0x%x not supported\n", PixelFormatType);
      syslog(27, "Source format 0x%x not supported\n");
    }
    return 4294954386;
  }
  v23 = v67;
  if ((sub_1C97DD178(v67) & 1) == 0)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Destination format 0x%x not supported\n", v67);
      syslog(27, "Destination format 0x%x not supported\n");
    }
    return 4294954386;
  }
  v74 = HIDWORD(a7);
  v24 = sub_1C9717840(PixelFormatType);
  v25 = sub_1C9717840(v67);
  if (v24 != 8)
  {
    if (v25 == 8)
    {
      if (a7)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          v44 = (FILE *)*MEMORY[0x1E0C80C10];
          v45 = "Dither doesn't support dstoffset\n";
LABEL_67:
          v59 = v45;
          v60 = 33;
LABEL_77:
          fwrite(v59, v60, 1uLL, v44);
          syslog(27, v45);
          return 4294954386;
        }
        return 4294954386;
      }
      if (a3 | v79)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          v44 = (FILE *)*MEMORY[0x1E0C80C10];
          v45 = "Dither doesn't support srcoffset\n";
          goto LABEL_67;
        }
        return 4294954386;
      }
      result = sub_1C972EDF4((uint64_t)(a1 + 6), pixelBuffer, v81);
    }
    else
    {
      if (PixelFormatType == 1983000886 && v25 >= 9)
      {
        if (a7)
        {
          if (dword_1ED1ACCC0 < 3)
            return 4294954386;
          v44 = (FILE *)*MEMORY[0x1E0C80C10];
          v45 = "v216 doesn't support dstoffset\n";
        }
        else
        {
          if (!(a3 | v79))
          {
            sub_1C97DC7DC((uint64_t)a1, pixelBuffer, v81);
            result = 0;
            goto LABEL_81;
          }
          if (dword_1ED1ACCC0 < 3)
            return 4294954386;
          v44 = (FILE *)*MEMORY[0x1E0C80C10];
          v45 = "v216 doesn't support srcoffset\n";
        }
        v59 = v45;
        v60 = 31;
        goto LABEL_77;
      }
      if (v25 < 9)
      {
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unsupported conversion from pixfmt 0x%x to 0x%x\n", PixelFormatType, v67);
          syslog(27, "Unsupported conversion from pixfmt 0x%x to 0x%x\n");
        }
        return 4294954394;
      }
      result = sub_1C97DC2AC(a1, pixelBuffer, a3, v81, a7);
    }
LABEL_81:
    v58 = a8;
    if ((_DWORD)result)
      return result;
    goto LABEL_82;
  }
  v73 = (int)a7;
  if (v25 != 8)
  {
    if (v25 >= 9)
    {
      v62 = v22;
      v63 = v21;
      v64 = v10;
      v65 = v19;
      v46 = 1;
      CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
      CVPixelBufferLockBaseAddress(v81, 0);
      v47 = 0;
      v72 = (int)a3;
      do
      {
        v76 = v46;
        v48 = CVPixelBufferGetWidth(v80) - v72;
        v49 = CVPixelBufferGetWidth(v81) - v73;
        CVPixelBufferGetHeightOfPlane(v80, v47);
        v50 = (int)v74 >> v47;
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(v81, v47);
        v51 = HeightOfPlane - v50;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v80, v47);
        v53 = (char *)CVPixelBufferGetBaseAddressOfPlane(v81, v47);
        CVPixelBufferGetBytesPerRowOfPlane(v80, v47);
        v54 = CVPixelBufferGetBytesPerRowOfPlane(v81, v47) >> 1;
        if (v49 >= v48)
          v49 = v48;
        v55 = &v53[2 * v54 * v50 + 2 * v73];
        if (v53 && BaseAddressOfPlane)
        {
          a1[4]((uint64_t)v55);
          v56 = v76;
        }
        else
        {
          v56 = v76;
          if (v53 && HeightOfPlane != v50)
          {
            v57 = 2 * v54;
            do
            {
              if (v49)
                memset_pattern16(v55, &unk_1C98630D0, 2 * v49);
              v55 += v57;
              --v51;
            }
            while (v51);
          }
        }
        v46 = 0;
        v47 = 1;
      }
      while ((v56 & 1) != 0);
      goto LABEL_58;
    }
    return 4294954394;
  }
  v62 = v22;
  v63 = v21;
  v64 = v10;
  v65 = v19;
  v26 = 1;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(v81, 0);
  v27 = 0;
  v70 = (int)a3;
  do
  {
    v75 = v26;
    *(_QWORD *)v78 = CVPixelBufferGetWidth(v80) - v70;
    v28 = CVPixelBufferGetWidth(v81) - v73;
    v68 = v79 >> v27;
    v29 = CVPixelBufferGetHeightOfPlane(v80, v27) - (v79 >> v27);
    v71 = CVPixelBufferGetHeightOfPlane(v81, v27);
    v30 = v71 - ((int)v74 >> v27);
    v31 = (char *)CVPixelBufferGetBaseAddressOfPlane(v80, v27);
    v32 = (char *)CVPixelBufferGetBaseAddressOfPlane(v81, v27);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v80, v27);
    v34 = CVPixelBufferGetBytesPerRowOfPlane(v81, v27);
    v35 = (int)v74 >> v27;
    v36 = v34;
    v37 = v31;
    if (v28 >= *(_QWORD *)v78)
      v38 = *(_QWORD *)v78;
    else
      v38 = v28;
    if (v30 >= v29)
      v39 = v29;
    else
      v39 = v71 - ((int)v74 >> v27);
    v40 = &v32[v34 * v35 + v73];
    if (v32 && v37)
    {
      v41 = v75;
      if (v39)
      {
        v42 = &v37[BytesPerRowOfPlane * v68 + v70];
        do
        {
          memcpy(v40, v42, v38);
          v42 += BytesPerRowOfPlane;
          v40 += v36;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      v41 = v75;
      if (v32 && v71 != v35)
      {
        do
        {
          memset(v40, 128, v28);
          v40 += v36;
          --v30;
        }
        while (v30);
      }
    }
    v26 = 0;
    v27 = 1;
  }
  while ((v41 & 1) != 0);
LABEL_58:
  CVPixelBufferUnlockBaseAddress(v81, 0);
  CVPixelBufferUnlockBaseAddress(v80, 1uLL);
  result = 0;
  v23 = v67;
  v58 = a8;
  v10 = v64;
  v19 = v65;
  v22 = v62;
  v21 = v63;
LABEL_82:
  if (v58)
  {
    if (v21 >= v19)
      v61 = v19;
    else
      v61 = v21;
    if (v22 >= v10)
      v22 = v10;
    if (v23 == 1278226488)
    {
      return sub_1C97DD240(v81, v61, v22);
    }
    else if ((v23 & 0xFFFFFFFD) == 0x4C303130)
    {
      return sub_1C97DD378(0, v81, v61, v22);
    }
    else if (sub_1C9717840(v23) == 8)
    {
      return sub_1C97DD4CC(v81, v61, v22);
    }
    else
    {
      return sub_1C97DD520(v81, v61, v22);
    }
  }
  return result;
}

uint64_t sub_1C97DD178(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1278226737)
  {
    if (a1 > 1278226487)
    {
      if (a1 == 1278226488)
        return result;
      v3 = 1278226736;
    }
    else
    {
      if (a1 == 875704422)
        return result;
      v3 = 875704438;
    }
    goto LABEL_13;
  }
  if (a1 <= 1983000885)
  {
    if (a1 == 1278226738)
      return result;
    v3 = 1496395842;
    goto LABEL_13;
  }
  if (a1 != 1983000886 && a1 != 2016686640)
  {
    v3 = 2019963440;
LABEL_13:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t sub_1C97DD240(__CVBuffer *a1, unint64_t a2, size_t a3)
{
  char *BaseAddressOfPlane;
  char *v7;
  size_t BytesPerRowOfPlane;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v11;
  size_t v12;
  char *v13;
  size_t v14;
  BOOL v15;
  size_t v16;
  char *v17;
  char *v18;

  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (BaseAddressOfPlane)
  {
    v7 = BaseAddressOfPlane;
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
    v11 = HeightOfPlane;
    if (WidthOfPlane > a2 || HeightOfPlane > a3)
    {
      v12 = WidthOfPlane - a2;
      if (WidthOfPlane > a2 && a3)
      {
        v13 = &v7[a2];
        v14 = a3;
        do
        {
          memset(v13, *(v13 - 1), v12);
          v13 += BytesPerRowOfPlane;
          --v14;
        }
        while (v14);
      }
      v15 = v11 > a3;
      v16 = v11 - a3;
      if (v15)
      {
        v17 = &v7[BytesPerRowOfPlane * (a3 - 1)];
        v18 = &v7[BytesPerRowOfPlane * a3];
        do
        {
          memcpy(v18, v17, WidthOfPlane);
          v18 += BytesPerRowOfPlane;
          --v16;
        }
        while (v16);
      }
    }
    return 0;
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n");
    }
    return 4294954385;
  }
}

uint64_t sub_1C97DD378(size_t planeIndex, CVPixelBufferRef pixelBuffer, unint64_t a3, unint64_t a4)
{
  size_t v7;
  char *BaseAddressOfPlane;
  char *v9;
  size_t BytesPerRowOfPlane;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  uint64_t v13;
  char *v14;
  __int16 v15;
  char *v16;
  size_t v17;
  size_t v18;
  char *v19;
  size_t v20;
  char *v21;

  v7 = planeIndex;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, planeIndex);
  if (BaseAddressOfPlane)
  {
    v9 = BaseAddressOfPlane;
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v7);
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v7);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v7);
    if (WidthOfPlane > a3 || HeightOfPlane > a4)
    {
      if (WidthOfPlane > a3 && a4)
      {
        v13 = 0;
        v14 = &v9[2 * a3];
        do
        {
          v15 = *(_WORD *)&v9[2 * a3 - 2 + v13 * BytesPerRowOfPlane];
          v16 = v14;
          v17 = WidthOfPlane - a3;
          do
          {
            *(_WORD *)v16 = v15;
            v16 += 2;
            --v17;
          }
          while (v17);
          ++v13;
          v14 += BytesPerRowOfPlane;
        }
        while (v13 != a4);
      }
      v18 = HeightOfPlane - a4;
      if (HeightOfPlane > a4)
      {
        v19 = &v9[BytesPerRowOfPlane * (a4 - 1)];
        v20 = 2 * WidthOfPlane;
        v21 = &v9[BytesPerRowOfPlane * a4];
        do
        {
          memcpy(v21, v19, v20);
          v21 += BytesPerRowOfPlane;
          --v18;
        }
        while (v18);
      }
    }
    return 0;
  }
  else
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n");
    }
    return 4294954385;
  }
}

uint64_t sub_1C97DD4CC(__CVBuffer *a1, unint64_t a2, size_t a3)
{
  uint64_t result;

  result = sub_1C97DD240(a1, a2, a3);
  if (!(_DWORD)result)
    return sub_1C97DD378(1uLL, a1, a2 >> 1, a3 >> 1);
  return result;
}

uint64_t sub_1C97DD520(CVPixelBufferRef pixelBuffer, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  char *BaseAddressOfPlane;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  size_t BytesPerRowOfPlane;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  size_t v18;
  size_t v19;
  char *v20;
  size_t v21;
  char *v22;

  result = sub_1C97DD378(0, pixelBuffer, a2, a3);
  if (!(_DWORD)result)
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    if (BaseAddressOfPlane)
    {
      v8 = BaseAddressOfPlane;
      v9 = a2 >> 1;
      v10 = a3 >> 1;
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
      if (WidthOfPlane > v9 || HeightOfPlane > v10)
      {
        if (a3 >= 2 && WidthOfPlane > v9)
        {
          v14 = 0;
          v15 = &v8[4 * v9];
          do
          {
            v16 = *(_DWORD *)&v8[4 * v9 - 4 + v14 * BytesPerRowOfPlane];
            v17 = v15;
            v18 = WidthOfPlane - v9;
            do
            {
              *(_DWORD *)v17 = v16;
              v17 += 4;
              --v18;
            }
            while (v18);
            ++v14;
            v15 += BytesPerRowOfPlane;
          }
          while (v14 != v10);
        }
        v19 = HeightOfPlane - v10;
        if (HeightOfPlane > v10)
        {
          v20 = &v8[BytesPerRowOfPlane * (v10 - 1)];
          v21 = 4 * WidthOfPlane;
          v22 = &v8[BytesPerRowOfPlane * v10];
          do
          {
            memcpy(v22, v20, v21);
            v22 += BytesPerRowOfPlane;
            --v19;
          }
          while (v19);
        }
      }
      return 0;
    }
    else
    {
      if (dword_1ED1ACCC0 >= 3)
      {
        fwrite("NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n");
      }
      return 4294954385;
    }
  }
  return result;
}

uint64_t sub_1C97DD694(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t j;

  if (a6)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) << 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1C97DD6DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t j;

  if (a6)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) >> 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1C97DD724(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t j;

  if (a6)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = 4 * *(unsigned __int8 *)(a3 + j);
      }
      a3 += a4;
      result += 2 * a2;
    }
  }
  return result;
}

uint64_t *sub_1C97DD768(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  if (a6 >= 2)
  {
    v6 = 0;
    v7 = a6 >> 1;
    v8 = a5 >> 1;
    v9 = a4;
    v11 = *a2;
    v10 = a2[1];
    v12 = *result;
    v13 = result[1];
    if (a5 >> 1 <= 1)
      v8 = 1;
    v14 = 4 * a4;
    v15 = (unsigned __int16 *)(a3 + 6);
    v16 = v12 + 2 * v11;
    v17 = 4 * v11;
    v18 = 2 * v10;
    do
    {
      if (a5 >= 2)
      {
        v19 = 0;
        v20 = v15;
        v21 = v8;
        do
        {
          v22 = *(v20 - 2);
          if (v22 >= 0xFFDF)
            v22 = 65503;
          *(_WORD *)(v12 + v19) = (v22 + 32) >> 6;
          v23 = *v20;
          if (v23 >= 0xFFDF)
            v23 = 65503;
          *(_WORD *)(v12 + v19 + 2) = (v23 + 32) >> 6;
          v24 = *(v20 - 3);
          if (v24 >= 0xFFDF)
            v24 = 65503;
          *(_WORD *)(v13 + v19) = (v24 + 32) >> 6;
          v25 = *(v20 - 1);
          if (v25 >= 0xFFDF)
            v25 = 65503;
          *(_WORD *)(v13 + v19 + 2) = (v25 + 32) >> 6;
          v26 = v20[v9 - 2];
          if (v26 >= 0xFFDF)
            v26 = 65503;
          *(_WORD *)(v16 + v19) = (v26 + 32) >> 6;
          v27 = v20[v9];
          if (v27 >= 0xFFDF)
            v27 = 65503;
          *(_WORD *)(v16 + v19 + 2) = (v27 + 32) >> 6;
          v20 += 4;
          v19 += 4;
          --v21;
        }
        while (v21);
      }
      ++v6;
      v12 += v17;
      v13 += v18;
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v16 += v17;
    }
    while (v6 != v7);
    *result = v12;
    result[1] = v13;
  }
  return result;
}

_QWORD *sub_1C97DD898(_QWORD *result)
{
  result[9] = sub_1C9731AAC;
  result[10] = sub_1C9731B5C;
  result[11] = sub_1C9731C30;
  result[12] = sub_1C9731D98;
  result[13] = sub_1C9731EEC;
  result[14] = sub_1C9731F38;
  result[15] = sub_1C973202C;
  result[16] = sub_1C9732128;
  result[17] = sub_1C97322D4;
  result[18] = sub_1C973246C;
  result[19] = sub_1C97324CC;
  result[20] = sub_1C9732638;
  result[21] = sub_1C97327B4;
  result[22] = sub_1C97329F0;
  result[23] = sub_1C9732C10;
  result[24] = sub_1C9732C9C;
  result[25] = sub_1C9732F14;
  result[26] = sub_1C97331C4;
  result[27] = sub_1C9733534;
  result[28] = sub_1C9733894;
  result[54] = sub_1C973397C;
  return result;
}

_QWORD *sub_1C97DD970(_QWORD *result)
{
  result[29] = sub_1C973B764;
  result[30] = sub_1C973B824;
  result[31] = sub_1C973B910;
  result[32] = sub_1C973BA88;
  result[33] = sub_1C97E3A4C;
  result[34] = sub_1C973BBEC;
  result[35] = sub_1C973BCEC;
  result[36] = sub_1C973BDFC;
  result[39] = sub_1C973C158;
  result[40] = sub_1C973C2D0;
  result[41] = sub_1C973C460;
  result[42] = sub_1C973C6A8;
  result[45] = sub_1C973CB58;
  result[46] = sub_1C973CE1C;
  result[37] = sub_1C973BFB4;
  result[38] = sub_1C973D4FC;
  result[43] = sub_1C973D5B8;
  result[44] = sub_1C973C8D4;
  result[47] = sub_1C973D194;
  result[48] = sub_1C973D6C8;
  result[49] = sub_1C973D8B8;
  result[50] = sub_1C973D954;
  result[51] = sub_1C973DA00;
  result[52] = sub_1C973DAAC;
  result[53] = sub_1C973DB58;
  result[55] = sub_1C973397C;
  return result;
}

_QWORD *sub_1C97DDA7C(_QWORD *result)
{
  result[9] = sub_1C9733A04;
  result[10] = sub_1C9733AB4;
  result[11] = sub_1C9733B88;
  result[12] = sub_1C9733CF0;
  result[13] = sub_1C9733E44;
  result[14] = sub_1C9733E90;
  result[15] = sub_1C9733F84;
  result[16] = sub_1C9734080;
  result[17] = sub_1C973422C;
  result[18] = sub_1C97343C4;
  result[19] = sub_1C9734424;
  result[20] = sub_1C9734590;
  result[21] = sub_1C973470C;
  result[22] = sub_1C9734948;
  result[23] = sub_1C9734B68;
  result[24] = sub_1C9734BF4;
  result[25] = sub_1C9734E6C;
  result[26] = sub_1C973511C;
  result[27] = sub_1C973548C;
  result[28] = sub_1C97357EC;
  result[54] = sub_1C97358D4;
  return result;
}

_QWORD *sub_1C97DDB54(_QWORD *result)
{
  result[29] = sub_1C973DBAC;
  result[30] = sub_1C973DC6C;
  result[31] = sub_1C973DD58;
  result[32] = sub_1C973DED0;
  result[33] = sub_1C97E2478;
  result[34] = sub_1C973E034;
  result[35] = sub_1C973E134;
  result[36] = sub_1C973E244;
  result[39] = sub_1C973E5A0;
  result[40] = sub_1C973E718;
  result[41] = sub_1C973E8A8;
  result[42] = sub_1C973EAF0;
  result[45] = sub_1C973EFA0;
  result[46] = sub_1C973F264;
  result[37] = sub_1C973E3FC;
  result[38] = sub_1C973F944;
  result[43] = sub_1C973FA00;
  result[44] = sub_1C973ED1C;
  result[47] = sub_1C973F5DC;
  result[48] = sub_1C973FB10;
  result[49] = sub_1C973FD00;
  result[50] = sub_1C973FD9C;
  result[51] = sub_1C973FE48;
  result[52] = sub_1C973FEF4;
  result[53] = sub_1C973FFA0;
  result[55] = sub_1C97358D4;
  return result;
}

_QWORD *sub_1C97DDC60(_QWORD *result)
{
  result[9] = sub_1C973595C;
  result[10] = sub_1C9735A0C;
  result[11] = sub_1C9735AE0;
  result[12] = sub_1C9735C48;
  result[13] = sub_1C9735D9C;
  result[14] = sub_1C9735DE8;
  result[15] = sub_1C9735EDC;
  result[16] = sub_1C9735FD8;
  result[17] = sub_1C9736184;
  result[18] = sub_1C973631C;
  result[19] = sub_1C973637C;
  result[20] = sub_1C97364E8;
  result[21] = sub_1C9736664;
  result[22] = sub_1C97368A0;
  result[23] = sub_1C9736AC0;
  result[24] = sub_1C9736B4C;
  result[25] = sub_1C9736DC4;
  result[26] = sub_1C9737074;
  result[27] = sub_1C97373E4;
  result[28] = sub_1C9737744;
  result[54] = sub_1C973782C;
  return result;
}

_QWORD *sub_1C97DDD38(_QWORD *result)
{
  result[29] = sub_1C973FFF4;
  result[30] = sub_1C97400B4;
  result[31] = sub_1C97401A0;
  result[32] = sub_1C9740318;
  result[33] = sub_1C97E0EA4;
  result[34] = sub_1C974047C;
  result[35] = sub_1C974057C;
  result[36] = sub_1C974068C;
  result[39] = sub_1C97409E8;
  result[40] = sub_1C9740B60;
  result[41] = sub_1C9740CF0;
  result[42] = sub_1C9740F38;
  result[45] = sub_1C97413E8;
  result[46] = sub_1C97416AC;
  result[37] = sub_1C9740844;
  result[38] = sub_1C9741D8C;
  result[43] = sub_1C9741E48;
  result[44] = sub_1C9741164;
  result[47] = sub_1C9741A24;
  result[48] = sub_1C9741F58;
  result[49] = sub_1C9742148;
  result[50] = sub_1C97421E4;
  result[51] = sub_1C9742290;
  result[52] = sub_1C974233C;
  result[53] = sub_1C97423E8;
  result[55] = sub_1C973782C;
  return result;
}

_QWORD *sub_1C97DDE44(_QWORD *result)
{
  result[9] = sub_1C97378B4;
  result[10] = sub_1C9737964;
  result[11] = sub_1C9737A38;
  result[12] = sub_1C9737BA0;
  result[13] = sub_1C9737CF4;
  result[14] = sub_1C9737D40;
  result[15] = sub_1C9737E34;
  result[16] = sub_1C9737F30;
  result[17] = sub_1C97380DC;
  result[18] = sub_1C9738274;
  result[19] = sub_1C97382D4;
  result[20] = sub_1C9738440;
  result[21] = sub_1C97385BC;
  result[22] = sub_1C97387F8;
  result[23] = sub_1C9738A18;
  result[24] = sub_1C9738AA4;
  result[25] = sub_1C9738D1C;
  result[26] = sub_1C9738FCC;
  result[27] = sub_1C973933C;
  result[28] = sub_1C973969C;
  result[54] = sub_1C9739784;
  return result;
}

_QWORD *sub_1C97DDF1C(_QWORD *result)
{
  result[29] = sub_1C974243C;
  result[30] = sub_1C97424FC;
  result[31] = sub_1C97425E8;
  result[32] = sub_1C9742760;
  result[33] = sub_1C97DF8D0;
  result[34] = sub_1C97428C4;
  result[35] = sub_1C97429C4;
  result[36] = sub_1C9742AD4;
  result[39] = sub_1C9742E30;
  result[40] = sub_1C9742FA8;
  result[41] = sub_1C9743138;
  result[42] = sub_1C9743380;
  result[45] = sub_1C9743830;
  result[46] = sub_1C9743AF4;
  result[37] = sub_1C9742C8C;
  result[38] = sub_1C97441D4;
  result[43] = sub_1C9744290;
  result[44] = sub_1C97435AC;
  result[47] = sub_1C9743E6C;
  result[48] = sub_1C97443A0;
  result[49] = sub_1C9744590;
  result[50] = sub_1C974462C;
  result[51] = sub_1C97446D8;
  result[52] = sub_1C9744784;
  result[53] = sub_1C9744830;
  result[55] = sub_1C9739784;
  return result;
}

_QWORD *sub_1C97DE028(_QWORD *result)
{
  result[9] = sub_1C973980C;
  result[10] = sub_1C97398BC;
  result[11] = sub_1C9739990;
  result[12] = sub_1C9739AF8;
  result[13] = sub_1C9739C4C;
  result[14] = sub_1C9739C98;
  result[15] = sub_1C9739D8C;
  result[16] = sub_1C9739E88;
  result[17] = sub_1C973A034;
  result[18] = sub_1C973A1CC;
  result[19] = sub_1C973A22C;
  result[20] = sub_1C973A398;
  result[21] = sub_1C973A514;
  result[22] = sub_1C973A750;
  result[23] = sub_1C973A970;
  result[24] = sub_1C973A9FC;
  result[25] = sub_1C973AC74;
  result[26] = sub_1C973AF24;
  result[27] = sub_1C973B294;
  result[28] = sub_1C973B5F4;
  result[54] = sub_1C973B6DC;
  return result;
}

_QWORD *sub_1C97DE100(_QWORD *result)
{
  result[29] = sub_1C9744884;
  result[30] = sub_1C9744944;
  result[31] = sub_1C9744A30;
  result[32] = sub_1C9744BA8;
  result[33] = sub_1C97DE2FC;
  result[34] = sub_1C9744D0C;
  result[35] = sub_1C9744E0C;
  result[36] = sub_1C9744F1C;
  result[39] = sub_1C9745278;
  result[40] = sub_1C97453F0;
  result[41] = sub_1C9745580;
  result[42] = sub_1C97457C8;
  result[45] = sub_1C9745C78;
  result[46] = sub_1C9745F3C;
  result[37] = sub_1C97450D4;
  result[38] = sub_1C974661C;
  result[43] = sub_1C97466D8;
  result[44] = sub_1C97459F4;
  result[47] = sub_1C97462B4;
  result[48] = sub_1C97467E8;
  result[49] = sub_1C97469D8;
  result[50] = sub_1C9746A74;
  result[51] = sub_1C9746B20;
  result[52] = sub_1C9746BCC;
  result[53] = sub_1C9746C78;
  result[55] = sub_1C973B6DC;
  return result;
}

uint64_t sub_1C97DE20C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97DEB08(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1C97DEB08(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

uint64_t sub_1C97DE284(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DE6AC(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1C97DE6AC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

_WORD *sub_1C97DE2FC(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DE630(a1, a2, a3, a5, 4u, a7);
  return sub_1C97DE630(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1C97DE360(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97DEB08(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1C97DEB08(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

uint64_t sub_1C97DE3D8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DE6AC(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1C97DE6AC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1C97DE450(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97DEB08(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1C97DEB08(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1C97DE4C8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DE6AC(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1C97DE6AC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1C97DE540(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97DEB08(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1C97DEB08(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1C97DE5B8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DE6AC(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1C97DE6AC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

_WORD *sub_1C97DE630(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  int v11;

  if (a6 >= 1)
  {
    v6 = a6;
    v7 = &result[2 * a5 - 2];
    v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      v9 = result;
      v10 = a5;
      do
      {
        v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 7)) + (unsigned __int16)*v9;
        if (v11 >= 4095)
          v11 = 4095;
        *v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      result = (_WORD *)((char *)result + v8);
    }
    while ((_DWORD)v6 != a6);
  }
  return result;
}

uint64_t sub_1C97DE6AC(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  unsigned int v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  int *v54;
  int *v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 *v100;
  __int16 v101;
  uint64_t v102;
  int v103;
  unsigned int v105;
  uint64_t __n;
  uint64_t v107;
  _BYTE __dst[260];
  int v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v15 = 2 * a7;
  v16 = a8;
  v107 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[2 * v15 - 4];
    v18 = v110;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v20 = ~a4 & 5;
  v105 = ((a4 >> 1) & 1) + a7;
  __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    v21 = (unsigned __int16)a5[2];
    v22 = *(unsigned __int16 *)__src;
    v23 = *(unsigned __int16 *)(a6 + 4);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v24 = __OFSUB__(v22, v21);
    v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0))
      v29 = 0;
    else
      v29 = 1;
    v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 4095)
      v30 = 4095;
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  result = a4;
  if ((a4 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    v24 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v24 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 4095)
      v40 = 4095;
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = 0;
    v42 = (a7 - 1) - 1;
    v43 = 4;
    do
    {
      v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      v24 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = v48 | (v47 >> 31);
      v24 = __OFSUB__(v45, v44);
      v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0))
        v51 = 0;
      else
        v51 = 1;
      v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 4095)
        v52 = 4095;
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  v102 = (a7 - 1);
  v53 = &__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v57 = (int *)__dst;
  }
  else
  {
    v54 = &v109;
    v55 = (int *)__dst;
    v56 = 1;
    do
    {
      v57 = v54;
      result = (uint64_t)memcpy(v54, v53, __n);
      v58 = (a4 & 1) == 0;
      v59 = (a4 & 1) == 0;
      do
      {
        v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59)
          v60 = (char *)&a5[2 * (int)v56 + 2];
        v61 = *(unsigned __int16 *)v60;
        v62 = *(unsigned __int16 *)&v53[1 * v58];
        v63 = LOWORD(v55[v58 + 1]);
        v24 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0))
          v65 = 0;
        else
          v65 = 1;
        v66 = v65 | (v64 >> 31);
        v24 = __OFSUB__(v62, v61);
        v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0))
          v68 = 0;
        else
          v68 = 1;
        v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 4095)
          v69 = 4095;
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      v54 = v55;
      v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    v71 = *(unsigned __int16 *)v53;
    v72 = *((unsigned __int16 *)v57 + 2);
    v24 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0))
      v74 = 0;
    else
      v74 = 1;
    v75 = v74 | (v73 >> 31);
    v24 = __OFSUB__(v71, v70);
    v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0))
      v77 = 0;
    else
      v77 = 1;
    v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 4095)
      v78 = 4095;
    *(_WORD *)v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    v24 = __OFSUB__(v80, v81);
    v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0))
      v83 = 0;
    else
      v83 = 1;
    v84 = v83 | (v82 >> 31);
    v24 = __OFSUB__(v80, v79);
    v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0))
      v86 = 0;
    else
      v86 = 1;
    v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 4095)
      v87 = 4095;
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v88 = 0;
    v89 = v102 - 1;
    v90 = 2;
    do
    {
      v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      v93 = LOWORD(v57[v90]);
      v24 = __OFSUB__(v92, v93);
      v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0))
        v95 = 0;
      else
        v95 = 1;
      v96 = v95 | (v94 >> 31);
      v24 = __OFSUB__(v92, v91);
      v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 4095)
        v99 = 4095;
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    v100 = (__int16 *)v110;
    do
    {
      v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C97DEB08(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  __int16 *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t __n;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  _BYTE v107[260];
  uint64_t v108;
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v107;
  v16 = a8;
  v104 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[4 * a7 - 4];
    v18 = v109;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v105 = 2 * a2;
  v98 = 2 * a7;
  v20 = a4 & 6;
  __n = 4 * a7;
  memcpy(v107, __src, __n);
  result = a4;
  v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 2);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 4095)
      v31 = 4095;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    v33 = a6[(v98 - 4)];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 4095)
      v40 = 4095;
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    v43 = 0x400000000;
    do
    {
      v44 = (unsigned __int16)*v42;
      v45 = *a6;
      a6 += 2;
      v46 = (v44 > v45) | ((v44 - v45) >> 31);
      v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      v24 = __OFSUB__(v44, v47);
      v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0))
        v49 = 0;
      else
        v49 = 1;
      v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 4095)
        v50 = 4095;
      *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    v55 = (unsigned __int16 *)v107;
  }
  else
  {
    v52 = (unsigned __int16 *)&v108;
    v53 = (a4 & 1) == 0;
    v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    v100 = 4 * v53;
    v101 = (v53 << 33) + 0x200000000;
    v54 = 1;
    do
    {
      v55 = v52;
      result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      v56 = v100;
      v57 = v101;
      v58 = v102;
      do
      {
        v59 = *(unsigned __int16 *)&v51[v56];
        v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        v24 = __OFSUB__(v59, v60);
        v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0))
          v62 = 0;
        else
          v62 = 1;
        v63 = v62 | (v61 >> 31);
        v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        v24 = __OFSUB__(v59, v64);
        v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0))
          v66 = 0;
        else
          v66 = 1;
        v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 4095)
          v67 = 4095;
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      v52 = v15;
      v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    v68 = *(unsigned __int16 *)v51;
    v69 = *(v55 - 2);
    v24 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0))
      v71 = 0;
    else
      v71 = 1;
    v72 = v71 | (v70 >> 31);
    v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    v24 = __OFSUB__(v68, v73);
    v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0))
      v75 = 0;
    else
      v75 = 1;
    v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 4095)
      v76 = 4095;
    *(_WORD *)v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    v78 = v55[(v98 - 4)];
    v24 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0))
      v80 = 0;
    else
      v80 = 1;
    v81 = v80 | (v79 >> 31);
    v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v77, v82);
    v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0))
      v84 = 0;
    else
      v84 = 1;
    v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 4095)
      v85 = 4095;
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v86 = a7 - 1 - 1;
    v87 = v51 + 4;
    v88 = 0x400000000;
    do
    {
      v89 = (unsigned __int16)*v87;
      v90 = *v55;
      v55 += 2;
      v91 = (v89 > v90) | ((v89 - v90) >> 31);
      v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      v24 = __OFSUB__(v89, v92);
      v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0))
        v94 = 0;
      else
        v94 = 1;
      v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 4095)
        v95 = 4095;
      *v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    v96 = (__int16 *)v109;
    do
    {
      v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

void *sub_1C97DEF74(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  int v103;
  _BOOL8 v104;
  uint64_t __n;
  uint64_t v106;
  _BYTE __dst[130];
  __int16 v109;
  _BYTE __srca[128];
  uint64_t v111;

  v11 = a4;
  v111 = *MEMORY[0x1E0C80C00];
  v15 = ((a4 >> 1) & 1) + a7;
  v16 = 2 * a2;
  v106 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = ~a4 & 5;
  __n = 2 * (((a4 >> 1) & 1) + a7);
  result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    v22 = a5[1];
    v23 = *(unsigned __int16 *)__src;
    v24 = *(unsigned __int16 *)(a6 + 2);
    v25 = __OFSUB__(v23, v24);
    v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v27 = 0;
    else
      v27 = 1;
    v28 = v27 | (v26 >> 31);
    v25 = __OFSUB__(v23, v22);
    v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 4095)
      v31 = 4095;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    v25 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v25 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 4095)
      v40 = 4095;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = (unsigned __int16 *)(a6 + 4);
    v43 = __src;
    do
    {
      v44 = (unsigned __int16)v43[a2];
      v46 = (unsigned __int16)v43[1];
      ++v43;
      v45 = v46;
      v47 = *v42++;
      v48 = (v45 > v47) | ((v45 - v47) >> 31);
      v25 = __OFSUB__(v45, v44);
      v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0))
        v50 = 0;
      else
        v50 = 1;
      v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 4095)
        v51 = 4095;
      *v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  v100 = a7 - 1;
  v101 = a7;
  v102 = v11;
  v52 = (unsigned __int16 *)&__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    v53 = (unsigned __int16 *)&v109;
    v54 = v15 - 1;
    v104 = (v11 & 1) == 0;
    v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    v56 = (unsigned __int16 *)__dst;
    v57 = 1;
    do
    {
      v58 = v56;
      v56 = v53;
      v59 = v58 + 1;
      v53 = v58;
      result = memcpy(v56, v52, __n);
      ++v57;
      v60 = (unsigned __int16 *)v55;
      v61 = v104;
      do
      {
        if (v61)
          v62 = v60;
        else
          v62 = &a5[v57];
        v63 = *v62;
        v64 = v52[v61];
        v65 = v59[v61];
        v25 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0))
          v67 = 0;
        else
          v67 = 1;
        v68 = v67 | (v66 >> 31);
        v25 = __OFSUB__(v64, v63);
        v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0))
          v70 = 0;
        else
          v70 = 1;
        v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 4095)
          v71 = 4095;
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    v72 = v52[a2 - 1];
    v73 = *v52;
    v74 = v56[1];
    v25 = __OFSUB__(v73, v74);
    v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0))
      v76 = 0;
    else
      v76 = 1;
    v77 = v76 | (v75 >> 31);
    v25 = __OFSUB__(v73, v72);
    v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0))
      v79 = 0;
    else
      v79 = 1;
    v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 4095)
      v80 = 4095;
    *v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    v81 = v52[v101 - 2 + a2];
    v82 = v52[v100];
    v83 = v56[v101];
    v25 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0))
      v85 = 0;
    else
      v85 = 1;
    v86 = v85 | (v84 >> 31);
    v25 = __OFSUB__(v82, v81);
    v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0))
      v88 = 0;
    else
      v88 = 1;
    v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 4095)
      v89 = 4095;
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    v90 = v100 - 1;
    v91 = v56 + 2;
    do
    {
      v92 = v52[a2];
      v94 = v52[1];
      ++v52;
      v93 = v94;
      v95 = *v91++;
      v96 = (v93 > v95) | ((v93 - v95) >> 31);
      v25 = __OFSUB__(v93, v92);
      v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 4095)
        v99 = 4095;
      *v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1)
    return memcpy(a5, __srca, 2 * v103);
  return result;
}

void *sub_1C97DF394(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  char *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _WORD *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t __n;
  uint64_t v101;
  __int16 v103;
  _BYTE v104[130];
  uint64_t v105;
  _BYTE __srca[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v104;
  v16 = 2 * a2;
  v101 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = a4 & 6;
  v95 = a7;
  __n = 2 * a7;
  result = memcpy(v104, __src, __n);
  v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 1);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 4095)
      v31 = 4095;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v33 = a6[a7 - 2];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 4095)
      v40 = 4095;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    do
    {
      v43 = *((unsigned __int16 *)v42 - 1);
      v44 = *a6++;
      v45 = (v43 > v44) | ((v43 - v44) >> 31);
      v46 = *(unsigned __int16 *)&v42[2 * a2];
      v24 = __OFSUB__(v43, v46);
      v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 4095)
        v49 = 4095;
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  v94 = a7 - 1;
  v93 = a4 & 9;
  v50 = &__src[2 * a2];
  v98 = a2;
  v97 = a4;
  v96 = a7;
  if (a8 >= 3)
  {
    v51 = __src;
    v52 = (unsigned __int16 *)&v105;
    v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    v99 = (a4 & 1) == 0;
    v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    v55 = 1;
    do
    {
      v56 = v15;
      v15 = v52;
      v57 = (char *)(v56 - 1);
      v52 = v56;
      result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      v58 = (unsigned __int16 *)v54;
      v59 = v99;
      do
      {
        v60 = *(unsigned __int16 *)&v50[2 * v59];
        v61 = *(unsigned __int16 *)&v57[2 * v59];
        v24 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0))
          v63 = 0;
        else
          v63 = 1;
        v64 = *v58++;
        v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 4095)
          v65 = 4095;
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    v66 = *(unsigned __int16 *)v50;
    v67 = *(v15 - 1);
    v24 = __OFSUB__(v66, v67);
    v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0))
      v69 = 0;
    else
      v69 = 1;
    v70 = v69 | (v68 >> 31);
    v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    v24 = __OFSUB__(v66, v71);
    v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0))
      v73 = 0;
    else
      v73 = 1;
    v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 4095)
      v74 = 4095;
    *(_WORD *)v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    v75 = *(unsigned __int16 *)&v50[2 * v94];
    v76 = v15[v96 - 2];
    v24 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0))
      v78 = 0;
    else
      v78 = 1;
    v79 = v78 | (v77 >> 31);
    v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    v24 = __OFSUB__(v75, v80);
    v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0))
      v82 = 0;
    else
      v82 = 1;
    v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 4095)
      v83 = 4095;
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    v84 = v94 - 1;
    v85 = v50 + 4;
    do
    {
      v86 = (unsigned __int16)*(v85 - 1);
      v87 = *v15++;
      v88 = (v86 > v87) | ((v86 - v87) >> 31);
      v89 = (unsigned __int16)v85[v98];
      v24 = __OFSUB__(v86, v89);
      v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0))
        v91 = 0;
      else
        v91 = 1;
      v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 4095)
        v92 = 4095;
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1)
    return memcpy(a5, __srca, 2 * a8);
  return result;
}

uint64_t sub_1C97DF7E0(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E00DC(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1C97E00DC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

uint64_t sub_1C97DF858(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DFC80(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1C97DFC80(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

_WORD *sub_1C97DF8D0(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DFC04(a1, a2, a3, a5, 4u, a7);
  return sub_1C97DFC04(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1C97DF934(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E00DC(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1C97E00DC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

uint64_t sub_1C97DF9AC(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DFC80(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1C97DFC80(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1C97DFA24(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E00DC(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1C97E00DC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1C97DFA9C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DFC80(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1C97DFC80(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1C97DFB14(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E00DC(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1C97E00DC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1C97DFB8C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97DFC80(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1C97DFC80(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

_WORD *sub_1C97DFC04(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  int v11;

  if (a6 >= 1)
  {
    v6 = a6;
    v7 = &result[2 * a5 - 2];
    v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      v9 = result;
      v10 = a5;
      do
      {
        v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 6)) + (unsigned __int16)*v9;
        if (v11 >= 2047)
          v11 = 2047;
        *v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      result = (_WORD *)((char *)result + v8);
    }
    while ((_DWORD)v6 != a6);
  }
  return result;
}

uint64_t sub_1C97DFC80(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  unsigned int v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  int *v54;
  int *v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 *v100;
  __int16 v101;
  uint64_t v102;
  int v103;
  unsigned int v105;
  uint64_t __n;
  uint64_t v107;
  _BYTE __dst[260];
  int v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v15 = 2 * a7;
  v16 = a8;
  v107 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[2 * v15 - 4];
    v18 = v110;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v20 = ~a4 & 5;
  v105 = ((a4 >> 1) & 1) + a7;
  __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    v21 = (unsigned __int16)a5[2];
    v22 = *(unsigned __int16 *)__src;
    v23 = *(unsigned __int16 *)(a6 + 4);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v24 = __OFSUB__(v22, v21);
    v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0))
      v29 = 0;
    else
      v29 = 1;
    v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 2047)
      v30 = 2047;
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  result = a4;
  if ((a4 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    v24 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v24 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 2047)
      v40 = 2047;
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = 0;
    v42 = (a7 - 1) - 1;
    v43 = 4;
    do
    {
      v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      v24 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = v48 | (v47 >> 31);
      v24 = __OFSUB__(v45, v44);
      v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0))
        v51 = 0;
      else
        v51 = 1;
      v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 2047)
        v52 = 2047;
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  v102 = (a7 - 1);
  v53 = &__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v57 = (int *)__dst;
  }
  else
  {
    v54 = &v109;
    v55 = (int *)__dst;
    v56 = 1;
    do
    {
      v57 = v54;
      result = (uint64_t)memcpy(v54, v53, __n);
      v58 = (a4 & 1) == 0;
      v59 = (a4 & 1) == 0;
      do
      {
        v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59)
          v60 = (char *)&a5[2 * (int)v56 + 2];
        v61 = *(unsigned __int16 *)v60;
        v62 = *(unsigned __int16 *)&v53[1 * v58];
        v63 = LOWORD(v55[v58 + 1]);
        v24 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0))
          v65 = 0;
        else
          v65 = 1;
        v66 = v65 | (v64 >> 31);
        v24 = __OFSUB__(v62, v61);
        v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0))
          v68 = 0;
        else
          v68 = 1;
        v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 2047)
          v69 = 2047;
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      v54 = v55;
      v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    v71 = *(unsigned __int16 *)v53;
    v72 = *((unsigned __int16 *)v57 + 2);
    v24 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0))
      v74 = 0;
    else
      v74 = 1;
    v75 = v74 | (v73 >> 31);
    v24 = __OFSUB__(v71, v70);
    v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0))
      v77 = 0;
    else
      v77 = 1;
    v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 2047)
      v78 = 2047;
    *(_WORD *)v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    v24 = __OFSUB__(v80, v81);
    v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0))
      v83 = 0;
    else
      v83 = 1;
    v84 = v83 | (v82 >> 31);
    v24 = __OFSUB__(v80, v79);
    v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0))
      v86 = 0;
    else
      v86 = 1;
    v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 2047)
      v87 = 2047;
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v88 = 0;
    v89 = v102 - 1;
    v90 = 2;
    do
    {
      v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      v93 = LOWORD(v57[v90]);
      v24 = __OFSUB__(v92, v93);
      v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0))
        v95 = 0;
      else
        v95 = 1;
      v96 = v95 | (v94 >> 31);
      v24 = __OFSUB__(v92, v91);
      v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 2047)
        v99 = 2047;
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    v100 = (__int16 *)v110;
    do
    {
      v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C97E00DC(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  __int16 *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t __n;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  _BYTE v107[260];
  uint64_t v108;
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v107;
  v16 = a8;
  v104 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[4 * a7 - 4];
    v18 = v109;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v105 = 2 * a2;
  v98 = 2 * a7;
  v20 = a4 & 6;
  __n = 4 * a7;
  memcpy(v107, __src, __n);
  result = a4;
  v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 2);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 2047)
      v31 = 2047;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    v33 = a6[(v98 - 4)];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 2047)
      v40 = 2047;
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    v43 = 0x400000000;
    do
    {
      v44 = (unsigned __int16)*v42;
      v45 = *a6;
      a6 += 2;
      v46 = (v44 > v45) | ((v44 - v45) >> 31);
      v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      v24 = __OFSUB__(v44, v47);
      v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0))
        v49 = 0;
      else
        v49 = 1;
      v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 2047)
        v50 = 2047;
      *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    v55 = (unsigned __int16 *)v107;
  }
  else
  {
    v52 = (unsigned __int16 *)&v108;
    v53 = (a4 & 1) == 0;
    v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    v100 = 4 * v53;
    v101 = (v53 << 33) + 0x200000000;
    v54 = 1;
    do
    {
      v55 = v52;
      result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      v56 = v100;
      v57 = v101;
      v58 = v102;
      do
      {
        v59 = *(unsigned __int16 *)&v51[v56];
        v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        v24 = __OFSUB__(v59, v60);
        v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0))
          v62 = 0;
        else
          v62 = 1;
        v63 = v62 | (v61 >> 31);
        v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        v24 = __OFSUB__(v59, v64);
        v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0))
          v66 = 0;
        else
          v66 = 1;
        v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 2047)
          v67 = 2047;
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      v52 = v15;
      v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    v68 = *(unsigned __int16 *)v51;
    v69 = *(v55 - 2);
    v24 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0))
      v71 = 0;
    else
      v71 = 1;
    v72 = v71 | (v70 >> 31);
    v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    v24 = __OFSUB__(v68, v73);
    v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0))
      v75 = 0;
    else
      v75 = 1;
    v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 2047)
      v76 = 2047;
    *(_WORD *)v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    v78 = v55[(v98 - 4)];
    v24 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0))
      v80 = 0;
    else
      v80 = 1;
    v81 = v80 | (v79 >> 31);
    v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v77, v82);
    v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0))
      v84 = 0;
    else
      v84 = 1;
    v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 2047)
      v85 = 2047;
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v86 = a7 - 1 - 1;
    v87 = v51 + 4;
    v88 = 0x400000000;
    do
    {
      v89 = (unsigned __int16)*v87;
      v90 = *v55;
      v55 += 2;
      v91 = (v89 > v90) | ((v89 - v90) >> 31);
      v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      v24 = __OFSUB__(v89, v92);
      v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0))
        v94 = 0;
      else
        v94 = 1;
      v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 2047)
        v95 = 2047;
      *v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    v96 = (__int16 *)v109;
    do
    {
      v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

void *sub_1C97E0548(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  int v103;
  _BOOL8 v104;
  uint64_t __n;
  uint64_t v106;
  _BYTE __dst[130];
  __int16 v109;
  _BYTE __srca[128];
  uint64_t v111;

  v11 = a4;
  v111 = *MEMORY[0x1E0C80C00];
  v15 = ((a4 >> 1) & 1) + a7;
  v16 = 2 * a2;
  v106 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = ~a4 & 5;
  __n = 2 * (((a4 >> 1) & 1) + a7);
  result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    v22 = a5[1];
    v23 = *(unsigned __int16 *)__src;
    v24 = *(unsigned __int16 *)(a6 + 2);
    v25 = __OFSUB__(v23, v24);
    v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v27 = 0;
    else
      v27 = 1;
    v28 = v27 | (v26 >> 31);
    v25 = __OFSUB__(v23, v22);
    v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 2047)
      v31 = 2047;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    v25 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v25 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 2047)
      v40 = 2047;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = (unsigned __int16 *)(a6 + 4);
    v43 = __src;
    do
    {
      v44 = (unsigned __int16)v43[a2];
      v46 = (unsigned __int16)v43[1];
      ++v43;
      v45 = v46;
      v47 = *v42++;
      v48 = (v45 > v47) | ((v45 - v47) >> 31);
      v25 = __OFSUB__(v45, v44);
      v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0))
        v50 = 0;
      else
        v50 = 1;
      v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 2047)
        v51 = 2047;
      *v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  v100 = a7 - 1;
  v101 = a7;
  v102 = v11;
  v52 = (unsigned __int16 *)&__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    v53 = (unsigned __int16 *)&v109;
    v54 = v15 - 1;
    v104 = (v11 & 1) == 0;
    v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    v56 = (unsigned __int16 *)__dst;
    v57 = 1;
    do
    {
      v58 = v56;
      v56 = v53;
      v59 = v58 + 1;
      v53 = v58;
      result = memcpy(v56, v52, __n);
      ++v57;
      v60 = (unsigned __int16 *)v55;
      v61 = v104;
      do
      {
        if (v61)
          v62 = v60;
        else
          v62 = &a5[v57];
        v63 = *v62;
        v64 = v52[v61];
        v65 = v59[v61];
        v25 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0))
          v67 = 0;
        else
          v67 = 1;
        v68 = v67 | (v66 >> 31);
        v25 = __OFSUB__(v64, v63);
        v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0))
          v70 = 0;
        else
          v70 = 1;
        v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 2047)
          v71 = 2047;
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    v72 = v52[a2 - 1];
    v73 = *v52;
    v74 = v56[1];
    v25 = __OFSUB__(v73, v74);
    v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0))
      v76 = 0;
    else
      v76 = 1;
    v77 = v76 | (v75 >> 31);
    v25 = __OFSUB__(v73, v72);
    v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0))
      v79 = 0;
    else
      v79 = 1;
    v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 2047)
      v80 = 2047;
    *v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    v81 = v52[v101 - 2 + a2];
    v82 = v52[v100];
    v83 = v56[v101];
    v25 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0))
      v85 = 0;
    else
      v85 = 1;
    v86 = v85 | (v84 >> 31);
    v25 = __OFSUB__(v82, v81);
    v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0))
      v88 = 0;
    else
      v88 = 1;
    v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 2047)
      v89 = 2047;
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    v90 = v100 - 1;
    v91 = v56 + 2;
    do
    {
      v92 = v52[a2];
      v94 = v52[1];
      ++v52;
      v93 = v94;
      v95 = *v91++;
      v96 = (v93 > v95) | ((v93 - v95) >> 31);
      v25 = __OFSUB__(v93, v92);
      v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 2047)
        v99 = 2047;
      *v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1)
    return memcpy(a5, __srca, 2 * v103);
  return result;
}

void *sub_1C97E0968(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  char *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _WORD *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t __n;
  uint64_t v101;
  __int16 v103;
  _BYTE v104[130];
  uint64_t v105;
  _BYTE __srca[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v104;
  v16 = 2 * a2;
  v101 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = a4 & 6;
  v95 = a7;
  __n = 2 * a7;
  result = memcpy(v104, __src, __n);
  v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 1);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 2047)
      v31 = 2047;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v33 = a6[a7 - 2];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 2047)
      v40 = 2047;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    do
    {
      v43 = *((unsigned __int16 *)v42 - 1);
      v44 = *a6++;
      v45 = (v43 > v44) | ((v43 - v44) >> 31);
      v46 = *(unsigned __int16 *)&v42[2 * a2];
      v24 = __OFSUB__(v43, v46);
      v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 2047)
        v49 = 2047;
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  v94 = a7 - 1;
  v93 = a4 & 9;
  v50 = &__src[2 * a2];
  v98 = a2;
  v97 = a4;
  v96 = a7;
  if (a8 >= 3)
  {
    v51 = __src;
    v52 = (unsigned __int16 *)&v105;
    v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    v99 = (a4 & 1) == 0;
    v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    v55 = 1;
    do
    {
      v56 = v15;
      v15 = v52;
      v57 = (char *)(v56 - 1);
      v52 = v56;
      result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      v58 = (unsigned __int16 *)v54;
      v59 = v99;
      do
      {
        v60 = *(unsigned __int16 *)&v50[2 * v59];
        v61 = *(unsigned __int16 *)&v57[2 * v59];
        v24 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0))
          v63 = 0;
        else
          v63 = 1;
        v64 = *v58++;
        v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 2047)
          v65 = 2047;
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    v66 = *(unsigned __int16 *)v50;
    v67 = *(v15 - 1);
    v24 = __OFSUB__(v66, v67);
    v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0))
      v69 = 0;
    else
      v69 = 1;
    v70 = v69 | (v68 >> 31);
    v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    v24 = __OFSUB__(v66, v71);
    v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0))
      v73 = 0;
    else
      v73 = 1;
    v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 2047)
      v74 = 2047;
    *(_WORD *)v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    v75 = *(unsigned __int16 *)&v50[2 * v94];
    v76 = v15[v96 - 2];
    v24 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0))
      v78 = 0;
    else
      v78 = 1;
    v79 = v78 | (v77 >> 31);
    v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    v24 = __OFSUB__(v75, v80);
    v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0))
      v82 = 0;
    else
      v82 = 1;
    v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 2047)
      v83 = 2047;
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    v84 = v94 - 1;
    v85 = v50 + 4;
    do
    {
      v86 = (unsigned __int16)*(v85 - 1);
      v87 = *v15++;
      v88 = (v86 > v87) | ((v86 - v87) >> 31);
      v89 = (unsigned __int16)v85[v98];
      v24 = __OFSUB__(v86, v89);
      v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0))
        v91 = 0;
      else
        v91 = 1;
      v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 2047)
        v92 = 2047;
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1)
    return memcpy(a5, __srca, 2 * a8);
  return result;
}

uint64_t sub_1C97E0DB4(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E16B0(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1C97E16B0(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

uint64_t sub_1C97E0E2C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E1254(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1C97E1254(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

_WORD *sub_1C97E0EA4(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E11D8(a1, a2, a3, a5, 4u, a7);
  return sub_1C97E11D8(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1C97E0F08(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E16B0(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1C97E16B0(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

uint64_t sub_1C97E0F80(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E1254(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1C97E1254(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1C97E0FF8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E16B0(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1C97E16B0(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1C97E1070(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E1254(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1C97E1254(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1C97E10E8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E16B0(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1C97E16B0(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1C97E1160(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E1254(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1C97E1254(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

_WORD *sub_1C97E11D8(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  int v11;

  if (a6 >= 1)
  {
    v6 = a6;
    v7 = &result[2 * a5 - 2];
    v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      v9 = result;
      v10 = a5;
      do
      {
        v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 5)) + (unsigned __int16)*v9;
        if (v11 >= 1023)
          v11 = 1023;
        *v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      result = (_WORD *)((char *)result + v8);
    }
    while ((_DWORD)v6 != a6);
  }
  return result;
}

uint64_t sub_1C97E1254(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  unsigned int v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  int *v54;
  int *v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 *v100;
  __int16 v101;
  uint64_t v102;
  int v103;
  unsigned int v105;
  uint64_t __n;
  uint64_t v107;
  _BYTE __dst[260];
  int v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v15 = 2 * a7;
  v16 = a8;
  v107 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[2 * v15 - 4];
    v18 = v110;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v20 = ~a4 & 5;
  v105 = ((a4 >> 1) & 1) + a7;
  __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    v21 = (unsigned __int16)a5[2];
    v22 = *(unsigned __int16 *)__src;
    v23 = *(unsigned __int16 *)(a6 + 4);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v24 = __OFSUB__(v22, v21);
    v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0))
      v29 = 0;
    else
      v29 = 1;
    v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 1023)
      v30 = 1023;
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  result = a4;
  if ((a4 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    v24 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v24 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 1023)
      v40 = 1023;
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = 0;
    v42 = (a7 - 1) - 1;
    v43 = 4;
    do
    {
      v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      v24 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = v48 | (v47 >> 31);
      v24 = __OFSUB__(v45, v44);
      v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0))
        v51 = 0;
      else
        v51 = 1;
      v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 1023)
        v52 = 1023;
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  v102 = (a7 - 1);
  v53 = &__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v57 = (int *)__dst;
  }
  else
  {
    v54 = &v109;
    v55 = (int *)__dst;
    v56 = 1;
    do
    {
      v57 = v54;
      result = (uint64_t)memcpy(v54, v53, __n);
      v58 = (a4 & 1) == 0;
      v59 = (a4 & 1) == 0;
      do
      {
        v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59)
          v60 = (char *)&a5[2 * (int)v56 + 2];
        v61 = *(unsigned __int16 *)v60;
        v62 = *(unsigned __int16 *)&v53[1 * v58];
        v63 = LOWORD(v55[v58 + 1]);
        v24 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0))
          v65 = 0;
        else
          v65 = 1;
        v66 = v65 | (v64 >> 31);
        v24 = __OFSUB__(v62, v61);
        v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0))
          v68 = 0;
        else
          v68 = 1;
        v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 1023)
          v69 = 1023;
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      v54 = v55;
      v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    v71 = *(unsigned __int16 *)v53;
    v72 = *((unsigned __int16 *)v57 + 2);
    v24 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0))
      v74 = 0;
    else
      v74 = 1;
    v75 = v74 | (v73 >> 31);
    v24 = __OFSUB__(v71, v70);
    v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0))
      v77 = 0;
    else
      v77 = 1;
    v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 1023)
      v78 = 1023;
    *(_WORD *)v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    v24 = __OFSUB__(v80, v81);
    v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0))
      v83 = 0;
    else
      v83 = 1;
    v84 = v83 | (v82 >> 31);
    v24 = __OFSUB__(v80, v79);
    v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0))
      v86 = 0;
    else
      v86 = 1;
    v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 1023)
      v87 = 1023;
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v88 = 0;
    v89 = v102 - 1;
    v90 = 2;
    do
    {
      v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      v93 = LOWORD(v57[v90]);
      v24 = __OFSUB__(v92, v93);
      v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0))
        v95 = 0;
      else
        v95 = 1;
      v96 = v95 | (v94 >> 31);
      v24 = __OFSUB__(v92, v91);
      v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 1023)
        v99 = 1023;
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    v100 = (__int16 *)v110;
    do
    {
      v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C97E16B0(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  __int16 *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t __n;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  _BYTE v107[260];
  uint64_t v108;
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v107;
  v16 = a8;
  v104 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[4 * a7 - 4];
    v18 = v109;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v105 = 2 * a2;
  v98 = 2 * a7;
  v20 = a4 & 6;
  __n = 4 * a7;
  memcpy(v107, __src, __n);
  result = a4;
  v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 2);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 1023)
      v31 = 1023;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    v33 = a6[(v98 - 4)];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 1023)
      v40 = 1023;
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    v43 = 0x400000000;
    do
    {
      v44 = (unsigned __int16)*v42;
      v45 = *a6;
      a6 += 2;
      v46 = (v44 > v45) | ((v44 - v45) >> 31);
      v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      v24 = __OFSUB__(v44, v47);
      v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0))
        v49 = 0;
      else
        v49 = 1;
      v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 1023)
        v50 = 1023;
      *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    v55 = (unsigned __int16 *)v107;
  }
  else
  {
    v52 = (unsigned __int16 *)&v108;
    v53 = (a4 & 1) == 0;
    v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    v100 = 4 * v53;
    v101 = (v53 << 33) + 0x200000000;
    v54 = 1;
    do
    {
      v55 = v52;
      result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      v56 = v100;
      v57 = v101;
      v58 = v102;
      do
      {
        v59 = *(unsigned __int16 *)&v51[v56];
        v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        v24 = __OFSUB__(v59, v60);
        v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0))
          v62 = 0;
        else
          v62 = 1;
        v63 = v62 | (v61 >> 31);
        v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        v24 = __OFSUB__(v59, v64);
        v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0))
          v66 = 0;
        else
          v66 = 1;
        v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 1023)
          v67 = 1023;
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      v52 = v15;
      v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    v68 = *(unsigned __int16 *)v51;
    v69 = *(v55 - 2);
    v24 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0))
      v71 = 0;
    else
      v71 = 1;
    v72 = v71 | (v70 >> 31);
    v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    v24 = __OFSUB__(v68, v73);
    v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0))
      v75 = 0;
    else
      v75 = 1;
    v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 1023)
      v76 = 1023;
    *(_WORD *)v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    v78 = v55[(v98 - 4)];
    v24 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0))
      v80 = 0;
    else
      v80 = 1;
    v81 = v80 | (v79 >> 31);
    v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v77, v82);
    v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0))
      v84 = 0;
    else
      v84 = 1;
    v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 1023)
      v85 = 1023;
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v86 = a7 - 1 - 1;
    v87 = v51 + 4;
    v88 = 0x400000000;
    do
    {
      v89 = (unsigned __int16)*v87;
      v90 = *v55;
      v55 += 2;
      v91 = (v89 > v90) | ((v89 - v90) >> 31);
      v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      v24 = __OFSUB__(v89, v92);
      v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0))
        v94 = 0;
      else
        v94 = 1;
      v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 1023)
        v95 = 1023;
      *v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    v96 = (__int16 *)v109;
    do
    {
      v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

void *sub_1C97E1B1C(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  int v103;
  _BOOL8 v104;
  uint64_t __n;
  uint64_t v106;
  _BYTE __dst[130];
  __int16 v109;
  _BYTE __srca[128];
  uint64_t v111;

  v11 = a4;
  v111 = *MEMORY[0x1E0C80C00];
  v15 = ((a4 >> 1) & 1) + a7;
  v16 = 2 * a2;
  v106 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = ~a4 & 5;
  __n = 2 * (((a4 >> 1) & 1) + a7);
  result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    v22 = a5[1];
    v23 = *(unsigned __int16 *)__src;
    v24 = *(unsigned __int16 *)(a6 + 2);
    v25 = __OFSUB__(v23, v24);
    v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v27 = 0;
    else
      v27 = 1;
    v28 = v27 | (v26 >> 31);
    v25 = __OFSUB__(v23, v22);
    v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 1023)
      v31 = 1023;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    v25 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v25 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 1023)
      v40 = 1023;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = (unsigned __int16 *)(a6 + 4);
    v43 = __src;
    do
    {
      v44 = (unsigned __int16)v43[a2];
      v46 = (unsigned __int16)v43[1];
      ++v43;
      v45 = v46;
      v47 = *v42++;
      v48 = (v45 > v47) | ((v45 - v47) >> 31);
      v25 = __OFSUB__(v45, v44);
      v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0))
        v50 = 0;
      else
        v50 = 1;
      v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 1023)
        v51 = 1023;
      *v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  v100 = a7 - 1;
  v101 = a7;
  v102 = v11;
  v52 = (unsigned __int16 *)&__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    v53 = (unsigned __int16 *)&v109;
    v54 = v15 - 1;
    v104 = (v11 & 1) == 0;
    v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    v56 = (unsigned __int16 *)__dst;
    v57 = 1;
    do
    {
      v58 = v56;
      v56 = v53;
      v59 = v58 + 1;
      v53 = v58;
      result = memcpy(v56, v52, __n);
      ++v57;
      v60 = (unsigned __int16 *)v55;
      v61 = v104;
      do
      {
        if (v61)
          v62 = v60;
        else
          v62 = &a5[v57];
        v63 = *v62;
        v64 = v52[v61];
        v65 = v59[v61];
        v25 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0))
          v67 = 0;
        else
          v67 = 1;
        v68 = v67 | (v66 >> 31);
        v25 = __OFSUB__(v64, v63);
        v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0))
          v70 = 0;
        else
          v70 = 1;
        v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 1023)
          v71 = 1023;
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    v72 = v52[a2 - 1];
    v73 = *v52;
    v74 = v56[1];
    v25 = __OFSUB__(v73, v74);
    v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0))
      v76 = 0;
    else
      v76 = 1;
    v77 = v76 | (v75 >> 31);
    v25 = __OFSUB__(v73, v72);
    v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0))
      v79 = 0;
    else
      v79 = 1;
    v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 1023)
      v80 = 1023;
    *v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    v81 = v52[v101 - 2 + a2];
    v82 = v52[v100];
    v83 = v56[v101];
    v25 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0))
      v85 = 0;
    else
      v85 = 1;
    v86 = v85 | (v84 >> 31);
    v25 = __OFSUB__(v82, v81);
    v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0))
      v88 = 0;
    else
      v88 = 1;
    v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 1023)
      v89 = 1023;
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    v90 = v100 - 1;
    v91 = v56 + 2;
    do
    {
      v92 = v52[a2];
      v94 = v52[1];
      ++v52;
      v93 = v94;
      v95 = *v91++;
      v96 = (v93 > v95) | ((v93 - v95) >> 31);
      v25 = __OFSUB__(v93, v92);
      v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 1023)
        v99 = 1023;
      *v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1)
    return memcpy(a5, __srca, 2 * v103);
  return result;
}

void *sub_1C97E1F3C(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  char *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _WORD *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t __n;
  uint64_t v101;
  __int16 v103;
  _BYTE v104[130];
  uint64_t v105;
  _BYTE __srca[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v104;
  v16 = 2 * a2;
  v101 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = a4 & 6;
  v95 = a7;
  __n = 2 * a7;
  result = memcpy(v104, __src, __n);
  v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 1);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 1023)
      v31 = 1023;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v33 = a6[a7 - 2];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 1023)
      v40 = 1023;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    do
    {
      v43 = *((unsigned __int16 *)v42 - 1);
      v44 = *a6++;
      v45 = (v43 > v44) | ((v43 - v44) >> 31);
      v46 = *(unsigned __int16 *)&v42[2 * a2];
      v24 = __OFSUB__(v43, v46);
      v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 1023)
        v49 = 1023;
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  v94 = a7 - 1;
  v93 = a4 & 9;
  v50 = &__src[2 * a2];
  v98 = a2;
  v97 = a4;
  v96 = a7;
  if (a8 >= 3)
  {
    v51 = __src;
    v52 = (unsigned __int16 *)&v105;
    v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    v99 = (a4 & 1) == 0;
    v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    v55 = 1;
    do
    {
      v56 = v15;
      v15 = v52;
      v57 = (char *)(v56 - 1);
      v52 = v56;
      result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      v58 = (unsigned __int16 *)v54;
      v59 = v99;
      do
      {
        v60 = *(unsigned __int16 *)&v50[2 * v59];
        v61 = *(unsigned __int16 *)&v57[2 * v59];
        v24 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0))
          v63 = 0;
        else
          v63 = 1;
        v64 = *v58++;
        v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 1023)
          v65 = 1023;
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    v66 = *(unsigned __int16 *)v50;
    v67 = *(v15 - 1);
    v24 = __OFSUB__(v66, v67);
    v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0))
      v69 = 0;
    else
      v69 = 1;
    v70 = v69 | (v68 >> 31);
    v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    v24 = __OFSUB__(v66, v71);
    v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0))
      v73 = 0;
    else
      v73 = 1;
    v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 1023)
      v74 = 1023;
    *(_WORD *)v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    v75 = *(unsigned __int16 *)&v50[2 * v94];
    v76 = v15[v96 - 2];
    v24 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0))
      v78 = 0;
    else
      v78 = 1;
    v79 = v78 | (v77 >> 31);
    v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    v24 = __OFSUB__(v75, v80);
    v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0))
      v82 = 0;
    else
      v82 = 1;
    v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 1023)
      v83 = 1023;
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    v84 = v94 - 1;
    v85 = v50 + 4;
    do
    {
      v86 = (unsigned __int16)*(v85 - 1);
      v87 = *v15++;
      v88 = (v86 > v87) | ((v86 - v87) >> 31);
      v89 = (unsigned __int16)v85[v98];
      v24 = __OFSUB__(v86, v89);
      v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0))
        v91 = 0;
      else
        v91 = 1;
      v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 1023)
        v92 = 1023;
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1)
    return memcpy(a5, __srca, 2 * a8);
  return result;
}

uint64_t sub_1C97E2388(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E2C84(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1C97E2C84(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

uint64_t sub_1C97E2400(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E2828(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1C97E2828(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

_WORD *sub_1C97E2478(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E27AC(a1, a2, a3, a5, 4u, a7);
  return sub_1C97E27AC(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1C97E24DC(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E2C84(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1C97E2C84(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

uint64_t sub_1C97E2554(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E2828(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1C97E2828(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1C97E25CC(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E2C84(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1C97E2C84(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1C97E2644(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E2828(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1C97E2828(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1C97E26BC(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E2C84(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1C97E2C84(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1C97E2734(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E2828(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1C97E2828(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

_WORD *sub_1C97E27AC(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  int v11;

  if (a6 >= 1)
  {
    v6 = a6;
    v7 = &result[2 * a5 - 2];
    v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      v9 = result;
      v10 = a5;
      do
      {
        v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 4)) + (unsigned __int16)*v9;
        if (v11 >= 511)
          v11 = 511;
        *v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      result = (_WORD *)((char *)result + v8);
    }
    while ((_DWORD)v6 != a6);
  }
  return result;
}

uint64_t sub_1C97E2828(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  unsigned int v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  int *v54;
  int *v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 *v100;
  __int16 v101;
  uint64_t v102;
  int v103;
  unsigned int v105;
  uint64_t __n;
  uint64_t v107;
  _BYTE __dst[260];
  int v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v15 = 2 * a7;
  v16 = a8;
  v107 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[2 * v15 - 4];
    v18 = v110;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v20 = ~a4 & 5;
  v105 = ((a4 >> 1) & 1) + a7;
  __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    v21 = (unsigned __int16)a5[2];
    v22 = *(unsigned __int16 *)__src;
    v23 = *(unsigned __int16 *)(a6 + 4);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v24 = __OFSUB__(v22, v21);
    v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0))
      v29 = 0;
    else
      v29 = 1;
    v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 511)
      v30 = 511;
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  result = a4;
  if ((a4 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    v24 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v24 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 511)
      v40 = 511;
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = 0;
    v42 = (a7 - 1) - 1;
    v43 = 4;
    do
    {
      v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      v24 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = v48 | (v47 >> 31);
      v24 = __OFSUB__(v45, v44);
      v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0))
        v51 = 0;
      else
        v51 = 1;
      v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 511)
        v52 = 511;
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  v102 = (a7 - 1);
  v53 = &__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v57 = (int *)__dst;
  }
  else
  {
    v54 = &v109;
    v55 = (int *)__dst;
    v56 = 1;
    do
    {
      v57 = v54;
      result = (uint64_t)memcpy(v54, v53, __n);
      v58 = (a4 & 1) == 0;
      v59 = (a4 & 1) == 0;
      do
      {
        v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59)
          v60 = (char *)&a5[2 * (int)v56 + 2];
        v61 = *(unsigned __int16 *)v60;
        v62 = *(unsigned __int16 *)&v53[1 * v58];
        v63 = LOWORD(v55[v58 + 1]);
        v24 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0))
          v65 = 0;
        else
          v65 = 1;
        v66 = v65 | (v64 >> 31);
        v24 = __OFSUB__(v62, v61);
        v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0))
          v68 = 0;
        else
          v68 = 1;
        v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 511)
          v69 = 511;
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      v54 = v55;
      v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    v71 = *(unsigned __int16 *)v53;
    v72 = *((unsigned __int16 *)v57 + 2);
    v24 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0))
      v74 = 0;
    else
      v74 = 1;
    v75 = v74 | (v73 >> 31);
    v24 = __OFSUB__(v71, v70);
    v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0))
      v77 = 0;
    else
      v77 = 1;
    v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 511)
      v78 = 511;
    *(_WORD *)v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    v24 = __OFSUB__(v80, v81);
    v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0))
      v83 = 0;
    else
      v83 = 1;
    v84 = v83 | (v82 >> 31);
    v24 = __OFSUB__(v80, v79);
    v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0))
      v86 = 0;
    else
      v86 = 1;
    v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 511)
      v87 = 511;
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v88 = 0;
    v89 = v102 - 1;
    v90 = 2;
    do
    {
      v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      v93 = LOWORD(v57[v90]);
      v24 = __OFSUB__(v92, v93);
      v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0))
        v95 = 0;
      else
        v95 = 1;
      v96 = v95 | (v94 >> 31);
      v24 = __OFSUB__(v92, v91);
      v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 511)
        v99 = 511;
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    v100 = (__int16 *)v110;
    do
    {
      v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C97E2C84(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  __int16 *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t __n;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  _BYTE v107[260];
  uint64_t v108;
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v107;
  v16 = a8;
  v104 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[4 * a7 - 4];
    v18 = v109;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v105 = 2 * a2;
  v98 = 2 * a7;
  v20 = a4 & 6;
  __n = 4 * a7;
  memcpy(v107, __src, __n);
  result = a4;
  v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 2);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 511)
      v31 = 511;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    v33 = a6[(v98 - 4)];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 511)
      v40 = 511;
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    v43 = 0x400000000;
    do
    {
      v44 = (unsigned __int16)*v42;
      v45 = *a6;
      a6 += 2;
      v46 = (v44 > v45) | ((v44 - v45) >> 31);
      v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      v24 = __OFSUB__(v44, v47);
      v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0))
        v49 = 0;
      else
        v49 = 1;
      v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 511)
        v50 = 511;
      *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    v55 = (unsigned __int16 *)v107;
  }
  else
  {
    v52 = (unsigned __int16 *)&v108;
    v53 = (a4 & 1) == 0;
    v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    v100 = 4 * v53;
    v101 = (v53 << 33) + 0x200000000;
    v54 = 1;
    do
    {
      v55 = v52;
      result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      v56 = v100;
      v57 = v101;
      v58 = v102;
      do
      {
        v59 = *(unsigned __int16 *)&v51[v56];
        v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        v24 = __OFSUB__(v59, v60);
        v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0))
          v62 = 0;
        else
          v62 = 1;
        v63 = v62 | (v61 >> 31);
        v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        v24 = __OFSUB__(v59, v64);
        v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0))
          v66 = 0;
        else
          v66 = 1;
        v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 511)
          v67 = 511;
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      v52 = v15;
      v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    v68 = *(unsigned __int16 *)v51;
    v69 = *(v55 - 2);
    v24 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0))
      v71 = 0;
    else
      v71 = 1;
    v72 = v71 | (v70 >> 31);
    v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    v24 = __OFSUB__(v68, v73);
    v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0))
      v75 = 0;
    else
      v75 = 1;
    v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 511)
      v76 = 511;
    *(_WORD *)v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    v78 = v55[(v98 - 4)];
    v24 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0))
      v80 = 0;
    else
      v80 = 1;
    v81 = v80 | (v79 >> 31);
    v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v77, v82);
    v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0))
      v84 = 0;
    else
      v84 = 1;
    v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 511)
      v85 = 511;
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v86 = a7 - 1 - 1;
    v87 = v51 + 4;
    v88 = 0x400000000;
    do
    {
      v89 = (unsigned __int16)*v87;
      v90 = *v55;
      v55 += 2;
      v91 = (v89 > v90) | ((v89 - v90) >> 31);
      v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      v24 = __OFSUB__(v89, v92);
      v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0))
        v94 = 0;
      else
        v94 = 1;
      v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 511)
        v95 = 511;
      *v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    v96 = (__int16 *)v109;
    do
    {
      v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

void *sub_1C97E30F0(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  int v103;
  _BOOL8 v104;
  uint64_t __n;
  uint64_t v106;
  _BYTE __dst[130];
  __int16 v109;
  _BYTE __srca[128];
  uint64_t v111;

  v11 = a4;
  v111 = *MEMORY[0x1E0C80C00];
  v15 = ((a4 >> 1) & 1) + a7;
  v16 = 2 * a2;
  v106 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = ~a4 & 5;
  __n = 2 * (((a4 >> 1) & 1) + a7);
  result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    v22 = a5[1];
    v23 = *(unsigned __int16 *)__src;
    v24 = *(unsigned __int16 *)(a6 + 2);
    v25 = __OFSUB__(v23, v24);
    v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v27 = 0;
    else
      v27 = 1;
    v28 = v27 | (v26 >> 31);
    v25 = __OFSUB__(v23, v22);
    v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 511)
      v31 = 511;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    v25 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v25 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 511)
      v40 = 511;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = (unsigned __int16 *)(a6 + 4);
    v43 = __src;
    do
    {
      v44 = (unsigned __int16)v43[a2];
      v46 = (unsigned __int16)v43[1];
      ++v43;
      v45 = v46;
      v47 = *v42++;
      v48 = (v45 > v47) | ((v45 - v47) >> 31);
      v25 = __OFSUB__(v45, v44);
      v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0))
        v50 = 0;
      else
        v50 = 1;
      v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 511)
        v51 = 511;
      *v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  v100 = a7 - 1;
  v101 = a7;
  v102 = v11;
  v52 = (unsigned __int16 *)&__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    v53 = (unsigned __int16 *)&v109;
    v54 = v15 - 1;
    v104 = (v11 & 1) == 0;
    v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    v56 = (unsigned __int16 *)__dst;
    v57 = 1;
    do
    {
      v58 = v56;
      v56 = v53;
      v59 = v58 + 1;
      v53 = v58;
      result = memcpy(v56, v52, __n);
      ++v57;
      v60 = (unsigned __int16 *)v55;
      v61 = v104;
      do
      {
        if (v61)
          v62 = v60;
        else
          v62 = &a5[v57];
        v63 = *v62;
        v64 = v52[v61];
        v65 = v59[v61];
        v25 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0))
          v67 = 0;
        else
          v67 = 1;
        v68 = v67 | (v66 >> 31);
        v25 = __OFSUB__(v64, v63);
        v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0))
          v70 = 0;
        else
          v70 = 1;
        v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 511)
          v71 = 511;
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    v72 = v52[a2 - 1];
    v73 = *v52;
    v74 = v56[1];
    v25 = __OFSUB__(v73, v74);
    v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0))
      v76 = 0;
    else
      v76 = 1;
    v77 = v76 | (v75 >> 31);
    v25 = __OFSUB__(v73, v72);
    v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0))
      v79 = 0;
    else
      v79 = 1;
    v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 511)
      v80 = 511;
    *v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    v81 = v52[v101 - 2 + a2];
    v82 = v52[v100];
    v83 = v56[v101];
    v25 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0))
      v85 = 0;
    else
      v85 = 1;
    v86 = v85 | (v84 >> 31);
    v25 = __OFSUB__(v82, v81);
    v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0))
      v88 = 0;
    else
      v88 = 1;
    v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 511)
      v89 = 511;
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    v90 = v100 - 1;
    v91 = v56 + 2;
    do
    {
      v92 = v52[a2];
      v94 = v52[1];
      ++v52;
      v93 = v94;
      v95 = *v91++;
      v96 = (v93 > v95) | ((v93 - v95) >> 31);
      v25 = __OFSUB__(v93, v92);
      v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 511)
        v99 = 511;
      *v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1)
    return memcpy(a5, __srca, 2 * v103);
  return result;
}

void *sub_1C97E3510(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  char *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _WORD *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t __n;
  uint64_t v101;
  __int16 v103;
  _BYTE v104[130];
  uint64_t v105;
  _BYTE __srca[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v104;
  v16 = 2 * a2;
  v101 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = a4 & 6;
  v95 = a7;
  __n = 2 * a7;
  result = memcpy(v104, __src, __n);
  v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 1);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 511)
      v31 = 511;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v33 = a6[a7 - 2];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 511)
      v40 = 511;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    do
    {
      v43 = *((unsigned __int16 *)v42 - 1);
      v44 = *a6++;
      v45 = (v43 > v44) | ((v43 - v44) >> 31);
      v46 = *(unsigned __int16 *)&v42[2 * a2];
      v24 = __OFSUB__(v43, v46);
      v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 511)
        v49 = 511;
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  v94 = a7 - 1;
  v93 = a4 & 9;
  v50 = &__src[2 * a2];
  v98 = a2;
  v97 = a4;
  v96 = a7;
  if (a8 >= 3)
  {
    v51 = __src;
    v52 = (unsigned __int16 *)&v105;
    v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    v99 = (a4 & 1) == 0;
    v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    v55 = 1;
    do
    {
      v56 = v15;
      v15 = v52;
      v57 = (char *)(v56 - 1);
      v52 = v56;
      result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      v58 = (unsigned __int16 *)v54;
      v59 = v99;
      do
      {
        v60 = *(unsigned __int16 *)&v50[2 * v59];
        v61 = *(unsigned __int16 *)&v57[2 * v59];
        v24 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0))
          v63 = 0;
        else
          v63 = 1;
        v64 = *v58++;
        v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 511)
          v65 = 511;
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    v66 = *(unsigned __int16 *)v50;
    v67 = *(v15 - 1);
    v24 = __OFSUB__(v66, v67);
    v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0))
      v69 = 0;
    else
      v69 = 1;
    v70 = v69 | (v68 >> 31);
    v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    v24 = __OFSUB__(v66, v71);
    v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0))
      v73 = 0;
    else
      v73 = 1;
    v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 511)
      v74 = 511;
    *(_WORD *)v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    v75 = *(unsigned __int16 *)&v50[2 * v94];
    v76 = v15[v96 - 2];
    v24 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0))
      v78 = 0;
    else
      v78 = 1;
    v79 = v78 | (v77 >> 31);
    v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    v24 = __OFSUB__(v75, v80);
    v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0))
      v82 = 0;
    else
      v82 = 1;
    v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 511)
      v83 = 511;
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    v84 = v94 - 1;
    v85 = v50 + 4;
    do
    {
      v86 = (unsigned __int16)*(v85 - 1);
      v87 = *v15++;
      v88 = (v86 > v87) | ((v86 - v87) >> 31);
      v89 = (unsigned __int16)v85[v98];
      v24 = __OFSUB__(v86, v89);
      v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0))
        v91 = 0;
      else
        v91 = 1;
      v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 511)
        v92 = 511;
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1)
    return memcpy(a5, __srca, 2 * a8);
  return result;
}

uint64_t sub_1C97E395C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E4258(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1C97E4258(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

uint64_t sub_1C97E39D4(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E3DFC(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1C97E3DFC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

_WORD *sub_1C97E3A4C(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E3D80(a1, a2, a3, a5, 4u, a7);
  return sub_1C97E3D80(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1C97E3AB0(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E4258(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1C97E4258(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

uint64_t sub_1C97E3B28(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E3DFC(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1C97E3DFC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1C97E3BA0(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E4258(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1C97E4258(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1C97E3C18(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E3DFC(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1C97E3DFC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1C97E3C90(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1C97E4258(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1C97E4258(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1C97E3D08(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1C97E3DFC(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1C97E3DFC(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

_WORD *sub_1C97E3D80(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  int v11;

  if (a6 >= 1)
  {
    v6 = a6;
    v7 = &result[2 * a5 - 2];
    v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      v9 = result;
      v10 = a5;
      do
      {
        v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 3)) + (unsigned __int16)*v9;
        if (v11 >= 255)
          v11 = 255;
        *v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      result = (_WORD *)((char *)result + v8);
    }
    while ((_DWORD)v6 != a6);
  }
  return result;
}

uint64_t sub_1C97E3DFC(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  unsigned int v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  int *v54;
  int *v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 *v100;
  __int16 v101;
  uint64_t v102;
  int v103;
  unsigned int v105;
  uint64_t __n;
  uint64_t v107;
  _BYTE __dst[260];
  int v109;
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v15 = 2 * a7;
  v16 = a8;
  v107 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[2 * v15 - 4];
    v18 = v110;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v20 = ~a4 & 5;
  v105 = ((a4 >> 1) & 1) + a7;
  __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    v21 = (unsigned __int16)a5[2];
    v22 = *(unsigned __int16 *)__src;
    v23 = *(unsigned __int16 *)(a6 + 4);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v24 = __OFSUB__(v22, v21);
    v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0))
      v29 = 0;
    else
      v29 = 1;
    v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 255)
      v30 = 255;
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  result = a4;
  if ((a4 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    v24 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v24 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 255)
      v40 = 255;
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = 0;
    v42 = (a7 - 1) - 1;
    v43 = 4;
    do
    {
      v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      v24 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = v48 | (v47 >> 31);
      v24 = __OFSUB__(v45, v44);
      v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0))
        v51 = 0;
      else
        v51 = 1;
      v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 255)
        v52 = 255;
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  v102 = (a7 - 1);
  v53 = &__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v57 = (int *)__dst;
  }
  else
  {
    v54 = &v109;
    v55 = (int *)__dst;
    v56 = 1;
    do
    {
      v57 = v54;
      result = (uint64_t)memcpy(v54, v53, __n);
      v58 = (a4 & 1) == 0;
      v59 = (a4 & 1) == 0;
      do
      {
        v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59)
          v60 = (char *)&a5[2 * (int)v56 + 2];
        v61 = *(unsigned __int16 *)v60;
        v62 = *(unsigned __int16 *)&v53[1 * v58];
        v63 = LOWORD(v55[v58 + 1]);
        v24 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0))
          v65 = 0;
        else
          v65 = 1;
        v66 = v65 | (v64 >> 31);
        v24 = __OFSUB__(v62, v61);
        v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0))
          v68 = 0;
        else
          v68 = 1;
        v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 255)
          v69 = 255;
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      v54 = v55;
      v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    v71 = *(unsigned __int16 *)v53;
    v72 = *((unsigned __int16 *)v57 + 2);
    v24 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0))
      v74 = 0;
    else
      v74 = 1;
    v75 = v74 | (v73 >> 31);
    v24 = __OFSUB__(v71, v70);
    v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0))
      v77 = 0;
    else
      v77 = 1;
    v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 255)
      v78 = 255;
    *(_WORD *)v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    v24 = __OFSUB__(v80, v81);
    v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0))
      v83 = 0;
    else
      v83 = 1;
    v84 = v83 | (v82 >> 31);
    v24 = __OFSUB__(v80, v79);
    v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0))
      v86 = 0;
    else
      v86 = 1;
    v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 255)
      v87 = 255;
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v88 = 0;
    v89 = v102 - 1;
    v90 = 2;
    do
    {
      v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      v93 = LOWORD(v57[v90]);
      v24 = __OFSUB__(v92, v93);
      v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0))
        v95 = 0;
      else
        v95 = 1;
      v96 = v95 | (v94 >> 31);
      v24 = __OFSUB__(v92, v91);
      v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 255)
        v99 = 255;
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    v100 = (__int16 *)v110;
    do
    {
      v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C97E4258(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  __int16 *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t __n;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  _BYTE v107[260];
  uint64_t v108;
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v107;
  v16 = a8;
  v104 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = &__src[4 * a7 - 4];
    v18 = v109;
    v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  v105 = 2 * a2;
  v98 = 2 * a7;
  v20 = a4 & 6;
  __n = 4 * a7;
  memcpy(v107, __src, __n);
  result = a4;
  v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 2);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 255)
      v31 = 255;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    v33 = a6[(v98 - 4)];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 255)
      v40 = 255;
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    v43 = 0x400000000;
    do
    {
      v44 = (unsigned __int16)*v42;
      v45 = *a6;
      a6 += 2;
      v46 = (v44 > v45) | ((v44 - v45) >> 31);
      v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      v24 = __OFSUB__(v44, v47);
      v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0))
        v49 = 0;
      else
        v49 = 1;
      v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 255)
        v50 = 255;
      *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    v55 = (unsigned __int16 *)v107;
  }
  else
  {
    v52 = (unsigned __int16 *)&v108;
    v53 = (a4 & 1) == 0;
    v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    v100 = 4 * v53;
    v101 = (v53 << 33) + 0x200000000;
    v54 = 1;
    do
    {
      v55 = v52;
      result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      v56 = v100;
      v57 = v101;
      v58 = v102;
      do
      {
        v59 = *(unsigned __int16 *)&v51[v56];
        v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        v24 = __OFSUB__(v59, v60);
        v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0))
          v62 = 0;
        else
          v62 = 1;
        v63 = v62 | (v61 >> 31);
        v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        v24 = __OFSUB__(v59, v64);
        v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0))
          v66 = 0;
        else
          v66 = 1;
        v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 255)
          v67 = 255;
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      v52 = v15;
      v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    v68 = *(unsigned __int16 *)v51;
    v69 = *(v55 - 2);
    v24 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0))
      v71 = 0;
    else
      v71 = 1;
    v72 = v71 | (v70 >> 31);
    v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    v24 = __OFSUB__(v68, v73);
    v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0))
      v75 = 0;
    else
      v75 = 1;
    v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 255)
      v76 = 255;
    *(_WORD *)v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    v78 = v55[(v98 - 4)];
    v24 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0))
      v80 = 0;
    else
      v80 = 1;
    v81 = v80 | (v79 >> 31);
    v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    v24 = __OFSUB__(v77, v82);
    v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0))
      v84 = 0;
    else
      v84 = 1;
    v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 255)
      v85 = 255;
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v86 = a7 - 1 - 1;
    v87 = v51 + 4;
    v88 = 0x400000000;
    do
    {
      v89 = (unsigned __int16)*v87;
      v90 = *v55;
      v55 += 2;
      v91 = (v89 > v90) | ((v89 - v90) >> 31);
      v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      v24 = __OFSUB__(v89, v92);
      v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0))
        v94 = 0;
      else
        v94 = 1;
      v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 255)
        v95 = 255;
      *v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    v96 = (__int16 *)v109;
    do
    {
      v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

void *sub_1C97E46C4(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  int v103;
  _BOOL8 v104;
  uint64_t __n;
  uint64_t v106;
  _BYTE __dst[130];
  __int16 v109;
  _BYTE __srca[128];
  uint64_t v111;

  v11 = a4;
  v111 = *MEMORY[0x1E0C80C00];
  v15 = ((a4 >> 1) & 1) + a7;
  v16 = 2 * a2;
  v106 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = ~a4 & 5;
  __n = 2 * (((a4 >> 1) & 1) + a7);
  result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    v22 = a5[1];
    v23 = *(unsigned __int16 *)__src;
    v24 = *(unsigned __int16 *)(a6 + 2);
    v25 = __OFSUB__(v23, v24);
    v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v27 = 0;
    else
      v27 = 1;
    v28 = v27 | (v26 >> 31);
    v25 = __OFSUB__(v23, v22);
    v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 255)
      v31 = 255;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    v25 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v25 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 255)
      v40 = 255;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = (unsigned __int16 *)(a6 + 4);
    v43 = __src;
    do
    {
      v44 = (unsigned __int16)v43[a2];
      v46 = (unsigned __int16)v43[1];
      ++v43;
      v45 = v46;
      v47 = *v42++;
      v48 = (v45 > v47) | ((v45 - v47) >> 31);
      v25 = __OFSUB__(v45, v44);
      v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0))
        v50 = 0;
      else
        v50 = 1;
      v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 255)
        v51 = 255;
      *v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  v100 = a7 - 1;
  v101 = a7;
  v102 = v11;
  v52 = (unsigned __int16 *)&__src[2 * a2];
  v103 = a8;
  if (a8 < 3)
  {
    v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    v53 = (unsigned __int16 *)&v109;
    v54 = v15 - 1;
    v104 = (v11 & 1) == 0;
    v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    v56 = (unsigned __int16 *)__dst;
    v57 = 1;
    do
    {
      v58 = v56;
      v56 = v53;
      v59 = v58 + 1;
      v53 = v58;
      result = memcpy(v56, v52, __n);
      ++v57;
      v60 = (unsigned __int16 *)v55;
      v61 = v104;
      do
      {
        if (v61)
          v62 = v60;
        else
          v62 = &a5[v57];
        v63 = *v62;
        v64 = v52[v61];
        v65 = v59[v61];
        v25 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0))
          v67 = 0;
        else
          v67 = 1;
        v68 = v67 | (v66 >> 31);
        v25 = __OFSUB__(v64, v63);
        v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0))
          v70 = 0;
        else
          v70 = 1;
        v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 255)
          v71 = 255;
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    v72 = v52[a2 - 1];
    v73 = *v52;
    v74 = v56[1];
    v25 = __OFSUB__(v73, v74);
    v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0))
      v76 = 0;
    else
      v76 = 1;
    v77 = v76 | (v75 >> 31);
    v25 = __OFSUB__(v73, v72);
    v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0))
      v79 = 0;
    else
      v79 = 1;
    v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 255)
      v80 = 255;
    *v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    v81 = v52[v101 - 2 + a2];
    v82 = v52[v100];
    v83 = v56[v101];
    v25 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0))
      v85 = 0;
    else
      v85 = 1;
    v86 = v85 | (v84 >> 31);
    v25 = __OFSUB__(v82, v81);
    v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0))
      v88 = 0;
    else
      v88 = 1;
    v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 255)
      v89 = 255;
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    v90 = v100 - 1;
    v91 = v56 + 2;
    do
    {
      v92 = v52[a2];
      v94 = v52[1];
      ++v52;
      v93 = v94;
      v95 = *v91++;
      v96 = (v93 > v95) | ((v93 - v95) >> 31);
      v25 = __OFSUB__(v93, v92);
      v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0))
        v98 = 0;
      else
        v98 = 1;
      v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 255)
        v99 = 255;
      *v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1)
    return memcpy(a5, __srca, 2 * v103);
  return result;
}

void *sub_1C97E4AE4(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _WORD *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  char *v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _WORD *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t __n;
  uint64_t v101;
  __int16 v103;
  _BYTE v104[130];
  uint64_t v105;
  _BYTE __srca[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v15 = (unsigned __int16 *)v104;
  v16 = 2 * a2;
  v101 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = &__src[2 * a7 - 2];
    v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  v20 = a4 & 6;
  v95 = a7;
  __n = 2 * a7;
  result = memcpy(v104, __src, __n);
  v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *(unsigned __int16 *)__src;
    v23 = *(a6 - 1);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 255)
      v31 = 255;
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    v33 = a6[a7 - 2];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 255)
      v40 = 255;
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 4;
    do
    {
      v43 = *((unsigned __int16 *)v42 - 1);
      v44 = *a6++;
      v45 = (v43 > v44) | ((v43 - v44) >> 31);
      v46 = *(unsigned __int16 *)&v42[2 * a2];
      v24 = __OFSUB__(v43, v46);
      v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 255)
        v49 = 255;
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  v94 = a7 - 1;
  v93 = a4 & 9;
  v50 = &__src[2 * a2];
  v98 = a2;
  v97 = a4;
  v96 = a7;
  if (a8 >= 3)
  {
    v51 = __src;
    v52 = (unsigned __int16 *)&v105;
    v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    v99 = (a4 & 1) == 0;
    v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    v55 = 1;
    do
    {
      v56 = v15;
      v15 = v52;
      v57 = (char *)(v56 - 1);
      v52 = v56;
      result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      v58 = (unsigned __int16 *)v54;
      v59 = v99;
      do
      {
        v60 = *(unsigned __int16 *)&v50[2 * v59];
        v61 = *(unsigned __int16 *)&v57[2 * v59];
        v24 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0))
          v63 = 0;
        else
          v63 = 1;
        v64 = *v58++;
        v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 255)
          v65 = 255;
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    v66 = *(unsigned __int16 *)v50;
    v67 = *(v15 - 1);
    v24 = __OFSUB__(v66, v67);
    v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0))
      v69 = 0;
    else
      v69 = 1;
    v70 = v69 | (v68 >> 31);
    v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    v24 = __OFSUB__(v66, v71);
    v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0))
      v73 = 0;
    else
      v73 = 1;
    v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 255)
      v74 = 255;
    *(_WORD *)v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    v75 = *(unsigned __int16 *)&v50[2 * v94];
    v76 = v15[v96 - 2];
    v24 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0))
      v78 = 0;
    else
      v78 = 1;
    v79 = v78 | (v77 >> 31);
    v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    v24 = __OFSUB__(v75, v80);
    v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0))
      v82 = 0;
    else
      v82 = 1;
    v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 255)
      v83 = 255;
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    v84 = v94 - 1;
    v85 = v50 + 4;
    do
    {
      v86 = (unsigned __int16)*(v85 - 1);
      v87 = *v15++;
      v88 = (v86 > v87) | ((v86 - v87) >> 31);
      v89 = (unsigned __int16)v85[v98];
      v24 = __OFSUB__(v86, v89);
      v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0))
        v91 = 0;
      else
        v91 = 1;
      v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 255)
        v92 = 255;
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1)
    return memcpy(a5, __srca, 2 * a8);
  return result;
}

void *sub_1C97E4F30(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1C97E5824(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1C97E5824(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

uint64_t sub_1C97E4FA8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6, int a7)
{
  sub_1C97E53D0(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1C97E53D0(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4, a7);
}

_BYTE *sub_1C97E5020(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7)
{
  sub_1C97E5358(a1, a2, a3, a5, 4u, a7);
  return sub_1C97E5358(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

void *sub_1C97E5084(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1C97E5824(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1C97E5824(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

uint64_t sub_1C97E50FC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6, int a7)
{
  sub_1C97E53D0(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1C97E53D0(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8, a7);
}

void *sub_1C97E5174(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1C97E5824(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1C97E5824(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1C97E51EC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6, int a7)
{
  sub_1C97E53D0(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1C97E53D0(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 16, a7);
}

void *sub_1C97E5264(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1C97E5824(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1C97E5824(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1C97E52DC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6, int a7)
{
  sub_1C97E53D0(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1C97E53D0(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 32, a7);
}

_BYTE *sub_1C97E5358(_BYTE *result, uint64_t a2, uint64_t a3, _BYTE *a4, unsigned int a5, int a6)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;

  if (a6 >= 1)
  {
    v6 = a6;
    v7 = &result[2 * a5 - 2];
    do
    {
      *a4 = *v7;
      a4 += 2;
      v7 += a2;
      --v6;
    }
    while (v6);
    do
    {
      v8 = result;
      v9 = a5;
      do
      {
        v10 = *(char *)(a3 + ((unint64_t)*v8 >> 3)) + *v8;
        if (v10 >= 255)
          v10 = 255;
        *v8 = v10 & ~(v10 >> 31);
        v8 += 2;
        --v9;
      }
      while (v9);
      result += a2;
      LODWORD(v6) = v6 + 1;
    }
    while ((_DWORD)v6 != a6);
  }
  return result;
}

uint64_t sub_1C97E53D0(unsigned __int8 *__src, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6, int a7, int a8)
{
  int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  __int16 *v54;
  uint64_t v55;
  __int16 *v56;
  uint64_t v57;
  __int16 *v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  char *v102;
  char v103;
  uint64_t v104;
  int v105;
  uint64_t __n;
  uint64_t v108;
  _BYTE __dst[130];
  __int16 v110;
  _BYTE v111[64];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v15 = ((a4 >> 1) & 1) + a7;
  v16 = 2 * a7;
  v108 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = (char *)&__src[v16 - 2];
    v19 = v111;
    do
    {
      *v19++ = *v18;
      v18 += a2;
      --v17;
    }
    while (v17);
  }
  v20 = ~a4 & 5;
  __n = 2 * (((a4 >> 1) & 1) + a7);
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    v21 = a5[2];
    v22 = *__src;
    v23 = *(unsigned __int8 *)(a6 + 2);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v24 = __OFSUB__(v22, v21);
    v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0))
      v29 = 0;
    else
      v29 = 1;
    v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 255)
      v30 = 255;
    *__src = v30 & ~(v30 >> 31);
  }
  result = a4;
  if ((a4 & 0x20) != 0)
  {
    v32 = __src[v16 - 4 + a2];
    v33 = __src[v16 - 2];
    v34 = *(unsigned __int8 *)(a6 + v16);
    v24 = __OFSUB__(v33, v34);
    v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0))
      v36 = 0;
    else
      v36 = 1;
    v37 = v36 | (v35 >> 31);
    v24 = __OFSUB__(v33, v32);
    v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 255)
      v40 = 255;
    __src[v16 - 2] = v40 & ~(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = 0;
    v42 = (a7 - 1) - 1;
    v43 = 4;
    do
    {
      v44 = __src[a2 + (v41 >> 32)];
      v45 = __src[v43 - 2];
      v46 = *(unsigned __int8 *)(a6 + v43);
      v24 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = v48 | (v47 >> 31);
      v24 = __OFSUB__(v45, v44);
      v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0))
        v51 = 0;
      else
        v51 = 1;
      v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 255)
        v52 = 255;
      __src[v43 - 2] = v52 & ~(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  v104 = (a7 - 1);
  v53 = (char *)&__src[a2];
  v105 = a8;
  if (a8 < 3)
  {
    v58 = (__int16 *)__dst;
  }
  else
  {
    v54 = &v110;
    v55 = (v15 - 1);
    v56 = (__int16 *)__dst;
    v57 = 1;
    do
    {
      v58 = v54;
      result = (uint64_t)memcpy(v54, v53, __n);
      v59 = 2 * ((a4 & 1) == 0);
      v60 = (a4 & 1) == 0;
      do
      {
        v61 = &v53[a2 - 2 + v59];
        if (!v60)
          v61 = &a5[2 * (int)v57 + 2];
        v62 = *v61;
        v63 = v53[v59];
        v64 = LOBYTE(v56[v59 / 2u + 1]);
        v24 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0))
          v66 = 0;
        else
          v66 = 1;
        v67 = v66 | (v65 >> 31);
        v24 = __OFSUB__(v63, v62);
        v68 = v63 - v62;
        if ((v68 < 0) ^ v24 | (v68 == 0))
          v69 = 0;
        else
          v69 = 1;
        v70 = *(char *)(a3 + (v69 | (v68 >> 31)) + v67 + 2) + v63;
        if (v70 >= 255)
          v70 = 255;
        v53[v59] = v70 & ~(v70 >> 31);
        ++v60;
        v59 += 2;
      }
      while (v55 != v60);
      ++v57;
      v53 += a2;
      v54 = v56;
      v56 = v58;
    }
    while (v57 != v108);
  }
  if ((a4 & 0x40) != 0)
  {
    v71 = v53[a2 - 2];
    v72 = *v53;
    v73 = *((unsigned __int8 *)v58 + 2);
    v24 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0))
      v75 = 0;
    else
      v75 = 1;
    v76 = v75 | (v74 >> 31);
    v24 = __OFSUB__(v72, v71);
    v77 = v72 - v71;
    if ((v77 < 0) ^ v24 | (v77 == 0))
      v78 = 0;
    else
      v78 = 1;
    v79 = *(char *)(a3 + (v78 | (v77 >> 31)) + v76 + 2) + v72;
    if (v79 >= 255)
      v79 = 255;
    *v53 = v79 & ~(v79 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    v80 = v53[(2 * v104 - 2) + a2];
    v81 = v53[2 * (a7 - 1)];
    v82 = *((unsigned __int8 *)v58 + (2 * (a7 - 1)) + 2);
    v24 = __OFSUB__(v81, v82);
    v83 = v81 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0))
      v84 = 0;
    else
      v84 = 1;
    v85 = v84 | (v83 >> 31);
    v24 = __OFSUB__(v81, v80);
    v86 = v81 - v80;
    if ((v86 < 0) ^ v24 | (v86 == 0))
      v87 = 0;
    else
      v87 = 1;
    v88 = *(char *)(a3 + (v87 | (v86 >> 31)) + v85 + 2) + v81;
    if (v88 >= 255)
      v88 = 255;
    v53[2 * (a7 - 1)] = v88 & ~(v88 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    v89 = 0;
    v90 = v104 - 1;
    v91 = 2;
    do
    {
      v92 = v53[a2 + (v89 >> 32)];
      v93 = v53[v91 * 2 - 2];
      v94 = LOBYTE(v58[v91]);
      v24 = __OFSUB__(v93, v94);
      v95 = v93 - v94;
      if ((v95 < 0) ^ v24 | (v95 == 0))
        v96 = 0;
      else
        v96 = 1;
      v97 = v96 | (v95 >> 31);
      v24 = __OFSUB__(v93, v92);
      v98 = v93 - v92;
      if ((v98 < 0) ^ v24 | (v98 == 0))
        v99 = 0;
      else
        v99 = 1;
      v100 = *(char *)(a3 + (v99 | (v98 >> 31)) + v97 + 2) + v93;
      if (v100 >= 255)
        v100 = 255;
      v53[v91 * 2 - 2] = v100 & ~(v100 >> 31);
      ++v91;
      v89 += 0x200000000;
      --v90;
    }
    while (v90);
  }
  if (v105 >= 1)
  {
    v101 = v105;
    v102 = v111;
    do
    {
      v103 = *v102++;
      *a5 = v103;
      a5 += 2;
      --v101;
    }
    while (v101);
  }
  return result;
}

void *sub_1C97E5824(unsigned __int8 *__src, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, unsigned int a7, int a8)
{
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  void *result;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  char *v98;
  char v99;
  int v100;
  uint64_t v101;
  char v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t __n;
  uint64_t v107;
  char v108;
  _BYTE v109[130];
  uint64_t v110;
  _BYTE v111[64];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v16 = v109;
  v107 = (a8 - 1);
  if (a8 >= 1)
  {
    v17 = a8;
    v18 = (char *)&__src[2 * a7 - 2];
    v19 = v111;
    do
    {
      *v19++ = *v18;
      v18 += a2;
      --v17;
    }
    while (v17);
  }
  v101 = 2 * a7;
  v20 = a4 & 6;
  __n = 2 * a7;
  result = memcpy(v109, __src, __n);
  v108 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v22 = *__src;
    v23 = *(a6 - 2);
    v24 = __OFSUB__(v22, v23);
    v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0))
      v26 = 0;
    else
      v26 = 1;
    v27 = v26 | (v25 >> 31);
    v28 = __src[a2 + 2];
    v24 = __OFSUB__(v22, v28);
    v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0))
      v30 = 0;
    else
      v30 = 1;
    v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 255)
      v31 = 255;
    *__src = v31 & ~(v31 >> 31);
  }
  if (v20 == 6)
  {
    v32 = __src[(v101 - 2)];
    v33 = a6[(v101 - 4)];
    v24 = __OFSUB__(v32, v33);
    v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0))
      v35 = 0;
    else
      v35 = 1;
    v36 = v35 | (v34 >> 31);
    v37 = __src[v101 + a2];
    v24 = __OFSUB__(v32, v37);
    v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0))
      v39 = 0;
    else
      v39 = 1;
    v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 255)
      v40 = 255;
    __src[(v101 - 2)] = v40 & ~(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v41 = a7 - 1 - 1;
    v42 = __src + 2;
    v43 = 0x400000000;
    do
    {
      v44 = *v42;
      v45 = *a6;
      a6 += 2;
      v46 = (v44 > v45) | ((v44 - v45) >> 31);
      v47 = __src[a2 + (v43 >> 32)];
      v24 = __OFSUB__(v44, v47);
      v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0))
        v49 = 0;
      else
        v49 = 1;
      v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 255)
        v50 = 255;
      *v42 = v50 & ~(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  v100 = a4 & 9;
  v51 = (char *)&__src[a2];
  v103 = a8;
  v102 = a4;
  if (a8 < 3)
  {
    v56 = v109;
  }
  else
  {
    v52 = (unsigned __int8 *)&v110;
    v53 = (a4 & 1) == 0;
    v105 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    v104 = (v53 << 33) + 0x200000000;
    v54 = 2 * v53;
    v55 = 1;
    do
    {
      v56 = v52;
      result = memcpy(v52, v51, __n);
      *(v56 - 2) = a5[2 * v55];
      v57 = v54;
      v58 = v104;
      v59 = v105;
      do
      {
        v60 = v51[v57];
        v61 = v16[v57 - 2];
        v24 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0))
          v63 = 0;
        else
          v63 = 1;
        v64 = v63 | (v62 >> 31);
        v65 = v51[a2 + (v58 >> 32)];
        v24 = __OFSUB__(v60, v65);
        v66 = v60 - v65;
        if ((v66 < 0) ^ v24 | (v66 == 0))
          v67 = 0;
        else
          v67 = 1;
        v68 = *(char *)(a3 + v64 + (v67 | (v66 >> 31)) + 2) + v60;
        if (v68 >= 255)
          v68 = 255;
        v51[v57] = v68 & ~(v68 >> 31);
        v58 += 0x200000000;
        v57 += 2;
        --v59;
      }
      while (v59);
      ++v55;
      v51 += a2;
      v52 = v16;
      v16 = v56;
    }
    while (v55 != v107);
  }
  if (v100 == 9)
  {
    v69 = *v51;
    v70 = *(v56 - 2);
    v24 = __OFSUB__(v69, v70);
    v71 = v69 - v70;
    if ((v71 < 0) ^ v24 | (v71 == 0))
      v72 = 0;
    else
      v72 = 1;
    v73 = v72 | (v71 >> 31);
    v74 = v51[a2 + 2];
    v24 = __OFSUB__(v69, v74);
    v75 = v69 - v74;
    if ((v75 < 0) ^ v24 | (v75 == 0))
      v76 = 0;
    else
      v76 = 1;
    v77 = *(char *)(a3 + v73 + (v76 | (v75 >> 31)) + 2) + v69;
    if (v77 >= 255)
      v77 = 255;
    *v51 = v77 & ~(v77 >> 31);
  }
  if (v102 < 0)
  {
    v78 = v51[(v101 - 2)];
    v79 = v56[(v101 - 4)];
    v24 = __OFSUB__(v78, v79);
    v80 = v78 - v79;
    if ((v80 < 0) ^ v24 | (v80 == 0))
      v81 = 0;
    else
      v81 = 1;
    v82 = v81 | (v80 >> 31);
    v83 = v51[v101 + a2];
    v24 = __OFSUB__(v78, v83);
    v84 = v78 - v83;
    if ((v84 < 0) ^ v24 | (v84 == 0))
      v85 = 0;
    else
      v85 = 1;
    v86 = *(char *)(a3 + v82 + (v85 | (v84 >> 31)) + 2) + v78;
    if (v86 >= 255)
      v86 = 255;
    v51[(v101 - 2)] = v86 & ~(v86 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    v87 = a7 - 1 - 1;
    v88 = v51 + 2;
    v89 = 0x400000000;
    do
    {
      v90 = *v88;
      v91 = *v56;
      v56 += 2;
      v92 = (v90 > v91) | ((v90 - v91) >> 31);
      v93 = v51[a2 + (v89 >> 32)];
      v24 = __OFSUB__(v90, v93);
      v94 = v90 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0))
        v95 = 0;
      else
        v95 = 1;
      v96 = *(char *)(a3 + v92 + (v95 | (v94 >> 31)) + 2) + v90;
      if (v96 >= 255)
        v96 = 255;
      *v88 = v96 & ~(v96 >> 31);
      v88 += 2;
      v89 += 0x200000000;
      --v87;
    }
    while (v87);
  }
  if (v103 >= 1)
  {
    v97 = v103;
    v98 = v111;
    do
    {
      v99 = *v98++;
      *a5 = v99;
      a5 += 2;
      --v97;
    }
    while (v97);
  }
  return result;
}

void *sub_1C97E5C8C(unsigned __int8 *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  void *result;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  _BOOL8 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  char *v59;
  char *v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  size_t v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  int v103;
  uint64_t v104;
  size_t __n;
  _BYTE __dst[65];
  char v108;
  _BYTE __srca[64];
  uint64_t v110;

  v11 = a4;
  v110 = *MEMORY[0x1E0C80C00];
  __n = ((a4 >> 1) & 1) + a7;
  v104 = (a8 - 1);
  if (a8 >= 1)
  {
    v15 = (char *)&__src[a7 - 1];
    v16 = __srca;
    v17 = a8;
    do
    {
      *v16++ = *v15;
      v15 += a2;
      --v17;
    }
    while (v17);
  }
  v99 = a8;
  v18 = ~a4 & 5;
  result = memcpy(__dst, __src, __n);
  if (!v18)
  {
    v20 = a5[1];
    v21 = *__src;
    v22 = *(unsigned __int8 *)(a6 + 1);
    v23 = __OFSUB__(v21, v22);
    v24 = v21 - v22;
    if ((v24 < 0) ^ v23 | (v24 == 0))
      v25 = 0;
    else
      v25 = 1;
    v26 = v25 | (v24 >> 31);
    v23 = __OFSUB__(v21, v20);
    v27 = v21 - v20;
    if ((v27 < 0) ^ v23 | (v27 == 0))
      v28 = 0;
    else
      v28 = 1;
    v29 = *(char *)(a3 + (v28 | (v27 >> 31)) + v26 + 2) + v21;
    if (v29 >= 255)
      v29 = 255;
    *__src = v29 & ~(v29 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    v30 = __src[a7 - 2 + a2];
    v31 = __src[a7 - 1];
    v32 = *(unsigned __int8 *)(a6 + a7);
    v23 = __OFSUB__(v31, v32);
    v33 = v31 - v32;
    if ((v33 < 0) ^ v23 | (v33 == 0))
      v34 = 0;
    else
      v34 = 1;
    v35 = v34 | (v33 >> 31);
    v23 = __OFSUB__(v31, v30);
    v36 = v31 - v30;
    if ((v36 < 0) ^ v23 | (v36 == 0))
      v37 = 0;
    else
      v37 = 1;
    v38 = *(char *)(a3 + (v37 | (v36 >> 31)) + v35 + 2) + v31;
    if (v38 >= 255)
      v38 = 255;
    __src[a7 - 1] = v38 & ~(v38 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    v39 = a7 - 1 - 1;
    v40 = (unsigned __int8 *)(a6 + 2);
    v41 = __src;
    do
    {
      v42 = v41[a2];
      v44 = *++v41;
      v43 = v44;
      v45 = *v40++;
      v46 = (v43 > v45) | ((v43 - v45) >> 31);
      v23 = __OFSUB__(v43, v42);
      v47 = v43 - v42;
      if ((v47 < 0) ^ v23 | (v47 == 0))
        v48 = 0;
      else
        v48 = 1;
      v49 = *(char *)(a3 + (v48 | (v47 >> 31)) + v46 + 2) + v43;
      if (v49 >= 255)
        v49 = 255;
      *v41 = v49 & ~(v49 >> 31);
      --v39;
    }
    while (v39);
  }
  v100 = a7 - 1;
  v101 = a7;
  v102 = v11;
  v50 = (char *)&__src[a2];
  v103 = a8;
  if (a8 < 3)
  {
    v56 = __dst;
  }
  else
  {
    v51 = &v108;
    v52 = (v11 & 1) == 0;
    v53 = (char *)&__src[2 * a2 - 1];
    v54 = __dst;
    v55 = 1;
    do
    {
      v56 = v51;
      result = memcpy(v51, v50, __n);
      v57 = 0;
      ++v55;
      v58 = v54 + 1;
      v59 = v53;
      v60 = v50;
      do
      {
        v61 = (unsigned __int8 *)&v59[v52];
        if (!(v52 + v57))
          v61 = &a5[v55];
        v62 = *v61;
        v63 = v60[v52];
        v64 = v58[v52];
        v23 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if ((v65 < 0) ^ v23 | (v65 == 0))
          v66 = 0;
        else
          v66 = 1;
        v67 = v66 | (v65 >> 31);
        v23 = __OFSUB__(v63, v62);
        v68 = v63 - v62;
        if ((v68 < 0) ^ v23 | (v68 == 0))
          v69 = 0;
        else
          v69 = 1;
        v70 = *(char *)(a3 + (v69 | (v68 >> 31)) + v67 + 2) + v63;
        if (v70 >= 255)
          v70 = 255;
        v60[v52] = v70 & ~(v70 >> 31);
        ++v57;
        ++v58;
        ++v60;
        ++v59;
      }
      while (v52 - (__n - 1) + v57);
      v50 += a2;
      v53 += a2;
      v51 = v54;
      v54 = v56;
    }
    while (v55 != v104);
  }
  if ((v102 & 0x40) != 0)
  {
    v71 = v50[a2 - 1];
    v72 = *v50;
    v73 = v56[1];
    v23 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if ((v74 < 0) ^ v23 | (v74 == 0))
      v75 = 0;
    else
      v75 = 1;
    v76 = v75 | (v74 >> 31);
    v23 = __OFSUB__(v72, v71);
    v77 = v72 - v71;
    if ((v77 < 0) ^ v23 | (v77 == 0))
      v78 = 0;
    else
      v78 = 1;
    v79 = *(char *)(a3 + (v78 | (v77 >> 31)) + v76 + 2) + v72;
    if (v79 >= 255)
      v79 = 255;
    *v50 = v79 & ~(v79 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    v80 = v50[v101 - 2 + a2];
    v81 = v50[v100];
    v82 = v56[v101];
    v23 = __OFSUB__(v81, v82);
    v83 = v81 - v82;
    if ((v83 < 0) ^ v23 | (v83 == 0))
      v84 = 0;
    else
      v84 = 1;
    v85 = v84 | (v83 >> 31);
    v23 = __OFSUB__(v81, v80);
    v86 = v81 - v80;
    if ((v86 < 0) ^ v23 | (v86 == 0))
      v87 = 0;
    else
      v87 = 1;
    v88 = *(char *)(a3 + (v87 | (v86 >> 31)) + v85 + 2) + v81;
    if (v88 >= 255)
      v88 = 255;
    v50[v100] = v88 & ~(v88 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    v89 = v100 - 1;
    v90 = (unsigned __int8 *)(v56 + 2);
    do
    {
      v91 = v50[a2];
      v93 = *++v50;
      v92 = v93;
      v94 = *v90++;
      v95 = (v92 > v94) | ((v92 - v94) >> 31);
      v23 = __OFSUB__(v92, v91);
      v96 = v92 - v91;
      if ((v96 < 0) ^ v23 | (v96 == 0))
        v97 = 0;
      else
        v97 = 1;
      v98 = *(char *)(a3 + (v97 | (v96 >> 31)) + v95 + 2) + v92;
      if (v98 >= 255)
        v98 = 255;
      *v50 = v98 & ~(v98 >> 31);
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
    return memcpy(a5, __srca, v99);
  return result;
}

void *sub_1C97E60B4(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, size_t __n, int a8)
{
  int v9;
  unsigned __int8 *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  void *result;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char *v49;
  char *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  char *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  size_t v94;
  int v95;
  uint64_t v96;
  char v97;
  int v98;
  _BOOL8 v99;
  uint64_t v100;
  size_t __na;
  char v103;
  _BYTE v104[65];
  uint64_t v105;
  _BYTE __srca[64];
  uint64_t v107;

  v9 = __n;
  v107 = *MEMORY[0x1E0C80C00];
  v15 = v104;
  v100 = (a8 - 1);
  if (a8 >= 1)
  {
    v16 = &__src[(__n - 1)];
    v17 = __srca;
    v18 = a8;
    do
    {
      *v17++ = *v16;
      v16 += a2;
      --v18;
    }
    while (v18);
  }
  v94 = a8;
  v19 = a4 & 6;
  __na = __n;
  result = memcpy(v104, __src, __n);
  v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    v21 = *__src;
    v22 = *(a6 - 1);
    v23 = __OFSUB__(v21, v22);
    v24 = v21 - v22;
    if ((v24 < 0) ^ v23 | (v24 == 0))
      v25 = 0;
    else
      v25 = 1;
    v26 = v25 | (v24 >> 31);
    v27 = __src[a2 + 1];
    v23 = __OFSUB__(v21, v27);
    v28 = v21 - v27;
    if ((v28 < 0) ^ v23 | (v28 == 0))
      v29 = 0;
    else
      v29 = 1;
    v30 = *(char *)(a3 + v26 + (v29 | (v28 >> 31)) + 2) + v21;
    if (v30 >= 255)
      v30 = 255;
    *__src = v30 & ~(v30 >> 31);
  }
  if (v19 == 6)
  {
    v31 = __src[v9 - 1];
    v32 = a6[v9 - 2];
    v23 = __OFSUB__(v31, v32);
    v33 = v31 - v32;
    if ((v33 < 0) ^ v23 | (v33 == 0))
      v34 = 0;
    else
      v34 = 1;
    v35 = v34 | (v33 >> 31);
    v36 = __src[__na + a2];
    v23 = __OFSUB__(v31, v36);
    v37 = v31 - v36;
    if ((v37 < 0) ^ v23 | (v37 == 0))
      v38 = 0;
    else
      v38 = 1;
    v39 = *(char *)(a3 + v35 + (v38 | (v37 >> 31)) + 2) + v31;
    if (v39 >= 255)
      v39 = 255;
    __src[v9 - 1] = v39 & ~(v39 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    v40 = (v9 - 1) - 1;
    v41 = __src + 2;
    do
    {
      v42 = *(v41 - 1);
      v43 = *a6++;
      v44 = (v42 > v43) | ((v42 - v43) >> 31);
      v45 = v41[a2];
      v23 = __OFSUB__(v42, v45);
      v46 = v42 - v45;
      if ((v46 < 0) ^ v23 | (v46 == 0))
        v47 = 0;
      else
        v47 = 1;
      v48 = *(char *)(a3 + v44 + (v47 | (v46 >> 31)) + 2) + v42;
      if (v48 >= 255)
        v48 = 255;
      *(v41++ - 1) = v48 & ~(v48 >> 31);
      --v40;
    }
    while (v40);
  }
  v96 = (v9 - 1);
  v95 = a4 & 9;
  v49 = &__src[a2];
  v97 = a4;
  v98 = a8;
  if (a8 >= 3)
  {
    v50 = __src;
    v51 = (unsigned __int8 *)&v105;
    v99 = (a4 & 1) == 0;
    v52 = ((a4 >> 1) | 0xFFFFFFFE) + v9 + 1;
    v53 = &v50[2 * a2];
    v54 = 1;
    do
    {
      v55 = v15;
      v15 = v51;
      v56 = (char *)(v55 - 1);
      v51 = v55;
      result = memcpy(v15, v49, __na);
      *(v15 - 1) = a5[v54];
      v57 = v99;
      do
      {
        v58 = v49[v57];
        v59 = v56[v57];
        v23 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if ((v60 < 0) ^ v23 | (v60 == 0))
          v61 = 0;
        else
          v61 = 1;
        v62 = v61 | (v60 >> 31);
        v63 = v53[v57 + 1];
        v23 = __OFSUB__(v58, v63);
        v64 = v58 - v63;
        if ((v64 < 0) ^ v23 | (v64 == 0))
          v65 = 0;
        else
          v65 = 1;
        v66 = *(char *)(a3 + v62 + (v65 | (v64 >> 31)) + 2) + v58;
        if (v66 >= 255)
          v66 = 255;
        v49[v57++] = v66 & ~(v66 >> 31);
      }
      while (v52 != v57);
      ++v54;
      v49 += a2;
      v53 += a2;
    }
    while (v54 != v100);
  }
  if (v95 == 9)
  {
    v67 = *v49;
    v68 = *(v15 - 1);
    v23 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if ((v69 < 0) ^ v23 | (v69 == 0))
      v70 = 0;
    else
      v70 = 1;
    v71 = v70 | (v69 >> 31);
    v72 = v49[a2 + 1];
    v23 = __OFSUB__(v67, v72);
    v73 = v67 - v72;
    if ((v73 < 0) ^ v23 | (v73 == 0))
      v74 = 0;
    else
      v74 = 1;
    v75 = *(char *)(a3 + v71 + (v74 | (v73 >> 31)) + 2) + v67;
    if (v75 >= 255)
      v75 = 255;
    *v49 = v75 & ~(v75 >> 31);
  }
  if (v97 < 0)
  {
    v76 = v49[v96];
    v77 = v15[v9 - 2];
    v23 = __OFSUB__(v76, v77);
    v78 = v76 - v77;
    if ((v78 < 0) ^ v23 | (v78 == 0))
      v79 = 0;
    else
      v79 = 1;
    v80 = v79 | (v78 >> 31);
    v81 = v49[__na + a2];
    v23 = __OFSUB__(v76, v81);
    v82 = v76 - v81;
    if ((v82 < 0) ^ v23 | (v82 == 0))
      v83 = 0;
    else
      v83 = 1;
    v84 = *(char *)(a3 + v80 + (v83 | (v82 >> 31)) + 2) + v76;
    if (v84 >= 255)
      v84 = 255;
    v49[v96] = v84 & ~(v84 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    v85 = v96 - 1;
    v86 = v49 + 2;
    do
    {
      v87 = *(v86 - 1);
      v88 = *v15++;
      v89 = (v87 > v88) | ((v87 - v88) >> 31);
      v90 = v86[a2];
      v23 = __OFSUB__(v87, v90);
      v91 = v87 - v90;
      if ((v91 < 0) ^ v23 | (v91 == 0))
        v92 = 0;
      else
        v92 = 1;
      v93 = *(char *)(a3 + v89 + (v92 | (v91 >> 31)) + 2) + v87;
      if (v93 >= 255)
        v93 = 255;
      *(v86++ - 1) = v93 & ~(v93 >> 31);
      --v85;
    }
    while (v85);
  }
  if (v98 >= 1)
    return memcpy(a5, __srca, v94);
  return result;
}

uint64_t sub_1C97E64E0(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97ECFF8;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C97ECC00;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

uint64_t sub_1C97E6514(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97EC6EC;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C97EC2DC;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

uint64_t sub_1C97E6548(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97EB108;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C97EA950;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

uint64_t sub_1C97E657C(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97EA09C;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C97E9914;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

uint64_t sub_1C97E65B0(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97E8FE0;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C97E87E8;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

uint64_t sub_1C97E65E4(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97E7F24;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C97E7788;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

uint64_t sub_1C97E6618(uint64_t result, uint64_t a2)
{
  void *v2;

  v2 = sub_1C97E6E38;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 19) && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + 283))
    v2 = sub_1C97E664C;
  *(_QWORD *)(result + 448) = v2;
  *(_QWORD *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1C97E664C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,char a57)
{
  int8x16_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t result;
  unint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  _BOOL4 v88;
  _WORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  _BOOL4 v100;
  _BOOL4 v101;
  _DWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL4 v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  _WORD *v117;
  char *v118;
  uint64_t v119;
  char v120;
  char v121;
  char v122;
  int v123;
  void (**v124)(void);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned __int8 v131;
  int8x16_t *v132;
  uint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  unsigned __int8 v136;
  _DWORD *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  int8x16_t *v152;
  int8x16_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int8x16_t *v163;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v166;
  _BOOL4 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;

  v57 = (int8x16_t *)a1;
  STACK[0x578] = *MEMORY[0x1E0C80C00];
  vars0 = a2;
  v58 = *(_QWORD *)(a2 + 8);
  v59 = *(_DWORD *)(a1 + 16);
  v60 = *(_DWORD *)(a1 + 20);
  v61 = (unsigned __int8 *)(*(_QWORD *)(v58 + 1000) + 16 * v59 * a3);
  v62 = *(_QWORD *)(v58 + 416);
  v63 = *(_QWORD *)(v58 + 424);
  v64 = *(_DWORD *)(a1 + 8);
  v65 = *(int *)(a1 + 12);
  v66 = (int)v65 * (uint64_t)a3;
  v67 = *(_BYTE *)(v58 + 531);
  v68 = *(_QWORD *)(v58 + 400) + ((v62 * v66) << v67);
  v69 = *(_QWORD *)(v58 + 408) + ((v63 * v66) << v67);
  v169 = *(_QWORD *)(a1 + 48);
  v170 = *(_QWORD *)(a1 + 32);
  if (a3)
    v70 = 38;
  else
    v70 = 2;
  if (a3)
    v71 = 17;
  else
    v71 = 1;
  HIDWORD(vars8) = a3;
  v160 = v62;
  v161 = v63;
  v155 = v58;
  if (v60 - 1 <= a3)
  {
    v168 = *(_DWORD *)(v58 + 524) - v66;
  }
  else
  {
    v70 = v70 | 0x88;
    v71 |= 0x40u;
    v72 = v63;
    v73 = *(int *)(v58 + 520);
    v74 = v68;
    memcpy(*(void **)(a1 + 40), (const void *)(v68 + 2 * v62 * (v65 - 1)), 2 * v73);
    memcpy((void *)v57[3].i64[1], (const void *)(v69 + 2 * v72 * (v57->i32[3] - 1)), 4 * v73);
    v68 = v74;
    v168 = v57->i32[3];
    v59 = v57[1].i32[0];
  }
  v163 = v57;
  v156 = &v154;
  if (v59 < 2)
  {
    v107 = v68;
    v77 = 0;
    v106 = 0;
    v167 = 0;
  }
  else
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v157 = (uint64_t)&v57[9].i64[5 * v64 + 1];
    v158 = v168;
    v159 = (uint64_t)&v57[-3].i64[5 * v64];
    HIDWORD(v162) = v71 | v70;
    v78 = 2 * v160;
    v79 = 2 * v161;
    do
    {
      v166 = v68;
      v80 = sub_1C970EA84(vars0, v77, HIDWORD(vars8), v70);
      v82 = *v61;
      v83 = (v82 & 1) == 0;
      if ((v82 & 1) != 0)
      {
        v84 = (v82 >> 1) & 7;
        if (v84 > 4)
          return result;
        if ((_DWORD)v84 == 4)
        {
          v85 = 0;
          v86 = v61[13];
          a53 = 0u;
          a54 = 0u;
          v87 = v166;
          do
          {
            *((_BYTE *)&a53 + ((v86 + (_BYTE)v85) & 0x1F)) = v61[v85 + 1];
            ++v85;
          }
          while (v85 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 1);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
          BYTE2(a53) = 0;
          v87 = v166;
        }
        v88 = v83;
        if (v76 && v168 > 0)
        {
          v89 = (_WORD *)(v87 - 2);
          v90 = &a57;
          v91 = v158;
          do
          {
            *(_WORD *)v90 = *v89;
            v90 += 2;
            v89 = (_WORD *)((char *)v89 + v78);
            --v91;
          }
          while (v91);
        }
        v92 = v80;
        (*(void (**)(uint64_t, uint64_t, __int128 *))(v159 + 8 * v84))(v87, v160, &a53);
        v80 = v92;
        LODWORD(v82) = *v61;
        v83 = v88;
      }
      v93 = (v82 & 0x10) == 0;
      v94 = v69;
      if ((v82 & 0x10) != 0)
      {
        if (v82 > 0x9F)
          return result;
        v95 = v82 >> 5;
        if (v95 == 4)
        {
          v96 = 0;
          v97 = v61[14];
          a53 = 0u;
          a54 = 0u;
          do
          {
            *((_BYTE *)&a53 + ((v97 + (_BYTE)v96) & 0x1F)) = v61[v96 + 5];
            ++v96;
          }
          while (v96 != 4);
          v98 = 0;
          v99 = v61[15];
          a55 = 0u;
          a56 = 0u;
          do
          {
            *((_BYTE *)&a55 + ((v99 + (_BYTE)v98) & 0x1F)) = v61[v98 + 9];
            ++v98;
          }
          while (v98 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 5);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
          BYTE2(a53) = 0;
          LOWORD(a55) = *(_WORD *)(v61 + 9);
          *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
          BYTE2(a55) = 0;
        }
        v100 = v83;
        v101 = v93;
        if (v75 && v168 > 0)
        {
          v102 = (_DWORD *)(v94 - 4);
          v103 = &a13;
          v104 = v158;
          do
          {
            *(_DWORD *)v103 = *v102;
            v103 += 4;
            v102 = (_DWORD *)((char *)v102 + v79);
            --v104;
          }
          while (v104);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))(v157 + 8 * v95))(v94, v161, &a53, v80, &a13, v169, v168);
        v93 = v101;
        v83 = v100;
      }
      v105 = v163->i32[3];
      v68 = v166 + 2 * v105;
      v69 = v94 + 4 * v105;
      v169 += 4 * v105;
      v170 += 2 * v105;
      v61 += 16;
      v77 = (v77 + 1);
      v70 = HIDWORD(v162);
      v75 = v93;
      v76 = v83;
    }
    while ((int)v77 < v163[1].i32[0] - 1);
    v106 = v83;
    v167 = v93;
    v107 = v68;
    LOBYTE(v70) = BYTE4(v162);
    v57 = v163;
  }
  v108 = sub_1C970EA84(vars0, v77, HIDWORD(vars8), v70 & 0x5D);
  v109 = *(_DWORD *)(v155 + 520) - (v57[1].i32[0] - 1) * v57->i32[3];
  v110 = *v61;
  if ((v110 & 1) != 0)
  {
    v111 = (v110 >> 1) & 7;
    if (v111 > 4)
      return result;
    HIDWORD(vars8) = v108;
    if ((_DWORD)v111 == 4)
    {
      v112 = 0;
      v113 = v61[13];
      result = 0uLL;
      a53 = 0u;
      a54 = 0u;
      v114 = v107;
      v115 = v160;
      do
      {
        *((_BYTE *)&a53 + ((v113 + (_BYTE)v112) & 0x1F)) = v61[v112 + 1];
        ++v112;
      }
      while (v112 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 1);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
      BYTE2(a53) = 0;
      v114 = v107;
      v115 = v160;
    }
    vars0 = v69;
    if (v168 > 0 && v106)
    {
      v117 = (_WORD *)(v114 - 2);
      v118 = &a57;
      v119 = v168;
      do
      {
        *(_WORD *)v118 = *v117;
        v118 += 2;
        v117 += v115;
        --v119;
      }
      while (v119);
    }
    v120 = BYTE4(vars8);
    if ((vars8 & 0x400000000) != 0)
      v121 = 17;
    else
      v121 = 1;
    v122 = v121 & 0xBF | (((vars8 & 0x800000000) != 0) << 6);
    HIDWORD(v162) = v109;
    v123 = v109 >> 3;
    v124 = (void (**)(void))&v57[12] + v111;
    v125 = 4;
    do
    {
      if ((v123 & (1 << --v125)) != 0)
      {
        v123 -= 1 << v125;
        v120 = v120 & 0xC | v122;
        v126 = v114;
        (*v124)();
        v114 = v126 + 2 * (8 << v125);
        v170 += 2 * (8 << v125);
      }
      v124 -= 5;
    }
    while (v125);
    LODWORD(v110) = *v61;
    v69 = vars0;
    v108 = HIDWORD(vars8);
    v109 = HIDWORD(v162);
  }
  if ((v110 & 0x10) == 0)
  {
LABEL_89:
    v152 = v163;
    result = vextq_s8(v163[2], v163[2], 8uLL);
    v153 = vextq_s8(v163[3], v163[3], 8uLL);
    v163[2] = result;
    v152[3] = v153;
    return result;
  }
  if (v110 <= 0x9F)
  {
    v127 = v69;
    v128 = v108;
    v129 = v110 >> 5;
    if (v129 == 4)
    {
      v130 = 0;
      v131 = v61[14];
      a53 = 0u;
      a54 = 0u;
      v132 = v163;
      v133 = v69;
      v134 = v167;
      do
      {
        *((_BYTE *)&a53 + ((v131 + (_BYTE)v130) & 0x1F)) = v61[v130 + 5];
        ++v130;
      }
      while (v130 != 4);
      v135 = 0;
      v136 = v61[15];
      a55 = 0u;
      a56 = 0u;
      do
      {
        *((_BYTE *)&a55 + ((v136 + (_BYTE)v135) & 0x1F)) = v61[v135 + 9];
        ++v135;
      }
      while (v135 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 5);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
      BYTE2(a53) = 0;
      LOWORD(a55) = *(_WORD *)(v61 + 9);
      *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
      BYTE2(a55) = 0;
      v132 = v163;
      v133 = v69;
      v134 = v167;
    }
    if (v168 > 0 && v134)
    {
      v138 = (_DWORD *)(v133 - 4);
      v139 = 2 * v161;
      v140 = &a13;
      v141 = v168;
      do
      {
        *(_DWORD *)v140 = *v138;
        v140 += 4;
        v138 = (_DWORD *)((char *)v138 + v139);
        --v141;
      }
      while (v141);
    }
    if ((v128 & 4) != 0)
      v142 = 34;
    else
      v142 = 2;
    if ((v128 & 4) != 0)
      v143 = 17;
    else
      v143 = 1;
    v144 = v142 & 0xFFFFFF7F | (((v128 & 8) != 0) << 7);
    v145 = v143 & 0xFFFFFFBF | (((v128 & 8) != 0) << 6);
    v146 = v109 >> 2;
    v147 = &v132[24].i64[v129 + 1];
    v148 = 5;
    do
    {
      if ((v146 & (1 << --v148)) != 0)
      {
        v146 -= 1 << v148;
        if (v146)
          v149 = v144;
        else
          v149 = 0;
        v150 = v149 | v128;
        v128 = v128 & 0xC | v145;
        v151 = v127;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))*v147)(v127, v161, &a53, v150, &a13, v169, v168);
        v127 = v151 + 2 * (8 << v148);
        v169 += 2 * (8 << v148);
      }
      v147 -= 5;
    }
    while (v148);
    goto LABEL_89;
  }
  return result;
}

int8x16_t sub_1C97E6E38(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t __dst)
{
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  size_t v38;
  int8x16_t *v39;
  uint64_t v40;
  int8x16_t *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t result;
  int v47;
  unint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  _WORD *v53;
  unint64_t *v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD);
  _BOOL4 v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  _BOOL4 v62;
  _DWORD *v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  int v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  _WORD *v75;
  unint64_t *v76;
  uint64_t v77;
  int8x16_t *v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  void (**v84)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD);
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned __int8 v95;
  unsigned int v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  int8x16_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t vars0;
  unsigned int vars8;
  unsigned int vars8_4;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;

  v19 = MEMORY[0x1E0C80A78](a1);
  v22 = &v112;
  STACK[0x242F8] = *MEMORY[0x1E0C80C00];
  v126 = v20;
  v23 = *(_QWORD *)(v20 + 8);
  v24 = *(_DWORD *)(v19 + 16);
  v25 = *(_DWORD *)(v19 + 20);
  v26 = (unsigned __int8 *)(*(_QWORD *)(v23 + 1000) + 16 * v24 * v21);
  v28 = *(_QWORD *)(v23 + 416);
  v27 = *(_QWORD *)(v23 + 424);
  v29 = *(_DWORD *)(v19 + 8);
  v30 = *(int *)(v19 + 12);
  v31 = (int)v30 * (uint64_t)v21;
  v32 = *(_BYTE *)(v23 + 531);
  v33 = *(_QWORD *)(v23 + 400) + ((v28 * v31) << v32);
  v34 = *(_QWORD *)(v23 + 408) + ((v27 * v31) << v32);
  v129 = *(_QWORD *)(v19 + 48);
  v130 = *(_QWORD *)(v19 + 32);
  if (v21)
    v35 = 38;
  else
    v35 = 2;
  if (v21)
    v36 = 17;
  else
    v36 = 1;
  v125 = v21;
  v123 = v19;
  v127 = *(_QWORD *)(v23 + 408) + ((v27 * v31) << v32);
  v114 = *(_QWORD *)(v20 + 8);
  if (v25 - 1 <= v21)
  {
    v39 = (int8x16_t *)v19;
    v128 = *(_DWORD *)(v23 + 524) - v31;
  }
  else
  {
    v35 = v35 | 0x88;
    v36 |= 0x40u;
    v37 = *(int *)(v23 + 520);
    memcpy(*(void **)(v19 + 40), (const void *)(v33 + 2 * v28 * (v30 - 1)), 2 * v37);
    v38 = 4 * v37;
    v39 = (int8x16_t *)v123;
    memcpy(*(void **)(v123 + 56), (const void *)(v34 + 2 * v27 * (*(int *)(v123 + 12) - 1)), v38);
    v128 = *(_DWORD *)(v123 + 12);
    v24 = *(_DWORD *)(v123 + 16);
  }
  v122 = v28;
  v118 = v27;
  if (v24 < 2)
  {
    v43 = 0;
    v67 = 0;
    vars8 = 0;
  }
  else
  {
    v113 = &v112;
    LODWORD(v40) = 0;
    v41 = v39;
    v42 = 0;
    v43 = 0;
    v41 = (int8x16_t *)((char *)v41 + 72);
    v115 = (uint64_t)&v41[5].i64[5 * v29];
    v116 = v128;
    v117 = (uint64_t *)&v41[-7] + 5 * v29 - 1;
    vars8_4 = v36 | v35;
    v44 = 2 * v118;
    do
    {
      v45 = sub_1C970EA84(v126, v43, v125, v35);
      v47 = v45;
      v48 = *v26;
      v49 = (v48 & 1) == 0;
      v124 = v49;
      if ((v48 & 1) != 0)
      {
        vars8 = v40;
        v40 = v45;
        v50 = (v48 >> 1) & 7;
        if (v50 > 4)
          return result;
        if ((_DWORD)v50 == 4)
        {
          v51 = 0;
          v52 = v26[13];
          *(_OWORD *)&STACK[0x24200] = 0u;
          *(_OWORD *)&STACK[0x24210] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x24200] + ((v52 + (_BYTE)v51) & 0x1F)) = v26[v51 + 1];
            ++v51;
          }
          while (v51 != 4);
        }
        else
        {
          LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 1);
          LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 3);
          LOBYTE(STACK[0x24202]) = 0;
        }
        if (v42 && (int)v128 > 0)
        {
          v53 = (_WORD *)(v33 - 2);
          v54 = &STACK[0x24240];
          v55 = v116;
          do
          {
            *(_WORD *)v54 = *v53;
            v54 = (unint64_t *)((char *)v54 + 2);
            v53 += v122;
            --v55;
          }
          while (v55);
        }
        sub_1C9784F24(&__dst, v126, (_DWORD)v43 << *(_DWORD *)(v123 + 8), v125 << *(_DWORD *)(v123 + 8), *(_DWORD *)(v123 + 12), v128, 0);
        v56 = (void (*)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))v117[v50];
        v47 = v40;
        v56(v33, v122, &STACK[0x24200], v40, &STACK[0x24240], v130, v128);
        sub_1C9784FD4(&__dst);
        LODWORD(v48) = *v26;
        v49 = v124;
        LOBYTE(v40) = vars8;
      }
      v57 = (v48 & 0x10) == 0;
      if ((v48 & 0x10) != 0)
      {
        if (v48 > 0x9F)
          return result;
        HIDWORD(vars0) = v47;
        vars8 = v48 >> 5;
        if (v48 >> 5 == 4)
        {
          v58 = 0;
          v59 = v26[14];
          *(_OWORD *)&STACK[0x24200] = 0u;
          *(_OWORD *)&STACK[0x24210] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x24200] + ((v59 + (_BYTE)v58) & 0x1F)) = v26[v58 + 5];
            ++v58;
          }
          while (v58 != 4);
          v60 = 0;
          v61 = v26[15];
          *(_OWORD *)&STACK[0x24220] = 0u;
          *(_OWORD *)&STACK[0x24230] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x24220] + ((v61 + (_BYTE)v60) & 0x1F)) = v26[v60 + 9];
            ++v60;
          }
          while (v60 != 4);
        }
        else
        {
          LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 5);
          LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 7);
          LOBYTE(STACK[0x24202]) = 0;
          LOWORD(STACK[0x24220]) = *(_WORD *)(v26 + 9);
          LOWORD(STACK[0x24223]) = *(_WORD *)(v26 + 11);
          LOBYTE(STACK[0x24222]) = 0;
        }
        v62 = v57;
        if ((v40 & ((int)v128 > 0)) == 1)
        {
          v63 = (_DWORD *)(v127 - 4);
          v64 = &STACK[0x240C0];
          v65 = v116;
          do
          {
            *(_DWORD *)v64 = *v63;
            v64 = (unint64_t *)((char *)v64 + 4);
            v63 = (_DWORD *)((char *)v63 + v44);
            --v65;
          }
          while (v65);
        }
        sub_1C9784F24(&__dst, v126, (_DWORD)v43 << *(_DWORD *)(v123 + 8), v125 << *(_DWORD *)(v123 + 8), *(_DWORD *)(v123 + 12), v128, 1u);
        (*(void (**)(uint64_t, uint64_t, unint64_t *, _QWORD, unint64_t *, uint64_t, _QWORD))(v115 + 8 * vars8))(v127, v118, &STACK[0x24200], HIDWORD(vars0), &STACK[0x240C0], v129, v128);
        sub_1C9784FD4(&__dst);
        v57 = v62;
        v49 = v124;
      }
      v66 = *(int *)(v123 + 12);
      v33 += 2 * v66;
      v127 += 4 * v66;
      v129 += 4 * v66;
      v130 += 2 * v66;
      v26 += 16;
      v43 = (v43 + 1);
      v35 = vars8_4;
      LODWORD(v40) = v57;
      v42 = v49;
    }
    while ((int)v43 < *(_DWORD *)(v123 + 16) - 1);
    v67 = v49;
    vars8 = v57;
    LOBYTE(v35) = vars8_4;
    v22 = v113;
    v39 = (int8x16_t *)v123;
  }
  v68 = sub_1C970EA84(v126, v43, v125, v35 & 0x5D);
  v69 = *(_DWORD *)(v114 + 520) - (v39[1].i32[0] - 1) * v39->i32[3];
  v70 = *v26;
  if ((v70 & 1) != 0)
  {
    v71 = (v70 >> 1) & 7;
    if (v71 > 4)
      return result;
    if ((_DWORD)v71 == 4)
    {
      v72 = 0;
      v73 = v26[13];
      *(_OWORD *)&STACK[0x24200] = 0u;
      *(_OWORD *)&STACK[0x24210] = 0u;
      do
      {
        *((_BYTE *)&STACK[0x24200] + ((v73 + (_BYTE)v72) & 0x1F)) = v26[v72 + 1];
        ++v72;
      }
      while (v72 != 4);
    }
    else
    {
      LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 1);
      LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 3);
      LOBYTE(STACK[0x24202]) = 0;
    }
    v113 = v22;
    if ((int)v128 > 0 && v67)
    {
      v75 = (_WORD *)(v33 - 2);
      v76 = &STACK[0x24240];
      v77 = v128;
      do
      {
        *(_WORD *)v76 = *v75;
        v76 = (unint64_t *)((char *)v76 + 2);
        v75 += v122;
        --v77;
      }
      while (v77);
    }
    sub_1C9784F24(&__dst, v126, (_DWORD)v43 << v39->i32[2], v125 << v39->i32[2], v69, v128, 0);
    v78 = v39;
    if ((v68 & 4) != 0)
      v79 = 34;
    else
      v79 = 2;
    if ((v68 & 4) != 0)
      v80 = 17;
    else
      v80 = 1;
    v81 = v79 & 0xFFFFFF7F | (((v68 & 8) != 0) << 7);
    v82 = v80 & 0xFFFFFFBF | (((v68 & 8) != 0) << 6);
    vars8_4 = v69;
    v83 = v69 >> 3;
    v84 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))&v78[12]
        + v71;
    v85 = 4;
    v86 = v68;
    do
    {
      if ((v83 & (1 << --v85)) != 0)
      {
        v83 -= 1 << v85;
        if (v83)
          v87 = v81;
        else
          v87 = 0;
        v88 = v87 | v86;
        v86 = v86 & 0xC | v82;
        (*v84)(v33, v122, &STACK[0x24200], v88, &STACK[0x24240], v130, v128);
        v33 += 2 * (8 << v85);
        v130 += 2 * (8 << v85);
      }
      v84 -= 5;
    }
    while (v85);
    sub_1C9784FD4(&__dst);
    LODWORD(v70) = *v26;
    v22 = v113;
    v39 = (int8x16_t *)v123;
    v69 = vars8_4;
  }
  if ((v70 & 0x10) == 0)
  {
LABEL_96:
    result = vextq_s8(v39[2], v39[2], 8uLL);
    v111 = vextq_s8(v39[3], v39[3], 8uLL);
    v39[2] = result;
    v39[3] = v111;
    return result;
  }
  if (v70 <= 0x9F)
  {
    v89 = v70 >> 5;
    if (v70 >> 5 == 4)
    {
      v90 = 0;
      v91 = v26[14];
      *(_OWORD *)&STACK[0x24200] = 0u;
      *(_OWORD *)&STACK[0x24210] = 0u;
      v92 = v127;
      v93 = vars8;
      do
      {
        *((_BYTE *)&STACK[0x24200] + ((v91 + (_BYTE)v90) & 0x1F)) = v26[v90 + 5];
        ++v90;
      }
      while (v90 != 4);
      v94 = 0;
      v95 = v26[15];
      *(_OWORD *)&STACK[0x24220] = 0u;
      *(_OWORD *)&STACK[0x24230] = 0u;
      do
      {
        *((_BYTE *)&STACK[0x24220] + ((v95 + (_BYTE)v94) & 0x1F)) = v26[v94 + 9];
        ++v94;
      }
      while (v94 != 4);
    }
    else
    {
      LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 5);
      LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 7);
      LOBYTE(STACK[0x24202]) = 0;
      LOWORD(STACK[0x24220]) = *(_WORD *)(v26 + 9);
      LOWORD(STACK[0x24223]) = *(_WORD *)(v26 + 11);
      LOBYTE(STACK[0x24222]) = 0;
      v92 = v127;
      v93 = vars8;
    }
    v113 = v22;
    if ((int)v128 > 0)
      v96 = v93;
    else
      v96 = 0;
    if (v96 == 1)
    {
      v97 = (_DWORD *)(v92 - 4);
      v98 = 2 * v118;
      v99 = &STACK[0x240C0];
      v100 = v128;
      do
      {
        *(_DWORD *)v99 = *v97;
        v99 = (unint64_t *)((char *)v99 + 4);
        v97 = (_DWORD *)((char *)v97 + v98);
        --v100;
      }
      while (v100);
    }
    sub_1C9784F24(&__dst, v126, (_DWORD)v43 << v39->i32[2], v125 << v39->i32[2], v69, v128, 1u);
    if ((v68 & 4) != 0)
      v101 = 34;
    else
      v101 = 2;
    if ((v68 & 4) != 0)
      v102 = 17;
    else
      v102 = 1;
    v103 = v101 & 0xFFFFFF7F | (((v68 & 8) != 0) << 7);
    v104 = v102 & 0xFFFFFFBF | (((v68 & 8) != 0) << 6);
    v105 = v69 >> 2;
    v106 = &v39[24].i64[v89 + 1];
    v107 = 5;
    v108 = v118;
    do
    {
      if ((v105 & (1 << --v107)) != 0)
      {
        v105 -= 1 << v107;
        if (v105)
          v109 = v103;
        else
          v109 = 0;
        v110 = v109 | v68;
        v68 = v68 & 0xC | v104;
        ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))*v106)(v92, v108, &STACK[0x24200], v110, &STACK[0x240C0], v129, v128);
        v92 += 2 * (8 << v107);
        v129 += 2 * (8 << v107);
      }
      v106 -= 5;
    }
    while (v107);
    sub_1C9784FD4(&__dst);
    v39 = (int8x16_t *)v123;
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1C97E7788(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  size_t v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t result;
  unint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  _BOOL4 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  _BOOL4 v95;
  _BOOL4 v96;
  _WORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL4 v101;
  int8x16_t *v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  char *v109;
  uint64_t v110;
  char *v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  void (**v117)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unsigned __int8 v130;
  int v131;
  _WORD *v132;
  uint64_t v133;
  char *v134;
  int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  int8x16_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t vars0;
  uint64_t vars8;
  int v156;
  int8x16_t *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;

  a56 = *MEMORY[0x1E0C80C00];
  vars0 = a2;
  v57 = *(_QWORD *)(a2 + 8);
  v58 = *(_DWORD *)(a1 + 16);
  v59 = *(_DWORD *)(a1 + 20);
  v60 = (unsigned __int8 *)(*(_QWORD *)(v57 + 1000) + 16 * v58 * a3);
  v61 = *(_QWORD *)(v57 + 416);
  v62 = *(_QWORD *)(v57 + 424);
  v63 = *(_DWORD *)(a1 + 8);
  v64 = *(int *)(a1 + 12);
  v65 = (int)v64 * (uint64_t)a3;
  v66 = *(_BYTE *)(v57 + 531);
  v67 = *(_QWORD *)(v57 + 400) + ((v61 * v65) << v66);
  v68 = *(_QWORD *)(v57 + 408) + ((v62 * v65) << v66);
  v69 = *(_QWORD *)(a1 + 32);
  v158 = *(_QWORD *)(a1 + 48);
  v159 = v68;
  if (a3)
    v70 = 38;
  else
    v70 = 2;
  if (a3)
    v71 = 17;
  else
    v71 = 1;
  HIDWORD(vars8) = a3;
  v152 = v62;
  v146 = v57;
  if (v59 - 1 <= a3)
  {
    HIDWORD(v153) = v71;
    v160 = *(_DWORD *)(v57 + 524) - v65;
  }
  else
  {
    v70 = v70 | 0x88;
    HIDWORD(v153) = v71 | 0x40;
    v72 = *(int *)(v57 + 520);
    v156 = v63;
    memcpy(*(void **)(a1 + 40), (const void *)(v67 + v61 * (v64 - 1)), v72);
    memcpy(*(void **)(a1 + 56), (const void *)(v68 + v62 * (*(int *)(a1 + 12) - 1)), 2 * v72);
    v63 = v156;
    v160 = *(_DWORD *)(a1 + 12);
    v58 = *(_DWORD *)(a1 + 16);
  }
  v157 = (int8x16_t *)a1;
  v147 = &v145;
  if (v58 < 2)
  {
    v75 = 0;
    v101 = 0;
    LODWORD(v151) = 0;
  }
  else
  {
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v148 = (uint64_t)&v157[9].i64[5 * v63 + 1];
    v149 = v160;
    v150 = (uint64_t)&v157[-3].i64[5 * v63];
    HIDWORD(v153) |= v70;
    do
    {
      v76 = sub_1C970EA84(vars0, v75, HIDWORD(vars8), v70);
      v78 = *v60;
      v79 = (v78 & 1) == 0;
      if ((v78 & 1) != 0)
      {
        v80 = (v78 >> 1) & 7;
        if (v80 > 4)
          return result;
        if ((_DWORD)v80 == 4)
        {
          v81 = 0;
          v82 = v60[13];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((_BYTE *)&a37 + ((v82 + (_BYTE)v81) & 0x1F)) = v60[v81 + 1];
            ++v81;
          }
          while (v81 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 1);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
          BYTE2(a37) = 0;
        }
        v83 = v79;
        if (v74 && v160 > 0)
        {
          v84 = (char *)(v67 - 1);
          v85 = &a41;
          v86 = v149;
          do
          {
            *v85++ = *v84;
            v84 += v61;
            --v86;
          }
          while (v86);
        }
        v87 = v76;
        (*(void (**)(uint64_t, uint64_t, __int128 *))(v150 + 8 * v80))(v67, v61, &a37);
        v76 = v87;
        LODWORD(v78) = *v60;
        v79 = v83;
      }
      v88 = (v78 & 0x10) == 0;
      if ((v78 & 0x10) != 0)
      {
        if (v78 > 0x9F)
          return result;
        v89 = v78 >> 5;
        v151 = v69;
        if (v89 == 4)
        {
          v90 = 0;
          v91 = v60[14];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((_BYTE *)&a37 + ((v91 + (_BYTE)v90) & 0x1F)) = v60[v90 + 5];
            ++v90;
          }
          while (v90 != 4);
          v92 = 0;
          v93 = v60[15];
          a39 = 0u;
          a40 = 0u;
          v94 = v152;
          do
          {
            *((_BYTE *)&a39 + ((v93 + (_BYTE)v92) & 0x1F)) = v60[v92 + 9];
            ++v92;
          }
          while (v92 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 5);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
          BYTE2(a37) = 0;
          LOWORD(a39) = *(_WORD *)(v60 + 9);
          *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
          BYTE2(a39) = 0;
          v94 = v152;
        }
        v95 = v79;
        v96 = v88;
        if (v73 && v160 > 0)
        {
          v97 = (_WORD *)(v159 - 2);
          v98 = &a13;
          v99 = v149;
          do
          {
            *(_WORD *)v98 = *v97;
            v98 += 2;
            v97 = (_WORD *)((char *)v97 + v94);
            --v99;
          }
          while (v99);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))(v148 + 8 * v89))(v159, v94, &a37, v76, &a13, v158, v160);
        v88 = v96;
        v79 = v95;
        v69 = v151;
      }
      v100 = v157->i32[3];
      v67 += v100;
      v69 += v100;
      v158 += 2 * v100;
      v159 += 2 * v100;
      v60 += 16;
      v75 = (v75 + 1);
      v70 = HIDWORD(v153);
      v73 = v88;
      v74 = v79;
    }
    while ((int)v75 < v157[1].i32[0] - 1);
    v101 = v79;
    LODWORD(v151) = v88;
    LOBYTE(v70) = BYTE4(v153);
  }
  HIDWORD(vars8) = sub_1C970EA84(vars0, v75, HIDWORD(vars8), v70 & 0x5D);
  v102 = v157;
  v103 = *(_DWORD *)(v146 + 520) - (v157[1].i32[0] - 1) * v157->i32[3];
  v104 = *v60;
  if ((v104 & 1) != 0)
  {
    v105 = (v104 >> 1) & 7;
    if (v105 > 4)
      return result;
    if ((_DWORD)v105 == 4)
    {
      v106 = 0;
      v107 = v60[13];
      result = 0uLL;
      a37 = 0u;
      a38 = 0u;
      do
      {
        *((_BYTE *)&a37 + ((v107 + (_BYTE)v106) & 0x1F)) = v60[v106 + 1];
        ++v106;
      }
      while (v106 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 1);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
      BYTE2(a37) = 0;
    }
    if (v160 > 0 && v101)
    {
      v109 = (char *)(v67 - 1);
      v110 = v160;
      v111 = &a41;
      do
      {
        *v111++ = *v109;
        v109 += v61;
        --v110;
      }
      while (v110);
    }
    if ((vars8 & 0x400000000) != 0)
      v112 = 34;
    else
      v112 = 2;
    if ((vars8 & 0x400000000) != 0)
      v113 = 17;
    else
      v113 = 1;
    v114 = v112 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    v115 = v113 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    LODWORD(vars0) = v103;
    v116 = v103 >> 3;
    v117 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v157[12] + v105;
    v118 = 4;
    v119 = HIDWORD(vars8);
    do
    {
      if ((v116 & (1 << --v118)) != 0)
      {
        v116 -= 1 << v118;
        if (v116)
          v120 = v114;
        else
          v120 = 0;
        v121 = v120 | v119;
        v119 = v119 & 0xC | v115;
        (*v117)(v67, v61, &a37, v121, &a41, v69, v160);
        v67 += 8 << v118;
        v69 += 8 << v118;
      }
      v117 -= 5;
    }
    while (v118);
    LODWORD(v104) = *v60;
    v102 = v157;
    v103 = vars0;
  }
  v122 = v158;
  if ((v104 & 0x10) == 0)
  {
LABEL_93:
    result = vextq_s8(v102[2], v102[2], 8uLL);
    v144 = vextq_s8(v102[3], v102[3], 8uLL);
    v102[2] = result;
    v102[3] = v144;
    return result;
  }
  if (v104 <= 0x9F)
  {
    v123 = v104 >> 5;
    if (v123 == 4)
    {
      v124 = 0;
      v125 = v60[14];
      a37 = 0u;
      a38 = 0u;
      v126 = v152;
      v127 = v159;
      v128 = v151;
      do
      {
        *((_BYTE *)&a37 + ((v125 + (_BYTE)v124) & 0x1F)) = v60[v124 + 5];
        ++v124;
      }
      while (v124 != 4);
      v129 = 0;
      v130 = v60[15];
      a39 = 0u;
      a40 = 0u;
      do
      {
        *((_BYTE *)&a39 + ((v130 + (_BYTE)v129) & 0x1F)) = v60[v129 + 9];
        ++v129;
      }
      while (v129 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 5);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
      BYTE2(a37) = 0;
      LOWORD(a39) = *(_WORD *)(v60 + 9);
      *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
      BYTE2(a39) = 0;
      v126 = v152;
      v127 = v159;
      v128 = v151;
    }
    if (v160 > 0)
      v131 = v128;
    else
      v131 = 0;
    if (v131 == 1)
    {
      v132 = (_WORD *)(v127 - 2);
      v133 = v160;
      v134 = &a13;
      do
      {
        *(_WORD *)v134 = *v132;
        v134 += 2;
        v132 = (_WORD *)((char *)v132 + v126);
        --v133;
      }
      while (v133);
    }
    if ((vars8 & 0x400000000) != 0)
      v135 = 34;
    else
      v135 = 2;
    if ((vars8 & 0x400000000) != 0)
      v136 = 17;
    else
      v136 = 1;
    v137 = v135 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    v138 = v136 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    v139 = v103 >> 2;
    v140 = &v102[24].i64[v123 + 1];
    v141 = 5;
    do
    {
      if ((v139 & (1 << --v141)) != 0)
      {
        v139 -= 1 << v141;
        if (v139)
          v142 = v137;
        else
          v142 = 0;
        v143 = v142 | HIDWORD(vars8);
        HIDWORD(vars8) = BYTE4(vars8) & 0xC | v138;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))*v140)(v159, v152, &a37, v143, &a13, v122, v160);
        v159 += 8 << v141;
        v122 += 8 << v141;
      }
      v140 -= 5;
    }
    while (v141);
    goto LABEL_93;
  }
  return result;
}

int8x16_t sub_1C97E7F24(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t __dst)
{
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  size_t v77;
  _BOOL8 v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int8x16_t result;
  int v83;
  unint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, __int128 *, uint64_t, char *, _BOOL8, _QWORD);
  uint64_t v95;
  _BOOL4 v96;
  int8x16_t *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  unsigned __int8 v102;
  int v103;
  uint64_t v104;
  _WORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL4 v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  char *v120;
  uint64_t v121;
  char *v122;
  int8x16_t *v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  void (**v129)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  int v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  _BOOL4 v138;
  uint64_t v139;
  unsigned __int8 v140;
  _WORD *v142;
  uint64_t v143;
  char *v144;
  int8x16_t *v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  int8x16_t *v157;
  int8x16_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  _BOOL4 v168;
  uint64_t v169;
  int8x16_t *vars0;
  int vars8;
  unsigned int vars8_4;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;

  v56 = MEMORY[0x1E0C80A78](a1);
  v58 = &v159;
  STACK[0x12218] = *MEMORY[0x1E0C80C00];
  v173 = v59;
  v60 = *(_QWORD *)(v59 + 8);
  v61 = *(_DWORD *)(v56 + 16);
  v62 = *(_DWORD *)(v56 + 20);
  v63 = (unsigned __int8 *)(*(_QWORD *)(v60 + 1000) + 16 * v61 * v57);
  v64 = *(_QWORD *)(v60 + 416);
  v65 = *(_QWORD *)(v60 + 424);
  v66 = *(_DWORD *)(v56 + 8);
  v67 = *(int *)(v56 + 12);
  v68 = (int)v67 * (uint64_t)v57;
  v69 = *(_BYTE *)(v60 + 531);
  v70 = *(_QWORD *)(v60 + 400) + ((v64 * v68) << v69);
  v71 = *(_QWORD *)(v60 + 408) + ((v65 * v68) << v69);
  v72 = *(_QWORD *)(v56 + 32);
  v73 = *(_QWORD *)(v56 + 48);
  if (v57)
    v74 = 38;
  else
    v74 = 2;
  if (v57)
    v75 = 17;
  else
    v75 = 1;
  vars8_4 = v57;
  v169 = v64;
  vars0 = (int8x16_t *)v56;
  v166 = v65;
  v174 = v73;
  v175 = v71;
  v161 = v60;
  if (v62 - 1 <= v57)
  {
    vars8 = v75;
    v176 = *(_DWORD *)(v60 + 524) - v68;
  }
  else
  {
    v76 = v56;
    v74 = v74 | 0x88;
    vars8 = v75 | 0x40;
    v77 = *(int *)(v60 + 520);
    memcpy(*(void **)(v56 + 40), (const void *)(v70 + v64 * (v67 - 1)), v77);
    memcpy(*(void **)(v76 + 56), (const void *)(v71 + v65 * (*(int *)(v76 + 12) - 1)), 2 * v77);
    v176 = *(_DWORD *)(v76 + 12);
    v61 = *(_DWORD *)(v76 + 16);
  }
  if (v61 < 2)
  {
    v80 = 0;
    v109 = 0;
    v168 = 0;
  }
  else
  {
    v160 = &v159;
    LODWORD(v78) = 0;
    v79 = 0;
    v80 = 0;
    v162 = (uint64_t)&vars0[9].i64[5 * v66 + 1];
    v163 = v176;
    v164 = (uint64_t)&vars0[-3].i64[5 * v66];
    v167 = vars8 | v74;
    do
    {
      v81 = sub_1C970EA84(v173, v80, vars8_4, v74);
      v83 = v81;
      v84 = *v63;
      v85 = (v84 & 1) == 0;
      vars8 = v85;
      if ((v84 & 1) != 0)
      {
        v168 = v78;
        v78 = v72;
        v86 = v81;
        v87 = (v84 >> 1) & 7;
        if (v87 > 4)
          return result;
        if ((_DWORD)v87 == 4)
        {
          v88 = 0;
          v89 = v63[13];
          a38 = 0u;
          a39 = 0u;
          v90 = v169;
          do
          {
            *((_BYTE *)&a38 + ((v89 + (_BYTE)v88) & 0x1F)) = v63[v88 + 1];
            ++v88;
          }
          while (v88 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 1);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
          BYTE2(a38) = 0;
          v90 = v169;
        }
        if (v79 && (int)v176 > 0)
        {
          v91 = (char *)(v70 - 1);
          v92 = &a42;
          v93 = v163;
          do
          {
            *v92++ = *v91;
            v91 += v90;
            --v93;
          }
          while (v93);
        }
        sub_1C9786744(&__dst, v173, (_DWORD)v80 << vars0->i32[2], vars8_4 << vars0->i32[2], vars0->i32[3], v176, 0);
        v94 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, _BOOL8, _QWORD))(v164 + 8 * v87);
        v83 = v86;
        v95 = v86;
        v72 = v78;
        v94(v70, v90, &a38, v95, &a42, v78, v176);
        sub_1C97867EC(&__dst);
        LODWORD(v84) = *v63;
        v85 = vars8;
        LOBYTE(v78) = v168;
      }
      v96 = (v84 & 0x10) == 0;
      v97 = vars0;
      if ((v84 & 0x10) != 0)
      {
        if (v84 > 0x9F)
          return result;
        v98 = v84 >> 5;
        if (v84 >> 5 == 4)
        {
          v99 = 0;
          v100 = v63[14];
          a38 = 0u;
          a39 = 0u;
          do
          {
            *((_BYTE *)&a38 + ((v100 + (_BYTE)v99) & 0x1F)) = v63[v99 + 5];
            ++v99;
          }
          while (v99 != 4);
          v101 = 0;
          v102 = v63[15];
          a40 = 0u;
          a41 = 0u;
          do
          {
            *((_BYTE *)&a40 + ((v102 + (_BYTE)v101) & 0x1F)) = v63[v101 + 9];
            ++v101;
          }
          while (v101 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 5);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
          BYTE2(a38) = 0;
          LOWORD(a40) = *(_WORD *)(v63 + 9);
          *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
          BYTE2(a40) = 0;
        }
        HIDWORD(v165) = v83;
        v168 = v96;
        v103 = v78 && (int)v176 > 0;
        v104 = v166;
        if (v103 == 1)
        {
          v105 = (_WORD *)(v175 - 2);
          v106 = &a14;
          v107 = v163;
          do
          {
            *(_WORD *)v106 = *v105;
            v106 += 2;
            v105 = (_WORD *)((char *)v105 + v104);
            --v107;
          }
          while (v107);
        }
        sub_1C9786744(&__dst, v173, (_DWORD)v80 << v97->i32[2], vars8_4 << v97->i32[2], v97->i32[3], v176, 1u);
        (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, _QWORD))(v162 + 8 * v98))(v175, v104, &a38, HIDWORD(v165), &a14, v174, v176);
        sub_1C97867EC(&__dst);
        v96 = v168;
        v85 = vars8;
      }
      v108 = v97->i32[3];
      v70 += v108;
      v72 += v108;
      v174 += 2 * v108;
      v175 += 2 * v108;
      v63 += 16;
      v80 = (v80 + 1);
      LODWORD(v108) = v97[1].i32[0] - 1;
      v74 = v167;
      LODWORD(v78) = v96;
      v79 = v85;
    }
    while ((int)v80 < (int)v108);
    v109 = v85;
    v168 = v96;
    LOBYTE(v74) = v167;
    v58 = v160;
  }
  v110 = v166;
  v111 = sub_1C970EA84(v173, v80, vars8_4, v74 & 0x5D);
  v112 = *(_DWORD *)(v161 + 520) - (vars0[1].i32[0] - 1) * vars0->i32[3];
  v113 = *v63;
  v114 = v58;
  if ((v113 & 1) != 0)
  {
    v115 = (v113 >> 1) & 7;
    if (v115 > 4)
      return result;
    if ((_DWORD)v115 == 4)
    {
      v116 = 0;
      v117 = v63[13];
      a38 = 0u;
      a39 = 0u;
      v118 = v169;
      do
      {
        *((_BYTE *)&a38 + ((v117 + (_BYTE)v116) & 0x1F)) = v63[v116 + 1];
        ++v116;
      }
      while (v116 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 1);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
      BYTE2(a38) = 0;
      v118 = v169;
    }
    v160 = v114;
    if ((int)v176 > 0 && v109)
    {
      v120 = (char *)(v70 - 1);
      v121 = v176;
      v122 = &a42;
      do
      {
        *v122++ = *v120;
        v120 += v118;
        --v121;
      }
      while (v121);
    }
    v123 = vars0;
    sub_1C9786744(&__dst, v173, (_DWORD)v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v112, v176, 0);
    if ((v111 & 4) != 0)
      v124 = 34;
    else
      v124 = 2;
    if ((v111 & 4) != 0)
      v125 = 17;
    else
      v125 = 1;
    v126 = v124 & 0xFFFFFF7F | (((v111 & 8) != 0) << 7);
    v127 = v125 & 0xFFFFFFBF | (((v111 & 8) != 0) << 6);
    v167 = v112;
    v128 = v112 >> 3;
    v129 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v123[12] + v115;
    v130 = v111;
    v131 = 4;
    vars8 = v130;
    do
    {
      if ((v128 & (1 << --v131)) != 0)
      {
        v128 -= 1 << v131;
        if (v128)
          v132 = v126;
        else
          v132 = 0;
        v133 = v132 | v130;
        v130 = v130 & 0xC | v127;
        (*v129)(v70, v169, &a38, v133, &a42, v72, v176);
        v70 += 8 << v131;
        v72 += 8 << v131;
      }
      v129 -= 5;
    }
    while (v131);
    sub_1C97867EC(&__dst);
    LODWORD(v113) = *v63;
    v114 = v160;
    v110 = v166;
    v111 = vars8;
    v112 = v167;
  }
  if ((v113 & 0x10) == 0)
  {
LABEL_96:
    v157 = vars0;
    result = vextq_s8(vars0[2], vars0[2], 8uLL);
    v158 = vextq_s8(vars0[3], vars0[3], 8uLL);
    vars0[2] = result;
    v157[3] = v158;
    return result;
  }
  if (v113 <= 0x9F)
  {
    v134 = v113 >> 5;
    if (v113 >> 5 == 4)
    {
      v135 = 0;
      v136 = v63[14];
      a38 = 0u;
      a39 = 0u;
      v137 = v175;
      v138 = v168;
      do
      {
        *((_BYTE *)&a38 + ((v136 + (_BYTE)v135) & 0x1F)) = v63[v135 + 5];
        ++v135;
      }
      while (v135 != 4);
      v139 = 0;
      v140 = v63[15];
      a40 = 0u;
      a41 = 0u;
      do
      {
        *((_BYTE *)&a40 + ((v140 + (_BYTE)v139) & 0x1F)) = v63[v139 + 9];
        ++v139;
      }
      while (v139 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 5);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
      BYTE2(a38) = 0;
      LOWORD(a40) = *(_WORD *)(v63 + 9);
      *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
      BYTE2(a40) = 0;
      v137 = v175;
      v138 = v168;
    }
    v160 = v114;
    if ((int)v176 > 0 && v138)
    {
      v142 = (_WORD *)(v137 - 2);
      v143 = v176;
      v144 = &a14;
      do
      {
        *(_WORD *)v144 = *v142;
        v144 += 2;
        v142 = (_WORD *)((char *)v142 + v110);
        --v143;
      }
      while (v143);
    }
    v145 = vars0;
    sub_1C9786744(&__dst, v173, (_DWORD)v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v112, v176, 1u);
    if ((v111 & 4) != 0)
      v146 = 34;
    else
      v146 = 2;
    v147 = v112;
    if ((v111 & 4) != 0)
      v148 = 17;
    else
      v148 = 1;
    v149 = v146 & 0xFFFFFF7F | (((v111 & 8) != 0) << 7);
    v150 = v148 & 0xFFFFFFBF | (((v111 & 8) != 0) << 6);
    v151 = v147 >> 2;
    v152 = &v145[24].i64[v134 + 1];
    v153 = 5;
    v154 = v174;
    do
    {
      if ((v151 & (1 << --v153)) != 0)
      {
        v151 -= 1 << v153;
        if (v151)
          v155 = v149;
        else
          v155 = 0;
        v156 = v155 | v111;
        v111 = v111 & 0xC | v150;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))*v152)(v137, v166, &a38, v156, &a14, v154, v176);
        v137 += 8 << v153;
        v154 += 8 << v153;
      }
      v152 -= 5;
    }
    while (v153);
    sub_1C97867EC(&__dst);
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1C97E87E8(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,char a57)
{
  int8x16_t *v57;
  uint64_t v58;
  int v59;
  __int32 v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  __int32 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  size_t v73;
  int v74;
  uint64_t v75;
  BOOL v76;
  BOOL v77;
  uint64_t v78;
  __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t result;
  unint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  _BOOL4 v90;
  _WORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  unsigned __int8 v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _DWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _BOOL4 v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  _WORD *v119;
  char *v120;
  uint64_t v121;
  char v122;
  char v123;
  char v124;
  int v125;
  void (**v126)(void);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  unsigned __int8 v133;
  int8x16_t *v134;
  uint64_t v135;
  _BOOL4 v136;
  uint64_t v137;
  unsigned __int8 v138;
  _DWORD *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  uint64_t *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  int8x16_t *v154;
  int8x16_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int8x16_t *v165;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v168;
  _BOOL4 v169;
  int v170;
  uint64_t v171;
  uint64_t v172;

  v57 = a1;
  STACK[0x578] = *MEMORY[0x1E0C80C00];
  vars0 = a2;
  v58 = *(_QWORD *)(a2 + 8);
  v59 = a1[1].i32[0];
  v60 = a1[1].i32[1];
  v61 = (unsigned __int8 *)(*(_QWORD *)(v58 + 1000) + 16 * v59 * a3);
  v62 = *(_QWORD *)(v58 + 416);
  v63 = *(_QWORD *)(v58 + 424);
  v64 = a1->i32[2];
  v65 = v57->i32[3];
  v66 = (int)v65 * (uint64_t)a3;
  v67 = *(_BYTE *)(v58 + 531);
  v68 = *(_QWORD *)(v58 + 400) + ((v62 * v66) << v67);
  v69 = *(_QWORD *)(v58 + 408) + ((v63 * v66) << v67);
  v171 = v57[3].i64[0];
  v172 = v57[2].i64[0];
  if (a3)
    v70 = 38;
  else
    v70 = 2;
  if (a3)
    v71 = 17;
  else
    v71 = 1;
  HIDWORD(vars8) = a3;
  v162 = v62;
  v163 = v63;
  v157 = v58;
  if (v60 - 1 <= a3)
  {
    v170 = *(_DWORD *)(v58 + 524) - v66;
  }
  else
  {
    v70 = v70 | 0x88;
    v71 |= 0x40u;
    v72 = v63;
    v73 = 2 * *(int *)(v58 + 520);
    v74 = v64;
    v75 = v68;
    memcpy((void *)v57[2].i64[1], (const void *)(v68 + 2 * v62 * (v65 - 1)), v73);
    memcpy((void *)v57[3].i64[1], (const void *)(v69 + 2 * v72 * (v57->i32[3] - 1)), v73 & 0x7FFFFFFFFFFFFFFELL);
    v64 = v74;
    v68 = v75;
    v170 = v57->i32[3];
    v59 = v57[1].i32[0];
  }
  v165 = v57;
  v158 = &v156;
  if (v59 < 2)
  {
    v109 = v68;
    v78 = 0;
    v108 = 0;
    v169 = 0;
  }
  else
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = &v57->i8[40 * v64];
    v159 = v79 + 112;
    v160 = v170;
    v161 = v79 - 48;
    LODWORD(v164) = v71 | v70;
    v80 = 2 * v162;
    v81 = 2 * v163;
    do
    {
      v168 = v68;
      v82 = sub_1C970EA84(vars0, v78, HIDWORD(vars8), v70);
      v84 = *v61;
      v85 = (v84 & 1) == 0;
      if ((v84 & 1) != 0)
      {
        v86 = (v84 >> 1) & 7;
        if (v86 > 4)
          return result;
        if ((_DWORD)v86 == 4)
        {
          v87 = 0;
          v88 = v61[13];
          a53 = 0u;
          a54 = 0u;
          v89 = v168;
          do
          {
            *((_BYTE *)&a53 + ((v88 + (_BYTE)v87) & 0x1F)) = v61[v87 + 1];
            ++v87;
          }
          while (v87 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 1);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
          BYTE2(a53) = 0;
          v89 = v168;
        }
        v90 = v85;
        if (v77 && v170 > 0)
        {
          v91 = (_WORD *)(v89 - 2);
          v92 = &a57;
          v93 = v160;
          do
          {
            *(_WORD *)v92 = *v91;
            v92 += 2;
            v91 = (_WORD *)((char *)v91 + v80);
            --v93;
          }
          while (v93);
        }
        v94 = v82;
        (*(void (**)(uint64_t, uint64_t, __int128 *))&v161[8 * v86])(v89, v162, &a53);
        v82 = v94;
        LODWORD(v84) = *v61;
        v85 = v90;
      }
      v95 = (v84 & 0x10) == 0;
      v96 = v69;
      if ((v84 & 0x10) != 0)
      {
        if (v84 > 0x9F)
          return result;
        v97 = v84 >> 5;
        if (v97 == 4)
        {
          v98 = 0;
          v99 = v61[14];
          a53 = 0u;
          a54 = 0u;
          do
          {
            *((_BYTE *)&a53 + ((v99 + (_BYTE)v98) & 0x1F)) = v61[v98 + 5];
            ++v98;
          }
          while (v98 != 4);
          v100 = 0;
          v101 = v61[15];
          a55 = 0u;
          a56 = 0u;
          do
          {
            *((_BYTE *)&a55 + ((v101 + (_BYTE)v100) & 0x1F)) = v61[v100 + 9];
            ++v100;
          }
          while (v100 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 5);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
          BYTE2(a53) = 0;
          LOWORD(a55) = *(_WORD *)(v61 + 9);
          *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
          BYTE2(a55) = 0;
        }
        v102 = v85;
        v103 = v95;
        if (v76 && v170 > 0)
        {
          v104 = (_DWORD *)(v96 - 4);
          v105 = &a13;
          v106 = v160;
          do
          {
            *(_DWORD *)v105 = *v104;
            v105 += 4;
            v104 = (_DWORD *)((char *)v104 + v81);
            --v106;
          }
          while (v106);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v159[8 * v97])(v96, v163, &a53, v82, &a13, v171, v170);
        v95 = v103;
        v85 = v102;
      }
      v107 = v165->i32[3];
      v68 = v168 + 2 * v107;
      v69 = v96 + 2 * v107;
      v171 += 2 * v107;
      v172 += 2 * v107;
      v61 += 16;
      v78 = (v78 + 1);
      v70 = v164;
      v76 = v95;
      v77 = v85;
    }
    while ((int)v78 < v165[1].i32[0] - 1);
    v108 = v85;
    v169 = v95;
    v109 = v68;
    LOBYTE(v70) = v164;
    v57 = v165;
  }
  v110 = sub_1C970EA84(vars0, v78, HIDWORD(vars8), v70 & 0x5D);
  v111 = *(_DWORD *)(v157 + 520) - (v57[1].i32[0] - 1) * v57->i32[3];
  v112 = *v61;
  if ((v112 & 1) != 0)
  {
    v113 = (v112 >> 1) & 7;
    if (v113 > 4)
      return result;
    HIDWORD(vars8) = v110;
    if ((_DWORD)v113 == 4)
    {
      v114 = 0;
      v115 = v61[13];
      result = 0uLL;
      a53 = 0u;
      a54 = 0u;
      v116 = v109;
      v117 = v162;
      do
      {
        *((_BYTE *)&a53 + ((v115 + (_BYTE)v114) & 0x1F)) = v61[v114 + 1];
        ++v114;
      }
      while (v114 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 1);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
      BYTE2(a53) = 0;
      v116 = v109;
      v117 = v162;
    }
    LODWORD(vars0) = v111;
    v164 = v69;
    if (v170 > 0 && v108)
    {
      v119 = (_WORD *)(v116 - 2);
      v120 = &a57;
      v121 = v170;
      do
      {
        *(_WORD *)v120 = *v119;
        v120 += 2;
        v119 += v117;
        --v121;
      }
      while (v121);
    }
    v122 = BYTE4(vars8);
    if ((vars8 & 0x400000000) != 0)
      v123 = 17;
    else
      v123 = 1;
    v124 = v123 & 0xBF | (((vars8 & 0x800000000) != 0) << 6);
    v125 = (int)vars0 >> 3;
    v126 = (void (**)(void))&v57[12] + v113;
    v127 = 4;
    do
    {
      if ((v125 & (1 << --v127)) != 0)
      {
        v125 -= 1 << v127;
        v122 = v122 & 0xC | v124;
        v128 = v116;
        (*v126)();
        v116 = v128 + 2 * (8 << v127);
        v172 += 2 * (8 << v127);
      }
      v126 -= 5;
    }
    while (v127);
    LODWORD(v112) = *v61;
    v69 = v164;
    v110 = HIDWORD(vars8);
    v111 = vars0;
  }
  if ((v112 & 0x10) == 0)
  {
LABEL_89:
    v154 = v165;
    result = vextq_s8(v165[2], v165[2], 8uLL);
    v155 = vextq_s8(v165[3], v165[3], 8uLL);
    v165[2] = result;
    v154[3] = v155;
    return result;
  }
  if (v112 <= 0x9F)
  {
    v129 = v69;
    v130 = v110;
    v131 = v112 >> 5;
    if (v131 == 4)
    {
      v132 = 0;
      v133 = v61[14];
      a53 = 0u;
      a54 = 0u;
      v134 = v165;
      v135 = v69;
      v136 = v169;
      do
      {
        *((_BYTE *)&a53 + ((v133 + (_BYTE)v132) & 0x1F)) = v61[v132 + 5];
        ++v132;
      }
      while (v132 != 4);
      v137 = 0;
      v138 = v61[15];
      a55 = 0u;
      a56 = 0u;
      do
      {
        *((_BYTE *)&a55 + ((v138 + (_BYTE)v137) & 0x1F)) = v61[v137 + 9];
        ++v137;
      }
      while (v137 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 5);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
      BYTE2(a53) = 0;
      LOWORD(a55) = *(_WORD *)(v61 + 9);
      *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
      BYTE2(a55) = 0;
      v134 = v165;
      v135 = v69;
      v136 = v169;
    }
    if (v170 > 0 && v136)
    {
      v140 = (_DWORD *)(v135 - 4);
      v141 = 2 * v163;
      v142 = &a13;
      v143 = v170;
      do
      {
        *(_DWORD *)v142 = *v140;
        v142 += 4;
        v140 = (_DWORD *)((char *)v140 + v141);
        --v143;
      }
      while (v143);
    }
    if ((v130 & 4) != 0)
      v144 = 34;
    else
      v144 = 2;
    if ((v130 & 4) != 0)
      v145 = 17;
    else
      v145 = 1;
    v146 = v144 & 0xFFFFFF7F | (((v130 & 8) != 0) << 7);
    v147 = v145 & 0xFFFFFFBF | (((v130 & 8) != 0) << 6);
    v148 = v111 >> 3;
    v149 = &v134[24].i64[v131 + 1];
    v150 = 5;
    do
    {
      if ((v148 & (1 << --v150)) != 0)
      {
        v148 -= 1 << v150;
        if (v148)
          v151 = v146;
        else
          v151 = 0;
        v152 = v151 | v130;
        v130 = v130 & 0xC | v147;
        v153 = v129;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))*v149)(v129, v163, &a53, v152, &a13, v171, v170);
        v129 = v153 + 2 * (8 << v150);
        v171 += 2 * (8 << v150);
      }
      v149 -= 5;
    }
    while (v150);
    goto LABEL_89;
  }
  return result;
}

int8x16_t sub_1C97E8FE0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t __dst)
{
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t result;
  int v46;
  unint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  _WORD *v52;
  unint64_t *v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD);
  _BOOL4 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  _BOOL4 v61;
  _DWORD *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  int v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  _WORD *v75;
  unint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  void (**v83)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD);
  uint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 v94;
  unsigned int v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  int8x16_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t vars0;
  unsigned int vars8;
  unsigned int vars8_4;
  uint64_t v122;
  int8x16_t *v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;

  v19 = MEMORY[0x1E0C80A78](a1);
  v22 = &v112;
  STACK[0x122F8] = *MEMORY[0x1E0C80C00];
  v126 = v20;
  v23 = *(_QWORD *)(v20 + 8);
  v24 = *(_DWORD *)(v19 + 16);
  v25 = *(_DWORD *)(v19 + 20);
  v26 = (unsigned __int8 *)(*(_QWORD *)(v23 + 1000) + 16 * v24 * v21);
  v27 = *(_QWORD *)(v23 + 416);
  v28 = *(_QWORD *)(v23 + 424);
  v30 = *(_DWORD *)(v19 + 8);
  v29 = *(int *)(v19 + 12);
  v31 = (int)v29 * (uint64_t)v21;
  v32 = *(_BYTE *)(v23 + 531);
  v33 = *(_QWORD *)(v23 + 400) + ((v27 * v31) << v32);
  v34 = *(_QWORD *)(v23 + 408) + ((v28 * v31) << v32);
  v129 = *(_QWORD *)(v19 + 48);
  v130 = *(_QWORD *)(v19 + 32);
  if (v21)
    v35 = 38;
  else
    v35 = 2;
  if (v21)
    v36 = 17;
  else
    v36 = 1;
  v125 = v21;
  v122 = *(_QWORD *)(v23 + 416);
  v123 = (int8x16_t *)v19;
  v127 = *(_QWORD *)(v23 + 408) + ((v28 * v31) << v32);
  v114 = *(_QWORD *)(v20 + 8);
  if (v25 - 1 <= v21)
  {
    v128 = *(_DWORD *)(v23 + 524) - v31;
  }
  else
  {
    v37 = v19;
    v35 = v35 | 0x88;
    v36 |= 0x40u;
    v38 = 2 * *(int *)(v23 + 520);
    memcpy(*(void **)(v19 + 40), (const void *)(v33 + 2 * v27 * (v29 - 1)), v38);
    memcpy(*(void **)(v37 + 56), (const void *)(v34 + 2 * v28 * (*(int *)(v37 + 12) - 1)), v38 & 0x7FFFFFFFFFFFFFFELL);
    v128 = *(_DWORD *)(v37 + 12);
    v24 = *(_DWORD *)(v37 + 16);
  }
  v118 = v28;
  if (v24 < 2)
  {
    v41 = 0;
    v66 = 0;
    vars8 = 0;
  }
  else
  {
    v113 = &v112;
    LODWORD(v39) = 0;
    v40 = 0;
    v41 = 0;
    v42 = &v123->i8[40 * v30];
    v115 = v42 + 112;
    v116 = v128;
    v117 = v42 - 48;
    vars8_4 = v36 | v35;
    v43 = 2 * v118;
    do
    {
      v44 = sub_1C970EA84(v126, v41, v125, v35);
      v46 = v44;
      v47 = *v26;
      v48 = (v47 & 1) == 0;
      v124 = v48;
      if ((v47 & 1) != 0)
      {
        vars8 = v39;
        v39 = v44;
        v49 = (v47 >> 1) & 7;
        if (v49 > 4)
          return result;
        if ((_DWORD)v49 == 4)
        {
          v50 = 0;
          v51 = v26[13];
          *(_OWORD *)&STACK[0x12200] = 0u;
          *(_OWORD *)&STACK[0x12210] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x12200] + ((v51 + (_BYTE)v50) & 0x1F)) = v26[v50 + 1];
            ++v50;
          }
          while (v50 != 4);
        }
        else
        {
          LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 1);
          LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 3);
          LOBYTE(STACK[0x12202]) = 0;
        }
        if (v40 && (int)v128 > 0)
        {
          v52 = (_WORD *)(v33 - 2);
          v53 = &STACK[0x12240];
          v54 = v116;
          do
          {
            *(_WORD *)v53 = *v52;
            v53 = (unint64_t *)((char *)v53 + 2);
            v52 += v122;
            --v54;
          }
          while (v54);
        }
        sub_1C97885B8(&__dst, v126, (_DWORD)v41 << v123->i32[2], v125 << v123->i32[2], v123->i32[3], v128, 0);
        v55 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))&v117[8 * v49];
        v46 = v39;
        v55(v33, v122, &STACK[0x12200], v39, &STACK[0x12240], v130, v128);
        sub_1C9788668((int *)&__dst);
        LODWORD(v47) = *v26;
        v48 = v124;
        LOBYTE(v39) = vars8;
      }
      v56 = (v47 & 0x10) == 0;
      if ((v47 & 0x10) != 0)
      {
        if (v47 > 0x9F)
          return result;
        HIDWORD(vars0) = v46;
        vars8 = v47 >> 5;
        if (v47 >> 5 == 4)
        {
          v57 = 0;
          v58 = v26[14];
          *(_OWORD *)&STACK[0x12200] = 0u;
          *(_OWORD *)&STACK[0x12210] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x12200] + ((v58 + (_BYTE)v57) & 0x1F)) = v26[v57 + 5];
            ++v57;
          }
          while (v57 != 4);
          v59 = 0;
          v60 = v26[15];
          *(_OWORD *)&STACK[0x12220] = 0u;
          *(_OWORD *)&STACK[0x12230] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x12220] + ((v60 + (_BYTE)v59) & 0x1F)) = v26[v59 + 9];
            ++v59;
          }
          while (v59 != 4);
        }
        else
        {
          LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 5);
          LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 7);
          LOBYTE(STACK[0x12202]) = 0;
          LOWORD(STACK[0x12220]) = *(_WORD *)(v26 + 9);
          LOWORD(STACK[0x12223]) = *(_WORD *)(v26 + 11);
          LOBYTE(STACK[0x12222]) = 0;
        }
        v61 = v56;
        if ((v39 & ((int)v128 > 0)) == 1)
        {
          v62 = (_DWORD *)(v127 - 4);
          v63 = &STACK[0x120C0];
          v64 = v116;
          do
          {
            *(_DWORD *)v63 = *v62;
            v63 = (unint64_t *)((char *)v63 + 4);
            v62 = (_DWORD *)((char *)v62 + v43);
            --v64;
          }
          while (v64);
        }
        sub_1C97885B8(&__dst, v126, (_DWORD)v41 << v123->i32[2], v125 << v123->i32[2], v123->i32[3], v128, 1u);
        (*(void (**)(uint64_t, uint64_t, unint64_t *, _QWORD, unint64_t *, uint64_t, _QWORD))&v115[8 * vars8])(v127, v118, &STACK[0x12200], HIDWORD(vars0), &STACK[0x120C0], v129, v128);
        sub_1C9788668((int *)&__dst);
        v56 = v61;
        v48 = v124;
      }
      v65 = v123->i32[3];
      v33 += 2 * v65;
      v127 += 2 * v65;
      v129 += 2 * v65;
      v130 += 2 * v65;
      v26 += 16;
      v41 = (v41 + 1);
      v35 = vars8_4;
      LODWORD(v39) = v56;
      v40 = v48;
    }
    while ((int)v41 < v123[1].i32[0] - 1);
    v66 = v48;
    vars8 = v56;
    LOBYTE(v35) = vars8_4;
    v22 = v113;
  }
  v67 = sub_1C970EA84(v126, v41, v125, v35 & 0x5D);
  v68 = *(_DWORD *)(v114 + 520) - (v123[1].i32[0] - 1) * v123->i32[3];
  v69 = *v26;
  if ((v69 & 1) != 0)
  {
    v70 = (v69 >> 1) & 7;
    if (v70 > 4)
      return result;
    if ((_DWORD)v70 == 4)
    {
      v71 = 0;
      v72 = v26[13];
      *(_OWORD *)&STACK[0x12200] = 0u;
      *(_OWORD *)&STACK[0x12210] = 0u;
      v73 = v122;
      do
      {
        *((_BYTE *)&STACK[0x12200] + ((v72 + (_BYTE)v71) & 0x1F)) = v26[v71 + 1];
        ++v71;
      }
      while (v71 != 4);
    }
    else
    {
      LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 1);
      LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 3);
      LOBYTE(STACK[0x12202]) = 0;
      v73 = v122;
    }
    v113 = v22;
    if ((int)v128 > 0 && v66)
    {
      v75 = (_WORD *)(v33 - 2);
      v76 = &STACK[0x12240];
      v77 = v128;
      do
      {
        *(_WORD *)v76 = *v75;
        v76 = (unint64_t *)((char *)v76 + 2);
        v75 += v73;
        --v77;
      }
      while (v77);
    }
    sub_1C97885B8(&__dst, v126, (_DWORD)v41 << v123->i32[2], v125 << v123->i32[2], v68, v128, 0);
    if ((v67 & 4) != 0)
      v78 = 34;
    else
      v78 = 2;
    if ((v67 & 4) != 0)
      v79 = 17;
    else
      v79 = 1;
    v80 = v78 & 0xFFFFFF7F | (((v67 & 8) != 0) << 7);
    v81 = v79 & 0xFFFFFFBF | (((v67 & 8) != 0) << 6);
    vars8_4 = v68;
    v82 = v68 >> 3;
    v83 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))&v123[12]
        + v70;
    v84 = 4;
    v85 = v67;
    do
    {
      if ((v82 & (1 << --v84)) != 0)
      {
        v82 -= 1 << v84;
        if (v82)
          v86 = v80;
        else
          v86 = 0;
        v87 = v86 | v85;
        v85 = v85 & 0xC | v81;
        (*v83)(v33, v122, &STACK[0x12200], v87, &STACK[0x12240], v130, v128);
        v33 += 2 * (8 << v84);
        v130 += 2 * (8 << v84);
      }
      v83 -= 5;
    }
    while (v84);
    sub_1C9788668((int *)&__dst);
    LODWORD(v69) = *v26;
    v22 = v113;
    v68 = vars8_4;
  }
  if ((v69 & 0x10) == 0)
  {
LABEL_96:
    result = vextq_s8(v123[2], v123[2], 8uLL);
    v111 = vextq_s8(v123[3], v123[3], 8uLL);
    v123[2] = result;
    v123[3] = v111;
    return result;
  }
  if (v69 <= 0x9F)
  {
    v88 = v69 >> 5;
    if (v69 >> 5 == 4)
    {
      v89 = 0;
      v90 = v26[14];
      *(_OWORD *)&STACK[0x12200] = 0u;
      *(_OWORD *)&STACK[0x12210] = 0u;
      v91 = v127;
      v92 = vars8;
      do
      {
        *((_BYTE *)&STACK[0x12200] + ((v90 + (_BYTE)v89) & 0x1F)) = v26[v89 + 5];
        ++v89;
      }
      while (v89 != 4);
      v93 = 0;
      v94 = v26[15];
      *(_OWORD *)&STACK[0x12220] = 0u;
      *(_OWORD *)&STACK[0x12230] = 0u;
      do
      {
        *((_BYTE *)&STACK[0x12220] + ((v94 + (_BYTE)v93) & 0x1F)) = v26[v93 + 9];
        ++v93;
      }
      while (v93 != 4);
    }
    else
    {
      LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 5);
      LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 7);
      LOBYTE(STACK[0x12202]) = 0;
      LOWORD(STACK[0x12220]) = *(_WORD *)(v26 + 9);
      LOWORD(STACK[0x12223]) = *(_WORD *)(v26 + 11);
      LOBYTE(STACK[0x12222]) = 0;
      v91 = v127;
      v92 = vars8;
    }
    v113 = v22;
    if ((int)v128 > 0)
      v95 = v92;
    else
      v95 = 0;
    if (v95 == 1)
    {
      v96 = (_DWORD *)(v91 - 4);
      v97 = 2 * v118;
      v98 = &STACK[0x120C0];
      v99 = v128;
      do
      {
        *(_DWORD *)v98 = *v96;
        v98 = (unint64_t *)((char *)v98 + 4);
        v96 = (_DWORD *)((char *)v96 + v97);
        --v99;
      }
      while (v99);
    }
    sub_1C97885B8(&__dst, v126, (_DWORD)v41 << v123->i32[2], v125 << v123->i32[2], v68, v128, 1u);
    if ((v67 & 4) != 0)
      v100 = 34;
    else
      v100 = 2;
    v101 = v68;
    if ((v67 & 4) != 0)
      v102 = 17;
    else
      v102 = 1;
    v103 = v100 & 0xFFFFFF7F | (((v67 & 8) != 0) << 7);
    v104 = v102 & 0xFFFFFFBF | (((v67 & 8) != 0) << 6);
    v105 = v101 >> 3;
    v106 = &v123[24].i64[v88 + 1];
    v107 = 5;
    v108 = v118;
    do
    {
      if ((v105 & (1 << --v107)) != 0)
      {
        v105 -= 1 << v107;
        if (v105)
          v109 = v103;
        else
          v109 = 0;
        v110 = v109 | v67;
        v67 = v67 & 0xC | v104;
        ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))*v106)(v91, v108, &STACK[0x12200], v110, &STACK[0x120C0], v129, v128);
        v91 += 2 * (8 << v107);
        v129 += 2 * (8 << v107);
      }
      v106 -= 5;
    }
    while (v107);
    sub_1C9788668((int *)&__dst);
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1C97E9914(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  size_t v72;
  int v73;
  BOOL v74;
  BOOL v75;
  uint64_t v76;
  __int8 *v77;
  uint64_t v78;
  int8x16_t result;
  unint64_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  _BOOL4 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  unsigned int v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  _BOOL4 v97;
  _BOOL4 v98;
  _WORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL4 v103;
  int8x16_t *v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  char *v111;
  uint64_t v112;
  char *v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  void (**v119)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned __int8 v132;
  int v133;
  _WORD *v134;
  uint64_t v135;
  char *v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int8x16_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t vars0;
  uint64_t vars8;
  int8x16_t *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;

  a56 = *MEMORY[0x1E0C80C00];
  vars0 = a2;
  v57 = *(_QWORD *)(a2 + 8);
  v58 = *(_DWORD *)(a1 + 16);
  v59 = *(_DWORD *)(a1 + 20);
  v60 = (unsigned __int8 *)(*(_QWORD *)(v57 + 1000) + 16 * v58 * a3);
  v61 = *(_QWORD *)(v57 + 416);
  v62 = *(_QWORD *)(v57 + 424);
  v64 = *(_DWORD *)(a1 + 8);
  v63 = *(int *)(a1 + 12);
  v65 = (int)v63 * (uint64_t)a3;
  v66 = *(_BYTE *)(v57 + 531);
  v67 = *(_QWORD *)(v57 + 400) + ((v61 * v65) << v66);
  v68 = *(_QWORD *)(v57 + 408) + ((v62 * v65) << v66);
  v69 = *(_QWORD *)(a1 + 32);
  v159 = *(_QWORD *)(a1 + 48);
  v160 = v68;
  if (a3)
    v70 = 38;
  else
    v70 = 2;
  if (a3)
    v71 = 17;
  else
    v71 = 1;
  HIDWORD(vars8) = a3;
  v154 = v62;
  v148 = v57;
  v149 = &v147;
  if (v59 - 1 <= a3)
  {
    HIDWORD(v155) = v71;
    v161 = *(_DWORD *)(v57 + 524) - v65;
  }
  else
  {
    v70 = v70 | 0x88;
    HIDWORD(v155) = v71 | 0x40;
    v72 = *(int *)(v57 + 520);
    v73 = v64;
    memcpy(*(void **)(a1 + 40), (const void *)(v67 + v61 * (v63 - 1)), v72);
    memcpy(*(void **)(a1 + 56), (const void *)(v68 + v62 * (*(int *)(a1 + 12) - 1)), v72 & 0x7FFFFFFFFFFFFFFFLL);
    v64 = v73;
    v161 = *(_DWORD *)(a1 + 12);
    v58 = *(_DWORD *)(a1 + 16);
  }
  v158 = (int8x16_t *)a1;
  if (v58 < 2)
  {
    v76 = 0;
    v103 = 0;
    LODWORD(v153) = 0;
  }
  else
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = &v158->i8[40 * v64];
    v150 = v77 + 112;
    v151 = v161;
    v152 = v77 - 48;
    HIDWORD(v155) |= v70;
    do
    {
      v78 = sub_1C970EA84(vars0, v76, HIDWORD(vars8), v70);
      v80 = *v60;
      v81 = (v80 & 1) == 0;
      if ((v80 & 1) != 0)
      {
        v82 = (v80 >> 1) & 7;
        if (v82 > 4)
          return result;
        if ((_DWORD)v82 == 4)
        {
          v83 = 0;
          v84 = v60[13];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((_BYTE *)&a37 + ((v84 + (_BYTE)v83) & 0x1F)) = v60[v83 + 1];
            ++v83;
          }
          while (v83 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 1);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
          BYTE2(a37) = 0;
        }
        v85 = v81;
        if (v75 && v161 > 0)
        {
          v86 = (char *)(v67 - 1);
          v87 = &a41;
          v88 = v151;
          do
          {
            *v87++ = *v86;
            v86 += v61;
            --v88;
          }
          while (v88);
        }
        v89 = v78;
        (*(void (**)(uint64_t, uint64_t, __int128 *))&v152[8 * v82])(v67, v61, &a37);
        v78 = v89;
        LODWORD(v80) = *v60;
        v81 = v85;
      }
      v90 = (v80 & 0x10) == 0;
      if ((v80 & 0x10) != 0)
      {
        if (v80 > 0x9F)
          return result;
        v91 = v80 >> 5;
        v153 = v69;
        if (v91 == 4)
        {
          v92 = 0;
          v93 = v60[14];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((_BYTE *)&a37 + ((v93 + (_BYTE)v92) & 0x1F)) = v60[v92 + 5];
            ++v92;
          }
          while (v92 != 4);
          v94 = 0;
          v95 = v60[15];
          a39 = 0u;
          a40 = 0u;
          v96 = v154;
          do
          {
            *((_BYTE *)&a39 + ((v95 + (_BYTE)v94) & 0x1F)) = v60[v94 + 9];
            ++v94;
          }
          while (v94 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 5);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
          BYTE2(a37) = 0;
          LOWORD(a39) = *(_WORD *)(v60 + 9);
          *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
          BYTE2(a39) = 0;
          v96 = v154;
        }
        v97 = v81;
        v98 = v90;
        if (v74 && v161 > 0)
        {
          v99 = (_WORD *)(v160 - 2);
          v100 = &a13;
          v101 = v151;
          do
          {
            *(_WORD *)v100 = *v99;
            v100 += 2;
            v99 = (_WORD *)((char *)v99 + v96);
            --v101;
          }
          while (v101);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v150[8 * v91])(v160, v96, &a37, v78, &a13, v159, v161);
        v90 = v98;
        v81 = v97;
        v69 = v153;
      }
      v102 = v158->i32[3];
      v67 += v102;
      v69 += v102;
      v159 += v102;
      v160 += v102;
      v60 += 16;
      v76 = (v76 + 1);
      v70 = HIDWORD(v155);
      v74 = v90;
      v75 = v81;
    }
    while ((int)v76 < v158[1].i32[0] - 1);
    v103 = v81;
    LODWORD(v153) = v90;
    LOBYTE(v70) = BYTE4(v155);
  }
  HIDWORD(vars8) = sub_1C970EA84(vars0, v76, HIDWORD(vars8), v70 & 0x5D);
  v104 = v158;
  v105 = *(_DWORD *)(v148 + 520) - (v158[1].i32[0] - 1) * v158->i32[3];
  v106 = *v60;
  if ((v106 & 1) != 0)
  {
    v107 = (v106 >> 1) & 7;
    if (v107 > 4)
      return result;
    if ((_DWORD)v107 == 4)
    {
      v108 = 0;
      v109 = v60[13];
      result = 0uLL;
      a37 = 0u;
      a38 = 0u;
      do
      {
        *((_BYTE *)&a37 + ((v109 + (_BYTE)v108) & 0x1F)) = v60[v108 + 1];
        ++v108;
      }
      while (v108 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 1);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
      BYTE2(a37) = 0;
    }
    if (v161 > 0 && v103)
    {
      v111 = (char *)(v67 - 1);
      v112 = v161;
      v113 = &a41;
      do
      {
        *v113++ = *v111;
        v111 += v61;
        --v112;
      }
      while (v112);
    }
    if ((vars8 & 0x400000000) != 0)
      v114 = 34;
    else
      v114 = 2;
    if ((vars8 & 0x400000000) != 0)
      v115 = 17;
    else
      v115 = 1;
    v116 = v114 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    v117 = v115 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    LODWORD(vars0) = v105;
    v118 = v105 >> 3;
    v119 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v158[12] + v107;
    v120 = 4;
    v121 = HIDWORD(vars8);
    do
    {
      if ((v118 & (1 << --v120)) != 0)
      {
        v118 -= 1 << v120;
        if (v118)
          v122 = v116;
        else
          v122 = 0;
        v123 = v122 | v121;
        v121 = v121 & 0xC | v117;
        (*v119)(v67, v61, &a37, v123, &a41, v69, v161);
        v67 += 8 << v120;
        v69 += 8 << v120;
      }
      v119 -= 5;
    }
    while (v120);
    LODWORD(v106) = *v60;
    v104 = v158;
    v105 = vars0;
  }
  v124 = v159;
  if ((v106 & 0x10) == 0)
  {
LABEL_93:
    result = vextq_s8(v104[2], v104[2], 8uLL);
    v146 = vextq_s8(v104[3], v104[3], 8uLL);
    v104[2] = result;
    v104[3] = v146;
    return result;
  }
  if (v106 <= 0x9F)
  {
    v125 = v106 >> 5;
    if (v125 == 4)
    {
      v126 = 0;
      v127 = v60[14];
      a37 = 0u;
      a38 = 0u;
      v128 = v154;
      v129 = v160;
      v130 = v153;
      do
      {
        *((_BYTE *)&a37 + ((v127 + (_BYTE)v126) & 0x1F)) = v60[v126 + 5];
        ++v126;
      }
      while (v126 != 4);
      v131 = 0;
      v132 = v60[15];
      a39 = 0u;
      a40 = 0u;
      do
      {
        *((_BYTE *)&a39 + ((v132 + (_BYTE)v131) & 0x1F)) = v60[v131 + 9];
        ++v131;
      }
      while (v131 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 5);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
      BYTE2(a37) = 0;
      LOWORD(a39) = *(_WORD *)(v60 + 9);
      *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
      BYTE2(a39) = 0;
      v128 = v154;
      v129 = v160;
      v130 = v153;
    }
    if (v161 > 0)
      v133 = v130;
    else
      v133 = 0;
    if (v133 == 1)
    {
      v134 = (_WORD *)(v129 - 2);
      v135 = v161;
      v136 = &a13;
      do
      {
        *(_WORD *)v136 = *v134;
        v136 += 2;
        v134 = (_WORD *)((char *)v134 + v128);
        --v135;
      }
      while (v135);
    }
    if ((vars8 & 0x400000000) != 0)
      v137 = 34;
    else
      v137 = 2;
    if ((vars8 & 0x400000000) != 0)
      v138 = 17;
    else
      v138 = 1;
    v139 = v137 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    v140 = v138 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    v141 = v105 >> 3;
    v142 = &v104[24].i64[v125 + 1];
    v143 = 5;
    do
    {
      if ((v141 & (1 << --v143)) != 0)
      {
        v141 -= 1 << v143;
        if (v141)
          v144 = v139;
        else
          v144 = 0;
        v145 = v144 | HIDWORD(vars8);
        HIDWORD(vars8) = BYTE4(vars8) & 0xC | v140;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))*v142)(v160, v154, &a37, v145, &a13, v124, v161);
        v160 += 8 << v143;
        v124 += 8 << v143;
      }
      v142 -= 5;
    }
    while (v143);
    goto LABEL_93;
  }
  return result;
}

int8x16_t sub_1C97EA09C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t __dst)
{
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  size_t v77;
  _BOOL8 v78;
  BOOL v79;
  uint64_t v80;
  __int8 *v81;
  uint64_t v82;
  int8x16_t result;
  int v84;
  unint64_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, __int128 *, uint64_t, char *, _BOOL8, _QWORD);
  uint64_t v96;
  _BOOL4 v97;
  int8x16_t *v98;
  unsigned int v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  unsigned __int8 v103;
  int v104;
  uint64_t v105;
  _WORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119;
  char *v121;
  uint64_t v122;
  char *v123;
  int8x16_t *v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  void (**v130)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  _BOOL4 v139;
  uint64_t v140;
  unsigned __int8 v141;
  _WORD *v143;
  uint64_t v144;
  char *v145;
  int8x16_t *v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  int8x16_t *v158;
  int8x16_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  _BOOL4 v169;
  uint64_t v170;
  int8x16_t *vars0;
  int vars8;
  unsigned int vars8_4;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;

  v56 = MEMORY[0x1E0C80A78](a1);
  v58 = &v160;
  STACK[0x9218] = *MEMORY[0x1E0C80C00];
  v174 = v59;
  v60 = *(_QWORD *)(v59 + 8);
  v61 = *(_DWORD *)(v56 + 16);
  v62 = *(_DWORD *)(v56 + 20);
  v63 = (unsigned __int8 *)(*(_QWORD *)(v60 + 1000) + 16 * v61 * v57);
  v64 = *(_QWORD *)(v60 + 416);
  v65 = *(_QWORD *)(v60 + 424);
  v67 = *(_DWORD *)(v56 + 8);
  v66 = *(int *)(v56 + 12);
  v68 = (int)v66 * (uint64_t)v57;
  v69 = *(_BYTE *)(v60 + 531);
  v70 = *(_QWORD *)(v60 + 400) + ((v64 * v68) << v69);
  v71 = *(_QWORD *)(v60 + 408) + ((v65 * v68) << v69);
  v72 = *(_QWORD *)(v56 + 32);
  v73 = *(_QWORD *)(v56 + 48);
  if (v57)
    v74 = 38;
  else
    v74 = 2;
  if (v57)
    v75 = 17;
  else
    v75 = 1;
  vars8_4 = v57;
  v170 = v64;
  vars0 = (int8x16_t *)v56;
  v167 = v65;
  v175 = v73;
  v176 = v71;
  v162 = v60;
  if (v62 - 1 <= v57)
  {
    vars8 = v75;
    v177 = *(_DWORD *)(v60 + 524) - v68;
  }
  else
  {
    v76 = v56;
    v74 = v74 | 0x88;
    vars8 = v75 | 0x40;
    v77 = *(int *)(v60 + 520);
    memcpy(*(void **)(v56 + 40), (const void *)(v70 + v64 * (v66 - 1)), v77);
    memcpy(*(void **)(v76 + 56), (const void *)(v71 + v65 * (*(int *)(v76 + 12) - 1)), v77 & 0x7FFFFFFFFFFFFFFFLL);
    v177 = *(_DWORD *)(v76 + 12);
    v61 = *(_DWORD *)(v76 + 16);
  }
  if (v61 < 2)
  {
    v80 = 0;
    v110 = 0;
    v169 = 0;
  }
  else
  {
    v161 = &v160;
    LODWORD(v78) = 0;
    v79 = 0;
    v80 = 0;
    v81 = &vars0->i8[40 * v67];
    v163 = v81 + 112;
    v164 = v177;
    v165 = v81 - 48;
    v168 = vars8 | v74;
    do
    {
      v82 = sub_1C970EA84(v174, v80, vars8_4, v74);
      v84 = v82;
      v85 = *v63;
      v86 = (v85 & 1) == 0;
      vars8 = v86;
      if ((v85 & 1) != 0)
      {
        v169 = v78;
        v78 = v72;
        v87 = v82;
        v88 = (v85 >> 1) & 7;
        if (v88 > 4)
          return result;
        if ((_DWORD)v88 == 4)
        {
          v89 = 0;
          v90 = v63[13];
          a38 = 0u;
          a39 = 0u;
          v91 = v170;
          do
          {
            *((_BYTE *)&a38 + ((v90 + (_BYTE)v89) & 0x1F)) = v63[v89 + 1];
            ++v89;
          }
          while (v89 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 1);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
          BYTE2(a38) = 0;
          v91 = v170;
        }
        if (v79 && (int)v177 > 0)
        {
          v92 = (char *)(v70 - 1);
          v93 = &a42;
          v94 = v164;
          do
          {
            *v93++ = *v92;
            v92 += v91;
            --v94;
          }
          while (v94);
        }
        sub_1C9789D48(&__dst, v174, (_DWORD)v80 << vars0->i32[2], vars8_4 << vars0->i32[2], vars0->i32[3], v177, 0);
        v95 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, _BOOL8, _QWORD))&v165[8 * v88];
        v84 = v87;
        v96 = v87;
        v72 = v78;
        v95(v70, v91, &a38, v96, &a42, v78, v177);
        sub_1C9789DF0((int *)&__dst);
        LODWORD(v85) = *v63;
        v86 = vars8;
        LOBYTE(v78) = v169;
      }
      v97 = (v85 & 0x10) == 0;
      v98 = vars0;
      if ((v85 & 0x10) != 0)
      {
        if (v85 > 0x9F)
          return result;
        v99 = v85 >> 5;
        if (v85 >> 5 == 4)
        {
          v100 = 0;
          v101 = v63[14];
          a38 = 0u;
          a39 = 0u;
          do
          {
            *((_BYTE *)&a38 + ((v101 + (_BYTE)v100) & 0x1F)) = v63[v100 + 5];
            ++v100;
          }
          while (v100 != 4);
          v102 = 0;
          v103 = v63[15];
          a40 = 0u;
          a41 = 0u;
          do
          {
            *((_BYTE *)&a40 + ((v103 + (_BYTE)v102) & 0x1F)) = v63[v102 + 9];
            ++v102;
          }
          while (v102 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 5);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
          BYTE2(a38) = 0;
          LOWORD(a40) = *(_WORD *)(v63 + 9);
          *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
          BYTE2(a40) = 0;
        }
        HIDWORD(v166) = v84;
        v169 = v97;
        v104 = v78 && (int)v177 > 0;
        v105 = v167;
        if (v104 == 1)
        {
          v106 = (_WORD *)(v176 - 2);
          v107 = &a14;
          v108 = v164;
          do
          {
            *(_WORD *)v107 = *v106;
            v107 += 2;
            v106 = (_WORD *)((char *)v106 + v105);
            --v108;
          }
          while (v108);
        }
        sub_1C9789D48(&__dst, v174, (_DWORD)v80 << v98->i32[2], vars8_4 << v98->i32[2], v98->i32[3], v177, 1u);
        (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, _QWORD))&v163[8 * v99])(v176, v105, &a38, HIDWORD(v166), &a14, v175, v177);
        sub_1C9789DF0((int *)&__dst);
        v97 = v169;
        v86 = vars8;
      }
      v109 = v98->i32[3];
      v70 += v109;
      v72 += v109;
      v176 += v109;
      v175 += v109;
      v63 += 16;
      v80 = (v80 + 1);
      LODWORD(v109) = v98[1].i32[0] - 1;
      v74 = v168;
      LODWORD(v78) = v97;
      v79 = v86;
    }
    while ((int)v80 < (int)v109);
    v110 = v86;
    v169 = v97;
    LOBYTE(v74) = v168;
    v58 = v161;
  }
  v111 = v167;
  v112 = sub_1C970EA84(v174, v80, vars8_4, v74 & 0x5D);
  v113 = *(_DWORD *)(v162 + 520) - (vars0[1].i32[0] - 1) * vars0->i32[3];
  v114 = *v63;
  v115 = v58;
  if ((v114 & 1) != 0)
  {
    v116 = (v114 >> 1) & 7;
    if (v116 > 4)
      return result;
    if ((_DWORD)v116 == 4)
    {
      v117 = 0;
      v118 = v63[13];
      a38 = 0u;
      a39 = 0u;
      v119 = v170;
      do
      {
        *((_BYTE *)&a38 + ((v118 + (_BYTE)v117) & 0x1F)) = v63[v117 + 1];
        ++v117;
      }
      while (v117 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 1);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
      BYTE2(a38) = 0;
      v119 = v170;
    }
    v161 = v115;
    if ((int)v177 > 0 && v110)
    {
      v121 = (char *)(v70 - 1);
      v122 = v177;
      v123 = &a42;
      do
      {
        *v123++ = *v121;
        v121 += v119;
        --v122;
      }
      while (v122);
    }
    v124 = vars0;
    sub_1C9789D48(&__dst, v174, (_DWORD)v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v113, v177, 0);
    if ((v112 & 4) != 0)
      v125 = 34;
    else
      v125 = 2;
    if ((v112 & 4) != 0)
      v126 = 17;
    else
      v126 = 1;
    v127 = v125 & 0xFFFFFF7F | (((v112 & 8) != 0) << 7);
    v128 = v126 & 0xFFFFFFBF | (((v112 & 8) != 0) << 6);
    v168 = v113;
    v129 = v113 >> 3;
    v130 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v124[12] + v116;
    v131 = v112;
    v132 = 4;
    vars8 = v131;
    do
    {
      if ((v129 & (1 << --v132)) != 0)
      {
        v129 -= 1 << v132;
        if (v129)
          v133 = v127;
        else
          v133 = 0;
        v134 = v133 | v131;
        v131 = v131 & 0xC | v128;
        (*v130)(v70, v170, &a38, v134, &a42, v72, v177);
        v70 += 8 << v132;
        v72 += 8 << v132;
      }
      v130 -= 5;
    }
    while (v132);
    sub_1C9789DF0((int *)&__dst);
    LODWORD(v114) = *v63;
    v115 = v161;
    v111 = v167;
    v112 = vars8;
    v113 = v168;
  }
  if ((v114 & 0x10) == 0)
  {
LABEL_96:
    v158 = vars0;
    result = vextq_s8(vars0[2], vars0[2], 8uLL);
    v159 = vextq_s8(vars0[3], vars0[3], 8uLL);
    vars0[2] = result;
    v158[3] = v159;
    return result;
  }
  if (v114 <= 0x9F)
  {
    v135 = v114 >> 5;
    if (v114 >> 5 == 4)
    {
      v136 = 0;
      v137 = v63[14];
      a38 = 0u;
      a39 = 0u;
      v138 = v176;
      v139 = v169;
      do
      {
        *((_BYTE *)&a38 + ((v137 + (_BYTE)v136) & 0x1F)) = v63[v136 + 5];
        ++v136;
      }
      while (v136 != 4);
      v140 = 0;
      v141 = v63[15];
      a40 = 0u;
      a41 = 0u;
      do
      {
        *((_BYTE *)&a40 + ((v141 + (_BYTE)v140) & 0x1F)) = v63[v140 + 9];
        ++v140;
      }
      while (v140 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 5);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
      BYTE2(a38) = 0;
      LOWORD(a40) = *(_WORD *)(v63 + 9);
      *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
      BYTE2(a40) = 0;
      v138 = v176;
      v139 = v169;
    }
    v161 = v115;
    if ((int)v177 > 0 && v139)
    {
      v143 = (_WORD *)(v138 - 2);
      v144 = v177;
      v145 = &a14;
      do
      {
        *(_WORD *)v145 = *v143;
        v145 += 2;
        v143 = (_WORD *)((char *)v143 + v111);
        --v144;
      }
      while (v144);
    }
    v146 = vars0;
    sub_1C9789D48(&__dst, v174, (_DWORD)v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v113, v177, 1u);
    if ((v112 & 4) != 0)
      v147 = 34;
    else
      v147 = 2;
    v148 = v113;
    if ((v112 & 4) != 0)
      v149 = 17;
    else
      v149 = 1;
    v150 = v147 & 0xFFFFFF7F | (((v112 & 8) != 0) << 7);
    v151 = v149 & 0xFFFFFFBF | (((v112 & 8) != 0) << 6);
    v152 = v148 >> 3;
    v153 = &v146[24].i64[v135 + 1];
    v154 = 5;
    v155 = v175;
    do
    {
      if ((v152 & (1 << --v154)) != 0)
      {
        v152 -= 1 << v154;
        if (v152)
          v156 = v150;
        else
          v156 = 0;
        v157 = v156 | v112;
        v112 = v112 & 0xC | v151;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))*v153)(v138, v167, &a38, v157, &a14, v155, v177);
        v138 += 8 << v154;
        v155 += 8 << v154;
      }
      v153 -= 5;
    }
    while (v154);
    sub_1C9789DF0((int *)&__dst);
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1C97EA950(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  size_t v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t result;
  unint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  int v98;
  _BOOL4 v99;
  _WORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL4 v104;
  unsigned int v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  _DWORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _BOOL4 v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  _WORD *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  void (**v133)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  unsigned __int8 v143;
  int v144;
  _DWORD *v145;
  char *v146;
  uint64_t v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  void (**v153)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t);
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  int8x16_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t vars0;
  uint64_t vars8;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  int v171;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v68 = a1;
  v160 = &v158;
  a68 = *MEMORY[0x1E0C80C00];
  v69 = *(_QWORD *)(a2 + 8);
  v70 = *(_DWORD *)(a1 + 16);
  v71 = *(_DWORD *)(a1 + 20);
  v72 = (unsigned __int8 *)(*(_QWORD *)(v69 + 1000) + 16 * (int)(v70 * a3));
  v74 = *(_QWORD *)(v69 + 416);
  v73 = *(_QWORD *)(v69 + 424);
  v76 = *(_DWORD *)(a1 + 8);
  v75 = *(int *)(a1 + 12);
  v77 = (int)v75 * (uint64_t)(int)a3;
  v78 = *(_BYTE *)(v69 + 531);
  v79 = *(_QWORD *)(v69 + 400) + ((v74 * v77) << v78);
  v80 = *(_QWORD *)(v69 + 408) + ((v73 * ((uint64_t)(int)v77 >> 1)) << v78);
  v176 = *(_QWORD *)(a1 + 48);
  v177 = *(_QWORD *)(a1 + 32);
  if (a3)
    v81 = 38;
  else
    v81 = 2;
  if (a3)
    v82 = 17;
  else
    v82 = 1;
  v175 = *(_QWORD *)(v69 + 408) + ((v73 * ((uint64_t)(int)v77 >> 1)) << v78);
  v159 = *(_QWORD *)(a2 + 8);
  if (v71 - 1 <= (int)a3)
  {
    v84 = *(_DWORD *)(v69 + 524) - v77;
  }
  else
  {
    v81 = v81 | 0x88;
    v82 |= 0x40u;
    v83 = 2 * *(int *)(v69 + 520);
    memcpy(*(void **)(a1 + 40), (const void *)(v79 + 2 * v74 * (v75 - 1)), v83);
    memcpy(*(void **)(v68 + 56), (const void *)(v80 + 2 * v73 * ((*(int *)(v68 + 12) >> 1) - 1)), v83 & 0x7FFFFFFFFFFFFFFELL);
    v84 = *(_DWORD *)(v68 + 12);
    v70 = *(_DWORD *)(v68 + 16);
  }
  v168 = v68;
  v169 = (v84 >> 1);
  v174 = v84;
  vars8 = v73;
  if (v70 < 2)
  {
    v88 = 0;
    v116 = 0;
    LODWORD(vars0) = 0;
  }
  else
  {
    v85 = 0;
    v86 = v74;
    v87 = 0;
    v88 = 0;
    v89 = v68 + 40 * v76;
    v162 = v89 + 112;
    v163 = v89 - 48;
    v161 = v84;
    v167 = v82 | v81;
    v164 = v86;
    v90 = 2 * v86;
    do
    {
      v91 = sub_1C970EA84(a2, v88, a3, v81);
      v93 = *v72;
      v94 = (v93 & 1) == 0;
      if ((v93 & 1) != 0)
      {
        v95 = (v93 >> 1) & 7;
        if (v95 > 4)
          return result;
        if ((_DWORD)v95 == 4)
        {
          v96 = 0;
          v97 = v72[13];
          a41 = 0u;
          a42 = 0u;
          v98 = v174;
          do
          {
            *((_BYTE *)&a41 + ((v97 + (_BYTE)v96) & 0x1F)) = v72[v96 + 1];
            ++v96;
          }
          while (v96 != 4);
        }
        else
        {
          LOWORD(a41) = *(_WORD *)(v72 + 1);
          *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 3);
          BYTE2(a41) = 0;
          v98 = v174;
        }
        v99 = v94;
        if (v87 && v98 > 0)
        {
          v100 = (_WORD *)(v79 - 2);
          v101 = &a45;
          v102 = v161;
          do
          {
            *(_WORD *)v101 = *v100;
            v101 += 2;
            v100 = (_WORD *)((char *)v100 + v90);
            --v102;
          }
          while (v102);
        }
        v103 = v91;
        (*(void (**)(uint64_t, uint64_t, __int128 *))(v163 + 8 * v95))(v79, v164, &a41);
        v91 = v103;
        LODWORD(v93) = *v72;
        v94 = v99;
      }
      v104 = (v93 & 0x10) == 0;
      if ((v93 & 0x10) != 0)
      {
        if (v93 > 0x9F)
          return result;
        v105 = v93 >> 5;
        vars0 = v79;
        if (v105 == 4)
        {
          v106 = 0;
          v107 = v72[14];
          a41 = 0u;
          a42 = 0u;
          do
          {
            *((_BYTE *)&a41 + ((v107 + (_BYTE)v106) & 0x1F)) = v72[v106 + 5];
            ++v106;
          }
          while (v106 != 4);
          v108 = 0;
          v109 = v72[15];
          a43 = 0u;
          a44 = 0u;
          do
          {
            *((_BYTE *)&a43 + ((v109 + (_BYTE)v108) & 0x1F)) = v72[v108 + 9];
            ++v108;
          }
          while (v108 != 4);
        }
        else
        {
          LOWORD(a41) = *(_WORD *)(v72 + 5);
          *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 7);
          BYTE2(a41) = 0;
          LOWORD(a43) = *(_WORD *)(v72 + 9);
          *(_WORD *)((char *)&a43 + 3) = *(_WORD *)(v72 + 11);
          BYTE2(a43) = 0;
        }
        v110 = v94;
        v111 = v104;
        if (v85 && v174 > 1)
        {
          v112 = (_DWORD *)(v175 - 4);
          v113 = &a17;
          v114 = v169;
          do
          {
            *(_DWORD *)v113 = *v112;
            v113 += 4;
            v112 = (_DWORD *)((char *)v112 + 2 * v73);
            --v114;
          }
          while (v114);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))(v162 + 8 * v105))(v175, vars8, &a41, v91, &a17, v176, v169);
        v104 = v111;
        v94 = v110;
        v79 = vars0;
      }
      v115 = *(int *)(v168 + 12);
      v79 += 2 * v115;
      v175 += 2 * v115;
      v176 += 2 * v115;
      v177 += 2 * v115;
      v72 += 16;
      v88 = (v88 + 1);
      v81 = v167;
      v85 = v104;
      v87 = v94;
    }
    while ((int)v88 < *(_DWORD *)(v168 + 16) - 1);
    v116 = v94;
    LODWORD(vars0) = v104;
    LOBYTE(v81) = v167;
    v68 = v168;
    v74 = v164;
  }
  v173 = sub_1C970EA84(a2, v88, a3, v81 & 0x5D);
  v117 = *(_DWORD *)(v159 + 520) - (*(_DWORD *)(v68 + 16) - 1) * *(_DWORD *)(v68 + 12);
  v118 = *v72;
  if ((v118 & 1) != 0)
  {
    v119 = (v118 >> 1) & 7;
    if (v119 > 4)
      return result;
    if ((_DWORD)v119 == 4)
    {
      v120 = 0;
      v121 = v72[13];
      result = 0uLL;
      a41 = 0u;
      a42 = 0u;
      do
      {
        *((_BYTE *)&a41 + ((v121 + (_BYTE)v120) & 0x1F)) = v72[v120 + 1];
        ++v120;
      }
      while (v120 != 4);
    }
    else
    {
      LOWORD(a41) = *(_WORD *)(v72 + 1);
      *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 3);
      BYTE2(a41) = 0;
    }
    if (v174 > 0 && v116)
    {
      v123 = (_WORD *)(v79 - 2);
      v124 = &a45;
      v125 = v174;
      do
      {
        *(_WORD *)v124 = *v123;
        v124 += 2;
        v123 += v74;
        --v125;
      }
      while (v125);
    }
    v126 = v74;
    v127 = v173;
    if ((v173 & 4) != 0)
      v128 = 34;
    else
      v128 = 2;
    if ((v173 & 4) != 0)
      v129 = 17;
    else
      v129 = 1;
    v130 = v128 & 0xFFFFFF7F | (((v173 & 8) != 0) << 7);
    v131 = v129 & 0xFFFFFFBF | (((v173 & 8) != 0) << 6);
    v171 = v117;
    v132 = v117 >> 3;
    v133 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))(v68 + 8 * v119 + 192);
    v134 = 4;
    do
    {
      if ((v132 & (1 << --v134)) != 0)
      {
        v132 -= 1 << v134;
        if (v132)
          v135 = v130;
        else
          v135 = 0;
        v136 = v135 | v127;
        v127 = v127 & 0xC | v131;
        (*v133)(v79, v126, &a41, v136, &a45, v177, v174);
        v79 += 2 * (8 << v134);
        v177 += 2 * (8 << v134);
      }
      v133 -= 5;
    }
    while (v134);
    LODWORD(v118) = *v72;
    v68 = v168;
    v117 = v171;
  }
  if ((v118 & 0x10) == 0)
  {
LABEL_95:
    result = vextq_s8(*(int8x16_t *)(v68 + 32), *(int8x16_t *)(v68 + 32), 8uLL);
    v157 = vextq_s8(*(int8x16_t *)(v68 + 48), *(int8x16_t *)(v68 + 48), 8uLL);
    *(int8x16_t *)(v68 + 32) = result;
    *(int8x16_t *)(v68 + 48) = v157;
    return result;
  }
  if (v118 <= 0x9F)
  {
    v137 = v118 >> 5;
    if (v137 == 4)
    {
      v138 = 0;
      v139 = v72[14];
      a41 = 0u;
      a42 = 0u;
      v140 = vars8;
      v141 = vars0;
      do
      {
        *((_BYTE *)&a41 + ((v139 + (_BYTE)v138) & 0x1F)) = v72[v138 + 5];
        ++v138;
      }
      while (v138 != 4);
      v142 = 0;
      v143 = v72[15];
      a43 = 0u;
      a44 = 0u;
      do
      {
        *((_BYTE *)&a43 + ((v143 + (_BYTE)v142) & 0x1F)) = v72[v142 + 9];
        ++v142;
      }
      while (v142 != 4);
    }
    else
    {
      LOWORD(a41) = *(_WORD *)(v72 + 5);
      *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 7);
      BYTE2(a41) = 0;
      LOWORD(a43) = *(_WORD *)(v72 + 9);
      *(_WORD *)((char *)&a43 + 3) = *(_WORD *)(v72 + 11);
      BYTE2(a43) = 0;
      v140 = vars8;
      v141 = vars0;
    }
    if (v174 > 1)
      v144 = v141;
    else
      v144 = 0;
    if (v144 == 1)
    {
      v145 = (_DWORD *)(v175 - 4);
      v146 = &a17;
      v147 = v169;
      do
      {
        *(_DWORD *)v146 = *v145;
        v146 += 4;
        v145 = (_DWORD *)((char *)v145 + 2 * v140);
        --v147;
      }
      while (v147);
    }
    if ((v173 & 4) != 0)
      v148 = 34;
    else
      v148 = 2;
    if ((v173 & 4) != 0)
      v149 = 17;
    else
      v149 = 1;
    v150 = v148 & 0xFFFFFF7F | (((v173 & 8) != 0) << 7);
    v151 = v149 & 0xFFFFFFBF | (((v173 & 8) != 0) << 6);
    v152 = v117 >> 3;
    v153 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))(v68 + 8 * v137 + 392);
    v154 = 5;
    do
    {
      if ((v152 & (1 << --v154)) != 0)
      {
        v152 -= 1 << v154;
        if (v152)
          v155 = v150;
        else
          v155 = 0;
        v156 = v155 | v173;
        v173 = v173 & 0xC | v151;
        (*v153)(v175, vars8, &a41, v156, &a17, v176, v169);
        v175 += 2 * (8 << v154);
        v176 += 2 * (8 << v154);
      }
      v153 -= 5;
    }
    while (v154);
    goto LABEL_95;
  }
  return result;
}

int8x16_t sub_1C97EB108(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, int a12, int a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t __dst)
{
  signed int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  size_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int8x16_t result;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  _WORD *v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  _DWORD *v66;
  unint64_t *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, unint64_t *, _QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v70;
  _BOOL4 v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  int v77;
  uint64_t v78;
  _WORD *v80;
  unint64_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  void (**v89)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD);
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 v96;
  int v97;
  _BOOL4 v98;
  uint64_t v99;
  unsigned __int8 v100;
  _DWORD *v102;
  uint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  void (**v112)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int8x16_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  _BOOL4 v126;
  uint64_t vars0;
  uint64_t vars8;
  unsigned int v129;
  _DWORD *v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v21 = MEMORY[0x1E0C80A78](a1);
  v22 = &v118;
  STACK[0x12278] = *MEMORY[0x1E0C80C00];
  v136 = v23;
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(_DWORD *)(v21 + 16);
  v26 = *(_DWORD *)(v21 + 20);
  v27 = (unsigned __int8 *)(*(_QWORD *)(v24 + 1000) + 16 * v25 * v20);
  v28 = *(_QWORD *)(v24 + 416);
  v29 = *(_QWORD *)(v24 + 424);
  v31 = *(_DWORD *)(v21 + 8);
  v30 = *(int *)(v21 + 12);
  v32 = (int)v30 * (uint64_t)v20;
  v33 = *(_BYTE *)(v24 + 531);
  v34 = *(_QWORD *)(v24 + 400) + ((v28 * v32) << v33);
  v35 = *(_QWORD *)(v24 + 408) + ((v29 * ((uint64_t)(int)v32 >> 1)) << v33);
  v138 = *(_QWORD *)(v21 + 48);
  v139 = *(_QWORD *)(v21 + 32);
  if (v20)
    v36 = 38;
  else
    v36 = 2;
  if (v20)
    v37 = 17;
  else
    v37 = 1;
  v135 = v20;
  v137 = *(_QWORD *)(v24 + 408) + ((v29 * ((uint64_t)(int)v32 >> 1)) << v33);
  vars0 = *(_QWORD *)(v24 + 416);
  v120 = v24;
  if (v26 - 1 <= v20)
  {
    v39 = *(_DWORD *)(v24 + 524) - v32;
  }
  else
  {
    v36 = v36 | 0x88;
    v37 |= 0x40u;
    v38 = 2 * *(int *)(v24 + 520);
    memcpy(*(void **)(v21 + 40), (const void *)(v34 + 2 * v28 * (v30 - 1)), v38);
    memcpy(*(void **)(v21 + 56), (const void *)(v35 + 2 * v29 * ((*(int *)(v21 + 12) >> 1) - 1)), v38 & 0x7FFFFFFFFFFFFFFELL);
    v39 = *(_DWORD *)(v21 + 12);
    v25 = *(_DWORD *)(v21 + 16);
  }
  v124 = v29;
  vars8 = (v39 >> 1);
  v130 = (_DWORD *)v21;
  v129 = v39;
  if (v25 < 2)
  {
    v43 = 0;
    v71 = 0;
    v126 = 0;
  }
  else
  {
    v119 = &v118;
    v40 = 0;
    v41 = v21;
    v42 = 0;
    v43 = 0;
    v44 = v41 + 40 * v31;
    v122 = v44 + 112;
    v123 = v44 - 48;
    v121 = v39;
    v125 = v37 | v36;
    v45 = 2 * vars0;
    v46 = 2 * v124;
    do
    {
      v47 = sub_1C970EA84(v136, v43, v135, v36);
      v49 = *v27;
      v50 = (v49 & 1) == 0;
      v131 = v47;
      v133 = v50;
      if ((v49 & 1) != 0)
      {
        v51 = (v49 >> 1) & 7;
        if (v51 > 4)
          return result;
        if ((_DWORD)v51 == 4)
        {
          v52 = 0;
          v53 = v27[13];
          *(_OWORD *)&STACK[0x12180] = 0u;
          *(_OWORD *)&STACK[0x12190] = 0u;
          v54 = v129;
          do
          {
            *((_BYTE *)&STACK[0x12180] + ((v53 + (_BYTE)v52) & 0x1F)) = v27[v52 + 1];
            ++v52;
          }
          while (v52 != 4);
        }
        else
        {
          LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 1);
          LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 3);
          LOBYTE(STACK[0x12182]) = 0;
          v54 = v129;
        }
        if (v42 && (int)v54 > 0)
        {
          v55 = (_WORD *)(v34 - 2);
          v56 = &STACK[0x121C0];
          v57 = v121;
          do
          {
            *(_WORD *)v56 = *v55;
            v56 = (unint64_t *)((char *)v56 + 2);
            v55 = (_WORD *)((char *)v55 + v45);
            --v57;
          }
          while (v57);
        }
        v58 = v54;
        sub_1C978BD08(&__dst, v136, (_DWORD)v43 << v130[2], v135 << v130[2], v130[3], v54, 0);
        (*(void (**)(uint64_t, uint64_t, unint64_t *, _QWORD, unint64_t *, uint64_t, uint64_t))(v123 + 8 * v51))(v34, vars0, &STACK[0x12180], v131, &STACK[0x121C0], v139, v58);
        sub_1C978BDBC((int *)&__dst);
        LODWORD(v49) = *v27;
        v50 = v133;
      }
      v59 = (v49 & 0x10) == 0;
      v60 = v137;
      if ((v49 & 0x10) != 0)
      {
        if (v49 > 0x9F)
          return result;
        v61 = v49 >> 5;
        if (v49 >> 5 == 4)
        {
          v62 = 0;
          v63 = v27[14];
          *(_OWORD *)&STACK[0x12180] = 0u;
          *(_OWORD *)&STACK[0x12190] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x12180] + ((v63 + (_BYTE)v62) & 0x1F)) = v27[v62 + 5];
            ++v62;
          }
          while (v62 != 4);
          v64 = 0;
          v65 = v27[15];
          *(_OWORD *)&STACK[0x121A0] = 0u;
          *(_OWORD *)&STACK[0x121B0] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x121A0] + ((v65 + (_BYTE)v64) & 0x1F)) = v27[v64 + 9];
            ++v64;
          }
          while (v64 != 4);
        }
        else
        {
          LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 5);
          LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 7);
          LOBYTE(STACK[0x12182]) = 0;
          LOWORD(STACK[0x121A0]) = *(_WORD *)(v27 + 9);
          LOWORD(STACK[0x121A3]) = *(_WORD *)(v27 + 11);
          LOBYTE(STACK[0x121A2]) = 0;
        }
        v126 = v59;
        if (v40 && (int)v129 > 1)
        {
          v66 = (_DWORD *)(v137 - 4);
          v67 = &STACK[0x120C0];
          v68 = vars8;
          do
          {
            *(_DWORD *)v67 = *v66;
            v67 = (unint64_t *)((char *)v67 + 4);
            v66 = (_DWORD *)((char *)v66 + v46);
            --v68;
          }
          while (v68);
        }
        sub_1C978BD08(&__dst, v136, (_DWORD)v43 << v130[2], v135 << v130[2], v130[3], v129, 1u);
        v69 = *(void (**)(uint64_t, uint64_t, unint64_t *, _QWORD, unint64_t *, uint64_t, uint64_t))(v122 + 8 * v61);
        v60 = v137;
        v69(v137, v124, &STACK[0x12180], v131, &STACK[0x120C0], v138, vars8);
        sub_1C978BDBC((int *)&__dst);
        v59 = v126;
        v50 = v133;
      }
      v70 = (int)v130[3];
      v34 += 2 * v70;
      v137 = v60 + 2 * v70;
      v138 += 2 * v70;
      v139 += 2 * v70;
      v27 += 16;
      v43 = (v43 + 1);
      v36 = v125;
      v40 = v59;
      v42 = v50;
    }
    while ((int)v43 < v130[4] - 1);
    v71 = v50;
    v126 = v59;
    LOBYTE(v36) = v125;
    v22 = v119;
    v21 = (uint64_t)v130;
  }
  v72 = sub_1C970EA84(v136, v43, v135, v36 & 0x5D);
  v134 = *(_DWORD *)(v120 + 520) - (*(_DWORD *)(v21 + 16) - 1) * *(_DWORD *)(v21 + 12);
  v73 = *v27;
  if ((v73 & 1) != 0)
  {
    v74 = (v73 >> 1) & 7;
    if (v74 > 4)
      return result;
    if ((_DWORD)v74 == 4)
    {
      v75 = 0;
      v76 = v27[13];
      *(_OWORD *)&STACK[0x12180] = 0u;
      *(_OWORD *)&STACK[0x12190] = 0u;
      v77 = v129;
      v78 = vars0;
      do
      {
        *((_BYTE *)&STACK[0x12180] + ((v76 + (_BYTE)v75) & 0x1F)) = v27[v75 + 1];
        ++v75;
      }
      while (v75 != 4);
    }
    else
    {
      LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 1);
      LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 3);
      LOBYTE(STACK[0x12182]) = 0;
      v77 = v129;
      v78 = vars0;
    }
    v119 = v22;
    if (v77 > 0 && v71)
    {
      v80 = (_WORD *)(v34 - 2);
      v81 = &STACK[0x121C0];
      v82 = v77;
      do
      {
        *(_WORD *)v81 = *v80;
        v81 = (unint64_t *)((char *)v81 + 2);
        v80 += v78;
        --v82;
      }
      while (v82);
    }
    sub_1C978BD08(&__dst, v136, (_DWORD)v43 << *(_DWORD *)(v21 + 8), v135 << *(_DWORD *)(v21 + 8), v134, v77, 0);
    if ((v72 & 4) != 0)
      v83 = 34;
    else
      v83 = 2;
    if ((v72 & 4) != 0)
      v84 = 17;
    else
      v84 = 1;
    v85 = v83 & 0xFFFFFF7F | (((v72 & 8) != 0) << 7);
    v86 = v84 & 0xFFFFFFBF | (((v72 & 8) != 0) << 6);
    v87 = v72;
    v88 = v134 >> 3;
    v89 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(v21 + 8 * v74 + 192);
    v90 = 4;
    v132 = v87;
    do
    {
      if ((v88 & (1 << --v90)) != 0)
      {
        v88 -= 1 << v90;
        if (v88)
          v91 = v85;
        else
          v91 = 0;
        v92 = v91 | v87;
        v87 = v87 & 0xC | v86;
        (*v89)(v34, vars0, &STACK[0x12180], v92, &STACK[0x121C0], v139, v129);
        v34 += 2 * (8 << v90);
        v139 += 2 * (8 << v90);
      }
      v89 -= 5;
    }
    while (v90);
    sub_1C978BDBC((int *)&__dst);
    LODWORD(v73) = *v27;
    v22 = v119;
    v21 = (uint64_t)v130;
    v72 = v132;
  }
  v93 = v137;
  if ((v73 & 0x10) == 0)
  {
LABEL_96:
    result = vextq_s8(*(int8x16_t *)(v21 + 32), *(int8x16_t *)(v21 + 32), 8uLL);
    v117 = vextq_s8(*(int8x16_t *)(v21 + 48), *(int8x16_t *)(v21 + 48), 8uLL);
    *(int8x16_t *)(v21 + 32) = result;
    *(int8x16_t *)(v21 + 48) = v117;
    return result;
  }
  if (v73 <= 0x9F)
  {
    v94 = v73 >> 5;
    if (v73 >> 5 == 4)
    {
      v95 = 0;
      v96 = v27[14];
      *(_OWORD *)&STACK[0x12180] = 0u;
      *(_OWORD *)&STACK[0x12190] = 0u;
      v97 = v129;
      v98 = v126;
      do
      {
        *((_BYTE *)&STACK[0x12180] + ((v96 + (_BYTE)v95) & 0x1F)) = v27[v95 + 5];
        ++v95;
      }
      while (v95 != 4);
      v99 = 0;
      v100 = v27[15];
      *(_OWORD *)&STACK[0x121A0] = 0u;
      *(_OWORD *)&STACK[0x121B0] = 0u;
      do
      {
        *((_BYTE *)&STACK[0x121A0] + ((v100 + (_BYTE)v99) & 0x1F)) = v27[v99 + 9];
        ++v99;
      }
      while (v99 != 4);
    }
    else
    {
      LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 5);
      LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 7);
      LOBYTE(STACK[0x12182]) = 0;
      LOWORD(STACK[0x121A0]) = *(_WORD *)(v27 + 9);
      LOWORD(STACK[0x121A3]) = *(_WORD *)(v27 + 11);
      LOBYTE(STACK[0x121A2]) = 0;
      v97 = v129;
      v98 = v126;
    }
    v119 = v22;
    if (v97 > 1 && v98)
    {
      v102 = (_DWORD *)(v137 - 4);
      v103 = 2 * v124;
      v104 = &STACK[0x120C0];
      v105 = vars8;
      do
      {
        *(_DWORD *)v104 = *v102;
        v104 = (unint64_t *)((char *)v104 + 4);
        v102 = (_DWORD *)((char *)v102 + v103);
        --v105;
      }
      while (v105);
    }
    sub_1C978BD08(&__dst, v136, (_DWORD)v43 << *(_DWORD *)(v21 + 8), v135 << *(_DWORD *)(v21 + 8), v134, v97, 1u);
    if ((v72 & 4) != 0)
      v106 = 34;
    else
      v106 = 2;
    if ((v72 & 4) != 0)
      v107 = 17;
    else
      v107 = 1;
    v108 = v72;
    v109 = v106 & 0xFFFFFF7F | (((v72 & 8) != 0) << 7);
    v110 = v107 & 0xFFFFFFBF | (((v72 & 8) != 0) << 6);
    v111 = v134 >> 3;
    v112 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(v21 + 8 * v94 + 392);
    v113 = 5;
    v114 = v124;
    do
    {
      if ((v111 & (1 << --v113)) != 0)
      {
        v111 -= 1 << v113;
        if (v111)
          v115 = v109;
        else
          v115 = 0;
        v116 = v115 | v108;
        v108 = v108 & 0xC | v110;
        (*v112)(v93, v114, &STACK[0x12180], v116, &STACK[0x120C0], v138, vars8);
        v93 += 2 * (8 << v113);
        v138 += 2 * (8 << v113);
      }
      v112 -= 5;
    }
    while (v113);
    sub_1C978BDBC((int *)&__dst);
    v21 = (uint64_t)v130;
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1C97EBA1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t __dst)
{
  uint64_t v53;
  signed int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  size_t v74;
  int v75;
  _BOOL8 v76;
  BOOL v77;
  uint64_t v78;
  __int8 *v79;
  uint64_t v80;
  int8x16_t result;
  unsigned int v82;
  unint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, __int128 *, uint64_t, char *, _BOOL8, uint64_t);
  uint64_t v96;
  _BOOL4 v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  unsigned __int8 v102;
  _BOOL4 v103;
  int v104;
  uint64_t v105;
  _WORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  int v119;
  uint64_t v120;
  char *v122;
  uint64_t v123;
  char *v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  void (**v131)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  int v140;
  _BOOL4 v141;
  uint64_t v142;
  unsigned __int8 v143;
  _WORD *v145;
  char *v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  int8x16_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  unsigned int v167;
  _BOOL4 v168;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  int8x16_t *v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;

  v53 = MEMORY[0x1E0C80A78]();
  v55 = &v161;
  STACK[0x91F8] = *MEMORY[0x1E0C80C00];
  v179 = v56;
  v57 = *(_QWORD *)(v56 + 8);
  v58 = *(_DWORD *)(v53 + 16);
  v59 = *(_DWORD *)(v53 + 20);
  v60 = (unsigned __int8 *)(*(_QWORD *)(v57 + 1000) + 16 * v58 * v54);
  v61 = *(_QWORD *)(v57 + 416);
  v62 = *(_QWORD *)(v57 + 424);
  v64 = *(_DWORD *)(v53 + 8);
  v63 = *(int *)(v53 + 12);
  v65 = (int)v63 * (uint64_t)v54;
  v66 = *(_BYTE *)(v57 + 531);
  v67 = *(_QWORD *)(v57 + 400) + ((v61 * v65) << v66);
  v68 = *(_QWORD *)(v57 + 408) + ((v62 * ((uint64_t)(int)v65 >> 1)) << v66);
  v69 = *(_QWORD *)(v53 + 32);
  v70 = *(_QWORD *)(v53 + 48);
  if (v54)
    v71 = 38;
  else
    v71 = 2;
  if (v54)
    v72 = 17;
  else
    v72 = 1;
  v178 = v54;
  v174 = (int8x16_t *)v53;
  vars0 = *(_QWORD *)(v57 + 424);
  v171 = v61;
  v180 = v70;
  v181 = v68;
  v163 = v57;
  if (v59 - 1 <= v54)
  {
    v175 = v72;
    v75 = *(_DWORD *)(v57 + 524) - v65;
  }
  else
  {
    v73 = v53;
    v71 = v71 | 0x88;
    v175 = v72 | 0x40;
    v74 = *(int *)(v57 + 520);
    memcpy(*(void **)(v53 + 40), (const void *)(v67 + v61 * (v63 - 1)), v74);
    memcpy(*(void **)(v73 + 56), (const void *)(v68 + v62 * ((*(int *)(v73 + 12) >> 1) - 1)), v74 & 0x7FFFFFFFFFFFFFFFLL);
    v75 = *(_DWORD *)(v73 + 12);
    v58 = *(_DWORD *)(v73 + 16);
  }
  v172 = (v75 >> 1);
  v173 = v75;
  if (v58 < 2)
  {
    v78 = 0;
    v110 = 0;
    v168 = 0;
  }
  else
  {
    v162 = &v161;
    LODWORD(v76) = 0;
    v77 = 0;
    v78 = 0;
    v79 = &v174->i8[40 * v64];
    v165 = v79 + 112;
    v166 = v79 - 48;
    v164 = v75;
    HIDWORD(vars8) = v175 | v71;
    do
    {
      v80 = sub_1C970EA84(v179, v78, v178, v71);
      v82 = v80;
      v83 = *v60;
      v84 = (v83 & 1) == 0;
      v176 = v84;
      if ((v83 & 1) != 0)
      {
        v168 = v76;
        v76 = v69;
        v85 = v80;
        v86 = (v83 >> 1) & 7;
        if (v86 > 4)
          return result;
        if ((_DWORD)v86 == 4)
        {
          v87 = 0;
          v88 = v60[13];
          a35 = 0u;
          a36 = 0u;
          v89 = v173;
          v90 = v171;
          do
          {
            *((_BYTE *)&a35 + ((v88 + (_BYTE)v87) & 0x1F)) = v60[v87 + 1];
            ++v87;
          }
          while (v87 != 4);
        }
        else
        {
          LOWORD(a35) = *(_WORD *)(v60 + 1);
          *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 3);
          BYTE2(a35) = 0;
          v89 = v173;
          v90 = v171;
        }
        if (v77 && (int)v89 > 0)
        {
          v91 = (char *)(v67 - 1);
          v92 = &a39;
          v93 = v164;
          do
          {
            *v92++ = *v91;
            v91 += v90;
            --v93;
          }
          while (v93);
        }
        v94 = v89;
        sub_1C978D20C(&__dst, v179, (_DWORD)v78 << v174->i32[2], v178 << v174->i32[2], v174->i32[3], v89, 0);
        v95 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, _BOOL8, uint64_t))&v166[8 * v86];
        v82 = v85;
        v96 = v85;
        v69 = v76;
        v95(v67, v90, &a35, v96, &a39, v76, v94);
        sub_1C978D2B8((int *)&__dst);
        LODWORD(v83) = *v60;
        v84 = v176;
        LOBYTE(v76) = v168;
      }
      v97 = (v83 & 0x10) == 0;
      if ((v83 & 0x10) != 0)
      {
        if (v83 > 0x9F)
          return result;
        v98 = v83 >> 5;
        v167 = v82;
        if (v83 >> 5 == 4)
        {
          v99 = 0;
          v100 = v60[14];
          a35 = 0u;
          a36 = 0u;
          do
          {
            *((_BYTE *)&a35 + ((v100 + (_BYTE)v99) & 0x1F)) = v60[v99 + 5];
            ++v99;
          }
          while (v99 != 4);
          v101 = 0;
          v102 = v60[15];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((_BYTE *)&a37 + ((v102 + (_BYTE)v101) & 0x1F)) = v60[v101 + 9];
            ++v101;
          }
          while (v101 != 4);
        }
        else
        {
          LOWORD(a35) = *(_WORD *)(v60 + 5);
          *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 7);
          BYTE2(a35) = 0;
          LOWORD(a37) = *(_WORD *)(v60 + 9);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 11);
          BYTE2(a37) = 0;
        }
        v103 = v97;
        v104 = v76 && (int)v173 > 1;
        v105 = vars0;
        if (v104 == 1)
        {
          v106 = (_WORD *)(v181 - 2);
          v107 = &a19;
          v108 = v172;
          do
          {
            *(_WORD *)v107 = *v106;
            v107 += 2;
            v106 = (_WORD *)((char *)v106 + v105);
            --v108;
          }
          while (v108);
        }
        sub_1C978D20C(&__dst, v179, (_DWORD)v78 << v174->i32[2], v178 << v174->i32[2], v174->i32[3], v173, 1u);
        (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, uint64_t))&v165[8 * v98])(v181, v105, &a35, v167, &a19, v180, v172);
        sub_1C978D2B8((int *)&__dst);
        v97 = v103;
        v84 = v176;
      }
      v109 = v174->i32[3];
      v67 += v109;
      v69 += v109;
      v181 += v109;
      v180 += v109;
      v60 += 16;
      v78 = (v78 + 1);
      v71 = HIDWORD(vars8);
      LODWORD(v76) = v97;
      v77 = v84;
    }
    while ((int)v78 < v174[1].i32[0] - 1);
    v110 = v84;
    v168 = v97;
    LOBYTE(v71) = BYTE4(vars8);
    v55 = v162;
  }
  v111 = vars0;
  v112 = sub_1C970EA84(v179, v78, v178, v71 & 0x5D);
  v113 = *(_DWORD *)(v163 + 520) - (v174[1].i32[0] - 1) * v174->i32[3];
  v114 = *v60;
  v115 = v55;
  if ((v114 & 1) != 0)
  {
    v116 = (v114 >> 1) & 7;
    if (v116 > 4)
      return result;
    if ((_DWORD)v116 == 4)
    {
      v117 = 0;
      v118 = v60[13];
      a35 = 0u;
      a36 = 0u;
      v119 = v173;
      v120 = v171;
      do
      {
        *((_BYTE *)&a35 + ((v118 + (_BYTE)v117) & 0x1F)) = v60[v117 + 1];
        ++v117;
      }
      while (v117 != 4);
    }
    else
    {
      LOWORD(a35) = *(_WORD *)(v60 + 1);
      *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 3);
      BYTE2(a35) = 0;
      v119 = v173;
      v120 = v171;
    }
    v162 = v115;
    if (v119 > 0 && v110)
    {
      v122 = (char *)(v67 - 1);
      v123 = v119;
      v124 = &a39;
      do
      {
        *v124++ = *v122;
        v122 += v120;
        --v123;
      }
      while (v123);
    }
    sub_1C978D20C(&__dst, v179, (_DWORD)v78 << v174->i32[2], v178 << v174->i32[2], v113, v119, 0);
    if ((v112 & 4) != 0)
      v125 = 34;
    else
      v125 = 2;
    if ((v112 & 4) != 0)
      v126 = 17;
    else
      v126 = 1;
    v127 = v125 & 0xFFFFFF7F | (((v112 & 8) != 0) << 7);
    v128 = v126 & 0xFFFFFFBF | (((v112 & 8) != 0) << 6);
    v129 = v112;
    HIDWORD(vars8) = v113;
    v130 = v113 >> 3;
    v131 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v174[12] + v116;
    v132 = 4;
    v177 = v129;
    v133 = v129;
    do
    {
      if ((v130 & (1 << --v132)) != 0)
      {
        v130 -= 1 << v132;
        if (v130)
          v134 = v127;
        else
          v134 = 0;
        v135 = v134 | v133;
        v133 = v133 & 0xC | v128;
        (*v131)(v67, v171, &a35, v135, &a39, v69, v173);
        v67 += 8 << v132;
        v69 += 8 << v132;
      }
      v131 -= 5;
    }
    while (v132);
    sub_1C978D2B8((int *)&__dst);
    LODWORD(v114) = *v60;
    v115 = v162;
    v111 = vars0;
    v112 = v177;
    v113 = HIDWORD(vars8);
  }
  if ((v114 & 0x10) == 0)
  {
LABEL_96:
    result = vextq_s8(v174[2], v174[2], 8uLL);
    v160 = vextq_s8(v174[3], v174[3], 8uLL);
    v174[2] = result;
    v174[3] = v160;
    return result;
  }
  if (v114 <= 0x9F)
  {
    v136 = v114 >> 5;
    if (v114 >> 5 == 4)
    {
      v137 = 0;
      v138 = v60[14];
      a35 = 0u;
      a36 = 0u;
      v139 = v181;
      v140 = v173;
      v141 = v168;
      do
      {
        *((_BYTE *)&a35 + ((v138 + (_BYTE)v137) & 0x1F)) = v60[v137 + 5];
        ++v137;
      }
      while (v137 != 4);
      v142 = 0;
      v143 = v60[15];
      a37 = 0u;
      a38 = 0u;
      do
      {
        *((_BYTE *)&a37 + ((v143 + (_BYTE)v142) & 0x1F)) = v60[v142 + 9];
        ++v142;
      }
      while (v142 != 4);
    }
    else
    {
      LOWORD(a35) = *(_WORD *)(v60 + 5);
      *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 7);
      BYTE2(a35) = 0;
      LOWORD(a37) = *(_WORD *)(v60 + 9);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 11);
      BYTE2(a37) = 0;
      v139 = v181;
      v140 = v173;
      v141 = v168;
    }
    v162 = v115;
    if (v140 > 1 && v141)
    {
      v145 = (_WORD *)(v139 - 2);
      v146 = &a19;
      v147 = v172;
      do
      {
        *(_WORD *)v146 = *v145;
        v146 += 2;
        v145 = (_WORD *)((char *)v145 + v111);
        --v147;
      }
      while (v147);
    }
    sub_1C978D20C(&__dst, v179, (_DWORD)v78 << v174->i32[2], v178 << v174->i32[2], v113, v140, 1u);
    if ((v112 & 4) != 0)
      v148 = 34;
    else
      v148 = 2;
    v149 = v112;
    if ((v112 & 4) != 0)
      v150 = 17;
    else
      v150 = 1;
    v151 = v149;
    v152 = v148 & 0xFFFFFF7F | (((v149 & 8) != 0) << 7);
    v153 = v150 & 0xFFFFFFBF | (((v149 & 8) != 0) << 6);
    v154 = v113 >> 3;
    v155 = &v174[24].i64[v136 + 1];
    v156 = 5;
    v157 = v180;
    do
    {
      if ((v154 & (1 << --v156)) != 0)
      {
        v154 -= 1 << v156;
        if (v154)
          v158 = v152;
        else
          v158 = 0;
        v159 = v158 | v151;
        v151 = v151 & 0xC | v153;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))*v155)(v139, vars0, &a35, v159, &a19, v157, v172);
        v139 += 8 << v156;
        v157 += 8 << v156;
      }
      v155 -= 5;
    }
    while (v156);
    sub_1C978D2B8((int *)&__dst);
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1C97EC2DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t result;
  unint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  _WORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 v74;
  uint64_t v75;
  int v76;
  _WORD *v78;
  char *v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  void (**v86)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t vars0;
  unsigned int vars8;
  unsigned int vars8_4;

  a38 = *MEMORY[0x1E0C80C00];
  vars0 = a2;
  v39 = *(_QWORD *)(a2 + 8);
  v40 = *(_DWORD *)(a1 + 16);
  v41 = *(_DWORD *)(a1 + 20);
  v42 = (unsigned __int8 *)(*(_QWORD *)(v39 + 1000) + 16 * v40 * a3);
  v43 = *(_QWORD *)(v39 + 416);
  v45 = *(_DWORD *)(a1 + 8);
  v44 = *(int *)(a1 + 12);
  v46 = (int)v44 * (uint64_t)a3;
  v47 = *(_QWORD *)(v39 + 400) + ((v43 * v46) << *(_BYTE *)(v39 + 531));
  v48 = *(_QWORD *)(a1 + 32);
  if (a3)
    v49 = 38;
  else
    v49 = 2;
  if (a3)
    v50 = 17;
  else
    v50 = 1;
  vars8 = a3;
  v92 = v39;
  if (v41 - 1 <= a3)
  {
    vars8_4 = *(_DWORD *)(v39 + 524) - v46;
  }
  else
  {
    v49 = v49 | 0x88;
    v50 |= 0x40u;
    memcpy(*(void **)(a1 + 40), (const void *)(v47 + 2 * v43 * (v44 - 1)), 2 * *(int *)(v39 + 520));
    vars8_4 = *(_DWORD *)(a1 + 12);
    v40 = *(_DWORD *)(a1 + 16);
  }
  v93 = &v91;
  v96 = v43;
  if (v40 < 2)
  {
    v52 = 0;
    v57 = 0;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    v94 = vars8_4;
    v95 = a1 + 40 * v45 - 48;
    HIDWORD(v97) = v50 | v49;
    v53 = 2 * v43;
    do
    {
      v54 = sub_1C970EA84(vars0, v52, vars8, v49);
      v56 = *v42;
      v57 = (v56 & 1) == 0;
      if ((v56 & 1) != 0)
      {
        v58 = (v56 >> 1) & 7;
        if (v58 > 4)
          return result;
        if ((_DWORD)v58 == 4)
        {
          v59 = 0;
          v60 = v42[13];
          a9 = 0u;
          a10 = 0u;
          do
          {
            *((_BYTE *)&a9 + ((v60 + (_BYTE)v59) & 0x1F)) = v42[v59 + 1];
            ++v59;
          }
          while (v59 != 4);
        }
        else
        {
          LOWORD(a9) = *(_WORD *)(v42 + 1);
          *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v42 + 3);
          BYTE2(a9) = 0;
        }
        if (v51 && (int)vars8_4 > 0)
        {
          v61 = (_WORD *)(v47 - 2);
          v62 = &a15;
          v63 = v94;
          do
          {
            *(_WORD *)v62 = *v61;
            v62 += 2;
            v61 = (_WORD *)((char *)v61 + v53);
            --v63;
          }
          while (v63);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))(v95 + 8 * v58))(v47, v96, &a9, v54, &a15, v48, vars8_4);
      }
      v64 = *(int *)(a1 + 12);
      v47 += 2 * v64;
      v48 += 2 * v64;
      v42 += 16;
      v52 = (v52 + 1);
      v49 = HIDWORD(v97);
      v51 = v57;
    }
    while ((int)v52 < *(_DWORD *)(a1 + 16) - 1);
    LOBYTE(v49) = BYTE4(v97);
  }
  v65 = sub_1C970EA84(vars0, v52, vars8, v49 & 0x5D);
  v66 = *v42;
  if ((v66 & 1) == 0)
    goto LABEL_52;
  v67 = *(_DWORD *)(a1 + 16) - 1;
  v68 = (v66 >> 1) & 7;
  if (v68 <= 4)
  {
    v69 = v65;
    v70 = *(_DWORD *)(v92 + 520);
    v71 = *(_DWORD *)(a1 + 12);
    if ((_DWORD)v68 == 4)
    {
      v72 = 0;
      v73 = v42 + 1;
      v74 = v42[13];
      a9 = 0u;
      a10 = 0u;
      v75 = v96;
      do
      {
        *((_BYTE *)&a9 + ((v74 + (_BYTE)v72) & 0x1F)) = v73[v72];
        ++v72;
      }
      while (v72 != 4);
    }
    else
    {
      LOWORD(a9) = *(_WORD *)(v42 + 1);
      *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v42 + 3);
      BYTE2(a9) = 0;
      v75 = v96;
    }
    v76 = v70 - v67 * v71;
    if ((int)vars8_4 > 0 && v57)
    {
      v78 = (_WORD *)(v47 - 2);
      v79 = &a15;
      v80 = vars8_4;
      do
      {
        *(_WORD *)v79 = *v78;
        v79 += 2;
        v78 += v75;
        --v80;
      }
      while (v80);
    }
    if ((v65 & 4) != 0)
      v81 = 34;
    else
      v81 = 2;
    if ((v65 & 4) != 0)
      v82 = 17;
    else
      v82 = 1;
    v83 = v81 & 0xFFFFFF7F | (((v65 & 8) != 0) << 7);
    v84 = v82 & 0xFFFFFFBF | (((v65 & 8) != 0) << 6);
    v85 = v76 >> 3;
    v86 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))(a1 + 8 * v68 + 192);
    v87 = 4;
    do
    {
      if ((v85 & (1 << --v87)) != 0)
      {
        v85 -= 1 << v87;
        if (v85)
          v88 = v83;
        else
          v88 = 0;
        v89 = v88 | v69;
        v69 = v69 & 0xC | v84;
        (*v86)(v47, v75, &a9, v89, &a15, v48, vars8_4);
        v47 += 2 * (8 << v87);
        v48 += 2 * (8 << v87);
      }
      v86 -= 5;
    }
    while (v87);
LABEL_52:
    result = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    v90 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
    *(int8x16_t *)(a1 + 32) = result;
    *(int8x16_t *)(a1 + 48) = v90;
  }
  return result;
}

int8x16_t sub_1C97EC6EC(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t __dst)
{
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  __int8 *v29;
  int8x16_t *v30;
  uint64_t v31;
  int8x16_t result;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  _WORD *v39;
  unint64_t *v40;
  uint64_t v41;
  int8x16_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 v56;
  int v57;
  _WORD *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int8x16_t *v67;
  int v68;
  void (**v69)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD);
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t *v81;
  uint64_t v82;
  uint64_t vars0;
  unsigned int vars8;
  unsigned int vars8_4;

  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = &v74;
  STACK[0x12178] = *MEMORY[0x1E0C80C00];
  v80 = v12;
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_DWORD *)(v9 + 16);
  v15 = *(_DWORD *)(v9 + 20);
  v16 = (unsigned __int8 *)(*(_QWORD *)(v13 + 1000) + 16 * v14 * v10);
  v17 = *(_QWORD *)(v13 + 416);
  v19 = *(_DWORD *)(v9 + 8);
  v18 = *(int *)(v9 + 12);
  v20 = (int)v18 * (uint64_t)v10;
  v21 = *(_QWORD *)(v13 + 400) + ((v17 * v20) << *(_BYTE *)(v13 + 531));
  v22 = *(_QWORD *)(v9 + 32);
  if (v10)
    v23 = 38;
  else
    v23 = 2;
  if (v10)
    v24 = 17;
  else
    v24 = 1;
  vars8_4 = v10;
  v81 = (int8x16_t *)v9;
  v75 = v13;
  if (v15 - 1 <= v10)
  {
    vars8 = *(_DWORD *)(v13 + 524) - v20;
  }
  else
  {
    v25 = v9;
    v23 = v23 | 0x88;
    v24 |= 0x40u;
    memcpy(*(void **)(v9 + 40), (const void *)(v21 + 2 * v17 * (v18 - 1)), 2 * *(int *)(v13 + 520));
    vars8 = *(_DWORD *)(v25 + 12);
    v14 = *(_DWORD *)(v25 + 16);
  }
  v26 = v80;
  if (v14 < 2)
  {
    v28 = 0;
    v48 = 0;
    v30 = v81;
  }
  else
  {
    v76 = &v74;
    v27 = 0;
    v28 = 0;
    v29 = &v81->i8[40 * v19];
    v30 = v81;
    v77 = vars8;
    v78 = v29 - 48;
    LODWORD(vars0) = v24 | v23;
    v79 = v17;
    do
    {
      v31 = sub_1C970EA84(v26, v28, vars8_4, v23);
      v33 = *v16;
      v34 = (v33 & 1) == 0;
      if ((v33 & 1) != 0)
      {
        v35 = (v33 >> 1) & 7;
        if (v35 > 4)
          return result;
        v36 = v31;
        HIDWORD(v82) = (v33 & 1) == 0;
        if ((_DWORD)v35 == 4)
        {
          v37 = 0;
          v38 = v16[13];
          *(_OWORD *)&STACK[0x12080] = 0u;
          *(_OWORD *)&STACK[0x12090] = 0u;
          do
          {
            *((_BYTE *)&STACK[0x12080] + ((v38 + (_BYTE)v37) & 0x1F)) = v16[v37 + 1];
            ++v37;
          }
          while (v37 != 4);
        }
        else
        {
          LOWORD(STACK[0x12080]) = *(_WORD *)(v16 + 1);
          LOWORD(STACK[0x12083]) = *(_WORD *)(v16 + 3);
          LOBYTE(STACK[0x12082]) = 0;
        }
        if ((v27 & ((int)vars8 > 0)) == 1)
        {
          v39 = (_WORD *)(v21 - 2);
          v40 = &STACK[0x120C0];
          v41 = v77;
          do
          {
            *(_WORD *)v40 = *v39;
            v40 = (unint64_t *)((char *)v40 + 2);
            v39 += v17;
            --v41;
          }
          while (v41);
        }
        v42 = v81;
        v43 = v26;
        v44 = vars8;
        sub_1C978EA14(&__dst, v43, (_DWORD)v28 << v81->i32[2], vars8_4 << v81->i32[2], v81->i32[3], vars8);
        v45 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))&v78[8 * v35];
        v30 = v42;
        v46 = v44;
        v26 = v80;
        v45(v21, v79, &STACK[0x12080], v36, &STACK[0x120C0], v22, v46);
        sub_1C978BDBC((int *)&__dst);
        v34 = HIDWORD(v82);
      }
      v47 = v30->i32[3];
      v21 += 2 * v47;
      v22 += 2 * v47;
      v16 += 16;
      v28 = (v28 + 1);
      v23 = vars0;
      v27 = v34;
    }
    while ((int)v28 < v30[1].i32[0] - 1);
    v48 = v34;
    LOBYTE(v23) = vars0;
    v11 = v76;
    v17 = v79;
  }
  v49 = sub_1C970EA84(v26, v28, vars8_4, v23 & 0x5D);
  v50 = *v16;
  if ((v50 & 1) == 0)
    goto LABEL_54;
  v51 = v30[1].i32[0] - 1;
  v52 = (v50 >> 1) & 7;
  if (v52 <= 4)
  {
    v53 = v49;
    vars0 = v52;
    v54 = *(_DWORD *)(v75 + 520) - v51 * v30->i32[3];
    if ((_DWORD)v52 == 4)
    {
      v55 = 0;
      v56 = v16[13];
      *(_OWORD *)&STACK[0x12080] = 0u;
      *(_OWORD *)&STACK[0x12090] = 0u;
      do
      {
        *((_BYTE *)&STACK[0x12080] + ((v56 + (_BYTE)v55) & 0x1F)) = v16[v55 + 1];
        ++v55;
      }
      while (v55 != 4);
    }
    else
    {
      LOWORD(STACK[0x12080]) = *(_WORD *)(v16 + 1);
      LOWORD(STACK[0x12083]) = *(_WORD *)(v16 + 3);
      LOBYTE(STACK[0x12082]) = 0;
    }
    v76 = v11;
    if ((int)vars8 > 0)
      v57 = v48;
    else
      v57 = 0;
    if (v57 == 1)
    {
      v58 = (_WORD *)(v21 - 2);
      v59 = &STACK[0x120C0];
      v60 = vars8;
      do
      {
        *(_WORD *)v59 = *v58;
        v59 = (unint64_t *)((char *)v59 + 2);
        v58 += v17;
        --v60;
      }
      while (v60);
    }
    v61 = v17;
    v62 = v54;
    sub_1C978EA14(&__dst, v26, (_DWORD)v28 << v30->i32[2], vars8_4 << v30->i32[2], v54, vars8);
    if ((v53 & 4) != 0)
      v63 = 34;
    else
      v63 = 2;
    if ((v53 & 4) != 0)
      v64 = 17;
    else
      v64 = 1;
    v65 = v63 & 0xFFFFFF7F | (((v53 & 8) != 0) << 7);
    v66 = v64 & 0xFFFFFFBF | (((v53 & 8) != 0) << 6);
    v67 = v30;
    v68 = v62 >> 3;
    v69 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))&v67[12]
        + vars0;
    v70 = 4;
    do
    {
      if ((v68 & (1 << --v70)) != 0)
      {
        v68 -= 1 << v70;
        if (v68)
          v71 = v65;
        else
          v71 = 0;
        v72 = v71 | v53;
        v53 = v53 & 0xC | v66;
        (*v69)(v21, v61, &STACK[0x12080], v72, &STACK[0x120C0], v22, vars8);
        v21 += 2 * (8 << v70);
        v22 += 2 * (8 << v70);
      }
      v69 -= 5;
    }
    while (v70);
    sub_1C978BDBC((int *)&__dst);
    v30 = v81;
LABEL_54:
    result = vextq_s8(v30[2], v30[2], 8uLL);
    v73 = vextq_s8(v30[3], v30[3], 8uLL);
    v30[2] = result;
    v30[3] = v73;
  }
  return result;
}

int8x16_t sub_1C97ECC00(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t result;
  unint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned __int8 v62;
  int v63;
  char *v65;
  uint64_t v66;
  char *v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  void (**v73)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  __int128 v87;
  __int128 vars0;

  a28 = *MEMORY[0x1E0C80C00];
  v84 = a2;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = *(_DWORD *)(a1 + 16);
  v31 = *(_DWORD *)(a1 + 20);
  v32 = (unsigned __int8 *)(*(_QWORD *)(v29 + 1000) + 16 * v30 * a3);
  v33 = *(_QWORD *)(v29 + 416);
  v35 = *(_DWORD *)(a1 + 8);
  v34 = *(int *)(a1 + 12);
  v36 = (int)v34 * (uint64_t)a3;
  v37 = *(_QWORD *)(v29 + 400) + ((v33 * v36) << *(_BYTE *)(v29 + 531));
  v38 = *(_QWORD *)(a1 + 32);
  if (a3)
    v39 = 38;
  else
    v39 = 2;
  if (a3)
    v40 = 17;
  else
    v40 = 1;
  v85 = a3;
  v79 = v29;
  if (v31 - 1 <= a3)
  {
    v86 = *(_DWORD *)(v29 + 524) - v36;
  }
  else
  {
    v39 = v39 | 0x88;
    v40 |= 0x40u;
    memcpy(*(void **)(a1 + 40), (const void *)(v37 + v33 * (v34 - 1)), *(int *)(v29 + 520));
    v86 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  v80 = &v78;
  if (v30 < 2)
  {
    v42 = 0;
    v46 = 0;
  }
  else
  {
    v41 = 0;
    v42 = 0;
    v81 = v86;
    v82 = a1 + 40 * v35 - 48;
    HIDWORD(v83) = v40 | v39;
    do
    {
      v43 = sub_1C970EA84(v84, v42, v85, v39);
      v45 = *v32;
      v46 = (v45 & 1) == 0;
      if ((v45 & 1) != 0)
      {
        v47 = (v45 >> 1) & 7;
        if (v47 > 4)
          return result;
        if ((_DWORD)v47 == 4)
        {
          v48 = 0;
          v49 = v32[13];
          v87 = 0u;
          vars0 = 0u;
          do
          {
            *((_BYTE *)&v87 + ((v49 + (_BYTE)v48) & 0x1F)) = v32[v48 + 1];
            ++v48;
          }
          while (v48 != 4);
        }
        else
        {
          LOWORD(v87) = *(_WORD *)(v32 + 1);
          *(_WORD *)((char *)&v87 + 3) = *(_WORD *)(v32 + 3);
          BYTE2(v87) = 0;
        }
        if (v41 && (int)v86 > 0)
        {
          v50 = (char *)(v37 - 1);
          v51 = &a13;
          v52 = v81;
          do
          {
            *v51++ = *v50;
            v50 += v33;
            --v52;
          }
          while (v52);
        }
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))(v82 + 8 * v47))(v37, v33, &v87, v43, &a13, v38, v86);
      }
      v53 = *(int *)(a1 + 12);
      v37 += v53;
      v38 += v53;
      v32 += 16;
      v42 = (v42 + 1);
      v39 = HIDWORD(v83);
      v41 = v46;
    }
    while ((int)v42 < *(_DWORD *)(a1 + 16) - 1);
    LOBYTE(v39) = BYTE4(v83);
  }
  v54 = sub_1C970EA84(v84, v42, v85, v39 & 0x5D);
  v55 = *v32;
  if ((v55 & 1) == 0)
    goto LABEL_52;
  v56 = *(_DWORD *)(a1 + 16) - 1;
  v57 = (v55 >> 1) & 7;
  if (v57 <= 4)
  {
    v58 = v54;
    v59 = *(_DWORD *)(v79 + 520);
    v60 = *(_DWORD *)(a1 + 12);
    if ((_DWORD)v57 == 4)
    {
      v61 = 0;
      v62 = v32[13];
      v87 = 0u;
      vars0 = 0u;
      do
      {
        *((_BYTE *)&v87 + ((v62 + (_BYTE)v61) & 0x1F)) = v32[v61 + 1];
        ++v61;
      }
      while (v61 != 4);
    }
    else
    {
      LOWORD(v87) = *(_WORD *)(v32 + 1);
      *(_WORD *)((char *)&v87 + 3) = *(_WORD *)(v32 + 3);
      BYTE2(v87) = 0;
    }
    v63 = v59 - v56 * v60;
    if ((int)v86 > 0 && v46)
    {
      v65 = (char *)(v37 - 1);
      v66 = v86;
      v67 = &a13;
      do
      {
        *v67++ = *v65;
        v65 += v33;
        --v66;
      }
      while (v66);
    }
    if ((v54 & 4) != 0)
      v68 = 34;
    else
      v68 = 2;
    if ((v54 & 4) != 0)
      v69 = 17;
    else
      v69 = 1;
    v70 = v68 & 0xFFFFFF7F | (((v54 & 8) != 0) << 7);
    v71 = v69 & 0xFFFFFFBF | (((v54 & 8) != 0) << 6);
    v72 = v63 >> 3;
    v73 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))(a1 + 8 * v57 + 192);
    v74 = 4;
    do
    {
      if ((v72 & (1 << --v74)) != 0)
      {
        v72 -= 1 << v74;
        if (v72)
          v75 = v70;
        else
          v75 = 0;
        v76 = v75 | v58;
        v58 = v58 & 0xC | v71;
        (*v73)(v37, v33, &v87, v76, &a13, v38, v86);
        v37 += 8 << v74;
        v38 += 8 << v74;
      }
      v73 -= 5;
    }
    while (v74);
LABEL_52:
    result = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    v77 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
    *(int8x16_t *)(a1 + 32) = result;
    *(int8x16_t *)(a1 + 48) = v77;
  }
  return result;
}

int8x16_t sub_1C97ECFF8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t __dst)
{
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  __int8 *v48;
  int8x16_t *v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t result;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned __int8 v76;
  int v77;
  char *v78;
  uint64_t v79;
  char *v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int8x16_t *v86;
  int v87;
  void (**v88)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD);
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  int8x16_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  int8x16_t *v99;
  uint64_t v100;
  uint64_t vars0;
  unsigned int vars8;
  unsigned int vars8_4;

  v29 = MEMORY[0x1E0C80A78](a1);
  v31 = &v93;
  STACK[0x9138] = *MEMORY[0x1E0C80C00];
  v98 = v32;
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(_DWORD *)(v29 + 16);
  v35 = *(_DWORD *)(v29 + 20);
  v36 = (unsigned __int8 *)(*(_QWORD *)(v33 + 1000) + 16 * v34 * v30);
  v37 = *(_QWORD *)(v33 + 416);
  v39 = *(_DWORD *)(v29 + 8);
  v38 = *(int *)(v29 + 12);
  v40 = (int)v38 * (uint64_t)v30;
  v41 = *(_QWORD *)(v33 + 400) + ((v37 * v40) << *(_BYTE *)(v33 + 531));
  v42 = *(_QWORD *)(v29 + 32);
  if (v30)
    v43 = 38;
  else
    v43 = 2;
  if (v30)
    v44 = 17;
  else
    v44 = 1;
  vars8_4 = v30;
  v99 = (int8x16_t *)v29;
  v94 = v33;
  if (v35 - 1 <= v30)
  {
    vars8 = *(_DWORD *)(v33 + 524) - v40;
  }
  else
  {
    v45 = v29;
    v43 = v43 | 0x88;
    v44 |= 0x40u;
    memcpy(*(void **)(v29 + 40), (const void *)(v41 + v37 * (v38 - 1)), *(int *)(v33 + 520));
    vars8 = *(_DWORD *)(v45 + 12);
    v34 = *(_DWORD *)(v45 + 16);
  }
  if (v34 < 2)
  {
    v47 = 0;
    v68 = 0;
    v50 = v98;
    v49 = v99;
  }
  else
  {
    v95 = &v93;
    v46 = 0;
    v47 = 0;
    v48 = &v99->i8[40 * v39];
    v49 = v99;
    v96 = vars8;
    v97 = v48 - 48;
    LODWORD(vars0) = v44 | v43;
    v50 = v98;
    do
    {
      v51 = sub_1C970EA84(v50, v47, vars8_4, v43);
      v53 = *v36;
      v54 = (v53 & 1) == 0;
      if ((v53 & 1) != 0)
      {
        v55 = (v53 >> 1) & 7;
        if (v55 > 4)
          return result;
        v56 = v51;
        if ((_DWORD)v55 == 4)
        {
          v57 = 0;
          v58 = v36[13];
          a9 = 0u;
          a10 = 0u;
          do
          {
            *((_BYTE *)&a9 + ((v58 + (_BYTE)v57) & 0x1F)) = v36[v57 + 1];
            ++v57;
          }
          while (v57 != 4);
        }
        else
        {
          LOWORD(a9) = *(_WORD *)(v36 + 1);
          *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v36 + 3);
          BYTE2(a9) = 0;
        }
        HIDWORD(v100) = v54;
        if ((v46 & ((int)vars8 > 0)) == 1)
        {
          v59 = (char *)(v41 - 1);
          v60 = &a15;
          v61 = v96;
          do
          {
            *v60++ = *v59;
            v59 += v37;
            --v61;
          }
          while (v61);
        }
        v62 = v99;
        v63 = v50;
        v64 = vars8;
        sub_1C978FA80(&__dst, v63, (_DWORD)v47 << v99->i32[2], vars8_4 << v99->i32[2], v99->i32[3], vars8);
        v65 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))&v97[8 * v55];
        v49 = v62;
        v66 = v64;
        v50 = v98;
        v65(v41, v37, &a9, v56, &a15, v42, v66);
        sub_1C978D2B8((int *)&__dst);
        v54 = HIDWORD(v100);
      }
      v67 = v49->i32[3];
      v41 += v67;
      v42 += v67;
      v36 += 16;
      v47 = (v47 + 1);
      v43 = vars0;
      v46 = v54;
    }
    while ((int)v47 < v49[1].i32[0] - 1);
    v68 = v54;
    LOBYTE(v43) = vars0;
    v31 = v95;
  }
  v69 = sub_1C970EA84(v50, v47, vars8_4, v43 & 0x5D);
  v70 = *v36;
  if ((v70 & 1) == 0)
    goto LABEL_54;
  v71 = v49[1].i32[0] - 1;
  v72 = (v70 >> 1) & 7;
  if (v72 <= 4)
  {
    v73 = v69;
    vars0 = v72;
    v74 = *(_DWORD *)(v94 + 520) - v71 * v49->i32[3];
    if ((_DWORD)v72 == 4)
    {
      v75 = 0;
      v76 = v36[13];
      a9 = 0u;
      a10 = 0u;
      do
      {
        *((_BYTE *)&a9 + ((v76 + (_BYTE)v75) & 0x1F)) = v36[v75 + 1];
        ++v75;
      }
      while (v75 != 4);
    }
    else
    {
      LOWORD(a9) = *(_WORD *)(v36 + 1);
      *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v36 + 3);
      BYTE2(a9) = 0;
    }
    v95 = v31;
    if ((int)vars8 > 0)
      v77 = v68;
    else
      v77 = 0;
    if (v77 == 1)
    {
      v78 = (char *)(v41 - 1);
      v79 = vars8;
      v80 = &a15;
      do
      {
        *v80++ = *v78;
        v78 += v37;
        --v79;
      }
      while (v79);
    }
    v81 = v74;
    sub_1C978FA80(&__dst, v50, (_DWORD)v47 << v49->i32[2], vars8_4 << v49->i32[2], v74, vars8);
    if ((v73 & 4) != 0)
      v82 = 34;
    else
      v82 = 2;
    if ((v73 & 4) != 0)
      v83 = 17;
    else
      v83 = 1;
    v84 = v82 & 0xFFFFFF7F | (((v73 & 8) != 0) << 7);
    v85 = v83 & 0xFFFFFFBF | (((v73 & 8) != 0) << 6);
    v86 = v49;
    v87 = v81 >> 3;
    v88 = (void (**)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))&v86[12] + vars0;
    v89 = 4;
    do
    {
      if ((v87 & (1 << --v89)) != 0)
      {
        v87 -= 1 << v89;
        if (v87)
          v90 = v84;
        else
          v90 = 0;
        v91 = v90 | v73;
        v73 = v73 & 0xC | v85;
        (*v88)(v41, v37, &a9, v91, &a15, v42, vars8);
        v41 += 8 << v89;
        v42 += 8 << v89;
      }
      v88 -= 5;
    }
    while (v89);
    sub_1C978D2B8((int *)&__dst);
    v49 = v99;
LABEL_54:
    result = vextq_s8(v49[2], v49[2], 8uLL);
    v92 = vextq_s8(v49[3], v49[3], 8uLL);
    v49[2] = result;
    v49[3] = v92;
  }
  return result;
}

uint64_t sub_1C97ED4C0(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v6;

  if (a4 != a3)
  {
    v6 = result;
    result = (*(uint64_t (**)(_QWORD))(result + 432))(*(_QWORD *)(a2 + 400) + ((*(_QWORD *)(a2 + 416) * a3) << *(_BYTE *)(a2 + 531)));
    if (*(_BYTE *)(a2 + 532))
      return (*(uint64_t (**)(_QWORD))(v6 + 440))(*(_QWORD *)(a2 + 408)+ ((*(_QWORD *)(a2 + 424) * (a3 >> (*(_BYTE *)(a2 + 532) == 1))) << *(_BYTE *)(a2 + 531)));
  }
  return result;
}

double sub_1C97ED588(uint64_t a1, char a2, int a3, double a4, double a5, double a6)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  uint64_t v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;

  if (*(_DWORD *)(a1 + 92))
  {
    if (a6 <= 0.0)
      v6 = 1;
    else
      v6 = a3;
    v7 = *(double *)(a1 + 16);
    v8 = *(double *)(a1 + 24);
    v9 = v7 / a6;
    v10 = 1.0;
    if (v6)
      v9 = 1.0;
    *(double *)(a1 + 40) = a6;
    if (a3)
    {
      if (a6 > 0.0)
        v10 = v8 / a6;
      return v10 * a4;
    }
    if ((a2 & 1) != 0)
    {
      v10 = v9;
      return v10 * a4;
    }
    v27 = *(int *)(a1 + 52);
    if ((int)v27 > 6 * *(_DWORD *)(a1 + 116))
    {
      if (a5 <= 0.04)
      {
        v28 = *(_QWORD *)(a1 + 80);
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 80);
        if (v28 <= v27)
        {
LABEL_45:
          v18 = v28 <= v27;
          v29 = v28 - v27;
          if (v18)
          {
            v33 = (a5 + -0.04) * a6;
          }
          else
          {
            v30 = (double)(int)v27 / (double)v29;
            v31 = 2.0;
            if (v30 < 2.0)
              v31 = (double)(int)v27 / (double)v29;
            if (v30 <= 0.5)
              v32 = 0.5;
            else
              v32 = v31;
            v33 = (a5 + -0.04) * a6 * v32;
          }
          v34 = 1.0;
          if (v7 > 0.0)
            v34 = (v8 * 0.7 + v7 * 0.3) / v7;
          if (v33 < a6)
          {
            v35 = a6 / (a6 - v33);
            if (v34 < v35)
            {
              if (v34 <= 1.0)
                v34 = v35 - (1.0 - v34);
              else
                v34 = v35;
            }
          }
          goto LABEL_66;
        }
      }
      if (v28 >= 1 && (double)(int)v27 * a5 / ((double)v28 + 0.01) > 0.04)
        goto LABEL_45;
    }
    if (v8 / v7 >= 0.8)
    {
      v34 = 1.0;
      if (v7 <= 0.0 || v8 / v7 <= 1.3)
        goto LABEL_66;
    }
    else
    {
      v34 = 1.0;
      if (v7 <= 0.0)
        goto LABEL_66;
    }
    v34 = (v8 * 0.7 + v7 * 0.3) / v7;
LABEL_66:
    v36 = 2.0;
    if (v34 < 2.0)
      v36 = v34;
    if (v34 <= 0.5)
      v37 = 0.5;
    else
      v37 = v36;
    v10 = v9 * v37;
    return v10 * a4;
  }
  v11 = *(double *)(a1 + 16);
  if (a5 > 0.01 && *(double *)(a1 + 24) > v11 * 1.5)
    ++*(_DWORD *)(a1 + 68);
  v12 = *(double *)(a1 + 104);
  v10 = v11 / a6;
  if (v12 < a5 && (a2 & 1) == 0 && *(int *)(a1 + 60) >= 5)
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(int *)(a1 + 52);
    if (v13 <= v14 || v12 < (double)(int)v14 / (double)v13 * a5)
    {
      v15 = a6;
      if (*(_BYTE *)(a1 + 96))
        v15 = *(double *)(a1 + 40);
      v16 = 12.5;
      v17 = 12.5;
      v18 = v13 <= v14;
      v19 = v13 - v14;
      if (!v18)
        v17 = (double)(int)v14 / (double)v19;
      if (v17 <= 12.5 || *(_BYTE *)(a1 + 88) != 0)
        v16 = v17;
      v21 = (a5 - v12) * v15 * v16;
      v22 = a6 + -1.0;
      if (a6 + -1.0 >= v21)
        v22 = v21;
      v23 = *(double *)(a1 + 24);
      v24 = 1.0;
      if (v23 > v11)
      {
        v24 = (v11 + v23) * 0.5 / v11;
        v25 = v23 / v11;
        if (*(double *)(a1 + 72) > 0.03)
          v24 = v25;
      }
      v26 = a6 / (a6 - v22);
      if (v24 < v26)
      {
        v24 = v26;
        if (v26 > 2.0)
          v24 = 2.0;
      }
      v10 = v10 * fmax(v24, 1.0);
    }
  }
  return v10 * a4;
}

uint64_t sub_1C97ED8B0(uint64_t result, unint64_t a2, double a3, double a4)
{
  int v4;
  int v5;
  double v6;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;

  v4 = *(_DWORD *)(result + 52);
  *(_DWORD *)(result + 52) = v4 + 1;
  v5 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = v5 + 1;
  if (a4 >= 10.0)
  {
    v6 = (double)a2 * a3 / a4;
    v7 = v6 + *(double *)result;
    *(double *)result = v7;
    v8 = *(_DWORD *)(result + 56);
    if (v4 >= v8)
      *(double *)(result + 16) = v7 / (double)(v4 + 1 - v8);
    if (*(_DWORD *)(result + 92) == 1)
    {
      v9 = *(_DWORD *)(result + 32);
      v10 = *(unsigned int *)(result + 116);
      v11 = result + 32 * (v9 % (int)v10);
      *(double *)(v11 + 136) = a3;
      *(_QWORD *)(v11 + 128) = a2;
      *(double *)(v11 + 120) = a4;
      *(_QWORD *)(v11 + 144) = a2 - (int)*(double *)(result + 40);
      if ((int)v10 <= 0)
      {
        *(_DWORD *)(result + 48) = 0;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        if (v9 >= -1)
          v15 = -1;
        else
          v15 = v9;
        v16 = (v9 - v15);
        v17 = 0.0;
        v18 = v9;
        v19 = 0.0;
        do
        {
          if (v16 == v12)
            break;
          v20 = result + 32 * (v18 % (int)v10);
          v21 = *(double *)(v20 + 120);
          if (v21 >= 10.0)
          {
            v22 = dbl_1C9857DE0[v12];
            v19 = v19 + v22 * (*(double *)(v20 + 136) * (double)*(unint64_t *)(v20 + 128) / v21);
            v17 = v17 + v22;
            v13 += *(_DWORD *)(v20 + 144);
            ++v14;
          }
          ++v12;
          --v18;
        }
        while (v10 != v12);
        *(_DWORD *)(result + 48) = v13 / v14;
        if (v17 > 0.0)
          *(double *)(result + 24) = v19 / v17;
      }
      *(_DWORD *)(result + 32) = v9 + 1;
    }
    else if ((v5 & 0x80000000) == 0)
    {
      v23 = v6 + *(double *)(result + 8);
      *(double *)(result + 8) = v23;
      *(double *)(result + 24) = v23 / (double)(v5 + 1 - *(_DWORD *)(result + 64));
    }
  }
  else
  {
    ++*(_DWORD *)(result + 56);
    ++*(_DWORD *)(result + 64);
  }
  return result;
}

uint64_t sub_1C97EDA54(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  memset_pattern16((void *)(a1 + 408), &unk_1C9863110, 0x18uLL);
  *(_QWORD *)(a1 + 1760) = 0;
  *(_BYTE *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 1780) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 1784) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1800) = 0;
  *(_QWORD *)(a1 + 1816) = 0;
  *(_QWORD *)(a1 + 1808) = 0;
  return a1;
}

uint64_t sub_1C97EDAE0(uint64_t a1, uint64_t a2)
{
  double v4;
  int v5;
  char v6;
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  _BOOL4 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  FILE *v39;
  const char *v40;
  const char *v41;
  size_t v42;
  int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  float *i;
  double v87;
  int v89;

  *(_QWORD *)(a1 + 1688) = a2;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_DWORD *)(a1 + 1608) = 0;
  v4 = *(double *)(a2 + 472);
  *(double *)(a1 + 1616) = v4;
  *(_WORD *)(a1 + 1628) = 0;
  *(_WORD *)(a1 + 1640) = 0;
  *(_DWORD *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 1644) = 0;
  *(_BYTE *)(a1 + 1652) = 0;
  v5 = *(_DWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 1696) = v5;
  v6 = *(_BYTE *)(a2 + 552);
  *(_BYTE *)(a1 + 1697) = v6;
  v7 = *(char *)(a2 + 488);
  *(_WORD *)(a1 + 1698) = v7;
  *(_WORD *)(a1 + 1700) = v7;
  *(_WORD *)(a1 + 1702) = *(char *)(a2 + 489);
  *(double *)(a1 + 1704) = v4;
  v8 = *(_DWORD *)(a2 + 548);
  *(_DWORD *)(a1 + 1712) = v8;
  *(_BYTE *)(a1 + 1716) = 1;
  v9 = *(_DWORD *)(a2 + 512);
  if (v9 == 0x7FFFFFFF)
    v10 = 300;
  else
    v10 = *(_DWORD *)(a2 + 512);
  *(_DWORD *)(a1 + 1720) = v10;
  v11 = v9 != 0x7FFFFFFF;
  *(_BYTE *)(a1 + 1724) = v11;
  *(_WORD *)(a1 + 1725) = 0;
  if (dword_1ED1ACCC0 < 7)
  {
    v13 = v5;
    v14 = 1;
    v12 = a2;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "\n========================\n\nSinglepassRatecontroller()\n\nrc_option_ (bps, fps, frames) = (%d, %f, %d)\n\n========================\n\n", v8, v4, v10);
    syslog(31, "\n========================\n\nSinglepassRatecontroller()\n\nrc_option_ (bps, fps, frames) = (%d, %f, %d)\n\n========================\n\n", *(_DWORD *)(a1 + 1712), *(double *)(a1 + 1704), *(_DWORD *)(a1 + 1720));
    v12 = *(_QWORD *)(a1 + 1688);
    v13 = *(unsigned __int8 *)(a1 + 1696);
    v6 = *(_BYTE *)(a1 + 1697);
    v7 = *(_WORD *)(a1 + 1698);
    v4 = *(double *)(a1 + 1704);
    v8 = *(_DWORD *)(a1 + 1712);
    v14 = *(unsigned __int8 *)(a1 + 1716);
    v10 = *(_DWORD *)(a1 + 1720);
    v11 = *(_BYTE *)(a1 + 1724);
    v5 = *(_DWORD *)(v12 + 456);
  }
  *(_QWORD *)(a1 + 1672) = *(_QWORD *)(a2 + 688);
  *(_DWORD *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1727) = 0;
  *(int32x2_t *)(a1 + 1728) = vdup_n_s32(0x47C35000u);
  *(_QWORD *)(a1 + 1736) = 0x80000000800000;
  *(_DWORD *)(a1 + 1744) = 2;
  v15 = *(unsigned __int8 *)(v12 + 34);
  *(_BYTE *)(a1 + 1748) = v15 != 255;
  v16 = *(unsigned __int8 *)(a2 + 447);
  *(_BYTE *)(a1 + 1749) = v16;
  *(_DWORD *)(a1 + 1752) = 1;
  *(_DWORD *)(a1 + 312) = v5;
  v17 = (double)v8;
  *(double *)(a1 + 512) = (double)v8;
  *(_QWORD *)(a1 + 520) = 0x402E000000000000;
  *(_DWORD *)(a1 + 528) = 0;
  v18 = 15.0;
  *(double *)(a1 + 536) = (double)v8 / 15.0;
  *(_QWORD *)(a1 + 544) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 552) = 0u;
  v19 = (double)v7;
  *(_BYTE *)a1 = v6;
  *(double *)(a1 + 576) = v19;
  *(double *)(a1 + 584) = v19;
  *(double *)(a1 + 592) = v19;
  *(_DWORD *)(a1 + 616) = 120;
  *(_QWORD *)(a1 + 1768) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_WORD *)(a1 + 652) = 2;
  *(_BYTE *)(a1 + 655) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  v20 = v13 == 1;
  *(_DWORD *)(a1 + 712) = v20;
  v21 = *(unsigned __int16 *)(v12 + 466);
  *(_WORD *)(a1 + 500) = v21;
  v22 = *(unsigned __int16 *)(v12 + 468);
  *(_WORD *)(a1 + 502) = v22;
  *(_BYTE *)(a1 + 504) = v21 < v22;
  if (v21 >= v22)
  {
    v23 = v22;
    v22 = v21;
  }
  else
  {
    *(_WORD *)(a1 + 500) = v22;
    *(_WORD *)(a1 + 502) = v21;
    v23 = v21;
  }
  *(_DWORD *)(a1 + 676) = 0;
  *(_QWORD *)(a1 + 680) = 0x20000000;
  *(_BYTE *)(a1 + 708) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  if (v4 > 0.0 && v4 < 241.0)
  {
    *(double *)(a1 + 520) = v4;
    v18 = v4;
  }
  if (v8)
    *(double *)(a1 + 512) = v17;
  *(_BYTE *)(a1 + 651) = v14 != 0;
  *(_DWORD *)(a1 + 528) = v10;
  *(_BYTE *)(a1 + 532) = v11;
  *(_BYTE *)(a1 + 654) = v13 != 1;
  v24 = v4;
  *(_DWORD *)(a1 + 616) = (float)(v24 * 100000.0);
  v25 = *(unsigned __int8 *)(a1 + 1696);
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  v26 = v17 / v18;
  *(double *)(a1 + 760) = v26;
  *(_QWORD *)(a1 + 800) = v10;
  *(_BYTE *)(a1 + 808) = v11;
  *(_DWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 832) = 0xA00000000;
  *(_OWORD *)(a1 + 768) = xmmword_1C9862ED0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 812) = v20;
  *(_BYTE *)(a1 + 816) = v25;
  v27 = qword_1C9862EE0[v25 == 0];
  *(_QWORD *)(a1 + 824) = v27;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(double *)(a1 + 1200) = v26;
  *(_QWORD *)(a1 + 1240) = v10;
  *(_BYTE *)(a1 + 1248) = v11;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1272) = 0xA00000000;
  *(_OWORD *)(a1 + 1208) = xmmword_1C9862ED0;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1252) = v20;
  *(_BYTE *)(a1 + 1256) = v25;
  *(_QWORD *)(a1 + 1264) = v27;
  *(_BYTE *)(a1 + 1600) = 0;
  if (v16)
  {
    if (v15 == 255)
    {
      *(_DWORD *)(a1 + 1660) = 6;
      *(_OWORD *)(a1 + 240) = xmmword_1C9858628;
      *(_OWORD *)(a1 + 256) = unk_1C9858638;
      *(_OWORD *)(a1 + 272) = xmmword_1C9858648;
      *(_OWORD *)(a1 + 288) = unk_1C9858658;
      *(_OWORD *)(a1 + 176) = xmmword_1C98585E8;
      *(_OWORD *)(a1 + 192) = unk_1C98585F8;
      *(_OWORD *)(a1 + 208) = xmmword_1C9858608;
      *(_OWORD *)(a1 + 224) = unk_1C9858618;
      *(_OWORD *)(a1 + 112) = xmmword_1C98585A8;
      *(_OWORD *)(a1 + 128) = unk_1C98585B8;
      *(_OWORD *)(a1 + 144) = xmmword_1C98585C8;
      *(_OWORD *)(a1 + 160) = unk_1C98585D8;
      *(_OWORD *)(a1 + 48) = xmmword_1C9858568;
      *(_OWORD *)(a1 + 64) = unk_1C9858578;
      *(_OWORD *)(a1 + 80) = xmmword_1C9858588;
      *(_OWORD *)(a1 + 96) = unk_1C9858598;
    }
    else
    {
      *(_DWORD *)(a1 + 1660) = (fabsf((float)((float)v22 / (float)v23) + -1.33) >= fabsf((float)((float)v22 / (float)v23)+ -1.77)) | 2;
      v28 = sub_1C97EE6B8(a1);
      if ((_DWORD)v28)
        return v28;
    }
  }
  v29 = *(_DWORD *)(a1 + 1672);
  if (v29 != -1)
    goto LABEL_21;
  v29 = *(unsigned __int8 *)(a1 + 1748);
  if (!*(_BYTE *)(a1 + 1748))
    goto LABEL_21;
  v29 = 0;
  v34 = *(unsigned __int16 *)(a1 + 500);
  if (v34 <= 0x27F)
  {
    if (v34 == 320)
    {
      v29 = 0;
      for (i = (float *)(a1 + 52); *(unsigned __int16 *)i > 0xC0u || *(i - 1) > 4.0; i += 2)
        ++v29;
      v87 = *(double *)(a1 + 512);
      if (v87 <= 30000.0)
        goto LABEL_21;
      if (v87 <= 100000.0)
      {
        v89 = (int)((double)v29 + (v87 + -30000.0) / -70000.0 * (double)v29);
        if (v89 < v29)
          v29 = (int)((double)v29 + (v87 + -30000.0) / -70000.0 * (double)v29);
        if (v89 <= 0)
          v29 = 0;
        goto LABEL_21;
      }
      goto LABEL_118;
    }
    if (v34 == 480)
    {
      v59 = *(double *)(a1 + 512);
      v36 = 300000.0;
      if (v59 <= 300000.0)
      {
        v37 = 300000.0 - v59;
        v38 = 14.0;
        goto LABEL_111;
      }
LABEL_118:
      v29 = 0;
    }
  }
  else
  {
    switch(v34)
    {
      case 0x280u:
        v84 = *(double *)(a1 + 512);
        v36 = 420000.0;
        if (v84 <= 420000.0)
        {
          v37 = 420000.0 - v84;
          v38 = 15.0;
          goto LABEL_111;
        }
        goto LABEL_118;
      case 0x400u:
        v85 = *(double *)(a1 + 512);
        v36 = 660000.0;
        if (v85 <= 660000.0)
        {
          v37 = 660000.0 - v85;
          v38 = 21.0;
          goto LABEL_111;
        }
        goto LABEL_118;
      case 0x500u:
        v35 = *(double *)(a1 + 512);
        v36 = 650000.0;
        if (v35 <= 650000.0)
        {
          v37 = 650000.0 - v35;
          v38 = 22.0;
LABEL_111:
          v29 = (int)(v37 * v38 / v36 + 1.0);
          break;
        }
        goto LABEL_118;
    }
  }
LABEL_21:
  if (v29 >= 31)
    v29 = 31;
  *(_DWORD *)(a1 + 44) = v29;
  v30 = *(unsigned int *)(v12 + 608);
  *(_DWORD *)(a1 + 496) = v30;
  v31 = (4 * v30) & 0x3FFFFFFF0;
  *(_QWORD *)(a1 + 600) = (char *)&unk_1C9857E48 + v31;
  *(_QWORD *)(a1 + 608) = (char *)&unk_1C9857E78 + v31;
  *(_DWORD *)(a1 + 328) = v30;
  if (*(_DWORD *)(a2 + 456))
    goto LABEL_24;
  if (!(_DWORD)v30)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v39 = (FILE *)*MEMORY[0x1E0C80C10];
      v40 = "SinglepassRatecontroller RefStruct: gop size must be >= 1\n";
      v41 = "SinglepassRatecontroller RefStruct: gop size must be >= 1\n";
      v42 = 58;
      goto LABEL_121;
    }
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 712))
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v39 = (FILE *)*MEMORY[0x1E0C80C10];
      v40 = "SinglepassRatecontroller RefStruct: only supports RC_MODE_FILESIZE_CONTROL\n";
      v41 = "SinglepassRatecontroller RefStruct: only supports RC_MODE_FILESIZE_CONTROL\n";
      v42 = 75;
      goto LABEL_121;
    }
    return 4294954394;
  }
  if (*(int *)(a2 + 604) >= 2)
  {
    if (dword_1ED1ACCC0 > 2)
    {
      v39 = (FILE *)*MEMORY[0x1E0C80C10];
      v40 = "SinglepassRatecontroller RefStruct: only supports up to 1 gop\n";
      v41 = "SinglepassRatecontroller RefStruct: only supports up to 1 gop\n";
      v42 = 62;
      goto LABEL_121;
    }
    return 4294954394;
  }
  v81 = *(_DWORD *)(a2 + 600);
  if (v81 < 1)
  {
LABEL_24:
    if (*(_BYTE *)(a1 + 1696) == 1)
    {
      v32 = operator new();
      *(_QWORD *)v32 = 0x41024F8000000000;
      *(_QWORD *)(v32 + 8) = 1000;
      *(_OWORD *)(v32 + 20) = xmmword_1C9862EF0;
      *(_QWORD *)(v32 + 40) = 0;
      *(_DWORD *)(v32 + 48) = 2;
      v33 = *(_QWORD *)(a1 + 1760);
      *(_QWORD *)(a1 + 1760) = v32;
      if (!v33)
        goto LABEL_40;
    }
    else
    {
      v33 = *(_QWORD *)(a1 + 1760);
      *(_QWORD *)(a1 + 1760) = 0;
      if (!v33)
      {
LABEL_40:
        *(int8x8_t *)(a1 + 1664) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_BYTE *)(a1 + 1748) == 0), 0x1FuLL)), (int8x8_t)0x2400000022, (int8x8_t)0x2200000020);
        v43 = *(_DWORD *)(a2 + 544);
        *(_BYTE *)(a1 + 1776) = (v43 & 2) != 0;
        if ((v43 & 2) == 0)
          return 0;
        if (*(_DWORD *)(a1 + 496))
        {
          *(_QWORD *)(a1 + 1784) = 0xFFFFFFFFLL;
          *(_DWORD *)(a1 + 1792) = 0;
          *(_DWORD *)(a1 + 1780) = 2;
          v44 = *(char **)(a1 + 1808);
          v45 = *(char **)(a1 + 1800);
          v46 = v44 - v45;
          if ((unint64_t)(v44 - v45) > 0xF)
          {
            if (v46 == 16)
              goto LABEL_71;
            v58 = v45 + 16;
          }
          else
          {
            v47 = 2 - (v46 >> 3);
            v48 = *(_QWORD *)(a1 + 1816);
            if (v47 > (v48 - (uint64_t)v44) >> 3)
            {
              v49 = v48 - (_QWORD)v45;
              v50 = v49 >> 2;
              if ((unint64_t)(v49 >> 2) <= 2)
                v50 = 2;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v51 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v51 = v50;
              if (v51 >> 61)
LABEL_130:
                sub_1C9724B4C();
              v52 = v46 >> 3;
              v53 = (char *)operator new(8 * v51);
              v54 = &v53[8 * v52];
              v55 = &v53[8 * v51];
              bzero(v54, 8 * v47);
              v56 = &v54[8 * v47];
              if (v44 != v45)
              {
                do
                {
                  v57 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  *((_QWORD *)v54 - 1) = v57;
                  v54 -= 8;
                }
                while (v44 != v45);
                v44 = *(char **)(a1 + 1800);
              }
              *(_QWORD *)(a1 + 1800) = v54;
              *(_QWORD *)(a1 + 1808) = v56;
              *(_QWORD *)(a1 + 1816) = v55;
              if (v44)
              {
                operator delete(v44);
                if (*(int *)(a1 + 1780) <= 0)
                  return 0;
              }
              goto LABEL_71;
            }
            bzero(*(void **)(a1 + 1808), 8 * v47);
            v58 = &v44[8 * v47];
          }
          *(_QWORD *)(a1 + 1808) = v58;
LABEL_71:
          v60 = 0;
          while (1)
          {
            v61 = operator new();
            *(_OWORD *)v61 = 0u;
            *(_OWORD *)(v61 + 16) = 0u;
            *(_OWORD *)(v61 + 32) = 0u;
            *(_OWORD *)(v61 + 48) = 0u;
            *(_QWORD *)(v61 + 40) = 850045863;
            *(_OWORD *)(v61 + 64) = 0u;
            *(_OWORD *)(v61 + 80) = 0u;
            *(_QWORD *)(v61 + 96) = 0;
            *(_QWORD *)(v61 + 104) = 1018212795;
            *(_OWORD *)(v61 + 112) = 0u;
            *(_OWORD *)(v61 + 128) = 0u;
            *(_QWORD *)(v61 + 144) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 1800) + 8 * v60) = v61;
            v62 = *(_QWORD *)(*(_QWORD *)(a1 + 1800) + 8 * v60);
            if (!v62)
              break;
            v63 = *(_DWORD *)(a1 + 496);
            *(_DWORD *)v62 = 0;
            *(_DWORD *)(v62 + 32) = 0;
            if (v63 >= 1)
            {
              v64 = 0;
              v65 = *(char **)(v62 + 16);
              do
              {
                v66 = *(_QWORD *)(v62 + 24);
                if ((unint64_t)v65 >= v66)
                {
                  v67 = *(_QWORD *)(v62 + 8);
                  v68 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v65[-v67] >> 3);
                  v69 = v68 + 1;
                  if ((unint64_t)(v68 + 1) > 0x492492492492492)
                    sub_1C9747024();
                  v70 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v66 - v67) >> 3);
                  if (2 * v70 > v69)
                    v69 = 2 * v70;
                  if (v70 >= 0x249249249249249)
                    v71 = 0x492492492492492;
                  else
                    v71 = v69;
                  if (v71 > 0x492492492492492)
                    goto LABEL_130;
                  v72 = 56 * v71;
                  v73 = (char *)operator new(56 * v71);
                  v74 = &v73[56 * v68];
                  *((_QWORD *)v74 + 1) = 0;
                  *((_QWORD *)v74 + 2) = 0;
                  *(_QWORD *)v74 = 0;
                  *((_QWORD *)v74 + 3) = 0xFFFFFFFF00000000;
                  v74[32] = -1;
                  *((_QWORD *)v74 + 5) = 0;
                  *((_QWORD *)v74 + 6) = 0;
                  v76 = *(char **)(v62 + 8);
                  v75 = *(char **)(v62 + 16);
                  if (v75 == v76)
                  {
                    v79 = &v73[56 * v68];
                  }
                  else
                  {
                    v77 = 0;
                    do
                    {
                      v78 = &v74[v77];
                      *((_DWORD *)v78 - 14) = *(_DWORD *)&v75[v77 - 56];
                      *((_DWORD *)v78 - 13) = *(_DWORD *)&v75[v77 - 52];
                      *((_OWORD *)v78 - 3) = *(_OWORD *)&v75[v77 - 48];
                      *((_QWORD *)v78 - 4) = *(_QWORD *)&v75[v77 - 32];
                      *(v78 - 24) = v75[v77 - 24];
                      *((_OWORD *)v78 - 1) = *(_OWORD *)&v75[v77 - 16];
                      v77 -= 56;
                    }
                    while (&v75[v77] != v76);
                    v79 = &v74[v77];
                    v75 = *(char **)(v62 + 8);
                  }
                  v80 = &v73[v72];
                  v65 = v74 + 56;
                  *(_QWORD *)(v62 + 8) = v79;
                  *(_QWORD *)(v62 + 16) = v74 + 56;
                  *(_QWORD *)(v62 + 24) = v80;
                  if (v75)
                    operator delete(v75);
                }
                else
                {
                  *(_QWORD *)v65 = 0;
                  *((_QWORD *)v65 + 1) = 0;
                  *((_QWORD *)v65 + 2) = 0;
                  *((_QWORD *)v65 + 3) = 0xFFFFFFFF00000000;
                  v65[32] = -1;
                  *((_QWORD *)v65 + 5) = 0;
                  *((_QWORD *)v65 + 6) = 0;
                  v65 += 56;
                }
                *(_QWORD *)(v62 + 16) = v65;
                ++v64;
              }
              while (v64 != v63);
            }
            if (++v60 >= *(int *)(a1 + 1780))
              return 0;
          }
          if (dword_1ED1ACCC0 < 3)
            return 4294954392;
          fwrite("mpt_rc: Failed to allocate mpt rc mpt_gop_stats_array_\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          syslog(27, "mpt_rc: Failed to allocate mpt rc mpt_gop_stats_array_\n");
          v28 = 4294954392;
          goto LABEL_96;
        }
        if (dword_1ED1ACCC0 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "mpt_rc: Invalid gop_size: %d\n", 0);
          syslog(27, "mpt_rc: Invalid gop_size: %d\n", *(_DWORD *)(a1 + 496));
          v28 = 4294954394;
LABEL_96:
          if (dword_1ED1ACCC0 >= 3)
          {
            v40 = "Failed to initialize mpt rate controller.\n";
            fwrite("Failed to initialize mpt rate controller.\n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            goto LABEL_122;
          }
          return v28;
        }
        return 4294954394;
      }
    }
    MEMORY[0x1CAA43B9C](v33, 0x1000C409380FD32);
    goto LABEL_40;
  }
  v82 = 0;
  v83 = 108 * v81;
  while (v82)
  {
    if (*(_BYTE *)(a2 + 957 + v82) != 82)
      goto LABEL_119;
LABEL_105:
    v82 += 108;
    if (v83 == v82)
      goto LABEL_24;
  }
  if (*(_BYTE *)(a2 + 957) == 76)
    goto LABEL_105;
LABEL_119:
  if (dword_1ED1ACCC0 < 3)
    return 4294954394;
  v39 = (FILE *)*MEMORY[0x1E0C80C10];
  v40 = "SinglepassRatecontroller RefStruct: only supports frame type 'L':1 and 'R':0+\n";
  v41 = "SinglepassRatecontroller RefStruct: only supports frame type 'L':1 and 'R':0+\n";
  v42 = 78;
LABEL_121:
  fwrite(v41, v42, 1uLL, v39);
  v28 = 4294954394;
LABEL_122:
  syslog(27, v40);
  return v28;
}

uint64_t sub_1C97EE6B8(uint64_t a1)
{
  unint64_t v2;
  _WORD *v3;
  float *i;
  uint64_t v6;
  char *v7;
  __int16 v8;
  __int16 v9;

  v2 = 0;
  v3 = (_WORD *)(a1 + 310);
  for (i = (float *)((char *)&unk_1C9857F68 + 256 * (uint64_t)*(int *)(a1 + 1660));
        *((__int16 *)i + 2) > (int)*(unsigned __int16 *)(a1 + 500);
        i += 2)
  {
    if (v2 > 0x1F)
      goto LABEL_9;
LABEL_7:
    ++v2;
    v3 -= 4;
  }
  if (v2 <= 0x1F && *(double *)(a1 + 1704) < *i)
    goto LABEL_7;
  if (v2 >= 0x20)
  {
LABEL_9:
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("Resolution and Frame rate is not supported in Quality table", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "Resolution and Frame rate is not supported in Quality table");
    }
    return 4294954386;
  }
  memcpy((void *)(a1 + 48), i, (256 - 8 * v2) & 0x7FFFFFFF8);
  if ((_DWORD)v2)
  {
    v6 = 31 - v2;
    v7 = (char *)&unk_1C9857F68 + 256 * (uint64_t)*(int *)(a1 + 1660);
    v8 = *((_WORD *)v7 + 126);
    v9 = *((_WORD *)v7 + 127);
    do
    {
      *(_DWORD *)(v3 - 3) = 1036831949;
      *(v3 - 1) = v8;
      *v3 = v9;
      v3 += 4;
      ++v6;
    }
    while (v6 < 31);
  }
  return 0;
}

double sub_1C97EE7E0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;
  int v5;
  double v6;
  double v7;

  *(_QWORD *)(a1 + 676) = *(_QWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 20);
  v2 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 688) = v2;
  *(_BYTE *)(a1 + 708) = v3 > 0;
  result = *(double *)(a1 + 512) / *(double *)(a1 + 520);
  *(double *)(a1 + 536) = result;
  if (*(_DWORD *)(a1 + 712) == 1)
  {
    v5 = *(_DWORD *)(a1 + 684);
    if (v5 < 1)
      v6 = 0.0;
    else
      v6 = (double)v3 / (double)v5;
    *(double *)(a1 + 696) = v6;
    v7 = v6 + 1.0;
    if (v2 >= (int)(result * 0.5 / (v7 + 0.5)))
      v2 = (int)(result * 0.5 / (v7 + 0.5));
    *(_DWORD *)(a1 + 704) = v2;
    result = (result - (double)v2) / v7;
    *(double *)(a1 + 536) = result;
  }
  return result;
}

void sub_1C97EE87C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) >= 0x2AAuLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 341;
  }
}

void sub_1C97EE8C8(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 341 * ((v4 - v5) >> 3) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x155)
    {
      a1[4] = v8 - 341;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)sub_1C974B718(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0xFFCuLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)sub_1C974B718(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v63[-*a1] >> 2;
            v99 = (char *)sub_1C974B718(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v63 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)sub_1C974B718(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v111 = v34;
    v35 = operator new(0xFFCuLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v111;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)sub_1C974B718(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v108 = v36;
      v111 = v38;
      operator delete(v30);
      v36 = v108;
    }
    v38 = v111;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)sub_1C974B718(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v109 = v36;
            v113 = v38;
            operator delete(v78);
            v36 = v109;
            v38 = v113;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v110 = *((_QWORD *)&v36 + 1);
            v112 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v110;
            *(_QWORD *)&v38 = v112;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  v96 = *(_QWORD *)&v5[8 * (v9 / 0x155)] + 12 * (v9 % 0x155);
  v97 = *a2;
  *(_DWORD *)(v96 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v96 = v97;
  ++a1[5];
}

void sub_1C97EEE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1C97EEE80(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  __int16 *v6;
  double v7;
  double v8;

  v2 = result;
  v3 = 0;
  LODWORD(result) = 0;
  v4 = *(double *)(v2 + 1616);
  v5 = *(float *)(v2 + 8 * a2 + 48);
  v6 = &word_1C9857EAA;
  v7 = 1.0e20;
  do
  {
    v8 = vabdd_f64(v4 * ((double)*(v6 - 1) / (double)*v6), v5);
    if (v8 >= v7)
      result = result;
    else
      result = v3;
    if (v8 < v7)
      v7 = v8;
    ++v3;
    v6 += 2;
  }
  while (v3 != 23);
  return result;
}

void sub_1C97EEEE8(double *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = sub_1C97EF258((uint64_t)a1, 1, 1, a1[67], 3.0, 4.0);
  a1[40] = v4;
  v5 = a2 * 100000.0 / v4;
  a1[79] = v5;
  v6 = log(v5 / 0.850000024) * 6.0 / 0.693147181 + 12.0;
  v7 = 30.0;
  if (v6 < 30.0)
    v7 = v6;
  if (v6 <= 12.0)
    v8 = 12.0;
  else
    v8 = v7;
  a1[72] = v8;
}

uint64_t sub_1C97EEF84(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  FILE **v14;
  FILE *v15;
  const char *v16;
  const char *v17;
  size_t v18;
  uint64_t result;
  unsigned int v20;
  float v21;
  double v22;

  if (!a2)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      v15 = (FILE *)*MEMORY[0x1E0C80C10];
      v16 = "{CollectRefInfo} NULL pointer error\n";
      v17 = "{CollectRefInfo} NULL pointer error\n";
      v18 = 36;
      goto LABEL_16;
    }
    return 4294954394;
  }
  *(_BYTE *)(a1 + 673) = 0;
  v4 = *(_QWORD *)(a1 + 480);
  v5 = v4;
  if (*(_BYTE *)(a2 + 648) != 5)
    v5 = *(_QWORD *)(a1 + 488) + v4 - 1;
  v6 = *(_QWORD *)(a1 + 456);
  v7 = *(_QWORD *)(v6 + 8 * (v5 / 0x155)) + 12 * (v5 % 0x155);
  *(_DWORD *)(a1 + 660) = *(_DWORD *)v7;
  v8 = *(_DWORD *)(a2 + 652) - *(_DWORD *)(v7 + 4);
  if (v8 < 0)
    v8 = *(_DWORD *)(v7 + 4) - *(_DWORD *)(a2 + 652);
  *(_BYTE *)(a1 + 668) = v8;
  *(_BYTE *)(a1 + 670) = *(_BYTE *)(v7 + 8);
  *(_BYTE *)(a1 + 672) = 1;
  if (*(_BYTE *)(a2 + 648) == 5)
  {
    v9 = *(_DWORD *)(v7 + 4);
    v10 = *(_QWORD *)(v6 + 8 * ((*(_QWORD *)(a1 + 488) + v4 - 1) / 0x155))
        + 12 * ((*(_QWORD *)(a1 + 488) + v4 - 1) % 0x155);
    v11 = *(_DWORD *)v10;
    v12 = *(_DWORD *)(a2 + 652) - *(_DWORD *)(v10 + 4);
    if (v12 < 0)
      v12 = *(_DWORD *)(v10 + 4) - *(_DWORD *)(a2 + 652);
    *(_BYTE *)(a1 + 669) = v12;
    *(_BYTE *)(a1 + 671) = *(_BYTE *)(v10 + 8);
    *(_BYTE *)(a1 + 673) = 1;
    v13 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)(a1 + 664) = v11;
    if (dword_1ED1ACCC0 >= 7)
    {
      v14 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "=== [%2d, %2d] ===\n", v9, v13);
      syslog(31, "=== [%2d, %2d] ===\n", v9, v13);
      if (!*(_BYTE *)(a1 + 672))
      {
        if (!*(_BYTE *)(a1 + 673))
        {
          if (dword_1ED1ACCC0 >= 3)
          {
            v15 = *v14;
            v16 = "{CollectRefInfo} No Reference Stats Found\n";
            v17 = "{CollectRefInfo} No Reference Stats Found\n";
            v18 = 42;
LABEL_16:
            fwrite(v17, v18, 1uLL, v15);
            syslog(27, v16);
            return 4294954394;
          }
          return 4294954394;
        }
        goto LABEL_25;
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 669) = 0;
    *(_BYTE *)(a1 + 671) = -1;
    *(_DWORD *)(a1 + 664) = 0;
  }
  if (!*(_BYTE *)(a1 + 673))
  {
LABEL_27:
    v21 = *(float *)(a1 + 660);
    goto LABEL_28;
  }
  v20 = *(unsigned __int8 *)(a1 + 671);
  if (*(unsigned __int8 *)(a1 + 670) > 2u)
  {
    if (v20 <= 2 || *(char *)(a1 + 669) >= 1)
    {
LABEL_25:
      v21 = *(float *)(a1 + 664);
      goto LABEL_28;
    }
    if (*(char *)(a1 + 668) < 1)
    {
      v22 = 0.0;
      if (dword_1ED1ACCC0 >= 6)
        fwrite("{BframeRc} Wrong ref frame info!!!!!\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C20]);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  v21 = *(float *)(a1 + 660);
  if (v20 > 2)
  {
LABEL_28:
    v22 = v21;
    goto LABEL_29;
  }
  v22 = (float)(v21 + *(float *)(a1 + 664)) * 0.5 + 2.91256094;
LABEL_29:
  result = 0;
  *(double *)(a1 + 576) = v22 + *(float *)(*(_QWORD *)(a1 + 600) + 4 * *(int *)(a2 + 656));
  return result;
}

double sub_1C97EF258(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  uint64_t v6;
  int v7;
  float v8;
  int v9;
  int v10;
  signed int v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v6 = *(_QWORD *)(a1 + 1688);
  v7 = *(_DWORD *)(v6 + 876);
  v8 = *(float *)(v6 + 880);
  if (v7 || v8 != 0.0)
  {
    if (v7 <= 0)
      v7 = 0x7FFFFFFF;
    if (v8 <= 0.0)
      v9 = 0x7FFFFFFF;
    else
      v9 = (int)(*(double *)(a1 + 520) * v8 + 0.5);
    if (v9 < v7)
      v7 = v9;
    if (v7)
      goto LABEL_12;
  }
  v7 = *(__int16 *)(v6 + 874);
  if (*(_WORD *)(v6 + 874))
  {
LABEL_12:
    v10 = 1;
    v11 = (v7 + *(_DWORD *)(a1 + 496) - 2) / *(_DWORD *)(a1 + 496);
  }
  else
  {
    v10 = 0;
    v7 = *(_DWORD *)(a1 + 496);
    v11 = 1;
  }
  v12 = (double)v11 * a6 + (double)(v7 - v10 - v11);
  v13 = (double)v10;
  v14 = (double)v7;
  if (v10 && !a3 && a2 && !*(_DWORD *)(a1 + 712))
    *(double *)(a1 + 1768) = v14 / (v13 * 4.0 * a6 + v12) * a4 * a6 * 4.0;
  v15 = v14 / (v13 * a5 * a6 + v12) * a4;
  if (!a2)
    a5 = 1.0;
  return a5 * v15 * a6;
}

uint64_t sub_1C97EF358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  double v27;
  uint64_t result;
  int v29;

  v6 = *(_QWORD *)(a2 + 6664);
  v7 = *(_QWORD *)(a2 + 6672);
  v8 = *(unsigned __int8 *)(a2 + 648);
  v9 = *(_DWORD *)(a2 + 652);
  v10 = *(double *)(a2 + 6296);
  v11 = *(float *)(a2 + 6476);
  v12 = exp2((v11 + -12.0) / 6.0);
  v13 = *(float *)(*(_QWORD *)(a1 + 608) + 4 * *(int *)(a2 + 656));
  v14 = *(_DWORD *)(a1 + 656);
  if (v14 >= 2)
    v15 = 2;
  else
    v15 = *(_DWORD *)(a1 + 656);
  *(double *)(a1 + 624) = (*(double *)(a1 + 624) * (double)v15 + v11) / (double)(v15 + 1);
  *(_QWORD *)(a1 + 640) += (int)v6 - (int)*(double *)(a1 + 536);
  *(_DWORD *)(a1 + 656) = v14 + 1;
  if (!*(_BYTE *)a2)
  {
    if (*(_BYTE *)(a1 + 708))
      v16 = 0;
    else
      v16 = *(_DWORD *)(a1 + 684);
    *(_DWORD *)(a1 + 684) = v16 + v6;
  }
  v17 = *(unsigned __int8 *)(a1 + 654);
  if (*(_BYTE *)(a1 + 654))
  {
    v18 = *(double *)(a1 + 544) * 0.95 + 1.0;
    v19 = *(double *)(a1 + 552) * 0.95;
    *(double *)(a1 + 544) = v18;
    v20 = v19 + (double)(v6 - v7);
    *(double *)(a1 + 552) = v20;
    *(double *)(a1 + 560) = v20 / v18;
    v6 = v7;
  }
  v21 = v12 * 0.850000024;
  if (v8 > 4)
  {
    v21 = v21 / v13;
    if (a3)
    {
LABEL_22:
      v26 = *(unsigned __int8 *)(a1 + 652);
      v27 = exp2((*(float *)(a3 + 16) + -12.0) / 6.0) * 0.850000024;
      if (v26 >= 5)
        v27 = v27 / v13;
      return sub_1C97ED8B0(a1 + 720, (*(_QWORD *)(a3 + 8 * (v17 != 0)) + v6) >> 1, (v21 + v27) * 0.5, v10);
    }
  }
  else
  {
    v22 = *(unsigned __int8 *)(a1 + 652);
    v23 = v22 >= 3;
    v24 = v22 - 3;
    v25 = !v23 || v24 <= 2 && *(_BYTE *)(a1 + 653) != 0;
    *(_BYTE *)(a1 + 649) = v25;
    if (*(_DWORD *)(a1 + 712) != 1 && *(_DWORD *)(a1 + 312) | v9)
    {
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
      if (a3)
        goto LABEL_22;
    }
    else
    {
      *(double *)(a1 + 584) = v11;
      if (a3)
        goto LABEL_22;
    }
  }
  v29 = *(unsigned __int8 *)(a1 + 1600);
  result = sub_1C97ED8B0(a1 + 720, v6, v21, v10);
  if (v29 && v9 <= 1)
    return sub_1C97ED8B0(a1 + 1160, v6, v21, v10);
  return result;
}

uint64_t sub_1C97EF5E0(uint64_t a1, int a2)
{
  uint64_t v4;
  __int16 *v5;
  __int16 *v6;
  __int16 *v7;
  int v8;
  __int16 *v9;
  int v10;
  double v11;
  __int16 *v12;
  uint64_t v13;
  double v14;
  uint64_t result;

  v4 = a1 + 8 * *(int *)(a1 + 44);
  v5 = (__int16 *)(v4 + 54);
  v6 = (__int16 *)(v4 + 52);
  if (*(_BYTE *)(a1 + 504))
    v7 = v5;
  else
    v7 = v6;
  v8 = *v7;
  if (*(_BYTE *)(a1 + 504))
    v9 = v6;
  else
    v9 = v5;
  v10 = *v9;
  v11 = *(double *)(a1 + 520);
  *(_DWORD *)(a1 + 1660) = a2;
  if (sub_1C97EE6B8(a1) && dword_1ED1ACCC0 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Can't switch table from index %d to index %d\n", *(_DWORD *)(a1 + 1660), a2);
    syslog(27, "Can't switch table from index %d to index %d\n", *(_DWORD *)(a1 + 1660), a2);
  }
  v12 = (__int16 *)(a1 + 54);
  v13 = -1;
  while (v13 != 31)
  {
    v14 = (float)(*(float *)(v12 - 3) * (float)(*v12 * *(v12 - 1)));
    ++v13;
    v12 += 4;
    if (v11 * (double)(v10 * v8) >= v14)
      goto LABEL_15;
  }
  LODWORD(v13) = 32;
LABEL_15:
  *(_DWORD *)(a1 + 44) = v13;
  *(_DWORD *)(a1 + 1624) = v13;
  result = sub_1C97EEE80(a1, v13);
  *(_DWORD *)(a1 + 1608) = result;
  return result;
}

char *sub_1C97EF704(char *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = *result;
  if (v1 != -1)
    *(_DWORD *)&result[4 * v1 + 56] = 2;
  v2 = result[3];
  if (v2 != -1)
    *(_DWORD *)&result[4 * v2 + 56] = 4;
  v3 = result[2];
  if (v3 != -1)
    *(_DWORD *)&result[4 * v3 + 56] = 2;
  v4 = result[1];
  if (v4 != -1)
    *(_DWORD *)&result[4 * v4 + 56] = 1;
  v5 = 0;
  v6 = 0;
  *((_DWORD *)result + 22) = 0;
  do
  {
    v6 += *(_DWORD *)&result[v5 + 56];
    *(_DWORD *)&result[v5 + 92] = v6;
    v5 += 4;
  }
  while (v5 != 28);
  return result;
}

uint64_t sub_1C97EF790(_DWORD *a1, int a2, int a3, int a4)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = a1[9];
  if (v4 <= a2 && a1[11] <= a3 && a4 - 1 + a2 <= a1[10] && a4 - 1 + a3 <= a1[12])
    return 2;
  v5 = a4 + a2 <= v4 || a1[10] < a2;
  v6 = a4 + a3 <= a1[11] || a1[12] < a3;
  return !v5 && !v6;
}

uint64_t sub_1C97EF824(uint64_t a1, int a2, char a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t (*v11);
  uint64_t (*v12)(int, int, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(int, int, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v14;
  float (*v15)(int, int, uint64_t, uint64_t, uint64_t, uint64_t);
  float (*v16)(int, int, uint64_t, uint64_t, uint64_t, uint64_t);
  float (*v17)(int, int, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v18;
  char v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t result;
  uint64_t v40;
  int v41;
  int v42;
  _WORD *v43;
  uint64_t v44;
  double v45;
  int v46;
  int v47;
  _WORD *v48;
  uint64_t v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  int v70;
  _QWORD *v71;
  _WORD *v72;
  uint64_t v73;

  if (a4 == 8)
  {
    v70 = a8;
    *(_QWORD *)a1 = sub_1C97F1478;
    *(_QWORD *)(a1 + 8) = sub_1C97F15D0;
    *(_QWORD *)(a1 + 528) = sub_1C97F1678;
    *(_QWORD *)(a1 + 224) = sub_1C9813654;
    *(_QWORD *)(a1 + 232) = sub_1C98136DC;
    *(_QWORD *)(a1 + 240) = sub_1C98137E4;
    *(_QWORD *)(a1 + 248) = sub_1C98137E4;
    *(_QWORD *)(a1 + 408) = sub_1C9813654;
    *(_QWORD *)(a1 + 416) = sub_1C98136DC;
    *(_QWORD *)(a1 + 424) = sub_1C9813920;
    *(_QWORD *)(a1 + 432) = sub_1C9813920;
    *(_QWORD *)(a1 + 176) = sub_1C9813928;
    *(_QWORD *)(a1 + 184) = sub_1C98139A8;
    *(_QWORD *)(a1 + 192) = sub_1C9813AC8;
    *(_QWORD *)(a1 + 200) = sub_1C9813AC8;
    *(_QWORD *)(a1 + 208) = sub_1C9813AC8;
    *(_QWORD *)(a1 + 216) = sub_1C98135DC;
    *(_QWORD *)(a1 + 376) = sub_1C98139A8;
    *(_QWORD *)(a1 + 384) = sub_1C9813BE4;
    *(_QWORD *)(a1 + 392) = sub_1C9813BE4;
    *(_QWORD *)(a1 + 400) = sub_1C9813BE4;
    *(_QWORD *)(a1 + 536) = sub_1C9813BEC;
    *(_QWORD *)(a1 + 544) = sub_1C9813C78;
    *(_QWORD *)(a1 + 552) = sub_1C9813D74;
    v11 = sub_1C9813F68;
    *(_QWORD *)(a1 + 560) = sub_1C9813E34;
    v12 = sub_1C9813F84;
    v13 = sub_1C98141A8;
    *(_QWORD *)(a1 + 256) = sub_1C9813F68;
    *(_QWORD *)(a1 + 264) = sub_1C9813F84;
    v14 = sub_1C981438C;
    v15 = (float (*)(int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C9814650;
    *(_QWORD *)(a1 + 272) = sub_1C98141A8;
    *(_QWORD *)(a1 + 280) = sub_1C981438C;
    v16 = sub_1C98148DC;
    v17 = sub_1C9814C28;
    *(_QWORD *)(a1 + 440) = sub_1C9814650;
    *(_QWORD *)(a1 + 448) = sub_1C98148DC;
    *(_QWORD *)(a1 + 456) = sub_1C9814C28;
    *(_QWORD *)(a1 + 296) = sub_1C9813F68;
    *(_QWORD *)(a1 + 304) = sub_1C9813F84;
    *(_QWORD *)(a1 + 472) = sub_1C9814650;
    *(_QWORD *)(a1 + 480) = sub_1C98148DC;
    *(_QWORD *)(a1 + 504) = sub_1C9814F24;
    *(_QWORD *)(a1 + 512) = sub_1C9815138;
    *(_QWORD *)(a1 + 520) = sub_1C98152F8;
    v18 = sub_1C9815634;
  }
  else
  {
    if (a4 > 16)
      return 4294954386;
    v70 = a8;
    *(_QWORD *)a1 = sub_1C97F0604;
    *(_QWORD *)(a1 + 8) = sub_1C97F0758;
    *(_QWORD *)(a1 + 504) = sub_1C97F07FC;
    *(_QWORD *)(a1 + 512) = sub_1C97F08C8;
    *(_QWORD *)(a1 + 520) = sub_1C97F0A10;
    *(_QWORD *)(a1 + 528) = sub_1C97F0BDC;
    *(_QWORD *)(a1 + 224) = sub_1C9816454;
    *(_QWORD *)(a1 + 232) = sub_1C9816540;
    *(_QWORD *)(a1 + 240) = sub_1C9816540;
    *(_QWORD *)(a1 + 248) = sub_1C9816540;
    *(_QWORD *)(a1 + 408) = sub_1C9816454;
    *(_QWORD *)(a1 + 416) = sub_1C98166C4;
    *(_QWORD *)(a1 + 424) = sub_1C98166C4;
    *(_QWORD *)(a1 + 432) = sub_1C98166C4;
    *(_QWORD *)(a1 + 176) = sub_1C9815AA8;
    *(_QWORD *)(a1 + 184) = sub_1C9815B50;
    *(_QWORD *)(a1 + 192) = sub_1C9815C8C;
    *(_QWORD *)(a1 + 200) = sub_1C9815C8C;
    *(_QWORD *)(a1 + 208) = sub_1C9815C8C;
    *(_QWORD *)(a1 + 216) = sub_1C98163DC;
    *(_QWORD *)(a1 + 376) = sub_1C9815B50;
    *(_QWORD *)(a1 + 384) = sub_1C98166CC;
    *(_QWORD *)(a1 + 392) = sub_1C98166CC;
    *(_QWORD *)(a1 + 400) = sub_1C98166CC;
    *(_QWORD *)(a1 + 536) = sub_1C98166D4;
    *(_QWORD *)(a1 + 544) = sub_1C981670C;
    *(_QWORD *)(a1 + 552) = sub_1C9816880;
    *(_QWORD *)(a1 + 560) = sub_1C9816948;
    v11 = sub_1C9816A90;
    v12 = sub_1C9816AAC;
    *(_QWORD *)(a1 + 256) = sub_1C9816A90;
    *(_QWORD *)(a1 + 264) = sub_1C9816AAC;
    v13 = sub_1C9816CE0;
    v14 = sub_1C981709C;
    *(_QWORD *)(a1 + 272) = sub_1C9816CE0;
    *(_QWORD *)(a1 + 280) = sub_1C981709C;
    v15 = (float (*)(int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C9817520;
    v16 = sub_1C98177E4;
    *(_QWORD *)(a1 + 440) = sub_1C9817520;
    *(_QWORD *)(a1 + 448) = sub_1C98177E4;
    v17 = sub_1C9817C0C;
    *(_QWORD *)(a1 + 456) = sub_1C9817C0C;
    *(_QWORD *)(a1 + 296) = sub_1C9816A90;
    *(_QWORD *)(a1 + 304) = sub_1C9816AAC;
    *(_QWORD *)(a1 + 472) = sub_1C9817520;
    *(_QWORD *)(a1 + 480) = sub_1C98177E4;
    v18 = sub_1C9817FA0;
  }
  *(_QWORD *)(a1 + 568) = v18;
  *(_QWORD *)(a1 + 16) = sub_1C9815880;
  *(_QWORD *)(a1 + 336) = sub_1C9815AA8;
  *(_QWORD *)(a1 + 344) = sub_1C9815B50;
  *(_QWORD *)(a1 + 352) = sub_1C9815C8C;
  *(_QWORD *)(a1 + 360) = sub_1C9815C8C;
  *(_QWORD *)(a1 + 368) = sub_1C9815C8C;
  if (a2 <= 7)
  {
    *(_QWORD *)(a1 + 264) = v11;
LABEL_8:
    *(_QWORD *)(a1 + 272) = v11;
    *(_QWORD *)(a1 + 448) = v15;
    v13 = (uint64_t (*)(int, int, uint64_t, uint64_t, uint64_t, uint64_t))v11;
LABEL_9:
    *(_QWORD *)(a1 + 280) = v13;
    *(_QWORD *)(a1 + 456) = v15;
    v17 = v15;
    v14 = v13;
    goto LABEL_10;
  }
  v11 = (uint64_t (*))v12;
  if (a2 <= 0xF)
    goto LABEL_8;
  v15 = v16;
  if (a2 <= 0x1F)
    goto LABEL_9;
LABEL_10:
  *(_QWORD *)(a1 + 288) = v14;
  *(_QWORD *)(a1 + 464) = v17;
  *(_QWORD *)(a1 + 312) = v12;
  *(_QWORD *)(a1 + 320) = v12;
  *(_QWORD *)(a1 + 328) = v12;
  *(_QWORD *)(a1 + 488) = v16;
  *(_QWORD *)(a1 + 496) = v16;
  v19 = a3 ^ 1;
  if (a7 < 4)
    v19 = 1;
  *(_BYTE *)(a1 + 170) = v19;
  v20 = a7 - 2;
  if (a7 <= 2)
    v20 = 0;
  v21 = v20;
  if (v20 == 3 && a4 == 10)
    v20 = 4;
  *(_BYTE *)(a1 + 172) = v20;
  *(_BYTE *)(a1 + 171) = v20;
  if (a5 == 1 && v20 == 2)
    *(_WORD *)(a1 + 171) = 1;
  v68 = v21;
  if (*(unsigned __int8 *)(a1 + 173) != a6 || *(unsigned __int8 *)(a1 + 174) != a4)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
    *(_BYTE *)(a1 + 173) = a6;
    *(_BYTE *)(a1 + 174) = a4;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(a1 + 72);
  v23 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a1 + 173) = a6;
  *(_BYTE *)(a1 + 174) = a4;
  if (v23 == v24 || *(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 96))
  {
LABEL_28:
    sub_1C97EFFAC((char **)(a1 + 72));
    sub_1C97EFFAC((char **)(a1 + 96));
    v25 = 0;
    v26 = *(_QWORD *)(a1 + 72);
    v27 = *(_QWORD *)(a1 + 96);
    v28 = -12;
    do
    {
      for (i = 0; i != 52; ++i)
      {
        if ((int)v28 + (int)i >= 57)
          v30 = 57;
        else
          v30 = v28 + i;
        if (v28 + i <= -a6)
          v31 = -a6;
        else
          v31 = v30;
        if (v31 >= 30)
        {
          if (v31 >= 0x39)
            v31 = 57;
          v31 = byte_1C9861020[v31 - 30];
        }
        v32 = (int)(exp2((double)((int)i - v31) / 3.0) * 256.0 + 0.5);
        *(_WORD *)(v26 + 2 * i) = v32;
        *(_WORD *)(v27 + 2 * i) = vcvtd_n_s64_f64(sqrt((double)v32), 4uLL);
      }
      ++v25;
      ++v28;
      v27 += 104;
      v26 += 104;
    }
    while (v25 != 25);
  }
  v33 = *(char **)(a1 + 128);
  v71 = (_QWORD *)a1;
  if (v33 == *(char **)(a1 + 120))
  {
    v34 = 64;
    if (a4 == 8)
      v34 = 52;
    v73 = v34;
    v35 = *(_QWORD *)(a1 + 136) - (_QWORD)v33;
    if ((unint64_t)v35 >> 9 >= 0x19)
    {
      bzero(v33, 0x3200uLL);
      *(_QWORD *)(a1 + 128) = v33 + 12800;
    }
    else
    {
      v36 = v35 >> 6;
      if (v36 <= 0x64)
        v37 = 100;
      else
        v37 = v36;
      if (v37 >> 57)
        sub_1C9724B4C();
      v38 = (char *)operator new(v37 << 7);
      bzero(v38, 0x3200uLL);
      *(_QWORD *)(a1 + 120) = v38;
      *(_QWORD *)(a1 + 128) = v38 + 12800;
      *(_QWORD *)(a1 + 136) = &v38[128 * v37];
      if (v33)
        operator delete(v33);
    }
    v40 = 0;
    v41 = -a6;
    v42 = a6 - 12;
    v43 = *(_WORD **)(a1 + 120);
    do
    {
      v44 = 0;
      v45 = dbl_1C9862F00[v40 == 0];
      v46 = -12;
      v72 = v43;
      do
      {
        v47 = v41;
        v48 = v43;
        v49 = v73;
        do
        {
          if (v46 + v47 >= 57)
            v50 = 57;
          else
            v50 = v46 + v47;
          if (v46 + v47 <= v41)
            v51 = v41;
          else
            v51 = v50;
          if (v51 >= 30)
          {
            if (v51 >= 0x39)
              v51 = 57;
            v51 = byte_1C9861020[v51 - 30];
          }
          v52 = (double)(v47 - 12) / 6.0;
          if (v52 < 4.0)
            v53 = (double)(v47 - 12) / 6.0;
          else
            v53 = 4.0;
          if (v52 <= 2.0)
            v54 = 2.0;
          else
            v54 = v53;
          if (v40 == 3)
            v55 = v54;
          else
            v55 = 1.0;
          v56 = v45 * exp2((double)(v42 + v51) / 3.0) * v55;
          v57 = v56 + 0.5;
          if (v57 < 65535.0)
            v58 = v57;
          else
            v58 = 65535.0;
          if (v57 <= 1.0)
            v59 = 1.0;
          else
            v59 = v58;
          *v48++ = (int)v59;
          ++v47;
          --v49;
        }
        while (v49);
        ++v44;
        ++v46;
        v43 += 256;
      }
      while (v44 != 25);
      ++v40;
      v43 = v72 + 64;
    }
    while (v40 != 4);
  }
  if (v70)
  {
    result = 0;
    v71[3] = &unk_1C98587CA;
    v71[4] = &unk_1C9858832;
    v71[5] = &unk_1C98587CA;
    v71[6] = &unk_1C9858832;
    v60 = (char *)&unk_1C985889A + 1024 * (unint64_t)(a4 == 10) + 128 * v68 + 512;
    v71[7] = v60;
    v71[8] = v60;
  }
  else
  {
    v61 = 0;
    v62 = v71[12];
    v63 = 1;
    v64 = v71[15];
    do
    {
      v65 = v63;
      v66 = *(char *)(a9 + v61) + 12;
      v67 = &v71[2 * v61];
      v67[3] = v71[9] + 104 * v66;
      v67[4] = v62 + 104 * v66;
      v71[v61 + 7] = v64 + ((uint64_t)((int)v68 + 4 * v66) << 7);
      v61 = 1;
      v63 = 0;
    }
    while ((v65 & 1) != 0);
    return 0;
  }
  return result;
}

void sub_1C97EFFAC(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = 0x4EC4EC4EC4EC4EC5 * (v4 >> 3);
  if (v5 > 0x18)
  {
    if (v4 == 2600)
      return;
    v20 = v3 + 2600;
    goto LABEL_17;
  }
  v6 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v2) >> 3) >= 25 - v5)
  {
    bzero(a1[1], 104 * ((2496 - v4) / 0x68uLL) + 104);
    v20 = &v2[104 * ((2496 - v4) / 0x68uLL) + 104];
LABEL_17:
    a1[1] = v20;
    return;
  }
  v7 = 0x4EC4EC4EC4EC4EC5 * ((v6 - v3) >> 3);
  v8 = 0x9D89D89D89D89D8ALL * ((v6 - v3) >> 3);
  if (v8 <= 0x19)
    v8 = 25;
  if (v7 >= 0x13B13B13B13B13BLL)
    v9 = 0x276276276276276;
  else
    v9 = v8;
  if (v9 > 0x276276276276276)
    sub_1C9724B4C();
  v10 = 104 * v9;
  v11 = (char *)operator new(104 * v9);
  v12 = &v11[8 * (v4 >> 3)];
  v13 = &v11[v10];
  bzero(v12, 104 * ((2496 - v4) / 0x68uLL) + 104);
  v14 = &v12[104 * ((2496 - v4) / 0x68uLL) + 104];
  if (v2 != v3)
  {
    do
    {
      v15 = *(_OWORD *)(v2 - 104);
      v16 = *(_OWORD *)(v2 - 88);
      *(_OWORD *)(v12 - 72) = *(_OWORD *)(v2 - 72);
      *(_OWORD *)(v12 - 88) = v16;
      *(_OWORD *)(v12 - 104) = v15;
      v17 = *(_OWORD *)(v2 - 56);
      v18 = *(_OWORD *)(v2 - 40);
      v19 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v12 - 24) = v19;
      *(_OWORD *)(v12 - 40) = v18;
      *(_OWORD *)(v12 - 56) = v17;
      v12 -= 104;
      v2 -= 104;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v2)
    operator delete(v2);
}

uint64_t sub_1C97F01A4(int a1, int a2, uint16x4_t *a3, uint64_t a4, uint16x4_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint16x4_t *v14;
  uint64_t v15;
  uint16x4_t *v16;
  uint16x4_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint16x4_t *v22;
  _BYTE v23[64];
  _BYTE v24[64];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 2 * a4;
  v19 = a6;
  v20 = 8 * a4;
  v12 = 2 * a6;
  do
  {
    v22 = a5;
    if (a1 >= 1)
    {
      v13 = 0;
      v14 = a3;
      do
      {
        v15 = 0;
        v16 = a5;
        v17 = v14;
        do
        {
          *(uint32x4_t *)&v23[v15] = vsubl_u16(*v17, *v16);
          v15 += 16;
          v17 = (uint16x4_t *)((char *)v17 + v11);
          v16 = (uint16x4_t *)((char *)v16 + v12);
        }
        while (v15 != 64);
        sub_1C97F12EC((uint64_t)v23, (uint64_t)v24);
        sub_1C97F12EC((uint64_t)v24, (uint64_t)v23);
        v10 = sub_1C97F135C((uint64_t)v23) + v10;
        v13 += 4;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 4;
    a3 = (uint16x4_t *)((char *)a3 + v20);
    a5 = &v22[v19];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1C97F02F4(int a1, int a2, uint16x8_t *a3, uint64_t a4, uint16x8_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint16x8_t *v14;
  uint64_t v15;
  uint16x8_t *v16;
  uint16x8_t *v17;
  uint32x4_t v18;
  uint32x4_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t *v24;
  _BYTE v25[256];
  _BYTE v26[256];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 2 * a4;
  v21 = a6;
  v22 = 16 * a4;
  v12 = 2 * a6;
  do
  {
    v24 = a5;
    if (a1 >= 1)
    {
      v13 = 0;
      v14 = a3;
      do
      {
        v15 = 0;
        v16 = a5;
        v17 = v14;
        do
        {
          v18 = vsubl_high_u16(*v17, *v16);
          v19 = (uint32x4_t *)&v25[v15];
          *v19 = vsubl_u16(*(uint16x4_t *)v17->i8, *(uint16x4_t *)v16->i8);
          v19[1] = v18;
          v15 += 32;
          v17 = (uint16x8_t *)((char *)v17 + v11);
          v16 = (uint16x8_t *)((char *)v16 + v12);
        }
        while (v15 != 256);
        sub_1C97F0C20((uint64_t)v25, (uint64_t)v26);
        sub_1C97F0C20((uint64_t)v26, (uint64_t)v25);
        v10 = sub_1C97F11BC((uint64_t)v25) + v10;
        v13 += 8;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 8;
    a3 = (uint16x8_t *)((char *)a3 + v22);
    a5 = &v24[v21];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1C97F044C()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t i;
  _QWORD v10[2];
  int v11[4096];
  uint64_t v12;

  v0 = MEMORY[0x1E0C80A78]();
  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    v6 = 0;
    v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1C97F0E28(v0, v1, v11, 0x10u, v10, 1);
}

uint64_t sub_1C97F0528()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t i;
  _QWORD v10[2];
  int v11[4096];
  uint64_t v12;

  v0 = MEMORY[0x1E0C80A78]();
  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    v6 = 0;
    v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1C97F0E28(v0, v1, v11, 0x20u, v10, 1);
}

uint64_t sub_1C97F0604(uint16x8_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint32x4_t v5;
  uint32x4_t *v6;
  _BYTE *v7;
  uint64_t result;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64x2_t v12;
  int64x2_t v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  _BYTE v22[256];
  _BYTE v23[256];
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  do
  {
    v5 = vmovl_high_u16(*a1);
    v6 = (uint32x4_t *)&v22[v4];
    *v6 = vmovl_u16(*(uint16x4_t *)a1->i8);
    v6[1] = v5;
    v4 += 32;
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
  }
  while (v4 != 256);
  v7 = v22;
  sub_1C97F0C20((uint64_t)v22, (uint64_t)v23);
  result = sub_1C97F0C20((uint64_t)v23, (uint64_t)v22);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (uint64x2_t)vdupq_n_s64(7uLL);
  v13 = vdupq_n_s64(4uLL);
  do
  {
    v14 = 0;
    v15 = (int32x4_t)v10;
    v16 = (int32x4_t)v11;
    v17 = vdupq_n_s64(v9);
    v18 = (int64x2_t)xmmword_1C9862F20;
    v19 = (int64x2_t)xmmword_1C9862F10;
    do
    {
      v20 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v18, v17)), (int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v19, v17)));
      v21 = (int8x16_t)vabsq_s32(*(int32x4_t *)&v7[v14]);
      v16 = vaddq_s32((int32x4_t)vbicq_s8(v21, v20), v16);
      v15 = vaddq_s32((int32x4_t)vandq_s8(v21, v20), v15);
      v19 = vaddq_s64(v19, v13);
      v18 = vaddq_s64(v18, v13);
      v14 += 16;
    }
    while (v14 != 32);
    v11 = vaddvq_s32(v16);
    v10 = vaddvq_s32(v15);
    ++v9;
    v7 += 32;
  }
  while (v9 != 8);
  *a3 = v10;
  a3[1] = v11;
  return result;
}

int *sub_1C97F0758(uint16x8_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint32x4_t v5;
  int *v6;
  int v8[64];
  _BYTE v9[256];
  uint64_t v10;

  v4 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  do
  {
    v5 = vmovl_high_u16(*a1);
    v6 = &v8[v4];
    *(uint32x4_t *)v6 = vmovl_u16(*(uint16x4_t *)a1->i8);
    *((uint32x4_t *)v6 + 1) = v5;
    v4 += 8;
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
  }
  while (v4 != 64);
  sub_1C97F0C20((uint64_t)v8, (uint64_t)v9);
  sub_1C97F0C20((uint64_t)v9, (uint64_t)v8);
  return sub_1C97F0D00(v8, a3);
}

uint64_t sub_1C97F07FC(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  __int8 *v16;
  __int8 *v17;
  char v18;
  char v19;
  uint64_t result;

  v10 = sub_1C97F02F4(8, 8, a1, a2, a3, a4);
  v11 = 0;
  *a5 = v10;
  v12 = a5 + 1;
  v13 = 1;
  do
  {
    v14 = 0;
    v15 = v13;
    v16 = &a1->i8[2 * v11 * a2];
    v17 = &a3->i8[2 * v11 * a4];
    v18 = 1;
    do
    {
      v19 = v18;
      result = sub_1C97F01A4(4, 4, (uint16x4_t *)&v16[2 * v14], a2, (uint16x4_t *)&v17[2 * v14], a4);
      v18 = 0;
      *v12++ = result;
      v14 = 4;
    }
    while ((v19 & 1) != 0);
    v13 = 0;
    v11 = 4;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t sub_1C97F08C8(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  char *v16;
  char *v17;
  char v18;
  char v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint16x4_t *v23;
  uint16x4_t *v24;
  uint64_t result;
  unint64_t v26;
  BOOL v27;

  v10 = sub_1C97F044C();
  v11 = 0;
  *a5 = v10;
  v12 = a5 + 1;
  v13 = 1;
  do
  {
    v14 = 0;
    v15 = v13;
    v16 = (char *)a1 + 2 * v11 * a2;
    v17 = (char *)a3 + 2 * v11 * a4;
    v18 = 1;
    do
    {
      v19 = v18;
      v20 = sub_1C97F02F4(8, 8, (uint16x8_t *)&v16[2 * v14], a2, (uint16x8_t *)&v17[2 * v14], a4);
      v18 = 0;
      *v12++ = v20;
      v14 = 8;
    }
    while ((v19 & 1) != 0);
    v13 = 0;
    v11 = 8;
  }
  while ((v15 & 1) != 0);
  v21 = 0;
  do
  {
    v22 = 0;
    v23 = a1;
    v24 = a3;
    do
    {
      result = sub_1C97F01A4(4, 4, v23, a2, v24, a4);
      v12[v22] = result;
      v26 = v22 * 4 + 4;
      ++v24;
      ++v23;
      v27 = v22++ >= 3;
    }
    while (!v27);
    v12 = (_DWORD *)((char *)v12 + v26);
    a3 += a4;
    a1 += a2;
    v27 = v21 >= 0xC;
    v21 += 4;
  }
  while (!v27);
  return result;
}

uint64_t sub_1C97F0A10(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  unint64_t v16;
  uint16x8_t *v17;
  uint16x8_t *v18;
  unint64_t v19;
  uint16x8_t *v20;
  uint16x8_t *v21;
  BOOL v22;
  unint64_t v23;
  uint16x4_t *v24;
  unint64_t v25;
  uint16x4_t *v26;
  uint16x4_t *v27;
  uint64_t result;
  unint64_t v29;
  uint16x4_t *v30;

  *a5 = sub_1C97F0528();
  v10 = a5 + 1;
  v11 = 1;
  do
  {
    v12 = v11;
    v13 = 1;
    do
    {
      v14 = v13;
      v15 = sub_1C97F044C();
      v13 = 0;
      *v10++ = v15;
    }
    while ((v14 & 1) != 0);
    v11 = 0;
  }
  while ((v12 & 1) != 0);
  v16 = 0;
  v17 = (uint16x8_t *)a1;
  v30 = a3;
  v18 = (uint16x8_t *)a3;
  do
  {
    v19 = -8;
    v20 = v17;
    v21 = v18;
    do
    {
      *v10++ = sub_1C97F02F4(8, 8, v20, a2, v21, a4);
      v19 += 8;
      ++v21;
      ++v20;
    }
    while (v19 < 0x18);
    v18 += a4;
    v17 += a2;
    v22 = v16 >= 0x18;
    v16 += 8;
  }
  while (!v22);
  v23 = 0;
  v24 = v30;
  do
  {
    v25 = 0;
    v26 = a1;
    v27 = v24;
    do
    {
      result = sub_1C97F01A4(4, 4, v26, a2, v24, a4);
      v10[v25] = result;
      v29 = v25 * 4 + 4;
      ++v24;
      ++v26;
      v22 = v25++ >= 7;
    }
    while (!v22);
    v10 = (_DWORD *)((char *)v10 + v29);
    v24 = &v27[a4];
    a1 += a2;
    v22 = v23 >= 0x1C;
    v23 += 4;
  }
  while (!v22);
  return result;
}

float sub_1C97F0BDC(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4)
{
  float v4;
  int v5;
  float result;

  v4 = 0.0;
  v5 = 4;
  do
  {
    result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabal_u16((uint32x4_t)LODWORD(v4), *a1, *a3)));
    v4 = result;
    a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x4_t *)((char *)a1 + 2 * a2);
    --v5;
  }
  while (v5);
  return result;
}

uint64_t sub_1C97F0C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;
  int v26;
  int v27;
  int v28;

  v2 = 0;
  v3 = (_DWORD *)(a2 + 128);
  v4 = a1 + 28;
  do
  {
    v5 = *(_DWORD *)(v4 + v2 - 28);
    *(v3 - 32) = v5;
    v6 = *(_DWORD *)(v4 + v2 - 24);
    *(v3 - 24) = v6;
    v7 = *(_DWORD *)(v4 + v2 - 20);
    *(v3 - 16) = v7;
    v8 = *(_DWORD *)(v4 + v2 - 16);
    *(v3 - 8) = v8;
    v9 = *(_DWORD *)(v4 + v2 - 12);
    *v3 = v9;
    v10 = *(_DWORD *)(v4 + v2 - 8);
    v3[8] = v10;
    v11 = *(_DWORD *)(v4 + v2 - 4);
    v3[16] = v11;
    v12 = v6 + v5;
    v13 = v5 - v6;
    v14 = v8 + v7;
    v15 = v7 - v8;
    v16 = v14 + v12;
    v17 = v12 - v14;
    v18 = v15 + v13;
    v19 = *(_DWORD *)(v4 + v2);
    v20 = v13 - v15;
    v21 = v10 + v9;
    v22 = v9 - v10;
    v23 = v19 + v11;
    v24 = v11 - v19;
    result = (v23 + v21);
    v26 = v21 - v23;
    v27 = v24 + v22;
    v28 = v22 - v24;
    *(v3 - 32) = result + v16;
    *v3 = v16 - result;
    *(v3 - 24) = v27 + v18;
    v3[8] = v18 - v27;
    *(v3 - 16) = v26 + v17;
    v3[16] = v17 - v26;
    *(v3 - 8) = v28 + v20;
    v3[24] = v20 - v28;
    v2 += 32;
    ++v3;
  }
  while (v2 != 256);
  return result;
}

int *sub_1C97F0D00(int *result, uint64_t a2)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  signed int v5;
  int v6;
  uint64_t i;
  int v8;
  int v9;
  int v10;
  int32x4_t v11;
  _DWORD *v12;
  uint64_t j;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int32x4_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int *v25;

  v2 = atomic_load((unsigned __int8 *)&qword_1EF920F28);
  v3 = 0x1EF920000uLL;
  if ((v2 & 1) == 0)
  {
    v24 = a2;
    v25 = result;
    v22 = __cxa_guard_acquire(&qword_1EF920F28);
    v3 = 0x1EF920000uLL;
    v23 = v22;
    a2 = v24;
    result = v25;
    if (v23)
    {
      dword_1EF920F20 = 0;
      __cxa_guard_release(&qword_1EF920F28);
      v3 = 0x1EF920000;
      a2 = v24;
      result = v25;
    }
  }
  v4 = 0;
  v5 = *(_DWORD *)a2 << *(_DWORD *)(v3 + 3872);
  v6 = *result;
  for (i = 1; i != 8; ++i)
  {
    v8 = result[i];
    if (v8 >= 0)
      v9 = result[i];
    else
      v9 = -v8;
    v10 = v8 * v8;
    if (v9 > v5)
      v10 = 0;
    v4 += v10;
  }
  v11 = vdupq_n_s32(v5);
  v12 = result + 8;
  for (j = 1; j != 8; ++j)
  {
    v14 = 0;
    v15 = 0uLL;
    v16 = (int64x2_t)(unint64_t)v4;
    do
    {
      v17 = (int32x4_t)vbicq_s8((int8x16_t)vmulq_s32(*(int32x4_t *)&v12[v14], *(int32x4_t *)&v12[v14]), (int8x16_t)vcgtq_s32(vabsq_s32(*(int32x4_t *)&v12[v14]), v11));
      v15 = vaddw_high_s32(v15, v17);
      v16 = vaddw_s32(v16, *(int32x2_t *)v17.i8);
      v14 += 4;
    }
    while (v14 != 8);
    v18 = vaddvq_s64(vaddq_s64(v16, v15));
    v4 = v18;
    v12 += 8;
  }
  if (v6 >= 0)
    v19 = *result;
  else
    v19 = -v6;
  v20 = v6 * v6;
  if (v19 <= v5)
    v21 = v20;
  else
    v21 = 0;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v18;
  return result;
}

uint64_t sub_1C97F0E28(int a1, int a2, int *a3, unsigned int a4, _QWORD *a5, int a6)
{
  unsigned int v6;
  int v7;
  BOOL v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int i;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v54;
  unsigned int v55;
  int v56;
  char v57;
  int v58;
  char v61;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int *v71;
  int *v72;
  int *v73;
  uint64_t v74;

  *a5 = 0;
  a5[1] = 0;
  v74 = a1;
  v66 = a2;
  v6 = __clz(__rbit32(a4));
  v61 = a6;
  v57 = v6;
  v58 = a2 >> v6;
  if (a4 == 32)
    v7 = a6;
  else
    v7 = 1;
  v8 = v7 == 0;
  if (v7)
    v9 = 0;
  else
    v9 = -2;
  if (v8)
    v10 = -3;
  else
    v10 = -1;
  v55 = v10 + v6;
  v56 = a1 >> v6;
  v11 = 1;
  v54 = 1 << (v6 + v9 - 2);
  v12 = a4;
  v13 = -1;
  do
  {
    v64 = v13;
    v14 = (v61 & 1) == 0 && a4 == 32 && v11 == 8;
    v65 = 2 * v11;
    if (a2 >= 1)
    {
      v16 = 0;
      v73 = &a3[65 * v11];
      v68 = (uint64_t)v65 << 8;
      v17 = 4 * v65;
      v71 = a3;
      v72 = &a3[v11];
      v70 = &a3[64 * (uint64_t)v11];
      do
      {
        v69 = v16;
        if (a1 >= 1)
        {
          v18 = 0;
          v19 = v70;
          v20 = v71;
          v21 = v72;
          v22 = v73;
          do
          {
            if (v11 >= 1)
            {
              v23 = 0;
              v24 = v20;
              v25 = v19;
              v26 = v21;
              v27 = v22;
              do
              {
                v28 = v24;
                v29 = v25;
                v30 = v26;
                v31 = v27;
                v32 = v11;
                do
                {
                  v33 = *v29 + *v28;
                  v34 = *v28 - *v29;
                  v35 = *v31 + *v30;
                  v36 = *v30 - *v31;
                  if (v14)
                  {
                    v37 = v34 + 1;
                    v38 = v35 + 1;
                    v39 = v36 + 1;
                    *v28 = (v38 >> 1) + ((v33 + 1) >> 1);
                    *v29 = (v39 >> 1) + (v37 >> 1);
                    *v30 = ((v33 + 1) >> 1) - (v38 >> 1);
                    *v31 = (v37 >> 1) - (v39 >> 1);
                    *v28 >>= 1;
                    *v29 >>= 1;
                    v40 = *v30 >> 1;
                    v41 = *v31 >> 1;
                  }
                  else
                  {
                    *v28 = v35 + v33;
                    *v29 = v36 + v34;
                    v40 = v33 - v35;
                    v41 = v34 - v36;
                  }
                  *v30++ = v40;
                  *v31++ = v41;
                  ++v29;
                  ++v28;
                  --v32;
                }
                while (v32);
                ++v23;
                v27 += 64;
                v26 += 64;
                v25 += 64;
                v24 += 64;
              }
              while (v23 != v11);
            }
            v18 += v65;
            v22 = (int *)((char *)v22 + v17);
            v21 = (int *)((char *)v21 + v17);
            v19 = (int *)((char *)v19 + v17);
            v20 = (int *)((char *)v20 + v17);
          }
          while (v18 < v74);
        }
        v16 += v65;
        v73 = (int *)((char *)v73 + v68);
        v72 = (int *)((char *)v72 + v68);
        v70 = (int *)((char *)v70 + v68);
        v71 = (int *)((char *)v71 + v68);
      }
      while (v69 + v65 < v66);
    }
    if ((v64 & 0x80000000) == 0)
    {
      if (v58 < 1)
      {
        v43 = 0;
      }
      else
      {
        v42 = 0;
        v43 = 0;
        do
        {
          if (v56 >= 1)
          {
            for (i = 0; i != v56; ++i)
            {
              v45 = 0;
              v46 = 0;
              v47 = (uint64_t)&a3[64 * (uint64_t)(v42 << v57) + (i << v57)];
              do
              {
                v48 = (int *)v47;
                v49 = v12;
                do
                {
                  v51 = *v48++;
                  v50 = v51;
                  if (v51 < 0)
                    v50 = -v50;
                  v46 += v50;
                  --v49;
                }
                while (v49);
                ++v45;
                v47 += 256;
              }
              while (v45 != v12);
              v52 = (v46 + v54) >> v55;
              if (!v55)
                v52 = v46;
              v43 += v52;
            }
          }
          ++v42;
        }
        while (v42 != v58);
      }
      *((_DWORD *)a5 + v64) = v43;
    }
    v13 = v64 + 1;
    v11 *= 2;
  }
  while (v65 < (int)a4);
  return *((unsigned int *)a5 + v64);
}

uint64_t sub_1C97F11BC(uint64_t a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int32x4_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v1 = atomic_load((unsigned __int8 *)&qword_1EF920F08);
  v2 = 0x1EF920000uLL;
  if ((v1 & 1) == 0)
  {
    v14 = a1;
    v10 = __cxa_guard_acquire(&qword_1EF920F08);
    v2 = 0x1EF920000uLL;
    v11 = v10;
    a1 = v14;
    if (v11)
    {
      dword_1EF920F00 = 2;
      __cxa_guard_release(&qword_1EF920F08);
      v2 = 0x1EF920000;
      a1 = v14;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EF920F18);
  v4 = 0x1EF920000uLL;
  if ((v3 & 1) == 0)
  {
    v15 = a1;
    v12 = __cxa_guard_acquire(&qword_1EF920F18);
    v4 = 0x1EF920000uLL;
    v2 = 0x1EF920000uLL;
    v13 = v12;
    a1 = v15;
    if (v13)
    {
      dword_1EF920F10 = 1 << (dword_1EF920F00 - 1);
      __cxa_guard_release(&qword_1EF920F18);
      v4 = 0x1EF920000;
      v2 = 0x1EF920000;
      a1 = v15;
    }
  }
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = (int32x4_t)v6;
    do
    {
      v8 = vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v7)), v8);
      v7 += 16;
    }
    while (v7 != 32);
    v6 = vaddvq_s32(v8);
    ++v5;
    a1 += 32;
  }
  while (v5 != 8);
  return ((int)(*(_DWORD *)(v4 + 3856) + v6) >> *(_DWORD *)(v2 + 3840));
}

uint64_t sub_1C97F12EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = 0;
  v3 = (_DWORD *)(a2 + 32);
  v4 = result + 12;
  do
  {
    v5 = *(_DWORD *)(result + v2);
    *(v3 - 8) = v5;
    v6 = *(_DWORD *)(v4 + v2 - 8);
    *(v3 - 4) = v6;
    v7 = *(_DWORD *)(v4 + v2 - 4);
    *v3 = v7;
    v8 = *(_DWORD *)(v4 + v2);
    v9 = v6 + v5;
    v10 = v5 - v6;
    v11 = v8 + v7;
    v12 = v7 - v8;
    *(v3 - 8) = v11 + v9;
    *v3 = v9 - v11;
    *(v3 - 4) = v12 + v10;
    v3[4] = v10 - v12;
    v2 += 16;
    ++v3;
  }
  while (v2 != 64);
  return result;
}

uint64_t sub_1C97F135C(uint64_t a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v1 = atomic_load((unsigned __int8 *)&qword_1EF920EE8);
  v2 = 0x1EF920000uLL;
  if ((v1 & 1) == 0)
  {
    v12 = a1;
    v8 = __cxa_guard_acquire(&qword_1EF920EE8);
    v2 = 0x1EF920000uLL;
    v9 = v8;
    a1 = v12;
    if (v9)
    {
      dword_1EF920EE0 = 1;
      __cxa_guard_release(&qword_1EF920EE8);
      v2 = 0x1EF920000;
      a1 = v12;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EF920EF8);
  v4 = 0x1EF920000uLL;
  if ((v3 & 1) == 0)
  {
    v13 = a1;
    v10 = __cxa_guard_acquire(&qword_1EF920EF8);
    v4 = 0x1EF920000uLL;
    v2 = 0x1EF920000uLL;
    v11 = v10;
    a1 = v13;
    if (v11)
    {
      dword_1EF920EF0 = 1 << (dword_1EF920EE0 - 1);
      __cxa_guard_release(&qword_1EF920EF8);
      v4 = 0x1EF920000;
      v2 = 0x1EF920000;
      a1 = v13;
    }
  }
  v5 = 0;
  v6 = 0;
  do
  {
    v6 = vaddvq_s32(vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v5)), (int32x4_t)v6));
    v5 += 16;
  }
  while (v5 != 64);
  return ((int)(*(_DWORD *)(v4 + 3824) + v6) >> *(_DWORD *)(v2 + 3808));
}

uint64_t sub_1C97F1478(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t i;
  _BYTE *v7;
  uint64_t result;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64x2_t v12;
  int64x2_t v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  _BYTE v22[256];
  _BYTE v23[256];
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = v22;
  do
  {
    for (i = 0; i != 8; ++i)
      *(_DWORD *)&v5[4 * i] = *(unsigned __int8 *)(a1 + i);
    ++v4;
    a1 += a2;
    v5 += 32;
  }
  while (v4 != 8);
  v7 = v22;
  sub_1C97F0C20((uint64_t)v22, (uint64_t)v23);
  result = sub_1C97F0C20((uint64_t)v23, (uint64_t)v22);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (uint64x2_t)vdupq_n_s64(7uLL);
  v13 = vdupq_n_s64(4uLL);
  do
  {
    v14 = 0;
    v15 = (int32x4_t)v10;
    v16 = (int32x4_t)v11;
    v17 = vdupq_n_s64(v9);
    v18 = (int64x2_t)xmmword_1C9862F20;
    v19 = (int64x2_t)xmmword_1C9862F10;
    do
    {
      v20 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v18, v17)), (int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v19, v17)));
      v21 = (int8x16_t)vabsq_s32(*(int32x4_t *)&v7[v14]);
      v16 = vaddq_s32((int32x4_t)vbicq_s8(v21, v20), v16);
      v15 = vaddq_s32((int32x4_t)vandq_s8(v21, v20), v15);
      v19 = vaddq_s64(v19, v13);
      v18 = vaddq_s64(v18, v13);
      v14 += 16;
    }
    while (v14 != 32);
    v11 = vaddvq_s32(v16);
    v10 = vaddvq_s32(v15);
    ++v9;
    v7 += 32;
  }
  while (v9 != 8);
  *a3 = v10;
  a3[1] = v11;
  return result;
}

int *sub_1C97F15D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int *v5;
  uint64_t i;
  int v8[64];
  _BYTE v9[256];
  uint64_t v10;

  v4 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  v5 = v8;
  do
  {
    for (i = 0; i != 8; ++i)
      v5[i] = *(unsigned __int8 *)(a1 + i);
    ++v4;
    a1 += a2;
    v5 += 8;
  }
  while (v4 != 8);
  sub_1C97F0C20((uint64_t)v8, (uint64_t)v9);
  sub_1C97F0C20((uint64_t)v9, (uint64_t)v8);
  return sub_1C97F0D00(v8, a3);
}

float sub_1C97F1678(unsigned __int32 *a1, uint64_t a2, unsigned __int32 *a3, uint64_t a4, double a5, uint32x4_t a6, uint32x4_t a7)
{
  float v7;
  int v8;
  float result;

  v7 = 0.0;
  v8 = 4;
  do
  {
    a6.i32[0] = *a1;
    a6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8));
    a7.i32[0] = *a3;
    a7 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a7.i8));
    result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabaq_u32((uint32x4_t)LODWORD(v7), a6, a7)));
    v7 = result;
    a1 = (unsigned __int32 *)((char *)a1 + a2);
    a3 = (unsigned __int32 *)((char *)a3 + a4);
    --v8;
  }
  while (v8);
  return result;
}

uint64_t sub_1C97F16C4(uint64_t result, int a2, int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  if (a2 > 51)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v6 = a3 + a2;
    if (a3 + a2 >= 63)
      v6 = 63;
    v7 = v6 & ~(v6 >> 31);
    v8 = dword_1C985909C[70 * *(unsigned __int8 *)(result + 172) + v7];
    v9 = *(unsigned __int16 *)(*(_QWORD *)(result + 56) + 2 * v7);
    v10 = *(unsigned __int16 *)(*(_QWORD *)(result + 64) + 2 * v7);
    v11 = a2 & ~(a2 >> 31);
    v12 = *(unsigned __int16 *)(*(_QWORD *)(result + 24) + 2 * v11);
    v13 = *(unsigned __int16 *)(*(_QWORD *)(result + 40) + 2 * v11);
  }
  *a4 = v8;
  *a5 = v9;
  a5[1] = v10;
  *a6 = v12;
  a6[1] = v13;
  return result;
}

uint64_t sub_1C97F1740(uint64_t result, int a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  __int16 *v6;
  __int16 v7;
  __int16 v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3 + a2;
  if (a3 + a2 >= 63)
    v3 = 63;
  v4 = v3 & ~(v3 >> 31);
  v5 = dword_1C985909C[70 * *(unsigned __int8 *)(result + 172) + v4];
  *(_WORD *)(result + 144) = v5;
  v6 = (__int16 *)((char *)&unk_1C9859614 + 700 * *(unsigned __int8 *)(result + 170) + 2 * v4);
  v7 = v6[70 * *(unsigned __int8 *)(result + 171)];
  *(_WORD *)(result + 146) = v7;
  v8 = *v6;
  *(_WORD *)(result + 148) = *v6;
  *(_WORD *)(result + 150) = v6[70];
  if (a2 >= 51)
    v9 = 51;
  else
    v9 = a2;
  v10 = v9 & ~(v9 >> 31);
  v11 = *(_QWORD *)(result + 32);
  *(_WORD *)(result + 162) = *(_WORD *)(*(_QWORD *)(result + 24) + 2 * v10);
  v12 = *(_QWORD *)(result + 48);
  *(_WORD *)(result + 166) = *(_WORD *)(*(_QWORD *)(result + 40) + 2 * v10);
  *(_WORD *)(result + 164) = *(_WORD *)(v11 + 2 * v10);
  *(_WORD *)(result + 168) = *(_WORD *)(v12 + 2 * v10);
  *(_WORD *)(result + 154) = v7;
  *(_WORD *)(result + 156) = v7;
  *(_WORD *)(result + 158) = v7;
  *(_WORD *)(result + 152) = v5;
  *(_WORD *)(result + 160) = v8;
  return result;
}

uint64_t sub_1C97F17FC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, unsigned __int8 *a6)
{
  return sub_1C97F1844(a1, a2, a3, a4, a5, *(unsigned __int8 *)(*((_QWORD *)a6 + 12)+ 16* (((uint64_t)(a3 - *((_DWORD *)a6 + 1)) >> 2)+ ((unint64_t)*a6 >> 2) * ((a4 - *((_DWORD *)a6 + 2)) >> 2))+ 10), (*(unsigned __int16 *)(*((_QWORD *)a6 + 11)+ 2* (((uint64_t)(a3 - *((_DWORD *)a6 + 1)) >> 3)+ ((unint64_t)*a6 >> 3) * ((a4 - *((_DWORD *)a6 + 2)) >> 3))) >> 4) & 7);
}

uint64_t sub_1C97F1844(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_QWORD *)(result + 9464);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(result + 9472) + 2113);
  *(_QWORD *)(result + 32) = v7;
  v9 = v8 - a5;
  *(_DWORD *)result = v9;
  *(_DWORD *)(result + 4) = a6;
  *(_DWORD *)(result + 8) = a7;
  if (a6 == 1)
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 16) + 273);
    if (a7)
      ++v10;
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 16);
    v10 = (v9 - *(unsigned __int8 *)(v11 + 2114)) & ~((v9 - *(unsigned __int8 *)(v11 + 2114)) >> 31);
    v12 = *(unsigned __int8 *)(v11 + 272);
    if (v10 >= v12)
      v10 = v12;
  }
  *(_DWORD *)(result + 12) = v10;
  *(_QWORD *)(result + 6344) = 0;
  *(_OWORD *)(result + 6264) = 0u;
  *(_OWORD *)(result + 6280) = 0u;
  *(_OWORD *)(result + 6296) = 0u;
  *(_OWORD *)(result + 6312) = 0u;
  *(_OWORD *)(result + 6328) = 0u;
  *(_QWORD *)(result + 9488) = a2;
  *(_DWORD *)(result + 9512) = a3;
  *(_DWORD *)(result + 9516) = a4;
  *(_DWORD *)(result + 9520) = a5;
  *(_QWORD *)(result + 9496) = a2 + 1000;
  *(_BYTE *)(result + 9504) = *(_BYTE *)(a2 + 8);
  v13 = *(_QWORD *)(v7 + 5320);
  v14 = 664;
  if (a6 == 1)
    v14 = 662;
  *(_BYTE *)(result + 9569) = *(unsigned __int16 *)(v13 + v14) != 0;
  return result;
}

uint64_t sub_1C97F1908(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  if (a3 < 4)
    return 0xFFFFFFFFLL;
  LODWORD(v4) = 1 << a3;
  v5 = 2 * a1;
  if (a3 == 31)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v9 = 0;
    LODWORD(v8) = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    if ((int)v4 <= 1)
      v10 = 1;
    else
      v10 = v4;
    v11 = a2;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        v13 = *(unsigned __int16 *)(v11 + 2 * i);
        v6 = (v6 + i * v13);
        v7 = (v7 + v9 * v13);
        v8 = (v8 + v13);
      }
      ++v9;
      v11 += v5;
    }
    while (v9 != (_DWORD)v10);
  }
  v14 = 0;
  v15 = (int *)((char *)&unk_1C98618BC + 36 * (a3 - 2) + 8);
  do
  {
    v22[v14++] = v6 * *(v15 - 2) + v7 * *(v15 - 1) + v8 * *v15;
    v15 += 3;
  }
  while (v14 != 3);
  if (a3 == 31)
  {
    v16 = 0;
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v18 = v22[2];
    if ((int)v4 <= 1)
      v4 = 1;
    else
      v4 = v4;
    do
    {
      v19 = 0;
      v20 = v18;
      do
      {
        v21 = *(unsigned __int16 *)(a2 + v19) - (v20 >> 24);
        v16 += v21 * v21;
        v19 += 2;
        v20 += v22[0];
      }
      while (2 * v4 != v19);
      ++v17;
      a2 += v5;
      v18 += v22[1];
    }
    while (v17 != v4);
  }
  return v16 >> (2 * a3);
}

uint64_t sub_1C97F1A84(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  if (a3 < 4)
    return 0xFFFFFFFFLL;
  LODWORD(v4) = 1 << a3;
  if (a3 == 31)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v8 = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    LODWORD(v5) = 0;
    if ((int)v4 <= 1)
      v9 = 1;
    else
      v9 = v4;
    v10 = a2;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        v12 = *(unsigned __int8 *)(v10 + i);
        v5 = (v5 + i * v12);
        v6 = (v6 + v8 * v12);
        v7 = (v7 + v12);
      }
      v10 += a1;
      ++v8;
    }
    while (v8 != (_DWORD)v9);
  }
  v13 = 0;
  v14 = (int *)((char *)&unk_1C98618BC + 36 * (a3 - 2) + 8);
  do
  {
    v21[v13++] = v5 * *(v14 - 2) + v6 * *(v14 - 1) + v7 * *v14;
    v14 += 3;
  }
  while (v13 != 3);
  if (a3 == 31)
  {
    v15 = 0;
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v17 = v21[2];
    if ((int)v4 <= 1)
      v4 = 1;
    else
      v4 = v4;
    do
    {
      v18 = 0;
      v19 = v17;
      do
      {
        v20 = *(unsigned __int8 *)(a2 + v18) - (v19 >> 24);
        v15 += v20 * v20;
        ++v18;
        v19 += v21[0];
      }
      while (v4 != v18);
      a2 += a1;
      ++v16;
      v17 += v21[1];
    }
    while (v16 != v4);
  }
  return v15 >> (2 * a3);
}

uint64_t sub_1C97F1BF8(int a1)
{
  return (a1 + 32) >> 6;
}

uint64_t sub_1C97F1C04(int a1)
{
  return (a1 + 512) >> 10;
}

uint64_t sub_1C97F1C10(int a1)
{
  return (a1 + 8) >> 4;
}

uint64_t sub_1C97F1C1C(int a1)
{
  return (a1 + 128) >> 8;
}

uint64_t sub_1C97F1C28(int a1)
{
  return (a1 + 2) >> 2;
}

uint64_t sub_1C97F1C34(int a1)
{
  return (a1 + 32) >> 6;
}

uint64_t sub_1C97F1C44(int a1)
{
  return (a1 + 8) >> 4;
}

uint64_t sub_1C97F1C50(uint64_t result, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  *a4 = 0;
  *a5 = 0;
  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      v6 = 0;
      do
      {
        v7 = *(__int16 *)(a3 + v6);
        v8 = *a4;
        if (*(_WORD *)(a3 + v6))
          ++v8;
        *a4 = v8;
        if (v7 < 0)
          v7 = -v7;
        *a5 += v7;
        v6 += 2;
      }
      while (2 * result != v6);
      ++v5;
      a3 += 2 * a2;
    }
    while (v5 != (_DWORD)result);
  }
  return result;
}

uint64_t sub_1C97F1CB4(uint64_t a1, int a2, _DWORD *a3, _WORD *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = 0;
  v5 = 0xFFFFFFFFLL;
  v6 = 15;
  v7 = 1;
  do
  {
    v8 = *((unsigned __int8 *)&unk_1C9861A40 + 64 * (uint64_t)a2 + v6);
    if (*(_WORD *)(a1 + 2 * v8))
    {
      v4 |= 1 << v6;
      if ((v7 & 1) != 0)
      {
        v7 = 0;
        *a3 = v8 & 3;
        a3[1] = v8 >> 2;
        v5 = v6;
      }
      else
      {
        v7 = 0;
      }
    }
    --v6;
  }
  while (v6 != -1);
  *a4 = v4;
  return v5;
}

uint64_t sub_1C97F1D24(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v4 = (char *)&unk_1C98619CC + 4 * a2;
  v5 = (char *)&unk_1C9861A40 + 64 * (uint64_t)a2 + 31;
  v6 = 0xFFFFFFFFLL;
  v7 = 3;
  v8 = 63;
  v9 = 1;
  do
  {
    v10 = 0;
    v11 = 0;
    v12 = v7;
    v13 = v4[v7];
    v14 = v13 >> 1;
    v15 = 4 * (v13 & 1);
    v16 = a1 + 2 * (v15 | (32 * v14));
    v17 = 4 * v14;
    do
    {
      v18 = v5[v10];
      if (*(_WORD *)(v16 + 2 * v18))
      {
        v11 |= 1 << (v10 + 15);
        if ((v9 & 1) != 0)
        {
          v9 = 0;
          *a3 = v18 & 3 | v15;
          a3[1] = v17 + (v18 >> 3);
          v6 = (v8 + v10);
        }
        else
        {
          v9 = 0;
        }
      }
      --v10;
    }
    while (v10 != -16);
    *(_WORD *)(a4 + 2 * v12) = v11;
    v7 = v12 - 1;
    v8 -= 16;
  }
  while (v12);
  return v6;
}

uint64_t sub_1C97F1DDC(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = (char *)&unk_1C9861A40 + 64 * (uint64_t)a2 + 47;
  v5 = 0xFFFFFFFFLL;
  v6 = 0xFu;
  v7 = 255;
  v8 = 1;
  do
  {
    v9 = 0;
    v10 = 0;
    v11 = v6;
    v12 = byte_1C98619D8[v6];
    v13 = 4 * (v12 & 3);
    v14 = a1 + 2 * ((16 * v12) & 0xFC0 | v13);
    v15 = v12 & 0xFC;
    do
    {
      v16 = v4[v9];
      if (*(_WORD *)(v14 + 2 * v16))
      {
        v10 |= 1 << (v9 + 15);
        if ((v8 & 1) != 0)
        {
          v8 = 0;
          *a3 = v16 & 3 | v13;
          a3[1] = v15 + (v16 >> 4);
          v5 = (v7 + v9);
        }
        else
        {
          v8 = 0;
        }
      }
      --v9;
    }
    while (v9 != -16);
    *(_WORD *)(a4 + 2 * v11) = v10;
    v6 = v11 - 1;
    v7 -= 16;
  }
  while (v11);
  return v5;
}

uint64_t sub_1C97F1E94(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v4 = (char *)&unk_1C9861A40 + 64 * (uint64_t)a2 + 63;
  v5 = 0xFFFFFFFFLL;
  v6 = 0x3Fu;
  v7 = 1023;
  v8 = 1;
  do
  {
    v9 = 0;
    v10 = 0;
    v11 = v6;
    v12 = byte_1C9861A00[v6];
    v13 = v12 >> 3;
    v14 = 4 * (v12 & 7);
    v15 = a1 + 2 * (v14 | (v13 << 7));
    v16 = 4 * v13;
    do
    {
      v17 = v4[v9];
      if (*(_WORD *)(v15 + 2 * v17))
      {
        v10 |= 1 << (v9 + 15);
        if ((v8 & 1) != 0)
        {
          v8 = 0;
          *a3 = v17 & 3 | v14;
          a3[1] = v16 + (v17 >> 5);
          v5 = (v7 + v9);
        }
        else
        {
          v8 = 0;
        }
      }
      --v9;
    }
    while (v9 != -16);
    *(_WORD *)(a4 + 2 * v11) = v10;
    v6 = v11 - 1;
    v7 -= 16;
  }
  while (v11);
  return v5;
}

uint64_t sub_1C97F1F48(uint64_t a1, __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17)
{
  int v18;
  uint64_t result;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  __int16 v28;
  int v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  unsigned __int16 *v62;
  unsigned int v63;
  uint64_t v64;

  v18 = a5;
  a17 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, int *, uint64_t *))(a1 + 9432))(a3, a5, &a15, &v64);
  if ((result & 0x80000000) == 0)
  {
    v23 = result;
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
    v62 = a3;
    v25 = a3[4 * a16 + a15];
    LOWORD(v26) = v25;
    if ((v25 & 0x8000u) != 0)
      v26 = -(__int16)v25;
    a11 = v26;
    v27 = (unsigned __int16)v26 > 1u;
    v63 = v25 >> 15;
    v28 = *a2;
    if (v18 == 2)
      v29 = a15;
    else
      v29 = a16;
    if (v18 == 2)
      v30 = a16;
    else
      v30 = a15;
    sub_1C97F34E8(v24, v30, 2, a6, v24 + 91);
    result = sub_1C97F34E8(v24, v29, 2, a6, v24 + 109);
    v31 = a6 > 0;
    v32 = 27;
    if (a6 <= 0)
      v32 = 0;
    v33 = v24 + v32 + 131;
    v35 = (v28 & 0x100) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 9464) + 32) + 5) != 0;
    v60 = v31;
    v61 = v35;
    v36 = (unsigned __int16)v64;
    if (v23 < 2)
    {
      v39 = 1;
    }
    else
    {
      v37 = &byte_1C9861A40[64 * (uint64_t)v18];
      v38 = v23;
      v39 = 1;
      do
      {
        v40 = v37[--v38];
        result = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v24)(v24, (v36 >> v38) & 1, v33 + byte_1C98626F0[v40 + 64]);
        if (((v36 >> v38) & 1) != 0)
        {
          v41 = v62[v40];
          LOWORD(v42) = v41;
          if ((v41 & 0x8000u) != 0)
            v42 = -(__int16)v41;
          *(&a11 + v39) = v42;
          v63 = (v41 >> 15) | (2 * v63);
          v27 += ((unsigned __int16)v42 > 1u) << v39++;
        }
      }
      while ((unint64_t)(v38 + 1) > 2);
    }
    if (v23 > 0
      && (result = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v24)(v24, v36 & 1, v33), (v36 & 1) != 0))
    {
      v43 = *v62;
      LOWORD(v44) = v43;
      if ((v43 & 0x8000u) != 0)
        v44 = -(__int16)v43;
      *(&a11 + v39) = v44;
      v63 = (v43 >> 15) | (2 * v63);
      v27 += ((unsigned __int16)v44 > 1u) << v39++;
    }
    else if (!v36)
    {
      return result;
    }
    v45 = __clz(v36) + __clz(__rbit32(v36)) < 0x1C && v61;
    if (v39 < 1)
      goto LABEL_50;
    v46 = v39 >= 8 ? 8 : v39;
    v47 = 1;
    v48 = v27;
    do
    {
      v49 = v24 + 16 * v60 + 175 + v47;
      if ((unint64_t)(v47 - 1) >= 2)
        v50 = v47;
      else
        v50 = v47 + 1;
      if ((v48 & 1) != 0)
        v47 = 0;
      else
        v47 = v50;
      (**(void (***)(uint64_t, _QWORD, uint64_t))v24)(v24, v48 & 1, v49);
      v48 >>= 1;
      --v46;
    }
    while (v46);
    if (v47)
    {
LABEL_50:
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, v63 >> v45, (v39 - v45));
      if (v39 < 9)
        return result;
    }
    else
    {
      (**(void (***)(uint64_t, BOOL, uint64_t))v24)(v24, (unsigned __int16)*(&a11 + __clz(__rbit32(v27))) > 2u, v24 + 4 * v60 + 199);
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, v63 >> v45, (v39 - v45));
    }
    v51 = 0;
    v52 = 0;
    if (v39 <= 1)
      v53 = 1;
    else
      v53 = v39;
    v54 = 3;
    do
    {
      v55 = (unsigned __int16)*(&a11 + v51);
      v56 = (v55 - v54);
      if (v55 >= v54)
      {
        if ((int)v56 >= 3 << v52)
        {
          v57 = __clz(v56 + (-2 << v52));
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 24))(v24, ((((-1 << (31 - v57 - v52)) - 2) << v52) + (_DWORD)v56) | (-2 << ~(_BYTE)v57), 31 - v57 - ((_DWORD)v52 + v57) + 35);
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, v56, v52);
        }
        if (3 << v52 >= v55)
          v58 = v52;
        else
          v58 = v52 + 1;
        if (v58 >= 4)
          v52 = 4;
        else
          v52 = v58;
      }
      if (v55 <= 1)
        v59 = v54;
      else
        v59 = 2;
      if (v51 > 6)
        v54 = 1;
      else
        v54 = v59;
      ++v51;
    }
    while (v53 != v51);
  }
  return result;
}

uint64_t sub_1C97F238C(uint64_t a1, __int16 *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48,uint64_t a49)
{
  int v49;
  uint64_t v53;
  uint64_t result;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char *v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  BOOL v91;
  int v92;
  _BOOL4 v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  int v108;
  uint64_t vars0;
  int vars8;
  int v112;
  char *v113;
  int v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  uint64_t v124;
  unsigned __int8 *v125;
  __int16 v126;
  uint64_t v127;
  unsigned int v128;

  v49 = a5;
  a49 = *MEMORY[0x1E0C80C00];
  v53 = a4;
  v117 = a4 - 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, char *))(a1 + 8 * v117 + 9432))(a3, a5, &a47, &a29);
  if ((result & 0x80000000) == 0)
  {
    v55 = result;
    v124 = a1;
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
    v57 = *(unsigned __int16 *)(a3 + 2 * ((a48 << a4) + a47));
    LOWORD(v58) = v57;
    if ((v57 & 0x8000u) != 0)
      v58 = -(__int16)v57;
    a25 = v58;
    v128 = (unsigned __int16)v58 > 1u;
    v126 = *a2;
    if (v49 == 2)
      v59 = a47;
    else
      v59 = a48;
    if (v49 == 2)
      v60 = a48;
    else
      v60 = a47;
    sub_1C97F34E8(v56, v60, a4, a6, v56 + 91);
    result = sub_1C97F34E8(v56, v59, a4, a6, v56 + 109);
    if (v60 >= 4)
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 32))(v56, byte_1C985A101[v60 - 4], byte_1C985A0E5[v60 - 4]);
    v61 = v57 >> 15;
    if (v59 >= 4)
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 32))(v56, byte_1C985A101[v59 - 4], byte_1C985A0E5[v59 - 4]);
    v122 = 0;
    v62 = 27;
    if (a6 <= 0)
      v62 = 0;
    v63 = 4 * v49;
    if (a4 != 3)
      v63 = 0;
    v66 = (v126 & 0x100) == 0;
    vars0 = v56 + 2 * (a6 > 0) + 127;
    v127 = v56 + v62 + 131;
    v116 = (char *)*(&off_1E82928A8 + v117) + v63;
    v64 = v49;
    v65 = v55 & 0xF;
    v66 = !v66 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v124 + 9464) + 32) + 5) == 0;
    v67 = !v66;
    vars8 = v67;
    v68 = (char *)&unk_1C98627C0 + 384 * (a6 > 0) + 128 * v53 - 384;
    if (v49)
      v68 = (char *)&unk_1C9862740;
    v113 = v68;
    v114 = (1 << v117) - 1;
    v112 = 4 << a4;
    v115 = v55 >> 4;
    v69 = v115;
    LODWORD(v70) = 1;
    v71 = 1;
    v125 = &byte_1C9861A40[64 * v64];
    do
    {
      v72 = v116[v69];
      v73 = v72 >> v117;
      if ((int)(v114 & v72) >= v114)
        v74 = 0;
      else
        v74 = (v122 >> v72) & 2;
      v75 = (v122 >> ((1 << v117) + v72)) & 1;
      if (v73 >= v114)
        LODWORD(v75) = 0;
      v76 = v75 | v74;
      v77 = *((unsigned __int16 *)&a29 + v69);
      v78 = v69 - 1;
      v121 = v65;
      if (v69 != v115 && v69)
      {
        v79 = (_DWORD)v76 ? v56 + 2 * (a6 > 0) + 128 : v56 + 2 * (a6 > 0) + 127;
        result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))v56)(v56, v77 != 0, v79);
        v65 = v121;
        if (!v77)
          goto LABEL_103;
      }
      v118 = v72;
      v119 = v69 - 1;
      v80 = v72 & ~(-1 << v117);
      v120 = v69;
      v81 = &v113[32 * v76 + 16 * (v69 != 0)];
      v82 = v73 * v112 + 4 * v80;
      if (v65 > 1)
      {
        v83 = v65;
        do
        {
          v84 = v125[16 * v117 + --v83];
          result = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v56)(v56, (v77 >> v83) & 1, v127 + v81[v125[v83]]);
          if (((v77 >> v83) & 1) != 0)
          {
            v85 = *(unsigned __int16 *)(a3 + 2 * (v82 + v84));
            LOWORD(v86) = v85;
            if ((v85 & 0x8000u) != 0)
              v86 = -(__int16)v85;
            *(&a25 + (int)v70) = v86;
            v61 = (v85 >> 15) | (2 * v61);
            v128 += ((unsigned __int16)v86 > 1u) << v70;
            LODWORD(v70) = v70 + 1;
          }
        }
        while ((unint64_t)(v83 + 1) > 2);
      }
      v122 |= 1 << v118;
      v87 = v61;
      if (v121 >= 1)
      {
        if (v69 && (int)v70 < 1)
        {
          if ((v77 & 1) != 0)
            goto LABEL_52;
        }
        else
        {
          result = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v56)(v56, v77 & 1, v127 + *v81);
          if ((v77 & 1) != 0)
          {
LABEL_52:
            v88 = *(unsigned __int16 *)(a3 + 2 * v82);
            LOWORD(v89) = v88;
            if ((v88 & 0x8000u) != 0)
              v89 = -(__int16)v88;
            *(&a25 + (int)v70) = v89;
            v87 = (v88 >> 15) | (2 * v61);
            v128 += ((unsigned __int16)v89 > 1u) << v70;
            LODWORD(v70) = v70 + 1;
LABEL_55:
            if (__clz(v77) + __clz(__rbit32(v77)) < 0x1C)
              v90 = vars8;
            else
              v90 = 0;
            if (v69)
              v91 = a6 <= 0;
            else
              v91 = 0;
            if (v91)
              v92 = 2;
            else
              v92 = 0;
            v93 = v71 == 0;
            v94 = v87 >> v90;
            if ((int)v70 < 1)
            {
              v71 = 1;
            }
            else
            {
              v95 = v92 | v93;
              v96 = v56 + 16 * (a6 > 0) + 175 + 4 * (v92 | v93);
              if ((int)v70 >= 8)
                v97 = 8;
              else
                v97 = v70;
              v98 = 1;
              v99 = v128;
              do
              {
                v100 = v96 + v98;
                if ((unint64_t)(v98 - 1) >= 2)
                  v71 = v98;
                else
                  v71 = v98 + 1;
                if ((v99 & 1) != 0)
                  v98 = 0;
                else
                  v98 = v71;
                (**(void (***)(uint64_t, _QWORD, uint64_t))v56)(v56, v99 & 1, v100);
                v99 >>= 1;
                --v97;
              }
              while (v97);
              if (!v98)
              {
                (**(void (***)(uint64_t, BOOL, uint64_t))v56)(v56, (unsigned __int16)*(&a25 + __clz(__rbit32(v128))) > 2u, v56 + 4 * (a6 > 0) + 199 + v95);
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, v94, (v70 - v90));
                v71 = 0;
LABEL_80:
                v101 = 0;
                v102 = 0;
                if ((int)v70 <= 1)
                  v70 = 1;
                else
                  v70 = v70;
                v103 = 3;
                do
                {
                  v104 = (unsigned __int16)*(&a25 + v101);
                  v105 = (v104 - v103);
                  if (v104 >= v103)
                  {
                    if ((int)v105 >= 3 << v102)
                    {
                      v106 = __clz(v105 + (-2 << v102));
                      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 24))(v56, ((((-1 << (31 - v106 - v102)) - 2) << v102) + (_DWORD)v105) | (-2 << ~(_BYTE)v106), 31 - v106 - ((_DWORD)v102 + v106) + 35);
                    }
                    else
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56 + 48))(v56, v105, v102);
                    }
                    if (3 << v102 >= v104)
                      v107 = v102;
                    else
                      v107 = v102 + 1;
                    if (v107 >= 4)
                      v102 = 4;
                    else
                      v102 = v107;
                  }
                  if (v104 <= 1)
                    v108 = v103;
                  else
                    v108 = 2;
                  if (v101 > 6)
                    v103 = 1;
                  else
                    v103 = v108;
                  ++v101;
                }
                while (v70 != v101);
LABEL_101:
                LODWORD(v70) = 0;
                v61 = 0;
                v128 = 0;
                v65 = 16;
                v69 = v120;
                goto LABEL_102;
              }
            }
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, v94, (v70 - v90));
            if ((int)v70 >= 9)
              goto LABEL_80;
            goto LABEL_101;
          }
        }
      }
      if (v77)
        goto LABEL_55;
      v65 = 16;
LABEL_102:
      v78 = v119;
LABEL_103:
      v91 = v69 <= 0;
      v69 = v78;
    }
    while (!v91);
  }
  return result;
}

uint64_t sub_1C97F2A70(uint64_t a1, __int16 *a2, __int16 *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  int v22;
  uint64_t result;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BOOL4 v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t vars0;

  v22 = a5;
  a21 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(__int16 *, uint64_t, int *, uint64_t *))(a1 + 9432))(a3, a5, &a19, &vars0);
  v27 = result;
  if ((result & 0x80000000) == 0)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
    v60 = v28 + 48;
    v61 = v28;
    v29 = a3[4 * a20 + a19];
    LODWORD(v62) = *(_DWORD *)(v28 + 228);
    if (v29 >= 0)
      LOWORD(v30) = v29;
    else
      v30 = -v29;
    a15 = v30;
    v31 = (unsigned __int16)v30 > 1u;
    v32 = *a2;
    if (v22 == 2)
      v33 = a19;
    else
      v33 = a20;
    if (v22 == 2)
      v34 = a20;
    else
      v34 = a19;
    sub_1C97F341C((uint64_t)&v60, v34, 2, a6, v28 + 91);
    result = sub_1C97F341C((uint64_t)&v60, v33, 2, a6, v60 + 61);
    v35 = 27;
    if (a6 <= 0)
      v35 = 0;
    v36 = v60;
    v37 = (_BYTE *)(v60 + v35 + 83);
    v39 = (v32 & 0x100) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 9464) + 32) + 5) != 0;
    v40 = (unsigned __int16)vars0;
    v41 = v62;
    if (v27 < 2)
    {
      LODWORD(v43) = 1;
    }
    else
    {
      v42 = v27;
      LODWORD(v43) = 1;
      result = (uint64_t)byte_1C98626F0;
      do
      {
        v44 = byte_1C9861A40[64 * (uint64_t)v22 + --v42];
        if (((v40 >> v42) & 1) != 0)
        {
          v45 = a3[v44];
          if (v45 < 0)
            v45 = -v45;
          *(&a15 + (int)v43) = v45;
          v31 += ((unsigned __int16)v45 > 1u) << v43;
          LODWORD(v43) = v43 + 1;
        }
        v41 += dword_1C9860D8C[v37[byte_1C98626F0[v44 + 64]] ^ (v40 >> v42) & 1];
      }
      while ((unint64_t)(v42 + 1) > 2);
    }
    if (v27 > 0 && (v41 += dword_1C9860D8C[*v37 ^ v40 & 1], (v40 & 1) != 0))
    {
      v46 = *a3;
      if (v46 < 0)
        v46 = -v46;
      *(&a15 + (int)v43) = v46;
      v31 += ((unsigned __int16)v46 > 1u) << v43;
      LODWORD(v43) = v43 + 1;
    }
    else if (!v40)
    {
      goto LABEL_74;
    }
    if (__clz(v40) + __clz(__rbit32(v40)) >= 0x1C)
      v39 = 0;
    if ((int)v43 > 0)
    {
      v47 = v36 + 16 * (a6 > 0) + 127;
      v48 = v36 + 151;
      if ((int)v43 >= 8)
        v49 = 8;
      else
        v49 = v43;
      v50 = 1;
      v51 = v31;
      do
      {
        if ((unint64_t)(v50 - 1) >= 2)
          v52 = v50;
        else
          v52 = v50 + 1;
        v53 = *(_BYTE *)(v47 + v50);
        if ((v51 & 1) != 0)
          v50 = 0;
        else
          v50 = v52;
        result = dword_1C9860D8C[(v53 ^ v51 & 1)];
        v41 += result;
        v51 >>= 1;
        --v49;
      }
      while (v49);
      if (v50)
      {
        v41 += ((_DWORD)v43 - v39) << 8;
        if ((int)v43 < 9)
          goto LABEL_74;
      }
      else
      {
        v41 += dword_1C9860D8C[(*(_BYTE *)(v48 + 4 * (a6 > 0)) ^ ((unsigned __int16)*(&a15 + __clz(__rbit32(v31))) > 2u))]
             + (((_DWORD)v43 - v39) << 8);
      }
      v54 = 0;
      v55 = 0;
      if ((int)v43 <= 1)
        v43 = 1;
      else
        v43 = v43;
      LODWORD(result) = 3;
      do
      {
        v56 = (unsigned __int16)*(&a15 + v54);
        v57 = v41 - ((__clz(v56 - result + (-2 << v55)) << 9) + (v55 << 8)) + 16896;
        if (v56 - (int)result < 3 << v55)
          v58 = v41 + ((v55 + ((v56 - result) >> v55)) << 8) + 256;
        else
          v58 = v57;
        if (3 << v55 >= v56)
          v59 = v55;
        else
          v59 = v55 + 1;
        if (v59 >= 4)
          v59 = 4;
        if (v56 >= (int)result)
        {
          v41 = v58;
          v55 = v59;
        }
        if (v56 > 1)
          LODWORD(result) = 2;
        if (v54 > 6)
          result = 1;
        else
          result = result;
        ++v54;
      }
      while (v43 != v54);
      goto LABEL_74;
    }
    v41 += ((_DWORD)v43 - v39) << 8;
LABEL_74:
    *(_DWORD *)(v61 + 228) = v41;
  }
  return result;
}

unint64_t sub_1C97F2E3C(uint64_t a1, __int16 *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,uint64_t a33)
{
  int v33;
  uint64_t v38;
  unint64_t result;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  __int16 v45;
  int v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  signed int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _BYTE *v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  char v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t vars0;
  uint64_t vars8;

  v33 = a5;
  a33 = *MEMORY[0x1E0C80C00];
  v38 = a4;
  v95 = a4 - 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, char *))(a1 + 8 * v95 + 9432))(a3, a5, &a31, &a13);
  v40 = result;
  if ((result & 0x80000000) == 0)
  {
    v92 = v38;
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
    v96 = v41 + 48;
    vars0 = v41;
    v42 = *(__int16 *)(a3 + 2 * ((a32 << a4) + a31));
    LODWORD(vars8) = *(_DWORD *)(v41 + 228);
    if (v42 >= 0)
      LOWORD(v43) = v42;
    else
      v43 = -v42;
    a9 = v43;
    v44 = (unsigned __int16)v43 > 1u;
    v45 = *a2;
    if (v33 == 2)
      v46 = a31;
    else
      v46 = a32;
    if (v33 == 2)
      v47 = a32;
    else
      v47 = a31;
    sub_1C97F341C((uint64_t)&v96, v47, a4, a6, v41 + 91);
    sub_1C97F341C((uint64_t)&v96, v46, a4, a6, v96 + 61);
    v48 = vars8;
    if (v47 >= 4)
      v48 = vars8 + (byte_1C985A0E5[v47 - 4] << 8);
    if (v46 >= 4)
      v48 += byte_1C985A0E5[v46 - 4] << 8;
    v49 = 0;
    v50 = 27;
    if (a6 <= 0)
      v50 = 0;
    v51 = 4 * v33;
    if (a4 != 3)
      v51 = 0;
    v55 = (v45 & 0x100) == 0;
    v87 = v96 + 16 * (a6 > 0) + 127;
    v88 = v96 + 2 * (a6 > 0) + 79;
    v86 = v96 + 4 * (a6 > 0) + 151;
    v52 = v96 + v50 + 83;
    v94 = (char *)*(&off_1E82928A8 + v95) + v51;
    v53 = &byte_1C9861A40[64 * (uint64_t)v33];
    v54 = v40 & 0xF;
    v55 = !v55 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 9464) + 32) + 5) == 0;
    v56 = !v55;
    v89 = v56;
    v57 = (uint64_t)&unk_1C98627C0 + 384 * (a6 > 0) + 128 * v92 - 384;
    if (v33)
      v57 = (uint64_t)&unk_1C9862740;
    v93 = v57;
    v58 = (1 << v95) - 1;
    v91 = 4 << a4;
    v59 = v40 >> 4;
    LODWORD(v57) = 1;
    v60 = 1;
    while (1)
    {
      result = v94[v59];
      v61 = result >> v95;
      if ((int)(v58 & result) >= v58)
        v62 = 0;
      else
        v62 = (v49 >> result) & 2;
      v63 = (v49 >> ((1 << v95) + result)) & 1;
      if (v61 >= v58)
        LODWORD(v63) = 0;
      v64 = v63 | v62;
      v65 = *((unsigned __int16 *)&a13 + v59);
      if (v59 != v40 >> 4 && v59)
      {
        v66 = (_BYTE *)((_DWORD)v64 ? v88 + 1 : v88);
        v48 += dword_1C9860D8C[(*v66 ^ (v65 != 0))];
        if (!*((_WORD *)&a13 + v59))
          goto LABEL_105;
      }
      v67 = (unsigned __int8 *)(v93 + 32 * v64 + 16 * (v59 != 0));
      v68 = v61 * v91 + 4 * (result & ~(-1 << v95));
      if (v54 > 1)
      {
        v69 = v54;
        do
        {
          if (((v65 >> --v69) & 1) != 0)
          {
            v70 = *(__int16 *)(a3 + 2 * (v68 + v53[16 * v95 + v69]));
            if (v70 < 0)
              v70 = -v70;
            *(&a9 + (int)v57) = v70;
            v44 += ((unsigned __int16)v70 > 1u) << v57;
            LODWORD(v57) = v57 + 1;
          }
          v48 += dword_1C9860D8C[*(_BYTE *)(v52 + v67[v53[v69]]) ^ (v65 >> v69) & 1];
        }
        while ((unint64_t)(v69 + 1) > 2);
      }
      result = 1 << result;
      v49 |= result;
      if (v54 >= 1)
      {
        result = v65 & 1;
        if (v59 && (int)v57 < 1)
        {
          if ((v65 & 1) != 0)
            goto LABEL_53;
        }
        else
        {
          v48 += dword_1C9860D8C[*(_BYTE *)(v52 + *v67) ^ v65 & 1];
          if ((v65 & 1) != 0)
          {
LABEL_53:
            v71 = *(__int16 *)(a3 + 2 * v68);
            if (v71 < 0)
              v71 = -v71;
            *(&a9 + (int)v57) = v71;
            v44 += ((unsigned __int16)v71 > 1u) << v57;
            LODWORD(v57) = v57 + 1;
            goto LABEL_56;
          }
        }
      }
      if (!v65)
        goto LABEL_104;
LABEL_56:
      if (__clz(v65) + __clz(__rbit32(v65)) < 0x1C)
        result = v89;
      else
        result = 0;
      if (v59)
        v72 = a6 <= 0;
      else
        v72 = 0;
      if (v72)
        v73 = 2;
      else
        v73 = 0;
      if ((int)v57 > 0)
      {
        v74 = v73 | (v60 == 0);
        if ((int)v57 >= 8)
          v75 = 8;
        else
          v75 = v57;
        v76 = 1;
        v77 = v44;
        do
        {
          if ((unint64_t)(v76 - 1) >= 2)
            v60 = v76;
          else
            v60 = v76 + 1;
          v78 = *(_BYTE *)(v87 + 4 * v74 + v76);
          if ((v77 & 1) != 0)
            v76 = 0;
          else
            v76 = v60;
          v48 += dword_1C9860D8C[(v78 ^ v77 & 1)];
          v77 >>= 1;
          --v75;
        }
        while (v75);
        if (v76)
        {
          v48 += ((_DWORD)v57 - (_DWORD)result) << 8;
          if ((int)v57 < 9)
          {
LABEL_103:
            LODWORD(v57) = 0;
            v44 = 0;
LABEL_104:
            v54 = 16;
            goto LABEL_105;
          }
        }
        else
        {
          v60 = 0;
          v48 += dword_1C9860D8C[(*(_BYTE *)(v86 + v74) ^ ((unsigned __int16)*(&a9
                                                                                              + __clz(__rbit32(v44))) > 2u))]
               + (((_DWORD)v57 - (_DWORD)result) << 8);
        }
        result = 0;
        v79 = 0;
        if ((int)v57 <= 1)
          v57 = 1;
        else
          v57 = v57;
        v80 = 3;
        do
        {
          v81 = (unsigned __int16)*(&a9 + result);
          v82 = v48 - ((__clz(v81 - v80 + (-2 << v79)) << 9) + (v79 << 8)) + 16896;
          if (v81 - v80 < 3 << v79)
            v83 = v48 + ((v79 + ((v81 - v80) >> v79)) << 8) + 256;
          else
            v83 = v82;
          if (3 << v79 >= v81)
            v84 = v79;
          else
            v84 = v79 + 1;
          if (v84 >= 4)
            v84 = 4;
          if (v81 >= v80)
          {
            v48 = v83;
            v79 = v84;
          }
          if (v81 <= 1)
            v85 = v80;
          else
            v85 = 2;
          if (result > 6)
            v80 = 1;
          else
            v80 = v85;
          ++result;
        }
        while (v57 != result);
        goto LABEL_103;
      }
      v44 = 0;
      v48 += ((_DWORD)v57 - (_DWORD)result) << 8;
      v54 = 16;
      v60 = 1;
      LODWORD(v57) = 0;
LABEL_105:
      v72 = v59-- <= 0;
      if (v72)
      {
        *(_DWORD *)(vars0 + 228) = v48;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1C97F341C(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;

  v5 = byte_1C985A080[a2];
  if (a2)
  {
    v6 = *(_DWORD *)(result + 16);
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = byte_1C985A080[a2];
    v8 = &byte_1C985A11D[36 * (a4 > 0) - 18 + 9 * a3];
    v9 = v7;
    do
    {
      v10 = *v8++;
      v6 += dword_1C9860D8C[*(unsigned __int8 *)(a5 + v10) ^ 1];
      *(_DWORD *)(result + 16) = v6;
      --v9;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
  if (v5 < byte_1C985A080[~(-1 << a3)])
    *(_DWORD *)(result + 16) += dword_1C9860D8C[*(unsigned __int8 *)(a5
                                                                   + byte_1C985A11D[36 * (a4 > 0) - 18 + 9 * a3 + v7])];
  return result;
}

uint64_t sub_1C97F34E8(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t (***v8)(_QWORD, uint64_t, uint64_t);
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;

  v8 = (uint64_t (***)(_QWORD, uint64_t, uint64_t))result;
  v9 = byte_1C985A080[a2];
  if (a2)
  {
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = byte_1C985A080[a2];
    v11 = &byte_1C985A11D[36 * (a4 > 0) - 18 + 9 * a3];
    v12 = v10;
    do
    {
      v13 = *v11++;
      result = (**v8)(v8, 1, a5 + v13);
      --v12;
    }
    while (v12);
  }
  else
  {
    v10 = 0;
  }
  if (v9 < byte_1C985A080[~(-1 << a3)])
    return (**v8)(v8, 0, a5 + byte_1C985A11D[36 * (a4 > 0) - 18 + 9 * a3 + v10]);
  return result;
}

uint64_t sub_1C97F360C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t result;
  char v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;

  v10 = *(_QWORD *)(a1 + 9488);
  v11 = a2 - *(_DWORD *)(v10 + 832);
  v12 = a3 - *(_DWORD *)(v10 + 836);
  v13 = (uint64_t)v12 >> 3;
  if (((*(unsigned __int16 *)(*(_QWORD *)(v10 + 880) + 2 * (*(_QWORD *)(v10 + 856) * v13 + (v11 >> 3))) >> 2) & 3) <= (int)a5)
  {
    v41 = *(_DWORD *)(a1 + 9508);
    if ((v41 & 1) != 0)
    {
      result = *(unsigned __int8 *)(*(_QWORD *)(v10 + 920)
                                  + (*(uint64_t *)(v10 + 840) >> 2) * ((uint64_t)v12 >> 2)
                                  + (v11 >> 2)) != 0;
      if ((v41 & 2) == 0)
        return result;
    }
    else
    {
      result = 0;
      if ((v41 & 2) == 0)
        return result;
    }
    if (a6 == 3 || *(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2116) < a4)
    {
      v42 = ((uint64_t)v11 >> 3) + (*(uint64_t *)(v10 + 848) >> 2) * v13;
      v43 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 928) + v42);
      v44 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 936) + v42);
      v45 = ((a2 & 0x3F) >> (*(_DWORD *)a1 - a5))
          + byte_1C985A0E0[a5]
          + ((a3 & 0x3F) >> (*(_DWORD *)a1 - a5) << a5);
      v46 = a1 + 4 * (v45 >> 5);
      *(_DWORD *)(v46 + 6264) |= (v43 != 0) << (((a2 & 0x3F) >> (*(_DWORD *)a1 - a5))
                                              + byte_1C985A0E0[a5]
                                              + ((a3 & 0x3F) >> (*(_DWORD *)a1 - a5) << a5));
      *(_DWORD *)(v46 + 6308) |= (v44 != 0) << v45;
      if (v43 | v44)
        return 1;
      else
        return result;
    }
  }
  else
  {
    v14 = (a4 - 1);
    v15 = 1 << (a4 - 1);
    v16 = (v15 + a2);
    v17 = (v15 + a3);
    v18 = a5 + 1;
    v19 = sub_1C97F360C(a1, a2, a3, v14, v18, 0);
    v20 = v19 | sub_1C97F360C(a1, v16, a3, v14, a5 + 1, 1);
    v21 = sub_1C97F360C(a1, a2, v17, v14, a5 + 1, 2);
    result = v20 | v21 | sub_1C97F360C(a1, v16, v17, v14, a5 + 1, 3);
    if ((*(_BYTE *)(a1 + 9508) & 2) != 0)
    {
      v23 = *(_DWORD *)a1 - v18;
      v24 = byte_1C985A0E0[v18];
      v25 = (a3 & 0x3F) >> v23 << v18;
      v26 = ((a2 & 0x3F) >> v23) + v24;
      v27 = (v26 + v25) >> 5;
      v28 = 1;
      v29 = 1 << (((a2 & 0x3F) >> v23) + v24 + v25);
      if ((v29 & *(_DWORD *)(a1 + 4 * v27 + 6264)) == 0)
      {
        v30 = ((v16 & 0x3F) >> v23) + v24;
        if (((*(_DWORD *)(a1 + 4 * ((v30 + v25) >> 5) + 6264) >> (((v16 & 0x3F) >> v23)
                                                                                 + v24
                                                                                 + v25)) & 1) != 0
          || (v31 = (v17 & 0x3F) >> v23 << v18,
              ((*(_DWORD *)(a1 + 4 * ((v26 + v31) >> 5) + 6264) >> (v26 + v31)) & 1) != 0))
        {
          v28 = 1;
        }
        else
        {
          v28 = (*(_DWORD *)(a1 + 4 * ((v30 + v31) >> 5) + 6264) >> (v30 + v31)) & 1;
        }
      }
      v32 = *(_DWORD *)a1 - a5;
      v33 = (a2 & 0x3F) >> v32;
      v34 = (a3 & 0x3F) >> v32 << a5;
      v35 = v33 + byte_1C985A0E0[a5];
      v36 = a1 + 4 * ((v34 + v35) >> 5);
      *(_DWORD *)(v36 + 6264) |= v28 << (v34 + v33 + byte_1C985A0E0[a5]);
      if ((v29 & *(_DWORD *)(a1 + 4 * v27 + 6308)) != 0
        || (v37 = ((v16 & 0x3F) >> v23) + v24,
            ((*(_DWORD *)(a1 + 4 * ((v37 + v25) >> 5) + 6308) >> (v37 + v25)) & 1) != 0)
        || (v38 = (v17 & 0x3F) >> v23 << v18,
            ((*(_DWORD *)(a1 + 4 * ((v26 + v38) >> 5) + 6308) >> (v26 + v38)) & 1) != 0))
      {
        v39 = 1;
      }
      else
      {
        v39 = (*(_DWORD *)(a1 + 4 * ((v37 + v38) >> 5) + 6308) >> (v37 + v38)) & 1;
      }
      v40 = a1 + 4 * ((v35 + v34) >> 5);
      *(_DWORD *)(v40 + 6308) |= v39 << (v35 + v34);
    }
  }
  return result;
}

uint64_t sub_1C97F39A8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (***v16)(void);
  int v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  int64_t v24;
  void (***v25)(void);
  int v26;
  int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void (***v55)(void);
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  signed int v61;
  int v62;
  int v63;
  _BOOL4 v64;
  int v65;
  int v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  __int16 *v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  _BOOL4 v82;
  int v83;
  int v84;
  int v85;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  _BOOL4 v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t result;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  void (***v122)(void);
  char v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  uint64_t v129;
  unsigned __int8 *v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unsigned __int8 *v136;

  v6 = a2;
  v8 = 0;
  v9 = 0;
  v129 = a4;
  v135 = (int)a5;
  v123 = a5 - 1;
  LODWORD(v10) = -(int)a5;
  v133 = a5 << 32;
  v11 = (a4 - 1);
  v118 = a1 + 6264;
  v117 = a1 + 6308;
  v131 = -(int)a5;
  v132 = a5;
  v116 = 84 - a4;
  v12 = &byte_1C985A0E0[(int)a5];
  v121 = v11;
  v130 = v12;
  while (1)
  {
    v13 = v135 + v9;
    v14 = v129 + v8;
    v15 = *(_QWORD *)(a1 + 9488);
    v16 = *(void (****)(void))(v15 + 944);
    v17 = *(_DWORD *)(a1 + 4);
    if (v17 != 3)
    {
      v19 = v17 == 1 && v135 == v8 && *(_DWORD *)(a1 + 8) != 0;
LABEL_15:
      v20 = 1;
      goto LABEL_16;
    }
    v19 = 0;
    if (v135 != v8)
      goto LABEL_15;
    v20 = 1;
    if (*(_DWORD *)(a1 + 8))
    {
      v21 = *(_QWORD *)(a1 + 9472);
      if (!*(_BYTE *)(v21 + 272))
      {
        v22 = v14 > *(unsigned __int8 *)(v21 + 2114);
        goto LABEL_23;
      }
      v19 = 0;
    }
LABEL_16:
    v22 = 1;
    if (!v19)
    {
      v23 = *(_QWORD *)(a1 + 9472);
      if (v14 <= *(unsigned __int8 *)(v23 + 2115))
      {
        if (v14 <= *(unsigned __int8 *)(v23 + 2114) || v13 >= *(int *)(a1 + 12))
        {
          v22 = 0;
        }
        else
        {
          v24 = ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v15 + 880)
                                                       + 2
                                                       * (*(_QWORD *)(v15 + 856)
                                                        * ((uint64_t)(int)(a3 - *(_DWORD *)(v15 + 836)) >> 3)
                                                        + (((int)v6 - *(_DWORD *)(v15 + 832)) >> 3))) >> 2) & 3;
          v22 = v13 < v24;
          if ((*(_BYTE *)(a1 + 9508) & 1) != 0)
          {
            v25 = v16;
            v26 = a6;
            ((void (*)(void (***)(void), BOOL, char *))**v16)(v16, v13 < v24, (char *)v16 + v116 + v9);
            a6 = v26;
            v12 = v130;
            v20 = 1;
            v16 = v25;
            v11 = v121;
          }
        }
      }
    }
LABEL_23:
    v27 = a4 + v8;
    if ((*(_BYTE *)(a1 + 9508) & 2) == 0)
      goto LABEL_42;
    if (v14 <= 2 && v135 != v8)
    {
      v28 = v10 + v8 + *(_DWORD *)a1;
      v29 = a3 & 0x3F;
      v30 = &v12[v9];
      v31 = *(v30 - 1);
      v32 = ((v6 & 0x3F) >> (v28 + 1)) + v31 + (v29 >> (v28 + 1) << (v123 + v9));
      LODWORD(v30) = *v30;
      a2 = ((v6 & 0x3F) >> v28) + (int)v30;
      *(_DWORD *)(v118 + 4 * ((int)((v29 >> v28 << (v132 + v9)) + a2) >> 5)) |= ((*(_DWORD *)(v118 + 4 * (v32 >> 5)) >> v32) & 1) << ((v29 >> v28 << (v132 + v9)) + a2);
      v33 = v10 + v8 + *(_DWORD *)a1;
      v34 = ((v6 & 0x3F) >> (v33 + 1)) + v31 + (v29 >> (v33 + 1) << (v123 + v9));
      v35 = ((v6 & 0x3F) >> v33) + (_DWORD)v30 + (v29 >> v33 << (v132 + v9));
      *(_DWORD *)(v117 + 4 * (v35 >> 5)) |= ((*(_DWORD *)(v117 + 4 * (v34 >> 5)) >> v34) & 1) << v35;
      goto LABEL_42;
    }
    v36 = v6 & ~(1 << v27);
    v37 = a3 & ~(1 << v27);
    v38 = *(_DWORD *)a1;
    v39 = v133 >> 32;
    v125 = v6;
    v126 = a6;
    if (v135 == v8
      || (v40 = v12[v9 - 1],
          v41 = ((v36 & 0x3F) >> (v10 + v8 + v38 + 1))
              + v40
              + ((v37 & 0x3F) >> (v10 + v8 + v38 + 1) << (v123 + v9)),
          v42 = 1 << (((v36 & 0x3F) >> (v10 + v8 + v38 + 1))
                    + v40
                    + ((v37 & 0x3F) >> (v10 + v8 + v38 + 1) << (v123 + v9))),
          (v42 & *(_DWORD *)(a1 + 4 * (v41 >> 5) + 6264)) != 0))
    {
      v119 = v6 & ~(1 << v27);
      v120 = a3 & ~(1 << v27);
      v43 = v6 & 0x3F;
      v44 = v10 + v8 + v38;
      v45 = a3 & 0x3F;
      v46 = v12[v9];
      v47 = (v43 >> v44) + v46 + (v45 >> v44 << (v132 + v9));
      v48 = *(_DWORD *)(a1 + 4 * (v47 >> 5) + 6264) >> v47;
      if (v14 <= 2)
        v49 = 0;
      else
        v49 = v133 >> 32;
      v122 = v16;
      v50 = v12;
      ((void (*)(void (***)(void), _QWORD, uint64_t))**v16)(v16, v48 & 1, (uint64_t)v16 + v49 + 84);
      v38 = *(_DWORD *)a1;
      if (v135 == v8)
      {
        v51 = 0;
        v16 = v122;
        goto LABEL_41;
      }
      LODWORD(v13) = v135 + v9;
      v52 = ((v119 & 0x3F) >> (v131 + v8 + v38 + 1))
          + v50[v9 - 1]
          + ((v120 & 0x3F) >> (v131 + v8 + v38 + 1) << (v123 + v9));
      v53 = (uint64_t)v52 >> 5;
      v20 = 1;
      v42 = 1 << v52;
      v6 = v125;
      a6 = v126;
      v27 = a4 + v8;
      v11 = v121;
      v16 = v122;
      v12 = v50;
      v39 = v133 >> 32;
    }
    else
    {
      v53 = (uint64_t)v41 >> 5;
    }
    if ((v42 & *(_DWORD *)(a1 + 4 * v53 + 6308)) == 0)
      goto LABEL_42;
    v46 = v12[v9];
    v43 = v6 & 0x3F;
    v51 = v132 + v9;
    v45 = a3 & 0x3F;
    v49 = v14 <= 2 ? 0 : v39;
LABEL_41:
    v54 = (uint64_t)v16 + v49 + 84;
    v55 = v16;
    ((void (*)(void (***)(void), _QWORD, uint64_t))**v16)(v16, (*(_DWORD *)(a1 + 4 * ((int)((v43 >> (v38 - v51)) + v46 + (v45 >> (v38 - v51) << v51)) >> 5) + 6308) >> ((v43 >> (v38 - v51)) + v46 + (v45 >> (v38 - v51) << v51))) & 1, v54);
    v16 = v55;
    v6 = v125;
    a6 = v126;
    LODWORD(v13) = v135 + v9;
    v27 = a4 + v8;
    v11 = v121;
    v20 = 1;
LABEL_42:
    if (!v22)
      break;
    v56 = 1 << (v11 + v8);
    v57 = (v56 + v6);
    v10 = v56 + a3;
    v58 = (v132 + v9 + 1);
    sub_1C97F39A8(a1, v6, a3, v11 + v8, v58, 0);
    sub_1C97F39A8(a1, v57, a3, v11 + v8, v58, 1);
    sub_1C97F39A8(a1, v6, v10, v11 + v8, v58, 2);
    v12 = v130;
    ++v9;
    --v8;
    v133 += 0x100000000;
    a6 = 3;
    v6 = v57;
    a3 = v10;
    LOBYTE(v10) = v131;
  }
  v59 = *(_QWORD *)(a1 + 9488);
  v60 = v6 - *(_DWORD *)(v59 + 832);
  v61 = a3 - *(_DWORD *)(v59 + 836);
  v62 = *(unsigned __int8 *)(v59 + 828);
  v63 = *(_DWORD *)(a1 + 9508);
  if ((v63 & 2) != 0)
  {
    v65 = ((v6 & 0x3F) >> (*(_DWORD *)a1 - v13))
        + byte_1C985A0E0[(int)v13]
        + ((a3 & 0x3F) >> (*(_DWORD *)a1 - v13) << v13);
    a2 = *(unsigned int *)(a1 + 4 * (v65 >> 5) + 6264);
    v64 = 1;
    v66 = 1 << (((v6 & 0x3F) >> (*(_DWORD *)a1 - v13))
              + byte_1C985A0E0[(int)v13]
              + ((a3 & 0x3F) >> (*(_DWORD *)a1 - v13) << v13));
    if ((v66 & a2) == 0)
      v64 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v65 >> 5) + 6308) & v66) != 0;
  }
  else
  {
    v64 = 0;
  }
  v67 = *(unsigned __int8 *)(*(_QWORD *)(v59 + 920) + (*(uint64_t *)(v59 + 840) >> 2) * ((uint64_t)v61 >> 2) + (v60 >> 2));
  if ((v63 & 1) != 0)
  {
    v68 = (_DWORD)v13 || *(_DWORD *)(a1 + 4) == 1;
    v69 = v68 || v64;
    if (v69 == 1)
    {
      v70 = v27;
      v71 = a6;
      (**v16)();
      a6 = v71;
      v27 = v70;
      v59 = *(_QWORD *)(a1 + 9488);
      v62 = *(unsigned __int8 *)(v59 + 828);
      v60 = v6 - *(_DWORD *)(v59 + 832);
      v61 = a3 - *(_DWORD *)(v59 + 836);
    }
  }
  v72 = 0;
  v127 = a6;
  v73 = v27;
  v74 = v13;
  v75 = v6;
  if (v60 < v62 && v61 < v62)
    v72 = (__int16 *)(*(_QWORD *)(v59 + 880) + 2 * (*(_QWORD *)(v59 + 856) * ((uint64_t)v61 >> 3) + (v60 >> 3)));
  v136 = (unsigned __int8 *)(*(_QWORD *)(v59 + 888) + 16 * (*(_QWORD *)(v59 + 864) * ((uint64_t)v61 >> 2) + (v60 >> 2)));
  v76 = *v136;
  v77 = *(_QWORD *)(v59 + 944);
  v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 80))(v77, a2, v20);
  v79 = 0;
  v80 = v73;
  if (v73 <= 3 && *(_DWORD *)(a1 + 4) == 1)
    v79 = byte_1C9859C98[v76];
  v81 = *(_DWORD *)(a1 + 9508);
  if ((v81 & 2) == 0)
  {
    v82 = 0;
    v83 = v75;
    goto LABEL_67;
  }
  v83 = v75;
  v84 = ((v75 & 0x3F) >> (*(_DWORD *)a1 - v74))
      + byte_1C985A0E0[v74]
      + ((a3 & 0x3F) >> (*(_DWORD *)a1 - v74) << v74);
  v85 = 1 << (((v75 & 0x3F) >> (*(_DWORD *)a1 - v74))
            + byte_1C985A0E0[v74]
            + ((a3 & 0x3F) >> (*(_DWORD *)a1 - v74) << v74));
  if ((v85 & *(_DWORD *)(a1 + 4 * (v84 >> 5) + 6264)) == 0)
  {
    v82 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v84 >> 5) + 6308) & v85) != 0;
LABEL_67:
    if (!v67 && !v82)
      goto LABEL_112;
  }
  if ((v81 & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_86;
    v124 = v73;
    *(_BYTE *)(a1 + 16) = 0;
    v87 = *(_QWORD *)(a1 + 9488);
    v88 = sub_1C97C9654(v87, v83, a3, *(_DWORD *)(a1 + 9520), *(unsigned __int8 **)(v87 + 872), *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(v87 + 824));
    v89 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2097);
    v90 = (int)(v89 + 52 - v88 + (*v72 >> 9) + (v89 >> 1) + 26) % (int)(v89 + 52) - (v89 >> 1);
    v91 = *(_QWORD *)(v87 + 856) * ((uint64_t)(int)(HIDWORD(*(_QWORD *)(a1 + 9512)) - *(_DWORD *)(v87 + 836)) >> 3)
        + ((int)(*(_QWORD *)(a1 + 9512) - *(_DWORD *)(v87 + 832)) >> 3);
    *(_WORD *)(*(_QWORD *)(v87 + 880) + 2 * v91) = *v72 & 0xFE00 | *(_WORD *)(*(_QWORD *)(v87 + 880) + 2 * v91) & 0x1FF;
    if (v90 - 26 < 0)
      v92 = 26 - v90;
    else
      v92 = v90 - 26;
    if (v92 >= 5)
      v93 = 5;
    else
      v93 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 72))(v77, v93, v77 + 57, 1, 5);
    if (v92 >= 5)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v77 + 56))(v77, v92 - 5, 0);
      goto LABEL_83;
    }
    if (v90 != 26)
LABEL_83:
      (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v77 + 8))(v77, v90 < 27);
    *(_DWORD *)(a1 + 20) = *v72 >> 9;
    v81 = *(_DWORD *)(a1 + 9508);
    v80 = v124;
    if ((v81 & 1) != 0)
    {
LABEL_86:
      if (v67 && !*(_BYTE *)(*(_QWORD *)(a1 + 9488) + 827))
      {
        v98 = v80;
        sub_1C97F4534(a1, v83, a3, v80, v79, 0);
        v80 = v98;
        if ((*(_DWORD *)(a1 + 9508) & 2) == 0)
          goto LABEL_112;
LABEL_88:
        v94 = *(_QWORD *)(a1 + 9488);
        if (*(_BYTE *)(v94 + 827))
          goto LABEL_112;
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2116) >= v80)
        {
          if (v127 != 3)
            goto LABEL_113;
          v97 = v74;
          v95 = v83 - 2 * v80;
          v96 = a3 - 2 * v80;
        }
        else
        {
          --v80;
          v95 = v83;
          v96 = a3;
          v97 = v74;
        }
        v134 = v78;
        if (*(_DWORD *)(a1 + 4) != 1)
          goto LABEL_106;
        v99 = v136[1];
        if (v99 == 35)
          v99 = *(unsigned __int8 *)(*(_QWORD *)(v94 + 888)
                                   + 16
                                   * (*(_QWORD *)(v94 + 864)
                                    * ((uint64_t)(int)(HIDWORD(*(_QWORD *)(a1 + 9512)) - *(_DWORD *)(v94 + 836)) >> 2)
                                    + ((int)(*(_QWORD *)(a1 + 9512) - *(_DWORD *)(v94 + 832)) >> 2)));
        if ((v80 - 1) <= 1)
        {
          v100 = 26 - v99;
          if (v99 >= 0x1A)
            v100 = v99 - 26;
          v101 = v100 < 5;
          v102 = 10 - v99;
          v103 = v99 >= 0xA;
          v104 = v99 - 10;
          if (!v103)
            v104 = v102;
          if (v104 >= 5)
            v105 = v101;
          else
            v105 = 2;
        }
        else
        {
LABEL_106:
          v105 = 0;
        }
        v106 = v83 & 0x3F;
        v107 = a3 & 0x3F;
        v108 = byte_1C985A0E0[v97];
        v109 = (v106 >> (*(_DWORD *)a1 - v97)) + v108 + (v107 >> (*(_DWORD *)a1 - v97) << v97);
        v110 = 1 << ((v106 >> (*(_DWORD *)a1 - v97)) + v108 + (v107 >> (*(_DWORD *)a1 - v97) << v97));
        if ((v110 & *(_DWORD *)(a1 + 4 * (v109 >> 5) + 6264)) != 0)
        {
          v111 = v95;
          v112 = v96;
          v113 = v80;
          sub_1C97F4534(a1, v95, v96, v80, v105, 1);
          v80 = v113;
          v114 = (uint64_t)(int)((v106 >> (*(_DWORD *)a1 - v97)) + v108 + (v107 >> (*(_DWORD *)a1 - v97) << v97)) >> 5;
          v110 = 1 << ((v106 >> (*(_DWORD *)a1 - v97)) + v108 + (v107 >> (*(_DWORD *)a1 - v97) << v97));
        }
        else
        {
          v112 = v96;
          v111 = v95;
          v114 = (uint64_t)v109 >> 5;
        }
        v78 = v134;
        if ((*(_DWORD *)(a1 + 4 * v114 + 6308) & v110) != 0)
          sub_1C97F4534(a1, v111, v112, v80, v105, 2);
        goto LABEL_112;
      }
    }
  }
  if ((v81 & 2) != 0)
    goto LABEL_88;
LABEL_112:
  v94 = *(_QWORD *)(a1 + 9488);
LABEL_113:
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v94 + 944) + 80))(*(_QWORD *)(v94 + 944));
  *(_DWORD *)(*(_QWORD *)(a1 + 9488) + 236) += result - v78;
  return result;
}

uint64_t sub_1C97F4534(uint64_t a1, int a2, int a3, int a4, uint64_t a5, signed int a6)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = 1 << a4;
  v9 = *(_QWORD *)(a1 + 9488);
  v10 = *(_QWORD *)(v9 + 8 * (a6 > 0) + 840);
  if (((a3 | a2) & 0x80000000) == 0
    && ((v11 = a2 - *(_DWORD *)(v9 + 832),
         v12 = a3 - *(_DWORD *)(v9 + 836),
         v13 = *(unsigned __int8 *)(v9 + 828),
         v11 < v13)
      ? (v14 = v12 < v13)
      : (v14 = 0),
        v14))
  {
    v15 = (char *)(*(_QWORD *)(v9 + 8 * a6 + 896) + 2 * (v10 * (v12 >> (a6 > 0)) + (v11 >> (a6 > 0))));
  }
  else
  {
    v15 = 0;
  }
  if (v10 != v8)
  {
    if (a4 != 31)
    {
      v16 = 0;
      if (v8 <= 1)
        v17 = 1;
      else
        v17 = v8;
      v18 = 2 * v10;
      do
      {
        memcpy((void *)(a1 + 64 + 2 * (int)((_DWORD)v16++ << a4)), v15, 2 << a4);
        v15 += v18;
      }
      while (v17 != v16);
      v9 = *(_QWORD *)(a1 + 9488);
    }
    v15 = (char *)(a1 + 64);
  }
  return sub_1C97F4664(a1, *(_QWORD *)(v9 + 880), (uint64_t)v15, a4);
}

uint64_t sub_1C97F4664(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;

  v4 = a1
     + 32 * (*(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944) == *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 960))
     + 16 * (a4 > 2);
  v5 = *(uint64_t (**)(_QWORD *))(v4 + 9128);
  v6 = *(_QWORD *)(v4 + 9136);
  v7 = (_QWORD *)(a1 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  return v5(v7);
}

uint64_t sub_1C97F46A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, _BYTE *a6, int a7)
{
  unsigned int v9;
  int v12;
  _BOOL8 v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;

  v9 = a3;
  if (a7)
  {
    v12 = *(_DWORD *)(a1 + 8);
    v13 = v12 != 0;
    if (v12)
      v14 = -1;
    else
      v14 = 0;
    v15 = v14 - a4 + *(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2113);
    v16 = 1;
  }
  else
  {
    v13 = 0;
    *(_QWORD *)(a1 + 6344) = 0;
    *(_OWORD *)(a1 + 6312) = 0u;
    *(_OWORD *)(a1 + 6328) = 0u;
    *(_OWORD *)(a1 + 6280) = 0u;
    *(_OWORD *)(a1 + 6296) = 0u;
    *(_OWORD *)(a1 + 6264) = 0u;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2113) - a4;
    v16 = 2 * (*(_BYTE *)(a1 + 9504) == 0);
  }
  *(_DWORD *)(a1 + 9508) = v16;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 9488) + 825))
    sub_1C97F360C(a1, a2, a3, v15, v13, 0);
  *(_DWORD *)(a1 + 20) = *a5;
  *(_BYTE *)(a1 + 16) = *a6;
  result = sub_1C97F39A8(a1, a2, v9, v15, v13, 0);
  *a5 = *(_DWORD *)(a1 + 20);
  *a6 = *(_BYTE *)(a1 + 16);
  return result;
}

uint64_t sub_1C97F47BC(uint64_t result, char a2, int a3, uint64_t a4, _BYTE *a5)
{
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(result + 16);
  v6 = a3 - 1;
  if (v5 < *(_QWORD *)(a4 + 32 * v6 + 16))
  {
    if (v5 >= *(_QWORD *)(a4 + 16))
    {
      v10 = a3 - 2;
      if (a3 >= 2)
      {
        while (1)
        {
          v11 = v10;
          if (v5 >= *(_QWORD *)(a4 + 32 * v10 + 16))
            break;
          v8 = (int)v10-- <= 0;
          if (v8)
            return result;
        }
        v12 = v10 + 1;
        if ((int)v6 > (int)(v11 + 1))
        {
          do
          {
            v13 = (v6 - 1);
            v14 = a4 + 32 * v13;
            v15 = a4 + 32 * v6;
            *(_QWORD *)v15 = *(_QWORD *)v14;
            *(_DWORD *)(v15 + 24) = *(_DWORD *)(v14 + 24);
            *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
            a5[v6] = a5[v13];
            LODWORD(v6) = v6 - 1;
          }
          while ((int)v13 > (int)v12);
          v5 = *(_QWORD *)(result + 16);
        }
        v16 = a4 + 32 * v12;
        *(_QWORD *)v16 = *(_QWORD *)result;
        *(_DWORD *)(v16 + 24) = *(_DWORD *)(result + 24);
        *(_QWORD *)(v16 + 16) = v5;
        a5[v12] = a2;
      }
    }
    else
    {
      if (a3 >= 2)
      {
        v6 = v6;
        v7 = (_DWORD *)(a4 + 32 * v6 + 24);
        do
        {
          v8 = v6 > 1;
          v9 = a4 + 32 * (v6 - 1);
          *((_QWORD *)v7 - 3) = *(_QWORD *)v9;
          *v7 = *(_DWORD *)(v9 + 24);
          *((_QWORD *)v7 - 1) = *(_QWORD *)(v9 + 16);
          v7 -= 8;
          a5[v6] = a5[(v6 - 1)];
          --v6;
        }
        while (v8);
        v5 = *(_QWORD *)(result + 16);
      }
      *(_QWORD *)a4 = *(_QWORD *)result;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(result + 24);
      *(_QWORD *)(a4 + 16) = v5;
      *a5 = a2;
    }
  }
  return result;
}

void *sub_1C97F48EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  int v10;
  int v11;
  unsigned __int8 *v12;
  signed int v13;
  unsigned __int8 *v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int16 *v31;
  unsigned __int8 *v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  void *result;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 *v77;
  __int16 *v78;
  uint64_t v79;
  int v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int __c;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unsigned __int8 v97;
  int v98;
  int v99;
  unsigned int v100;
  signed int v101;
  unsigned __int8 *v102;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  __int16 v109;
  _QWORD v110[2];

  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v16 = *(unsigned __int8 **)(a1 + 9472);
  v17 = v16[273];
  if (v16[273])
    v18 = a8 == 3;
  else
    v18 = 1;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 9480) + 205))
    v19 = v18;
  else
    v19 = 1;
  v20 = v16[2114];
  v21 = v16[2115];
  v22 = *(_DWORD *)a1 - (a8 == 3) - v17;
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = *(_DWORD *)a1 - (a8 == 3) - v17;
  if (v22 <= v20)
    v24 = v20;
  else
    v24 = v23;
  v25 = v24 >= (int)a5 || v21 >= (int)a5;
  v26 = a2 - *((_DWORD *)a4 + 1);
  v27 = a3 - *((_DWORD *)a4 + 2);
  v92 = *(_DWORD *)(a1 + 9512);
  v93 = *(_DWORD *)(a1 + 9516);
  v28 = a10;
  v29 = a9;
  v108 = 0;
  v105 = 0;
  v106 = 0;
  v30 = -1;
  v107 = -1;
  v109 = 0;
  v31 = (__int16 *)(*((_QWORD *)a4 + 11) + 2 * (((uint64_t)v26 >> 3) + ((unint64_t)*a4 >> 3) * (v27 >> 3)));
  v32 = (unsigned __int8 *)*((_QWORD *)a4 + 18);
  v33 = **((unsigned __int8 **)a4 + 17);
  v34 = *((_QWORD *)v32 + 1);
  v90 = *v32;
  v104 = 0;
  v94 = v33;
  v91 = v34;
  if (v21 < (int)a5)
  {
    v88 = 0;
    v87 = 0;
    __c = 0;
    if (v25)
      goto LABEL_49;
  }
  else
  {
    v99 = v19;
    v101 = a3;
    v35 = 0;
    v36 = *(_QWORD *)(a1 + 9464);
    if (a7 != 1 && !*(_BYTE *)(v36 + 2816))
    {
      v37 = 10 - a7;
      if (a7 >= 10)
        v37 = a7 - 10;
      v38 = 26 - a7;
      if (a7 >= 26)
        v38 = a7 - 26;
      if (v37 >= v38)
        v37 = v38;
      v35 = v37 > byte_1C985A0AA[(int)a5];
    }
    v85 = v25;
    v97 = v18;
    if (a6 >= 1)
    {
      v39 = *(_QWORD *)(a1 + 9488);
      v40 = *(unsigned int *)(a1 + 9520);
      v41 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, uint64_t, _QWORD))(v39 + 29768);
      v42 = *(_QWORD *)(v39 + 29776);
      v43 = (_QWORD *)(v39 + (v42 >> 1));
      if ((v42 & 1) != 0)
        v41 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, uint64_t, _QWORD))(*v43 + v41);
      v41(v43, a2, a3, v40, v12, a8, a9, a5, *((_QWORD *)v12 + 19));
      v36 = *(_QWORD *)(a1 + 9464);
      if (v35)
      {
        (*(void (**)(_QWORD, _QWORD))(v36 + 8 * v11 + 2288))(*((_QWORD *)v12 + 19), *((_QWORD *)v12 + 20));
        v36 = *(_QWORD *)(a1 + 9464);
      }
    }
    v44 = (unsigned __int8 *)*((_QWORD *)v12 + 18);
    v45 = **((unsigned __int8 **)v12 + 17);
    v46 = **((_QWORD **)v44 + 7)
        + (*((_QWORD *)v44 + 8) + (int)a2 - (uint64_t)*(int *)(a1 + 9512) + *v44 * (v101 - (uint64_t)*(int *)(a1 + 9516)))
        * *(int *)(*((_QWORD *)v44 + 7) + 16);
    v47 = v36 + 2280;
    v48 = &v12[8 * v35];
    v13 = v101;
    sub_1C975E4BC(v47, a7, v11, *((_QWORD *)v48 + 19), v45, v46);
    v49 = **((unsigned __int8 **)v12 + 17);
    v50 = *(_QWORD *)(*((_QWORD *)v12 + 18) + 32)
        + 2
        * ((int)a2
         - (uint64_t)*(int *)(a1 + 9512)
         + **((unsigned __int8 **)v12 + 18) * (v101 - (uint64_t)*(int *)(a1 + 9516)));
    v51 = *(_QWORD *)(a1 + 9488);
    *(_DWORD *)(v51 + 832) = a2;
    *(_DWORD *)(v51 + 836) = v101;
    v52 = (int)a2 - (uint64_t)*((int *)v12 + 1);
    v53 = v101 - (uint64_t)*((int *)v12 + 2);
    *(_QWORD *)(v51 + 888) = *((_QWORD *)v12 + 12)
                           + 16 * (((uint64_t)(int)v52 >> 2) + ((unint64_t)*v12 >> 2) * ((int)v53 >> 2));
    v86 = v49;
    v83 = v50;
    sub_1C97F5D34(a1, a2, v101, v31, **((_QWORD **)v12 + 3) + (*((_QWORD *)v12 + 4) + v52 + v12[1] * v53) * *(int *)(*((_QWORD *)v12 + 3) + 16), v12[1], v46, v45, v46, v45, v50, v49, v11, &v104, v99, v97);
    v54 = v104;
    if (v104)
      v55 = 1;
    else
      v55 = v99;
    if ((v55 & 1) == 0)
    {
      *(_DWORD *)(a1 + 9120) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 9496) + 16))((1 << v11), (1 << v11), a1 + 64, 1 << v11);
      *(_DWORD *)(a1 + 9120) = (*(uint64_t (**)(void))(a1 + 8 * v11 + 9216))();
    }
    v110[0] = 0;
    __c = v54;
    if (v99)
      v56 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 9496) + 8 * v11 + 160))((1 << v11), (1 << v11), **((_QWORD **)v12 + 3)+ (*((_QWORD *)v12 + 4) - *((int *)v12 + 1) + (int)a2 + (v101 - (uint64_t)*((int *)v12 + 2)) * v12[1])* *(int *)(*((_QWORD *)v12 + 3) + 16));
    else
      v56 = *(_DWORD *)(a1 + 9120);
    v10 = a6;
    v29 = a9;
    v57 = v85;
    v28 = a10;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 9488) + 196))
    {
      v58 = 0;
    }
    else
    {
      v100 = v56;
      (*(void (**)(_QWORD, uint64_t, uint64_t, char *, _QWORD *))(a1 + 8 * (v11 > 2) + 9192))((1 << v11), v86, v83, (char *)v110 + 4, v110);
      v56 = v100;
      v57 = v85;
      v29 = a9;
      v59 = &byte_1C9859CBC[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 9464) + 16) + 2097)
                          + (uint64_t)(*(__int16 *)(*((_QWORD *)v12 + 11)
                                                 + 2
                                                 * (((uint64_t)((int)a2 - *((_DWORD *)v12 + 1)) >> 3)
                                                  + ((unint64_t)*v12 >> 3) * ((v101 - *((_DWORD *)v12 + 2)) >> 3))) >> 9)];
      v58 = (HIDWORD(v110[0]) * *v59 + LODWORD(v110[0]) * v59[70]) << 8;
    }
    v87 = v56;
    v88 = v58;
    v30 = ((*(unsigned __int16 *)(*(_QWORD *)(a1 + 9496) + 152) * (unint64_t)v58) >> 8) + v56;
    if (v57)
      goto LABEL_49;
  }
  v84 = v30;
  v60 = 0;
  v61 = 1 << (v11 - 1);
  v98 = v61 + a2;
  v102 = v12;
  v62 = v61 + v13;
  v63 = (v10 + 1);
  do
  {
    v64 = sub_1C97C3078(v29, v60, v98 < *(_DWORD *)(*(_QWORD *)(a1 + 9488) + 16), v62 < *(_DWORD *)(*(_QWORD *)(a1 + 9488) + 20));
    result = (void *)sub_1C97F48EC(a1, ((v60 & 1) << (v11 - 1)) + (int)a2, (v60 >> 1 << (v11 - 1)) + v13, v102, (v11 - 1), v63, a7, a8, v64, &v105);
    v29 = a9;
    ++v60;
  }
  while (v60 != 4);
  v66 = v108;
  v67 = *(_QWORD *)(a1 + 9496);
  v28 = a10;
  LOBYTE(v10) = a6;
  v12 = v102;
  if (((*(unsigned __int16 *)(v67 + 2 * v109 + 152) * (unint64_t)v108) >> (8 * (v109 == 0))) + v105 < v84)
  {
    v68 = *(_QWORD *)a10 + v105;
    v69 = *(_QWORD *)(a10 + 8) + v106;
    *(_QWORD *)a10 = v68;
    *(_QWORD *)(a10 + 8) = v69;
    v70 = *(_DWORD *)(a10 + 24) + v66;
    goto LABEL_57;
  }
LABEL_49:
  v71 = (char *)(v91 + ((uint64_t)((int)a2 - v92) >> 2) + (int)(v90 >> 2) * (uint64_t)((v13 - v93) >> 2));
  *v31 = *v31 & 0xFFF3 | (4 * (v10 & 3));
  v72 = *v12;
  if (v72 >> v10 >= 8)
  {
    v73 = 0;
    v74 = v72 >> 3;
    v75 = v72 >> v10 >> 3;
    v76 = 2 * v74;
    v77 = v31;
    do
    {
      v78 = v77;
      v79 = v75;
      do
      {
        *v78++ = *v31;
        --v79;
      }
      while (v79);
      ++v73;
      v77 = (__int16 *)((char *)v77 + v76);
    }
    while (v73 != v75);
  }
  v80 = 1 << (v11 - 2);
  v81 = v80;
  v82 = v80;
  do
  {
    --v82;
    result = memset(v71, __c, v81);
    v71 += v94 >> 2;
  }
  while (v82);
  v67 = *(_QWORD *)(a1 + 9496);
  v68 = *(_QWORD *)v28 + v87;
  *(_QWORD *)v28 = v68;
  v70 = *(_DWORD *)(v28 + 24) + v88;
LABEL_57:
  *(_DWORD *)(v28 + 24) = v70;
  *(_QWORD *)(v28 + 16) = ((*(unsigned __int16 *)(v67 + 2 * *(__int16 *)(v28 + 28) + 152) * (unint64_t)v70) >> (8 * (*(_WORD *)(v28 + 28) == 0)))
                        + v68;
  return result;
}

unsigned int *sub_1C97F5020(unsigned int *result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, int64x2_t *a10)
{
  int v10;
  unsigned __int8 *v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  __int16 *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  uint64_t v31;
  void (*v32)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  char *v52;
  unint64_t v53;
  int v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  unsigned __int32 v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 *v75;
  __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int32 v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned __int8 v99;
  int64x2_t v100;
  uint64_t v101;
  unsigned int v102;
  __int16 v103;

  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = a2;
  v14 = (uint64_t)result;
  v15 = a10;
  v16 = a9;
  v17 = (unsigned __int8 *)*((_QWORD *)result + 1184);
  v18 = v17[2115];
  v19 = *result - v17[273];
  if (v19 >= v18)
    v20 = v17[2115];
  else
    v20 = *result - v17[273];
  if (v19 <= v17[2114])
    v21 = v17[2114];
  else
    v21 = v20;
  v102 = 0;
  v100 = 0uLL;
  v22 = -1;
  v101 = -1;
  v103 = 0;
  v23 = (__int16 *)(*((_QWORD *)a4 + 11)
                  + 2
                  * (((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 3)
                   + ((unint64_t)*a4 >> 3) * (((int)a3 - *((_DWORD *)a4 + 2)) >> 3)));
  v99 = 0;
  v24 = (_QWORD *)*((_QWORD *)result + 1186);
  v90 = v24[118];
  v25 = v17[2113] - (uint64_t)(int)a5;
  v26 = (1 << a5);
  v84 = v18;
  v91 = 1 << a5;
  v89 = v17[2113] - (_DWORD)a5;
  v87 = a5;
  if (v18 >= (int)a5)
  {
    v28 = 0;
    if ((_DWORD)a7 != 1 && !*(_BYTE *)(*((_QWORD *)result + 1183) + 2816))
    {
      v29 = 10 - a7;
      if ((int)a7 >= 10)
        v29 = a7 - 10;
      v30 = 26 - a7;
      if ((int)a7 >= 26)
        v30 = a7 - 26;
      if (v29 >= v30)
        v29 = v30;
      v28 = v29 > byte_1C985A0AA[(int)a5];
    }
    v31 = result[2380];
    v32 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, _QWORD, uint64_t, _QWORD))v24[3721];
    v33 = v24[3722];
    v34 = (_QWORD *)((char *)v24 + (v33 >> 1));
    v85 = a7;
    v96 = v21;
    if ((v33 & 1) != 0)
      v32 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, _QWORD, uint64_t, _QWORD))(*v34 + v32);
    v92 = a8;
    v32(v34, a2, a3, v31, v11, a8, a9, a5, *((_QWORD *)v11 + 19));
    if (v28)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v14 + 9464) + 8 * v10 + 2288))(*((_QWORD *)v11 + 19), *((_QWORD *)v11 + 20));
    v35 = *(unsigned __int8 **)(*(_QWORD *)(v14 + 9488) + 32 * v25 + 248);
    v36 = *v35;
    v37 = **((_QWORD **)v35 + 7) + *((_QWORD *)v35 + 8) * *(int *)(*((_QWORD *)v35 + 7) + 16);
    sub_1C975E4BC(*(_QWORD *)(v14 + 9464) + 2280, v85, v10, *(_QWORD *)&v11[8 * v28 + 152], v36, v37);
    v38 = *(_QWORD *)(v14 + 9488);
    v39 = *(unsigned __int8 **)(v38 + 32 * v25 + 248);
    v40 = *v39;
    v41 = *((_QWORD *)v39 + 4);
    *(_DWORD *)(v38 + 832) = v13;
    *(_DWORD *)(v38 + 836) = v12;
    v42 = (int)v13;
    v43 = (int)v13 - (uint64_t)*((int *)v11 + 1);
    v44 = v13 - *((_DWORD *)v11 + 1);
    v45 = v13;
    v46 = v10;
    v47 = v12 - (uint64_t)*((int *)v11 + 2);
    *(_QWORD *)(v38 + 888) = *((_QWORD *)v11 + 12)
                           + 16 * (((uint64_t)v44 >> 2) + ((unint64_t)*v11 >> 2) * ((int)v47 >> 2));
    v83 = v41;
    v94 = v45;
    sub_1C97F5D34(v14, v45, v12, v23, **((_QWORD **)v11 + 3) + (*((_QWORD *)v11 + 4) + v43 + v11[1] * v47) * *(int *)(*((_QWORD *)v11 + 3) + 16), v11[1], v37, v36, v37, v36, v41, v40, v10, &v99, 1, 1u);
    v48 = **((_QWORD **)v11 + 3)
        + (*((_QWORD *)v11 + 4) + v42 - *((int *)v11 + 1) + (v12 - (uint64_t)*((int *)v11 + 2)) * v11[1])
        * *(int *)(*((_QWORD *)v11 + 3) + 16);
    v49 = v10 - 2;
    v50 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v14 + 9496) + 8 * v49 + 176))(v91, v91, v48);
    v51 = *(unsigned __int8 **)(*(_QWORD *)(v14 + 9488) + 32 * v25 + 248);
    v52 = (char *)*((_QWORD *)v51 + 1);
    v53 = (unint64_t)*v51 >> 2;
    LODWORD(v51) = 1 << v49;
    v54 = v99;
    v55 = 1 << v49;
    v56 = (int)v51;
    do
    {
      --v56;
      memset(v52, v54, v55);
      v52 += v53;
    }
    while (v56);
    v86 = v50;
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 88))(v90);
    v10 = v87;
    if (v96 < v87)
      (**(void (***)(uint64_t, _QWORD, uint64_t))v90)(v90, 0, v90 - v46 + 84);
    v27 = a6;
    v57 = v90 + 1;
    if (a6)
      v57 = v90;
    (**(void (***)(uint64_t, BOOL, uint64_t))v90)(v90, v54 != 0, v57 + 82);
    v11 = a4;
    v26 = v91;
    LODWORD(v13) = v94;
    if (v54)
      sub_1C97F4664(v14, (uint64_t)v23, v83, v87);
    v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 80))(v90);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 96))(v90);
    v82 = v58;
    v22 = v86 + ((*(unsigned __int16 *)(*(_QWORD *)(v14 + 9496) + 152) * (unint64_t)v58) >> 8);
    LODWORD(v25) = v89;
    v15 = a10;
    a8 = v92;
    a7 = v85;
    v16 = a9;
    v21 = v96;
  }
  else
  {
    v27 = a6;
    v82 = 0;
    v86 = 0;
  }
  if (v21 >= v10)
  {
    v66 = v101;
  }
  else
  {
    v81 = v22;
    v59 = 0;
    v60 = (v10 - 1);
    v61 = 1 << (v10 - 1);
    v97 = v61 + v13;
    v95 = v61 + v12;
    v93 = v27 + 1;
    v62 = a8;
    v63 = a7;
    do
    {
      v64 = sub_1C97C3078(v16, v59, v97 < *(_DWORD *)(*(_QWORD *)(v14 + 9488) + 16), v95 < *(_DWORD *)(*(_QWORD *)(v14 + 9488) + 20));
      sub_1C97F5020(v14, ((v59 & 1) << v60) + (int)v13, (v59 >> 1 << v60) + v12, a4, v60, v93, v63, v62, v64, &v100);
      v16 = a9;
      ++v59;
    }
    while (v59 != 4);
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 88))(v90);
    if (v84 >= v87)
      (**(void (***)(uint64_t, uint64_t, uint64_t))v90)(v90, 1, v90 - v87 + 84);
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 80))(v90);
    v102 += v65;
    v27 = v102;
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 96))(v90);
    v66 = ((*(unsigned __int16 *)(*(_QWORD *)(v14 + 9496) + 2 * v103 + 152) * (unint64_t)v27) >> (8 * (v103 == 0)))
        + v100.i64[0];
    LODWORD(v25) = v89;
    v15 = a10;
    v11 = a4;
    v26 = v91;
    LOBYTE(v27) = a6;
    v22 = v81;
  }
  if (v66 >= v22)
  {
    *v23 = *v23 & 0xFFF3 | (4 * (v27 & 3));
    v70 = *v11;
    if (v70 >> v27 >= 8)
    {
      v71 = 0;
      v72 = v70 >> 3;
      v73 = v70 >> v27 >> 3;
      v74 = 2 * v72;
      v75 = v23;
      do
      {
        v76 = v75;
        v77 = v73;
        do
        {
          *v76++ = *v23;
          --v77;
        }
        while (v77);
        ++v71;
        v75 = (__int16 *)((char *)v75 + v74);
      }
      while (v71 != v73);
    }
    v78 = *(_QWORD *)(v14 + 9496);
    v79 = v15->i64[0] + v86;
    v15->i64[0] = v79;
    v80 = v15[1].i32[2] + v82;
    v15[1].i32[2] = v80;
    v15[1].i64[0] = ((*(unsigned __int16 *)(v78 + 2 * v15[1].i16[6] + 152) * (unint64_t)v80) >> (8 * (v15[1].i16[6] == 0)))
                  + v79;
    return (unsigned int *)sub_1C97C2920(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 + 9488) + 29752), *((void ***)v11 + 18), *(const void ***)(*(_QWORD *)(v14 + 9488) + 32 * (int)v25 + 248), (int)v13 - *(_DWORD *)(v14 + 9512), v12 - *(_DWORD *)(v14 + 9516), 0, 0, v26);
  }
  else
  {
    v67 = *(_QWORD *)(v14 + 9496);
    v68 = vaddq_s64(*v15, v100);
    *v15 = v68;
    v69 = v15[1].i32[2] + v102;
    v15[1].i32[2] = v69;
    v15[1].i64[0] = ((*(unsigned __int16 *)(v67 + 2 * v15[1].i16[6] + 152) * (unint64_t)v69) >> (8 * (v15[1].i16[6] == 0)))
                  + v68.i64[0];
  }
  return result;
}

uint64_t sub_1C97F5770(uint64_t a1, uint64_t a2, signed int a3, unsigned __int8 *a4, int a5, int a6, int a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  int v11;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _BOOL4 v37;
  __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  signed int v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  void (*v60)(_QWORD *);
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int16 *v68;
  __int16 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  _BOOL4 v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v89;
  int v90;
  int v91;
  int v92;
  _BOOL4 v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  __int16 v104;

  v11 = a6;
  v14 = a10;
  v15 = *(unsigned __int8 **)(a1 + 9472);
  v16 = v15[2114];
  v17 = v15[2115];
  v18 = *(_DWORD *)a1 - ((_DWORD)a8 == 3) - v15[273];
  if (v18 >= v17)
    v19 = v15[2115];
  else
    v19 = *(_DWORD *)a1 - ((_DWORD)a8 == 3) - v15[273];
  v20 = *(__int16 *)(a10 + 28);
  if (v18 <= v16)
    v21 = v16;
  else
    v21 = v19;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  result = -1;
  v102 = -1;
  v104 = v20;
  v24 = *((_DWORD *)a4 + 1);
  v23 = *((_DWORD *)a4 + 2);
  v25 = *((_QWORD *)a4 + 11);
  v26 = *a4;
  v99 = 0;
  v90 = v21;
  v92 = a5;
  v91 = a7;
  if (v21 >= a6)
  {
    v36 = a4;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v75 = v24;
    v76 = v26;
    v78 = v23;
    v81 = v25;
    v83 = v17;
    v86 = v20;
    v27 = 0;
    v28 = a6 - 1;
    v29 = 1 << (a6 - 1);
    v94 = v29 + a3;
    v96 = v29 + a2;
    v93 = a5 == 0;
    v30 = (a7 + 1);
    do
    {
      v31 = ((v27 & 1) << v28) + (int)a2;
      v32 = a2;
      v33 = sub_1C97C3078(a9, v27, v96 < *(_DWORD *)(*(_QWORD *)(a1 + 9488) + 16), v94 < *(_DWORD *)(*(_QWORD *)(a1 + 9488) + 20));
      sub_1C97F5770(a1, v31, (v27 >> 1 << (v11 - 1)) + a3, a4, v93, (v11 - 1), v30, a8, v33, &v100);
      a2 = v32;
      ++v27;
    }
    while (v27 != 4);
    v11 = a6;
    v17 = v83;
    if (v83 < a6)
      v34 = v103;
    else
      v34 = v103 + 1;
    v35 = v100;
    result = ((*(unsigned __int16 *)(*(_QWORD *)(a1 + 9496) + 2 * v104 + 152) * (unint64_t)v34) >> (8 * (v104 == 0)))
           + v100;
    v14 = a10;
    a7 = v91;
    a5 = v92;
    v36 = a4;
    v20 = v86;
    v25 = v81;
    v23 = v78;
    v26 = v76;
    v24 = v75;
  }
  if (v17 < v11)
    goto LABEL_40;
  v37 = 0;
  v38 = (__int16 *)(v25 + 2 * (((uint64_t)((int)a2 - v24) >> 3) + (int)(v26 >> 3) * (uint64_t)((a3 - v23) >> 3)));
  v39 = (int)a2 - (uint64_t)*((int *)v36 + 1);
  v97 = a3;
  v40 = a3 - (uint64_t)*((int *)v36 + 2);
  v41 = v36[1];
  v42 = *(_QWORD **)&v36[8 * a5 + 136];
  v43 = *(unsigned __int8 *)v42 * v40;
  v44 = (uint64_t *)v42[7];
  v45 = v43 + v39;
  v46 = (unsigned __int8 *)(*((_QWORD *)v36 + 12)
                          + 16 * (((uint64_t)(int)v39 >> 2) + ((unint64_t)*v36 >> 2) * ((int)v40 >> 2)));
  v47 = **((unsigned __int8 **)v36 + 17);
  v48 = **((_QWORD **)v36 + 3) + (v39 + v41 * v40 + *((_QWORD *)v36 + 4)) * *(int *)(*((_QWORD *)v36 + 3) + 16);
  v49 = v42[8] + v39 + v43;
  v50 = *((int *)v44 + 4);
  v51 = *v44;
  v52 = v42[4];
  v53 = *(_QWORD *)(a1 + 9464);
  v54 = *v46;
  if (v54 != 1 && !*(_BYTE *)(v53 + 2816))
  {
    v55 = 10 - v54;
    if (v54 >= 0xA)
      v55 = v54 - 10;
    v56 = 26 - v54;
    v57 = v54 >= 0x1A;
    v58 = v54 - 26;
    if (!v57)
      v58 = v56;
    if (v55 < v58)
      v58 = v55;
    v37 = v58 > byte_1C985A0AA[v11];
  }
  v84 = v51 + v49 * v50;
  v95 = v34;
  v87 = v48;
  v89 = result;
  v85 = a2;
  v82 = v52 + 2 * v45;
  if (a7 < 1)
  {
    v63 = (1 << v11);
  }
  else
  {
    v79 = v37;
    v59 = *(_QWORD *)(a1 + 9488);
    v60 = *(void (**)(_QWORD *))(v59 + 29768);
    v61 = *(_QWORD *)(v59 + 29776);
    v62 = (_QWORD *)(v59 + (v61 >> 1));
    v63 = (1 << v11);
    if ((v61 & 1) != 0)
      v60 = *(void (**)(_QWORD *))(*v62 + v60);
    v60(v62);
    v36 = a4;
    v53 = *(_QWORD *)(a1 + 9464);
    v37 = v79;
    if (v79)
    {
      (*(void (**)(_QWORD, _QWORD))(v53 + 8 * v11 + 2288))(*((_QWORD *)a4 + 19), *((_QWORD *)a4 + 20));
      v37 = v79;
      v36 = a4;
      v53 = *(_QWORD *)(a1 + 9464);
    }
  }
  sub_1C975E4BC(v53 + 2280, *v46, v11, *(_QWORD *)&v36[8 * v37 + 152], v47, v84);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 9496)
                                                                                        + 8 * v11
                                                                                        + 240))(v63, v63, v87, v41, v84, v47);
  v65 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 9496) + 2 * v20 + 152);
  if (v90 >= v11)
    v65 = 0;
  v77 = v64;
  v80 = (v65 >> (8 * ((_DWORD)v20 == 0))) + v64;
  result = sub_1C97F5D34(a1, v85, v97, v38, v87, v41, v84, v47, v84, v47, v82, v47, v11, &v99, 1, 0);
  v36 = a4;
  v34 = v95;
  v14 = a10;
  if (v80 >= v89)
  {
LABEL_40:
    *(int8x16_t *)(v36 + 136) = vextq_s8(*(int8x16_t *)(v36 + 136), *(int8x16_t *)(v36 + 136), 8uLL);
    v71 = *(_QWORD *)(a1 + 9496);
    v72 = *(_QWORD *)v14 + v35;
    v74 = *(_QWORD *)(v14 + 8) + v101;
    *(_QWORD *)v14 = v72;
    *(_QWORD *)(v14 + 8) = v74;
    v73 = *(_DWORD *)(v14 + 24) + v34;
  }
  else
  {
    *v38 = *v38 & 0xFFF3 | (4 * (v91 & 3));
    if ((int)v63 >= 8)
    {
      v66 = 0;
      v67 = 2 * ((unint64_t)*a4 >> 3);
      v68 = v38;
      do
      {
        v69 = v68;
        v70 = v63 >> 3;
        do
        {
          *v69++ = *v38;
          --v70;
        }
        while (v70);
        ++v66;
        v68 = (__int16 *)((char *)v68 + v67);
      }
      while (v66 != v63 >> 3);
    }
    result = (uint64_t)sub_1C982E6B8(a4, v85, v97, (int)v63 >> 2, 0, v99, v92);
    v71 = *(_QWORD *)(a1 + 9496);
    v72 = *(_QWORD *)a10 + v77;
    *(_QWORD *)a10 = v72;
    v73 = *(_DWORD *)(a10 + 24) + (v90 < v11);
  }
  *(_DWORD *)(v14 + 24) = v73;
  *(_QWORD *)(v14 + 16) = ((*(unsigned __int16 *)(v71 + 2 * *(__int16 *)(v14 + 28) + 152) * (unint64_t)v73) >> (8 * (*(_WORD *)(v14 + 28) == 0)))
                        + v72;
  return result;
}

uint64_t sub_1C97F5D34(uint64_t a1, uint64_t a2, unsigned int a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, _BYTE *a14, char a15, unsigned __int8 a16)
{
  uint64_t v19;
  _BOOL4 v21;
  __int16 v22;
  int v23;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a13 - 2;
  v19 = (1 << a13);
  v33 = a1 + 8 * (5 - a13);
  v35 = *(_QWORD *)(v33 + 6352);
  v21 = a13 == 2 && *(_DWORD *)(a1 + 4) == 1;
  v32 = v21;
  sub_1C97543D4(*(_QWORD *)(a1 + 9464) + 2824, a5, a6, a7, a8, a1 + 64, a13, HIBYTE(*a4) & 1, v21);
  v22 = *a4;
  v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 9480) + 137);
  if (v23 != 2 || a16 == 0)
  {
    v25 = 0;
    v26 = a3;
    v27 = a2;
  }
  else
  {
    v26 = a3;
    v27 = a2;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 9464) + 58) == 2)
      goto LABEL_19;
    v25 = (v22 & 0x70) != 48;
  }
  if (v23 == 1 || v25)
  {
LABEL_19:
    v28 = (int)v19;
    result = sub_1C97F5FF0(a1, v27, v26, (uint64_t)a4, a1 + 64, (int)v19, a11, a12, a13, *(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2113) - ((v22 & 3u) + a13), 0);
    *a14 = result;
    if (!(_DWORD)result)
      return result;
    goto LABEL_20;
  }
  v28 = (int)v19;
  result = sub_1C97F7724(a1, v27, v26, (uint64_t)a4, a1 + 64, (int)v19, a11, a12, a13, 0, 1, a16);
  *a14 = result;
  if ((result & 1) == 0)
    return result;
LABEL_20:
  sub_1C97F7DC4(a1, *a4, a11, a12, v35, v28, a13, 0);
  if (a15)
  {
    v30 = *(_QWORD *)(a1 + 9464) + 2824;
    v31 = *(_QWORD *)(v33 + 6352);
    if ((*a4 & 0x100) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v30 + 8 * v34 + 248))(a9, a10, v31, 0);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v30 + 16 * v34 + 8 * v32))(a9, a10, v31, 0, 1024);
  }
  else
  {
    *(_DWORD *)(a1 + 9120) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 9496) + 8 * a13 + 320))(v19, v19, v35, v28, a1 + 64, v28);
    result = (*(uint64_t (**)(void))(a1 + 8 * a13 + 9216))();
    *(_DWORD *)(a1 + 9120) = result;
  }
  return result;
}

uint64_t sub_1C97F5FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, _BOOL4 a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned __int8 *v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  double v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  double v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v72;
  double v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  double *v82;
  int64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int64_t v87;
  double v88;
  int64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  double v94;
  int64_t v95;
  double v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  int v110;
  int v111;
  int v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  double v120;
  double v121;
  int v122;
  int64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  double *v127;
  BOOL v128;
  int v129;
  int64_t v130;
  int64_t v131;
  _BOOL4 v132;
  _BOOL4 v133;
  int v134;
  double v135;
  double v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  int v147;
  double *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int64_t v156;
  double v157;
  double v158;
  int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  BOOL v171;
  int v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  int v178;
  double v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v222;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v236;
  unsigned __int8 *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  char v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  char *v248;
  int v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  double v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 *v261;
  char *v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  double v266;
  int v267;
  int v268;
  uint64_t v269;
  int64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  int v288;
  int v289;
  int v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  double v294[3072];
  int v295;
  int v296;
  _QWORD v297[969];
  _BYTE v298[8192];
  _QWORD v299[3450];

  v11 = MEMORY[0x1E0C80A78]();
  v18 = v17;
  v20 = v19;
  v21 = v16;
  v22 = a9;
  v299[3448] = *MEMORY[0x1E0C80C00];
  v295 = 0;
  v291 = v11;
  v240 = v15;
  if (((v13 | v12) & 0x80000000) == 0
    && ((v23 = *(_QWORD *)(v11 + 9488),
         v24 = v12 - *(_DWORD *)(v23 + 832),
         v25 = v13 - *(_DWORD *)(v23 + 836),
         v26 = *(unsigned __int8 *)(v23 + 828),
         v24 < v26)
      ? (v27 = v25 < v26)
      : (v27 = 0),
        v27))
  {
    v28 = (unsigned __int8 *)(*(_QWORD *)(v23 + 888) + 16 * (*(_QWORD *)(v23 + 864) * ((uint64_t)v25 >> 2) + (v24 >> 2)));
  }
  else
  {
    v28 = 0;
  }
  v29 = 1 << a9;
  v30 = *v14;
  if ((*v14 & 0x100) != 0)
  {
    if (a9 != 31)
    {
      v39 = 0;
      v38 = 0;
      if (v29 <= 1)
        v29 = 1;
      v40 = v15;
      do
      {
        v41 = 0;
        do
        {
          v42 = *(unsigned __int16 *)(v40 + v41);
          *(_WORD *)(v20 + v41) = v42;
          v38 |= v42 != 0;
          v41 += 2;
        }
        while (2 * v29 != v41);
        ++v39;
        v20 += 2 * v17;
        v40 += 2 * v16;
      }
      while (v39 != v29);
      return v38 & 1;
    }
LABEL_19:
    v38 = 0;
    return v38 & 1;
  }
  v297[0] = 0;
  v31 = v30 >> 9;
  v296 = 0;
  v237 = v28;
  sub_1C97F7F8C(v11, v28, v31, a9, a11, (int *)v297 + 1, &v296, v297, &v295, 1);
  v32 = a9 - 2;
  v238 = v295;
  v33 = 4 * v295;
  if (a9 != 3)
    v33 = 0;
  v34 = 144;
  if (*(_BYTE *)(*(_QWORD *)(v291 + 9464) + 58) == 2)
    v34 = 140;
  v250 = a9 - 2;
  v35 = SHIDWORD(v297[0]) % 6;
  v248 = (char *)*(&off_1E82928A8 + v32) + v33;
  v283 = v296;
  v239 = v21;
  v245 = (*(uint64_t (**)(_QWORD))(v291 + 8 * v32 + 9392))((*(_DWORD *)(*(_QWORD *)(v291 + 9480)
                                                                                              + v34) << (v296 - 9)));
  if (!v245)
    goto LABEL_19;
  v236 = v31;
  if (a9 == 3)
  {
    v262 = (char *)&unk_1C9862500 + 128 * v238;
    v36 = 8;
    goto LABEL_31;
  }
  v36 = 1 << a9;
  if (a9 == 5)
  {
    v37 = (char *)&unk_1C9861B00;
    goto LABEL_29;
  }
  if (a9 == 4)
  {
    v37 = (char *)&unk_1C9862300;
LABEL_29:
    v262 = v37;
    goto LABEL_31;
  }
  v262 = 0;
LABEL_31:
  v43 = 0;
  v246 = 0;
  v44 = &byte_1C9861A40[64 * v238 + 16 * v250];
  v45 = dbl_1C9859F00[24 * (SLODWORD(v297[0]) > 0) + 6 * v250 + v35];
  v46 = __clz(v245) ^ 0x3F;
  v244 = 1 << v250;
  v242 = (1 << v250) - 1;
  v47 = v36 - 1;
  if ((_DWORD)v238)
    v48 = 15;
  else
    v48 = 9;
  if (a9 == 3)
    v49 = 9;
  else
    v49 = 12;
  v50 = 0xFFFFFFFFLL;
  v251 = v49;
  v252 = ~(-1 << a9);
  if (a9 != 3)
    v48 = 21;
  v249 = v48;
  if (a11 <= 0)
    v51 = 0;
  else
    v51 = 27;
  v256 = v51;
  v254 = (a11 - 1);
  v52 = 0.0;
  v272 = 1;
  v53 = v46;
  v255 = 0.0;
  v259 = v18;
  v260 = v20;
  v261 = &byte_1C9861A40[64 * v238 + 16 * v250];
  v258 = v36 - 1;
  while (2)
  {
    v54 = v52;
    v55 = v43;
    while (2)
    {
      v56 = 16 * v46;
      if (v36 < 5)
        v241 = 0;
      else
        v241 = *(unsigned __int16 *)&v262[32 * v46];
      v292 = 0;
      v289 = 0;
      v257 = 0;
      v267 = 0;
      v271 = 0;
      v57 = v248[v46];
      v58 = (v246 >> v57) & 2;
      if ((v242 & v57) >= v242)
        LODWORD(v58) = 0;
      v243 = v248[v46];
      v59 = (v246 >> (v244 + v57)) & 1;
      if (v57 >> v250 >= v242)
        LODWORD(v59) = 0;
      if (v46)
        v60 = a11 <= 0;
      else
        v60 = 0;
      v253 = v58 | v59;
      v287 = 1;
      v273 = (1 << v46) & v245;
      if (v60)
        v61 = 2;
      else
        v61 = 0;
      v285 = v61 | (v272 == 0);
      v266 = 0.0;
      v62 = 15;
      v63 = 0.0;
      v64 = 0.0;
      v247 = v55;
      v43 = v55;
      v272 = 1;
      v264 = 16 * v46;
      v265 = v46;
      do
      {
        v65 = v62;
        v66 = v62 + v56;
        if (v36 < 5)
          v67 = v44[v66];
        else
          v67 = *(unsigned __int16 *)&v262[2 * v66];
        v68 = v67 >> v22;
        LOWORD(v69) = v273;
        if (!v273)
        {
          v282 = v65;
          goto LABEL_75;
        }
        v70 = *(unsigned __int16 *)(v20 + 2 * (v68 * v18 + (v67 & v47)));
        LOWORD(v69) = v70;
        if ((v70 & 0x8000u) != 0)
          v69 = -(__int16)v70;
        if (*(_WORD *)(v20 + 2 * (v68 * v18 + (v67 & v47))) || (v50 & 0x80000000) == 0 || v46 != v53)
        {
          v282 = v65;
          if ((int)v50 < 0 && v70 != 0)
            LODWORD(v50) = v66;
          if ((v50 & 0x80000000) == 0)
          {
            v72 = *((_DWORD *)&v299[16 * (int)v68 + 2424] + (v67 & v47));
            v73 = v45 * ((double)(int)v72 * (double)(int)v72);
            v255 = v255 + v73;
            goto LABEL_76;
          }
LABEL_75:
          v72 = 0;
          v73 = 0.0;
LABEL_76:
          v74 = (unsigned __int16)v69;
          *((_WORD *)&v297[1] + v67) = v69;
          if ((unsigned __int16)v69 != 0 && (int)v50 < 0)
          {
            v53 = v46;
            v50 = v66;
          }
          else
          {
            v50 = v50;
          }
          if ((v50 & 0x80000000) != 0)
          {
            v54 = v73 + v54;
            v56 = v264;
            v65 = v282;
            goto LABEL_150;
          }
          v277 = v53;
          v269 = v67;
          if (v22 == 2)
          {
            v67 = byte_1C98626F0[v67 + 64];
            v75 = v291;
          }
          else
          {
            v75 = v291;
            if (v67)
            {
              v76 = byte_1C98626F0[16 * v253 + (v67 & 3 | (4 * (v68 & 3)))];
              if (a11)
              {
                v67 = v251 + v76;
              }
              else
              {
                if ((v68 >> 2) + ((v67 & v252) >> 2))
                  v77 = v76 + 3;
                else
                  v77 = byte_1C98626F0[16 * v253 + (v67 & 3 | (4 * (v68 & 3)))];
                v67 = v77 + v249;
              }
            }
          }
          v78 = v72 >> 31;
          v79 = v272 + 4 * v285;
          v80 = v67 + v256;
          v81 = (int)v43;
          v275 = v43;
          v82 = &v294[(int)v43];
          v82[1024] = v73;
          v83 = (int64_t *)(v82 + 2048);
          v84 = *(_QWORD *)(*(_QWORD *)(v75 + 9488) + 944);
          v82[2048] = 0.0;
          v279 = v50;
          v268 = v66;
          v263 = v80;
          if ((unsigned __int16)v74 > 2u || (_DWORD)v50 == (_DWORD)v66)
          {
            v87 = 0;
            v294[(int)v43] = 1.79769313e308;
            v88 = 1.79769313e308;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v84 + 88))(v84);
            (**(void (***)(uint64_t, _QWORD, uint64_t))v84)(v84, 0, v84 + v80 + 131);
            v85 = *(_QWORD *)(v75 + 9496);
            v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 80))(v84);
            if (a11)
              v87 = ((v86 * (unint64_t)*(unsigned __int16 *)(v85 + 152)) << 15)
                  / *(unsigned __int16 *)(v85 + 4 * v254 + 162);
            else
              v87 = (v86 * (unint64_t)*(unsigned __int16 *)(v85 + 152)) << 7;
            *v83 = v87;
            (*(void (**)(uint64_t))(*(_QWORD *)v84 + 96))(v84);
            v88 = v73 + (double)v87;
            v294[v81] = v88;
            if (!(_WORD)v74)
              goto LABEL_108;
            v75 = v291;
            LODWORD(v50) = v279;
            LODWORD(v66) = v268;
          }
          if ((_DWORD)v50 == (_DWORD)v66)
          {
            v89 = 0;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v84 + 88))(v84);
            (**(void (***)(uint64_t, uint64_t, uint64_t))v84)(v84, 1, v84 + v80 + 131);
            v90 = *(_QWORD *)(v75 + 9496);
            v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 80))(v84);
            if (a11)
              v89 = ((v91 * (unint64_t)*(unsigned __int16 *)(v90 + 152)) << 15)
                  / *(unsigned __int16 *)(v90 + 4 * v254 + 162);
            else
              v89 = (v91 * (unint64_t)*(unsigned __int16 *)(v90 + 152)) << 7;
            (*(void (**)(uint64_t))(*(_QWORD *)v84 + 96))(v84);
          }
          if ((v74 & 0xFFFE) != 0)
            v92 = v74 - 1;
          else
            v92 = 1;
          if (v92 <= v74)
          {
            v93 = 0;
            do
            {
              v94 = (double)(int)(v72 - (v74 << v283)) * (double)(int)(v72 - (v74 << v283)) * v45;
              v95 = sub_1C97F8118(v291, (__int16)v74, v72 >> 31, v79, v285, v292, v289, v287, a11, 1u);
              v96 = v94 + (double)v95 + (double)v89;
              if (v96 < v88)
              {
                v294[v81] = v96;
                *v83 = v89;
                v87 = v89;
                v88 = v94 + (double)v95 + (double)v89;
                v93 = v74;
              }
              v27 = v74-- <= v92;
            }
            while (!v27);
LABEL_114:
            *((_WORD *)&v297[1] + v269) = v93;
            v97 = v275;
            v53 = v277;
            v46 = v265;
            if (*(_BYTE *)(*(_QWORD *)(v291 + 9480) + 148))
            {
              v270 = v87;
              v299[v81 + 1336] = (int)(v72 - (v93 << v283)) >> (v283 - 8);
              if (v93)
              {
                v98 = sub_1C97F8118(v291, (__int16)v93, v72 >> 31, v79, v285, v292, v289, v287, a11, 0);
                v299[v81 + 312] = sub_1C97F8118(v291, (__int16)(v93 + 1), v78, v79, v285, v292, v289, v287, a11, 0)
                                - v98;
                v99 = sub_1C97F8118(v291, (__int16)(v93 - 1), v78, v79, v285, v292, v289, v287, a11, 0) - v98;
                v100 = v298;
              }
              else
              {
                v99 = sub_1C97F8118(v291, 1, v72 >> 31, v79, v285, v292, v289, v287, a11, 0);
                v100 = v299;
              }
              *(_QWORD *)&v100[8 * v81 + 2496] = v99;
              if (v279 == v268)
              {
                v101 = 0;
              }
              else
              {
                v102 = *(_QWORD *)(*(_QWORD *)(v291 + 9488) + 944);
                (*(void (**)(uint64_t))(*(_QWORD *)v102 + 88))(v102);
                (**(void (***)(uint64_t, uint64_t, uint64_t))v102)(v102, 1, v102 + v263 + 131);
                v103 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 80))(v102);
                (*(void (**)(uint64_t))(*(_QWORD *)v102 + 96))(v102);
                v104 = *(_QWORD *)(*(_QWORD *)(v291 + 9488) + 944);
                (*(void (**)(uint64_t))(*(_QWORD *)v104 + 88))(v104);
                (**(void (***)(uint64_t, _QWORD, uint64_t))v104)(v104, 0, v104 + v263 + 131);
                v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 80))(v104);
                (*(void (**)(uint64_t))(*(_QWORD *)v104 + 96))(v104);
                v101 = v103 - v105;
              }
              v46 = v265;
              v97 = v275;
              v53 = v277;
              v87 = v270;
              v297[v81 + 257] = v101;
            }
            v106 = v287 + 2;
            if (v289 >= 8)
              v106 = 1;
            v107 = v292;
            if ((int)v292 >= 3)
              v108 = 3;
            else
              v108 = v292;
            if (v93 > 3 << v292 && v93 >= v106)
              v107 = v108 + 1;
            v292 = v107;
            v50 = v279;
            if (v93 < 1)
            {
              v271 += v87;
              v65 = v282;
              v112 = v282 != 0;
              v113 = (double)v87;
              v115 = -0.0;
              if (!v282)
                v115 = (double)v87;
              v64 = v64 + v115;
              v47 = v258;
              v56 = v264;
              if (!v93)
              {
                v18 = v259;
                v20 = v260;
                v22 = a9;
                v44 = &byte_1C9861A40[64 * v238 + 16 * v250];
                v36 = 1 << a9;
                goto LABEL_149;
              }
              v36 = 1 << a9;
            }
            else
            {
              ++v289;
              if ((v272 - 1) >= 2)
                v110 = v272;
              else
                v110 = v272 + 1;
              if (v93 != 1)
                v110 = 0;
              v272 = v110;
              if (v93 == 1)
                v111 = v287;
              else
                v111 = 0;
              v287 = v111;
              v271 += v87;
              v65 = v282;
              v112 = v282 != 0;
              v113 = (double)v87;
              v114 = -0.0;
              if (!v282)
                v114 = (double)v87;
              v64 = v64 + v114;
              v36 = 1 << a9;
              v47 = v258;
              v56 = v264;
            }
            v63 = v63 + v73;
            v266 = v266 + v88 - v113;
            v267 += v112;
            v257 = 1;
            v18 = v259;
            v20 = v260;
            v22 = a9;
            v44 = &byte_1C9861A40[64 * v238 + 16 * v250];
LABEL_149:
            v54 = v88 + v54;
            v43 = (v97 + 1);
            goto LABEL_150;
          }
LABEL_108:
          v93 = 0;
          goto LABEL_114;
        }
LABEL_150:
        v62 = v65 - 1;
      }
      while (v65);
      if ((v50 & 0x80000000) != 0)
      {
        if (!v257)
        {
          if (v46 >= 1)
          {
LABEL_160:
            --v46;
            v55 = v43;
            continue;
          }
LABEL_225:
          v159 = 0;
          v160 = v36 << v22;
          v137 = 0xFFFFFFFFLL;
          goto LABEL_234;
        }
        goto LABEL_174;
      }
      break;
    }
    v116 = (int)v53 - v46;
    v299[v116 + 2360] = 0;
    if (!v46)
      goto LABEL_174;
    if (v257)
    {
      if ((int)v53 > v46)
      {
        v276 = v43;
        v280 = v50;
        v120 = 0.0;
        if (!v267)
          v120 = v64;
        v121 = v54 - v120;
        if (v267)
          v122 = v271;
        else
          v122 = (int)((double)v271 - v64);
        v123 = sub_1C97F8378(v291, 1, v253, a11);
        v124 = sub_1C97F8378(v291, 0, v253, a11);
        v299[v116 + 2360] = v123;
        v54 = v121 + (double)v123;
        v52 = v121 + v63 + (double)v124 - v266 - (double)v122;
        if (v52 < v54)
        {
          v299[v116 + 2360] = v124;
          v125 = 15;
          v50 = v280;
          v36 = 1 << a9;
          v47 = v258;
          v43 = v276;
          v46 = v265;
          do
          {
            v126 = v241 + v44[v125];
            if (*((_WORD *)&v297[1] + v126))
            {
              *((_WORD *)&v297[1] + v126) = 0;
              v127 = &v294[v247];
              *v127 = v127[1024];
              v127[2048] = 0.0;
            }
            --v125;
            ++v247;
          }
          while (v125 != -1);
          v128 = 1;
LABEL_175:
          v27 = v46-- < 1;
          if (v27)
          {
            if (v128)
              goto LABEL_178;
            goto LABEL_225;
          }
          continue;
        }
        v50 = v280;
        v36 = 1 << a9;
        v47 = v258;
        v43 = v276;
        v46 = v265;
      }
LABEL_174:
      v128 = (int)v50 >= 0;
      v246 |= 1 << v243;
      v52 = v54;
      goto LABEL_175;
    }
    break;
  }
  v117 = v43;
  v118 = v50;
  v119 = sub_1C97F8378(v291, 0, v253, a11);
  v50 = v118;
  v43 = v117;
  v46 = v265;
  v54 = v54 + (double)(uint64_t)(v119 - v271);
  v299[v116 + 2360] = v119;
  if (v265 > 0)
    goto LABEL_160;
  v52 = v54;
LABEL_178:
  v278 = v53;
  if (v237[10] == 1)
    goto LABEL_185;
  if ((v237[11] & 1) != 0)
  {
    if (__PAIR64__(a11, a10) || !*(_DWORD *)(v291 + 8))
      goto LABEL_185;
LABEL_184:
    v129 = v50;
    v130 = sub_1C97F844C(v291, 1, a11);
    v131 = sub_1C97F844C(v291, 0, a11);
  }
  else
  {
    if (!__PAIR64__(a11, a10))
      goto LABEL_184;
LABEL_185:
    v129 = v50;
    v132 = v22 > 2 && a10;
    if (a11)
      v133 = v132;
    else
      v133 = !a10;
    v130 = sub_1C97F8500(v291, 1, v133, a11);
    v131 = sub_1C97F8500(v291, 0, v133, a11);
  }
  LODWORD(v50) = v129;
  v36 = 1 << a9;
  if ((v278 & 0x80000000) != 0)
    goto LABEL_225;
  v134 = 0;
  v135 = v255 + (double)v131;
  v136 = (double)v130;
  v137 = 0xFFFFFFFFLL;
  v138 = a9 - 2;
  v274 = 4 << v22;
  v139 = 16 * v278;
  v140 = v52 + v136;
  v141 = v278;
  v142 = ~(-1 << a9);
  v281 = v129;
  do
  {
    v143 = v248[v141];
    v284 = v141;
    v140 = v140 - (double)(uint64_t)v299[v278 - v141 + 2360];
    if (((v246 >> v143) & 1) != 0)
    {
      v288 = (v143 >> v138) * v274 + 4 * (v143 & ~(-1 << v250));
      v144 = 15;
      v286 = v139;
      while (1)
      {
        v145 = v139 + v144;
        if ((int)v139 + (int)v144 <= (int)v50)
        {
          v146 = v288 + v261[v144];
          v147 = *((__int16 *)&v297[1] + v146);
          v148 = &v294[v134];
          if (*((_WORD *)&v297[1] + v146))
          {
            v290 = v134;
            v293 = v137;
            v149 = v146 & v142;
            v150 = v146 >> a9;
            if ((_DWORD)v238 == 2)
              v151 = v150;
            else
              v151 = v149;
            if ((_DWORD)v238 == 2)
              v152 = v149;
            else
              v152 = v150;
            v153 = *(_QWORD *)(*(_QWORD *)(v291 + 9488) + 944);
            (*(void (**)(uint64_t))(*(_QWORD *)v153 + 88))(v153);
            sub_1C97F34E8(v153, v151, a9, a11, v153 + 91);
            sub_1C97F34E8(v153, v152, a9, a11, v153 + 109);
            if ((unint64_t)(v151 - 4) <= 0x1B)
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v153 + 24))(v153, v151 - byte_1C985A0A0[byte_1C985A080[v151]], (byte_1C985A080[v151] - 2) >> 1);
            if ((unint64_t)(v152 - 4) <= 0x1B)
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v153 + 24))(v153, v152 - byte_1C985A0A0[byte_1C985A080[v152]], (byte_1C985A080[v152] - 2) >> 1);
            v154 = *(_QWORD *)(v291 + 9496);
            v138 = a9 - 2;
            v142 = ~(-1 << a9);
            v47 = v258;
            v155 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v153 + 80))(v153)
                 * (unint64_t)*(unsigned __int16 *)(v154 + 152);
            if (a11)
              v156 = (v155 << 15) / *(unsigned __int16 *)(v154 + 4 * v254 + 162);
            else
              v156 = v155 << 7;
            (*(void (**)(uint64_t))(*(_QWORD *)v153 + 96))(v153);
            v157 = (double)*((uint64_t *)v148 + 2048);
            v158 = v140 + (double)v156 - v157;
            if (v158 >= v135)
              v137 = v293;
            else
              v137 = v145;
            if (v147 > 1)
            {
              LODWORD(v50) = v281;
              goto LABEL_227;
            }
            v134 = v290;
            if (v158 < v135)
              v135 = v140 + (double)v156 - v157;
            v140 = v140 - v294[v290] + v294[v290 + 1024];
            LODWORD(v50) = v281;
            v139 = v286;
          }
          else
          {
            v140 = v140 - (double)*((uint64_t *)v148 + 2048);
          }
          ++v134;
        }
        if (--v144 == -1)
          goto LABEL_223;
      }
    }
    v134 += 16;
LABEL_223:
    v141 = v284 - 1;
    v139 -= 16;
  }
  while (v284 > 0);
LABEL_227:
  LOBYTE(v22) = a9;
  v160 = 1 << a9 << a9;
  v159 = 0;
  if ((v137 & 0x80000000) != 0)
  {
    v18 = v259;
    v20 = v260;
    v44 = &byte_1C9861A40[64 * v238 + 16 * v250];
  }
  else
  {
    v161 = 0;
    v18 = v259;
    v20 = v260;
    v44 = &byte_1C9861A40[64 * v238 + 16 * v250];
    do
    {
      v162 = v248[(unint64_t)v161 >> 4];
      v163 = v261[v161 & 0xF] + 4 * ((v244 + 255) & v162) + (v162 >> v250) * (4 << a9);
      v164 = v163 >> a9;
      v165 = v164 * v239 + (v163 & v47);
      v166 = v164 * v259 + (v163 & v47);
      v167 = *((__int16 *)&v297[1] + v163);
      v159 += v167;
      if (*(__int16 *)(v240 + 2 * v165) < 0)
        v167 = -v167;
      *(_WORD *)(v260 + 2 * v166) = v167;
      ++v161;
    }
    while ((_DWORD)v137 + 1 != v161);
  }
LABEL_234:
  v168 = v137 + 1;
  if ((int)v137 + 1 < v160)
  {
    do
    {
      if (v168 <= 0)
        v169 = -(-v168 & 0xF);
      else
        v169 = v168 & 0xF;
      v170 = v44[v169]
           + 4 * ((v244 - 1) & v248[v168 >> 4])
           + (v248[v168 >> 4] >> v250) * (4 << v22);
      *(_WORD *)(v20 + 2 * ((v170 >> v22) * v18 + (v170 & v47))) = 0;
      ++v168;
    }
    while (v160 != v168);
  }
  if (*(_BYTE *)(*(_QWORD *)(v291 + 9480) + 148))
    v171 = v159 < 2;
  else
    v171 = 1;
  if (!v171)
  {
    v172 = v236 + *(unsigned __int8 *)(*(_QWORD *)(v291 + 9472) + 2097);
    v173 = *(_QWORD *)(v291 + 9496);
    if (v172 >= 63)
      v174 = 63;
    else
      v174 = v236 + *(unsigned __int8 *)(*(_QWORD *)(v291 + 9472) + 2097);
    v175 = v174 & ~(v174 >> 31);
    if (a11)
    {
      v176 = *(unsigned __int16 *)(*(_QWORD *)(v173 + 8 * v254 + 56) + 2 * v175);
      if ((v137 & 0x80000000) != 0)
        goto LABEL_321;
    }
    else
    {
      v176 = dword_1C985909C[70 * *(unsigned __int8 *)(v173 + 172) + v175];
      if ((v137 & 0x80000000) != 0)
        goto LABEL_321;
    }
    v177 = v172 / 6;
    v178 = a39H[v172 % 6];
    v179 = (float)((float)((v178 * v178) << (2 * v177)) / (float)v176) * 0.0625 + 0.5;
    v180 = v137 >> 4;
    v181 = v50 - v137;
    v182 = 4 << v22;
    v183 = (uint64_t)v179;
    v184 = v180;
    while (2)
    {
      v185 = 0;
      v186 = 0;
      v187 = (v248[v184] >> v250) * v182 + 4 * (v248[v184] & ~(-1 << v250));
      v188 = -1;
      v189 = 16;
      do
      {
        v190 = *(unsigned __int16 *)(v20
                                   + 2 * (((v187 + v44[v185]) & v252) + ((v187 + v44[v185]) >> v22) * v18));
        if (v189 == 16 && v190 != 0)
          v189 = v185;
        v192 = (__int16)v190;
        if ((v190 & 0x8000u) != 0)
          v192 = -(__int16)v190;
        v193 = v186 + v192;
        if (*(_WORD *)(v20 + 2 * (((v187 + v44[v185]) & v252) + ((v187 + v44[v185]) >> v22) * v18)))
        {
          v186 = v193;
          v188 = v185;
        }
        ++v185;
      }
      while (v185 != 16);
      if ((int)(v188 - v189) < 4
        || (v194 = v187 + v44[v189],
            v195 = *(unsigned __int16 *)(v20 + 2 * ((v194 & v252) + (v194 >> v22) * v18)),
            (v186 & 1) == v195 >> 15))
      {
        if (v184 == v180)
          v196 = v188 + 1;
        else
          v196 = 16;
        v181 += v196;
        goto LABEL_319;
      }
      if (v184 == v180)
        v197 = v188;
      else
        v197 = 15;
      if ((v197 & 0x80000000) != 0)
      {
        v200 = 0;
        v208 = -1;
LABEL_309:
        v226 = v208 & v252;
        v227 = v208 >> v22;
        v228 = v226 + v227 * v18;
        v229 = *(__int16 *)(v20 + 2 * v228);
        v230 = v226 + v227 * v239;
        if (v229 >= 0)
          LOWORD(v231) = *(_WORD *)(v20 + 2 * v228);
        else
          v231 = -v229;
        v232 = *(__int16 *)(v240 + 2 * v230);
        if ((unsigned __int16)v231 == 0x7FFF)
          v233 = -1;
        else
          v233 = v200;
        if (v232 >= 0)
          LOWORD(v234) = v233;
        else
          v234 = -v233;
        *(_WORD *)(v20 + 2 * v228) = v234 + v229;
LABEL_319:
        v27 = v184-- <= 0;
        if (v27)
          goto LABEL_321;
        continue;
      }
      break;
    }
    v198 = v137;
    v199 = 0;
    v200 = 0;
    v201 = v189;
    v202 = v195 >> 15;
    v203 = &v297[v181 + 257];
    v204 = &v299[v181 + 312];
    v206 = v197 - v189;
    v207 = 0x7FFFFFFFFFFFFFFFLL;
    v208 = -1;
    v209 = v197;
    v210 = v197 - v188;
    while (2)
    {
      v211 = v187 + v261[v209];
      v212 = v211 & v252;
      v213 = v211 >> a9;
      v214 = *(_WORD *)(v260 + 2 * (v212 + v213 * v259));
      v205 = &v299[v181 + 1336];
      v215 = v205[v199];
      if (v214)
      {
        v216 = v215 * v183;
        v217 = v216 + (*(_QWORD *)&v298[8 * v181 + 2496 + 8 * v199] << 7);
        if (v214 >= 0)
          LOWORD(v218) = v214;
        else
          v218 = -v214;
        if ((unsigned __int16)v218 == 1)
          v217 = v217 - (v203[v199] << 7) - 0x8000;
        v219 = (v204[v199] << 7) - v216;
        if ((unsigned __int16)v218 == 1 && v210 == v199 && v184 == v180)
          v222 = v217 - 0x20000;
        else
          v222 = v217;
        if (v219 >= v222)
        {
          if ((unsigned __int16)v218 == 1 && v206 == v199)
            v219 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v219 = v222;
          v224 = -1;
LABEL_303:
          if (v219 < v207)
          {
            v207 = v219;
            v200 = v224;
            v208 = v187 + v261[v209];
          }
          ++v199;
          v27 = v209-- <= 0;
          if (v27)
          {
            v181 += v197 + 1;
            v18 = v259;
            v20 = v260;
            LOBYTE(v22) = a9;
            v44 = &byte_1C9861A40[64 * v238 + 16 * v250];
            v137 = v198;
            goto LABEL_309;
          }
          continue;
        }
      }
      else
      {
        if (v215 >= 0)
          v225 = v205[v199];
        else
          v225 = -v215;
        v219 = (v204[v199] << 7) - v225 * v183 + (v203[v199] << 7);
        if (v209 < v201 && v202 != *(unsigned __int16 *)(v240 + 2 * (v212 + v213 * v239)) >> 15)
          v219 = 0x7FFFFFFFFFFFFFFFLL;
      }
      break;
    }
    v224 = 1;
    goto LABEL_303;
  }
LABEL_321:
  v38 = (int)v137 >= 0;
  return v38 & 1;
}

uint64_t sub_1C97F7724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11, int a12)
{
  uint64_t v12;
  int v13;
  int v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned __int8 *v31;
  __int16 v32;
  uint64_t v33;
  char v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  signed int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  int v55;
  uint64_t v56;
  char *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v72;
  int v73;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  signed int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  _QWORD v104[515];

  v12 = MEMORY[0x1E0C80A78]();
  v18 = v17;
  v20 = v19;
  v100 = v16;
  v22 = v21;
  v23 = v14;
  v24 = v13;
  v25 = v12;
  v104[513] = *MEMORY[0x1E0C80C00];
  v102 = 0;
  v26 = *(_QWORD *)(v12 + 9488);
  if (((v14 | v13) & 0x80000000) == 0
    && ((v27 = v13 - *(_DWORD *)(v26 + 832),
         v28 = v14 - *(_DWORD *)(v26 + 836),
         v29 = *(unsigned __int8 *)(v26 + 828),
         v27 < v29)
      ? (v30 = v28 < v29)
      : (v30 = 0),
        v30))
  {
    v31 = (unsigned __int8 *)(*(_QWORD *)(v26 + 888) + 16 * (*(_QWORD *)(v26 + 864) * ((uint64_t)v28 >> 2) + (v27 >> 2)));
  }
  else
  {
    v31 = 0;
  }
  v32 = *v15;
  if ((*v15 & 0x100) != 0)
  {
    if (a9 == 31)
    {
      v34 = 0;
    }
    else
    {
      v35 = 0;
      v34 = 0;
      v36 = 1 << a9;
      if (1 << a9 <= 1)
        v36 = 1;
      do
      {
        v37 = 0;
        do
        {
          v38 = *(unsigned __int16 *)(v22 + v37);
          *(_WORD *)(v20 + v37) = v38;
          v34 |= v38 != 0;
          v37 += 2;
        }
        while (2 * v36 != v37);
        ++v35;
        v20 += 2 * v17;
        v22 += 2 * v16;
      }
      while (v35 != v36);
    }
    return v34 & 1;
  }
  v104[0] = 0;
  v103 = 0;
  sub_1C97F7F8C(v12, v31, v32 >> 9, a9, a10, (int *)v104 + 1, &v103, v104, &v102, a11);
  if (a10)
    v33 = 0;
  else
    v33 = *(int *)(v26 + 212);
  v39 = dword_1C9859EEC[v33];
  if (a12 && *(_BYTE *)(v25 + 9569))
  {
    v40 = *(int **)(v26 + 976);
    v41 = *v40;
    if (*v40 <= a9)
    {
      v44 = *(_DWORD *)(v26 + 16);
      v45 = *(_DWORD *)(v26 + 20);
      v42 = v24;
      v43 = v23;
      LOBYTE(v41) = a9;
    }
    else
    {
      v42 = (-1 << v41) & v24;
      v43 = (-1 << v41) & v23;
      v44 = *(_DWORD *)(v26 + 16);
      v45 = *(_DWORD *)(v26 + 20);
    }
    v46 = sub_1C97DAE74(v40, v42, v43, v41, v44, v45, 4);
    if (v46 >= 2)
    {
      v47 = __clz(v46);
      if ((v47 & 1) != 0)
        v48 = ((byte_1C9860C84[(unint64_t)(v46 << (v47 + 1)) >> 24] << 12) | 0x200000u) >> ((v47 + 1) >> 1);
      else
        v48 = (11585
             * (((byte_1C9860C84[(unint64_t)(v46 << (v47 + 1)) >> 24] << 12) | 0x200000u) >> ((v47 + 1) >> 1))) >> 14;
      v46 = (v48 + 16) >> 5;
    }
    v49 = *(_DWORD *)(v25 + 9572);
    v50 = 2 * (v49 - v46) + 256;
    if (v50 <= 128)
      v50 = 128;
    if (v49 < (int)v46)
      v39 = v50;
    else
      v39 = 256;
  }
  else if (*(_BYTE *)(*(_QWORD *)(v25 + 9464) + 58) == 2)
  {
    v39 = 171;
  }
  v51 = (v39 << (v103 - 9));
  if (*(_BYTE *)(*(_QWORD *)(v25 + 9472) + 274))
  {
    v52 = a9 - 2;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 9464) + 32) + 1600))
    {
      v53 = (*(uint64_t (**)(uint64_t))(v25 + 8 * v52 + 9328))(v51);
      goto LABEL_43;
    }
  }
  else
  {
    v52 = a9 - 2;
  }
  v53 = (*(uint64_t (**)(uint64_t))(v25 + 8 * v52 + 9264))(v51);
LABEL_43:
  v34 = v53;
  if (*(_BYTE *)(*(_QWORD *)(v25 + 9480) + 148))
  {
    if (a11)
    {
      v101 = 0;
      v54 = 1 << a9;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, char *))(v25 + 8 * (a9 > 2) + 9192))((1 << a9), v18, v20, &v101, (char *)&v101 + 4);
      if (HIDWORD(v101) >= 2)
      {
        v55 = a9 == 3 ? 4 * v102 : 0;
        if (v54 << a9 >= 16)
        {
          v56 = a9 - 2;
          v57 = (char *)*(&off_1E82928A8 + v56) + v55;
          v58 = &byte_1C9861A40[64 * (uint64_t)v102 + 16 * v56];
          v59 = (v54 << a9) >> 4;
          v60 = ~(-1 << v56);
          v62 = v54 - 1;
          v63 = -1;
          v99 = v57;
          v98 = v60;
          do
          {
            v64 = 0;
            v65 = 0;
            v66 = v59--;
            v67 = (v57[v59] >> v56) * (4 << a9)
                + 4 * (v57[v59] & v60);
            v68 = -1;
            LODWORD(v69) = 16;
            do
            {
              v61 = ~(-1 << a9);
              v70 = *(unsigned __int16 *)(v20
                                        + 2 * (((v67 + v58[v64]) & v61) + ((v67 + v58[v64]) >> a9) * v18));
              if ((_DWORD)v69 != 16 || v70 == 0)
                v69 = v69;
              else
                v69 = v64;
              v72 = (__int16)v70;
              if ((v70 & 0x8000u) != 0)
                v72 = -(__int16)v70;
              v73 = v65 + v72;
              if (*(_WORD *)(v20 + 2 * (((v67 + v58[v64]) & v61) + ((v67 + v58[v64]) >> a9) * v18)))
              {
                v65 = v73;
                v68 = v64;
              }
              ++v64;
            }
            while (v64 != 16);
            if (v63 == -1 && v68 > -1)
              v63 = v59;
            if (v68 - (int)v69 >= 4)
            {
              v75 = v67 + v58[(int)v69];
              v76 = *(unsigned __int16 *)(v20 + 2 * ((v75 >> a9) * v18 + (v75 & v62)));
              if ((v65 & 1) != v76 >> 15)
              {
                if (v63 == (_DWORD)v59)
                  v77 = v68;
                else
                  v77 = 15;
                if ((v77 & 0x80000000) == 0)
                {
                  v78 = 0;
                  v79 = 0;
                  v80 = v76 >> 15;
                  v81 = 0x80000000;
                  v82 = -1;
                  while (1)
                  {
                    v83 = v67 + v58[v77];
                    v84 = v83 >> a9;
                    LOWORD(v85) = *(_WORD *)(v20 + 2 * (v84 * v18 + (v83 & v62)));
                    v86 = *((_DWORD *)&v104[16 * v84 + 1] + (v83 & v62));
                    if ((_WORD)v85)
                    {
                      if (v86 <= 0)
                      {
                        v87 = v69 == v77;
                        if ((v85 & 0x8000u) != 0)
                          v85 = -(__int16)v85;
                        v88 = (unsigned __int16)v85 == 1;
                        if (v87 && v88)
                          v86 = 0x80000000;
                        else
                          v86 = -v86;
                        if (!v87 || !v88)
                          v79 = -1;
                        goto LABEL_88;
                      }
                    }
                    else if (v77 < (int)v69 && v80 != *(unsigned __int16 *)(v22 + 2 * ((v83 & v62) + v84 * v100)) >> 15)
                    {
                      v86 = 0x80000000;
                    }
                    v79 = 1;
LABEL_88:
                    if (v86 > v81)
                    {
                      v81 = v86;
                      v78 = v79;
                      v82 = v67 + v58[v77];
                    }
                    v30 = v77-- <= 0;
                    if (v30)
                      goto LABEL_94;
                  }
                }
                v78 = 0;
                v82 = -1;
LABEL_94:
                v89 = v82 >> a9;
                v90 = v89 * v18 + (v82 & v62);
                v91 = *(__int16 *)(v20 + 2 * v90);
                v92 = v89 * v100 + (v82 & v62);
                if (v91 >= 0)
                  LOWORD(v93) = *(_WORD *)(v20 + 2 * v90);
                else
                  v93 = -v91;
                v94 = *(__int16 *)(v22 + 2 * v92);
                if ((unsigned __int16)v93 == 0x7FFF)
                  v95 = -1;
                else
                  v95 = v78;
                if (v94 >= 0)
                  LOWORD(v96) = v95;
                else
                  v96 = -v95;
                *(_WORD *)(v20 + 2 * v90) = v96 + v91;
                v57 = v99;
                LOBYTE(v60) = v98;
              }
            }
          }
          while (v66 > 1);
        }
      }
    }
  }
  return v34 & 1;
}

uint64_t sub_1C97F7DC4(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12 = *(_QWORD *)(result + 32);
  v13 = a2 >> 9;
  if (a8)
  {
    v13 += *(char *)(*(_QWORD *)(result + 24) + a8 - 1 + 3) + *(char *)(v12 + a8 + 656);
    v14 = *(unsigned __int8 **)(v12 + 16);
    v15 = v14[2099];
    if (v13 <= -v15)
      v13 = -v15;
    if (v14[2148] == 1)
    {
      if (v13 >= 57)
        v16 = 57;
      else
        v16 = v13;
      v17 = __OFSUB__(v16, 30);
      v18 = v16 - 30;
      if (v18 < 0 == v17)
        v13 = byte_1C9861020[v18];
    }
    else if (v13 >= 51)
    {
      v13 = 51;
    }
    v20 = v14 + 223;
  }
  else
  {
    v19 = *(_QWORD *)(v12 + 16);
    v15 = *(unsigned __int8 *)(v19 + 2097);
    v20 = (unsigned __int8 *)(v19 + 222);
  }
  v21 = (a7 + 3);
  if (v13 < 0)
  {
    v13 += v15;
    v21 = v21 + *v20;
    if ((a2 & 0x100) == 0)
      goto LABEL_16;
  }
  else if ((a2 & 0x100) == 0)
  {
LABEL_16:
    if (*(_BYTE *)(*(_QWORD *)(result + 9472) + 274))
    {
      if (*(_DWORD *)(result + 4) == 1)
        v22 = 0;
      else
        v22 = 3;
      v23 = *(_QWORD *)(*(_QWORD *)(result + 9464) + 32) + 390 * a7 + 65 * (v22 + a8) - 740;
    }
    else
    {
      v23 = 0;
    }
    v28 = result + 9264;
    v29 = a39H[v13 % 6] << (v13 / 6);
    if (v23)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * a7 + 80))(v21, v29, v23, a3, a4, a5, a6);
    else
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * a7 + 16))((v21 - 4), v29, a3, a4, a5, a6);
  }
  if (a7 != 31)
  {
    v24 = 0;
    v25 = 1 << a7;
    if (1 << a7 <= 1)
      v25 = 1;
    v26 = 2 * a6;
    do
    {
      v27 = 0;
      do
      {
        *(_WORD *)(a5 + v27) = *(_WORD *)(a3 + v27);
        v27 += 2;
      }
      while (2 * v25 != v27);
      ++v24;
      a5 += v26;
      a3 += 2 * a4;
    }
    while (v24 != v25);
  }
  return result;
}

uint64_t sub_1C97F7F8C(uint64_t result, unsigned __int8 *a2, int a3, int a4, int a5, int *a6, _DWORD *a7, _DWORD *a8, int *a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;

  if (!a5)
  {
    *a6 = a3;
    v23 = *(_QWORD *)(result + 9472);
    v14 = *(unsigned __int8 *)(v23 + 2097);
    *a8 = *(unsigned __int8 *)(v23 + 222);
    if (!a10 || *(_DWORD *)(result + 4) != 1)
      goto LABEL_34;
    if (a4 > 3)
      v22 = 0;
    else
      v22 = byte_1C9859C98[*a2];
    goto LABEL_33;
  }
  v10 = 560;
  if (a5 != 1)
    v10 = 561;
  v11 = 14;
  if (a5 != 1)
    v11 = 15;
  v12 = *(char *)(*(_QWORD *)(result + 9464) + v10)
      + a3
      + *(char *)(*(_QWORD *)(*(_QWORD *)(result + 9464) + 32) + v11);
  v13 = *(_QWORD *)(result + 9472);
  v14 = *(unsigned __int8 *)(v13 + 2099);
  if (v12 >= 57)
    v15 = 57;
  else
    v15 = v12;
  if (v12 <= -v14)
    v16 = -v14;
  else
    v16 = v15;
  if (v16 >= 30)
    v16 = byte_1C9861020[v16 - 30];
  *a6 = v16;
  *a8 = *(unsigned __int8 *)(v13 + 223);
  if (a10 && *(_DWORD *)(result + 4) == 1)
  {
    v17 = a2[1];
    if (v17 == 35)
      v17 = **(unsigned __int8 **)(*(_QWORD *)(result + 9488) + 888);
    if ((a4 - 1) <= 1)
    {
      v18 = 26 - v17;
      if (v17 >= 0x1A)
        v18 = v17 - 26;
      v19 = 10 - v17;
      v20 = v17 >= 0xA;
      v21 = v17 - 10;
      if (!v20)
        v21 = v19;
      if (v18 < 5 || v21 <= 4)
      {
        if (v21 >= 5)
          v22 = 1;
        else
          v22 = 2;
LABEL_33:
        *a9 = v22;
      }
    }
  }
LABEL_34:
  v24 = *a6;
  if (*a6 < 0)
  {
    v26 = v24 + v14;
    *a6 = v26;
    v25 = v26 / 6 - (*a8 + a4);
  }
  else
  {
    v25 = v24 / 6 - a4;
  }
  *a7 = v25 + 21;
  return result;
}

unint64_t sub_1C97F8118(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8, int a9, unsigned __int8 a10)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v16 = a10;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17);
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v17 + 8))(v17, a3 != 0);
  v18 = v17 + 4 * (a9 > 0) + 199;
  if (a7 >= 8)
    v19 = 1;
  else
    v19 = a8 + 2;
  v20 = a2 - v19;
  if (a2 < v19)
  {
    if (a2 == 1)
    {
      a5 = a4;
      v18 = v17 + 16 * (a9 > 0) + 175;
    }
    else
    {
      if (a2 != 2)
        goto LABEL_16;
      (**(void (***)(uint64_t, uint64_t, uint64_t))v17)(v17, 1, v17 + 16 * (a9 > 0) + 175 + a4);
    }
  }
  else
  {
    v21 = (v20 - (3 << a6));
    if (v20 >= 3 << a6)
    {
      v23 = 1 << a6;
      v24 = a6;
      while ((int)v21 >= v23)
      {
        v24 = (v24 + 1);
        v21 = (v21 - v23);
        v23 = 1 << v24;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, ((1 << (v24 - a6 + 4)) - 2));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v21, v24);
      v16 = a10;
      v18 = v17 + 4 * (a9 > 0) + 199;
      v22 = v17 + 16 * (a9 > 0) + 175;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
      v22 = v17 + 16 * (a9 > 0) + 175;
      v18 = v17 + 4 * (a9 > 0) + 199;
    }
    if (a7 > 7 || ((**(void (***)(uint64_t, uint64_t, uint64_t))v17)(v17, 1, v22 + a4), !a8))
    {
LABEL_16:
      if (v16)
        goto LABEL_17;
LABEL_21:
      v27 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 80))(v17);
      goto LABEL_23;
    }
  }
  (**(void (***)(uint64_t, BOOL, uint64_t))v17)(v17, a2 >= v19, v18 + a5);
  if (!v16)
    goto LABEL_21;
LABEL_17:
  v25 = *(_QWORD *)(a1 + 9496);
  v26 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 80))(v17)
      * (unint64_t)*(unsigned __int16 *)(v25 + 152);
  if (a9)
    v27 = (v26 << 15) / *(unsigned __int16 *)(v25 + 4 * (a9 - 1) + 162);
  else
    v27 = v26 << 7;
LABEL_23:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 96))(v17);
  return v27;
}

unint64_t sub_1C97F8378(uint64_t a1, int a2, int a3, int a4)
{
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = a4 > 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v10 = v9 + 2 * v8;
  if (a3 > 0)
    ++v10;
  (**(void (***)(uint64_t, BOOL, uint64_t))v9)(v9, a2 != 0, v10 + 127);
  v11 = *(_QWORD *)(a1 + 9496);
  v12 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9)
      * (unint64_t)*(unsigned __int16 *)(v11 + 152);
  if (a4)
    v13 = (v12 << 15) / *(unsigned __int16 *)(v11 + 4 * (a4 - 1) + 162);
  else
    v13 = v12 << 7;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  return v13;
}

unint64_t sub_1C97F844C(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  (**(void (***)(uint64_t, BOOL, uint64_t))v6)(v6, a2 != 0, v6 + 78);
  v7 = *(_QWORD *)(a1 + 9496);
  v8 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6)
     * (unint64_t)*(unsigned __int16 *)(v7 + 152);
  if (a3)
    v9 = (v8 << 15) / *(unsigned __int16 *)(v7 + 4 * (a3 - 1) + 162);
  else
    v9 = v8 << 7;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  return v9;
}

unint64_t sub_1C97F8500(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  v9 = 84;
  if (!a4)
    v9 = 82;
  (**(void (***)(uint64_t, BOOL, uint64_t))v8)(v8, a2 != 0, v8 + v9 + a3);
  v10 = *(_QWORD *)(a1 + 9496);
  v11 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8)
      * (unint64_t)*(unsigned __int16 *)(v10 + 152);
  if (a4)
    v12 = (v11 << 15) / *(unsigned __int16 *)(v10 + 4 * (a4 - 1) + 162);
  else
    v12 = v11 << 7;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  return v12;
}

unint64_t sub_1C97F85D4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, int a8, int a9, _BOOL4 a10, unsigned int a11)
{
  int v11;
  int v15;
  int v16;
  unint64_t v17;
  __int16 *v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v24;
  int v25;
  signed int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *, uint64_t, _QWORD, uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD, int, _QWORD);
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 *v50;
  int v51;
  unsigned int v53;
  uint64_t v54;
  __int16 v57;

  v11 = a8;
  v15 = a2 - *((_DWORD *)a5 + 1);
  v16 = a3 - *((_DWORD *)a5 + 2);
  v17 = *a5;
  v53 = a7;
  if (a7 == 35)
    v53 = *(unsigned __int8 *)(*((_QWORD *)a5 + 12) + 16 * (((uint64_t)v15 >> 2) + (int)(v17 >> 2) * (uint64_t)(v16 >> 2)));
  v18 = (__int16 *)(*((_QWORD *)a5 + 11) + 2 * (((uint64_t)v15 >> 3) + (int)(v17 >> 3) * (uint64_t)(v16 >> 3)));
  v19 = a9 > 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2116) >= a8)
  {
    v19 = a10;
    if (a10)
      return 0;
    v50 = v18;
    v57 = 0;
    goto LABEL_14;
  }
  v20 = ((unsigned __int16)*v18 >> 2) & 3;
  v21 = (a8 - 1);
  v57 = 0;
  if (v20 == a9)
  {
    v50 = v18;
    v11 = a8 - 1;
LABEL_14:
    v28 = *((_QWORD *)a4 + 18);
    v29 = 2 * *(unsigned __int8 *)(v28 + 1);
    v30 = (int)a2 - (uint64_t)*((int *)a4 + 1);
    v31 = (int)(a3 - *((_DWORD *)a4 + 2)) >> 1;
    v32 = a4[1];
    v33 = **((_QWORD **)a4 + 5) + (*((_QWORD *)a4 + 6) + v30 + v32 * v31) * *(int *)(*((_QWORD *)a4 + 5) + 16);
    v34 = **(_QWORD **)(v28 + 72)
        + (v30 + (int)v29 * (uint64_t)v31 + *(_QWORD *)(v28 + 80)) * *(int *)(*(_QWORD *)(v28 + 72) + 16);
    v35 = *(_QWORD *)(a1 + 9488);
    if (v19 || !*(_BYTE *)(v35 + 24795))
    {
      v36 = *(unsigned int *)(a1 + 9520);
      v37 = *(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD, int, _QWORD))(v35 + 29784);
      v38 = *(_QWORD *)(v35 + 29792);
      v39 = (_QWORD *)(v35 + (v38 >> 1));
      if ((v38 & 1) != 0)
        v37 = *(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD, int, _QWORD))(*v39 + v37);
      v37(v39, a2, a3, v36, a4, 1, a6, a11, v11, *((_QWORD *)a4 + 19));
    }
    sub_1C9708678(*(_QWORD *)(a1 + 9464) + 2280, v53, v11, *((_QWORD *)a4 + 19), v29, v34);
    v40 = *(_QWORD *)(a1 + 9496);
    v54 = v11 - 2;
    v22 = (*(unsigned __int16 *)(v40 + 164)
         * (unint64_t)(*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * v54 + 440))((1 << v11), (1 << v11), v33, v32, v34, v29)) >> 8;
    if (a9 >= 1)
    {
      v41 = *((_QWORD *)a4 + 18);
      v42 = *(unsigned __int8 *)(v41 + 1);
      v43 = a2 - *((_DWORD *)a4 + 1);
      v44 = a3 - *((_DWORD *)a4 + 2);
      v45 = ((uint64_t)v43 >> 1) + v42 * (v44 >> 1);
      v46 = *(_QWORD *)(v41 + 40) + 2 * v45;
      v47 = *(_QWORD *)(v41 + 48) + 2 * v45;
      v48 = *(_QWORD *)(a1 + 9488);
      *(_DWORD *)(v48 + 832) = a2;
      *(_DWORD *)(v48 + 836) = a3;
      *(_QWORD *)(v48 + 888) = *((_QWORD *)a4 + 12)
                             + 16 * (((uint64_t)v43 >> 2) + ((unint64_t)*a4 >> 2) * (v44 >> 2));
      sub_1C97F89C4((_QWORD *)a1, a2, a3, v11, v50, v33, v32, v34, v29, v34, v29, v46, v47, v42, (_BYTE *)&v57 + 1, &v57);
      sub_1C982E6B8(a4, a2, a3, 1 << v54, 1, HIBYTE(v57), 1);
      sub_1C982E6B8(a4, a2, a3, 1 << v54, 2, v57, 1);
    }
    return v22;
  }
  v24 = 0;
  LODWORD(v22) = 0;
  v25 = a8 - 2;
  v51 = (1 << (a8 - 1)) + a2;
  v26 = (1 << (a8 - 1)) + a3;
  do
  {
    v27 = a11;
    if (v25 >= *(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2116))
      v27 = sub_1C97C3078(a11, v24, v51 < *(_DWORD *)(*(_QWORD *)(a1 + 9488) + 16), v26 < *(_DWORD *)(*(_QWORD *)(a1 + 9488) + 20));
    v22 = sub_1C97F85D4(a1, ((v24 & 1) << v21) + (int)a2, (v24 >> 1 << v21) + a3, a4, a5, a6, v53, v21, __PAIR64__(v24, a9 + 1), v27)+ v22;
    ++v24;
  }
  while (v24 != 4);
  return v22;
}

uint64_t sub_1C97F89C4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _BYTE *a15, _BYTE *a16)
{
  int v21;
  void *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  int v48;

  v21 = 1 << a4;
  v22 = a1 + 8;
  v45 = 1 << a4 << a4;
  v23 = (char *)a1 + 2 * (1 << a4 << a4) + 64;
  v24 = *a5;
  v46 = a4 - 2;
  v25 = a1[1183] + 2824 + 8 * v46;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, char *))(v25 + 344))(a6, a7, a8, a9, a1 + 8, v23);
  v47 = v24;
  if ((v24 & 0x100) == 0)
  {
    (*(void (**)(void *))(v25 + 104))(v22);
    (*(void (**)(char *))(v25 + 104))(v23);
  }
  if (*(_BYTE *)(a1[1185] + 137) == 1)
  {
    v26 = ~((*a5 & 3) + a4) + *(unsigned __int8 *)(a1[1184] + 2113);
    v27 = v21;
    v28 = a2;
    v29 = a2;
    v30 = a14;
    v31 = sub_1C97F5FF0((uint64_t)a1, v29, a3, (uint64_t)a5, (uint64_t)v22, v27, a12, a14, a4, v26, 1);
    v32 = a3;
    v33 = a15;
    *a15 = v31;
    v44 = v26;
    v34 = a13;
    v35 = sub_1C97F5FF0((uint64_t)a1, v28, v32, (uint64_t)a5, (uint64_t)v23, v27, a13, a14, a4, v44, 2);
  }
  else
  {
    v36 = v21;
    v37 = a2;
    v38 = a2;
    v30 = a14;
    v39 = sub_1C97F7724((uint64_t)a1, v38, a3, (uint64_t)a5, (uint64_t)v22, v36, a12, a14, a4, 1, 1, 0);
    v40 = a3;
    v33 = a15;
    *a15 = v39;
    v34 = a13;
    v35 = sub_1C97F7724((uint64_t)a1, v37, v40, (uint64_t)a5, (uint64_t)v23, v36, a13, a14, a4, 2, 1, 0);
  }
  *a16 = v35;
  v48 = 0;
  if (*v33)
  {
    LOWORD(v48) = 1024;
    v41 = 1 << a4;
    sub_1C97F7DC4((uint64_t)a1, *a5, a12, v30, (uint64_t)v22, 1 << a4, a4, 1u);
  }
  else
  {
    bzero(v22, 2 * v45);
    v41 = 1 << a4;
  }
  if (*a16)
  {
    HIWORD(v48) = 1024;
    sub_1C97F7DC4((uint64_t)a1, *a5, v34, v30, (uint64_t)v23, v41, a4, 2u);
  }
  else
  {
    bzero(v23, 2 * v45);
  }
  v42 = a1[1183] + 2824;
  if ((v47 & 0x100) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, char *, _QWORD))(v42 + 8 * v46 + 280))(a10, a11, v22, v23, 0);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, char *, _QWORD, int *))(v42 + 8 * v46 + 128))(a10, a11, v22, v23, 0, &v48);
}

uint64_t sub_1C97F8D0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, int a11, unsigned int a12, _DWORD *a13)
{
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, _QWORD, int, _QWORD);
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v55;
  __int16 v57;

  v17 = a2 - *((_DWORD *)a5 + 1);
  v18 = a3 - *((_DWORD *)a5 + 2);
  v19 = *a5;
  v55 = a8;
  if (a8 == 35)
    v55 = *(unsigned __int8 *)(*((_QWORD *)a5 + 12) + 16 * (((uint64_t)v17 >> 2) + (int)(v19 >> 2) * (uint64_t)(v18 >> 2)));
  v20 = *(_QWORD *)(a1 + 9472);
  if (*(unsigned __int8 *)(v20 + 2115) < a9)
  {
    v21 = a9 - 1;
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v20 + 2116) >= a9)
  {
    if (a11)
      return 0;
    v21 = a9;
  }
  else
  {
    v21 = a9 - 1;
    if (((*(unsigned __int16 *)(*((_QWORD *)a5 + 11) + 2
                                                      * (((uint64_t)v17 >> 3) + (int)(v19 >> 3) * (uint64_t)(v18 >> 3))) >> 2) & 3) != a10)
    {
LABEL_7:
      v23 = 0;
      LODWORD(v24) = 0;
      v25 = a2;
      v51 = (1 << v21) + a2;
      v26 = a3;
      v50 = (1 << v21) + a3;
      do
      {
        v27 = *(_QWORD *)(a1 + 9472);
        v28 = a12;
        if (a9 - 2 >= *(unsigned __int8 *)(v27 + 2116))
          v28 = sub_1C97C3078(a12, v23, v51 < *(_DWORD *)(v27 + 204), v50 < *(_DWORD *)(v27 + 208));
        v24 = sub_1C97F8D0C(a1, ((v23 & 1) << v21) + v25, (v23 >> 1 << v21) + v26, a4, a5, a6, a7, v55, __PAIR64__(a10 + 1, v21), __PAIR64__(v28, v23), a13)+ v24;
        ++v23;
      }
      while (v23 != 4);
      return v24;
    }
  }
  v29 = a4[1];
  v30 = (int)a2 - (uint64_t)*((int *)a4 + 1);
  v31 = ((int)a3 - *((_DWORD *)a4 + 2)) >> 1;
  v52 = **((_QWORD **)a4 + 5) + (*((_QWORD *)a4 + 6) + v30 + v29 * v31) * *(int *)(*((_QWORD *)a4 + 5) + 16);
  v32 = &a4[8 * a6];
  v34 = *((_QWORD *)v32 + 17);
  v33 = v32 + 136;
  v35 = 2 * *(unsigned __int8 *)(*((_QWORD *)a4 + 17) + 1);
  v36 = **(_QWORD **)(v34 + 72)
      + (*(_QWORD *)(v34 + 80) + v30 + 2 * *(unsigned __int8 *)(v34 + 1) * (uint64_t)v31)
      * *(int *)(*(_QWORD *)(v34 + 72) + 16);
  v37 = *(_QWORD *)(a1 + 9488);
  if (a10 > 0 || !*(_BYTE *)(v37 + 24795))
  {
    v38 = *(unsigned int *)(a1 + 9520);
    v39 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, _QWORD, int, _QWORD))(v37 + 29784);
    v40 = *(_QWORD *)(v37 + 29792);
    v41 = (_QWORD *)(v37 + (v40 >> 1));
    if ((v40 & 1) != 0)
      v39 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, _QWORD, int, _QWORD))(*v41 + v39);
    v39(v41, a2, a3, v38, a4, a6, a7, a12, v21, *((_QWORD *)a4 + 19));
  }
  v57 = 0;
  sub_1C9708678(*(_QWORD *)(a1 + 9464) + 2280, v55, v21, *((_QWORD *)a4 + 19), v35, v36);
  v42 = *(_QWORD *)(a1 + 9488);
  *(_DWORD *)(v42 + 832) = a2;
  *(_DWORD *)(v42 + 836) = a3;
  v43 = *((_QWORD *)a4 + 12);
  v44 = ((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 2)
      + ((unint64_t)*a4 >> 2) * (((int)a3 - *((_DWORD *)a4 + 2)) >> 2);
  *(_QWORD *)(v42 + 888) = v43 + 16 * v44;
  *(_BYTE *)(v43 + 16 * v44) = *(_BYTE *)(*((_QWORD *)a5 + 12)
                                        + 16
                                        * (((uint64_t)((int)a2 - *((_DWORD *)a5 + 1)) >> 2)
                                         + ((unint64_t)*a5 >> 2) * (((int)a3 - *((_DWORD *)a5 + 2)) >> 2)));
  LODWORD(v42) = a2 - *((_DWORD *)a4 + 1);
  LODWORD(v44) = a3 - *((_DWORD *)a4 + 2);
  v45 = (__int16 *)(*((_QWORD *)a4 + 11)
                  + 2 * (((uint64_t)(int)v42 >> 3) + ((unint64_t)*a4 >> 3) * ((int)v44 >> 3)));
  v46 = ((uint64_t)(int)v42 >> 1) + *(unsigned __int8 *)(*(_QWORD *)v33 + 1) * (uint64_t)((int)v44 >> 1);
  sub_1C97F89C4((_QWORD *)a1, a2, a3, v21, v45, v52, v29, v36, v35, v36, v35, *(_QWORD *)(*(_QWORD *)v33 + 40) + 2 * v46, *(_QWORD *)(*(_QWORD *)v33 + 48) + 2 * v46, *(unsigned __int8 *)(*((_QWORD *)a4 + 17) + 1), (_BYTE *)&v57 + 1, &v57);
  v47 = 196;
  if (!*(_BYTE *)(a1 + 9504))
    v47 = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 9488) + v47))
  {
    v48 = ((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 1)
        + *(unsigned __int8 *)(*(_QWORD *)v33 + 1) * (uint64_t)(((int)a3 - *((_DWORD *)a4 + 2)) >> 1);
    v24 = sub_1C97F91AC(a1, a2, a3, a4, v36, v35, *(_QWORD *)(*(_QWORD *)v33 + 40) + 2 * v48, *(_QWORD *)(*(_QWORD *)v33 + 48) + 2 * v48, *(unsigned __int8 *)(*((_QWORD *)a4 + 17) + 1), 1 << v21, a13);
  }
  else
  {
    v24 = 0;
  }
  sub_1C982E6B8(a4, a2, a3, 1 << (v21 - 2), 1, HIBYTE(v57), a6);
  sub_1C982E6B8(a4, a2, a3, 1 << (v21 - 2), 2, v57, a6);
  return v24;
}

uint64_t sub_1C97F91AC(uint64_t a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v35 = 0;
  v36 = 0;
  v17 = *(_QWORD *)(a1 + 9496);
  (*(void (**)(uint64_t))(v17 + 568))(**((_QWORD **)a4 + 5)+ (*((_QWORD *)a4 + 6) - *((int *)a4 + 1) + a2 + a4[1] * (uint64_t)((a3 - *((_DWORD *)a4 + 2)) >> 1))* *(int *)(*((_QWORD *)a4 + 5) + 16));
  v18 = (v36 * *(unsigned __int16 *)(v17 + 162)) >> 8;
  v35 = (v35 * *(unsigned __int16 *)(v17 + 166)) >> 8;
  v36 = v18;
  v19 = (v35 + v18);
  v33 = 0;
  v34 = 0;
  v20 = a1 + 8 * ((a10 & 7) == 0);
  (*(void (**)(_QWORD, uint64_t, uint64_t, char *, char *))(v20 + 9192))(a10, a9, a7, (char *)&v34 + 4, (char *)&v33 + 4);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t *))(v20 + 9192))(a10, a9, a8, &v34, &v33);
  v21 = *(_QWORD *)(a1 + 9464);
  v22 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 16) + 2099);
  v23 = v22 + 57;
  v24 = *(_QWORD *)(v21 + 32);
  v25 = v22
      + (*(__int16 *)(*((_QWORD *)a4 + 11)
                    + 2
                    * (((uint64_t)(a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  v26 = v25 + *(char *)(v24 + 14) + *(char *)(v21 + 560);
  if (v26 >= v23)
    v27 = v23;
  else
    v27 = v25 + *(char *)(v24 + 14) + *(char *)(v21 + 560);
  if (v26 <= 0)
    v28 = 0;
  else
    v28 = v27;
  v29 = v25 + *(char *)(v24 + 15) + *(char *)(v21 + 561);
  if (v29 >= v23)
    v30 = v23;
  else
    v30 = v29;
  if (v29 <= 0)
    v31 = 0;
  else
    v31 = v30;
  *a11 = (HIDWORD(v34) * byte_1C9859CBC[v28]
        + HIDWORD(v33) * byte_1C9859CBC[v28 + 70]
        + (_DWORD)v34 * byte_1C9859CBC[v31]
        + (_DWORD)v33 * byte_1C9859CBC[v31 + 70]) << 8;
  return v19;
}

uint64_t sub_1C97F93A8(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  char v18;
  unint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;

  LODWORD(v7) = a5;
  LODWORD(v8) = a4;
  v11 = result;
  while (1)
  {
    v12 = *(unsigned __int8 **)(v11 + 9472);
    v13 = v12[272];
    if (*(_DWORD *)(v11 + 8))
      v14 = (v8 | v13) == 0;
    else
      v14 = 0;
    v15 = v14;
    v16 = *(_DWORD *)v11 - v13 - v15;
    if (v16 <= v12[2114])
      v16 = v12[2114];
    v17 = v12[2115];
    if (v16 > v17)
      v16 = v17 - v15;
    v18 = v16 < (int)v7 ? v15 : 0;
    if ((v18 & 1) == 0 && (int)v7 <= v17)
      break;
    v7 = (v7 - 1);
    v8 = (v8 + 1);
    sub_1C97F93A8(v11, a2, a3, v8, v7, a6);
    sub_1C97F93A8(v11, ((1 << v7) + a2), a3, v8, v7, a6);
    result = sub_1C97F93A8(v11, a2, ((1 << v7) + a3), v8, v7, a6);
    a2 = ((1 << v7) + a2);
    a3 = ((1 << v7) + a3);
  }
  if (a6)
  {
    v19 = (unint64_t)*a6 >> 3;
    v20 = (_WORD *)(*((_QWORD *)a6 + 11)
                  + 2
                  * (((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                   + (int)v19 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 3)));
  }
  else
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v11 + 9464) + 8);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v21 + 520) <= (int)a2
      || *(_DWORD *)(v21 + 524) <= (int)a3)
    {
      v20 = 0;
    }
    else
    {
      v20 = (_WORD *)(*(_QWORD *)(v21 + 800) + 2 * (*(_QWORD *)(v21 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    v19 = *(_QWORD *)(v21 + 768);
  }
  *v20 = *v20 & 0xFFF3 | (4 * (v8 & 3));
  if (1 << v7 >= 8)
  {
    v22 = 0;
    v23 = 2 * v19;
    v24 = v20;
    do
    {
      v25 = v24;
      v26 = (1 << v7) >> 3;
      do
      {
        *v25++ = *v20;
        --v26;
      }
      while (v26);
      ++v22;
      v24 = (_WORD *)((char *)v24 + v23);
    }
    while (v22 != (1 << v7) >> 3);
  }
  return result;
}

uint64_t sub_1C97F95A4(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  unsigned __int8 *v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  signed int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  _BOOL4 v25;
  int v27;
  uint64_t v29;
  int v31;
  __int16 v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  _WORD *v77;
  _WORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  _QWORD *v83;
  int v84;
  char v85;
  unint64_t v86;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  __int16 v93;

  v9 = a4;
  v10 = a3;
  v12 = result;
  if ((_DWORD)a8)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(result + 9464) + 8);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v13 + 520) <= (int)a2
      || *(_DWORD *)(v13 + 524) <= (int)a3)
    {
      v14 = 0;
    }
    else
    {
      v14 = (__int16 *)(*(_QWORD *)(v13 + 800) + 2 * (*(_QWORD *)(v13 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    v86 = *(_QWORD *)(v13 + 768);
  }
  else
  {
    v86 = (unint64_t)*a4 >> 3;
    v14 = (__int16 *)(*((_QWORD *)a4 + 11)
                    + 2
                    * (((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + (int)v86 * (uint64_t)(((int)a3 - *((_DWORD *)a4 + 2)) >> 3)));
  }
  v15 = *(unsigned __int8 **)(result + 9472);
  v16 = v15[272];
  if (*(_DWORD *)(result + 8))
    v17 = v16 == 0;
  else
    v17 = 0;
  v18 = v17 && a6 == 0;
  v19 = *(_DWORD *)result - v16 - v18;
  if (v19 <= v15[2114])
    v19 = v15[2114];
  v20 = v15[2115];
  if (v19 <= v20)
    v21 = v19;
  else
    v21 = v20 - v18;
  v22 = v21 < a5;
  if (v21 >= a5)
    v18 = 0;
  v23 = !v18;
  if (v20 >= a5)
    v24 = v23;
  else
    v24 = 0;
  v25 = v20 > a5 && a6 == 0;
  if (v20 == a5 || v25)
  {
    v27 = a6;
    v29 = a8;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 9496) + 8 * a5 + 480))(**((_QWORD **)a4 + 3)+ (*((_QWORD *)a4 + 4) + (int)a2 - (uint64_t)*((int *)a4 + 1) + ((int)a3 - (uint64_t)*((int *)a4 + 2))* a4[1])* *(int *)(*((_QWORD *)a4 + 3) + 16));
    v10 = a3;
    a8 = v29;
    v9 = a4;
    a6 = v27;
  }
  if (v21 < a5)
    v31 = v24;
  else
    v31 = 0;
  if (v31 != 1)
  {
    v33 = *(unsigned __int16 *)(a7 + 28);
    v34 = (_QWORD *)(v12 + 9496);
    v92 = 0;
    v89 = 0;
    v90 = 0;
    v91 = -1;
    v93 = v33;
    if (!v24)
    {
      v60 = 0;
      v61 = 0;
      if (v21 >= a5)
        goto LABEL_66;
      v81 = 0;
      v82 = 0;
      v83 = (_QWORD *)(v12 + 9496);
      v84 = 0;
      goto LABEL_57;
    }
    v35 = *(_QWORD *)(v12 + 9488);
    v36 = *(_DWORD *)v12;
    v37 = *(_DWORD *)v12 - *(unsigned __int8 *)(*(_QWORD *)(v35 + 14848) + 2115);
    v38 = v37 & ~(v37 >> 31);
    v39 = ((_BYTE)a2 - *(_DWORD *)(v12 + 9512)) & 0x1F;
    v40 = (v10 - *(_DWORD *)(v12 + 9516)) & 0x1F;
LABEL_59:
    v61 = v21 < a5;
    v60 = *(unsigned int *)(v35
                          + 4
                          * (byte_1C985A0E0[a6 - v38]
                           + (unint64_t)(v39 >> (v36 - a6))
                           + qword_1C985A0B8[a6 - v38] * (v40 >> (v36 - a6)))
                          + 408);
    v63 = *(unsigned __int16 *)(*v34 + 2 * (__int16)v33 + 152);
    if (v21 >= a5)
      v63 = 0;
    if (!v22)
      goto LABEL_66;
    v82 = v21 < a5;
    v83 = v34;
    v84 = v24;
    v81 = v60;
    v62 = (v63 >> (8 * (v33 == 0))) + v60;
    goto LABEL_63;
  }
  if (*(_BYTE *)(*(_QWORD *)(v12 + 9480) + 564) && !a6 && *(_DWORD *)(v12 + 8))
  {
    v84 = v24;
    v82 = 0;
    v32 = *(_WORD *)(a7 + 28);
    v92 = 0;
    v83 = (_QWORD *)(v12 + 9496);
    v89 = 0;
    v90 = 0;
    v80 = -1;
    v81 = 0;
    v91 = -1;
    v93 = v32;
    goto LABEL_64;
  }
  v41 = *v14 >> 9;
  v36 = *(_DWORD *)v12;
  v42 = *(_DWORD *)v12 - *(unsigned __int8 *)(*(_QWORD *)(v12 + 9472) + 2115);
  v43 = v42 & ~(v42 >> 31);
  if (v41 >= 40)
    v41 = 40;
  if (v41 <= 20)
    v41 = 20;
  v44 = v41 - 20;
  v45 = a6 + 1 - v43;
  v35 = *(_QWORD *)(v12 + 9488);
  v46 = v36 - *(unsigned __int8 *)(*(_QWORD *)(v35 + 14848) + 2115);
  v38 = v46 & ~(v46 >> 31);
  v39 = ((_BYTE)a2 - *(_DWORD *)(v12 + 9512)) & 0x1F;
  v40 = ((_BYTE)v10 - *(_DWORD *)(v12 + 9516)) & 0x1F;
  v47 = v35
      + 4
      * (byte_1C985A0E0[a6 + 1 - v38]
       + (unint64_t)(v39 >> (v36 - (a6 + 1)))
       + qword_1C985A0B8[a6 + 1 - v38] * (v40 >> (v36 - (a6 + 1))));
  v48 = v47 + 408;
  v49 = *(unsigned int *)(v47 + 408);
  v50 = *(unsigned int *)(v47 + 412);
  v51 = (unsigned int *)(v48 + 4 * qword_1C985A0B8[v45]);
  v53 = *v51;
  v52 = v51[1];
  v54 = v52 + v53 + v50 + v49;
  v55 = v50 + v49 - (v52 + v53);
  if (v55 < 0)
    v55 = v52 + v53 - (v50 + v49);
  v56 = v49 - v50;
  v57 = v56 - v53 + v52;
  if (v57 < 0)
    v57 = -v57;
  result = v55 + v57;
  v58 = v56 + v53 - v52;
  if (v58 < 0)
    v58 = -v58;
  v59 = dword_1C9859B8C[21 * a6 - 21 + 21 * *(_DWORD *)(v12 + 9520) + v44];
  v33 = *(unsigned __int16 *)(a7 + 28);
  v92 = 0;
  v34 = (_QWORD *)(v12 + 9496);
  v89 = 0;
  v90 = 0;
  v91 = -1;
  v93 = v33;
  if ((result + v58) * v59 <= (unint64_t)(v54 << 6))
  {
    v22 = 0;
    goto LABEL_59;
  }
  v83 = (_QWORD *)(v12 + 9496);
  v84 = v24;
  v82 = 0;
  v81 = 0;
LABEL_57:
  v62 = -1;
LABEL_63:
  v80 = v62;
LABEL_64:
  v64 = (a5 - 1);
  v65 = 1 << (a5 - 1);
  v66 = (v65 + a2);
  v67 = (v65 + v10);
  v68 = (a6 + 1);
  v69 = v10;
  v85 = a6;
  v70 = v9;
  sub_1C97F95A4(v12, a2, v10, v9, v64, v68, &v89, a8);
  sub_1C97F95A4(v12, v66, v69, v70, v64, v68, &v89, a8);
  sub_1C97F95A4(v12, a2, v67, v70, v64, v68, &v89, a8);
  result = sub_1C97F95A4(v12, v66, v67, v70, v64, v68, &v89, a8);
  LOBYTE(a6) = v85;
  v92 += v84;
  v71 = v92;
  v72 = *(_QWORD *)(v12 + 9496);
  v91 = ((*(unsigned __int16 *)(v72 + 2 * v93 + 152) * (unint64_t)v92) >> (8 * (v93 == 0))) + v89;
  v60 = v81;
  v34 = v83;
  v61 = v82;
  if (v91 < v80)
  {
    v73 = *(_QWORD *)a7 + v89;
    v74 = *(_QWORD *)(a7 + 8) + v90;
    *(_QWORD *)a7 = v73;
    *(_QWORD *)(a7 + 8) = v74;
    v75 = *(_DWORD *)(a7 + 24) + v71;
    *(_DWORD *)(a7 + 24) = v75;
    goto LABEL_72;
  }
LABEL_66:
  *v14 = *v14 & 0xFFF3 | (4 * (a6 & 3));
  if (1 << a5 >= 8)
  {
    v76 = 0;
    v77 = v14;
    do
    {
      v78 = v77;
      v79 = (1 << a5) >> 3;
      do
      {
        *v78++ = *v14;
        --v79;
      }
      while (v79);
      ++v76;
      v77 += v86;
    }
    while (v76 != (1 << a5) >> 3);
  }
  v72 = *v34;
  v73 = *(_QWORD *)a7 + v60;
  *(_QWORD *)a7 = v73;
  v75 = *(_DWORD *)(a7 + 24) + v61;
  *(_DWORD *)(a7 + 24) = v75;
LABEL_72:
  *(_QWORD *)(a7 + 16) = ((*(unsigned __int16 *)(v72 + 2 * *(__int16 *)(a7 + 28) + 152) * (unint64_t)v75) >> (8 * (*(_WORD *)(a7 + 28) == 0)))
                       + v73;
  return result;
}

uint64_t sub_1C97F9C34(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, uint64_t *a8, char a9)
{
  unsigned __int8 *v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t result;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  _BOOL4 v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v54;
  char v55;
  char v56;
  __int16 v58;

  v13 = *(unsigned __int8 **)(a1 + 9472);
  if (a9)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 9464) + 8);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v14 + 520) <= (int)a2
      || *(_DWORD *)(v14 + 524) <= a3)
    {
      v15 = 0;
    }
    else
    {
      v15 = (_WORD *)(*(_QWORD *)(v14 + 800) + 2 * (*(_QWORD *)(v14 + 768) * ((uint64_t)a3 >> 3) + ((int)a2 >> 3)));
    }
    v48 = *(_QWORD *)(v14 + 768);
  }
  else
  {
    v48 = (unint64_t)*a4 >> 3;
    v15 = (_WORD *)(*((_QWORD *)a4 + 11)
                  + 2
                  * (((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 3)
                   + (int)v48 * (uint64_t)((a3 - *((_DWORD *)a4 + 2)) >> 3)));
  }
  v55 = a5 - 1;
  result = (1 << a5);
  v17 = *(_DWORD *)(a1 + 8);
  v18 = v13[272];
  if (v17)
    v19 = (a6 | v18) == 0;
  else
    v19 = 0;
  v20 = v19;
  v21 = *(_DWORD *)a1 - v18 - v20;
  if (v21 <= v13[2114])
    v21 = v13[2114];
  v22 = v13[2115];
  if (v21 <= v22)
    v23 = v21;
  else
    v23 = v22 - v20;
  v24 = ((v23 >= a5) | ~v20) & ((int)v22 >= a5);
  v25 = *((__int16 *)a8 + 14);
  v58 = *((_WORD *)a8 + 14);
  v56 = a6;
  v54 = v24;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 9480) + 564) || (v24 ? (v26 = v23 < a5) : (v26 = 0), !v26))
  {
    if (!v24)
    {
      v28 = 0;
      v27 = 0;
      v52 = -1;
      goto LABEL_41;
    }
LABEL_30:
    v29 = (1 << a5);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 9496)
                                                               + 40 * *((__int16 *)a8 + 14)
                                                               + 8 * (a5 - 2)
                                                               + 176))(result, result, **((_QWORD **)a4 + 3)+ (*((_QWORD *)a4 + 4) + (int)a2 - (uint64_t)*((int *)a4 + 1) + (a3 - (uint64_t)*((int *)a4 + 2)) * a4[1])* *(int *)(*((_QWORD *)a4 + 3) + 16));
    v27 = v30;
    if (*(_BYTE *)(a1 + 9504))
      goto LABEL_38;
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2116) >= a5)
    {
      v33 = a3;
      if (a7)
      {
LABEL_38:
        result = v29;
        v28 = v23 < a5;
        v36 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 9496) + 2 * v25 + 152);
        if (v23 >= a5)
          v36 = 0;
        v52 = (v36 >> (8 * ((_DWORD)v25 == 0))) + v27;
        LOBYTE(a6) = v56;
LABEL_41:
        if (v23 >= a5)
          goto LABEL_44;
        goto LABEL_42;
      }
      v50 = v30;
      v31 = v29;
      v32 = a5 - 2;
    }
    else
    {
      v50 = v30;
      v31 = (1 << v55);
      v32 = a5 - 3;
      v33 = a3;
    }
    v34 = *(_QWORD *)(a1 + 9496);
    v35 = *((__int16 *)a8 + 14);
    v27 = v50
        + ((*(unsigned __int16 *)(v34 + 2 * (v35 > 0) + 162)
                        * (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 32 * v35 + 8 * v32 + 376))(v31, v31, **((_QWORD **)a4 + 5)+ (*((_QWORD *)a4 + 6)+ (int)a2- (uint64_t)*((int *)a4 + 1)+ a4[1] * (uint64_t)((v33 - *((_DWORD *)a4 + 2)) >> 1))* *(int *)(*((_QWORD *)a4 + 5) + 16))) >> 8);
    goto LABEL_38;
  }
  if (a6 || !v17)
    goto LABEL_30;
  v27 = 0;
  v28 = 0;
  v52 = -1;
LABEL_42:
  v46 = v28;
  v47 = result;
  v51 = v27;
  v37 = ((1 << v55) + a2);
  sub_1C97F9C34(a1, a2);
  sub_1C97F9C34(a1, v37);
  sub_1C97F9C34(a1, a2);
  sub_1C97F9C34(a1, v37);
  v28 = v46;
  result = v47;
  LOBYTE(a6) = v56;
  v38 = *(_QWORD *)(a1 + 9496);
  v27 = v51;
  if ((*(unsigned __int16 *)(v38 + 2 * v58 + 152) * (unint64_t)v54) >> (8 * (v58 == 0)) < v52)
  {
    v39 = *a8;
    v40 = a8[1];
    *a8 = *a8;
    a8[1] = v40;
    v41 = *((_DWORD *)a8 + 6) + v54;
    *((_DWORD *)a8 + 6) = v41;
    goto LABEL_50;
  }
LABEL_44:
  *v15 = *v15 & 0xFFF3 | (4 * (a6 & 3));
  if ((int)result >= 8)
  {
    v42 = 0;
    v43 = v15;
    do
    {
      v44 = v43;
      v45 = result >> 3;
      do
      {
        *v44++ = *v15;
        --v45;
      }
      while (v45);
      ++v42;
      v43 += v48;
    }
    while (v42 != result >> 3);
  }
  v38 = *(_QWORD *)(a1 + 9496);
  v39 = *a8 + v27;
  *a8 = v39;
  v41 = *((_DWORD *)a8 + 6) + v28;
  *((_DWORD *)a8 + 6) = v41;
LABEL_50:
  a8[2] = ((*(unsigned __int16 *)(v38 + 2 * *((__int16 *)a8 + 14) + 152) * (unint64_t)v41) >> (8 * (*((_WORD *)a8 + 14) == 0)))
        + v39;
  return result;
}

uint64_t sub_1C97FA19C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  __int16 *v20;
  _QWORD *v21;
  uint64_t v22;
  void (**v23)(uint64_t);
  void (**v24)(uint64_t);
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;

  v10 = (a6 - 1);
  if (*(unsigned __int8 *)(a1[1184] + 2115) < a6)
  {
    v11 = 0;
    v12 = (a4 + 1);
    do
    {
      result = sub_1C97FA19C(a1, ((v11 & 1) << v10) + (int)a2, (v11 >> 1 << v10) + a3, v12, a5, v10);
      if ((_DWORD)result)
        v14 = v11 == 3;
      else
        v14 = 1;
      ++v11;
    }
    while (!v14);
    return result;
  }
  v16 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  v17 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  v18 = (uint64_t *)*((_QWORD *)a5 + 5);
  v30 = *((_QWORD *)a5 + 6);
  v31 = *((int *)v18 + 4);
  v29 = *v18;
  v19 = *(unsigned __int8 *)(a1[1185] + 526);
  v33 = v17;
  v34 = a5[1];
  v20 = (__int16 *)(*((_QWORD *)a5 + 11)
                  + 2 * (((uint64_t)(int)v16 >> 3) + ((unint64_t)*a5 >> 3) * ((int)v17 >> 3)));
  v21 = a1 + 8;
  v22 = a1[1183] + 8 * a6;
  v23 = (void (**)(uint64_t))(v22 + 3120);
  v24 = (void (**)(uint64_t))(v22 + 2880);
  v32 = *v20;
  if ((*v20 & 0x100) != 0)
    v24 = v23;
  (*v24)(**((_QWORD **)a5 + 3) + (*((_QWORD *)a5 + 4) + v16 + a5[1] * v17) * *(int *)(*((_QWORD *)a5 + 3) + 16));
  result = sub_1C97F7724((uint64_t)a1, a2, a3, (uint64_t)v20, (uint64_t)(a1 + 8), 1 << a6, (uint64_t)(a1 + 8), 1 << a6, a6, 0, 0, 0) ^ 1;
  if (!v19 && (result & 1) == 0)
    result = sub_1C97FA4FC((uint64_t)(a1 + 8), 1 << a6, a6);
  if (a6 >= 3 && (_DWORD)result)
  {
    v25 = v29 + (v16 + v34 * (uint64_t)(v33 >> 1) + v30) * v31;
    if (v10 <= *(unsigned __int8 *)(a1[1184] + 2116))
      LODWORD(v10) = *(unsigned __int8 *)(a1[1184] + 2116);
    v26 = 1 << v10;
    v27 = a1[1183] + 2824 + 8 * ((int)v10 - 2);
    (*(void (**)(uint64_t))(v27 + 344))(v25);
    if ((v32 & 0x100) == 0)
    {
      (*(void (**)(_QWORD *))(v27 + 104))(a1 + 8);
      (*(void (**)(uint64_t))(v27 + 104))((uint64_t)v21 + 2 * (v26 << v10));
    }
    v28 = sub_1C97F7724((uint64_t)a1, a2, a3, (uint64_t)v20, (uint64_t)(a1 + 8), v26, (uint64_t)(a1 + 8), v26, v10, 1, 0, 0);
    if (v19 || !v28)
    {
      if ((v28 & 1) == 0)
        goto LABEL_23;
    }
    else if ((sub_1C97FA4FC((uint64_t)(a1 + 8), v26, v10) & 1) != 0)
    {
LABEL_23:
      result = sub_1C97F7724((uint64_t)a1, a2, a3, (uint64_t)v20, (uint64_t)v21 + 2 * (v26 << v10), v26, (uint64_t)v21 + 2 * (v26 << v10), v26, v10, 2, 0, 0) ^ 1;
      if (!v19 && (result & 1) == 0)
        return sub_1C97FA4FC((uint64_t)v21 + 2 * (v26 << v10), v26, v10);
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C97FA4FC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  BOOL v10;
  unsigned int v11;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0u;
  v7 = a3 - 2;
  while (2)
  {
    for (i = 0; i != 16; ++i)
    {
      LOWORD(v9) = *(_WORD *)(a1
                            + 2 * (*((unsigned __int8 *)*(&off_1E82928A8 + v7) + v4) >> v7) * a2
                            + 2 * (*((unsigned __int8 *)*(&off_1E82928A8 + v7) + v4) & ~(-1 << v7))
                            + 2 * byte_1C9861A40[16 * v7 + i]);
      if ((_WORD)v9)
      {
        if ((v9 & 0x8000u) != 0)
          v9 = -(__int16)v9;
        v10 = (unsigned __int16)v9 <= 1u && (unint64_t)(v3 & 0xFFFFFFF0) + i >= byte_1C9863158[v7];
        if (!v10 || (v5 += byte_1C9859C88[v6], v5 > 5))
        {
          v11 = 0;
          goto LABEL_19;
        }
        v6 = -1;
      }
      if (v6 >= 6)
        v6 = 6;
      ++v6;
    }
    ++v4;
    v3 += 16;
    if (!(v4 >> (2 * a3 - 4)))
      continue;
    break;
  }
  v11 = 1;
LABEL_19:
  if (v5 < 6)
    return v11;
  else
    return 0;
}

uint64_t sub_1C97FA600(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5)
{
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(uint64_t);
  void (**v16)(uint64_t);
  uint64_t v17;
  int v18;
  int v19;

  v9 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  v10 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  v11 = (__int16 *)(*((_QWORD *)a5 + 11) + 2
                                         * (((uint64_t)(int)v9 >> 3) + ((unint64_t)*a5 >> 3) * ((int)v10 >> 3)));
  v12 = *v11;
  v13 = **((_QWORD **)a5 + 3) + (v9 + a5[1] * v10 + *((_QWORD *)a5 + 4)) * *(int *)(*((_QWORD *)a5 + 3) + 16);
  v14 = *(_QWORD *)(a1 + 9464) + 8 * a4;
  v15 = (void (**)(uint64_t))(v14 + 3120);
  v16 = (void (**)(uint64_t))(v14 + 2880);
  if ((*v11 & 0x100) != 0)
    v16 = v15;
  (*v16)(v13);
  v17 = 3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 9480) + 212))
  {
    v18 = v12 >> 9;
    if (v18 >= 47)
      LOWORD(v18) = 47;
    *v11 = (*v11 & 0x1FF | ((_WORD)v18 << 9)) + 2048;
    v19 = sub_1C97F7724(a1, a2, a3, (uint64_t)v11, a1 + 64, 1 << a4, a1 + 64, 1 << a4, a4, 0, 0, 0);
    *v11 = v12 & 0xFE00 | *v11 & 0x1FF;
    if (v19)
      return 3;
    else
      return 0;
  }
  return v17;
}

uint64_t sub_1C97FA760(int *a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 *a5, unsigned int a6, int64x2_t *a7, int64x2_t *a8, int64x2_t *a9)
{
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  BOOL v22;
  int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;
  unsigned __int8 **v30;
  __int16 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t i;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  __int128 *v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  __int128 *v119;
  uint64_t v120;
  char *v121;
  size_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  size_t v127;
  uint64_t v128;
  char *v129;
  size_t v130;
  BOOL v131;
  char *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int64x2_t v145;
  unsigned __int32 v146;
  int64x2_t v147;
  unsigned __int32 v148;
  int64x2_t *v149;
  int64x2_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t result;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  __int16 *v158;
  __int16 *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int32 v162;
  uint64_t v163;
  unsigned __int32 v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  _BOOL4 v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  _QWORD *v199;
  _BYTE *v203;
  int v204;
  int v205;
  int v207;
  unsigned __int8 *v208;
  int v210;
  int v212;
  int v213;
  int v215;
  int64x2_t v216;
  unint64_t v217;
  unsigned int v218;
  __int16 v219;
  int64x2_t v220;
  uint64_t v221;
  int v222;
  __int16 v223;
  int64x2_t v224;
  uint64_t v225;
  int v226;
  __int16 v227;
  unsigned __int8 v228;
  __int16 v229;
  int v230;
  unint64_t v231;
  unint64_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;

  v9 = a5;
  LOBYTE(v10) = a4;
  v245 = *MEMORY[0x1E0C80C00];
  v11 = a2 - *((_DWORD *)a5 + 1);
  v12 = *((_QWORD *)a5 + 11);
  v213 = a3 - *((_DWORD *)a5 + 2);
  v13 = ((uint64_t)v11 >> 3) + ((unint64_t)*a5 >> 3) * (v213 >> 3);
  v14 = *((_QWORD *)a1 + 1186);
  v199 = *(_QWORD **)(v14 + 944);
  v15 = *a1;
  v16 = v15 - a4;
  v17 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 1183) + 16) + 2113) - (uint64_t)(int)v16;
  v18 = *((_QWORD *)a1 + 1185);
  v19 = *(unsigned __int8 *)(v18 + 204);
  v203 = a1 + 2376;
  v189 = *((unsigned __int8 *)a1 + 9504);
  v197 = *(unsigned __int8 *)(v18 + 205);
  v229 = 0;
  v228 = 0;
  v226 = 0;
  v224 = 0uLL;
  v225 = -1;
  v227 = 0;
  v222 = 0;
  v220 = 0uLL;
  v221 = -1;
  v223 = 0;
  v218 = 0;
  v216 = 0uLL;
  v217 = -1;
  v219 = 0;
  v20 = (unsigned __int8 *)*((_QWORD *)a1 + 1184);
  v21 = v20[272];
  if (a1[2])
    v22 = v21 == 0;
  else
    v22 = 0;
  v24 = v22 && a4 == 0;
  v25 = v15 - v21 - v24;
  if (v25 <= v20[2114])
    v25 = v20[2114];
  v26 = v20[2115];
  v27 = v26 - v24;
  if (v25 <= v26)
    v27 = v25;
  if (v27 < (int)v16)
    v28 = v24;
  else
    v28 = 0;
  if ((int)v16 > v26)
    v29 = 1;
  else
    v29 = v28;
  v194 = v20[2113] - v26;
  if ((int)v17 <= v194 || (_DWORD)v17 == a1[2380])
  {
    v30 = (unsigned __int8 **)(a5 + 136);
    v207 = v11;
  }
  else
  {
    v207 = 0;
    v213 = 0;
    v30 = (unsigned __int8 **)(v14 + 32 * v17 + 8 * a6 + 248);
  }
  v195 = v17;
  v31 = (__int16 *)(v12 + 2 * v13);
  v208 = *v30;
  v193 = v27;
  v204 = v19;
  v205 = v16;
  if (v27 >= (int)v16)
  {
    v43 = 0;
    v38 = (uint64_t)a1;
  }
  else
  {
    v32 = 1 << (v16 - 1);
    v33 = v32 + a2;
    v34 = (v32 + a3);
    v35 = (a4 + 1);
    v36 = sub_1C97FA760(a1, a2, a3, v35, a5, 0, &v216, &v224, &v220);
    v37 = v36 | sub_1C97FA760(a1, v33, a3, v35, a5, 1, &v216, &v224, &v220);
    LOBYTE(v36) = sub_1C97FA760(a1, a2, v34, v35, a5, 2, &v216, &v224, &v220);
    v38 = (uint64_t)a1;
    v9 = a5;
    v39 = v37 | v36 | sub_1C97FA760(a1, v33, v34, v35, a5, 3, &v216, &v224, &v220);
    if ((v29 & 1) == 0)
    {
      v40 = ((unsigned __int8 *)v199 - (int)v16)[84];
      if ((v40 & 1) != 0)
        v41 = v199[2] - byte_1C98326D3[(v199[2] & 0xC0) + (v40 >> 1)];
      else
        v41 = byte_1C98326D3[(v199[2] & 0xC0) + (v40 >> 1)];
      v42 = __clz(v41);
      v218 += v199[2] - (v41 << (v42 - 55)) + ((v42 - 55) << 8);
      v217 = ((*(unsigned __int16 *)(*((_QWORD *)a1 + 1187) + 2 * v219 + 152) * (unint64_t)v218) >> (8 * (v219 == 0)))
           + v216.i64[0];
    }
    v19 = v204;
    LOBYTE(v10) = a4;
    if ((v39 & 1) != 0)
    {
      v43 = 1;
    }
    else
    {
      v61 = *((_QWORD *)a1 + 1184);
      v43 = *(unsigned __int8 *)(v61 + 272);
      if (*(_BYTE *)(v61 + 272))
      {
        v43 = 0;
        if ((int)v16 <= *(unsigned __int8 *)(v61 + 2115))
        {
          v218 = 0;
          v216 = 0uLL;
          v217 = -1;
          v219 = 0;
        }
      }
    }
  }
  v196 = v43;
  if ((v29 & 1) != 0)
  {
    if (v217 == -1)
    {
      LODWORD(v44) = 0;
      LODWORD(v45) = 0;
      LODWORD(v46) = 0;
      v47 = 0;
      v198 = 0;
      v48 = 0;
      v49 = 1 << v16;
      goto LABEL_155;
    }
LABEL_146:
    if (v195 >= v194)
    {
      v136 = *(_QWORD *)(v38 + 9488);
      v137 = (_QWORD *)(v136 + 32 * v195);
      v138 = v137[35];
      v139 = v137[36];
      v141 = v137[37];
      v140 = v137[38];
      v215 = v16 - 1;
      v142 = (1 << (v16 - 1));
      sub_1C97C2920(*(uint64_t (**)(uint64_t, uint64_t))(v136 + 29752), (void **)v208, (const void **)v138, v207, v213, 0, 0, v142);
      sub_1C97C2920(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752), (void **)v208, (const void **)v139, v207 + v142, v213, 0, 0, v142);
      v143 = v213 + v142;
      sub_1C97C2920(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752), (void **)v208, (const void **)v141, v207, v213 + v142, 0, 0, v142);
      sub_1C97C2920(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752), (void **)v208, (const void **)v140, v207 + v142, v213 + v142, 0, 0, v142);
      if (!*v203)
      {
        sub_1C97C2AFC(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752), (void **)v208, (const void **)v138, v207, v213, 0, 0, *(unsigned __int8 *)(v138 + 1));
        if (v215 > *(unsigned __int8 *)(*(_QWORD *)(v38 + 9472) + 2116))
        {
          sub_1C97C2AFC(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752), (void **)v208, (const void **)v139, v207 + v142, v213, 0, 0, *(unsigned __int8 *)(v139 + 1));
          sub_1C97C2AFC(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752), (void **)v208, (const void **)v141, v207, v143, 0, 0, *(unsigned __int8 *)(v141 + 1));
          sub_1C97C2AFC(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752), (void **)v208, (const void **)v140, v207 + v142, v143, 0, 0, *(unsigned __int8 *)(v140 + 1));
        }
      }
    }
    v144 = *(_QWORD *)(v38 + 9496);
    v145 = vaddq_s64(*a7, v216);
    *a7 = v145;
    v146 = a7[1].i32[2] + v218;
    a7[1].i32[2] = v146;
    a7[1].i64[0] = ((*(unsigned __int16 *)(v144 + 152 + 2 * a7[1].i16[6]) * (unint64_t)v146) >> (8 * (a7[1].i16[6] == 0)))
                 + v145.i64[0];
    v147 = vaddq_s64(*a9, v220);
    *a9 = v147;
    v148 = a9[1].i32[2] + v222;
    a9[1].i32[2] = v148;
    a9[1].i64[0] = ((*(unsigned __int16 *)(v144 + 152 + 2 * a9[1].i16[6]) * (unint64_t)v148) >> (8 * (a9[1].i16[6] == 0)))
                 + v147.i64[0];
    v149 = a8;
    v150 = vaddq_s64(*a8, v224);
    *a8 = v150;
    v151 = a8[1].i32[2] + v226;
    a8[1].i32[2] = v151;
    v152 = v150.i64[0];
    result = v196;
    goto LABEL_165;
  }
  for (i = 0; i != 96; i += 32)
  {
    v51 = (char *)&v239 + i;
    *((_DWORD *)v51 + 6) = 0;
    *(_QWORD *)v51 = 0;
    *((_QWORD *)v51 + 1) = 0;
    *((_QWORD *)v51 + 2) = -1;
    *((_WORD *)v51 + 14) = 0;
    v52 = (char *)&v233 + i;
    *((_DWORD *)v52 + 6) = 0;
    *(_QWORD *)v52 = 0;
    *((_QWORD *)v52 + 1) = 0;
    *((_QWORD *)v52 + 2) = -1;
    *((_WORD *)v52 + 14) = 0;
  }
  v53 = v16;
  v54 = (1 << v16);
  v55 = v9[1];
  v56 = ((int)a3 - (uint64_t)*((int *)v9 + 2)) * v55 - *((int *)v9 + 1) + (int)a2;
  v184 = **((_QWORD **)v9 + 3) + (v56 + *((_QWORD *)v9 + 4)) * *(int *)(*((_QWORD *)v9 + 3) + 16);
  v57 = **((_QWORD **)v9 + 7) + (v56 + *((_QWORD *)v9 + 8)) * *(int *)(*((_QWORD *)v9 + 7) + 16);
  v58 = v207 + *v208 * (uint64_t)v213;
  v179 = *((_QWORD *)v208 + 4) + 2 * v58;
  v186 = *v208;
  v182 = **((_QWORD **)v208 + 7) + (v58 + *((_QWORD *)v208 + 8)) * *(int *)(*((_QWORD *)v208 + 7) + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752))(v54, v54, v55, v57);
  if (v19)
  {
    v59 = v53 - 2;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 + 9496)
                                                                                          + 8 * (v53 - 2)
                                                                                          + 176))(v54, v54, v184, v55, v57, v55);
    DWORD2(v234) = 0;
    *(_QWORD *)&v233 = v60;
    *(_QWORD *)&v234 = v60;
    v175 = v53 - 2;
  }
  else
  {
    v175 = v53 - 2;
    v59 = (int)v53 - 2;
  }
  v62 = *(_QWORD *)(v38 + 9488);
  *(_DWORD *)(v62 + 832) = a2;
  *(_DWORD *)(v62 + 836) = a3;
  *(_QWORD *)(v62 + 888) = *((_QWORD *)v9 + 12)
                         + 16
                         * (((uint64_t)(int)(a2 - *((_DWORD *)v9 + 1)) >> 2)
                          + ((unint64_t)*v9 >> 2) * (((int)a3 - *((_DWORD *)v9 + 2)) >> 2));
  *(_QWORD *)(v62 + 880) = v31;
  sub_1C97F5D34(v38, a2, a3, v31, v184, v55, v57, v55, v182, v186, v179, v186, v53, (_BYTE *)&v229 + 1, v197 == 0, 0);
  v63 = *(_QWORD *)(v38 + 9496);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8 * v59 + 176);
  v65 = *(_QWORD *)(v38 + 9488);
  *(_DWORD *)(v65 + 832) = a2;
  *(_DWORD *)(v65 + 836) = a3;
  *(_QWORD *)(v65 + 840) = v186;
  v181 = v54;
  v173 = v59;
  if (!HIBYTE(v229))
  {
    if (!v204)
    {
      if (v197)
      {
        *(_DWORD *)(v38 + 9120) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v63 + 16))(v54, v54, v38 + 64, (int)v54);
        v67 = (*(uint64_t (**)(void))(v38 + 8 * v205 + 9216))();
        *(_DWORD *)(v38 + 9120) = v67;
      }
      else
      {
        v67 = v64(v54, v54, v184, v55, v182, v186);
      }
      v46 = 0;
      v185 = 0;
      DWORD2(v234) = 0;
      *(_QWORD *)&v233 = v67;
      *(_QWORD *)&v234 = v67;
      v239 = v233;
      v240 = v234;
      goto LABEL_64;
    }
LABEL_59:
    v46 = 0;
    v185 = 0;
LABEL_64:
    v187 = 1;
    goto LABEL_65;
  }
  if (v197)
    v66 = *(_DWORD *)(v38 + 9120);
  else
    v66 = v64(v54, v54, v184, v55, v182, v186);
  v68 = v66;
  *(_QWORD *)&v239 = v66;
  if (*(_BYTE *)(*(_QWORD *)(v38 + 9480) + 228))
  {
    v69 = 0;
    LODWORD(v231) = 0;
    v230 = 0;
    if (!*(_BYTE *)(*(_QWORD *)(v38 + 9488) + 196))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, int *))(v38
                                                                                   + 8 * (v205 > 2)
                                                                                   + 9192))(v54, v186, v179, &v231, &v230);
      v70 = &byte_1C9859DD4[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v38 + 9464) + 16) + 2097)
                          + (uint64_t)(*(__int16 *)(*((_QWORD *)a5 + 11)
                                                 + 2
                                                 * (((uint64_t)(int)(a2 - *((_DWORD *)a5 + 1)) >> 3)
                                                  + ((unint64_t)*a5 >> 3)
                                                  * (((int)a3 - *((_DWORD *)a5 + 2)) >> 3))) >> 9)];
      v69 = ((((_DWORD)v231 * *v70 + v230 * v70[70]) << 6) + 128) & 0xFFFFFF00;
    }
    DWORD2(v240) = v69;
  }
  else
  {
    v71 = v199;
    (*(void (**)(_QWORD *))(*v199 + 88))(v199);
    *(_QWORD *)(*(_QWORD *)(v38 + 9488) + 896) = v179;
    sub_1C97F4534(v38, a2, a3, v205, 0, 0);
    v69 = (*(uint64_t (**)(_QWORD *))(*v71 + 80))(v71);
    DWORD2(v240) = v69;
    (*(void (**)(_QWORD *))(*v71 + 96))(v71);
  }
  v72 = ((*(unsigned __int16 *)(*(_QWORD *)(v38 + 9496) + 2 * SWORD6(v240) + 152) * (unint64_t)v69) >> (8 * (WORD6(v240) == 0)))
      + v68;
  *(_QWORD *)&v240 = v72;
  if (v204 && (unint64_t)v234 < v72)
  {
    HIBYTE(v229) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 + 9488) + 29752))(v54, v54, v55, v57, v186, v182);
    goto LABEL_59;
  }
  v187 = 0;
  v185 = v197 != 0;
  v46 = 1;
LABEL_65:
  v73 = v239;
  v74 = v233;
  v75 = DWORD2(v240);
  v76 = DWORD2(v234);
  v77 = (unint64_t)*v208 >> 2;
  v78 = (char *)(*((_QWORD *)v208 + 1) + ((uint64_t)v207 >> 2) + (int)v77 * (uint64_t)(v213 >> 2));
  v79 = 1 << v175;
  do
  {
    --v79;
    memset(v78, v46, 1 << v175);
    v78 += v77;
  }
  while (v79);
  v80 = v187 == 0;
  if (v187)
    v81 = v74;
  else
    v81 = v73;
  v188 = v81;
  if (v80)
    v82 = v75;
  else
    v82 = v76;
  v198 = v82;
  v83 = v189 != 0;
  if (*v203)
  {
    v44 = 0;
    v45 = 0;
LABEL_127:
    LODWORD(v16) = v205;
    v38 = (uint64_t)a1;
    v10 = a4;
    v84 = (char *)v199;
    v49 = v181;
    goto LABEL_128;
  }
  LODWORD(v16) = v205;
  v38 = (uint64_t)a1;
  v10 = a4;
  v84 = (char *)v199;
  v49 = v181;
  if (v205 > *(unsigned __int8 *)(*((_QWORD *)a1 + 1184) + 2116))
  {
    if (v189)
    {
      v44 = 0;
      v45 = 0;
      v83 = 1;
      goto LABEL_128;
    }
    v183 = v205 - 1;
LABEL_85:
    v86 = a5[1];
    v87 = v208[1];
    v88 = 2 * v87;
    v89 = v86 * (((int)a3 - *((_DWORD *)a5 + 2)) >> 1) - *((int *)a5 + 1) + (int)a2;
    v190 = **((_QWORD **)a5 + 5) + (v89 + *((_QWORD *)a5 + 6)) * *(int *)(*((_QWORD *)a5 + 5) + 16);
    v90 = **((_QWORD **)a5 + 9) + (v89 + *((_QWORD *)a5 + 10)) * *(int *)(*((_QWORD *)a5 + 9) + 16);
    v91 = **((_QWORD **)v208 + 9)
        + (v207 + 2 * (int)v87 * (uint64_t)(v213 >> 1) + *((_QWORD *)v208 + 10)) * *(int *)(*((_QWORD *)v208 + 9) + 16);
    v92 = ((uint64_t)v207 >> 1) + v87 * (v213 >> 1);
    v178 = *((_QWORD *)v208 + 5) + 2 * v92;
    v93 = *((_QWORD *)v208 + 6) + 2 * v92;
    v170 = 2 << v183;
    v180 = 1 << v183;
    (*(void (**)(void))(*((_QWORD *)a1 + 1186) + 29752))();
    v172 = v93;
    v176 = v91;
    v174 = v87;
    if (v204)
    {
      v94 = *((_QWORD *)a1 + 1187);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, __int128 *))(v94 + 568))(v190, v86, v90, v86, v180, v180, &v235, &v237);
      *(_QWORD *)&v235 = ((unint64_t)v235 * *(unsigned __int16 *)(v94 + 162)) >> 8;
      v95 = *(unsigned __int16 *)(v94 + 166);
      v88 = 2 * v87;
      *(_QWORD *)&v237 = (unint64_t)(v237 * v95) >> 8;
      DWORD2(v236) = 0;
      DWORD2(v238) = 0;
    }
    v96 = *((_QWORD *)a1 + 1186);
    *(_DWORD *)(v96 + 832) = a2;
    *(_DWORD *)(v96 + 836) = a3;
    *(_QWORD *)(v96 + 888) = *((_QWORD *)a5 + 12)
                           + 16
                           * (((uint64_t)(int)(a2 - *((_DWORD *)a5 + 1)) >> 2)
                            + ((unint64_t)*a5 >> 2) * (((int)a3 - *((_DWORD *)a5 + 2)) >> 2));
    v167 = v91;
    v97 = v190;
    v171 = v86;
    sub_1C97F89C4(a1, a2, a3, v183, v31, v190, v86, v90, v86, v167, v88, v178, v93, v87, &v229, &v228);
    *(_QWORD *)(*((_QWORD *)a1 + 1186) + 848) = v87;
    v98 = v229;
    v99 = v228;
    if (!(_BYTE)v229 && !v228 && v204)
    {
      v44 = 0;
      v45 = 0;
LABEL_91:
      v100 = &v233;
LABEL_92:
      v101 = v183;
LABEL_115:
      v119 = &v241;
      if (!(_DWORD)v45)
        v119 = &v235;
      v120 = *(_QWORD *)v119;
      v121 = (char *)&v242 + 8;
      if (!(_DWORD)v45)
        v121 = (char *)&v236 + 8;
      v212 = *(_DWORD *)v121;
      v192 = *((_QWORD *)v100 + 8);
      v210 = *((_DWORD *)v100 + 22);
      v122 = (1 << (v101 - 2));
      v123 = v208[1];
      if (v123 < 4)
        v124 = 1;
      else
        v124 = v123 >> 2;
      v125 = (uint64_t)v207 >> 3;
      v126 = (char *)(*((_QWORD *)v208 + 2) + v125 + (int)(v123 >> 2) * (uint64_t)(v213 >> 3));
      v127 = v122;
      do
      {
        --v127;
        memset(v126, v45, v122);
        v126 += v124;
      }
      while (v127);
      v128 = v120 + v188;
      v129 = (char *)(*((_QWORD *)v208 + 3) + v125 + ((unint64_t)v208[1] >> 2) * (v213 >> 3));
      v130 = v122;
      do
      {
        --v130;
        memset(v129, v44, v122);
        v129 += v124;
      }
      while (v130);
      v83 = 0;
      v188 = v128 + v192;
      v198 += v212 + v210;
      goto LABEL_127;
    }
    v169 = v90;
    v102 = *((_QWORD *)a1 + 1187);
    v191 = v88;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t *, unint64_t *))(v102 + 568))(v97, v171, v176, v88, v180, v180, &v231, &v232);
    v103 = (v231 * *(unsigned __int16 *)(v102 + 162)) >> 8;
    v104 = (v232 * *(unsigned __int16 *)(v102 + 166)) >> 8;
    v231 = v103;
    v232 = v104;
    if (v98)
    {
      *(_QWORD *)&v241 = v103;
      v105 = a1;
      v168 = v99;
      v106 = v180;
      if (*(_BYTE *)(*((_QWORD *)a1 + 1185) + 228))
      {
        v107 = sub_1C97FBDC0((uint64_t)a1, a2, a3, a5, 0, v178, v174, v180);
        DWORD2(v242) = v107;
        v108 = v204;
        v109 = v199;
      }
      else
      {
        v109 = v199;
        (*(void (**)(_QWORD *))(*v199 + 88))(v199);
        *(_QWORD *)(*((_QWORD *)a1 + 1186) + 904) = v178;
        sub_1C97F4534((uint64_t)a1, a2, a3, v183, 0, 1);
        v107 = (*(uint64_t (**)(_QWORD *))(*v109 + 80))(v109);
        DWORD2(v242) = v107;
        (*(void (**)(_QWORD *))(*v109 + 96))(v109);
        v108 = v204;
      }
      v111 = *((_QWORD *)a1 + 1187) + 152;
      v112 = ((*(unsigned __int16 *)(v111 + 2 * SWORD6(v242)) * (unint64_t)v107) >> (8 * (WORD6(v242) == 0)))
           + v103;
      *(_QWORD *)&v242 = v112;
      v113 = ((*(unsigned __int16 *)(v111 + 2 * SWORD6(v236)) * (unint64_t)DWORD2(v236)) >> (8 * (WORD6(v236) == 0)))
           + v235;
      *(_QWORD *)&v236 = v113;
      v45 = 1;
      if (v108)
      {
        v110 = v174;
        if (v113 < v112)
        {
          LOBYTE(v229) = 0;
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)a1 + 1186) + 29760))(v170, v180, v171, v169, v191, v176);
          v45 = 0;
        }
      }
      else
      {
        v110 = v174;
      }
      if (v168)
      {
        v104 = v232;
        goto LABEL_106;
      }
      v101 = v183;
      if (v108)
        goto LABEL_114;
      v104 = v232;
    }
    else
    {
      v108 = v204;
      if (v204)
      {
        v44 = 0;
        v105 = a1;
        v109 = v199;
        v106 = v180;
        if (!v99)
        {
          v100 = &v233;
          v45 = 0;
          goto LABEL_92;
        }
        v45 = 0;
        v110 = v174;
        goto LABEL_106;
      }
      v106 = v180;
      v166 = v99;
      v45 = 0;
      *(_QWORD *)&v235 = v103;
      DWORD2(v236) = 0;
      v241 = v235;
      v242 = v236;
      v105 = a1;
      v109 = v199;
      v110 = v174;
      if (v166)
      {
LABEL_106:
        *(_QWORD *)&v243 = v104;
        if (*(_BYTE *)(v105[1185] + 228))
        {
          v114 = sub_1C97FBDC0((uint64_t)v105, a2, a3, a5, 1, v172, v110, v106);
          DWORD2(v244) = v114;
        }
        else
        {
          (*(void (**)(_QWORD *))(*v109 + 88))(v109);
          *(_QWORD *)(v105[1186] + 912) = v172;
          sub_1C97F4534((uint64_t)v105, a2, a3, v183, 0, 2);
          v114 = (*(uint64_t (**)(_QWORD *))(*v109 + 80))(v109);
          DWORD2(v244) = v114;
          (*(void (**)(_QWORD *))(*v109 + 96))(v109);
        }
        v115 = v105[1187] + 152;
        v116 = ((*(unsigned __int16 *)(v115 + 2 * SWORD6(v244)) * (unint64_t)v114) >> (8 * (WORD6(v244) == 0)))
             + v104;
        *(_QWORD *)&v244 = v116;
        v117 = ((*(unsigned __int16 *)(v115 + 2 * SWORD6(v238)) * (unint64_t)DWORD2(v238)) >> (8 * (WORD6(v238) == 0)))
             + v237;
        *(_QWORD *)&v238 = v117;
        v44 = 1;
        v100 = &v239;
        if (!v108)
          goto LABEL_92;
        v101 = v183;
        if (v117 >= v116)
          goto LABEL_115;
        v228 = 0;
        v118 = a2 - *((_DWORD *)a5 + 1) + 1;
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v105[1186] + 29760))(v170, v106, v171, **((_QWORD **)a5 + 9)+ (*((_QWORD *)a5 + 10) + v118 + a5[1] * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*((_QWORD *)a5 + 9) + 16), v191, **(_QWORD **)(*((_QWORD *)a5 + 17) + 72)+ (*(_QWORD *)(*((_QWORD *)a5 + 17) + 80)+ v118+ 2 * *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 72) + 16));
LABEL_114:
        v44 = 0;
        v100 = &v233;
        goto LABEL_115;
      }
    }
    v44 = 0;
    *(_QWORD *)&v237 = v104;
    DWORD2(v238) = 0;
    v243 = v237;
    v244 = v238;
    goto LABEL_91;
  }
  v44 = 0;
  if (a6)
    v85 = 0;
  else
    v85 = v205;
  v183 = v85;
  v83 = 1;
  v45 = 0;
  if (!a6 && !v189)
    goto LABEL_85;
LABEL_128:
  (*(void (**)(char *))(*(_QWORD *)v84 + 88))(v84);
  if (v45 | v44)
    v131 = *v203 == 0;
  else
    v131 = 0;
  if (v131 || v10 != 0)
  {
    v133 = v84 + 1;
    if (v10)
      v133 = v84;
    (**(void (***)(char *, uint64_t, char *))v84)(v84, v46, v133 + 82);
  }
  if (!v83)
  {
    if ((int)v16 <= 2)
      v134 = 0;
    else
      v134 = v10;
    v135 = (uint64_t)&v84[v134 + 84];
    (**(void (***)(char *, uint64_t, uint64_t))v84)(v84, v45, v135);
    (**(void (***)(char *, uint64_t, uint64_t))v84)(v84, v44, v135);
  }
  if (v193 < (int)v16)
    (**(void (***)(char *, _QWORD, uint64_t))v84)(v84, 0, (uint64_t)&v84[-(int)v16 + 84]);
  v48 = (*(uint64_t (**)(char *))(*(_QWORD *)v84 + 80))(v84) + v198;
  (*(void (**)(char *))(*(_QWORD *)v84 + 96))(v84);
  v47 = v188;
  if (v188 + ((*(unsigned __int16 *)(*(_QWORD *)(v38 + 9496) + 152) * (unint64_t)v48) >> 8) > v217)
    goto LABEL_146;
  if (v185)
  {
    v154 = **((_QWORD **)v208 + 7)
         + (*((_QWORD *)v208 + 8) + v207 + *v208 * (uint64_t)v213) * *(int *)(*((_QWORD *)v208 + 7) + 16);
    v155 = *(_QWORD *)(v38 + 9464) + 2824;
    if ((*v31 & 0x100) != 0)
      (*(void (**)(uint64_t))(v155 + 8 * v173 + 248))(v154);
    else
      (*(void (**)(uint64_t))(v155 + 16 * v173))(v154);
  }
LABEL_155:
  *v31 = *v31 & 0xFFF3 | (4 * (v10 & 3));
  result = (v46 | v45 | v44) != 0;
  if (v49 >= 8)
  {
    v156 = 0;
    v157 = 2 * ((unint64_t)*a5 >> 3);
    v158 = v31;
    do
    {
      v159 = v158;
      v160 = v49 >> 3;
      do
      {
        *v159++ = *v31;
        --v160;
      }
      while (v160);
      ++v156;
      v158 = (__int16 *)((char *)v158 + v157);
    }
    while (v156 != v49 >> 3);
  }
  v144 = *(_QWORD *)(v38 + 9496);
  v161 = a7->i64[0] + v47;
  a7->i64[0] = v161;
  v162 = a7[1].i32[2] + v48;
  a7[1].i32[2] = v162;
  a7[1].i64[0] = ((*(unsigned __int16 *)(v144 + 152 + 2 * a7[1].i16[6]) * (unint64_t)v162) >> (8 * (a7[1].i16[6] == 0)))
               + v161;
  v163 = a8->i64[0] + v47;
  a8->i64[0] = v163;
  v164 = a8[1].i32[2] + v198;
  a8[1].i32[2] = v164;
  a8[1].i64[0] = ((*(unsigned __int16 *)(v144 + 152 + 2 * a8[1].i16[6]) * (unint64_t)v164) >> (8 * (a8[1].i16[6] == 0)))
               + v163;
  if (a9 && v204)
  {
    v152 = a9->i64[0] + v233;
    a9->i64[0] = v152;
    v151 = a9[1].i32[2] + DWORD2(v234);
    a9[1].i32[2] = v151;
    if (!*v203)
    {
      v165 = DWORD2(v236);
      v152 += v237 + v235;
      a9->i64[0] = v152;
      v151 += DWORD2(v238) + v165;
      a9[1].i32[2] = v151;
    }
    v149 = a9;
LABEL_165:
    v149[1].i64[0] = ((*(unsigned __int16 *)(v144 + 2 * v149[1].i16[6] + 152) * (unint64_t)v151) >> (8 * (v149[1].i16[6] == 0)))
                   + v152;
  }
  return result;
}

uint64_t sub_1C97FBDC0(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;

  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(a1 + 8 * ((a8 & 7) == 0) + 9192))(a8, a7, a6, (char *)&v20 + 4, &v20);
  v13 = *(_QWORD *)(a1 + 9464);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 16) + 2099);
  v15 = 560;
  v16 = 14;
  if (a5)
  {
    v16 = 15;
    v15 = 561;
  }
  v17 = *(char *)(v13 + v15)
      + *(char *)(*(_QWORD *)(v13 + 32) + v16)
      + v14
      + (*(__int16 *)(*((_QWORD *)a4 + 11)
                    + 2
                    * (((uint64_t)(a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  if (v17 >= v14 + 57)
    v18 = v14 + 57;
  else
    v18 = v17;
  if (v17 <= 0)
    v18 = 0;
  return (((HIDWORD(v20) * byte_1C9859DD4[v18 + 140] + (_DWORD)v20 * byte_1C9859DD4[v18 + 210]) << 6) + 128) & 0xFFFFFF00;
}

uint64_t sub_1C97FBED4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6)
{
  uint64_t v7;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  unint64_t v40;
  __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v72;
  __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  __int16 v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD v86[2];
  unint64_t v87;
  unsigned int v88;
  __int16 v89;
  _QWORD v90[2];
  unint64_t v91;
  unsigned int v92;
  __int16 v93;
  uint64_t v94;

  LODWORD(v7) = a4;
  v11 = 0;
  v94 = *MEMORY[0x1E0C80C00];
  v12 = -a4;
  while (1)
  {
    v13 = *(_DWORD *)a1;
    v14 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    v15 = a3 - *((_DWORD *)a5 + 2);
    v16 = *((_QWORD *)a5 + 11);
    v17 = *a5;
    v18 = ((uint64_t)(int)v14 >> 3) + (int)(v17 >> 3) * (uint64_t)(v15 >> 3);
    if ((int)v7 >= ((*(unsigned __int16 *)(v16 + 2 * v18) >> 2) & 3))
      break;
    v19 = 1 << (--v12 + v13);
    v20 = (v19 + a2);
    v21 = (v19 + a3);
    v7 = (v7 + 1);
    v22 = sub_1C97FBED4(a1, a2, a3, v7, a5, 0);
    v23 = v22 | sub_1C97FBED4(a1, v20, a3, v7, a5, 1);
    v11 |= sub_1C97FBED4(a1, a2, v21, v7, a5, 2) | v23;
    a6 = 3;
    a2 = v20;
    a3 = v21;
  }
  v82 = v12 + v13;
  v24 = *(unsigned __int8 *)(a1[1185] + 204);
  v83 = 0;
  v25 = a1[1186];
  v80 = *(_QWORD *)(v25 + 944);
  v88 = 0;
  v86[0] = 0;
  v86[1] = 0;
  v87 = -1;
  v89 = 0;
  v92 = 0;
  v90[0] = 0;
  v90[1] = 0;
  v91 = -1;
  v93 = 0;
  v26 = a5[1];
  v27 = *((_QWORD *)a5 + 17);
  v28 = *(unsigned __int8 *)(v27 + 1);
  v29 = 2 * v28;
  if (v24)
    v30 = a5[1];
  else
    v30 = 2 * v28;
  v31 = (uint64_t *)*((_QWORD *)a5 + 5);
  v32 = v14 + a5[1] * (uint64_t)(v15 >> 1);
  v33 = **(_QWORD **)(v27 + 72)
      + (v14 + (int)v29 * (uint64_t)(v15 >> 1) + *(_QWORD *)(v27 + 80)) * *(int *)(*(_QWORD *)(v27 + 72) + 16);
  v34 = v33;
  if (v24)
    v34 = **((_QWORD **)a5 + 9) + (v32 + *((_QWORD *)a5 + 10)) * *(int *)(*((_QWORD *)a5 + 9) + 16);
  v35 = *((int *)v31 + 4);
  v36 = *v31;
  v38 = *(_QWORD *)(v27 + 40);
  v37 = *(_QWORD *)(v27 + 48);
  if (v82 > *(unsigned __int8 *)(a1[1184] + 2116))
  {
    --v82;
    goto LABEL_13;
  }
  if (!a6)
  {
LABEL_13:
    v79 = v11;
    v40 = v32 + *((_QWORD *)a5 + 6);
    v41 = (__int16 *)(v16 + 2 * v18);
    v42 = v36 + v40 * v35;
    v43 = (int)v28 * (uint64_t)(v15 >> 1) + ((int)v14 >> 1);
    v44 = v38 + 2 * v43;
    v45 = v37 + 2 * v43;
    v76 = v24;
    v77 = v33;
    v81 = 2 * v28;
    v78 = 1 << v82;
    if (v24)
    {
      v73 = v41;
      v74 = v28;
      v46 = a1[1187];
      v47 = v36 + v40 * v35;
      v48 = v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, _QWORD *))(v46 + 568))(v47, v26, v34, v26, (1 << v82), (1 << v82), v86, v90);
      v44 = v48;
      v42 = v47;
      v33 = v77;
      v41 = v73;
      v28 = v74;
      v14 = v86[0] * *(unsigned __int16 *)(v46 + 162);
      v49 = *(unsigned __int16 *)(v46 + 166);
      v29 = v81;
      v50 = v90[0] * v49;
      v86[0] = v14 >> 8;
      v90[0] = (unint64_t)(v90[0] * v49) >> 8;
      v17 = a1[1187] + 152;
      v87 = ((*(unsigned __int16 *)(v17 + 2 * v89) * (unint64_t)v88) >> (8 * (v89 == 0))) + (v14 >> 8);
      v91 = ((*(unsigned __int16 *)(v17 + 2 * v93) * (unint64_t)v92) >> (8 * (v93 == 0))) + (v50 >> 8);
      v25 = a1[1186];
      LODWORD(v17) = *a5;
      LODWORD(v14) = a2 - *((_DWORD *)a5 + 1);
      v15 = a3 - *((_DWORD *)a5 + 2);
    }
    *(_DWORD *)(v25 + 832) = a2;
    *(_DWORD *)(v25 + 836) = a3;
    *(_QWORD *)(v25 + 888) = *((_QWORD *)a5 + 12)
                           + 16 * (((uint64_t)(int)v14 >> 2) + (v17 >> 2) * (uint64_t)(v15 >> 2));
    v72 = v30;
    v75 = v30;
    v51 = v33;
    sub_1C97F89C4(a1, a2, a3, v82, v41, v42, v26, v34, v72, v33, v29, v44, v45, v28, (_BYTE *)&v83 + 1, &v83);
    sub_1C97C6D7C(a1[1186], a2, a3, a5, 1, 0, 0, 0, 0);
    v52 = 0;
    v53 = 0;
    v54 = v82 - 2;
    v55 = v29;
    v56 = HIBYTE(v83);
    v57 = v83;
    if (!(HIBYTE(v83) | v83))
      goto LABEL_29;
    v58 = a1[1187];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t *, unint64_t *))(v58 + 568))(v42, v26, v51, v55, v78, v78, &v84, &v85);
    v59 = (v84 * *(unsigned __int16 *)(v58 + 162)) >> 8;
    v60 = (v85 * *(unsigned __int16 *)(v58 + 166)) >> 8;
    v84 = v59;
    v85 = v60;
    if (v56)
    {
      v61 = v80;
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 88))(v80);
      sub_1C97F4534((uint64_t)a1, a2, a3, v82, 0, 1);
      v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 80))(v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 96))(v61);
      if (!v76)
      {
        v63 = v81;
        v53 = 1;
        if (v57)
          goto LABEL_23;
LABEL_28:
        v52 = 0;
        v54 = v82 - 2;
LABEL_29:
        v69 = 1 << v54;
        v70 = v53;
        sub_1C982E6B8(a5, a2, a3, 1 << v54, 1, v53, 0);
        sub_1C982E6B8(a5, a2, a3, v69, 2, v52, 0);
        v39 = (v52 | v70) != 0;
        v11 = v79;
        return (v11 | v39) & 1;
      }
      v63 = v81;
      v53 = 1;
      if (v87 < v59 + ((*(unsigned __int16 *)(a1[1187] + 152) * (unint64_t)v62) >> 8))
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1186] + 29760))((2 << v82), v78, v75, v34, v81, v77);
        v53 = 0;
        if (!v57)
          goto LABEL_28;
LABEL_23:
        v64 = v53;
        v65 = v85;
        v66 = v80;
        (*(void (**)(uint64_t))(*(_QWORD *)v80 + 88))(v80);
        sub_1C97F4534((uint64_t)a1, a2, a3, v82, 0, 2);
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 80))(v66);
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 96))(v66);
        v52 = 1;
        if (v76 && v91 < v65 + ((*(unsigned __int16 *)(a1[1187] + 152) * (unint64_t)v67) >> 8))
        {
          v68 = a2 - *((_DWORD *)a5 + 1) + 1;
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1186] + 29760))((2 << v82), v78, v75, **((_QWORD **)a5 + 9)+ (*((_QWORD *)a5 + 10) + v68 + a5[1] * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*((_QWORD *)a5 + 9) + 16), v63, **(_QWORD **)(*((_QWORD *)a5 + 17) + 72)+ (*(_QWORD *)(*((_QWORD *)a5 + 17) + 80)+ v68+ 2 * *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 72) + 16));
          v52 = 0;
        }
        v54 = v82 - 2;
        v53 = v64;
        goto LABEL_29;
      }
    }
    else
    {
      v53 = 0;
      v63 = v81;
    }
    if (v57)
      goto LABEL_23;
    goto LABEL_28;
  }
  v39 = 0;
  return (v11 | v39) & 1;
}

uint64_t sub_1C97FC580(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  int v91;
  __int128 *v92;
  uint64_t v93;
  char *v94;
  int v95;
  __int128 *v96;
  char *v97;
  __int128 *v98;
  uint64_t v99;
  char *v100;
  unsigned int v101;
  int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  int v131;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;

  LODWORD(v10) = a4;
  v13 = a1;
  v131 = 0;
  v148 = *MEMORY[0x1E0C80C00];
  v14 = -a4;
  while (1)
  {
    v16 = *(_DWORD *)v13;
    v17 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    v18 = (int)a3 - (uint64_t)*((int *)a5 + 2);
    if ((int)v10 >= ((*(unsigned __int16 *)(*((_QWORD *)a5 + 11)
                                           + 2
                                           * (((uint64_t)(int)v17 >> 3) + ((unint64_t)*a5 >> 3) * ((int)v18 >> 3))) >> 2) & 3))
      break;
    v19 = 1 << (--v14 + v16);
    v20 = (v19 + a2);
    v21 = (v19 + a3);
    v10 = (v10 + 1);
    v22 = sub_1C97FC580(v13, a2, a3, v10, a5, 0, a7, a8);
    v23 = v22 | sub_1C97FC580(a1, v20, a3, v10, a5, 1, a7, a8);
    v13 = a1;
    v131 |= sub_1C97FC580(a1, a2, v21, v10, a5, 2, a7, a8) | v23;
    a6 = 3;
    a2 = v20;
    a3 = v21;
  }
  v24 = 0;
  v25 = v14 + v16;
  v128 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 9480) + 204);
  v26 = *(_QWORD *)(v13 + 9488);
  v124 = *(_QWORD *)(v26 + 944);
  do
  {
    v27 = (char *)&v142 + v24;
    *((_DWORD *)v27 + 6) = 0;
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = -1;
    *((_WORD *)v27 + 14) = 0;
    v28 = (char *)&v136 + v24;
    *((_DWORD *)v28 + 6) = 0;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = -1;
    v24 += 32;
    *((_WORD *)v28 + 14) = 0;
  }
  while (v24 != 96);
  v29 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
  v30 = *v29;
  v31 = *(unsigned __int8 *)(*((_QWORD *)v29 + 1) + ((uint64_t)(int)v17 >> 2)
                                                  + (int)(v30 >> 2) * (uint64_t)((int)v18 >> 2));
  v32 = (1 << v25);
  v33 = a5[1];
  if (v128)
    v34 = a5[1];
  else
    v34 = *v29;
  v35 = v17 + v33 * v18;
  v36 = **((_QWORD **)a5 + 3) + (v35 + *((_QWORD *)a5 + 4)) * *(int *)(*((_QWORD *)a5 + 3) + 16);
  v37 = v17 + v30 * v18;
  v38 = **((_QWORD **)v29 + 7) + (v37 + *((_QWORD *)v29 + 8)) * *(int *)(*((_QWORD *)v29 + 7) + 16);
  v122 = 1 << v25;
  v120 = v38;
  if (v128)
  {
    v118 = v34;
    v109 = *((_QWORD *)v29 + 4);
    v112 = **((_QWORD **)a5 + 3) + (v35 + *((_QWORD *)a5 + 4)) * *(int *)(*((_QWORD *)a5 + 3) + 16);
    v125 = a1 + 9496;
    v126 = v25;
    v39 = v25 - 2;
    v40 = *(unsigned __int8 *)(*((_QWORD *)v29 + 1)
                             + ((uint64_t)(int)v17 >> 2)
                             + (int)(v30 >> 2) * (uint64_t)((int)v18 >> 2));
    v116 = **((_QWORD **)a5 + 7) + (v35 + *((_QWORD *)a5 + 8)) * *(int *)(*((_QWORD *)a5 + 7) + 16);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 9496) + 8 * v39 + 176))(v32, v32);
    DWORD2(v137) = 0;
    *(_QWORD *)&v136 = v41;
    v42 = v41;
    *(_QWORD *)&v137 = v41;
    v43 = *(_QWORD *)(a1 + 9488);
    v114 = v39;
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(a1 + 9496)
                                                                                                  + 8 * v39
                                                                                                  + 176);
    *(_DWORD *)(v43 + 832) = a2;
    *(_DWORD *)(v43 + 836) = a3;
    *(_QWORD *)(v43 + 840) = v30;
    if (!v40)
    {
      v54 = 0;
      v55 = a7;
      v51 = a1;
LABEL_19:
      v25 = v126;
      goto LABEL_20;
    }
    v32 = v122;
    v38 = v120;
    v45 = v109;
    v36 = v112;
    v46 = v42;
LABEL_14:
    v48 = v45 + 2 * v37;
    v49 = v44(v32, v32, v36, v33, v38, v30);
    *(_QWORD *)&v142 = v49;
    v50 = v124;
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 88))(v124);
    *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 896) = v48;
    v51 = a1;
    sub_1C97F4534(a1, a2, a3, v126, 0, 0);
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 80))(v50);
    DWORD2(v143) = v52;
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 96))(v50);
    v53 = ((*(unsigned __int16 *)(*(_QWORD *)(a1 + 9496) + 2 * SWORD6(v143) + 152) * (unint64_t)v52) >> (8 * (WORD6(v143) == 0)))
        + v49;
    *(_QWORD *)&v143 = v53;
    v54 = 1;
    if (v128 && v46 < v53)
    {
      sub_1C982E6B8(a5, a2, a3, 1 << v114, 0, 0, 0);
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)(a1 + 9488)
                                                                                          + 29752))(v122, v122, v118, v116, v30, v120);
      v54 = 0;
    }
    v55 = a7;
    goto LABEL_19;
  }
  v45 = *((_QWORD *)v29 + 4);
  v47 = v25 - 2;
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(a1 + 9496)
                                                                                                + 8 * v47
                                                                                                + 176);
  v125 = a1 + 9496;
  *(_DWORD *)(v26 + 832) = a2;
  *(_DWORD *)(v26 + 836) = a3;
  *(_QWORD *)(v26 + 840) = v30;
  if (v31)
  {
    v116 = v38;
    v118 = v34;
    v126 = v25;
    v46 = v137;
    v114 = v47;
    goto LABEL_14;
  }
  v74 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v44)(v32, (1 << v25), v36, v33);
  v54 = 0;
  DWORD2(v137) = 0;
  *(_QWORD *)&v136 = v74;
  *(_QWORD *)&v137 = v74;
  v142 = v136;
  v143 = v137;
  v55 = a7;
  v51 = a1;
LABEL_20:
  if (*(_BYTE *)(v51 + 9504))
  {
    v56 = 0;
    v57 = 0;
    goto LABEL_69;
  }
  v58 = *(unsigned __int8 *)(*(_QWORD *)(v51 + 9472) + 2116);
  if (a6)
    v59 = 0;
  else
    v59 = v25;
  if (v25 > v58)
    v60 = v25 - 1;
  else
    v60 = v59;
  if (!a6 || (v56 = 0, v57 = 0, v25 > v58))
  {
    v61 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    v62 = a3 - *((_DWORD *)a5 + 2);
    v63 = *((_QWORD *)a5 + 17);
    v64 = *(unsigned __int8 *)(v63 + 1);
    v65 = ((uint64_t)(int)v61 >> 3) + (int)(v64 >> 2) * (uint64_t)(v62 >> 3);
    v123 = v60;
    v66 = (1 << v60);
    v127 = a5[1];
    v67 = v61 + v127 * (v62 >> 1);
    v68 = **((_QWORD **)a5 + 5) + (v67 + *((_QWORD *)a5 + 6)) * *(int *)(*((_QWORD *)a5 + 5) + 16);
    v121 = **(_QWORD **)(v63 + 72)
         + (v61 + 2 * v64 * (v62 >> 1) + *(_QWORD *)(v63 + 80)) * *(int *)(*(_QWORD *)(v63 + 72) + 16);
    v69 = v121;
    if (v128)
      v69 = **((_QWORD **)a5 + 9) + (v67 + *((_QWORD *)a5 + 10)) * *(int *)(*((_QWORD *)a5 + 9) + 16);
    v70 = *(unsigned __int8 *)(*(_QWORD *)(v63 + 16) + v65);
    v71 = *(unsigned __int8 *)(*(_QWORD *)(v63 + 24) + v65);
    v113 = *(_QWORD *)(v63 + 40);
    v115 = *(_QWORD *)(v63 + 48);
    v119 = v71;
    v108 = v69;
    v117 = v70;
    if (v128)
    {
      v110 = v70 | v71;
      v72 = *(_QWORD *)(a1 + 9496);
      v73 = **((_QWORD **)a5 + 5) + (v67 + *((_QWORD *)a5 + 6)) * *(int *)(*((_QWORD *)a5 + 5) + 16);
      (*(void (**)(void))(v72 + 568))();
      v68 = v73;
      v56 = 0;
      v57 = 0;
      *(_QWORD *)&v138 = ((unint64_t)v138 * *(unsigned __int16 *)(v72 + 162)) >> 8;
      *(_QWORD *)&v140 = ((unint64_t)v140 * *(unsigned __int16 *)(v72 + 166)) >> 8;
      DWORD2(v139) = 0;
      DWORD2(v141) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 848) = v64;
      if (!v110)
        goto LABEL_59;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v51 + 9488) + 848) = v64;
    }
    v75 = (int)v64 * (uint64_t)(v62 >> 1) + ((int)v61 >> 1);
    v76 = *(_QWORD *)v125;
    v111 = 2 * v64;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v125 + 568))(v68, v127, v121);
    v77 = (v133 * (unint64_t)*(unsigned __int16 *)(v76 + 162)) >> 8;
    v78 = (v134 * (unint64_t)*(unsigned __int16 *)(v76 + 166)) >> 8;
    v135 = v78;
    if (v117)
    {
      *(_QWORD *)&v144 = (v133 * (unint64_t)*(unsigned __int16 *)(v76 + 162)) >> 8;
      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 88))(v124);
      *(_QWORD *)(*(_QWORD *)(a1 + 9488) + 904) = v113 + 2 * v75;
      sub_1C97F4534(a1, a2, a3, v123, 0, 1);
      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 80))(v124);
      DWORD2(v145) = v79;
      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 96))(v124);
      v80 = *(_QWORD *)(a1 + 9496) + 152;
      v81 = ((*(unsigned __int16 *)(v80 + 2 * SWORD6(v145)) * (unint64_t)v79) >> (8 * (WORD6(v145) == 0)))
          + v77;
      v82 = ((*(unsigned __int16 *)(v80 + 2 * SWORD6(v139)) * (unint64_t)DWORD2(v139)) >> (8
                                                                                                  * (WORD6(v139) == 0)))
          + v138;
      *(_QWORD *)&v139 = v82;
      if (v128)
        v83 = v82 >= v81;
      else
        v83 = 1;
      v84 = !v83;
      if (v84 == 1)
      {
        sub_1C982E6B8(a5, a2, a3, 1 << (v123 - 2), 1, 0, 0);
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 9488) + 29760))((2 << v123), v66, v127, v108, v111, v121);
      }
      v56 = v84 ^ 1;
      if (v119)
      {
        v78 = v135;
        v85 = a1;
        goto LABEL_54;
      }
      if (v128)
      {
LABEL_57:
        v57 = 0;
        goto LABEL_59;
      }
      v78 = v135;
    }
    else
    {
      if (v128)
      {
        v56 = 0;
        v57 = 0;
        v85 = a1;
        if (!v119)
          goto LABEL_59;
        goto LABEL_54;
      }
      v56 = 0;
      *(_QWORD *)&v138 = (v133 * (unint64_t)*(unsigned __int16 *)(v76 + 162)) >> 8;
      DWORD2(v139) = 0;
      v144 = v138;
      v145 = v139;
      v85 = a1;
      if (v119)
      {
LABEL_54:
        v107 = v66;
        *(_QWORD *)&v146 = v78;
        v86 = v124;
        (*(void (**)(uint64_t))(*(_QWORD *)v124 + 88))(v124);
        *(_QWORD *)(*(_QWORD *)(v85 + 9488) + 912) = v115 + 2 * v75;
        sub_1C97F4534(v85, a2, a3, v123, 0, 2);
        v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 80))(v86);
        DWORD2(v147) = v87;
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 96))(v86);
        v88 = *(_QWORD *)(v85 + 9496) + 152;
        v89 = *(unsigned __int16 *)(v88 + 2 * SWORD6(v147));
        v90 = ((*(unsigned __int16 *)(v88 + 2 * SWORD6(v141)) * (unint64_t)DWORD2(v141)) >> (8 * (WORD6(v141) == 0)))
            + v140;
        *(_QWORD *)&v141 = v90;
        v57 = 1;
        if (v128 && v90 < ((v89 * (unint64_t)v87) >> (8 * (WORD6(v147) == 0))) + v78)
        {
          sub_1C982E6B8(a5, a2, a3, 1 << (v123 - 2), 2, 0, 0);
          v91 = a2 - *((_DWORD *)a5 + 1) + 1;
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 + 9488) + 29760))((2 << v123), v107, v127, **((_QWORD **)a5 + 9)+ (*((_QWORD *)a5 + 10) + v91 + a5[1] * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*((_QWORD *)a5 + 9) + 16), v111, **(_QWORD **)(*((_QWORD *)a5 + 17) + 72)+ (*(_QWORD *)(*((_QWORD *)a5 + 17) + 80)+ v91+ 2 * *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 72) + 16));
          goto LABEL_57;
        }
LABEL_59:
        v55 = a7;
        if (a7)
        {
          v92 = &v144;
          if (!v56)
            v92 = &v138;
          v93 = *(_QWORD *)a7 + *(_QWORD *)v92;
          v94 = (char *)&v145 + 8;
          if (!v56)
            v94 = (char *)&v139 + 8;
          v95 = *(_DWORD *)(a7 + 24) + *(_DWORD *)v94;
          v96 = &v146;
          if (!v57)
            v96 = &v140;
          *(_QWORD *)a7 = *(_QWORD *)v96 + v93;
          v97 = (char *)&v147 + 8;
          if (!v57)
            v97 = (char *)&v141 + 8;
          *(_DWORD *)(a7 + 24) = *(_DWORD *)v97 + v95;
        }
        goto LABEL_69;
      }
    }
    v57 = 0;
    *(_QWORD *)&v140 = v78;
    DWORD2(v141) = 0;
    v146 = v140;
    v147 = v141;
    goto LABEL_59;
  }
LABEL_69:
  if (v55)
  {
    if (v54)
      v98 = &v142;
    else
      v98 = &v136;
    v99 = *(_QWORD *)v55 + *(_QWORD *)v98;
    *(_QWORD *)v55 = v99;
    v100 = (char *)&v137 + 8;
    if (v54)
      v100 = (char *)&v143 + 8;
    v101 = *(_DWORD *)(v55 + 24) + *(_DWORD *)v100;
    *(_DWORD *)(v55 + 24) = v101;
    *(_QWORD *)(v55 + 16) = ((*(unsigned __int16 *)(*(_QWORD *)v125 + 2 * *(__int16 *)(v55 + 28) + 152)
                            * (unint64_t)v101) >> (8 * (*(_WORD *)(v55 + 28) == 0)))
                          + v99;
  }
  if (a8 && v128)
  {
    v102 = *(_DWORD *)(a8 + 24) + DWORD2(v137);
    v103 = DWORD2(v139);
    v104 = v140 + v138 + *(_QWORD *)a8 + v136;
    *(_QWORD *)a8 = v104;
    v105 = DWORD2(v141) + v103 + v102;
    *(_DWORD *)(a8 + 24) = v105;
    *(_QWORD *)(a8 + 16) = ((*(unsigned __int16 *)(*(_QWORD *)v125 + 2 * *(__int16 *)(a8 + 28) + 152)
                           * (unint64_t)v105) >> (8 * (*(_WORD *)(a8 + 28) == 0)))
                         + v104;
  }
  return (v131 | v54 | v56 | v57) & 1;
}

BOOL sub_1C97FD110(int *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  __int128 *v118;
  uint64_t v119;
  char *v120;
  int v121;
  int v122;
  __int128 *v123;
  char *v124;
  BOOL v125;
  __int128 *v126;
  uint64_t v127;
  char *v128;
  unsigned int v129;
  int v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  int v135;
  int v136;
  uint64_t v138;
  int v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  char v156;
  int v157[2];
  int v158;
  int v159;
  uint64_t v160;
  char v161;
  char v163;
  unsigned __int8 v165;
  _WORD __c[5];
  unint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(*((_QWORD *)a1 + 1183) + 8);
  v11 = *a1 - (uint64_t)a4;
  if (a8)
  {
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v10 + 520) <= (int)a2
      || *(_DWORD *)(v10 + 524) <= (int)a3)
    {
      v12 = 0;
    }
    else
    {
      v12 = (__int16 *)(*(_QWORD *)(v10 + 800) + 2 * (*(_QWORD *)(v10 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    v13 = *(_QWORD *)(v10 + 768);
  }
  else
  {
    v13 = (unint64_t)*a5 >> 3;
    v12 = (__int16 *)(*((_QWORD *)a5 + 11)
                    + 2
                    * (((uint64_t)((int)a2 - *((_DWORD *)a5 + 1)) >> 3)
                     + (int)v13 * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 3)));
  }
  v158 = *a1 - a4;
  v160 = a3;
  if ((((unsigned __int16)*v12 >> 2) & 3) > a4)
  {
    v150 = v13;
    v14 = 1;
    v156 = sub_1C97FD110(a1);
    v161 = sub_1C97FD110(a1);
    v163 = sub_1C97FD110(a1);
    v15 = sub_1C97FD110(a1);
    if ((v156 & 1) == 0 && (v161 & 1) == 0 && (v163 & 1) == 0 && (v15 & 1) == 0)
    {
      if ((*v12 & 0xC) != 0
        && (v16 = *((_QWORD *)a1 + 1184), *(_BYTE *)(v16 + 272))
        && v158 <= *(unsigned __int8 *)(v16 + 2115)
        && (*v12 = *v12 & 0xFFF3 | (*v12 + 12) & 0xC, 1 << v158 >= 8))
      {
        v17 = 0;
        v18 = v12;
        do
        {
          v19 = v18;
          v20 = (1 << v158) >> 3;
          do
          {
            *v19++ = *v12;
            --v20;
          }
          while (v20);
          v14 = 0;
          ++v17;
          v18 += v150;
        }
        while (v17 != (1 << v158) >> 3);
      }
      else
      {
        return 0;
      }
    }
    return v14;
  }
  v21 = 0;
  v22 = *(_BYTE *)(v10 + 531);
  v23 = a1;
  v24 = *((_QWORD *)a1 + 1185);
  v25 = *(unsigned __int8 *)(v24 + 204);
  v26 = *(unsigned __int8 *)(v24 + 205);
  v136 = 1 << v22;
  v139 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1184) + 2116);
  __c[0] = 0;
  v165 = 0;
  v27 = *((_QWORD *)a1 + 1186);
  v142 = *(_QWORD *)(v27 + 944);
  do
  {
    v28 = (char *)&v174 + v21;
    *((_DWORD *)v28 + 6) = 0;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = -1;
    *((_WORD *)v28 + 14) = 0;
    v29 = (char *)&v168 + v21;
    *((_DWORD *)v29 + 6) = 0;
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = -1;
    v21 += 32;
    *((_WORD *)v29 + 14) = 0;
  }
  while (v21 != 96);
  v30 = a5[1];
  if ((a8 & 1) != 0)
  {
    v31 = *(_QWORD *)(v10 + 416);
    v32 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
    v33 = *v32;
  }
  else
  {
    v32 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
    v33 = *v32;
    v31 = v33;
  }
  v34 = (1 << v11);
  if (v25)
    v35 = a5[1];
  else
    v35 = v31;
  v151 = v35;
  v36 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  v37 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  v38 = v36 + v37 * v30;
  v39 = **((_QWORD **)a5 + 3) + (v38 + *((_QWORD *)a5 + 4)) * *(int *)(*((_QWORD *)a5 + 3) + 16);
  if (a8)
    v40 = *(_QWORD *)(v10 + 400) + ((*(_QWORD *)(v10 + 416) * (int)a3 + (int)a2) << v22);
  else
    v40 = **((_QWORD **)v32 + 7) + (*((_QWORD *)v32 + 8) + v36 + v33 * v37) * *(int *)(*((_QWORD *)v32 + 7) + 16);
  v147 = v33;
  v41 = v36 + v33 * v37;
  *(_QWORD *)v157 = a5;
  v152 = v25;
  v141 = (1 << v11);
  if (v25)
  {
    v42 = **((_QWORD **)a5 + 7) + (v38 + *((_QWORD *)a5 + 8)) * *(int *)(*((_QWORD *)a5 + 7) + 16);
    v153 = *((_QWORD *)v32 + 4) + 2 * v41;
    v43 = (int)v11 - 2;
    v44 = v11;
    v45 = (1 << v11);
    v11 = v40;
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)a1 + 1187)
                                                                                          + 8 * v43
                                                                                          + 176))(v34, v45, v39, v30, v42, v30);
    v47 = v42;
    v40 = v11;
    LODWORD(v11) = v44;
    LODWORD(a3) = v160;
    v48 = a2;
    v49 = v46;
    v50 = v153;
    a5 = *(unsigned __int8 **)v157;
    DWORD2(v169) = 0;
    *(_QWORD *)&v168 = v49;
    *(_QWORD *)&v169 = v49;
    v27 = *((_QWORD *)a1 + 1186);
    LODWORD(v36) = a2 - *(_DWORD *)(*(_QWORD *)v157 + 4);
    LODWORD(v37) = v160 - *(_DWORD *)(*(_QWORD *)v157 + 8);
  }
  else
  {
    v50 = *((_QWORD *)v32 + 4) + 2 * v41;
    v43 = v11 - 2;
    v47 = v40;
    v48 = a2;
  }
  *(_DWORD *)(v27 + 832) = v48;
  *(_DWORD *)(v27 + 836) = a3;
  v51 = *a5;
  *(_QWORD *)(v27 + 888) = *((_QWORD *)a5 + 12)
                         + 16 * (((uint64_t)(int)v36 >> 2) + (int)(v51 >> 2) * (uint64_t)((int)v37 >> 2));
  *(_QWORD *)(v27 + 880) = *((_QWORD *)a5 + 11)
                         + 2 * (((uint64_t)(int)v36 >> 3) + (int)(v51 >> 3) * (uint64_t)((int)v37 >> 3));
  v135 = v11;
  v154 = v50;
  v52 = a3;
  v143 = v40;
  v138 = v47;
  sub_1C97F5D34((uint64_t)a1, v48, a3, v12, v39, v30, v47, v151, v40, v31, v50, v147, v135, (_BYTE *)__c + 1, v26 == 0, 1u);
  v53 = *((_QWORD *)a1 + 1187);
  v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 8 * v43 + 176);
  v55 = *((_QWORD *)a1 + 1186);
  *(_DWORD *)(v55 + 832) = v48;
  *(_DWORD *)(v55 + 836) = v52;
  *(_QWORD *)(v55 + 840) = v147;
  if (HIBYTE(__c[0]))
  {
    if (v26)
    {
      v56 = a1[2280];
      v57 = v31;
    }
    else
    {
      v57 = v31;
      v56 = v54(v141, v141, v39, v30, v143, v31);
    }
    *(_QWORD *)&v174 = v56;
    v61 = v142;
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 88))(v142);
    *(_QWORD *)(*((_QWORD *)a1 + 1186) + 896) = v154;
    v60 = v160;
    sub_1C97F4534((uint64_t)a1, v48, v160, v158, 0, 0);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 80))(v61);
    DWORD2(v175) = v62;
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 96))(v61);
    v63 = ((*(unsigned __int16 *)(*((_QWORD *)a1 + 1187) + 2 * SWORD6(v175) + 152) * (unint64_t)v62) >> (8 * (WORD6(v175) == 0)))
        + v56;
    *(_QWORD *)&v175 = v63;
    v64 = v152;
    if (v152 && (unint64_t)v169 < v63)
    {
      HIBYTE(__c[0]) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)a1 + 1186) + 29752))(v141, v141, v151, v138, v57, v143);
      v58 = 0;
      v59 = a7;
    }
    else
    {
      v59 = a7;
      if (v26)
      {
        v65 = *((_QWORD *)a1 + 1183) + 2824;
        v66 = *(_QWORD *)&a1[2 * (5 - v158) + 1588];
        if ((*v12 & 0x100) != 0)
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v65 + 8 * v43 + 248))(v143, v57, v66, 0);
        else
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v65 + 16 * v43))(v143, v57, v66, 0, 1024);
        v58 = 1;
      }
      else
      {
        v58 = 1;
      }
    }
  }
  else
  {
    if (v152)
    {
      v58 = 0;
      v59 = a7;
      v60 = v160;
    }
    else
    {
      if (v26)
      {
        a1[2280] = (*(uint64_t (**)(uint64_t, uint64_t, int *, _QWORD))(v53 + 16))(v141, v141, a1 + 16, (int)v141);
        v67 = (*(uint64_t (**)(void))&a1[2 * v158 + 2304])();
        a1[2280] = v67;
      }
      else
      {
        v67 = v54(v141, v141, v39, v30, v138, v31);
      }
      v59 = a7;
      v60 = v160;
      v58 = 0;
      DWORD2(v169) = 0;
      *(_QWORD *)&v168 = v67;
      *(_QWORD *)&v169 = v67;
      v174 = v168;
      v175 = v169;
    }
    v64 = v152;
  }
  sub_1C982E6B8(*(unsigned __int8 **)v157, v48, v60, 1 << v43, 0, v58, 0);
  if (v59)
  {
    v68 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1184) + 2116);
    v69 = v139;
    if (!a6)
      v69 = v158;
    v70 = v158 <= v68;
    v71 = v158 > v68 ? v158 - 1 : v69;
    v159 = v71;
    if (!a6 || !v70)
    {
      v72 = *(unsigned __int8 **)v157;
      v73 = *(unsigned __int8 *)(*(_QWORD *)v157 + 1);
      if (a8)
      {
        v74 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1183) + 8) + 424);
        v75 = *(_QWORD *)(*(_QWORD *)v157 + 136);
        v76 = *(unsigned __int8 *)(v75 + 1);
      }
      else
      {
        v75 = *(_QWORD *)(*(_QWORD *)v157 + 136);
        v76 = *(unsigned __int8 *)(v75 + 1);
        v74 = 2 * v76;
      }
      if (v152)
        v77 = *(unsigned __int8 *)(*(_QWORD *)v157 + 1);
      else
        v77 = v74;
      v78 = (int)v48 - (uint64_t)*(int *)(*(_QWORD *)v157 + 4);
      v79 = v60 - *(_DWORD *)(*(_QWORD *)v157 + 8);
      v80 = (uint64_t)v79 >> 1;
      v81 = v78 + *(unsigned __int8 *)(*(_QWORD *)v157 + 1) * (uint64_t)(v79 >> 1);
      v82 = **(_QWORD **)(*(_QWORD *)v157 + 40)
          + (v81 + *(_QWORD *)(*(_QWORD *)v157 + 48)) * *(int *)(*(_QWORD *)(*(_QWORD *)v157 + 40) + 16);
      if (a8)
        v83 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1183) + 8) + 408)
            + ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1183) + 8) + 424) * ((uint64_t)(int)v60 >> 1)
              + (int)(v48 & 0xFFFFFFFE)) << *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1183) + 8) + 531));
      else
        v83 = **(_QWORD **)(v75 + 72)
            + (*(_QWORD *)(v75 + 80) + v78 + 2 * (int)v80 * (uint64_t)(int)v76) * *(int *)(*(_QWORD *)(v75 + 72) + 16);
      v155 = 1 << v159;
      if (v152)
      {
        v84 = **(_QWORD **)(*(_QWORD *)v157 + 72)
            + (v81 + *(_QWORD *)(*(_QWORD *)v157 + 80)) * *(int *)(*(_QWORD *)(*(_QWORD *)v157 + 72) + 16);
        v85 = (int)v76 * (uint64_t)(int)v80 + ((int)v78 >> 1);
        v86 = *(_QWORD *)(v75 + 40) + 2 * v85;
        v149 = *(_QWORD *)(v75 + 48) + 2 * v85;
        v87 = *((_QWORD *)a1 + 1187);
        v88 = v48;
        v89 = v76;
        v90 = v83;
        v91 = v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, __int128 *))(v87 + 568))(v82, v73, v84, v73, v155, v155, &v170, &v172);
        v92 = v84;
        v60 = v160;
        v74 = v91;
        v83 = v90;
        v76 = v89;
        v48 = v88;
        v72 = *(unsigned __int8 **)v157;
        *(_QWORD *)&v170 = ((unint64_t)v170 * *(unsigned __int16 *)(v87 + 162)) >> 8;
        v93 = *(unsigned __int16 *)(v87 + 166);
        v23 = a1;
        *(_QWORD *)&v172 = (unint64_t)(v172 * v93) >> 8;
        DWORD2(v171) = 0;
        DWORD2(v173) = 0;
        LODWORD(v78) = v88 - *(_DWORD *)(*(_QWORD *)v157 + 4);
        v79 = v160 - *(_DWORD *)(*(_QWORD *)v157 + 8);
      }
      else
      {
        v94 = (int)v76 * (uint64_t)(int)v80 + ((int)v78 >> 1);
        v86 = *(_QWORD *)(v75 + 40) + 2 * v94;
        v149 = *(_QWORD *)(v75 + 48) + 2 * v94;
        v92 = v83;
      }
      v95 = v23[1186];
      *(_DWORD *)(v95 + 832) = v48;
      *(_DWORD *)(v95 + 836) = v60;
      *(_QWORD *)(v95 + 888) = *((_QWORD *)v72 + 12)
                             + 16 * (((uint64_t)(int)v78 >> 2) + ((unint64_t)*v72 >> 2) * (v79 >> 2));
      v146 = v92;
      v148 = v74;
      sub_1C97F89C4(v23, v48, v60, v159, v12, v82, v73, v92, v77, v83, v74, v86, v149, v76, __c, &v165);
      v96 = v23;
      v97 = v23[1187];
      *(_QWORD *)(v96[1186] + 848) = v76;
      v98 = LOBYTE(__c[0]);
      v99 = v165;
      v64 = v152;
      if (!LOBYTE(__c[0]) && !v165 && v152)
      {
        v100 = 0;
        v23 = a1;
        v101 = 1 << v159;
LABEL_101:
        v117 = LOBYTE(__c[0]);
        if (a9)
        {
          v118 = &v176;
          if (!LOBYTE(__c[0]))
            v118 = &v170;
          v119 = *(_QWORD *)v118;
          v120 = (char *)&v177 + 8;
          if (!LOBYTE(__c[0]))
            v120 = (char *)&v171 + 8;
          v121 = *(_DWORD *)v120;
          v122 = *(_DWORD *)(a9 + 24);
          v123 = &v178;
          if (!v100)
            v123 = &v172;
          *(_QWORD *)a9 += *(_QWORD *)v123 + v119;
          v124 = (char *)&v179 + 8;
          if (!v100)
            v124 = (char *)&v173 + 8;
          *(_DWORD *)(a9 + 24) = *(_DWORD *)v124 + v122 + v121;
        }
        sub_1C982E6B8(*(unsigned __int8 **)v157, v48, v60, v101 >> 2, 1, v117, 0);
        sub_1C982E6B8(*(unsigned __int8 **)v157, v48, v60, v101 >> 2, 2, v100, 0);
        goto LABEL_112;
      }
      v144 = v83;
      v102 = v83;
      v101 = 1 << v159;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _WORD *, unint64_t *))(v97 + 568))(v82, v73, v102, v148, v155, v155, &__c[1], &v167);
      v103 = (*(_QWORD *)&__c[1] * (unint64_t)*(unsigned __int16 *)(v97 + 162)) >> 8;
      v104 = (v167 * *(unsigned __int16 *)(v97 + 166)) >> 8;
      *(_QWORD *)&__c[1] = v103;
      v167 = v104;
      if (v98)
      {
        *(_QWORD *)&v176 = v103;
        v105 = v86;
        v106 = v142;
        (*(void (**)(uint64_t))(*(_QWORD *)v142 + 88))(v142);
        v23 = a1;
        *(_QWORD *)(*((_QWORD *)a1 + 1186) + 904) = v105;
        sub_1C97F4534((uint64_t)a1, v48, v60, v159, 0, 1);
        v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 80))(v106);
        DWORD2(v177) = v107;
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 96))(v106);
        v108 = *((_QWORD *)a1 + 1187) + 152;
        v109 = ((*(unsigned __int16 *)(v108 + 2 * SWORD6(v177)) * (unint64_t)v107) >> (8 * (WORD6(v177) == 0)))
             + v103;
        *(_QWORD *)&v177 = v109;
        v110 = ((*(unsigned __int16 *)(v108 + 2 * SWORD6(v171)) * (unint64_t)DWORD2(v171)) >> (8 * (WORD6(v171) == 0)))
             + v170;
        *(_QWORD *)&v171 = v110;
        if (v152 && v110 < v109)
        {
          LOBYTE(__c[0]) = 0;
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)a1 + 1186) + 29760))((2 << v159), v155, v73, v146, v148, v144);
          v99 = v165;
        }
        if (v99)
        {
          v104 = v167;
          goto LABEL_94;
        }
        if (v152)
        {
          v100 = 0;
          goto LABEL_101;
        }
        v104 = v167;
        goto LABEL_99;
      }
      if (v152)
      {
        if (!v99)
        {
          v100 = 0;
LABEL_100:
          v23 = a1;
          goto LABEL_101;
        }
      }
      else
      {
        *(_QWORD *)&v170 = v103;
        DWORD2(v171) = 0;
        v176 = v170;
        v177 = v171;
        if (!v99)
        {
LABEL_99:
          v100 = 0;
          *(_QWORD *)&v172 = v104;
          DWORD2(v173) = 0;
          v178 = v172;
          v179 = v173;
          goto LABEL_100;
        }
      }
LABEL_94:
      *(_QWORD *)&v178 = v104;
      v111 = v60;
      v112 = v142;
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 88))(v142);
      *(_QWORD *)(*((_QWORD *)a1 + 1186) + 912) = v149;
      sub_1C97F4534((uint64_t)a1, v48, v111, v159, 0, 2);
      v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 80))(v112);
      DWORD2(v179) = v113;
      (*(void (**)(uint64_t))(*(_QWORD *)v112 + 96))(v112);
      v114 = *((_QWORD *)a1 + 1187) + 152;
      v115 = ((*(unsigned __int16 *)(v114 + 2 * SWORD6(v179)) * (unint64_t)v113) >> (8 * (WORD6(v179) == 0)))
           + v104;
      *(_QWORD *)&v179 = v115;
      v116 = ((*(unsigned __int16 *)(v114 + 2 * SWORD6(v173)) * (unint64_t)DWORD2(v173)) >> (8 * (WORD6(v173) == 0)))
           + v172;
      *(_QWORD *)&v173 = v116;
      v100 = 1;
      if (v152)
      {
        v23 = a1;
        LODWORD(v60) = v160;
        if (v116 < v115)
        {
          v165 = 0;
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)a1 + 1186) + 29760))((2 << v159), v155, v73, v146 + v136, v148, v144 + v136);
          v100 = v165;
        }
      }
      else
      {
        v23 = a1;
        LODWORD(v60) = v160;
      }
      goto LABEL_101;
    }
  }
LABEL_112:
  if (a9)
  {
    v125 = HIBYTE(__c[0]) == 0;
    if (HIBYTE(__c[0]))
      v126 = &v174;
    else
      v126 = &v168;
    v127 = *(_QWORD *)a9 + *(_QWORD *)v126;
    *(_QWORD *)a9 = v127;
    v128 = (char *)&v175 + 8;
    if (v125)
      v128 = (char *)&v169 + 8;
    v129 = *(_DWORD *)(a9 + 24) + *(_DWORD *)v128;
    *(_DWORD *)(a9 + 24) = v129;
    *(_QWORD *)(a9 + 16) = ((*(unsigned __int16 *)(v23[1187] + 2 * *(__int16 *)(a9 + 28) + 152)
                           * (unint64_t)v129) >> (8 * (*(_WORD *)(a9 + 28) == 0)))
                         + v127;
  }
  if (a10 && v64)
  {
    v130 = *(_DWORD *)(a10 + 24) + DWORD2(v169);
    v131 = DWORD2(v171);
    v132 = v172 + v170 + *(_QWORD *)a10 + v168;
    *(_QWORD *)a10 = v132;
    v133 = DWORD2(v173) + v131 + v130;
    *(_DWORD *)(a10 + 24) = v133;
    *(_QWORD *)(a10 + 16) = ((*(unsigned __int16 *)(v23[1187] + 2 * *(__int16 *)(a10 + 28) + 152)
                            * (unint64_t)v133) >> (8 * (*(_WORD *)(a10 + 28) == 0)))
                          + v132;
  }
  return HIBYTE(__c[0]) | LOBYTE(__c[0]) || v165 != 0;
}

uint64_t sub_1C97FE084(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  int v21;
  int v22;
  int v24;

  v4 = *(_QWORD *)(a1 + 9488);
  v5 = *(_QWORD *)(v4 + 880);
  v6 = *(_QWORD *)(v4 + 856);
  v7 = a2 - *(_DWORD *)(v4 + 832);
  v8 = a3 - *(_DWORD *)(v4 + 836);
  if (((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)v8 >> 3) + (v7 >> 3))) >> 2) & 3) <= a4)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    LODWORD(v9) = a4;
    v10 = a3;
    v11 = a2;
    v20 = *(_QWORD *)(a1 + 9488);
    v12 = 0;
    v13 = ~(*(_DWORD *)(a1 + 9520) + a4) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 9472) + 2113);
    v21 = *(_DWORD *)(v4 + 836);
    v22 = *(_DWORD *)(v4 + 832);
    do
    {
      v24 = v12;
      v14 = ((1 << v13) + v11);
      v15 = ((1 << v13) + v10);
      v9 = (v9 + 1);
      v16 = sub_1C97FE084(a1, v11, v10, v9, 0);
      v17 = v16 | sub_1C97FE084(a1, v14, v10, v9, 1);
      v18 = sub_1C97FE084(a1, v11, v15, v9, 2);
      v7 = v14 - v22;
      v8 = v15 - v21;
      v12 = v24 | v18 | v17;
      --v13;
      v10 = v15;
      v11 = v14;
    }
    while ((int)v9 < ((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)((int)v15 - v21) >> 3) + (((int)v14 - v22) >> 3))) >> 2) & 3));
    v4 = v20;
  }
  return v12 & 1 | (*(_BYTE *)(*(_QWORD *)(v4 + 920)
                                           + (*(uint64_t *)(v4 + 840) >> 2) * ((uint64_t)v8 >> 2)
                                           + (v7 >> 2)) != 0);
}

uint64_t sub_1C97FE224(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t *v13;
  uint64_t v14;

  if (a6)
  {
    v6 = 0;
    v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        v8 = 0;
        for (i = 0; i < v7; i += 32)
        {
          v10 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 16), 6uLL);
          v11 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 32), 6uLL);
          v12 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 48), 6uLL);
          v13 = (int16x8_t *)(result + v8);
          *v13 = vshlq_n_s16(*(int16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      i = i;
      if (i < a5)
      {
        v14 = 2 * i;
        do
        {
          *(int16x8_t *)(result + v14) = vshlq_n_s16(*(int16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1C97FE2C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t *v13;
  uint64_t v14;

  if (a6)
  {
    v6 = 0;
    v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        v8 = 0;
        for (i = 0; i < v7; i += 32)
        {
          v10 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 16), 6uLL);
          v11 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 32), 6uLL);
          v12 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 48), 6uLL);
          v13 = (uint16x8_t *)(result + v8);
          *v13 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      i = i;
      if (i < a5)
      {
        v14 = 2 * i;
        do
        {
          *(uint16x8_t *)(result + v14) = vshrq_n_u16(*(uint16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

_QWORD *sub_1C97FE36C(_QWORD *result)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  if (result[20])
  {
    result[16] = sub_1C982C998;
    result[17] = sub_1C982CABC;
    result[18] = sub_1C982CB74;
    result[19] = sub_1C982CC1C;
    v1 = sub_1C982CFE0;
    v2 = sub_1C982CF0C;
    v3 = sub_1C982CEC0;
    v4 = sub_1C982CD14;
  }
  else
  {
    result[16] = sub_1C97FE48C;
    result[17] = sub_1C97FE5AC;
    result[18] = sub_1C97FE780;
    result[19] = sub_1C97FE980;
    v1 = sub_1C982CFFC;
    v2 = sub_1C982CF28;
    v3 = sub_1C982CEDC;
    v4 = sub_1C982CE24;
  }
  *result = v4;
  result[1] = v3;
  result[2] = v2;
  result[3] = v1;
  result[4] = sub_1C982D0B0;
  result[5] = sub_1C982D110;
  result[6] = sub_1C982D188;
  result[7] = sub_1C982D220;
  result[8] = sub_1C982D2BC;
  result[9] = sub_1C982D3B4;
  result[10] = sub_1C982D498;
  result[11] = sub_1C982D5EC;
  result[12] = sub_1C982D7F4;
  result[13] = sub_1C982D894;
  result[14] = sub_1C982D930;
  result[15] = sub_1C982D9E8;
  return result;
}

uint64_t sub_1C97FE48C(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 *a11)
{
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[31];
  uint64_t v29;

  v11 = 0;
  v12 = 0;
  v29 = *MEMORY[0x1E0C80C00];
  memset(v28, 0, sizeof(v28));
  v14 = 2 * a7;
  v27 = 0u;
  v26 = 0u;
  v15 = 4 * a10;
  v16 = 2 * a5;
  do
  {
    for (i = 0; i != 4; ++i)
    {
      v18 = *(__int16 *)(a4 + 2 * i);
      v19 = v18 <= 0;
      if (v18 < 0)
        v18 = -v18;
      v20 = v18 * a3;
      v21 = (v20 + a1) >> a2;
      *(_DWORD *)(a9 + 4 * i) = v20;
      if (v19)
        v22 = -v21;
      else
        v22 = (v20 + a1) >> a2;
      *(_DWORD *)(a8 + 4 * i) = (v20 - (v21 << a2)) >> (a2 - 8);
      if (v22 >= 0x7FFF)
        v23 = 0x7FFF;
      else
        v23 = v22;
      if (v23 <= -32768)
        LOWORD(v23) = 0x8000;
      *(_WORD *)(a6 + 2 * i) = v23;
      v12 |= v21 != 0;
    }
    ++v11;
    a6 += v14;
    a8 += v15;
    a9 += v15;
    a4 += v16;
  }
  while (v11 != 4);
  v25 = v12 & 1;
  return *(&v25 + *a11);
}

uint64_t sub_1C97FE5AC(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  char v40;
  _OWORD v41[4];
  uint64_t v42;

  v11 = 0;
  v42 = *MEMORY[0x1E0C80C00];
  v12 = 2 * a7;
  v13 = 4 * a10;
  v14 = 2 * a5;
  memset(v41, 0, sizeof(v41));
  v15 = 1;
  do
  {
    v16 = 0;
    v40 = v15;
    v17 = v11 >> 1;
    v18 = a6 + v12 * v11;
    v19 = a10 * v11;
    v20 = 1;
    v21 = a4 + v14 * v11;
    do
    {
      v22 = 0;
      v23 = 0;
      v24 = v18 + 2 * v16;
      v25 = a8 + 4 * (v19 + v16);
      v26 = v20;
      v27 = a9 + 4 * (v19 + v16);
      v28 = v21 + 2 * v16;
      do
      {
        for (i = 0; i != 4; ++i)
        {
          v30 = *(__int16 *)(v28 + 2 * i);
          v31 = v30 <= 0;
          if (v30 < 0)
            v30 = -v30;
          v32 = v30 * a3;
          v33 = (v32 + a1) >> a2;
          *(_DWORD *)(v27 + 4 * i) = v32;
          if (v31)
            v34 = -v33;
          else
            v34 = (v32 + a1) >> a2;
          *(_DWORD *)(v25 + 4 * i) = (v32 - (v33 << a2)) >> (a2 - 8);
          if (v34 >= 0x7FFF)
            v34 = 0x7FFF;
          if (v34 <= -32768)
            LOWORD(v34) = 0x8000;
          *(_WORD *)(v24 + 2 * i) = v34;
          v23 |= v33 != 0;
        }
        ++v22;
        v24 += v12;
        v25 += v13;
        v27 += v13;
        v28 += v14;
      }
      while (v22 != 4);
      if ((v23 & 1) != 0)
        *((_BYTE *)v41 + (v17 | (v16 >> 2))) = 1;
      v20 = 0;
      v16 = 4;
    }
    while ((v26 & 1) != 0);
    v15 = 0;
    v11 = 4;
  }
  while ((v40 & 1) != 0);
  v35 = 0;
  result = 0;
  do
  {
    if (*((_BYTE *)v41 + *(unsigned __int8 *)(a11 + v35)))
      v37 = 1 << v35;
    else
      v37 = 0;
    result |= v37;
    ++v35;
  }
  while (v35 != 4);
  return result;
}

uint64_t sub_1C97FE780(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[4];
  uint64_t v38;

  v11 = 0;
  v38 = *MEMORY[0x1E0C80C00];
  v33 = 16 * a10;
  v13 = 4 * a10;
  memset(v37, 0, sizeof(v37));
  do
  {
    v14 = 0;
    v34 = a4;
    v35 = a6;
    v15 = a4;
    v16 = a9;
    v36 = a8;
    do
    {
      v17 = 0;
      v18 = 0;
      v19 = v15;
      v20 = a9;
      v21 = a8;
      v22 = a6;
      do
      {
        for (i = 0; i != 4; ++i)
        {
          v24 = *(__int16 *)(v19 + 2 * i);
          v25 = v24 <= 0;
          if (v24 < 0)
            v24 = -v24;
          v26 = v24 * a3;
          v27 = (v26 + a1) >> a2;
          *(_DWORD *)(v20 + 4 * i) = v26;
          if (v25)
            v28 = -v27;
          else
            v28 = (v26 + a1) >> a2;
          *(_DWORD *)(v21 + 4 * i) = (v26 - (v27 << a2)) >> (a2 - 8);
          if (v28 >= 0x7FFF)
            v28 = 0x7FFF;
          if (v28 <= -32768)
            LOWORD(v28) = 0x8000;
          *(_WORD *)(v22 + 2 * i) = v28;
          v18 |= v27 != 0;
        }
        ++v17;
        v22 += 2 * a7;
        v21 += v13;
        v20 += v13;
        v19 += 2 * a5;
      }
      while (v17 != 4);
      if ((v18 & 1) != 0)
        *((_BYTE *)v37 + v11 + (v14 >> 2)) = 1;
      a6 += 8;
      a8 += 16;
      a9 += 16;
      v15 += 8;
      v29 = v14 >= 0xC;
      v14 += 4;
    }
    while (!v29);
    a6 = v35 + 8 * a7;
    a8 = v36 + v33;
    a9 = v16 + v33;
    a4 = v34 + 8 * a5;
    v29 = v11 >= 0xC;
    v11 += 4;
  }
  while (!v29);
  v30 = 0;
  result = 0;
  do
  {
    if (*((_BYTE *)v37 + *(unsigned __int8 *)(a11 + v30)))
      v32 = 1 << v30;
    else
      v32 = 0;
    result |= v32;
    ++v30;
  }
  while (v30 != 16);
  return result;
}

uint64_t sub_1C97FE980(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[4];
  uint64_t v41;

  v11 = 0;
  v41 = *MEMORY[0x1E0C80C00];
  v35 = 16 * a10;
  v13 = 4 * a10;
  memset(v40, 0, sizeof(v40));
  do
  {
    v14 = 0;
    v36 = v11;
    v37 = a4;
    v15 = 2 * v11;
    v16 = a4;
    v17 = a9;
    v18 = a9;
    v38 = a6;
    v39 = a8;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = v16;
      v22 = v18;
      v23 = a8;
      v24 = a6;
      do
      {
        for (i = 0; i != 4; ++i)
        {
          v26 = *(__int16 *)(v21 + 2 * i);
          v27 = v26 <= 0;
          if (v26 < 0)
            v26 = -v26;
          v28 = v26 * a3;
          v29 = (v28 + a1) >> a2;
          *(_DWORD *)(v22 + 4 * i) = v28;
          if (v27)
            v30 = -v29;
          else
            v30 = (v28 + a1) >> a2;
          *(_DWORD *)(v23 + 4 * i) = (v28 - (v29 << a2)) >> (a2 - 8);
          if (v30 >= 0x7FFF)
            v30 = 0x7FFF;
          if (v30 <= -32768)
            LOWORD(v30) = 0x8000;
          *(_WORD *)(v24 + 2 * i) = v30;
          v20 |= v29 != 0;
        }
        ++v19;
        v24 += 2 * a7;
        v23 += v13;
        v22 += v13;
        v21 += 2 * a5;
      }
      while (v19 != 4);
      if ((v20 & 1) != 0)
        *((_BYTE *)v40 + v15 + (v14 >> 2)) = 1;
      a6 += 8;
      a8 += 16;
      v18 += 16;
      v16 += 8;
      v31 = v14 >= 0x1C;
      v14 += 4;
    }
    while (!v31);
    a6 = v38 + 8 * a7;
    a8 = v39 + v35;
    a9 = v17 + v35;
    a4 = v37 + 8 * a5;
    v11 = v36 + 4;
  }
  while (v36 < 0x1C);
  v32 = 0;
  result = 0;
  do
  {
    if (*((_BYTE *)v40 + *(unsigned __int8 *)(a11 + v32)))
      v34 = 1 << v32;
    else
      v34 = 0;
    result |= v34;
    ++v32;
  }
  while (v32 != 64);
  return result;
}

float sub_1C97FEB88(unint64_t a1, unint64_t a2, int a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, unsigned int *a8)
{
  unsigned int v8;
  int32x4_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  int16x8_t *v21;
  int8x8_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  int v29;
  unsigned int v30;
  char *v31;
  int v32;
  unsigned int v33;
  int v34;
  char *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int16 v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int16x8_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint16x8_t *v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  int v62;
  unsigned int v63;
  char *v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  char *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float result;

  v8 = *a8;
  v9 = 0uLL;
  if (a3)
  {
    if (a2 >= 2)
    {
      v10 = 0;
      v11 = a2 >> 1;
      v12 = v8 + a2 * a1;
      v13.i64[0] = 0x43004300430043;
      v13.i64[1] = 0x43004300430043;
      v14.i64[0] = 0x200020002000200;
      v14.i64[1] = 0x200020002000200;
      v15.i64[0] = 0x3000300030003;
      v15.i64[1] = 0x3000300030003;
      v16 = *a8;
      v17 = *a8;
      do
      {
        v16 = ((_WORD)v16 + (_WORD)a1) & 0xFFF;
        v18 = v12 & 0xFFF;
        if (a1 == 7)
        {
          LODWORD(v20) = 0;
        }
        else
        {
          v19 = 0;
          v20 = 0;
          do
          {
            v21 = (int16x8_t *)(*a5 + v19);
            v22 = vbsl_s8(vmovn_s16(vcgtq_s16(*v21, v13)), *(int8x8_t *)((char *)&unk_1C985EC34 + v17), *(int8x8_t *)((char *)&unk_1C985FC3B + v17));
            v17 = ((_WORD)v17 + 8) & 0xFFF;
            v23 = vqshrun_n_s16(vaddw_s8(*v21, v22), 2uLL);
            v24 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)((char *)v21 + 2 * *a4), vbsl_s8(vmovn_s16(vcgtq_s16(*(int16x8_t *)((char *)v21 + 2 * *a4), v13)), *(int8x8_t *)((char *)&unk_1C985EC34 + v16), *(int8x8_t *)((char *)&unk_1C985FC3B + v16))), 2uLL);
            v25 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)(a5[1] + v19), vbsl_s8(vand_s8(vmovn_s16(vcgtq_s16(vabdq_s16(*(int16x8_t *)(a5[1] + v19), v14), v15)), (int8x8_t)vcgt_u8((uint8x8_t)v23, (uint8x8_t)0x1111111111111111)), *(int8x8_t *)((char *)&unk_1C985EC34 + v18), *(int8x8_t *)((char *)&unk_1C985FC3B + v18))), 2uLL);
            *(int8x8_t *)(*a7 + v20) = v23;
            *(int8x8_t *)(*a7 + *a6 + v20) = v24;
            *(int8x8_t *)(a7[1] + v20) = v25;
            v20 += 8;
            v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, vpadal_u8(vpadal_u8(vpaddl_u8((uint8x8_t)vand_s8(v24, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v23, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v25, (int8x8_t)0x101010101010101)));
            v16 = ((_WORD)v16 + 8) & 0xFFF;
            v18 = ((_WORD)v18 + 8) & 0xFFF;
            v19 += 16;
          }
          while (a1 - 7 > v20);
        }
        v20 = v20;
        if (v20 >= a1)
        {
          v37 = *a6;
        }
        else
        {
          v26 = *a7;
          do
          {
            v27 = *(unsigned __int16 *)(*a5 + 2 * v20);
            if (v27 <= 0x43)
              v28 = (char *)&unk_1C985FC3B;
            else
              v28 = (char *)&unk_1C985EC34;
            v29 = (int)(v28[v17] + v27) >> 2;
            if (v29 >= 255)
              v29 = 255;
            *(_BYTE *)(v26 + v20) = v29 & ~(v29 >> 31);
            v30 = *(unsigned __int16 *)(*a5 + 2 * (v20 + *a4));
            if (v30 <= 0x43)
              v31 = (char *)&unk_1C985FC3B;
            else
              v31 = (char *)&unk_1C985EC34;
            v32 = (int)(v31[v16] + v30) >> 2;
            if (v32 >= 255)
              v32 = 255;
            *(_BYTE *)(*a7 + *a6 + v20) = v32 & ~(v32 >> 31);
            v33 = *(unsigned __int16 *)(a5[1] + 2 * v20);
            if (*(unsigned __int8 *)(*a7 + v20) < 0x12u)
              goto LABEL_25;
            v34 = v33 - 512;
            if (v33 < 0x200)
              v34 = 512 - v33;
            v35 = (char *)&unk_1C985EC34;
            if (v34 <= 3)
LABEL_25:
              v35 = (char *)&unk_1C985FC3B;
            v17 = ((_WORD)v17 + 1) & 0xFFF;
            v16 = ((_WORD)v16 + 1) & 0xFFF;
            v36 = (int)(v35[v18] + v33) >> 2;
            v18 = ((_WORD)v18 + 1) & 0xFFF;
            if (v36 >= 255)
              v36 = 255;
            *(_BYTE *)(a7[1] + v20) = v36 & ~(v36 >> 31);
            v26 = *a7;
            v37 = *a6;
            *a8 += (*(_BYTE *)(a7[1] + v20) & 1) + (*(_BYTE *)(*a7 + v20 + *a6) & 1) + (*(_BYTE *)(*a7 + v20) & 1);
            ++v20;
          }
          while (a1 != v20);
        }
        v38 = dword_1C985AC18[((_WORD)v8 + (_WORD)v10) & 0xFFF];
        LOWORD(v16) = v38 + v16;
        v12 = v38 + v18;
        v39 = a5[1] + 2 * a4[1];
        v17 = v16 & 0xFFF;
        ++v10;
        *a5 += 4 * *a4;
        a5[1] = v39;
        v40 = *a7 + 2 * v37;
        v41 = a7[1] + a6[1];
        *a7 = v40;
        a7[1] = v41;
      }
      while (v10 != v11);
LABEL_63:
      v8 = *a8;
    }
  }
  else if (a2 >= 2)
  {
    v42 = 0;
    v43 = a2 >> 1;
    v44 = v8 + a2 * a1;
    v45.i64[0] = 0xEF00EF00EF00EF00;
    v45.i64[1] = 0xEF00EF00EF00EF00;
    v46.i64[0] = 0x200020002000200;
    v46.i64[1] = 0x200020002000200;
    v47.i64[0] = 0x3000300030003;
    v47.i64[1] = 0x3000300030003;
    v48 = *a8;
    v49 = *a8;
    do
    {
      v48 = ((_WORD)v48 + (_WORD)a1) & 0xFFF;
      v50 = v44 & 0xFFF;
      if (a1 == 7)
      {
        LODWORD(v52) = 0;
      }
      else
      {
        v51 = 0;
        v52 = 0;
        do
        {
          v53 = (uint16x8_t *)(*a5 + v51);
          v54 = *(int8x8_t *)((char *)&unk_1C985EC34 + v49);
          v55 = *(int8x8_t *)((char *)&unk_1C985FC3B + v49);
          v49 = ((_WORD)v49 + 8) & 0xFFF;
          v56 = vqshrun_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)vmovl_s8(vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(*v53, v45)), v54, v55)), *v53, 6uLL), 2uLL);
          v57 = vqshrun_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)vmovl_s8(vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(*(uint16x8_t *)((char *)v53 + 2 * *a4), v45)), *(int8x8_t *)((char *)&unk_1C985EC34 + v48), *(int8x8_t *)((char *)&unk_1C985FC3B + v48))), *(uint16x8_t *)((char *)v53 + 2 * *a4), 6uLL), 2uLL);
          v58 = vqshrun_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)vmovl_s8(vbsl_s8(vand_s8(vmovn_s16(vcgtq_s16((int16x8_t)vabdq_u16(vshrq_n_u16(*(uint16x8_t *)(a5[1] + v51), 6uLL), v46), v47)), (int8x8_t)vcgt_u8((uint8x8_t)v56, (uint8x8_t)0x1111111111111111)), *(int8x8_t *)((char *)&unk_1C985EC34 + v50), *(int8x8_t *)((char *)&unk_1C985FC3B + v50))), *(uint16x8_t *)(a5[1] + v51), 6uLL), 2uLL);
          *(int8x8_t *)(*a7 + v52) = v56;
          *(int8x8_t *)(*a7 + *a6 + v52) = v57;
          *(int8x8_t *)(a7[1] + v52) = v58;
          v52 += 8;
          v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, vpadal_u8(vpadal_u8(vpaddl_u8((uint8x8_t)vand_s8(v57, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v56, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v58, (int8x8_t)0x101010101010101)));
          v48 = ((_WORD)v48 + 8) & 0xFFF;
          v50 = ((_WORD)v50 + 8) & 0xFFF;
          v51 += 16;
        }
        while (a1 - 7 > v52);
      }
      v52 = v52;
      if (v52 >= a1)
      {
        v71 = *a6;
      }
      else
      {
        v59 = *a7;
        do
        {
          v60 = *(unsigned __int16 *)(*a5 + 2 * v52);
          if (v60 >> 8 <= 0x10)
            v61 = (char *)&unk_1C985FC3B;
          else
            v61 = (char *)&unk_1C985EC34;
          v62 = (int)(v61[v49] + (v60 >> 6)) >> 2;
          if (v62 >= 255)
            v62 = 255;
          *(_BYTE *)(v59 + v52) = v62 & ~(v62 >> 31);
          v63 = *(unsigned __int16 *)(*a5 + 2 * (v52 + *a4));
          if (v63 >> 8 <= 0x10)
            v64 = (char *)&unk_1C985FC3B;
          else
            v64 = (char *)&unk_1C985EC34;
          v65 = (int)(v64[v48] + (v63 >> 6)) >> 2;
          if (v65 >= 255)
            v65 = 255;
          *(_BYTE *)(*a7 + *a6 + v52) = v65 & ~(v65 >> 31);
          v66 = *(unsigned __int16 *)(a5[1] + 2 * v52);
          v67 = v66 >> 6;
          if (*(unsigned __int8 *)(*a7 + v52) < 0x12u)
            goto LABEL_56;
          v68 = v67 - 512;
          if ((v66 & 0x8000u) == 0)
            v68 = 512 - v67;
          v69 = (char *)&unk_1C985EC34;
          if (v68 <= 3)
LABEL_56:
            v69 = (char *)&unk_1C985FC3B;
          v49 = ((_WORD)v49 + 1) & 0xFFF;
          v48 = ((_WORD)v48 + 1) & 0xFFF;
          v70 = (int)(v69[v50] + v67) >> 2;
          v50 = ((_WORD)v50 + 1) & 0xFFF;
          if (v70 >= 255)
            v70 = 255;
          *(_BYTE *)(a7[1] + v52) = v70 & ~(v70 >> 31);
          v59 = *a7;
          v71 = *a6;
          *a8 += (*(_BYTE *)(a7[1] + v52) & 1) + (*(_BYTE *)(*a7 + v52 + *a6) & 1) + (*(_BYTE *)(*a7 + v52) & 1);
          ++v52;
        }
        while (a1 != v52);
      }
      v72 = dword_1C985AC18[((_WORD)v8 + (_WORD)v42) & 0xFFF];
      LOWORD(v48) = v72 + v48;
      v44 = v72 + v50;
      v73 = a5[1] + 2 * a4[1];
      v49 = v48 & 0xFFF;
      ++v42;
      *a5 += 4 * *a4;
      a5[1] = v73;
      v74 = *a7 + 2 * v71;
      v75 = a7[1] + a6[1];
      *a7 = v74;
      a7[1] = v75;
    }
    while (v42 != v43);
    goto LABEL_63;
  }
  result = COERCE_FLOAT(vaddvq_s32(v9));
  *a8 = LODWORD(result) + v8;
  return result;
}

uint64_t sub_1C97FF190(uint64_t result, _QWORD *a2, int a3, __int16 *a4, char a5)
{
  uint64_t i;
  int v6;

  if (a3 >= 1)
  {
    for (i = 0; i != a3; *(_BYTE *)(result + i++) = v6 & ~(v6 >> 31))
    {
      v6 = ((1 << (a5 - 1))
          + *a4 * *(unsigned __int8 *)(*a2 + i)
          + a4[1] * *(unsigned __int8 *)(a2[1] + i)
          + a4[2] * *(unsigned __int8 *)(a2[2] + i)
          + a4[3] * *(unsigned __int8 *)(a2[3] + i)) >> a5;
      if (v6 >= 255)
        v6 = 255;
    }
  }
  return result;
}

void sub_1C97FF20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, unsigned int a12, void (*a13)(char *, __int128 *, uint64_t, uint64_t, _QWORD), void (*a14)(uint64_t, char *, _QWORD, uint64_t, char *, void *, _QWORD))
{
  int v18;
  char v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  int v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  int v47;
  int v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  char v57;
  unint64_t v58;
  char v59;
  char v60;
  char *v61;
  char v62;
  void *v63;
  char *v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, char *, _QWORD, uint64_t, char *, void *, _QWORD);
  uint64_t v76;
  int v77;
  int v78;
  void (*v79)(char *, __int128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v80;
  int v81;
  void *v82;
  int v83;
  uint64_t v84;
  int v85;
  unint64_t v86[3];
  char *v87[3];
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v80 = a7;
  v18 = a1;
  v90 = *MEMORY[0x1E0C80C00];
  v88 = 0u;
  v89 = 0u;
  v84 = a4;
  v19 = MEMORY[0x1E0C80A78](a1);
  v21 = (char *)&v69 - ((v20 + 15) & 0x1FFFFFFF0);
  memset(v87, 0, sizeof(v87));
  memset(v86, 0, sizeof(v86));
  v83 = v22;
  v23 = (v22 >> v19);
  v24 = (int)v23 + 16;
  sub_1C97480EC(v87, v24);
  if ((_DWORD)v23 == -16)
  {
    v25 = 0;
  }
  else
  {
    sub_1C971BA44(v86, v24);
    v25 = (_BYTE *)v86[0];
  }
  v85 = a9;
  if ((int)v84 >= v83)
    v26 = v83;
  else
    v26 = v84;
  if (v26)
  {
    v27 = v83;
    if ((int)v84 > v83)
      v27 = v84;
    do
    {
      v28 = v27 % v26;
      v27 = v26;
      v26 = v28;
    }
    while (v28);
  }
  v29 = v87[0];
  if (a5 >= v85)
    v30 = v85;
  else
    v30 = a5;
  if (v30)
  {
    v31 = v85;
    if (a5 > v85)
      v31 = a5;
    do
    {
      v32 = v31 % v30;
      v31 = v30;
      v30 = v32;
    }
    while (v32);
  }
  v69 = (uint64_t)&v69;
  if ((int)v23 < 1)
  {
    if ((int)v23 < -15)
      goto LABEL_26;
    v42 = 0;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v35 = v25;
    v36 = v87[0];
    v37 = v23;
    v38 = ((_DWORD)v84 << 16) / v83;
    do
    {
      v39 = v34 >> 16;
      v40 = v34 >> 8;
      v34 += v38;
      v41 = v39 << v18;
      *v35++ = v40 & 0xF0;
      *(_WORD *)v36 = v41 - v33;
      v36 += 2;
      v33 = v41;
      --v37;
    }
    while (v37);
    v42 = v23;
  }
  v43 = (int)v23 - 1;
  v44 = v24 - v42;
  v45 = &v25[v42];
  v46 = &v29[2 * v42];
  do
  {
    *(_WORD *)v46 = *(_WORD *)&v29[2 * v43];
    v46 += 2;
    *v45++ = v25[v43];
    --v44;
  }
  while (v44);
LABEL_26:
  v82 = v25;
  v81 = v18;
  if (v85 >= 1)
  {
    v47 = 0;
    v48 = 0;
    v49 = (char *)((unint64_t)(v21 + 31) & 0xFFFFFFFFFFFFFFF0);
    v75 = a14;
    v79 = a13;
    v77 = a5 - 3;
    v78 = a5 - 2;
    v74 = a11;
    v76 = a10;
    v73 = (int)v84 - 1;
    v70 = (int)v84 - 2;
    v72 = v49 - 1;
    v50 = &v49[(int)v84];
    v71 = (a5 << 16) / v85;
    do
    {
      v51 = v47 >> 16;
      v52 = (v47 >> 16) - 1;
      if (v47 < 0x10000)
        v52 = 0;
      *(_QWORD *)&v88 = a2 + v52 * a3;
      *((_QWORD *)&v88 + 1) = a2 + ((uint64_t)v47 >> 16) * a3;
      if (v51 <= v78)
        v53 = v51 + 1;
      else
        v53 = a5 - 1;
      v54 = a2 + v53 * a3;
      v55 = v51 <= v77;
      v56 = v51 + 2;
      if (!v55)
        v56 = a5 - 1;
      *(_QWORD *)&v89 = v54;
      *((_QWORD *)&v89 + 1) = a2 + v56 * a3;
      v79(v49, &v88, v84, v76 + 16 * ((unsigned __int16)v47 >> 12), a12);
      v57 = *v49;
      if (v81)
      {
        v58 = 0;
        v59 = *(_BYTE *)(((unint64_t)(v21 + 31) & 0xFFFFFFFFFFFFFFF0) + 1);
        v60 = v49[v73];
        v61 = v72;
        v62 = v49[v70];
        v63 = v82;
        do
        {
          *(v61 - 1) = v57;
          *v61 = v59;
          v61 -= 2;
          v64 = &v50[v58];
          *v64 = v62;
          v64[1] = v60;
          v65 = v58 >= 6;
          v58 += 2;
        }
        while (!v65);
      }
      else
      {
        v66 = 0;
        v67 = v49[v73];
        v68 = v72;
        v63 = v82;
        do
        {
          *v68-- = v57;
          v50[v66++] = v67;
        }
        while (v66 != 4);
      }
      v75(a6, v49, v83, v74, v29, v63, a12);
      v47 += v71;
      a6 += v80;
      ++v48;
    }
    while (v48 != v85);
  }
  if (v82)
    operator delete(v82);
  if (v29)
    operator delete(v29);
}

void sub_1C97FF634(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  *(_QWORD *)(v1 - 208) = *(_QWORD *)(v1 - 176);
  if (*(_QWORD *)(v1 - 208))
  {
    v3 = *(void **)(v1 - 208);
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 152);
  if (v4)
    operator delete(v4);
  _Unwind_Resume(exception_object);
}

int32x4_t sub_1C97FF670(uint64_t *a1, _DWORD *a2, _QWORD *a3, uint64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  uint64x2_t v9;
  int8x16_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int v22;
  uint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x8_t *v44;
  uint64_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t *v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int32x4_t result;
  int16x8_t v92;

  v4 = *a1;
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 8);
  v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v7) & 8);
  v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 8))+ ((v7 >> 1) | 0x1FFFFFFE)));
  v12 = (int8x16_t)vshlq_u64(v9, v11);
  v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  v14 = (v6 - 16);
  if (v6 > 16)
  {
    v16 = a1[1];
    v17 = a1[3];
    if (v13 < 1)
    {
      v27 = 0uLL;
      v26 = 0uLL;
      v25 = 0uLL;
      v20 = 0uLL;
      v21 = 0uLL;
    }
    else
    {
      v20 = 0uLL;
      v21 = 0uLL;
      v22 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      v23 = *a1;
      v24 = (int8x16_t *)a1[2];
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      do
      {
        v28 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 - 1), v10);
        v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)v23, v10);
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 + 1), v10);
        v31 = (uint8x16_t)vandq_s8(*v24, v10);
        v32 = (int8x16_t)vcgtq_u8(v29, v28);
        v33 = (int8x16_t)vcgtq_u8(v29, v30);
        v34 = (int8x16_t)vcgtq_u8(v28, v29);
        v35 = (int8x16_t)vcgtq_u8(v30, v29);
        v36 = vandq_s8(v35, v34);
        v37 = vandq_s8(v33, v32);
        v38 = veorq_s8(v33, v32);
        v39 = veorq_s8(v35, v34);
        v40 = vbicq_s8(v39, v38);
        v41 = vbicq_s8(v38, v39);
        v20 = vsubq_s8(v20, v36);
        v25 = vsubq_s8(v25, v40);
        v26 = vsubq_s8(v26, v41);
        v27 = vsubq_s8(v27, v37);
        v42 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v29.i8);
        v43 = (int8x16_t)vsubl_high_u8(v31, v29);
        v21 = vpadalq_s16(v21, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v36.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v36))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v40)))));
        v8 = vpadalq_s16(v8, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v41))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v37)))));
        v23 += v16;
        v24 = (int8x16_t *)((char *)v24 + v17);
        --v22;
      }
      while (v22);
    }
    v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v20, v25));
    v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v26, v27));
    v8 = vpaddq_s32(v21, v8);
    LODWORD(v15) = 16;
  }
  else
  {
    LODWORD(v15) = 0;
    v12 = vandq_s8(v12, v10);
    v16 = a1[1];
    v17 = a1[3];
    v18 = 0uLL;
    v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    v15 = v15;
    do
    {
      if (v13 < 1)
      {
        v49 = 0uLL;
        v52 = 0uLL;
        v51 = 0uLL;
        v50 = 0uLL;
        v46 = 0uLL;
        v47 = 0uLL;
      }
      else
      {
        v44 = (uint8x8_t *)(v5 + v15);
        v45 = v4 + v15;
        v46 = 0uLL;
        v47 = 0uLL;
        v48 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        v52 = 0uLL;
        do
        {
          v53 = *(uint8x16_t *)(v45 - 1);
          v54 = *(uint8x16_t *)(v45 + 1);
          v55 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v53);
          v56 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v54);
          v57 = (int8x16_t)vcgtq_u8(v53, *(uint8x16_t *)v45);
          v58 = (int8x16_t)vcgtq_u8(v54, *(uint8x16_t *)v45);
          v59 = vandq_s8(v58, v57);
          v60 = vandq_s8(v56, v55);
          v61 = veorq_s8(v56, v55);
          v62 = veorq_s8(v58, v57);
          v63 = vbicq_s8(v62, v61);
          v64 = vbicq_s8(v61, v62);
          v46 = vsubq_s8(v46, v59);
          v50 = vsubq_s8(v50, v63);
          v51 = vsubq_s8(v51, v64);
          v52 = vsubq_s8(v52, v60);
          v65 = (int8x16_t)vsubl_u8(*v44, *(uint8x8_t *)v45);
          v66 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v44->i8, *(uint8x16_t *)v45);
          v47 = vpadalq_s16(v47, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v59.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v59))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v63.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v63)))));
          v49 = vpadalq_s16(v49, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v64.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v64))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v60.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v60)))));
          v45 += v16;
          v44 = (uint8x8_t *)((char *)v44 + v17);
          --v48;
        }
        while (v48);
      }
      v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v46, v50));
      v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v51, v52));
      v8 = vaddq_s32(vpaddq_s32(v47, v49), v8);
      v15 += 16;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    v70 = 0uLL;
    v73 = 0uLL;
    v72 = 0uLL;
    v71 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
  }
  else
  {
    v67 = (int8x16_t *)(v5 + v15);
    v68 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v74 = v4 + v15;
    do
    {
      v75 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 - 1), v12);
      v76 = (uint8x16_t)vandq_s8(*(int8x16_t *)v74, v12);
      v77 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 + 1), v12);
      v78 = (uint8x16_t)vandq_s8(*v67, v12);
      v79 = (int8x16_t)vcgtq_u8(v76, v75);
      v80 = (int8x16_t)vcgtq_u8(v76, v77);
      v81 = (int8x16_t)vcgtq_u8(v75, v76);
      v82 = (int8x16_t)vcgtq_u8(v77, v76);
      v83 = vandq_s8(v82, v81);
      v84 = vandq_s8(v80, v79);
      v85 = veorq_s8(v80, v79);
      v86 = veorq_s8(v82, v81);
      v87 = vbicq_s8(v86, v85);
      v88 = vbicq_s8(v85, v86);
      v68 = vsubq_s8(v68, v83);
      v71 = vsubq_s8(v71, v87);
      v72 = vsubq_s8(v72, v88);
      v73 = vsubq_s8(v73, v84);
      v89 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v78.i8, *(uint8x8_t *)v76.i8);
      v90 = (int8x16_t)vsubl_high_u8(v78, v76);
      v69 = vpadalq_s16(v69, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v83.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v83))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v87.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v87)))));
      v70 = vpadalq_s16(v70, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v88.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v88))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v84.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v84)))));
      v74 += v16;
      v67 = (int8x16_t *)((char *)v67 + v17);
      --v13;
    }
    while (v13);
  }
  result = vaddq_s32(vpaddq_s32(v69, v70), v8);
  v92 = vpaddq_s16((int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v68, v71)), (int16x8_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v72, v73)));
  v92.i64[0] = vpaddq_s16(v92, v92).u64[0];
  *a2 = v92.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v92.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1C97FFAB0(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64x2_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8x16_t *v18;
  int32x4_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x8_t *v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int v46;
  uint64x2_t v47;
  int8x16_t v48;
  int8x16_t *v49;
  uint8x16_t v50;
  uint8x16_t v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int32x4_t result;
  int16x8_t v75;

  v3 = *((_DWORD *)a1 + 11);
  v4 = *((_DWORD *)a1 + 12);
  v5 = ~(v4 >> 2) & 1;
  v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3)
    v7 = -1;
  else
    v7 = 0;
  v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  v12 = *a1;
  v11 = a1[1];
  v13 = *a1 + v11 * v5;
  v14 = a1[3];
  v15 = a1[2] + v14 * v5;
  v16 = v11 + v11 * v5;
  v17 = 0;
  if (v8 <= 16)
  {
    v19 = 0uLL;
    v21 = 0uLL;
    v20 = 0uLL;
  }
  else
  {
    v18 = (uint8x16_t *)(v12 + v16);
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    do
    {
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      if (v10 >= 1)
      {
        v28 = 0;
        v29 = *(uint8x16_t *)(v13 + v17);
        v30 = *(uint8x16_t *)(v13 + v17 - v11);
        v31 = (uint8x8_t *)(v15 + v17);
        v32 = v18;
        do
        {
          v33 = *v32;
          v34 = (int8x16_t)vcgtq_u8(v29, v30);
          v35 = (int8x16_t)vcgtq_u8(v29, *v32);
          v36 = (int8x16_t)vcgtq_u8(v30, v29);
          v37 = (int8x16_t)vcgtq_u8(*v32, v29);
          v38 = vandq_s8(v37, v36);
          v39 = vandq_s8(v35, v34);
          v40 = veorq_s8(v35, v34);
          v41 = veorq_s8(v37, v36);
          v42 = vbicq_s8(v41, v40);
          v43 = vbicq_s8(v40, v41);
          v25 = vsubq_s8(v25, v38);
          v24 = vsubq_s8(v24, v42);
          v23 = vsubq_s8(v23, v43);
          v22 = vsubq_s8(v22, v39);
          v44 = (int8x16_t)vsubl_u8(*v31, *(uint8x8_t *)v29.i8);
          v45 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v31->i8, v29);
          v27 = vpadalq_s16(v27, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)))));
          v31 = (uint8x8_t *)((char *)v31 + v14);
          ++v28;
          v26 = vpadalq_s16(v26, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)))));
          v32 = (uint8x16_t *)((char *)v32 + v11);
          v30 = v29;
          v29 = v33;
        }
        while (v28 < v10);
      }
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v25, v24));
      v21 = vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v23, v22));
      v19 = vaddq_s32(vpaddq_s32(v27, v26), v19);
      v17 += 16;
      ++v18;
    }
    while (v17 < (v8 - 16));
    v17 = (v8 - 1) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    v56 = 0uLL;
    v59 = 0uLL;
    v58 = 0uLL;
    v57 = 0uLL;
    v54 = 0uLL;
    v55 = 0uLL;
  }
  else
  {
    v46 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-8 * (((_DWORD)a1[4] & 8u) + *((_DWORD *)a1 + 10)));
    v47.i64[0] = -1;
    v47.i64[1] = -1;
    v48 = (int8x16_t)vshlq_u64(v47, v9);
    v49 = (int8x16_t *)(v13 + v17);
    v50 = (uint8x16_t)vandq_s8(*v49, v48);
    v51 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v49 - v11), v48);
    v52 = (int8x16_t *)(v15 + v17);
    v53 = (int8x16_t *)(v12 + v17 + v16);
    v54 = 0uLL;
    v55 = 0uLL;
    v56 = 0uLL;
    v57 = 0uLL;
    v58 = 0uLL;
    v59 = 0uLL;
    do
    {
      v60 = (uint8x16_t)vandq_s8(*v53, v48);
      v61 = (uint8x16_t)vandq_s8(*v52, v48);
      v62 = (int8x16_t)vcgtq_u8(v50, v51);
      v63 = (int8x16_t)vcgtq_u8(v50, v60);
      v64 = (int8x16_t)vcgtq_u8(v51, v50);
      v65 = (int8x16_t)vcgtq_u8(v60, v50);
      v66 = vandq_s8(v65, v64);
      v67 = vandq_s8(v63, v62);
      v68 = veorq_s8(v63, v62);
      v69 = veorq_s8(v65, v64);
      v70 = vbicq_s8(v69, v68);
      v71 = vbicq_s8(v68, v69);
      v54 = vsubq_s8(v54, v66);
      v57 = vsubq_s8(v57, v70);
      v58 = vsubq_s8(v58, v71);
      v59 = vsubq_s8(v59, v67);
      v72 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v61.i8, *(uint8x8_t *)v50.i8);
      v73 = (int8x16_t)vsubl_high_u8(v61, v50);
      v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
      v52 = (int8x16_t *)((char *)v52 + v14);
      ++v46;
      v56 = vpadalq_s16(v56, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
      v53 = (int8x16_t *)((char *)v53 + v11);
      v51 = v50;
      v50 = v60;
    }
    while (v46 < v10);
  }
  result = vaddq_s32(vpaddq_s32(v55, v56), v19);
  v75 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v54, v57)), (int16x8_t)vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v58, v59)));
  v75.i64[0] = vpaddq_s16(v75, v75).u64[0];
  *a2 = v75.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v75.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1C97FFDE4(uint64_t *a1, _DWORD *a2, _QWORD *a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int32x4_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  int8x16_t v52;
  int32x4_t v53;
  int v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int32x4_t result;
  int16x8_t v101;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      v28 = 0uLL;
      v27 = 0uLL;
      v26 = 0uLL;
      v21 = 0uLL;
      v22 = 0uLL;
    }
    else
    {
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = v12;
      v24 = v14;
      v25 = v17;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) - 1), v9);
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 + 1), v9);
        v32 = (uint8x16_t)vandq_s8(*v25, v9);
        v33 = (int8x16_t)vcgtq_u8(v30, v29);
        v34 = (int8x16_t)vcgtq_u8(v30, v31);
        v35 = (int8x16_t)vcgtq_u8(v29, v30);
        v36 = (int8x16_t)vcgtq_u8(v31, v30);
        v37 = vandq_s8(v36, v35);
        v38 = vandq_s8(v34, v33);
        v39 = veorq_s8(v34, v33);
        v40 = veorq_s8(v36, v35);
        v41 = vbicq_s8(v40, v39);
        v42 = vbicq_s8(v39, v40);
        v21 = vsubq_s8(v21, v37);
        v26 = vsubq_s8(v26, v41);
        v27 = vsubq_s8(v27, v42);
        v28 = vsubq_s8(v28, v38);
        v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    v7 = vpaddq_s32(v22, v7);
    v18 = 16;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    v46 = v18;
    v47 = v13 + v13 * v6 + v18 + v14 + 1;
    v48 = v13 * (v6 - 1) + v18 + v14 - 1;
    v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        v55 = 0uLL;
        v58 = 0uLL;
        v57 = 0uLL;
        v56 = 0uLL;
        v52 = 0uLL;
        v53 = 0uLL;
      }
      else
      {
        v50 = 0;
        v51 = (uint8x8_t *)&v17->i8[v46];
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = v12;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v59 = *(uint8x16_t *)(v49 + v50);
          v60 = *(uint8x16_t *)(v48 + v50);
          v61 = *(uint8x16_t *)(v47 + v50);
          v62 = (int8x16_t)vcgtq_u8(v59, v60);
          v63 = (int8x16_t)vcgtq_u8(v59, v61);
          v64 = (int8x16_t)vcgtq_u8(v60, v59);
          v65 = (int8x16_t)vcgtq_u8(v61, v59);
          v66 = vandq_s8(v65, v64);
          v67 = vandq_s8(v63, v62);
          v68 = veorq_s8(v63, v62);
          v69 = veorq_s8(v65, v64);
          v70 = vbicq_s8(v69, v68);
          v71 = vbicq_s8(v68, v69);
          v52 = vsubq_s8(v52, v66);
          v56 = vsubq_s8(v56, v70);
          v57 = vsubq_s8(v57, v71);
          v58 = vsubq_s8(v58, v67);
          v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    v18 = v46;
  }
  if (v12 < 1)
  {
    v80 = 0uLL;
    v83 = 0uLL;
    v82 = 0uLL;
    v81 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
  }
  else
  {
    v74 = (int8x16_t *)((char *)v17 + v18);
    v75 = v13 + v13 * v6 + 1;
    v76 = v14 + v18;
    v77 = v13 * (v6 - 1) - 1;
    v78 = 0uLL;
    v79 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    do
    {
      v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      v87 = (uint8x16_t)vandq_s8(*v74, v11);
      v88 = (int8x16_t)vcgtq_u8(v85, v84);
      v89 = (int8x16_t)vcgtq_u8(v85, v86);
      v90 = (int8x16_t)vcgtq_u8(v84, v85);
      v91 = (int8x16_t)vcgtq_u8(v86, v85);
      v92 = vandq_s8(v91, v90);
      v93 = vandq_s8(v89, v88);
      v94 = veorq_s8(v89, v88);
      v95 = veorq_s8(v91, v90);
      v96 = vbicq_s8(v95, v94);
      v97 = vbicq_s8(v94, v95);
      v78 = vsubq_s8(v78, v92);
      v81 = vsubq_s8(v81, v96);
      v82 = vsubq_s8(v82, v97);
      v83 = vsubq_s8(v83, v93);
      v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1C98002B0(uint64_t *a1, _DWORD *a2, _QWORD *a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int32x4_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  int8x16_t v52;
  int32x4_t v53;
  int v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int32x4_t result;
  int16x8_t v101;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      v28 = 0uLL;
      v27 = 0uLL;
      v26 = 0uLL;
      v21 = 0uLL;
      v22 = 0uLL;
    }
    else
    {
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = v12;
      v24 = v14;
      v25 = v17;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 - 1), v9);
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) + 1), v9);
        v32 = (uint8x16_t)vandq_s8(*v25, v9);
        v33 = (int8x16_t)vcgtq_u8(v30, v29);
        v34 = (int8x16_t)vcgtq_u8(v30, v31);
        v35 = (int8x16_t)vcgtq_u8(v29, v30);
        v36 = (int8x16_t)vcgtq_u8(v31, v30);
        v37 = vandq_s8(v36, v35);
        v38 = vandq_s8(v34, v33);
        v39 = veorq_s8(v34, v33);
        v40 = veorq_s8(v36, v35);
        v41 = vbicq_s8(v40, v39);
        v42 = vbicq_s8(v39, v40);
        v21 = vsubq_s8(v21, v37);
        v26 = vsubq_s8(v26, v41);
        v27 = vsubq_s8(v27, v42);
        v28 = vsubq_s8(v28, v38);
        v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    v7 = vpaddq_s32(v22, v7);
    v18 = 16;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    v46 = v18;
    v47 = v13 * (v6 - 1) + v18 + v14 + 1;
    v48 = v13 + v13 * v6 + v18 + v14 - 1;
    v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        v55 = 0uLL;
        v58 = 0uLL;
        v57 = 0uLL;
        v56 = 0uLL;
        v52 = 0uLL;
        v53 = 0uLL;
      }
      else
      {
        v50 = 0;
        v51 = (uint8x8_t *)&v17->i8[v46];
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = v12;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v59 = *(uint8x16_t *)(v49 + v50);
          v60 = *(uint8x16_t *)(v48 + v50);
          v61 = *(uint8x16_t *)(v47 + v50);
          v62 = (int8x16_t)vcgtq_u8(v59, v60);
          v63 = (int8x16_t)vcgtq_u8(v59, v61);
          v64 = (int8x16_t)vcgtq_u8(v60, v59);
          v65 = (int8x16_t)vcgtq_u8(v61, v59);
          v66 = vandq_s8(v65, v64);
          v67 = vandq_s8(v63, v62);
          v68 = veorq_s8(v63, v62);
          v69 = veorq_s8(v65, v64);
          v70 = vbicq_s8(v69, v68);
          v71 = vbicq_s8(v68, v69);
          v52 = vsubq_s8(v52, v66);
          v56 = vsubq_s8(v56, v70);
          v57 = vsubq_s8(v57, v71);
          v58 = vsubq_s8(v58, v67);
          v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    v18 = v46;
  }
  if (v12 < 1)
  {
    v80 = 0uLL;
    v83 = 0uLL;
    v82 = 0uLL;
    v81 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
  }
  else
  {
    v74 = (int8x16_t *)((char *)v17 + v18);
    v75 = v13 * (v6 - 1) + 1;
    v76 = v14 + v18;
    v77 = v13 + v13 * v6 - 1;
    v78 = 0uLL;
    v79 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    do
    {
      v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      v87 = (uint8x16_t)vandq_s8(*v74, v11);
      v88 = (int8x16_t)vcgtq_u8(v85, v84);
      v89 = (int8x16_t)vcgtq_u8(v85, v86);
      v90 = (int8x16_t)vcgtq_u8(v84, v85);
      v91 = (int8x16_t)vcgtq_u8(v86, v85);
      v92 = vandq_s8(v91, v90);
      v93 = vandq_s8(v89, v88);
      v94 = veorq_s8(v89, v88);
      v95 = veorq_s8(v91, v90);
      v96 = vbicq_s8(v95, v94);
      v97 = vbicq_s8(v94, v95);
      v78 = vsubq_s8(v78, v92);
      v81 = vsubq_s8(v81, v96);
      v82 = vsubq_s8(v82, v97);
      v83 = vsubq_s8(v83, v93);
      v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int8x16_t sub_1C980077C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int16x8_t v8;
  uint64x2_t v9;
  int8x16_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint16x8_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int v27;
  uint64_t v28;
  int8x16_t *v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  uint8x8_t *v52;
  int v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  int16x8_t v59;
  int16x8_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  uint64_t v78;
  int16x8_t v79;
  int8x16_t *v80;
  uint64_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint8x16_t v88;
  uint8x16_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t result;

  v4 = *a1;
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 8);
  v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v7) & 0x10);
  v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 4))+ ((v7 >> 1) | 0xFFFFFFE)));
  v12 = (int8x16_t)vshlq_u64(v9, v11);
  v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  v14 = (v6 - 8);
  if (v6 > 8)
  {
    v16 = a1[1];
    v20 = 0uLL;
    v17 = a1[3];
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    if (v13 >= 1)
    {
      v27 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      v28 = *a1;
      v29 = (int8x16_t *)a1[2];
      do
      {
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 - 2), v10);
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)v28, v10);
        v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 + 2), v10);
        v33 = (uint8x16_t)vandq_s8(*v29, v10);
        v34 = (int8x16_t)vcgtq_u8(v31, v30);
        v35 = (int8x16_t)vcgtq_u8(v31, v32);
        v36 = (int8x16_t)vcgtq_u8(v30, v31);
        v37 = (int8x16_t)vcgtq_u8(v32, v31);
        v38 = vandq_s8(v37, v36);
        v39 = vandq_s8(v35, v34);
        v40 = veorq_s8(v35, v34);
        v41 = veorq_s8(v37, v36);
        v42 = vbicq_s8(v41, v40);
        v43 = vbicq_s8(v40, v41);
        v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v38);
        v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v42);
        v20 = (int16x8_t)vsubq_s8((int8x16_t)v20, v43);
        v8 = (int16x8_t)vsubq_s8((int8x16_t)v8, v39);
        v44 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v31.i8);
        v45 = (int8x16_t)vsubl_high_u8(v33, v31);
        v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38)), v26), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)));
        v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)), v25), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
        v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43)), v24), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        v23 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)), v23), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v28 += v16;
        v29 = (int8x16_t *)((char *)v29 + v17);
        --v27;
      }
      while (v27);
    }
    v46 = (int8x16_t)vpaddq_s16(v22, v21);
    v47 = (int8x16_t)vpaddq_s16(v20, v8);
    v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v46, v47), vuzp2q_s8(v46, v47)));
    v48 = vuzp1q_s16(v24, v23);
    v49 = vpaddq_s16(vuzp2q_s16(v26, v25), vuzp2q_s16(v24, v23));
    v19 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v26, v25), v48));
    v8 = (int16x8_t)vpaddlq_s16(v49);
    LODWORD(v15) = 8;
  }
  else
  {
    LODWORD(v15) = 0;
    v12 = vandq_s8(v12, v10);
    v16 = a1[1];
    v17 = a1[3];
    v18 = 0uLL;
    v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    v15 = v15;
    do
    {
      if (v13 < 1)
      {
        v56 = 0uLL;
        v60 = 0uLL;
        v59 = 0uLL;
        v57 = 0uLL;
        v50 = 0uLL;
        v55 = 0uLL;
        v54 = 0uLL;
        v51 = 0uLL;
      }
      else
      {
        v50 = 0uLL;
        v51 = 0uLL;
        v52 = (uint8x8_t *)(v5 + 2 * v15);
        v53 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        v54 = 0uLL;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = v4 + 2 * v15;
        v59 = 0uLL;
        v60 = 0uLL;
        do
        {
          v61 = *(uint8x16_t *)(v58 - 2);
          v62 = *(uint8x16_t *)(v58 + 2);
          v63 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v61);
          v64 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v62);
          v65 = (int8x16_t)vcgtq_u8(v61, *(uint8x16_t *)v58);
          v66 = (int8x16_t)vcgtq_u8(v62, *(uint8x16_t *)v58);
          v67 = vandq_s8(v66, v65);
          v68 = vandq_s8(v64, v63);
          v69 = veorq_s8(v64, v63);
          v70 = veorq_s8(v66, v65);
          v71 = vbicq_s8(v70, v69);
          v72 = vbicq_s8(v69, v70);
          v50 = (int16x8_t)vsubq_s8((int8x16_t)v50, v67);
          v57 = (int16x8_t)vsubq_s8((int8x16_t)v57, v71);
          v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v72);
          v60 = (int16x8_t)vsubq_s8((int8x16_t)v60, v68);
          v73 = (int8x16_t)vsubl_u8(*v52, *(uint8x8_t *)v58);
          v74 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v52->i8, *(uint8x16_t *)v58);
          v51 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v67)), v51), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)));
          v54 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v71)), v54), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)));
          v55 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v72)), v55), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v68)), v56), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v68.i8)));
          v58 += v16;
          v52 = (uint8x8_t *)((char *)v52 + v17);
          --v53;
        }
        while (v53);
      }
      v75 = (int8x16_t)vpaddq_s16(v50, v57);
      v76 = (int8x16_t)vpaddq_s16(v59, v60);
      v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v75, v76), vuzp2q_s8(v75, v76)));
      v19 = vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v51, v54), vuzp1q_s16(v55, v56)));
      v8 = (int16x8_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v51, v54), vuzp2q_s16(v55, v56)));
      v15 += 8;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    v87 = 0uLL;
    v86 = 0uLL;
    v85 = 0uLL;
    v77 = 0uLL;
    v84 = 0uLL;
    v83 = 0uLL;
    v82 = 0uLL;
    v79 = 0uLL;
  }
  else
  {
    v77 = 0uLL;
    v78 = (2 * v15);
    v79 = 0uLL;
    v80 = (int8x16_t *)(v5 + v78);
    v81 = v4 + v78;
    v82 = 0uLL;
    v83 = 0uLL;
    v84 = 0uLL;
    v85 = 0uLL;
    v86 = 0uLL;
    v87 = 0uLL;
    do
    {
      v88 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 - 2), v12);
      v89 = (uint8x16_t)vandq_s8(*(int8x16_t *)v81, v12);
      v90 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 + 2), v12);
      v91 = (uint8x16_t)vandq_s8(*v80, v12);
      v92 = (int8x16_t)vcgtq_u8(v89, v88);
      v93 = (int8x16_t)vcgtq_u8(v89, v90);
      v94 = (int8x16_t)vcgtq_u8(v88, v89);
      v95 = (int8x16_t)vcgtq_u8(v90, v89);
      v96 = vandq_s8(v95, v94);
      v97 = vandq_s8(v93, v92);
      v98 = veorq_s8(v93, v92);
      v99 = veorq_s8(v95, v94);
      v100 = vbicq_s8(v99, v98);
      v101 = vbicq_s8(v98, v99);
      v77 = (int16x8_t)vsubq_s8((int8x16_t)v77, v96);
      v85 = (int16x8_t)vsubq_s8((int8x16_t)v85, v100);
      v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v101);
      v87 = (int16x8_t)vsubq_s8((int8x16_t)v87, v97);
      v102 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v91.i8, *(uint8x8_t *)v89.i8);
      v103 = (int8x16_t)vsubl_high_u8(v91, v89);
      v79 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v96)), v79), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)));
      v82 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v100)), v82), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v100.i8)));
      v83 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v101)), v83), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v101.i8)));
      v84 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v97)), v84), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)));
      v81 += v16;
      v80 = (int8x16_t *)((char *)v80 + v17);
      --v13;
    }
    while (v13);
  }
  v104 = (int8x16_t)vpaddq_s16(v77, v85);
  v105 = (int8x16_t)vpaddq_s16(v86, v87);
  v106 = (int8x16_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v104, v105), vuzp2q_s8(v104, v105)));
  v107 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v79, v82), vuzp1q_s16(v83, v84)));
  v108 = (int8x16_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v79, v82), vuzp2q_s16(v83, v84)));
  *(_DWORD *)a2 = v106.i32[0];
  v104.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v106.i8, *(int8x8_t *)v104.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v104.i32[1];
  *(_QWORD *)a3 = v107.i64[0];
  result = vextq_s8(v107, v108, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v108.i64[1];
  return result;
}

int8x16_t sub_1C9800C40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64x2_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8x16_t *v19;
  uint16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x8_t *v35;
  uint8x16_t *v36;
  uint8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  int v53;
  uint64x2_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  uint8x16_t v57;
  uint8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x8_t v88;
  int8x16_t result;

  v3 = *((_DWORD *)a1 + 11);
  v4 = *((_DWORD *)a1 + 12);
  v5 = ~(v4 >> 2) & 1;
  v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3)
    v7 = -1;
  else
    v7 = 0;
  v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  v12 = *a1;
  v11 = a1[1];
  v13 = *a1 + v11 * v5;
  v14 = a1[3];
  v15 = a1[2] + v14 * v5;
  v16 = v11 + v11 * v5;
  if (v8 <= 8)
  {
    v52 = 0;
    v18 = -v11;
    v20 = 0uLL;
    v22 = 0uLL;
    v21 = 0uLL;
  }
  else
  {
    v17 = 0;
    v18 = -v11;
    v19 = (uint8x16_t *)(v12 + v16);
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    do
    {
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      if (v10 >= 1)
      {
        v31 = 0;
        v32 = (uint8x16_t *)(v13 + 2 * v17);
        v33 = *v32;
        v34 = *(uint8x16_t *)((char *)v32 - v11);
        v35 = (uint8x8_t *)(v15 + 2 * v17);
        v36 = v19;
        do
        {
          v37 = *v36;
          v38 = (int8x16_t)vcgtq_u8(v33, *v36);
          v39 = (int8x16_t)vcgtq_u8(v33, v34);
          v40 = (int8x16_t)vcgtq_u8(*v36, v33);
          v41 = (int8x16_t)vcgtq_u8(v34, v33);
          v42 = vandq_s8(v40, v41);
          v43 = vandq_s8(v38, v39);
          v44 = veorq_s8(v38, v39);
          v45 = veorq_s8(v40, v41);
          v46 = vbicq_s8(v45, v44);
          v47 = vbicq_s8(v44, v45);
          v26 = (int16x8_t)vsubq_s8((int8x16_t)v26, v42);
          v25 = (int16x8_t)vsubq_s8((int8x16_t)v25, v46);
          v24 = (int16x8_t)vsubq_s8((int8x16_t)v24, v47);
          v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v43);
          v48 = (int8x16_t)vsubl_u8(*v35, *(uint8x8_t *)v33.i8);
          v49 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v35->i8, v33);
          v30 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v42)), v30), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
          v29 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v46)), v29), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v46.i8)));
          v28 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v47)), v28), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v47.i8)));
          v35 = (uint8x8_t *)((char *)v35 + v14);
          ++v31;
          v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v43)), v27), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
          v36 = (uint8x16_t *)((char *)v36 + v11);
          v34 = v33;
          v33 = v37;
        }
        while (v31 < v10);
      }
      v50 = (int8x16_t)vpaddq_s16(v26, v25);
      v51 = (int8x16_t)vpaddq_s16(v24, v23);
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v50, v51), vuzp2q_s8(v50, v51)));
      v21 = vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v30, v29), vuzp1q_s16(v28, v27)));
      v22 = vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v30, v29), vuzp2q_s16(v28, v27)));
      v17 += 8;
      ++v19;
    }
    while (v17 < (v8 - 8));
    v52 = (2 * (v8 + 2147483639) + 16) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    v68 = 0uLL;
    v67 = 0uLL;
    v66 = 0uLL;
    v59 = 0uLL;
    v65 = 0uLL;
    v64 = 0uLL;
    v63 = 0uLL;
    v60 = 0uLL;
  }
  else
  {
    v53 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-16 * (((_DWORD)a1[4] & 4u) + *((_DWORD *)a1 + 10)));
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    v55 = (int8x16_t)vshlq_u64(v54, v9);
    v56 = (int8x16_t *)(v13 + v52);
    v57 = (uint8x16_t)vandq_s8(*v56, v55);
    v58 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v56 + v18), v55);
    v59 = 0uLL;
    v60 = 0uLL;
    v61 = (int8x16_t *)(v15 + v52);
    v62 = (int8x16_t *)(v12 + v52 + v16);
    v63 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v68 = 0uLL;
    do
    {
      v69 = (uint8x16_t)vandq_s8(*v62, v55);
      v70 = (uint8x16_t)vandq_s8(*v61, v55);
      v71 = (int8x16_t)vcgtq_u8(v57, v69);
      v72 = (int8x16_t)vcgtq_u8(v57, v58);
      v73 = (int8x16_t)vcgtq_u8(v69, v57);
      v74 = (int8x16_t)vcgtq_u8(v58, v57);
      v75 = vandq_s8(v73, v74);
      v76 = vandq_s8(v71, v72);
      v77 = veorq_s8(v71, v72);
      v78 = veorq_s8(v73, v74);
      v79 = vbicq_s8(v78, v77);
      v80 = vbicq_s8(v77, v78);
      v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v75);
      v66 = (int16x8_t)vsubq_s8((int8x16_t)v66, v79);
      v67 = (int16x8_t)vsubq_s8((int8x16_t)v67, v80);
      v68 = (int16x8_t)vsubq_s8((int8x16_t)v68, v76);
      v81 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v57.i8);
      v82 = (int8x16_t)vsubl_high_u8(v70, v57);
      v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v75)), v60), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v75.i8)));
      v63 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v79)), v63), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v79.i8)));
      v64 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v80)), v64), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v80.i8)));
      v61 = (int8x16_t *)((char *)v61 + v14);
      ++v53;
      v65 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v76)), v65), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
      v62 = (int8x16_t *)((char *)v62 + v11);
      v58 = v57;
      v57 = v69;
    }
    while (v53 < v10);
  }
  v83 = (int8x16_t)vpaddq_s16(v59, v66);
  v84 = (int8x16_t)vpaddq_s16(v67, v68);
  v85 = (int8x16_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v83, v84), vuzp2q_s8(v83, v84)));
  v86 = (int8x16_t)vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v60, v63), vuzp1q_s16(v64, v65)));
  v87 = (int8x16_t)vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v60, v63), vuzp2q_s16(v64, v65)));
  *(_DWORD *)a2 = v85.i32[0];
  v88 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v85.i8, v88, 4uLL);
  *(_DWORD *)(a2 + 16) = v88.i32[1];
  *(_QWORD *)a3 = v86.i64[0];
  result = vextq_s8(v86, v87, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v87.i64[1];
  return result;
}

int8x16_t sub_1C9800FFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int16x8_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int v28;
  uint64_t v29;
  int8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint8x8_t *v57;
  int v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  int8x16_t *v83;
  uint64_t v84;
  uint64_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint64_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t result;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    if (v12 >= 1)
    {
      v28 = v12;
      v29 = v14;
      v30 = v17;
      do
      {
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) - 2), v9);
        v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 + 2), v9);
        v34 = (uint8x16_t)vandq_s8(*v30, v9);
        v35 = (int8x16_t)vcgtq_u8(v32, v31);
        v36 = (int8x16_t)vcgtq_u8(v32, v33);
        v37 = (int8x16_t)vcgtq_u8(v31, v32);
        v38 = (int8x16_t)vcgtq_u8(v33, v32);
        v39 = vandq_s8(v38, v37);
        v40 = vandq_s8(v36, v35);
        v41 = veorq_s8(v36, v35);
        v42 = veorq_s8(v38, v37);
        v43 = vbicq_s8(v42, v41);
        v44 = vbicq_s8(v41, v42);
        v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    v47 = (int8x16_t)vpaddq_s16(v23, v22);
    v48 = (int8x16_t)vpaddq_s16(v21, v7);
    v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    v18 = 8;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    v50 = v18;
    v51 = v13 + v13 * v6 + 2 * v18 + v14 + 2;
    v52 = v13 * (v6 - 1) + 2 * v18 + v14 - 2;
    v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        v61 = 0uLL;
        v64 = 0uLL;
        v63 = 0uLL;
        v62 = 0uLL;
        v55 = 0uLL;
        v60 = 0uLL;
        v59 = 0uLL;
        v56 = 0uLL;
      }
      else
      {
        v54 = 0;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        v58 = v12;
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        do
        {
          v65 = *(uint8x16_t *)(v53 + v54);
          v66 = *(uint8x16_t *)(v52 + v54);
          v67 = *(uint8x16_t *)(v51 + v54);
          v68 = (int8x16_t)vcgtq_u8(v65, v66);
          v69 = (int8x16_t)vcgtq_u8(v65, v67);
          v70 = (int8x16_t)vcgtq_u8(v66, v65);
          v71 = (int8x16_t)vcgtq_u8(v67, v65);
          v72 = vandq_s8(v71, v70);
          v73 = vandq_s8(v69, v68);
          v74 = veorq_s8(v69, v68);
          v75 = veorq_s8(v71, v70);
          v76 = vbicq_s8(v75, v74);
          v77 = vbicq_s8(v74, v75);
          v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      v80 = (int8x16_t)vpaddq_s16(v55, v62);
      v81 = (int8x16_t)vpaddq_s16(v63, v64);
      v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    v18 = v50;
  }
  if (v12 < 1)
  {
    v94 = 0uLL;
    v93 = 0uLL;
    v92 = 0uLL;
    v86 = 0uLL;
    v91 = 0uLL;
    v90 = 0uLL;
    v89 = 0uLL;
    v87 = 0uLL;
  }
  else
  {
    v82 = 2 * v18;
    v83 = (int8x16_t *)((char *)v17 + v82);
    v84 = v13 + v13 * v6 + 2;
    v85 = v14 + v82;
    v86 = 0uLL;
    v87 = 0uLL;
    v88 = v13 * (v6 - 1) - 2;
    v89 = 0uLL;
    v90 = 0uLL;
    v91 = 0uLL;
    v92 = 0uLL;
    v93 = 0uLL;
    v94 = 0uLL;
    do
    {
      v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      v98 = (uint8x16_t)vandq_s8(*v83, v11);
      v99 = (int8x16_t)vcgtq_u8(v96, v95);
      v100 = (int8x16_t)vcgtq_u8(v96, v97);
      v101 = (int8x16_t)vcgtq_u8(v95, v96);
      v102 = (int8x16_t)vcgtq_u8(v97, v96);
      v103 = vandq_s8(v102, v101);
      v104 = vandq_s8(v100, v99);
      v105 = veorq_s8(v100, v99);
      v106 = veorq_s8(v102, v101);
      v107 = vbicq_s8(v106, v105);
      v108 = vbicq_s8(v105, v106);
      v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  v111 = (int8x16_t)vpaddq_s16(v86, v92);
  v112 = (int8x16_t)vpaddq_s16(v93, v94);
  v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(_QWORD *)a3 = v114.i64[0];
  result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v115.i64[1];
  return result;
}

int8x16_t sub_1C980154C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int16x8_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int v28;
  uint64_t v29;
  int8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint8x8_t *v57;
  int v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  int8x16_t *v83;
  uint64_t v84;
  uint64_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint64_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t result;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    if (v12 >= 1)
    {
      v28 = v12;
      v29 = v14;
      v30 = v17;
      do
      {
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 - 2), v9);
        v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) + 2), v9);
        v34 = (uint8x16_t)vandq_s8(*v30, v9);
        v35 = (int8x16_t)vcgtq_u8(v32, v31);
        v36 = (int8x16_t)vcgtq_u8(v32, v33);
        v37 = (int8x16_t)vcgtq_u8(v31, v32);
        v38 = (int8x16_t)vcgtq_u8(v33, v32);
        v39 = vandq_s8(v38, v37);
        v40 = vandq_s8(v36, v35);
        v41 = veorq_s8(v36, v35);
        v42 = veorq_s8(v38, v37);
        v43 = vbicq_s8(v42, v41);
        v44 = vbicq_s8(v41, v42);
        v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    v47 = (int8x16_t)vpaddq_s16(v23, v22);
    v48 = (int8x16_t)vpaddq_s16(v21, v7);
    v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    v18 = 8;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    v50 = v18;
    v51 = v13 * (v6 - 1) + 2 * v18 + v14 + 2;
    v52 = v13 + v13 * v6 + 2 * v18 + v14 - 2;
    v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        v61 = 0uLL;
        v64 = 0uLL;
        v63 = 0uLL;
        v62 = 0uLL;
        v55 = 0uLL;
        v60 = 0uLL;
        v59 = 0uLL;
        v56 = 0uLL;
      }
      else
      {
        v54 = 0;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        v58 = v12;
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        do
        {
          v65 = *(uint8x16_t *)(v53 + v54);
          v66 = *(uint8x16_t *)(v52 + v54);
          v67 = *(uint8x16_t *)(v51 + v54);
          v68 = (int8x16_t)vcgtq_u8(v65, v66);
          v69 = (int8x16_t)vcgtq_u8(v65, v67);
          v70 = (int8x16_t)vcgtq_u8(v66, v65);
          v71 = (int8x16_t)vcgtq_u8(v67, v65);
          v72 = vandq_s8(v71, v70);
          v73 = vandq_s8(v69, v68);
          v74 = veorq_s8(v69, v68);
          v75 = veorq_s8(v71, v70);
          v76 = vbicq_s8(v75, v74);
          v77 = vbicq_s8(v74, v75);
          v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      v80 = (int8x16_t)vpaddq_s16(v55, v62);
      v81 = (int8x16_t)vpaddq_s16(v63, v64);
      v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    v18 = v50;
  }
  if (v12 < 1)
  {
    v94 = 0uLL;
    v93 = 0uLL;
    v92 = 0uLL;
    v86 = 0uLL;
    v91 = 0uLL;
    v90 = 0uLL;
    v89 = 0uLL;
    v87 = 0uLL;
  }
  else
  {
    v82 = 2 * v18;
    v83 = (int8x16_t *)((char *)v17 + v82);
    v84 = v13 * (v6 - 1) + 2;
    v85 = v14 + v82;
    v86 = 0uLL;
    v87 = 0uLL;
    v88 = v13 + v13 * v6 - 2;
    v89 = 0uLL;
    v90 = 0uLL;
    v91 = 0uLL;
    v92 = 0uLL;
    v93 = 0uLL;
    v94 = 0uLL;
    do
    {
      v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      v98 = (uint8x16_t)vandq_s8(*v83, v11);
      v99 = (int8x16_t)vcgtq_u8(v96, v95);
      v100 = (int8x16_t)vcgtq_u8(v96, v97);
      v101 = (int8x16_t)vcgtq_u8(v95, v96);
      v102 = (int8x16_t)vcgtq_u8(v97, v96);
      v103 = vandq_s8(v102, v101);
      v104 = vandq_s8(v100, v99);
      v105 = veorq_s8(v100, v99);
      v106 = veorq_s8(v102, v101);
      v107 = vbicq_s8(v106, v105);
      v108 = vbicq_s8(v105, v106);
      v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  v111 = (int8x16_t)vpaddq_s16(v86, v92);
  v112 = (int8x16_t)vpaddq_s16(v93, v94);
  v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(_QWORD *)a3 = v114.i64[0];
  result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v115.i64[1];
  return result;
}

void sub_1C9801AA0(_QWORD *a1)
{
  sub_1C9801AB8(a1);
  JUMPOUT(0x1CAA43B90);
}

_QWORD *sub_1C9801AB8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  *a1 = off_1E8291948;
  v2 = (_QWORD *)a1[672];
  if (v2)
  {
    v3 = (_QWORD *)a1[673];
    v4 = (void *)a1[672];
    if (v3 != v2)
    {
      do
        sub_1C9801BFC(--v3, 0);
      while (v3 != v2);
      v4 = (void *)a1[672];
    }
    a1[673] = v2;
    operator delete(v4);
  }
  v5 = a1[669];
  if (v5)
  {
    v6 = a1[670];
    v7 = (void *)a1[669];
    if (v6 != v5)
    {
      v8 = a1[670];
      do
      {
        v10 = *(void **)(v8 - 64);
        v8 -= 64;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 56) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)a1[669];
    }
    a1[670] = v5;
    operator delete(v7);
  }
  v11 = (void *)a1[666];
  if (v11)
  {
    a1[667] = v11;
    operator delete(v11);
  }
  for (i = 0; i != -6; i -= 3)
  {
    v13 = (void *)a1[i + 652];
    if (v13)
    {
      a1[i + 653] = v13;
      operator delete(v13);
    }
  }
  sub_1C974ABC8((uint64_t)(a1 + 600));
  v14 = (void *)a1[589];
  if (v14)
  {
    a1[590] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[519];
  if (v15)
  {
    a1[520] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[516];
  if (v16)
  {
    a1[517] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[513];
  if (v17)
  {
    a1[514] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[450];
  a1[450] = 0;
  if (v18)
    free(v18);
  return sub_1C974D3A4(a1);
}

_QWORD *sub_1C9801BFC(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = v2[3130];
    v2[3130] = 0;
    if (v3)
      MEMORY[0x1CAA43B6C](v3, 0x1000C8077774924);
    v4 = (void *)v2[3127];
    if (v4)
    {
      v2[3128] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[3124];
    if (v5)
    {
      v2[3125] = v5;
      operator delete(v5);
    }
    v6 = v2[3121];
    if (v6)
    {
      v7 = v2[3122];
      v8 = (void *)v2[3121];
      if (v7 != v6)
      {
        do
        {
          *(_OWORD *)(v7 - 96) = 0uLL;
          *(_OWORD *)(v7 - 80) = 0uLL;
          *(_OWORD *)(v7 - 112) = 0uLL;
          v7 -= 120;
        }
        while (v7 != v6);
        v8 = (void *)v2[3121];
      }
      v2[3122] = v6;
      operator delete(v8);
    }
    v9 = (void *)v2[3118];
    if (v9)
    {
      v2[3119] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[3115];
    if (v10)
    {
      v2[3116] = v10;
      operator delete(v10);
    }
    v11 = v2[3112];
    if (v11)
    {
      v12 = v2[3113];
      v13 = (void *)v2[3112];
      if (v12 != v11)
      {
        do
        {
          *(_OWORD *)(v12 - 88) = 0uLL;
          *(_OWORD *)(v12 - 104) = 0uLL;
          *(_OWORD *)(v12 - 120) = 0uLL;
          *(_OWORD *)(v12 - 136) = 0uLL;
          *(_OWORD *)(v12 - 152) = 0uLL;
          v12 -= 240;
        }
        while (v12 != v11);
        v13 = (void *)v2[3112];
      }
      v2[3113] = v11;
      operator delete(v13);
    }
    v14 = (void *)v2[3101];
    v2[3101] = 0;
    if (v14)
      free(v14);
    v15 = 0;
    while (1)
    {
      v16 = (void *)v2[v15 + 1820];
      if (v16)
      {
        v2[v15 + 1821] = v16;
        operator delete(v16);
      }
      v15 -= 3;
      if (v15 == -6)
      {
        v17 = (void *)v2[1814];
        if (v17)
        {
          v2[1815] = v17;
          operator delete(v17);
        }
        v18 = (void *)v2[148];
        if (v18)
        {
          v2[149] = v18;
          operator delete(v18);
        }
        v19 = (void *)v2[145];
        if (v19)
        {
          v2[146] = v19;
          operator delete(v19);
        }
        v20 = (void *)v2[142];
        if (v20)
        {
          v2[143] = v20;
          operator delete(v20);
        }
        JUMPOUT(0x1CAA43B90);
      }
    }
  }
  return result;
}

BOOL sub_1C9801D94(uint64_t a1, __int16 *a2, __int16 *a3)
{
  int v3;
  int v5;

  if ((*((unsigned __int8 *)a3 + 8) ^ *((unsigned __int8 *)a2 + 8)) > 0xF)
    return 1;
  v3 = *a2 - *a3;
  if (v3 < 0)
    v3 = *a3 - *a2;
  if (v3 > 3)
    return 1;
  v5 = a2[1] - a3[1];
  if (v5 < 0)
    v5 = a3[1] - a2[1];
  return v5 > 3;
}

uint64_t sub_1C9801DE4(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v39;
  unsigned int v40;
  signed int v41;
  __int16 *v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _DWORD *v51;

  v11 = 0;
  v12 = result + 1672;
  v13 = result + 1928;
  v14 = 1;
  v15 = *(_QWORD *)(result + 2200);
  v16 = v15 & (1 << a4);
  v17 = result + 1672 + 16 * a4;
  do
  {
    v18 = v14;
    v19 = *(_QWORD *)(a7 + 8 * v11);
    if (v19 && *(_BYTE *)(v19 + 10) == 1)
    {
      if (*(char *)(v19 + 12) == a4)
      {
        v27 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v27 + 1;
        *(_DWORD *)(a11 + 4 * v27) = *(_DWORD *)(v19 + 4);
        goto LABEL_44;
      }
      v20 = *(char *)(v19 + 13);
      if (v20 != 15 && *(_DWORD *)(*(_QWORD *)v17 + 1024) == *(_DWORD *)(*(_QWORD *)(v13 + 16 * v20) + 1024))
      {
        v28 = *(_DWORD **)(a9 + 8 * v11);
        v29 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v29 + 1;
        *(_DWORD *)(a11 + 4 * v29) = *v28;
        goto LABEL_44;
      }
    }
    v14 = 0;
    v11 = 1;
  }
  while ((v18 & 1) != 0);
  v21 = 0;
  v22 = 1;
  while (1)
  {
    v23 = v22;
    v24 = *(_QWORD *)(a7 + 8 * v21);
    if (v24)
    {
      if (*(_BYTE *)(v24 + 10) == 1)
      {
        v25 = *(unsigned __int8 *)(v24 + 12);
        if (v25 != 15 && (((v16 != 0) ^ (v15 >> v25)) & 1) == 0)
        {
          v30 = *(unsigned __int8 *)(a11 + 48);
          *(_BYTE *)(a11 + 48) = v30 + 1;
          *(_DWORD *)(a11 + 4 * v30) = *(_DWORD *)(v24 + 4);
          v31 = (char *)(*(_QWORD *)(a7 + 8 * v21) + 12);
          if (v16)
            goto LABEL_44;
          goto LABEL_22;
        }
        v26 = *(unsigned __int8 *)(v24 + 13);
        if (v26 != 15 && (((v16 != 0) ^ (*(_QWORD *)(result + 2208) >> v26)) & 1) == 0)
          break;
      }
    }
    v22 = 0;
    v21 = 1;
    if ((v23 & 1) == 0)
      goto LABEL_44;
  }
  v32 = *(_DWORD **)(a9 + 8 * v21);
  v33 = *(unsigned __int8 *)(a11 + 48);
  *(_BYTE *)(a11 + 48) = v33 + 1;
  *(_DWORD *)(a11 + 4 * v33) = *v32;
  v31 = (char *)(*(_QWORD *)(a7 + 8 * v21) + 13);
  v12 = result + 1928;
  if (v16)
    goto LABEL_44;
LABEL_22:
  v34 = *(_DWORD *)(*(_QWORD *)(v12 + 16 * *v31) + 1024);
  v35 = *(_DWORD *)(result + 640);
  v36 = *(_DWORD *)(*(_QWORD *)v17 + 1024);
  v37 = v35 - v34;
  if (v35 != v34 && v36 != v34)
  {
    v39 = v35 - v36;
    if (v37 >= 127)
      v37 = 127;
    if (v37 <= -128)
      v37 = -128;
    if (v39 >= 127)
      v39 = 127;
    if (v39 <= -128)
      v39 = -128;
    if (v37)
    {
      if (v37 >= 0)
        v40 = v37;
      else
        v40 = -v37;
      v37 = (__int16)((__int16)((v40 >> 1) + 0x4000) / (__int16)v37);
    }
    v41 = (v37 * v39 + 32) >> 6;
    if (v41 >= 4095)
      v41 = 4095;
    if (v41 <= -4096)
      v41 = -4096;
    v42 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
    v43.i32[0] = *v42;
    v43.i32[1] = v42[1];
    v44 = vmul_s32(vdup_n_s32(v41), v43);
    v45 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v44), (int32x2_t)0x7F0000007FLL), 8uLL);
    v46 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v44), (int8x8_t)vneg_s32(v45), (int8x8_t)v45), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
    *v42 = v46.i16[0];
    v42[1] = v46.i16[2];
  }
LABEL_44:
  v47 = 0;
  while (1)
  {
    v48 = *(_QWORD *)(a8 + 8 * v47);
    if (!v48 || *(_BYTE *)(v48 + 10) != 1)
      goto LABEL_50;
    if (*(char *)(v48 + 12) == a4)
      break;
    v49 = *(char *)(v48 + 13);
    if (v49 != 15 && *(_DWORD *)(*(_QWORD *)v17 + 1024) == *(_DWORD *)(*(_QWORD *)(v13 + 16 * v49) + 1024))
    {
      v50 = *(unsigned __int8 *)(a11 + 48);
      if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v48 + 4))
      {
        v51 = *(_DWORD **)(a10 + 8 * v47);
        goto LABEL_58;
      }
      return result;
    }
LABEL_50:
    if (++v47 == 3)
      return result;
  }
  v50 = *(unsigned __int8 *)(a11 + 48);
  if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v48)
  {
    v51 = (_DWORD *)(v48 + 4);
LABEL_58:
    *(_BYTE *)(a11 + 48) = v50 + 1;
    *(_DWORD *)(a11 + 4 * v50) = *v51;
  }
  return result;
}

uint64_t sub_1C9802100(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v39;
  unsigned int v40;
  signed int v41;
  __int16 *v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _DWORD *v51;

  v11 = 0;
  v12 = result + 1672;
  v13 = result + 1928;
  v14 = 1;
  v15 = *(_QWORD *)(result + 2208);
  v16 = v15 & (1 << a4);
  v17 = result + 1928 + 16 * a4;
  do
  {
    v18 = v14;
    v19 = *(_QWORD *)(a7 + 8 * v11);
    if (v19 && *(_BYTE *)(v19 + 10) == 1)
    {
      if (*(char *)(v19 + 13) == a4)
      {
        v27 = *(_DWORD **)(a9 + 8 * v11);
        v28 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v28 + 1;
        *(_DWORD *)(a11 + 4 * v28) = *v27;
        goto LABEL_44;
      }
      v20 = *(char *)(v19 + 12);
      if (v20 != 15 && *(_DWORD *)(*(_QWORD *)v17 + 1024) == *(_DWORD *)(*(_QWORD *)(v12 + 16 * v20) + 1024))
      {
        v29 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v29 + 1;
        *(_DWORD *)(a11 + 4 * v29) = *(_DWORD *)(v19 + 4);
        goto LABEL_44;
      }
    }
    v14 = 0;
    v11 = 1;
  }
  while ((v18 & 1) != 0);
  v21 = 0;
  v22 = 1;
  while (1)
  {
    v23 = v22;
    v24 = *(_QWORD *)(a7 + 8 * v21);
    if (v24)
    {
      if (*(_BYTE *)(v24 + 10) == 1)
      {
        v25 = *(unsigned __int8 *)(v24 + 13);
        if (v25 != 15 && (((v16 != 0) ^ (v15 >> v25)) & 1) == 0)
        {
          v30 = *(_DWORD **)(a9 + 8 * v21);
          v31 = *(unsigned __int8 *)(a11 + 48);
          *(_BYTE *)(a11 + 48) = v31 + 1;
          *(_DWORD *)(a11 + 4 * v31) = *v30;
          v32 = (char *)(*(_QWORD *)(a7 + 8 * v21) + 13);
          if (v16)
            goto LABEL_44;
          goto LABEL_22;
        }
        v26 = *(unsigned __int8 *)(v24 + 12);
        if (v26 != 15 && (((v16 != 0) ^ (*(_QWORD *)(result + 2200) >> v26)) & 1) == 0)
          break;
      }
    }
    v22 = 0;
    v21 = 1;
    if ((v23 & 1) == 0)
      goto LABEL_44;
  }
  v33 = *(unsigned __int8 *)(a11 + 48);
  *(_BYTE *)(a11 + 48) = v33 + 1;
  *(_DWORD *)(a11 + 4 * v33) = *(_DWORD *)(v24 + 4);
  v32 = (char *)(*(_QWORD *)(a7 + 8 * v21) + 12);
  v13 = result + 1672;
  if (v16)
    goto LABEL_44;
LABEL_22:
  v34 = *(_DWORD *)(*(_QWORD *)(v13 + 16 * *v32) + 1024);
  v35 = *(_DWORD *)(result + 640);
  v36 = *(_DWORD *)(*(_QWORD *)v17 + 1024);
  v37 = v35 - v34;
  if (v35 != v34 && v36 != v34)
  {
    v39 = v35 - v36;
    if (v37 >= 127)
      v37 = 127;
    if (v37 <= -128)
      v37 = -128;
    if (v39 >= 127)
      v39 = 127;
    if (v39 <= -128)
      v39 = -128;
    if (v37)
    {
      if (v37 >= 0)
        v40 = v37;
      else
        v40 = -v37;
      v37 = (__int16)((__int16)((v40 >> 1) + 0x4000) / (__int16)v37);
    }
    v41 = (v37 * v39 + 32) >> 6;
    if (v41 >= 4095)
      v41 = 4095;
    if (v41 <= -4096)
      v41 = -4096;
    v42 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
    v43.i32[0] = *v42;
    v43.i32[1] = v42[1];
    v44 = vmul_s32(vdup_n_s32(v41), v43);
    v45 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v44), (int32x2_t)0x7F0000007FLL), 8uLL);
    v46 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v44), (int8x8_t)vneg_s32(v45), (int8x8_t)v45), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
    *v42 = v46.i16[0];
    v42[1] = v46.i16[2];
  }
LABEL_44:
  v47 = 0;
  while (1)
  {
    v48 = *(_QWORD *)(a8 + 8 * v47);
    if (!v48 || *(_BYTE *)(v48 + 10) != 1)
      goto LABEL_50;
    if (*(char *)(v48 + 13) == a4)
      break;
    v49 = *(char *)(v48 + 12);
    if (v49 != 15 && *(_DWORD *)(*(_QWORD *)v17 + 1024) == *(_DWORD *)(*(_QWORD *)(v12 + 16 * v49) + 1024))
    {
      v50 = *(unsigned __int8 *)(a11 + 48);
      if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v48)
      {
        v51 = (_DWORD *)(v48 + 4);
        goto LABEL_58;
      }
      return result;
    }
LABEL_50:
    if (++v47 == 3)
      return result;
  }
  v50 = *(unsigned __int8 *)(a11 + 48);
  if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v48 + 4))
  {
    v51 = *(_DWORD **)(a10 + 8 * v47);
LABEL_58:
    *(_BYTE *)(a11 + 48) = v50 + 1;
    *(_DWORD *)(a11 + 4 * v50) = *v51;
  }
  return result;
}

double sub_1C980241C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = a1 + 4205;
  v2 = sub_1C971EA5C(a1);
  *(_QWORD *)v2 = off_1E8291948;
  *(_WORD *)(v2 + 2816) = 0;
  *(_BYTE *)(v2 + 2818) = 1;
  result = 0.0;
  *(_OWORD *)(v2 + 2824) = 0u;
  *(_OWORD *)(v2 + 2840) = 0u;
  *(_OWORD *)(v2 + 2856) = 0u;
  *(_OWORD *)(v2 + 2872) = 0u;
  *(_OWORD *)(v2 + 2888) = 0u;
  *(_OWORD *)(v2 + 2904) = 0u;
  *(_OWORD *)(v2 + 2920) = 0u;
  *(_OWORD *)(v2 + 2936) = 0u;
  *(_OWORD *)(v2 + 2952) = 0u;
  *(_OWORD *)(v2 + 2968) = 0u;
  *(_OWORD *)(v2 + 2984) = 0u;
  *(_OWORD *)(v2 + 3000) = 0u;
  *(_OWORD *)(v2 + 3016) = 0u;
  *(_OWORD *)(v2 + 3032) = 0u;
  *(_OWORD *)(v2 + 3048) = 0u;
  *(_OWORD *)(v2 + 3064) = 0u;
  *(_OWORD *)(v2 + 3080) = 0u;
  *(_OWORD *)(v2 + 3096) = 0u;
  *(_OWORD *)(v2 + 3112) = 0u;
  *(_OWORD *)(v2 + 3128) = 0u;
  *(_OWORD *)(v2 + 3144) = 0u;
  *(_OWORD *)(v2 + 3160) = 0u;
  *(_OWORD *)(v2 + 3176) = 0u;
  *(_OWORD *)(v2 + 3192) = 0u;
  *(_OWORD *)(v2 + 3208) = 0u;
  *(_QWORD *)(v2 + 3600) = 0;
  *(_WORD *)(v2 + 3564) = 256;
  *(_QWORD *)(v2 + 3552) = 0;
  *(_QWORD *)(v2 + 3544) = 0;
  *(_OWORD *)(v2 + 3568) = 0u;
  *(_OWORD *)(v2 + 3584) = 0u;
  *(_WORD *)v1 = 0;
  *(_OWORD *)(v2 + 4104) = 0u;
  *(_OWORD *)(v2 + 4120) = 0u;
  *(_OWORD *)(v2 + 4136) = 0u;
  *(_OWORD *)(v2 + 4152) = 0u;
  *(_QWORD *)(v2 + 4168) = 0;
  *(_QWORD *)(v2 + 4712) = 0;
  *(_QWORD *)(v2 + 4728) = 0;
  *(_QWORD *)(v2 + 4720) = 0;
  *(_DWORD *)(v2 + 4700) = 0;
  *(_QWORD *)(v2 + 4816) = 0;
  *(_QWORD *)(v2 + 4808) = 0;
  *(_QWORD *)(v2 + 4824) = 0;
  *(_QWORD *)(v2 + 5000) = 850045863;
  *(_OWORD *)(v2 + 5008) = 0u;
  *(_OWORD *)(v2 + 5024) = 0u;
  *(_OWORD *)(v2 + 5040) = 0u;
  *(_QWORD *)(v2 + 5056) = 0;
  *(_QWORD *)(v2 + 5064) = 1018212795;
  *(_OWORD *)(v2 + 5072) = 0u;
  *(_OWORD *)(v2 + 5088) = 0u;
  *(_QWORD *)(v2 + 5104) = 0;
  *(_DWORD *)(v2 + 4996) = 0;
  *(_OWORD *)(v2 + 5192) = 0u;
  *(_OWORD *)(v2 + 5208) = 0u;
  *(_OWORD *)(v2 + 5224) = 0u;
  *(_DWORD *)(v2 + 5412) = 0;
  *(_OWORD *)(v2 + 5320) = 0u;
  *(_OWORD *)(v2 + 5336) = 0u;
  *(_OWORD *)(v2 + 5352) = 0u;
  *(_OWORD *)(v2 + 5368) = 0u;
  *(_OWORD *)(v2 + 5384) = 0u;
  *(_BYTE *)(v1 + 979) = 1;
  *(_QWORD *)(v2 + 5272) = sub_1C9801D94;
  *(_QWORD *)(v2 + 5280) = 0;
  *(_QWORD *)(v2 + 5288) = sub_1C9801DE4;
  *(_QWORD *)(v2 + 5296) = 0;
  *(_QWORD *)(v2 + 5304) = sub_1C9802100;
  *(_QWORD *)(v2 + 5312) = 0;
  *(_QWORD *)(v2 + 5248) = 0;
  *(_DWORD *)(v2 + 5428) = 0;
  *(_BYTE *)(v1 + 1228) = 0;
  *(_DWORD *)(v2 + 5436) = 0;
  *(_QWORD *)(v2 + 5440) = 0;
  *(_QWORD *)(v2 + 5448) = -1;
  *(_QWORD *)(v2 + 5456) = -1;
  *(_BYTE *)(v1 + 1259) = 0;
  return result;
}

void sub_1C98025A0(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int8x16_t v44;
  int v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  unsigned __int16 *v69;
  int v70;
  int v71;
  int v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _WORD *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned __int8 *v113;
  int v114;
  int v115;
  __n128 v116;
  __n128 v117;
  int v118;
  unsigned int v119;
  _BOOL4 v120;
  int v121;
  uint64_t v122;
  _OWORD *v123;
  _WORD *v124;
  int v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  void **v132;
  char **v133;
  uint64_t v134;
  _QWORD *v135;
  int v136;
  int v137;
  void **v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  int v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  int v160;
  char v161;
  int v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char **v168;
  char *v169;

  v6 = (uint64_t)a1;
  v7 = *(_QWORD *)(a2 + 576);
  v8 = *(char *)(v7 + 480);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = 16 << *(_BYTE *)(v9 + 224);
  v159 = *(int *)(v9 + 2124);
  v11 = v159 * *(_DWORD *)(v9 + 2120);
  v12 = (v8 + 2 * v11) / (2 * v8);
  v13 = v12 * a3;
  v162 = v11;
  if (v8 - 1 <= a3)
    v14 = v11 - v12 * a3;
  else
    v14 = (v8 + 2 * v11) / (2 * v8);
  v15 = *(_BYTE *)(a2 + 648);
  a1[665] = a2;
  a1[1] = *(_QWORD *)(a2 + 632);
  sub_1C9746DB4(a1 + 2, v9, *(_QWORD *)(a2 + 48));
  sub_1C9746DB4((_QWORD *)(v6 + 32), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  v16 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 5320) + 648);
  *(_BYTE *)(v6 + 632) = *(_BYTE *)(*(_QWORD *)(v6 + 5320) + 648) == 0;
  *(_BYTE *)(v6 + 637) = v16 == 1;
  *(_BYTE *)(v6 + 633) = v16 < 2;
  *(_DWORD *)(v6 + 640) = *(_DWORD *)(*(_QWORD *)(v6 + 8) + 1024);
  v160 = v14;
  *(_DWORD *)(v6 + 5412) = v13 + v14 - 1;
  *(_BYTE *)(v6 + 652) = 5;
  *(_QWORD *)(v6 + 5416) = 0;
  *(_QWORD *)(v6 + 4760) = v7 + 360;
  sub_1C974E55C((_QWORD *)(v6 + 2184));
  *(_BYTE *)(v6 + 659) = 1;
  *(_DWORD *)(v6 + 5424) = 0;
  *(_WORD *)(v6 + 516) = 0;
  v158 = v15;
  if (!*(_BYTE *)(*(_QWORD *)(v6 + 4760) + 200))
  {
    v17 = a2;
    v25 = *(_QWORD *)(a2 + 576);
    v20 = *(_QWORD *)(v25 + 296);
    v26 = *(_QWORD *)(v25 + 304);
    v27 = (_QWORD *)(v6 + 4816);
LABEL_17:
    sub_1C9746DB4(v27, v20, v26);
    goto LABEL_18;
  }
  v17 = a2;
  v18 = atomic_load((unsigned __int8 *)&qword_1EF920EB0);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920EB0))
  {
    __cxa_atexit((void (*)(void *))sub_1C97B9BA8, &qword_1EF920EA0, &dword_1C96FA000);
    __cxa_guard_release(&qword_1EF920EB0);
  }
  v19 = atomic_load(&qword_1EF920EB8);
  if (v19 != -1)
  {
    v169 = &v167;
    v168 = &v169;
    std::__call_once(&qword_1EF920EB8, &v168, (void (__cdecl *)(void *))sub_1C97B9BAC);
  }
  v20 = qword_1EF920EA0;
  v21 = *(std::__shared_weak_count **)algn_1EF920EA8;
  if (!*(_QWORD *)algn_1EF920EA8)
  {
    v27 = (_QWORD *)(v6 + 4816);
    v26 = 0;
    goto LABEL_17;
  }
  v22 = (unint64_t *)(*(_QWORD *)algn_1EF920EA8 + 8);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  sub_1C9746DB4((_QWORD *)(v6 + 4816), v20, (uint64_t)v21);
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_18:
  v28 = v6 + 5152;
  v29 = v17;
  v30 = *(char *)(v17 + 648);
  if (v30 < 3)
  {
    v35 = 2;
    *(_BYTE *)(v6 + 58) = 2;
  }
  else
  {
    if (v30 - 4 < 2)
    {
      *(_BYTE *)(v6 + 58) = 0;
      v31 = *(_QWORD *)(v6 + 5320);
      v32 = *(_DWORD *)(v31 + 684);
      if (v32 >= *(_DWORD *)(v31 + 3056))
        LOBYTE(v32) = *(_DWORD *)(v31 + 3056);
      *(_BYTE *)(v6 + 516) = v32;
      v33 = *(_DWORD *)(v31 + 684);
      v34 = *(_DWORD *)(v31 + 3056);
      if (v33 < v34)
        LOBYTE(v34) = v33;
      *(_BYTE *)(v6 + 517) = v34;
      goto LABEL_25;
    }
    if (v30 == 3)
    {
      v35 = 1;
      *(_BYTE *)(v6 + 58) = 1;
      v36 = *(_QWORD *)(v6 + 5320);
      v37 = *(_DWORD *)(v36 + 684);
      v38 = *(_DWORD *)(v36 + 3056);
      if (v37 < v38)
        LOBYTE(v38) = v37;
      *(_BYTE *)(v6 + 516) = v38;
    }
    else
    {
      v35 = *(unsigned __int8 *)(v6 + 58);
      if (!*(_BYTE *)(v6 + 58))
      {
LABEL_25:
        v35 = 0;
        *(_QWORD *)(v6 + 5272) = sub_1C98032DC;
        *(_QWORD *)(v6 + 5280) = 0;
      }
    }
  }
  *(_BYTE *)(v6 + 48) = a3 == 0;
  *(_BYTE *)(v6 + 50) = **(_BYTE **)(v6 + 32);
  *(_DWORD *)(v6 + 52) = v13;
  *(_BYTE *)(v6 + 49) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  v39 = *(_QWORD *)(v6 + 8);
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(v39 + 1024) & (v10 - 1);
  *(_WORD *)(v6 + 518) = *(_WORD *)(v7 + 648);
  *(_WORD *)(v6 + 59) = 1;
  *(_WORD *)(v6 + 554) = 1;
  v40 = *(char *)(v7 + 529);
  *(_DWORD *)(v6 + 324) = v40;
  *(_DWORD *)(v6 + 328) = v40;
  *(_BYTE *)(v6 + 514) = *(_BYTE *)(v7 + 583);
  *(_BYTE *)(v6 + 515) = 1;
  if (v35 >= 2)
  {
    v42 = *(_BYTE *)(v6 + 5184);
  }
  else
  {
    if (sub_1C974DADC(v6, (_DWORD *)(v17 + 3056), v39))
      return;
    v41 = *(unsigned __int8 *)(v6 + 516);
    if ((_DWORD)v41 != *(unsigned __int8 *)(v6 + 517))
      goto LABEL_60;
    v42 = 1;
    *(_BYTE *)(v6 + 5184) = 1;
    if ((char)v41 >= 1)
    {
      v43 = v6 + 1928;
      while (*(_DWORD *)(*(_QWORD *)(v43 - 256) + 1024) == *(_DWORD *)(*(_QWORD *)v43 + 1024))
      {
        v43 += 16;
        if (!--v41)
        {
          v42 = 1;
          goto LABEL_41;
        }
      }
LABEL_60:
      v42 = 0;
      *(_BYTE *)(v6 + 5184) = 0;
    }
  }
LABEL_41:
  *(_BYTE *)(v6 + 552) = v42;
  sub_1C9746DB4((_QWORD *)(v6 + 1584), *(_QWORD *)(v17 + 24), *(_QWORD *)(v17 + 32));
  v44 = *(int8x16_t *)(v17 + 8);
  *(int8x16_t *)(v6 + 1568) = vextq_s8(v44, v44, 8uLL);
  if (a4 && *(unsigned __int8 *)(v44.i64[0] + 34) != 255)
  {
    sub_1C9750790(v6, *(double *)v44.i64);
    if (v45)
      return;
    v46 = *(char *)(v6 + 516);
    if (v46 >= 1)
    {
      v47 = 0;
      v48 = (_QWORD *)(v6 + 1672);
      do
      {
        v49 = *v48;
        v50 = (_BYTE *)(*v48 + 48);
        if (*v50)
        {
          if (sub_1C97BE09C(*v48 + 48, *(unsigned __int8 *)(*(_QWORD *)(v29 + 40) + 2117)))
            return;
          sub_1C97BE470((uint64_t)v50, 0, *(unsigned int *)(v49 + 524));
          *(_BYTE *)(v49 + 48) = 0;
          LOBYTE(v46) = *(_BYTE *)(v6 + 516);
        }
        ++v47;
        v48 += 2;
      }
      while (v47 < (char)v46);
    }
    v51 = *(char *)(v6 + 517);
    if (v51 >= 1)
    {
      v52 = 0;
      v53 = (_QWORD *)(v6 + 1928);
      do
      {
        v54 = *v53;
        v55 = (_BYTE *)(*v53 + 48);
        if (*v55)
        {
          if (sub_1C97BE09C(*v53 + 48, *(unsigned __int8 *)(*(_QWORD *)(v29 + 40) + 2117)))
            return;
          sub_1C97BE470((uint64_t)v55, 0, *(unsigned int *)(v54 + 524));
          *(_BYTE *)(v54 + 48) = 0;
          LOBYTE(v51) = *(_BYTE *)(v6 + 517);
        }
        ++v52;
        v53 += 2;
      }
      while (v52 < (char)v51);
    }
  }
  if (*(_BYTE *)(v6 + 632))
  {
    v56 = *(_QWORD *)(v6 + 5320);
    goto LABEL_84;
  }
  if (*(_BYTE *)(v7 + 585))
  {
    v56 = *(_QWORD *)(v6 + 5320);
  }
  else
  {
    v56 = *(_QWORD *)(v6 + 5320);
    if (!*(_BYTE *)(v7 + 870) && !*(_BYTE *)(v56 + 676))
    {
      *(_DWORD *)(v6 + 320) = *(_DWORD *)(v29 + 4796);
      v57 = (_BYTE *)(v6 + 68);
LABEL_148:
      *v57 = 1;
      goto LABEL_84;
    }
  }
  *(_BYTE *)(v6 + 68) = 0;
  v57 = (_BYTE *)(v6 + 68);
  v58 = *(_QWORD *)(v6 + 16);
  v59 = *(unsigned int *)(v58 + 288);
  if ((_DWORD)v59)
  {
    v60 = 0;
    v61 = *(_QWORD *)(v58 + 296);
    v62 = (unsigned __int16 *)(v61 + 128);
    v63 = (unsigned __int8 *)(v61 + 2);
    v64 = (unsigned __int8 *)(v61 + 66);
    do
    {
      if (*(unsigned __int8 *)(v61 + 248 * v60 + 162) == *(unsigned __int8 *)(v56 + 4522))
      {
        v65 = *(unsigned __int8 *)(v61 + 248 * v60 + 160);
        if ((_DWORD)v65 == *(unsigned __int8 *)(v56 + 4520))
        {
          v66 = *(unsigned __int8 *)(v61 + 248 * v60 + 161);
          if ((_DWORD)v66 == *(unsigned __int8 *)(v56 + 4521))
          {
            v67 = v62;
            v68 = *(unsigned __int8 *)(v56 + 4522);
            v69 = (unsigned __int16 *)(v56 + 4488);
            if (*(_BYTE *)(v56 + 4522))
            {
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                v72 = *v69++;
                if (v70 != v72)
                  break;
                if (!--v68)
                  goto LABEL_71;
              }
            }
            else
            {
LABEL_71:
              if (*(_BYTE *)(v61 + 248 * v60 + 160))
              {
                v73 = v63;
                v74 = (unsigned __int8 *)(v56 + 4362);
                while (1)
                {
                  v76 = *v73;
                  v73 += 4;
                  v75 = v76;
                  v77 = *v74;
                  v74 += 4;
                  if (v75 != v77)
                    break;
                  if (!--v65)
                    goto LABEL_75;
                }
              }
              else
              {
LABEL_75:
                if (!*(_BYTE *)(v61 + 248 * v60 + 161))
                  goto LABEL_146;
                v78 = v66 - 1;
                v79 = v64;
                v80 = (unsigned __int8 *)(v56 + 4426);
                do
                {
                  v82 = *v79;
                  v79 += 4;
                  v81 = v82;
                  v84 = *v80;
                  v80 += 4;
                  v83 = v84;
                  v86 = v78-- != 0;
                }
                while (v81 == v83 && v86);
                if (v81 == v83)
                {
LABEL_146:
                  *(_DWORD *)(v6 + 320) = v60;
                  goto LABEL_148;
                }
              }
            }
          }
        }
      }
      ++v60;
      v62 += 124;
      v63 += 248;
      v64 += 248;
    }
    while (v60 != v59);
  }
LABEL_84:
  *(_BYTE *)(v6 + 553) = 0;
  *(_BYTE *)(v6 + 558) = 5 - *(_BYTE *)(v6 + 652);
  *(_BYTE *)(v6 + 559) = (int)(*(float *)(v56 + 6476) + 0.5) - *(_BYTE *)(*(_QWORD *)(v6 + 32) + 9) - 26;
  v87 = *(char *)(v29 + 456);
  if (v87 >= 12)
    v87 = 12;
  if (v87 <= -12)
    LOBYTE(v87) = -12;
  *(_BYTE *)(v6 + 560) = v87;
  v88 = *(char *)(v29 + 460);
  if (v88 >= 12)
    v88 = 12;
  if (v88 <= -12)
    LOBYTE(v88) = -12;
  *(_BYTE *)(v6 + 561) = v88;
  sub_1C9714D1C(v6);
  v89 = *(char *)(v6 + 653);
  *(_BYTE *)(v6 + 559) = v89 - *(_BYTE *)(*(_QWORD *)(v6 + 32) + 9) - 26;
  *(float *)(v29 + 6476) = (float)v89;
  v90 = *(_QWORD *)(v6 + 8);
  v91 = *(_QWORD *)(v90 + 768) * *(int *)(v90 + 524);
  v92 = v91 + 7;
  if (v91 >= 0)
    v92 = *(_QWORD *)(v90 + 768) * *(int *)(v90 + 524);
  if (v91 >= 8)
  {
    v93 = *(_WORD **)(v90 + 800);
    v94 = v92 >> 3;
    do
    {
      *v93 = *v93 & 0x1FF | (*(unsigned __int8 *)(v6 + 653) << 9);
      ++v93;
      --v94;
    }
    while (v94);
  }
  *(_BYTE *)(v6 + 563) = 0;
  *(_BYTE *)(v6 + 564) = *(_BYTE *)(*(_QWORD *)(v29 + 56) + 31);
  if (*(_BYTE *)(v7 + 696) || *(_BYTE *)(v7 + 482))
  {
    v95 = *(_QWORD *)(v6 + 32);
    v96 = *(_BYTE *)(v95 + 32);
    *(_BYTE *)(v6 + 565) = v96;
    v97 = *(_BYTE *)(v95 + 33);
    *(_BYTE *)(v6 + 566) = v97;
    v98 = *(_QWORD *)(v6 + 5320);
    if (*(_BYTE *)(*(_QWORD *)(v98 + 576) + 482) && *(_BYTE *)(v98 + 246))
    {
      v99 = 0;
      v100 = 0;
      v101 = (char *)(v98 + 225);
      do
      {
        v102 = *(v101 - 1);
        if (v102 != 127)
        {
          v103 = *v101;
          if (v103 != -128)
          {
            v104 = (int)(*(float *)(v98 + 6476) + 0.5);
            v105 = v104 + v103;
            if (v105 >= 51)
              v105 = 51;
            v106 = v99 + (v105 & ~(v105 >> 31));
            v107 = v104 + v102;
            if (v107 >= 51)
              v107 = 51;
            v108 = v107 & ~(v107 >> 31);
            if (v106 >= 0xF && v108 <= 0xF)
            {
              v110 = v99 + v108;
              v111 = 17 - v108;
              if (v110 < 0xF)
                v111 = v99 + 2;
              v112 = v111 >> 1;
              if (v112 > v100)
                v100 = v112;
            }
          }
        }
        ++v99;
        v101 += 2;
      }
      while (v99 != 11);
      if (v100 > 0)
      {
        if (v100 >= 6)
          v97 = 6;
        else
          v97 = v100;
        *(_BYTE *)(v6 + 565) = v97;
        *(_BYTE *)(v6 + 566) = v97;
        *(_BYTE *)(v6 + 563) = 1;
        v96 = v97;
      }
    }
    v113 = *(unsigned __int8 **)(v6 + 1568);
    if (*v113 != 255)
    {
      v115 = *((_DWORD *)v113 + 2);
      v114 = *((_DWORD *)v113 + 3);
      if (v115 > v114)
        v114 = v115;
      if (v114 >= 256)
      {
        if (v114 > 0x13F)
        {
LABEL_130:
          *(_BYTE *)(v6 + 563) = 1;
          goto LABEL_132;
        }
        v97 = 4;
      }
      else
      {
        v97 = 6;
      }
      *(_BYTE *)(v6 + 565) = v97;
      *(_BYTE *)(v6 + 566) = v97;
      v96 = v97;
      goto LABEL_130;
    }
  }
  else
  {
    v96 = *(_BYTE *)(v6 + 565);
    v97 = *(_BYTE *)(v6 + 566);
  }
LABEL_132:
  *(_BYTE *)(v6 + 660) = 2 * v96;
  *(_BYTE *)(v6 + 661) = 2 * v97;
  if ((*(_BYTE *)(v7 + 544) & 4) == 0)
  {
    *(_DWORD *)(v6 + 568) = 0;
LABEL_134:
    *(_BYTE *)(v6 + 567) = 0;
    if (!sub_1C971447C(v6 + 2280, v6)
      && !sub_1C9714A30((void (**)(__int32 *, uint64_t, int32x4_t *, int, int))(v6 + 2824), v6)
      && !sub_1C9714864((_QWORD *)(v6 + 3224), *(unsigned __int8 *)(*(_QWORD *)(v6 + 16) + 2096), *(unsigned __int8 *)(*(_QWORD *)(v6 + 16) + 2098), 0)&& !sub_1C9714274(v6 + 3400, v6))
    {
      v118 = *(char *)(v7 + 572);
      v119 = *(unsigned __int8 *)(v7 + 572) - 1;
      *(_BYTE *)(v6 + 512) = v119 < 2;
      v120 = v118 >= 2 && *(_DWORD *)(v7 + 656) != 0;
      *(_BYTE *)(v6 + 513) = v120;
      if (v119 < 2 || v120)
        sub_1C980BBC8(v6 + 3536, *(char *)(v6 + 653), v6);
      *(_OWORD *)(v6 + 5168) = 0u;
      *(_OWORD *)(v6 + 5152) = 0u;
      *(_OWORD *)(v6 + 5136) = 0u;
      *(_OWORD *)(v6 + 5120) = 0u;
      if (*(_BYTE *)(v7 + 712))
        sub_1C98034FC(v6, 0.0, v116, v117);
      if (*(_BYTE *)(v7 + 713))
      {
        if (*(char *)(v6 + 516) >= 1)
        {
          v121 = 0;
          do
            sub_1C980377C(v6, 0, v121++);
          while (v121 < *(char *)(v6 + 516));
        }
        v122 = *(unsigned __int8 *)(v6 + 517);
        if (*(_BYTE *)(v6 + 5184))
        {
          if ((char)v122 >= 1)
          {
            v123 = (_OWORD *)(v6 + 928);
            v124 = (_WORD *)(v6 + 5152);
            do
            {
              *v123 = *(v123 - 16);
              ++v123;
              *v124 = *(v124 - 16);
              ++v124;
              --v122;
            }
            while (v122);
          }
        }
        else if ((char)v122 >= 1)
        {
          v125 = 0;
          do
            sub_1C980377C(v6, 1u, v125++);
          while (v125 < *(char *)(v6 + 517));
        }
      }
      v126 = 0;
      v127 = 1;
      *(_DWORD *)(v6 + 5240) = *(_DWORD *)(*(_QWORD *)(v29 + 632) + 1024);
      v156 = v6 + 5152;
      v157 = v29;
      v166 = v6;
      do
      {
        v128 = v6 + 24 * v126;
        v129 = *(char **)(v128 + 5192);
        *(_QWORD *)(v128 + 5200) = v129;
        v130 = *(char *)(v6 + v126 + 516);
        if (v130 < 1)
        {
          v149 = (uint64_t)v129;
        }
        else
        {
          v161 = v127;
          v131 = 0;
          v132 = (void **)(v128 + 5192);
          v133 = (char **)(v128 + 5200);
          v134 = *(unsigned __int8 *)(v6 + v126 + 516);
          v135 = (_QWORD *)(v6 + 24 * v126 + 5208);
          v163 = v130;
          v165 = v126;
          do
          {
            v136 = *(_DWORD *)(*(_QWORD *)(v166 + (v126 << 8) + 16 * v131 + 1672) + 1024);
            if (v136 - *(_DWORD *)(v166 + 5240) >= 0)
              v137 = v136 - *(_DWORD *)(v166 + 5240);
            else
              v137 = *(_DWORD *)(v166 + 5240) - v136;
            if ((unint64_t)v129 >= *v135)
            {
              v138 = v132;
              v139 = (char *)*v132;
              v140 = 0xAAAAAAAAAAAAAAABLL * ((v129 - (_BYTE *)*v132) >> 2);
              v141 = v140 + 1;
              if (v140 + 1 > 0x1555555555555555)
                sub_1C9747024();
              if (0x5555555555555556 * ((uint64_t)(*v135 - (_QWORD)v139) >> 2) > v141)
                v141 = 0x5555555555555556 * ((uint64_t)(*v135 - (_QWORD)v139) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v135 - (_QWORD)v139) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v142 = 0x1555555555555555;
              else
                v142 = v141;
              if (v142)
              {
                if (v142 > 0x1555555555555555)
                  sub_1C9724B4C();
                v143 = (char *)operator new(12 * v142);
              }
              else
              {
                v143 = 0;
              }
              v144 = &v143[12 * v140];
              *(_DWORD *)v144 = v131;
              *((_DWORD *)v144 + 1) = v136;
              *((_DWORD *)v144 + 2) = v137;
              if (v129 == v139)
              {
                v148 = v129;
                v145 = &v143[12 * v140];
                v132 = v138;
              }
              else
              {
                v145 = &v143[12 * v140];
                v132 = v138;
                do
                {
                  v146 = *(_QWORD *)(v129 - 12);
                  v129 -= 12;
                  v147 = *((_DWORD *)v129 + 2);
                  *(_QWORD *)(v145 - 12) = v146;
                  v145 -= 12;
                  *((_DWORD *)v145 + 2) = v147;
                }
                while (v129 != v139);
                v148 = *v138;
              }
              *v132 = v145;
              v129 = v144 + 12;
              *v133 = v144 + 12;
              *v135 = &v143[12 * v142];
              if (v148)
                operator delete(v148);
              v134 = v163;
              v126 = v165;
            }
            else
            {
              *(_DWORD *)v129 = v131;
              *((_DWORD *)v129 + 1) = v136;
              *((_DWORD *)v129 + 2) = v137;
              v129 += 12;
            }
            *v133 = v129;
            ++v131;
          }
          while (v131 != v134);
          v149 = (uint64_t)*v132;
          v28 = v156;
          v29 = v157;
          v127 = v161;
          v6 = v166;
        }
        v150 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v129[-v149] >> 2));
        if (v129 == (char *)v149)
          v151 = 0;
        else
          v151 = v150;
        sub_1C9803DB0(v149, (unint64_t)v129, v151, 1);
        v152 = ((v158 & 0xFE) == 4) & v127;
        v126 = 1;
        v127 = 0;
      }
      while ((v152 & 1) != 0);
      *(_QWORD *)(v6 + 5248) = *(_QWORD *)(v29 + 496);
      *(_QWORD *)(v6 + 5256) = *(_QWORD *)(v29 + 504);
      v153 = *(_QWORD *)(v6 + 4760);
      if (*(_DWORD *)(v153 + 96))
        v154 = 42;
      else
        v154 = 48;
      *(_DWORD *)(v6 + 5428) = v154;
      v155 = *(unsigned __int8 *)(v153 + 392);
      if (v155)
        LOBYTE(v155) = *(unsigned __int8 *)(*(_QWORD *)(v6 + 5320) + 648) >= 3u
                    && *(_BYTE *)(*(_QWORD *)(v6 + 8) + 528) == 10;
      *(_BYTE *)(v28 + 112) = v155;
    }
    return;
  }
  if (v160 == v162 && !*(_DWORD *)(v6 + 52))
  {
    *(_DWORD *)(v6 + 568) = v159 - 1;
    sub_1C9710DCC((char **)(v6 + 576), v159 - 1);
    goto LABEL_134;
  }
  if (dword_1ED1ACCC0 >= 3)
  {
    fwrite("Multislice + wavefront not supported\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Multislice + wavefront not supported\n");
  }
}

BOOL sub_1C98032DC(uint64_t a1, __int16 *a2, __int16 *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int16 *v14;
  _BOOL8 result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v3 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
  if ((_DWORD)v3 == 15)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 16 * v3 + 1672);
  v5 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
  if ((_DWORD)v5 == 15)
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 16 * v5 + 1928);
  v7 = (unint64_t)*((unsigned __int8 *)a3 + 8) >> 4;
  if ((_DWORD)v7 == 15)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 16 * v7 + 1672);
  v9 = (unint64_t)*((unsigned __int8 *)a3 + 9) >> 4;
  if ((_DWORD)v9 == 15)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a1 + 16 * v9 + 1928);
  if (v4 == v8 && v6 == v10)
  {
    if (v4 != v6)
    {
      v11 = *a3 - *a2;
      if (v11 < 0)
        v11 = *a2 - *a3;
      if (v11 <= 3)
      {
        v12 = a3[1] - a2[1];
        if (v12 < 0)
          v12 = a2[1] - a3[1];
        if (v12 <= 3)
        {
          v13 = a3[2] - a2[2];
          if (v13 < 0)
            v13 = a2[2] - a3[2];
          if (v13 <= 3)
          {
            v14 = a3 + 3;
LABEL_62:
            v28 = *v14 - a2[3];
            if (v28 < 0)
              v28 = -v28;
            return v28 > 3;
          }
        }
      }
      return 1;
    }
    goto LABEL_39;
  }
  result = 1;
  if (v4 != v10 || v6 != v8)
    return result;
  if (v4 == v6)
  {
LABEL_39:
    v19 = *a3;
    v20 = *a2;
    v21 = v19 - v20;
    if (v19 - v20 < 0)
      v21 = v20 - v19;
    if (v21 <= 3)
    {
      v22 = a3[1] - a2[1];
      if (v22 < 0)
        v22 = a2[1] - a3[1];
      if (v22 <= 3)
      {
        v23 = a3[2] - a2[2];
        if (v23 < 0)
          v23 = a2[2] - a3[2];
        if (v23 <= 3)
        {
          v24 = a3[3] - a2[3];
          if (v24 < 0)
            v24 = a2[3] - a3[3];
          if (v24 < 4)
            return 0;
        }
      }
    }
    v25 = a3[2] - v20;
    if (v25 < 0)
      v25 = -v25;
    if (v25 > 3)
      return 1;
    v26 = a3[3] - a2[1];
    if (v26 < 0)
      v26 = a2[1] - a3[3];
    if (v26 > 3)
      return 1;
    v27 = v19 - a2[2];
    if (v27 < 0)
      v27 = -v27;
    if (v27 > 3)
      return 1;
LABEL_61:
    v14 = a3 + 1;
    goto LABEL_62;
  }
  v16 = a3[2] - *a2;
  if (v16 < 0)
    v16 = *a2 - a3[2];
  if (v16 <= 3)
  {
    v17 = a3[3] - a2[1];
    if (v17 < 0)
      v17 = a2[1] - a3[3];
    if (v17 <= 3)
    {
      v18 = *a3 - a2[2];
      if (v18 < 0)
        v18 = a2[2] - *a3;
      if (v18 <= 3)
        goto LABEL_61;
    }
  }
  return result;
}

void sub_1C98034FC(uint64_t a1, double a2, __n128 a3, __n128 a4)
{
  __n128 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  float v9;
  double v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _OWORD v34[8];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v33 = 0;
  v4 = 0uLL;
  memset(v34, 0, sizeof(v34));
  if (*(_BYTE *)(a1 + 58) == 1)
  {
    LODWORD(v6) = *(char *)(a1 + 516);
    if ((int)v6 <= 0)
      goto LABEL_14;
    v7 = 0;
    v8 = (uint64_t *)(a1 + 1680);
    do
    {
      sub_1C9746DB4(&v32, *(v8 - 1), *v8);
      v9 = *(float *)(v32 + 228);
      if (v9 == 0.0)
        v10 = 1.0;
      else
        v10 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 5320) + 616) + 228) / v9;
      *((long double *)v34 + v7++) = pow(v10, 0.454545455);
      v6 = *(char *)(a1 + 516);
      v8 += 2;
    }
    while (v7 < v6);
    if ((int)v6 < 1)
    {
LABEL_14:
      v15 = 0;
      a3.n128_u64[0] = 0xFFEFFFFFFFFFFFFFLL;
    }
    else
    {
      v11 = v6;
      v12 = (double *)v34;
      a3.n128_u64[0] = 0xFFEFFFFFFFFFFFFFLL;
      do
      {
        v13 = *v12++;
        v14 = v13;
        if (a3.n128_f64[0] < v13)
          a3.n128_f64[0] = v14;
        --v11;
      }
      while (v11);
      v15 = 1;
    }
    v16 = 7;
    do
    {
      v17 = 1 << v16;
      v4.n128_f64[0] = (double)(1 << v16);
      if (v16-- == 0)
        break;
      a4.n128_f64[0] = a3.n128_f64[0] * v4.n128_f64[0];
    }
    while (a3.n128_f64[0] * v4.n128_f64[0] > (double)(v17 + 127));
    if (v15)
    {
      v19 = v16 + 1;
      v20 = a1 + 672;
      v21 = *(_QWORD *)(a1 + 16);
      v22 = a1 + 5121;
      v23 = (double *)v34;
      a3.n128_u64[0] = 0.5;
      a4.n128_u64[0] = 0x405FC00000000000;
      v6 = v6;
      do
      {
        v24 = *v23 * v4.n128_f64[0] + 0.5 - v4.n128_f64[0];
        if (v24 < 127.0)
          v25 = *v23 * v4.n128_f64[0] + 0.5 - v4.n128_f64[0];
        else
          v25 = 127.0;
        if (v24 <= -128.0)
          v26 = -128.0;
        else
          v26 = v25;
        *(_QWORD *)(v20 + 4) = 0;
        *(_DWORD *)(v20 + 12) = 0;
        *(_QWORD *)(v20 + 260) = 0;
        *(_DWORD *)(v20 + 268) = 0;
        *(_WORD *)(v20 + 2) = v17 + (int)v26;
        *(_WORD *)v20 = v17 + (int)v26;
        *(_WORD *)(v20 + 258) = v17;
        *(_WORD *)(v20 + 256) = v17;
        *(_WORD *)(v20 + 10) = v17;
        *(_WORD *)(v20 + 8) = v17;
        *(_WORD *)(v20 + 266) = v17;
        *(_WORD *)(v20 + 264) = v17;
        v27 = *(unsigned __int8 *)(v21 + 2096);
        v28 = *(unsigned __int8 *)(v21 + 2098);
        if ((int)v26)
          *(_WORD *)(v22 - 1) = 1;
        ++v23;
        v22 += 2;
        v20 += 16;
        --v6;
      }
      while (v6);
      *(_BYTE *)(a1 + 556) = v19;
      *(_BYTE *)(a1 + 662) = v19;
      *(_BYTE *)(a1 + 557) = 0;
      *(_DWORD *)(a1 + 664) = v19 + 14 - v27;
      *(_DWORD *)(a1 + 668) = v19 + 14 - v28;
    }
  }
  v29 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128))v29->__on_zero_shared)(v29, v4, a3, a4);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

unint64_t sub_1C980377C(uint64_t a1, unsigned int a2, int a3)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t (*v6)(uint64_t, uint64_t, unsigned int, unsigned int, uint64_t, uint64_t, uint64_t, int);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t result;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  unint64_t v74;
  __int16 v75;
  __int16 v76;
  int v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _DWORD v85[3];
  uint64_t v86;
  _DWORD v87[2];
  _BYTE v88[6];
  _QWORD v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[120];
  _QWORD v108[2];
  _BYTE v109[16];
  _QWORD v110[289];

  v110[286] = *MEMORY[0x1E0C80C00];
  v3 = *(char *)(*(_QWORD *)(a1 + 16) + 2096);
  v4 = 3200;
  if (v3 == 8)
    v4 = 200;
  v5 = 9;
  if (v3 == 8)
    v5 = 5;
  v82 = v4;
  v83 = v5;
  v84 = (1 << (v5 - 1));
  v85[0] = v3 - 8;
  v85[1] = v3 - 8;
  if (v3 == 8)
    v6 = sub_1C97D6470;
  else
    v6 = sub_1C97D6680;
  v85[2] = v3 - 8;
  v86 = 0xBFFFC0007FFF80;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v80 = a3;
  v81 = a2;
  v7 = *(_QWORD **)(a1 + ((unint64_t)a2 << 8) + 16 * a3 + 1672);
  v8 = v7[51];
  v96[0] = v7[50];
  v96[1] = v7[65];
  LOBYTE(v97) = v3;
  v9 = v7[52];
  v10 = v7[53];
  *((_QWORD *)&v97 + 1) = v9;
  *(_QWORD *)&v98 = v8;
  v101 = 0;
  v102 = v10;
  *((_QWORD *)&v99 + 1) = v10;
  *(_QWORD *)&v100 = v8;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 5320) + 616);
  v12 = *(_QWORD *)(v11 + 408);
  v89[0] = *(_QWORD *)(v11 + 400);
  v13 = *(unsigned int *)(v11 + 520);
  v14 = *(unsigned int *)(v11 + 524);
  v16 = *(_QWORD *)(v11 + 416);
  v15 = *(_QWORD *)(v11 + 424);
  *((_QWORD *)&v90 + 1) = v16;
  *(_QWORD *)&v91 = v12;
  v94 = 0;
  v95 = v15;
  *((_QWORD *)&v92 + 1) = v15;
  *(_QWORD *)&v93 = v12;
  v17 = v109;
  bzero(v109, 0x900uLL);
  v18 = 0;
  v19 = 0;
  do
  {
    v6(v89[v18], v96[v18], v13, v14, *(_QWORD *)((char *)&v90 + v18 * 8 + 8), *(_QWORD *)((char *)&v97 + v18 * 8 + 8), (uint64_t)v17, v19++);
    v18 += 4;
    v17 += 768;
  }
  while (v18 != 12);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = v109;
  v108[0] = 0;
  v108[1] = 0;
  do
  {
    v24 = *(_QWORD *)v23;
    if (*((_QWORD *)v23 + 1) <= 1uLL)
      result = 1;
    else
      result = *((_QWORD *)v23 + 1);
    v26 = (int)(float)(*((float *)v23 + 10) * 1000.0);
    if (v26 <= 970)
      v27 = v26 > 600;
    else
      v27 = 2;
    *((_BYTE *)v108 + v20) = 0;
    if (v27)
    {
      result = (1000 * v24 + (result >> 1)) / result;
      if (result < 0x3F3)
      {
        if (result <= 0x3DD)
        {
          *((_BYTE *)v108 + v20) = 2;
          v21 += v27;
        }
      }
      else
      {
        *((_BYTE *)v108 + v20) = 1;
        v22 += v27;
      }
    }
    ++v20;
    v23 += 48;
  }
  while (v20 != 16);
  v28 = 4194368;
  v29 = a1;
  v30 = a1 + (v81 << 8) + 16 * v80 + 672;
  v106 = 0u;
  memset(v107, 0, 112);
  v105 = 0u;
  if (v22 > 8)
    v31 = 1;
  else
    v31 = 2 * (v21 > 8);
  v32 = ((int)v14 >> 2) * ((int)v13 >> 2);
  if (v32 <= 1)
    v33 = 1;
  else
    v33 = v32;
  if (v31)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = (v33 * (unint64_t)v33) << (2 * LOBYTE(v85[0]));
    v103 = xmmword_1C9857D38;
    v104 = 1;
    v38 = (uint64_t)v37 >> 1;
    result = v33 >> 1;
    v39 = v110;
    do
    {
      if (v31 == *((unsigned __int8 *)v108 + v34))
      {
        v40 = &v109[48 * v34];
        v41 = *(_QWORD *)v40;
        v42 = *((_QWORD *)v40 + 1);
        v43 = *((_QWORD *)v40 + 3);
        v44 = (v38 + *((_QWORD *)v40 + 2) * v33 - v41 * v41) / v37;
        v45 = __OFSUB__(v82, v44);
        v47 = v82 - v44;
        v46 = (v47 < 0) ^ v45 | (v47 == 0);
        v48 = (v47 + v84) >> v83;
        if (v46)
          v49 = 1;
        else
          v49 = v48 + 1;
        *(_QWORD *)&v103 = v49;
        if (!v46
          && (int)(float)(*((float *)v40 + 10) * 1000.0) <= 969
          && (uint64_t)((v38 + v43 * v33 - v42 * v42) / v37) < v82)
        {
          *((_QWORD *)v40 + 2) = (v41 * v41 + result) / v33;
          *((_QWORD *)v40 + 3) = (v42 * v42 + result) / v33;
          v110[6 * v34 + 2] = (result + v42 * v41) / v33;
        }
        v50 = 0;
        v51 = &v106;
        v52 = v39;
        do
        {
          v53 = *(_QWORD *)((char *)&v103 + v50);
          v54 = *((_QWORD *)v51 - 1) + *(v52 - 1) * v53;
          *((_QWORD *)v51 - 2) += *(v52 - 2) * v53;
          *((_QWORD *)v51 - 1) = v54;
          v55 = *((_QWORD *)v51 + 1) + v52[1] * v53;
          *(_QWORD *)v51 += *v52 * v53;
          *((_QWORD *)v51 + 1) = v55;
          *((_QWORD *)v51 + 2) += v52[2] * v53;
          v50 += 8;
          v52 += 96;
          v51 += 3;
        }
        while (v50 != 24);
        ++v36;
        v35 += v49;
      }
      ++v34;
      v39 += 6;
    }
    while (v34 != 16);
    v56 = 64;
    strcpy(&v88[4], "@");
    *(_DWORD *)v88 = 4194368;
    memset(v87, 0, 6);
    if (v36)
    {
      v57 = 0;
      *((_QWORD *)&v103 + 1) = ((int)v14 >> 3) * ((int)v13 >> 3) * v36;
      v104 = *((_QWORD *)&v103 + 1);
      *(_QWORD *)&v103 = v35 * v33;
      v58 = SWORD2(v86);
      v59 = SHIWORD(v86);
      v60 = (__int16)v86;
      v61 = v107;
      v62 = SWORD1(v86);
      result = 0xFFFFFFFFLL;
      do
      {
        v63 = *((_QWORD *)&v103 + v57);
        v64 = v85[v57];
        v65 = (v63 * v63) << (2 * v64);
        v67 = *(v61 - 4);
        v66 = *(v61 - 3);
        v68 = *v61 * v63 - v66 * v67;
        v69 = *(v61 - 1) * v63 - v66 * v66;
        if (v69 <= 1)
          v69 = 1;
        if (v63 <= 1)
          v63 = 1;
        if (v69 <= 16 * v65 || v68 <= 16 * v65)
          LODWORD(v71) = *(__int16 *)&v88[2 * v57];
        else
          v71 = (uint64_t)(((unint64_t)v69 >> 1) + (v68 << 6)) / v69;
        if ((int)v71 >= v59)
          v72 = v59;
        else
          v72 = v71;
        if ((int)v71 >= v58)
          v73 = v72;
        else
          v73 = v58;
        *(_WORD *)&v88[2 * v57] = v73;
        v61 += 6;
        v74 = (unint64_t)((uint64_t)((v67 << 6) + ((unint64_t)v63 >> 1) - v66 * v73) / v63 + 32) >> 6;
        if ((int)v74 <= v62)
          v75 = v74;
        else
          v75 = v62;
        if ((int)v74 >= v60)
          v76 = v75;
        else
          v76 = v60;
        *((_WORD *)v87 + v57++) = v76 & (-1 << v64);
      }
      while (v57 != 3);
      v56 = *(unsigned __int16 *)v88;
      v77 = LOWORD(v87[0]);
      v28 = *(_DWORD *)&v88[2];
      v36 = *(_DWORD *)((char *)v87 + 2);
      v30 = a1 + (v81 << 8) + 16 * v80 + 672;
      v29 = a1;
    }
    else
    {
      v77 = 0;
      v30 = a1 + (v81 << 8) + 16 * v80 + 672;
      v29 = a1;
      v28 = 4194368;
    }
  }
  else
  {
    v36 = 0;
    v77 = 0;
    v56 = 64;
  }
  *(_WORD *)(v30 + 2) = v56;
  *(_WORD *)v30 = v56;
  *(_WORD *)(v30 + 6) = v77;
  *(_WORD *)(v30 + 4) = v77;
  *(_DWORD *)(v30 + 8) = v28;
  *(_DWORD *)(v30 + 12) = v36;
  *(_WORD *)(v29 + 556) = 6;
  *(_BYTE *)(v29 + 662) = 6;
  v78 = *(_QWORD *)(v29 + 16);
  *(_DWORD *)(v29 + 664) = 20 - *(unsigned __int8 *)(v78 + 2096);
  *(_DWORD *)(v29 + 668) = 20 - *(unsigned __int8 *)(v78 + 2098);
  if (v77 || v56 != 64)
    *(_BYTE *)(v29 + 32 * v81 + 2 * v80 + 5120) = 1;
  if ((_WORD)v36 || (unsigned __int16)v28 != 64 || HIWORD(v36) || (v28 & 0xFFFF0000) != 0x400000)
    *(_BYTE *)(v29 + 32 * v81 + 2 * v80 + 5121) = 1;
  return result;
}

uint64_t sub_1C9803DB0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;

  v7 = result;
LABEL_2:
  v8 = (uint64_t *)(a2 - 12);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v9 + 8))
        {
          v103 = *(_DWORD *)(v9 + 8);
          v98 = *(_QWORD *)v9;
          v46 = *v8;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)v9 = v46;
          *(_DWORD *)(a2 - 4) = v103;
          *v8 = v98;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C9804578((uint64_t *)v9, (uint64_t *)(v9 + 12), (uint64_t *)(a2 - 12));
      case 4:
        return (uint64_t)sub_1C9804668(v9, v9 + 12, v9 + 24, a2 - 12);
      case 5:
        return (uint64_t)sub_1C9804734(v9, v9 + 12, v9 + 24, v9 + 36, a2 - 12);
      default:
        if (v10 <= 287)
        {
          v47 = v9 + 12;
          v49 = v9 == a2 || v47 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v49)
            {
              v50 = 0;
              v51 = v9;
              do
              {
                v52 = *(_DWORD *)(v51 + 20);
                v53 = *(_DWORD *)(v51 + 8);
                v51 = v47;
                if (v52 < v53)
                {
                  v54 = *(_QWORD *)v47;
                  v55 = v50;
                  while (1)
                  {
                    v56 = v9 + v55;
                    *(_QWORD *)(v56 + 12) = *(_QWORD *)(v9 + v55);
                    *(_DWORD *)(v56 + 20) = *(_DWORD *)(v9 + v55 + 8);
                    if (!v55)
                      break;
                    v55 -= 12;
                    if (v52 >= *(_DWORD *)(v56 - 4))
                    {
                      v57 = v9 + v55 + 12;
                      goto LABEL_77;
                    }
                  }
                  v57 = v9;
LABEL_77:
                  *(_QWORD *)v57 = v54;
                  *(_DWORD *)(v57 + 8) = v52;
                }
                v47 = v51 + 12;
                v50 += 12;
              }
              while (v51 + 12 != a2);
            }
          }
          else if (!v49)
          {
            do
            {
              v91 = *(_DWORD *)(v7 + 20);
              v92 = *(_DWORD *)(v7 + 8);
              v7 = v47;
              if (v91 < v92)
              {
                v93 = *(_QWORD *)v47;
                do
                {
                  v94 = v47;
                  v95 = *(_QWORD *)(v47 - 12);
                  v47 -= 12;
                  *(_QWORD *)v94 = v95;
                  *(_DWORD *)(v94 + 8) = *(_DWORD *)(v94 - 4);
                }
                while (v91 < *(_DWORD *)(v94 - 16));
                *(_QWORD *)v47 = v93;
                *(_DWORD *)(v47 + 8) = v91;
              }
              v47 = v7 + 12;
            }
            while (v7 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v58 = (unint64_t)(v11 - 2) >> 1;
            v59 = v58;
            do
            {
              v60 = v59;
              if (v58 >= v59)
              {
                v61 = (2 * v59) | 1;
                v62 = v9 + 12 * v61;
                if (2 * v60 + 2 < v11)
                {
                  v63 = *(_DWORD *)(v9 + 12 * v61 + 8);
                  v64 = *(_DWORD *)(v62 + 20);
                  v62 += 12 * (v63 < v64);
                  if (v63 < v64)
                    v61 = 2 * v60 + 2;
                }
                v65 = *(_DWORD *)(v9 + 12 * v60 + 8);
                if (*(_DWORD *)(v62 + 8) >= v65)
                {
                  v66 = v9 + 12 * v60;
                  v67 = *(_QWORD *)v66;
                  do
                  {
                    v68 = v66;
                    v66 = v62;
                    v69 = *(_QWORD *)v62;
                    *(_DWORD *)(v68 + 8) = *(_DWORD *)(v66 + 8);
                    *(_QWORD *)v68 = v69;
                    if (v58 < v61)
                      break;
                    v70 = (2 * v61) | 1;
                    v62 = v9 + 12 * v70;
                    v71 = 2 * v61 + 2;
                    if (v71 < v11)
                    {
                      v72 = *(_DWORD *)(v9 + 12 * v70 + 8);
                      v73 = *(_DWORD *)(v62 + 20);
                      v62 += 12 * (v72 < v73);
                      if (v72 < v73)
                        v70 = v71;
                    }
                    v61 = v70;
                  }
                  while (*(_DWORD *)(v62 + 8) >= v65);
                  *(_QWORD *)v66 = v67;
                  *(_DWORD *)(v66 + 8) = v65;
                }
              }
              v59 = v60 - 1;
            }
            while (v60);
            v74 = v10 / 0xCuLL;
            do
            {
              v75 = 0;
              v104 = *(_DWORD *)(v9 + 8);
              v99 = *(_QWORD *)v9;
              v76 = v9;
              do
              {
                v77 = v75 + 1;
                v78 = v76 + 12 * (v75 + 1);
                result = 2 * v75;
                v79 = (2 * v75) | 1;
                v80 = 2 * v75 + 2;
                if (v80 < v74)
                {
                  v81 = *(_DWORD *)(v76 + 12 * v77 + 8);
                  result = *(unsigned int *)(v78 + 20);
                  v78 += 12 * (v81 < (int)result);
                  if (v81 < (int)result)
                    v79 = v80;
                }
                v82 = *(_QWORD *)v78;
                *(_DWORD *)(v76 + 8) = *(_DWORD *)(v78 + 8);
                *(_QWORD *)v76 = v82;
                v76 = v78;
                v75 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              a2 -= 12;
              if (v78 == a2)
              {
                *(_DWORD *)(v78 + 8) = v104;
                *(_QWORD *)v78 = v99;
              }
              else
              {
                v83 = *(_QWORD *)a2;
                *(_DWORD *)(v78 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v78 = v83;
                *(_DWORD *)(a2 + 8) = v104;
                *(_QWORD *)a2 = v99;
                v84 = v78 - v9 + 12;
                if (v84 >= 13)
                {
                  v85 = (unint64_t)(-2 - 0x5555555555555555 * (v84 >> 2)) >> 1;
                  v86 = *(_DWORD *)(v78 + 8);
                  if (*(_DWORD *)(v9 + 12 * v85 + 8) < v86)
                  {
                    v87 = *(_QWORD *)v78;
                    do
                    {
                      v88 = v78;
                      v78 = v9 + 12 * v85;
                      v89 = *(_QWORD *)v78;
                      result = *(unsigned int *)(v78 + 8);
                      *(_DWORD *)(v88 + 8) = result;
                      *(_QWORD *)v88 = v89;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v9 + 12 * v85 + 8) < v86);
                    *(_QWORD *)v78 = v87;
                    *(_DWORD *)(v78 + 8) = v86;
                  }
                }
              }
            }
            while (v74-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 12 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x601)
        {
          result = (uint64_t)sub_1C9804578((uint64_t *)(v7 + 12 * v12), (uint64_t *)v7, (uint64_t *)(a2 - 12));
        }
        else
        {
          sub_1C9804578((uint64_t *)v7, (uint64_t *)(v7 + 12 * v12), (uint64_t *)(a2 - 12));
          v14 = 3 * v12;
          v15 = (uint64_t *)(v7 + 12 * v12 - 12);
          sub_1C9804578((uint64_t *)(v7 + 12), v15, (uint64_t *)(a2 - 24));
          v16 = (uint64_t *)(v7 + 12 + 4 * v14);
          sub_1C9804578((uint64_t *)(v7 + 24), v16, (uint64_t *)(a2 - 36));
          result = (uint64_t)sub_1C9804578(v15, (uint64_t *)v13, v16);
          v100 = *(_DWORD *)(v7 + 8);
          v96 = *(_QWORD *)v7;
          v17 = *(_DWORD *)(v13 + 8);
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_DWORD *)(v7 + 8) = v17;
          *(_DWORD *)(v13 + 8) = v100;
          *(_QWORD *)v13 = v96;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(_DWORD *)(v7 + 8);
          if (*(_DWORD *)(v7 - 4) < v18)
            goto LABEL_12;
          if (v18 >= *(_DWORD *)(a2 - 4))
          {
            v36 = v7 + 12;
            do
            {
              v9 = v36;
              if (v36 >= a2)
                break;
              v37 = *(_DWORD *)(v36 + 8);
              v36 += 12;
            }
            while (v18 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v9 = v34 + 12;
              v35 = *(_DWORD *)(v34 + 20);
              v34 += 12;
            }
            while (v18 >= v35);
          }
          v38 = a2;
          if (v9 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 12;
              v40 = *(_DWORD *)(v39 - 4);
              v39 -= 12;
            }
            while (v18 < v40);
          }
          v41 = *(_QWORD *)v7;
          while (v9 < v38)
          {
            v102 = *(_DWORD *)(v9 + 8);
            v97 = *(_QWORD *)v9;
            v42 = *(_QWORD *)v38;
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v38 + 8);
            *(_QWORD *)v9 = v42;
            *(_DWORD *)(v38 + 8) = v102;
            *(_QWORD *)v38 = v97;
            do
            {
              v43 = *(_DWORD *)(v9 + 20);
              v9 += 12;
            }
            while (v18 >= v43);
            do
            {
              v44 = *(_DWORD *)(v38 - 4);
              v38 -= 12;
            }
            while (v18 < v44);
          }
          if (v9 - 12 != v7)
          {
            v45 = *(_QWORD *)(v9 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 4);
            *(_QWORD *)v7 = v45;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 12) = v41;
          *(_DWORD *)(v9 - 4) = v18;
          continue;
        }
        v18 = *(_DWORD *)(v7 + 8);
LABEL_12:
        v19 = *(_QWORD *)v7;
        v20 = v7;
        do
        {
          v21 = v20;
          v20 += 12;
        }
        while (*(_DWORD *)(v21 + 20) < v18);
        v22 = a2;
        if (v21 == v7)
        {
          v25 = a2;
          while (v20 < v25)
          {
            v23 = v25 - 12;
            v26 = *(_DWORD *)(v25 - 4);
            v25 -= 12;
            if (v26 < v18)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 12;
            v24 = *(_DWORD *)(v22 - 4);
            v22 -= 12;
          }
          while (v24 >= v18);
        }
LABEL_22:
        v9 = v20;
        if (v20 < v23)
        {
          v27 = v23;
          do
          {
            v28 = *(_QWORD *)v9;
            v101 = *(_DWORD *)(v9 + 8);
            v29 = *(_DWORD *)(v27 + 8);
            *(_QWORD *)v9 = *(_QWORD *)v27;
            *(_DWORD *)(v9 + 8) = v29;
            *(_DWORD *)(v27 + 8) = v101;
            *(_QWORD *)v27 = v28;
            do
            {
              v30 = *(_DWORD *)(v9 + 20);
              v9 += 12;
            }
            while (v30 < v18);
            do
            {
              v31 = *(_DWORD *)(v27 - 4);
              v27 -= 12;
            }
            while (v31 >= v18);
          }
          while (v9 < v27);
        }
        if (v9 - 12 != v7)
        {
          v32 = *(_QWORD *)(v9 - 12);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 4);
          *(_QWORD *)v7 = v32;
        }
        *(_QWORD *)(v9 - 12) = v19;
        *(_DWORD *)(v9 - 4) = v18;
        if (v20 < v23)
        {
LABEL_33:
          result = sub_1C9803DB0(v7, v9 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1C980483C(v7, v9 - 12);
        result = sub_1C980483C(v9, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v9 - 12;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C9804578(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a3 + 2);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      v8 = *((_DWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_DWORD *)a3 + 2) = v8;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        v11 = *((_DWORD *)result + 2);
        v12 = *result;
        v13 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v13;
        *a2 = v12;
        *((_DWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_DWORD *)result + 2);
      v15 = *result;
      v16 = *((_DWORD *)a2 + 2);
      *result = *a2;
      *((_DWORD *)result + 2) = v16;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v14;
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2))
        return result;
      v5 = *((_DWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_DWORD *)result + 2);
      v6 = *result;
      v7 = *((_DWORD *)a3 + 2);
      *result = *a3;
      *((_DWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_DWORD *)a3 + 2) = v5;
  }
  return result;
}

uint64_t *sub_1C9804668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  result = sub_1C9804578((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    v9 = *(_DWORD *)(a3 + 8);
    v10 = *(_QWORD *)a3;
    v11 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v11;
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      v12 = *(_DWORD *)(a2 + 8);
      v13 = *(_QWORD *)a2;
      v14 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v14;
      *(_QWORD *)a3 = v13;
      *(_DWORD *)(a3 + 8) = v12;
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)a2 = v16;
        *(_DWORD *)(a2 + 8) = v15;
      }
    }
  }
  return result;
}

uint64_t *sub_1C9804734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;

  result = sub_1C9804668(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 8) < *(_DWORD *)(a4 + 8))
  {
    v11 = *(_DWORD *)(a4 + 8);
    v12 = *(_QWORD *)a4;
    v13 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)(a4 + 8) = v13;
    *(_QWORD *)a5 = v12;
    *(_DWORD *)(a5 + 8) = v11;
    if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      v14 = *(_DWORD *)(a3 + 8);
      v15 = *(_QWORD *)a3;
      v16 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_DWORD *)(a3 + 8) = v16;
      *(_QWORD *)a4 = v15;
      *(_DWORD *)(a4 + 8) = v14;
      if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_QWORD *)a2;
        v19 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = v19;
        *(_QWORD *)a3 = v18;
        *(_DWORD *)(a3 + 8) = v17;
        if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          v20 = *(_DWORD *)(a1 + 8);
          v21 = *(_QWORD *)a1;
          v22 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v22;
          *(_QWORD *)a2 = v21;
          *(_DWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C980483C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 8))
      {
        v6 = *(_DWORD *)(a1 + 8);
        v7 = *(_QWORD *)a1;
        v8 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      sub_1C9804578((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      sub_1C9804668(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      sub_1C9804734(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12);
      return 1;
    default:
      v9 = a1 + 24;
      sub_1C9804578((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v10 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_QWORD *)(v16 + 36) = *(_QWORD *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24)
          break;
        v15 -= 12;
        if (v13 >= *(_DWORD *)(v16 + 20))
        {
          v17 = a1 + v15 + 36;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 12 == a2;
    }
    v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2)
      return 1;
  }
}

uint64_t sub_1C98049DC(uint64_t a1, int a2)
{
  int32x2_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  __int128 v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *i;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t (*v154)(uint64_t, uint64_t, int);
  uint64_t (*v155)(int);
  uint64_t (*v156)(int);
  uint64_t (*v157)(int);
  uint64_t (*v158)(int);
  int v159;
  BOOL v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  uint32x4_t v167;
  BOOL v168;
  uint64_t v169;
  BOOL v171;
  _BYTE *v172;
  unsigned int v173;
  BOOL v174;
  BOOL v175;
  int v176;
  BOOL v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *(*v186)(void *, int, uint64_t, char *, uint64_t, char *);
  uint64_t (*v187)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  unsigned __int8 *v193;
  int v194;
  int32x4_t v195;
  int v196;
  int v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int32x4_t v216;
  uint32x4_t v217;
  int8x16_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  unsigned __int128 v223;
  unsigned int v224;
  uint64_t v225;
  signed int v226;
  int v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  uint32x4_t v238;
  uint32x4_t v239;
  int8x16_t v240;
  uint32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  uint32x4_t v244;
  int8x16_t v245;
  uint32x4_t v246;
  int8x16_t v247;
  int v248;
  int v249;
  int v250;
  int8x16_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  _BYTE *v266;
  char *v267;
  char *v268;
  char *v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  char *v281;
  uint64_t j;
  uint64_t v283;
  _BYTE *v284;
  int v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  _OWORD *v304;
  char *v305;
  char *v306;
  char *v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  char *v314;
  uint64_t k;
  uint64_t v316;
  _OWORD *v317;
  int v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  uint64_t v387;
  int v388;
  unsigned int v389;
  BOOL v390;
  uint64_t v391;
  _BOOL4 v392;
  uint64_t v393;
  unsigned int v394;
  char v395;
  uint64_t v396;
  _BYTE **v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  unsigned int v404;
  uint64_t v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  BOOL v417;
  _BYTE *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char v422;
  size_t v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  unsigned __int8 *v427;
  unsigned __int8 *v428;
  _DWORD *v429;
  unsigned __int8 *v430;
  int v431;
  int v432;
  int v433;
  void *v434;
  unint64_t v435;
  unsigned __int8 *v436;
  uint64_t v437;
  uint64_t v438;
  unsigned int v439;
  unsigned int v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  int v444;
  int v445;
  _BYTE **v446;
  uint64_t v447;
  int v448;
  int v449;
  int v450;
  FILE *v451;
  const char *v452;
  const char *v453;
  size_t v454;
  uint64_t v455;
  int v456;
  uint64_t *v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  unsigned __int8 *v465;
  unint64_t v466;
  int v467;
  int v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unsigned int v471;
  unsigned int v472;
  _BOOL4 v473;
  int v474;
  int v475;
  unsigned int v476;
  unsigned int v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  uint64_t v493;
  unsigned int v494;
  unsigned int v495;
  int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  unsigned int v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  unsigned int v512;
  int v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  uint64_t v520;
  unsigned int v521;
  int v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  unsigned int v526;
  int v527;
  int v528;
  unsigned int v529;
  unsigned int v530;
  uint64_t v531;
  unsigned int v532;
  unsigned int v533;
  unsigned int v534;
  unsigned int v535;
  int v536;
  int v537;
  unsigned int v538;
  unsigned int v539;
  _BYTE *v540;
  int v541;
  int v542;
  unsigned int v543;
  unsigned int v544;
  int v545;
  int v546;
  unsigned int v547;
  unsigned int v548;
  uint64_t v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  unsigned int v553;
  unint64_t v554;
  unsigned int v555;
  unsigned int v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unsigned int *v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unsigned int v564;
  unsigned int v565;
  char v566;
  const char *v567;
  std::bad_alloc *exception;
  std::bad_alloc *v569;
  _BOOL4 v570;
  int v571;
  int v572;
  int v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  int32x4_t v577;
  int32x4_t v578;
  unsigned int v579;
  int32x4_t v580;
  int32x4_t v581;
  unsigned int v582;
  int8x16_t v583;
  int8x16_t v584;
  unsigned int v585;
  unsigned int v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  int8x16_t v592;
  int8x16_t v593;
  int v594;
  int8x16_t v595;
  int8x16_t v596;
  char v597;
  unint64_t v598;
  int v599;
  int8x16_t v600;
  uint64_t v601;
  char v602;
  int8x16_t v603;
  uint64_t v604;
  int v605;
  int8x16_t v606;
  uint64_t v607;
  int v608;
  int32x4_t v609;
  char v610;
  int v611;
  uint64_t v612;
  int v613;
  int32x4_t v614;
  uint64_t v615;
  int v616;
  int v617;
  void *memptr;
  char v619;

  v5 = *(_QWORD *)(a1 + 5320);
  v6 = *(_QWORD *)(v5 + 576);
  v7 = *(_QWORD *)(v5 + 632);
  v8 = *(char *)(v6 + 480);
  v9 = *(_DWORD *)(a1 + 568);
  v575 = v6;
  v10 = *(_DWORD *)(v6 + 524);
  v587 = (v9 + 1);
  v574 = v9;
  if (v10 >= (int)v587)
    v11 = (v9 + 1);
  else
    v11 = v10;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 1576) + 33))
    v12 = *(_BYTE *)(*(_QWORD *)(a1 + 1568) + 52) != 0;
  else
    v12 = 0;
  v13 = (BOOL *)(a1 + 5432);
  v14 = *(char *)(a1 + 653);
  v572 = *(_DWORD *)(v575 + 544);
  v573 = *(_DWORD *)(v7 + 524);
  v591 = *(_DWORD *)(a1 + 52);
  v617 = 0;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(unsigned __int8 *)(v15 + 201);
  v605 = *(_DWORD *)(v15 + 2120);
  v599 = *(_DWORD *)(v15 + 2124);
  v597 = *(_BYTE *)(v15 + 2113);
  v608 = *(unsigned __int8 *)(v15 + 2096);
  v594 = *(unsigned __int8 *)(v15 + 2098);
  if (v16 >= 2)
    v17 = v16 < 3;
  else
    v17 = (v16 < 3) + 1;
  v602 = v17;
  if (v8 >= 2 && dword_1ED1ACCC0 >= 4)
  {
    fwrite("max_slice_data_size calculation needs additional work for arbitrary slices\n", 0x4BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(28, "max_slice_data_size calculation needs additional work for arbitrary slices\n");
  }
  v19 = *(unsigned __int8 *)(a1 + 58) <= 1u && *(_BYTE *)(*(_QWORD *)(a1 + 5320) + 216) != 0;
  *v13 = v19;
  v13[1] = 0;
  v20 = *(_QWORD *)(a1 + 4760);
  *(_DWORD *)(a1 + 5436) = *(_DWORD *)(v20 + 560);
  *(_QWORD *)(a1 + 5440) = 0;
  *(_QWORD *)(a1 + 5448) = -1;
  *(_QWORD *)(a1 + 5456) = -1;
  v13[32] = 0;
  if (*(_BYTE *)(v20 + 553))
  {
    v21 = (_QWORD *)(a1 + 5448);
    v22 = atomic_load((unsigned __int8 *)&qword_1EF920F38);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1EF920F38))
    {
      dword_1EF920F30 = 32;
      __cxa_guard_release(&qword_1EF920F38);
    }
    v23 = 0;
    *v21 = 0;
    *(_QWORD *)(a1 + 5456) = 0;
    *(_BYTE *)(a1 + 5464) = 0;
    v24 = *(_QWORD *)(a1 + 5320);
    if (*(_BYTE *)(a1 + 58) != 2)
    {
      v25 = (*(_BYTE *)(v24 + 648) & 0xFE) == 4
         && *(_DWORD *)(*(_QWORD *)(a1 + 5216) + 8) < *(_DWORD *)(*(_QWORD *)(a1 + 5192) + 8);
      v26 = *(_QWORD *)(a1 + (v25 << 8) + 16 * **(int **)(a1 + 24 * v25 + 5192) + 1672);
      v27 = (_OWORD *)(v26 + 664);
      v28 = *(_QWORD *)(v26 + 680);
      *(_OWORD *)v21 = *v27;
      *(_QWORD *)(a1 + 5464) = v28;
      v23 = *(_DWORD *)(a1 + 5460);
    }
    v29 = *(_QWORD *)(v24 + 616);
    v30 = *(_DWORD *)(v29 + 672);
    v31 = *(_DWORD *)(v29 + 664);
    v32 = v31 >= 151 && v31 > 2 * *(_DWORD *)(v29 + 668);
    if (v23 > 399)
      v32 = 1;
    if (!v32 && v30 > dword_1EF920F30 && *(_DWORD *)(a1 + 5456) > dword_1EF920F30 && v23 > dword_1EF920F30)
    {
      v33 = 2 * v23;
      v34 = *(_DWORD *)(a1 + 5448);
      if (v34 < 2 * v23)
        v33 = *(_DWORD *)(a1 + 5448);
      v35 = (v33 << 10) / v34;
      *(_DWORD *)(a1 + 5444) = v35;
      v36 = *(_QWORD *)(a1 + 4760);
      v37 = *(_BYTE *)(v36 + 552);
      v13[1] = v37;
      *(_BYTE *)(v29 + 680) = v37;
      if (*(_BYTE *)(v36 + 554))
      {
        v38 = (int)nearbyintf(*(float *)(v36 + 556) * 32.0);
        if (v30 >= v23)
          v30 = sub_1C980ADBC((v30 * v30 + v23 * v23));
        *(_DWORD *)(a1 + 5440) = (((v30 * v38 + 16) >> 5) * v35 + 512) >> 10;
      }
    }
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 5320);
  }
  v39 = *(_DWORD *)(a1 + 5436);
  if (!v39)
  {
    v39 = *(_DWORD *)(v24 + 668);
    *(_DWORD *)(a1 + 5436) = v39;
  }
  *(_DWORD *)(*(_QWORD *)(v24 + 616) + 684) = v39;
  v40 = *(_QWORD **)(a1 + 5360);
  v41 = *(_QWORD *)(a1 + 5352);
  v42 = ((uint64_t)v40 - v41) >> 6;
  if ((int)v587 > v42)
  {
    v43 = *(_QWORD *)(a1 + 5368);
    if ((int)v587 - v42 <= (v43 - (uint64_t)v40) >> 6)
    {
      v67 = &v40[8 * ((int)v587 - v42)];
      do
      {
        *v40 = 0;
        v40[1] = 0;
        v40[2] = 0;
        v40[5] = 0;
        v40[6] = 0;
        v40[4] = 0;
        v40 += 8;
      }
      while (v40 != v67);
      *(_QWORD *)(a1 + 5360) = v67;
      goto LABEL_77;
    }
    if ((v587 & 0x80000000) != 0)
      sub_1C9747024();
    v44 = v43 - v41;
    v45 = (v43 - v41) >> 5;
    if (v45 <= (int)v587)
      v45 = (int)v587;
    if (v44 >= 0x7FFFFFFFFFFFFFC0)
      v46 = 0x3FFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46 >> 58)
      goto LABEL_546;
    v47 = (char *)operator new(v46 << 6);
    v48 = &v47[64 * v42];
    v49 = &v47[64 * (uint64_t)(int)v587];
    v50 = v48;
    do
    {
      *(_QWORD *)v50 = 0;
      *((_QWORD *)v50 + 1) = 0;
      *((_QWORD *)v50 + 2) = 0;
      *((_QWORD *)v50 + 5) = 0;
      *((_QWORD *)v50 + 6) = 0;
      *((_QWORD *)v50 + 4) = 0;
      v50 += 64;
    }
    while (v50 != v49);
    v51 = &v47[64 * v46];
    v52 = *(char **)(a1 + 5360);
    v53 = *(char **)(a1 + 5352);
    if (v52 == v53)
    {
      *(_QWORD *)(a1 + 5352) = v48;
      *(_QWORD *)(a1 + 5360) = v49;
      *(_QWORD *)(a1 + 5368) = v51;
      if (!v52)
        goto LABEL_77;
    }
    else
    {
      v54 = 0;
      do
      {
        v55 = &v48[v54];
        v56 = &v52[v54];
        *((_QWORD *)v55 - 8) = 0;
        *((_QWORD *)v55 - 7) = 0;
        *((_QWORD *)v55 - 6) = 0;
        *((_OWORD *)v55 - 4) = *(_OWORD *)&v52[v54 - 64];
        *((_QWORD *)v55 - 6) = *(_QWORD *)&v52[v54 - 48];
        *((_QWORD *)v56 - 8) = 0;
        *((_QWORD *)v56 - 7) = 0;
        *((_QWORD *)v56 - 6) = 0;
        v57 = *(_OWORD *)&v52[v54 - 40];
        v58 = *(_OWORD *)&v52[v54 - 24];
        *(v55 - 8) = v52[v54 - 8];
        *(_OWORD *)(v55 - 24) = v58;
        *(_OWORD *)(v55 - 40) = v57;
        v54 -= 64;
      }
      while (&v52[v54] != v53);
      v59 = *(char **)(a1 + 5352);
      v52 = *(char **)(a1 + 5360);
      *(_QWORD *)(a1 + 5352) = &v48[v54];
      *(_QWORD *)(a1 + 5360) = v49;
      *(_QWORD *)(a1 + 5368) = v51;
      if (v52 != v59)
      {
        v60 = v52;
        do
        {
          v62 = (void *)*((_QWORD *)v60 - 8);
          v60 -= 64;
          v61 = v62;
          if (v62)
          {
            *((_QWORD *)v52 - 7) = v61;
            operator delete(v61);
          }
          v52 = v60;
        }
        while (v60 != v59);
        v52 = v59;
      }
      if (!v52)
        goto LABEL_77;
    }
    operator delete(v52);
    goto LABEL_77;
  }
  if ((int)v587 < v42)
  {
    v63 = (_QWORD *)(v41 + ((uint64_t)(int)v587 << 6));
    if (v40 != v63)
    {
      v64 = *(_QWORD **)(a1 + 5360);
      do
      {
        v66 = (void *)*(v64 - 8);
        v64 -= 8;
        v65 = v66;
        if (v66)
        {
          *(v40 - 7) = v65;
          operator delete(v65);
        }
        v40 = v64;
      }
      while (v64 != v63);
    }
    *(_QWORD *)(a1 + 5360) = v63;
  }
LABEL_77:
  v68 = *(_QWORD **)(a1 + 5336);
  v69 = *(_QWORD *)(a1 + 5328);
  v70 = 0xCBEEA4E1A08AD8F3 * (((uint64_t)v68 - v69) >> 3);
  v71 = (int)v587 - v70;
  v589 = v11;
  if ((int)v587 > v70)
  {
    v72 = *(_QWORD *)(a1 + 5344);
    if (0xCBEEA4E1A08AD8F3 * ((v72 - (uint64_t)v68) >> 3) >= v71)
    {
      v108 = &v68[59 * v71];
      v109 = 472 * (int)v587 - 472 * v70;
      do
      {
        v68[4] = 0;
        v68[5] = 0;
        *v68 = off_1E82918A8;
        v68[32] = 0;
        v68[33] = 0;
        v68[58] = 0;
        v68 += 59;
        v109 -= 472;
      }
      while (v109);
      *(_QWORD *)(a1 + 5336) = v108;
      goto LABEL_98;
    }
    if ((v587 & 0x80000000) != 0)
      sub_1C9747024();
    v73 = 0xCBEEA4E1A08AD8F3 * ((v72 - v69) >> 3);
    v74 = 0x97DD49C34115B1E6 * ((v72 - v69) >> 3);
    if (v74 <= (int)v587)
      v74 = (int)v587;
    if (v73 >= 0x456C797DD49C34)
      v75 = 0x8AD8F2FBA93868;
    else
      v75 = v74;
    if (v75 <= 0x8AD8F2FBA93868)
    {
      v76 = (char *)operator new(472 * v75);
      v77 = &v76[472 * v70];
      v78 = &v76[472 * (int)v587];
      v79 = 472 * (int)v587 - 472 * v70;
      v80 = v77;
      do
      {
        *((_QWORD *)v80 + 4) = 0;
        *((_QWORD *)v80 + 5) = 0;
        *(_QWORD *)v80 = off_1E82918A8;
        *((_QWORD *)v80 + 32) = 0;
        *((_QWORD *)v80 + 33) = 0;
        *((_QWORD *)v80 + 58) = 0;
        v80 += 472;
        v79 -= 472;
      }
      while (v79);
      v81 = &v76[472 * v75];
      v82 = *(char **)(a1 + 5336);
      v83 = *(char **)(a1 + 5328);
      if (v82 != v83)
      {
        do
        {
          v84 = v77;
          v77 -= 472;
          v85 = v84 - 58;
          v86 = *((_OWORD *)v82 - 28);
          *v85 = *((_OWORD *)v82 - 29);
          v85[1] = v86;
          v87 = *((_OWORD *)v82 - 27);
          v88 = *((_OWORD *)v82 - 26);
          v89 = *((_OWORD *)v82 - 24);
          v85[4] = *((_OWORD *)v82 - 25);
          v85[5] = v89;
          v85[2] = v87;
          v85[3] = v88;
          v90 = *((_OWORD *)v82 - 23);
          v91 = *((_OWORD *)v82 - 22);
          v92 = *((_OWORD *)v82 - 20);
          v85[8] = *((_OWORD *)v82 - 21);
          v85[9] = v92;
          v85[6] = v90;
          v85[7] = v91;
          v93 = *((_OWORD *)v82 - 19);
          v94 = *((_OWORD *)v82 - 18);
          v95 = *((_OWORD *)v82 - 17);
          *((_OWORD *)v84 - 16) = *((_OWORD *)v82 - 16);
          v85[11] = v94;
          v85[12] = v95;
          v85[10] = v93;
          *(_QWORD *)v77 = off_1E82918A8;
          v96 = *(_OWORD *)(v82 - 247);
          v97 = *(_OWORD *)(v82 - 231);
          v98 = *(_OWORD *)(v82 - 215);
          *(_OWORD *)((char *)v84 - 199) = *(_OWORD *)(v82 - 199);
          *(_OWORD *)((char *)v84 - 215) = v98;
          *(_OWORD *)((char *)v84 - 231) = v97;
          *(_OWORD *)((char *)v84 - 247) = v96;
          v99 = *(_OWORD *)(v82 - 183);
          v100 = *(_OWORD *)(v82 - 167);
          v101 = *(_OWORD *)(v82 - 151);
          *(_OWORD *)((char *)v84 - 135) = *(_OWORD *)(v82 - 135);
          *(_OWORD *)((char *)v84 - 151) = v101;
          *(_OWORD *)((char *)v84 - 167) = v100;
          *(_OWORD *)((char *)v84 - 183) = v99;
          v102 = *(_OWORD *)(v82 - 119);
          v103 = *(_OWORD *)(v82 - 103);
          v104 = *(_OWORD *)(v82 - 87);
          *(_OWORD *)((char *)v84 - 71) = *(_OWORD *)(v82 - 71);
          *(_OWORD *)((char *)v84 - 87) = v104;
          *(_OWORD *)((char *)v84 - 103) = v103;
          *(_OWORD *)((char *)v84 - 119) = v102;
          v105 = *(_OWORD *)(v82 - 55);
          v106 = *(_OWORD *)(v82 - 39);
          v107 = *(_OWORD *)(v82 - 23);
          *(v84 - 1) = *((_QWORD *)v82 - 1);
          *(_OWORD *)((char *)v84 - 23) = v107;
          *(_OWORD *)((char *)v84 - 39) = v106;
          *(_OWORD *)((char *)v84 - 55) = v105;
          v82 -= 472;
        }
        while (v82 != v83);
        v82 = *(char **)(a1 + 5328);
      }
      *(_QWORD *)(a1 + 5328) = v77;
      *(_QWORD *)(a1 + 5336) = v78;
      *(_QWORD *)(a1 + 5344) = v81;
      if (v82)
        operator delete(v82);
      goto LABEL_98;
    }
LABEL_546:
    sub_1C9724B4C();
  }
  if ((int)v587 < v70)
    *(_QWORD *)(a1 + 5336) = v69 + 472 * (int)v587;
LABEL_98:
  sub_1C9710DCC((char **)(a1 + 1184), (int)v587);
  v110 = (int)v11;
  v111 = *(_QWORD **)(a1 + 5384);
  v112 = *(_QWORD **)(a1 + 5376);
  v113 = v111 - v112;
  v570 = v12;
  v571 = a2;
  v611 = v14;
  v613 = v8;
  if (v110 <= v113)
  {
    if (v110 >= v113)
    {
      v123 = *(_QWORD **)(a1 + 5384);
      goto LABEL_123;
    }
    v123 = &v112[v110];
    while (v111 != v123)
      sub_1C9801BFC(--v111, 0);
LABEL_115:
    *(_QWORD *)(a1 + 5384) = v123;
    goto LABEL_123;
  }
  v114 = v110 - v113;
  v115 = *(_QWORD *)(a1 + 5392);
  if (v110 - v113 <= (v115 - (uint64_t)v111) >> 3)
  {
    bzero(v111, 8 * v114);
    v123 = &v111[v114];
    goto LABEL_115;
  }
  if ((v589 & 0x80000000) != 0)
    sub_1C9747024();
  v116 = v115 - (_QWORD)v112;
  if (v116 >> 2 > v110)
    v110 = v116 >> 2;
  if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
    v117 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v117 = v110;
  if (v117 >> 61)
    goto LABEL_546;
  v118 = (char *)operator new(8 * v117);
  v119 = &v118[8 * v113];
  v120 = &v118[8 * v117];
  bzero(v119, 8 * v114);
  v121 = &v119[8 * v114];
  while (v111 != v112)
  {
    v122 = *--v111;
    *v111 = 0;
    *((_QWORD *)v119 - 1) = v122;
    v119 -= 8;
  }
  v124 = *(_OWORD *)(a1 + 5376);
  *(_QWORD *)(a1 + 5376) = v119;
  *(_QWORD *)(a1 + 5384) = v121;
  *(_QWORD *)(a1 + 5392) = v120;
  v125 = (_QWORD *)*((_QWORD *)&v124 + 1);
  v126 = (_QWORD *)v124;
  while (v125 != v126)
    sub_1C9801BFC(--v125, 0);
  if (v126)
    operator delete(v126);
  v123 = *(_QWORD **)(a1 + 5384);
LABEL_123:
  v576 = a1;
  for (i = *(_QWORD **)(a1 + 5376); i != v123; ++i)
  {
    v128 = (char *)operator new(0x76C0uLL, (std::align_val_t)0x40uLL);
    bzero(v128, 0x76C0uLL);
    sub_1C9797DA4((uint64_t)(v128 + 1656));
    *((_QWORD *)v128 + 1822) = 0;
    *((_OWORD *)v128 + 910) = 0u;
    *((_OWORD *)v128 + 909) = 0u;
    *((_OWORD *)v128 + 908) = 0u;
    *((_OWORD *)v128 + 907) = 0u;
    bzero(v128 + 15040, 0x1800uLL);
    *((_QWORD *)v128 + 3050) = 0;
    sub_1C97FE36C((_QWORD *)v128 + 3030);
    *((_QWORD *)v128 + 2666) = v128 + 21376;
    *((_QWORD *)v128 + 2667) = v128 + 23424;
    *((_QWORD *)v128 + 2668) = v128 + 23936;
    *((_QWORD *)v128 + 2669) = v128 + 24064;
    *((_QWORD *)v128 + 1875) = v128 + 24552;
    *((_DWORD *)v128 + 6138) = 0;
    v128[24556] = 0;
    *((_DWORD *)v128 + 6144) = 0;
    *((_DWORD *)v128 + 6147) = 0;
    *((_DWORD *)v128 + 6148) = 0;
    *((_DWORD *)v128 + 74) = 0;
    *((_QWORD *)v128 + 1863) = 0;
    *((_OWORD *)v128 + 932) = 0u;
    *(_OWORD *)(v128 + 24808) = 0u;
    *((_OWORD *)v128 + 1556) = 0u;
    *((_OWORD *)v128 + 1557) = 0u;
    *((_OWORD *)v128 + 1558) = 0u;
    *((_OWORD *)v128 + 1559) = 0u;
    *((_OWORD *)v128 + 1560) = 0u;
    *((_OWORD *)v128 + 1561) = 0u;
    *((_OWORD *)v128 + 1562) = 0u;
    *((_OWORD *)v128 + 1563) = 0u;
    *((_OWORD *)v128 + 1564) = 0u;
    *((_OWORD *)v128 + 1565) = 0u;
    *((_DWORD *)v128 + 6264) = 0;
    *(_OWORD *)(v128 + 25096) = 0u;
    *(_OWORD *)(v128 + 25112) = 0u;
    *(_OWORD *)(v128 + 25064) = 0u;
    *(_OWORD *)(v128 + 25080) = 0u;
    v128[24600] = 1;
    v128[24610] = 0;
    *((_WORD *)v128 + 12304) = -1;
    v128[27748] = 0;
    *((_QWORD *)v128 + 3740) = 0;
    *((_QWORD *)v128 + 3741) = 0;
    *((_QWORD *)v128 + 3768) = 0;
    *((_QWORD *)v128 + 3769) = 0;
    *((_QWORD *)v128 + 3794) = 0;
    *((_QWORD *)v128 + 3736) = off_1E8291438;
    sub_1C9801BFC(i, (uint64_t)v128);
  }
  v129 = a1;
  if (*(_BYTE *)(v575 + 897))
  {
    v130 = *(_QWORD *)(*(_QWORD *)(a1 + 5320) + 576);
    v131 = *(_DWORD *)(v130 + 216);
    *(_DWORD *)(a1 + 5408) = v131;
    *(_QWORD *)(a1 + 5400) = *(_QWORD *)(v130 + 192) + 32 * (v131 * v591);
  }
  if (*(_BYTE *)(a1 + 58))
  {
    if (*(_BYTE *)(a1 + 58) == 1)
      v132 = *(_BYTE *)(a1 + 553) == 0;
    else
      v132 = 2;
  }
  else
  {
    v132 = *(unsigned __int8 *)(a1 + 553);
  }
  if ((v574 & 0x80000000) == 0)
  {
    v133 = 0;
    v134 = 0;
    v135 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 1184) + v133) = *(char *)(a1 + 653);
      v136 = sub_1C9750CF0(*(_QWORD *)(a1 + 5352) + v134, 3* (((2 * v594 * ((v599 * v605) << (2 * v597))) >> v602) + ((v599 * v605) << (2 * v597)) * v608)/ (16 * v613)/ v587);
      if ((_DWORD)v136)
      {
        v151 = v136;
        if (dword_1ED1ACCC0 >= 3)
        {
          v451 = (FILE *)*MEMORY[0x1E0C80C10];
          v452 = "Substream bitstream initialization failed\n";
          v453 = "Substream bitstream initialization failed\n";
          v454 = 42;
          goto LABEL_399;
        }
        goto LABEL_400;
      }
      v137 = *(_QWORD *)(a1 + 5328);
      v138 = *(_QWORD *)(a1 + 5352) + v134;
      v139 = *(_QWORD *)(v138 + 32);
      v140 = *(_QWORD *)(v138 + 40);
      if (*(_DWORD *)(v138 + 52))
        v141 = v139 >= v140;
      else
        v141 = 1;
      if (!v141)
        *(_QWORD *)(v138 + 32) = ++v139;
      *(_QWORD *)(v138 + 48) = 0;
      *(_OWORD *)(v137 + v135 + 8) = xmmword_1C9862BF0;
      v142 = (_QWORD *)(v137 + v135 + 8);
      v142[56] = v138;
      v142[57] = v139;
      v142[2] = -1;
      v142[3] = v139;
      v142[4] = v140;
      sub_1C9710D38((uint64_t)v142, v132, v611);
      v135 += 472;
      v134 += 64;
      v133 += 4;
    }
    while (472 * v587 != v135);
  }
  v143 = v589;
  if ((int)v589 >= 1)
  {
    v144 = 0;
    v145.n128_u64[0] = 0;
    while (1)
    {
      v590 = v144;
      v146 = *(_QWORD *)(*(_QWORD *)(v129 + 5376) + 8 * v144);
      *(_QWORD *)v146 = v129;
      *(_QWORD *)(v146 + 30360) = v145.n128_u64[0];
      v147 = *(_QWORD *)(v129 + 16);
      v148 = *(unsigned __int8 *)(v147 + 269);
      *(_QWORD *)(v146 + 1056) = *(_QWORD *)(v129 + 1568);
      *(_QWORD *)(v146 + 14904) = v129;
      *(_QWORD *)(v146 + 14912) = v147;
      *(_QWORD *)(v146 + 14920) = *(_QWORD *)(v129 + 32);
      *(_QWORD *)(v146 + 80) = *(_QWORD *)(v147 + 204);
      v149 = *(_QWORD *)(v129 + 4760);
      *(_QWORD *)(v146 + 1032) = v149;
      v150 = *(_QWORD *)(v129 + 5320);
      *(_QWORD *)(v146 + 1040) = v150 + 800;
      v151 = sub_1C97EF824(v146 + 1064, *(_DWORD *)(v149 + 216), *(_BYTE *)(v149 + 220), *(unsigned __int8 *)(v147 + 2096), *(_DWORD *)(v149 + 96), *(unsigned __int8 *)(v147 + 2099), *(char *)(v150 + 648), 0, v576 + 657);
      sub_1C97F1740(v146 + 1064, *(char *)(v129 + 653), *(unsigned __int8 *)(*(_QWORD *)(v146 + 14912) + 2097));
      if ((_DWORD)v151)
      {
        if (dword_1ED1ACCC0 < 3)
          goto LABEL_400;
        fwrite("RDCost init failed in LCUEnc\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        syslog(27, "RDCost init failed in LCUEnc\n");
LABEL_352:
        if (dword_1ED1ACCC0 >= 3)
        {
          v451 = (FILE *)*MEMORY[0x1E0C80C10];
          v452 = "Failed to init thread data\n";
          v453 = "Failed to init thread data\n";
          v454 = 27;
          goto LABEL_399;
        }
        goto LABEL_400;
      }
      *(_QWORD *)(v146 + 24440) = v129;
      v152 = *(_QWORD *)(v129 + 16);
      *(_QWORD *)(v146 + 24448) = v152;
      *(_QWORD *)(v146 + 24456) = *(_QWORD *)(v129 + 4760);
      if (*(_BYTE *)(v152 + 2096) == 8)
      {
        v153 = 12;
        v154 = sub_1C97F1A84;
        v155 = sub_1C97F1C04;
        v156 = sub_1C97F1C1C;
        v157 = sub_1C97F1C34;
        v158 = sub_1C97F1C44;
      }
      else
      {
        v153 = 50;
        v154 = sub_1C97F1908;
        v155 = sub_1C97F1BF8;
        v156 = sub_1C97F1C10;
        v157 = sub_1C97F1C28;
        v158 = (uint64_t (*)(int))nullsub_26;
      }
      *(_QWORD *)(v146 + 24184) = v154;
      *(_QWORD *)(v146 + 24208) = v155;
      *(_QWORD *)(v146 + 24216) = v156;
      *(_QWORD *)(v146 + 24224) = v157;
      *(_QWORD *)(v146 + 24232) = v158;
      *(_DWORD *)(v146 + 24548) = v153;
      *(_QWORD *)(v146 + 24168) = sub_1C97F1C50;
      *(_QWORD *)(v146 + 24176) = sub_1C97F1C50;
      *(_QWORD *)(v146 + 24408) = sub_1C97F1CB4;
      *(_QWORD *)(v146 + 24416) = sub_1C97F1D24;
      *(_QWORD *)(v146 + 24424) = sub_1C97F1DDC;
      *(_QWORD *)(v146 + 24432) = sub_1C97F1E94;
      *(_QWORD *)(v146 + 24400) = 0;
      v159 = *(_DWORD *)(v129 + 5436);
      v160 = __OFSUB__(v159, 1);
      v161 = v159 - 1;
      if (v161 < 0 == v160)
        *(_QWORD *)(v146 + 24400) = (char *)&unk_1C985A178
                                  + 2720 * v161
                                  + 1360
                                  * (*(_DWORD *)(*(_QWORD *)(v129 + 16) + 208)
                                   * *(_DWORD *)(*(_QWORD *)(v129 + 16) + 204) > 2211840);
      sub_1C97FE36C((_QWORD *)(v146 + 24240));
      *(_QWORD *)(v146 + 24104) = sub_1C97F1F48;
      *(_QWORD *)(v146 + 24112) = 0;
      *(_QWORD *)(v146 + 24120) = sub_1C97F238C;
      *(_QWORD *)(v146 + 24128) = 0;
      *(_QWORD *)(v146 + 24136) = sub_1C97F2A70;
      *(_QWORD *)(v146 + 24144) = 0;
      *(_QWORD *)(v146 + 24152) = sub_1C97F2E3C;
      *(_QWORD *)(v146 + 24160) = 0;
      v162 = *(unsigned __int8 *)(*(_QWORD *)(v146 + 24448) + 2096);
      *(_QWORD *)(v146 + 24168) = sub_1C982DE78;
      *(_QWORD *)(v146 + 24176) = sub_1C982DF3C;
      *(_QWORD *)(v146 + 24408) = sub_1C982DFDC;
      *(_QWORD *)(v146 + 24416) = sub_1C982E04C;
      *(_QWORD *)(v146 + 24424) = sub_1C982E150;
      *(_QWORD *)(v146 + 24432) = sub_1C982E290;
      if (v162 == 8)
        *(_QWORD *)(v146 + 24184) = sub_1C982E414;
      sub_1C979821C(v146 + 1640, v129, v146 + 1064, *(char *)(*(_QWORD *)(v146 + 1032) + 236), *(char *)(*(_QWORD *)(v146 + 1032) + 236), 8, 1, 2);
      memset((void *)(v146 + 27712), 255, 4 * v148 + 4);
      v163 = *(_QWORD *)(v146 + 1032);
      v164 = *(char *)(v163 + 496);
      *(_DWORD *)(v146 + 68) = v164;
      *(_BYTE *)(v146 + 72) = *(_BYTE *)(v163 + 548);
      v165 = *(char *)(v163 + 132);
      *(_DWORD *)(v146 + 76) = v165;
      *(_BYTE *)(v146 + 260) = v164 == 4;
      *(_BYTE *)(v146 + 64) = v164 > 0;
      if (v164 < 3)
      {
        *(_BYTE *)(v146 + 65) = 0;
        v145 = 0uLL;
        v167.i64[0] = 0x500000005;
        v167.i64[1] = 0x500000005;
        if (v164 == 2)
        {
          v166 = 1;
        }
        else
        {
          v168 = v164 > 0 && *(_BYTE *)(v129 + 58) == 2;
          v166 = v168;
        }
      }
      else
      {
        *(_BYTE *)(v146 + 65) = *(unsigned __int8 *)(v129 + 58) < 2u;
        v166 = 1;
        v145 = 0uLL;
        v167.i64[0] = 0x500000005;
        v167.i64[1] = 0x500000005;
      }
      v169 = v146 + 29808;
      *(_DWORD *)(v146 + 256) = v166;
      v171 = *(_DWORD *)(v163 + 96) != 36 && (*(_BYTE *)(*(_QWORD *)(v129 + 5320) + 648) & 0xFE) == 4;
      *(_BYTE *)(v146 + 268) = v171;
      v172 = *(_BYTE **)(v146 + 14912);
      *(_BYTE *)v169 = v172[273] != 0;
      v173 = *(unsigned __int8 *)(v129 + 58);
      v174 = v173 <= 1 && v172[272] != 0;
      v168 = v173 == 2;
      v175 = v173 < 2;
      *(_BYTE *)(v146 + 29809) = v174;
      *(_DWORD *)(v146 + 88) = *(char *)(*(_QWORD *)(v146 + 14904) + 653);
      v176 = v168;
      if (*(_BYTE *)(v163 + 540))
        v177 = v175;
      else
        v177 = 0;
      *(_BYTE *)(v146 + 261) = v177;
      if (!*(_BYTE *)(v163 + 535))
        v175 = 0;
      *(_BYTE *)(v146 + 262) = v175;
      if (*(_BYTE *)(v163 + 202) == 1)
        v178 = v176;
      else
        v178 = 0;
      if (v165 == 3)
        v178 = 0;
      v179 = v165 == 5 ? 0 : v178;
      *(_DWORD *)(v146 + 264) = v179;
      if (*(_QWORD *)(v146 + 24904) == *(_QWORD *)(v146 + 24896))
        break;
LABEL_315:
      v427 = (unsigned __int8 *)(v146 + 84);
      v428 = *(unsigned __int8 **)(v146 + 1056);
      v429 = v428 + 8;
      v431 = *v428;
      v430 = v428 + 12;
      *(_BYTE *)(v146 + 877) = v431 != 255;
      if (v431 == 255)
        v429 = (_DWORD *)(v146 + 80);
      else
        v427 = v430;
      v432 = *(_DWORD *)v427;
      *(_DWORD *)(v146 + 880) = *v429;
      *(_DWORD *)(v146 + 884) = v432;
      v433 = *(unsigned __int8 *)(v163 + 233);
      if (*(_BYTE *)(v163 + 233))
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v146 + 14904) + 58) > 1u)
          v433 = 0;
        else
          v433 = *(unsigned __int8 *)(v146 + 268) + 1;
      }
      *(_DWORD *)(v146 + 280) = v433;
      v434 = sub_1C97BEF58;
      if (!*(_QWORD *)(*(_QWORD *)(v129 + 5320) + 536))
      {
        v434 = sub_1C97BEC00;
        if ((*(_BYTE *)(v163 + 133) & 0xFB) != 0)
          v434 = sub_1C97BEEA4;
      }
      v435 = 0;
      *(_QWORD *)(v146 + 1048) = v434;
      v436 = *(unsigned __int8 **)(v146 + 14912);
      v437 = v146 + 24616;
      do
      {
        v438 = 0;
        v439 = v436[2117];
        v440 = v439 >> v435;
        v441 = v146 + 8 * v435;
        v442 = *(_QWORD *)(v441 + 24744);
        *(_BYTE *)(v442 + 1) = v439;
        *(_BYTE *)v442 = v439 >> v435;
        **(_BYTE **)(v442 + 136) = v439 >> v435;
        v443 = v439 >> v435 >> 1;
        v444 = 1 << *(_BYTE *)(*(_QWORD *)(v146 + 14912) + 2116);
        if (v443 > v444)
          LOBYTE(v444) = v443;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v441 + 24744) + 136) + 1) = v444;
        **(_BYTE **)(v441 + 24776) = v440;
        v445 = 1 << *(_BYTE *)(*(_QWORD *)(v146 + 14912) + 2116);
        if (v443 > v445)
          LOBYTE(v445) = v443;
        v446 = (_BYTE **)(v441 + 24776);
        *(_BYTE *)(*(_QWORD *)(v441 + 24776) + 1) = v445;
        do
        {
          v447 = *(_QWORD *)(v437 + v438);
          if (v447)
          {
            *(_BYTE *)(v447 + 1) = *(_BYTE *)(*(_QWORD *)(v146 + 14912) + 2117);
            *(_BYTE *)v447 = v440;
            **(_BYTE **)(v447 + 136) = **v446;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v437 + v438) + 136) + 1) = (*v446)[1];
          }
          v438 += 8;
        }
        while (v438 != 32);
        v436 = *(unsigned __int8 **)(v146 + 14912);
        v437 += 32;
        v141 = v435++ >= v436[269];
      }
      while (!v141);
      v448 = *(_DWORD *)(v129 + 4000);
      *(_DWORD *)(v146 + 232) = *(_DWORD *)(v146 + 88);
      *(_DWORD *)(v146 + 236) = v448;
      *(_DWORD *)(v146 + 240) = *(_DWORD *)(v129 + 4004);
      *(_DWORD *)(v146 + 244) = *(_DWORD *)(v129 + 4008);
      *(_DWORD *)(v146 + 248) = *(_DWORD *)(v129 + 4012);
      *(_DWORD *)(v146 + 252) = *(_DWORD *)(v129 + 4016);
      *(_QWORD *)(v146 + 224) = 0xFFFFFFFFLL;
      if (v436[2096] <= 8u)
        v449 = 25;
      else
        v449 = 400;
      *(_DWORD *)(v169 + 4) = v449;
      v144 = v590 + 1;
      v143 = v589;
      if (v590 + 1 == v589)
        goto LABEL_340;
    }
    v180 = *(_DWORD *)(v146 + 25056);
    if (v172[2096] == 8)
    {
      if (v180 != 1)
      {
        *(_DWORD *)(v146 + 25056) = 1;
        v181 = *(_QWORD *)(v146 + 25040);
        *(_QWORD *)(v146 + 25040) = 0;
        if (v181)
        {
          MEMORY[0x1CAA43B6C](v181, 0x1000C8077774924, v145);
          v167.i64[0] = 0x500000005;
          v167.i64[1] = 0x500000005;
          v172 = *(_BYTE **)(v146 + 14912);
        }
      }
      *(_QWORD *)(v146 + 25048) = 0;
      v182 = 4 * v172[2117] + 32;
      if (*(_QWORD *)(v146 + 24816) < (unint64_t)(4 * v182))
      {
        *(_QWORD *)(v146 + 24816) = 4 * v182;
        memptr = 0;
        if (malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * v182, 0x55B6168FuLL))
          goto LABEL_547;
        v183 = *(void **)(v146 + 24808);
        *(_QWORD *)(v146 + 24808) = memptr;
        v167.i64[0] = 0x500000005;
        v167.i64[1] = 0x500000005;
        if (v183)
        {
          free(v183);
          v167.i64[0] = 0x500000005;
          v167.i64[1] = 0x500000005;
        }
      }
      v184 = *(_QWORD *)(v146 + 24808);
      *(_QWORD *)(v146 + 24824) = v184 + 32;
      *(_QWORD *)(v146 + 24832) = v184 + v182 + 32;
      *(_QWORD *)(v146 + 24840) = v184 + 2 * v182 + 32;
      v185 = 3 * v182;
      v186 = sub_1C97C0CB0;
      v187 = sub_1C97C0D14;
      v188 = sub_1C97C0D5C;
      v189 = sub_1C97C18A0;
    }
    else
    {
      if (v180 != 2)
      {
        *(_DWORD *)(v146 + 25056) = 2;
        v190 = *(_QWORD *)(v146 + 25040);
        *(_QWORD *)(v146 + 25040) = 0;
        if (v190)
        {
          MEMORY[0x1CAA43B6C](v190, 0x1000C8077774924, v145);
          v167.i64[0] = 0x500000005;
          v167.i64[1] = 0x500000005;
          v172 = *(_BYTE **)(v146 + 14912);
        }
      }
      *(_QWORD *)(v146 + 25048) = 0;
      v191 = 4 * v172[2117] + 16;
      if (*(_QWORD *)(v146 + 24816) < (unint64_t)(8 * v191))
      {
        *(_QWORD *)(v146 + 24816) = 8 * v191;
        memptr = 0;
        if (malloc_type_posix_memalign(&memptr, 0x20uLL, 8 * v191, 0x55B6168FuLL))
        {
LABEL_547:
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v569 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v569, (struct type_info *)&unk_1E82913C0, MEMORY[0x1E0DE4DC0]);
        }
        v192 = *(void **)(v146 + 24808);
        *(_QWORD *)(v146 + 24808) = memptr;
        v167.i64[0] = 0x500000005;
        v167.i64[1] = 0x500000005;
        if (v192)
        {
          free(v192);
          v167.i64[0] = 0x500000005;
          v167.i64[1] = 0x500000005;
        }
      }
      v184 = *(_QWORD *)(v146 + 24808);
      *(_QWORD *)(v146 + 24824) = v184 + 32;
      v185 = 6 * v191;
      *(_QWORD *)(v146 + 24832) = v184 + 2 * v191 + 32;
      *(_QWORD *)(v146 + 24840) = v184 + 4 * v191 + 32;
      v186 = sub_1C97BF0AC;
      v187 = sub_1C97BF110;
      v188 = sub_1C97BF160;
      v189 = sub_1C97BFA74;
    }
    *(_QWORD *)(v146 + 24848) = v184 + v185 + 32;
    *(_QWORD *)(v146 + 29816) = v186;
    *(_QWORD *)(v146 + 29824) = v187;
    *(_QWORD *)(v146 + 29832) = v188;
    *(_QWORD *)(v146 + 29840) = 0;
    *(_QWORD *)(v146 + 29848) = v189;
    *(_QWORD *)(v146 + 29856) = 0;
    v193 = *(unsigned __int8 **)(v146 + 14912);
    v194 = v193[2117];
    v612 = v193[2113];
    v195 = vdupq_n_s32(v612);
    v196 = ~v193[270];
    v197 = (v193[269] + 4) & 0x1FC;
    v598 = v193[269];
    v2.i32[0] = v193[269];
    v198 = 0uLL;
    v199 = 0uLL;
    v200 = 0uLL;
    v201 = (int32x4_t)xmmword_1C9862C30;
    v202 = 0uLL;
    v203 = 0uLL;
    v204 = 0uLL;
    v205.i64[0] = 0x100000001;
    v205.i64[1] = 0x100000001;
    v206.i64[0] = 0x100000001;
    v206.i64[1] = 0x100000001;
    v207.i64[0] = 0x400000004;
    v207.i64[1] = 0x400000004;
    v208.i64[0] = 0x200000002;
    v208.i64[1] = 0x200000002;
    do
    {
      v209 = (int8x16_t)v204;
      v210 = v203;
      v211 = v202;
      v212 = v201;
      v213 = (int8x16_t)v200;
      v214 = (int8x16_t)v199;
      v215 = (int8x16_t)v198;
      v216 = vsubq_s32(v195, v201);
      v217 = (uint32x4_t)vaddq_s32(v216, v205);
      v218 = (int8x16_t)vshlq_u32((uint32x4_t)v206, (uint32x4_t)vaddq_s32(v216, v216));
      v219 = (int32x4_t)vshrq_n_u32((uint32x4_t)v218, 4uLL);
      v220 = vceqzq_s32(v212);
      v221 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v207, (int8x16_t)v220), v220);
      v222 = vaddq_s32(v221, v206);
      v198 = vaddq_s32(v198, v222);
      v199 = vmlaq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v206, v217), v199), (int32x4_t)vshrq_n_u32((uint32x4_t)v218, 6uLL), v222);
      v200 = vaddq_s32(vmlaq_s32(vaddq_s32(v200, (int32x4_t)vshlq_u32((uint32x4_t)v208, v217)), v219, v222), v207);
      v223 = *(_OWORD *)&v221 | __PAIR128__(0x200000002, 0x200000002);
      v204 = vaddq_s32((int32x4_t)v223, v204);
      v203 = vmlaq_s32(v203, (int32x4_t)vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v218, 1uLL), v218), (int32x4_t)v223);
      v202 = vmlaq_s32(v202, (int32x4_t)vorrq_s8((int8x16_t)v219, (int8x16_t)vshrq_n_u32((uint32x4_t)v218, 5uLL)), (int32x4_t)v223);
      v201 = vaddq_s32(v212, v207);
      v197 -= 4;
    }
    while (v197);
    v224 = v196 + v612;
    v225 = v193[2115];
    v226 = v612 - v225;
    v588 = v612 - v225;
    v614 = v202;
    v606 = (int8x16_t)v211;
    v609 = v203;
    v603 = (int8x16_t)v210;
    if (!v193[273] && !v193[272])
      goto LABEL_214;
    if (v226 >= 1)
    {
      v592 = v214;
      v595 = v209;
      v580 = v199;
      v583 = v213;
      v577 = v200;
      bzero((void *)(v146 + 312), 32 * (~(_DWORD)v225 + v612) + 32);
      v200 = v577;
      v199 = v580;
      v213 = v583;
      v214 = v592;
      v209 = v595;
      v226 = v612 - v225;
      v224 = v196 + v612;
      v167.i64[0] = 0x500000005;
      v167.i64[1] = 0x500000005;
      v208.i64[0] = 0x200000002;
      v208.i64[1] = 0x200000002;
      v207.i64[0] = 0x400000004;
      v207.i64[1] = 0x400000004;
      v206.i64[0] = 0x100000001;
      v206.i64[1] = 0x100000001;
    }
    if (v226 < v224)
    {
      v227 = (v196 + v225 + 3) & 0xFFFFFFFC;
      v228 = vdupq_n_s32(v226);
      v229 = vaddq_s32(v228, (int32x4_t)xmmword_1C9862C30);
      v230 = vdupq_n_s32(*(unsigned __int8 *)(*(_QWORD *)(v146 + 14912) + 2116));
      v231 = 0uLL;
      v232 = 0uLL;
      v233 = 0uLL;
      do
      {
        v234 = (int32x4_t)v233;
        v235 = (int32x4_t)v232;
        v236 = (int32x4_t)v231;
        v237 = vsubq_s32(v195, v229);
        v238 = (uint32x4_t)vaddq_s32(v237, v237);
        v239 = vshlq_u32((uint32x4_t)v206, v238);
        v240 = (int8x16_t)vceqq_s32(v237, v230);
        v241 = (uint32x4_t)vbslq_s8(v240, (int8x16_t)vshlq_u32((uint32x4_t)v208, v238), (int8x16_t)vshrq_n_u32(v239, 1uLL));
        v242 = vceqq_s32(v229, v228);
        v243 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v207, (int8x16_t)v242), v242);
        v244 = (uint32x4_t)vbicq_s8(v208, (int8x16_t)v242);
        v245 = vorrq_s8((int8x16_t)v242, v240);
        v233 = (int8x16_t)vaddq_s32(v243, v234);
        v246 = (uint32x4_t)vbicq_s8(v208, v245);
        v232 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v243, v238), v235), (int32x4_t)vshlq_u32(v241, v246));
        v231 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v239, 4uLL), v244), v236), (int32x4_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v167, v238), v208, (int8x16_t)vshrq_n_u32(v239, 5uLL)), v246));
        v229 = vaddq_s32(v229, v207);
        v227 -= 4;
      }
      while (v227);
      v201.i32[0] = v196 + v225 - 1;
      v247 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v201.i32[0] & 0xFFFFFFFC), (int8x16_t)xmmword_1C9862C30), (uint32x4_t)vdupq_lane_s32(*(int32x2_t *)v201.i8, 0));
      v248 = vaddvq_s32((int32x4_t)vbslq_s8(v247, (int8x16_t)v234, v233));
      v249 = vaddvq_s32((int32x4_t)vbslq_s8(v247, (int8x16_t)v235, v232));
      v250 = vaddvq_s32((int32x4_t)vbslq_s8(v247, (int8x16_t)v236, v231));
    }
    else
    {
LABEL_214:
      v248 = 0;
      v249 = 0;
      v250 = 0;
    }
    v251 = (int8x16_t)vcgtq_u32((uint32x4_t)v212, (uint32x4_t)vdupq_lane_s32(v2, 0));
    v252 = vaddvq_s32((int32x4_t)vbslq_s8(v251, v215, (int8x16_t)v198));
    v253 = v252;
    v254 = *(_QWORD *)(v146 + 24904);
    v255 = *(_QWORD *)(v146 + 24896);
    v256 = 0xEEEEEEEEEEEEEEEFLL * ((v254 - v255) >> 4);
    v257 = v252 - v256;
    v586 = v224;
    v600 = v251;
    if (v252 <= v256)
    {
      if (v252 >= v256)
        goto LABEL_240;
      for (j = v255 + 240 * v252; v254 != j; v254 -= 240)
      {
        *(_OWORD *)(v254 - 88) = 0uLL;
        *(_OWORD *)(v254 - 104) = 0uLL;
        *(_OWORD *)(v254 - 120) = 0uLL;
        *(_OWORD *)(v254 - 136) = 0uLL;
        *(_OWORD *)(v254 - 152) = 0uLL;
      }
    }
    else
    {
      v258 = *(_QWORD *)(v146 + 24912);
      if (0xEEEEEEEEEEEEEEEFLL * ((v258 - v254) >> 4) < v257)
      {
        v578 = v200;
        v581 = v199;
        v584 = v213;
        v593 = v214;
        v596 = v209;
        v259 = 0xEEEEEEEEEEEEEEEFLL * ((v258 - v255) >> 4);
        v260 = 2 * v259;
        if (2 * v259 <= v252)
          v260 = v252;
        if (v259 >= 0x88888888888888)
          v261 = 0x111111111111111;
        else
          v261 = v260;
        if (v261 > 0x111111111111111)
          goto LABEL_546;
        v262 = (char *)operator new(240 * v261);
        v263 = &v262[240 * v256];
        v264 = &v262[240 * v253];
        v265 = 240 * v253 - 240 * v256;
        v266 = v263 + 232;
        do
        {
          *v266 = 0;
          *((_OWORD *)v266 - 13) = 0uLL;
          *((_OWORD *)v266 - 12) = 0uLL;
          *((_OWORD *)v266 - 11) = 0uLL;
          *((_OWORD *)v266 - 10) = 0uLL;
          v266 += 240;
          v265 -= 240;
        }
        while (v265);
        v267 = &v262[240 * v261];
        v268 = *(char **)(v146 + 24904);
        v269 = *(char **)(v146 + 24896);
        v251 = v600;
        v214 = v593;
        v209 = v596;
        v199 = v581;
        v213 = v584;
        v200 = v578;
        if (v268 == v269)
        {
          *(_QWORD *)(v146 + 24896) = v263;
          *(_QWORD *)(v146 + 24904) = v264;
          *(_QWORD *)(v146 + 24912) = v267;
          if (!v268)
            goto LABEL_240;
        }
        else
        {
          do
          {
            v270 = *((_OWORD *)v268 - 15);
            v271 = *((_OWORD *)v268 - 13);
            *((_OWORD *)v263 - 14) = *((_OWORD *)v268 - 14);
            *((_OWORD *)v263 - 13) = v271;
            *((_OWORD *)v263 - 15) = v270;
            v272 = *((_OWORD *)v268 - 12);
            v273 = *((_OWORD *)v268 - 11);
            v274 = *((_OWORD *)v268 - 9);
            *((_OWORD *)v263 - 10) = *((_OWORD *)v268 - 10);
            *((_OWORD *)v263 - 9) = v274;
            *((_OWORD *)v263 - 12) = v272;
            *((_OWORD *)v263 - 11) = v273;
            v275 = *((_OWORD *)v268 - 8);
            v276 = *((_OWORD *)v268 - 7);
            v277 = *((_OWORD *)v268 - 5);
            *((_OWORD *)v263 - 6) = *((_OWORD *)v268 - 6);
            *((_OWORD *)v263 - 5) = v277;
            *((_OWORD *)v263 - 8) = v275;
            *((_OWORD *)v263 - 7) = v276;
            v278 = *((_OWORD *)v268 - 4);
            v279 = *((_OWORD *)v268 - 3);
            v280 = *((_OWORD *)v268 - 1);
            *((_OWORD *)v263 - 2) = *((_OWORD *)v268 - 2);
            *((_OWORD *)v263 - 1) = v280;
            *((_OWORD *)v263 - 4) = v278;
            *((_OWORD *)v263 - 3) = v279;
            v263 -= 240;
            v268 -= 240;
          }
          while (v268 != v269);
          v268 = *(char **)(v146 + 24896);
          v281 = *(char **)(v146 + 24904);
          *(_QWORD *)(v146 + 24896) = v263;
          *(_QWORD *)(v146 + 24904) = v264;
          for (*(_QWORD *)(v146 + 24912) = v267; v281 != v268; v281 -= 240)
          {
            *(_OWORD *)(v281 - 88) = 0uLL;
            *(_OWORD *)(v281 - 104) = 0uLL;
            *(_OWORD *)(v281 - 120) = 0uLL;
            *(_OWORD *)(v281 - 136) = 0uLL;
            *(_OWORD *)(v281 - 152) = 0uLL;
          }
          if (!v268)
          {
LABEL_240:
            v285 = vaddvq_s32((int32x4_t)vbslq_s8(v251, v209, (int8x16_t)v204));
            v286 = vaddvq_s32((int32x4_t)vbslq_s8(v251, v213, (int8x16_t)v200));
            sub_1C9748C8C((char **)(v146 + 24920), vaddvq_s32((int32x4_t)vbslq_s8(v251, v214, (int8x16_t)v199)));
            sub_1C9748D90((char **)(v146 + 24944), v286);
            v585 = v285;
            v287 = (v248 + v285);
            v288 = *(_QWORD *)(v146 + 24976);
            v289 = *(_QWORD *)(v146 + 24968);
            v290 = 0xEEEEEEEEEEEEEEEFLL * ((v288 - v289) >> 3);
            v291 = v287 - v290;
            if (v287 <= v290)
            {
              v293 = (int8x16_t)v614;
              v295 = v606;
              v294 = (int8x16_t)v609;
              v296 = v603;
              if (v287 >= v290)
                goto LABEL_265;
              for (k = v289 + 120 * v287; v288 != k; v288 -= 120)
              {
                *(_OWORD *)(v288 - 96) = 0uLL;
                *(_OWORD *)(v288 - 80) = 0uLL;
                *(_OWORD *)(v288 - 112) = 0uLL;
              }
            }
            else
            {
              v292 = *(_QWORD *)(v146 + 24984);
              v293 = (int8x16_t)v614;
              v295 = v606;
              v294 = (int8x16_t)v609;
              v296 = v603;
              if (0xEEEEEEEEEEEEEEEFLL * ((v292 - v288) >> 3) < v291)
              {
                v297 = 0xEEEEEEEEEEEEEEEFLL * ((v292 - v289) >> 3);
                v298 = 2 * v297;
                if (2 * v297 <= v287)
                  v298 = v287;
                if (v297 >= 0x111111111111111)
                  v299 = 0x222222222222222;
                else
                  v299 = v298;
                if (v299 > 0x222222222222222)
                  goto LABEL_546;
                v300 = (char *)operator new(120 * v299);
                v301 = &v300[120 * v290];
                v302 = &v300[120 * v287];
                v303 = 120 * v287 - 120 * v290;
                v304 = v301 + 8;
                do
                {
                  v304[3] = 0uLL;
                  v304[4] = 0uLL;
                  v304[1] = 0uLL;
                  v304[2] = 0uLL;
                  *v304 = 0uLL;
                  v304 = (_OWORD *)((char *)v304 + 120);
                  v303 -= 120;
                }
                while (v303);
                v305 = &v300[120 * v299];
                v306 = *(char **)(v146 + 24976);
                v307 = *(char **)(v146 + 24968);
                v293 = (int8x16_t)v614;
                v295 = v606;
                v294 = (int8x16_t)v609;
                v296 = v603;
                if (v306 != v307)
                {
                  do
                  {
                    v308 = *(_OWORD *)(v306 - 120);
                    v309 = *(_OWORD *)(v306 - 104);
                    v310 = *(_OWORD *)(v306 - 88);
                    *(_OWORD *)(v301 - 72) = *(_OWORD *)(v306 - 72);
                    *(_OWORD *)(v301 - 88) = v310;
                    *(_OWORD *)(v301 - 104) = v309;
                    *(_OWORD *)(v301 - 120) = v308;
                    v311 = *(_OWORD *)(v306 - 56);
                    v312 = *(_OWORD *)(v306 - 40);
                    v313 = *(_OWORD *)(v306 - 24);
                    *((_QWORD *)v301 - 1) = *((_QWORD *)v306 - 1);
                    *(_OWORD *)(v301 - 24) = v313;
                    *(_OWORD *)(v301 - 40) = v312;
                    *(_OWORD *)(v301 - 56) = v311;
                    v301 -= 120;
                    v306 -= 120;
                  }
                  while (v306 != v307);
                  v306 = *(char **)(v146 + 24968);
                  v314 = *(char **)(v146 + 24976);
                  *(_QWORD *)(v146 + 24968) = v301;
                  *(_QWORD *)(v146 + 24976) = v302;
                  for (*(_QWORD *)(v146 + 24984) = v305; v314 != v306; v314 -= 120)
                  {
                    *((_OWORD *)v314 - 6) = 0uLL;
                    *((_OWORD *)v314 - 5) = 0uLL;
                    *((_OWORD *)v314 - 7) = 0uLL;
                  }
                  if (!v306)
                    goto LABEL_265;
                  goto LABEL_264;
                }
                *(_QWORD *)(v146 + 24968) = v301;
                *(_QWORD *)(v146 + 24976) = v302;
                *(_QWORD *)(v146 + 24984) = v305;
                if (v306)
                {
LABEL_264:
                  operator delete(v306);
                  v296 = v603;
                  v295 = v606;
                  v294 = (int8x16_t)v609;
                  v293 = (int8x16_t)v614;
                }
LABEL_265:
                v318 = vaddvq_s32((int32x4_t)vbslq_s8(v600, v295, v293));
                v582 = vaddvq_s32((int32x4_t)vbslq_s8(v600, v296, v294));
                sub_1C97BEFB0((char **)(v146 + 24992), v249 + v582);
                v579 = v318;
                v319 = (v250 + v318);
                v320 = *(_QWORD *)(v146 + 25016);
                v321 = *(_QWORD *)(v146 + 25024) - v320;
                if (v319 <= v321)
                {
                  if (v319 < v321)
                    *(_QWORD *)(v146 + 25024) = v320 + v319;
                }
                else
                {
                  sub_1C971BA44((unint64_t *)(v146 + 25016), v319 - v321);
                }
                v322 = 0;
                v323 = *(_QWORD *)(v146 + 24896);
                *(_QWORD *)(v146 + 24744) = v323;
                *(_QWORD *)(v323 + 88) = *(_QWORD *)(v146 + 24920);
                *(_QWORD *)(*(_QWORD *)(v146 + 24744) + 96) = *(_QWORD *)(v146 + 24944);
                v324 = (v194 * v194);
                v325 = (_QWORD *)(v146 + 25040);
                *(_QWORD *)(v146 + 25064) = v146 + 25040;
                v326 = *(_QWORD *)(v146 + 25048);
                *(_QWORD *)(v146 + 25072) = v326;
                v327 = v324 >> 1;
                *(_QWORD *)(v146 + 25080) = v146 + 25040;
                *(_QWORD *)(v146 + 25088) = v326 + v324;
                v328 = v326 + v324 + v327;
                *(_QWORD *)(v146 + 25096) = v146 + 25040;
                v329 = v328 + v324;
                *(_QWORD *)(v146 + 25104) = v328;
                *(_QWORD *)(v146 + 25112) = v146 + 25040;
                v330 = v329 + v327;
                *(_QWORD *)(v146 + 25048) = v329 + v327;
                *(_QWORD *)(v146 + 25120) = v329;
                v331 = *(_QWORD *)(v146 + 24744);
                *(_QWORD *)(v331 + 24) = v146 + 25040;
                *(_QWORD *)(v331 + 32) = v326;
                v332 = *(_QWORD *)(v146 + 24744);
                *(_QWORD *)(v332 + 40) = *(_QWORD *)(v146 + 25080);
                *(_QWORD *)(v332 + 48) = *(_QWORD *)(v146 + 25088);
                v333 = *(_QWORD *)(v146 + 24744);
                *(_QWORD *)(v333 + 56) = *(_QWORD *)(v146 + 25096);
                *(_QWORD *)(v333 + 64) = *(_QWORD *)(v146 + 25104);
                v334 = *(_QWORD *)(v146 + 24744);
                *(_QWORD *)(v334 + 72) = *(_QWORD *)(v146 + 25112);
                *(_QWORD *)(v334 + 80) = *(_QWORD *)(v146 + 25120);
                *(_QWORD *)(*(_QWORD *)(v146 + 24744) + 136) = *(_QWORD *)(v146 + 24968);
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 24744) + 136) + 32) = *(_QWORD *)(v146 + 24992);
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 24744) + 136) + 8) = *(_QWORD *)(v146 + 25016);
                do
                {
                  v610 = v612 - v322 - 2;
                  v335 = 1 << v610;
                  v336 = (1 << (2 * (v612 - v322)));
                  v337 = v336 >> 1;
                  v338 = v336 >> 4;
                  v339 = v336 >> 6;
                  if (v322)
                    v340 = 4;
                  else
                    v340 = 1;
                  v341 = v146 + 8 * v322 + 24744;
                  *(_QWORD *)(*(_QWORD *)v341 + 152) = *(_QWORD *)(v146 + 24840);
                  *(_QWORD *)(*(_QWORD *)v341 + 160) = *(_QWORD *)(v146 + 24848);
                  v342 = v340 + 1;
                  v604 = (v339 * (v340 + 1));
                  *(_QWORD *)(*(_QWORD *)v341 + 104) = *(_QWORD *)(*(_QWORD *)v341 + 88) + 2 * v604;
                  *(_QWORD *)(*(_QWORD *)v341 + 112) = *(_QWORD *)(*(_QWORD *)v341 + 104) + (v335 & 0xFFFFFFFE);
                  v601 = (v338 * (v340 + 1));
                  *(_QWORD *)(*(_QWORD *)v341 + 120) = *(_QWORD *)(*(_QWORD *)v341 + 96) + 16 * v601;
                  v607 = (1 << (v612 - v322 - 2));
                  *(_QWORD *)(*(_QWORD *)v341 + 128) = *(_QWORD *)(*(_QWORD *)v341 + 120) + 16 * v335 + 32;
                  v343 = *(_QWORD *)(*(_QWORD *)v341 + 136);
                  *(_QWORD *)(v343 + 56) = v325;
                  *(_QWORD *)(v343 + 64) = v330;
                  v344 = *(_QWORD *)(*(_QWORD *)v341 + 136);
                  *(_QWORD *)(v344 + 72) = v325;
                  *(_QWORD *)(v344 + 80) = v330 + v336;
                  v345 = *(_QWORD **)(*(_QWORD *)v341 + 136);
                  v346 = v345[4] + 2 * v336;
                  v347 = v336 >> 2;
                  v348 = v336 | (v336 >> 1);
                  v349 = v338 | (v336 >> 5);
                  v350 = v345[1] + v338;
                  v351 = v146 + 24616 + 32 * v322;
                  v352 = v330 + v337;
                  v345[5] = v346;
                  v345[6] = v346 + 2 * v347;
                  v615 = v336 >> 1;
                  v353 = v337 | v336;
                  v354 = 392;
                  v355 = 2 * (v336 >> 6);
                  v356 = 16 * (v336 >> 4);
                  v345[2] = v350;
                  v345[3] = v350 + v339;
                  v357 = 120;
                  v358 = v348;
                  v359 = v349;
                  v360 = v340;
                  do
                  {
                    v361 = (_QWORD *)(*(_QWORD *)v341 + v354);
                    *(_QWORD *)v351 = v361 - 19;
                    *v361 = *(_QWORD *)(v146 + 24840);
                    *(_QWORD *)(*(_QWORD *)v351 + 160) = *(_QWORD *)(v146 + 24848);
                    *(_QWORD *)(*(_QWORD *)v351 + 88) = *(_QWORD *)(*(_QWORD *)v341 + 88) + v355;
                    *(_QWORD *)(*(_QWORD *)v351 + 104) = *(_QWORD *)(*(_QWORD *)v341 + 104);
                    *(_QWORD *)(*(_QWORD *)v351 + 112) = *(_QWORD *)(*(_QWORD *)v341 + 112);
                    *(_QWORD *)(*(_QWORD *)v351 + 96) = *(_QWORD *)(*(_QWORD *)v341 + 96) + v356;
                    *(_QWORD *)(*(_QWORD *)v351 + 120) = *(_QWORD *)(*(_QWORD *)v341 + 120);
                    *(_QWORD *)(*(_QWORD *)v351 + 128) = *(_QWORD *)(*(_QWORD *)v341 + 128);
                    *(_QWORD *)(*(_QWORD *)v351 + 136) = *(_QWORD *)(*(_QWORD *)v341 + 136) + v357;
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v351 + 136) + 32) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v341 + 136)
                                                                                         + 32)
                                                                             + 2 * v358;
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v351 + 136) + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v341 + 136)
                                                                                        + 8)
                                                                            + v359;
                    v362 = *(_QWORD *)(*(_QWORD *)v351 + 136);
                    *(_QWORD *)(v362 + 56) = v325;
                    *(_QWORD *)(v362 + 64) = v336 + v352;
                    v363 = *(_QWORD *)(*(_QWORD *)v351 + 136);
                    *(_QWORD *)(v363 + 72) = v325;
                    *(_QWORD *)(v363 + 80) = 2 * (1 << (2 * (v612 - v322))) + v352;
                    v364 = *(_QWORD *)v351;
                    v351 += 8;
                    v365 = *(_QWORD **)(v364 + 136);
                    v366 = v365[4] + 2 * v336;
                    v367 = v365[1] + v338;
                    v365[5] = v366;
                    v365[6] = v366 + 2 * v347;
                    v359 += v349;
                    v358 += v348;
                    v357 += 120;
                    v356 += 16 * (v336 >> 4);
                    v365[2] = v367;
                    v365[3] = v367 + v339;
                    v355 += 2 * (v336 >> 6);
                    v354 += 240;
                    v352 += v353;
                    --v360;
                  }
                  while (v360);
                  v368 = *(_QWORD *)v341;
                  v369 = *(_QWORD *)(*(_QWORD *)v341 + 136) + 120 * v340;
                  v370 = v146 + 8 * v322;
                  *(_QWORD *)(v370 + 24776) = v369 + 120;
                  *(_QWORD *)(v369 + 152) = *(_QWORD *)(*(_QWORD *)(v368 + 136) + 32) + 2 * v348 * v342;
                  *(_QWORD *)(*(_QWORD *)(v370 + 24776) + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v341 + 136) + 8)
                                                               + (v349 * v342);
                  v371 = *(_QWORD *)(v370 + 24776);
                  v372 = v336 + v352 + v336;
                  *(_QWORD *)(v371 + 56) = v325;
                  *(_QWORD *)(v371 + 64) = v336 + v352;
                  v373 = *(_QWORD *)(v370 + 24776);
                  *(_QWORD *)(v373 + 72) = v325;
                  *(_QWORD *)(v373 + 80) = v372;
                  v374 = *(_QWORD **)(v370 + 24776);
                  v375 = v374[4] + 2 * v336;
                  v374[5] = v375;
                  v374[6] = v375 + 2 * v347;
                  v376 = v374[1] + v338;
                  v374[2] = v376;
                  v374[3] = v376 + v339;
                  if (v322 >= v598)
                  {
                    ++v322;
                  }
                  else
                  {
                    v377 = *(_QWORD *)v341;
                    v378 = *(_QWORD *)v341 + 240 * v340;
                    ++v322;
                    v379 = v146 + 8 * v322;
                    *(_QWORD *)(v379 + 24744) = v378 + 240;
                    *(_QWORD *)(v378 + 328) = *(_QWORD *)(v377 + 88) + 2 * v604 + 2 * v607;
                    *(_QWORD *)(*(_QWORD *)(v379 + 24744) + 96) = *(_QWORD *)(*(_QWORD *)v341 + 96)
                                                                  + 16 * v601
                                                                  + 16 * ((2 << v610) + 4);
                    v380 = v340 | 2;
                    *(_QWORD *)(*(_QWORD *)(v379 + 24744) + 136) = *(_QWORD *)(*(_QWORD *)v341 + 136) + 120 * v380;
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v379 + 24744) + 136) + 32) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v341 + 136) + 32)
                                                                                       + 2 * v348 * v380;
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v379 + 24744) + 136) + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v341 + 136)
                                                                                                  + 8)
                                                                                      + v349 * v380;
                  }
                  v330 = v372 + v615;
                }
                while (v322 != v598 + 1);
                *(_QWORD *)(v146 + 25048) = v330;
                v381 = *(_QWORD *)(v146 + 14912);
                if (*(_BYTE *)(v381 + 273) || *(_BYTE *)(v381 + 272))
                {
                  v382 = *(_QWORD *)(v146 + 24968) + 120 * v585;
                  v383 = (_QWORD *)(v146 + 32 * v588);
                  v383[39] = v382;
                  *(_QWORD *)(v382 + 32) = *(_QWORD *)(v146 + 24992) + 2 * v582;
                  *(_QWORD *)(v383[39] + 8) = *(_QWORD *)(v146 + 25016) + v579;
                  if (v588 < v586)
                  {
                    v384 = v588;
                    do
                    {
                      v385 = v612 - v384;
                      v386 = 2 * (v612 - v384);
                      v387 = (1 << (2 * (v612 - v384)));
                      v388 = *(unsigned __int8 *)(*(_QWORD *)(v146 + 14912) + 2116);
                      v389 = v387 >> 5;
                      if (v386 < 5)
                        v389 = 2;
                      v390 = v385 == v388;
                      if (v385 == v388)
                        v391 = (2 << (2 * (v612 - v384)));
                      else
                        v391 = v387 >> 1;
                      v392 = v390 || v384 == v588;
                      v393 = v146 + 32 * v384;
                      **(_BYTE **)(v393 + 312) = 1 << v385;
                      v394 = (v385 - 1);
                      if (v394 <= *(unsigned __int8 *)(*(_QWORD *)(v146 + 14912) + 2116))
                        v395 = *(_BYTE *)(*(_QWORD *)(v146 + 14912) + 2116);
                      else
                        v395 = v394;
                      v396 = v387 >> 4;
                      v397 = (_BYTE **)(v393 + 312);
                      *(_BYTE *)(*(_QWORD *)(v393 + 312) + 1) = 1 << v395;
                      v398 = *(_QWORD *)(v393 + 312);
                      *(_QWORD *)(v398 + 56) = v325;
                      v399 = *(_QWORD *)(v146 + 25048);
                      *(_QWORD *)(v398 + 64) = v399;
                      v400 = *(_QWORD *)(v393 + 312);
                      *(_QWORD *)(v400 + 72) = v325;
                      *(_QWORD *)(v146 + 25048) = v399 + v387 + v391;
                      *(_QWORD *)(v400 + 80) = v399 + v387;
                      v401 = *(_QWORD **)(v393 + 312);
                      v402 = v401[4] + 2 * v387;
                      v401[5] = v402;
                      v401[6] = v402 + v391;
                      v403 = v401[1] + v396;
                      v401[2] = v403;
                      v401[3] = v403 + (v389 >> 1);
                      if (v384 == v588)
                        v404 = 1;
                      else
                        v404 = 4;
                      if (v384 != v588)
                      {
                        v405 = 0;
                        v406 = v389;
                        do
                        {
                          v407 = v393 + v405;
                          v408 = *(_QWORD *)(v393 + v405 + 312);
                          *(_QWORD *)(v393 + v405 + 320) = v408 + 120;
                          *(_BYTE *)(v408 + 120) = **v397;
                          *(_BYTE *)(*(_QWORD *)(v393 + v405 + 320) + 1) = (*v397)[1];
                          v409 = *(_QWORD *)(v393 + v405 + 320);
                          *(_QWORD *)(v409 + 56) = v325;
                          v410 = *(_QWORD *)(v146 + 25048);
                          v411 = v410 + v387;
                          *(_QWORD *)(v146 + 25048) = v410 + v387;
                          *(_QWORD *)(v409 + 64) = v410;
                          *(_QWORD *)(*(_QWORD *)(v393 + v405 + 320) + 32) = *(_QWORD *)(*(_QWORD *)(v393 + v405 + 312)
                                                                                         + 32)
                                                                             + 2 * v387
                                                                             + 2 * v391;
                          *(_QWORD *)(*(_QWORD *)(v393 + v405 + 320) + 8) = *(_QWORD *)(*(_QWORD *)(v393 + v405 + 312)
                                                                                        + 8)
                                                                            + v396
                                                                            + v406;
                          if (v392)
                          {
                            LODWORD(v391) = 0;
                            v406 = 0;
                            *(_OWORD *)(*(_QWORD *)(v407 + 320) + 72) = *(_OWORD *)(*v397 + 72);
                            *(_QWORD *)(*(_QWORD *)(v407 + 320) + 40) = *((_QWORD *)*v397 + 5);
                            *(_QWORD *)(*(_QWORD *)(v407 + 320) + 48) = *((_QWORD *)*v397 + 6);
                            *(_QWORD *)(*(_QWORD *)(v407 + 320) + 16) = *((_QWORD *)*v397 + 2);
                            v412 = *((_QWORD *)*v397 + 3);
                            v413 = *(_QWORD **)(v407 + 320);
                          }
                          else
                          {
                            v414 = *(_QWORD *)(v407 + 320);
                            *(_QWORD *)(v414 + 72) = v325;
                            *(_QWORD *)(v146 + 25048) = v411 + v391;
                            *(_QWORD *)(v414 + 80) = v411;
                            v413 = *(_QWORD **)(v407 + 320);
                            v415 = v413[4] + 2 * v387;
                            v413[5] = v415;
                            v413[6] = v415 + (v391 & 0xFFFFFFFE);
                            v416 = v413[1] + v396;
                            v413[2] = v416;
                            v412 = v416 + (v406 >> 1);
                          }
                          v413[3] = v412;
                          v405 += 8;
                        }
                        while (v405 != 24);
                      }
                      if (v586 - 1 <= v384)
                      {
                        ++v384;
                      }
                      else
                      {
                        v417 = v384 != v588;
                        v418 = *v397;
                        v419 = (uint64_t)&(*v397)[120 * v404];
                        ++v384;
                        v420 = v146 + 32 * v384;
                        *(_QWORD *)(v420 + 312) = v419;
                        v421 = *((_QWORD *)v418 + 4) + 2 * (v404 << v386);
                        if (v392)
                          v422 = 0;
                        else
                          v422 = 2;
                        *(_QWORD *)(v419 + 32) = v421 + 2 * ((_DWORD)v391 << v422);
                        *(_QWORD *)(*(_QWORD *)(v420 + 312) + 8) = *((_QWORD *)*v397 + 1)
                                                                   + ((_DWORD)v396 << (2 * v417))
                                                                   + (v389 << v422);
                      }
                    }
                    while (v586 > v384);
                  }
                  v383[40] = 0;
                  v383[41] = 0;
                  v383[42] = 0;
                }
                if (!*v325)
                {
                  v423 = *(_QWORD *)(v146 + 25048) * *(int *)(v146 + 25056);
                  v424 = (void *)operator new[]();
                  bzero(v424, v423);
                  v425 = *(_QWORD *)(v146 + 25040);
                  *(_QWORD *)(v146 + 25040) = v424;
                  if (v425)
                  {
                    MEMORY[0x1CAA43B6C](v425, 0x1000C8077774924);
                    if (!*v325)
                    {
                      v151 = 4294954392;
                      v129 = v576;
                      goto LABEL_352;
                    }
                  }
                }
                v426 = *(_QWORD *)(v146 + 24744);
                *(_OWORD *)(v146 + 24864) = *(_OWORD *)(v426 + 104);
                *(_OWORD *)(v146 + 24880) = *(_OWORD *)(v426 + 120);
                *(_QWORD *)(v146 + 24632) = 0;
                *(_QWORD *)(v146 + 24640) = 0;
                *(_QWORD *)(v146 + 24624) = 0;
                v163 = *(_QWORD *)(v146 + 1032);
                v129 = v576;
                v145.n128_u64[0] = 0;
                v169 = v146 + 29808;
                goto LABEL_315;
              }
              k = v288 + 120 * v291;
              v316 = 120 * v287 - 120 * v290;
              v317 = (_OWORD *)(v288 + 8);
              do
              {
                v317[3] = 0uLL;
                v317[4] = 0uLL;
                v317[1] = 0uLL;
                v317[2] = 0uLL;
                *v317 = 0uLL;
                v317 = (_OWORD *)((char *)v317 + 120);
                v316 -= 120;
              }
              while (v316);
            }
            *(_QWORD *)(v146 + 24976) = k;
            goto LABEL_265;
          }
        }
        operator delete(v268);
        v200 = v578;
        v199 = v581;
        v213 = v584;
        v214 = v593;
        v209 = v596;
        v251 = v600;
        goto LABEL_240;
      }
      j = v254 + 240 * v257;
      v283 = 240 * v252 - 240 * v256;
      v284 = (_BYTE *)(v254 + 232);
      do
      {
        *v284 = 0;
        *((_OWORD *)v284 - 13) = 0uLL;
        *((_OWORD *)v284 - 12) = 0uLL;
        *((_OWORD *)v284 - 11) = 0uLL;
        *((_OWORD *)v284 - 10) = 0uLL;
        v284 += 240;
        v283 -= 240;
      }
      while (v283);
    }
    *(_QWORD *)(v146 + 24904) = j;
    goto LABEL_240;
  }
LABEL_340:
  if ((v572 & 4) != 0 && ((int)v143 > 1 || *(_BYTE *)(v575 + 560)))
  {
    sub_1C974AC70(v129 + 4800, *(_QWORD *)(v129 + 16));
    v455 = *(_QWORD *)(v129 + 5320);
    v450 = v573;
    if (*(_DWORD *)(*(_QWORD *)(v455 + 576) + 932))
      v456 = -1;
    else
      v456 = *(_DWORD *)(v455 + 584);
    *(_QWORD *)(v129 + 4832) = v129;
    *(_QWORD *)(v129 + 4840) = sub_1C980ADB0;
    sub_1C974AFE8(v129 + 4800, v143, v456, 0, 0);
  }
  else
  {
    LODWORD(memptr) = 0;
    v616 = 0;
    v450 = v573;
    while (sub_1C9807D24(v129, **(_QWORD **)(v129 + 5376), (int *)&memptr, &v616))
      ;
  }
  if ((int)v143 >= 1)
  {
    v457 = *(uint64_t **)(v129 + 5376);
    v458 = *(_QWORD *)(v129 + 5416);
    v459 = *(_DWORD *)(v129 + 5424);
    do
    {
      v460 = *v457++;
      v458 += *(unsigned int *)(v460 + 30360);
      v459 += *(_DWORD *)(v460 + 30364);
      --v143;
    }
    while (v143);
    *(_QWORD *)(v129 + 5416) = v458;
    *(_DWORD *)(v129 + 5424) = v459;
  }
  v617 = v450;
  if (*(_BYTE *)(v129 + 512) || *(_BYTE *)(v129 + 513))
    sub_1C970E154((int *)(v129 + 3536), v129, 1, &v617);
  if (v570)
    sub_1C978FB14(v129 + 3400, *(_QWORD *)(v129 + 8), *(_BYTE *)(v129 + 653), &v617);
  if (v574 >= 1)
  {
    if (*(int *)(v129 + 568) < 1)
      goto LABEL_386;
    v461 = 0;
    v462 = 0;
    v463 = *(_QWORD *)(v129 + 5352);
    do
    {
      sub_1C9750F5C(v463 + (v461 << 6));
      v463 = *(_QWORD *)(v129 + 5352);
      v464 = v463 + (v461 << 6);
      v465 = *(unsigned __int8 **)(v464 + 24);
      v466 = *(_QWORD *)(v464 + 32);
      if ((unint64_t)v465 >= v466)
      {
        v468 = 0;
      }
      else
      {
        v467 = 0;
        v468 = 0;
        v469 = v466 - (_QWORD)v465;
        v470 = v465;
        do
        {
          v472 = *v470++;
          v471 = v472;
          v473 = v467 == 2;
          v474 = 2 * (v472 > 3);
          if (v467 == 2)
            v467 = v474;
          v475 = v471 < 4 && v473;
          v468 += v475;
          if (v471)
            v467 = 0;
          else
            ++v467;
          --v469;
        }
        while (v469);
      }
      v476 = v468 - (_DWORD)v465 + v466 - 1;
      *(_DWORD *)(*(_QWORD *)(v129 + 576) + 4 * v461) = v476;
      if (v462 <= v476)
        v462 = v476;
      ++v461;
    }
    while (v461 < *(int *)(v129 + 568));
    if (v462)
      v477 = 31 - __clz(v462);
    else
LABEL_386:
      LOBYTE(v477) = 0;
    *(_BYTE *)(v129 + 572) = v477;
  }
  if (v571)
    sub_1C974FAE0(v129, (FILE *)*MEMORY[0x1E0C80C10]);
  v478 = *(_QWORD *)(v129 + 5320);
  v479 = *(_QWORD *)(v478 + 632);
  if (*(_BYTE *)(v129 + 632))
  {
    v481 = 19;
  }
  else if (*(_BYTE *)(v129 + 637))
  {
    v481 = 21;
  }
  else if ((*(_DWORD *)(v479 + 1024) & 0x80000000) != 0)
  {
    v481 = 7;
  }
  else if (*(_DWORD *)(v478 + 652) >= *(_DWORD *)(v478 + 608))
  {
    v481 = *(unsigned __int8 *)(v479 + 40) != 0;
  }
  else
  {
    v481 = 9;
  }
  v480 = *(char *)(*(_QWORD *)(v478 + 576) + 480);
  v482 = sub_1C9750CF0(v129 + 1608, (2 * (v480 + *(_DWORD *)(v479 + 524) * *(_DWORD *)(v479 + 520)) - 2) / v480);
  if ((_DWORD)v482)
  {
    v151 = v482;
    if (dword_1ED1ACCC0 < 3)
      goto LABEL_400;
    fwrite("Bitstream initialization for SliceEnc failed\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    syslog(27, "Bitstream initialization for SliceEnc failed\n");
    goto LABEL_397;
  }
  sub_1C9750D54(v129 + 1608, 0, 1);
  sub_1C9750D54(v129 + 1608, v481, 6);
  sub_1C9750D54(v129 + 1608, 0, 6);
  sub_1C9750D54(v129 + 1608, 1, 3);
  sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 48), 1);
  if (*(_BYTE *)(v129 + 633))
    sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 49), 1);
  v487 = *(unsigned __int8 *)(v129 + 50) + 1;
  v488 = __clz(v487);
  sub_1C9750D54(v129 + 1608, (v487 - (0x80000000 >> v488)) | (0x80000000 >> v488), (2 * v488) ^ 0x3F);
  if (!*(_BYTE *)(v129 + 48))
  {
    if (*(_BYTE *)(*(_QWORD *)(v129 + 32) + 2))
      sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 56), 1);
    v489 = *(_DWORD *)(v129 + 52) + 1;
    v490 = __clz(v489);
    sub_1C9750D54(v129 + 1608, (v489 - (0x80000000 >> v490)) | (0x80000000 >> v490), 63 - 2 * v490);
  }
  if (!*(_BYTE *)(v129 + 56))
  {
    v491 = *(unsigned __int8 *)(v129 + 58) + 1;
    v492 = __clz(v491);
    sub_1C9750D54(v129 + 1608, (v491 - (0x80000000 >> v492)) | (0x80000000 >> v492), (2 * v492) ^ 0x3F);
    if (*(_BYTE *)(*(_QWORD *)(v129 + 32) + 3))
      sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 59), 1);
    v493 = *(_QWORD *)(v129 + 16);
    if (!*(_BYTE *)(v129 + 632))
    {
      sub_1C9750D54(v129 + 1608, *(_DWORD *)(v129 + 64), *(unsigned __int8 *)(v493 + 224) + 4);
      sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 68), 1);
      if (*(_BYTE *)(v129 + 68))
      {
        v494 = *(_DWORD *)(*(_QWORD *)(v129 + 16) + 288);
        if (v494 >= 2)
        {
          v495 = __clz(v494) ^ 0x1F;
          if ((v494 & (v494 - 1)) != 0)
            v496 = v495 + 1;
          else
            v496 = v495;
          sub_1C9750D54(v129 + 1608, *(_DWORD *)(v129 + 320), v496);
        }
      }
      else
      {
        v151 = sub_1C982EF5C(*(_QWORD *)(v129 + 5320) + 4360, v129 + 1608, *(_QWORD *)(v129 + 16), *(_DWORD *)(*(_QWORD *)(v129 + 16) + 288));
        if ((_DWORD)v151)
          goto LABEL_397;
      }
      v493 = *(_QWORD *)(v129 + 16);
      if (*(_BYTE *)(v493 + 320))
      {
        if (*(_DWORD *)(v493 + 324))
        {
          v497 = *(_DWORD *)(v129 + 324) + 1;
          v498 = __clz(v497);
          sub_1C9750D54(v129 + 1608, (v497 - (0x80000000 >> v498)) | (0x80000000 >> v498), 63 - 2 * v498);
        }
        v499 = *(_DWORD *)(v129 + 328) + 1;
        v500 = __clz(v499);
        sub_1C9750D54(v129 + 1608, (v499 - (0x80000000 >> v500)) | (0x80000000 >> v500), 63 - 2 * v500);
        LODWORD(v501) = *(_DWORD *)(v129 + 324);
        if ((_DWORD)v501)
        {
          v502 = 0;
          v503 = v129 + 332;
          do
          {
            v504 = *(unsigned __int8 *)(v503 + v502) + 1;
            v505 = __clz(v504);
            sub_1C9750D54(v129 + 1608, (v504 - (0x80000000 >> v505)) | (0x80000000 >> v505), (2 * v505) ^ 0x3F);
            v506 = (1 << v502) & *(unsigned __int16 *)(v129 + 510);
            sub_1C9750D54(v129 + 1608, v506 != 0, 1);
            if (v506)
            {
              v507 = *(_DWORD *)(v503 + 4 * v502 + 48) + 1;
              v508 = __clz(v507);
              sub_1C9750D54(v129 + 1608, (v507 - (0x80000000 >> v508)) | (0x80000000 >> v508), 63 - 2 * v508);
            }
            ++v502;
            v501 = *(unsigned int *)(v129 + 324);
          }
          while (v502 < v501);
        }
        if (v501 < *(_DWORD *)(v129 + 328) + (int)v501)
        {
          v509 = (int)v501;
          v510 = v129 + 348;
          do
          {
            v511 = *(unsigned __int16 *)(v510 + 2 * v509) + 1;
            v512 = __clz(v511);
            sub_1C9750D54(v129 + 1608, (v511 - (0x80000000 >> v512)) | (0x80000000 >> v512), (2 * v512) ^ 0x3F);
            v513 = (1 << v509) & *(unsigned __int16 *)(v129 + 510);
            sub_1C9750D54(v129 + 1608, (*(unsigned __int16 *)(v129 + 508) >> v509) & 1, 1);
            sub_1C9750D54(v129 + 1608, v513 != 0, 1);
            if (v513)
            {
              v514 = *(_DWORD *)(v510 + 4 * v509 + 32) + 1;
              v515 = __clz(v514);
              sub_1C9750D54(v129 + 1608, (v514 - (0x80000000 >> v515)) | (0x80000000 >> v515), 63 - 2 * v515);
            }
            ++v509;
          }
          while (*(_DWORD *)(v129 + 328) + *(_DWORD *)(v129 + 324) > v509);
        }
        v493 = *(_QWORD *)(v129 + 16);
      }
      if (*(_BYTE *)(v493 + 396))
      {
        sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 514), 1);
        v493 = *(_QWORD *)(v129 + 16);
      }
    }
    if (*(_BYTE *)(v493 + 277))
    {
      sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 512), 1);
      if (*(_BYTE *)(*(_QWORD *)(v129 + 16) + 201))
        sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 513), 1);
    }
    if (*(unsigned __int8 *)(v129 + 58) > 1u)
      goto LABEL_489;
    sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 515), 1);
    if (*(_BYTE *)(v129 + 515))
    {
      v516 = *(char *)(v129 + 516);
      v517 = __clz(v516);
      sub_1C9750D54(v129 + 1608, (v516 - (0x80000000 >> v517)) | (0x80000000 >> v517), 63 - 2 * v517);
      if (!*(_BYTE *)(v129 + 58))
      {
        v518 = *(char *)(v129 + 517);
        v519 = __clz(v518);
        sub_1C9750D54(v129 + 1608, (v518 - (0x80000000 >> v519)) | (0x80000000 >> v519), 63 - 2 * v519);
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(v129 + 32) + 1608))
    {
      v520 = *(unsigned int *)(*(_QWORD *)(v129 + 5320) + 3056);
      if ((int)v520 >= 2)
      {
        sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 518), 1);
        if (*(_BYTE *)(v129 + 518))
        {
          v521 = __clz(v520) ^ 0x1F;
          v522 = (v520 & ((_DWORD)v520 - 1)) != 0 ? v521 + 1 : v521;
          if (*(char *)(v129 + 516) >= 1)
          {
            v523 = 0;
            v524 = v129 + 520;
            while (1)
            {
              v525 = *(unsigned __int8 *)(v524 + v523);
              if ((int)v520 <= v525)
                break;
              sub_1C9750D54(v129 + 1608, v525, v522);
              if (++v523 >= *(char *)(v129 + 516))
                goto LABEL_461;
            }
            if (dword_1ED1ACCC0 >= 3)
            {
              v567 = "list_entry_l0_[%d] (%d) out of range [0, %d]\n";
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "list_entry_l0_[%d] (%d) out of range [0, %d]\n");
LABEL_544:
              syslog(27, v567, v523, *(unsigned __int8 *)(v524 + v523), v520);
              v151 = 4294954394;
LABEL_397:
              if (dword_1ED1ACCC0 >= 3)
              {
                v451 = (FILE *)*MEMORY[0x1E0C80C10];
                v452 = "Slice header encoding failed\n";
                v453 = "Slice header encoding failed\n";
                v454 = 29;
LABEL_399:
                fwrite(v453, v454, 1uLL, v451);
                syslog(27, v452);
              }
              goto LABEL_400;
            }
            goto LABEL_545;
          }
        }
LABEL_461:
        if (*(_BYTE *)(v129 + 58))
        {
LABEL_472:
          if (*(_BYTE *)(*(_QWORD *)(v129 + 32) + 6))
            sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 553), 1);
          if (!*(_BYTE *)(v129 + 514))
            goto LABEL_480;
          if (!*(_BYTE *)(v129 + 58))
            sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 554), 1);
          if (*(_BYTE *)(v129 + 554))
          {
            if (*(char *)(v129 + 516) <= 1)
            {
LABEL_480:
              v531 = *(_QWORD *)(v129 + 32);
              if (*(_BYTE *)(v531 + 17) && *(_BYTE *)(v129 + 58) == 1
                || *(_BYTE *)(v531 + 18) && !*(_BYTE *)(v129 + 58))
              {
                v532 = *(unsigned __int8 *)(v129 + 556) + 1;
                v533 = __clz(v532);
                sub_1C9750D54(v129 + 1608, (v532 - (0x80000000 >> v533)) | (0x80000000 >> v533), (2 * v533) ^ 0x3F);
                if (*(_BYTE *)(*(_QWORD *)(v129 + 16) + 201))
                  sub_1C9750F28(v129 + 1608, *(char *)(v129 + 557));
                sub_1C980AA70(v129, 0);
                if (!*(_BYTE *)(v129 + 58))
                  sub_1C980AA70(v129, 1u);
              }
              v534 = *(unsigned __int8 *)(v129 + 558) + 1;
              v535 = __clz(v534);
              sub_1C9750D54(v129 + 1608, (v534 - (0x80000000 >> v535)) | (0x80000000 >> v535), (2 * v535) ^ 0x3F);
LABEL_489:
              v536 = *(char *)(v129 + 559);
              if (v536 <= 0)
                v537 = -2 * v536;
              else
                v537 = 2 * v536 - 1;
              v538 = v537 + 1;
              v539 = __clz(v538);
              sub_1C9750D54(v129 + 1608, (v538 - (0x80000000 >> v539)) | (0x80000000 >> v539), 63 - 2 * v539);
              v540 = *(_BYTE **)(v129 + 32);
              if (v540[16])
              {
                v541 = *(char *)(v129 + 560);
                if (v541 <= 0)
                  v542 = -2 * v541;
                else
                  v542 = 2 * v541 - 1;
                v543 = v542 + 1;
                v544 = __clz(v543);
                sub_1C9750D54(v129 + 1608, (v543 - (0x80000000 >> v544)) | (0x80000000 >> v544), 63 - 2 * v544);
                v545 = *(char *)(v129 + 561);
                if (v545 <= 0)
                  v546 = -2 * v545;
                else
                  v546 = 2 * v545 - 1;
                v547 = v546 + 1;
                v548 = __clz(v547);
                sub_1C9750D54(v129 + 1608, (v547 - (0x80000000 >> v548)) | (0x80000000 >> v548), 63 - 2 * v548);
                v540 = *(_BYTE **)(v129 + 32);
              }
              if (v540[29])
              {
                if (v540[30])
                  sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 563), 1);
                if (*(_BYTE *)(v129 + 563))
                {
                  sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 564), 1);
                  if (!*(_BYTE *)(v129 + 564))
                  {
                    sub_1C9750F28(v129 + 1608, *(char *)(v129 + 565));
                    sub_1C9750F28(v129 + 1608, *(char *)(v129 + 566));
                  }
                }
              }
              if (*(_BYTE *)(*(_QWORD *)(v129 + 32) + 28)
                && (*(_BYTE *)(v129 + 512) || *(_BYTE *)(v129 + 513) || !*(_BYTE *)(v129 + 564)))
              {
                sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 567), 1);
              }
              goto LABEL_510;
            }
          }
          else if (*(char *)(v129 + 517) < 2)
          {
            goto LABEL_480;
          }
          v529 = *(unsigned __int8 *)(v129 + 555) + 1;
          v530 = __clz(v529);
          sub_1C9750D54(v129 + 1608, (v529 - (0x80000000 >> v530)) | (0x80000000 >> v530), (2 * v530) ^ 0x3F);
          goto LABEL_480;
        }
        sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 519), 1);
        if (*(_BYTE *)(v129 + 519))
        {
          v526 = __clz(v520) ^ 0x1F;
          v527 = (v520 & ((_DWORD)v520 - 1)) != 0 ? v526 + 1 : v526;
          if (*(char *)(v129 + 517) >= 1)
          {
            v523 = 0;
            v524 = v129 + 536;
            while (1)
            {
              v528 = *(unsigned __int8 *)(v524 + v523);
              if ((int)v520 <= v528)
                break;
              sub_1C9750D54(v129 + 1608, v528, v527);
              if (++v523 >= *(char *)(v129 + 517))
                goto LABEL_470;
            }
            if (dword_1ED1ACCC0 >= 3)
            {
              v567 = "list_entry_l1_[%d] (%d) out of range [0, %d]\n";
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "list_entry_l1_[%d] (%d) out of range [0, %d]\n");
              goto LABEL_544;
            }
LABEL_545:
            v151 = 4294954394;
            goto LABEL_400;
          }
        }
      }
    }
LABEL_470:
    if (!*(_BYTE *)(v129 + 58))
      sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(v129 + 552), 1);
    goto LABEL_472;
  }
LABEL_510:
  v549 = *(_QWORD *)(v129 + 32);
  if (*(_BYTE *)(v549 + 20) || *(_BYTE *)(v549 + 21))
  {
    v550 = *(_DWORD *)(v129 + 568) + 1;
    v551 = __clz(v550);
    sub_1C9750D54(v129 + 1608, (v550 - (0x80000000 >> v551)) | (0x80000000 >> v551), 63 - 2 * v551);
    if (*(int *)(v129 + 568) >= 1)
    {
      v552 = *(unsigned __int8 *)(v129 + 572) + 1;
      v553 = __clz(v552);
      sub_1C9750D54(v129 + 1608, (v552 - (0x80000000 >> v553)) | (0x80000000 >> v553), (2 * v553) ^ 0x3F);
      if (*(_DWORD *)(v129 + 568))
      {
        v554 = 0;
        do
          sub_1C9750D54(v129 + 1608, *(_DWORD *)(*(_QWORD *)(v129 + 576) + 4 * v554++), *(unsigned __int8 *)(v129 + 572) + 1);
        while (v554 < *(unsigned int *)(v129 + 568));
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v129 + 32) + 1612))
  {
    v555 = *(unsigned __int16 *)(v129 + 600) + 1;
    v556 = __clz(v555);
    sub_1C9750D54(v129 + 1608, (v555 - (0x80000000 >> v556)) | (0x80000000 >> v556), (2 * v556) ^ 0x3F);
    if (*(_WORD *)(v129 + 600))
    {
      v557 = 0;
      do
        sub_1C9750D54(v129 + 1608, *(unsigned __int8 *)(*(_QWORD *)(v129 + 608) + v557++), 8);
      while (v557 < *(unsigned __int16 *)(v129 + 600));
    }
  }
  sub_1C9750F5C(v129 + 1608);
  if (v574 < 0)
  {
LABEL_531:
    sub_1C9750F5C(v129 + 1608);
    if (!*(_BYTE *)(v129 + 1664))
    {
      v151 = 0;
      goto LABEL_400;
    }
  }
  else
  {
    v558 = 0;
    while (1)
    {
      v559 = *(_QWORD *)(v129 + 5352) + (v558 << 6);
      if (*(_BYTE *)(v559 + 56))
        break;
      v560 = *(unsigned int **)(v559 + 24);
      v561 = *(int *)(v559 + 52) + 8 * (*(_QWORD *)(v559 + 32) - (_QWORD)v560);
      if (v561)
      {
        if (v561 < 0x21)
        {
          LODWORD(v562) = 0;
          v566 = 32;
        }
        else
        {
          v562 = 0;
          do
          {
            v563 = v562;
            v564 = *v560++;
            v565 = bswap32(v564);
            sub_1C9750D54(v129 + 1608, HIWORD(v565), 16);
            sub_1C9750D54(v129 + 1608, (unsigned __int16)v565, 16);
            v562 = v563 + 32;
          }
          while (v563 + 64 < v561);
          v566 = v563 + 64;
        }
        sub_1C9750DB8(v129 + 1608, bswap32(*v560) >> (v566 - v561), v561 - v562);
      }
      if (++v558 == v587)
        goto LABEL_531;
    }
  }
  if (dword_1ED1ACCC0 < 3)
  {
    v151 = 4294940770;
  }
  else
  {
    fwrite("Ran out of allocated bufferspace\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v151 = 4294940770;
    syslog(27, "Ran out of allocated bufferspace\n");
  }
LABEL_400:
  v483 = *(_QWORD *)(v129 + 8);
  if (*(_BYTE *)(v483 + 48))
  {
    v484 = atomic_load((unsigned int *)(v483 + 1032));
    v485 = v484 & ~(v484 >> 31);
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v483 + 16))(*(_QWORD *)(v129 + 8), v485, *(unsigned int *)(v483 + 524), 0);
    sub_1C97BE470(v483 + 48, v485, *(unsigned int *)(v483 + 524));
    *(_BYTE *)(v483 + 48) = 0;
  }
  memptr = (void *)(v483 + 1040);
  v619 = 1;
  std::mutex::lock((std::mutex *)(v483 + 1040));
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v483 + 1032));
  sub_1C971138C((uint64_t)&memptr);
  std::condition_variable::notify_all((std::condition_variable *)(v483 + 1104));
  if (v619)
    std::mutex::unlock((std::mutex *)memptr);
  sub_1C9714CD4(v129);
  *(_QWORD *)(v129 + 8) = 0;
  *(_QWORD *)(v129 + 5400) = 0;
  return v151;
}

void sub_1C9807D08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 160))
    std::mutex::unlock(*(std::mutex **)(v1 - 168));
  _Unwind_Resume(exception_object);
}

BOOL sub_1C9807D24(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  char v6;
  uint64_t v7;
  int32x2_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _QWORD *v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  _BYTE *v135;
  char v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  BOOL v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  uint32x4_t v154;
  uint32x4_t v155;
  unsigned int v156;
  int32x4_t v157;
  int8x16_t v158;
  int v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  unsigned int v163;
  int8x16_t v164;
  int8x16_t v165;
  int v166;
  int v167;
  int *v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  _BYTE *v182;
  char v183;
  int *v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  unint64_t v190;
  uint64_t v191;
  char v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t i;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  __n128 v217;
  int32x4_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  __n128 v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(_QWORD *, __n128);
  _QWORD *v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  BOOL v249;
  unsigned int v250;
  int v251;
  int v252;
  unsigned __int8 *v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  char v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  unsigned __int8 *v281;
  signed int v282;
  _QWORD *v283;
  uint64_t v284;
  int v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  _BOOL4 v290;
  BOOL v291;
  _BYTE *v292;
  BOOL v293;
  _BYTE *v294;
  unsigned __int8 *v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  uint64_t v310;
  _BYTE *v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  _WORD *v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  _BYTE *v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  int v343;
  int v344;
  _DWORD *v345;
  int v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  char v350;
  uint64_t v351;
  int v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  uint64_t v358;
  int *v359;
  _WORD *v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  char v369;
  int v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  _QWORD *v376;
  _WORD *v377;
  _WORD *v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  uint64_t v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char v396;
  int v397;
  __n128 *v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  int v402;
  int v403;
  char v404;
  unsigned int v405;
  char v406;
  unsigned __int8 *v407;
  int v408;
  int v409;
  unsigned int v410;
  unint64_t v411;
  unsigned int v412;
  _WORD *v413;
  _BYTE *v414;
  unsigned int v415;
  uint64_t v416;
  int32x4_t v417;
  uint64_t v418;
  _WORD *v419;
  _BYTE *v420;
  int v421;
  int v422;
  int v423;
  _BOOL4 v424;
  _BOOL4 v425;
  int v426;
  _BOOL4 v427;
  int v428;
  int v429;
  int v430;
  BOOL v431;
  int v432;
  unsigned int v433;
  __n128 *v434;
  uint64_t v435;
  int v436;
  int v437;
  int v438;
  int v439;
  _OWORD *v440;
  int v441;
  uint64_t v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _BYTE *v451;
  char *v452;
  void (*v453)(_OWORD *, uint64_t, char *);
  uint64_t v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  uint64_t v464;
  char *v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  uint64_t j;
  char *v470;
  void (*v471)(_OWORD *, uint64_t, char *);
  uint64_t v472;
  uint64_t v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  uint64_t k;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  uint64_t v486;
  uint64_t m;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  int v500;
  uint64_t v501;
  int *v502;
  int v503;
  unint64_t v504;
  _DWORD *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  _BYTE *v509;
  __int16 v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  char *v514;
  unint64_t v515;
  char *v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  uint64_t v520;
  BOOL v522;
  int v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  int v529;
  __int16 v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  __int16 v538;
  int v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  __int16 v544;
  int v545;
  int v546;
  int v547;
  int v548;
  __int16 v549;
  int v550;
  int v551;
  int v552;
  int v553;
  uint64_t v554;
  int v555;
  unsigned int v556;
  uint64_t v557;
  int v558;
  unsigned int v559;
  int v560;
  int v561;
  unsigned int v562;
  unsigned int v563;
  uint64_t v564;
  int v565;
  int v566;
  int v567;
  int64_t v568;
  int64_t v569;
  unsigned int v570;
  int v571;
  unsigned int v572;
  int v573;
  uint64_t v574;
  int v575;
  int v576;
  int v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  _BYTE *v584;
  _BYTE *v585;
  _QWORD *v586;
  uint64_t v587;
  _DWORD *v588;
  int v589;
  _DWORD *v590;
  char *v591;
  uint64_t v592;
  int32x2_t *v593;
  char v596;
  __n128 *v597;
  int v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  int *v602;
  unsigned __int8 *v603;
  int v604;
  uint64_t v605;
  int v606;
  int v607;
  __n128 *v608;
  int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  int *v613;
  int v614;
  uint64_t v615;
  _BYTE *v616;
  _WORD *v617;
  int v618;
  _DWORD *v619;
  _WORD *v620;
  uint64_t v621;
  int v622;
  int v623;
  char v624;
  char v625;
  uint64_t v626;
  uint64_t v627;
  unsigned int v628;
  uint64_t v629;
  unsigned __int8 **v630;
  uint64_t v631;
  int *v632;
  int v633;
  char v634;
  _BYTE v635[240];
  _WORD v636[348];
  int v637;
  char v638;
  int v639;
  unint64_t v640;
  __n128 *v641;
  _QWORD v642[15];
  int v643;
  int v644;
  _DWORD v645[16];
  uint64_t v646;

  v6 = 0;
  v646 = *MEMORY[0x1E0C80C00];
  v7 = a2 + 24576;
  v8 = (int32x2_t *)(a2 + 300);
  v9 = *a4;
  v10 = *a3 + *(_DWORD *)(*(_QWORD *)(a1 + 16) + 2120) * *a4;
  if (!*(_DWORD *)(a1 + 568))
    v9 = 0;
  v600 = v9;
  v587 = *(_QWORD *)(a1 + 5328);
  v11 = v587 + 472 * v9;
  v618 = *(_DWORD *)(*(_QWORD *)(a1 + 1184) + 4 * v9);
  v633 = v618;
  v12 = *(_QWORD *)(a2 + 14912);
  v13 = *(_BYTE *)(v12 + 2113);
  v14 = *(unsigned __int8 *)(v12 + 2117);
  v15 = *(_DWORD *)(v12 + 2120);
  *(_QWORD *)(a2 + 1008) = v11;
  *(_QWORD *)(a2 + 1016) = v11;
  *(_QWORD *)(a2 + 1024) = a2 + 29888;
  v16 = v10 / v15;
  v17 = (v10 % v15) << v13;
  v18 = v16 << v13;
  *(_DWORD *)(a2 + 24588) = v17;
  *(_DWORD *)(a2 + 24592) = v18;
  *(_DWORD *)v7 = v10;
  *(_DWORD *)(a2 + 24580) = v17 >> v13;
  *(_DWORD *)(a2 + 24584) = v18 >> v13;
  v586 = (_QWORD *)v11;
  *(_BYTE *)(v11 + 225) = 0;
  *(_BYTE *)(a2 + 30113) = 0;
  v19 = *(_DWORD *)(v12 + 204);
  v20 = *(_DWORD *)(v12 + 208);
  v21 = v19 - v17;
  if (v21 >= v14)
    v22 = v14;
  else
    v22 = v21;
  if (v20 - v18 >= v14)
    v23 = v14;
  else
    v23 = v20 - v18;
  v630 = (unsigned __int8 **)(a2 + 24744);
  v24 = 1;
  do
  {
    (*(void (**)(uint64_t, _QWORD))(a2 + 29816))(v22, (v23 >> v6));
    if ((v24 & 1) == 0)
      break;
    v24 = 0;
    v6 = 1;
  }
  while (*(_BYTE *)(*(_QWORD *)(a2 + 14912) + 201));
  *(_OWORD *)(*(_QWORD *)(a2 + 24616) + 24) = *(_OWORD *)(*(_QWORD *)(a2 + 24744) + 24);
  *(_OWORD *)(*(_QWORD *)(a2 + 24616) + 40) = *(_OWORD *)(*(_QWORD *)(a2 + 24744) + 40);
  *(_OWORD *)(*(_QWORD *)(a2 + 24616) + 56) = *(_OWORD *)(*(_QWORD *)(a2 + 24744) + 56);
  *(_OWORD *)(*(_QWORD *)(a2 + 24616) + 72) = *(_OWORD *)(*(_QWORD *)(a2 + 24744) + 72);
  v25 = *(_DWORD *)(v7 + 12);
  v26 = *(_DWORD *)(v7 + 16);
  if (v25)
    v27 = 240;
  else
    v27 = 0;
  v28 = *(_DWORD *)(a2 + 80);
  v29 = *(_DWORD *)(a2 + 84);
  if (v25 + v14 >= v28)
    v30 = 7680;
  else
    v30 = 130560;
  if (v26)
  {
    v31 = v25 == 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = v30 | v27;
  v33 = v32 | 0x100;
  if (v31)
    v33 = v32;
  *(_DWORD *)(v7 + 20) = v33;
  v34 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 14912) + 2117);
  v35 = v26 + v34;
  if (v29 < v26 + v34)
    v35 = v29;
  v36 = (v35 - v26);
  v37 = v25 + v34;
  if (v28 < v25 + v34)
    v37 = v28;
  v629 = a2;
  if ((v33 & 0xF0) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a2 + 14904) + 8);
    v39 = *(_QWORD *)(v38 + 768);
    if ((v26 | (v25 - 1)) < 0 || *(_DWORD *)(v38 + 520) < v25 || *(_DWORD *)(v38 + 524) <= v26)
      v40 = 0;
    else
      v40 = (_WORD *)(*(_QWORD *)(v38 + 800) + 2 * (v39 * ((uint64_t)v26 >> 3) + ((v25 - 1) >> 3)));
    if ((int)v36 >= 1)
    {
      v41 = 0;
      v42 = 0;
      v43 = 2 * v39;
      do
      {
        *(_WORD *)(*(_QWORD *)(a2 + 24864) + v41) = *v40;
        v42 += 8;
        v41 += 2;
        v40 = (_WORD *)((char *)v40 + v43);
      }
      while (v42 < v36);
    }
  }
  else if ((int)v36 >= 8)
  {
    v44 = 0;
    do
      *(_WORD *)(*(_QWORD *)(a2 + 24864) + 2 * v44++) = 0;
    while (v36 >> 3 != v44);
  }
  v45 = v37 - v25;
  if ((*(_BYTE *)(v7 + 21) & 0x1E) != 0)
  {
    v46 = *(_DWORD *)(v7 + 12);
    v47 = *(_DWORD *)(v7 + 16);
    if (((v47 - 1) | v46) < 0
      || (v48 = *(_QWORD *)(*(_QWORD *)(v629 + 14904) + 8), *(_DWORD *)(v48 + 520) <= v46)
      || *(_DWORD *)(v48 + 524) < v47)
    {
      v49 = 0;
    }
    else
    {
      v49 = (const void *)(*(_QWORD *)(v48 + 800) + 2
                                                  * (*(_QWORD *)(v48 + 768) * ((uint64_t)(v47 - 1) >> 3) + (v46 >> 3)));
    }
    memcpy(*(void **)(v629 + 24872), v49, 2 * (v45 >> 3));
  }
  else if (v45 >= 8)
  {
    v50 = 0;
    do
      *(_WORD *)(*(_QWORD *)(v629 + 24872) + 2 * v50++) = 0;
    while (v45 >> 3 != v50);
  }
  v51 = (int)v36 >> 2;
  if ((*(_BYTE *)(v7 + 20) & 0xF0) != 0)
  {
    v52 = *(_QWORD *)(*(_QWORD *)(v629 + 14904) + 8);
    v53 = *(_QWORD *)(v52 + 848);
    v55 = *(_DWORD *)(v7 + 12);
    v54 = *(_DWORD *)(v7 + 16);
    if ((v54 | (v55 - 1)) < 0 || *(_DWORD *)(v52 + 520) < v55 || *(_DWORD *)(v52 + 524) <= v54)
      v56 = 0;
    else
      v56 = (uint64_t *)(*(_QWORD *)(v52 + 880) + 16 * (v53 * ((uint64_t)v54 >> 2) + ((v55 - 1) >> 2)));
    v57 = (_QWORD *)v629;
    if ((int)v36 >= 1)
    {
      v58 = 0;
      v59 = 0;
      v60 = 16 * v53;
      do
      {
        v61 = (_QWORD *)(*(_QWORD *)(v629 + 24880) + v58);
        v62 = *v56;
        *(_QWORD *)((char *)v61 + 6) = *(uint64_t *)((char *)v56 + 6);
        *v61 = v62;
        v59 += 4;
        v58 += 16;
        v56 = (uint64_t *)((char *)v56 + v60);
      }
      while (v59 < v36);
    }
  }
  else
  {
    v57 = (_QWORD *)v629;
    if ((int)v36 >= 4)
    {
      v63 = 0;
      if (v51 <= 1)
        v64 = 1;
      else
        v64 = (int)v36 >> 2;
      v65 = 16 * v64;
      do
      {
        v66 = (_QWORD *)(*(_QWORD *)(v629 + 24880) + v63);
        v67 = *(_QWORD *)(v629 + 24600);
        *(_QWORD *)((char *)v66 + 6) = *(_QWORD *)(v629 + 24606);
        *v66 = v67;
        v63 += 16;
      }
      while (v65 != v63);
    }
  }
  v68 = v45 >> 2;
  v69 = v57 + 3075;
  v70 = (_QWORD *)(v57[3110] + 16 * v51);
  v71 = v57[3075];
  *(_QWORD *)((char *)v70 + 6) = *(_QWORD *)((char *)v57 + 24606);
  *v70 = v71;
  v72 = v57;
  if ((*(_BYTE *)(v7 + 21) & 0x1E) != 0)
  {
    v73 = *(_DWORD *)(v7 + 12);
    v74 = *(_DWORD *)(v7 + 16);
    if (((v74 - 1) | v73) < 0
      || (v75 = *(_QWORD *)(v57[1863] + 8), *(_DWORD *)(v75 + 520) <= v73)
      || *(_DWORD *)(v75 + 524) < v74)
    {
      v76 = 0;
    }
    else
    {
      v76 = (char *)(*(_QWORD *)(v75 + 880) + 16 * (*(_QWORD *)(v75 + 848) * ((uint64_t)(v74 - 1) >> 2) + (v73 >> 2)));
    }
    memcpy(*(void **)(v629 + 24888), v76, 16 * v68);
    v77 = v76 - 16;
    v72 = (_QWORD *)v629;
    if ((*(_DWORD *)(v7 + 20) & 0x100) != 0)
      v78 = (uint64_t *)v77;
    else
      v78 = v69;
    v79 = *(_QWORD *)(v629 + 24888);
    v80 = *v78;
    *(_QWORD *)(v79 - 10) = *(uint64_t *)((char *)v78 + 6);
    *(_QWORD *)(v79 - 16) = v80;
    v81 = *(_DWORD *)(v7 + 16);
    v82 = *(_DWORD *)(v7 + 12) + v68;
    if (((v81 - 1) | v82) < 0
      || (v83 = *(_QWORD *)(*(_QWORD *)(v629 + 14904) + 8), *(_DWORD *)(v83 + 520) <= v82)
      || *(_DWORD *)(v83 + 524) < v81)
    {
      v84 = 0;
    }
    else
    {
      v84 = (uint64_t *)(*(_QWORD *)(v83 + 880) + 16 * (*(_QWORD *)(v83 + 848) * ((uint64_t)(v81 - 1) >> 2) + (v82 >> 2)));
    }
    if (!v84)
      v84 = v69;
    v85 = (_QWORD *)(*(_QWORD *)(v629 + 24888) + 16 * v68);
    v86 = *v84;
    *(_QWORD *)((char *)v85 + 6) = *(uint64_t *)((char *)v84 + 6);
    *v85 = v86;
    v88 = *(_DWORD *)(v7 + 12);
    v87 = *(_DWORD *)(v7 + 16);
    v89 = v87 - 1;
    if (((v87 - 1) | (v88 - 1)) < 0
      || (v90 = *(_QWORD *)(*(_QWORD *)(v629 + 14904) + 8), *(_DWORD *)(v90 + 520) < v88)
      || *(_DWORD *)(v90 + 524) < v87
      || (v91 = *(_QWORD *)(v90 + 880)) == 0)
    {
      v95 = *(_QWORD *)(v629 + 24888);
      v96 = *v69;
      *(_QWORD *)(v95 - 10) = *(uint64_t *)((char *)v69 + 6);
      *(_QWORD *)(v95 - 16) = v96;
    }
    else
    {
      v92 = (uint64_t *)(v91 + 16 * (*(_QWORD *)(v90 + 848) * ((uint64_t)v89 >> 2) + ((v88 - 1) >> 2)));
      v93 = *(_QWORD *)(v629 + 24888);
      v94 = *v92;
      *(_QWORD *)(v93 - 10) = *(uint64_t *)((char *)v92 + 6);
      *(_QWORD *)(v93 - 16) = v94;
    }
    v97 = *(_DWORD *)(v7 + 16);
    v98 = *(_DWORD *)(v7 + 12) + v34;
    v99 = v97 - 1;
    if (((v97 - 1) | v98) < 0
      || (v100 = *(_QWORD *)(*(_QWORD *)(v629 + 14904) + 8), *(_DWORD *)(v100 + 520) <= v98)
      || *(_DWORD *)(v100 + 524) < v97
      || (v101 = *(_QWORD *)(v100 + 880)) == 0)
    {
      v105 = (_QWORD *)(*(_QWORD *)(v629 + 24888) + 16 * v68);
      v106 = *v69;
      *(_QWORD *)((char *)v105 + 6) = *(uint64_t *)((char *)v69 + 6);
      *v105 = v106;
    }
    else
    {
      v102 = (uint64_t *)(v101 + 16 * (*(_QWORD *)(v100 + 848) * ((uint64_t)v99 >> 2) + (v98 >> 2)));
      v103 = *v102;
      v104 = (_QWORD *)(*(_QWORD *)(v629 + 24888) + 16 * v68);
      *(_QWORD *)((char *)v104 + 6) = *(uint64_t *)((char *)v102 + 6);
      *v104 = v103;
    }
  }
  else if (v45 >= -4)
  {
    if (v68 < 0)
      v107 = -1;
    else
      v107 = v45 >> 2;
    v108 = 16 * (v107 + 1);
    v109 = -16;
    do
    {
      v110 = (_QWORD *)(v57[3111] + v109);
      v111 = *v69;
      *(_QWORD *)((char *)v110 + 6) = *(_QWORD *)((char *)v57 + 24606);
      *v110 = v111;
      v109 += 16;
    }
    while (v108 != v109);
  }
  *((_BYTE *)v72 + 892) = v14;
  *(_WORD *)(v7 + 280) = 0;
  *v8 = 0;
  *(_OWORD *)((char *)v72 + 27732) = 0u;
  *((_DWORD *)v72 + 71) = 0;
  v112 = v72[1864];
  *((_DWORD *)v72 + 72) = *(unsigned __int8 *)(v112 + 269);
  v113 = v72[132];
  if (*(unsigned __int8 *)(v113 + 3) == 255)
    v114 = 2;
  else
    v114 = sub_1C97EF790((_DWORD *)v113, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), *(unsigned __int8 *)(v112 + 2117));
  v115 = v72;
  v116 = (int *)v72 + 71;
  if (*(_BYTE *)(v115[129] + 89))
  {
    v117 = v115[126];
    v115[127] = v117;
    v118 = v115[128];
    if (v117)
      v119 = (_OWORD *)(v117 + 8);
    else
      v119 = 0;
    *(_DWORD *)(v118 + 228) = 0;
    v120 = v119[4];
    v121 = v119[5];
    v122 = v119[3];
    *(_OWORD *)(v118 + 40) = v119[2];
    *(_OWORD *)(v118 + 88) = v121;
    *(_OWORD *)(v118 + 72) = v120;
    *(_OWORD *)(v118 + 56) = v122;
    v123 = v119[8];
    v124 = v119[9];
    v125 = v119[7];
    *(_OWORD *)(v118 + 104) = v119[6];
    *(_OWORD *)(v118 + 152) = v124;
    *(_OWORD *)(v118 + 136) = v123;
    *(_OWORD *)(v118 + 120) = v125;
    v126 = v119[12];
    v127 = v119[13];
    v128 = v119[11];
    *(_OWORD *)(v118 + 168) = v119[10];
    *(_OWORD *)(v118 + 216) = v127;
    *(_OWORD *)(v118 + 200) = v126;
    *(_OWORD *)(v118 + 184) = v128;
    v129 = v119[1];
    *(_OWORD *)(v118 + 8) = *v119;
    *(_OWORD *)(v118 + 24) = v129;
    v115[126] = v115[128];
  }
  v601 = a1;
  v593 = v8;
  v627 = v7;
  if (*((_BYTE *)v115 + 877)
    && ((v130 = *(unsigned __int8 *)(v115[1864] + 2117), *(_DWORD *)(v7 + 12) + v130 > *((_DWORD *)v115 + 220))
     || *(_DWORD *)(v7 + 16) + v130 > *((_DWORD *)v115 + 221))
    || v114 != 2)
  {
    *((_DWORD *)v115 + 71) = 0;
    v131 = v115[129];
    v147 = v115[1863];
    goto LABEL_145;
  }
  v131 = v115[129];
  v132 = *(char *)(v131 + 84);
  if (v132 >= 1)
  {
    v133 = *(_DWORD *)(v7 + 12);
    v134 = *(_DWORD *)(v7 + 16);
    v135 = (_BYTE *)v115[1864];
    v136 = v135[2112];
    v137 = 1 << v136;
    v138 = v135[2117];
    v139 = *((_DWORD *)v115 + 20);
    v140 = v133 + v138;
    if (v139 >= v133 + v138)
      v141 = v133 + v138;
    else
      v141 = *((_DWORD *)v115 + 20);
    v614 = *((_DWORD *)v115 + 21);
    if (v614 >= v134 + v138)
      v142 = v134 + v138;
    else
      v142 = *((_DWORD *)v115 + 21);
    v622 = v135[2117];
    if (v139 >= v133 + 2 * v138)
      v143 = v133 + 2 * v138;
    else
      v143 = *((_DWORD *)v115 + 20);
    v144 = v135[269];
    v145 = v134 >= v137 && v140 + v137 <= v139;
    v146 = v145;
    *((_DWORD *)v115 + 71) = 0;
    *((_DWORD *)v115 + 72) = v144;
    v147 = v115[1863];
    if (*(_BYTE *)(v147 + 58) != 2)
    {
      if (*(_BYTE *)(v131 + 132))
      {
        if (v142 <= v134)
        {
          v149 = 0;
          v148 = 0;
        }
        else
        {
          v148 = 0;
          v149 = 0;
          v150 = v137 + v133;
          if (v141 <= v137 + v133)
            v151 = v137 + v133;
          else
            v151 = v141;
          if (v150 >= v141)
            v152 = v137 + v133;
          else
            v152 = v150 + 1;
          v153 = (v151 - v152) >> v136;
          if (v150 < v141)
            ++v153;
          v154 = (uint32x4_t)vdupq_n_s32(v153);
          v155 = (uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v153 & 0xFFFFFFFC), (int8x16_t)xmmword_1C9862C30);
          v156 = (v153 & 0xFFFFFFFC) + 4;
          v157.i64[0] = 0x100000001;
          v157.i64[1] = 0x100000001;
          v158 = (int8x16_t)vcgtq_u32(v155, v154);
          v159 = v134;
          do
          {
            if (v141 > v133)
            {
              v160 = (int32x4_t)v148;
              v161 = (int32x4_t)v149;
              v162 = vdupq_n_s32(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v629 + 1040) + 5096)
                                                    + *(_QWORD *)(*(_QWORD *)(v629 + 1040) + 8)
                                                    * (v134 >> *(_DWORD *)(*(_QWORD *)(v629 + 1040) + 4))
                                                    + (v133 >> *(_DWORD *)(*(_QWORD *)(v629 + 1040) + 4))));
              v163 = v156;
              do
              {
                v164 = (int8x16_t)v161;
                v165 = (int8x16_t)v160;
                v161 = vaddq_s32(v161, v162);
                v160 = vaddq_s32(v160, v157);
                v163 -= 4;
              }
              while (v163);
              v149 = vaddvq_s32((int32x4_t)vbslq_s8(v158, v164, (int8x16_t)v161));
              v148 = vaddvq_s32((int32x4_t)vbslq_s8(v158, v165, (int8x16_t)v160));
            }
            v159 += v137;
          }
          while (v159 < v142);
        }
        v433 = (v149 + (v148 >> 1)) / v148;
      }
      else
      {
        v433 = *(_DWORD *)(v629 + 88);
      }
      v522 = v133 < v137 && v134 < v137;
      v523 = v522 ? v146 : 1;
      if (v523 == 1)
      {
        if (v133 < v137 || v142 <= v134)
        {
          v524 = 0;
          v529 = v144;
        }
        else
        {
          v524 = 0;
          v525 = *(_QWORD *)(v147 + 8);
          v526 = *(_QWORD *)(v525 + 800);
          v527 = *(_QWORD *)(v525 + 768);
          v528 = v134;
          v529 = v144;
          do
          {
            v530 = *(_WORD *)(v526 + 2 * (((uint64_t)(v133 - v137) >> 3) + v527 * ((uint64_t)v528 >> 3)));
            v531 = (v530 >> 9) - v433;
            if (v531 < 0)
              v531 = v433 - (v530 >> 9);
            if (v531 <= 2)
            {
              v532 = v530 & 3;
              if (v529 >= v532)
                v529 = v532;
              if (v524 <= v532)
                v524 = v532;
            }
            v528 += v137;
          }
          while (v528 < v142);
        }
        v533 = v134 - v137;
        if (v134 >= v137 && v141 > v133)
        {
          v534 = *(_QWORD *)(v147 + 8);
          v535 = *(_QWORD *)(v534 + 800);
          v536 = *(_QWORD *)(v534 + 768) * ((uint64_t)v533 >> 3);
          v537 = v133;
          do
          {
            v538 = *(_WORD *)(v535 + 2 * (v536 + (v537 >> 3)));
            v539 = (v538 >> 9) - v433;
            if (v539 < 0)
              v539 = v433 - (v538 >> 9);
            if (v539 <= 2)
            {
              v540 = v538 & 3;
              if (v529 >= v540)
                v529 = v540;
              if (v524 <= v540)
                v524 = v540;
            }
            v537 += v137;
          }
          while (v537 < v141);
        }
        if (v146 && v140 < v143)
        {
          v541 = *(_QWORD *)(v147 + 8);
          v542 = *(_QWORD *)(v541 + 800);
          v543 = *(_QWORD *)(v541 + 768) * ((uint64_t)v533 >> 3);
          do
          {
            v544 = *(_WORD *)(v542 + 2 * (v543 + (v140 >> 3)));
            v545 = (v544 >> 9) - v433;
            if (v545 < 0)
              v545 = v433 - (v544 >> 9);
            if (v545 <= 2)
            {
              v546 = v544 & 3;
              if (v529 >= v546)
                v529 = v546;
              if (v524 <= v546)
                v524 = v546;
            }
            v140 += v137;
          }
          while (v140 < v143);
        }
        v547 = v133 - v137;
        if (v133 >= v137)
        {
          v431 = __OFSUB__(v134, v137);
          v548 = v134 - v137;
          if (v548 < 0 == v431)
          {
            v549 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 8) + 800)
                            + 2 * (*(_QWORD *)(*(_QWORD *)(v147 + 8) + 768) * ((uint64_t)v548 >> 3) + (v547 >> 3)));
            v550 = (v549 >> 9) - v433;
            if (v550 < 0)
              v550 = v433 - (v549 >> 9);
            if (v550 <= 2)
            {
              v551 = v549 & 3;
              if (v529 >= v551)
                v529 = v551;
              if (v524 <= v551)
                v524 = v551;
              goto LABEL_670;
            }
          }
        }
        if (v529 <= v524)
        {
LABEL_670:
          v552 = (v529 - (v529 == v524)) & ~((v529 - (v529 == v524)) >> 31);
          *(_DWORD *)(v629 + 284) = v552;
          if (v524 + 1 < v144)
            v553 = v524 + 1;
          else
            v553 = v144;
          *(_DWORD *)(v629 + 288) = v553;
LABEL_621:
          if (v132 >= 2 && (v552 || v553 != v144))
          {
            v604 = v553;
            v609 = v139;
            v554 = v135[2113];
            v613 = *(int **)(v629 + 1040);
            v555 = v132;
            v556 = sub_1C97DB3E4(v613, v133, v134, v135[2113]);
            if (v555 == 3)
            {
              LODWORD(v557) = v554 - v552;
              if ((int)v554 - v552 <= *v613)
                LODWORD(v557) = *v613;
              if ((int)v557 < (int)v554)
              {
                v557 = (int)v557;
                do
                {
                  ++v557;
                  if (v556 < 0x3A99 || (_DWORD)v557 != (_DWORD)v554)
                  {
                    v558 = 1 << v557;
                    v559 = v614 - (1 << v557) >= (v134 - (1 << v557) + v622)
                         ? v134 - (1 << v557) + v622
                         : v614 - (1 << v557);
                    if (v134 <= v559)
                    {
                      v560 = 0;
                      v561 = 0;
                      v562 = 0;
                      if (v609 - v558 >= (v622 - v558 + v133))
                        v563 = v622 - v558 + v133;
                      else
                        v563 = v609 - v558;
                      v564 = (v554 - v557);
                      v565 = v134;
                      while (v133 > v563)
                      {
LABEL_646:
                        v565 += v558;
                        if (v565 > v559)
                        {
                          if (v562
                            && v562 == v560
                            && (v561 + (v562 >> 1)) / v562 < (1431655766
                                                            * (unint64_t)(2 * word_1C9855BEC[v564])) >> 32)
                          {
                            *v116 = v554 - v557;
                          }
                          goto LABEL_636;
                        }
                      }
                      v566 = v133;
                      while (1)
                      {
                        v567 = *(_DWORD *)(*(_QWORD *)&v613[6 * (v554 - v557) + 1280]
                                         + 4
                                         * ((v566 >> v557) + (v565 >> v557) * ((v558 + v609 - 1) >> v557)));
                        if (v567 >= word_1C9855BEC[v564])
                          break;
                        ++v560;
                        v561 += v567;
                        ++v562;
                        v566 += v558;
                        if (v566 > v563)
                          goto LABEL_646;
                      }
                    }
                  }
LABEL_636:
                  ;
                }
                while ((_DWORD)v557 != (_DWORD)v554);
              }
            }
            if (v556 < 0x2EE1)
            {
              v7 = v627;
              v115 = (_QWORD *)v629;
            }
            else
            {
              v568 = *v613;
              if ((int)v554 - v604 > (int)v568)
              {
                v569 = -v604 + (unint64_t)v554;
                do
                {
                  if (v134 < v142)
                  {
                    v570 = 0;
                    v571 = 0;
                    v572 = 0;
                    v573 = 1 << v569;
                    v574 = (v554 - v569);
                    v575 = v134;
                    do
                    {
                      if (v133 < v141)
                      {
                        v576 = v133;
                        do
                        {
                          v577 = *(_DWORD *)(*(_QWORD *)&v613[6 * (v554 - v569) + 1280]
                                           + 4
                                           * ((v576 >> v569)
                                            + (v575 >> v569) * (((1 << v569) + v609 - 1) >> v569)));
                          ++v570;
                          if (v577 <= word_1C9855BEC[v574])
                            v577 = 0;
                          else
                            ++v572;
                          v571 += v577;
                          v576 += v573;
                        }
                        while (v576 < v141);
                      }
                      v575 += v573;
                    }
                    while (v575 < v142);
                    if (v570 && v572 > v570 >> 2
                      || v572 && (v571 + (v572 >> 1)) / v572 > 2 * word_1C9855BEC[v574])
                    {
                      *(_DWORD *)(v629 + 288) = v554 - v569 + 1;
                    }
                  }
                  --v569;
                }
                while (v569 > v568);
              }
              v7 = v627;
              v115 = (_QWORD *)v629;
            }
          }
          else
          {
            v115 = (_QWORD *)v629;
          }
          goto LABEL_145;
        }
      }
    }
    v552 = 0;
    v553 = v144;
    goto LABEL_621;
  }
  v147 = v115[1863];
  if (*(_BYTE *)(v147 + 5433))
  {
    if (*((int *)v115 + 22) > 29)
    {
LABEL_265:
      v115 = (_QWORD *)v629;
      *(_DWORD *)(v629 + 264) = 0;
    }
    else
    {
      v257 = 0;
      v258 = *(_QWORD *)(v629 + 1040);
      v259 = *(_DWORD *)(v258 + 4);
      v260 = *(_DWORD *)(v7 + 12);
      v261 = *(_DWORD *)(v7 + 16);
      v262 = v260 >> v259;
      v263 = v261 >> v259;
      v264 = *(unsigned __int8 *)(*(_QWORD *)(v629 + 14912) + 2117);
      v265 = v260 + v264;
      if (*(_DWORD *)(v629 + 80) < v265)
        v265 = *(_DWORD *)(v629 + 80);
      v266 = v265 >> v259;
      v267 = v261 + v264;
      if (*(_DWORD *)(v629 + 84) < v267)
        v267 = *(_DWORD *)(v629 + 84);
      v268 = v267 >> v259;
      v269 = v263;
      v270 = *(_QWORD *)(v258 + 8);
      v271 = 1;
      while (1)
      {
        v272 = v271;
        v273 = v257 + v269;
        if (v257 + v269 < v268)
          break;
LABEL_264:
        v271 = 0;
        v257 = 1;
        if ((v272 & 1) == 0)
          goto LABEL_265;
      }
      v274 = *(_QWORD *)(v258 + 24 * v257 + 5192) + 2 * v270 * (v273 << v259 >> v259);
      while (1)
      {
        v275 = v262 + (v272 & 1);
        if (v262 + (v272 & 1) < v266)
          break;
LABEL_263:
        ++v273;
        v274 += 2 * v270;
        if (v273 >= v268)
          goto LABEL_264;
      }
      while (1)
      {
        v276 = *(__int16 *)(v274 + 2 * v275);
        if (v276 < 0)
          v276 = -v276;
        if ((unsigned __int16)v276 > 5u)
          break;
        if (v266 == ++v275)
          goto LABEL_263;
      }
      v115 = (_QWORD *)v629;
      *(_DWORD *)(v629 + 264) = 2;
    }
  }
LABEL_145:
  v166 = *(unsigned __int8 *)(v131 + 178);
  v167 = (v166 - *(_DWORD *)(v131 + 504)) & ~((v166 - *(_DWORD *)(v131 + 504)) >> 31);
  v168 = (int *)v115 + 73;
  v169 = *((_DWORD *)v115 + 72);
  if (v169 < v167)
    v167 = *((_DWORD *)v115 + 72);
  *((_DWORD *)v115 + 73) = v167;
  v170 = (v166 - *(char *)(v131 + 508)) & ~((v166 - *(char *)(v131 + 508)) >> 31);
  if (v169 < v170)
    v170 = v169;
  *((_DWORD *)v115 + 74) = v170;
  if (*(_BYTE *)(v147 + 58) == 2)
  {
    if (*v116 >= v167)
      v168 = v116;
    v171 = *v168;
    goto LABEL_153;
  }
  if (v170 < v167)
    v168 = (int *)(v115 + 37);
  v179 = *v168;
  if (*v116 > v179)
    v179 = *v116;
  *v116 = v179;
  if (*(_BYTE *)(v131 + 550) && v179 == 1)
  {
    v180 = *(_DWORD *)(v7 + 12);
    v181 = *(_DWORD *)(v7 + 16);
    v182 = *(_BYTE **)(v629 + 14912);
    v183 = v182[2112];
    v184 = *(int **)(v629 + 1040);
    v185 = *(_DWORD *)(v629 + 80);
    v186 = *v184;
    LODWORD(v187) = 1 << (v182[2113] - *v184);
    v188 = (*(_DWORD *)(v629 + 84) - v181) >> *v184 >= (int)v187
         ? 1 << (v182[2113] - *v184)
         : (*(_DWORD *)(v629 + 84) - v181) >> *v184;
    if (v188 < 1)
    {
      LODWORD(v190) = 0;
    }
    else
    {
      v189 = 0;
      v190 = 0;
      v191 = v185 >> v186;
      v192 = 2 * v186;
      v193 = (v185 - v180) >> v186;
      v187 = v193 >= (int)v187 ? v187 : v193;
      v194 = (v180 >> v186) + (int)v191 * (uint64_t)(v181 >> v186);
      v195 = *((_QWORD *)v184 + 625) + 8 * v194;
      v196 = *((_QWORD *)v184 + 622) + 4 * v194;
      v197 = 1 << (v192 - 1);
      v198 = 4 * v191;
      v199 = 8 * v191;
      do
      {
        if ((int)v187 >= 1)
        {
          for (i = 0; i != v187; ++i)
          {
            v201 = (*(_DWORD *)(v196 + 4 * i) * *(_DWORD *)(v196 + 4 * i)) >> v192;
            if ((unint64_t)(*(_QWORD *)(v195 + 8 * i) + v197 - v201) >> v192 > v190)
              v190 = (unint64_t)(*(_QWORD *)(v195 + 8 * i) + v197 - v201) >> v192;
          }
        }
        ++v189;
        v196 += v198;
        v195 += v199;
      }
      while (v189 != v188);
    }
    if (*(_DWORD *)(v7 + 5236) > v190)
    {
      v423 = 1 << v183;
      v424 = v180 >= 1 << v183;
      v425 = v181 >= v423;
      v426 = v180 + v182[2117];
      v427 = v181 >= v423 && v424;
      if (v181 < v423)
        v428 = v424;
      else
        v428 = v424 + 1;
      if (v426 + v423 > v185)
        v425 = 0;
      v429 = v180 - v423;
      v430 = v180 >= v423
          && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 8) + 800)
                       + 2 * (*(_QWORD *)(*(_QWORD *)(v147 + 8) + 768) * ((uint64_t)v181 >> 3) + (v429 >> 3))) & 3) == 0;
      v431 = __OFSUB__(v181, v423);
      v432 = v181 - v423;
      if (v432 < 0 == v431
        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 8) + 800)
                     + 2 * (*(_QWORD *)(*(_QWORD *)(v147 + 8) + 768) * ((uint64_t)v432 >> 3) + (v180 >> 3))) & 3) == 0)
      {
        ++v430;
      }
      if (v425
        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 8) + 800)
                     + 2 * (*(_QWORD *)(*(_QWORD *)(v147 + 8) + 768) * ((uint64_t)v432 >> 3) + (v426 >> 3))) & 3) == 0)
      {
        ++v430;
      }
      if (v427
        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 8) + 800)
                     + 2 * (*(_QWORD *)(*(_QWORD *)(v147 + 8) + 768) * ((uint64_t)v432 >> 3) + (v429 >> 3))) & 3) == 0)
      {
        ++v430;
      }
      if (v428 + v427 + v425 == v430)
      {
        v171 = 0;
LABEL_153:
        *v116 = v171;
      }
    }
  }
  v172 = v629;
  v602 = (int *)(v629 + 64);
  *(_BYTE *)(v7 + 3172) = 0;
  v634 = 0;
  if (*(_BYTE *)(v629 + 1656))
  {
    v173 = *(_DWORD *)(v7 + 16);
    v174 = *(_DWORD *)(v627 + 12);
    *(_DWORD *)(v629 + 1680) = v174;
    *(_DWORD *)(v629 + 1684) = v173;
    sub_1C9797D64(v629 + 1656);
    v175 = v174;
    v7 = v627;
    v172 = v629;
    sub_1C9797EB8(v629 + 1656, v175, v173, *(_DWORD *)(v629 + 1660));
    v147 = *(_QWORD *)(v629 + 14904);
  }
  bzero((void *)(v172 + 27760), 0x800uLL);
  if (*(_BYTE *)(v147 + 5432))
  {
    LODWORD(v176) = *(_DWORD *)(v7 + 12);
    LODWORD(v177) = *(_DWORD *)(v7 + 16);
    v178 = v629;
LABEL_180:
    v202 = 1 << *(_BYTE *)(*(_QWORD *)(v178 + 14912) + 2113);
    v203 = *(unsigned __int8 *)(*(_QWORD *)(v178 + 24744) + 1);
    sub_1C97C23C8((uint64_t)v602, *(unsigned __int8 **)(v178 + 24616), v176, v177, 0, *(_DWORD *)(v178 + 88));
    v176 = *(unsigned int *)(v7 + 12);
    v177 = *(unsigned int *)(v7 + 16);
    v204 = v177 + v202;
    v205 = *(_DWORD *)(v178 + 84);
    if ((int)v177 + v202 >= v205)
      v204 = *(_DWORD *)(v178 + 84);
    if ((int)v177 < v204)
    {
      v206 = (int)v177;
      v207 = *(_DWORD *)(v178 + 80);
      v208 = v178 + 27760;
      do
      {
        v209 = v176 + v202;
        if ((int)v176 + v202 >= v207)
          v209 = v207;
        if ((int)v176 < v209)
        {
          v210 = (int)v176;
          v211 = v208;
          do
          {
            v212 = *(_QWORD *)(v178 + 24616);
            v213 = **(_QWORD **)(v212 + 24)
                 + (v210
                  + *(_QWORD *)(v212 + 32)
                  + (v206 - *(int *)(v212 + 8)) * *(unsigned __int8 *)(v212 + 1)
                  - *(int *)(v212 + 4))
                 * *(int *)(*(_QWORD *)(v212 + 24) + 16);
            v214 = *(_QWORD *)(v178 + 14904);
            if (*(_BYTE *)(v214 + 5432))
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 1064))(v213, v203, v211);
              v214 = *(_QWORD *)(v178 + 14904);
            }
            if (*(_BYTE *)(v214 + 5433))
            {
              *(_QWORD *)(v211 + 8) = *(int *)(*(_QWORD *)(*(_QWORD *)(v214 + 5320) + 616) + 672);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v629 + 1072))(v213, v203, v211 + 8);
              *(_DWORD *)(v211 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v629 + 1040) + 104))(v213, v203);
              v178 = v629;
            }
            v210 += 8;
            v7 = v627;
            v176 = *(unsigned int *)(v627 + 12);
            v215 = v176 + v202;
            v207 = *(_DWORD *)(v178 + 80);
            if ((int)v176 + v202 >= v207)
              v215 = *(_DWORD *)(v178 + 80);
            v211 += 256;
          }
          while ((int)v210 < v215);
          v177 = *(unsigned int *)(v627 + 16);
          v205 = *(_DWORD *)(v178 + 84);
        }
        v206 += 8;
        v216 = v177 + v202;
        if ((int)v177 + v202 >= v205)
          v216 = v205;
        v208 += 32;
      }
      while ((int)v206 < v216);
    }
    goto LABEL_199;
  }
  v176 = *(unsigned int *)(v7 + 12);
  v177 = *(unsigned int *)(v7 + 16);
  v178 = v629;
  if (*(_BYTE *)(v147 + 5433))
    goto LABEL_180;
LABEL_199:
  sub_1C97C367C((uint64_t)v602, v176, v177, 0, v630, (unsigned __int8 **)(v629 + 24616), *(_DWORD *)(v7 + 20), &v633, &v634, *(_DWORD *)(v178 + 88));
  if (*(_BYTE *)(v7 + 3172))
  {
    v634 = 0;
    v633 = v618;
    sub_1C97C2DE0(v602, 0);
    sub_1C97C6808((uint64_t)v602, *(unsigned int *)(v7 + 12), *(unsigned int *)(v7 + 16), 0, *(_DWORD *)(v7 + 20), &v633, &v634);
  }
  else
  {
    if (*(_BYTE *)(v178 + 72))
    {
      v634 = 0;
      v633 = v618;
      sub_1C97C6D7C((uint64_t)v602, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), *(unsigned __int8 **)(v178 + 24616), 1, 0, 0, 0, 0);
      if (*(_BYTE *)(*(_QWORD *)(v178 + 14912) + 201))
        sub_1C97C6F70((uint64_t)v602, *(unsigned int *)(v7 + 12), *(unsigned int *)(v7 + 16), 0, *(_DWORD *)(v7 + 20), *(unsigned int *)(v178 + 88), &v633, &v634);
    }
    sub_1C97C2DE0(v602, 1);
  }
  sub_1C97C6D7C((uint64_t)v602, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), *(unsigned __int8 **)(v178 + 24616), 0, 0, 0, 0, 0);
  v219 = *(unsigned __int8 *)(*(_QWORD *)(v178 + 24616) + 1);
  v220 = *(unsigned int *)(v7 + 12);
  v221 = *(unsigned int *)(v7 + 16);
  v222 = v221 + v219;
  if (*(_DWORD *)(v178 + 84) < (int)v221 + v219)
    v222 = *(_DWORD *)(v178 + 84);
  v223 = v222 - v221 + 7;
  if (v223 >= 8)
  {
    v224 = 0;
    v225 = v223 >> 3;
    v226 = v220 + v219;
    if (*(_DWORD *)(v178 + 80) < v226)
      v226 = *(_DWORD *)(v178 + 80);
    v227 = v226 - v220 + 7;
    v228 = v227 >> 3;
    if (v227 >> 3 <= 1)
      v228 = 1;
    do
    {
      if (v227 >= 8)
      {
        v229 = *(_QWORD *)(v178 + 952);
        v230 = *(_QWORD *)(v178 + 928) * ((uint64_t)((int)v221 + 8 * v224 - *(_DWORD *)(v178 + 900)) >> 2);
        v231 = -*(_DWORD *)(v178 + 896);
        v232 = v220;
        v233 = v228;
        do
        {
          if (*(_BYTE *)(v229 + 16 * (v230 + ((v231 + v232) >> 2)) + 10) == 1)
            *(_DWORD *)(v178 + 304) += 64;
          v232 += 8;
          --v233;
        }
        while (v233);
      }
      ++v224;
    }
    while (v224 != v225);
  }
  v234 = *(_QWORD *)(v178 + 14904);
  if (!*(_BYTE *)(v234 + 564))
  {
    v235.n128_u64[0] = (unint64_t)sub_1C97C76F0((uint64_t)v602, v220, v221, 0, (int8x8_t)v217.n128_u64[0]);
    v236 = *(_QWORD *)(v178 + 14904);
    v237 = *(_QWORD *)(v236 + 3440);
    v238 = *(void (**)(_QWORD *, __n128))(v236 + 3432);
    v239 = (_QWORD *)(v236 + (v237 >> 1) + 3400);
    if ((v237 & 1) != 0)
      v238 = *(void (**)(_QWORD *, __n128))(*v239 + v238);
    v238(v239, v235);
    v234 = *(_QWORD *)(v178 + 14904);
  }
  if (!*(_BYTE *)(v234 + 512) && !*(_BYTE *)(v234 + 513))
    goto LABEL_488;
  v217.n128_u64[0] = 0xFFFFFFFFLL;
  *(_QWORD *)(v178 + 224) = 0xFFFFFFFFLL;
  if (*(_BYTE *)(*(_QWORD *)(v178 + 1032) + 132))
  {
    v240 = *(_QWORD *)(v178 + 14912);
    v241 = *(unsigned __int8 *)(v240 + 2117);
    v242 = *(_DWORD *)(v7 + 12);
    v243 = *(_DWORD *)(v7 + 16);
    v244 = *(_DWORD *)(v178 + 880) - v242;
    if (v244 >= v241)
      v245 = *(unsigned __int8 *)(v240 + 2117);
    else
      v245 = *(_DWORD *)(v178 + 880) - v242;
    if (v244 <= 0)
      v246 = 0;
    else
      v246 = v245;
    v247 = *(_DWORD *)(v178 + 884) - v243;
    if (v247 < v241)
      v241 = *(_DWORD *)(v178 + 884) - v243;
    if (v247 <= 0)
      v248 = 0;
    else
      v248 = v241;
    if (v246)
      v249 = v248 == 0;
    else
      v249 = 1;
    if (v249)
    {
      v250 = *(_DWORD *)(v178 + 88);
    }
    else
    {
      if (v248 < 1)
      {
        v252 = 0;
        v251 = 0;
      }
      else
      {
        v251 = 0;
        v252 = 0;
        v254 = 1 << *(_DWORD *)(*(_QWORD *)(v178 + 14920) + 1636);
        v255 = v248 + v243;
        do
        {
          if (v246 >= 1)
          {
            v256 = *(_DWORD *)(v7 + 12);
            do
            {
              v253 = *(unsigned __int8 **)(v178 + 24616);
              v251 += *(__int16 *)(*((_QWORD *)v253 + 11)
                                 + 2
                                 * (((unint64_t)*v253 >> 3) * ((v243 - *((_DWORD *)v253 + 2)) >> 3)
                                  + ((v256 - *((_DWORD *)v253 + 1)) >> 3))) >> 9;
              v256 += v254;
              ++v252;
            }
            while (v256 < v246 + v242);
          }
          v243 += v254;
        }
        while (v243 < v255);
      }
      if (v252 >= 0)
        v277 = v252;
      else
        v277 = v252 + 1;
      v250 = (v251 + (v277 >> 1)) / v252;
    }
    *(_DWORD *)(v178 + 232) = v250;
    sub_1C97F16C4(v234 + 4032, v250, *(unsigned __int8 *)(v240 + 2097), (_DWORD *)(v178 + 236), (_DWORD *)(v178 + 240), (_DWORD *)(v178 + 248));
    v234 = *(_QWORD *)(v178 + 14904);
  }
  v278 = *(_QWORD *)(v178 + 1008);
  v280 = *(_DWORD *)(v7 + 4);
  v279 = *(_DWORD *)(v7 + 8);
  v281 = *(unsigned __int8 **)(v178 + 24616);
  v282 = v280 + *(_DWORD *)(v234 + 3552) * v279;
  v592 = *(_QWORD *)(v234 + 4712);
  v283 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v234 + 4024) + 1000) + 16 * v282);
  *v283 = 0;
  v283[1] = 0;
  v585 = v283;
  v284 = *(_QWORD *)(v234 + 4024);
  if (*(_BYTE *)(v284 + 432))
  {
    v285 = *(_DWORD *)(v234 + 3548) - 1;
    v286 = *(_DWORD *)(v234 + 3544);
    v287 = (v285 + *(_DWORD *)(v284 + 504)) >> v286;
    v288 = (v285 + *(_DWORD *)(v284 + 508)) >> v286;
    if (v287 <= v280 || v288 <= v279)
    {
      v290 = v287 < v280;
      v291 = v288 >= v279;
      v145 = v288 > v279;
      v292 = (_BYTE *)(*(_QWORD *)(v234 + 4712) + 2 * (int)(v280 + *(_DWORD *)(v234 + 3552) * v279));
      if (!v145)
        v290 = 1;
      *v292 = v290;
      v293 = !v291 || v287 <= v280;
      v292[1] = v293;
      v294 = v292 + 1;
      if (!v280)
      {
        v290 = 0;
        *v292 = 0;
      }
      if (!v279 || v290)
LABEL_330:
        *v294 = 0;
      goto LABEL_488;
    }
  }
  v598 = v280;
  v599 = v279;
  v295 = (unsigned __int8 *)(v234 + 4204);
  v583 = v282;
  v584 = (_BYTE *)(v592 + 2 * v282);
  if (*(_BYTE *)(v234 + 4704))
  {
    v296 = *(_DWORD *)(v234 + 3548);
    v297 = v296 * v280;
    v298 = v296 * v279;
    v299 = *(_QWORD *)(v234 + 4736);
    v300 = 504;
    if (!*(_BYTE *)(v299 + 432))
      v300 = 520;
    v301 = *(_DWORD *)(v299 + v300);
    v302 = 508;
    if (!*(_BYTE *)(v299 + 432))
      v302 = 524;
    if (v296 + v297 < v301)
      v301 = v296 + v297;
    v303 = *(_DWORD *)(v299 + v302);
    v304 = v296 + v298;
    v305 = v304 >= v303 ? v303 : v304;
    if (v305 <= v298)
    {
      v307 = 0;
      v306 = 0;
    }
    else
    {
      v306 = 0;
      v307 = 0;
      v308 = 1 << *(_DWORD *)(v234 + 3560);
      do
      {
        if (v301 > v297)
        {
          v309 = v297;
          do
          {
            v307 += (*(unsigned __int16 *)(*((_QWORD *)v281 + 11)
                                         + 2
                                         * (((unint64_t)*v281 >> 3) * ((v298 - *((_DWORD *)v281 + 2)) >> 3)
                                          + ((v309 - *((_DWORD *)v281 + 1)) >> 3))) >> 7) & 1;
            v309 += v308;
            ++v306;
          }
          while (v309 < v301);
        }
        v298 += v308;
      }
      while (v298 < v305);
    }
    if (v307 >= (96 * v306) >> 7)
    {
      *v585 = -86;
      *v584 = 0;
      v294 = (_BYTE *)(v592 + 2 * v583 + 1);
      goto LABEL_330;
    }
  }
  v582 = v278;
  v310 = v234 + 3536;
  v631 = v234;
  v603 = (unsigned __int8 *)(v234 + 4204);
  if (*(_BYTE *)(v234 + 4696))
  {
    v311 = v635;
    v610 = v234 + 3536;
    sub_1C980CDC0(v234 + 3536, v598, v599, 0, (uint64_t)v635);
    v312 = 0;
    v640 = 0;
    v615 = v598 + *(_DWORD *)(v234 + 3552) * v599;
    v313 = *(_QWORD *)(*(_QWORD *)(v234 + 4024) + 1000);
    LOWORD(v643) = 0;
    BYTE2(v643) = 0;
    v314 = *(_BYTE *)(v234 + 4752);
    HIBYTE(v643) = -v314;
    LOBYTE(v644) = -v314;
    LOBYTE(v637) = v314;
    BYTE1(v637) = v314;
    v605 = v313;
    v619 = (_DWORD *)(v313 + 16 * v615 + 1);
    v315 = v636;
    v316 = 0x7FFFFFFF;
    HIWORD(v637) = 0;
    v638 = 0;
    v623 = 5;
    do
    {
      v317 = 0;
      v318 = 0;
      v319 = 0;
      do
      {
        if (v317 != 2)
        {
          v320 = *(_DWORD *)&v311[4 * v317];
          v321 = (unsigned __int16)v315[v317];
          if (v315[v317])
          {
            if (v320 >= 0)
              v322 = (unsigned __int16)v315[v317];
            else
              v322 = -v321;
            v323 = (v322 + 2 * v320) / (2 * v321);
            v324 = *((char *)&v637 + v317);
            if (v323 < v324)
              v324 = (v322 + 2 * v320) / (2 * v321);
            if (v323 <= *((char *)&v643 + v317))
              v325 = *((char *)&v643 + v317);
            else
              v325 = v324;
          }
          else
          {
            v325 = 0;
          }
          v639 = v325;
          LODWORD(v641) = 0;
          v318 += sub_1C980D0EC(v321, v320, &v639, (int *)&v641, v312, *(_DWORD *)(v629 + 236), *(unsigned __int8 *)(v234 + 3566));
          v319 += v641;
          *((_BYTE *)v645 + byte_1C9860D84[v317] - 1) = v639;
        }
        ++v317;
      }
      while (v317 != 5);
      v640 = __PAIR64__(v319, v318);
      v326 = *(_DWORD *)(v629 + 236);
      if (*(_DWORD *)(v234 + 4700) == 1)
      {
        sub_1C980D1C8(v610, (uint64_t)v635, v312, (char *)v645, 0, (int *)&v640 + 1, (int *)&v640, *(_DWORD *)(v629 + 236));
        v318 = v640;
        v319 = HIDWORD(v640);
      }
      LODWORD(v640) = v318 + 4;
      v327 = v319 + v326 * (v318 + 4);
      v178 = v629;
      if (v327 < v316)
      {
        *(_DWORD *)(v629 + 224) = v319;
        *(_DWORD *)(v629 + 228) = v318 + 4;
        *v619 = v645[0];
        v316 = v327;
        v623 = v312;
      }
      ++v312;
      v315 += 15;
      v311 += 60;
    }
    while (v312 != 4);
    v295 = (unsigned __int8 *)(v234 + 4204);
    v328 = (_BYTE *)(v605 + 16 * v615);
    v329 = *(_DWORD *)(v629 + 236);
    if (*(_BYTE *)(v234 + 4704))
    {
      v330 = v316;
      v310 = v234 + 3536;
      LOBYTE(v331) = v623;
    }
    else
    {
      v332 = v234;
      v333 = 0;
      v334 = *(unsigned __int8 *)(v332 + 3566);
      do
      {
        v335 = *(_DWORD *)&v636[2 * v333 + 60];
        v336 = (unsigned __int16)v636[v333 + 252];
        if (v636[v333 + 252])
        {
          if (v335 >= 0)
            v337 = (unsigned __int16)v636[v333 + 252];
          else
            v337 = -v336;
          v338 = (v337 + 2 * v335) / (2 * v336);
          if (v338 >= v334)
            v339 = v334;
          else
            v339 = (v337 + 2 * v335) / (2 * v336);
          if (v338 <= -v334)
            v340 = -v334;
          else
            v340 = v339;
        }
        else
        {
          v340 = 0;
          HIDWORD(v640) = 0;
        }
        v639 = v340;
        v341 = sub_1C980D0EC(v336, v335, &v639, (int *)&v640 + 1, 4, v329, v334);
        *((_BYTE *)v645 + v333) = v639;
        *((_DWORD *)&v642[-1] + v333++) = HIDWORD(v640) + v341 * v329;
      }
      while (v333 != 32);
      v342 = 0;
      v343 = 0;
      v344 = (_DWORD)v641 - v329 + 8 * v329 + HIDWORD(v641) + LODWORD(v642[0]);
      v330 = v316;
      v331 = v623;
      do
      {
        v345 = (_DWORD *)&v642[-1] + v342;
        v346 = v345[3] + v344;
        if (v346 < v330)
        {
          v330 = v346;
          v331 = 4;
          v343 = v342;
        }
        v344 = v346 - *v345;
        ++v342;
      }
      while (v342 != 29);
      v178 = v629;
      v234 = v631;
      v310 = v610;
      if (v331 == 4)
      {
        *(_BYTE *)(v605 + 16 * v615 + 13) = v343;
        *v619 = *(_DWORD *)((char *)v645 + v343);
        v329 = *(_DWORD *)(v629 + 236);
      }
    }
    if (v330 >= v329)
    {
      *v328 = *v328 & 0xF0 | 0xA;
      v330 = *(_DWORD *)(v178 + 236);
    }
    else
    {
      *v328 = *v328 & 0xF0 | (2 * (v331 & 7)) | 1;
    }
    v7 = v627;
  }
  else
  {
    v330 = 0;
  }
  if (v295[493])
  {
    v581 = v330;
    sub_1C980CDC0(v310, v598, v599, 1u, (uint64_t)v635);
    v637 = 0;
    v347 = v598 + *(_DWORD *)(v234 + 3552) * v599;
    v348 = *(_QWORD *)(*(_QWORD *)(v234 + 4024) + 1000);
    v579 = v347;
    v580 = v348;
    if (v295[500])
    {
      v596 = 5;
      v606 = 0x7FFFFFFF;
    }
    else
    {
      v578 = v598 + *(_DWORD *)(v234 + 3552) * v599;
      v611 = v310;
      v349 = 0;
      LOWORD(v641) = 0;
      BYTE2(v641) = 0;
      v350 = *(_BYTE *)(v234 + 4752);
      BYTE3(v641) = -v350;
      BYTE4(v641) = -v350;
      v351 = v348 + 16 * v347;
      v588 = (_DWORD *)(v351 + 9);
      v590 = (_DWORD *)(v351 + 5);
      LOBYTE(v643) = v350;
      BYTE1(v643) = v350;
      v352 = 0x7FFFFFFF;
      v596 = 5;
      HIWORD(v643) = 0;
      LOBYTE(v644) = 0;
      v616 = v635;
      v620 = v636;
      do
      {
        v607 = v352;
        v353 = 0;
        v637 = 0;
        HIDWORD(v640) = 0;
        v354 = 1;
        do
        {
          v355 = 0;
          v624 = v353;
          v356 = HIDWORD(v640);
          v357 = v637;
          v358 = v354 - 1;
          v359 = (int *)(v629 + 4 * (v354 - 1) + 240);
          v360 = &v620[5 * v354];
          do
          {
            if (v355 != 2)
            {
              v361 = *(_DWORD *)&v616[20 * v354 + 4 * v355];
              v362 = (unsigned __int16)v360[v355];
              if (v360[v355])
              {
                if (v361 >= 0)
                  v363 = (unsigned __int16)v360[v355];
                else
                  v363 = -v362;
                v364 = (v363 + 2 * v361) / (2 * v362);
                v365 = *((char *)&v643 + v355);
                if (v364 < v365)
                  v365 = (v363 + 2 * v361) / (2 * v362);
                if (v364 <= *((char *)&v642[-1] + v355))
                  v366 = *((char *)&v642[-1] + v355);
                else
                  v366 = v365;
              }
              else
              {
                v366 = 0;
              }
              LODWORD(v640) = v366;
              v639 = 0;
              v356 += sub_1C980D0EC(v362, v361, (int *)&v640, &v639, v349, *v359, *(unsigned __int8 *)(v631 + 3567));
              v357 += v639;
              *((_BYTE *)&v645[8 * v358 - 1] + byte_1C9860D84[v355] + 3) = v640;
            }
            ++v355;
          }
          while (v355 != 5);
          HIDWORD(v640) = v356;
          v637 = v357;
          v234 = v631;
          if (*(_DWORD *)(v631 + 4700) == 1)
            sub_1C980D1C8(v611, (uint64_t)v635, v349, (char *)&v645[8 * v358], v354, &v637, (int *)&v640 + 1, *v359);
          v353 = 1;
          v354 = 2;
        }
        while ((v624 & 1) == 0);
        HIDWORD(v640) += 4;
        v178 = v629;
        v367 = v637 + *(_DWORD *)(v629 + 240) * HIDWORD(v640);
        v352 = v607;
        if (v367 < v607)
        {
          v368 = v645[8];
          *v590 = v645[0];
          *v588 = v368;
          v352 = v367;
          v596 = v349;
        }
        ++v349;
        v616 += 60;
        v620 += 15;
      }
      while (v349 != 4);
      v606 = v352;
      v348 = v580;
      v347 = v578;
    }
    v369 = 0;
    v591 = (char *)(v348 + 16 * v347);
    v589 = *(_DWORD *)(v178 + 240);
    v370 = 12 * v589;
    v371 = *(unsigned __int8 *)(v234 + 3567);
    v372 = 1;
    do
    {
      v373 = 0;
      v625 = v369;
      v374 = v372 - 1;
      v375 = *(_DWORD *)(v178 + 4 * (v372 - 1) + 240);
      v376 = &v642[4 * v372 + 12];
      v377 = &v636[32 * v372 + 252];
      v378 = &v636[64 * v372 + 60];
      do
      {
        v379 = *(_DWORD *)&v378[2 * v373];
        v380 = (unsigned __int16)v377[v373];
        if (v377[v373])
        {
          if (v379 >= 0)
            v381 = (unsigned __int16)v377[v373];
          else
            v381 = -v380;
          v382 = (v381 + 2 * v379) / (2 * v380);
          v383 = *(unsigned __int8 *)(v631 + 3566);
          if (v382 >= v383)
            v384 = *(unsigned __int8 *)(v631 + 3566);
          else
            v384 = v382;
          if (v382 <= -v383)
            v385 = -v383;
          else
            v385 = v384;
        }
        else
        {
          v385 = 0;
          v637 = 0;
        }
        LODWORD(v640) = v385;
        v386 = sub_1C980D0EC(v380, v379, (int *)&v640, &v637, 4, v375, v371);
        *((_BYTE *)v376 + v373) = v640;
        *((_DWORD *)&v642[-1] + v373++) = v637 + v386 * v375;
      }
      while (v373 != 32);
      v387 = 0;
      v388 = HIDWORD(v641) + (_DWORD)v641 + LODWORD(v642[0]);
      v389 = 0x7FFFFFFF;
      v178 = v629;
      v234 = v631;
      do
      {
        v390 = *((_DWORD *)v642 + v387 + 1) + v388;
        if (v390 < v389)
        {
          *(&v643 + v374) = v387;
          v389 = v390;
        }
        v388 = v390 - *((_DWORD *)&v642[-1] + v387++);
      }
      while (v387 != 29);
      v370 += v389;
      v369 = 1;
      v372 = 2;
    }
    while ((v625 & 1) == 0);
    v391 = v606;
    v392 = v589;
    if (v370 < v606)
    {
      v393 = v580 + 16 * v579;
      v394 = v643;
      v395 = v644;
      *(_BYTE *)(v393 + 14) = v643;
      *(_DWORD *)(v393 + 5) = *(_DWORD *)((char *)v645 + v394);
      *(_BYTE *)(v393 + 15) = v395;
      *(_DWORD *)(v393 + 9) = *(_DWORD *)((char *)&v645[8] + v395);
      v392 = *(_DWORD *)(v629 + 240);
      v596 = 4;
      v391 = v370;
    }
    v396 = *v591;
    v7 = v627;
    v295 = v603;
    if (v391 >= v392)
    {
      *v591 = v396 & 0xF | 0xA0;
      v391 = *(_DWORD *)(v629 + 240);
    }
    else
    {
      *v591 = v396 & 0xF | (32 * v596) | 0x10;
    }
    v330 = v581 + ((*(_DWORD *)(v629 + 248) * v391) >> 8);
  }
  v397 = v598 + *(_DWORD *)(v234 + 3552) * v599;
  v398 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(v234 + 4024) + 1000) + 16 * v397);
  v621 = *(_QWORD *)(v234 + 4712);
  v641 = 0;
  v642[0] = 0;
  LOWORD(v643) = 0;
  v617 = (_WORD *)(v621 + 2 * v397);
  *v617 = 0;
  if (v598 < 1)
  {
    v608 = 0;
  }
  else
  {
    LOBYTE(v643) = 1;
    v608 = v398 - 1;
    v641 = v398 - 1;
  }
  if (v599 < 1)
  {
    v597 = 0;
  }
  else
  {
    BYTE1(v643) = 1;
    v597 = &v398[-*(int *)(v234 + 3552)];
    v642[0] = v597;
  }
  v399 = 0;
  v400 = 0;
  v401 = *(unsigned __int8 *)(v582 + 48);
  v612 = v397;
  v402 = dword_1C9860D8C[v401] + dword_1C9860D8C[v401 ^ 1];
  v645[0] = dword_1C9860D8C[v401 ^ 1];
  v645[1] = v402;
  v403 = -1;
  v404 = 1;
  v405 = -1;
  do
  {
    v406 = v404;
    if (*((_BYTE *)&v643 + v399))
    {
      v407 = (unsigned __int8 *)v642[v399 - 1];
      if (v407)
      {
        v408 = v295[492];
        v409 = v295[493];
        v410 = 0;
        if (v409 | v408)
        {
          v411 = v408 == 0;
          v412 = *v407;
          v413 = &v636[5 * v411];
          v414 = &v635[20 * v411];
          while (1)
          {
            if (v411)
            {
              v415 = v412 >> 5;
              if ((v412 & 0x10) != 0)
                goto LABEL_424;
            }
            else
            {
              v415 = (v412 >> 1) & 7;
              if ((v412 & 1) != 0)
              {
LABEL_424:
                if (v415 == 4)
                {
                  v416 = v407[v411 + 13];
                  v417 = *(int32x4_t *)&v635[128 * v411 + 360 + 4 * v416];
                  v218.i32[0] = *(_DWORD *)&v407[4 * v411 + 1];
                  v218 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v218.i8));
                  v217 = (__n128)vmlaq_s32((int32x4_t)v410, vmlaq_s32(vnegq_s32(vaddq_s32(v417, v417)), v218, (int32x4_t)vmovl_u16(*(uint16x4_t *)&v635[64 * v411 + 744 + 2 * v416])), v218);
                  v217.n128_u32[0] = vaddvq_s32((int32x4_t)v217);
                  v410 = v217.n128_u32[0];
                }
                else if (v415 <= 3)
                {
                  v418 = 0;
                  v419 = &v413[15 * v415];
                  v420 = &v414[60 * v415];
                  do
                  {
                    if (v418 != 2)
                    {
                      v421 = (char)v407[4 * v411 + byte_1C9860D84[v418]];
                      v410 += (v421 * (unsigned __int16)v419[v418] - 2 * *(_DWORD *)&v420[4 * v418]) * v421;
                    }
                    ++v418;
                  }
                  while (v418 != 5);
                }
                if (v411)
                  v410 = (int)(*(_DWORD *)(v629 + 4 * (v411 - 1) + 248) * v410) >> 8;
                v234 = v631;
              }
            }
            if (v409)
            {
              v413 += 5;
              v414 += 20;
              v291 = v411++ >= 2;
              if (!v291)
                continue;
            }
            break;
          }
        }
        v7 = v627;
        v422 = v645[v399];
        v295 = v603;
        if ((int)(v410 + ((v422 * *(_DWORD *)(v629 + 236)) >> 8)) < v330)
        {
          v400 = v422 >> 8;
          v330 = v410 + ((v422 * *(_DWORD *)(v629 + 236)) >> 8);
          v405 = v399;
          v403 = v410;
        }
      }
    }
    v404 = 0;
    v399 = 1;
  }
  while ((v406 & 1) != 0);
  v178 = v629;
  if (v330 >= *(_DWORD *)(v629 + 236) * (v295[493] + v295[492]))
  {
    if (v598 >= 1 && (v608->n128_u8[0] & 0x11) == 0)
    {
      v405 = 0;
      goto LABEL_476;
    }
    if (v599 >= 1 && (v597->n128_u8[0] & 0x11) == 0)
    {
      v405 = 1;
      goto LABEL_476;
    }
    v398->n128_u8[0] = -86;
  }
  else
  {
    if ((v405 & 0x80000000) != 0)
      goto LABEL_479;
LABEL_476:
    *(_BYTE *)v617 = v405 == 0;
    *(_BYTE *)(v621 + 2 * v612 + 1) = v405 != 0;
    v434 = (__n128 *)v642[v405 - 1];
    v217 = *v434;
    *v398 = *v434;
    if ((v434->n128_u8[0] & 8) != 0)
    {
      v217.n128_u64[0] = 2147483649;
      *(_QWORD *)(v629 + 224) = 2147483649;
    }
    else
    {
      *(_DWORD *)(v629 + 224) = v403;
      *(_DWORD *)(v629 + 228) = v400;
    }
  }
LABEL_479:
  if (*(_BYTE *)(v234 + 4020))
  {
    v435 = v592 + 2 * v583;
    v437 = *(unsigned __int8 *)(v435 + 1);
    v294 = (_BYTE *)(v435 + 1);
    v436 = v437;
    if ((*v585 & 8) == 0 || *v584 || v436)
    {
      v438 = *(_DWORD *)(v629 + 232);
      if (v438 <= 26)
      {
        v439 = *(_DWORD *)(v234 + 4608) - 2 * v438 + 81;
        if (v439 >= 63)
          v439 = 63;
        if (((*(_DWORD *)(v629 + 224) + *(_DWORD *)(v629 + 228) * dword_1C985909C[70 * *v295 + (v439 & ~(v439 >> 31))]) & 0x80000000) == 0)
        {
          *v585 = -86;
          *v584 = 0;
          goto LABEL_330;
        }
      }
    }
  }
LABEL_488:
  v440 = *(_OWORD **)(v178 + 1016);
  v632 = (int *)(*(_QWORD *)(v601 + 1184) + 4 * v600);
  v441 = *(unsigned __int8 *)(*(_QWORD *)(v178 + 14920) + 21);
  v635[0] = 0;
  *(_DWORD *)(v178 + 300) = 0;
  *(_QWORD *)(v178 + 1008) = v440;
  if (v441 && !*(_DWORD *)(v7 + 12) && *(_DWORD *)(v7 + 16) && *(int *)(*(_QWORD *)(v178 + 14912) + 2120) >= 2)
  {
    v454 = *(_QWORD *)(v178 + 14904);
    v455 = *(_OWORD *)(v454 + 1208);
    v456 = *(_OWORD *)(v454 + 1224);
    v457 = *(_OWORD *)(v454 + 1256);
    v440[5] = *(_OWORD *)(v454 + 1240);
    v440[6] = v457;
    v440[3] = v455;
    v440[4] = v456;
    v458 = *(_OWORD *)(v454 + 1272);
    v459 = *(_OWORD *)(v454 + 1288);
    v460 = *(_OWORD *)(v454 + 1320);
    v440[9] = *(_OWORD *)(v454 + 1304);
    v440[10] = v460;
    v440[7] = v458;
    v440[8] = v459;
    v217 = *(__n128 *)(v454 + 1336);
    v461 = *(_OWORD *)(v454 + 1352);
    v462 = *(_OWORD *)(v454 + 1368);
    *((_BYTE *)v440 + 224) = *(_BYTE *)(v454 + 1384);
    v440[12] = v461;
    v440[13] = v462;
    v440[11] = v217;
    v440 = *(_OWORD **)(v178 + 1008);
  }
  *((_BYTE *)v440 + 225) = 1;
  *(_BYTE *)(v178 + 72) = *(_BYTE *)(*(_QWORD *)(v178 + 14912) + 201) == 0;
  v442 = *(_QWORD *)(v178 + 14904);
  v443 = *(unsigned __int8 *)(v442 + 512);
  v444 = *(unsigned __int8 *)(v442 + 513);
  if (*(_BYTE *)(v442 + 512))
  {
LABEL_493:
    v445 = *(_DWORD *)(v7 + 4);
    v446 = *(_DWORD *)(v7 + 8);
    v447 = v445 + *(_DWORD *)(v442 + 3552) * v446;
    v448 = v447;
    v626 = *(_QWORD *)(*(_QWORD *)(v442 + 4024) + 1000);
    v449 = *(_QWORD *)(v442 + 4712);
    if (v445 >= 1)
    {
      (**(void (***)(_OWORD *, _QWORD, _OWORD *))v440)(v440, *(unsigned __int8 *)(v449 + 2 * v447), v440 + 3);
      v7 = v627;
      if (*(_BYTE *)(v449 + 2 * v447))
        goto LABEL_541;
    }
    if (v446 >= 1)
    {
      v450 = v449 + 2 * v447;
      (**(void (***)(_OWORD *, _QWORD, _OWORD *))v440)(v440, *(unsigned __int8 *)(v450 + 1), v440 + 3);
      if (*(_BYTE *)(v450 + 1))
        goto LABEL_541;
    }
    v451 = (_BYTE *)(v626 + 16 * v447);
    if (v443)
    {
      v452 = (char *)v440 + 49;
      v453 = **(void (***)(_OWORD *, uint64_t, char *))v440;
      if ((*v451 & 1) != 0)
      {
        v453(v440, 1, v452);
        (*(void (**)(_OWORD *, BOOL))(*(_QWORD *)v440 + 8))(v440, (*v451 & 8) == 0);
        v463 = *(unsigned __int8 *)(v442 + 3566);
        v464 = v626 + 16 * v447;
        v465 = (char *)(v464 + 1);
        if ((*v451 & 0xE) == 8)
        {
          v466 = 0;
          v628 = *(unsigned __int8 *)(v464 + 13);
          do
          {
            v467 = v465[v466];
            if (v467 >= 0)
              v468 = v467;
            else
              v468 = -v467;
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)v440 + 40))(v440, v468, v463);
            ++v466;
          }
          while (v466 != 4);
          for (j = 0; j != 4; ++j)
          {
            if (v465[j])
              (*(void (**)(_OWORD *, _QWORD))(*(_QWORD *)v440 + 8))(v440, (v465[j] >> 7) & 1);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 24))(v440, v628, 5);
        }
        else
        {
          (*(void (**)(_OWORD *, _QWORD, _QWORD))(*(_QWORD *)v440 + 40))(v440, *v465, *(unsigned __int8 *)(v442 + 3566));
          (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, v465[1], v463);
          (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, -v465[2], v463);
          (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, -v465[3], v463);
          (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 24))(v440, (*v451 >> 1) & 7, 2);
        }
        if (!v444)
          goto LABEL_541;
LABEL_518:
        v470 = (char *)v440 + 49;
        v471 = **(void (***)(_OWORD *, uint64_t, char *))v440;
        if ((*v451 & 0x10) != 0)
        {
          v471(v440, 1, v470);
          (*(void (**)(_OWORD *, _QWORD))(*(_QWORD *)v440 + 8))(v440, (*v451 >> 7) ^ 1u);
          v472 = *(unsigned __int8 *)(v442 + 3567);
          v473 = v626 + 16 * v448;
          v474 = (char *)(v473 + 5);
          if ((*v451 & 0xE0) == 0x80)
          {
            v475 = 0;
            v476 = *(unsigned __int8 *)(v473 + 14);
            do
            {
              v477 = v474[v475];
              if (v477 >= 0)
                v478 = v477;
              else
                v478 = -v477;
              (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)v440 + 40))(v440, v478, v472);
              ++v475;
            }
            while (v475 != 4);
            for (k = 0; k != 4; ++k)
            {
              if (v474[k])
                (*(void (**)(_OWORD *, _QWORD))(*(_QWORD *)v440 + 8))(v440, (v474[k] >> 7) & 1);
            }
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)v440 + 24))(v440, v476, 5);
            v480 = 0;
            v481 = *(unsigned __int8 *)(v442 + 3567);
            v482 = v626 + 16 * v448;
            v483 = v482 + 9;
            v484 = *(unsigned __int8 *)(v482 + 15);
            do
            {
              v485 = *(char *)(v483 + v480);
              if (v485 >= 0)
                v486 = v485;
              else
                v486 = -v485;
              (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)v440 + 40))(v440, v486, v481);
              ++v480;
            }
            while (v480 != 4);
            for (m = 0; m != 4; ++m)
            {
              if (*(_BYTE *)(v483 + m))
                (*(void (**)(_OWORD *, _QWORD))(*(_QWORD *)v440 + 8))(v440, (*(char *)(v483 + m) >> 7) & 1);
            }
            v217.n128_f64[0] = (*(double (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)v440 + 24))(v440, v484, 5);
          }
          else
          {
            (*(void (**)(_OWORD *, _QWORD, _QWORD))(*(_QWORD *)v440 + 40))(v440, *v474, *(unsigned __int8 *)(v442 + 3567));
            (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, *(char *)(v473 + 6), v472);
            (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, -*(char *)(v473 + 7), v472);
            (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, -*(char *)(v473 + 8), v472);
            (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 24))(v440, *v451 >> 5, 2);
            v488 = *(unsigned __int8 *)(v442 + 3567);
            (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, *(char *)(v473 + 9), v488);
            (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, *(char *)(v473 + 10), v488);
            (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, -*(char *)(v473 + 11), v488);
            v217.n128_f64[0] = (*(double (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)v440 + 40))(v440, -*(char *)(v473 + 12), v488);
          }
        }
        else
        {
          v471(v440, 0, v470);
        }
        goto LABEL_541;
      }
      v453(v440, 0, v452);
    }
    if (!v444)
      goto LABEL_541;
    goto LABEL_518;
  }
  if (*(_BYTE *)(v442 + 513))
  {
    v444 = 1;
    goto LABEL_493;
  }
LABEL_541:
  sub_1C97CBC8C((uint64_t)v602, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), 0, *(_DWORD *)(v7 + 20), v632, v635, v217);
  if (v441 && *(_DWORD *)(v7 + 4) == 1)
  {
    v489 = *(_QWORD *)(v629 + 14904);
    v490 = *(_QWORD *)(v629 + 1008);
    v491 = *(_OWORD *)(v490 + 160);
    v493 = *(_OWORD *)(v490 + 112);
    v492 = *(_OWORD *)(v490 + 128);
    *(_OWORD *)(v489 + 1304) = *(_OWORD *)(v490 + 144);
    *(_OWORD *)(v489 + 1320) = v491;
    *(_OWORD *)(v489 + 1272) = v493;
    *(_OWORD *)(v489 + 1288) = v492;
    v495 = *(_OWORD *)(v490 + 192);
    v494 = *(_OWORD *)(v490 + 208);
    v496 = *(_OWORD *)(v490 + 176);
    *(_BYTE *)(v489 + 1384) = *(_BYTE *)(v490 + 224);
    *(_OWORD *)(v489 + 1352) = v495;
    *(_OWORD *)(v489 + 1368) = v494;
    *(_OWORD *)(v489 + 1336) = v496;
    v497 = *(_OWORD *)(v490 + 48);
    v498 = *(_OWORD *)(v490 + 64);
    v499 = *(_OWORD *)(v490 + 96);
    *(_OWORD *)(v489 + 1240) = *(_OWORD *)(v490 + 80);
    *(_OWORD *)(v489 + 1256) = v499;
    *(_OWORD *)(v489 + 1208) = v497;
    *(_OWORD *)(v489 + 1224) = v498;
  }
  *(_BYTE *)(v629 + 72) = *(_BYTE *)(*(_QWORD *)(v629 + 1032) + 548);
  *(int32x2_t *)(v629 + 30360) = vadd_s32(*(int32x2_t *)(v629 + 30360), *v593);
  v500 = *a3 + 1;
  *a3 = v500;
  v501 = *(_QWORD *)(v601 + 16);
  if (v500 >= *(_DWORD *)(v501 + 2120))
  {
    *a3 = 0;
    v502 = a4;
    v503 = *a4 + 1;
    *a4 = v503;
    if (v503 >= *(_DWORD *)(v501 + 2124) || *(_DWORD *)(v601 + 568))
    {
      (*(void (**)(_QWORD *, uint64_t))(*v586 + 16))(v586, 1);
      v504 = v586[1] >> 8;
      v506 = v586[3];
      v505 = (_DWORD *)v586[4];
      v507 = v506 + 2;
      if (((v504 >> (v506 + 2)) & 1) != 0)
      {
        v504 &= ~(-1 << v507);
        v508 = v587;
        v509 = (char *)v505 - 1;
        do
        {
          if ((unint64_t)v509 < *(_QWORD *)(v587 + 472 * (int)v600 + 464))
            break;
          v510 = (*v509--)++ + 1;
        }
        while ((v510 & 0x100) != 0);
      }
      else
      {
        v508 = v587;
      }
      v145 = v506 < 30;
      v511 = v506 - 30;
      if (!v145)
      {
        *v505++ = bswap32(v504 >> v511);
        LODWORD(v504) = v504 & ~(-1 << v511);
        v507 = v511;
      }
      v512 = v508 + 472 * (int)v600;
      v513 = *(_QWORD *)(v512 + 456);
      v514 = (char *)v505 + (*(int *)(v513 + 52) >> 3) - *(_QWORD *)(v512 + 464);
      v515 = *(_QWORD *)(v513 + 40);
      v516 = &v514[*(_QWORD *)(v513 + 32)];
      *(_QWORD *)(v513 + 32) = v516;
      if ((unint64_t)v516 >= v515)
      {
        *(_BYTE *)(v513 + 56) = 1;
        *(_QWORD *)(v513 + 32) = v515;
      }
      *(_DWORD *)(v513 + 48) = 0;
      if (v507)
        sub_1C9750DB8(v513, v504, v507);
      v501 = *(_QWORD *)(v601 + 16);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v601 + 4760) + 184) & 2) != 0)
    {
      v517 = *(_QWORD *)(v601 + 8);
      v518 = *a4 * *(unsigned __int8 *)(v501 + 2117) - 10;
      if (*(_BYTE *)(v517 + 48))
      {
        v519 = atomic_load((unsigned int *)(v517 + 1032));
        v520 = v519 & ~(v519 >> 31);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v517 + 16))(*(_QWORD *)(v601 + 8), v520, v518, 0);
        sub_1C97BE470(v517 + 48, v520, v518);
      }
      atomic_store(v518, (unsigned int *)(v517 + 1032));
      std::condition_variable::notify_all((std::condition_variable *)(v517 + 1104));
      v501 = *(_QWORD *)(v601 + 16);
    }
  }
  else
  {
    v502 = a4;
  }
  return *v502 < *(_DWORD *)(v501 + 2124);
}

uint64_t sub_1C980AA70(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _WORD *v10;
  int *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _WORD *v15;
  _DWORD *v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD v46[2];
  _QWORD v47[25];

  v47[23] = *MEMORY[0x1E0C80C00];
  v43 = result;
  if (*(_BYTE *)(result + 516))
  {
    v2 = 0;
    v3 = 0;
    v4 = a2;
    v5 = result + ((unint64_t)a2 << 8);
    v42 = v5 + 672;
    v6 = *(_QWORD *)(result + 16);
    v40 = *(_BYTE *)(v6 + 222);
    v41 = *(_BYTE *)(v6 + 223);
    LOBYTE(v6) = *(_BYTE *)(result + 556);
    v7 = -1 << v6;
    v8 = 1 << (*(_BYTE *)(result + 557) + v6);
    v9 = result + 1608;
    v45 = *(char *)(result + 516);
    v10 = (_WORD *)(v5 + 676);
    v11 = v46;
    do
    {
      v12 = v7 + (__int16)*(v10 - 2);
      *v11 = v12;
      if (v12 || *v10)
        v3 |= (unsigned __int16)(1 << v2);
      result = sub_1C9750D54(v9, (v3 >> v2++) & 1, 1);
      v11 += 3;
      v10 += 8;
    }
    while (v45 != v2);
    if (*(_BYTE *)(*(_QWORD *)(v43 + 16) + 201))
    {
      v13 = 0;
      v14 = 0;
      v15 = (_WORD *)(v43 + (v4 << 8) + 686);
      v16 = v47;
      do
      {
        v17 = (__int16)*(v15 - 2);
        v18 = (__int16)*(v15 - 3) - v8;
        *(v16 - 1) = v18;
        *v16 = v17 - v8;
        if (v18)
          v19 = 0;
        else
          v19 = v17 == v8;
        if (!v19 || *(v15 - 1) || *v15)
          v14 |= (unsigned __int16)(1 << v13);
        v15 += 8;
        result = sub_1C9750D54(v9, (v14 >> v13++) & 1, 1);
        v16 += 3;
      }
      while (v45 != v13);
    }
    else
    {
      v14 = 0;
    }
    v20 = 0;
    do
    {
      v44 = v3;
      if ((v3 & 1) != 0)
      {
        v21 = v46[3 * v20];
        if (v21 <= 0)
          v22 = -2 * v21;
        else
          v22 = 2 * v21 - 1;
        v23 = v22 + 1;
        v24 = __clz(v23);
        sub_1C9750D54(v9, (v23 - (0x80000000 >> v24)) | (0x80000000 >> v24), 63 - 2 * v24);
        v25 = *(__int16 *)(v42 + 16 * v20 + 4) >> v40;
        if (v25 <= 0)
          v26 = -2 * v25;
        else
          v26 = 2 * v25 - 1;
        v27 = v26 + 1;
        v28 = __clz(v27);
        result = sub_1C9750D54(v9, (v27 - (0x80000000 >> v28)) | (0x80000000 >> v28), 63 - 2 * v28);
      }
      if ((v14 & 1) != 0)
      {
        v29 = 0;
        v30 = 1;
        do
        {
          v31 = v30;
          v32 = v46[3 * v20 + 1 + v29];
          if (v32 <= 0)
            v33 = -2 * v32;
          else
            v33 = 2 * v32 - 1;
          v34 = v33 + 1;
          v35 = __clz(v34);
          sub_1C9750D54(v9, (v34 - (0x80000000 >> v35)) | (0x80000000 >> v35), 63 - 2 * v35);
          v36 = ((*(__int16 *)(v42 + 16 * v20 + 8 + 2 * v29) << 7 >> *(_BYTE *)(v43 + 662))
               + *(__int16 *)(v42 + 16 * v20 + 2 * v29 + 12)
               - 128) >> v41;
          if (v36 <= 0)
            v37 = -2 * v36;
          else
            v37 = 2 * v36 - 1;
          v38 = v37 + 1;
          v39 = __clz(v38);
          result = sub_1C9750D54(v9, (v38 - (0x80000000 >> v39)) | (0x80000000 >> v39), 63 - 2 * v39);
          v30 = 0;
          v29 = 1;
        }
        while ((v31 & 1) != 0);
      }
      ++v20;
      v3 = v44 >> 1;
      v14 >>= 1;
    }
    while (v20 != v45);
  }
  return result;
}

BOOL sub_1C980ADB0(uint64_t a1, int a2, int *a3, int *a4)
{
  return sub_1C9807D24(a1, *(_QWORD *)(*(_QWORD *)(a1 + 5376) + 8 * a2), a3, a4);
}

uint64_t sub_1C980ADBC(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;

  if (result >= 2)
  {
    v1 = __clz(result);
    if ((v1 & 1) != 0)
      v2 = ((byte_1C9860C84[(unint64_t)((_DWORD)result << (v1 + 1)) >> 24] << 12) | 0x200000u) >> ((v1 + 1) >> 1);
    else
      v2 = (11585
          * (((byte_1C9860C84[(unint64_t)((_DWORD)result << (v1 + 1)) >> 24] << 12) | 0x200000u) >> ((v1 + 1) >> 1))) >> 14;
    return (v2 + 16) >> 5;
  }
  return result;
}

uint64_t sub_1C980AE10(uint64_t result, int a2, int a3, int a4, int a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v7 = 0;
  v8 = *(_QWORD *)(result + 16);
  v9 = *(unsigned __int8 *)(v8 + 2117);
  v10 = a3 - 1;
  v11 = (v9 - 1) & a2;
  v12 = word_1C986E238[(((v9 - 1) & (a3 - 1 + a5)) - v9 + 64) >> 2];
  v13 = a2 - 1;
  v14 = a5 + a3;
  if (((v12 >> (v11 >> 2)) & 1) != 0 && ((v14 | v13) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(result + 8);
    if (*(_DWORD *)(v15 + 520) < a2 || *(_DWORD *)(v15 + 524) <= v14)
      v7 = 0;
    else
      v7 = *(_QWORD *)(v15 + 880) + 16 * (*(_QWORD *)(v15 + 848) * ((uint64_t)v14 >> 2) + (v13 >> 2));
  }
  v16 = *(_BYTE *)(v8 + 2112);
  *a6 = v7;
  if (((v14 - 1) | v13) < 0
    || (v17 = *(_QWORD *)(result + 8), *(_DWORD *)(v17 + 520) < a2)
    || *(_DWORD *)(v17 + 524) < v14)
  {
    v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 880) + 16 * (*(_QWORD *)(v17 + 848) * ((uint64_t)(v14 - 1) >> 2) + (v13 >> 2));
  }
  v19 = 0;
  a6[1] = v18;
  v20 = *(unsigned __int8 *)(*(_QWORD *)(result + 16) + 2117);
  v21 = (v20 - 1) & a3;
  v22 = (((v20 - 1) & (v13 + a4)) - v20 + 64) >> 2;
  v23 = a4 + a2;
  if (((word_1C9860C64[v21 >> 2] >> v22) & 1) != 0 && ((v23 | v10) & 0x80000000) == 0)
  {
    v24 = *(_QWORD *)(result + 8);
    if (*(_DWORD *)(v24 + 520) <= v23 || *(_DWORD *)(v24 + 524) <= v10)
      v19 = 0;
    else
      v19 = *(_QWORD *)(v24 + 880) + 16 * (*(_QWORD *)(v24 + 848) * ((uint64_t)v10 >> 2) + (v23 >> 2));
  }
  v25 = 1 << (v16 - 1);
  *a7 = v19;
  v26 = v23 - v25;
  if ((v26 | v10) < 0
    || (v27 = *(_QWORD *)(result + 8), *(_DWORD *)(v27 + 520) <= v26)
    || *(_DWORD *)(v27 + 524) <= v10)
  {
    v28 = 0;
  }
  else
  {
    v28 = *(_QWORD *)(v27 + 880) + 16 * (*(_QWORD *)(v27 + 848) * ((uint64_t)v10 >> 2) + (v26 >> 2));
  }
  a7[1] = v28;
  v29 = a2 - v25;
  if ((v29 | v10) < 0
    || (v30 = *(_QWORD *)(result + 8), *(_DWORD *)(v30 + 520) <= v29)
    || *(_DWORD *)(v30 + 524) <= v10)
  {
    v31 = 0;
  }
  else
  {
    v31 = *(_QWORD *)(v30 + 880) + 16 * (*(_QWORD *)(v30 + 848) * ((uint64_t)v10 >> 2) + (v29 >> 2));
  }
  a7[2] = v31;
  return result;
}

uint64_t sub_1C980B03C(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  uint64_t v17[3];
  uint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = 0;
  v18[1] = 0;
  memset(v17, 0, sizeof(v17));
  sub_1C980AE10(a1, a2, a3, a6, a7, v18, v17);
  return sub_1C974ECB8(a1, a2, a3, a4, a5, a6, a7, a8, v18, (uint64_t)v17, 1);
}

uint64_t sub_1C980B120(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v15;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  v15 = a3;
  v36[1] = *MEMORY[0x1E0C80C00];
  v18 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
  if ((_DWORD)v18 == 15)
  {
    v19 = *(_QWORD *)(a1 + ((_BYTE)a2[2] & 0xF0) + 1672);
    v20 = *a2;
    return sub_1C980B440(a1, v19, 0, v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  v22 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
  if ((_DWORD)v22 == 15)
    return sub_1C980B440(a1, *(_QWORD *)(a1 + 16 * v18 + 1928), 1, a2[1], (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  v19 = *(_QWORD *)(a1 + 1672 + 16 * v22);
  v23 = *(_QWORD *)(a1 + 1672 + 16 * v18 + 256);
  v20 = *a2;
  v24 = a2[1];
  if (v19 == v23 && (_DWORD)v20 == (_DWORD)v24)
    return sub_1C980B440(a1, v19, 0, v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  v35 = 0;
  v36[0] = 0;
  v32 = v23;
  v33 = 0;
  v34 = 0;
  v30 = v20;
  v31 = v19;
  sub_1C974E648(a1, v19, v20, a3, a4, a5, a6, &v35, &v33);
  result = sub_1C974E648(a1, v32, v24, v15, a4, a5, a6, v36, &v34);
  if (a8)
  {
    v26 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
    v27 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
    if (*(_BYTE *)(a1 + 2 * v26 + 5120) || *(_BYTE *)(a1 + 2 * v27 + 5152))
      result = sub_1C975E7D8(a1 + 3224, a5, a6, *(unsigned int *)(a1 + 664), a1 + 672 + 16 * v26, v30, *(_QWORD *)(v31 + 416), v35, a1 + 672 + 16 * v27 + 256, v24, *(_QWORD *)(v32 + 416), v36[0]);
    else
      result = sub_1C975E530(a1 + 3224, a5, a6, v30, *(_QWORD *)(v31 + 416), v35, v24, *(_QWORD *)(v32 + 416), v36[0], a7, a8);
  }
  if (a10 && *(_BYTE *)(v31 + 532))
  {
    v28 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
    v29 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
    if (*(_BYTE *)(a1 + 2 * v28 + 5121) || *(_BYTE *)(a1 + 2 * v29 + 5153))
      return sub_1C975E948(a1 + 3224, ((int)a5 >> 1), ((int)a6 >> 1), *(unsigned int *)(a1 + 668), a1 + 672 + 16 * v28 + 8, v30, *(_QWORD *)(v31 + 424), v33, a1 + 672 + 16 * v29 + 264, v24, *(_QWORD *)(v32 + 424), v34);
    else
      return sub_1C975E680(a1 + 3224, ((int)a5 >> 1), ((int)a6 >> 1), v30, *(_QWORD *)(v31 + 424), v33, v24, *(_QWORD *)(v32 + 424), v34, a9, a10);
  }
  return result;
}

uint64_t sub_1C980B440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int vars0_4;
  uint64_t vars8;

  v13 = MEMORY[0x1E0C80A78]();
  v21 = v20;
  v22 = v14;
  v23 = v13;
  v55 = a13;
  v51 = a12;
  vars8 = a11;
  v54 = a10;
  v24 = a9;
  STACK[0x4078] = *MEMORY[0x1E0C80C00];
  v25 = -3 - v20;
  v26 = *(_DWORD *)(v14 + 520);
  v27 = v26 + 2;
  v28 = v18 + ((__int16)v16 >> 2);
  if (v28 < v26 + 2)
    v27 = v18 + ((__int16)v16 >> 2);
  if (v28 <= v25)
    v29 = v25;
  else
    v29 = v27;
  v30 = -3 - v24;
  v31 = v19 + (v16 >> 18);
  v32 = *(_DWORD *)(v14 + 524);
  v33 = (v18 >> 1) + ((__int16)v16 >> 3);
  v34 = v32 + 2;
  if (v31 < v32 + 2)
    v34 = v19 + (v16 >> 18);
  if (v31 <= v30)
    v35 = v30;
  else
    v35 = v34;
  v36 = v33 < v26 >> 1;
  v37 = v26 >> 1;
  if (v36)
    v37 = (v18 >> 1) + ((__int16)v16 >> 3);
  if (v33 <= ~((int)v20 >> 1))
    v38 = ~((int)v20 >> 1);
  else
    v38 = v37;
  vars0_4 = v38;
  v39 = v32 >> 1;
  v40 = (v19 >> 1) + (v16 >> 19);
  if (v40 < v32 >> 1)
    v39 = (v19 >> 1) + (v16 >> 19);
  v50 = (int)v24 >> 1;
  if (v40 <= ~((int)v24 >> 1))
    v41 = ~((int)v24 >> 1);
  else
    v41 = v39;
  v58 = v41;
  v52 = v17;
  v57 = v15;
  v56 = v17 + v15;
  if ((v16 & 0x10001) != 0
    || !*(_BYTE *)(*(_QWORD *)(v13 + 4760) + 221)
    || *(_BYTE *)(v13 + 32 * v15 + (((unint64_t)*(unsigned __int8 *)(v56 + 8) >> 3) & 0x1E) + 5120))
  {
    LODWORD(v53) = (unsigned __int16)v16;
    HIDWORD(v53) = v16 & 0xFFFF0000;
  }
  else
  {
    v53 = 0;
  }
  sub_1C974E5B8(v14, v35 + v24);
  result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1E8292028[2 * *(unsigned __int8 *)(v22 + 532)]
                                                                                                  + *(unsigned __int8 *)(v22 + 531)))(v29, v35, vars0_4, v58, v21, v24, v22);
  if (vars8)
  {
    v43 = (unint64_t)*(unsigned __int8 *)(v56 + 8) >> 4;
    if (*(_BYTE *)(v23 + 32 * v57 + 2 * v43 + 5120))
    {
      v44 = v23 + ((unint64_t)v57 << 8) + 16 * v43 + 672;
      v45 = *(unsigned int *)(v23 + 664);
      (*(void (**)(uint64_t, uint64_t))(v23
                                               + ((8 * (((HIDWORD(v53) | v53) & 3) != 0)) | (16 * (((HIDWORD(v53) | v53) & 0x30000) != 0)))
                                               + 3288))(v21, v24);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, unsigned int *, uint64_t, uint64_t))(v23 + 3352))(v21, v24, v45, v44, (int)v21, &a9, v54, vars8);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v23
                                                           + ((8 * (((HIDWORD(v53) | v53) & 3) != 0)) | (16 * (((HIDWORD(v53) | v53) & 0x30000) != 0)))
                                                           + 3224))(v21, v24);
    }
  }
  if (v55 && *(_BYTE *)(v22 + 532))
  {
    v46 = (unint64_t)*(unsigned __int8 *)(v56 + 8) >> 4;
    if (*(_BYTE *)(v23 + 32 * v57 + 2 * v46 + 5121))
    {
      v47 = v23 + ((unint64_t)v57 << 8) + 16 * v46 + 680;
      v48 = *(unsigned int *)(v23 + 668);
      v49 = v21 & 0xFFFFFFFE;
      (*(void (**)(uint64_t, _QWORD))(v23
                                              + ((8 * ((*(_DWORD *)(v52 + 4 * v57) & 7) != 0)) | (16 * ((*(_DWORD *)(v52 + 4 * v57) & 0x70000) != 0)))
                                              + 3320))(v49, v50);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t, _QWORD, unsigned int *, uint64_t, uint64_t))(v23 + 3360))(v49, v50, v48, v47, (int)v49, &a9, v51, v55);
    }
    else
    {
      return (*(uint64_t (**)(_QWORD, _QWORD))(v23
                                                       + ((8 * ((*(_DWORD *)(v52 + 4 * v57) & 7) != 0)) | (16 * ((*(_DWORD *)(v52 + 4 * v57) & 0x70000) != 0)))
                                                       + 3256))(v21 & 0xFFFFFFFE, v50);
    }
  }
  return result;
}

void *sub_1C980B8D0(void *result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE *v20;

  v10 = (int)result;
  if (a5)
  {
    v11 = *(int *)(a6 + 520);
    v12 = (a3 + (_DWORD)result - v11);
    if ((int)v12 >= 1)
    {
      v13 = (v11 + *(_QWORD *)(a6 + 416) * (a2 - 1) - 1) << *(_BYTE *)(a6 + 531);
      result = memset((void *)(*(_QWORD *)(a6 + 400) + v13 + 1), *(unsigned __int8 *)(*(_QWORD *)(a6 + 400) + v13), v12);
    }
  }
  if (a4)
  {
    v14 = *(int *)(a6 + 524);
    v15 = (a3 + a2 - v14);
    if ((int)v15 >= 1)
    {
      v16 = *(_QWORD *)(a6 + 416);
      v17 = *(_QWORD *)(a6 + 400);
      v18 = (v16 * (v14 - 1) + v10 - 1) << *(_BYTE *)(a6 + 531);
      v19 = *(_BYTE *)(v17 + v18);
      v20 = (_BYTE *)(v17 + v16 + v18);
      do
      {
        *v20 = v19;
        v20 += v16;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t sub_1C980B9A4(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  __int16 *v8;
  _WORD *v9;
  __int16 v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  _WORD *v19;

  if (a5)
  {
    v6 = *(_DWORD *)(a6 + 520);
    v7 = (a3 + result - (v6 >> 1));
    if ((int)v7 >= 1)
    {
      v8 = (__int16 *)(*(_QWORD *)(a6 + 408)
                     + ((*(_QWORD *)(a6 + 424) * (a2 - 1) + (int)((v6 & 0xFFFFFFFE) - 2)) << *(_BYTE *)(a6 + 531)));
      v11 = *v8;
      v9 = v8 + 1;
      v10 = v11;
      do
      {
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
  }
  if (a4)
  {
    v12 = *(_DWORD *)(a6 + 524);
    v13 = (a3 + a2 - (v12 >> 1));
    if ((int)v13 >= 1)
    {
      v14 = *(_QWORD *)(a6 + 424);
      v15 = *(_QWORD *)(a6 + 408);
      v16 = (v14 * ((v12 >> 1) - 1) + 2 * (int)result - 2) << *(_BYTE *)(a6 + 531);
      v17 = *(_WORD *)(v15 + v16);
      v18 = v14 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (_WORD *)(v15 + v18 + v16);
      do
      {
        *v19 = v17;
        v19 = (_WORD *)((char *)v19 + v18);
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t sub_1C980BA60(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  _WORD *v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  _WORD *v19;

  if (a5)
  {
    v6 = *(int *)(a6 + 520);
    v7 = (a3 + result - v6);
    if ((int)v7 >= 1)
    {
      v8 = (__int16 *)(*(_QWORD *)(a6 + 400) + ((v6 + *(_QWORD *)(a6 + 416) * (a2 - 1) - 1) << *(_BYTE *)(a6 + 531)));
      v11 = *v8;
      v9 = v8 + 1;
      v10 = v11;
      do
      {
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
  }
  if (a4)
  {
    v12 = *(int *)(a6 + 524);
    v13 = (a3 + a2 - v12);
    if ((int)v13 >= 1)
    {
      v14 = *(_QWORD *)(a6 + 416);
      v15 = *(_QWORD *)(a6 + 400);
      v16 = (v14 * (v12 - 1) + (int)result - 1) << *(_BYTE *)(a6 + 531);
      v17 = *(_WORD *)(v15 + v16);
      v18 = 2 * v14;
      v19 = (_WORD *)(v15 + v16 + 2 * v14);
      do
      {
        *v19 = v17;
        v19 = (_WORD *)((char *)v19 + v18);
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t sub_1C980BB08(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;

  if (a5)
  {
    v6 = *(_DWORD *)(a6 + 520);
    v7 = (a3 + result - (v6 >> 1));
    if ((int)v7 >= 1)
    {
      v8 = (int *)(*(_QWORD *)(a6 + 408)
                 + ((*(_QWORD *)(a6 + 424) * (a2 - 1) + (int)((v6 & 0xFFFFFFFE) - 2)) << *(_BYTE *)(a6 + 531)));
      v11 = *v8;
      v9 = v8 + 1;
      v10 = v11;
      do
      {
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
  }
  if (a4)
  {
    v12 = *(_DWORD *)(a6 + 524);
    v13 = (a3 + a2 - (v12 >> 1));
    if ((int)v13 >= 1)
    {
      v14 = *(_QWORD *)(a6 + 424);
      v15 = *(_QWORD *)(a6 + 408);
      v16 = (v14 * ((v12 >> 1) - 1) + 2 * (int)result - 2) << *(_BYTE *)(a6 + 531);
      v17 = *(_DWORD *)(v15 + v16);
      v18 = (2 * v14) & 0xFFFFFFFFFFFFFFFCLL;
      v19 = (_DWORD *)(v15 + v18 + v16);
      do
      {
        *v19 = v17;
        v19 = (_DWORD *)((char *)v19 + v18);
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

void sub_1C980BBC8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  char *v25;
  int v26;

  v6 = *(_QWORD *)(a3 + 5320);
  v7 = *(_QWORD *)(v6 + 576);
  *(_WORD *)(a1 + 1160) = *(_WORD *)(a3 + 512);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(v6 + 632);
  *(_QWORD *)(a1 + 1200) = *(_QWORD *)(v6 + 616);
  *(_QWORD *)a1 = 0;
  v8 = *(_QWORD *)(v6 + 40);
  v9 = *(unsigned __int8 *)(v8 + 2117);
  *(_DWORD *)(a1 + 8) = *(unsigned __int8 *)(v8 + 2113);
  *(_DWORD *)(a1 + 12) = v9;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 2120);
  *(_DWORD *)(a1 + 24) = *(unsigned __int8 *)(v8 + 2112);
  v10 = *(char *)(v7 + 650);
  if (v10 == 10)
  {
    sub_1C9715700(a1, a3);
    *(_QWORD *)(a1 + 1080) = sub_1C980BF64;
    *(_QWORD *)(a1 + 1088) = sub_1C980C054;
    *(_QWORD *)(a1 + 1096) = sub_1C980C15C;
    *(_QWORD *)(a1 + 1104) = sub_1C980C2A8;
    *(_QWORD *)(a1 + 1112) = sub_1C980C3F4;
    *(_QWORD *)(a1 + 1120) = sub_1C980C4A0;
    *(_QWORD *)(a1 + 1128) = sub_1C980C50C;
    *(_QWORD *)(a1 + 1136) = sub_1C980C578;
    *(_QWORD *)(a1 + 1144) = sub_1C980C5E4;
    *(_QWORD *)(a1 + 1152) = sub_1C980C650;
  }
  else
  {
    if (v10 != 8)
      return;
    sub_1C9715700(a1, a3);
    *(_QWORD *)(a1 + 1112) = sub_1C980CC0C;
    *(_QWORD *)(a1 + 1152) = sub_1C980CCAC;
    *(_QWORD *)(a1 + 1080) = sub_1C97FF670;
    *(_QWORD *)(a1 + 1088) = sub_1C97FFAB0;
    *(_QWORD *)(a1 + 1096) = sub_1C97FFDE4;
    *(_QWORD *)(a1 + 1104) = sub_1C98002B0;
    *(_QWORD *)(a1 + 1120) = sub_1C980077C;
    *(_QWORD *)(a1 + 1128) = sub_1C9800C40;
    *(_QWORD *)(a1 + 1136) = sub_1C9800FFC;
    *(_QWORD *)(a1 + 1144) = sub_1C980154C;
  }
  v11 = *(char *)(v7 + 573);
  *(_DWORD *)(a1 + 1164) = v11;
  *(_BYTE *)(a1 + 1168) = *(_BYTE *)(v7 + 574);
  *(_DWORD *)(a1 + 1072) = *(unsigned __int8 *)(*(_QWORD *)(v6 + 40) + 2097);
  if (v11 == 2)
  {
    *(_DWORD *)(a1 + 1216) = 2;
    if (*(_BYTE *)(v7 + 650) == 10)
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 1216) = *(unsigned __int8 *)(a1 + 30);
  }
  sub_1C97155C8(a1);
  v12 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  v13 = *(char **)(a1 + 1184);
  v14 = *(_BYTE **)(a1 + 1176);
  v15 = (v13 - v14) >> 1;
  if (v12 <= v15)
  {
    if (v12 >= v15)
      goto LABEL_27;
    v25 = &v14[2 * v12];
  }
  else
  {
    v16 = v12 - v15;
    v17 = *(_QWORD *)(a1 + 1192);
    if (v12 - v15 > (v17 - (uint64_t)v13) >> 1)
    {
      if ((v12 & 0x80000000) != 0)
        sub_1C9747024();
      v18 = v17 - (_QWORD)v14;
      if (v18 > v12)
        v12 = v18;
      if (v18 >= 0x7FFFFFFFFFFFFFFELL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v12;
      if (v19 < 0)
        sub_1C9724B4C();
      v20 = (char *)operator new(2 * v19);
      v21 = &v20[2 * v15];
      v22 = &v20[2 * v19];
      bzero(v21, 2 * v16);
      v23 = &v21[2 * v16];
      if (v13 != v14)
      {
        do
        {
          v24 = *((_WORD *)v13 - 1);
          v13 -= 2;
          *((_WORD *)v21 - 1) = v24;
          v21 -= 2;
        }
        while (v13 != v14);
        v13 = *(char **)(a1 + 1176);
      }
      *(_QWORD *)(a1 + 1176) = v21;
      *(_QWORD *)(a1 + 1184) = v23;
      *(_QWORD *)(a1 + 1192) = v22;
      if (v13)
        operator delete(v13);
      goto LABEL_27;
    }
    bzero(*(void **)(a1 + 1184), 2 * v16);
    v25 = &v13[2 * v16];
  }
  *(_QWORD *)(a1 + 1184) = v25;
LABEL_27:
  v26 = sub_1C97EF824(a1 + 496, *(_DWORD *)(v7 + 576), *(_BYTE *)(v7 + 580), *(unsigned __int8 *)(*(_QWORD *)(v6 + 40) + 2096), *(_DWORD *)(v7 + 456), *(unsigned __int8 *)(*(_QWORD *)(v6 + 40) + 2099), *(char *)(v6 + 648), *(_DWORD *)(a1 + 1164) == 3, a3 + 657);
  sub_1C97F1740(a1 + 496, a2, *(unsigned __int8 *)(*(_QWORD *)(v6 + 40) + 2097));
  if (v26)
  {
    if (dword_1ED1ACCC0 >= 3)
    {
      fwrite("RDCost init failed in SAOEnc\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      syslog(27, "RDCost init failed in SAOEnc\n");
    }
  }
  else
  {
    sub_1C97F16C4(a1 + 496, a2, *(_DWORD *)(a1 + 1072), (_DWORD *)(a1 + 464), (_DWORD *)(a1 + 468), (_DWORD *)(a1 + 476));
    *(_QWORD *)(a1 + 1208) = *(_QWORD *)(v6 + 16);
    *(_BYTE *)(a1 + 484) = *(_BYTE *)(v7 + 925);
  }
}

uint64_t *sub_1C980BF64(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  v8 = *((_DWORD *)result + 12);
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = (v8 & 2) != 0 && v6 == 0;
    v11 = !v10;
    v12 = (v5 - v6 - v11);
    v10 = (v8 & 1) == 0;
    v13 = !(v8 & 1);
    v14 = 2 * result[3];
    v15 = v10;
    v16 = 2 * v15;
    v17 = (uint64_t *)(v12 - v15);
    v18 = 2 * result[1];
    do
    {
      result = v17;
      v19 = v16;
      if (v13 < (int)v12)
      {
        do
        {
          v20 = *(unsigned __int16 *)(v3 + v19);
          v21 = *(unsigned __int16 *)(v3 + v19 - 2);
          v22 = __OFSUB__(v20, v21);
          v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0))
            v24 = 0;
          else
            v24 = 1;
          v25 = v24 | (v23 >> 31);
          v26 = *(unsigned __int16 *)(v3 + v19 + 2);
          v22 = __OFSUB__(v20, v26);
          v27 = v20 - v26;
          if ((v27 < 0) ^ v22 | (v27 == 0))
            v28 = 0;
          else
            v28 = 1;
          v29 = v25 + (v28 | (v27 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v29) = *(_DWORD *)(a3 + 4 * v29) - v20 + *(unsigned __int16 *)(v4 + v19);
          ++*(_WORD *)(a2 + 2 * v29);
          v19 += 2;
          result = (uint64_t *)((char *)result - 1);
        }
        while (result);
      }
      ++v9;
      v4 += v14;
      v3 += v18;
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t sub_1C980C054(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  v12 = v9 - v11;
  v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    v14 = *(_QWORD *)(result + 24);
    v15 = v6 - v8;
    v16 = v4 + 2 * v14 * v13;
    v17 = v5 + 2 * v3 * v13;
    v18 = 2 * v14;
    v19 = v5 + v3 * (2 * v13 + 2);
    v20 = 2 * v3;
    result = 2 * v13 - 2;
    v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        result = 0;
        do
        {
          v22 = *(unsigned __int16 *)(v17 + result);
          v23 = *(unsigned __int16 *)(v21 + result);
          v24 = __OFSUB__(v22, v23);
          v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0))
            v26 = 0;
          else
            v26 = 1;
          v27 = v26 | (v25 >> 31);
          v28 = *(unsigned __int16 *)(v19 + result);
          v24 = __OFSUB__(v22, v28);
          v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0))
            v30 = 0;
          else
            v30 = 1;
          v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (2 * v15 != result);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while ((_DWORD)v13 != v12);
  }
  return result;
}

uint64_t *sub_1C980C15C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v3 = result[1];
  v4 = result[2];
  v5 = *result;
  v6 = *((_DWORD *)result + 8);
  v8 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 11);
  v9 = *((_DWORD *)result + 9) - v7;
  v10 = *((_DWORD *)result + 12);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = result[3];
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = (v6 - v8 - v17);
    v19 = !(v10 & 1);
    v20 = (v10 & 1) == 0;
    v21 = v18 - v20;
    v22 = v4 + 2 * v15 * v14 + 2 * v20;
    v23 = 2 * v15;
    v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 + 2;
    v25 = 2 * v3;
    v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 - 2;
    result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        v27 = 0;
        do
        {
          v28 = *((unsigned __int16 *)result + v27);
          v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          v30 = __OFSUB__(v28, v29);
          v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0))
            v32 = 0;
          else
            v32 = 1;
          v33 = v32 | (v31 >> 31);
          v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          v30 = __OFSUB__(v28, v34);
          v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0))
            v36 = 0;
          else
            v36 = 1;
          v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      result = (uint64_t *)((char *)result + v25);
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t *sub_1C980C2A8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v3 = result[1];
  v4 = result[2];
  v5 = *result;
  v6 = *((_DWORD *)result + 8);
  v8 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 11);
  v9 = *((_DWORD *)result + 9) - v7;
  v10 = *((_DWORD *)result + 12);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = result[3];
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = (v6 - v8 - v17);
    v19 = !(v10 & 1);
    v20 = (v10 & 1) == 0;
    v21 = v18 - v20;
    v22 = v4 + 2 * v15 * v14 + 2 * v20;
    v23 = 2 * v15;
    v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 - 2;
    v25 = 2 * v3;
    v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 + 2;
    result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        v27 = 0;
        do
        {
          v28 = *((unsigned __int16 *)result + v27);
          v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          v30 = __OFSUB__(v28, v29);
          v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0))
            v32 = 0;
          else
            v32 = 1;
          v33 = v32 | (v31 >> 31);
          v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          v30 = __OFSUB__(v28, v34);
          v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0))
            v36 = 0;
          else
            v36 = 1;
          v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      result = (uint64_t *)((char *)result + v25);
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t *sub_1C980C3F4(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = v5 - v6;
    v10 = 2 * result[3];
    v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *(unsigned __int16 *)(v3 + v12);
          result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (_QWORD)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + v12);
          *((_WORD *)a2 + (_QWORD)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (2 * v9 != v12);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1C980C4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1C980CB18(a1, a2, a3);
  return sub_1C980CB18((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1C980C50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1C980CA0C(a1, a2, a3);
  return sub_1C980CA0C((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1C980C578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1C980C8BC(a1, a2, a3);
  return sub_1C980C8BC((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1C980C5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1C980C76C(a1, a2, a3);
  return sub_1C980C76C((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t *sub_1C980C650(__int128 *a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = a1[1];
  v8 = *a1;
  v9 = v5;
  v10 = a1[2];
  v11 = *((_QWORD *)a1 + 6);
  v6 = *((_QWORD *)a1 + 2) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1C980C6BC((uint64_t *)a1, a2, a3);
  return sub_1C980C6BC((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1C980C6BC(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = v5 - v6;
    v10 = 2 * result[3];
    v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *(unsigned __int16 *)(v3 + 2 * v12);
          result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (_QWORD)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + 2 * v12);
          *((_WORD *)a2 + (_QWORD)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1C980C76C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v10 = *(_DWORD *)(result + 48);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = *(_QWORD *)(result + 24);
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = 2 * (v6 - v8 - v17);
    v19 = ~(2 * (_BYTE)v10) & 2;
    v20 = v18;
    v21 = v4 + 2 * v15 * v14 + 2 * v19;
    v22 = 2 * v15;
    v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 - 4;
    v24 = 2 * v3;
    v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 + 4;
    result = 2 * v3 * v14 + 2 * v19;
    v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        result = 0;
        do
        {
          v27 = *(unsigned __int16 *)(v26 + 2 * result);
          v28 = *(unsigned __int16 *)(v25 + 2 * result);
          v29 = __OFSUB__(v27, v28);
          v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0))
            v31 = 0;
          else
            v31 = 1;
          v32 = v31 | (v30 >> 31);
          v33 = *(unsigned __int16 *)(v23 + 2 * result);
          v29 = __OFSUB__(v27, v33);
          v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0))
            v35 = 0;
          else
            v35 = 1;
          v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t sub_1C980C8BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v10 = *(_DWORD *)(result + 48);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = *(_QWORD *)(result + 24);
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = 2 * (v6 - v8 - v17);
    v19 = ~(2 * (_BYTE)v10) & 2;
    v20 = v18;
    v21 = v4 + 2 * v15 * v14 + 2 * v19;
    v22 = 2 * v15;
    v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 + 4;
    v24 = 2 * v3;
    v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 - 4;
    result = 2 * v3 * v14 + 2 * v19;
    v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        result = 0;
        do
        {
          v27 = *(unsigned __int16 *)(v26 + 2 * result);
          v28 = *(unsigned __int16 *)(v25 + 2 * result);
          v29 = __OFSUB__(v27, v28);
          v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0))
            v31 = 0;
          else
            v31 = 1;
          v32 = v31 | (v30 >> 31);
          v33 = *(unsigned __int16 *)(v23 + 2 * result);
          v29 = __OFSUB__(v27, v33);
          v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0))
            v35 = 0;
          else
            v35 = 1;
          v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t sub_1C980CA0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  v12 = v9 - v11;
  v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    v14 = *(_QWORD *)(result + 24);
    v15 = v6 - v8;
    v16 = v4 + 2 * v14 * v13;
    v17 = v5 + 2 * v3 * v13;
    v18 = 2 * v14;
    v19 = v5 + v3 * (2 * v13 + 2);
    v20 = 2 * v3;
    result = 2 * v13 - 2;
    v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        result = 0;
        do
        {
          v22 = *(unsigned __int16 *)(v17 + 2 * result);
          v23 = *(unsigned __int16 *)(v21 + 2 * result);
          v24 = __OFSUB__(v22, v23);
          v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0))
            v26 = 0;
          else
            v26 = 1;
          v27 = v26 | (v25 >> 31);
          v28 = *(unsigned __int16 *)(v19 + 2 * result);
          v24 = __OFSUB__(v22, v28);
          v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0))
            v30 = 0;
          else
            v30 = 1;
          v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (result < 2 * v15);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while ((_DWORD)v13 != v12);
  }
  return result;
}

uint64_t sub_1C980CB18(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_DWORD *)(result + 32);
  v6 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  v8 = *(_DWORD *)(result + 48);
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = (v8 & 2) != 0 && v6 == 0;
    v11 = v5 - v6;
    v12 = !v10;
    v13 = 2 * (v11 - v12);
    v14 = ~(2 * (_BYTE)v8) & 2;
    v15 = 2 * *(_QWORD *)(result + 24);
    v16 = (unsigned __int16 *)(v3 + 2 * v14);
    v17 = 2 * *(_QWORD *)(result + 8);
    do
    {
      v18 = v16;
      v19 = v14;
      if ((int)v14 < (int)v13)
      {
        do
        {
          v20 = *v18;
          v21 = *(v18 - 2);
          v22 = __OFSUB__(v20, v21);
          v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0))
            v24 = 0;
          else
            v24 = 1;
          v25 = v18[2];
          v18 += 2;
          v26 = (v24 | (v23 >> 31)) + ((v20 > v25) | ((v20 - v25) >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v26) = *(_DWORD *)(a3 + 4 * v26) - v20 + *(unsigned __int16 *)(v4 + 2 * v19);
          result = *(unsigned __int16 *)(a2 + 2 * v26);
          *(_WORD *)(a2 + 2 * v26) = result + 1;
          v19 += 2;
        }
        while (v19 < v13);
      }
      ++v9;
      v4 += v15;
      v16 = (unsigned __int16 *)((char *)v16 + v17);
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t sub_1C980CC0C(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_DWORD *)(result + 32);
  v6 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (v5 - v6);
    v10 = *(_QWORD *)(result + 8);
    v11 = *(_QWORD *)(result + 24);
    do
    {
      if ((int)v9 >= 1)
      {
        for (i = 0; i != v9; ++i)
        {
          v13 = *(unsigned __int8 *)(v3 + i);
          v14 = v13 >> 3;
          result = *(unsigned __int8 *)(v4 + i);
          *((_DWORD *)a3 + v14) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + result;
          *((_WORD *)a2 + v14) = *((_WORD *)a2 + (v13 >> 3)) + 1;
        }
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t *sub_1C980CCAC(__int128 *a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = a1[1];
  v8 = *a1;
  v9 = v5;
  v10 = a1[2];
  v11 = *((_QWORD *)a1 + 6);
  v6 = *((_QWORD *)a1 + 2) + 1;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 1;
  *(_QWORD *)&v9 = v6;
  sub_1C980CD18((uint64_t *)a1, a2, a3);
  return sub_1C980CD18((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1C980CD18(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = v5 - v6;
    v10 = result[1];
    v11 = result[3];
    do
    {
      if (v9 >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *(unsigned __int8 *)(v3 + v12);
          result = (uint64_t *)(v13 >> 3);
          *((_DWORD *)a3 + (_QWORD)result) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + *(unsigned __int8 *)(v4 + v12);
          *((_WORD *)a2 + (_QWORD)result) = *((_WORD *)a2 + (v13 >> 3)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1C980CDC0(uint64_t result, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;

  v7 = result;
  v8 = *(_DWORD *)(result + 8);
  v9 = v8 - a4;
  v10 = a2 << (v8 - a4);
  v11 = a3 << (v8 - a4);
  if (a4)
    v12 = 2;
  else
    v12 = 4;
  v13 = *(_QWORD *)(result + 488);
  v14 = v13 + 8 * a4;
  v15 = *(_QWORD *)(v14 + 416);
  v16 = *(_QWORD *)(v14 + 400);
  v17 = *(_BYTE *)(v13 + 531);
  v45[0] = v16 + ((v15 * v11 + (v10 << a4)) << v17);
  v45[1] = v15;
  v18 = *(_QWORD *)(result + 1200);
  v19 = v18 + 8 * a4;
  v20 = *(_QWORD *)(v19 + 416);
  v21 = *(_QWORD *)(v19 + 400);
  v22 = *(_BYTE *)(v18 + 531);
  v46 = v21 + ((v20 * v11 + (v10 << a4)) << v22);
  v47 = v20;
  v23 = 1 << v9;
  v48 = 1 << v9;
  v49 = 1 << v9;
  v50 = v12;
  v51 = v12;
  v52 = 0;
  v24 = *(int **)(result + 1208);
  if (*(unsigned __int8 *)v24 == 255 && *((unsigned __int8 *)v24 + 3) == 255)
  {
    v25 = 1 << v9;
  }
  else
  {
    v39 = v22;
    v40 = v21;
    v41 = v17;
    v42 = v16;
    result = sub_1C97EF790(v24, v10, v11, 1 << v8);
    v25 = v23;
    if ((_DWORD)result == 1)
    {
      v26 = v24[9] >> a4;
      if (v10 > v26)
        v26 = v10;
      v27 = v24[11] >> a4;
      if (v11 > v27)
        v27 = v11;
      v28 = v24[10] >> a4;
      if (v28 >= v10 + v23 - 1)
        v28 = v10 + v23 - 1;
      v29 = v24[12] >> a4;
      if (v29 >= v11 + v23 - 1)
        v29 = v11 + v23 - 1;
      v45[0] = v42 + ((v15 * v27 + (v26 << a4)) << v41);
      v46 = v40 + ((v20 * v27 + (v26 << a4)) << v39);
      v25 = v28 - v26 + 1;
      v23 = v29 - v27 + 1;
      v48 = v25;
      v49 = v23;
    }
  }
  v30 = 504;
  if (!*(_BYTE *)(v13 + 432))
    v30 = 520;
  v31 = 508;
  if (!*(_BYTE *)(v13 + 432))
    v31 = 524;
  v32 = *(_DWORD *)(v13 + v31);
  v33 = *(int *)(v13 + v30) >> a4;
  v34 = v32 >> a4;
  if (v25 + v10 > v33)
    v48 = v33 - v10;
  if (v23 + v11 > v34)
    v49 = v34 - v11;
  v35 = a2 != 0;
  if (a3)
    v35 |= 4u;
  if (a2 | a3)
    v52 = v35;
  if (*(_DWORD *)(v7 + 16) - 1 <= a2)
  {
    v50 = 0;
  }
  else
  {
    v35 |= 2u;
    v52 = v35;
  }
  if (*(_DWORD *)(v7 + 20) - 1 <= a3)
    v51 = 0;
  else
    v52 = v35 | 8;
  if (!*(_BYTE *)(v7 + 1168) || (a4 & 1) == 0)
  {
    v36 = 0;
    v37 = a5 + 20 * a4;
    v38 = a5 + 10 * a4 + 240;
    do
    {
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 40 * a4 + 1080 + v36))(v45, v38, v37);
      v36 += 8;
      v37 += 60;
      v38 += 30;
    }
    while (v36 != 32);
    if (!*(_BYTE *)(v7 + 1168))
      return (*(uint64_t (**)(_QWORD *, unint64_t, unint64_t))(v7 + 40 * a4 + 1112))(v45, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
  }
  if (a4)
    return (*(uint64_t (**)(_QWORD *, unint64_t, unint64_t))(v7 + 40 * a4 + 1112))(v45, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
  return result;
}

uint64_t sub_1C980D0EC(int a1, int a2, int *a3, int *a4, int a5, int a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  int v12;
  _BOOL4 v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v7 = *a3;
  if (*a3)
  {
    if (v7 < 1)
      v8 = 1;
    else
      v8 = -1;
    if (v7 == v8)
    {
      v9 = 0;
      v10 = 0;
      result = 0;
    }
    else
    {
      result = 0;
      v10 = 0;
      v9 = 0;
      v16 = v7 * a1 - 2 * a2;
      v17 = v8 * a1;
      v18 = 0x7FFFFFFF;
      do
      {
        v19 = v7;
        v20 = a5 == 4;
        v21 = v16 * v7;
        if (v19 >= 0)
          v22 = v19;
        else
          v22 = -v19;
        if (!v19)
          v20 = 0;
        if (v22 + 1 < a7)
          v23 = v22 + 1;
        else
          v23 = a7;
        v24 = (v23 + v20);
        if (v21 + (int)v24 * a6 < v18)
        {
          v9 = v19;
          v10 = v21;
          result = v24;
          v18 = v21 + v24 * a6;
        }
        v7 = v19 + v8;
        v16 += v17;
      }
      while (v19);
    }
    *a3 = v9;
    *a4 = v10;
  }
  else
  {
    *a4 = 0;
    v12 = *a3;
    v13 = a5 == 4;
    if (*a3 < 0)
      v12 = -v12;
    if (!*a3)
      v13 = 0;
    if (v12 + 1 < a7)
      v14 = v12 + 1;
    else
      v14 = a7;
    return (v14 + v13);
  }
  return result;
}

uint64_t sub_1C980D1C8(uint64_t result, uint64_t a2, int a3, char *a4, unsigned int a5, int *a6, int *a7, int a8)
{
  int v8;
  int v9;
  _BOOL8 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  BOOL v42;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;

  v46 = a2 + 30 * a3 + 10 * a5 + 240;
  v45 = a2 + 60 * a3 + 20 * a5;
  do
  {
    v8 = *a4;
    v9 = a4[1];
    v10 = v8 < v9;
    if (v8 <= v9)
      v11 = a4[1];
    else
      v11 = *a4;
    if (v8 > v9)
      v12 = a4[1];
    else
      v12 = *a4;
    v13 = a4[2];
    v14 = a4[3];
    if (v13 < v14)
      v15 = 3;
    else
      v15 = 4;
    if (v13 >= v14)
      v16 = a4[3];
    else
      v16 = a4[2];
    if (v13 < v14)
      v17 = a4[3];
    else
      v17 = a4[2];
    v18 = v11 - v16;
    if (v11 - v16 < 5)
      break;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = *(unsigned __int16 *)(v46 + 2 * v10);
    v24 = *(unsigned __int16 *)(v46 + 2 * v15);
    v49 = v18 - 4;
    v25 = v18 - 3;
    v26 = -2 * *(_DWORD *)(v45 + 4 * v15);
    v27 = -2 * *(_DWORD *)(v45 + 4 * v10);
    v28 = v16 + 4;
    v29 = 0x7FFFFFFF;
    v47 = v27;
    v48 = v26;
LABEL_19:
    v30 = 1 - (v16 + v19);
    v31 = v26 + v24 * (v16 + v19);
    v32 = v27 + v23 * (v28 + v19);
    do
    {
      if ((v16 - 1 + v19) >= 0xFFFFFFFB)
      {
        v33 = v16 + v19;
        v34 = a3 == 4;
        v35 = v16 + v19 + 4;
        v36 = v31 * (v16 + v19) + v32 * v35;
        v37 = *(unsigned __int8 *)(result + 30);
        v38 = -4 - (v16 + v19);
        if (v35 >= 0)
          v38 = v16 + v19 + 4;
        if (v38 + 1 < v37)
          v39 = v38 + 1;
        else
          v39 = *(unsigned __int8 *)(result + 30);
        v40 = v33 != -4 && a3 == 4;
        if (v30 < v37)
          v37 = v30;
        if (!v33)
          v34 = 0;
        v41 = v40 + v34 + v37 + v39;
        if (v36 + v41 * a8 < v29)
        {
          *a6 = v36;
          *a7 = v41;
          v22 = 1;
          v29 = v36 + v41 * a8;
          v20 = v16 + v19;
          v21 = v33 + 4;
          v26 = v48;
          v42 = v19++ == v49;
          v28 = v16 + 4;
          v27 = v47;
          if (!v42)
            goto LABEL_19;
          goto LABEL_40;
        }
      }
      ++v19;
      --v30;
      v31 += v24;
      v32 += v23;
    }
    while (v25 != v19);
    v35 = v21;
    v33 = v20;
    if ((v22 & 1) == 0)
      continue;
LABEL_40:
    a4[byte_1C9860D84[v15] - 1] = v33;
    a4[byte_1C9860D84[v10] - 1] = v35;
    v21 = v35;
    v20 = v33;
  }
  while (v12 - v17 > 4 || v12 - v20 > 4 || v21 - v17 > 4);
  return result;
}

uint64_t sub_1C980D404(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  result = *(unsigned int *)(a1 + 2112);
  if ((int)result < 2)
    return 0;
  v7 = *(uint64_t **)(a1 + 2064);
  v8 = *v7;
  v9 = a2 + *(_DWORD *)(*(_QWORD *)(*v7 + 16) + 2120) * a3;
  v10 = *(_QWORD *)(*v7 + 32);
  if (!*(_BYTE *)(v10 + 20))
  {
    while (result-- >= 1)
    {
      if (*(_DWORD *)(v7[result] + 52) <= v9)
        return result;
    }
    goto LABEL_13;
  }
  v11 = sub_1C9750C28(v10 + 1648, a2, a3);
  v12 = *(unsigned int *)(a1 + 2112);
  if ((int)v12 < 1)
  {
LABEL_13:
    if (dword_1ED1ACCC0 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "No slice found containing TB [%d][%d]!\n", a3, a2);
      syslog(27, "No slice found containing TB [%d][%d]!\n", a3, a2);
    }
    return 0;
  }
  v13 = v11;
  v14 = v12 + 1;
  while (1)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 2064) + 8 * (v14 - 2));
    v16 = *(_DWORD *)(v15 + 52);
    if (v16 <= v9)
    {
      v17 = sub_1C9750C28(*(_QWORD *)(v8 + 32) + 1648, v16 % *(_DWORD *)(*(_QWORD *)(v8 + 16) + 2120), v16 / *(_DWORD *)(*(_QWORD *)(v8 + 16) + 2120));
      if (v13 >= v17 && v13 <= *(_DWORD *)(v15 + 568) + v17)
        return v14 - 2;
    }
    if ((unint64_t)--v14 <= 1)
      goto LABEL_13;
  }
}

uint64_t sub_1C980D560(_QWORD *a1, int a2, int *a3, int *a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1[258] + 8 * (int)sub_1C980D404((uint64_t)a1, *a3, *a4));
  return sub_1C977E400(v8, a1[265], (_QWORD *)(a1[261] + 6464 * a2), a3, a4);
}

void sub_1C980D5BC(uint64_t a1)
{
  sub_1C9710F58(a1, 0);
}

int8x16_t *sub_1C980D5C4(int8x16_t *result, uint64_t a2, int a3, int a4, int a5, int a6, double a7, double a8, int8x16_t a9)
{
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int16x8_t v25;
  int8x16_t v26;
  const float *v27;
  uint8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  int32x4_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  uint16x8_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int16x8_t v44;
  int8x16_t v45;
  const float *v46;
  uint8x16_t v47;

  v9 = (int16x8_t)vld1q_dup_f32((const float *)a2);
  v10 = result[139];
  a9.i8[0] = *(_BYTE *)(a2 + 8);
  v11.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v11.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v12 = vqtbl1q_s8(v10, vdupq_lane_s8((int8x8_t)*(_OWORD *)&vandq_s8(a9, v11), 0));
  v13 = (_QWORD *)result->i64[1];
  v14 = v13[106];
  if (a4 && (a4 & 7) == 0)
  {
    v15 = 0;
    v16 = v13[118] + v13[116] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    v17 = *(int8x16_t *)((char *)&unk_1C9860F94 - (a5 >> 2) + 16);
    v18 = a2 - 12 * v14 + 24;
    v19.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v19.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v20.i64[0] = 0x3000300030003;
    v20.i64[1] = 0x3000300030003;
    v21.i64[0] = 0x101010101010101;
    v21.i64[1] = 0x101010101010101;
    do
    {
      v22 = *(int32x4_t *)(v18 - 24);
      v23 = *(int32x4_t *)(v18 - 12);
      v24 = *(int32x4_t *)(v18 + 12);
      v25 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(v22, v23), (int64x2_t)vzip1q_s32(*(int32x4_t *)v18, v24));
      v26 = vceqq_s8(vqtbl1q_s8(v10, vandq_s8((int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8((int8x16_t)v22, (int8x16_t)v23), (int16x8_t)vzip2q_s8(*(int8x16_t *)v18, (int8x16_t)v24)), v19)), v12);
      v27 = (const float *)(v16 + v15);
      v28 = (uint8x16_t)vld1q_dup_f32(v27);
      *(_DWORD *)(v16 + v15) = vmaxq_u8((uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v25, v9)), v20)), (int8x16_t)xmmword_1C9862F30), v21), v26), vmvnq_s8(v26)), v17), v28).u32[0];
      v17 = vextq_s8(v17, v17, 4uLL);
      v15 += 4;
      v18 += 48;
    }
    while (v15 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    v29 = 0;
    v30 = v13[121] + v13[117] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    v31 = *(int8x16_t *)((char *)&unk_1C9860F94 - (a6 >> 2) + 16);
    v32 = (int32x4_t *)(a2 - 12);
    v33 = 36 * v14;
    v34 = 3 * v14;
    v35 = 48 * v14;
    v36 = 8 * v34;
    v37 = 4 * v34;
    v38.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v38.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v39.i64[0] = 0x3000300030003;
    v39.i64[1] = 0x3000300030003;
    v40.i64[0] = 0x101010101010101;
    v40.i64[1] = 0x101010101010101;
    do
    {
      v41 = *(int32x4_t *)((char *)v32 + v37);
      v42 = *(int32x4_t *)((char *)v32 + v36);
      v43 = *(int32x4_t *)((char *)v32 + v33);
      v44 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(*v32, v41), (int64x2_t)vzip1q_s32(v42, v43));
      v45 = vceqq_s8(vqtbl1q_s8(v10, vandq_s8((int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8(*(int8x16_t *)v32, (int8x16_t)v41), (int16x8_t)vzip2q_s8((int8x16_t)v42, (int8x16_t)v43)), v38)), v12);
      v46 = (const float *)(v30 + v29);
      v47 = (uint8x16_t)vld1q_dup_f32(v46);
      *(_DWORD *)(v30 + v29) = vmaxq_u8((uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v44, v9)), v39)), (int8x16_t)xmmword_1C9862F30), v40), v45), vmvnq_s8(v45)), v31), v47).u32[0];
      v31 = vextq_s8(v31, v31, 4uLL);
      v29 += 4;
      v32 = (int32x4_t *)((char *)v32 + v35);
    }
    while (v29 < (uint64_t)a6 >> 2);
  }
  return result;
}

__int32 *sub_1C980D7B8(__int32 *result, const float *a2, int a3, int a4, int a5, int a6)
{
  int16x8_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  __int32 *v12;
  uint16x8_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const float *v16;
  uint8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  int8x16_t v28;
  int16x8_t v29;
  const float *v30;
  uint8x16_t v31;

  v6 = (int16x8_t)vld1q_dup_f32(a2);
  v7 = (_QWORD *)*((_QWORD *)result + 1);
  v8 = v7[106];
  if (a4 && (a4 & 7) == 0)
  {
    v9 = 0;
    v10 = v7[118] + v7[116] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    v11 = *(int8x16_t *)((char *)&unk_1C9860F94 - (a5 >> 2) + 16);
    v12 = (__int32 *)&a2[-3 * v8 + 6];
    v13.i64[0] = 0x3000300030003;
    v13.i64[1] = 0x3000300030003;
    v14.i64[0] = 0x101010101010101;
    v14.i64[1] = 0x101010101010101;
    do
    {
      result = v12 + 3;
      v15.i32[0] = *(v12 - 6);
      v15.i32[1] = *(v12 - 3);
      v15.i32[2] = *v12;
      v15.i32[3] = v12[3];
      v16 = (const float *)(v10 + v9);
      v17 = (uint8x16_t)vld1q_dup_f32(v16);
      *(_DWORD *)(v10 + v9) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v15, v6)), v13)), (int8x16_t)xmmword_1C9862F30), v14), v11), v17).u32[0];
      v11 = vextq_s8(v11, v11, 4uLL);
      v9 += 4;
      v12 += 12;
    }
    while (v9 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    v18 = 0;
    v19 = v7[121] + v7[117] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    v20 = *(int8x16_t *)((char *)&unk_1C9860F94 - (a6 >> 2) + 16);
    v21 = (__int32 *)(a2 - 3);
    v22 = 9 * v8;
    v23 = 3 * v8;
    v24 = 48 * v8;
    v25 = 2 * v23;
    v26 = v23;
    v27.i64[0] = 0x3000300030003;
    v27.i64[1] = 0x3000300030003;
    v28.i64[0] = 0x101010101010101;
    v28.i64[1] = 0x101010101010101;
    do
    {
      result = &v21[v22];
      v29.i32[0] = *v21;
      v29.i32[1] = v21[v26];
      v29.i32[2] = v21[v25];
      v29.i32[3] = v21[v22];
      v30 = (const float *)(v19 + v18);
      v31 = (uint8x16_t)vld1q_dup_f32(v30);
      *(_DWORD *)(v19 + v18) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v29, v6)), v27)), (int8x16_t)xmmword_1C9862F30), v28), v20), v31).u32[0];
      v20 = vextq_s8(v20, v20, 4uLL);
      v18 += 4;
      v21 = (__int32 *)((char *)v21 + v24);
    }
    while (v18 < (uint64_t)a6 >> 2);
  }
  return result;
}

int8x16_t *sub_1C980D944(int8x16_t *result, const double *a2, int a3, int a4, int a5, int a6)
{
  int8x16_t v6;
  int8x16_t v7;
  const double *v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  int16x8_t v21;
  uint16x8_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  const float *v33;
  uint8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  int16x8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t v44;
  int16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint8x16_t v56;
  const float *v57;
  uint8x16_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v6 = result[139];
  v7 = result[140];
  v8 = a2;
  v9 = (int16x8_t)vld1q_dup_f64(v8++);
  v10 = (int8x16_t)vld1q_dup_s16((const __int16 *)v8);
  v11.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v11.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v12 = vandq_s8(v10, v11);
  v59.val[0] = vqtbl1q_s8(v6, v12);
  v59.val[1] = vqtbl1q_s8(v7, v12);
  v13 = vqtbl2q_s8(v59, (int8x16_t)xmmword_1C9862F40);
  v14 = (_QWORD *)result->i64[1];
  v15 = v14[106];
  if (a4 && (a4 & 7) == 0)
  {
    v16 = 0;
    v17 = v14[118] + v14[116] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    v18 = *(int8x16_t *)((char *)&unk_1C9860F94 - (a5 >> 2) + 16);
    v19 = (uint64_t)a2 - 12 * v15 + 24;
    v20.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v20.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    v22.i64[0] = 0x3000300030003;
    v22.i64[1] = 0x3000300030003;
    v23.i64[0] = 0x101010101010101;
    v23.i64[1] = 0x101010101010101;
    do
    {
      v24 = *(int16x8_t *)(v19 - 24);
      v25 = *(int16x8_t *)(v19 - 12);
      v26 = *(int16x8_t *)(v19 + 12);
      v27 = (int32x4_t)vzip2q_s16(v24, v25);
      v28 = (int16x8_t)vzip1q_s64((int64x2_t)v24, (int64x2_t)v25);
      v29 = (int16x8_t)vzip1q_s64(*(int64x2_t *)v19, (int64x2_t)v26);
      v30 = vandq_s8((int8x16_t)vzip1q_s32(v27, (int32x4_t)vzip2q_s16(*(int16x8_t *)v19, v26)), v20);
      v60.val[0] = vqtbl1q_s8(v6, v30);
      v60.val[1] = vqtbl1q_s8(v7, v30);
      v31 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v60, (int8x16_t)xmmword_1C9862F40), v13), v21);
      v32 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v31, v31), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v28, v9)), v22), (int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v29, v9)), v22))), (int8x16_t)xmmword_1C9862F30)), v23), v18);
      v33 = (const float *)(v17 + v16);
      v34 = (uint8x16_t)vld1q_dup_f32(v33);
      *(_DWORD *)(v17 + v16) = vmaxq_u8(v32, v34).u32[0];
      v18 = vextq_s8(v18, v18, 4uLL);
      v16 += 4;
      v19 += 48;
    }
    while (v16 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    v35 = 0;
    v36 = v14[121] + v14[117] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    v37 = *(int8x16_t *)((char *)&unk_1C9860F94 - (a6 >> 2) + 16);
    v38 = (int16x8_t *)((char *)a2 - 12);
    v39 = 36 * v15;
    v40 = 3 * v15;
    v41 = 48 * v15;
    v42 = 8 * v40;
    v43 = 4 * v40;
    v44.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v44.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v45.i64[0] = -1;
    v45.i64[1] = -1;
    v46.i64[0] = 0x3000300030003;
    v46.i64[1] = 0x3000300030003;
    v47.i64[0] = 0x101010101010101;
    v47.i64[1] = 0x101010101010101;
    do
    {
      v48 = *(int16x8_t *)((char *)v38 + v43);
      v49 = *(int16x8_t *)((char *)v38 + v42);
      v50 = *(int16x8_t *)((char *)v38 + v39);
      v51 = (int32x4_t)vzip2q_s16(*v38, v48);
      v52 = (int16x8_t)vzip1q_s64(*(int64x2_t *)v38, (int64x2_t)v48);
      v53 = (int16x8_t)vzip1q_s64((int64x2_t)v49, (int64x2_t)v50);
      v54 = vandq_s8((int8x16_t)vzip1q_s32(v51, (int32x4_t)vzip2q_s16(v49, v50)), v44);
      v61.val[0] = vqtbl1q_s8(v6, v54);
      v61.val[1] = vqtbl1q_s8(v7, v54);
      v55 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v61, (int8x16_t)xmmword_1C9862F40), v13), v45);
      v56 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v55, v55), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v52, v9)), v46), (int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v53, v9)), v46))), (int8x16_t)xmmword_1C9862F30)), v47), v37);
      v57 = (const float *)(v36 + v35);
      v58 = (uint8x16_t)vld1q_dup_f32(v57);
      *(_DWORD *)(v36 + v35) = vmaxq_u8(v56, v58).u32[0];
      v37 = vextq_s8(v37, v37, 4uLL);
      v35 += 4;
      v38 = (int16x8_t *)((char *)v38 + v41);
    }
    while (v35 < (uint64_t)a6 >> 2);
  }
  return result;
}

uint64_t sub_1C980DB7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int16x8_t v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;

  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    v24 = 0;
    v25 = a5 >> 3;
    v26 = result + 2 * a2;
    v27 = result - 2 * a2;
    v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFF00FF00FF00FFLL;
    v32.i64[1] = 0xFF00FF00FF00FFLL;
    _X5 = result;
    v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        v35 = *(int16x8_t *)(v30 + 16 * v24);
        v36 = *(int16x8_t *)(v28 + 16 * v24);
        v37 = *(int16x8_t *)(v27 + 16 * v24);
        v38 = *(int16x8_t *)(result + 16 * v24);
        v39 = *(int16x8_t *)(v26 + 16 * v24);
        v40 = *(int16x8_t *)(v34 + 16 * v24);
        v41 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v24));
        v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1C9862F60);
        v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1C9862F60);
        v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          v49 = (int16x8_t)vandq_s8(v46, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1C9862F50));
          v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1C9862F60);
          v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          v53 = (int8x16_t)vcgtq_s16(v52, v44);
          v54 = (int8x16_t)vcgtq_s16(v52, v45);
          v55 = vsubq_s16(v38, v37);
          v56 = vsubq_s16(v39, v36);
          v57 = vrhaddq_s16(v35, v37);
          v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            v59 = vaddq_s16(v49, v49);
            v60 = vaddq_s16(v36, v35);
            v61 = vaddq_s16(v38, v37);
            v62 = vaddq_s16(v40, v39);
            v63 = vaddq_s16(v48, v40);
            v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            v74 = vshrq_n_s16(v70, 1uLL);
            v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            v80 = vshrq_n_s16(v49, 1uLL);
            v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1C980DFF0(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int16x8_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 8 * a2;
    v10 = 12 * a2;
    v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFF00FF00FF00FFLL;
    v15.i64[1] = 0xFF00FF00FF00FFLL;
    v16 = 14 * a2;
    do
    {
      v18 = *a4++;
      v17 = v18;
      if (v18)
      {
        v19 = *(int16x8_t *)(result - 8);
        v20 = *(int16x8_t *)(result + v6 - 8);
        v21 = *(int16x8_t *)(result + v7 - 8);
        v22 = *(int16x8_t *)(result + v8 - 8);
        v23 = *(int16x8_t *)(result + v9 - 8);
        v24 = *(int16x8_t *)(result + v11 - 8);
        v25 = *(int16x8_t *)(result + v10 - 8);
        v26 = *(int16x8_t *)(result + v16 - 8);
        v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        v43 = (int16x8_t)vzip2q_s64(v31, v39);
        v44 = (int16x8_t)vzip1q_s64(v33, v41);
        v45 = (int16x8_t)vzip2q_s64(v33, v41);
        v46 = (int16x8_t)vzip1q_s64(v32, v40);
        v47 = (int16x8_t)vzip2q_s64(v32, v40);
        v48 = (int16x8_t)vzip1q_s64(v34, v42);
        v49 = vdupq_n_s16(*a3);
        v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1C9862F60);
        v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1C9862F60);
        v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          v55 = (int16x8_t)vzip1q_s64(v31, v39);
          v56 = (int16x8_t)vzip2q_s64(v34, v42);
          v57 = (int16x8_t)vandq_s8(v54, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1C9862F50));
          v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1C9862F60);
          v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          v61 = (int8x16_t)vcgtq_s16(v60, v52);
          v62 = (int8x16_t)vcgtq_s16(v60, v53);
          v63 = vsubq_s16(v43, v48);
          v64 = vsubq_s16(v45, v46);
          v65 = vrhaddq_s16(v44, v48);
          v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            v67 = vaddq_s16(v57, v57);
            v68 = vaddq_s16(v44, v46);
            v69 = vaddq_s16(v48, v43);
            v70 = vaddq_s16(v45, v47);
            v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            v81 = vshrq_n_s16(v77, 1uLL);
            v82 = vnegq_s16(v81);
            v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            v108 = vshrq_n_s16(v57, 1uLL);
            v109 = vnegq_s16(v108);
            v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            v118 = vtrn1q_s32(v114, v116);
            v119 = vtrn2q_s32(v114, v116);
            v120 = vtrn1q_s32(v115, v117);
            v121 = vtrn2q_s32(v115, v117);
            *(_QWORD *)(result - 4) = v118.i64[0];
            *(_QWORD *)(result + v6 - 4) = v120.i64[0];
            *(_QWORD *)(result + v7 - 4) = v119.i64[0];
            *(_QWORD *)(result + v8 - 4) = v121.i64[0];
            *(_QWORD *)(result + v9 - 4) = v118.i64[1];
            *(_QWORD *)(result + v11 - 4) = v120.i64[1];
            *(_QWORD *)(result + v10 - 4) = v119.i64[1];
            *(_QWORD *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C980E4F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int16x8_t v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int8x16_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;

  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    v24 = 0;
    v25 = a5 >> 3;
    v26 = result + 2 * a2;
    v27 = result - 2 * a2;
    v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFE00FE00FE00FE00;
    v32.i64[1] = 0xFE00FE00FE00FE00;
    _X5 = result;
    v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        v35 = *(int16x8_t *)(v30 + 16 * v24);
        v36 = *(int16x8_t *)(v28 + 16 * v24);
        v37 = *(int16x8_t *)(v27 + 16 * v24);
        v38 = *(int16x8_t *)(result + 16 * v24);
        v39 = *(int16x8_t *)(v26 + 16 * v24);
        v40 = *(int16x8_t *)(v34 + 16 * v24);
        v41 = vdupq_n_s16(2 * *(unsigned __int8 *)(a3 + v24));
        v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1C9862F60);
        v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1C9862F60);
        v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1C9862F50);
          v50 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16(v49, v49), v46);
          v51 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v50, vshlq_n_s16(v50, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          v52 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v51), (int8x16_t)v51), (int8x16_t)xmmword_1C9862F60);
          v53 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          v54 = (int8x16_t)vcgtq_s16(v53, v44);
          v55 = (int8x16_t)vcgtq_s16(v53, v45);
          v56 = vsubq_s16(v38, v37);
          v57 = vsubq_s16(v39, v36);
          v58 = vrhaddq_s16(v35, v37);
          v59 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v52))
          {
            v60 = vaddq_s16(v50, v50);
            v61 = vaddq_s16(v36, v35);
            v62 = vaddq_s16(v38, v37);
            v63 = vaddq_s16(v40, v39);
            v64 = vaddq_s16(v48, v40);
            v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v62, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v60, v37)), vsubq_s16(v37, v60));
            v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v62, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v60, v38)), vsubq_s16(v38, v60));
            v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v60, v36)), vsubq_s16(v36, v60));
            v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, v62), 2uLL), vaddq_s16(v60, v39)), vsubq_s16(v39, v60));
            v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v61, (uint16x8_t)v62)), 2uLL), vaddq_s16(v60, v35)), vsubq_s16(v35, v60));
            v70 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v64, (int16x8_t)vhaddq_u16((uint16x8_t)v63, (uint16x8_t)v62)), 2uLL), vaddq_s16(v60, v40)), vsubq_s16(v40, v60));
            v71 = (int16x8_t)vbicq_s8((int8x16_t)v50, v52);
            v62.i64[0] = 0x9000900090009;
            v62.i64[1] = 0x9000900090009;
            v72 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v56, v62), v57, v29), 4uLL);
            v73 = (int8x16_t)vcgtq_s16(vmulq_s16(v71, v31), vabsq_s16(v72));
            v74 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v72, v73), v71), vnegq_s16(v71));
            v75 = vshrq_n_s16(v71, 1uLL);
            v76 = vnegq_s16(v75);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v69, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v58, v36), v74), v75), v76), vandq_s8(v54, v73)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v65, (int8x16_t)vaddq_s16(v74, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v66, (int8x16_t)vsubq_s16(v38, v74)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v68, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v59, v39), v74), v75), v76), vandq_s8(v55, v73)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v70, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v77.i64[0] = 0x9000900090009;
            v77.i64[1] = 0x9000900090009;
            v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v56, v77), v57, v29), 4uLL);
            v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v50, v31), vabsq_s16(v78));
            v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v50), vnegq_s16(v50));
            v81 = vshrq_n_s16(v50, 1uLL);
            v82 = vnegq_s16(v81);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v58, v36), v80), v81), v82), vandq_s8(v54, v79)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v80, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v80), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v59, v39), v80), v81), v82), vandq_s8(v55, v79)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1C980E974(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int8x16_t v60;
  int16x8_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int8x16_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int16x8_t v106;
  int8x16_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 8 * a2;
    v10 = 12 * a2;
    v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFE00FE00FE00FE00;
    v15.i64[1] = 0xFE00FE00FE00FE00;
    v16 = 14 * a2;
    do
    {
      v18 = *a4++;
      v17 = v18;
      if (v18)
      {
        v19 = *(int16x8_t *)(result - 8);
        v20 = *(int16x8_t *)(result + v6 - 8);
        v21 = *(int16x8_t *)(result + v7 - 8);
        v22 = *(int16x8_t *)(result + v8 - 8);
        v23 = *(int16x8_t *)(result + v9 - 8);
        v24 = *(int16x8_t *)(result + v11 - 8);
        v25 = *(int16x8_t *)(result + v10 - 8);
        v26 = *(int16x8_t *)(result + v16 - 8);
        v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        v43 = (int16x8_t)vzip2q_s64(v31, v39);
        v44 = (int16x8_t)vzip1q_s64(v33, v41);
        v45 = (int16x8_t)vzip2q_s64(v33, v41);
        v46 = (int16x8_t)vzip1q_s64(v32, v40);
        v47 = (int16x8_t)vzip2q_s64(v32, v40);
        v48 = (int16x8_t)vzip1q_s64(v34, v42);
        v49 = vdupq_n_s16(2 * *a3);
        v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1C9862F60);
        v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1C9862F60);
        v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          v55 = (int16x8_t)vzip1q_s64(v31, v39);
          v56 = (int16x8_t)vzip2q_s64(v34, v42);
          v57 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1C9862F50);
          v58 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16(v57, v57), v54);
          v59 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v58, vshlq_n_s16(v58, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          v60 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v59), (int8x16_t)v59), (int8x16_t)xmmword_1C9862F60);
          v61 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          v62 = (int8x16_t)vcgtq_s16(v61, v52);
          v63 = (int8x16_t)vcgtq_s16(v61, v53);
          v64 = vsubq_s16(v43, v48);
          v65 = vsubq_s16(v45, v46);
          v66 = vrhaddq_s16(v44, v48);
          v67 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v60))
          {
            v68 = vaddq_s16(v58, v58);
            v69 = vaddq_s16(v44, v46);
            v70 = vaddq_s16(v48, v43);
            v71 = vaddq_s16(v45, v47);
            v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v70, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v68, v48)), vsubq_s16(v48, v68));
            v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v70, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v68, v43)), vsubq_s16(v43, v68));
            v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v69, v70), 2uLL), vaddq_s16(v68, v46)), vsubq_s16(v46, v68));
            v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v71, v70), 2uLL), vaddq_s16(v68, v45)), vsubq_s16(v45, v68));
            v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v69, (uint16x8_t)v70)), 2uLL), vaddq_s16(v68, v44)), vsubq_s16(v44, v68));
            v77 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v71, (uint16x8_t)v70)), 2uLL), vaddq_s16(v68, v47)), vsubq_s16(v47, v68));
            v78 = (int16x8_t)vbicq_s8((int8x16_t)v58, v60);
            v79 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v64, v12), v65, v13), 4uLL);
            v80 = (int8x16_t)vcgtq_s16(vmulq_s16(v78, v14), vabsq_s16(v79));
            v81 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v79, v80), v78), vnegq_s16(v78));
            v82 = vshrq_n_s16(v78, 1uLL);
            v83 = vnegq_s16(v82);
            v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v76, (int8x16_t)v44), (int16x8_t)0), v15);
            v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v66, v46), v81), v82), v83), vandq_s8(v62, v80)), v46)), (int16x8_t)0), v15);
            v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v72, (int8x16_t)vaddq_s16(v81, v48)), (int16x8_t)0), v15);
            v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v73, (int8x16_t)vsubq_s16(v43, v81)), (int16x8_t)0), v15);
            v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v75, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v67, v45), v81), v82), v83), vandq_s8(v63, v80)), v45)), (int16x8_t)0), v15);
            v89 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v77, (int8x16_t)v47), (int16x8_t)0), v15);
            v90 = (int32x4_t)vtrn1q_s16(v55, v84);
            v91 = (int32x4_t)vtrn2q_s16(v55, v84);
            v92 = (int32x4_t)vtrn1q_s16(v85, v86);
            v93 = (int32x4_t)vtrn2q_s16(v85, v86);
            v94 = (int64x2_t)vtrn1q_s32(v90, v92);
            v95 = (int64x2_t)vtrn2q_s32(v90, v92);
            v96 = (int64x2_t)vtrn1q_s32(v91, v93);
            v97 = (int64x2_t)vtrn2q_s32(v91, v93);
            v98 = (int32x4_t)vtrn1q_s16(v87, v88);
            v99 = (int32x4_t)vtrn2q_s16(v87, v88);
            v100 = (int32x4_t)vtrn1q_s16(v89, v56);
            v101 = (int32x4_t)vtrn2q_s16(v89, v56);
            v102 = (int64x2_t)vtrn1q_s32(v98, v100);
            v103 = (int64x2_t)vtrn2q_s32(v98, v100);
            v104 = (int64x2_t)vtrn1q_s32(v99, v101);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v96, v104);
            v105 = (int64x2_t)vtrn2q_s32(v99, v101);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v95, v103);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v97, v105);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v96, v104);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v97, v105);
          }
          else
          {
            v106 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v64, v12), v65, v13), 4uLL);
            v107 = (int8x16_t)vcgtq_s16(vmulq_s16(v58, v14), vabsq_s16(v106));
            v108 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v107), v58), vnegq_s16(v58));
            v109 = vshrq_n_s16(v58, 1uLL);
            v110 = vnegq_s16(v109);
            v111 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v66, v46), v108), v109), v110), vandq_s8(v62, v107)), v46), (int16x8_t)0), v15);
            v112 = vminq_s16(vmaxq_s16(vaddq_s16(v108, v48), (int16x8_t)0), v15);
            v113 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v108), (int16x8_t)0), v15);
            v114 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v67, v45), v108), v109), v110), vandq_s8(v63, v107)), v45), (int16x8_t)0), v15);
            v115 = (int32x4_t)vtrn1q_s16(v111, v112);
            v116 = (int32x4_t)vtrn2q_s16(v111, v112);
            v117 = (int32x4_t)vtrn1q_s16(v113, v114);
            v118 = (int32x4_t)vtrn2q_s16(v113, v114);
            v119 = vtrn1q_s32(v115, v117);
            v120 = vtrn2q_s32(v115, v117);
            v121 = vtrn1q_s32(v116, v118);
            v122 = vtrn2q_s32(v116, v118);
            *(_QWORD *)(result - 4) = v119.i64[0];
            *(_QWORD *)(result + v6 - 4) = v121.i64[0];
            *(_QWORD *)(result + v7 - 4) = v120.i64[0];
            *(_QWORD *)(result + v8 - 4) = v122.i64[0];
            *(_QWORD *)(result + v9 - 4) = v119.i64[1];
            *(_QWORD *)(result + v11 - 4) = v121.i64[1];
            *(_QWORD *)(result + v10 - 4) = v120.i64[1];
            *(_QWORD *)(result + v16 - 4) = v122.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C980EE84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int16x8_t v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;

  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    v24 = 0;
    v25 = a5 >> 3;
    v26 = result + 2 * a2;
    v27 = result - 2 * a2;
    v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFC00FC00FC00FC00;
    v32.i64[1] = 0xFC00FC00FC00FC00;
    _X5 = result;
    v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        v35 = *(int16x8_t *)(v30 + 16 * v24);
        v36 = *(int16x8_t *)(v28 + 16 * v24);
        v37 = *(int16x8_t *)(v27 + 16 * v24);
        v38 = *(int16x8_t *)(result + 16 * v24);
        v39 = *(int16x8_t *)(v26 + 16 * v24);
        v40 = *(int16x8_t *)(v34 + 16 * v24);
        v41 = vdupq_n_s16(4 * *(unsigned __int8 *)(a3 + v24));
        v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1C9862F60);
        v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1C9862F60);
        v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          v49 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1C9862F50), 2uLL), v46);
          v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1C9862F60);
          v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          v53 = (int8x16_t)vcgtq_s16(v52, v44);
          v54 = (int8x16_t)vcgtq_s16(v52, v45);
          v55 = vsubq_s16(v38, v37);
          v56 = vsubq_s16(v39, v36);
          v57 = vrhaddq_s16(v35, v37);
          v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            v59 = vaddq_s16(v49, v49);
            v60 = vaddq_s16(v36, v35);
            v61 = vaddq_s16(v38, v37);
            v62 = vaddq_s16(v40, v39);
            v63 = vaddq_s16(v48, v40);
            v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            v74 = vshrq_n_s16(v70, 1uLL);
            v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            v80 = vshrq_n_s16(v49, 1uLL);
            v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1C980F300(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int16x8_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 8 * a2;
    v10 = 12 * a2;
    v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    v16 = 14 * a2;
    do
    {
      v18 = *a4++;
      v17 = v18;
      if (v18)
      {
        v19 = *(int16x8_t *)(result - 8);
        v20 = *(int16x8_t *)(result + v6 - 8);
        v21 = *(int16x8_t *)(result + v7 - 8);
        v22 = *(int16x8_t *)(result + v8 - 8);
        v23 = *(int16x8_t *)(result + v9 - 8);
        v24 = *(int16x8_t *)(result + v11 - 8);
        v25 = *(int16x8_t *)(result + v10 - 8);
        v26 = *(int16x8_t *)(result + v16 - 8);
        v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        v43 = (int16x8_t)vzip2q_s64(v31, v39);
        v44 = (int16x8_t)vzip1q_s64(v33, v41);
        v45 = (int16x8_t)vzip2q_s64(v33, v41);
        v46 = (int16x8_t)vzip1q_s64(v32, v40);
        v47 = (int16x8_t)vzip2q_s64(v32, v40);
        v48 = (int16x8_t)vzip1q_s64(v34, v42);
        v49 = vdupq_n_s16(4 * *a3);
        v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1C9862F60);
        v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1C9862F60);
        v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          v55 = (int16x8_t)vzip1q_s64(v31, v39);
          v56 = (int16x8_t)vzip2q_s64(v34, v42);
          v57 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1C9862F50), 2uLL), v54);
          v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1C9862F60);
          v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          v61 = (int8x16_t)vcgtq_s16(v60, v52);
          v62 = (int8x16_t)vcgtq_s16(v60, v53);
          v63 = vsubq_s16(v43, v48);
          v64 = vsubq_s16(v45, v46);
          v65 = vrhaddq_s16(v44, v48);
          v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            v67 = vaddq_s16(v57, v57);
            v68 = vaddq_s16(v44, v46);
            v69 = vaddq_s16(v48, v43);
            v70 = vaddq_s16(v45, v47);
            v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            v81 = vshrq_n_s16(v77, 1uLL);
            v82 = vnegq_s16(v81);
            v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            v108 = vshrq_n_s16(v57, 1uLL);
            v109 = vnegq_s16(v108);
            v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            v118 = vtrn1q_s32(v114, v116);
            v119 = vtrn2q_s32(v114, v116);
            v120 = vtrn1q_s32(v115, v117);
            v121 = vtrn2q_s32(v115, v117);
            *(_QWORD *)(result - 4) = v118.i64[0];
            *(_QWORD *)(result + v6 - 4) = v120.i64[0];
            *(_QWORD *)(result + v7 - 4) = v119.i64[0];
            *(_QWORD *)(result + v8 - 4) = v121.i64[0];
            *(_QWORD *)(result + v9 - 4) = v118.i64[1];
            *(_QWORD *)(result + v11 - 4) = v120.i64[1];
            *(_QWORD *)(result + v10 - 4) = v119.i64[1];
            *(_QWORD *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C980F810(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int16x8_t v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;

  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    v24 = 0;
    v25 = a5 >> 3;
    v26 = result + 2 * a2;
    v27 = result - 2 * a2;
    v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xF800F800F800F800;
    v32.i64[1] = 0xF800F800F800F800;
    _X5 = result;
    v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        v35 = *(int16x8_t *)(v30 + 16 * v24);
        v36 = *(int16x8_t *)(v28 + 16 * v24);
        v37 = *(int16x8_t *)(v27 + 16 * v24);
        v38 = *(int16x8_t *)(result + 16 * v24);
        v39 = *(int16x8_t *)(v26 + 16 * v24);
        v40 = *(int16x8_t *)(v34 + 16 * v24);
        v41 = vdupq_n_s16(8 * *(unsigned __int8 *)(a3 + v24));
        v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1C9862F60);
        v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1C9862F60);
        v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          v49 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1C9862F50), 3uLL), v46);
          v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1C9862F60);
          v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          v53 = (int8x16_t)vcgtq_s16(v52, v44);
          v54 = (int8x16_t)vcgtq_s16(v52, v45);
          v55 = vsubq_s16(v38, v37);
          v56 = vsubq_s16(v39, v36);
          v57 = vrhaddq_s16(v35, v37);
          v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            v59 = vaddq_s16(v49, v49);
            v60 = vaddq_s16(v36, v35);
            v61 = vaddq_s16(v38, v37);
            v62 = vaddq_s16(v40, v39);
            v63 = vaddq_s16(v48, v40);
            v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            v74 = vshrq_n_s16(v70, 1uLL);
            v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            v80 = vshrq_n_s16(v49, 1uLL);
            v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1C980FC8C(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int16x8_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 8 * a2;
    v10 = 12 * a2;
    v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xF800F800F800F800;
    v15.i64[1] = 0xF800F800F800F800;
    v16 = 14 * a2;
    do
    {
      v18 = *a4++;
      v17 = v18;
      if (v18)
      {
        v19 = *(int16x8_t *)(result - 8);
        v20 = *(int16x8_t *)(result + v6 - 8);
        v21 = *(int16x8_t *)(result + v7 - 8);
        v22 = *(int16x8_t *)(result + v8 - 8);
        v23 = *(int16x8_t *)(result + v9 - 8);
        v24 = *(int16x8_t *)(result + v11 - 8);
        v25 = *(int16x8_t *)(result + v10 - 8);
        v26 = *(int16x8_t *)(result + v16 - 8);
        v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        v43 = (int16x8_t)vzip2q_s64(v31, v39);
        v44 = (int16x8_t)vzip1q_s64(v33, v41);
        v45 = (int16x8_t)vzip2q_s64(v33, v41);
        v46 = (int16x8_t)vzip1q_s64(v32, v40);
        v47 = (int16x8_t)vzip2q_s64(v32, v40);
        v48 = (int16x8_t)vzip1q_s64(v34, v42);
        v49 = vdupq_n_s16(8 * *a3);
        v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1C9862F60);
        v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1C9862F60);
        v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          v55 = (int16x8_t)vzip1q_s64(v31, v39);
          v56 = (int16x8_t)vzip2q_s64(v34, v42);
          v57 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1C9862F50), 3uLL), v54);
          v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1C9862F60);
          v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          v61 = (int8x16_t)vcgtq_s16(v60, v52);
          v62 = (int8x16_t)vcgtq_s16(v60, v53);
          v63 = vsubq_s16(v43, v48);
          v64 = vsubq_s16(v45, v46);
          v65 = vrhaddq_s16(v44, v48);
          v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            v67 = vaddq_s16(v57, v57);
            v68 = vaddq_s16(v44, v46);
            v69 = vaddq_s16(v48, v43);
            v70 = vaddq_s16(v45, v47);
            v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            v81 = vshrq_n_s16(v77, 1uLL);
            v82 = vnegq_s16(v81);
            v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            v108 = vshrq_n_s16(v57, 1uLL);
            v109 = vnegq_s16(v108);
            v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            v118 = vtrn1q_s32(v114, v116);
            v119 = vtrn2q_s32(v114, v116);
            v120 = vtrn1q_s32(v115, v117);
            v121 = vtrn2q_s32(v115, v117);
            *(_QWORD *)(result - 4) = v118.i64[0];
            *(_QWORD *)(result + v6 - 4) = v120.i64[0];
            *(_QWORD *)(result + v7 - 4) = v119.i64[0];
            *(_QWORD *)(result + v8 - 4) = v121.i64[0];
            *(_QWORD *)(result + v9 - 4) = v118.i64[1];
            *(_QWORD *)(result + v11 - 4) = v120.i64[1];
            *(_QWORD *)(result + v10 - 4) = v119.i64[1];
            *(_QWORD *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C981019C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int16x8_t v30;
  uint64_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;

  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    v24 = 0;
    v25 = a5 >> 3;
    v26 = result + 2 * a2;
    v27 = result - 2 * a2;
    v28 = result - 4 * a2;
    v29 = result - 6 * a2;
    v30.i64[0] = 0x3000300030003;
    v30.i64[1] = 0x3000300030003;
    v31 = result + 4 * a2;
    v32.i64[0] = 0xA000A000A000ALL;
    v32.i64[1] = 0xA000A000A000ALL;
    v33.i64[0] = 0xF000F000F000F000;
    v33.i64[1] = 0xF000F000F000F000;
    _X5 = result;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        v35 = *(int16x8_t *)(v29 + 16 * v24);
        v36 = *(int16x8_t *)(v28 + 16 * v24);
        v37 = *(int16x8_t *)(v27 + 16 * v24);
        v38 = *(int16x8_t *)(result + 16 * v24);
        v39 = *(int16x8_t *)(v26 + 16 * v24);
        v40 = *(int16x8_t *)(v31 + 16 * v24);
        v41 = vdupq_n_s16(16 * *(unsigned __int8 *)(a3 + v24));
        v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1C9862F60);
        v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1C9862F60);
        v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          v49 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1C9862F50), 4uLL), v46);
          v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1C9862F60);
          v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          v53 = (int8x16_t)vcgtq_s16(v52, v44);
          v54 = (int8x16_t)vcgtq_s16(v52, v45);
          v55 = vsubq_s16(v38, v37);
          v56 = vsubq_s16(v39, v36);
          v57 = vrhaddq_s16(v35, v37);
          v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            v59 = vaddq_s16(v49, v49);
            v60 = vaddq_s16(v36, v35);
            v61 = vaddq_s16(v38, v37);
            v62 = vaddq_s16(v40, v39);
            v63 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v48, v40), (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            v69 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v60.i64[0] = 0x9000900090009;
            v60.i64[1] = 0x9000900090009;
            v70 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v55.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v56.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v55, v60), v56, v30), 4uLL);
            v71 = (int8x16_t)vcgtq_s16(vmulq_s16(v69, v32), vabsq_s16(v70));
            v72 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v70, v71), v69), vnegq_s16(v69));
            v73 = vshrq_n_s16(v69, 1uLL);
            v74 = vnegq_s16(v73);
            *(int16x8_t *)(v29 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)v35), (int16x8_t)0), v33);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v72), v73), v74), vandq_s8(v53, v71)), v36)), (int16x8_t)0), v33);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v63, (int8x16_t)vaddq_s16(v72, v37)), (int16x8_t)0), v33);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vsubq_s16(v38, v72)), (int16x8_t)0), v33);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v72), v73), v74), vandq_s8(v54, v71)), v39)), (int16x8_t)0), v33);
            *(int16x8_t *)(v31 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v40), (int16x8_t)0), v33);
          }
          else
          {
            v75.i64[0] = 0x9000900090009;
            v75.i64[1] = 0x9000900090009;
            v76 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v55.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v56.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v55, v75), v56, v30), 4uLL);
            v77 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v32), vabsq_s16(v76));
            v78 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v76, v77), v49), vnegq_s16(v49));
            v79 = vshrq_n_s16(v49, 1uLL);
            v80 = vnegq_s16(v79);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v78), v79), v80), vandq_s8(v53, v77)), v36), (int16x8_t)0), v33);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v78, v37), (int16x8_t)0), v33);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v78), (int16x8_t)0), v33);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v78), v79), v80), vandq_s8(v54, v77)), v39), (int16x8_t)0), v33);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1C981063C(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int8x16_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 8 * a2;
    v10 = 12 * a2;
    v11 = 10 * a2;
    v12.i64[0] = 0x3000300030003;
    v12.i64[1] = 0x3000300030003;
    v13.i64[0] = 0xA000A000A000ALL;
    v13.i64[1] = 0xA000A000A000ALL;
    v14.i64[0] = 0xF000F000F000F000;
    v14.i64[1] = 0xF000F000F000F000;
    v15 = 14 * a2;
    do
    {
      v17 = *a4++;
      v16 = v17;
      if (v17)
      {
        v18 = *(int16x8_t *)(result - 8);
        v19 = *(int16x8_t *)(result + v6 - 8);
        v20 = *(int16x8_t *)(result + v7 - 8);
        v21 = *(int16x8_t *)(result + v8 - 8);
        v22 = *(int16x8_t *)(result + v9 - 8);
        v23 = *(int16x8_t *)(result + v11 - 8);
        v24 = *(int16x8_t *)(result + v10 - 8);
        v25 = *(int16x8_t *)(result + v15 - 8);
        v26 = (int32x4_t)vtrn1q_s16(v18, v19);
        v27 = (int32x4_t)vtrn2q_s16(v18, v19);
        v28 = (int32x4_t)vtrn1q_s16(v20, v21);
        v29 = (int32x4_t)vtrn2q_s16(v20, v21);
        v30 = (int64x2_t)vtrn1q_s32(v26, v28);
        v31 = (int64x2_t)vtrn2q_s32(v26, v28);
        v32 = (int64x2_t)vtrn1q_s32(v27, v29);
        v33 = (int64x2_t)vtrn2q_s32(v27, v29);
        v34 = (int32x4_t)vtrn1q_s16(v22, v23);
        v35 = (int32x4_t)vtrn2q_s16(v22, v23);
        v36 = (int32x4_t)vtrn1q_s16(v24, v25);
        v37 = (int32x4_t)vtrn2q_s16(v24, v25);
        v38 = (int64x2_t)vtrn1q_s32(v34, v36);
        v39 = (int64x2_t)vtrn2q_s32(v34, v36);
        v40 = (int64x2_t)vtrn1q_s32(v35, v37);
        v41 = (int64x2_t)vtrn2q_s32(v35, v37);
        v42 = (int16x8_t)vzip2q_s64(v30, v38);
        v43 = (int16x8_t)vzip1q_s64(v32, v40);
        v44 = (int16x8_t)vzip2q_s64(v32, v40);
        v45 = (int16x8_t)vzip1q_s64(v31, v39);
        v46 = (int16x8_t)vzip2q_s64(v31, v39);
        v47 = (int16x8_t)vzip1q_s64(v33, v41);
        v48 = vdupq_n_s16(16 * *a3);
        v49 = vabsq_s16(vsubq_s16(vaddq_s16(v43, v47), vaddq_s16(v45, v45)));
        v50 = vabsq_s16(vsubq_s16(vaddq_s16(v46, v42), vaddq_s16(v44, v44)));
        v51 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v49), v49), (int8x16_t)xmmword_1C9862F60);
        v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1C9862F60);
        v53 = (int8x16_t)vcgtq_s16(v48, vaddq_s16(v52, v51));
        if (vaddlvq_u16((uint16x8_t)v53))
        {
          v54 = (int16x8_t)vzip1q_s64(v30, v38);
          v55 = (int16x8_t)vzip2q_s64(v33, v41);
          v56 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v16), (int8x16_t)xmmword_1C9862F50), 4uLL), v53);
          v57 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v56, vshlq_n_s16(v56, 2uLL)), vabdq_s16(v47, v42)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v48, 3uLL), vaddq_s16(v50, v49)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v48, 3uLL), vabaq_s16(vabdq_s16(v55, v42), v54, v47))));
          v58 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v57), (int8x16_t)v57), (int8x16_t)xmmword_1C9862F60);
          v59 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v48, (uint16x8_t)v48, 1uLL), 3uLL);
          v60 = (int8x16_t)vcgtq_s16(v59, v51);
          v61 = (int8x16_t)vcgtq_s16(v59, v52);
          v62 = vsubq_s16(v42, v47);
          v63 = vsubq_s16(v44, v45);
          v64 = vrhaddq_s16(v43, v47);
          v65 = vrhaddq_s16(v46, v42);
          if (vaddlvq_u16((uint16x8_t)v58))
          {
            v66 = vaddq_s16(v56, v56);
            v67 = vaddq_s16(v43, v45);
            v68 = vaddq_s16(v47, v42);
            v69 = vaddq_s16(v44, v46);
            v70 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v68, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v43, (uint16x8_t)v44)), 2uLL), vaddq_s16(v66, v47)), vsubq_s16(v47, v66));
            v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v68, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v46, (uint16x8_t)v45)), 2uLL), vaddq_s16(v66, v42)), vsubq_s16(v42, v66));
            v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v67, v68), 2uLL), vaddq_s16(v66, v45)), vsubq_s16(v45, v66));
            v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v69, v68), 2uLL), vaddq_s16(v66, v44)), vsubq_s16(v44, v66));
            v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v54, v43), (int16x8_t)vhaddq_u16((uint16x8_t)v67, (uint16x8_t)v68)), 2uLL), vaddq_s16(v66, v43)), vsubq_s16(v43, v66));
            v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v46, v55), (int16x8_t)vhaddq_u16((uint16x8_t)v69, (uint16x8_t)v68)), 2uLL), vaddq_s16(v66, v46)), vsubq_s16(v46, v66));
            v76 = (int16x8_t)vbicq_s8((int8x16_t)v56, v58);
            v69.i64[0] = 0x9000900090009;
            v69.i64[1] = 0x9000900090009;
            v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v63.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v62, v69), v63, v12), 4uLL);
            v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v76, v13), vabsq_s16(v77));
            v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v76), vnegq_s16(v76));
            v80 = vshrq_n_s16(v76, 1uLL);
            v81 = vnegq_s16(v80);
            v82 = (int16x8_t)vbslq_s8(v58, v72, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v64, v45), v79), v80), v81), vandq_s8(v60, v78)), v45));
            v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v74, (int8x16_t)v43), (int16x8_t)0), v14);
            v84 = vminq_s16(vmaxq_s16(v82, (int16x8_t)0), v14);
            v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v70, (int8x16_t)vaddq_s16(v79, v47)), (int16x8_t)0), v14);
            v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v71, (int8x16_t)vsubq_s16(v42, v79)), (int16x8_t)0), v14);
            v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v65, v44), v79), v80), v81), vandq_s8(v61, v78)), v44)), (int16x8_t)0), v14);
            v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v75, (int8x16_t)v46), (int16x8_t)0), v14);
            v89 = (int32x4_t)vtrn1q_s16(v54, v83);
            v90 = (int32x4_t)vtrn2q_s16(v54, v83);
            v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            v99 = (int32x4_t)vtrn1q_s16(v88, v55);
            v100 = (int32x4_t)vtrn2q_s16(v88, v55);
            v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v15 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            v105.i64[0] = 0x9000900090009;
            v105.i64[1] = 0x9000900090009;
            v106 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v63.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v62, v105), v63, v12), 4uLL);
            v107 = (int8x16_t)vcgtq_s16(vmulq_s16(v56, v13), vabsq_s16(v106));
            v108 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v107), v56), vnegq_s16(v56));
            v109 = vshrq_n_s16(v56, 1uLL);
            v110 = vnegq_s16(v109);
            v111 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v64, v45), v108), v109), v110), vandq_s8(v60, v107)), v45), (int16x8_t)0), v14);
            v112 = vminq_s16(vmaxq_s16(vaddq_s16(v108, v47), (int16x8_t)0), v14);
            v113 = vminq_s16(vmaxq_s16(vsubq_s16(v42, v108), (int16x8_t)0), v14);
            v114 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v65, v44), v108), v109), v110), vandq_s8(v61, v107)), v44), (int16x8_t)0), v14);
            v115 = (int32x4_t)vtrn1q_s16(v111, v112);
            v116 = (int32x4_t)vtrn2q_s16(v111, v112);
            v117 = (int32x4_t)vtrn1q_s16(v113, v114);
            v118 = (int32x4_t)vtrn2q_s16(v113, v114);
            v119 = vtrn1q_s32(v115, v117);
            v120 = vtrn2q_s32(v115, v117);
            v121 = vtrn1q_s32(v116, v118);
            v122 = vtrn2q_s32(v116, v118);
            *(_QWORD *)(result - 4) = v119.i64[0];
            *(_QWORD *)(result + v6 - 4) = v121.i64[0];
            *(_QWORD *)(result + v7 - 4) = v120.i64[0];
            *(_QWORD *)(result + v8 - 4) = v122.i64[0];
            *(_QWORD *)(result + v9 - 4) = v119.i64[1];
            *(_QWORD *)(result + v11 - 4) = v121.i64[1];
            *(_QWORD *)(result + v10 - 4) = v120.i64[1];
            *(_QWORD *)(result + v15 - 4) = v122.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint8x16_t *sub_1C9810B78(uint8x16_t *result, uint64_t a2, unsigned int *a3, int a4)
{
  int v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint8x16_t v9;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0x101010101010101;
    v5.i64[1] = 0x101010101010101;
    do
    {
      if (*a3)
      {
        v6 = *(int8x16_t *)((char *)result - a2);
        v7 = vqtbl1q_s8((int8x16_t)vdupq_n_s32(*a3), (int8x16_t)xmmword_1C9862D90);
        v8 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8(*result, (uint8x16_t)v6), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(*(uint8x16_t *)((char *)result - 2 * a2), *(uint8x16_t *)((char *)result + a2)), 1uLL), vandq_s8(veorq_s8(*(int8x16_t *)result, v6), v5))), v7), vnegq_s8(v7));
        v9 = vsqaddq_u8(*result, vnegq_s8(v8));
        *(uint8x16_t *)((char *)result - a2) = vsqaddq_u8((uint8x16_t)v6, v8);
        *result = v9;
      }
      v4 += 8;
      ++result;
      ++a3;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C9810C0C(uint64_t result, uint64_t a2, unsigned int *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 3 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 7 * a2;
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11 = 5 * a2;
    do
    {
      if (*a3)
      {
        v12.i64[0] = *(_QWORD *)(result - 4);
        v13.i64[0] = *(_QWORD *)(result + a2 - 4);
        v14.i64[0] = *(_QWORD *)(result + v5 - 4);
        v15.i64[0] = *(_QWORD *)(result + v6 - 4);
        v12.i64[1] = *(_QWORD *)(result + v7 - 4);
        v13.i64[1] = *(_QWORD *)(result + v11 - 4);
        v14.i64[1] = *(_QWORD *)(result + v8 - 4);
        v15.i64[1] = *(_QWORD *)(result + v9 - 4);
        v16 = (int32x4_t)vtrn1q_s16(v12, v13);
        v17 = (int32x4_t)vtrn2q_s16(v12, v13);
        v18 = (int32x4_t)vtrn1q_s16(v14, v15);
        v19 = (int32x4_t)vtrn2q_s16(v14, v15);
        v20 = (uint8x16_t)vtrn1q_s32(v16, v18);
        v21 = (int8x16_t)vtrn2q_s32(v16, v18);
        v22 = (int8x16_t)vtrn1q_s32(v17, v19);
        v23 = (uint8x16_t)vtrn2q_s32(v17, v19);
        v24 = vqtbl1q_s8((int8x16_t)vdupq_n_s32(*a3), (int8x16_t)xmmword_1C9862D90);
        v25 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8((uint8x16_t)v21, (uint8x16_t)v22), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(v20, v23), 1uLL), vandq_s8(veorq_s8(v21, v22), v10))), v24), vnegq_s8(v24));
        v26 = (int16x8_t)vsqaddq_u8((uint8x16_t)v22, v25);
        v27 = (int16x8_t)vsqaddq_u8((uint8x16_t)v21, vnegq_s8(v25));
        v28 = vzip1q_s16(v26, v27);
        *(_DWORD *)(result - 2) = v28.i32[0];
        *(_DWORD *)(result + a2 - 2) = v28.i32[1];
        *(_DWORD *)(result + v5 - 2) = v28.i32[2];
        *(_DWORD *)(result + v6 - 2) = v28.i32[3];
        v29 = vzip2q_s16(v26, v27);
        *(_DWORD *)(result + v7 - 2) = v29.i32[0];
        *(_DWORD *)(result + v11 - 2) = v29.i32[1];
        *(_DWORD *)(result + v8 - 2) = v29.i32[2];
        *(_DWORD *)(result + v9 - 2) = v29.i32[3];
      }
      v4 += 8;
      result += 8 * a2;
      ++a3;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C9810D50(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  int8x16_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t *v14;
  const __int16 *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int v34;
  int v35;
  int64x2_t v37;
  int64x2_t v38;
  int16x8_t v60;
  unsigned __int128 v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  uint8x16_t v85;
  int8x16_t v86;
  unsigned __int128 v87;
  unsigned __int128 v89;
  unsigned __int128 v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v99;
  int8x16_t v101;
  int8x16_t *v104;
  int32x4_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  _DWORD *v109;
  int8x16_t v110;
  int16x8_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  _QWORD *v116;
  int16x8_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t *v122;
  int16x8_t v123;
  int8x16_t v124;
  int64x2_t v125;
  _OWORD v126[7];
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(result + 8);
  v8 = (uint64_t)a3 >> 3;
  v9 = v7[96];
  v10 = v7[97];
  v11 = v7[116];
  v12 = v7[118];
  v13 = v7[117];
  v14 = (int32x4_t *)(v7[121] + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  v15 = (const __int16 *)(*(_QWORD *)(result + 32) + 14);
  v16 = *(int32x4_t *)((char *)v14 + v13);
  v17 = *(int32x4_t *)((char *)v14 + 2 * v13);
  v18 = *(int32x4_t *)((char *)v14 + 3 * v13);
  v19 = *(int32x4_t *)((char *)v14 + 4 * v13);
  v20 = *(int32x4_t *)((char *)v14 + 5 * v13);
  v21 = *(int32x4_t *)((char *)v14 + 6 * v13);
  v22 = *(int32x4_t *)((char *)v14 + 7 * v13);
  v23 = (int64x2_t)vtrn1q_s32(*v14, v16);
  v24 = (int64x2_t)vtrn2q_s32(*v14, v16);
  v25 = (int64x2_t)vtrn1q_s32(v17, v18);
  v26 = (int64x2_t)vtrn2q_s32(v17, v18);
  v27 = vzip1q_s64(v23, v25);
  v28 = vzip2q_s64(v23, v25);
  v29 = vzip1q_s64(v24, v26);
  v30 = vzip2q_s64(v24, v26);
  v31 = (int64x2_t)vtrn1q_s32(v19, v20);
  v32 = (int64x2_t)vtrn1q_s32(v21, v22);
  v125 = v27;
  v126[0] = vzip1q_s64(v31, v32);
  v33 = (int8x16_t)vld1q_dup_s16(v15);
  v34 = *(unsigned __int8 *)(result + 660);
  v35 = *(unsigned __int8 *)(result + 661);
  _X8 = v10 + 2 * (v9 * v8 + (a2 >> 3));
  v37 = (int64x2_t)vtrn2q_s32(v19, v20);
  v38 = (int64x2_t)vtrn2q_s32(v21, v22);
  v126[1] = v29;
  v126[2] = vzip1q_s64(v37, v38);
  v126[3] = v28;
  v126[4] = vzip2q_s64(v31, v32);
  v126[5] = v30;
  v126[6] = vzip2q_s64(v37, v38);
  _X11 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X11] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (int16x8_t *)(_X8 - 2 * v9);
    v60 = *_X9;
    _X9 += 2;
    v61 = (unsigned __int128)vshrq_n_s16(v60, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    v61 = 0uLL;
  }
  if (a5 >= 8)
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = vdupq_n_s8(v34 - 16);
    v67 = vdupq_n_s8(v35 - 20);
    v68 = vdupq_n_s8(v35 - 16);
    v69 = (uint64_t)a2 >> 2;
    v70 = a5 >> 3;
    v71 = 2 * v9;
    v72 = 2 * v11;
    v73 = v12 + v11 * v8;
    v74 = v12 + v11 + v11 * v8;
    result = 4 * v9;
    v75 = 256;
    v76 = xmmword_1C9862F70;
    v77 = xmmword_1C9862F80;
    v78 = xmmword_1C9862F90;
    v79 = xmmword_1C9862FA0;
    v80 = xmmword_1C9862FB0;
    v81 = xmmword_1C9862FC0;
    v82 = 832;
    v83 = 560;
    v84.i64[0] = 0x2323232323232323;
    v84.i64[1] = 0x2323232323232323;
    v85.i64[0] = 0x101010101010101;
    v85.i64[1] = 0x101010101010101;
    v86.i64[0] = 0x3333333333333333;
    v86.i64[1] = 0x3333333333333333;
    do
    {
      v87 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X19 = _X8 + v71;
      v89 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v87);
      v61 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v71), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v90 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v71 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v91 = vzip1q_s8(v6, v6);
      v92 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v87, (int16x8_t)v61);
      *(int8x8_t *)&v89 = vraddhn_s16((int16x8_t)v87, (int16x8_t)v89);
      *(int8x8_t *)&v90 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v90);
      __asm { PRFM            #0, [X8,#0x20] }
      *(int8x8_t *)&v87 = vraddhn_s16((int16x8_t)v87, (int16x8_t)v61);
      __asm { PRFM            #0, [X19,#0x20] }
      *(int8x16_t *)(a6 + v82) = vqtbl3q_s8(*(int8x16x3_t *)&v78, vminq_s8(vaddq_s8(v92, v66), v84));
      v95 = vzip1q_s8((int8x16_t)v89, (int8x16_t)v90);
      v96 = vqtbl3q_s8(*(int8x16x3_t *)&v78, vminq_s8(vaddq_s8(v95, v66), v84));
      *(_WORD *)(a6 + v65 + 768) = v96.i16[0];
      *(_WORD *)(a6 + v65 + 776) = v96.i16[1];
      *(_WORD *)(a6 + v65 + 784) = v96.i16[2];
      *(_WORD *)(a6 + v65 + 792) = v96.i16[3];
      *(_WORD *)(a6 + v65 + 800) = v96.i16[4];
      *(_WORD *)(a6 + v65 + 808) = v96.i16[5];
      *(_WORD *)(a6 + v65 + 816) = v96.i16[6];
      *(_WORD *)(a6 + v65 + 824) = v96.i16[7];
      v97 = vaddq_s8(v92, v67);
      _X7 = v73 + v69 + 16;
      v99 = *(int8x16_t *)(v73 + v69);
      _X19 = v74 + v69 + 16;
      v101 = *(int8x16_t *)(v74 + v69);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
      }
      v104 = (int8x16_t *)(a6 + v63 * 16);
      v105 = *(int32x4_t *)((char *)&v125 + v63 * 16);
      v106 = (int32x4_t)v126[v63];
      v107 = vaddq_s8(v95, v67);
      v104[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8(v99, v99), vzip1q_s8(v97, v97)), v84)), vceqzq_s8(v99));
      v104[9] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8(v101, v101), vzip2q_s8(v97, v97)), v84)), vceqzq_s8(v101));
      v108 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v105, (int8x16_t)v105), vzip1q_s8(v107, v107)), v84)), vceqzq_s8((int8x16_t)v105));
      v109 = (_DWORD *)(a6 + v64);
      v110 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v106, (int8x16_t)v106), vzip2q_s8(v107, v107)), v84)), vceqzq_s8((int8x16_t)v106));
      *(_DWORD *)(a6 + v64 + 16) = v108.i32[1];
      *v109 = v108.i32[0];
      v111 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vqtbl1q_s8(v95, (int8x16_t)xmmword_1C9862FD0), v33), v86), v68), v84));
      *(_DWORD *)(a6 + v64 + 32) = v108.i32[2];
      v112 = (int8x16_t)vcgtq_u8((uint8x16_t)vuzp2q_s32(v105, v106), v85);
      *(_DWORD *)(a6 + v64 + 48) = v108.i32[3];
      v113 = (int8x16_t)vmovl_high_s8(v112);
      v114 = vandq_s8((int8x16_t)vzip1q_s16(v111, v111), (int8x16_t)vmovl_s8(*(int8x8_t *)v112.i8));
      v115 = vandq_s8((int8x16_t)vzip2q_s16(v111, v111), v113);
      v116 = (_QWORD *)(a6 + v75);
      v109[16] = v110.i32[0];
      *(_DWORD *)(a6 + v64 + 80) = v110.i32[1];
      v117 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(v91, v33), v86), v68), v84));
      v118 = (int8x16_t)vzip1q_s16(v117, v117);
      *(_DWORD *)(a6 + v64 + 96) = v110.i32[2];
      v119 = (int8x16_t)vcgtq_u8((uint8x16_t)v99, v85);
      v120 = (int8x16_t)vmovl_s8(*(int8x8_t *)v119.i8);
      *(_DWORD *)(a6 + v64 + 112) = v110.i32[3];
      v121 = vandq_s8((int8x16_t)vzip2q_s16(v117, v117), (int8x16_t)vmovl_high_s8(v119));
      v122 = (int8x16_t *)(a6 + v83);
      *(_QWORD *)(a6 + v75 + 32) = v114.i64[1];
      v123 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip1q_s8((int8x16_t)v87, (int8x16_t)v87), v33), v86), v68), v84));
      *v116 = v114.i64[0];
      v124 = (int8x16_t)vcgtq_u8((uint8x16_t)v101, v85);
      v6 = vandq_s8((int8x16_t)vzip1q_s16(v123, v123), (int8x16_t)vmovl_s8(*(int8x8_t *)v124.i8));
      v116[8] = v115.i64[0];
      v65 += 2;
      v73 += v72;
      v74 += v72;
      *(_QWORD *)(a6 + v75 + 96) = v115.i64[1];
      _X8 += result;
      v75 += 8;
      v82 += 16;
      v64 += 4;
      v122[-3] = vandq_s8(v118, v120);
      v122[-2] = v121;
      v122[-1] = v6;
      *v122 = vandq_s8((int8x16_t)vzip2q_s16(v123, v123), (int8x16_t)vmovl_high_s8(v124));
      v83 += 64;
      v63 += 2;
    }
    while (v65 < v70);
  }
  return result;
}

uint64_t sub_1C9811248(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  int8x16_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t *v14;
  const __int16 *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int v34;
  int v35;
  int64x2_t v37;
  int64x2_t v38;
  int16x8_t v60;
  unsigned __int128 v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int8x16_t v67;
  int8x16_t v68;
  uint64_t v69;
  int8x16_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  uint8x16_t v86;
  int8x16_t v87;
  unsigned __int128 v88;
  unsigned __int128 v89;
  int16x8_t v91;
  unsigned __int128 v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v96;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v101;
  int8x16_t v103;
  int8x16_t *v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  _DWORD *v111;
  int8x16_t v112;
  int16x8_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  _QWORD *v117;
  int16x8_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int16x8_t v122;
  int8x16_t v123;
  int8x16_t *v124;
  int16x8_t v125;
  int8x16_t v126;
  int64x2_t v127;
  _OWORD v128[7];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(result + 8);
  v8 = (uint64_t)a3 >> 3;
  v9 = v7[96];
  v10 = v7[97];
  v11 = v7[116];
  v12 = v7[118];
  v13 = v7[117];
  v14 = (int32x4_t *)(v7[121] + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  v15 = (const __int16 *)(*(_QWORD *)(result + 32) + 14);
  v16 = *(int32x4_t *)((char *)v14 + v13);
  v17 = *(int32x4_t *)((char *)v14 + 2 * v13);
  v18 = *(int32x4_t *)((char *)v14 + 3 * v13);
  v19 = *(int32x4_t *)((char *)v14 + 4 * v13);
  v20 = *(int32x4_t *)((char *)v14 + 5 * v13);
  v21 = *(int32x4_t *)((char *)v14 + 6 * v13);
  v22 = *(int32x4_t *)((char *)v14 + 7 * v13);
  v23 = (int64x2_t)vtrn1q_s32(*v14, v16);
  v24 = (int64x2_t)vtrn2q_s32(*v14, v16);
  v25 = (int64x2_t)vtrn1q_s32(v17, v18);
  v26 = (int64x2_t)vtrn2q_s32(v17, v18);
  v27 = vzip1q_s64(v23, v25);
  v28 = vzip2q_s64(v23, v25);
  v29 = vzip1q_s64(v24, v26);
  v30 = vzip2q_s64(v24, v26);
  v31 = (int64x2_t)vtrn1q_s32(v19, v20);
  v32 = (int64x2_t)vtrn1q_s32(v21, v22);
  v127 = v27;
  v128[0] = vzip1q_s64(v31, v32);
  v33 = (int8x16_t)vld1q_dup_s16(v15);
  v34 = *(unsigned __int8 *)(result + 660);
  v35 = *(unsigned __int8 *)(result + 661);
  _X8 = v10 + 2 * (v9 * v8 + (a2 >> 3));
  v37 = (int64x2_t)vtrn2q_s32(v19, v20);
  v38 = (int64x2_t)vtrn2q_s32(v21, v22);
  v128[1] = v29;
  v128[2] = vzip1q_s64(v37, v38);
  v128[3] = v28;
  v128[4] = vzip2q_s64(v31, v32);
  v128[5] = v30;
  v128[6] = vzip2q_s64(v37, v38);
  _X11 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X11] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (int16x8_t *)(_X8 - 2 * v9);
    v60 = *_X9;
    _X9 += 2;
    v61 = (unsigned __int128)vshrq_n_s16(v60, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    v61 = 0uLL;
  }
  if (a5 >= 8)
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = v35 - 16;
    v67 = vdupq_n_s8(v34 - 16);
    v68 = vdupq_n_s8(v35 - 20);
    v69 = (uint64_t)a2 >> 2;
    v70 = vdupq_n_s8(v66);
    v71 = a5 >> 3;
    v72 = 2 * v9;
    v73 = 2 * v11;
    v74 = v12 + v11 * v8;
    v75 = v12 + v11 + v11 * v8;
    result = 4 * v9;
    v76 = 480;
    v77 = xmmword_1C9862F70;
    v78 = xmmword_1C9862F80;
    v79 = xmmword_1C9862F90;
    v80 = xmmword_1C9862FA0;
    v81 = xmmword_1C9862FB0;
    v82 = xmmword_1C9862FC0;
    v83 = 832;
    v84 = 560;
    v85.i64[0] = 0x2323232323232323;
    v85.i64[1] = 0x2323232323232323;
    v86.i64[0] = 0x101010101010101;
    v86.i64[1] = 0x101010101010101;
    v87.i64[0] = 0x3333333333333333;
    v87.i64[1] = 0x3333333333333333;
    do
    {
      v88 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v89 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X19 = _X8 + v72;
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v88);
      v91 = *(int16x8_t *)(_X8 + v72 + 2);
      v61 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v72), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v92 = *(_OWORD *)&vshrq_n_s16(v91, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      *(int8x8_t *)v91.i8 = vraddhn_s16((int16x8_t)v88, (int16x8_t)v61);
      v93 = vzip1q_s8(v6, v6);
      v94 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v88, (int16x8_t)v61);
      *(int8x8_t *)&v88 = vraddhn_s16((int16x8_t)v88, (int16x8_t)v89);
      *(int8x8_t *)&v89 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v92);
      __asm { PRFM            #0, [X8,#0x20] }
      v96 = vzip1q_s8((int8x16_t)v88, (int8x16_t)v89);
      __asm { PRFM            #0, [X19,#0x20] }
      *(int8x16_t *)(a6 + v83) = vqtbl3q_s8(*(int8x16x3_t *)&v79, vminq_s8(vaddq_s8(v94, v67), v85));
      v98 = vqtbl3q_s8(*(int8x16x3_t *)&v79, vminq_s8(vaddq_s8(v96, v67), v85));
      *(_WORD *)(a6 + v65 + 768) = v98.i16[0];
      *(_WORD *)(a6 + v65 + 776) = v98.i16[1];
      *(_WORD *)(a6 + v65 + 784) = v98.i16[2];
      *(_WORD *)(a6 + v65 + 792) = v98.i16[3];
      *(_WORD *)(a6 + v65 + 800) = v98.i16[4];
      *(_WORD *)(a6 + v65 + 808) = v98.i16[5];
      *(_WORD *)(a6 + v65 + 816) = v98.i16[6];
      *(_WORD *)(a6 + v65 + 824) = v98.i16[7];
      v99 = vaddq_s8(v94, v68);
      _X7 = v74 + v69 + 16;
      v101 = *(int8x16_t *)(v74 + v69);
      _X19 = v75 + v69 + 16;
      v103 = *(int8x16_t *)(v75 + v69);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
      }
      v106 = (int8x16_t *)(a6 + v63 * 16);
      v107 = *(int8x16_t *)((char *)&v127 + v63 * 16);
      v108 = (int8x16_t)v128[v63];
      v109 = vaddq_s8(v96, v68);
      v106[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v101, v101), vzip1q_s8(v99, v99)), v85)), vceqzq_s8(v101));
      v106[9] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v103, v103), vzip2q_s8(v99, v99)), v85)), vceqzq_s8(v103));
      v110 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v107, v107), vzip1q_s8(v109, v109)), v85)), vceqzq_s8(v107));
      v111 = (_DWORD *)(a6 + v64);
      v112 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v108, v108), vzip2q_s8(v109, v109)), v85)), vceqzq_s8(v108));
      *(_DWORD *)(a6 + v64 + 16) = v110.i32[1];
      *(_DWORD *)(a6 + v64 + 32) = v110.i32[2];
      *v111 = v110.i32[0];
      v113 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip2q_s8(v96, v96), v33), v87), v70), v85));
      *(_DWORD *)(a6 + v64 + 48) = v110.i32[3];
      v114 = (int8x16_t)vcgtq_u8((uint8x16_t)v108, v86);
      v111[16] = v112.i32[0];
      v115 = vandq_s8((int8x16_t)vzip1q_s16(v113, v113), (int8x16_t)vmovl_s8(*(int8x8_t *)v114.i8));
      v116 = vandq_s8((int8x16_t)vzip2q_s16(v113, v113), (int8x16_t)vmovl_high_s8(v114));
      v117 = (_QWORD *)(a6 + v76);
      *(_DWORD *)(a6 + v64 + 80) = v112.i32[1];
      *(_DWORD *)(a6 + v64 + 96) = v112.i32[2];
      v118 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip1q_s8(v96, v96), v33), v87), v70), v85));
      *(_DWORD *)(a6 + v64 + 112) = v112.i32[3];
      v119 = (int8x16_t)vcgtq_u8((uint8x16_t)v107, v86);
      v120 = vandq_s8((int8x16_t)vzip1q_s16(v118, v118), (int8x16_t)vmovl_s8(*(int8x8_t *)v119.i8));
      *(_QWORD *)(a6 + v76 - 64) = v115.i64[1];
      v121 = vandq_s8((int8x16_t)vzip2q_s16(v118, v118), (int8x16_t)vmovl_high_s8(v119));
      *(v117 - 12) = v115.i64[0];
      v122 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(v93, v33), v87), v70), v85));
      *(v117 - 4) = v116.i64[0];
      v123 = (int8x16_t)vcgtq_u8((uint8x16_t)v101, v86);
      v6 = vandq_s8((int8x16_t)vzip1q_s16(v122, v122), (int8x16_t)vmovl_s8(*(int8x8_t *)v123.i8));
      *(_QWORD *)(a6 + v76 - 192) = v120.i64[1];
      v124 = (int8x16_t *)(a6 + v84);
      *v117 = v116.i64[1];
      v125 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip1q_s8((int8x16_t)v91, (int8x16_t)v91), v33), v87), v70), v85));
      *(v117 - 28) = v120.i64[0];
      v126 = (int8x16_t)vcgtq_u8((uint8x16_t)v103, v86);
      *(v117 - 20) = v121.i64[0];
      v65 += 2;
      v74 += v73;
      v75 += v73;
      *(_QWORD *)(a6 + v76 - 128) = v121.i64[1];
      _X8 += result;
      v76 += 8;
      v83 += 16;
      v64 += 4;
      v124[-3] = v6;
      v124[-2] = vandq_s8((int8x16_t)vzip2q_s16(v122, v122), (int8x16_t)vmovl_high_s8(v123));
      v124[-1] = vandq_s8((int8x16_t)vzip1q_s16(v125, v125), (int8x16_t)vmovl_s8(*(int8x8_t *)v126.i8));
      *v124 = vandq_s8((int8x16_t)vzip2q_s16(v125, v125), (int8x16_t)vmovl_high_s8(v126));
      v84 += 64;
      v63 += 2;
    }
    while (v65 < v71);
  }
  return result;
}

uint64_t sub_1C9811774(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v5;
  int16x8_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x8_t v51;
  uint8x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int8x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint8x8_t v94;
  uint8x8_t v95;
  int8x8_t v96;
  uint8x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x8_t v116;
  uint8x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int8x8_t v121;
  int8x8_t v122;
  int8x8_t v123;
  int8x8_t v124;
  int8x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int8x16_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  uint64_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int8x16_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int16x8_t v162;
  int8x16_t v163;
  int8x8_t v164;
  int8x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int8x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int8x16_t v171;
  uint8x8_t v172;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = vdupq_n_s16(a3);
    v170 = vshrq_n_s16(v6, 3uLL);
    v171 = (int8x16_t)vdupq_n_s16(a4);
    v169 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    v7 = (int8x16_t *)(result - 8);
    v8 = (int8x16_t)xmmword_1C9862F60;
    v166 = v6;
    do
    {
      v9 = *(int8x16_t *)((char *)v7 + a2);
      v10 = *(int8x16_t *)((char *)v7 + 2 * a2);
      v11 = *(int8x16_t *)((char *)v7 + 3 * a2);
      v12 = *(int8x16_t *)((char *)v7 + 4 * a2);
      v13 = *(int8x16_t *)((char *)v7 + 5 * a2);
      v14 = *(int8x16_t *)((char *)v7 + 6 * a2);
      v15 = *(int8x16_t *)((char *)v7 + 7 * a2);
      v16 = (int16x8_t)vtrn1q_s8(*v7, v9);
      v17 = (int16x8_t)vtrn1q_s8(v10, v11);
      v18 = (int16x8_t)vtrn1q_s8(v12, v13);
      v19 = (int16x8_t)vtrn1q_s8(v14, v15);
      v20 = (int32x4_t)vtrn1q_s16(v16, v17);
      v21 = (int32x4_t)vtrn2q_s16(v16, v17);
      v22 = (int32x4_t)vtrn1q_s16(v18, v19);
      v23 = (int32x4_t)vtrn2q_s16(v18, v19);
      v24 = (int8x16_t)vtrn1q_s32(v20, v22);
      v25 = (int16x8_t)vtrn2q_s32(v20, v22);
      v26 = (int8x16_t)vtrn1q_s32(v21, v23);
      v27 = (int8x16_t)vtrn2q_s32(v21, v23);
      v28 = (uint8x8_t)vextq_s8(v24, v24, 8uLL).u64[0];
      v29 = (uint8x8_t)vextq_s8(v26, v26, 8uLL).u64[0];
      v30 = (int8x8_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      v31 = (uint8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      v32 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8);
      v33 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v25.i8, 1uLL);
      v34 = vabdq_s16(v32, v33);
      v35 = (int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v24);
      v36 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v26, 1uLL);
      v37 = vabdq_s16(v35, v36);
      v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v34), v32, v33), v8);
      v39 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v37), v35, v36), v8);
      v40 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v39, v38));
      v41 = vrshrq_n_s16(v6, 3uLL);
      v172 = v31;
      if (vaddlvq_u16((uint16x8_t)v40))
      {
        v42 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v25.i8);
        v43 = vmovl_u8(*(uint8x8_t *)v27.i8);
        v44 = (int16x8_t)vmovl_u8(v29);
        v45 = (int16x8_t)vmovl_u8(v28);
        v46 = (int16x8_t)vandq_s8(v171, v40);
        v47 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v46, vshlq_n_s16(v46, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v27.i8, v28)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v37, v34)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v31, v28), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v27.i8))));
        v48 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v47), (int8x16_t)v47), v8);
        v49 = (int8x16_t)vcgtq_s16(v169, v38);
        v50 = (int8x16_t)vcgtq_s16(v169, v39);
        if (vaddlvq_u16((uint16x8_t)v48))
        {
          v51 = vmovn_s16(v46);
          v52 = (uint8x8_t)vadd_s8(v51, v51);
          v162 = (int16x8_t)v43;
          v53 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v25.i8);
          v54 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v27.i8, v28);
          v55 = (int16x8_t)vaddl_high_u8((uint8x16_t)v26, (uint8x16_t)v25);
          v167 = v41;
          v164 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v42), vhadd_u8(*(uint8x8_t *)v26.i8, v29)), 2uLL), vqadd_u8(*(uint8x8_t *)v27.i8, v52)), vqsub_u8(*(uint8x8_t *)v27.i8, v52));
          v56 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v44), vhadd_u8((uint8x8_t)v30, *(uint8x8_t *)v25.i8)), 2uLL), vqadd_u8(v28, v52)), vqsub_u8(v28, v52));
          v57 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v53, v54), 2uLL), vqadd_u8(*(uint8x8_t *)v25.i8, v52)), vqsub_u8(*(uint8x8_t *)v25.i8, v52));
          v58 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v55, v54), 2uLL), vqadd_u8(v29, v52)), vqsub_u8(v29, v52));
          v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v26.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v53, (uint16x8_t)v54)), 2uLL), vqadd_u8(*(uint8x8_t *)v26.i8, v52)), vqsub_u8(*(uint8x8_t *)v26.i8, v52));
          v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v27), (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v54)), 2uLL), vqadd_u8((uint8x8_t)v30, v52)), vqsub_u8((uint8x8_t)v30, v52));
          v61 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          v62.i64[0] = 0x9000900090009;
          v62.i64[1] = 0x9000900090009;
          v63 = vmulq_s16((int16x8_t)vsubl_u8(v28, *(uint8x8_t *)v27.i8), v62);
          v62.i64[0] = 0x2000200020002;
          v62.i64[1] = 0x2000200020002;
          v64 = vrshrq_n_s16(vmlaq_s16(v63, (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v62), 4uLL);
          v62.i64[0] = 0xA000A000A000ALL;
          v62.i64[1] = 0xA000A000A000ALL;
          v65 = (int8x16_t)vcgtq_s16(vmulq_s16(v61, v62), vabsq_s16(v64));
          v66 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v64, v65), v61), vnegq_s16(v61));
          v67 = vshrq_n_s16(v61, 1uLL);
          v68 = vnegq_s16(v67);
          v25 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v66), v67), v68), vandq_s8(v49, v65)), v42);
          v69 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v66), v67), v68), vandq_s8(v50, v65)), v44);
          v8 = (int8x16_t)xmmword_1C9862F60;
          v70 = vqmovn_s16(v48);
          *(int8x8_t *)v26.i8 = vbsl_s8(v70, v59, *(int8x8_t *)v26.i8);
          *(int8x8_t *)v25.i8 = vbsl_s8(v70, v57, vqmovun_s16(v25));
          *(int8x8_t *)v27.i8 = vbsl_s8(v70, v164, vqmovun_s16(vaddq_s16(v66, v162)));
          v28 = (uint8x8_t)vbsl_s8(v70, v56, vqmovun_s16(vsubq_s16(v45, v66)));
          v6 = v166;
          v41 = v167;
          v29 = (uint8x8_t)vbsl_s8(v70, v58, vqmovun_s16(v69));
          v30 = vbsl_s8(v70, v60, v30);
        }
        else
        {
          v71 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          v72 = (int16x8_t)v43;
          v73.i64[0] = 0x2000200020002;
          v73.i64[1] = 0x2000200020002;
          v74 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v28, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v27.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v73), 4uLL);
          v73.i64[0] = 0xA000A000A000ALL;
          v73.i64[1] = 0xA000A000A000ALL;
          v75 = (int8x16_t)vcgtq_s16(vmulq_s16(v71, v73), vabsq_s16(v74));
          v76 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v74, v75), v71), vnegq_s16(v71));
          v77 = vaddq_s16(v76, v72);
          v78 = vshrq_n_s16(v71, 1uLL);
          v79 = vnegq_s16(v78);
          v80 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v76), v78), v79), vandq_s8(v49, v75)), v42);
          v81 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v76), v78), v79), vandq_s8(v50, v75)), v44);
          *(int8x8_t *)v25.i8 = vqmovun_s16(v80);
          *(int8x8_t *)v27.i8 = vqmovun_s16(v77);
          v28 = (uint8x8_t)vqmovun_s16(vsubq_s16(v45, v76));
          v29 = (uint8x8_t)vqmovun_s16(v81);
        }
      }
      v82 = (int16x8_t)vtrn2q_s8(*v7, v9);
      v83 = (int16x8_t)vtrn2q_s8(v10, v11);
      v84 = (int16x8_t)vtrn2q_s8(v12, v13);
      v85 = (int16x8_t)vtrn2q_s8(v14, v15);
      v86 = (int32x4_t)vtrn1q_s16(v82, v83);
      v87 = (int32x4_t)vtrn2q_s16(v82, v83);
      v88 = (int32x4_t)vtrn1q_s16(v84, v85);
      v89 = (int32x4_t)vtrn2q_s16(v84, v85);
      v90 = (int8x16_t)vtrn1q_s32(v86, v88);
      v91 = (int8x16_t)vtrn2q_s32(v86, v88);
      v92 = (int8x16_t)vtrn1q_s32(v87, v89);
      v93 = (int8x16_t)vtrn2q_s32(v87, v89);
      v94 = (uint8x8_t)vextq_s8(v90, v90, 8uLL).u64[0];
      v95 = (uint8x8_t)vextq_s8(v92, v92, 8uLL).u64[0];
      v96 = (int8x8_t)vextq_s8(v91, v91, 8uLL).u64[0];
      v97 = (uint8x8_t)vextq_s8(v93, v93, 8uLL).u64[0];
      v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8);
      v99 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v91.i8, 1uLL);
      v100 = vabdq_s16(v98, v99);
      v101 = (int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v90);
      v102 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v92, 1uLL);
      v103 = vabdq_s16(v101, v102);
      v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v100), v98, v99), v8);
      v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v103), v101, v102), v8);
      v106 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v105, v104));
      if (vaddlvq_u16((uint16x8_t)v106))
      {
        v168 = v30;
        v107 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v91.i8);
        v108 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v93.i8);
        v109 = (int16x8_t)vmovl_u8(v95);
        v110 = (int16x8_t)vmovl_u8(v94);
        v111 = (int16x8_t)vandq_s8(v171, v106);
        v112 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v111, vshlq_n_s16(v111, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v93.i8, v94)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v103, v100)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v97, v94), *(uint8x8_t *)v90.i8, *(uint8x8_t *)v93.i8))));
        v113 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v112), (int8x16_t)v112), v8);
        v114 = (int8x16_t)vcgtq_s16(v169, v104);
        v115 = (int8x16_t)vcgtq_s16(v169, v105);
        if (vaddlvq_u16((uint16x8_t)v113))
        {
          v116 = vmovn_s16(v111);
          v117 = (uint8x8_t)vadd_s8(v116, v116);
          v118 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v91.i8);
          v119 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v93.i8, v94);
          v120 = (int16x8_t)vaddl_high_u8((uint8x16_t)v92, (uint8x16_t)v91);
          v163 = v115;
          v165 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v107), vhadd_u8(*(uint8x8_t *)v92.i8, v95)), 2uLL), vqadd_u8(*(uint8x8_t *)v93.i8, v117)), vqsub_u8(*(uint8x8_t *)v93.i8, v117));
          v121 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v109), vhadd_u8((uint8x8_t)v96, *(uint8x8_t *)v91.i8)), 2uLL), vqadd_u8(v94, v117)), vqsub_u8(v94, v117));
          v122 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v118, v119), 2uLL), vqadd_u8(*(uint8x8_t *)v91.i8, v117)), vqsub_u8(*(uint8x8_t *)v91.i8, v117));
          v123 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v120, v119), 2uLL), vqadd_u8(v95, v117)), vqsub_u8(v95, v117));
          v124 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v90.i8, *(uint8x8_t *)v92.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v118, (uint16x8_t)v119)), 2uLL), vqadd_u8(*(uint8x8_t *)v92.i8, v117)), vqsub_u8(*(uint8x8_t *)v92.i8, v117));
          v125 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v93), (int16x8_t)vhaddq_u16((uint16x8_t)v120, (uint16x8_t)v119)), 2uLL), vqadd_u8((uint8x8_t)v96, v117)), vqsub_u8((uint8x8_t)v96, v117));
          v126 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v127.i64[0] = 0x9000900090009;
          v127.i64[1] = 0x9000900090009;
          v128 = vmulq_s16((int16x8_t)vsubl_u8(v94, *(uint8x8_t *)v93.i8), v127);
          v127.i64[0] = 0x2000200020002;
          v127.i64[1] = 0x2000200020002;
          v129 = vrshrq_n_s16(vmlaq_s16(v128, (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v127), 4uLL);
          v127.i64[0] = 0xA000A000A000ALL;
          v127.i64[1] = 0xA000A000A000ALL;
          v130 = (int8x16_t)vcgtq_s16(vmulq_s16(v126, v127), vabsq_s16(v129));
          v131 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v129, v130), v126), vnegq_s16(v126));
          v132 = vshrq_n_s16(v126, 1uLL);
          v133 = vnegq_s16(v132);
          v134 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v131), v132), v133), vandq_s8(v114, v130)), v107);
          v135 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v131), v132), v133), vandq_s8(v163, v130)), v109);
          *(int8x8_t *)v127.i8 = vqmovn_s16(v113);
          *(int8x8_t *)v92.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v124, *(int8x8_t *)v92.i8);
          *(int8x8_t *)v91.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v122, vqmovun_s16(v134));
          v8 = (int8x16_t)xmmword_1C9862F60;
          v6 = v166;
          *(int8x8_t *)v93.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v165, vqmovun_s16(vaddq_s16(v131, v108)));
          v94 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v121, vqmovun_s16(vsubq_s16(v110, v131)));
          v95 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v123, vqmovun_s16(v135));
          v96 = vbsl_s8(*(int8x8_t *)v127.i8, v125, v96);
        }
        else
        {
          v137 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v138.i64[0] = 0x2000200020002;
          v138.i64[1] = 0x2000200020002;
          v139 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v94, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v93.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v138), 4uLL);
          v138.i64[0] = 0xA000A000A000ALL;
          v138.i64[1] = 0xA000A000A000ALL;
          v140 = (int8x16_t)vcgtq_s16(vmulq_s16(v137, v138), vabsq_s16(v139));
          v141 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v139, v140), v137), vnegq_s16(v137));
          v142 = vshrq_n_s16(v137, 1uLL);
          v143 = vnegq_s16(v142);
          v144 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v141), v142), v143), vandq_s8(v114, v140)), v107);
          v145 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v141), v142), v143), vandq_s8(v115, v140)), v109);
          *(int8x8_t *)v91.i8 = vqmovun_s16(v144);
          *(int8x8_t *)v93.i8 = vqmovun_s16(vaddq_s16(v141, v108));
          v94 = (uint8x8_t)vqmovun_s16(vsubq_s16(v110, v141));
          v95 = (uint8x8_t)vqmovun_s16(v145);
        }
        v136 = (uint64_t)v172;
        v30 = v168;
      }
      else
      {
        v136 = (uint64_t)v172;
      }
      v24.u64[1] = (unint64_t)v28;
      v26.u64[1] = (unint64_t)v29;
      v25.u64[1] = (unint64_t)v30;
      v27.i64[1] = v136;
      v90.u64[1] = (unint64_t)v94;
      v92.u64[1] = (unint64_t)v95;
      v91.u64[1] = (unint64_t)v96;
      v93.u64[1] = (unint64_t)v97;
      v146 = (int16x8_t)vtrn1q_s8(v24, v90);
      v147 = (int16x8_t)vtrn2q_s8(v24, v90);
      v148 = (int16x8_t)vtrn1q_s8(v26, v92);
      v149 = (int16x8_t)vtrn2q_s8(v26, v92);
      v150 = (int16x8_t)vtrn1q_s8((int8x16_t)v25, v91);
      v151 = (int16x8_t)vtrn2q_s8((int8x16_t)v25, v91);
      v152 = (int16x8_t)vtrn1q_s8(v27, v93);
      v153 = (int16x8_t)vtrn2q_s8(v27, v93);
      v154 = (int32x4_t)vtrn1q_s16(v146, v148);
      v155 = (int32x4_t)vtrn2q_s16(v146, v148);
      v156 = (int32x4_t)vtrn1q_s16(v147, v149);
      v157 = (int32x4_t)vtrn2q_s16(v147, v149);
      v158 = (int32x4_t)vtrn1q_s16(v150, v152);
      v159 = (int32x4_t)vtrn2q_s16(v150, v152);
      v160 = (int32x4_t)vtrn1q_s16(v151, v153);
      v161 = (int32x4_t)vtrn2q_s16(v151, v153);
      *(int32x4_t *)v7 = vtrn1q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + a2) = vtrn1q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 2 * a2) = vtrn1q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 3 * a2) = vtrn1q_s32(v157, v161);
      *(int32x4_t *)((char *)v7 + 4 * a2) = vtrn2q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + 5 * a2) = vtrn2q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 6 * a2) = vtrn2q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 7 * a2) = vtrn2q_s32(v157, v161);
      v7 = (int8x16_t *)((char *)v7 + 8 * a2);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C9811F5C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v5;
  int16x8_t v6;
  const char *v7;
  int8x16_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int16x8_t v13;
  const char *v14;
  int16x8_t v15;
  int16x8_t v16;
  const char *v17;
  const char *v18;
  int16x8_t v19;
  const char *v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  uint8x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x16_t v56;
  int16x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int8x16_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int8x16_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  uint8x8_t v97;
  int8x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  uint8x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int8x16_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int8x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int8x16_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  char *v125;
  int8x8_t v126;
  char *v127;
  int8x8_t v128;
  char *v129;
  char *v130;
  int8x8_t v131;
  char *v132;
  int8x8_t v133;
  char *v134;
  int8x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int8x16_t v143;
  int16x8_t v144;
  int8x16_t v145;
  uint8x8_t v146;
  int8x8_t v147;
  uint8x8_t v148;
  int8x8_t v149;
  int8x8_t v150;
  int8x8x2_t v151;
  int8x8x2_t v152;
  int8x8x2_t v153;
  int8x8x2_t v154;
  int8x8x2_t v155;
  int8x8x2_t v156;
  int8x8x2_t v157;
  int8x8x2_t v158;
  int8x8x2_t v159;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = vdupq_n_s16(a3);
    v142 = vshrq_n_s16(v6, 3uLL);
    v143 = (int8x16_t)vdupq_n_s16(a4);
    v141 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    v7 = (const char *)(result - 4 * a2);
    v8 = (int8x16_t)xmmword_1C9862F60;
    v136 = v6;
    while (1)
    {
      v9 = v7;
      v151 = vld2_s8(v9);
      v10 = &v9[a2];
      v154 = vld2_s8(v10);
      v11 = &v10[a2];
      v157 = vld2_s8(v11);
      v12 = &v11[a2];
      v13 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[0], 1uLL);
      v158 = vld2_s8(v12);
      v14 = &v12[a2];
      v15 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v154.val[0]);
      v16 = vabdq_s16(v15, v13);
      v156 = vld2_s8(v14);
      v17 = &v14[a2];
      v155 = vld2_s8(v17);
      v18 = &v17[a2];
      v19 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[0], 1uLL);
      v153 = vld2_s8(v18);
      v20 = &v18[a2];
      v21 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]);
      v152 = vld2_s8(v20);
      v22 = vabdq_s16(v21, v19);
      v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v16), v15, v13), v8);
      v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v22), v21, v19), v8);
      v25 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v24, v23));
      v26 = vrshrq_n_s16(v6, 3uLL);
      v148 = (uint8x8_t)v151.val[1];
      v146 = (uint8x8_t)v152.val[1];
      v144 = v26;
      if (!vaddlvq_u16((uint16x8_t)v25))
        break;
      v27 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[0]);
      v28 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[0]);
      v29 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[0]);
      v30 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[0]);
      v31 = (int16x8_t)vandq_s8(v143, v25);
      v32 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v31, vshlq_n_s16(v31, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v156.val[0])), vandq_s8((int8x16_t)vcgtq_s16(v26, vaddq_s16(v22, v16)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8((uint8x8_t)v152.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v151.val[0], (uint8x8_t)v158.val[0]))));
      v33 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v32), (int8x16_t)v32), v8);
      v34 = (int8x16_t)vcgtq_s16(v141, v23);
      v35 = (int8x16_t)vcgtq_s16(v141, v24);
      if (!vaddlvq_u16((uint16x8_t)v33))
      {
        v64 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
        v65.i64[0] = 0x2000200020002;
        v65.i64[1] = 0x2000200020002;
        v66 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[0], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[0], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v65), 4uLL);
        v65.i64[0] = 0xA000A000A000ALL;
        v65.i64[1] = 0xA000A000A000ALL;
        v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v64, v65), vabsq_s16(v66));
        v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v64), vnegq_s16(v64));
        v69 = vsubq_s16(v30, v68);
        v70 = vshrq_n_s16(v64, 1uLL);
        v71 = vnegq_s16(v70);
        v72 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v68), v70), v71), vandq_s8(v34, v67)), v27);
        v73 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v68), v70), v71), vandq_s8(v35, v67));
        v60 = vqmovun_s16(v72);
        v150 = vqmovun_s16(vaddq_s16(v68, v28));
        v61 = vqmovun_s16(v69);
        v62 = vqmovun_s16(vaddq_s16(v73, v29));
        v59 = v154.val[0];
        goto LABEL_8;
      }
      v36 = vmovn_s16(v31);
      v37 = (uint8x8_t)vadd_s8(v36, v36);
      v38 = (int16x8_t)vaddl_u8((uint8x8_t)v154.val[0], (uint8x8_t)v151.val[0]);
      v39 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[0], (uint8x8_t)v154.val[0]);
      v40 = (uint8x8_t)v152.val[0];
      v41 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]);
      v42 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v155.val[0]);
      v43 = v35;
      v149 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v27), vhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v155.val[0])), 2uLL), vqadd_u8((uint8x8_t)v158.val[0], v37)), vqsub_u8((uint8x8_t)v158.val[0], v37));
      v44 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v29), vhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v157.val[0])), 2uLL), vqadd_u8((uint8x8_t)v156.val[0], v37)), vqsub_u8((uint8x8_t)v156.val[0], v37));
      v45 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v41, v39), 2uLL), vqadd_u8((uint8x8_t)v157.val[0], v37)), vqsub_u8((uint8x8_t)v157.val[0], v37));
      v46 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v42, v41), 2uLL), vqadd_u8((uint8x8_t)v155.val[0], v37)), vqsub_u8((uint8x8_t)v155.val[0], v37));
      *(uint8x8_t *)v38.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v38, (int16x8_t)vhaddq_u16((uint16x8_t)v39, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v154.val[0], v37)), vqsub_u8((uint8x8_t)v154.val[0], v37));
      v47 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v40, (uint8x8_t)v153.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v42, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v153.val[0], v37)), vqsub_u8((uint8x8_t)v153.val[0], v37));
      v48 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
      v49.i64[0] = 0x9000900090009;
      v49.i64[1] = 0x9000900090009;
      v50 = vmulq_s16((int16x8_t)vsubl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]), v49);
      v49.i64[0] = 0x2000200020002;
      v49.i64[1] = 0x2000200020002;
      v51 = vrshrq_n_s16(vmlaq_s16(v50, (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v49), 4uLL);
      v49.i64[0] = 0xA000A000A000ALL;
      v49.i64[1] = 0xA000A000A000ALL;
      v52 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v49), vabsq_s16(v51));
      v53 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v51, v52), v48), vnegq_s16(v48));
      v54 = vshrq_n_s16(v48, 1uLL);
      v55 = vnegq_s16(v54);
      v56 = (int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v53), v54), v55);
      v57 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v53), v54), v55), vandq_s8(v43, v52)), v29);
      *(int8x8_t *)v55.i8 = vqmovun_s16(vsubq_s16(v30, v53));
      v58 = vqmovn_s16(v33);
      v59 = vbsl_s8(v58, *(int8x8_t *)v38.i8, v154.val[0]);
      v60 = vbsl_s8(v58, v45, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8(v56, vandq_s8(v34, v52)), v27)));
      v150 = vbsl_s8(v58, v149, vqmovun_s16(vaddq_s16(v53, v28)));
      v61 = vbsl_s8(v58, v44, *(int8x8_t *)v55.i8);
      v8 = (int8x16_t)xmmword_1C9862F60;
      v6 = v136;
      v62 = vbsl_s8(v58, v46, vqmovun_s16(v57));
      v63 = vbsl_s8(v58, v47, v153.val[0]);
LABEL_9:
      v74 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v154.val[1]);
      v75 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[1], 1uLL);
      v76 = vabdq_s16(v74, v75);
      v77 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
      v78 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[1], 1uLL);
      v79 = vabdq_s16(v77, v78);
      v80 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v76), v74, v75), v8);
      v81 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v79), v77, v78), v8);
      v82 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v81, v80));
      if (vaddlvq_u16((uint16x8_t)v82))
      {
        v138 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[1]);
        v139 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[1]);
        v140 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[1]);
        v137 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[1]);
        v83 = (int16x8_t)vandq_s8(v143, v82);
        v84 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v83, vshlq_n_s16(v83, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v156.val[1])), vandq_s8((int8x16_t)vcgtq_s16(v144, vaddq_s16(v79, v76)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8(v146, (uint8x8_t)v156.val[1]), (uint8x8_t)v151.val[1], (uint8x8_t)v158.val[1]))));
        v85 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v84), (int8x16_t)v84), v8);
        v86 = (int8x16_t)vcgtq_s16(v141, v80);
        v87 = (int8x16_t)vcgtq_s16(v141, v81);
        if (vaddlvq_u16((uint16x8_t)v85))
        {
          v88 = vmovn_s16(v83);
          v89 = (uint8x8_t)vadd_s8(v88, v88);
          v145 = v86;
          v90 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[1], (uint8x8_t)v154.val[1]);
          v91 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          v92 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v155.val[1]);
          v93 = v87;
          v147 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v139), vhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v155.val[1])), 2uLL), vqadd_u8((uint8x8_t)v158.val[1], v89)), vqsub_u8((uint8x8_t)v158.val[1], v89));
          v94 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v140), vhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v157.val[1])), 2uLL), vqadd_u8((uint8x8_t)v156.val[1], v89)), vqsub_u8((uint8x8_t)v156.val[1], v89));
          v95 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v91, v90), 2uLL), vqadd_u8((uint8x8_t)v157.val[1], v89)), vqsub_u8((uint8x8_t)v157.val[1], v89));
          v96 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v92, v91), 2uLL), vqadd_u8((uint8x8_t)v155.val[1], v89)), vqsub_u8((uint8x8_t)v155.val[1], v89));
          *(uint8x8_t *)v90.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v154.val[1], v148), (int16x8_t)vhaddq_u16((uint16x8_t)v90, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v154.val[1], v89)), vqsub_u8((uint8x8_t)v154.val[1], v89));
          v97 = vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v146, (uint8x8_t)v153.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v92, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v153.val[1], v89));
          v8 = (int8x16_t)xmmword_1C9862F60;
          v6 = v136;
          v98 = (int8x8_t)vmax_u8(v97, vqsub_u8((uint8x8_t)v153.val[1], v89));
          v99 = (int16x8_t)vsubl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          v100 = (int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]);
          v101 = (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]);
          v102.i64[0] = 0x9000900090009;
          v102.i64[1] = 0x9000900090009;
          v103.i64[0] = 0x2000200020002;
          v103.i64[1] = 0x2000200020002;
          v104 = vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
          v105 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          v106 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v99, v102), v101, v103), 4uLL);
          v107 = (int16x8_t)vsubl_u8(v104, (uint8x8_t)v155.val[1]);
          v108.i64[0] = 0xA000A000A000ALL;
          v108.i64[1] = 0xA000A000A000ALL;
          v109 = (int8x16_t)vcgtq_s16(vmulq_s16(v105, v108), vabsq_s16(v106));
          v110 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v109), v105), vnegq_s16(v105));
          v111 = vshrq_n_s16(v105, 1uLL);
          v112 = vnegq_s16(v111);
          v113 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v100, v110), v111), v112), vandq_s8(v145, v109)), v139);
          v114 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(v107, v110), v111), v112), vandq_s8(v93, v109)), v140);
          v115 = vqmovn_s16(v85);
          v154.val[1] = vbsl_s8(v115, *(int8x8_t *)v90.i8, v154.val[1]);
          v153.val[1] = vbsl_s8(v115, v98, v153.val[1]);
          v157.val[1] = vbsl_s8(v115, v95, vqmovun_s16(v113));
          v158.val[1] = vbsl_s8(v115, v147, vqmovun_s16(vaddq_s16(v110, v138)));
          v156.val[1] = vbsl_s8(v115, v94, vqmovun_s16(vsubq_s16(v137, v110)));
          v155.val[1] = vbsl_s8(v115, v96, vqmovun_s16(v114));
        }
        else
        {
          v116 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          v117.i64[0] = 0x2000200020002;
          v117.i64[1] = 0x2000200020002;
          v118 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[1], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[1], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]), v117), 4uLL);
          v117.i64[0] = 0xA000A000A000ALL;
          v117.i64[1] = 0xA000A000A000ALL;
          v119 = (int8x16_t)vcgtq_s16(vmulq_s16(v116, v117), vabsq_s16(v118));
          v120 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v118, v119), v116), vnegq_s16(v116));
          v121 = vshrq_n_s16(v116, 1uLL);
          v122 = vnegq_s16(v121);
          v123 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]), v120), v121), v122), vandq_s8(v86, v119)), v139);
          v124 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]), (uint8x8_t)v155.val[1]), v120), v121), v122), vandq_s8(v87, v119));
          v157.val[1] = vqmovun_s16(v123);
          v158.val[1] = vqmovun_s16(vaddq_s16(v120, v138));
          v156.val[1] = vqmovun_s16(vsubq_s16(v137, v120));
          v155.val[1] = vqmovun_s16(vaddq_s16(v124, v140));
        }
      }
      v159.val[0] = v150;
      v125 = (char *)&v20[-6 * a2];
      v126 = v154.val[1];
      vst2_s8(v125, *(int8x8x2_t *)v59.i8);
      v127 = &v125[a2];
      v128 = v157.val[1];
      vst2_s8(v127, *(int8x8x2_t *)v60.i8);
      v129 = &v127[a2];
      v159.val[1] = v158.val[1];
      vst2_s8(v129, v159);
      v130 = &v129[a2];
      v131 = v156.val[1];
      vst2_s8(v130, *(int8x8x2_t *)v61.i8);
      v132 = &v130[a2];
      v133 = v155.val[1];
      vst2_s8(v132, *(int8x8x2_t *)v62.i8);
      v134 = &v132[a2];
      v135 = v153.val[1];
      vst2_s8(v134, *(int8x8x2_t *)v63.i8);
      v7 += 16;
      if (!--v5)
        return result;
    }
    v59 = v154.val[0];
    v60 = v157.val[0];
    v150 = v158.val[0];
    v61 = v156.val[0];
    v62 = v155.val[0];
LABEL_8:
    v63 = v153.val[0];
    goto LABEL_9;
  }
  return result;
}

int16x8_t *sub_1C98126EC(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  unsigned int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xFF00FF00FF00FFLL;
    v5.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        v7 = *(int16x8_t *)((char *)result - 2 * a2);
        v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1C9862FF0);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C9812780(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xFF00FF00FF00FFLL;
    v5.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      if (*(_WORD *)a3)
      {
        v6 = *(int16x8_t *)((char *)result - 2 * a2);
        v7 = (int8x16_t)vld1q_dup_f32(a3);
        v8 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9863000);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C9812818(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  unsigned int v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xFF00FF00FF00FFLL;
    v8.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        v10 = *(int32x4_t *)(result - 8);
        v11 = *(int32x4_t *)(result + v5 - 8);
        v12 = *(int32x4_t *)(result + v6 - 8);
        v13 = *(int32x4_t *)(result + v7 - 8);
        v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        v18 = (int16x8_t)vzip1q_s64(v14, v16);
        v19 = (int16x8_t)vzip2q_s64(v14, v16);
        v20 = (int16x8_t)vzip1q_s64(v15, v17);
        v21 = (int16x8_t)vzip2q_s64(v15, v17);
        v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1C9862FF0);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        v25 = vsubq_s16(v19, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1C98128F8(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xFF00FF00FF00FFLL;
    v8.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      if (*(_WORD *)a3)
      {
        v9 = *(int32x4_t *)(result - 8);
        v10 = *(int32x4_t *)(result + v5 - 8);
        v11 = *(int32x4_t *)(result + v6 - 8);
        v12 = *(int32x4_t *)(result + v7 - 8);
        v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        v17 = (int16x8_t)vzip1q_s64(v13, v15);
        v18 = (int16x8_t)vzip2q_s64(v13, v15);
        v19 = (int16x8_t)vzip1q_s64(v14, v16);
        v20 = (int8x16_t)vld1q_dup_f32(a3);
        v21 = (int16x8_t)vzip2q_s64(v14, v16);
        v22 = (int16x8_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_1C9863000);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        v25 = vsubq_s16(v18, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C98129DC(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  unsigned int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xFE00FE00FE00FE00;
    v5.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        v7 = *(int16x8_t *)((char *)result - 2 * a2);
        v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1C9862FF0);
        v9 = vaddq_s16(v8, v8);
        v10 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v9), vnegq_s16(v9));
        v11 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v10);
        v12 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v10), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v11, v5);
        *result = v12;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C9812A74(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xFE00FE00FE00FE00;
    v5.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      if (*(_WORD *)a3)
      {
        v6 = *(int16x8_t *)((char *)result - 2 * a2);
        v7 = (int8x16_t)vld1q_dup_f32(a3);
        v8 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9863000);
        v9 = vaddq_s16(v8, v8);
        v10 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v9), vnegq_s16(v9));
        v11 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v10);
        v12 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v10), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v11, v5);
        *result = v12;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C9812B10(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  unsigned int v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xFE00FE00FE00FE00;
    v8.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        v10 = *(int32x4_t *)(result - 8);
        v11 = *(int32x4_t *)(result + v5 - 8);
        v12 = *(int32x4_t *)(result + v6 - 8);
        v13 = *(int32x4_t *)(result + v7 - 8);
        v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        v18 = (int16x8_t)vzip1q_s64(v14, v16);
        v19 = (int16x8_t)vzip2q_s64(v14, v16);
        v20 = (int16x8_t)vzip1q_s64(v15, v17);
        v21 = (int16x8_t)vzip2q_s64(v15, v17);
        v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1C9862FF0);
        v23 = vaddq_s16(v22, v22);
        v24 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v23), vnegq_s16(v23));
        v25 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v24);
        v26 = vsubq_s16(v19, v24);
        v27 = (int32x4_t)vminq_s16(v25, v8);
        v28 = (int32x4_t)vminq_s16(vmaxq_s16(v26, (int16x8_t)0), v8);
        v29 = vzip1q_s32(v27, v28);
        v30 = vzip2q_s32(v27, v28);
        *(_QWORD *)(result - 4) = v29.i64[0];
        *(_QWORD *)(result + v5 - 4) = v29.i64[1];
        *(_QWORD *)(result + v6 - 4) = v30.i64[0];
        *(_QWORD *)(result + v7 - 4) = v30.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1C9812BF4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xFE00FE00FE00FE00;
    v8.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      if (*(_WORD *)a3)
      {
        v9 = *(int32x4_t *)(result - 8);
        v10 = *(int32x4_t *)(result + v5 - 8);
        v11 = *(int32x4_t *)(result + v6 - 8);
        v12 = *(int32x4_t *)(result + v7 - 8);
        v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        v17 = (int16x8_t)vzip1q_s64(v13, v15);
        v18 = (int16x8_t)vzip2q_s64(v13, v15);
        v19 = (int16x8_t)vzip1q_s64(v14, v16);
        v20 = (int16x8_t)vzip2q_s64(v14, v16);
        v21 = (int8x16_t)vld1q_dup_f32(a3);
        v22 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1C9863000);
        v23 = vaddq_s16(v22, v22);
        v24 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v23), vnegq_s16(v23));
        v25 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v24);
        v26 = vsubq_s16(v18, v24);
        v27 = (int32x4_t)vminq_s16(v25, v8);
        v28 = (int32x4_t)vminq_s16(vmaxq_s16(v26, (int16x8_t)0), v8);
        v29 = vzip1q_s32(v27, v28);
        v30 = vzip2q_s32(v27, v28);
        *(_QWORD *)(result - 4) = v29.i64[0];
        *(_QWORD *)(result + v5 - 4) = v29.i64[1];
        *(_QWORD *)(result + v6 - 4) = v30.i64[0];
        *(_QWORD *)(result + v7 - 4) = v30.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C9812CDC(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  unsigned int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xFC00FC00FC00FC00;
    v5.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        v7 = *(int16x8_t *)((char *)result - 2 * a2);
        v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1C9862FF0), 2uLL);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C9812D74(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xFC00FC00FC00FC00;
    v5.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      if (*(_WORD *)a3)
      {
        v6 = *(int16x8_t *)((char *)result - 2 * a2);
        v7 = (int8x16_t)vld1q_dup_f32(a3);
        v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9863000), 2uLL);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C9812E10(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  unsigned int v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xFC00FC00FC00FC00;
    v8.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        v10 = *(int32x4_t *)(result - 8);
        v11 = *(int32x4_t *)(result + v5 - 8);
        v12 = *(int32x4_t *)(result + v6 - 8);
        v13 = *(int32x4_t *)(result + v7 - 8);
        v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        v18 = (int16x8_t)vzip1q_s64(v14, v16);
        v19 = (int16x8_t)vzip2q_s64(v14, v16);
        v20 = (int16x8_t)vzip1q_s64(v15, v17);
        v21 = (int16x8_t)vzip2q_s64(v15, v17);
        v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1C9862FF0), 2uLL);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        v25 = vsubq_s16(v19, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1C9812EF4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xFC00FC00FC00FC00;
    v8.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      if (*(_WORD *)a3)
      {
        v9 = *(int32x4_t *)(result - 8);
        v10 = *(int32x4_t *)(result + v5 - 8);
        v11 = *(int32x4_t *)(result + v6 - 8);
        v12 = *(int32x4_t *)(result + v7 - 8);
        v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        v17 = (int16x8_t)vzip1q_s64(v13, v15);
        v18 = (int16x8_t)vzip2q_s64(v13, v15);
        v19 = (int16x8_t)vzip1q_s64(v14, v16);
        v20 = (int16x8_t)vzip2q_s64(v14, v16);
        v21 = (int8x16_t)vld1q_dup_f32(a3);
        v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1C9863000), 2uLL);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        v25 = vsubq_s16(v18, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C9812FDC(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  unsigned int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xF800F800F800F800;
    v5.i64[1] = 0xF800F800F800F800;
    do
    {
      v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        v7 = *(int16x8_t *)((char *)result - 2 * a2);
        v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1C9862FF0), 3uLL);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C9813074(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xF800F800F800F800;
    v5.i64[1] = 0xF800F800F800F800;
    do
    {
      if (*(_WORD *)a3)
      {
        v6 = *(int16x8_t *)((char *)result - 2 * a2);
        v7 = (int8x16_t)vld1q_dup_f32(a3);
        v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9863000), 3uLL);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C9813110(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  unsigned int v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xF800F800F800F800;
    v8.i64[1] = 0xF800F800F800F800;
    do
    {
      v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        v10 = *(int32x4_t *)(result - 8);
        v11 = *(int32x4_t *)(result + v5 - 8);
        v12 = *(int32x4_t *)(result + v6 - 8);
        v13 = *(int32x4_t *)(result + v7 - 8);
        v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        v18 = (int16x8_t)vzip1q_s64(v14, v16);
        v19 = (int16x8_t)vzip2q_s64(v14, v16);
        v20 = (int16x8_t)vzip1q_s64(v15, v17);
        v21 = (int16x8_t)vzip2q_s64(v15, v17);
        v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1C9862FF0), 3uLL);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        v25 = vsubq_s16(v19, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1C98131F4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xF800F800F800F800;
    v8.i64[1] = 0xF800F800F800F800;
    do
    {
      if (*(_WORD *)a3)
      {
        v9 = *(int32x4_t *)(result - 8);
        v10 = *(int32x4_t *)(result + v5 - 8);
        v11 = *(int32x4_t *)(result + v6 - 8);
        v12 = *(int32x4_t *)(result + v7 - 8);
        v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        v17 = (int16x8_t)vzip1q_s64(v13, v15);
        v18 = (int16x8_t)vzip2q_s64(v13, v15);
        v19 = (int16x8_t)vzip1q_s64(v14, v16);
        v20 = (int16x8_t)vzip2q_s64(v14, v16);
        v21 = (int8x16_t)vld1q_dup_f32(a3);
        v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1C9863000), 3uLL);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        v25 = vsubq_s16(v18, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C98132DC(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  unsigned int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xF000F000F000F000;
    v5.i64[1] = 0xF000F000F000F000;
    do
    {
      v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        v7 = *(int16x8_t *)((char *)result - 2 * a2);
        v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1C9862FF0), 4uLL);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1C9813374(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  int16x8_t v5;
  int16x8_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5.i64[0] = 0xF000F000F000F000;
    v5.i64[1] = 0xF000F000F000F000;
    do
    {
      if (*(_WORD *)a3)
      {
        v6 = *(int16x8_t *)((char *)result - 2 * a2);
        v7 = (int8x16_t)vld1q_dup_f32(a3);
        v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1C9863000), 4uLL);
        v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C9813410(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  unsigned int v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xF000F000F000F000;
    v8.i64[1] = 0xF000F000F000F000;
    do
    {
      v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        v10 = *(int32x4_t *)(result - 8);
        v11 = *(int32x4_t *)(result + v5 - 8);
        v12 = *(int32x4_t *)(result + v6 - 8);
        v13 = *(int32x4_t *)(result + v7 - 8);
        v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        v18 = (int16x8_t)vzip1q_s64(v14, v16);
        v19 = (int16x8_t)vzip2q_s64(v14, v16);
        v20 = (int16x8_t)vzip1q_s64(v15, v17);
        v21 = (int16x8_t)vzip2q_s64(v15, v17);
        v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1C9862FF0), 4uLL);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        v25 = vsubq_s16(v19, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1C98134F4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8.i64[0] = 0xF000F000F000F000;
    v8.i64[1] = 0xF000F000F000F000;
    do
    {
      if (*(_WORD *)a3)
      {
        v9 = *(int32x4_t *)(result - 8);
        v10 = *(int32x4_t *)(result + v5 - 8);
        v11 = *(int32x4_t *)(result + v6 - 8);
        v12 = *(int32x4_t *)(result + v7 - 8);
        v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        v17 = (int16x8_t)vzip1q_s64(v13, v15);
        v18 = (int16x8_t)vzip2q_s64(v13, v15);
        v19 = (int16x8_t)vzip1q_s64(v14, v16);
        v20 = (int16x8_t)vzip2q_s64(v14, v16);
        v21 = (int8x16_t)vld1q_dup_f32(a3);
        v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1C9863000), 4uLL);
        v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v22), vnegq_s16(v22));
        v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        v25 = vsubq_s16(v18, v23);
        v26 = (int32x4_t)vminq_s16(v24, v8);
        v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        v28 = vzip1q_s32(v26, v27);
        v29 = vzip2q_s32(v26, v27);
        *(_QWORD *)(result - 4) = v28.i64[0];
        *(_QWORD *)(result + v5 - 4) = v28.i64[1];
        *(_QWORD *)(result + v6 - 4) = v29.i64[0];
        *(_QWORD *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1C98135DC(uint64_t a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t *v12;

  v6 = a2 + 4;
  v7 = 0uLL;
  v8 = 0uLL;
  do
  {
    v9 = (uint8x8_t *)((char *)a3 + a4 + a4);
    v10 = (uint8x8_t *)((char *)a5 + a6 + a6);
    v8 = vabal_u8(vabal_u8(v8, *a3, *a5), *v9, *v10);
    v11 = (uint8x8_t *)((char *)v9 + a4);
    v12 = (uint8x8_t *)((char *)v10 + a6);
    v7 = vabal_u8(vabal_u8(v7, *(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6)), *v11, *v12);
    v6 -= 4;
    a3 = (uint8x8_t *)((char *)v11 + a4);
    a5 = (uint8x8_t *)((char *)v12 + a6);
  }
  while (v6 > 4);
  return vaddvq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v7.i8, *(uint16x4_t *)v8.i8));
}

uint64_t sub_1C9813654(uint64_t a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t v15;
  uint8x8_t *v16;

  v6 = a2 + 4;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v11 = (uint8x8_t *)((char *)a3 + a4 + a4);
    v12 = *v11;
    v13 = (uint8x8_t *)((char *)v11 + a4);
    v14 = (uint8x8_t *)((char *)a5 + a6 + a6);
    v15 = *v14;
    v16 = (uint8x8_t *)((char *)v14 + a6);
    v7 = (int16x8_t)vabal_u8((uint16x8_t)v7, *a3, *a5);
    v8 = (int16x8_t)vabal_u8((uint16x8_t)v8, *(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
    v9 = (int16x8_t)vabal_u8((uint16x8_t)v9, v12, v15);
    v10 = (int16x8_t)vabal_u8((uint16x8_t)v10, *v13, *v16);
    v6 -= 4;
    a3 = (uint8x8_t *)((char *)v13 + a4);
    a5 = (uint8x8_t *)((char *)v16 + a6);
  }
  while (v6 > 4);
  return vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(v8, v7), v9), v10));
}

uint64_t sub_1C98136DC(uint64_t a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  unsigned int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;

  v6 = *(uint8x16_t *)&a3->i8[a4];
  v7 = *(uint8x16_t *)&a3->i8[2 * a4];
  v8 = *(uint8x16_t *)&a3->i8[3 * a4];
  v9 = *(uint8x16_t *)&a5->i8[a6];
  v10 = *(uint8x16_t *)&a5->i8[2 * a6];
  v11 = *(uint8x16_t *)&a5->i8[3 * a6];
  v12 = (int16x8_t)vabdl_u8(*a3, *a5);
  v13 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v6.i8, *(uint8x8_t *)v9.i8);
  v14 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v7.i8, *(uint8x8_t *)v10.i8);
  v15 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v8.i8, *(uint8x8_t *)v11.i8);
  v16 = (int16x8_t)vabdl_high_u8(*(uint8x16_t *)a3->i8, *(uint8x16_t *)a5->i8);
  v17 = (int16x8_t)vabdl_high_u8(v6, v9);
  v18 = (int16x8_t)vabdl_high_u8(v7, v10);
  v19 = (int16x8_t)vabdl_high_u8(v8, v11);
  if (a2 >= 5)
  {
    v20 = a2 + 4;
    do
    {
      v21 = *(uint8x16_t *)&a3->i8[5 * a4];
      v22 = *(uint8x16_t *)&a3->i8[6 * a4];
      v23 = *(uint8x16_t *)&a3->i8[7 * a4];
      v24 = *(uint8x16_t *)&a5->i8[5 * a6];
      v25 = *(uint8x16_t *)&a5->i8[6 * a6];
      a3 = (uint8x8_t *)((char *)a3 + 4 * a4);
      v26 = *(uint8x16_t *)&a5->i8[7 * a6];
      a5 = (uint8x8_t *)((char *)a5 + 4 * a6);
      v12 = (int16x8_t)vabal_u8((uint16x8_t)v12, *a3, *a5);
      v13 = (int16x8_t)vabal_u8((uint16x8_t)v13, *(uint8x8_t *)v21.i8, *(uint8x8_t *)v24.i8);
      v14 = (int16x8_t)vabal_u8((uint16x8_t)v14, *(uint8x8_t *)v22.i8, *(uint8x8_t *)v25.i8);
      v15 = (int16x8_t)vabal_u8((uint16x8_t)v15, *(uint8x8_t *)v23.i8, *(uint8x8_t *)v26.i8);
      v16 = (int16x8_t)vabal_high_u8((uint16x8_t)v16, *(uint8x16_t *)a3->i8, *(uint8x16_t *)a5->i8);
      v17 = (int16x8_t)vabal_high_u8((uint16x8_t)v17, v21, v24);
      v18 = (int16x8_t)vabal_high_u8((uint16x8_t)v18, v22, v25);
      v19 = (int16x8_t)vabal_high_u8((uint16x8_t)v19, v23, v26);
      v20 -= 4;
    }
    while (v20 > 8);
  }
  v27 = (uint16x8_t)vaddq_s16(vaddq_s16(v13, v15), vaddq_s16(v12, v14));
  v28 = (uint16x8_t)vaddq_s16(vaddq_s16(v17, v19), vaddq_s16(v16, v18));
  return vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16(vpaddlq_u16(v27), *(uint16x4_t *)v28.i8), v28));
}

uint64_t sub_1C98137E4(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint16x8_t v41;

  v6 = 0;
  v7 = a1;
  v8 = a3 + 3 * a4;
  v9 = 2 * a6 + 16;
  v10 = v9 + a6;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = a3 + 2 * a4;
  do
  {
    v14 = *(uint8x16_t *)(a3 + v6 + a4);
    v15 = *(uint8x16_t *)(a3 + v6);
    v16 = *(uint8x16_t *)(a3 + v6 + 16);
    v17 = *(uint8x16_t *)(a3 + v6 + 16 + a4);
    v18 = *(uint8x16_t *)(a5 + v6 + a6);
    v19 = *(uint8x16_t *)(a5 + v6 + 16);
    v20 = *(uint8x16_t *)(a5 + v6);
    v21 = *(uint8x16_t *)(a5 + v6 + 16 + a6);
    v22 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v19.i8);
    v23 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v20.i8);
    v24 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v21.i8);
    v25 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v18.i8);
    v26 = (int16x8_t)vabdl_high_u8(v16, v19);
    v27 = (int16x8_t)vabdl_high_u8(v15, v20);
    v28 = (int16x8_t)vabdl_high_u8(v17, v21);
    v29 = (int16x8_t)vabdl_high_u8(v14, v18);
    if (a2 >= 3)
    {
      v30 = 0;
      v31 = a5;
      v32 = a2 + 2;
      do
      {
        v34 = *(uint8x16_t *)(v13 + v30);
        v33 = *(uint8x16_t *)(v13 + v30 + 16);
        v36 = *(uint8x16_t *)(v8 + v30);
        v35 = *(uint8x16_t *)(v8 + v30 + 16);
        v38 = *(uint8x16_t *)(v31 + v9 - 16);
        v37 = *(uint8x16_t *)(v31 + v9);
        v40 = *(uint8x16_t *)(v31 + v10 - 16);
        v39 = *(uint8x16_t *)(v31 + v10);
        v22 = (int16x8_t)vabal_u8((uint16x8_t)v22, *(uint8x8_t *)v33.i8, *(uint8x8_t *)v37.i8);
        v23 = (int16x8_t)vabal_u8((uint16x8_t)v23, *(uint8x8_t *)v34.i8, *(uint8x8_t *)v38.i8);
        v24 = (int16x8_t)vabal_u8((uint16x8_t)v24, *(uint8x8_t *)v35.i8, *(uint8x8_t *)v39.i8);
        v25 = (int16x8_t)vabal_u8((uint16x8_t)v25, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v40.i8);
        v26 = (int16x8_t)vabal_high_u8((uint16x8_t)v26, v33, v37);
        v27 = (int16x8_t)vabal_high_u8((uint16x8_t)v27, v34, v38);
        v28 = (int16x8_t)vabal_high_u8((uint16x8_t)v28, v35, v39);
        v29 = (int16x8_t)vabal_high_u8((uint16x8_t)v29, v36, v40);
        v32 -= 2;
        v30 += 2 * a4;
        v31 += 2 * a6;
      }
      while (v32 > 4);
    }
    v6 += 32;
    v41 = (uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v23, v25), v26), v28), vaddq_s16(vaddq_s16(vaddq_s16(v22, v24), v27), v29));
    v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v41.i8);
    v13 += 32;
    v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v41);
    v8 += 32;
    v10 += 32;
    v9 += 32;
  }
  while (v6 < v7);
  return vaddvq_s32(vaddq_s32(v11, v12));
}

uint64_t sub_1C9813920(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1C98137E4(2 * a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1C9813928(uint64_t a1, int a2, __int32 *a3, uint64_t a4, __int32 *a5, uint64_t a6)
{
  int v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  __int32 *v11;
  uint8x8_t v12;
  __int32 *v13;
  __int32 *v14;
  uint8x8_t v15;
  __int32 *v16;
  uint8x8_t v17;
  __int32 *v18;
  __int32 *v19;
  uint8x8_t v20;
  int16x8_t v21;
  int16x8_t v22;

  v6 = a2 + 4;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v11 = (__int32 *)((char *)a3 + a4);
    v12.i32[0] = *a3;
    v13 = (__int32 *)((char *)a3 + a4 + a4);
    v12.i32[1] = *v13;
    v14 = (__int32 *)((char *)v13 + a4);
    v15.i32[0] = *v11;
    v15.i32[1] = *v14;
    a3 = (__int32 *)((char *)v14 + a4);
    v16 = (__int32 *)((char *)a5 + a6);
    v17.i32[0] = *a5;
    v18 = (__int32 *)((char *)a5 + a6 + a6);
    v17.i32[1] = *v18;
    v19 = (__int32 *)((char *)v18 + a6);
    v20.i32[0] = *v16;
    v20.i32[1] = *v19;
    a5 = (__int32 *)((char *)v19 + a6);
    v21 = (int16x8_t)vsubl_u8(v12, v17);
    v22 = (int16x8_t)vsubl_u8(v15, v20);
    v7 = vmlal_s16(v7, *(int16x4_t *)v21.i8, *(int16x4_t *)v21.i8);
    v8 = vmlal_s16(v8, *(int16x4_t *)v22.i8, *(int16x4_t *)v22.i8);
    v9 = vmlal_high_s16(v9, v21, v21);
    v10 = vmlal_high_s16(v10, v22, v22);
    v6 -= 4;
  }
  while (v6 > 4);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v7), vaddq_s32(v9, v10)));
}

uint64_t sub_1C98139A8(uint64_t a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  unsigned int v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;

  v6 = (int16x8_t)vsubl_u8(*a3, *a5);
  v7 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
  v8 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + 2 * a4), *(uint8x8_t *)((char *)a5 + 2 * a6));
  v9 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + 3 * a4), *(uint8x8_t *)((char *)a5 + 3 * a6));
  v10 = vmull_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  v11 = vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v7.i8);
  v12 = vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v8.i8);
  v13 = vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8);
  v14 = vmull_high_s16(v6, v6);
  v15 = vmull_high_s16(v7, v7);
  v16 = vmull_high_s16(v8, v8);
  v17 = vmull_high_s16(v9, v9);
  if (a2 >= 5)
  {
    v18 = a2 + 4;
    do
    {
      v19 = *(uint8x8_t *)((char *)a3 + 5 * a4);
      v20 = *(uint8x8_t *)((char *)a3 + 6 * a4);
      v21 = *(uint8x8_t *)((char *)a3 + 7 * a4);
      v22 = *(uint8x8_t *)((char *)a5 + 5 * a6);
      a3 = (uint8x8_t *)((char *)a3 + 4 * a4);
      v23 = *(uint8x8_t *)((char *)a5 + 6 * a6);
      v24 = *(uint8x8_t *)((char *)a5 + 7 * a6);
      a5 = (uint8x8_t *)((char *)a5 + 4 * a6);
      v25 = (int16x8_t)vsubl_u8(*a3, *a5);
      v26 = (int16x8_t)vsubl_u8(v19, v22);
      v27 = (int16x8_t)vsubl_u8(v20, v23);
      v28 = (int16x8_t)vsubl_u8(v21, v24);
      v10 = vmlal_s16(v10, *(int16x4_t *)v25.i8, *(int16x4_t *)v25.i8);
      v11 = vmlal_s16(v11, *(int16x4_t *)v26.i8, *(int16x4_t *)v26.i8);
      v12 = vmlal_s16(v12, *(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8);
      v13 = vmlal_s16(v13, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
      v14 = vmlal_high_s16(v14, v25, v25);
      v15 = vmlal_high_s16(v15, v26, v26);
      v16 = vmlal_high_s16(v16, v27, v27);
      v17 = vmlal_high_s16(v17, v28, v28);
      v18 -= 4;
    }
    while (v18 > 8);
  }
  return vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v11, v13), v15), v17), vaddq_s32(vaddq_s32(vaddq_s32(v10, v12), v14), v16)));
}

uint64_t sub_1C9813AC8(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  char *v6;
  char *v7;
  int32x4_t v8;
  char *v9;
  char *v10;
  uint8x16_t v11;
  uint8x16_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  BOOL v36;

  v6 = (char *)a3 + 3 * a4;
  v7 = (char *)a5 + 3 * a6;
  v8 = 0uLL;
  v9 = (char *)a3 + 2 * a4;
  v10 = (char *)a5 + 2 * a6;
  do
  {
    v11 = *(uint8x16_t *)&a3->i8[a4];
    v12 = *(uint8x16_t *)&a5->i8[a6];
    v13 = (int16x8_t)vsubl_u8(*a3, *a5);
    v14 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a3->i8, *(uint8x16_t *)a5->i8);
    v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v12.i8);
    v16 = (int16x8_t)vsubl_high_u8(v11, v12);
    v17 = vmull_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v13.i8);
    v18 = vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v14.i8);
    v19 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v15.i8);
    v20 = vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8);
    v21 = vmull_high_s16(v13, v13);
    v22 = vmull_high_s16(v14, v14);
    v23 = vmull_high_s16(v15, v15);
    v24 = vmull_high_s16(v16, v16);
    if (a2 >= 3)
    {
      v25 = 0;
      v26 = 0;
      v27 = a2 + 2;
      do
      {
        v28 = *(uint8x16_t *)&v9[v26];
        v29 = *(uint8x16_t *)&v6[v26];
        v30 = *(uint8x16_t *)&v10[v25];
        v31 = *(uint8x16_t *)&v7[v25];
        v32 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v30.i8);
        v33 = (int16x8_t)vsubl_high_u8(v28, v30);
        v34 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v31.i8);
        v35 = (int16x8_t)vsubl_high_u8(v29, v31);
        v17 = vmlal_s16(v17, *(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8);
        v18 = vmlal_s16(v18, *(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8);
        v19 = vmlal_s16(v19, *(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8);
        v20 = vmlal_s16(v20, *(int16x4_t *)v35.i8, *(int16x4_t *)v35.i8);
        v21 = vmlal_high_s16(v21, v32, v32);
        v22 = vmlal_high_s16(v22, v33, v33);
        v23 = vmlal_high_s16(v23, v34, v34);
        v24 = vmlal_high_s16(v24, v35, v35);
        v27 -= 2;
        v26 += 2 * a4;
        v25 += 2 * a6;
      }
      while (v27 > 4);
    }
    a3 += 2;
    a5 += 2;
    v6 += 16;
    v8 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v17, v19), v21), v23), vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v8, v18), v20), v22), v24));
    v9 += 16;
    v7 += 16;
    v10 += 16;
    v36 = __OFSUB__(a1, 16);
    a1 -= 16;
  }
  while (!((a1 < 0) ^ v36 | (a1 == 0)));
  return vaddvq_s32(v8);
}

uint64_t sub_1C9813BE4(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  return sub_1C9813AC8(2 * a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1C9813BEC(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, unsigned int *a5)
{
  int16x8_t v5;
  int16x8_t v6;
  unsigned int v7;
  int16x8_t v8;
  int16x8_t v9;
  uint8x8_t *v10;
  uint8x8_t v11;
  uint8x8_t *v12;
  uint8x8_t *v13;
  uint8x8_t v14;
  uint8x8_t *v15;
  unsigned int v16;
  uint64_t result;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 12;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = (uint8x8_t *)((char *)a1 + a2 + a2);
    v11 = *v10;
    v12 = (uint8x8_t *)((char *)v10 + a2);
    v13 = (uint8x8_t *)((char *)a3 + a4 + a4);
    v14 = *v13;
    v15 = (uint8x8_t *)((char *)v13 + a4);
    v5 = (int16x8_t)vabal_u8((uint16x8_t)v5, *a1, *a3);
    v6 = (int16x8_t)vabal_u8((uint16x8_t)v6, *(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
    v8 = (int16x8_t)vabal_u8((uint16x8_t)v8, v11, v14);
    v9 = (int16x8_t)vabal_u8((uint16x8_t)v9, *v12, *v15);
    v7 -= 4;
    a1 = (uint8x8_t *)((char *)v12 + a2);
    a3 = (uint8x8_t *)((char *)v15 + a4);
  }
  while (v7 > 4);
  v16 = vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(v6, v5), v8), v9));
  result = v16;
  *a5 = v16;
  return result;
}

uint64_t sub_1C9813C78(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint16x8_t v26;
  uint64_t result;

  v5 = &a1[a2];
  v6 = &a3[a4];
  v7 = *(uint8x16_t *)&a1->i8[a2];
  v8 = *(uint8x16_t *)&a3->i8[a4];
  v9 = *(uint8x16_t *)&v5->i8[a2];
  v10 = *(uint8x16_t *)&v6->i8[a4];
  v11 = (int16x8_t)vabdl_u8(*a1, *a3);
  v12 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v7.i8, *(uint8x8_t *)v8.i8);
  v13 = (int16x8_t)vabdl_high_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
  v14 = (int16x8_t)vabdl_high_u8(v7, v8);
  v15 = (int16x8_t)vabdl_u8(*v5, *v6);
  v16 = (int16x8_t)vabdl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v10.i8);
  v17 = (int16x8_t)vabdl_high_u8(*(uint8x16_t *)v5->i8, *(uint8x16_t *)v6->i8);
  v18 = (int16x8_t)vabdl_high_u8(v9, v10);
  v19 = 3;
  do
  {
    v20 = *(uint8x16_t *)&a1->i8[3 * a2];
    v21 = *(uint8x16_t *)&a1->i8[10 * a2];
    v22 = *(uint8x16_t *)&a1->i8[11 * a2];
    a1 = (uint8x8_t *)((char *)a1 + 2 * a2);
    v23 = *(uint8x16_t *)&a3->i8[3 * a4];
    v24 = *(uint8x16_t *)&a3->i8[10 * a4];
    v25 = *(uint8x16_t *)&a3->i8[11 * a4];
    a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
    v11 = (int16x8_t)vabal_u8((uint16x8_t)v11, *a1, *a3);
    v12 = (int16x8_t)vabal_u8((uint16x8_t)v12, *(uint8x8_t *)v20.i8, *(uint8x8_t *)v23.i8);
    v13 = (int16x8_t)vabal_high_u8((uint16x8_t)v13, *(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
    v14 = (int16x8_t)vabal_high_u8((uint16x8_t)v14, v20, v23);
    v15 = (int16x8_t)vabal_u8((uint16x8_t)v15, *(uint8x8_t *)v21.i8, *(uint8x8_t *)v24.i8);
    v16 = (int16x8_t)vabal_u8((uint16x8_t)v16, *(uint8x8_t *)v22.i8, *(uint8x8_t *)v25.i8);
    v17 = (int16x8_t)vabal_high_u8((uint16x8_t)v17, v21, v24);
    v18 = (int16x8_t)vabal_high_u8((uint16x8_t)v18, v22, v25);
    --v19;
  }
  while (v19);
  v26 = (uint16x8_t)vpaddq_s16(vpaddq_s16(vaddq_s16(v11, v12), vaddq_s16(v14, v13)), vpaddq_s16(vaddq_s16(v16, v15), vaddq_s16(v18, v17)));
  *(uint32x4_t *)(a5 + 4) = vpaddlq_u16(v26);
  v26.i32[0] = vaddlvq_u16(v26);
  result = v26.u32[0];
  *(_DWORD *)a5 = v26.i32[0];
  return result;
}

uint64_t sub_1C9813D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  int v19;

  v9 = 0;
  LODWORD(v10) = 0;
  v11 = (uint64_t)(a5 + 1);
  v12 = 1;
  do
  {
    v13 = 0;
    v14 = v12;
    v15 = a1 + v9 * a2;
    v16 = 1;
    v17 = a3 + v9 * a4;
    do
    {
      v18 = v16;
      v19 = sub_1C9813C78((uint8x8_t *)(v15 + v13), a2, (uint8x8_t *)(v17 + v13), a4, v11);
      v16 = 0;
      v10 = (v19 + v10);
      v11 += 20;
      v13 = 16;
    }
    while ((v18 & 1) != 0);
    v12 = 0;
    v9 = 16;
  }
  while ((v14 & 1) != 0);
  *a5 = v10;
  return v10;
}

uint64_t sub_1C9813E34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  _DWORD *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _DWORD *v32;
  int v33;

  v26 = result;
  v7 = 0;
  LODWORD(result) = 0;
  v8 = a5 + 1;
  v9 = 1;
  do
  {
    v10 = 0;
    v28 = v9;
    v30 = v26 + v7 * a2;
    v11 = 1;
    v29 = a3 + v7 * a4;
    do
    {
      v33 = result;
      v12 = 0;
      v13 = 0;
      v31 = v11;
      v14 = v30 + v10;
      v15 = v29 + v10;
      v32 = v8;
      v16 = (uint64_t)(v8 + 1);
      v17 = 1;
      do
      {
        v18 = 0;
        v19 = v17;
        v20 = v14 + v12 * a2;
        v21 = 1;
        v22 = v15 + v12 * a4;
        do
        {
          v23 = v21;
          v24 = sub_1C9813C78((uint8x8_t *)(v20 + v18), a2, (uint8x8_t *)(v22 + v18), a4, v16);
          v21 = 0;
          v13 += v24;
          v16 += 20;
          v18 = 16;
        }
        while ((v23 & 1) != 0);
        v17 = 0;
        v12 = 16;
      }
      while ((v19 & 1) != 0);
      v11 = 0;
      *v32 = v13;
      v8 = v32 + 21;
      result = (v13 + v33);
      v10 = 32;
    }
    while ((v31 & 1) != 0);
    v9 = 0;
    v7 = 32;
  }
  while ((v28 & 1) != 0);
  *a5 = result;
  return result;
}

uint64_t sub_1C9813F68(unsigned int a1)
{
  return off_1E8291C50[__clz(__rbit32(a1)) - 2]();
}

uint64_t sub_1C9813F84(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v8;
  uint8x8_t *v9;
  uint8x8_t v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t v15;
  uint8x8_t *v16;
  uint8x8_t v17;
  uint8x8_t *v18;
  uint8x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint8x8_t *v22;
  uint8x8_t v23;
  int16x8_t v24;
  uint8x8_t *v25;
  uint8x8_t v26;
  uint8x8_t *v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t *v30;
  uint8x8_t v31;
  uint8x8_t *v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int64x2_t v87;
  int16x8_t v88;
  int64x2_t v89;
  int16x8_t v90;
  int64x2_t v91;
  int16x8_t v92;
  int64x2_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  BOOL v98;

  result = 0;
  do
  {
    if (a1 >= 1)
    {
      v8 = 0;
      do
      {
        v9 = (uint8x8_t *)(a3 + v8 + a4);
        v10 = *v9;
        v11 = (uint8x8_t *)((char *)v9 + a4);
        v12 = *v11;
        v13 = (uint8x8_t *)((char *)v11 + a4);
        v14 = (uint8x8_t *)(a5 + v8 + a6);
        v15 = *v14;
        v16 = (uint8x8_t *)((char *)v14 + a6);
        v17 = *v16;
        v18 = (uint8x8_t *)((char *)v16 + a6);
        v19 = *v13;
        v20 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a3 + v8), *(uint8x8_t *)(a5 + v8));
        v21 = (int16x8_t)vsubl_u8(v10, v15);
        v22 = (uint8x8_t *)((char *)v13 + a4);
        v23 = *v22;
        v24 = (int16x8_t)vsubl_u8(v12, v17);
        v25 = (uint8x8_t *)((char *)v22 + a4);
        v26 = *v25;
        v27 = (uint8x8_t *)((char *)v25 + a4);
        v28 = *(uint8x8_t *)((char *)v27 + a4);
        v29 = *v27;
        v30 = (uint8x8_t *)((char *)v18 + a6 + a6);
        v31 = *v30;
        v32 = (uint8x8_t *)((char *)v30 + a6);
        v33 = (int16x8_t)vsubl_u8(v19, *v18);
        v34 = (int16x8_t)vsubl_u8(v23, *(uint8x8_t *)((char *)v18 + a6));
        v35 = (int16x8_t)vsubl_u8(v26, v31);
        v36 = (int16x8_t)vsubl_u8(v29, *v32);
        v37 = (int16x8_t)vsubl_u8(v28, *(uint8x8_t *)((char *)v32 + a6));
        v38 = vaddq_s16(v21, v20);
        v39 = vsubq_s16(v20, v21);
        v40 = vaddq_s16(v33, v24);
        v41 = vsubq_s16(v24, v33);
        v42 = vtrn1q_s16(v38, v39);
        v43 = vtrn2q_s16(v38, v39);
        v44 = vtrn1q_s16(v40, v41);
        v45 = vtrn2q_s16(v40, v41);
        v46 = vaddq_s16(v43, v42);
        v47 = vsubq_s16(v42, v43);
        v48 = vaddq_s16(v45, v44);
        v49 = vsubq_s16(v44, v45);
        v50 = (int32x4_t)vaddq_s16(v48, v46);
        v51 = (int32x4_t)vsubq_s16(v46, v48);
        v52 = (int32x4_t)vaddq_s16(v49, v47);
        v53 = (int32x4_t)vsubq_s16(v47, v49);
        v54 = (int16x8_t)vtrn1q_s32(v50, v51);
        v55 = (int16x8_t)vtrn2q_s32(v50, v51);
        v56 = (int16x8_t)vtrn1q_s32(v52, v53);
        v57 = (int16x8_t)vtrn2q_s32(v52, v53);
        v58 = vaddq_s16(v55, v54);
        v59 = vaddq_s16(v35, v34);
        v60 = vsubq_s16(v54, v55);
        v61 = vsubq_s16(v34, v35);
        v62 = vaddq_s16(v37, v36);
        v63 = vsubq_s16(v36, v37);
        v64 = vtrn1q_s16(v59, v61);
        v65 = vtrn2q_s16(v59, v61);
        v66 = vaddq_s16(v57, v56);
        v67 = vtrn1q_s16(v62, v63);
        v68 = vtrn2q_s16(v62, v63);
        v69 = vaddq_s16(v65, v64);
        v70 = vsubq_s16(v64, v65);
        v71 = vaddq_s16(v68, v67);
        v72 = vsubq_s16(v56, v57);
        v73 = vsubq_s16(v67, v68);
        v74 = (int32x4_t)vaddq_s16(v71, v69);
        v75 = (int32x4_t)vsubq_s16(v69, v71);
        v76 = (int32x4_t)vaddq_s16(v73, v70);
        v77 = (int32x4_t)vsubq_s16(v70, v73);
        v78 = (int16x8_t)vtrn1q_s32(v74, v75);
        v79 = (int16x8_t)vtrn2q_s32(v74, v75);
        v80 = (int16x8_t)vtrn1q_s32(v76, v77);
        v81 = (int16x8_t)vtrn2q_s32(v76, v77);
        v82 = vaddq_s16(v79, v78);
        v83 = vsubq_s16(v78, v79);
        v84 = vaddq_s16(v81, v80);
        v85 = vsubq_s16(v80, v81);
        v86 = vaddq_s16(v82, v58);
        v87 = (int64x2_t)vsubq_s16(v58, v82);
        v88 = vaddq_s16(v84, v66);
        v89 = (int64x2_t)vsubq_s16(v66, v84);
        v90 = vaddq_s16(v83, v60);
        v91 = (int64x2_t)vsubq_s16(v60, v83);
        v92 = vaddq_s16(v85, v72);
        v93 = (int64x2_t)vsubq_s16(v72, v85);
        v94 = (int16x8_t)vzip2q_s64((int64x2_t)v86, v87);
        v95 = (int16x8_t)vzip2q_s64((int64x2_t)v88, v89);
        v96 = (int16x8_t)vzip2q_s64((int64x2_t)v90, v91);
        v97 = (int16x8_t)vzip2q_s64((int64x2_t)v92, v93);
        v86.i64[1] = v87.i64[0];
        v88.i64[1] = v89.i64[0];
        v90.i64[1] = v91.i64[0];
        v92.i64[1] = v93.i64[0];
        result = result
               + ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v88), (uint16x8_t)vabsq_s16(v95)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v86), (uint16x8_t)vabsq_s16(v94))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(v96)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(v97)))))+ 1) >> 1);
        v8 += 8;
      }
      while (v8 < a1);
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    v98 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v98 | (a2 == 0)));
  return result;
}

uint64_t sub_1C98141A8(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t i;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  BOOL v47;
  uint64_t v49;
  int16x8_t v50[32];
  uint64_t v51;

  v12 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v49 = 16 * a4;
  v13 = 16 * a6;
  do
  {
    if (a1 >= 1)
    {
      v14 = 0;
      do
      {
        sub_1C9815F74((uint8x8_t *)(a3 + v14), a4, (uint8x8_t *)(a5 + v14), a6, 16, v50);
        v15 = 0uLL;
        for (i = 9; i != 17; i += 2)
        {
          v17 = v50[i - 9];
          v18 = v50[i - 8];
          v19 = v50[i - 1];
          v20 = v50[i];
          v21 = v50[i + 7];
          v22 = v50[i + 8];
          v23 = v50[i + 15];
          v24 = v50[i + 16];
          v25 = vaddq_s16(v19, v17);
          v26 = vaddq_s16(v20, v18);
          v27 = (int64x2_t)vsubq_s16(v17, v19);
          v28 = (int64x2_t)vsubq_s16(v18, v20);
          v29 = vaddq_s16(v23, v21);
          v30 = vaddq_s16(v24, v22);
          v31 = (int64x2_t)vsubq_s16(v21, v23);
          v32 = (int64x2_t)vsubq_s16(v22, v24);
          v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
          v34 = (int16x8_t)vzip2q_s64((int64x2_t)v26, v28);
          v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
          v36 = (int16x8_t)vzip2q_s64((int64x2_t)v30, v32);
          v25.i64[1] = v27.i64[0];
          v26.i64[1] = v28.i64[0];
          v37 = vaddq_s16(v33, v25);
          v29.i64[1] = v31.i64[0];
          v38 = vaddq_s16(v34, v26);
          v39 = vsubq_s16(v25, v33);
          v30.i64[1] = v32.i64[0];
          v40 = vaddq_s16(v35, v29);
          v41 = vaddq_s16(v36, v30);
          v42 = vsubq_s16(v26, v34);
          v43 = vsubq_s16(v29, v35);
          v44 = vsubq_s16(v30, v36);
          v45 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v37, v40)), (uint16x8_t)vabsq_s16(vsubq_s16(v38, v41))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v37)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v38))));
          v46 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v39, v43)), (uint16x8_t)vabsq_s16(vsubq_s16(v42, v44))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)), (uint16x8_t)vabsq_s16(vaddq_s16(v44, v42))));
          v15 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v15, v45), *(uint16x4_t *)v45.i8), v46), *(uint16x4_t *)v46.i8);
        }
        v12 = v12 + ((vaddvq_s32(v15) + 2) >> 2);
        v14 += 16;
      }
      while ((int)v14 < a1);
    }
    a3 += v49;
    a5 += v13;
    v47 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v47 | (a2 == 0)));
  return v12;
}

uint64_t sub_1C981438C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int16x8_t *v12;
  int i;
  uint64_t j;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  uint64_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int16x8_t v71[64];
  int16x8_t v72[64];
  uint64_t v73;

  v10 = 0;
  v73 = *MEMORY[0x1E0C80C00];
  v67 = 32 * a6;
  v68 = 32 * a4;
  do
  {
    v69 = a2;
    if (a1 >= 1)
    {
      v11 = 0;
      do
      {
        v12 = v71;
        sub_1C9815F74((uint8x8_t *)(a3 + v11), a4, (uint8x8_t *)(a5 + v11), a6, 32, v71);
        sub_1C9815F74((uint8x8_t *)(a3 + v11 + 16), a4, (uint8x8_t *)(a5 + v11 + 16), a6, 32, v72);
        for (i = 0; i != 4; ++i)
        {
          for (j = 9; j != 17; j += 2)
          {
            v15 = &v12[j];
            v16 = v12[j - 9];
            v17 = v12[j - 8];
            v18 = v12[j - 1];
            v19 = v12[j];
            v20 = v12[j + 7];
            v21 = v12[j + 8];
            v22 = v12[j + 15];
            v23 = v12[j + 16];
            v24 = vaddq_s16(v18, v16);
            v25 = vaddq_s16(v19, v17);
            v26 = (int64x2_t)vsubq_s16(v16, v18);
            v27 = (int64x2_t)vsubq_s16(v17, v19);
            v28 = vaddq_s16(v22, v20);
            v29 = vaddq_s16(v23, v21);
            v30 = (int64x2_t)vsubq_s16(v20, v22);
            v31 = (int64x2_t)vsubq_s16(v21, v23);
            v32 = (int16x8_t)vzip2q_s64((int64x2_t)v24, v26);
            v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
            v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
            v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
            v24.i64[1] = v26.i64[0];
            v25.i64[1] = v27.i64[0];
            v36 = vaddq_s16(v32, v24);
            v37 = vaddq_s16(v33, v25);
            v38 = vsubq_s16(v24, v32);
            v39 = vsubq_s16(v25, v33);
            v28.i64[1] = v30.i64[0];
            v29.i64[1] = v31.i64[0];
            v40 = vaddq_s16(v34, v28);
            v41 = vaddq_s16(v35, v29);
            v42 = vsubq_s16(v28, v34);
            v43 = vsubq_s16(v29, v35);
            v44 = vrhaddq_s16(v36, v40);
            v45 = vrhaddq_s16(v37, v41);
            v46 = vrshrq_n_s16(vsubq_s16(v36, v40), 1uLL);
            v47 = vrshrq_n_s16(vsubq_s16(v37, v41), 1uLL);
            v48 = vrhaddq_s16(v38, v42);
            v49 = vrhaddq_s16(v39, v43);
            v50 = vrshrq_n_s16(vsubq_s16(v38, v42), 1uLL);
            v15[-9] = vhaddq_s16(v44, v45);
            v15[-8] = vhaddq_s16(v46, v47);
            v51 = vrshrq_n_s16(vsubq_s16(v39, v43), 1uLL);
            v15[-1] = vhaddq_s16(v48, v49);
            *v15 = vhaddq_s16(v50, v51);
            v15[7] = vhsubq_s16(v44, v45);
            v15[8] = vhsubq_s16(v46, v47);
            v15[15] = vhsubq_s16(v48, v49);
            v15[16] = vhsubq_s16(v50, v51);
          }
          v12 += 32;
        }
        v52 = 0;
        v53 = 0uLL;
        do
        {
          v54 = v71[v52];
          v55 = v71[v52 + 1];
          v56 = v71[v52 + 64];
          v57 = v72[v52 + 1];
          v58 = v71[v52 + 32];
          v59 = v71[v52 + 33];
          v60 = v72[v52 + 32];
          v61 = v72[v52 + 33];
          v62 = vaddq_s16(v58, v54);
          v63 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v54, v58)), (uint16x8_t)vabsq_s16(vsubq_s16(v56, v60)));
          v64 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v59, v55)), (uint16x8_t)vabsq_s16(vaddq_s16(v61, v57))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v62), (uint16x8_t)vabsq_s16(vaddq_s16(v60, v56))));
          v65 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v55, v59)), (uint16x8_t)vabsq_s16(vsubq_s16(v57, v61))), v63);
          v53 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v53, v64), *(uint16x4_t *)v64.i8), v65), *(uint16x4_t *)v65.i8);
          v52 += 2;
        }
        while (v52 != 32);
        v10 = v10 + ((vaddvq_s32(v53) + 1) >> 1);
        v11 += 32;
      }
      while ((int)v11 < a1);
    }
    a3 += v68;
    a5 += v67;
    a2 = v69 - 32;
  }
  while (v69 > 32);
  return v10;
}

float sub_1C9814650(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int v6;
  int16x8_t v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int32x4_t v43;
  int32x4_t v44;
  char *v45;
  unint64_t v46;
  unint64_t i;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  uint16x8_t v100;

  if (a1 >= 8)
  {
    v35 = 4 * a4;
    v36 = 4 * a6;
    v37 = a1;
    v38 = (char *)a5 + 3 * a6;
    v39 = (char *)a5 + 2 * a6;
    v40 = (char *)a5 + a6;
    v41 = (char *)a3 + 3 * a4;
    v42 = (char *)a3 + a4;
    v43 = 0uLL;
    v44 = 0uLL;
    v45 = (char *)a3 + 2 * a4;
    do
    {
      v46 = 0;
      for (i = 0; i < v37; i += 8)
      {
        v48 = *(uint8x16_t *)a3[v46 / 8].i8;
        v49 = *(uint8x16_t *)&v42[v46];
        v50 = *(uint8x16_t *)&v45[v46];
        v51 = *(uint8x16_t *)&v41[v46];
        v52 = *(uint8x16_t *)a5[v46 / 8].i8;
        v53 = *(uint8x16_t *)&v40[v46];
        v54 = *(uint8x16_t *)&v39[v46];
        v55 = *(uint8x16_t *)&v38[v46];
        v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v52.i8);
        v57 = (int16x8_t)vsubl_high_u8(v48, v52);
        v58 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v53.i8);
        v59 = (int16x8_t)vsubl_high_u8(v49, v53);
        v60 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v54.i8);
        v61 = (int16x8_t)vsubl_high_u8(v50, v54);
        v62 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v55.i8);
        v63 = (int16x8_t)vsubl_high_u8(v51, v55);
        v64 = vaddq_s16(v58, v56);
        v65 = vsubq_s16(v56, v58);
        v66 = vaddq_s16(v62, v60);
        v67 = vsubq_s16(v60, v62);
        v68 = vzip1q_s16(v64, v65);
        v69 = vzip2q_s16(v64, v65);
        v70 = vzip1q_s16(v66, v67);
        v71 = vzip2q_s16(v66, v67);
        v72 = (int32x4_t)vaddq_s16(v70, v68);
        v73 = (int32x4_t)vsubq_s16(v68, v70);
        v74 = (int32x4_t)vaddq_s16(v71, v69);
        v75 = (int32x4_t)vsubq_s16(v69, v71);
        v76 = (int16x8_t)vzip1q_s32(v72, v73);
        v77 = (int16x8_t)vzip2q_s32(v72, v73);
        v78 = (int16x8_t)vzip1q_s32(v74, v75);
        v79 = (int16x8_t)vzip2q_s32(v74, v75);
        v80 = vaddq_s16(v78, v76);
        v81 = vsubq_s16(v76, v78);
        v82 = vaddq_s16(v79, v77);
        v83 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v81), (uint16x8_t)vabsq_s16(vsubq_s16(v77, v79)));
        v84 = vaddq_s16(v59, v57);
        v85 = vsubq_s16(v57, v59);
        v86 = vaddq_s16(v63, v61);
        v87 = vsubq_s16(v61, v63);
        v88 = vzip1q_s16(v84, v85);
        v89 = vzip2q_s16(v84, v85);
        v90 = vzip1q_s16(v86, v87);
        v91 = vzip2q_s16(v86, v87);
        v92 = (int32x4_t)vaddq_s16(v90, v88);
        v93 = (int32x4_t)vsubq_s16(v88, v90);
        v94 = (int32x4_t)vaddq_s16(v91, v89);
        v95 = (int32x4_t)vsubq_s16(v89, v91);
        v96 = (int16x8_t)vzip1q_s32(v92, v93);
        v97 = (int16x8_t)vzip2q_s32(v92, v93);
        v98 = (int16x8_t)vzip1q_s32(v94, v95);
        v99 = (int16x8_t)vzip2q_s32(v94, v95);
        v100 = (uint16x8_t)vaddq_s16(vaddq_s16(v83, (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v80), (uint16x8_t)vabsq_s16(v82))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v98, v96)), (uint16x8_t)vabsq_s16(vaddq_s16(v99, v97))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v96, v98)), (uint16x8_t)vabsq_s16(vsubq_s16(v97, v99)))));
        v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v100.i8);
        v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v100);
        v46 += 16;
      }
      a3 = (uint8x8_t *)((char *)a3 + v35);
      a5 = (uint8x8_t *)((char *)a5 + v36);
      v38 += v36;
      v39 += v36;
      v40 += v36;
      v41 += v35;
      v45 += v35;
      v42 += v35;
      a2 -= 4;
    }
    while (a2);
    return COERCE_FLOAT(vaddvq_s32(vaddq_s32(v44, v43)));
  }
  else
  {
    v6 = a2 + 4;
    v7 = 0uLL;
    do
    {
      v8 = (uint8x8_t *)((char *)a3 + a4 + a4);
      v9 = *v8;
      v10 = (uint8x8_t *)((char *)v8 + a4);
      v11 = (uint8x8_t *)((char *)a5 + a6 + a6);
      v12 = *v11;
      v13 = (uint8x8_t *)((char *)v11 + a6);
      v14 = (int16x8_t)vsubl_u8(*a3, *a5);
      v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
      v16 = (int16x8_t)vsubl_u8(v9, v12);
      v17 = (int16x8_t)vsubl_u8(*v10, *v13);
      v18 = vaddq_s16(v15, v14);
      v19 = vsubq_s16(v14, v15);
      v20 = vaddq_s16(v17, v16);
      v21 = vsubq_s16(v16, v17);
      v22 = vzip1q_s16(v18, v19);
      v23 = vzip2q_s16(v18, v19);
      v24 = vzip1q_s16(v20, v21);
      v25 = vzip2q_s16(v20, v21);
      v26 = (int32x4_t)vaddq_s16(v24, v22);
      v27 = (int32x4_t)vsubq_s16(v22, v24);
      v28 = (int32x4_t)vaddq_s16(v25, v23);
      v29 = (int32x4_t)vsubq_s16(v23, v25);
      v30 = (int16x8_t)vzip1q_s32(v26, v27);
      v31 = (int16x8_t)vzip2q_s32(v26, v27);
      v32 = (int16x8_t)vzip1q_s32(v28, v29);
      v33 = (int16x8_t)vzip2q_s32(v28, v29);
      v7 = vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v32, v30)), (uint16x8_t)vabsq_s16(vaddq_s16(v33, v31))), v7), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v30, v32)), (uint16x8_t)vabsq_s16(vsubq_s16(v31, v33))));
      v6 -= 4;
      a3 = (uint8x8_t *)((char *)v10 + a4);
      a5 = (uint8x8_t *)((char *)v13 + a6);
    }
    while (v6 > 4);
    return COERCE_FLOAT(vaddlvq_u16((uint16x8_t)v7));
  }
}

float sub_1C98148DC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v6;
  uint64_t v7;
  uint64_t i;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  int16x8_t v15;
  int16x8_t v16;
  uint8x8_t *v17;
  uint8x8_t *v18;
  int16x8_t v19;
  int16x8_t v20;
  uint8x8_t *v21;
  uint8x8_t *v22;
  int16x8_t v23;
  int16x8_t v24;
  uint8x8_t *v25;
  uint8x8_t *v26;
  int16x8_t v27;
  int16x8_t v28;
  uint8x8_t *v29;
  uint8x8_t *v30;
  int16x8_t v31;
  int16x8_t v32;
  uint8x8_t *v33;
  uint8x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  BOOL v144;
  float result;

  v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      v7 = 0;
      for (i = 0; i < a1; i += 8)
      {
        v9 = *(uint8x16_t *)(a3 + v7);
        v10 = *(uint8x16_t *)(a5 + v7);
        v11 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v10.i8);
        v12 = (int16x8_t)vsubl_high_u8(v9, v10);
        v13 = (uint8x8_t *)(a3 + v7 + a4);
        v14 = (uint8x8_t *)(a5 + v7 + a6);
        v15 = (int16x8_t)vsubl_u8(*v13, *v14);
        v16 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v13->i8, *(uint8x16_t *)v14->i8);
        v17 = (uint8x8_t *)((char *)v13 + a4);
        v18 = (uint8x8_t *)((char *)v14 + a6);
        v19 = (int16x8_t)vsubl_u8(*v17, *v18);
        v20 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v17->i8, *(uint8x16_t *)v18->i8);
        v21 = (uint8x8_t *)((char *)v17 + a4);
        v22 = (uint8x8_t *)((char *)v18 + a6);
        v23 = (int16x8_t)vsubl_u8(*v21, *v22);
        v24 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v21->i8, *(uint8x16_t *)v22->i8);
        v25 = (uint8x8_t *)((char *)v21 + a4);
        v26 = (uint8x8_t *)((char *)v22 + a6);
        v27 = (int16x8_t)vsubl_u8(*v25, *v26);
        v28 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v25->i8, *(uint8x16_t *)v26->i8);
        v29 = (uint8x8_t *)((char *)v25 + a4);
        v30 = (uint8x8_t *)((char *)v26 + a6);
        v31 = (int16x8_t)vsubl_u8(*v29, *v30);
        v32 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v29->i8, *(uint8x16_t *)v30->i8);
        v33 = (uint8x8_t *)((char *)v29 + a4);
        v34 = (uint8x8_t *)((char *)v30 + a6);
        v35 = (int16x8_t)vsubl_u8(*v33, *v34);
        v36 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v33->i8, *(uint8x16_t *)v34->i8);
        v37 = *(uint8x16_t *)&v33->i8[a4];
        v38 = *(uint8x16_t *)&v34->i8[a6];
        v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v38.i8);
        v40 = (int16x8_t)vsubl_high_u8(v37, v38);
        v41 = vaddq_s16(v15, v11);
        v42 = vsubq_s16(v11, v15);
        v43 = vaddq_s16(v23, v19);
        v44 = vsubq_s16(v19, v23);
        v45 = vzip1q_s16(v41, v42);
        v46 = vzip2q_s16(v41, v42);
        v47 = vzip1q_s16(v43, v44);
        v48 = vzip2q_s16(v43, v44);
        v49 = (int32x4_t)vaddq_s16(v47, v45);
        v50 = (int32x4_t)vsubq_s16(v45, v47);
        v51 = (int32x4_t)vaddq_s16(v48, v46);
        v52 = (int32x4_t)vsubq_s16(v46, v48);
        v53 = (int16x8_t)vzip1q_s32(v49, v50);
        v54 = (int16x8_t)vzip2q_s32(v49, v50);
        v55 = (int16x8_t)vzip1q_s32(v51, v52);
        v56 = (int16x8_t)vzip2q_s32(v51, v52);
        v57 = vaddq_s16(v54, v53);
        v58 = vsubq_s16(v53, v54);
        v59 = vaddq_s16(v56, v55);
        v60 = vsubq_s16(v55, v56);
        v61 = vaddq_s16(v16, v12);
        v62 = vsubq_s16(v12, v16);
        v63 = vaddq_s16(v57, v59);
        v64 = vaddq_s16(v24, v20);
        v65 = vsubq_s16(v20, v24);
        v66 = vzip1q_s16(v61, v62);
        v67 = vzip2q_s16(v61, v62);
        v68 = vzip1q_s16(v64, v65);
        v69 = vsubq_s16(v57, v59);
        v70 = vzip2q_s16(v64, v65);
        v71 = (int32x4_t)vaddq_s16(v68, v66);
        v72 = (int32x4_t)vsubq_s16(v66, v68);
        v73 = (int32x4_t)vaddq_s16(v70, v67);
        v74 = (int32x4_t)vsubq_s16(v67, v70);
        v75 = vaddq_s16(v60, v58);
        v76 = (int16x8_t)vzip1q_s32(v71, v72);
        v77 = (int16x8_t)vzip2q_s32(v71, v72);
        v78 = (int16x8_t)vzip1q_s32(v73, v74);
        v79 = (int16x8_t)vzip2q_s32(v73, v74);
        v80 = vaddq_s16(v77, v76);
        v81 = vsubq_s16(v58, v60);
        v82 = vsubq_s16(v76, v77);
        v83 = vaddq_s16(v79, v78);
        v84 = vsubq_s16(v78, v79);
        v85 = vaddq_s16(v80, v83);
        v86 = vsubq_s16(v80, v83);
        v87 = vaddq_s16(v84, v82);
        v88 = vsubq_s16(v82, v84);
        v89 = vaddq_s16(v85, v63);
        v90 = vsubq_s16(v63, v85);
        v91 = vaddq_s16(v87, v75);
        v92 = vsubq_s16(v75, v87);
        v93 = vaddq_s16(v86, v69);
        v94 = vaddq_s16(v31, v27);
        v95 = vsubq_s16(v27, v31);
        v96 = vaddq_s16(v39, v35);
        v97 = vsubq_s16(v35, v39);
        v98 = vzip1q_s16(v94, v95);
        v99 = vsubq_s16(v69, v86);
        v100 = vzip2q_s16(v94, v95);
        v101 = vzip1q_s16(v96, v97);
        v102 = vzip2q_s16(v96, v97);
        v103 = (int32x4_t)vaddq_s16(v101, v98);
        v104 = (int32x4_t)vsubq_s16(v98, v101);
        v105 = (int32x4_t)vaddq_s16(v102, v100);
        v106 = (int32x4_t)vsubq_s16(v100, v102);
        v107 = (int16x8_t)vzip1q_s32(v103, v104);
        v108 = (int16x8_t)vzip2q_s32(v103, v104);
        v109 = (int16x8_t)vzip1q_s32(v105, v106);
        v110 = (int16x8_t)vzip2q_s32(v105, v106);
        v111 = vaddq_s16(v108, v107);
        v112 = vsubq_s16(v107, v108);
        v113 = vaddq_s16(v110, v109);
        v114 = vsubq_s16(v109, v110);
        v115 = vaddq_s16(v111, v113);
        v116 = vaddq_s16(v32, v28);
        v117 = vsubq_s16(v28, v32);
        v118 = vaddq_s16(v40, v36);
        v119 = vsubq_s16(v36, v40);
        v120 = vzip1q_s16(v116, v117);
        v121 = vsubq_s16(v111, v113);
        v122 = vzip2q_s16(v116, v117);
        v123 = vzip1q_s16(v118, v119);
        v124 = vzip2q_s16(v118, v119);
        v125 = (int32x4_t)vaddq_s16(v123, v120);
        v126 = (int32x4_t)vsubq_s16(v120, v123);
        v127 = vaddq_s16(v114, v112);
        v128 = (int32x4_t)vaddq_s16(v124, v122);
        v129 = (int32x4_t)vsubq_s16(v122, v124);
        v130 = (int16x8_t)vzip1q_s32(v125, v126);
        v131 = (int16x8_t)vzip2q_s32(v125, v126);
        v132 = (int16x8_t)vzip1q_s32(v128, v129);
        v133 = vsubq_s16(v112, v114);
        v134 = (int16x8_t)vzip2q_s32(v128, v129);
        v135 = vaddq_s16(v131, v130);
        v136 = vsubq_s16(v130, v131);
        v137 = vaddq_s16(v134, v132);
        v138 = vsubq_s16(v132, v134);
        v139 = vaddq_s16(v135, v137);
        v140 = vsubq_s16(v135, v137);
        v141 = vaddq_s16(v138, v136);
        v142 = vsubq_s16(v136, v138);
        v143 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(vsubq_s16(v115, v139))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v89), (uint16x8_t)vabsq_s16(vaddq_s16(v139, v115)))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v91), (uint16x8_t)vabsq_s16(vaddq_s16(v141, v127))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(vsubq_s16(v127, v141))))), vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16(
                                                                       (uint16x8_t)vabsq_s16(v93),
                                                                       (uint16x8_t)vabsq_s16(vaddq_s16(v140, v121))),
                                                          (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v99), (uint16x8_t)vabsq_s16(vsubq_s16(v121, v140)))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v88, v81)), (uint16x8_t)vabsq_s16(vaddq_s16(v142, v133))))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v81, v88)), (uint16x8_t)vabsq_s16(vsubq_s16(v133, v142)))));
        v7 += 16;
        v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v143, v143), 1uLL);
      }
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    v144 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v144 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1C9814C28(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v6;
  uint64_t i;
  unsigned int v8;
  uint64_t v9;
  int16x8_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint8x16_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  BOOL v78;
  uint64_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  BOOL v97;
  float result;
  _BYTE v99[1032];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      for (i = 0; i < a1; i += 16)
      {
        v8 = 0;
        v9 = a3 + 2 * i;
        v10 = (int16x8_t *)v99;
        v11 = a5 + 2 * i;
        do
        {
          v12 = 0;
          v13 = 1;
          do
          {
            v14 = (uint8x8_t *)(v9 + v12);
            v15 = (uint8x8_t *)(v11 + v12);
            v16 = *(uint8x16_t *)&v14->i8[a4];
            v17 = *(uint8x16_t *)&v14->i8[2 * a4];
            v18 = *(uint8x16_t *)&v14->i8[3 * a4];
            v19 = *(uint8x16_t *)&v15->i8[a6];
            v20 = *(uint8x16_t *)&v15->i8[2 * a6];
            v21 = (int16x8_t)vsubl_u8(*v14, *v15);
            v22 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v14->i8, *(uint8x16_t *)v15->i8);
            v23 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v19.i8);
            v24 = (int16x8_t)vsubl_high_u8(v16, v19);
            v25 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v20.i8);
            v26 = (int16x8_t)vsubl_high_u8(v17, v20);
            v27 = *(uint8x16_t *)&v15->i8[3 * a6];
            v28 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v27.i8);
            v29 = (int16x8_t)vsubl_high_u8(v18, v27);
            v30 = vaddq_s16(v23, v21);
            v31 = vsubq_s16(v21, v23);
            v32 = vaddq_s16(v28, v25);
            v33 = vsubq_s16(v25, v28);
            v34 = vzip1q_s16(v30, v31);
            v35 = vzip2q_s16(v30, v31);
            v36 = vzip1q_s16(v32, v33);
            v37 = vzip2q_s16(v32, v33);
            v38 = (int32x4_t)vaddq_s16(v36, v34);
            v39 = (int32x4_t)vsubq_s16(v34, v36);
            v40 = (int32x4_t)vaddq_s16(v37, v35);
            v41 = (int32x4_t)vsubq_s16(v35, v37);
            v42 = (int16x8_t)vzip1q_s32(v38, v39);
            v43 = (int16x8_t)vzip2q_s32(v38, v39);
            v44 = (int16x8_t)vzip1q_s32(v40, v41);
            v45 = (int16x8_t)vzip2q_s32(v40, v41);
            v46 = vaddq_s16(v43, v42);
            v47 = vsubq_s16(v42, v43);
            v48 = vaddq_s16(v45, v44);
            v49 = vsubq_s16(v44, v45);
            v50 = vaddq_s16(v46, v48);
            v51 = vsubq_s16(v46, v48);
            v52 = vaddq_s16(v49, v47);
            v53 = vsubq_s16(v47, v49);
            v54 = vaddq_s16(v24, v22);
            v55 = vsubq_s16(v22, v24);
            v56 = vaddq_s16(v29, v26);
            v57 = vsubq_s16(v26, v29);
            v58 = vzip1q_s16(v54, v55);
            v59 = vzip2q_s16(v54, v55);
            v60 = vzip1q_s16(v56, v57);
            v61 = vzip2q_s16(v56, v57);
            v62 = (int32x4_t)vaddq_s16(v60, v58);
            v63 = (int32x4_t)vsubq_s16(v58, v60);
            v64 = (int32x4_t)vaddq_s16(v61, v59);
            v65 = (int32x4_t)vsubq_s16(v59, v61);
            v66 = (int16x8_t)vzip1q_s32(v62, v63);
            v67 = (int16x8_t)vzip2q_s32(v62, v63);
            v68 = (int16x8_t)vzip1q_s32(v64, v65);
            v69 = (int16x8_t)vzip2q_s32(v64, v65);
            v70 = vaddq_s16(v67, v66);
            v71 = vsubq_s16(v66, v67);
            v72 = vaddq_s16(v69, v68);
            v73 = vsubq_s16(v68, v69);
            v74 = vaddq_s16(v70, v72);
            v75 = vsubq_s16(v70, v72);
            v76 = vaddq_s16(v73, v71);
            *v10 = vaddq_s16(v74, v50);
            v10[1] = vaddq_s16(v76, v52);
            LOBYTE(v14) = v13;
            v77 = vsubq_s16(v71, v73);
            v10[2] = vaddq_s16(v75, v51);
            v10[3] = vaddq_s16(v77, v53);
            v10[4] = vsubq_s16(v50, v74);
            v10[5] = vsubq_s16(v52, v76);
            v10[6] = vsubq_s16(v51, v75);
            v10[7] = vsubq_s16(v53, v77);
            v10 += 8;
            v12 = 16;
            v13 = 0;
          }
          while ((v14 & 1) != 0);
          v9 += 4 * a4;
          v11 += 4 * a6;
          v78 = v8 >= 0xC;
          v8 += 4;
        }
        while (!v78);
        v79 = 0;
        v80 = 0uLL;
        do
        {
          v81 = *(int16x8_t *)&v99[v79];
          v82 = *(int16x8_t *)&v99[v79 + 128];
          v83 = *(int16x8_t *)&v99[v79 + 256];
          v84 = *(int16x8_t *)&v99[v79 + 384];
          v85 = *(int16x8_t *)&v99[v79 + 512];
          v86 = *(int16x8_t *)&v99[v79 + 640];
          v87 = *(int16x8_t *)&v99[v79 + 768];
          v88 = *(int16x8_t *)&v99[v79 + 896];
          v89 = vaddq_s16(v83, v81);
          v90 = vaddq_s16(v84, v82);
          v91 = vsubq_s16(v81, v83);
          v92 = vsubq_s16(v82, v84);
          v93 = vaddq_s16(v87, v85);
          v94 = vaddq_s16(v88, v86);
          v95 = vsubq_s16(v85, v87);
          v96 = vsubq_s16(v86, v88);
          v80 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v80, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v89, v93)), (uint16x8_t)vabsq_s16(vsubq_s16(v90, v94))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v93, v89)), (uint16x8_t)vabsq_s16(vaddq_s16(v94, v90))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v91, v95)), (uint16x8_t)vabsq_s16(vsubq_s16(v92, v96))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v95, v91)), (uint16x8_t)vabsq_s16(vaddq_s16(v96, v92)))));
          v79 += 16;
        }
        while (v79 != 128);
        v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v80, v80), 2uLL);
      }
    }
    a3 += 16 * a4;
    a5 += 16 * a6;
    v97 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v97 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1C9814F24(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int64x2_t v64;
  int16x8_t v65;
  int64x2_t v66;
  int16x8_t v67;
  int64x2_t v68;
  int16x8_t v69;
  int64x2_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  float result;

  v5 = (int16x8_t)vsubl_u8(*a1, *a3);
  v6 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
  v7 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2), *(uint8x8_t *)((char *)a3 + 2 * a4));
  v8 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2), *(uint8x8_t *)((char *)a3 + 3 * a4));
  v9 = (uint8x8_t *)((char *)a1 + 4 * a2);
  v10 = (uint8x8_t *)((char *)a3 + 4 * a4);
  v11 = (int16x8_t)vsubl_u8(*v9, *v10);
  v12 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + a2), *(uint8x8_t *)((char *)v10 + a4));
  v13 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 2 * a2), *(uint8x8_t *)((char *)v10 + 2 * a4));
  v14 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 3 * a2), *(uint8x8_t *)((char *)v10 + 3 * a4));
  v15 = vaddq_s16(v6, v5);
  v16 = vsubq_s16(v5, v6);
  v17 = vaddq_s16(v8, v7);
  v18 = vsubq_s16(v7, v8);
  v19 = vtrn1q_s16(v15, v16);
  v20 = vtrn2q_s16(v15, v16);
  v21 = vtrn1q_s16(v17, v18);
  v22 = vtrn2q_s16(v17, v18);
  v23 = vaddq_s16(v20, v19);
  v24 = vsubq_s16(v19, v20);
  v25 = vaddq_s16(v22, v21);
  v26 = vsubq_s16(v21, v22);
  v27 = (int32x4_t)vaddq_s16(v25, v23);
  v28 = (int32x4_t)vsubq_s16(v23, v25);
  v29 = (int32x4_t)vaddq_s16(v26, v24);
  v30 = (int32x4_t)vsubq_s16(v24, v26);
  v31 = (int16x8_t)vtrn1q_s32(v27, v28);
  v32 = (int16x8_t)vtrn2q_s32(v27, v28);
  v33 = (int16x8_t)vtrn1q_s32(v29, v30);
  v34 = (int16x8_t)vtrn2q_s32(v29, v30);
  v35 = vaddq_s16(v32, v31);
  v36 = vsubq_s16(v31, v32);
  v37 = vaddq_s16(v34, v33);
  v38 = vsubq_s16(v33, v34);
  v39 = vaddq_s16(v12, v11);
  v40 = vsubq_s16(v11, v12);
  v41 = vaddq_s16(v14, v13);
  v42 = vsubq_s16(v13, v14);
  v43 = vtrn1q_s16(v39, v40);
  v44 = vtrn2q_s16(v39, v40);
  v45 = vtrn1q_s16(v41, v42);
  v46 = vtrn2q_s16(v41, v42);
  v47 = vaddq_s16(v44, v43);
  v48 = vsubq_s16(v43, v44);
  v49 = vaddq_s16(v46, v45);
  v50 = vsubq_s16(v45, v46);
  v51 = (int32x4_t)vaddq_s16(v49, v47);
  v52 = (int32x4_t)vsubq_s16(v47, v49);
  v53 = (int32x4_t)vaddq_s16(v50, v48);
  v54 = (int32x4_t)vsubq_s16(v48, v50);
  v55 = (int16x8_t)vtrn1q_s32(v51, v52);
  v56 = (int16x8_t)vtrn2q_s32(v51, v52);
  v57 = (int16x8_t)vtrn1q_s32(v53, v54);
  v58 = (int16x8_t)vtrn2q_s32(v53, v54);
  v59 = vaddq_s16(v56, v55);
  v60 = vsubq_s16(v55, v56);
  v61 = vaddq_s16(v58, v57);
  v62 = vsubq_s16(v57, v58);
  *(uint32x4_t *)(a5 + 4) = vshrq_n_u32(vpaddlq_u16((uint16x8_t)vpaddq_s16(vaddq_s16(vaddq_s16(vabsq_s16(v37), vabsq_s16(v35)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v38))), vaddq_s16(vaddq_s16(vabsq_s16(v61), vabsq_s16(v59)), vaddq_s16(vabsq_s16(v60), vabsq_s16(v62))))), 1uLL);
  v63 = vaddq_s16(v59, v35);
  v64 = (int64x2_t)vsubq_s16(v35, v59);
  v65 = vaddq_s16(v61, v37);
  v66 = (int64x2_t)vsubq_s16(v37, v61);
  v67 = vaddq_s16(v60, v36);
  v68 = (int64x2_t)vsubq_s16(v36, v60);
  v69 = vaddq_s16(v62, v38);
  v70 = (int64x2_t)vsubq_s16(v38, v62);
  v71 = (int16x8_t)vzip2q_s64((int64x2_t)v63, v64);
  v72 = (int16x8_t)vzip2q_s64((int64x2_t)v65, v66);
  v73 = (int16x8_t)vzip2q_s64((int64x2_t)v67, v68);
  v74 = (int16x8_t)vzip2q_s64((int64x2_t)v69, v70);
  v63.i64[1] = v64.i64[0];
  v65.i64[1] = v66.i64[0];
  v67.i64[1] = v68.i64[0];
  v69.i64[1] = v70.i64[0];
  result = COERCE_FLOAT(vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v65), (uint16x8_t)vabsq_s16(v72)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v63), (uint16x8_t)vabsq_s16(v71))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v67), (uint16x8_t)vabsq_s16(v73)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v69), (uint16x8_t)vabsq_s16(v74))))));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

float sub_1C9815138(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int32x4_t v6;
  uint64_t v7;
  uint32x4_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  float result;
  int16x8_t v42[32];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  sub_1C9815DDC(a1, a2, a3, a4, 16, v42, 4u, (uint32x4_t *)(a5 + 20));
  v6 = 0uLL;
  v7 = 9;
  v8 = 0uLL;
  do
  {
    v9 = v42[v7 - 9];
    v10 = v42[v7 - 8];
    v11 = v42[v7 - 1];
    v12 = v42[v7];
    v13 = v42[v7 + 7];
    v14 = v42[v7 + 8];
    v15 = v42[v7 + 15];
    v16 = v42[v7 + 16];
    v17 = vaddq_s16(v11, v9);
    v18 = vaddq_s16(v12, v10);
    v19 = (int64x2_t)vsubq_s16(v9, v11);
    v20 = (int64x2_t)vsubq_s16(v10, v12);
    v21 = vaddq_s16(v15, v13);
    v22 = vaddq_s16(v16, v14);
    v23 = (int64x2_t)vsubq_s16(v13, v15);
    v24 = (int64x2_t)vsubq_s16(v14, v16);
    v25 = (int16x8_t)vzip2q_s64((int64x2_t)v17, v19);
    v26 = (int16x8_t)vzip2q_s64((int64x2_t)v18, v20);
    v27 = (int16x8_t)vzip2q_s64((int64x2_t)v21, v23);
    v28 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v24);
    v17.i64[1] = v19.i64[0];
    v18.i64[1] = v20.i64[0];
    v29 = vaddq_s16(v25, v17);
    v30 = vaddq_s16(v26, v18);
    v31 = vsubq_s16(v17, v25);
    v21.i64[1] = v23.i64[0];
    v22.i64[1] = v24.i64[0];
    v32 = vsubq_s16(v18, v26);
    v33 = vaddq_s16(v27, v21);
    v34 = vaddq_s16(v28, v22);
    v35 = vsubq_s16(v21, v27);
    v36 = vsubq_s16(v22, v28);
    v37 = vaddq_s16(vabsq_s16(v31), vabsq_s16(v29));
    v38 = vaddq_s16(vabsq_s16(v32), vabsq_s16(v30));
    v39 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v29, v33)), (uint16x8_t)vabsq_s16(vsubq_s16(v30, v34))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v33, v29)), (uint16x8_t)vabsq_s16(vaddq_s16(v34, v30))));
    v40 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v31, v35)), (uint16x8_t)vabsq_s16(vsubq_s16(v32, v36))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v35, v31)), (uint16x8_t)vabsq_s16(vaddq_s16(v36, v32))));
    v8 = vpadalq_u16(v8, (uint16x8_t)vpaddq_s16(vpaddq_s16(v37, v38), vpaddq_s16(vaddq_s16(vabsq_s16(v35), vabsq_s16(v33)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v34)))));
    v6 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v6, v39), *(uint16x4_t *)v39.i8), v40), *(uint16x4_t *)v40.i8);
    v7 += 2;
  }
  while (v7 != 17);
  *(uint32x4_t *)(a5 + 4) = vrshrq_n_u32(v8, 2uLL);
  result = COERCE_FLOAT(vaddvq_s32(v6));
  *(_DWORD *)a5 = (LODWORD(result) + 2) >> 2;
  return result;
}

float sub_1C98152F8(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int16x8_t *v10;
  unsigned int i;
  int32x4_t v12;
  uint64_t v13;
  uint32x4_t v14;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  uint32x4_t v56;
  int v57;
  uint64_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  float result;
  int16x8_t v73[64];
  int16x8_t v74[64];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v10 = v73;
  sub_1C9815DDC(a1, a2, a3, a4, 32, v73, 8u, (uint32x4_t *)(a5 + 84));
  sub_1C9815DDC(a1 + 2, a2, a3 + 2, a4, 32, v74, 8u, (uint32x4_t *)(a5 + 100));
  for (i = 0; i != 4; ++i)
  {
    v12 = 0uLL;
    v13 = 9;
    v14 = 0uLL;
    do
    {
      v15 = &v10[v13];
      v16 = v10[v13 - 9];
      v17 = v10[v13 - 8];
      v18 = v10[v13 - 1];
      v19 = v10[v13];
      v20 = v10[v13 + 7];
      v21 = v10[v13 + 8];
      v22 = vaddq_s16(v18, v16);
      v23 = vaddq_s16(v19, v17);
      v24 = v10[v13 + 15];
      v25 = v10[v13 + 16];
      v26 = (int64x2_t)vsubq_s16(v16, v18);
      v27 = (int64x2_t)vsubq_s16(v17, v19);
      v28 = vaddq_s16(v24, v20);
      v29 = vaddq_s16(v25, v21);
      v30 = (int64x2_t)vsubq_s16(v20, v24);
      v31 = (int64x2_t)vsubq_s16(v21, v25);
      v32 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v26);
      v33 = (int16x8_t)vzip2q_s64((int64x2_t)v23, v27);
      v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
      v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
      v22.i64[1] = v26.i64[0];
      v23.i64[1] = v27.i64[0];
      v36 = vaddq_s16(v32, v22);
      v37 = vaddq_s16(v33, v23);
      v38 = vsubq_s16(v22, v32);
      v39 = vsubq_s16(v23, v33);
      v28.i64[1] = v30.i64[0];
      v29.i64[1] = v31.i64[0];
      v40 = vaddq_s16(v34, v28);
      v41 = vaddq_s16(v35, v29);
      v42 = vsubq_s16(v28, v34);
      v43 = vsubq_s16(v29, v35);
      v14 = vpadalq_u16(v14, (uint16x8_t)vpaddq_s16(vpaddq_s16(vaddq_s16(vabsq_s16(v38), vabsq_s16(v36)), vaddq_s16(vabsq_s16(v39), vabsq_s16(v37))), vpaddq_s16(vaddq_s16(vabsq_s16(v42), vabsq_s16(v40)), vaddq_s16(vabsq_s16(v43), vabsq_s16(v41)))));
      v44 = vsubq_s16(v36, v40);
      v45 = vsubq_s16(v37, v41);
      v46 = vsubq_s16(v38, v42);
      v47 = vsubq_s16(v39, v43);
      v12 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v12, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v44), (uint16x8_t)vabsq_s16(v45)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v36)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v37))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v46), (uint16x8_t)vabsq_s16(v47)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v42, v38)), (uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)))));
      v48 = vrhaddq_s16(v36, v40);
      v49 = vrhaddq_s16(v37, v41);
      v50 = vrshrq_n_s16(v44, 1uLL);
      v51 = vrshrq_n_s16(v45, 1uLL);
      v52 = vrhaddq_s16(v38, v42);
      v53 = vrhaddq_s16(v39, v43);
      v54 = vrshrq_n_s16(v46, 1uLL);
      v15[-9] = vhaddq_s16(v48, v49);
      v15[-8] = vhaddq_s16(v50, v51);
      v55 = vrshrq_n_s16(v47, 1uLL);
      v15[-1] = vhaddq_s16(v52, v53);
      *v15 = vhaddq_s16(v54, v55);
      v15[7] = vhsubq_s16(v48, v49);
      v15[8] = vhsubq_s16(v50, v51);
      v15[15] = vhsubq_s16(v52, v53);
      v15[16] = vhsubq_s16(v54, v55);
      v13 += 2;
    }
    while (v13 != 17);
    v56 = vrshrq_n_u32(v14, 2uLL);
    v57 = (i & 0x7FFFFFFE) + 8 * (i & 1);
    *(_QWORD *)(a5 + 4 * (v57 + 5)) = v56.i64[0];
    *(_QWORD *)(a5 + 4 * (v57 + 9)) = v56.i64[1];
    *(_DWORD *)(a5 + 4 * ((i >> 1) + 2 * (i & 1) + 1)) = (vaddvq_s32(v12) + 2) >> 2;
    v10 += 32;
  }
  v58 = 0;
  v59 = 0uLL;
  do
  {
    v60 = v73[v58];
    v61 = v73[v58 + 1];
    v62 = v73[v58 + 64];
    v63 = v74[v58 + 1];
    v64 = v73[v58 + 32];
    v65 = v73[v58 + 33];
    v66 = v74[v58 + 32];
    v67 = v74[v58 + 33];
    v68 = vaddq_s16(v64, v60);
    v69 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v60, v64)), (uint16x8_t)vabsq_s16(vsubq_s16(v62, v66)));
    v70 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v65, v61)), (uint16x8_t)vabsq_s16(vaddq_s16(v67, v63))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v68), (uint16x8_t)vabsq_s16(vaddq_s16(v66, v62))));
    v71 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v61, v65)), (uint16x8_t)vabsq_s16(vsubq_s16(v63, v67))), v69);
    v59 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v59, v70), *(uint16x4_t *)v70.i8), v71), *(uint16x4_t *)v71.i8);
    v58 += 2;
  }
  while (v58 != 32);
  result = COERCE_FLOAT(vaddvq_s32(v59));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

uint64x2_t sub_1C9815634(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int a6, uint64x2_t *a7)
{
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  unsigned int v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  uint8x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint8x16_t v35;
  uint8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  BOOL v60;
  uint64x2_t result;

  if (a5 == 4)
  {
    v7 = (int16x8_t)vsubl_u8(*a1, *a3);
    v8 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
    v9 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2), *(uint8x8_t *)((char *)a3 + 2 * a4));
    v10 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2), *(uint8x8_t *)((char *)a3 + 3 * a4));
    v11 = vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v7.i8);
    v12 = vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v8.i8);
    v13 = vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8);
    v14 = vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8);
    v15 = vmull_high_s16(v7, v7);
    v16 = vmull_high_s16(v8, v8);
    v17 = vmull_high_s16(v9, v9);
    v18 = vmull_high_s16(v10, v10);
    if (a6 >= 5)
    {
      v19 = a6 + 4;
      do
      {
        v20 = *(uint8x8_t *)((char *)a1 + 5 * a2);
        v21 = *(uint8x8_t *)((char *)a1 + 6 * a2);
        v22 = *(uint8x8_t *)((char *)a1 + 7 * a2);
        v23 = *(uint8x8_t *)((char *)a3 + 5 * a4);
        a1 = (uint8x8_t *)((char *)a1 + 4 * a2);
        v24 = *(uint8x8_t *)((char *)a3 + 6 * a4);
        v25 = *(uint8x8_t *)((char *)a3 + 7 * a4);
        a3 = (uint8x8_t *)((char *)a3 + 4 * a4);
        v26 = (int16x8_t)vsubl_u8(*a1, *a3);
        v27 = (int16x8_t)vsubl_u8(v20, v23);
        v28 = (int16x8_t)vsubl_u8(v21, v24);
        v29 = (int16x8_t)vsubl_u8(v22, v25);
        v11 = vmlal_s16(v11, *(int16x4_t *)v26.i8, *(int16x4_t *)v26.i8);
        v12 = vmlal_s16(v12, *(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8);
        v13 = vmlal_s16(v13, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
        v14 = vmlal_s16(v14, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
        v15 = vmlal_high_s16(v15, v26, v26);
        v16 = vmlal_high_s16(v16, v27, v27);
        v17 = vmlal_high_s16(v17, v28, v28);
        v18 = vmlal_high_s16(v18, v29, v29);
        v19 -= 4;
      }
      while (v19 > 8);
    }
    v30 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v12, v14), vaddq_s32(v11, v13)), vaddq_s32(vaddq_s32(v15, v16), v17)), v18);
  }
  else
  {
    v31 = (char *)a1 + 3 * a2;
    v32 = (char *)a1 + 2 * a2;
    v33 = (char *)a3 + 3 * a4;
    v30 = 0uLL;
    v34 = (char *)a3 + 2 * a4;
    do
    {
      v35 = *(uint8x16_t *)&a1->i8[a2];
      v36 = *(uint8x16_t *)&a3->i8[a4];
      v37 = (int16x8_t)vsubl_u8(*a1, *a3);
      v38 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
      v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v36.i8);
      v40 = (int16x8_t)vsubl_high_u8(v35, v36);
      v41 = vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v37.i8);
      v42 = vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v38.i8);
      v43 = vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8);
      v44 = vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8);
      v45 = vmull_high_s16(v37, v37);
      v46 = vmull_high_s16(v38, v38);
      v47 = vmull_high_s16(v39, v39);
      v48 = vmull_high_s16(v40, v40);
      if (a6 >= 3)
      {
        v49 = 0;
        v50 = 0;
        v51 = a6 + 2;
        do
        {
          v52 = *(uint8x16_t *)&v32[v50];
          v53 = *(uint8x16_t *)&v31[v50];
          v54 = *(uint8x16_t *)&v34[v49];
          v55 = *(uint8x16_t *)&v33[v49];
          v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v54.i8);
          v57 = (int16x8_t)vsubl_high_u8(v52, v54);
          v58 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v55.i8);
          v59 = (int16x8_t)vsubl_high_u8(v53, v55);
          v41 = vmlal_s16(v41, *(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8);
          v42 = vmlal_s16(v42, *(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8);
          v43 = vmlal_s16(v43, *(int16x4_t *)v58.i8, *(int16x4_t *)v58.i8);
          v44 = vmlal_s16(v44, *(int16x4_t *)v59.i8, *(int16x4_t *)v59.i8);
          v45 = vmlal_high_s16(v45, v56, v56);
          v46 = vmlal_high_s16(v46, v57, v57);
          v47 = vmlal_high_s16(v47, v58, v58);
          v48 = vmlal_high_s16(v48, v59, v59);
          v51 -= 2;
          v50 += 2 * a2;
          v49 += 2 * a4;
        }
        while (v51 > 4);
      }
      a1 += 2;
      a3 += 2;
      v31 += 16;
      v30 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v41, v43), v45), v47), vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v30, v42), v44), v46), v48));
      v32 += 16;
      v33 += 16;
      v34 += 16;
      v60 = __OFSUB__(a5, 8);
      a5 -= 8;
    }
    while (!((a5 < 0) ^ v60 | (a5 == 0)));
  }
  result = vpaddlq_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v30, (int8x16_t)xmmword_1C9863010));
  *a7 = result;
  return result;
}

